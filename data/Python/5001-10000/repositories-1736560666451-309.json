{
  "metadata": {
    "timestamp": 1736560666451,
    "page": 309,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "icloud-photos-downloader/icloud_photos_downloader",
      "stars": 7406,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1669921875,
          "content": "**/.DS_Store\nbuild/\nhtmlcov/\nicloudpd.egg-info\ncron_script.sh\n.vscode\n**/__pycache__\n.pytest_cache/\n.cache\n*.pyc\n.idea\n.coverage\n.coverage.*\n.git\ntests/\n.venv\nvenv\ncreate/"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0126953125,
          "content": "* text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3486328125,
          "content": ".DS_Store\nbuild/\ndist/\nwheelhouse/\nicloudpd.egg-info\ntests/fixtures/**\n__pycache__\n.pytest_cache\n.cache\n*.pyc\n.idea\n.coverage\n.coverage.*\nhtmlcov\n*.whl\n.venv\nvenv\n*.spec\n# docs\ndocs/_build\n# exclude since there is no js development, just for local testing npm packaging\nnode_modules/\n/package.json\n/package-lock.json\n# used for local troubleshooting\n.photos"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.2353515625,
          "content": "# Change log\n\n## Unreleased\n\n- feature: add `--keep-icloud-recent-days` parameter to keep photos newer than this many days in iCloud. Deletes the rest.\n\n## 1.25.1 (2024-12-28)\n\n- chore: bump max/default python version 3.12->3.13\n- chore: bump min python version 3.8->3.9\n- fix: fallback to old raw password auth if srp auth fails [#975](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/975)\n\n## 1.25.0 (2024-12-03)\n\n- fix: failed to authenticate for accounts with srp s2k_fo auth protocol [#975](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/975)\n- fix: failed to login non-2FA account for the first attempt [#1012](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/1012)\n- fix: log more information for authentication error [#1010](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/1010)\n- feature: add support for XMP files with `--xmp-sidecar` parameter [#448](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/448), [#102](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/102), [#789](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/789)\n\n## 1.24.4 (2024-11-18)\n\n- fix: deprecate macos-12 [#1000](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/1000)\n- fix: sms MFA dropping leading zeros [#993](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/993)\n\n## 1.24.3 (2024-11-03)\n\n- fix: crashes when no imagetype sent by Apple [ref](https://github.com/boredazfcuk/docker-icloudpd/issues/680)\n\n## 1.24.2 (2024-11-02)\n\n- fix: errors for accounts with salt started with zero byte [#975](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/975)\n\n## 1.24.1 (2024-10-28)\n\n- fix: accounts without 2fa are supported [#959](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/959)\n\n## 1.24.0 (2024-10-25)\n\n- fix: new AppleID auth with srp [#970](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/970)\n- feature: when ran without parameters, `icloudpd` shows help [#963](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/963)\n- fix: force_size should not skip subsequent sizes [#955](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/955)\n\n## 1.23.4 (2024-09-02)\n\n- fix: support plain text encoding for filename in addition to base64 [ref](https://github.com/boredazfcuk/docker-icloudpd/issues/641)\n\n## 1.23.3 (2024-09-01)\n\n- more debug added for parsing filenameEnc [#935](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/935) and [ref](https://github.com/boredazfcuk/docker-icloudpd/issues/641)\n\n## 1.23.2 (2024-08-31)\n\n- dump encoded filename in exception when there is an error in decoding it [#935](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/935) and [ref](https://github.com/boredazfcuk/docker-icloudpd/issues/641)\n\n## 1.23.1 (2024-08-22)\n\n- fix: use a-z for sms mfa index to disambiguate with mfa code with leading zeros [#925](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/925)\n- fix: report proper error on bad `--folder-structure` value [#937](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/937)\n\n## 1.23.0 (2024-07-25)\n\n- feature: update webui and allow to cancel and resume sync \n- deprecate linux 386 and arm v6 support\n- add linux musl builds\n\n## 1.22.0 (2024-07-12)\n\n- feature: support for using locale from OS with `--use-os-locale` flag [#897](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/897)\n- fix: swallow keyring errors [#871](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/871)\n\n## 1.21.0 (2024-07-05)\n\n- feature: add webui for entering password with `--password-provider webui` parameter [#805](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/805)\n- feature: add webui for entering MFA code with `--mfa-provider webui` parameter [#805](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/805)\n- fix: allow MFA with leading zeros [ref](https://github.com/boredazfcuk/docker-icloudpd/issues/599)\n\n## 1.20.4 (2024-06-30)\n\n- fix: SMS MFA [#803](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/803)\n\n## 1.20.3 (2024-06-29)\n\n- fix: release to PyPi [#883](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/883)\n\n## 1.20.2 (2024-06-28)\n\n- fix: match SMS MFA to icloud.com behavior [#803](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/803)\n\n## 1.20.1 (2024-06-18)\n\n- fix: keyring handling in `icloud` [#871](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/871)\n\n## 1.20.0 (2024-06-16)\n\n- feature: customize choice and the order of checking for password with `--password-provider` parameter\n- feature: support multiple file naming and de-deplication policies with `--file-match-policy` parameter. Rel to [#346](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/346)\n\n## 1.19.1 (2024-06-02)\n\n- fix: KeyError alternative [#859](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/859)\n\n## 1.19.0 (2024-05-31)\n\n- fix: release notes [#849](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/849)\n- fix: auto deletion when `--folder-structure` is set to `none` [#831](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/831)\n- fix: Apple/Adobe DNG raw photos are recognised as images [#662](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/662)\n- feature: support multiple `--size` parameter specifications in command line\n- fix: file extensions for non-original version matching type of the asset in the version\n- feature: support downloading adjusted files with `--size adjusted` parameter (portraits, edits, etc) with fallback to `original` [#769](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/769) [#704](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/704) [#350](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/350) [#249](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/249)\n- feature: support for CR2,CR3,CRW,ARW,RAF,RW2,NRF,PEF,NEF,ORF raw image formats [#675](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/675)\n- feature: support `--size alternative` for alternative originals, e.g. raw+jpeg, with fallback to `original` [#675](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/675)\n- feature: add `--align-raw` param to treat raw in raw+jpeg as original, alternative (jpeg+raw), or as-is, default to as-is\n\n## 1.18.0 (2024-05-27)\n\n- feature: add parameter `--live-photo-mov-filename-policy` to control naming of video portion of live photos with default `suffix` for compatibility [#500](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/500)\n- feature: add parameter `--keep-unicode-in-filenames` with default `false` for compatibility [#845](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/845)\n- fix: avoid parsing json from empty responses [#837](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/837)\n\n## 1.17.7 (2024-05-25)\n\n- fix: keyring exception [#841](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/841)\n- fix: delete iCloud asset in respective shared library [#802](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/802)\n\n## 1.17.6 (2024-05-23)\n\n- fix: missing exception [#836](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/836)\n\n## 1.17.5 (2024-04-27)\n\n- experimental: fix errors in npm packages\n- fix: allow calls for trusted devices to fail silently [#819](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/819)\n\n## 1.17.4 (2024-04-10)\n\n- fix: restore support for SMS MFA [#803](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/803)\n\n## 1.17.3 (2024-01-03)\n\n- improve compatibility for diffeent platforms [#748](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/748)\n\n## 1.17.2 (2023-12-22)\n\n- fix: module not found [#748](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/748)\n\n## 1.17.1 (2023-12-20)\n\n- fix: main macos binary failing [#668](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/668) [#700](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/700)\n- fix: debian glibc error [#741](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/741)\n\n## 1.17.0 (2023-12-19)\n\n- fix: macos binary failing [#668](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/668) [#700](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/700)\n- fix: 'Invalid email/password combination' exception due to recent iCloud changes [#729](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/729)\n- feature: `--auth-only` parameter to independently create/validate session tokens without listing/downloading photos\n- feature: 2FA validation merged from `pyicloud`\n\n## 1.16.3 (2023-12-04)\n\n- fix: file date attribute [#714](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/714)\n- fix: `icloud --username` parameter reported as not an option [#719](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/719)\n\n## 1.16.2 (2023-09-30)\n\n- fix: send logs to stdout [#697](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/697)\n\n## 1.16.1 (2023-09-27)\n\n- fix: shared libraries throw INTERNAL_ERROR for some users [#690](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/690)\n\n## 1.16.0 (2023-09-25)\n\n- feature: shared library support with `--list-libraries` and `--library` parameters [#455](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/455), [#489](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/489), [#678](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/678)\n\n## 1.15.1 (2023-07-16)\n\n- fix: excessive logging for existing and deduplicated files\n- fix: add missing docker platforms back\n\n## 1.15.0 (2023-07-16)\n\n- fix: logs when progress bar enabled\n- feature: `--dry-run` parameter to run icloudpd without changes to local files and iCloud\n- fix: pypi.org license and description\n\n## 1.14.5 (2023-07-06)\n\n- fix: pypi publishing for macos\n\n## 1.14.4 (2023-07-06)\n\n- fix: docker auth during publishing\n\n## 1.14.3 (2023-07-06)\n\n- add binary wheel without dependencies to pypi\n- fix: remove tests from pypi distributions\n\n## 1.14.2 (2023-07-03)\n\n- fix: finite retry on unhandled errors during photo iteration [#642](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/642)\n- fix: retry on internal error during deletion [#615](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/615)\n\n## 1.14.1 (2023-07-02)\n\n- fix: retry authN on session error during deletion [#647](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/647)\n\n## 1.14.0 (2023-07-01)\n\n- fix: auto-delete date mismatch [#345](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/345)\n- fix: `--version` parameter\n\n## 1.13.4 (2023-06-14)\n\n- experimental: fix npm packaging\n\n## 1.13.4 (2023-06-11)\n\n- experimental: fix npm registry publishing\n\n## 1.13.2 (2023-06-10)\n\n- experimental: fix npm registry publishing\n\n## 1.13.1 (2023-06-10)\n\n- experimental: add support for distributing `icloudpd` with [npm](README_NPM.md) package manager\n\n## 1.13.0 (2023-04-21)\n\n- fix: only delete files successfully downloaded [#614](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/614)\n\n## 1.12.0 (2023-03-10)\n\n- experimental: add macos binary [#551](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/551)\n- fix: add `icloud` script to the source distribution [#594](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/594)\n\n## 1.11.0 (2023-02-24)\n\n- feature: add experimental mode for new cli\n\n## 1.10.0 (2023-02-17)\n\n- feature: add `--watch-with-interval` parameter [#568](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/568)\n- fix: allow spaces in filenames [#378](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/378)\n- feature: add `--notification-email-from` parameter [#496](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/496)\n\n## 1.9.0 (2023-02-10)\n\n- fix: replace invalid chars in filenames with '_' [#378](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/378)\n- feature: add `--domain` parameter to support mainland China [#572](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/572), [#545](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/545)\n- feature: add `linux/arm/v7` and `linux/arm/v6` docker image [#434](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/434)\n\n## 1.8.1 (2023-02-03)\n\n- fix: avoid crash when downloading over legacy `-original` name [#338](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/338)\n- fix: remove mac binary unitl Apple signing is supported [#551](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/551)\n- fix: PyPI distribution [#549](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/549)\n- fix: keyring error [#539](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/539)\n\n## 1.8.0 (2023-01-27)\n\n- update dependencies to solve [#539](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/539)\n- feature: a new command line option `--delete-after-download` to allow user to delete photos in the iCloud right after download is complete. [#431](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/431), [#368](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/368) [#314](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/314) [#124](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/124) [#332](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/332)\n\n## 1.7.3 (2023-01-20)\n\n- deprecating python 3.6\n- experimental: package `icloudpd` & `icloud` as executables [#146](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/146)\n\n## 1.7.2 (2021-01-16)\n\n- fix: smtp server_hostname cannot be an empty [#227](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/227)\n- fix: Warning for missing `tzinfo` in Docker image removed by adding `tzinfo`-package.\n[#286](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/286)\n\n## 1.7.1 (2020-11-15)\n\n- fix: dev Docker build on Windows correctly manages crlf for scripts\n\n## 1.7.1rc1 (2020-11-10)\n\n- fix: --only-print-filenames option displays filenames (live photos) of files that have already been downloaded #200\n- fix: docker works on Windows #192\n\n## 1.7.0 (2020-11-1)\n\n- fix: --log-level option [#194](https://github.com/icloud-photos-downloader/icloud_photos_downloader/pull/194)\n- feature: Folder structure can be set to 'none' instead of a date pattern,\nso all photos will be placed directly into the download directory.\n- fix: Empty directory structure being created #185\n- feature: removed multi-threaded downloading and added deprecation notice to --threads-num parameter #180, #188\n- fix: documentation issues, first addressed in #141 and separated contribution\ninfo from README.md into CONTRIBUTING.md\n\n## 1.6.2 (2020-10-23)\n\n- Began recording updates in `CHANGELOG.md`\n- fix: reduce chances of IOErrors by changing default --threads_num to 1 #155, #163\n- fix: reduce chances of errors due to missing required parameters #175\n- fix: missing downloading process by upgrading tqdm dependency #167\n\n--------------------------------------------\n\n## Earlier Versions\n\nPlease refer to the commit history in GitHub:\n<https://github.com/icloud-photos-downloader/icloud_photos_downloader/commits/master>\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.208984375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team by opening an [issue](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues/new). All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.7138671875,
          "content": "# Contributing iCloud Photos Downloader\n\n[//]: # (inspired from https://raw.githubusercontent.com/keepassxreboot/keepassxc/develop/.github/CONTRIBUTING.md)\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\nWe'd love your contributions to iCloud Photos Downloader. You don't have to know how to code to be able to help!\n\nPlease review the following guidelines before contributing.  Also, feel free to propose changes to these guidelines by updating this file and submitting a pull request.\n\n## Table of contents\n\n[How can I contribute?](#how-can-i-contribute)\n\n* [Feature requests](#feature-requests)\n* [Bug reports](#bug-reports)\n* [Discuss with the team](#discuss-with-the-team)\n* [Your first code contribution](#your-first-code-contribution)\n* [Pull request process](#pull-request-process)\n\n[Setting up the development environment](#setting-up-the-development-environment)\n\n[How to write a unit test](#how-to-write-a-unit-test)\n\nPlease note we have a [Code of Conduct](CODE_OF_CONDUCT.md), please follow it in all your interactions with the project.\n\nChore:\n- [How to release](#how-to-release)\n\n\n## How can I contribute?\n\nThere are several ways to help this project. Let us know about missing features, or report errors. You could even help others by responding to questions about using the project in the [issue tracker on GitHub][issues-section].\n\n### Feature requests\n\nWe're always looking for suggestions to improve our application. If you have a suggestion to improve an existing feature, or would like to suggest a completely new feature, please use the [issue tracker on GitHub][issues-section].\n\n### Bug reports\n\nOur software isn't always perfect, but we strive to always improve our work. You may file bug reports in the issue tracker.\n\nBefore submitting a bug report, check if the problem has already been reported. Please refrain from opening a duplicate issue. If you want to add further information to an existing issue, simply add a comment on that issue.\n\n### Discuss with the team\n\nWhen contributing to this repository, please first discuss the change you wish to make via issue,\nemail, or any other method with the owners of this repository before making a change.\n\n### Your first code contribution\n\nUnsure where to begin contributing to this project? You can start by looking through these `good first issue` and `help-wanted` issues:\n\n* [Good first issues](good+first+issue) – issues which should only require a few lines of code, and a test or two.\n* ['Help wanted' issues](help-wanted) – issues which should be a bit more involved than `beginner` issues.\n\nBoth issue lists are sorted by total number of comments. While not perfect, looking at the number of comments on an issue can give a general idea of how much an impact a given change will have.\n\n## Pull Request Process\n\nThere are some requirements for pull requests:\n\n* All bug fixes should be covered (before/after scenario) with a corresponding\n  unit test, refer to [How to write a unit test](#how-to-write-a-unit-test) All other tests pass. Run `./scripts/test`\n* 100% test coverage also for new features is expected.\n  * After running `./scripts/test`, you will see the test coverage results in the output\n  * You can also open the HTML report at: `./htmlcov/index.html`\n* Code is formatted with [ruff](https://github.com/astral-sh/ruff). Run `./scripts/format`\n* No lint errors. Run `./scripts/lint`\n* If you've added or changed any command-line options,\n  please update the [Usage](README.md#usage) section in the README.md.\n* Make sure your change is documented in the\n[Unreleased](CHANGELOG.md#unreleased) section in the CHANGELOG.md.\n* We aim to push out a Release once a week (Fridays), if there is at least one new change in CHANGELOG.\n\nIf you need to make any changes to the `pyicloud` library,\n`icloudpd` uses a fork of this library that has been added as a subfolder `pyicloud_ipd`.\n\n## Setting up the development environment\n\n### Dev Containers\n\nEasy way to isolate development from the rest of host system is by using Docker containers (devcontainers). VS Code & GitHub Codespaces support this workflow and repository is configured for their use.\n\nVS Code supports local devcontainers (running on the same host as VS Code; require Docker on the host, obviously) as well as remote ones.\n\n### Install Python dependencies\n\n``` sh\nscripts/install_deps\n```\n\nInstalls project for editing mode (install all dev and test dependencies too). You can use `icloudpd` script from terminal as well.\n\n### Formatting Python code\n\n``` sh\nscripts/format\n```\n\n### Validating app behavior\n\nRun lint & tests:\n\n``` sh\nscripts/lint\n```\n\n``` sh\nscripts/test\n```\n\n### Building packages\n\nBuilding Python wheel (with python source files):\n\n``` sh\nscripts/build\n```\n\nBuilding platform executables:\n\n``` sh\nscripts/build_bin2 icloudpd icloud\nscripts/build_bin1 icloud\nscripts/build_bin1 icloudpd_ex\n```\nNote: that command is for Linux, including devcontainers. Windows & macOS scripts must be executed on respective platforms.\n\nBuilding Linux static executables:\n\n``` sh\nscripts/build_static icloudpd\nscripts/build_static icloud\nscripts/build_static icloudpd_ex\n```\n\nBuilding Python wheels (with executable):\n\n``` sh\nscripts/build_whl\n```\nNote: that the step expects executables to be already prepared by previous steps\n\nBuilding NPM packages (with single executables; platform-specific):\n\n``` sh\nscripts/build_npm 1.25.1\n```\nNote: that the step expects executables to be already prepared by previous steps\n\n### Building packages (alternative for Linux)\n\n``` sh\ndocker buildx create --use --driver=docker-container --name container --bootstrap\ndocker buildx build . --cache-to type=local,dest=.cache,mode=max --cache-from type=local,src=.cache --platform=linux/amd64 --builder=container --progress plain -o dist -f Dockerfile.build\n```\n\nNote: command will produce binaries and .whl for selected platform in dist folder\n\nFor `musl` binaries, use `Dockerfile.build-musl`\n\n### Building the Docker\n\n``` sh\ndocker build -t icloudpd_dev_ .\n```\nNote: command packs existing musl binaries from dist folder\n\n### Developing Documentation\n\nTo compile docs and start web server with hot reloading:\n\n``` sh\nsphinx-autobuild docs docs/_build/html\n```\n\n## How to write a unit test\n\nThe unit tests are a very important asset of this project. Due to our 100% test coverage we can safely use great tools like [Dependabot](dependabot.com) and be sure that the implementation of a new feature or fixing of a bug does not lead to further issues.\n\nWe're relying on [pytest](pytest.org) for the creation of our tests and [VCR.py](https://github.com/kevin1024/vcrpy) for automatic mocking of the communication to iCloud. This makes the creation of test cases rather simple as you don't have to deal with the communication to iCloud itself and can just focus on the \"real test\". Both tools maintain great howtos that can be found here:\n\n* pytest documentation: https://docs.pytest.org/en/stable/\n* VCR.py documentation: https://vcrpy.readthedocs.io/en/latest/\n\nIt is highly recommended having a look at those.\n\nThe process is mostly like this (assuming we're talking about a bug fix here...)\n\n1. Is there already a related test case existing? If so you can just check if an existing test needs to check for another situation.\n1. If not, then you need to make sure you have corresponding test-data at hand; that means: your iCloud photos library should have a constellation that leads to the error in `icloudpd`.\n1. Add a test-function that runs `icloudpd` with the necessary start parameters, referencing to a new cassette file.\n1. **VERY IMPORTANT:** the real iCloud response is cached, so every image is saved in the cassette. That means:\n   1. Don't use private photos!\n   1. Keep the dataset small (p.e. using `--recent`)\n   1. Remove your personal information from the cached REST-response (Name, email addresses)\n1. Go back to the previous step and verify again that you followed the recommendations!\n1. Now you can start adding tests.\n\nRefer to the existing tests for inspiration. A very simple test to understand the basic idea might be the test for the listing of albums option in `tests/test_listing_albums.py`.\n\nWhen testing a bug fix it is important to test the faulty behavior and also the expected behavior.\n\n## How to release\n\nWe have GitHub actions taking care for building, testing, and releasing software. Building and testing are happening automatically on git pushed, pull requests, and merges. For releases the following steps are manual:\n- Bump version in all files, including all source files\n- Update CHANGELOG.md with release changes if they were not added with commits\n- Update CHANGELOG.md with date of the release\n- Commit & push changes (either directly or through pull requests)\n- Add version tag to head (`git tag v1.25.1`) and push it to master (`git push origin v1.25.1`) -- there seems to be no way to do that in UI\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.8359375,
          "content": "FROM alpine:3.18 AS runtime_amd64_none\nENV MUSL_LOCPATH=\"/usr/share/i18n/locales/musl\"\nRUN apk update && apk add --no-cache tzdata musl-locales musl-locales-lang\nWORKDIR /app\nCOPY dist/icloudpd-ex-*.*.*-linux-musl-amd64 icloudpd_ex\n\nFROM alpine:3.18 AS runtime_arm64_none\nENV MUSL_LOCPATH=\"/usr/share/i18n/locales/musl\"\nRUN apk update && apk add --no-cache tzdata musl-locales musl-locales-lang\nWORKDIR /app\nCOPY dist/icloudpd-ex-*.*.*-linux-musl-arm64 icloudpd_ex\n\nFROM alpine:3.18 AS runtime_arm_v7\nENV MUSL_LOCPATH=\"/usr/share/i18n/locales/musl\"\nRUN apk update && apk add --no-cache tzdata musl-locales musl-locales-lang\nWORKDIR /app\nCOPY dist/icloudpd-ex-*.*.*-linux-musl-arm32v7 icloudpd_ex\n\nFROM runtime_${TARGETARCH}_${TARGETVARIANT:-none} AS runtime\nENV TZ=UTC\nEXPOSE 8080\nWORKDIR /app\nRUN chmod +x /app/icloudpd_ex\nENTRYPOINT [\"/app/icloudpd_ex\"]\n"
        },
        {
          "name": "Dockerfile.build",
          "type": "blob",
          "size": 3.4287109375,
          "content": "# Multi-arch build (local):\n#     docker buildx create --use --driver=docker-container --name container --bootstrap\n#     docker buildx build . --cache-to type=local,dest=.cache,mode=max --cache-from type=local,src=.cache --platform=linux/amd64 --builder=container --progress plain -o dist -f Dockerfile.build\n# ,linux/arm64,linux/arm/v7\n# rust links from https://forge.rust-lang.org/infra/other-installation-methods.html#standalone-installers\n# arm7l instead of v6 issue: https://stackoverflow.com/questions/78535054/how-do-you-docker-buildx-build-for-arm-v6-on-qemu-emulated-platforms-that-pres\n\n# map source image to base\nFROM python:3.13 AS base\nARG TARGETARCH\nARG TARGETVARIANT\nENV DEBIAN_FRONTEND=noninteractive\nWORKDIR /app\nRUN \\\n  --mount=type=cache,target=/var/cache/apt,sharing=shared \\\n  --mount=type=cache,target=/var/lib/apt,sharing=shared \\\n  rm -f /etc/apt/apt.conf.d/docker-clean && \\\n  echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' >/etc/apt/apt.conf.d/keep-cache && \\\n  apt-get update && \\\n  apt-get install -y patchelf musl-tools\n  \nFROM base AS base_amd64_none\n# does not need rustc\n\nFROM base AS base_arm64_none\n# does not need rustc\n\nFROM base AS base_arm_v7\n# rust from apt is 1.63.0, but min required for cryptography is 1.65.0, so we have to install rust outside of apt\n# use downloading of prepackaged rust and caching it seems to provide better experience than recommended rustup\nARG TARGETARCH\nARG TARGETVARIANT\nENV RUST_DISTRO_NAME=rust-1.79.0-armv7-unknown-linux-gnueabihf\nRUN \\\n    --mount=type=cache,target=/root/.distrib/rust,sharing=shared \\\n    (if [ ! -d \"/root/.distrib/rust/${RUST_DISTRO_NAME}\" ]; then \\\n    (wget --no-verbose --no-clobber https://static.rust-lang.org/dist/${RUST_DISTRO_NAME}.tar.xz && \\\n    tar -xf ${RUST_DISTRO_NAME}.tar.xz -C /root/.distrib/rust/); fi) && \\\n    /root/.distrib/rust/${RUST_DISTRO_NAME}/install.sh\n\nFROM base_${TARGETARCH}_${TARGETVARIANT:-none} AS builder\nARG TARGETARCH\nARG TARGETVARIANT\nWORKDIR /app\nCOPY LICENSE.md .\nCOPY README_PYPI.md .\nCOPY scripts scripts/\nCOPY binary_dist binary_dist/\nCOPY pyproject.toml .\nCOPY src src/\n# staticx must be installed after scons - they do not have deps that pip can handle\n# building on arm32v7 cause error in rust from apt (1.63.0): https://github.com/rust-lang/cargo/issues/8719\n#   workaround is to have /root/.cargo in tmpfs https://github.com/crazy-max/ghaction-docker-buildx/issues/172\n#   https://github.com/rust-lang/cargo/issues/9545#issuecomment-855282576\n#   https://github.com/rust-lang/cargo/issues/8719#issuecomment-1207488994   \n# caching registry as a wa https://stackoverflow.com/a/60590697\n#--mount=type=cache,target=/root/.cargo/registry,sharing=shared \\\nRUN \\\n    --mount=type=cache,target=/root/.cache/pip,sharing=shared \\\n    --mount=type=cache,target=/root/.cargo/registry,sharing=shared \\\n    python3 -m venv .venv && \\\n    . .venv/bin/activate && \\\n    echo \"List pip cache...\" && \\\n    pip3 cache list && \\\n    pip3 install --disable-pip-version-check .[dev,devlinux] && \\\n    BOOTLOADER_CC=musl-gcc pip3 install --disable-pip-version-check staticx==0.14.1\nRUN \\\n    . .venv/bin/activate && \\\n    echo \"Building binaries...\" && \\\n    scripts/build_bin2 icloudpd icloud  && \\\n    scripts/build_bin1 icloud && \\\n    scripts/build_bin1 icloudpd_ex  && \\\n    scripts/build_static icloudpd && \\\n    scripts/build_static icloud && \\\n    scripts/build_static icloudpd_ex && \\\n    scripts/build_whl\n\nFROM scratch\nWORKDIR /\nCOPY --from=builder /app/dist/icloud* .\n"
        },
        {
          "name": "Dockerfile.build-musl",
          "type": "blob",
          "size": 1.986328125,
          "content": "# Multi-arch build (local):\n#     docker buildx create --use --driver=docker-container --name container --bootstrap\n#     docker buildx build . --cache-to type=local,dest=.cache,mode=max --cache-from type=local,src=.cache --platform=linux/amd64 --builder=container --progress plain -o dist -f Dockerfile.build-musl\n# ,linux/arm64,linux/arm/v7\n# rust links from https://forge.rust-lang.org/infra/other-installation-methods.html#standalone-installers\n\n# map source image to base\nFROM python:3.13-alpine3.19 AS base\nARG TARGETARCH\nARG TARGETVARIANT\nWORKDIR /app\nRUN \\\n  --mount=type=cache,target=/var/cache/apk,sharing=shared \\\n  apk update && \\\n  apk add git curl binutils gcc libc-dev libffi-dev zlib-dev openssl-dev tzdata bash patchelf python3-dev musl-dev pkgconfig cargo\n# from https://cryptography.io/en/latest/installation/#building-cryptography-on-linux\n# If you get an error with openssl-dev you may have to use libressl-dev.\n# cargo \n\nFROM base AS base_amd64_none\n# does not need rustc\n\nFROM base AS base_arm64_none\n# does not need rustc\n\nFROM base AS base_arm_v7\n# does not have musl variant prepackaged but the one from apk works\n    \nFROM base_${TARGETARCH}_${TARGETVARIANT:-none} AS builder\nARG TARGETARCH\nARG TARGETVARIANT\nARG QEMU_CPU\nWORKDIR /app\nCOPY LICENSE.md .\nCOPY README_PYPI.md .\nCOPY scripts scripts/\nCOPY binary_dist binary_dist/\nCOPY pyproject.toml .\nCOPY src src/\n# staticx must be installed after scons\n# staticx gives error: Error relocating /tmp/staticx-pyi-9b5nvfi_/_cffi_backend.cpython-312-x86_64-linux-musl.so: PyNumber_Long: symbol not found, so not using for musl\nRUN \\\n    --mount=type=cache,target=/root/.cache/pip,sharing=shared \\\n    python3 -m venv .venv && \\\n    . .venv/bin/activate && \\\n    pip3 install --disable-pip-version-check .[dev,devlinux]\nRUN \\\n    . .venv/bin/activate && \\\n    scripts/build_bin2 icloudpd icloud  && \\\n    scripts/build_bin1 icloud && \\\n    scripts/build_bin1 icloudpd_ex  && \\\n    scripts/build_whl\n\nFROM scratch\nWORKDIR /\nCOPY --from=builder /app/dist/icloud* .\n"
        },
        {
          "name": "EXPERIMENTAL.md",
          "type": "blob",
          "size": 0.2666015625,
          "content": "# Experimental Mode\n\nGoal is to try new things and get feedback from users without breaking existing behavior.\n\nAnything in this section can change without backward compatibility or even completely removed.\n\nDANGER ZONE: Code may not work as expected.\n\n(no experiments yet)"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Nathan Broadbent\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.099609375,
          "content": "# iCloud Photos Downloader [![Quality Checks](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Quality%20Checks/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/quality-checks.yml) [![Multi Platform Docker Build](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Docker%20Build/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/docker-build.yml) [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n- A command-line tool to download all your iCloud photos.\n- Works on Linux, Windows, and macOS; laptop, desktop, and NAS\n- Available as an executable for direct downloading and through package managers/ecosystems ([Docker](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#docker), [PyPI](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#pypi), [AUR](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#aur), [npm](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#npm))\n- Developed and maintained by volunteers (we are always looking for [help](CONTRIBUTING.md)). \n\nSee [Documentation](https://icloud-photos-downloader.github.io/icloud_photos_downloader/) for more details. Also, check [Issues](https://github.com/icloud-photos-downloader/icloud_photos_downloader/issues)\n\nWe aim to release new versions once a week (Friday), if there is something worth delivering.\n\n## Install and Run\n\nThere are three ways to run `icloudpd`:\n1. Download executable for your platform from the GitHub [Release](https://github.com/icloud-photos-downloader/icloud_photos_downloader/releases/tag/v1.25.1) and run it\n1. Use package manager to install, update, and, in some cases, run ([Docker](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#docker), [PyPI](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#pypi), [AUR](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#aur), [npm](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html#npm))\n1. Build and run from the source\n\nSee [Documentation](https://icloud-photos-downloader.github.io/icloud_photos_downloader/install.html) for more details\n\n## Features\n\n<!-- start features -->\n\n- Three modes of operation:\n  - **Copy** - download new photos from iCloud (default mode)\n  - **Sync** - download new photos from iCloud and delete local files that were removed in iCloud (`--auto-delete` option)\n  - **Move** - download new photos from iCloud and delete photos in iCloud (`--keep-icloud-recent-days` option)\n- Support for Live Photos (image and video as separate files) and RAW images (including RAW+JPEG)\n- Automatic de-duplication of photos with the same name\n- One time download and an option to monitor for iCloud changes continuously (`--watch-with-interval` option)\n- Optimizations for incremental runs (`--until-found` and `--recent` options)\n- Photo metadata (EXIF) updates (`--set-exif-datetime` option)\n- ... and many more (use `--help` option to get full list)\n\n<!-- end features -->\n\n## Experimental Mode\n\nSome changes are added to the experimental mode before they graduate into the main package. [Details](EXPERIMENTAL.md)\n\n## Usage\n\nTo keep your iCloud photo collection synchronized to your local system:\n\n```\nicloudpd --directory /data --username my@email.address --watch-with-interval 3600\n```\n\n> [!IMPORTANT]\n> It is `icloudpd`, not `icloud` executable\n\n> [!TIP]\n> Synchronization logic can be adjusted with command-line parameters. Run `icloudpd --help` to get full list.\n\nTo independently create and authorize a session (and complete 2SA/2FA validation if needed) on your local system:\n\n```\nicloudpd --username my@email.address --password my_password --auth-only\n```\n> [!TIP]\n> This feature can also be used to check and verify that the session is still authenticated. \n\n## Contributing\n\nWant to contribute to iCloud Photos Downloader? Awesome! Check out the [contributing guidelines](CONTRIBUTING.md) to get involved.\n"
        },
        {
          "name": "README_AUR.md",
          "type": "blob",
          "size": 1.423828125,
          "content": "# iCloud Photos Downloader [![Quality Checks](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Quality%20Checks/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/quality-checks.yml) [![Multi Platform Docker Build](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Docker%20Build/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/docker-build.yml) [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE.md)\n\nA command-line tool to download all your iCloud photos.\n\n## Install\n\nAUR packages can be installed on Arch Linux. Installation can be done [manually](https://wiki.archlinux.org/title/Arch_User_Repository#Installing_and_upgrading_packages) or with the use of an [AUR helper](https://wiki.archlinux.org/title/AUR_helpers).\n\nThe manual process would look like this:\n\n``` sh\ngit clone https://aur.archlinux.org/icloudpd-bin.git\ncd icloudpd-bin\nmakepkg -sirc\n```\n\nWith the use of the AUR helper e.g. [yay](https://github.com/Jguer/yay) the installation process would look like this:\n\n``` sh\nyay -S icloudpd-bin\n```\n\n## Usage\n\nSynchronization logic can be adjusted with command-line parameters. Run the following to get full list:\n\n``` sh \nicloudpd --help\n``` \n\n## More\n\nSee [Project page](https://github.com/icloud-photos-downloader/icloud_photos_downloader/) for more details.\n"
        },
        {
          "name": "README_DOCKER.md",
          "type": "blob",
          "size": 1.853515625,
          "content": "# iCloud Photos Downloader [![Quality Checks](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Quality%20Checks/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/quality-checks.yml) [![Multi Platform Docker Build](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Docker%20Build/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/docker-build.yml) [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE.md)\n\nA command-line tool to download all your iCloud photos.\n\n## Install, Run, and Use\n\n``` sh\ndocker run -it --rm --name icloudpd -v $(pwd)/Photos:/data -e TZ=America/Los_Angeles icloudpd/icloudpd:latest icloudpd --directory /data --username my@email.address --watch-with-interval 3600\n```\n\nImage asset date will be converted to specified TZ and then used for creating folders (see `--folder-stucture` parameter)\n\nOn Windows:\n\n- use `%cd%` instead of `$(pwd)`\n- or full path, e.g. `-v c:/photos/icloud:/data`\n- only Linux containers are supported\n\nSynchronization logic can be adjusted with command-line parameters. Run the following to get full list:\n``` sh \ndocker run -it --rm icloudpd/icloudpd:latest icloudpd --help\n``` \n\n## Getting Docker\n\nOn Windows and Mac Docker is available as [Docker Desktop](https://www.docker.com/products/docker-desktop/) app.\n\nOn Linux, Docker engine and client can be installed using platform package managers, e.g. [Installing on Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04)\n\nAppliance (e.g. NAS) will have their own way to install Docker engines and running containers - see manufacturer's instructions.\n\n## More\n\nSee [Project page](https://github.com/icloud-photos-downloader/icloud_photos_downloader/) for more details.\n"
        },
        {
          "name": "README_NPM.md",
          "type": "blob",
          "size": 1.1279296875,
          "content": "# iCloud Photos Downloader [![Quality Checks](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Quality%20Checks/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/quality-checks.yml) [![Multi Platform Docker Build](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Docker%20Build/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/docker-build.yml) [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE.md)\n\nA command-line tool to download all your iCloud photos.\n\n## Install, Run, and Use\n\n``` sh\nnpx --yes icloudpd --directory /data --username my@email.address --watch-with-interval 3600\n```\n\nSynchronization logic can be adjusted with command-line parameters. Run the following to get full list:\n\n``` sh \nnpx --yes icloudpd --help\n``` \n\n## Getting Node and npm\n\nYou can get NodeJS with accompanying npm from [Official site](https://nodejs.org/en/download).\n\n## More\n\nSee [Project page](https://github.com/icloud-photos-downloader/icloud_photos_downloader/) for more details.\n"
        },
        {
          "name": "README_PYPI.md",
          "type": "blob",
          "size": 2.2783203125,
          "content": "# iCloud Photos Downloader [![Quality Checks](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Quality%20Checks/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/quality-checks.yml) [![Multi Platform Docker Build](https://github.com/icloud-photos-downloader/icloud_photos_downloader/workflows/Docker%20Build/badge.svg)](https://github.com/icloud-photos-downloader/icloud_photos_downloader/actions/workflows/docker-build.yml) [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE.md)\n\nA command-line tool to download all your iCloud photos.\n\n## Install\n\n``` sh\npip install icloudpd\n```\n\n### Windows\n\n``` sh\npip install icloudpd --user\n```\n\nPlus add `C:\\Users\\<YourUserAccountHere>\\AppData\\Roaming\\Python\\Python<YourPythonVersionHere>\\Scripts` to PATH. The exact path will be given at the end of `icloudpd` installation.\n\n### macOS\n\nAdd `/Users/<YourUserAccountHere>/Library/Python/<YourPythonVersionHere>/bin` to PATH. The exact path will be given at the end of `icloudpd` installation.\n\n## Usage\n\n``` sh\nicloudpd --directory /data --username my@email.address --watch-with-interval 3600\n```\n\nSynchronization logic can be adjusted with command-line parameters. Run the following to get full list:\n\n``` sh \nicloudpd --help\n``` \n\n## Getting Python & Pip\n\nYou can get Python with accompanying Pip from [Official site](https://www.python.org/downloads/).\n\n### Alternatives for Mac\n\n#### Command Line Tools from Apple\n\nApple provides Python & Pip as part of the Command Line Tools for Xcode. They can be downloaded from Apple Developer portal or installed with \n\n``` sh\nxcode-select --install\n```\n\nUse `pip3` to install `icloudpd`:\n\n``` sh\npip3 install icloudpd\n```\n\n#### Homebrew package manager\n\nHomebrew is open source package manager for macOS. Install [Homebrew](https://brew.sh/) (if not already installed):\n\n``` sh\nwhich brew > /dev/null 2>&1 || /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nInstall Python (includes `pip`):\n\n``` sh\nbrew install python\n```\n\n### Alternative for Linux (Ubuntu)\n\n``` sh\nsudo apt-get update\nsudo apt-get install -y python\n```\n\n## More\n\nSee [Project page](https://github.com/icloud-photos-downloader/icloud_photos_downloader/) for more details.\n"
        },
        {
          "name": "binary_dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jq",
          "type": "tree",
          "content": null
        },
        {
          "name": "npm",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.951171875,
          "content": "[build-system]\nrequires = [\n    \"setuptools==75.6.0\",\n    \"wheel==0.45.1\",\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nversion=\"1.25.1\"\nname = \"icloudpd\"\ndescription = \"icloudpd is a command-line tool to download photos and videos from iCloud.\"\nreadme = \"README_PYPI.md\"\nrequires-python = \">=3.9,<3.14\"\nkeywords = [\"icloud\", \"photo\"]\nlicense = {file=\"LICENSE.md\"}\nauthors=[\n    {name = \"The iCloud Photo Downloader Authors\"}\n]\nclassifiers = [\n    \"Intended Audience :: End Users/Desktop\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n]\ndependencies = [\n    \"requests==2.32.3\",\n    \"schema==0.7.7\",\n    \"click==8.1.8\",\n    \"tqdm==4.67.1\",\n    \"piexif==1.1.3\",\n    \"python-dateutil==2.9.0.post0\",\n    \"urllib3==1.26.20\",\n    \"typing_extensions==4.12.2\",\n    \"Flask==3.1.0\",\n    \"waitress==3.0.2\",\n    # from pyicloud_ipd\n    \"six==1.17.0\",\n    \"tzlocal==5.2\",\n    \"pytz==2024.2\",\n    \"certifi==2024.12.14\",\n    \"keyring==25.6.0\",\n    \"keyrings-alt==5.0.2\",\n    \"srp==1.0.22\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"twine==5.1.1\",\n    \"pyinstaller==6.11.1\",\n    \"wheel==0.45.1\",\n    \"furo==2024.8.6\",\n    \"Sphinx==7.4.7\",\n    \"sphinx-autobuild==2024.10.3\",\n    \"myst-parser==3.0.1\"\n]\ndevlinux = [\n    \"auditwheel==6.1.0\",\n    #\"staticx==0.14.1\",\n    \"scons==4.8.1\"\n]\ntest = [\n    \"pytest==8.3.4\",\n    \"mock==5.1.0\",\n    \"freezegun==1.5.1\",\n    \"vcrpy==7.0.0\",\n    \"pytest-cov==5.0.0\",\n    \"ruff==0.8.4\",\n    \"coveralls==3.3.1\",\n    \"pytest-timeout==2.3.1\",\n    \"pytest-xdist==3.6.1\",\n    \"mypy==1.14.0\",\n    \"types-python-dateutil==2.9.0.20241206\",\n    \"types-pytz==2024.2.0.20241221\",\n    \"types-tzlocal==5.1.0.1\",\n    \"types-requests==2.31.0.2\",\n    \"types-six==1.17.0.20241205\",\n    \"types-urllib3==1.26.25.14\",\n    \"types-tqdm==4.67.0.20241221\",\n    \"types-mock==5.1.0.20240425\",\n    \"types-waitress==3.0.1.20241117\",\n]\n\n[project.urls]\nHomepage=\"https://github.com/icloud-photos-downloader/icloud_photos_downloader\"\n\n[project.scripts]\nicloudpd = \"icloudpd.base:main\"\nicloud = \"pyicloud_ipd.cmdline:main\"\n\n[tool.pytest.ini_options]\nlog_format = \"%(levelname)-8s %(message)s\"\nlog_date_format = \"%Y-%m-%d %H:%M:%S\"\ntimeout = 300\ntestpaths = [\n    \"tests\",\n    \"src\" # needed for doctests    \n]\npythonpath = [\n    \"src\"\n]\naddopts = \"--doctest-modules\"\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]  # list of folders that contain the packages ([\".\"] by default)\nexclude = [\"starters\"]\n\n[[tool.mypy.overrides]]\nmodule = ['piexif.*', 'vcr.*', 'srp.*']\nignore_missing_imports = true\n\n[tool.ruff]\nline-length = 100\nextend-exclude = [ \"src/pyicloud_ipd\" ]\n\n[tool.ruff.format]\ndocstring-code-format = true\n\n[tool.ruff.lint]\nselect = [\n    # pycodestyle\n    \"E\",\n    # Pyflakes\n    \"F\",\n    # pyupgrade\n    \"UP\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n]\nignore = [\n    # long lines\n    \"E501\",\n    # lower case types\n    \"UP006\",\n    # deprecated typing namespace\n    \"UP035\",\n]\n\n"
        },
        {
          "name": "requirements-pip.txt",
          "type": "blob",
          "size": 0.015625,
          "content": "pip>=24.3.1,<25\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}