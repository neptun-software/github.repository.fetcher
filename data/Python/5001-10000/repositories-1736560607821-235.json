{
  "metadata": {
    "timestamp": 1736560607821,
    "page": 235,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reactive-python/reactpy",
      "stars": 7913,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4521484375,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\nend_of_line = lf\n\n[*.py]\nindent_size = 4\nmax_line_length = 120\n\n[*.md]\nindent_size = 4\n\n[*.html]\nmax_line_length = off\n\n[*.js]\nmax_line_length = off\n\n[*.css]\nindent_size = 4\nmax_line_length = off\n\n# Tests can violate line width restrictions in the interest of clarity.\n[**/test_*.py]\nmax_line_length = off\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4169921875,
          "content": "# --- Jupyter ---\n*.ipynb_checkpoints\n*Untitled*.ipynb\n\n# --- Jupyter Repo 2 Docker ---\n.local\n.ipython\n.cache\n.bash_history\n.python_history\n.jupyter\n\n# --- Python ---\n.hatch\n.venv\nvenv\nMANIFEST\nbuild\ndist\n.eggs\n*.egg-info\n__pycache__/\n*.py[cod]\n.tox\n.nox\npip-wheel-metadata\n\n# --- PyEnv ---\n.python-version\n\n# -- Python Tests ---\n*.coverage\n*.pytest_cache\n*.mypy_cache\n\n# --- IDE ---\n.idea\n.vscode\n\n# --- JS ---\nnode_modules\n\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8017578125,
          "content": "repos:\n  - repo: local\n    hooks:\n      - id: lint-py-fix\n        name: Fix Python Lint\n        entry: hatch run lint-py\n        language: system\n        args: [--fix]\n        pass_filenames: false\n        files: \\.py$\n  - repo: local\n    hooks:\n      - id: lint-js-fix\n        name: Fix JS Lint\n        entry: hatch run lint-js --fix\n        language: system\n        pass_filenames: false\n        files: \\.(js|jsx|ts|tsx)$\n  - repo: local\n    hooks:\n      - id: lint-py-check\n        name: Check Python Lint\n        entry: hatch run lint-py\n        language: system\n        pass_filenames: false\n        files: \\.py$\n  - repo: local\n    hooks:\n      - id: lint-js-check\n        name: Check JS Lint\n        entry: hatch run lint-py\n        language: system\n        pass_filenames: false\n        files: \\.(js|jsx|ts|tsx)$\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2763671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at ryan.morshead@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Ryan S. Morshead\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0009765625,
          "content": "# <img src=\"https://raw.githubusercontent.com/reactive-python/reactpy/main/branding/svg/reactpy-logo-square.svg\" align=\"left\" height=\"45\"/> ReactPy\n\n<p>\n    <a href=\"https://github.com/reactive-python/reactpy/actions/workflows/check.yml\">\n        <img src=\"https://github.com/reactive-python/reactpy/actions/workflows/check.yml/badge.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/reactpy/\">\n        <img src=\"https://img.shields.io/pypi/v/reactpy.svg?label=PyPI\">\n    </a>\n    <a href=\"https://github.com/reactive-python/reactpy/blob/main/LICENSE\">\n        <img src=\"https://img.shields.io/badge/License-MIT-purple.svg\">\n    </a>\n    <a href=\"https://reactpy.dev/\">\n        <img src=\"https://img.shields.io/website?down_message=offline&label=Docs&logo=read-the-docs&logoColor=white&up_message=online&url=https%3A%2F%2Freactpy.dev%2Fdocs%2Findex.html\">\n    </a>\n    <a href=\"https://discord.gg/uNb5P4hA9X\">\n        <img src=\"https://img.shields.io/discord/1111078259854168116?label=Discord&logo=discord\">\n    </a>\n</p>\n\n[ReactPy](https://reactpy.dev/) is a library for building user interfaces in Python without Javascript. ReactPy interfaces are made from components that look and behave similar to those found in [ReactJS](https://reactjs.org/). Designed with simplicity in mind, ReactPy can be used by those without web development experience while also being powerful enough to grow with your ambitions.\n\n<table align=\"center\">\n    <thead>\n        <tr>\n            <th colspan=\"2\" style=\"text-align: center\">Supported Backends</th>\n        <tr>\n            <th style=\"text-align: center\">Built-in</th>\n            <th style=\"text-align: center\">External</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n        <td>\n            <a href=\"https://reactpy.dev/docs/guides/getting-started/installing-reactpy.html#officially-supported-servers\">\n                Flask, FastAPI, Sanic, Tornado\n            </a>\n        </td>\n        <td>\n            <a href=\"https://github.com/reactive-python/reactpy-django\">Django</a>,\n            <a href=\"https://github.com/reactive-python/reactpy-jupyter\">Jupyter</a>,\n            <a href=\"https://github.com/idom-team/idom-dash\">Plotly-Dash</a>\n        </td>\n        </tr>\n    </tbody>\n</table>\n\n# At a Glance\n\nTo get a rough idea of how to write apps in ReactPy, take a look at this tiny _Hello World_ application.\n\n```python\nfrom reactpy import component, html, run\n\n@component\ndef hello_world():\n    return html.h1(\"Hello, World!\")\n\nrun(hello_world)\n```\n\n# Resources\n\nFollow the links below to find out more about this project.\n\n-   [Try ReactPy (Jupyter Notebook)](https://mybinder.org/v2/gh/reactive-python/reactpy-jupyter/main?urlpath=lab/tree/notebooks/introduction.ipynb)\n-   [Documentation](https://reactpy.dev/)\n-   [GitHub Discussions](https://github.com/reactive-python/reactpy/discussions)\n-   [Discord](https://discord.gg/uNb5P4hA9X)\n-   [Contributor Guide](https://reactpy.dev/docs/about/contributor-guide.html)\n-   [Code of Conduct](https://github.com/reactive-python/reactpy/blob/main/CODE_OF_CONDUCT.md)\n"
        },
        {
          "name": "branding",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.4853515625,
          "content": "# --- Project ----------------------------------------------------------------------------\n\n[project]\nname = \"scripts\"\nversion = \"0.0.0\"\ndescription = \"Scripts for managing the ReactPy repository\"\n\n# --- Hatch ----------------------------------------------------------------------------\n\n[tool.hatch.envs.default]\ndetached = true\ndependencies = [\n  \"invoke\",\n  # lint\n  \"black==24.1.1\",    # Pin lint tools we don't control to avoid breaking changes\n  \"ruff==0.0.278\",    # Pin lint tools we don't control to avoid breaking changes\n  \"toml\",\n  \"flake8==7.0.0\",    # Pin lint tools we don't control to avoid breaking changes\n  \"flake8-pyproject\",\n  # types\n  \"mypy\",\n  \"types-toml\",\n  # publish\n  \"semver >=2, <3\",\n  \"twine\",\n  \"pre-commit\",\n]\n\n[tool.hatch.envs.default.scripts]\npublish = \"invoke publish {args}\"\ndocs = \"invoke docs {args}\"\ncheck = [\"lint-py\", \"lint-js\", \"test-py\", \"test-js\", \"test-docs\"]\n\nlint = [\"lint-py\", \"lint-js\"]\nlint-py = \"invoke lint-py {args}\"\nlint-js = \"invoke lint-js {args}\"\n\ntest = [\"test-py\", \"test-js\", \"test-docs\"]\ntest-py = \"invoke test-py {args}\"\ntest-js = \"invoke test-js\"\ntest-docs = \"invoke test-docs\"\n\n# --- Black ----------------------------------------------------------------------------\n\n[tool.black]\ntarget-version = [\"py39\"]\nline-length = 88\n\n# --- MyPy -----------------------------------------------------------------------------\n\n[tool.mypy]\nignore_missing_imports = true\nwarn_unused_configs = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\n\n# --- Flake8 ---------------------------------------------------------------------------\n\n[tool.flake8]\nselect = [\"RPY\"]                                                  # only need to check with reactpy-flake8\nexclude = [\"**/node_modules/*\", \".eggs/*\", \".tox/*\", \"**/venv/*\"]\n\n# --- Ruff -----------------------------------------------------------------------------\n\n[tool.ruff]\ntarget-version = \"py39\"\nline-length = 88\nselect = [\n  \"A\",\n  \"ARG\",\n  \"B\",\n  \"C\",\n  \"DTZ\",\n  \"E\",\n  # error message linting is overkill\n  # \"EM\",\n  \"F\",\n  # TODO: turn this on later\n  # \"FBT\",\n  \"I\",\n  \"ICN\",\n  \"ISC\",\n  \"N\",\n  \"PLC\",\n  \"PLE\",\n  \"PLR\",\n  \"PLW\",\n  \"Q\",\n  \"RUF\",\n  \"S\",\n  \"T\",\n  \"TID\",\n  \"UP\",\n  \"W\",\n  \"YTT\",\n]\nignore = [\n  # TODO: turn this on later\n  \"N802\",\n  \"N806\", # allow TitleCase functions/variables\n  # We're not any cryptography\n  \"S311\",\n  # For loop variable re-assignment seems like an uncommon mistake\n  \"PLW2901\",\n  # Let Black deal with line-length\n  \"E501\",\n  # Allow args/attrs to shadow built-ins\n  \"A002\",\n  \"A003\",\n  # Allow unused args (useful for documenting what the parameter is for later)\n  \"ARG001\",\n  \"ARG002\",\n  \"ARG005\",\n  # Allow non-abstract empty methods in abstract base classes\n  \"B027\",\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\n  \"FBT003\",\n  # If we're making an explicit comparison to a falsy value it was probably intentional\n  \"PLC1901\",\n  # Ignore checks for possible passwords\n  \"S105\",\n  \"S106\",\n  \"S107\",\n  # Ignore complexity\n  \"C901\",\n  \"PLR0911\",\n  \"PLR0912\",\n  \"PLR0913\",\n  \"PLR0915\",\n]\nunfixable = [\n  # Don't touch unused imports\n  \"F401\",\n]\n\n[tool.ruff.isort]\nknown-first-party = [\"reactpy\"]\n\n[tool.ruff.flake8-tidy-imports]\nban-relative-imports = \"all\"\n\n[tool.ruff.per-file-ignores]\n# Tests can use magic values, assertions, and relative imports\n\"**/tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\n\"docs/**/*.py\" = [\n  # Examples require some extra setup before import\n  \"E402\",\n  # Allow exec\n  \"S102\",\n  # Allow print\n  \"T201\",\n]\n\"scripts/**/*.py\" = [\n  # Allow print\n  \"T201\",\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 13.0185546875,
          "content": "from __future__ import annotations\n\nimport json\nimport logging\nimport os\nimport re\nimport sys\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom shutil import rmtree\nfrom typing import TYPE_CHECKING, Any, Callable\n\nimport semver\nimport toml\nfrom invoke import task\nfrom invoke.context import Context\nfrom invoke.exceptions import Exit\nfrom invoke.runners import Result\n\n# --- Typing Preamble ------------------------------------------------------------------\n\n\nif TYPE_CHECKING:\n    # not available in typing module until Python 3.8\n    # not available in typing module until Python 3.10\n    from typing import Literal, Protocol, TypeAlias\n\n    class ReleasePrepFunc(Protocol):\n        def __call__(\n            self, context: Context, package: PackageInfo\n        ) -> Callable[[bool], None]: ...\n\n    LanguageName: TypeAlias = \"Literal['py', 'js']\"\n\n\n# --- Constants ------------------------------------------------------------------------\n\n\nlog = logging.getLogger(__name__)\nlog.setLevel(\"INFO\")\nlog_handler = logging.StreamHandler(sys.stdout)\nlog_handler.setFormatter(logging.Formatter(\"%(message)s\"))\nlog.addHandler(log_handler)\n\n\n# --- Constants ------------------------------------------------------------------------\n\n\nROOT = Path(__file__).parent\nDOCS_DIR = ROOT / \"docs\"\nSRC_DIR = ROOT / \"src\"\nJS_DIR = SRC_DIR / \"js\"\nPY_DIR = SRC_DIR / \"py\"\nPY_PROJECTS = [p for p in PY_DIR.iterdir() if (p / \"pyproject.toml\").exists()]\nTAG_PATTERN = re.compile(\n    # start\n    r\"^\"\n    # package name\n    r\"(?P<name>[0-9a-zA-Z-@/]+)-\"\n    # package version\n    r\"v(?P<version>[0-9][0-9a-zA-Z-\\.\\+]*)\"\n    # end\n    r\"$\"\n)\n\n\n# --- Tasks ----------------------------------------------------------------------------\n\n\n@task\ndef env(context: Context):\n    \"\"\"Install development environment\"\"\"\n    env_py(context)\n    env_js(context)\n\n\n@task\ndef env_py(context: Context):\n    \"\"\"Install Python development environment\"\"\"\n    for py_proj in [\n        DOCS_DIR,\n        # Docs installs non-editable versions of packages - ensure\n        # we overwrite that by installing projects afterwards.\n        *PY_PROJECTS,\n    ]:\n        py_proj_toml_tools = toml.load(py_proj / \"pyproject.toml\")[\"tool\"]\n        if \"hatch\" in py_proj_toml_tools:\n            install_func = install_hatch_project\n        elif \"poetry\" in py_proj_toml_tools:\n            install_func = install_poetry_project\n        else:\n            raise Exit(f\"Unknown project type: {py_proj}\")\n        with context.cd(py_proj):\n            install_func(context, py_proj)\n\n\n@task\ndef env_js(context: Context):\n    \"\"\"Install JS development environment\"\"\"\n    in_js(\n        context,\n        \"npm ci\",\n        \"npm run build\",\n        hide=\"out\",\n    )\n\n\n@task\ndef lint_py(context: Context, fix: bool = False):\n    \"\"\"Run linters and type checkers\"\"\"\n    if fix:\n        context.run(\"ruff --fix .\")\n        context.run(\"black .\")\n    else:\n        context.run(\"ruff .\")\n        context.run(\"black --check --diff .\")\n        in_py(\n            context,\n            f\"flake8 --toml-config '{ROOT / 'pyproject.toml'}' .\",\n            \"hatch run lint:all\",\n        )\n\n\n@task(pre=[env_js])\ndef lint_js(context: Context, fix: bool = False):\n    \"\"\"Run linters and type checkers\"\"\"\n    if fix:\n        in_js(context, \"npm run fix:format\")\n    else:\n        in_js(context, \"npm run check:format\")\n    in_js(context, \"npm run check:types\")\n\n\n@task\ndef test_py(context: Context, no_cov: bool = False):\n    \"\"\"Run test suites\"\"\"\n    in_py(\n        context,\n        f\"hatch run {'test' if no_cov else 'cov'} --maxfail=3 --reruns=3\",\n    )\n\n\n@task(pre=[env_js])\ndef test_js(context: Context):\n    \"\"\"Run test suites\"\"\"\n    in_js(context, \"npm run check:tests\")\n\n\n@task(pre=[env_py])\ndef test_docs(context: Context):\n    with context.cd(DOCS_DIR):\n        context.run(\"poetry install\")\n        context.run(\n            \"poetry run sphinx-build \"\n            \"-a \"  # re-write all output files\n            \"-T \"  # show full tracebacks\n            \"-W \"  # turn warnings into errors\n            \"--keep-going \"  # complete the build, but still report warnings as errors\n            \"-b doctest \"\n            \"source \"\n            \"build\",\n        )\n        context.run(\"poetry run sphinx-build -b doctest source build\")\n\n    context.run(\"docker build . --file ./docs/Dockerfile\")\n\n\n@task\ndef docs(context: Context, docker: bool = False):\n    \"\"\"Build documentation\"\"\"\n    if docker:\n        _docker_docs(context)\n    else:\n        _live_docs(context)\n\n\ndef _docker_docs(context: Context) -> None:\n    context.run(\"docker build . --file ./docs/Dockerfile --tag reactpy-docs:latest\")\n    context.run(\n        \"docker run -it -p 5000:5000 -e DEBUG=1 --rm reactpy-docs:latest\", pty=True\n    )\n\n\ndef _live_docs(context: Context) -> None:\n    with context.cd(DOCS_DIR):\n        context.run(\"poetry install\")\n        context.run(\n            \"poetry run python main.py \"\n            \"--open-browser \"\n            # watch python source too\n            \"--watch=../src/py \"\n            # for some reason this matches absolute paths\n            \"--ignore=**/_auto/* \"\n            \"--ignore=**/_static/custom.js \"\n            \"--ignore=**/node_modules/* \"\n            \"--ignore=**/package-lock.json \"\n            \"-a \"\n            \"-E \"\n            \"-b \"\n            \"html \"\n            \"source \"\n            \"build\"\n        )\n\n\n@task\ndef publish(context: Context, dry_run: str = \"\"):\n    \"\"\"Publish packages that have been tagged for release in the current commit\n\n    To perform a test run use `--dry-run=<name>-v<version>` to specify a comma-separated\n    list of tags to simulate a release of. For example, to simulate a release of\n    `@foo/bar-v1.2.3` and `baz-v4.5.6` use `--dry-run=@foo/bar-v1.2.3,baz-v4.5.6`.\n    \"\"\"\n    packages = get_packages(context)\n\n    release_prep: dict[LanguageName, ReleasePrepFunc] = {\n        \"js\": prepare_js_release,\n        \"py\": prepare_py_release,\n    }\n    current_tags = dry_run.split(\",\") if dry_run else get_current_tags(context)\n    parsed_tags = [parse_tag(tag) for tag in current_tags]\n\n    publishers: list[Callable[[bool], None]] = []\n    for tag_info in parsed_tags:\n        if tag_info.name not in packages:\n            msg = f\"Tag {tag_info.tag} references package {tag_info.name} that does not exist\"\n            raise Exit(msg)\n\n        pkg_info = packages[tag_info.name]\n        if pkg_info.version != tag_info.version:\n            msg = f\"Tag {tag_info.tag} references version {tag_info.version} of package {tag_info.name}, but the current version is {pkg_info.version}\"\n            raise Exit(msg)\n\n        log.info(f\"Preparing {tag_info.name} for release...\")\n        publishers.append(release_prep[pkg_info.language](context, pkg_info))\n\n    for publish in publishers:\n        publish(bool(dry_run))\n\n\n# --- Utilities ------------------------------------------------------------------------\n\n\ndef in_py(context: Context, *commands: str, **kwargs: Any) -> None:\n    for p in PY_PROJECTS:\n        with context.cd(p):\n            log.info(f\"Running commands in {p}...\")\n            for c in commands:\n                context.run(c, **kwargs)\n\n\ndef in_js(context: Context, *commands: str, **kwargs: Any) -> None:\n    with context.cd(JS_DIR):\n        for c in commands:\n            context.run(c, **kwargs)\n\n\ndef get_packages(context: Context) -> dict[str, PackageInfo]:\n    packages: list[PackageInfo] = []\n\n    for maybe_pkg in PY_DIR.glob(\"*\"):\n        if (maybe_pkg / \"pyproject.toml\").exists():\n            packages.append(make_py_pkg_info(context, maybe_pkg))\n        else:\n            msg = f\"unexpected dir or file: {maybe_pkg}\"\n            raise Exit(msg)\n\n    packages_dir = JS_DIR / \"packages\"\n    for maybe_pkg in packages_dir.glob(\"*\"):\n        if (maybe_pkg / \"package.json\").exists():\n            packages.append(make_js_pkg_info(maybe_pkg))\n        elif maybe_pkg.is_dir():\n            for maybe_ns_pkg in maybe_pkg.glob(\"*\"):\n                if (maybe_ns_pkg / \"package.json\").exists():\n                    packages.append(make_js_pkg_info(maybe_ns_pkg))\n        else:\n            msg = f\"unexpected dir or file: {maybe_pkg}\"\n            raise Exit(msg)\n\n    packages_by_name = {p.name: p for p in packages}\n    if len(packages_by_name) != len(packages):\n        raise Exit(\"duplicate package names detected\")\n\n    return packages_by_name\n\n\ndef make_py_pkg_info(context: Context, pkg_dir: Path) -> PackageInfo:\n    with context.cd(pkg_dir):\n        proj_metadata = json.loads(\n            ensure_result(context, \"hatch project metadata\").stdout\n        )\n    return PackageInfo(\n        name=proj_metadata[\"name\"],\n        path=pkg_dir,\n        language=\"py\",\n        version=proj_metadata[\"version\"],\n    )\n\n\ndef make_js_pkg_info(pkg_dir: Path) -> PackageInfo:\n    with (pkg_dir / \"package.json\").open() as f:\n        pkg_json = json.load(f)\n    return PackageInfo(\n        name=pkg_json[\"name\"],\n        path=pkg_dir,\n        language=\"js\",\n        version=pkg_json[\"version\"],\n    )\n\n\n@dataclass\nclass PackageInfo:\n    name: str\n    path: Path\n    language: LanguageName\n    version: str\n\n\ndef get_current_tags(context: Context) -> set[str]:\n    \"\"\"Get tags for the current commit\"\"\"\n    # check if unstaged changes\n    try:\n        context.run(\"git diff --cached --exit-code\", hide=True)\n        context.run(\"git diff --exit-code\", hide=True)\n    except Exception:\n        log.error(\"Cannot get current tags - there are uncommitted changes\")\n        return set()\n\n    # get tags for current commit\n    tags = {\n        line\n        for line in map(\n            str.strip,\n            ensure_result(\n                context, \"git tag --points-at HEAD\", hide=True\n            ).stdout.splitlines(),\n        )\n        if line\n    }\n\n    if not tags:\n        log.error(\"No tags found for current commit\")\n\n    for t in tags:\n        if not TAG_PATTERN.match(t):\n            msg = f\"Invalid tag: {t}\"\n            raise Exit(msg)\n\n    log.info(f\"Found tags: {tags}\")\n\n    return tags\n\n\ndef parse_tag(tag: str) -> TagInfo:\n    match = TAG_PATTERN.match(tag)\n    if not match:\n        msg = f\"Invalid tag: {tag}\"\n        raise Exit(msg)\n\n    version = match.group(\"version\")\n    if not semver.VersionInfo.isvalid(version):\n        raise Exit(f\"Invalid version: {version} in tag {tag}\")\n\n    return TagInfo(tag=tag, name=match.group(\"name\"), version=match.group(\"version\"))\n\n\n@dataclass\nclass TagInfo:\n    tag: str\n    name: str\n    version: str\n\n\ndef prepare_js_release(\n    context: Context, package: PackageInfo\n) -> Callable[[bool], None]:\n    node_auth_token = os.getenv(\"NODE_AUTH_TOKEN\")\n    if node_auth_token is None:\n        msg = \"NODE_AUTH_TOKEN environment variable must be set\"\n        raise Exit(msg)\n\n    with context.cd(JS_DIR):\n        context.run(\"npm ci\")\n        context.run(\"npm run build\")\n\n    def publish(dry_run: bool) -> None:\n        with context.cd(JS_DIR):\n            if dry_run:\n                context.run(f\"npm --workspace {package.name} pack --dry-run\")\n                return\n            context.run(\n                f\"npm --workspace {package.name} publish --access public\",\n                env={\"NODE_AUTH_TOKEN\": node_auth_token},\n            )\n\n    return publish\n\n\ndef prepare_py_release(\n    context: Context, package: PackageInfo\n) -> Callable[[bool], None]:\n    twine_username = os.getenv(\"PYPI_USERNAME\")\n    twine_password = os.getenv(\"PYPI_PASSWORD\")\n\n    if not (twine_password and twine_username):\n        msg = \"PYPI_USERNAME and PYPI_PASSWORD environment variables must be set\"\n        raise Exit(msg)\n\n    for build_dir_name in [\"build\", \"dist\"]:\n        build_dir_path = Path.cwd() / build_dir_name\n        if build_dir_path.exists():\n            rmtree(str(build_dir_path))\n\n    with context.cd(package.path):\n        context.run(\"hatch build\")\n\n    def publish(dry_run: bool):\n        with context.cd(package.path):\n            context.run(\"twine check dist/*\")\n\n            if dry_run:\n                return\n\n            context.run(\n                \"twine upload dist/*\",\n                env={\n                    \"TWINE_USERNAME\": twine_username,\n                    \"TWINE_PASSWORD\": twine_password,\n                },\n            )\n\n    return publish\n\n\ndef install_hatch_project(context: Context, path: Path) -> None:\n    py_proj_toml = toml.load(path / \"pyproject.toml\")\n    hatch_default_env = py_proj_toml[\"tool\"][\"hatch\"][\"envs\"].get(\"default\", {})\n    hatch_default_features = hatch_default_env.get(\"features\", [])\n    hatch_default_deps = hatch_default_env.get(\"dependencies\", [])\n    context.run(f\"pip install -e '.[{','.join(hatch_default_features)}]'\")\n    context.run(f\"pip install {' '.join(map(repr, hatch_default_deps))}\")\n\n\ndef install_poetry_project(context: Context, path: Path) -> None:\n    # install dependencies from poetry into the current environment - not in Poetry's venv\n    poetry_lock = toml.load(path / \"poetry.lock\")\n    packages_to_install = [\n        f\"{package['name']}=={package['version']}\" for package in poetry_lock[\"package\"]\n    ]\n    context.run(\"pip install -e .\")\n    context.run(f\"pip install {' '.join(packages_to_install)}\")\n\n\ndef ensure_result(context: Context, *args: Any, **kwargs: Any) -> Result:\n    result = context.run(*args, **kwargs)\n    if result is None:\n        raise Exit(\"Command failed\")\n    return result\n"
        }
      ]
    }
  ]
}