{
  "metadata": {
    "timestamp": 1736560689684,
    "page": 344,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lbryio/lbry-sdk",
      "stars": 7200,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2236328125,
          "content": "/.idea\n/.DS_Store\n/build\n/dist\n/.tox\n/.coverage*\n/lbry-venv\n/venv\n/lbry/blockchain\n\nlbry.egg-info\n__pycache__\n_trial_temp/\ntrending*.log\n\n/tests/integration/claims/files\n/tests/.coverage.*\n\n/lbry/wallet/bin\n\n/.vscode\n/.gitignore\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.119140625,
          "content": "# Change Log\n\nThis changelog is no longer up to date. For release notes, see https://github.com/lbryio/lbry-sdk/releases.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.052734375,
          "content": "## Contributing to LBRY\n\nhttps://lbry.tech/contribute\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 4.69140625,
          "content": "# Installing LBRY\n\nIf only the JSON-RPC API server is needed, the recommended way to install LBRY is to use a pre-built binary. We provide binaries for all major operating systems. See the [README](README.md)!\n\nThese instructions are for installing LBRY from source, which is recommended if you are interested in doing development work or LBRY is not available on your operating system (godspeed, TempleOS users).\n\nHere's a video walkthrough of this setup, which is itself hosted by the LBRY network and provided via [spee.ch](https://github.com/lbryio/spee.ch):\n[![Setup for development](https://spee.ch/2018-10-04-17-13-54-017046806.png)](https://spee.ch/967f99344308f1e90f0620d91b6c93e4dfb240e0/lbrynet-dev-setup.mp4)\n\n## Prerequisites\n\nRunning `lbrynet` from source requires Python 3.7. Get the installer for your OS [here](https://www.python.org/downloads/release/python-370/).\n\nAfter installing Python 3.7, you'll need to install some additional libraries depending on your operating system.\n\nBecause of [issue #2769](https://github.com/lbryio/lbry-sdk/issues/2769)\nat the moment the `lbrynet` daemon will only work correctly with Python 3.7.\nIf Python 3.8+ is used, the daemon will start but the RPC server\nmay not accept messages, returning the following:\n```\nCould not connect to daemon. Are you sure it's running?\n```\n\n### macOS\n\nmacOS users will need to install [xcode command line tools](https://developer.xamarin.com/guides/testcloud/calabash/configuring/osx/install-xcode-command-line-tools/) and [homebrew](http://brew.sh/).\n\nThese environment variables also need to be set:\n```\nPYTHONUNBUFFERED=1\nEVENT_NOKQUEUE=1\n```\n\nRemaining dependencies can then be installed by running:\n```\nbrew install python protobuf\n```\n\nAssistance installing Python3: https://docs.python-guide.org/starting/install3/osx/.\n\n### Linux\n\nOn Ubuntu (we recommend 18.04 or 20.04), install the following:\n```\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt-get update\nsudo apt-get install build-essential python3.7 python3.7-dev git python3.7-venv libssl-dev python-protobuf\n```\n\nThe [deadsnakes PPA](https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa) provides Python 3.7\nfor those Ubuntu distributions that no longer have it in their\nofficial repositories.\n\nOn Raspbian, you will also need to install `python-pyparsing`.\n\nIf you're running another Linux distro, install the equivalent of the above packages for your system.\n\n## Installation\n\n### Linux/Mac\n\nClone the repository:\n```bash\ngit clone https://github.com/lbryio/lbry-sdk.git\ncd lbry-sdk\n```\n\nCreate a Python virtual environment for lbry-sdk:\n```bash\npython3.7 -m venv lbry-venv\n```\n\nActivate virtual environment:\n```bash\nsource lbry-venv/bin/activate\n```\n\nMake sure you're on Python 3.7+ as default in the virtual environment:\n```bash\npython --version\n```\n\nInstall packages:\n```bash\nmake install\n```\n\nIf you are on Linux and using PyCharm, generates initial configs:\n```bash\nmake idea\n```\n\nTo verify your installation, `which lbrynet` should return a path inside\nof the `lbry-venv` folder.\n```bash\n(lbry-venv) $ which lbrynet\n/opt/lbry-sdk/lbry-venv/bin/lbrynet\n```\n\nTo exit the virtual environment simply use the command `deactivate`.\n\n### Windows\n\nClone the repository:\n```bash\ngit clone https://github.com/lbryio/lbry-sdk.git\ncd lbry-sdk\n```\n\nCreate a Python virtual environment for lbry-sdk:\n```bash\npython -m venv lbry-venv\n```\n\nActivate virtual environment:\n```bash\nlbry-venv\\Scripts\\activate\n```\n\nInstall packages:\n```bash\npip install -e .\n```\n\n## Run the tests\n### Elasticsearch\n\nFor running integration tests, Elasticsearch is required to be available at localhost:9200/\n\nThe easiest way to start it is using docker with:\n```bash\nmake elastic-docker\n```\n\nAlternative installation methods are available [at Elasticsearch website](https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html).\n\nTo run the unit and integration tests from the repo directory:\n```\npython -m unittest discover tests.unit\npython -m unittest discover tests.integration\n```\n\n## Usage\n\nTo start the API server:\n```\nlbrynet start\n```\n\nWhenever the code inside [lbry-sdk/lbry](./lbry)\nis modified we should run `make install` to recompile the `lbrynet`\nexecutable with the newest code.\n\n## Development\n\nWhen developing, remember to enter the environment,\nand if you wish start the server interactively.\n```bash\n$ source lbry-venv/bin/activate\n\n(lbry-venv) $ python lbry/extras/cli.py start\n```\n\nParameters can be passed in the same way.\n```bash\n(lbry-venv) $ python lbry/extras/cli.py wallet balance\n```\n\nIf a Python debugger (`pdb` or `ipdb`) is installed we can also start it\nin this way, set up break points, and step through the code.\n```bash\n(lbry-venv) $ pip install ipdb\n\n(lbry-venv) $ ipdb lbry/extras/cli.py\n```\n\nHappy hacking!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2022 LBRY Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0869140625,
          "content": "include README.md\ninclude CHANGELOG.md\ninclude LICENSE\nrecursive-include lbry *.txt *.py\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.63671875,
          "content": ".PHONY: install tools lint test test-unit test-unit-coverage test-integration idea\n\ninstall:\n\tpip install -e .\n\nlint:\n\tpylint --rcfile=setup.cfg lbry\n\t#mypy --ignore-missing-imports lbry\n\ntest: test-unit test-integration\n\ntest-unit:\n\tpython -m unittest discover tests.unit\n\ntest-unit-coverage:\n\tcoverage run --source=lbry -m unittest discover -vv tests.unit\n\ntest-integration:\n\ttox\n\nidea:\n\tmkdir -p .idea\n\tcp -r scripts/idea/* .idea\n\nelastic-docker:\n\tdocker run -d -v lbryhub:/usr/share/elasticsearch/data -p 9200:9200 -p 9300:9300 -e\"ES_JAVA_OPTS=-Xms512m -Xmx512m\" -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:7.12.1\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7890625,
          "content": "# <img src=\"https://raw.githubusercontent.com/lbryio/lbry-sdk/master/lbry.png\" alt=\"LBRY\" width=\"48\" height=\"36\" /> LBRY SDK [![build](https://github.com/lbryio/lbry-sdk/actions/workflows/main.yml/badge.svg)](https://github.com/lbryio/lbry-sdk/actions/workflows/main.yml) [![coverage](https://coveralls.io/repos/github/lbryio/lbry-sdk/badge.svg)](https://coveralls.io/github/lbryio/lbry-sdk)\n\nLBRY is a decentralized peer-to-peer protocol for publishing and accessing digital content. It utilizes the [LBRY blockchain](https://github.com/lbryio/lbrycrd) as a global namespace and database of digital content. Blockchain entries contain searchable content metadata, identities, rights and access rules. LBRY also provides a data network that consists of peers (seeders) uploading and downloading data from other peers, possibly in exchange for payments, as well as a distributed hash table used by peers to discover other peers.\n\nLBRY SDK for Python is currently the most fully featured implementation of the LBRY Network protocols and includes many useful components and tools for building decentralized applications. Primary features and components include:\n\n * Built on Python 3.7 and `asyncio`.\n * Kademlia DHT (Distributed Hash Table) implementation for finding peers to download from and announcing to peers what we have to host ([lbry.dht](https://github.com/lbryio/lbry-sdk/tree/master/lbry/dht)).\n * Blob exchange protocol for transferring encrypted blobs of content and negotiating payments ([lbry.blob_exchange](https://github.com/lbryio/lbry-sdk/tree/master/lbry/blob_exchange)).\n * Protobuf schema for encoding and decoding metadata stored on the blockchain ([lbry.schema](https://github.com/lbryio/lbry-sdk/tree/master/lbry/schema)).\n * Wallet implementation for the LBRY blockchain ([lbry.wallet](https://github.com/lbryio/lbry-sdk/tree/master/lbry/wallet)).\n * Daemon with a JSON-RPC API to ease building end user applications in any language and for automating various tasks ([lbry.extras.daemon](https://github.com/lbryio/lbry-sdk/tree/master/lbry/extras/daemon)). \n\n## Installation\n\nOur [releases page](https://github.com/lbryio/lbry-sdk/releases) contains pre-built binaries of the latest release, pre-releases, and past releases for macOS, Debian-based Linux, and Windows. [Automated travis builds](http://build.lbry.io/daemon/) are also available for testing.\n\n## Usage\n\nRun `lbrynet start` to launch the API server.\n\nBy default, `lbrynet` will provide a JSON-RPC server at `http://localhost:5279`. It is easy to interact with via cURL or sane programming languages.\n\nOur [quickstart guide](https://lbry.tech/playground) provides a simple walkthrough and examples for learning.\n\nWith the daemon running, `lbrynet commands` will show you a list of commands.\n\nThe full API is documented [here](https://lbry.tech/api/sdk).\n\n## Running from source\n\nInstalling from source is also relatively painless. Full instructions are in [INSTALL.md](INSTALL.md)\n\n## Contributing\n\nContributions to this project are welcome, encouraged, and compensated. For more details, please check [this](https://lbry.tech/contribute) link.\n\n## License\n\nThis project is MIT licensed. For the full license, see [LICENSE](LICENSE).\n\n## Security\n\nWe take security seriously. Please contact security@lbry.com regarding any security issues. [Our PGP key is here](https://lbry.com/faq/pgp-key) if you need it.\n\n## Contact\n\nThe primary contact for this project is [@eukreign](mailto:lex@lbry.com).\n\n## Additional information and links\n\nThe documentation for the API can be found [here](https://lbry.tech/api/sdk).\n\nDaemon defaults, ports, and other settings are documented [here](https://lbry.tech/resources/daemon-settings).\n\nSettings can be configured using a daemon-settings.yml file. An example can be found [here](https://github.com/lbryio/lbry-sdk/blob/master/example_daemon_settings.yml).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.17578125,
          "content": "# Security Policy\n\n## Supported Versions\n\nWhile we are not at v1.0 yet, only the latest release will be supported.\n\n## Reporting a Vulnerability\n\nSee https://lbry.com/faq/security\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_daemon_settings.yml",
          "type": "blob",
          "size": 0.505859375,
          "content": "# This is an example daemon_settings.yml file.\n# See https://lbry.tech/resources/daemon-settings for all configuration keys and values\n\nshare_usage_data: True\n\nlbryum_servers:\n  - lbryumx1.lbry.com:50001\n  - lbryumx2.lbry.com:50001\n  - lbryumx4.lbry.com:50001\n\nblockchain_name: lbrycrd_main\n\ndata_dir: /home/lbry/.lbrynet\ndownload_directory: /home/lbry/downloads\n\nsave_blobs: true\nsave_files: false\ndht_node_port: 4444\npeer_port: 3333\nuse_upnp: true\n\n#components_to_skip:\n#  - hash_announcer\n#  - blob_server\n#  - dht\n"
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "lbry.png",
          "type": "blob",
          "size": 2.5888671875,
          "content": null
        },
        {
          "name": "lbry",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.05859375,
          "content": "[coverage:run]\nbranch = True\n\n[coverage:paths]\nsource =\n  lbry\n  .tox/*/lib/python*/site-packages/lbry\nomit =\n  lbry/wallet/orchstr8/\n  .tox/*/lib/python*/site-packages/lbry/wallet/orchstr8/node.py\n\n[cryptography.*,coincurve.*,pbkdf2,libtorrent]\nignore_missing_imports = True\n\n[pylint]\njobs=8\nignore=words,server,rpc,schema,winpaths.py,migrator,undecorated.py\nmax-parents=10\nmax-args=10\nmax-line-length=120\ngood-names=T,t,n,i,j,k,x,y,s,f,d,h,c,e,op,db,tx,io,cachedproperty,log,id,r,iv,ts,l,pk\nvalid-metaclass-classmethod-first-arg=mcs\ndisable=\n  c-extension-no-member,\n  fixme,\n  broad-except,\n  raise-missing-from,\n  no-else-return,\n  cyclic-import,\n  missing-docstring,\n  consider-using-f-string,\n  duplicate-code,\n  expression-not-assigned,\n  inconsistent-return-statements,\n  too-few-public-methods,\n  too-many-lines,\n  too-many-locals,\n  too-many-branches,\n  too-many-arguments,\n  too-many-statements,\n  too-many-nested-blocks,\n  too-many-public-methods,\n  too-many-return-statements,\n  too-many-instance-attributes,\n  unspecified-encoding,\n  protected-access,\n  unused-argument\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1708984375,
          "content": "import os\nimport sys\nfrom lbry import __name__, __version__\nfrom setuptools import setup, find_packages\n\nBASE = os.path.dirname(__file__)\nwith open(os.path.join(BASE, 'README.md'), encoding='utf-8') as fh:\n    long_description = fh.read()\n\nsetup(\n    name=__name__,\n    version=__version__,\n    author=\"LBRY Inc.\",\n    author_email=\"hello@lbry.com\",\n    url=\"https://lbry.com\",\n    description=\"A decentralized media library and marketplace\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    keywords=\"lbry protocol media\",\n    license='MIT',\n    python_requires='>=3.8',\n    packages=find_packages(exclude=('tests',)),\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'lbrynet=lbry.extras.cli:main',\n            'orchstr8=lbry.wallet.orchstr8.cli:main'\n        ],\n    },\n    install_requires=[\n        'aiohttp==3.7.4',\n        'aioupnp==0.0.18',\n        'appdirs==1.4.3',\n        'certifi>=2021.10.08',\n        'colorama==0.3.7',\n        'distro==1.4.0',\n        'base58==1.0.0',\n        'cffi==1.13.2',\n        'cryptography==3.4.7',\n        'protobuf==3.17.2',\n        'prometheus_client==0.7.1',\n        'ecdsa==0.13.3',\n        'pyyaml==5.3.1',\n        'docopt==0.6.2',\n        'hachoir==3.1.2',\n        'coincurve==15.0.0',\n        'pbkdf2==1.3',\n        'filetype==1.0.9',\n        'libtorrent==2.0.6',\n    ],\n    extras_require={\n        'lint': [\n            'pylint==2.13.9'\n        ],\n        'test': [\n            'coverage',\n            'jsonschema==4.4.0',\n        ],\n        'hub': [\n            'hub@git+https://github.com/lbryio/hub.git@929448d64bcbe6c5e476757ec78456beaa85e56a'\n        ]\n    },\n    classifiers=[\n        'Framework :: AsyncIO',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Operating System :: OS Independent',\n        'Topic :: Internet',\n        'Topic :: Software Development :: Testing',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: System :: Distributed Computing',\n        'Topic :: Utilities',\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.896484375,
          "content": "[testenv]\nusedevelop = true\ndeps =\n  coverage\nextras =\n  test\n  hub\nchangedir = {toxinidir}/tests\nsetenv =\n  HOME=/tmp\n  ELASTIC_HOST={env:ELASTIC_HOST:localhost}\ncommands =\n  orchstr8 download\n  blockchain: coverage run -p --source={envsitepackagesdir}/lbry -m unittest discover -vv integration.blockchain {posargs}\n  claims: coverage run -p --source={envsitepackagesdir}/lbry -m unittest discover -vv integration.claims {posargs}\n  takeovers: coverage run -p --source={envsitepackagesdir}/lbry -m unittest discover -vv integration.takeovers {posargs}\n  transactions: coverage run -p --source={envsitepackagesdir}/lbry -m unittest discover -vv integration.transactions {posargs}\n  datanetwork: coverage run -p --source={envsitepackagesdir}/lbry -m unittest discover -vv integration.datanetwork {posargs}\n  other: coverage run -p --source={envsitepackagesdir}/lbry -m unittest discover -vv integration.other {posargs}\n"
        }
      ]
    }
  ]
}