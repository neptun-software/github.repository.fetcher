{
  "metadata": {
    "timestamp": 1736560695872,
    "page": 353,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "1adrianb/face-alignment",
      "stars": 7170,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0595703125,
          "content": "*.py linguist-language=python\n*.ipynb linguist-documentation\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1376953125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n*.json\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0810546875,
          "content": "# Based on a older version of https://github.com/pytorch/pytorch/blob/master/Dockerfile\r\nFROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04\r\n\r\nRUN apt-get update && apt-get install -y --no-install-recommends \\\r\n         build-essential \\\r\n         cmake \\\r\n         git \\\r\n         curl \\\r\n         vim \\\r\n         ca-certificates \\\r\n         libboost-all-dev \\\r\n         python-qt4 \\\r\n         libjpeg-dev \\\r\n         libpng-dev &&\\\r\n     rm -rf /var/lib/apt/lists/*\r\n\r\nRUN curl -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \\\r\n     chmod +x ~/miniconda.sh && \\\r\n     ~/miniconda.sh -b -p /opt/conda && \\\r\n     rm ~/miniconda.sh\r\n\r\nENV PATH /opt/conda/bin:$PATH\r\n\r\nRUN conda config --set always_yes yes --set changeps1 no && conda update -q conda \r\nRUN conda install pytorch torchvision cudatoolkit=10.1 -c pytorch\r\n\r\n# Install face-alignment package\r\nWORKDIR /workspace\r\nRUN chmod -R a+w /workspace\r\nRUN git clone https://github.com/1adrianb/face-alignment\r\nWORKDIR /workspace/face-alignment\r\nRUN pip install -r requirements.txt\r\nRUN python setup.py install\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4765625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2017, Adrian Bulat\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2216796875,
          "content": "# Face Recognition\n\nDetect facial landmarks from Python using the world's most accurate face alignment network, capable of detecting points in both 2D and 3D coordinates.\n\nBuild using [FAN](https://www.adrianbulat.com)'s state-of-the-art deep learning based face alignment method. \n\n<p align=\"center\"><img src=\"docs/images/face-alignment-adrian.gif\" /></p>\n\n**Note:** The lua version is available [here](https://github.com/1adrianb/2D-and-3D-face-alignment).\n\nFor numerical evaluations it is highly recommended to use the lua version which uses indentical models with the ones evaluated in the paper. More models will be added soon.\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)  [![Test Face alignmnet](https://github.com/1adrianb/face-alignment/workflows/Test%20Face%20alignmnet/badge.svg)](https://github.com/1adrianb/face-alignment/actions?query=workflow%3A%22Test+Face+alignmnet%22) [![Anaconda-Server Badge](https://anaconda.org/1adrianb/face_alignment/badges/version.svg)](https://anaconda.org/1adrianb/face_alignment)\n[![PyPI version](https://badge.fury.io/py/face-alignment.svg)](https://pypi.org/project/face-alignment/)\n\n## Features\n\n#### Detect 2D facial landmarks in pictures\n\n<p align='center'>\n<img src='docs/images/2dlandmarks.png' title='3D-FAN-Full example' style='max-width:600px'></img>\n</p>\n\n```python\nimport face_alignment\nfrom skimage import io\n\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType.TWO_D, flip_input=False)\n\ninput = io.imread('../test/assets/aflw-test.jpg')\npreds = fa.get_landmarks(input)\n```\n\n#### Detect 3D facial landmarks in pictures\n\n<p align='center'>\n<img src='https://www.adrianbulat.com/images/image-z-examples.png' title='3D-FAN-Full example' style='max-width:600px'></img>\n</p>\n\n```python\nimport face_alignment\nfrom skimage import io\n\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType.THREE_D, flip_input=False)\n\ninput = io.imread('../test/assets/aflw-test.jpg')\npreds = fa.get_landmarks(input)\n```\n\n#### Process an entire directory in one go\n\n```python\nimport face_alignment\nfrom skimage import io\n\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType.TWO_D, flip_input=False)\n\npreds = fa.get_landmarks_from_directory('../test/assets/')\n```\n\n#### Detect the landmarks using a specific face detector.\n\nBy default the package will use the SFD face detector. However the users can alternatively use dlib, BlazeFace, or pre-existing ground truth bounding boxes.\n\n```python\nimport face_alignment\n\n# sfd for SFD, dlib for Dlib and folder for existing bounding boxes.\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType.TWO_D, face_detector='sfd')\n```\n\n#### Running on CPU/GPU\nIn order to specify the device (GPU or CPU) on which the code will run one can explicitly pass the device flag:\n\n```python\nimport torch\nimport face_alignment\n\n# cuda for CUDA, mps for Apple M1/2 GPUs.\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType.TWO_D, device='cpu')\n\n# running using lower precision\nfa = fa = face_alignment.FaceAlignment(face_alignment.LandmarksType.TWO_D, dtype=torch.bfloat16, device='cuda')\n```\n\nPlease also see the ``examples`` folder\n\n#### Supported face detectors\n\n```python\n\n# dlib (fast, may miss faces)\nmodel = FaceAlignment(landmarks_type= LandmarksType.TWO_D, face_detector='dlib')\n\n# SFD (likely best results, but slowest)\nmodel = FaceAlignment(landmarks_type= LandmarksType.TWO_D, face_detector='sfd')\n\n# Blazeface (front camera model)\nmodel = FaceAlignment(landmarks_type= LandmarksType.TWO_D, face_detector='blazeface')\n\n# Blazeface (back camera model)\nmodel = FaceAlignment(landmarks_type= LandmarksType.TWO_D, face_detector='blazeface', face_detector_kwargs={'back_model': True})\n\n```\n\n## Installation\n\n### Requirements\n\n* Python 3.5+ (it may work with other versions too). Last version with support for python 2.7 was v1.1.1\n* Linux, Windows or macOS\n* pytorch (>=1.5)\n\nWhile not required, for optimal performance(especially for the detector) it is **highly** recommended to run the code using a CUDA enabled GPU.\n\n### Binaries\n\nThe easiest way to install it is using either pip or conda:\n\n| **Using pip**                | **Using conda**                            |\n|------------------------------|--------------------------------------------|\n| `pip install face-alignment` | `conda install -c 1adrianb face_alignment` |\n|                              |                                            |\n\nAlternatively, bellow, you can find instruction to build it from source.\n\n### From source\n\n Install pytorch and pytorch dependencies. Please check the [pytorch readme](https://github.com/pytorch/pytorch) for this.\n\n#### Get the Face Alignment source code\n```bash\ngit clone https://github.com/1adrianb/face-alignment\n```\n#### Install the Face Alignment lib\n```bash\npip install -r requirements.txt\npython setup.py install\n```\n\n### Docker image\n\nA Dockerfile is provided to build images with cuda support and cudnn. For more instructions about running and building a docker image check the orginal Docker documentation.\n```\ndocker build -t face-alignment .\n```\n\n## How does it work?\n\nWhile here the work is presented as a black-box, if you want to know more about the intrisecs of the method please check the original paper either on arxiv or my [webpage](https://www.adrianbulat.com).\n\n## Contributions\n\nAll contributions are welcomed. If you encounter any issue (including examples of images where it fails) feel free to open an issue. If you plan to add a new features please open an issue to discuss this prior to making a pull request.\n\n## Citation\n\n```\n@inproceedings{bulat2017far,\n  title={How far are we from solving the 2D \\& 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)},\n  author={Bulat, Adrian and Tzimiropoulos, Georgios},\n  booktitle={International Conference on Computer Vision},\n  year={2017}\n}\n```\n\nFor citing dlib, pytorch or any other packages used here please check the original page of their respective authors.\n\n## Acknowledgements\n\n* To the [pytorch](http://pytorch.org/) team for providing such an awesome deeplearning framework\n* To [my supervisor](http://www.cs.nott.ac.uk/~pszyt/) for his patience and suggestions.\n* To all other python developers that made available the rest of the packages used in this repository."
        },
        {
          "name": "conda",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "face_alignment",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0498046875,
          "content": "opencv-python\r\nscipy>=0.17.0\r\nscikit-image\r\nnumba\r\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.5126953125,
          "content": "[bumpversion]\ncurrent_version = 1.4.2\ncommit = True\ntag = True\n\n[bumpversion:file:setup.py]\nsearch = version='{current_version}'\nreplace = version='{new_version}'\n\n[bumpversion:file:face_alignment/__init__.py]\nsearch = __version__ = '{current_version}'\nreplace = __version__ = '{new_version}'\n\n[metadata]\ndescription_file = README.md\n\n[bdist_wheel]\nuniversal = 1\n\n[flake8]\nexclude = \n    .github,\n    examples,\n    docs,\n    .tox,\n    bin,\n    dist,\n    tools,\n    *.egg-info,\n    __init__.py,\n    *.yml\nmax-line-length = 160"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.193359375,
          "content": "import io\nimport os\nfrom os import path\nimport re\nfrom setuptools import setup, find_packages\n# To use consisten encodings\nfrom codecs import open\n\n# Function from: https://github.com/pytorch/vision/blob/master/setup.py\n\n\ndef read(*names, **kwargs):\n    with io.open(\n        os.path.join(os.path.dirname(__file__), *names),\n        encoding=kwargs.get(\"encoding\", \"utf8\")\n    ) as fp:\n        return fp.read()\n\n# Function from: https://github.com/pytorch/vision/blob/master/setup.py\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as readme_file:\n    long_description = readme_file.read()\n\nVERSION = find_version('face_alignment', '__init__.py')\n\nrequirements = [\n    'torch',\n    'numpy',\n    'scipy>=0.17',\n    'scikit-image',\n    'opencv-python',\n    'tqdm',\n    'numba',\n    'enum34;python_version<\"3.4\"'\n]\n\nsetup(\n    name='face_alignment',\n    version=VERSION,\n\n    description=\"Detector 2D or 3D face landmarks from Python\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n\n    # Author details\n    author=\"Adrian Bulat\",\n    author_email=\"adrian@adrianbulat.com\",\n    url=\"https://github.com/1adrianb/face-alignment\",\n\n    # Package info\n    packages=find_packages(exclude=('test',)),\n\n    python_requires='>=3',\n    install_requires=requirements,\n    license='BSD',\n    zip_safe=True,\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n\n        # Supported python versions\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n    ],\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.0888671875,
          "content": "[flake8]\r\nmax-line-length = 120\r\nignore = E305,E402,E721,F401,F403,F405,F821,F841,F999,W503"
        }
      ]
    }
  ]
}