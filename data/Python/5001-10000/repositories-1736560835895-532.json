{
  "metadata": {
    "timestamp": 1736560835895,
    "page": 532,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sammchardy/python-binance",
      "stars": 6274,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coverage",
          "type": "blob",
          "size": 52,
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.134765625,
          "content": ".tox\n.cache/v/cache\ndocs/_build\nbinance/__pycache__/\nbuild/\ndist/\npython_binance.egg-info/\n*__pycache__\n*.egg-info/\n.idea/\nvenv*/\n.vscode\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.3984375,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.1\n    hooks:\n    -   id: ruff\n    -   id: ruff-format\n\n-   repo: https://github.com/RobertCraigie/pyright-python\n    rev: v1.1.389\n    hooks:\n    -   id: pyright\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.0400390625,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#   - pdf\n#   - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt\n    - requirements: requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2353515625,
          "content": "dist: xenial\n\nlanguage: python\n\npython:\n  - \"3.6\"\n  - \"3.7\"\n  - \"3.8\"\n  - \"3.9\"\n\ninstall:\n  - pip install -r test-requirements.txt\n  - pip install -r requirements.txt\n  - pip install tox-travis\n\nscript:\n  - tox\n\nafter_success:\n  - coveralls\n"
        },
        {
          "name": "Endpoints.md",
          "type": "blob",
          "size": 35.841796875,
          "content": "> :warning: **Disclaimer**: \n\n > * Before using the endpoints, please check the [API documentation](https://binance-docs.github.io/apidocs/#change-log) to be informed about the latest changes or possible bugs/problems. \n\n > * Not all parameters are mandatory. Some parameters are only mandatory in specific conditions/types. Check the official documentation the type of each parameter and to know if a parameter is mandatory or optional. \n\n > * This documentation only includes methods in client.py file. Websocket methods haven't (yet) been covered.\n \n### [Spot/Margin/Saving/Mining Endpoints](https://binance-docs.github.io/apidocs/spot/en/)\n- *Wallet Endpoints*\n  - **GET /sapi/v1/system/status** (Fetch system status.)\n    ```python \n    client.get_system_status()\n    ```\n  - **GET /sapi/v1/capital/config/getall (HMAC SHA256)** (Get information of coins (available for deposit and withdraw) for user.)\n    ```python \n    client.get_all_coins_info()\n    ```\n  - **GET /sapi/v1/accountSnapshot (HMAC SHA256)** (Daily Account Snapshot (USER_DATA).)\n    ```python \n    client.get_account_snapshot(type='SPOT')\n    ```\n  - **POST /sapi/v1/account/disableFastWithdrawSwitch (HMAC SHA256)** (Disable Fast Withdraw Switch (USER_DATA).)\n    ```python \n    client.disable_fast_withdraw_switch(type='SPOT')\n    ``` \n  - **POST /sapi/v1/account/enableFastWithdrawSwitch (HMAC SHA256)** (Enable Fast Withdraw Switch (USER_DATA).)\n    ```python \n    client.enable_fast_withdraw_switch(type='SPOT')\n    ```\n  - **POST /sapi/v1/capital/withdraw/apply (HMAC SHA256)** (Withdraw: Submit a withdraw request.)\n    ```python \n    client.withdraw(coin, \n        withdrawOrderId, \n        network, \n        address, \n        addressTag, \n        amount, \n        transactionFeeFlag, \n        name, \n        recvWindow)\n    ```\n  - **GET /sapi/v1/capital/deposit/hisrec (HMAC SHA256)** (Fetch Deposit History(supporting network) (USER_DATA).)\n    ```python \n    client.get_deposit_history(coin, status, startTime, endTime, recvWindow)\n    ```\n  - **GET /sapi/v1/capital/withdraw/history (HMAC SHA256)** (Fetch Withdraw History (supporting network) (USER_DATA).)\n    ```python \n    client.get_withdraw_history(coin, status, startTime, endTime, recvWindow)\n    ```\n  - **GET /sapi/v1/capital/deposit/address (HMAC SHA256)** (Fetch deposit address with network.)\n    ```python \n    client.get_deposit_address(coin, status, recvWindow)\n    ```\n  - **GET /sapi/v1/account/status** (Fetch account status detail.)\n    ```python \n    client.get_account_status(recvWindow)\n    ```\n  - **GET /sapi/account/apiTradingStatus** (Fetch account api trading status detail.)\n    ```python \n    client.get_account_api_trading_status(recvWindow)\n    ```\n  - **GET /sapi/v1/asset/dribblet (HMAC SHA256)** (DustLog: Fetch small amounts of assets exchanged BNB records.)\n    ```python \n    client.get_dust_log(recvWindow)\n    ```\n  - **Post /sapi/v1/asset/dust (HMAC SHA256)** (Dust Transfer: Convert dust assets to BNB.)\n    ```python \n    client.transfer_dust(asset, recvWindow)\n    ```\n  - **Get /sapi/v1/asset/assetDividend (HMAC SHA256)** (Query asset dividend record.)\n    ```python \n    client.get_asset_dividend_history(asset, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /sapi/v1/asset/assetDetail (HMAC SHA256)** (Fetch details of assets supported on Binance.)\n    ```python \n    client.get_asset_details(recvWindow)\n    ```\n  - **GET /sapi/v1/asset/tradeFee (HMAC SHA256)** (Fetch trade fee, values in percentage.)\n    ```python \n    client.get_trade_fee(symbol, recvWindow)\n    ```\n- *Market Data Endpoints*\n  - **GET /api/v3/ping** (Test connectivity to the Rest API.)\n    ```python \n    client.ping()\n    ```\n  - **GET /api/v3/time** (Test connectivity to the Rest API and get the current server time.)\n    ```python \n    client.get_server_time()\n    ```\n  - **GET /api/v3/exchangeInfo** (Current exchange trading rules and symbol information.)\n    ```python \n    client.get_exchange_info()\n    ```\n  - **GET /api/v3/depth** (Get the Order Book for the market.)\n    ```python \n    client.get_order_book(symbol, limit)\n    ```\n  - **GET /api/v3/trades** (Get recent trades (up to last 500))\n    ```python \n    client.get_recent_trades(symbol, limit)\n    ```\n  - **GET /api/v3/historicalTrades** (Get older market trades.)\n    ```python \n    client.get_historical_trades(symbol, limit, fromId)\n    ``` \n  - **GET /api/v3/aggTrades** (Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.)\n    ```python \n    client.get_aggregate_trades(symbol, fromId, startTime, endTime, limit)\n    \n    # Wrapper function: Iterate over aggregate trade data from (start_time or last_id) the end of the history so far:\n    client.aggregate_trade_iter(symbol, start_str, last_id)\n    ```\n  - **GET /api/v3/klines** (Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.)\n    ```python \n    client.get_klines(symbol, interval, startTime, endTime, limit)\n    \n    # Wrapper function: Iterate over klines data from client.get_klines()\n    client.get_historical_klines(symbol, interval, start_str, end_str, limit)\n    ```\n  - **GET /api/v3/avgPrice** (Current average price for a symbol.)\n    ```python \n    client.get_avg_price(symbol)\n    ```\n  - **GET /api/v3/ticker/24hr** (24 hour rolling window price change statistics. **Careful** when accessing this with no symbol.)\n    ```python \n    client.get_ticker(symbol)\n    ```\n  - **GET /api/v3/ticker/price** (Latest price for a symbol or symbols.)\n    ```python \n    client.get_symbol_ticker(symbol)\n    ```\n  - **GET /api/v3/ticker/bookTicker** (Best price/qty on the order book for a symbol or symbols.)\n    ```python \n    client.get_orderbook_ticker(symbol)\n    ```\n- *Spot Account/Trade Endpoints*\n  - **POST /api/v3/order/test (HMAC SHA256)** (Test new order creation and signature/recvWindow long. Creates and validates a new order but does not send it into the matching engine.)\n    ```python \n    client.create_test_order(symbol, \n        side, \n        type, \n        timeInForce, \n        quantity, \n        quoteOrderQty, \n        price, \n        newClientOrderId, \n        stopPrice, \n        icebergQty, \n        newOrderRespType, \n        recvWindow)\n    ```\n  - **POST /api/v3/order (HMAC SHA256)** (Send in a new order.)\n    ```python \n    client.create_order(symbol, \n        side, \n        type, \n        timeInForce, \n        quantity, \n        quoteOrderQty, \n        price, \n        newClientOrderId, \n        stopPrice, \n        icebergQty, \n        newOrderRespType, \n        recvWindow)\n        \n    ## Wrapper functions:\n    # Send in a new limit order. \n    # Default parameters: timeInForce=Client.TIME_IN_FORCE_GTC, type=Client.ORDER_TYPE_LIMIT\n    client.order_limit(symbol, \n        side,\n        quantity, \n        price, \n        newClientOrderId, \n        stopPrice, \n        icebergQty, \n        newOrderRespType, \n        recvWindow)\n    \n    # Send in a new limit buy order. \n    # Default parameters: timeInForce=Client.TIME_IN_FORCE_GTC, type=Client.ORDER_TYPE_LIMIT, side=Client.SIDE_BUY\n    client.order_limit_buy(symbol, \n        quantity, \n        price, \n        newClientOrderId, \n        stopPrice, \n        icebergQty, \n        newOrderRespType, \n        recvWindow) \n    \n    # Send in a new limit sell order. \n    # Default parameters: timeInForce=Client.TIME_IN_FORCE_GTC, type=Client.ORDER_TYPE_LIMIT, side= Client.SIDE_SELL\n    client.order_limit_sell(symbol, \n        quantity, \n        price, \n        newClientOrderId, \n        stopPrice, \n        icebergQty, \n        newOrderRespType, \n        recvWindow)\n        \n    # Send in a new market order. \n    # Default parameters: type=Client.ORDER_TYPE_MARKET\n    client.order_market(symbol, \n        side, \n        quantity, \n        quoteOrderQty, \n        newClientOrderId, \n        newOrderRespType, \n        recvWindow)\n        \n    # Send in a new market buy order. \n    # Default parameters: type=Client.ORDER_TYPE_MARKET, side=Client.SIDE_BUY\n    client.order_market_buy(symbol, \n        quantity, \n        quoteOrderQty, \n        newClientOrderId, \n        newOrderRespType, \n        recvWindow)\n    \n    # Send in a new market sell order. \n    # Default parameters: type=Client.ORDER_TYPE_MARKET, side=Client.SIDE_SELL\n    client.order_market_sell(symbol, \n        quantity, \n        quoteOrderQty, \n        newClientOrderId, \n        newOrderRespType, \n        recvWindow)\n    ```\n  - **DELETE /api/v3/order (HMAC SHA256)** (Cancel an active order.)\n    ```python \n    client.cancel_order(symbol, orderId, origClientOrderId, newClientOrderId, recvWindow)\n    ```\n  - **DELETE api/v3/openOrders** (Cancels all active orders on a symbol. This includes OCO orders.)\n  \n    > :warning: Not yet implemented\n  - **GET /api/v3/order (HMAC SHA256)** (Check an order's status.)\n    ```python \n    client.get_order(symbol, orderId, origClientOrderId, recvWindow)\n    ```\n  - **GET /api/v3/openOrders (HMAC SHA256)** (Get all open orders on a symbol. **Careful** when accessing this with no symbol.)\n    ```python \n    client.get_open_orders(symbol, recvWindow)\n    ```\n  - **GET /api/v3/allOrders (HMAC SHA256)** (Get all account orders; active, canceled, or filled.)\n    ```python \n    client.get_all_orders(symbol, orderId, startTime, endTime, limit, recvWindow)\n    ```\n  - **POST /api/v3/order/oco (HMAC SHA256)** (Send in a new OCO order)\n    ```python \n    client.create_oco_order(symbol, \n        listClientOrderId, \n        side, \n        quantity, \n        limitClientOrderId, \n        price, \n        limitIcebergQty, \n        stopClientOrderId, \n        stopPrice, \n        stopLimitPrice, \n        stopIcebergQty, \n        stopLimitTimeInForce, \n        newOrderRespType, \n        recvWindow)\n    \n    ## Wrapper Functions:\n    \n    # Send in a new OCO buy order. Default parameter: type=Client.SIDE_BUY\n    client.order_oco_buy(symbol, \n        listClientOrderId, \n        quantity, \n        limitClientOrderId, \n        price, \n        limitIcebergQty, \n        stopClientOrderId, \n        stopPrice, \n        stopLimitPrice, \n        stopIcebergQty, \n        stopLimitTimeInForce, \n        newOrderRespType, \n        recvWindow)\n        \n    # Send in a new OCO sell order. Default parameter: type=Client.SIDE_SELL\n    client.order_oco_sell(symbol, \n        listClientOrderId, \n        quantity, \n        limitClientOrderId, \n        price, \n        limitIcebergQty, \n        stopClientOrderId, \n        stopPrice, \n        stopLimitPrice, \n        stopIcebergQty, \n        stopLimitTimeInForce, \n        newOrderRespType, \n        recvWindow)\n    ```\n  - **DELETE /api/v3/orderList (HMAC SHA256)** (Cancel OCO: Cancel an entire Order List)\n   \n    > :warning: Not yet implemented\n  - **GET /api/v3/orderList (HMAC SHA256)** (Query OCO: Retrieves a specific OCO based on provided optional parameters)\n  \n    > :warning: Not yet implemented\n  - **GET /api/v3/allOrderList (HMAC SHA256)** (Retrieves all OCO based on provided optional parameters)\n  \n    > :warning: Not yet implemented\n  - **GET /api/v3/openOrderList (HMAC SHA256)** (Query Open OCO (USER_DATA))\n  \n    > :warning: Not yet implemented\n  - **GET /api/v3/account (HMAC SHA256)** (Get current account information.)\n    ```python \n    client.get_account(recvWindow)\n    ```\n  - **GET /api/v3/myTrades (HMAC SHA256)** (Get trades for a specific account and symbol.)\n    ```python \n    client.get_my_trades(symbol, startTime, endTime, fromId, limit, recvWindow)\n    ```\n- *Margin Account/Trade*\n  - **POST /sapi/v1/margin/transfer (HMAC SHA256)** (Execute transfer between margin account and spot account(MARGIN).)\n    ```python \n    client.transfer_margin_to_spot(asset, amount, recvWindow)\n    client.transfer_spot_to_margin(asset, amount, recvWindow)\n    ```\n  - **POST /sapi/v1/margin/loan (HMAC SHA256)** (Apply for a loan(MARGIN).)\n    ```python \n    client.create_margin_loan(asset, isIsolated, symbol, amount, recvWindow)\n    ```\n  - **POST /sapi/v1/margin/repay (HMAC SHA256)** (Repay loan for margin account (MARGIN).)\n    ```python \n    client.repay_margin_loan(asset, isIsolated, symbol, amount, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/asset** (Query Margin Asset (MARKET_DATA).)\n    ```python \n    client.get_margin_asset(asset)\n    ```\n  - **GET /sapi/v1/margin/pair** (Query Cross Margin Pair (MARKET_DATA).)\n    ```python \n    client.get_margin_symbol(symbol)\n    ```\n  - **GET /sapi/v1/margin/allAssets** (Get All Cross Margin Assets (MARKET_DATA).)\n    ```python \n    client.get_margin_all_assets()\n    ```\n  - **GET /sapi/v1/margin/allPairs** (Get All Cross Margin Pairs (MARKET_DATA).)\n    ```python \n    client.get_margin_all_pairs()\n    ```\n  - **GET /sapi/v1/margin/priceIndex** (Query Margin PriceIndex (MARKET_DATA).)\n    ```python \n    client.get_margin_price_index(symbol)\n    ```\n  - **POST /sapi/v1/margin/order (HMAC SHA256)** (Post a new order for margin account.)\n    ```python \n    client.create_margin_order(symbol,\n        isIsolated,\n        side, \n        type, \n        quantity, \n        price, \n        stopPrice, \n        newClientOrderId,\n        icebergQty,\n        newOrderRespType,\n        sideEffectType,\n        timeInForce, \n        recvWindow)\n    ```\n  - **DELETE /sapi/v1/margin/order (HMAC SHA256)** (Cancel an active order for margin account.)\n    ```python \n    client.cancel_margin_order(symbol, \n        isIsolated, \n        orderId, \n        origClientOrderId, \n        newClientOrderId, \n        recvWindow)\n    ```\n  - **GET /sapi/v1/margin/transfer (HMAC SHA256)** (Get Cross Margin Transfer History (USER_DATA).)\n    ```python \n    client.transfer_margin_to_spot(asset, amount, recvWindow)\n    client.transfer_spot_to_margin(asset, amount, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/loan (HMAC SHA256)** (Query Loan Record (USER_DATA).)\n    ```python \n    client.get_margin_loan_details(asset, isolatedSymbol, txId, startTime, endTime, current, size, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/repay (HMAC SHA256)** (Query repay record (USER_DATA).)\n    ```python \n    client.get_margin_repay_details(asset, isolatedSymbol, txId, startTime, endTime, current, size, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/interestHistory (HMAC SHA256)** (Get Interest History (USER_DATA).)\n    ```python \n    client.get_margin_interest_history(asset, isolatedSymbol, startTime, endTime, current, size, archived, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/forceLiquidationRec (HMAC SHA256)** (Get Force Liquidation Record (USER_DATA).)\n    ```python \n    client.get_margin_force_liquidation_rec(isolatedSymbol, startTime, endTime, current, size, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/account (HMAC SHA256)** (Query Cross Margin Account Details (USER_DATA).)\n    ```python \n    client.get_margin_account(recvWindow)\n    ```\n  - **GET /sapi/v1/margin/order (HMAC SHA256)** (Query Margin Account's Order (USER_DATA).)\n    ```python \n    client.get_margin_order(symbol, isIsolated, orderId, origClientOrderId, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/openOrders (HMAC SHA256)** (Query Margin Account's Open Order (USER_DATA).)\n    ```python \n    client.get_open_margin_orders(symbol, isIsolated, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/allOrders (HMAC SHA256)** (Query Margin Account's All Order (USER_DATA).)\n    ```python \n    client.get_all_margin_orders(symbol, isIsolated, orderId, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/myTrades (HMAC SHA256)** (Query Margin Account's Trade List (USER_DATA).)\n    ```python \n    client.get_margin_trades(symbol, isIsolated, startTime, endTime, fromId, limit, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/maxBorrowable (HMAC SHA256)** (Query Max Borrow amount for an asset (USER_DATA).)\n    ```python \n    client.get_max_margin_loan(asset, isolatedSymbol, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/maxTransferable (HMAC SHA256)** (Query Max Transfer-Out Amount (USER_DATA).)\n    ```python \n    client.get_max_margin_transfer(asset, isolatedSymbol, recvWindow)\n    ```\n  - **POST /sapi/v1/margin/isolated/create (HMAC SHA256)** (Create Isolated Margin Account (MARGIN).)\n    ```python \n    client.create_isolated_margin_account(base, quote, recvWindow)\n    ```\n  - **POST /sapi/v1/margin/isolated/transfer (HMAC SHA256)** (Isolated Margin Account Transfer (MARGIN).)\n    ```python \n    client.transfer_spot_to_isolated_margin(asset, symbol, amount, recvWindow)\n    client.transfer_isolated_margin_to_spot(asset, symbol, amount, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/isolated/transfer (HMAC SHA256)** (Get Isolated Margin Transfer History (USER_DATA).)\n  \n    > :warning: Not yet implemented\n  - **GET /sapi/v1/margin/isolated/account (HMAC SHA256)** (Query Isolated Margin Account Info (USER_DATA).)\n    ```python \n    client.get_isolated_margin_account(symbols, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/isolated/pair (HMAC SHA256)** (Query Isolated Margin Symbol (USER_DATA).)\n    ```python \n    client.get_isolated_margin_symbol(symbol, recvWindow)\n    ```\n  - **GET /sapi/v1/margin/isolated/allPairs (HMAC SHA256)** (Get All Isolated Margin Symbol (USER_DATA).)\n    ```python \n    client.get_all_isolated_margin_symbols(recvWindow)\n    ```\n  - **POST /sapi/v1/margin/manual-liquidation (HMAC SHA256)** (Margin manual liquidation (MARGIN).)\n    ```python \n    client.margin_manual_liquidation(type)\n    ```\n- *User Data Streams*\n  - **POST /api/v3/userDataStream** (Create a ListenKey (Spot) (USER_STREAM): Start a new user data stream.)\n    ```python \n    client.stream_get_listen_key()\n    ```\n  - **PUT /api/v3/userDataStream** (Ping/Keep-alive a ListenKey (Spot) (USER_STREAM).)\n    ```python \n    client.stream_keepalive(listenKey)\n    ```\n  - **DELETE /api/v3/userDataStream** (Close a ListenKey (Spot) (USER_STREAM).)\n    ```python \n    client.stream_close(listenKey)\n    ```\n  - **POST /sapi/v1/userDataStream** (Create a ListenKey (Margin).)\n    ```python \n    client.margin_stream_get_listen_key()\n    ```\n  - **PUT /sapi/v1/userDataStream** (Ping/Keep-alive a ListenKey (Margin).)\n    ```python \n    client.margin_stream_keepalive(listenKey)\n    ```\n  - **DELETE /sapi/v1/userDataStream** (Close a ListenKey (Margin).)\n    ```python \n    client.margin_stream_close(listenKey)\n    ```\n  - **POST /sapi/v1/userDataStream/isolated** (Create a ListenKey (Isolated).)\n    ```python \n    client.isolated_margin_stream_get_listen_key(symbol)\n    ```\n  - **PUT /sapi/v1/userDataStream/isolated** (Ping/Keep-alive a ListenKey (Isolated).)\n    ```python \n    client.isolated_margin_stream_keepalive(symbol, listenKey)\n    ```\n  - **DELETE /sapi/v1/userDataStream/isolated** (Close a ListenKey (Isolated).)\n    ```python \n    client.isolated_margin_stream_close(symbol, listenKey)\n    ```\n- *Savings Endpoints*\n  - **GET /sapi/v1/lending/daily/product/list (HMAC SHA256)** (Get Flexible Product List (USER_DATA).)\n    ```python \n    client.get_lending_product_list(status, featured, recvWindow)\n    ```\n  - **GET /sapi/v1/lending/daily/userLeftQuota (HMAC SHA256)** (Get Left Daily Purchase Quota of Flexible Product (USER_DATA).)\n    ```python \n    client.get_lending_daily_quota_left(productId, recvWindow)\n    ```\n  - **POST /sapi/v1/lending/daily/purchase (HMAC SHA256)** (Purchase Flexible Product (USER_DATA).)\n    ```python \n    client.purchase_lending_product(productId, amount, recvWindow)\n    ```\n  - **GET /sapi/v1/lending/daily/userRedemptionQuota (HMAC SHA256)** (Get Left Daily Redemption Quota of Flexible Product (USER_DATA).)\n    ```python \n    client.get_lending_daily_redemption_quota(productId, type, recvWindow)\n    ```\n  - **POST /sapi/v1/lending/daily/redeem (HMAC SHA256)** (Redeem Flexible Product (USER_DATA).)\n    ```python \n    client.redeem_lending_product(productId, amount, type, recvWindow)\n    ```\n  - **GET /sapi/v1/lending/daily/token/position (HMAC SHA256)** (Get Flexible Product Position (USER_DATA).)\n    ```python \n    client.get_lending_position(asset, recvWindow)\n    ```\n  - **GET /sapi/v1/lending/project/list (HMAC SHA256)** (Get Fixed and Activity Project List (USER_DATA).)\n    ```python \n    client.get_fixed_activity_project_list(asset, type, status, isSortAsc, sortBy, current, size, recvWindow)\n    ```\n  - **POST /sapi/v1/lending/customizedFixed/purchase (HMAC SHA256)** (Purchase Fixed/Activity Project (USER_DATA).)\n\n    > :warning: Not yet implemented\n  - **GET /sapi/v1/lending/project/position/list (HMAC SHA256)** (Get Fixed/Activity Project Position (USER_DATA).)\n\n    > :warning: Not yet implemented\n  - **GET /sapi/v1/lending/union/account (HMAC SHA256)** (Lending Account (USER_DATA).)\n    ```python \n    client.get_lending_account(recvWindow)\n    ```\n  - **GET /sapi/v1/lending/union/purchaseRecord (HMAC SHA256)** (Get Purchase Record (USER_DATA).)\n    ```python \n    client.get_lending_purchase_history(lendingType, asset, startTime, endTime, current, size, recvWindow)\n    ```\n  - **GET /sapi/v1/lending/union/redemptionRecord (HMAC SHA256)** (Get Redemption Record (USER_DATA).)\n    ```python \n    client.get_lending_redemption_history(lendingType, asset, startTime, endTime, current, size, recvWindow)\n    ```\n  - **GET /sapi/v1/lending/union/interestHistory (HMAC SHA256)** (Get Interest History (USER_DATA).)\n    ```python \n    client.get_lending_interest_history(lendingType, asset, startTime, endTime, current, size, recvWindow)\n    ```\n  - **POST /sapi/v1/lending/positionChanged (HMAC SHA256)** (Change Fixed/Activity Position to Daily Position (USER_DATA).)\n    ```python \n    client.change_fixed_activity_to_daily_position(projectId, lot, positionId, recvWindow)\n    ```\n- *Mining Endpoints*\n    > :warning: Not yet implemented\n- *Sub-Account Endpoints*\n  - **GET /sapi/v1/sub-account/list (HMAC SHA256)** (Query Sub-account List (For Master Account).)\n    ```python \n    client.get_sub_account_list(email, isFreeze, page, limit, recvWindow)\n    ```\n  - **GET /sapi/v1/sub-account/sub/transfer/history (HMAC SHA256)** (Query Sub-account Spot Asset Transfer History (For Master Account).)\n    ```python \n    client.get_sub_account_transfer_history(fromEmail, toEmail, startTime, endTime, page, limit, recvWindow)\n    ```\n  - **GET /sapi/v1/sub-account/assets (HMAC SHA256)** (Query Sub-account Assets (For Master Account).)\n    ```python \n    client.get_sub_account_assets(email, recvWindow)\n    ```\n  > :warning: The rest of methods for Sub-Account Endpoints are not yet implemented\n- *BLVT Endpoints*\n    > :warning: Not yet implemented\n- *BSwap Endpoints*\n    > :warning: Not yet implemented\n### [USDT-M Futures](https://binance-docs.github.io/apidocs/futures/en/)\n- *Market Data Endpoints*\n  - **GET /fapi/v1/ping** (Test connectivity to the Rest API.)\n    ```python \n    client.futures_ping()\n    ```\n  - **GET /fapi/v1/time** (Test connectivity to the Rest API and get the current server time.)\n    ```python \n    client.futures_time()\n    ```\n  - **GET /fapi/v1/exchangeInfo** (Current exchange trading rules and symbol information.)\n    ```python \n    client.futures_exchange_info()\n    ```\n  - **GET /fapi/v1/depth** (Get the Order Book for the market.)\n    ```python \n    client.futures_order_book(symbol, limit)\n    ```\n  - **GET /fapi/v1/trades** (Get recent trades.)\n    ```python \n    client.futures_recent_trades(symbol, limit)\n    ```\n  - **GET /fapi/v1/historicalTrades** (Get older market historical trades (MARKET_DATA).)\n    ```python \n    client.futures_historical_trades(symbol, limit, fromId)\n    ```\n  - **GET /fapi/v1/aggTrades** (Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.)\n    ```python \n    client.futures_aggregate_trades(symbol, fromId, startTime, endTime, limit)\n    ```\n  - **GET /fapi/v1/klines** (Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.)\n    ```python \n    client.futures_klines(symbol, interval, startTime, endTime, limit)\n    ```\n  - **GET /fapi/v1/premiumIndex** (Get Mark Price and Funding Rate.)\n    ```python \n    client.futures_mark_price(symbol)\n    ```\n  - **GET /fapi/v1/fundingRate** (Get Funding Rate History.)\n    ```python \n    client.futures_funding_rate(symbol, startTime, endTime, limit)\n    ```\n  - **GET /fapi/v1/ticker/24hr** (24 hour rolling window price change statistics. **Careful** when accessing this with no symbol.)\n    ```python \n    client.futures_ticker(symbol)\n    ```\n  - **GET /fapi/v1/ticker/price** (Latest price for a symbol or symbols.)\n    ```python \n    client.futures_symbol_ticker(symbol)\n    ```\n  - **GET /fapi/v1/ticker/bookTicker** (Best price/qty on the order book for a symbol or symbols.)\n    ```python \n    client.futures_orderbook_ticker(symbol)\n    ``` \n  - **GET /fapi/v1/allForceOrders** (Get all Liquidation Orders.)\n    > :warning: Probably broken, python code below is implemented on v1/ticker/allForceOrders endpoint.\n    ```python \n    client.futures_liquidation_orders(symbol, startTime, endTime, limit)\n    ``` \n  - **GET /fapi/v1/openInterest** (Get present open interest of a specific symbol.)\n    ```python \n    client.futures_open_interest(symbol)\n    ``` \n  - **GET /futures/data/openInterestHist** (Open Interest Statistics.)\n    ```python \n    client.futures_open_interest_hist(symbol, period, limit, startTime, endTime)\n    ``` \n  - **GET /futures/data/topLongShortAccountRatio** (Top Trader Long/Short Ratio (Accounts) (MARKET_DATA).)\n    ```python \n    client.futures_top_longshort_account_ratio(symbol, period, limit, startTime, endTime)\n    ``` \n  - **GET /futures/data/topLongShortPositionRatio** (Top Trader Long/Short Ratio (Positions).)\n    ```python\n    client.futures_top_longshort_position_ratio(symbol, period, limit, startTime, endTime)\n    ```\n  - **GET /futures/data/globalLongShortAccountRatio** (Long/Short Ratio.)\n    ```python\n    client.futures_global_longshort_ratio(symbol, period, limit, startTime, endTime)\n    ```\n  - **GET /futures/data/takerlongshortRatio** (Taker Buy/Sell Volume.)\n    ```python\n    client.futures_taker_longshort_ratio(symbol, period, limit, startTime, endTime)\n    ```\n  - **GET /fapi/v1/lvtKlines** (Historical BLVT NAV Kline/Candlestick.)\n\n    > :warning: Not yet implemented\n  - **GET /fapi/v1/indexInfo** (Composite Index Symbol Information.)\n\n    > :warning: Not yet implemented\n- *Account/trades Endpoints*\n  - **POST /sapi/v1/futures/transfer (HMAC SHA256)** (New Future Account Transfer (FUTURES): Execute transfer between spot account and futures account.)\n    ```python \n    client.futures_account_transfer(asset, amount, type, recvWindow)\n    ```\n  - **GET /sapi/v1/futures/transfer (HMAC SHA256)** (Get Future Account Transaction History List (USER_DATA).)\n    ```python \n    client.transfer_history(asset, startTime, endTime, current, size, recvWindow)\n    ```\n  - **POST /fapi/v1/positionSide/dual (HMAC SHA256)** (Change user's position mode (Hedge Mode or One-way Mode ) on _**EVERY symbol**_.)\n    ```python \n    client.futures_change_position_mode(dualSidePosition, recvWindow)\n    ```\n  - **GET /fapi/v1/positionSide/dual (HMAC SHA256)** (Get user's position mode (Hedge Mode or One-way Mode ) on _**EVERY symbol**_.)\n    ```python \n    client.futures_get_position_mode(recvWindow)\n    ```\n  - **POST /fapi/v1/order (HMAC SHA256)** (Send in a new order (TRADE).)\n    ```python \n    client.futures_create_order(symbol, \n                                side,\n                                positionSide,\n                                type, \n                                timeInForce, \n                                quantity,\n                                reduceOnly,\n                                price, \n                                newClientOrderId, \n                                stopPrice,\n                                closePosition,\n                                activationPrice,\n                                callbackRate,\n                                workingType,\n                                priceProtect,\n                                newOrderRespType,\n                                recvWindow)\n    ```\n  - **POST /fapi/v1/batchOrders (HMAC SHA256)** (Place Multiple Orders (TRADE).)\n\n    > :warning: Not yet implemented\n  - **GET /fapi/v1/order (HMAC SHA256)** (Query Order (USER_DATA): Check an order's status.)\n    ```python \n    client.futures_get_order(symbol, orderId, origClientOrderId, recvWindow)\n    ```\n  - **DELETE /fapi/v1/order (HMAC SHA256)** (Cancel an active order (TRADE).)\n    ```python \n    client.futures_cancel_order(symbol, orderId, origClientOrderId, recvWindow)\n    ```\n  - **DELETE /fapi/v1/allOpenOrders (HMAC SHA256)** (Cancel All Open Orders (TRADE).)\n    ```python \n    client.futures_cancel_all_open_orders(symbol, recvWindow)\n    ```\n  - **DELETE /fapi/v1/batchOrders (HMAC SHA256)** (Cancel Multiple Orders (TRADE).)\n    ```python \n    client.futures_cancel_orders(symbol, orderIdList, origClientOrderIdList, recvWindow)\n    ```\n  - **POST /fapi/v1/countdownCancelAll (HMAC SHA256)** (Cancel all open orders of the specified symbol at the end of the specified countdown (TRADE).)\n\n    > :warning: Not yet implemented\n  - **GET /fapi/v1/openOrder (HMAC SHA256)** (Query Current Open Order (USER_DATA).)\n  \n    > :warning: Not yet implemented\n  - **GET /fapi/v1/openOrders (HMAC SHA256)** (Get all open orders on a symbol. **Careful** when accessing this with no symbol (USER_DATA).)\n    ```python \n    client.futures_get_open_orders(symbol, recvWindow)\n    ```\n  - **GET /fapi/v1/allOrders (HMAC SHA256)** (Get all account orders; active, canceled, or filled (USER_DATA).)\n    ```python \n    client.futures_get_all_orders(symbol, orderId, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /fapi/v2/balance (HMAC SHA256)** (Futures Account Balance V2 (USER_DATA).)\n    > :warning: Probably broken, python code below is implemented on v1 endpoint.\n    ```python \n    client.futures_account_balance(recvWindow)\n    ```\n  - **GET /fapi/v2/account (HMAC SHA256)** (Account Information V2: Get current account information (USER_DATA).)\n    > :warning: Probably broken, python code below is implemented on v1 endpoint.\n    ```python \n    client.futures_account(recvWindow)\n    ```\n  - **POST /fapi/v1/leverage (HMAC SHA256)** (Change user's initial leverage of specific symbol market (TRADE).)\n    ```python \n    client.futures_change_leverage(symbol, leverage, recvWindow)\n    ```\n  - **POST /fapi/v1/marginType (HMAC SHA256)** (Change the margin type for a symbol (TRADE).)\n    ```python \n    client.futures_change_margin_type(symbol, marginType, recvWindow)\n    ```\n  - **POST /fapi/v1/positionMargin (HMAC SHA256)** (Modify Isolated Position Margin (TRADE).)\n    ```python \n    client.futures_change_position_margin(symbol, positionSide, amount, type, recvWindow)\n    ```\n  - **GET /fapi/v1/positionMargin/history (HMAC SHA256)** (Get Position Margin Change History (TRADE).)\n    ```python \n    client.futures_position_margin_history(symbol, type, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /fapi/v2/positionRisk (HMAC SHA256)** (Position Information V2: Get current position information (USER_DATA).)\n    > :warning: Probably broken, python code below is implemented on v1 endpoint.\n    ```python \n    client.futures_position_information(symbol, recvWindow)\n    ```\n  - **GET /fapi/v1/userTrades (HMAC SHA256)** (Account Trade List: Get trades for a specific account and symbol (USER_DATA).)\n    ```python \n    client.futures_account_trades(symbol, startTime, endTime, fromId, limit, recvWindow)\n    ```\n  - **GET /fapi/v1/income (HMAC SHA256)** (Get Income History (USER_DATA).)\n    ```python \n    client.futures_income_history(symbol, incomeType, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /fapi/v1/leverageBracket** (Notional and Leverage Brackets (USER_DATA).)\n    > :warning: Probably broken, python code below is implemented on ticker/leverageBracket endpoint.\n    ```python \n    client.futures_leverage_bracket(symbol, recvWindow)\n    ```\n  - **GET /fapi/v1/adlQuantile** (Position ADL Quantile Estimation (USER_DATA).)\n\n    > :warning: Not yet implemented\n  - **GET /fapi/v1/forceOrders** (User's Force Orders (USER_DATA).)\n\n    > :warning: Not yet implemented\n  - **GET /fapi/v1/apiTradingStatus** (User API Trading Quantitative Rules Indicators (USER_DATA).)\n\n    > :warning: Not yet implemented\n- *User Data Streams*\n    > :warning: Not yet implemented\n### [Vanilla Options](https://binance-docs.github.io/apidocs/voptions/en/)\n- *Quoting interface*\n  - **GET /vapi/v1/ping** (Test connectivity)\n    ```python \n    client.options_ping()\n    ```\n  - **GET /vapi/v1/time** (Get server time)\n    ```python \n    client.options_time()\n    ```\n  - **GET /vapi/v1/optionInfo** (Get current trading pair info)\n    ```python \n    client.options_info()\n    ```\n  - **GET /vapi/v1/exchangeInfo** (Get current limit info and trading pair info)\n    ```python \n    client.options_exchange_info()\n    ```\n  - **GET /vapi/v1/index** (Get the spot index price)\n    ```python \n    client.options_index_price(underlying)\n    ```\n  - **GET /vapi/v1/ticker** (Get the latest price)\n    ```python \n    client.options_price(symbol)\n    ```\n  - **GET /vapi/v1/mark** (Get the latest mark price)\n    ```python \n    client.options_mark_price(symbol)\n    ```\n  - **GET /vapi/v1/depth** (Depth information)\n    ```python \n    client.options_order_book(symbol, limit)\n    ```\n  - **GET /vapi/v1/klines** (Candle data)\n    ```python \n    client.options_klines(symbol, interval, startTime, endTime, limit)\n    ```\n  - **GET /vapi/v1/trades** (Recently completed Option trades)\n    ```python \n    client.options_recent_trades(symbol, limit)\n    ```\n  - **GET /vapi/v1/historicalTrades** (Query trade history)\n    ```python \n    client.options_historical_trades(symbol, fromId, limit)\n    ```\n- *Account and trading interface*\n  - **GET /vapi/v1/account (HMAC SHA256)** (Account asset info (USER_DATA))\n    ```python \n    client.options_account_info(recvWindow)\n    ```\n  - **POST /vapi/v1/transfer (HMAC SHA256)** (Funds transfer (USER_DATA))\n    ```python \n    client.options_funds_transfer(currency, type, amount, recvWindow)\n    ```\n  - **GET /vapi/v1/position (HMAC SHA256)** (Option holdings info (USER_DATA))\n    ```python \n    client.options_positions(symbol, recvWindow)\n    ```\n  - **POST /vapi/v1/bill (HMAC SHA256)** (Account funding flow (USER_DATA))\n    ```python \n    client.options_bill(currency, recordId, startTime, endTime, limit, recvWindow)\n    ```\n  - **POST /vapi/v1/order (HMAC SHA256)** (Option order (TRADE))\n    ```python \n    client.options_place_order(symbol, side, type, quantity, price, timeInForce, reduceOnly, postOnly, \\\n        newOrderRespType, clientOrderId, recvWindow, recvWindow)\n    ```\n  - **POST /vapi/v1/batchOrders (HMAC SHA256)** (Place Multiple Option orders (TRADE))\n    ```python \n    client.options_place_batch_order(orders, recvWindow)\n    ```\n  - **DELETE /vapi/v1/order (HMAC SHA256)** (Cancel Option order (TRADE))\n    ```python \n    client.options_cancel_order(symbol, orderId, clientOrderId, recvWindow)\n    ```\n  - **DELETE /vapi/v1/batchOrders (HMAC SHA256)** (Cancel Multiple Option orders (TRADE))\n    ```python \n    client.options_cancel_batch_order(symbol, orderIds, clientOrderIds, recvWindow)\n    ```\n  - **DELETE /vapi/v1/allOpenOrders (HMAC SHA256)** (Cancel all Option orders (TRADE))\n    ```python \n    client.options_cancel_all_orders(symbol, recvWindow)\n    ```\n  - **GET /vapi/v1/order (HMAC SHA256)** (Query Option order (TRADE))\n    ```python \n    client.options_query_order(symbol, orderId, clientOrderId, recvWindow)\n    ```\n  - **GET /vapi/v1/openOrders (HMAC SHA256)** (Query current pending Option orders (TRADE))\n    ```python \n    client.options_query_pending_orders(symbol, orderId, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /vapi/v1/historyOrders (HMAC SHA256)** (Query Option order history (TRADE))\n    ```python \n    client.options_query_order_history(symbol, orderId, startTime, endTime, limit, recvWindow)\n    ```\n  - **GET /vapi/v1/userTrades (HMAC SHA256)** (Option Trade List (USER_DATA))\n    ```python \n    client.options_user_trades(symbol, fromId, startTime, endTime, limit, recvWindow)\n    ```\n### [COIN-M Futures](https://binance-docs.github.io/apidocs/delivery/en/)\n> :warning: Not yet implemented\n### [USDT-M Futures testnet](https://binance-docs.github.io/apidocs/testnet/en/)\n> :warning: Not yet implemented  \n### [COIN-M Futures testnet](https://binance-docs.github.io/apidocs/delivery_testnet/en/)\n> :warning: Not yet implemented  \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2017 sammchardy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PYPIREADME.rst",
          "type": "blob",
          "size": 9.9765625,
          "content": ".. image:: https://img.shields.io/pypi/v/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/pypi/l/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/travis/sammchardy/python-binance.svg\n    :target: https://travis-ci.org/sammchardy/python-binance\n\n.. image:: https://img.shields.io/coveralls/sammchardy/python-binance.svg\n    :target: https://coveralls.io/github/sammchardy/python-binance\n\n.. image:: https://img.shields.io/pypi/wheel/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/pypi/pyversions/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\nThis is an unofficial Python wrapper for the `Binance exchange REST API v3 <https://binance-docs.github.io/apidocs/spot/en>`_. I am in no way affiliated with Binance, use at your own risk.\n\nIf you came here looking for the `Binance exchange <https://www.binance.com/?ref=10099792>`_ to purchase cryptocurrencies, then `go here <https://www.binance.com/?ref=10099792>`_.\nIf you want to automate interactions with Binance stick around.\n\nIf you're interested in Binance's new DEX Binance Chain see my `python-binance-chain library <https://github.com/sammchardy/python-binance-chain>`_\n\nSource code\n  https://github.com/sammchardy/python-binance\n\nDocumentation\n  https://python-binance.readthedocs.io/en/latest/\n\nBinance API Telegram\n  https://t.me/binance_api_english\n\nBlog with examples including async\n  https://sammchardy.github.io\n\n- `Async basics for Binance <https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html>`_\n- `Understanding Binance Order Filters <https://sammchardy.github.io/binance/2021/05/03/binance-order-filters.html>`_\n\nMake sure you update often and check the `Changelog <https://python-binance.readthedocs.io/en/latest/changelog.html>`_ for new features and bug fixes.\n\nFeatures\n--------\n\n- Implementation of all General, Market Data and Account endpoints.\n- Asyncio implementation\n- Testnet support for Spot, Futures and Vanilla Options\n- Simple handling of authentication include RSA keys\n- No need to generate timestamps yourself, the wrapper does it for you\n- Response exception handling\n- Websocket handling with reconnection and multiplexed connections\n- Symbol Depth Cache\n- Historical Kline/Candle fetching function\n- Withdraw functionality\n- Deposit addresses\n- Margin Trading\n- Futures Trading\n- Vanilla Options\n- Support other domains (.us, .jp, etc)\n\nUpgrading to v1.0.0+\n--------------------\n\nThe breaking changes include the migration from wapi to sapi endpoints which related to the\nwallet endpoints detailed in the `Binance Docs <https://binance-docs.github.io/apidocs/spot/en/#wallet-endpoints>`_\n\nThe other breaking change is for websocket streams and the Depth Cache Manager which have been\nconverted to use Asynchronous Context Managers. See examples in the Async section below or view the\n`websockets <https://python-binance.readthedocs.io/en/latest/websockets.html>`_ and\n`depth cache <https://python-binance.readthedocs.io/en/latest/depth_cache.html>`_ docs.\n\nQuick Start\n-----------\n\n`Register an account with Binance <https://accounts.binance.com/en/register?ref=10099792>`_.\n\n`Generate an API Key <https://www.binance.com/en/my/settings/api-management>`_ and assign relevant permissions.\n\nIf you are using an exchange from the US, Japan or other TLD then make sure pass `tld='us'` when creating the\nclient.\n\nTo use the `Spot <https://testnet.binance.vision/>`_ or `Vanilla Options <https://testnet.binanceops.com/>`_ Testnet,\npass `testnet=True` when creating the client.\n\n\n.. code:: bash\n\n    pip install python-binance\n\n\n.. code:: python\n\n    from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager\n    client = Client(api_key, api_secret)\n\n    # get market depth\n    depth = client.get_order_book(symbol='BNBBTC')\n\n    # place a test market buy order, to place an actual order use the create_order function\n    order = client.create_test_order(\n        symbol='BNBBTC',\n        side=Client.SIDE_BUY,\n        type=Client.ORDER_TYPE_MARKET,\n        quantity=100)\n\n    # get all symbol prices\n    prices = client.get_all_tickers()\n\n    # withdraw 100 ETH\n    # check docs for assumptions around withdrawals\n    from binance.exceptions import BinanceAPIException\n    try:\n        result = client.withdraw(\n            asset='ETH',\n            address='<eth_address>',\n            amount=100)\n    except BinanceAPIException as e:\n        print(e)\n    else:\n        print(\"Success\")\n\n    # fetch list of withdrawals\n    withdraws = client.get_withdraw_history()\n\n    # fetch list of ETH withdrawals\n    eth_withdraws = client.get_withdraw_history(coin='ETH')\n\n    # get a deposit address for BTC\n    address = client.get_deposit_address(coin='BTC')\n\n    # get historical kline data from any date range\n\n    # fetch 1 minute klines for the last day up until now\n    klines = client.get_historical_klines(\"BNBBTC\", Client.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")\n\n    # fetch 30 minute klines for the last month of 2017\n    klines = client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")\n\n    # fetch weekly klines since it listed\n    klines = client.get_historical_klines(\"NEOBTC\", Client.KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")\n\n    # socket manager using threads\n    twm = ThreadedWebsocketManager()\n    twm.start()\n\n    # depth cache manager using threads\n    dcm = ThreadedDepthCacheManager()\n    dcm.start()\n\n    def handle_socket_message(msg):\n        print(f\"message type: {msg['e']}\")\n        print(msg)\n\n    def handle_dcm_message(depth_cache):\n        print(f\"symbol {depth_cache.symbol}\")\n        print(\"top 5 bids\")\n        print(depth_cache.get_bids()[:5])\n        print(\"top 5 asks\")\n        print(depth_cache.get_asks()[:5])\n        print(\"last update time {}\".format(depth_cache.update_time))\n\n    twm.start_kline_socket(callback=handle_socket_message, symbol='BNBBTC')\n\n    dcm.start_depth_cache(callback=handle_dcm_message, symbol='ETHBTC')\n\n    # replace with a current options symbol\n    options_symbol = 'BTC-210430-36000-C'\n    dcm.start_options_depth_cache(callback=handle_dcm_message, symbol=options_symbol)\n\n\nFor more `check out the documentation <https://python-binance.readthedocs.io/en/latest/>`_.\n\nAsync Example\n-------------\n\nRead `Async basics for Binance <https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html>`_\nfor more information.\n\n.. code:: python\n\n    import asyncio\n    import json\n\n    from binance import AsyncClient, DepthCacheManager, BinanceSocketManager\n\n    async def main():\n\n        # initialise the client\n        client = await AsyncClient.create()\n\n        # run some simple requests\n        print(json.dumps(await client.get_exchange_info(), indent=2))\n\n        print(json.dumps(await client.get_symbol_ticker(symbol=\"BTCUSDT\"), indent=2))\n\n        # initialise websocket factory manager\n        bsm = BinanceSocketManager(client)\n\n        # create listener using async with\n        # this will exit and close the connection after 5 messages\n        async with bsm.trade_socket('ETHBTC') as ts:\n            for _ in range(5):\n                res = await ts.recv()\n                print(f'recv {res}')\n\n        # get historical kline data from any date range\n\n        # fetch 1 minute klines for the last day up until now\n        klines = client.get_historical_klines(\"BNBBTC\", AsyncClient.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")\n\n        # use generator to fetch 1 minute klines for the last day up until now\n        async for kline in await client.get_historical_klines_generator(\"BNBBTC\", AsyncClient.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\"):\n            print(kline)\n\n        # fetch 30 minute klines for the last month of 2017\n        klines = client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")\n\n        # fetch weekly klines since it listed\n        klines = client.get_historical_klines(\"NEOBTC\", Client.KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")\n\n        # setup an async context the Depth Cache and exit after 5 messages\n        async with DepthCacheManager(client, symbol='ETHBTC') as dcm_socket:\n            for _ in range(5):\n                depth_cache = await dcm_socket.recv()\n                print(f\"symbol {depth_cache.symbol} updated:{depth_cache.update_time}\")\n                print(\"Top 5 asks:\")\n                print(depth_cache.get_asks()[:5])\n                print(\"Top 5 bids:\")\n                print(depth_cache.get_bids()[:5])\n\n        # Vanilla options Depth Cache works the same, update the symbol to a current one\n        options_symbol = 'BTC-210430-36000-C'\n        async with OptionsDepthCacheManager(client, symbol=options_symbol) as dcm_socket:\n            for _ in range(5):\n                depth_cache = await dcm_socket.recv()\n                count += 1\n                print(f\"symbol {depth_cache.symbol} updated:{depth_cache.update_time}\")\n                print(\"Top 5 asks:\")\n                print(depth_cache.get_asks()[:5])\n                print(\"Top 5 bids:\")\n                print(depth_cache.get_bids()[:5])\n\n        await client.close_connection()\n\n    if __name__ == \"__main__\":\n\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\n\nDonate\n------\n\nIf this library helped you out feel free to donate.\n\n- ETH: 0xD7a7fDdCfA687073d7cC93E9E51829a727f9fE70\n- LTC: LPC5vw9ajR1YndE1hYVeo3kJ9LdHjcRCUZ\n- NEO: AVJB4ZgN7VgSUtArCt94y7ZYT6d5NDfpBo\n- BTC: 1Dknp6L6oRZrHDECRedihPzx2sSfmvEBys\n\nOther Exchanges\n---------------\n\nIf you use `Binance Chain <https://testnet.binance.org/>`_ check out my `python-binance-chain <https://github.com/sammchardy/python-binance-chain>`_ library.\n\nIf you use `Kucoin <https://www.kucoin.com/?rcode=E42cWB>`_ check out my `python-kucoin <https://github.com/sammchardy/python-kucoin>`_ library.\n\nIf you use `IDEX <https://idex.market>`_ check out my `python-idex <https://github.com/sammchardy/python-idex>`_ library.\n\n.. image:: https://ga-beacon.appspot.com/UA-111417213-1/github/python-binance?pixel&useReferer\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 11.810546875,
          "content": "=================================\nWelcome to python-binance v1.0.27\n=================================\n\n.. image:: https://img.shields.io/pypi/v/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/pypi/l/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/coveralls/sammchardy/python-binance.svg\n    :target: https://coveralls.io/github/sammchardy/python-binance\n\n.. image:: https://img.shields.io/pypi/wheel/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/pypi/pyversions/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/badge/Telegram-Join%20Us-blue?logo=Telegram\n    :target: https://t.me/python_binance\n\n\nThis is an unofficial Python wrapper for the `Binance exchange REST API v3 <https://binance-docs.github.io/apidocs/spot/en>`_.\n\nIf you came here looking for the `Binance exchange <https://accounts.binance.com/register?ref=PGDFCE46>`_ to purchase cryptocurrencies, then `go here <https://accounts.binance.com/register?ref=PGDFCE46>`_.\nIf you want to automate interactions with Binance stick around.\n\n.. |ico1| image:: https://avatars.githubusercontent.com/u/31901609?s=48&v=4\n    :target: https://github.com/ccxt/ccxt\n    :height: 3ex\n    :align: middle\n\n**This project is powered by** |ico1|\n\n*Please make sure your* `python-binance` *version is* **v.1.0.20** *or higher.*\n*The previous versions are no longer recommended because some endpoints have been deprecated.*\n\nSource code\n  https://github.com/sammchardy/python-binance\n\nDocumentation\n  https://python-binance.readthedocs.io/en/latest/\n\nCommunity Telegram Chat\n  https://t.me/python_binance\n\nAnnouncements Channel\n  https://t.me/python_binance_announcements\n\nExamples including async\n  https://github.com/sammchardy/python-binance/tree/master/examples\n\n- `Async basics for Binance <https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html>`_\n- `Understanding Binance Order Filters <https://sammchardy.github.io/binance/2021/05/03/binance-order-filters.html>`_\n\nMake sure you update often and check the `Changelog <https://python-binance.readthedocs.io/en/latest/changelog.html>`_ for new features and bug fixes.\n\nYour contributions, suggestions, and fixes are always welcome! Don't hesitate to open a GitHub issue or reach out to us on our Telegram chat\n\nFeatures\n--------\n\n- Implementation of all General, Market Data and Account endpoints.\n- Asyncio implementation\n- Testnet support for Spot, Futures and Vanilla Options\n- Simple handling of authentication include RSA and EDDSA keys\n- No need to generate timestamps yourself, the wrapper does it for you\n- RecvWindow sent by default\n- Response exception handling\n- Customizable HTTP headers\n- Websocket handling with reconnection and multiplexed connections\n- CRUD over websockets, create/fetch/edit through websockets for minimum latency.\n- Symbol Depth Cache\n- Historical Kline/Candle fetching function\n- Withdraw functionality\n- Deposit addresses\n- Margin Trading\n- Futures Trading\n- Porfolio Margin Trading\n- Vanilla Options\n- Proxy support (REST and WS)\n- Orjson support for faster JSON parsing\n- Support other domains (.us, .jp, etc)\n- Support for the Gift Card API\n\nUpgrading to v1.0.0+\n--------------------\n\nThe breaking changes include the migration from wapi to sapi endpoints which related to the\nwallet endpoints detailed in the `Binance Docs <https://binance-docs.github.io/apidocs/spot/en/#wallet-endpoints>`_\n\nThe other breaking change is for websocket streams and the Depth Cache Manager which have been\nconverted to use Asynchronous Context Managers. See examples in the Async section below or view the\n`websockets <https://python-binance.readthedocs.io/en/latest/websockets.html>`_ and\n`depth cache <https://python-binance.readthedocs.io/en/latest/depth_cache.html>`_ docs.\n\nQuick Start\n-----------\n\n`Register an account with Binance <https://accounts.binance.com/register?ref=PGDFCE46>`_.\n\n`Generate an API Key <https://www.binance.com/en/my/settings/api-management>`_ and assign relevant permissions.\n\nIf you are using an exchange from the US, Japan or other TLD then make sure pass `tld='us'` when creating the\nclient.\n\nTo use the `Spot <https://testnet.binance.vision/>`_, `Vanilla Options <https://testnet.binanceops.com/>`_ , or `Futures <https://testnet.binancefuture.com>`_ Testnet\npass `testnet=True` when creating the client.\n\n\n.. code:: bash\n\n    pip install python-binance\n\n\n.. code:: python\n\n    from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager\n    client = Client(api_key, api_secret)\n\n    # get market depth\n    depth = client.get_order_book(symbol='BNBBTC')\n\n    # place a test market buy order, to place an actual order use the create_order function\n    order = client.create_test_order(\n        symbol='BNBBTC',\n        side=Client.SIDE_BUY,\n        type=Client.ORDER_TYPE_MARKET,\n        quantity=100)\n\n    # get all symbol prices\n    prices = client.get_all_tickers()\n\n    # withdraw 100 ETH\n    # check docs for assumptions around withdrawals\n    from binance.exceptions import BinanceAPIException\n    try:\n        result = client.withdraw(\n            asset='ETH',\n            address='<eth_address>',\n            amount=100)\n    except BinanceAPIException as e:\n        print(e)\n    else:\n        print(\"Success\")\n\n    # fetch list of withdrawals\n    withdraws = client.get_withdraw_history()\n\n    # fetch list of ETH withdrawals\n    eth_withdraws = client.get_withdraw_history(coin='ETH')\n\n    # get a deposit address for BTC\n    address = client.get_deposit_address(coin='BTC')\n\n    # get historical kline data from any date range\n\n    # fetch 1 minute klines for the last day up until now\n    klines = client.get_historical_klines(\"BNBBTC\", Client.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")\n\n    # fetch 30 minute klines for the last month of 2017\n    klines = client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")\n\n    # fetch weekly klines since it listed\n    klines = client.get_historical_klines(\"NEOBTC\", Client.KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")\n\n    # create order through websockets\n    order_ws = client.ws_create_order( symbol=\"LTCUSDT\", side=\"BUY\", type=\"MARKET\", quantity=0.1)\n\n    # get account using custom headers\n    account = client.get_account(headers={'MyCustomKey': 'MyCustomValue'})\n\n    # socket manager using threads\n    twm = ThreadedWebsocketManager()\n    twm.start()\n\n    # depth cache manager using threads\n    dcm = ThreadedDepthCacheManager()\n    dcm.start()\n\n    def handle_socket_message(msg):\n        print(f\"message type: {msg['e']}\")\n        print(msg)\n\n    def handle_dcm_message(depth_cache):\n        print(f\"symbol {depth_cache.symbol}\")\n        print(\"top 5 bids\")\n        print(depth_cache.get_bids()[:5])\n        print(\"top 5 asks\")\n        print(depth_cache.get_asks()[:5])\n        print(\"last update time {}\".format(depth_cache.update_time))\n\n    twm.start_kline_socket(callback=handle_socket_message, symbol='BNBBTC')\n\n    dcm.start_depth_cache(callback=handle_dcm_message, symbol='ETHBTC')\n\n    # replace with a current options symbol\n    options_symbol = 'BTC-241227-41000-C'\n    dcm.start_options_depth_cache(callback=handle_dcm_message, symbol=options_symbol)\n\n    # join the threaded managers to the main thread\n    twm.join()\n    dcm.join()\n\nFor more `check out the documentation <https://python-binance.readthedocs.io/en/latest/>`_.\n\nAsync Example\n-------------\n\nRead `Async basics for Binance <https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html>`_\nfor more information.\n\n.. code:: python\n\n    import asyncio\n    import json\n\n    from binance import AsyncClient, DepthCacheManager, BinanceSocketManager\n\n    async def main():\n\n        # initialise the client\n        client = await AsyncClient.create()\n\n        # run some simple requests\n        print(json.dumps(await client.get_exchange_info(), indent=2))\n\n        print(json.dumps(await client.get_symbol_ticker(symbol=\"BTCUSDT\"), indent=2))\n\n        # initialise websocket factory manager\n        bsm = BinanceSocketManager(client)\n\n        # create listener using async with\n        # this will exit and close the connection after 5 messages\n        async with bsm.trade_socket('ETHBTC') as ts:\n            for _ in range(5):\n                res = await ts.recv()\n                print(f'recv {res}')\n\n        # get historical kline data from any date range\n\n        # fetch 1 minute klines for the last day up until now\n        klines = client.get_historical_klines(\"BNBBTC\", AsyncClient.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")\n\n        # use generator to fetch 1 minute klines for the last day up until now\n        async for kline in await client.get_historical_klines_generator(\"BNBBTC\", AsyncClient.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\"):\n            print(kline)\n\n        # fetch 30 minute klines for the last month of 2017\n        klines = await client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")\n\n        # fetch weekly klines since it listed\n        klines = await client.get_historical_klines(\"NEOBTC\", Client.KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")\n\n        # create order through websockets\n        order_ws = await client.ws_create_order( symbol=\"LTCUSDT\", side=\"BUY\", type=\"MARKET\", quantity=0.1)\n\n        # setup an async context the Depth Cache and exit after 5 messages\n        async with DepthCacheManager(client, symbol='ETHBTC') as dcm_socket:\n            for _ in range(5):\n                depth_cache = await dcm_socket.recv()\n                print(f\"symbol {depth_cache.symbol} updated:{depth_cache.update_time}\")\n                print(\"Top 5 asks:\")\n                print(depth_cache.get_asks()[:5])\n                print(\"Top 5 bids:\")\n                print(depth_cache.get_bids()[:5])\n\n        # Vanilla options Depth Cache works the same, update the symbol to a current one\n        options_symbol = 'BTC-241227-41000-C'\n        async with OptionsDepthCacheManager(client, symbol=options_symbol) as dcm_socket:\n            for _ in range(5):\n                depth_cache = await dcm_socket.recv()\n                count += 1\n                print(f\"symbol {depth_cache.symbol} updated:{depth_cache.update_time}\")\n                print(\"Top 5 asks:\")\n                print(depth_cache.get_asks()[:5])\n                print(\"Top 5 bids:\")\n                print(depth_cache.get_bids()[:5])\n\n        await client.close_connection()\n\n    if __name__ == \"__main__\":\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\n\nThe library is under `MIT license`, that means it's absolutely free for any developer to build commercial and opensource software on top of it, but use it at your own risk with no warranties, as is.\n\n\nOrjson support\n-------------------\n\nPython-binance also supports `orjson` for parsing JSON since it is much faster than the builtin library. This is especially important when using websockets because some exchanges return big messages that need to be parsed and dispatched as quickly as possible.\n\nHowever, `orjson` is not enabled by default because it is not supported by every python interpreter. If you want to opt-in, you just need to install it (`pip install orjson`) on your local environment. Python-binance will detect the installion and pick it up automatically.\n\nStar history\n------------\n\n.. image:: https://api.star-history.com/svg?repos=sammchardy/python-binance&type=Date\n    :target: https://api.star-history.com/svg?repos=sammchardy/python-binance&type=Date\n\nContact Us\n----------\n\nFor business inquiries: `info@ccxt.trade`\n\nOther Exchanges\n---------------\n- Check out `CCXT <https://github.com/ccxt/ccxt>`_ for more than 100 crypto exchanges with a unified trading API.\n- If you use `Kucoin <https://www.kucoin.com/ucenter/signup?rcode=E5wkqe>`_ check out my `python-kucoin <https://github.com/sammchardy/python-kucoin>`_ library.\n"
        },
        {
          "name": "binance",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.21484375,
          "content": "[tool.ruff]\npreview = true\nlint.ignore = [\"F722\",\"F841\",\"F821\",\"E402\",\"E501\",\"E902\",\"E713\",\"E741\",\"E714\", \"E275\",\"E721\",\"E266\", \"E261\"]\n\n[tool.pytest.ini_options]\ntimeout = 10\ntimeout_method = \"thread\"\naddopts = \"-n 10\"\n"
        },
        {
          "name": "pyrightconfig.json",
          "type": "blob",
          "size": 0.1708984375,
          "content": "{\n\t\"include\": [\n\t\t\"binance\"\n\t],\n\t\"reportMissingImports\": false,\n\t\"reportMissingModuleSource\": false,\n\t\"typeCheckingMode\": \"basic\",\n\t\"reportWildcardImportFromLibrary\": false\n}\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0908203125,
          "content": "aiohttp\ndateparser\npycryptodome\nrequests\nwebsockets\nwebsockets_proxy; python_version >= '3.8'"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.048828125,
          "content": "[bdist_wheel]\nuniversal = 1\n\n[pep8]\nignore = E501\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.7666015625,
          "content": "#!/usr/bin/env python\nfrom setuptools import setup, find_packages\nimport codecs\nimport os\nimport re\n\nwith codecs.open(\n    os.path.join(os.path.abspath(os.path.dirname(__file__)), \"binance\", \"__init__.py\"),\n    \"r\",\n    \"latin1\",\n) as fp:\n    try:\n        version = re.findall(r'^__version__ = \"([^\"]+)\"\\r?$', fp.read(), re.M)[0]\n    except IndexError:\n        raise RuntimeError(\"Unable to determine version.\")\n\nwith open(\"README.rst\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"python-binance\",\n    version=version,\n    packages=find_packages(exclude=[\"tests\", \"examples\"]),\n    description=\"Binance REST API python implementation\",\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    url=\"https://github.com/sammchardy/python-binance\",\n    author=\"Sam McHardy\",\n    license=\"MIT\",\n    author_email=\"\",\n    install_requires=[\n        \"requests\",\n        \"six\",\n        \"dateparser\",\n        \"aiohttp\",\n        \"websockets\",\n        \"pycryptodome\",\n    ],\n    keywords=\"binance exchange rest api bitcoin ethereum btc eth neo\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.1259765625,
          "content": "coverage\npytest\npytest-asyncio\npytest-cov\npytest-xdist\npytest-rerunfailures\nrequests-mock\ntox\nsetuptools\naioresponses\npre-commit\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.38671875,
          "content": "[tox]\nenvlist = py36, py37, py38, py39, py310, py311, py312\n\n[testenv]\ndeps =\n  -rtest-requirements.txt\n  -rrequirements.txt\npassenv =\n    PROXY\n    TEST_TESTNET\n    TEST_API_KEY\n    TEST_API_SECRET\n    TEST_FUTURES_API_KEY\n    TEST_FUTURES_API_SECRET\ncommands = pytest -n 1 -v tests/  --doctest-modules --cov binance --cov-report term-missing --reruns 3 --reruns-delay 120\n\n[pep8]\nignore = E501\n"
        }
      ]
    }
  ]
}