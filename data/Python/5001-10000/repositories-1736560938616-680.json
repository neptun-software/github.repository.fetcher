{
  "metadata": {
    "timestamp": 1736560938616,
    "page": 680,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-deepmind/graphcast",
      "stars": 5603,
      "defaultBranch": "main",
      "files": [
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.947265625,
          "content": "# How to Contribute\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.3447265625,
          "content": "# Google DeepMind GraphCast and GenCast\n\nThis package contains example code to run and train the weather models used in the research papers [GraphCast](https://www.science.org/doi/10.1126/science.adi2336) and [GenCast](https://arxiv.org/abs/2312.15796).\n\nIt also provides pretrained model weights, normalization statistics and example input data on [Google Cloud Bucket](https://console.cloud.google.com/storage/browser/dm_graphcast).\n\nFull model training requires downloading the\n[ERA5](https://www.ecmwf.int/en/forecasts/datasets/reanalysis-datasets/era5)\ndataset, available from [ECMWF](https://www.ecmwf.int/). This can best be\naccessed as Zarr from [Weatherbench2's ERA5 data](https://weatherbench2.readthedocs.io/en/latest/data-guide.html#era5).\n\nData for operational fine-tuning can similarly be accessed at [Weatherbench2's HRES 0th frame data](https://weatherbench2.readthedocs.io/en/latest/data-guide.html#ifs-hres-t-0-analysis).\n\nThese datasets may be governed by separate terms and conditions or license provisions. Your use of such third-party materials is subject to any such terms and you should check that you can comply with any applicable restrictions or terms and conditions before use.\n\n## Overview of files common to models\n\n*   `autoregressive.py`: Wrapper used to run (and train) the one-step predictions\n    to produce a sequence of predictions by auto-regressively feeding the\n    outputs back as inputs at each step, in JAX a differentiable way.\n*   `checkpoint.py`: Utils to serialize and deserialize trees.\n*   `data_utils.py`: Utils for data preprocessing.\n*   `deep_typed_graph_net.py`: General purpose deep graph neural network (GNN)\n    that operates on `TypedGraph`'s where both inputs and outputs are flat\n    vectors of features for each of the nodes and edges.\n*   `grid_mesh_connectivity.py`: Tools for converting between regular grids on a\n    sphere and triangular meshes.\n*   `icosahedral_mesh.py`: Definition of an icosahedral multi-mesh.\n*   `losses.py`: Loss computations, including latitude-weighting.\n*   `mlp.py`: Utils for building MLPs with norm conditioning layers.\n*   `model_utils.py`: Utilities to produce flat node and edge vector features\n    from input grid data, and to manipulate the node output vectors back\n    into a multilevel grid data.\n*   `normalization.py`: Wrapper used to normalize inputs according to historical\n    values, and targets according to historical time differences.\n*   `predictor_base.py`: Defines the interface of the predictor, which models\n    and all of the wrappers implement.\n*   `rollout.py`: Similar to `autoregressive.py` but used only at inference time\n    using a python loop to produce longer, but non-differentiable trajectories.\n*   `typed_graph.py`: Definition of `TypedGraph`'s.\n*   `typed_graph_net.py`: Implementation of simple graph neural network\n    building blocks defined over `TypedGraph`'s that can be combined to build\n    deeper models.\n*   `xarray_jax.py`: A wrapper to let JAX work with `xarray`s.\n*   `xarray_tree.py`: An implementation of tree.map_structure that works with\n    `xarray`s.\n\n## GenCast: Diffusion-based ensemble forecasting for medium-range weather\n\nThis package provides four pretrained models:\n\n1.  `GenCast 0p25deg <2019`, GenCast model at 0.25deg resolution with 13\npressure levels and a 6 times refined icosahedral mesh. This model is trained on\nERA5 data from 1979 to 2018 (inclusive), and can be causally evaluated on 2019\nand later years. This model was described in the paper\n`GenCast: Diffusion-based ensemble forecasting for medium-range weather`\n(https://arxiv.org/abs/2312.15796)\n\n2.  `GenCast 0p25deg Operational <2022`, GenCast model at 0.25deg resolution, with 13 pressure levels and a 6\ntimes refined icosahedral mesh. This model is trained on ERA5 data from\n1979 to 2018, and fine-tuned on HRES-fc0 data from\n2016 to 2021 and can be causally evaluated on 2022 and later years.\nThis model can make predictions in an operational setting (i.e., initialised\nfrom HRES-fc0)\n\n3.  `GenCast 1p0deg <2019`, GenCast model at 1deg resolution, with 13 pressure\nlevels and a 5 times refined icosahedral mesh. This model is\ntrained on ERA5 data from 1979 to 2018, and can be causally evaluated on 2019 and later years.\nThis model has a smaller memory footprint than the 0.25deg models\n\n4. `GenCast 1p0deg Mini <2019`, GenCast model at 1deg resolution, with 13 pressure levels and a\n4 times refined icosahedral mesh. This model is trained on ERA5 data\nfrom 1979 to 2018, and can be causally evaluated on 2019 and later years.\nThis model has the smallest memory footprint of those provided and has been\nprovided to enable low cost demonstrations (for example, it is runnable in a free Colab notebook).\nWhile its performance is reasonable, it is not representative of the performance\nof the GenCast models (1-3) above. For reference, a scorecard comparing its performance to ENS can be found in [docs/](https://github.com/google-deepmind/graphcast/blob/main/docs/GenCast_1p0deg_Mini_ENS_scorecard.png). Note that in this scorecard,\nGenCast Mini only uses 8 member ensembles (vs. ENS' 50) so we use the fair (unbiased)\nCRPS to allow for fair comparison.\n\nThe best starting point is to open `gencast_mini_demo.ipynb` in [Colaboratory](https://colab.research.google.com/github/deepmind/graphcast/blob/master/gencast_mini_demo.ipynb), which gives an\nexample of loading data, generating random weights or loading a `GenCast 1p0deg Mini <2019`\nsnapshot, generating predictions, computing the loss and computing gradients.\nThe one-step implementation of GenCast architecture is provided in\n`gencast.py` and the relevant data, weights and statistics are in the `gencast/`\nsubdir of the Google Cloud Bucket.\n\n### Instructions for running GenCast on Google Cloud compute\n\n[cloud_vm_setup.md](https://github.com/google-deepmind/graphcast/blob/main/docs/cloud_vm_setup.md)\ncontains detailed instructions on launching a Google Cloud TPU VM. This provides\na means of running models (1-3) in the separate `gencast_demo_cloud_vm.ipynb` through [Colaboratory](https://colab.research.google.com/github/deepmind/graphcast/blob/master/gencast_demo_cloud_vm.ipynb).\n\nThe document also provides [instructions](https://github.com/google-deepmind/graphcast/blob/main/docs/cloud_vm_setup.md#running-inference-on-gpu) for running GenCast on a GPU. This requires using a different attention implementation.\n\n### Brief description of relevant library files\n\n*   `denoiser.py`: The GenCast denoiser for one step predictions.\n*   `denoisers_base.py`: Defines the interface of the denoiser.\n*   `dpm_solver_plus_plus_2s.py`: Sampler using DPM-Solver++ 2S from [1].\n*   `gencast.py`: Combines the GenCast model architecture, wrapped as a\n    denoiser, with a sampler to generate predictions.\n*   `nan_cleaning.py`: Wraps a predictor to allow it to work with data\n    cleaned of NaNs. Used to remove NaNs from sea surface temperature.\n*   `samplers_base.py`: Defines the interface of the sampler.\n*   `samplers_utils.py`: Utility methods for the sampler.\n*   `sparse_transformer.py`: General purpose sparse transformer that\n    operates on `TypedGraph`'s where both inputs and outputs are flat vectors of\n    features for each of the nodes and edges. `predictor.py` uses one of these\n    for the mesh GNN.\n*   `sparse_transformer_utils.py`: Utility methods for the sparse\n    transformer.\n*   `transformer.py`: Wraps the mesh transformer, swapping the leading\n    two axes of the nodes in the input graph.\n\n[1] DPM-Solver++: Fast Solver for Guided Sampling of Diffusion Probabilistic\n  Models, https://arxiv.org/abs/2211.01095\n\n## GraphCast: Learning skillful medium-range global weather forecasting\n\nThis package provides three pretrained models:\n\n1.  `GraphCast`, the high-resolution model used in the GraphCast paper (0.25 degree\nresolution, 37 pressure levels), trained on ERA5 data from 1979 to 2017,\n\n2.  `GraphCast_small`, a smaller, low-resolution version of GraphCast (1 degree\nresolution, 13 pressure levels, and a smaller mesh), trained on ERA5 data from\n1979 to 2015, useful to run a model with lower memory and compute constraints,\n\n3.  `GraphCast_operational`, a high-resolution model (0.25 degree resolution, 13\npressure levels) pre-trained on ERA5 data from 1979 to 2017 and fine-tuned on\nHRES data from 2016 to 2021. This model can be initialized from HRES data (does\nnot require precipitation inputs).\n\nThe best starting point is to open `graphcast_demo.ipynb` in [Colaboratory](https://colab.research.google.com/github/deepmind/graphcast/blob/master/graphcast_demo.ipynb), which gives an\nexample of loading data, generating random weights or load a pre-trained\nsnapshot, generating predictions, computing the loss and computing gradients.\nThe one-step implementation of GraphCast architecture, is provided in\n`graphcast.py` and the relevant data, weights and statistics are in the `graphcast/`\nsubdir of the Google Cloud Bucket.\n\nWARNING: For backwards compatibility, we have also left GraphCast data in the top level of the bucket. These will eventually be deleted in favour of the `graphcast/` subdir.\n\n### Brief description of relevant library files:\n\n*   `casting.py`: Wrapper used around GraphCast to make it work using\n    BFloat16 precision.\n*   `graphcast.py`: The main GraphCast model architecture for one-step of\n    predictions.\n*   `solar_radiation.py`: Computes Top-Of-the-Atmosphere (TOA) incident solar\n    radiation compatible with ERA5. This is used as a forcing variable and thus\n    needs to be computed for target lead times in an operational setting.\n\n## Dependencies.\n\n[Chex](https://github.com/deepmind/chex),\n[Dask](https://github.com/dask/dask),\n[Dinosaur](https://github.com/google-research/dinosaur),\n[Haiku](https://github.com/deepmind/dm-haiku),\n[JAX](https://github.com/google/jax),\n[JAXline](https://github.com/deepmind/jaxline),\n[Jraph](https://github.com/deepmind/jraph),\n[Numpy](https://numpy.org/),\n[Pandas](https://pandas.pydata.org/),\n[Python](https://www.python.org/),\n[SciPy](https://scipy.org/),\n[Tree](https://github.com/deepmind/tree),\n[Trimesh](https://github.com/mikedh/trimesh),\n[XArray](https://github.com/pydata/xarray) and\n[XArray-TensorStore](https://github.com/google/xarray-tensorstore).\n\n\n## License and Disclaimers\n\nThe Colab notebooks and the associated code are licensed under the Apache License, Version 2.0. You may obtain a copy of the License at: https://www.apache.org/licenses/LICENSE-2.0.\n\nThe model weights are made available for use under the terms of the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0). You may obtain a copy of the License at: https://creativecommons.org/licenses/by-nc-sa/4.0/.\n\nThis is not an officially supported Google product.\n\nUnless required by applicable law or agreed to in writing, all software and materials distributed here under the Apache 2.0 or CC-BY-NC-SA 4.0 licenses are distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the licenses for the specific language governing permissions and limitations under those licenses.\n\nGenCast and GraphCast are part of an experimental research project. You are solely responsible for determining the appropriateness of using or distributing GenCast, GraphCast or any outputs generated and assume all risks associated with your use or distribution of GenCast, GraphCast and outputs and your exercise of rights and permissions granted by Google to you under the relevant License. Use discretion before relying on, publishing, downloading or otherwise using GenCast, GraphCast or any outputs generated. GenCast, GraphCast or any outputs generated (i) are not based on data published by; (ii) have not been produced in collaboration with; and (iii) have not been endorsed by any government meteorological agency or department and in no way replaces official alerts, warnings or notices published by such agencies.\n\nCopyright 2024 DeepMind Technologies Limited.\n\n\n## Citations\n\nIf you use this work, consider citing our papers ([blog post](https://deepmind.google/discover/blog/graphcast-ai-model-for-faster-and-more-accurate-global-weather-forecasting/), [Science](https://www.science.org/doi/10.1126/science.adi2336), [arXiv](https://arxiv.org/abs/2212.12794), [arxiv GenCast](https://arxiv.org/abs/2312.15796)):\n\n```latex\n@article{lam2023learning,\n  title={Learning skillful medium-range global weather forecasting},\n  author={Lam, Remi and Sanchez-Gonzalez, Alvaro and Willson, Matthew and Wirnsberger, Peter and Fortunato, Meire and Alet, Ferran and Ravuri, Suman and Ewalds, Timo and Eaton-Rosen, Zach and Hu, Weihua and others},\n  journal={Science},\n  volume={382},\n  number={6677},\n  pages={1416--1421},\n  year={2023},\n  publisher={American Association for the Advancement of Science}\n}\n```\n\n\n```latex\n@article{price2023gencast,\n  title={GenCast: Diffusion-based ensemble forecasting for medium-range weather},\n  author={Price, Ilan and Sanchez-Gonzalez, Alvaro and Alet, Ferran and Andersson, Tom R and El-Kadi, Andrew and Masters, Dominic and Ewalds, Timo and Stott, Jacklynn and Mohamed, Shakir and Battaglia, Peter and Lam, Remi and Willson, Matthew},\n  journal={arXiv preprint arXiv:2312.15796},\n  year={2023}\n}\n```\n\n## Acknowledgements\n\nThe (i) GenCast and GraphCast communicate with and/or reference with the following separate libraries and packages and the colab notebooks include a few examples of ECMWF’s ERA5 and HRES data that can be used as input to the models.\nData and products of the European Centre for Medium-range Weather Forecasts (ECMWF), as modified by Google.\nModified Copernicus Climate Change Service information 2023. Neither the European Commission nor ECMWF is responsible for any use that may be made of the Copernicus information or data it contains.\nECMWF HRES datasets\nCopyright statement: Copyright \"© 2023 European Centre for Medium-Range Weather Forecasts (ECMWF)\".\nSource: www.ecmwf.int\nLicense Statement: ECMWF open data is published under a Creative Commons Attribution 4.0 International (CC BY 4.0). https://creativecommons.org/licenses/by/4.0/\nDisclaimer: ECMWF does not accept any liability whatsoever for any error or omission in the data, their availability, or for any loss or damage arising from their use.\n\nUse of the third-party materials referred to above may be governed by separate terms and conditions or license provisions. Your use of the third-party materials is subject to any such terms and you should check that you can comply with any applicable restrictions or terms and conditions before use.\n\n\n## Contact\n\nFor feedback and questions, contact us at gencast@google.com.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gencast_demo_cloud_vm.ipynb",
          "type": "blob",
          "size": 25.5849609375,
          "content": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"9KHpdDlzYNDI\"\n      },\n      \"source\": [\n        \"\\u003e Copyright 2024 DeepMind Technologies Limited.\\n\",\n        \"\\u003e\\n\",\n        \"\\u003e Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n        \"\\u003e you may not use this file except in compliance with the License.\\n\",\n        \"\\u003e You may obtain a copy of the License at\\n\",\n        \"\\u003e\\n\",\n        \"\\u003e      http://www.apache.org/licenses/LICENSE-2.0\\n\",\n        \"\\u003e\\n\",\n        \"\\u003e Unless required by applicable law or agreed to in writing, software\\n\",\n        \"\\u003e distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n\",\n        \"\\u003e WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n        \"\\u003e See the License for the specific language governing permissions and\\n\",\n        \"\\u003e limitations under the License.\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"GnMHywhUhlgJ\"\n      },\n      \"source\": [\n        \"# GenCast Demo\\n\",\n        \"\\n\",\n        \"This notebook demonstrates running all GenCast models provided in the repository:\\n\",\n        \"\\n\",\n        \"1.  `GenCast 0p25deg \\u003c2019`\\n\",\n        \"2.  `GenCast 0p25deg Operational \\u003c2019`\\n\",\n        \"3.  `GenCast 1p0deg \\u003c2019`\\n\",\n        \"4.  `GenCast 1p0deg Mini \\u003c2019`\\n\",\n        \"\\n\",\n        \"While `GenCast 1p0deg Mini \\u003c2019` is runnable with the freely provided TPUv2-8 configuration in Colab, the other models require compute that can be accessed via Google Cloud.\\n\",\n        \"\\n\",\n        \"See [cloud_vm_setup.md](https://github.com/google-deepmind/graphcast/blob/main/docs/cloud_vm_setup.md) for detailed instructions on launching a Google Cloud TPU VM and connecting to it via this notebook. This document also provides some more information on the memory requirements of the models.\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"yMbbXFl4msJw\"\n      },\n      \"source\": [\n        \"# Installation and Initialization\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"233zaiZYqCnc\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Pip install repo and dependencies\\n\",\n        \"\\n\",\n        \"%pip install --upgrade https://github.com/deepmind/graphcast/archive/master.zip\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Z_j8ej4Pyg1L\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Imports\\n\",\n        \"\\n\",\n        \"import dataclasses\\n\",\n        \"import datetime\\n\",\n        \"import math\\n\",\n        \"from typing import Optional\\n\",\n        \"import haiku as hk\\n\",\n        \"from IPython.display import HTML\\n\",\n        \"from IPython import display\\n\",\n        \"import ipywidgets as widgets\\n\",\n        \"import jax\\n\",\n        \"import matplotlib\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"from matplotlib import animation\\n\",\n        \"import numpy as np\\n\",\n        \"import xarray\\n\",\n        \"\\n\",\n        \"from graphcast import rollout\\n\",\n        \"from graphcast import xarray_jax\\n\",\n        \"from graphcast import normalization\\n\",\n        \"from graphcast import checkpoint\\n\",\n        \"from graphcast import data_utils\\n\",\n        \"from graphcast import xarray_tree\\n\",\n        \"from graphcast import gencast\\n\",\n        \"from graphcast import denoiser\\n\",\n        \"from graphcast import nan_cleaning\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"OzYgQ0QN-kn8\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plotting functions\\n\",\n        \"\\n\",\n        \"def select(\\n\",\n        \"    data: xarray.Dataset,\\n\",\n        \"    variable: str,\\n\",\n        \"    level: Optional[int] = None,\\n\",\n        \"    max_steps: Optional[int] = None\\n\",\n        \"    ) -\\u003e xarray.Dataset:\\n\",\n        \"  data = data[variable]\\n\",\n        \"  if \\\"batch\\\" in data.dims:\\n\",\n        \"    data = data.isel(batch=0)\\n\",\n        \"  if max_steps is not None and \\\"time\\\" in data.sizes and max_steps \\u003c data.sizes[\\\"time\\\"]:\\n\",\n        \"    data = data.isel(time=range(0, max_steps))\\n\",\n        \"  if level is not None and \\\"level\\\" in data.coords:\\n\",\n        \"    data = data.sel(level=level)\\n\",\n        \"  return data\\n\",\n        \"\\n\",\n        \"def scale(\\n\",\n        \"    data: xarray.Dataset,\\n\",\n        \"    center: Optional[float] = None,\\n\",\n        \"    robust: bool = False,\\n\",\n        \"    ) -\\u003e tuple[xarray.Dataset, matplotlib.colors.Normalize, str]:\\n\",\n        \"  vmin = np.nanpercentile(data, (2 if robust else 0))\\n\",\n        \"  vmax = np.nanpercentile(data, (98 if robust else 100))\\n\",\n        \"  if center is not None:\\n\",\n        \"    diff = max(vmax - center, center - vmin)\\n\",\n        \"    vmin = center - diff\\n\",\n        \"    vmax = center + diff\\n\",\n        \"  return (data, matplotlib.colors.Normalize(vmin, vmax),\\n\",\n        \"          (\\\"RdBu_r\\\" if center is not None else \\\"viridis\\\"))\\n\",\n        \"\\n\",\n        \"def plot_data(\\n\",\n        \"    data: dict[str, xarray.Dataset],\\n\",\n        \"    fig_title: str,\\n\",\n        \"    plot_size: float = 5,\\n\",\n        \"    robust: bool = False,\\n\",\n        \"    cols: int = 4\\n\",\n        \"    ) -\\u003e tuple[xarray.Dataset, matplotlib.colors.Normalize, str]:\\n\",\n        \"\\n\",\n        \"  first_data = next(iter(data.values()))[0]\\n\",\n        \"  max_steps = first_data.sizes.get(\\\"time\\\", 1)\\n\",\n        \"  assert all(max_steps == d.sizes.get(\\\"time\\\", 1) for d, _, _ in data.values())\\n\",\n        \"\\n\",\n        \"  cols = min(cols, len(data))\\n\",\n        \"  rows = math.ceil(len(data) / cols)\\n\",\n        \"  figure = plt.figure(figsize=(plot_size * 2 * cols,\\n\",\n        \"                               plot_size * rows))\\n\",\n        \"  figure.suptitle(fig_title, fontsize=16)\\n\",\n        \"  figure.subplots_adjust(wspace=0, hspace=0)\\n\",\n        \"  figure.tight_layout()\\n\",\n        \"\\n\",\n        \"  images = []\\n\",\n        \"  for i, (title, (plot_data, norm, cmap)) in enumerate(data.items()):\\n\",\n        \"    ax = figure.add_subplot(rows, cols, i+1)\\n\",\n        \"    ax.set_xticks([])\\n\",\n        \"    ax.set_yticks([])\\n\",\n        \"    ax.set_title(title)\\n\",\n        \"    im = ax.imshow(\\n\",\n        \"        plot_data.isel(time=0, missing_dims=\\\"ignore\\\"), norm=norm,\\n\",\n        \"        origin=\\\"lower\\\", cmap=cmap)\\n\",\n        \"    plt.colorbar(\\n\",\n        \"        mappable=im,\\n\",\n        \"        ax=ax,\\n\",\n        \"        orientation=\\\"vertical\\\",\\n\",\n        \"        pad=0.02,\\n\",\n        \"        aspect=16,\\n\",\n        \"        shrink=0.75,\\n\",\n        \"        cmap=cmap,\\n\",\n        \"        extend=(\\\"both\\\" if robust else \\\"neither\\\"))\\n\",\n        \"    images.append(im)\\n\",\n        \"\\n\",\n        \"  def update(frame):\\n\",\n        \"    if \\\"time\\\" in first_data.dims:\\n\",\n        \"      td = datetime.timedelta(microseconds=first_data[\\\"time\\\"][frame].item() / 1000)\\n\",\n        \"      figure.suptitle(f\\\"{fig_title}, {td}\\\", fontsize=16)\\n\",\n        \"    else:\\n\",\n        \"      figure.suptitle(fig_title, fontsize=16)\\n\",\n        \"    for im, (plot_data, norm, cmap) in zip(images, data.values()):\\n\",\n        \"      im.set_data(plot_data.isel(time=frame, missing_dims=\\\"ignore\\\"))\\n\",\n        \"\\n\",\n        \"  ani = animation.FuncAnimation(\\n\",\n        \"      fig=figure, func=update, frames=max_steps, interval=250)\\n\",\n        \"  plt.close(figure.number)\\n\",\n        \"  return HTML(ani.to_jshtml())\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"rQWk0RRuCjDN\"\n      },\n      \"source\": [\n        \"# Load the Data and initialize the model\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"jTRvMoexzjYm\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Set paths\\n\",\n        \"\\n\",\n        \"MODEL_PATH = \\\"\\\"  # E.g. \\\"GenCast 1p0deg _2019.npz\\\"\\n\",\n        \"DATA_PATH = \\\"\\\"  # E.g. \\\"source-era5_date-2019-03-29_res-1.0_levels-13_steps-04.nc\\\"\\n\",\n        \"STATS_DIR = \\\"\\\"  # E.g. \\\"stats/\\\"\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"cgfYjE1YhALA\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load the model\\n\",\n        \"\\n\",\n        \"with open(MODEL_PATH, \\\"rb\\\") as f:\\n\",\n        \"  ckpt = checkpoint.load(f, gencast.CheckPoint)\\n\",\n        \"params = ckpt.params\\n\",\n        \"state = {}\\n\",\n        \"\\n\",\n        \"task_config = ckpt.task_config\\n\",\n        \"sampler_config = ckpt.sampler_config\\n\",\n        \"noise_config = ckpt.noise_config\\n\",\n        \"noise_encoder_config = ckpt.noise_encoder_config\\n\",\n        \"denoiser_architecture_config = ckpt.denoiser_architecture_config\\n\",\n        \"print(\\\"Model description:\\\\n\\\", ckpt.description, \\\"\\\\n\\\")\\n\",\n        \"print(\\\"Model license:\\\\n\\\", ckpt.license, \\\"\\\\n\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"z2AqgxUgiALy\"\n      },\n      \"source\": [\n        \"## Load the example data\\n\",\n        \"\\n\",\n        \"Example ERA5 datasets are available at 0.25 degree and 1 degree resolution.\\n\",\n        \"\\n\",\n        \"Example HRES-fc0 datasets are available at 0.25 degree resolution.\\n\",\n        \"\\n\",\n        \"Some transformations were done from the base datasets:\\n\",\n        \"- We accumulated precipitation over 12 hours instead of the default 1 hour.\\n\",\n        \"- For HRES-fc0 sea surface temperature, we assigned NaNs to grid cells in which sea surface temperature was NaN in the ERA5 dataset (this remains fixed at all times).\\n\",\n        \"\\n\",\n        \"The data resolution must match the model that is loaded.\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"5XGzOww0y_BC\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Check example dataset matches model\\n\",\n        \"\\n\",\n        \"def parse_file_parts(file_name):\\n\",\n        \"  return dict(part.split(\\\"-\\\", 1) for part in file_name.split(\\\"_\\\"))\\n\",\n        \"\\n\",\n        \"def data_valid_for_model(file_name: str, params_file_name: str):\\n\",\n        \"  \\\"\\\"\\\"Check data type and resolution matches.\\\"\\\"\\\"\\n\",\n        \"  data_file_parts = parse_file_parts(file_name.removesuffix(\\\".nc\\\"))\\n\",\n        \"  res_matches = data_file_parts[\\\"res\\\"].replace(\\\".\\\", \\\"p\\\") in params_file_name.lower()\\n\",\n        \"  source_matches = \\\"Operational\\\" in params_file_name\\n\",\n        \"  if data_file_parts[\\\"source\\\"] == \\\"era5\\\":\\n\",\n        \"    source_matches = not source_matches\\n\",\n        \"  return res_matches and source_matches\\n\",\n        \"\\n\",\n        \"assert data_valid_for_model(DATA_PATH, MODEL_PATH)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Yz-ekISoJxeZ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load weather data\\n\",\n        \"\\n\",\n        \"with open(DATA_PATH, \\\"rb\\\") as f:\\n\",\n        \"  example_batch = xarray.load_dataset(f).compute()\\n\",\n        \"\\n\",\n        \"assert example_batch.dims[\\\"time\\\"] \\u003e= 3  # 2 for input, \\u003e=1 for targets\\n\",\n        \"\\n\",\n        \"print(\\\", \\\".join([f\\\"{k}: {v}\\\" for k, v in parse_file_parts(DATA_PATH.removesuffix(\\\".nc\\\")).items()]))\\n\",\n        \"\\n\",\n        \"example_batch\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"iqzXVpn9_b15\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot example data\\n\",\n        \"\\n\",\n        \"plot_size = 7\\n\",\n        \"variable = \\\"geopotential\\\"\\n\",\n        \"level = 500\\n\",\n        \"steps = example_batch.dims[\\\"time\\\"]\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"data = {\\n\",\n        \"    \\\" \\\": scale(select(example_batch, variable, level, steps), robust=True),\\n\",\n        \"}\\n\",\n        \"fig_title = variable\\n\",\n        \"if \\\"level\\\" in example_batch[variable].coords:\\n\",\n        \"  fig_title += f\\\" at {level} hPa\\\"\\n\",\n        \"\\n\",\n        \"plot_data(data, fig_title, plot_size, robust=True)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"njD4jsPTPKvJ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Extract training and eval data\\n\",\n        \"\\n\",\n        \"train_inputs, train_targets, train_forcings = data_utils.extract_inputs_targets_forcings(\\n\",\n        \"    example_batch, target_lead_times=slice(\\\"12h\\\", \\\"12h\\\"), # Only 1AR training.\\n\",\n        \"    **dataclasses.asdict(task_config))\\n\",\n        \"\\n\",\n        \"eval_inputs, eval_targets, eval_forcings = data_utils.extract_inputs_targets_forcings(\\n\",\n        \"    example_batch, target_lead_times=slice(\\\"12h\\\", f\\\"{(example_batch.dims['time']-2)*12}h\\\"), # All but 2 input frames.\\n\",\n        \"    **dataclasses.asdict(task_config))\\n\",\n        \"\\n\",\n        \"print(\\\"All Examples:  \\\", example_batch.dims.mapping)\\n\",\n        \"print(\\\"Train Inputs:  \\\", train_inputs.dims.mapping)\\n\",\n        \"print(\\\"Train Targets: \\\", train_targets.dims.mapping)\\n\",\n        \"print(\\\"Train Forcings:\\\", train_forcings.dims.mapping)\\n\",\n        \"print(\\\"Eval Inputs:   \\\", eval_inputs.dims.mapping)\\n\",\n        \"print(\\\"Eval Targets:  \\\", eval_targets.dims.mapping)\\n\",\n        \"print(\\\"Eval Forcings: \\\", eval_forcings.dims.mapping)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"-DJzie5me2-H\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load normalization data\\n\",\n        \"\\n\",\n        \"with open(STATS_DIR +\\\"diffs_stddev_by_level.nc\\\", \\\"rb\\\") as f:\\n\",\n        \"  diffs_stddev_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with open(STATS_DIR +\\\"mean_by_level.nc\\\", \\\"rb\\\") as f:\\n\",\n        \"  mean_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with open(STATS_DIR +\\\"stddev_by_level.nc\\\", \\\"rb\\\") as f:\\n\",\n        \"  stddev_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with open(STATS_DIR +\\\"min_by_level.nc\\\", \\\"rb\\\") as f:\\n\",\n        \"  min_by_level = xarray.load_dataset(f).compute()\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ke2zQyuT_sMA\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Build jitted functions, and possibly initialize random weights\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"def construct_wrapped_gencast():\\n\",\n        \"  \\\"\\\"\\\"Constructs and wraps the GenCast Predictor.\\\"\\\"\\\"\\n\",\n        \"  predictor = gencast.GenCast(\\n\",\n        \"      sampler_config=sampler_config,\\n\",\n        \"      task_config=task_config,\\n\",\n        \"      denoiser_architecture_config=denoiser_architecture_config,\\n\",\n        \"      noise_config=noise_config,\\n\",\n        \"      noise_encoder_config=noise_encoder_config,\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  predictor = normalization.InputsAndResiduals(\\n\",\n        \"      predictor,\\n\",\n        \"      diffs_stddev_by_level=diffs_stddev_by_level,\\n\",\n        \"      mean_by_level=mean_by_level,\\n\",\n        \"      stddev_by_level=stddev_by_level,\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  predictor = nan_cleaning.NaNCleaner(\\n\",\n        \"      predictor=predictor,\\n\",\n        \"      reintroduce_nans=True,\\n\",\n        \"      fill_value=min_by_level,\\n\",\n        \"      var_to_clean='sea_surface_temperature',\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  return predictor\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"@hk.transform_with_state\\n\",\n        \"def run_forward(inputs, targets_template, forcings):\\n\",\n        \"  predictor = construct_wrapped_gencast()\\n\",\n        \"  return predictor(inputs, targets_template=targets_template, forcings=forcings)\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"@hk.transform_with_state\\n\",\n        \"def loss_fn(inputs, targets, forcings):\\n\",\n        \"  predictor = construct_wrapped_gencast()\\n\",\n        \"  loss, diagnostics = predictor.loss(inputs, targets, forcings)\\n\",\n        \"  return xarray_tree.map_structure(\\n\",\n        \"      lambda x: xarray_jax.unwrap_data(x.mean(), require_jax=True),\\n\",\n        \"      (loss, diagnostics),\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"def grads_fn(params, state, inputs, targets, forcings):\\n\",\n        \"  def _aux(params, state, i, t, f):\\n\",\n        \"    (loss, diagnostics), next_state = loss_fn.apply(\\n\",\n        \"        params, state, jax.random.PRNGKey(0), i, t, f\\n\",\n        \"    )\\n\",\n        \"    return loss, (diagnostics, next_state)\\n\",\n        \"\\n\",\n        \"  (loss, (diagnostics, next_state)), grads = jax.value_and_grad(\\n\",\n        \"      _aux, has_aux=True\\n\",\n        \"  )(params, state, inputs, targets, forcings)\\n\",\n        \"  return loss, diagnostics, next_state, grads\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"if params is None:\\n\",\n        \"  init_jitted = jax.jit(loss_fn.init)\\n\",\n        \"  params, state = init_jitted(\\n\",\n        \"      rng=jax.random.PRNGKey(0),\\n\",\n        \"      inputs=train_inputs,\\n\",\n        \"      targets=train_targets,\\n\",\n        \"      forcings=train_forcings,\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"loss_fn_jitted = jax.jit(\\n\",\n        \"    lambda rng, i, t, f: loss_fn.apply(params, state, rng, i, t, f)[0]\\n\",\n        \")\\n\",\n        \"grads_fn_jitted = jax.jit(grads_fn)\\n\",\n        \"run_forward_jitted = jax.jit(\\n\",\n        \"    lambda rng, i, t, f: run_forward.apply(params, state, rng, i, t, f)[0]\\n\",\n        \")\\n\",\n        \"# We also produce a pmapped version for running in parallel.\\n\",\n        \"run_forward_pmap = xarray_jax.pmap(run_forward_jitted, dim=\\\"sample\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"VBNutliiCyqA\"\n      },\n      \"source\": [\n        \"# Run the model\\n\",\n        \"\\n\",\n        \"The `chunked_prediction_generator_multiple_runs` iterates over forecast steps, where the 1 step forecast is jitted and samples are pmapped across the chips.\\n\",\n        \"This allows us to make efficient use of all devices and parallelise generating an ensemble across them. We then combine the chunks at the end to form our final forecast.\\n\",\n        \"\\n\",\n        \"Note that the `Autoregressive rollout` cell will take longer than the standard inference time to run when executed for the first time, as this will include code compilation time. This cost does not increase with the number of devices, it is a fixed-cost one time operation whose result can be reused across any number of devices.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"t-6ik5tU1yr7\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# The number of ensemble members should be a multiple of the number of devices.\\n\",\n        \"print(f\\\"Number of local devices {len(jax.local_devices())}\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"7obeY9i9oTtD\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Autoregressive rollout (loop in python)\\n\",\n        \"\\n\",\n        \"print(\\\"Inputs:  \\\", eval_inputs.dims.mapping)\\n\",\n        \"print(\\\"Targets: \\\", eval_targets.dims.mapping)\\n\",\n        \"print(\\\"Forcings:\\\", eval_forcings.dims.mapping)\\n\",\n        \"\\n\",\n        \"num_ensemble_members = 8 # @param int\\n\",\n        \"rng = jax.random.PRNGKey(0)\\n\",\n        \"# We fold-in the ensemble member, this way the first N members should always\\n\",\n        \"# match across different runs which use take the same inputs\\n\",\n        \"# regardless of total ensemble size.\\n\",\n        \"rngs = np.stack(\\n\",\n        \"    [jax.random.fold_in(rng, i) for i in range(num_ensemble_members)], axis=0)\\n\",\n        \"\\n\",\n        \"chunks = []\\n\",\n        \"for chunk in rollout.chunked_prediction_generator_multiple_runs(\\n\",\n        \"    # Use pmapped version to parallelise across devices.\\n\",\n        \"    predictor_fn=run_forward_pmap,\\n\",\n        \"    rngs=rngs,\\n\",\n        \"    inputs=eval_inputs,\\n\",\n        \"    targets_template=eval_targets * np.nan,\\n\",\n        \"    forcings=eval_forcings,\\n\",\n        \"    num_steps_per_chunk = 1,\\n\",\n        \"    num_samples = num_ensemble_members,\\n\",\n        \"    pmap_devices=jax.local_devices()\\n\",\n        \"    ):\\n\",\n        \"    chunks.append(chunk)\\n\",\n        \"predictions = xarray.combine_by_coords(chunks)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"wn7dccXO5R7C\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot prediction samples and diffs\\n\",\n        \"\\n\",\n        \"plot_size = 5\\n\",\n        \"variable = \\\"2m_temperature\\\"\\n\",\n        \"level = None\\n\",\n        \"steps = predictions.dims[\\\"time\\\"]\\n\",\n        \"\\n\",\n        \"fig_title = variable\\n\",\n        \"if \\\"level\\\" in predictions[variable].coords:\\n\",\n        \"  fig_title += f\\\" at {level} hPa\\\"\\n\",\n        \"\\n\",\n        \"for sample_idx in range(num_ensemble_members):\\n\",\n        \"  data = {\\n\",\n        \"      \\\"Targets\\\": scale(select(eval_targets, variable, level, steps), robust=True),\\n\",\n        \"      \\\"Predictions\\\": scale(select(predictions.isel(sample=sample_idx), variable, level, steps), robust=True),\\n\",\n        \"      \\\"Diff\\\": scale((select(eval_targets, variable, level, steps) -\\n\",\n        \"                          select(predictions.isel(sample=sample_idx), variable, level, steps)),\\n\",\n        \"                        robust=True, center=0),\\n\",\n        \"  }\\n\",\n        \"  display.display(plot_data(data, fig_title + f\\\", Sample {sample_idx}\\\", plot_size, robust=True))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"X3m9lW5fN4oL\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot ensemble mean and CRPS\\n\",\n        \"\\n\",\n        \"def crps(targets, predictions, bias_corrected = True):\\n\",\n        \"  if predictions.sizes.get(\\\"sample\\\", 1) \\u003c 2:\\n\",\n        \"    raise ValueError(\\n\",\n        \"        \\\"predictions must have dim 'sample' with size at least 2.\\\")\\n\",\n        \"  sum_dims = [\\\"sample\\\", \\\"sample2\\\"]\\n\",\n        \"  preds2 = predictions.rename({\\\"sample\\\": \\\"sample2\\\"})\\n\",\n        \"  num_samps = predictions.sizes[\\\"sample\\\"]\\n\",\n        \"  num_samps2 = (num_samps - 1) if bias_corrected else num_samps\\n\",\n        \"  mean_abs_diff = np.abs(\\n\",\n        \"      predictions - preds2).sum(\\n\",\n        \"          dim=sum_dims, skipna=False) / (num_samps * num_samps2)\\n\",\n        \"  mean_abs_err = np.abs(targets - predictions).sum(dim=\\\"sample\\\", skipna=False) / num_samps\\n\",\n        \"  return mean_abs_err - 0.5 * mean_abs_diff\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"plot_size = 5\\n\",\n        \"variable = \\\"2m_temperature\\\"\\n\",\n        \"level = None\\n\",\n        \"steps = predictions.dims[\\\"time\\\"]\\n\",\n        \"\\n\",\n        \"fig_title = variable\\n\",\n        \"if \\\"level\\\" in predictions[variable].coords:\\n\",\n        \"  fig_title += f\\\" at {level} hPa\\\"\\n\",\n        \"\\n\",\n        \"data = {\\n\",\n        \"    \\\"Targets\\\": scale(select(eval_targets, variable, level, steps), robust=True),\\n\",\n        \"    \\\"Ensemble Mean\\\": scale(select(predictions.mean(dim=[\\\"sample\\\"]), variable, level, steps), robust=True),\\n\",\n        \"    \\\"Ensemble CRPS\\\": scale(crps((select(eval_targets, variable, level, steps)),\\n\",\n        \"                        select(predictions, variable, level, steps)),\\n\",\n        \"                      robust=True, center=0),\\n\",\n        \"}\\n\",\n        \"display.display(plot_data(data, fig_title, plot_size, robust=True))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ZLI0DhWog3Rg\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title (Optional) Save the predictions.\\n\",\n        \"predictions.to_zarr(\\\"predictions.zarr\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"O6ZhRFBPD0kq\"\n      },\n      \"source\": [\n        \"# Train the model\\n\",\n        \"\\n\",\n        \"The following operations requires larger amounts of memory than running inference.\\n\",\n        \"\\n\",\n        \"The first time executing the cell takes more time, as it includes the time to jit the function.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Nv-u3dAP7IRZ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Loss computation\\n\",\n        \"loss, diagnostics = loss_fn_jitted(\\n\",\n        \"    jax.random.PRNGKey(0),\\n\",\n        \"    train_inputs,\\n\",\n        \"    train_targets,\\n\",\n        \"    train_forcings)\\n\",\n        \"print(\\\"Loss:\\\", float(loss))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"mBNFq1IGZNLz\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Gradient computation\\n\",\n        \"loss, diagnostics, next_state, grads = grads_fn_jitted(\\n\",\n        \"    params=params,\\n\",\n        \"    state=state,\\n\",\n        \"    inputs=train_inputs,\\n\",\n        \"    targets=train_targets,\\n\",\n        \"    forcings=train_forcings)\\n\",\n        \"mean_grad = np.mean(jax.tree_util.tree_flatten(jax.tree_util.tree_map(lambda x: np.abs(x).mean(), grads))[0])\\n\",\n        \"print(f\\\"Loss: {loss:.4f}, Mean |grad|: {mean_grad:.6f}\\\")\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"colab\": {\n      \"last_runtime\": {\n        \"build_target\": \"//gdm/weather/colab_base:weather_notebook\",\n        \"kind\": \"private\"\n      },\n      \"name\": \"GenCast Cloud VM\",\n      \"private_outputs\": true,\n      \"provenance\": []\n    },\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "gencast_mini_demo.ipynb",
          "type": "blob",
          "size": 35.5595703125,
          "content": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"9KHpdDlzYNDI\"\n      },\n      \"source\": [\n        \"\\u003e Copyright 2024 DeepMind Technologies Limited.\\n\",\n        \"\\u003e\\n\",\n        \"\\u003e Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n        \"\\u003e you may not use this file except in compliance with the License.\\n\",\n        \"\\u003e You may obtain a copy of the License at\\n\",\n        \"\\u003e\\n\",\n        \"\\u003e      http://www.apache.org/licenses/LICENSE-2.0\\n\",\n        \"\\u003e\\n\",\n        \"\\u003e Unless required by applicable law or agreed to in writing, software\\n\",\n        \"\\u003e distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n\",\n        \"\\u003e WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n        \"\\u003e See the License for the specific language governing permissions and\\n\",\n        \"\\u003e limitations under the License.\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"GnMHywhUhlgJ\"\n      },\n      \"source\": [\n        \"# GenCast Mini Demo\\n\",\n        \"\\n\",\n        \"This notebook demonstrates running `GenCast 1p0deg Mini \\u003c2019`.\\n\",\n        \"\\n\",\n        \"`GenCast 1p0deg Mini \\u003c2019` is a GenCast model at 1deg resolution, with 13 pressure levels and a 4 times refined icosahedral mesh. It is trained on ERA5 data from 1979 to 2018, and can be causally evaluated on 2019 and later years.\\n\",\n        \"\\n\",\n        \"While other GenCast models are [available](https://github.com/google-deepmind/graphcast/blob/main/README.md), this model has the smallest memory footprint of those provided and is the only one runnable with the freely provided TPUv2-8 configuration in Colab. You can select this configuration in `Runtime\\u003eChange Runtime Type`.\\n\",\n        \"\\n\",\n        \"**N.B.** The performance of `GenCast 1p0deg Mini \\u003c2019` is reasonable but is not representative of the performance of the other GenCast models described in the [README](https://github.com/google-deepmind/graphcast/blob/main/README.md).\\n\",\n        \"\\n\",\n        \"To run the other models using Google Cloud Compute, refer to [gencast_demo_cloud_vm.ipynb](https://colab.research.google.com/github/deepmind/graphcast/blob/master/gencast_demo_cloud_vm.ipynb).\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"yMbbXFl4msJw\"\n      },\n      \"source\": [\n        \"# Installation and Initialization\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"-gAH79SRwp9G\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Upgrade packages (kernel needs to be restarted after running this cell).\\n\",\n        \"\\n\",\n        \"%pip install -U importlib_metadata\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"233zaiZYqCnc\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Pip install repo and dependencies\\n\",\n        \"\\n\",\n        \"%pip install --upgrade https://github.com/deepmind/graphcast/archive/master.zip\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Z_j8ej4Pyg1L\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Imports\\n\",\n        \"\\n\",\n        \"import dataclasses\\n\",\n        \"import datetime\\n\",\n        \"import math\\n\",\n        \"from google.cloud import storage\\n\",\n        \"from typing import Optional\\n\",\n        \"import haiku as hk\\n\",\n        \"from IPython.display import HTML\\n\",\n        \"from IPython import display\\n\",\n        \"import ipywidgets as widgets\\n\",\n        \"import jax\\n\",\n        \"import matplotlib\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"from matplotlib import animation\\n\",\n        \"import numpy as np\\n\",\n        \"import xarray\\n\",\n        \"\\n\",\n        \"from graphcast import rollout\\n\",\n        \"from graphcast import xarray_jax\\n\",\n        \"from graphcast import normalization\\n\",\n        \"from graphcast import checkpoint\\n\",\n        \"from graphcast import data_utils\\n\",\n        \"from graphcast import xarray_tree\\n\",\n        \"from graphcast import gencast\\n\",\n        \"from graphcast import denoiser\\n\",\n        \"from graphcast import nan_cleaning\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"OzYgQ0QN-kn8\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plotting functions\\n\",\n        \"\\n\",\n        \"def select(\\n\",\n        \"    data: xarray.Dataset,\\n\",\n        \"    variable: str,\\n\",\n        \"    level: Optional[int] = None,\\n\",\n        \"    max_steps: Optional[int] = None\\n\",\n        \"    ) -\\u003e xarray.Dataset:\\n\",\n        \"  data = data[variable]\\n\",\n        \"  if \\\"batch\\\" in data.dims:\\n\",\n        \"    data = data.isel(batch=0)\\n\",\n        \"  if max_steps is not None and \\\"time\\\" in data.sizes and max_steps \\u003c data.sizes[\\\"time\\\"]:\\n\",\n        \"    data = data.isel(time=range(0, max_steps))\\n\",\n        \"  if level is not None and \\\"level\\\" in data.coords:\\n\",\n        \"    data = data.sel(level=level)\\n\",\n        \"  return data\\n\",\n        \"\\n\",\n        \"def scale(\\n\",\n        \"    data: xarray.Dataset,\\n\",\n        \"    center: Optional[float] = None,\\n\",\n        \"    robust: bool = False,\\n\",\n        \"    ) -\\u003e tuple[xarray.Dataset, matplotlib.colors.Normalize, str]:\\n\",\n        \"  vmin = np.nanpercentile(data, (2 if robust else 0))\\n\",\n        \"  vmax = np.nanpercentile(data, (98 if robust else 100))\\n\",\n        \"  if center is not None:\\n\",\n        \"    diff = max(vmax - center, center - vmin)\\n\",\n        \"    vmin = center - diff\\n\",\n        \"    vmax = center + diff\\n\",\n        \"  return (data, matplotlib.colors.Normalize(vmin, vmax),\\n\",\n        \"          (\\\"RdBu_r\\\" if center is not None else \\\"viridis\\\"))\\n\",\n        \"\\n\",\n        \"def plot_data(\\n\",\n        \"    data: dict[str, xarray.Dataset],\\n\",\n        \"    fig_title: str,\\n\",\n        \"    plot_size: float = 5,\\n\",\n        \"    robust: bool = False,\\n\",\n        \"    cols: int = 4\\n\",\n        \"    ) -\\u003e tuple[xarray.Dataset, matplotlib.colors.Normalize, str]:\\n\",\n        \"\\n\",\n        \"  first_data = next(iter(data.values()))[0]\\n\",\n        \"  max_steps = first_data.sizes.get(\\\"time\\\", 1)\\n\",\n        \"  assert all(max_steps == d.sizes.get(\\\"time\\\", 1) for d, _, _ in data.values())\\n\",\n        \"\\n\",\n        \"  cols = min(cols, len(data))\\n\",\n        \"  rows = math.ceil(len(data) / cols)\\n\",\n        \"  figure = plt.figure(figsize=(plot_size * 2 * cols,\\n\",\n        \"                               plot_size * rows))\\n\",\n        \"  figure.suptitle(fig_title, fontsize=16)\\n\",\n        \"  figure.subplots_adjust(wspace=0, hspace=0)\\n\",\n        \"  figure.tight_layout()\\n\",\n        \"\\n\",\n        \"  images = []\\n\",\n        \"  for i, (title, (plot_data, norm, cmap)) in enumerate(data.items()):\\n\",\n        \"    ax = figure.add_subplot(rows, cols, i+1)\\n\",\n        \"    ax.set_xticks([])\\n\",\n        \"    ax.set_yticks([])\\n\",\n        \"    ax.set_title(title)\\n\",\n        \"    im = ax.imshow(\\n\",\n        \"        plot_data.isel(time=0, missing_dims=\\\"ignore\\\"), norm=norm,\\n\",\n        \"        origin=\\\"lower\\\", cmap=cmap)\\n\",\n        \"    plt.colorbar(\\n\",\n        \"        mappable=im,\\n\",\n        \"        ax=ax,\\n\",\n        \"        orientation=\\\"vertical\\\",\\n\",\n        \"        pad=0.02,\\n\",\n        \"        aspect=16,\\n\",\n        \"        shrink=0.75,\\n\",\n        \"        cmap=cmap,\\n\",\n        \"        extend=(\\\"both\\\" if robust else \\\"neither\\\"))\\n\",\n        \"    images.append(im)\\n\",\n        \"\\n\",\n        \"  def update(frame):\\n\",\n        \"    if \\\"time\\\" in first_data.dims:\\n\",\n        \"      td = datetime.timedelta(microseconds=first_data[\\\"time\\\"][frame].item() / 1000)\\n\",\n        \"      figure.suptitle(f\\\"{fig_title}, {td}\\\", fontsize=16)\\n\",\n        \"    else:\\n\",\n        \"      figure.suptitle(fig_title, fontsize=16)\\n\",\n        \"    for im, (plot_data, norm, cmap) in zip(images, data.values()):\\n\",\n        \"      im.set_data(plot_data.isel(time=frame, missing_dims=\\\"ignore\\\"))\\n\",\n        \"\\n\",\n        \"  ani = animation.FuncAnimation(\\n\",\n        \"      fig=figure, func=update, frames=max_steps, interval=250)\\n\",\n        \"  plt.close(figure.number)\\n\",\n        \"  return HTML(ani.to_jshtml())\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"rQWk0RRuCjDN\"\n      },\n      \"source\": [\n        \"# Load the Data and initialize the model\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ttMHeiGCppjB\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Authenticate with Google Cloud Storage\\n\",\n        \"\\n\",\n        \"# Gives you an authenticated client, in case you want to use a private bucket.\\n\",\n        \"gcs_client = storage.Client.create_anonymous_client()\\n\",\n        \"gcs_bucket = gcs_client.get_bucket(\\\"dm_graphcast\\\")\\n\",\n        \"dir_prefix = \\\"gencast/\\\"\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"ty5WSDRjhDBF\"\n      },\n      \"source\": [\n        \"## Load the model params\\n\",\n        \"\\n\",\n        \"Choose one of the two ways of getting model params:\\n\",\n        \"- **checkpoint**: You'll get sensible predictions, but are limited to the model architecture that it was trained with, which may not fit on your device.\\n\",\n        \"- **random**: You'll get random predictions, but you can change the model architecture and data resolution which may run faster or fit on your device.\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"PMoFXuZXs-xg\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose the model\\n\",\n        \"\\n\",\n        \"params_file_options = [\\n\",\n        \"    name for blob in gcs_bucket.list_blobs(prefix=(dir_prefix+\\\"params/\\\"))\\n\",\n        \"    if (name := blob.name.removeprefix(dir_prefix+\\\"params/\\\"))]  # Drop empty string.\\n\",\n        \"\\n\",\n        \"latent_value_options = [int(2**i) for i in range(4, 10)]\\n\",\n        \"random_latent_size = widgets.Dropdown(\\n\",\n        \"    options=latent_value_options, value=512,description=\\\"Latent size:\\\")\\n\",\n        \"random_attention_type = widgets.Dropdown(\\n\",\n        \"    options=[\\\"splash_mha\\\", \\\"triblockdiag_mha\\\", \\\"mha\\\"], value=\\\"splash_mha\\\", description=\\\"Attention:\\\")\\n\",\n        \"random_mesh_size = widgets.IntSlider(\\n\",\n        \"    value=4, min=4, max=6, description=\\\"Mesh size:\\\")\\n\",\n        \"random_num_heads = widgets.Dropdown(\\n\",\n        \"    options=[int(2**i) for i in range(0, 3)], value=4,description=\\\"Num heads:\\\")\\n\",\n        \"random_attention_k_hop = widgets.Dropdown(\\n\",\n        \"    options=[int(2**i) for i in range(2, 5)], value=16,description=\\\"Attn k hop:\\\")\\n\",\n        \"random_resolution = widgets.Dropdown(\\n\",\n        \"    options=[\\\"1p0\\\", \\\"0p25\\\"], value=\\\"1p0\\\", description=\\\"Resolution:\\\")\\n\",\n        \"\\n\",\n        \"def update_latent_options(*args):\\n\",\n        \"  def _latent_valid_for_attn(attn, latent, heads):\\n\",\n        \"    head_dim, rem = divmod(latent, heads)\\n\",\n        \"    if rem != 0:\\n\",\n        \"      return False\\n\",\n        \"    # Required for splash attn.\\n\",\n        \"    if head_dim % 128 != 0:\\n\",\n        \"      return attn != \\\"splash_mha\\\"\\n\",\n        \"    return True\\n\",\n        \"  attn = random_attention_type.value\\n\",\n        \"  heads = random_num_heads.value\\n\",\n        \"  random_latent_size.options = [\\n\",\n        \"      latent for latent in latent_value_options\\n\",\n        \"      if _latent_valid_for_attn(attn, latent, heads)]\\n\",\n        \"\\n\",\n        \"# Observe changes to only allow for valid combinations.\\n\",\n        \"random_attention_type.observe(update_latent_options, \\\"value\\\")\\n\",\n        \"random_latent_size.observe(update_latent_options, \\\"value\\\")\\n\",\n        \"random_num_heads.observe(update_latent_options, \\\"value\\\")\\n\",\n        \"\\n\",\n        \"params_file = widgets.Dropdown(\\n\",\n        \"    options=[f for f in params_file_options if \\\"Mini\\\" in f],\\n\",\n        \"    description=\\\"Params file:\\\",\\n\",\n        \"    layout={\\\"width\\\": \\\"max-content\\\"})\\n\",\n        \"\\n\",\n        \"source_tab = widgets.Tab([\\n\",\n        \"    params_file,\\n\",\n        \"    widgets.VBox([\\n\",\n        \"        random_attention_type,\\n\",\n        \"        random_mesh_size,\\n\",\n        \"        random_num_heads,\\n\",\n        \"        random_latent_size,\\n\",\n        \"        random_attention_k_hop,\\n\",\n        \"        random_resolution\\n\",\n        \"    ]),\\n\",\n        \"])\\n\",\n        \"source_tab.set_title(0, \\\"Checkpoint\\\")\\n\",\n        \"source_tab.set_title(1, \\\"Random\\\")\\n\",\n        \"widgets.VBox([\\n\",\n        \"    source_tab,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to load the model. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"cgfYjE1YhALA\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load the model\\n\",\n        \"\\n\",\n        \"source = source_tab.get_title(source_tab.selected_index)\\n\",\n        \"\\n\",\n        \"if source == \\\"Random\\\":\\n\",\n        \"  params = None  # Filled in below\\n\",\n        \"  state = {}\\n\",\n        \"  task_config = gencast.TASK\\n\",\n        \"  # Use default values.\\n\",\n        \"  sampler_config = gencast.SamplerConfig()\\n\",\n        \"  noise_config = gencast.NoiseConfig()\\n\",\n        \"  noise_encoder_config = denoiser.NoiseEncoderConfig()\\n\",\n        \"  # Configure, otherwise use default values.\\n\",\n        \"  denoiser_architecture_config = denoiser.DenoiserArchitectureConfig(\\n\",\n        \"    sparse_transformer_config = denoiser.SparseTransformerConfig(\\n\",\n        \"        attention_k_hop=random_attention_k_hop.value,\\n\",\n        \"        attention_type=random_attention_type.value,\\n\",\n        \"        d_model=random_latent_size.value,\\n\",\n        \"        num_heads=random_num_heads.value\\n\",\n        \"        ),\\n\",\n        \"    mesh_size=random_mesh_size.value,\\n\",\n        \"    latent_size=random_latent_size.value,\\n\",\n        \"  )\\n\",\n        \"else:\\n\",\n        \"  assert source == \\\"Checkpoint\\\"\\n\",\n        \"  with gcs_bucket.blob(dir_prefix + f\\\"params/{params_file.value}\\\").open(\\\"rb\\\") as f:\\n\",\n        \"    ckpt = checkpoint.load(f, gencast.CheckPoint)\\n\",\n        \"  params = ckpt.params\\n\",\n        \"  state = {}\\n\",\n        \"\\n\",\n        \"  task_config = ckpt.task_config\\n\",\n        \"  sampler_config = ckpt.sampler_config\\n\",\n        \"  noise_config = ckpt.noise_config\\n\",\n        \"  noise_encoder_config = ckpt.noise_encoder_config\\n\",\n        \"  denoiser_architecture_config = ckpt.denoiser_architecture_config\\n\",\n        \"  print(\\\"Model description:\\\\n\\\", ckpt.description, \\\"\\\\n\\\")\\n\",\n        \"  print(\\\"Model license:\\\\n\\\", ckpt.license, \\\"\\\\n\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"z2AqgxUgiALy\"\n      },\n      \"source\": [\n        \"## Load the example data\\n\",\n        \"\\n\",\n        \"Example ERA5 datasets are available at 0.25 degree and 1 degree resolution.\\n\",\n        \"\\n\",\n        \"Example HRES-fc0 datasets are available at 0.25 degree resolution.\\n\",\n        \"\\n\",\n        \"Some transformations were done from the base datasets:\\n\",\n        \"- We accumulated precipitation over 12 hours instead of the default 1 hour.\\n\",\n        \"- For HRES-fc0 sea surface temperature, we assigned NaNs to grid cells in which sea surface temperature was NaN in the ERA5 dataset (this remains fixed at all times).\\n\",\n        \"\\n\",\n        \"The data resolution must match the model that is loaded. Since we are running GenCast Mini, this will be 1 degree.\\n\",\n        \"\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"5XGzOww0y_BC\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Get and filter the list of available example datasets\\n\",\n        \"\\n\",\n        \"dataset_file_options = [\\n\",\n        \"    name for blob in gcs_bucket.list_blobs(prefix=(dir_prefix + \\\"dataset/\\\"))\\n\",\n        \"    if (name := blob.name.removeprefix(dir_prefix+\\\"dataset/\\\"))]  # Drop empty string.\\n\",\n        \"\\n\",\n        \"def parse_file_parts(file_name):\\n\",\n        \"  return dict(part.split(\\\"-\\\", 1) for part in file_name.split(\\\"_\\\"))\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"def data_valid_for_model(file_name: str, params_file_name: str):\\n\",\n        \"  \\\"\\\"\\\"Check data type and resolution matches.\\\"\\\"\\\"\\n\",\n        \"  data_file_parts = parse_file_parts(file_name.removesuffix(\\\".nc\\\"))\\n\",\n        \"  data_res = data_file_parts[\\\"res\\\"].replace(\\\".\\\", \\\"p\\\")\\n\",\n        \"  if source == \\\"Random\\\":\\n\",\n        \"    return random_resolution.value == data_res\\n\",\n        \"  res_matches = data_res in params_file_name.lower()\\n\",\n        \"  source_matches = \\\"Operational\\\" in params_file_name\\n\",\n        \"  if data_file_parts[\\\"source\\\"] == \\\"era5\\\":\\n\",\n        \"    source_matches = not source_matches\\n\",\n        \"  return res_matches and source_matches\\n\",\n        \"\\n\",\n        \"dataset_file = widgets.Dropdown(\\n\",\n        \"    options=[\\n\",\n        \"        (\\\", \\\".join([f\\\"{k}: {v}\\\" for k, v in parse_file_parts(option.removesuffix(\\\".nc\\\")).items()]), option)\\n\",\n        \"        for option in dataset_file_options\\n\",\n        \"        if data_valid_for_model(option, params_file.value)\\n\",\n        \"    ],\\n\",\n        \"    description=\\\"Dataset file:\\\",\\n\",\n        \"    layout={\\\"width\\\": \\\"max-content\\\"})\\n\",\n        \"widgets.VBox([\\n\",\n        \"    dataset_file,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to load the dataset. Rerunning this cell clears your selection and refilters the datasets that match your model.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"Yz-ekISoJxeZ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load weather data\\n\",\n        \"\\n\",\n        \"with gcs_bucket.blob(dir_prefix+f\\\"dataset/{dataset_file.value}\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  example_batch = xarray.load_dataset(f).compute()\\n\",\n        \"\\n\",\n        \"assert example_batch.dims[\\\"time\\\"] \\u003e= 3  # 2 for input, \\u003e=1 for targets\\n\",\n        \"\\n\",\n        \"print(\\\", \\\".join([f\\\"{k}: {v}\\\" for k, v in parse_file_parts(dataset_file.value.removesuffix(\\\".nc\\\")).items()]))\\n\",\n        \"\\n\",\n        \"example_batch\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"lXjFvdE6qStr\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose data to plot\\n\",\n        \"\\n\",\n        \"plot_example_variable = widgets.Dropdown(\\n\",\n        \"    options=example_batch.data_vars.keys(),\\n\",\n        \"    value=\\\"2m_temperature\\\",\\n\",\n        \"    description=\\\"Variable\\\")\\n\",\n        \"plot_example_level = widgets.Dropdown(\\n\",\n        \"    options=example_batch.coords[\\\"level\\\"].values,\\n\",\n        \"    value=500,\\n\",\n        \"    description=\\\"Level\\\")\\n\",\n        \"plot_example_robust = widgets.Checkbox(value=True, description=\\\"Robust\\\")\\n\",\n        \"plot_example_max_steps = widgets.IntSlider(\\n\",\n        \"    min=1, max=example_batch.dims[\\\"time\\\"], value=example_batch.dims[\\\"time\\\"],\\n\",\n        \"    description=\\\"Max steps\\\")\\n\",\n        \"\\n\",\n        \"widgets.VBox([\\n\",\n        \"    plot_example_variable,\\n\",\n        \"    plot_example_level,\\n\",\n        \"    plot_example_robust,\\n\",\n        \"    plot_example_max_steps,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to plot the data. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"iqzXVpn9_b15\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot example data\\n\",\n        \"\\n\",\n        \"plot_size = 7\\n\",\n        \"\\n\",\n        \"data = {\\n\",\n        \"    \\\" \\\": scale(select(example_batch, plot_example_variable.value, plot_example_level.value, plot_example_max_steps.value),\\n\",\n        \"              robust=plot_example_robust.value),\\n\",\n        \"}\\n\",\n        \"fig_title = plot_example_variable.value\\n\",\n        \"if \\\"level\\\" in example_batch[plot_example_variable.value].coords:\\n\",\n        \"  fig_title += f\\\" at {plot_example_level.value} hPa\\\"\\n\",\n        \"\\n\",\n        \"plot_data(data, fig_title, plot_size, plot_example_robust.value)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"njD4jsPTPKvJ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Extract training and eval data\\n\",\n        \"\\n\",\n        \"train_inputs, train_targets, train_forcings = data_utils.extract_inputs_targets_forcings(\\n\",\n        \"    example_batch, target_lead_times=slice(\\\"12h\\\", \\\"12h\\\"), # Only 1AR training.\\n\",\n        \"    **dataclasses.asdict(task_config))\\n\",\n        \"\\n\",\n        \"eval_inputs, eval_targets, eval_forcings = data_utils.extract_inputs_targets_forcings(\\n\",\n        \"    example_batch, target_lead_times=slice(\\\"12h\\\", f\\\"{(example_batch.dims['time']-2)*12}h\\\"), # All but 2 input frames.\\n\",\n        \"    **dataclasses.asdict(task_config))\\n\",\n        \"\\n\",\n        \"print(\\\"All Examples:  \\\", example_batch.dims.mapping)\\n\",\n        \"print(\\\"Train Inputs:  \\\", train_inputs.dims.mapping)\\n\",\n        \"print(\\\"Train Targets: \\\", train_targets.dims.mapping)\\n\",\n        \"print(\\\"Train Forcings:\\\", train_forcings.dims.mapping)\\n\",\n        \"print(\\\"Eval Inputs:   \\\", eval_inputs.dims.mapping)\\n\",\n        \"print(\\\"Eval Targets:  \\\", eval_targets.dims.mapping)\\n\",\n        \"print(\\\"Eval Forcings: \\\", eval_forcings.dims.mapping)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"-DJzie5me2-H\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load normalization data\\n\",\n        \"\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/diffs_stddev_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  diffs_stddev_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/mean_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  mean_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/stddev_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  stddev_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/min_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  min_by_level = xarray.load_dataset(f).compute()\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ke2zQyuT_sMA\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Build jitted functions, and possibly initialize random weights\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"def construct_wrapped_gencast():\\n\",\n        \"  \\\"\\\"\\\"Constructs and wraps the GenCast Predictor.\\\"\\\"\\\"\\n\",\n        \"  predictor = gencast.GenCast(\\n\",\n        \"      sampler_config=sampler_config,\\n\",\n        \"      task_config=task_config,\\n\",\n        \"      denoiser_architecture_config=denoiser_architecture_config,\\n\",\n        \"      noise_config=noise_config,\\n\",\n        \"      noise_encoder_config=noise_encoder_config,\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  predictor = normalization.InputsAndResiduals(\\n\",\n        \"      predictor,\\n\",\n        \"      diffs_stddev_by_level=diffs_stddev_by_level,\\n\",\n        \"      mean_by_level=mean_by_level,\\n\",\n        \"      stddev_by_level=stddev_by_level,\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  predictor = nan_cleaning.NaNCleaner(\\n\",\n        \"      predictor=predictor,\\n\",\n        \"      reintroduce_nans=True,\\n\",\n        \"      fill_value=min_by_level,\\n\",\n        \"      var_to_clean='sea_surface_temperature',\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"  return predictor\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"@hk.transform_with_state\\n\",\n        \"def run_forward(inputs, targets_template, forcings):\\n\",\n        \"  predictor = construct_wrapped_gencast()\\n\",\n        \"  return predictor(inputs, targets_template=targets_template, forcings=forcings)\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"@hk.transform_with_state\\n\",\n        \"def loss_fn(inputs, targets, forcings):\\n\",\n        \"  predictor = construct_wrapped_gencast()\\n\",\n        \"  loss, diagnostics = predictor.loss(inputs, targets, forcings)\\n\",\n        \"  return xarray_tree.map_structure(\\n\",\n        \"      lambda x: xarray_jax.unwrap_data(x.mean(), require_jax=True),\\n\",\n        \"      (loss, diagnostics),\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"def grads_fn(params, state, inputs, targets, forcings):\\n\",\n        \"  def _aux(params, state, i, t, f):\\n\",\n        \"    (loss, diagnostics), next_state = loss_fn.apply(\\n\",\n        \"        params, state, jax.random.PRNGKey(0), i, t, f\\n\",\n        \"    )\\n\",\n        \"    return loss, (diagnostics, next_state)\\n\",\n        \"\\n\",\n        \"  (loss, (diagnostics, next_state)), grads = jax.value_and_grad(\\n\",\n        \"      _aux, has_aux=True\\n\",\n        \"  )(params, state, inputs, targets, forcings)\\n\",\n        \"  return loss, diagnostics, next_state, grads\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"if params is None:\\n\",\n        \"  init_jitted = jax.jit(loss_fn.init)\\n\",\n        \"  params, state = init_jitted(\\n\",\n        \"      rng=jax.random.PRNGKey(0),\\n\",\n        \"      inputs=train_inputs,\\n\",\n        \"      targets=train_targets,\\n\",\n        \"      forcings=train_forcings,\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"loss_fn_jitted = jax.jit(\\n\",\n        \"    lambda rng, i, t, f: loss_fn.apply(params, state, rng, i, t, f)[0]\\n\",\n        \")\\n\",\n        \"grads_fn_jitted = jax.jit(grads_fn)\\n\",\n        \"run_forward_jitted = jax.jit(\\n\",\n        \"    lambda rng, i, t, f: run_forward.apply(params, state, rng, i, t, f)[0]\\n\",\n        \")\\n\",\n        \"# We also produce a pmapped version for running in parallel.\\n\",\n        \"run_forward_pmap = xarray_jax.pmap(run_forward_jitted, dim=\\\"sample\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"VBNutliiCyqA\"\n      },\n      \"source\": [\n        \"# Run the model\\n\",\n        \"\\n\",\n        \"The `chunked_prediction_generator_multiple_runs` iterates over forecast steps, where the 1 step forecast is jitted and samples are pmapped across the chips.\\n\",\n        \"This allows us to make efficient use of all devices and parallelise generating an ensemble across them. We then combine the chunks at the end to form our final forecast.\\n\",\n        \"\\n\",\n        \"Note that the `Autoregressive rollout` cell will take longer than the standard inference time to run when executed for the first time, as this will include code compilation time. This cost does not increase with the number of devices, it is a fixed-cost one time operation whose result can be reused across any number of devices.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"ewPPSpxr33hN\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# The number of ensemble members should be a multiple of the number of devices.\\n\",\n        \"print(f\\\"Number of local devices {len(jax.local_devices())}\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"7obeY9i9oTtD\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Autoregressive rollout (loop in python)\\n\",\n        \"\\n\",\n        \"print(\\\"Inputs:  \\\", eval_inputs.dims.mapping)\\n\",\n        \"print(\\\"Targets: \\\", eval_targets.dims.mapping)\\n\",\n        \"print(\\\"Forcings:\\\", eval_forcings.dims.mapping)\\n\",\n        \"\\n\",\n        \"num_ensemble_members = 8 # @param int\\n\",\n        \"rng = jax.random.PRNGKey(0)\\n\",\n        \"# We fold-in the ensemble member, this way the first N members should always\\n\",\n        \"# match across different runs which use take the same inputs, regardless of\\n\",\n        \"# total ensemble size.\\n\",\n        \"rngs = np.stack(\\n\",\n        \"    [jax.random.fold_in(rng, i) for i in range(num_ensemble_members)], axis=0)\\n\",\n        \"\\n\",\n        \"chunks = []\\n\",\n        \"for chunk in rollout.chunked_prediction_generator_multiple_runs(\\n\",\n        \"    # Use pmapped version to parallelise across devices.\\n\",\n        \"    predictor_fn=run_forward_pmap,\\n\",\n        \"    rngs=rngs,\\n\",\n        \"    inputs=eval_inputs,\\n\",\n        \"    targets_template=eval_targets * np.nan,\\n\",\n        \"    forcings=eval_forcings,\\n\",\n        \"    num_steps_per_chunk = 1,\\n\",\n        \"    num_samples = num_ensemble_members,\\n\",\n        \"    pmap_devices=jax.local_devices()\\n\",\n        \"    ):\\n\",\n        \"    chunks.append(chunk)\\n\",\n        \"predictions = xarray.combine_by_coords(chunks)\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"nIoUfBxBAwqm\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose predictions to plot\\n\",\n        \"\\n\",\n        \"plot_pred_variable = widgets.Dropdown(\\n\",\n        \"    options=predictions.data_vars.keys(),\\n\",\n        \"    value=\\\"2m_temperature\\\",\\n\",\n        \"    description=\\\"Variable\\\")\\n\",\n        \"plot_pred_level = widgets.Dropdown(\\n\",\n        \"    options=predictions.coords[\\\"level\\\"].values,\\n\",\n        \"    value=500,\\n\",\n        \"    description=\\\"Level\\\")\\n\",\n        \"plot_pred_robust = widgets.Checkbox(value=True, description=\\\"Robust\\\")\\n\",\n        \"plot_pred_max_steps = widgets.IntSlider(\\n\",\n        \"    min=1,\\n\",\n        \"    max=predictions.dims[\\\"time\\\"],\\n\",\n        \"    value=predictions.dims[\\\"time\\\"],\\n\",\n        \"    description=\\\"Max steps\\\")\\n\",\n        \"plot_pred_samples = widgets.IntSlider(\\n\",\n        \"    min=1,\\n\",\n        \"    max=num_ensemble_members,\\n\",\n        \"    value=num_ensemble_members,\\n\",\n        \"    description=\\\"Samples\\\")\\n\",\n        \"\\n\",\n        \"widgets.VBox([\\n\",\n        \"    plot_pred_variable,\\n\",\n        \"    plot_pred_level,\\n\",\n        \"    plot_pred_robust,\\n\",\n        \"    plot_pred_max_steps,\\n\",\n        \"    plot_pred_samples,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to plot the predictions. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"wn7dccXO5R7C\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot prediction samples and diffs\\n\",\n        \"\\n\",\n        \"plot_size = 5\\n\",\n        \"plot_max_steps = min(predictions.dims[\\\"time\\\"], plot_pred_max_steps.value)\\n\",\n        \"\\n\",\n        \"fig_title = plot_pred_variable.value\\n\",\n        \"if \\\"level\\\" in predictions[plot_pred_variable.value].coords:\\n\",\n        \"  fig_title += f\\\" at {plot_pred_level.value} hPa\\\"\\n\",\n        \"\\n\",\n        \"for sample_idx in range(plot_pred_samples.value):\\n\",\n        \"  data = {\\n\",\n        \"      \\\"Targets\\\": scale(select(eval_targets, plot_pred_variable.value, plot_pred_level.value, plot_max_steps), robust=plot_pred_robust.value),\\n\",\n        \"      \\\"Predictions\\\": scale(select(predictions.isel(sample=sample_idx), plot_pred_variable.value, plot_pred_level.value, plot_max_steps), robust=plot_pred_robust.value),\\n\",\n        \"      \\\"Diff\\\": scale((select(eval_targets, plot_pred_variable.value, plot_pred_level.value, plot_max_steps) -\\n\",\n        \"                          select(predictions.isel(sample=sample_idx), plot_pred_variable.value, plot_pred_level.value, plot_max_steps)),\\n\",\n        \"                        robust=plot_pred_robust.value, center=0),\\n\",\n        \"  }\\n\",\n        \"  display.display(plot_data(data, fig_title + f\\\", Sample {sample_idx}\\\", plot_size, plot_pred_robust.value))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"X3m9lW5fN4oL\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot ensemble mean and CRPS\\n\",\n        \"\\n\",\n        \"def crps(targets, predictions, bias_corrected = True):\\n\",\n        \"  if predictions.sizes.get(\\\"sample\\\", 1) \\u003c 2:\\n\",\n        \"    raise ValueError(\\n\",\n        \"        \\\"predictions must have dim 'sample' with size at least 2.\\\")\\n\",\n        \"  sum_dims = [\\\"sample\\\", \\\"sample2\\\"]\\n\",\n        \"  preds2 = predictions.rename({\\\"sample\\\": \\\"sample2\\\"})\\n\",\n        \"  num_samps = predictions.sizes[\\\"sample\\\"]\\n\",\n        \"  num_samps2 = (num_samps - 1) if bias_corrected else num_samps\\n\",\n        \"  mean_abs_diff = np.abs(\\n\",\n        \"      predictions - preds2).sum(\\n\",\n        \"          dim=sum_dims, skipna=False) / (num_samps * num_samps2)\\n\",\n        \"  mean_abs_err = np.abs(targets - predictions).sum(dim=\\\"sample\\\", skipna=False) / num_samps\\n\",\n        \"  return mean_abs_err - 0.5 * mean_abs_diff\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"plot_size = 5\\n\",\n        \"plot_max_steps = min(predictions.dims[\\\"time\\\"], plot_pred_max_steps.value)\\n\",\n        \"\\n\",\n        \"fig_title = plot_pred_variable.value\\n\",\n        \"if \\\"level\\\" in predictions[plot_pred_variable.value].coords:\\n\",\n        \"  fig_title += f\\\" at {plot_pred_level.value} hPa\\\"\\n\",\n        \"\\n\",\n        \"data = {\\n\",\n        \"    \\\"Targets\\\": scale(select(eval_targets, plot_pred_variable.value, plot_pred_level.value, plot_max_steps), robust=plot_pred_robust.value),\\n\",\n        \"    \\\"Ensemble Mean\\\": scale(select(predictions.mean(dim=[\\\"sample\\\"]), plot_pred_variable.value, plot_pred_level.value, plot_max_steps), robust=plot_pred_robust.value),\\n\",\n        \"    \\\"Ensemble CRPS\\\": scale(crps((select(eval_targets, plot_pred_variable.value, plot_pred_level.value, plot_max_steps)),\\n\",\n        \"                        select(predictions, plot_pred_variable.value, plot_pred_level.value, plot_max_steps)),\\n\",\n        \"                      robust=plot_pred_robust.value, center=0),\\n\",\n        \"}\\n\",\n        \"display.display(plot_data(data, fig_title, plot_size, plot_pred_robust.value))\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"O6ZhRFBPD0kq\"\n      },\n      \"source\": [\n        \"# Train the model\\n\",\n        \"\\n\",\n        \"The following operations requires larger amounts of memory than running inference.\\n\",\n        \"\\n\",\n        \"The first time executing the cell takes more time, as it includes the time to jit the function.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Nv-u3dAP7IRZ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Loss computation\\n\",\n        \"loss, diagnostics = loss_fn_jitted(\\n\",\n        \"    jax.random.PRNGKey(0),\\n\",\n        \"    train_inputs,\\n\",\n        \"    train_targets,\\n\",\n        \"    train_forcings)\\n\",\n        \"print(\\\"Loss:\\\", float(loss))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"mBNFq1IGZNLz\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Gradient computation\\n\",\n        \"loss, diagnostics, next_state, grads = grads_fn_jitted(\\n\",\n        \"    params=params,\\n\",\n        \"    state=state,\\n\",\n        \"    inputs=train_inputs,\\n\",\n        \"    targets=train_targets,\\n\",\n        \"    forcings=train_forcings)\\n\",\n        \"mean_grad = np.mean(jax.tree_util.tree_flatten(jax.tree_util.tree_map(lambda x: np.abs(x).mean(), grads))[0])\\n\",\n        \"print(f\\\"Loss: {loss:.4f}, Mean |grad|: {mean_grad:.6f}\\\")\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"colab\": {\n      \"name\": \"GenCast Mini Demo\",\n      \"private_outputs\": true,\n      \"provenance\": []\n    },\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "graphcast",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphcast_demo.ipynb",
          "type": "blob",
          "size": 35.2978515625,
          "content": "{\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"-jAYlxeKxvAJ\"\n      },\n      \"source\": [\n        \"# GraphCast\\n\",\n        \"\\n\",\n        \"This colab lets you run several versions of GraphCast.\\n\",\n        \"\\n\",\n        \"The model weights, normalization statistics, and example inputs are available on [Google Cloud Bucket](https://console.cloud.google.com/storage/browser/dm_graphcast).\\n\",\n        \"\\n\",\n        \"A Colab runtime with TPU/GPU acceleration will substantially speed up generating predictions and computing the loss/gradients. If you're using a CPU-only runtime, you can switch using the menu \\\"Runtime \\u003e Change runtime type\\\".\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"IIWlNRupdI2i\"\n      },\n      \"source\": [\n        \"\\u003e \\u003cp\\u003e\\u003csmall\\u003e\\u003csmall\\u003eCopyright 2023 DeepMind Technologies Limited.\\u003c/small\\u003e\\u003c/p\\u003e\\n\",\n        \"\\u003e \\u003cp\\u003e\\u003csmall\\u003e\\u003csmall\\u003eLicensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at \\u003ca href=\\\"http://www.apache.org/licenses/LICENSE-2.0\\\"\\u003ehttp://www.apache.org/licenses/LICENSE-2.0\\u003c/a\\u003e.\\u003c/small\\u003e\\u003c/small\\u003e\\u003c/p\\u003e\\n\",\n        \"\\u003e \\u003cp\\u003e\\u003csmall\\u003e\\u003csmall\\u003eUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\\u003c/small\\u003e\\u003c/small\\u003e\\u003c/p\\u003e\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"yMbbXFl4msJw\"\n      },\n      \"source\": [\n        \"# Installation and Initialization\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"-W4K9skv9vh-\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Pip install graphcast and dependencies\\n\",\n        \"\\n\",\n        \"%pip install --upgrade https://github.com/deepmind/graphcast/archive/master.zip\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"MA5087Vb29z2\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Workaround for cartopy crashes\\n\",\n        \"\\n\",\n        \"# Workaround for cartopy crashes due to the shapely installed by default in\\n\",\n        \"# google colab kernel (https://github.com/anitagraser/movingpandas/issues/81):\\n\",\n        \"!pip uninstall -y shapely\\n\",\n        \"!pip install shapely --no-binary shapely\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"Z_j8ej4Pyg1L\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Imports\\n\",\n        \"\\n\",\n        \"import dataclasses\\n\",\n        \"import datetime\\n\",\n        \"import functools\\n\",\n        \"import math\\n\",\n        \"import re\\n\",\n        \"from typing import Optional\\n\",\n        \"\\n\",\n        \"import cartopy.crs as ccrs\\n\",\n        \"from google.cloud import storage\\n\",\n        \"from graphcast import autoregressive\\n\",\n        \"from graphcast import casting\\n\",\n        \"from graphcast import checkpoint\\n\",\n        \"from graphcast import data_utils\\n\",\n        \"from graphcast import graphcast\\n\",\n        \"from graphcast import normalization\\n\",\n        \"from graphcast import rollout\\n\",\n        \"from graphcast import xarray_jax\\n\",\n        \"from graphcast import xarray_tree\\n\",\n        \"from IPython.display import HTML\\n\",\n        \"import ipywidgets as widgets\\n\",\n        \"import haiku as hk\\n\",\n        \"import jax\\n\",\n        \"import matplotlib\\n\",\n        \"import matplotlib.pyplot as plt\\n\",\n        \"from matplotlib import animation\\n\",\n        \"import numpy as np\\n\",\n        \"import xarray\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"def parse_file_parts(file_name):\\n\",\n        \"  return dict(part.split(\\\"-\\\", 1) for part in file_name.split(\\\"_\\\"))\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"4wagX1TL_f15\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Authenticate with Google Cloud Storage\\n\",\n        \"\\n\",\n        \"gcs_client = storage.Client.create_anonymous_client()\\n\",\n        \"gcs_bucket = gcs_client.get_bucket(\\\"dm_graphcast\\\")\\n\",\n        \"dir_prefix = \\\"graphcast/\\\"\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"5JUymx84dI2m\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plotting functions\\n\",\n        \"\\n\",\n        \"def select(\\n\",\n        \"    data: xarray.Dataset,\\n\",\n        \"    variable: str,\\n\",\n        \"    level: Optional[int] = None,\\n\",\n        \"    max_steps: Optional[int] = None\\n\",\n        \"    ) -\\u003e xarray.Dataset:\\n\",\n        \"  data = data[variable]\\n\",\n        \"  if \\\"batch\\\" in data.dims:\\n\",\n        \"    data = data.isel(batch=0)\\n\",\n        \"  if max_steps is not None and \\\"time\\\" in data.sizes and max_steps \\u003c data.sizes[\\\"time\\\"]:\\n\",\n        \"    data = data.isel(time=range(0, max_steps))\\n\",\n        \"  if level is not None and \\\"level\\\" in data.coords:\\n\",\n        \"    data = data.sel(level=level)\\n\",\n        \"  return data\\n\",\n        \"\\n\",\n        \"def scale(\\n\",\n        \"    data: xarray.Dataset,\\n\",\n        \"    center: Optional[float] = None,\\n\",\n        \"    robust: bool = False,\\n\",\n        \"    ) -\\u003e tuple[xarray.Dataset, matplotlib.colors.Normalize, str]:\\n\",\n        \"  vmin = np.nanpercentile(data, (2 if robust else 0))\\n\",\n        \"  vmax = np.nanpercentile(data, (98 if robust else 100))\\n\",\n        \"  if center is not None:\\n\",\n        \"    diff = max(vmax - center, center - vmin)\\n\",\n        \"    vmin = center - diff\\n\",\n        \"    vmax = center + diff\\n\",\n        \"  return (data, matplotlib.colors.Normalize(vmin, vmax),\\n\",\n        \"          (\\\"RdBu_r\\\" if center is not None else \\\"viridis\\\"))\\n\",\n        \"\\n\",\n        \"def plot_data(\\n\",\n        \"    data: dict[str, xarray.Dataset],\\n\",\n        \"    fig_title: str,\\n\",\n        \"    plot_size: float = 5,\\n\",\n        \"    robust: bool = False,\\n\",\n        \"    cols: int = 4\\n\",\n        \"    ) -\\u003e tuple[xarray.Dataset, matplotlib.colors.Normalize, str]:\\n\",\n        \"\\n\",\n        \"  first_data = next(iter(data.values()))[0]\\n\",\n        \"  max_steps = first_data.sizes.get(\\\"time\\\", 1)\\n\",\n        \"  assert all(max_steps == d.sizes.get(\\\"time\\\", 1) for d, _, _ in data.values())\\n\",\n        \"\\n\",\n        \"  cols = min(cols, len(data))\\n\",\n        \"  rows = math.ceil(len(data) / cols)\\n\",\n        \"  figure = plt.figure(figsize=(plot_size * 2 * cols,\\n\",\n        \"                               plot_size * rows))\\n\",\n        \"  figure.suptitle(fig_title, fontsize=16)\\n\",\n        \"  figure.subplots_adjust(wspace=0, hspace=0)\\n\",\n        \"  figure.tight_layout()\\n\",\n        \"\\n\",\n        \"  images = []\\n\",\n        \"  for i, (title, (plot_data, norm, cmap)) in enumerate(data.items()):\\n\",\n        \"    ax = figure.add_subplot(rows, cols, i+1)\\n\",\n        \"    ax.set_xticks([])\\n\",\n        \"    ax.set_yticks([])\\n\",\n        \"    ax.set_title(title)\\n\",\n        \"    im = ax.imshow(\\n\",\n        \"        plot_data.isel(time=0, missing_dims=\\\"ignore\\\"), norm=norm,\\n\",\n        \"        origin=\\\"lower\\\", cmap=cmap)\\n\",\n        \"    plt.colorbar(\\n\",\n        \"        mappable=im,\\n\",\n        \"        ax=ax,\\n\",\n        \"        orientation=\\\"vertical\\\",\\n\",\n        \"        pad=0.02,\\n\",\n        \"        aspect=16,\\n\",\n        \"        shrink=0.75,\\n\",\n        \"        cmap=cmap,\\n\",\n        \"        extend=(\\\"both\\\" if robust else \\\"neither\\\"))\\n\",\n        \"    images.append(im)\\n\",\n        \"\\n\",\n        \"  def update(frame):\\n\",\n        \"    if \\\"time\\\" in first_data.dims:\\n\",\n        \"      td = datetime.timedelta(microseconds=first_data[\\\"time\\\"][frame].item() / 1000)\\n\",\n        \"      figure.suptitle(f\\\"{fig_title}, {td}\\\", fontsize=16)\\n\",\n        \"    else:\\n\",\n        \"      figure.suptitle(fig_title, fontsize=16)\\n\",\n        \"    for im, (plot_data, norm, cmap) in zip(images, data.values()):\\n\",\n        \"      im.set_data(plot_data.isel(time=frame, missing_dims=\\\"ignore\\\"))\\n\",\n        \"\\n\",\n        \"  ani = animation.FuncAnimation(\\n\",\n        \"      fig=figure, func=update, frames=max_steps, interval=250)\\n\",\n        \"  plt.close(figure.number)\\n\",\n        \"  return HTML(ani.to_jshtml())\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"WEtSV8HEkHtf\"\n      },\n      \"source\": [\n        \"# Load the Data and initialize the model\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"G50ORsY_dI2n\"\n      },\n      \"source\": [\n        \"## Load the model params\\n\",\n        \"\\n\",\n        \"Choose one of the two ways of getting model params:\\n\",\n        \"- **random**: You'll get random predictions, but you can change the model architecture, which may run faster or fit on your device.\\n\",\n        \"- **checkpoint**: You'll get sensible predictions, but are limited to the model architecture that it was trained with, which may not fit on your device. In particular generating gradients uses a lot of memory, so you'll need at least 25GB of ram (TPUv4 or A100).\\n\",\n        \"\\n\",\n        \"Checkpoints vary across a few axes:\\n\",\n        \"- The mesh size specifies the internal graph representation of the earth. Smaller meshes will run faster but will have worse outputs. The mesh size does not affect the number of parameters of the model.\\n\",\n        \"- The resolution and number of pressure levels must match the data. Lower resolution and fewer levels will run a bit faster. Data resolution only affects the encoder/decoder.\\n\",\n        \"- All our models predict precipitation. However, ERA5 includes precipitation, while HRES does not. Our models marked as \\\"ERA5\\\" take precipitation as input and expect ERA5 data as input, while model marked \\\"ERA5-HRES\\\" do not take precipitation as input and are specifically trained to take HRES-fc0 as input (see the data section below).\\n\",\n        \"\\n\",\n        \"We provide three pre-trained models.\\n\",\n        \"1. `GraphCast`, the high-resolution model used in the GraphCast paper (0.25 degree resolution, 37 pressure levels), trained on ERA5 data from 1979 to 2017,\\n\",\n        \"\\n\",\n        \"2. `GraphCast_small`, a smaller, low-resolution version of GraphCast (1 degree resolution, 13 pressure levels, and a smaller mesh), trained on ERA5 data from 1979 to 2015, useful to run a model with lower memory and compute constraints,\\n\",\n        \"\\n\",\n        \"3. `GraphCast_operational`, a high-resolution model (0.25 degree resolution, 13 pressure levels) pre-trained on ERA5 data from 1979 to 2017 and fine-tuned on HRES data from 2016 to 2021. This model can be initialized from HRES data (does not require precipitation inputs).\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"KGaJ6V9MdI2n\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose the model\\n\",\n        \"\\n\",\n        \"params_file_options = [\\n\",\n        \"    name for blob in gcs_bucket.list_blobs(prefix=dir_prefix+\\\"params/\\\")\\n\",\n        \"    if (name := blob.name.removeprefix(dir_prefix+\\\"params/\\\"))]  # Drop empty string.\\n\",\n        \"\\n\",\n        \"random_mesh_size = widgets.IntSlider(\\n\",\n        \"    value=4, min=4, max=6, description=\\\"Mesh size:\\\")\\n\",\n        \"random_gnn_msg_steps = widgets.IntSlider(\\n\",\n        \"    value=4, min=1, max=32, description=\\\"GNN message steps:\\\")\\n\",\n        \"random_latent_size = widgets.Dropdown(\\n\",\n        \"    options=[int(2**i) for i in range(4, 10)], value=32,description=\\\"Latent size:\\\")\\n\",\n        \"random_levels = widgets.Dropdown(\\n\",\n        \"    options=[13, 37], value=13, description=\\\"Pressure levels:\\\")\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"params_file = widgets.Dropdown(\\n\",\n        \"    options=params_file_options,\\n\",\n        \"    description=\\\"Params file:\\\",\\n\",\n        \"    layout={\\\"width\\\": \\\"max-content\\\"})\\n\",\n        \"\\n\",\n        \"source_tab = widgets.Tab([\\n\",\n        \"    widgets.VBox([\\n\",\n        \"        random_mesh_size,\\n\",\n        \"        random_gnn_msg_steps,\\n\",\n        \"        random_latent_size,\\n\",\n        \"        random_levels,\\n\",\n        \"    ]),\\n\",\n        \"    params_file,\\n\",\n        \"])\\n\",\n        \"source_tab.set_title(0, \\\"Random\\\")\\n\",\n        \"source_tab.set_title(1, \\\"Checkpoint\\\")\\n\",\n        \"widgets.VBox([\\n\",\n        \"    source_tab,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to load the model. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"lYQgrPgPdI2n\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load the model\\n\",\n        \"\\n\",\n        \"source = source_tab.get_title(source_tab.selected_index)\\n\",\n        \"\\n\",\n        \"if source == \\\"Random\\\":\\n\",\n        \"  params = None  # Filled in below\\n\",\n        \"  state = {}\\n\",\n        \"  model_config = graphcast.ModelConfig(\\n\",\n        \"      resolution=0,\\n\",\n        \"      mesh_size=random_mesh_size.value,\\n\",\n        \"      latent_size=random_latent_size.value,\\n\",\n        \"      gnn_msg_steps=random_gnn_msg_steps.value,\\n\",\n        \"      hidden_layers=1,\\n\",\n        \"      radius_query_fraction_edge_length=0.6)\\n\",\n        \"  task_config = graphcast.TaskConfig(\\n\",\n        \"      input_variables=graphcast.TASK.input_variables,\\n\",\n        \"      target_variables=graphcast.TASK.target_variables,\\n\",\n        \"      forcing_variables=graphcast.TASK.forcing_variables,\\n\",\n        \"      pressure_levels=graphcast.PRESSURE_LEVELS[random_levels.value],\\n\",\n        \"      input_duration=graphcast.TASK.input_duration,\\n\",\n        \"  )\\n\",\n        \"else:\\n\",\n        \"  assert source == \\\"Checkpoint\\\"\\n\",\n        \"  with gcs_bucket.blob(f\\\"{dir_prefix}params/{params_file.value}\\\").open(\\\"rb\\\") as f:\\n\",\n        \"    ckpt = checkpoint.load(f, graphcast.CheckPoint)\\n\",\n        \"  params = ckpt.params\\n\",\n        \"  state = {}\\n\",\n        \"\\n\",\n        \"  model_config = ckpt.model_config\\n\",\n        \"  task_config = ckpt.task_config\\n\",\n        \"  print(\\\"Model description:\\\\n\\\", ckpt.description, \\\"\\\\n\\\")\\n\",\n        \"  print(\\\"Model license:\\\\n\\\", ckpt.license, \\\"\\\\n\\\")\\n\",\n        \"\\n\",\n        \"model_config\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"rQWk0RRuCjDN\"\n      },\n      \"source\": [\n        \"## Load the example data\\n\",\n        \"\\n\",\n        \"Several example datasets are available, varying across a few axes:\\n\",\n        \"- **Source**: fake, era5, hres\\n\",\n        \"- **Resolution**: 0.25deg, 1deg, 6deg\\n\",\n        \"- **Levels**: 13, 37\\n\",\n        \"- **Steps**: How many timesteps are included\\n\",\n        \"\\n\",\n        \"Not all combinations are available.\\n\",\n        \"- Higher resolution is only available for fewer steps due to the memory requirements of loading them.\\n\",\n        \"- HRES is only available in 0.25 deg, with 13 pressure levels.\\n\",\n        \"\\n\",\n        \"The data resolution must match the model that is loaded.\\n\",\n        \"\\n\",\n        \"Some transformations were done from the base datasets:\\n\",\n        \"- We accumulated precipitation over 6 hours instead of the default 1 hour.\\n\",\n        \"- For HRES data, each time step corresponds to the HRES forecast at leadtime 0, essentially providing an \\\"initialisation\\\" from HRES. See HRES-fc0 in the GraphCast paper for further description. Note that a 6h accumulation of precipitation is not available from HRES, so our model taking HRES inputs does not depend on precipitation. However, because our models predict precipitation, we include the ERA5 precipitation in the example data so it can serve as an illustrative example of ground truth.\\n\",\n        \"- We include ERA5 `toa_incident_solar_radiation` in the data. Our model uses the radiation at -6h, 0h and +6h as a forcing term for each 1-step prediction. If the radiation is missing from the data (e.g. in an operational setting), it will be computed using a custom implementation that produces values similar to those in ERA5.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"-DJzie5me2-H\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Get and filter the list of available example datasets\\n\",\n        \"\\n\",\n        \"dataset_file_options = [\\n\",\n        \"    name for blob in gcs_bucket.list_blobs(prefix=dir_prefix+\\\"dataset/\\\")\\n\",\n        \"    if (name := blob.name.removeprefix(dir_prefix+\\\"dataset/\\\"))]  # Drop empty string.\\n\",\n        \"\\n\",\n        \"def data_valid_for_model(\\n\",\n        \"    file_name: str, model_config: graphcast.ModelConfig, task_config: graphcast.TaskConfig):\\n\",\n        \"  file_parts = parse_file_parts(file_name.removesuffix(\\\".nc\\\"))\\n\",\n        \"  return (\\n\",\n        \"      model_config.resolution in (0, float(file_parts[\\\"res\\\"])) and\\n\",\n        \"      len(task_config.pressure_levels) == int(file_parts[\\\"levels\\\"]) and\\n\",\n        \"      (\\n\",\n        \"          (\\\"total_precipitation_6hr\\\" in task_config.input_variables and\\n\",\n        \"           file_parts[\\\"source\\\"] in (\\\"era5\\\", \\\"fake\\\")) or\\n\",\n        \"          (\\\"total_precipitation_6hr\\\" not in task_config.input_variables and\\n\",\n        \"           file_parts[\\\"source\\\"] in (\\\"hres\\\", \\\"fake\\\"))\\n\",\n        \"      )\\n\",\n        \"  )\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"dataset_file = widgets.Dropdown(\\n\",\n        \"    options=[\\n\",\n        \"        (\\\", \\\".join([f\\\"{k}: {v}\\\" for k, v in parse_file_parts(option.removesuffix(\\\".nc\\\")).items()]), option)\\n\",\n        \"        for option in dataset_file_options\\n\",\n        \"        if data_valid_for_model(option, model_config, task_config)\\n\",\n        \"    ],\\n\",\n        \"    description=\\\"Dataset file:\\\",\\n\",\n        \"    layout={\\\"width\\\": \\\"max-content\\\"})\\n\",\n        \"widgets.VBox([\\n\",\n        \"    dataset_file,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to load the dataset. Rerunning this cell clears your selection and refilters the datasets that match your model.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Yz-ekISoJxeZ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load weather data\\n\",\n        \"\\n\",\n        \"if not data_valid_for_model(dataset_file.value, model_config, task_config):\\n\",\n        \"  raise ValueError(\\n\",\n        \"      \\\"Invalid dataset file, rerun the cell above and choose a valid dataset file.\\\")\\n\",\n        \"\\n\",\n        \"with gcs_bucket.blob(f\\\"{dir_prefix}dataset/{dataset_file.value}\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  example_batch = xarray.load_dataset(f).compute()\\n\",\n        \"\\n\",\n        \"assert example_batch.dims[\\\"time\\\"] \\u003e= 3  # 2 for input, \\u003e=1 for targets\\n\",\n        \"\\n\",\n        \"print(\\\", \\\".join([f\\\"{k}: {v}\\\" for k, v in parse_file_parts(dataset_file.value.removesuffix(\\\".nc\\\")).items()]))\\n\",\n        \"\\n\",\n        \"example_batch\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"lXjFvdE6qStr\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose data to plot\\n\",\n        \"\\n\",\n        \"plot_example_variable = widgets.Dropdown(\\n\",\n        \"    options=example_batch.data_vars.keys(),\\n\",\n        \"    value=\\\"2m_temperature\\\",\\n\",\n        \"    description=\\\"Variable\\\")\\n\",\n        \"plot_example_level = widgets.Dropdown(\\n\",\n        \"    options=example_batch.coords[\\\"level\\\"].values,\\n\",\n        \"    value=500,\\n\",\n        \"    description=\\\"Level\\\")\\n\",\n        \"plot_example_robust = widgets.Checkbox(value=True, description=\\\"Robust\\\")\\n\",\n        \"plot_example_max_steps = widgets.IntSlider(\\n\",\n        \"    min=1, max=example_batch.dims[\\\"time\\\"], value=example_batch.dims[\\\"time\\\"],\\n\",\n        \"    description=\\\"Max steps\\\")\\n\",\n        \"\\n\",\n        \"widgets.VBox([\\n\",\n        \"    plot_example_variable,\\n\",\n        \"    plot_example_level,\\n\",\n        \"    plot_example_robust,\\n\",\n        \"    plot_example_max_steps,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to plot the data. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"kIK-EgMdkHtk\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot example data\\n\",\n        \"\\n\",\n        \"plot_size = 7\\n\",\n        \"\\n\",\n        \"data = {\\n\",\n        \"    \\\" \\\": scale(select(example_batch, plot_example_variable.value, plot_example_level.value, plot_example_max_steps.value),\\n\",\n        \"              robust=plot_example_robust.value),\\n\",\n        \"}\\n\",\n        \"fig_title = plot_example_variable.value\\n\",\n        \"if \\\"level\\\" in example_batch[plot_example_variable.value].coords:\\n\",\n        \"  fig_title += f\\\" at {plot_example_level.value} hPa\\\"\\n\",\n        \"\\n\",\n        \"plot_data(data, fig_title, plot_size, plot_example_robust.value)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"tPVy1GHokHtk\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose training and eval data to extract\\n\",\n        \"train_steps = widgets.IntSlider(\\n\",\n        \"    value=1, min=1, max=example_batch.sizes[\\\"time\\\"]-2, description=\\\"Train steps\\\")\\n\",\n        \"eval_steps = widgets.IntSlider(\\n\",\n        \"    value=example_batch.sizes[\\\"time\\\"]-2, min=1, max=example_batch.sizes[\\\"time\\\"]-2, description=\\\"Eval steps\\\")\\n\",\n        \"\\n\",\n        \"widgets.VBox([\\n\",\n        \"    train_steps,\\n\",\n        \"    eval_steps,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to extract the data. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"Ogp4vTBvsgSt\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Extract training and eval data\\n\",\n        \"\\n\",\n        \"train_inputs, train_targets, train_forcings = data_utils.extract_inputs_targets_forcings(\\n\",\n        \"    example_batch, target_lead_times=slice(\\\"6h\\\", f\\\"{train_steps.value*6}h\\\"),\\n\",\n        \"    **dataclasses.asdict(task_config))\\n\",\n        \"\\n\",\n        \"eval_inputs, eval_targets, eval_forcings = data_utils.extract_inputs_targets_forcings(\\n\",\n        \"    example_batch, target_lead_times=slice(\\\"6h\\\", f\\\"{eval_steps.value*6}h\\\"),\\n\",\n        \"    **dataclasses.asdict(task_config))\\n\",\n        \"\\n\",\n        \"print(\\\"All Examples:  \\\", example_batch.dims.mapping)\\n\",\n        \"print(\\\"Train Inputs:  \\\", train_inputs.dims.mapping)\\n\",\n        \"print(\\\"Train Targets: \\\", train_targets.dims.mapping)\\n\",\n        \"print(\\\"Train Forcings:\\\", train_forcings.dims.mapping)\\n\",\n        \"print(\\\"Eval Inputs:   \\\", eval_inputs.dims.mapping)\\n\",\n        \"print(\\\"Eval Targets:  \\\", eval_targets.dims.mapping)\\n\",\n        \"print(\\\"Eval Forcings: \\\", eval_forcings.dims.mapping)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"Q--ZRhpTdI2o\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Load normalization data\\n\",\n        \"\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/diffs_stddev_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  diffs_stddev_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/mean_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  mean_by_level = xarray.load_dataset(f).compute()\\n\",\n        \"with gcs_bucket.blob(dir_prefix+\\\"stats/stddev_by_level.nc\\\").open(\\\"rb\\\") as f:\\n\",\n        \"  stddev_by_level = xarray.load_dataset(f).compute()\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"ke2zQyuT_sMA\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Build jitted functions, and possibly initialize random weights\\n\",\n        \"\\n\",\n        \"def construct_wrapped_graphcast(\\n\",\n        \"    model_config: graphcast.ModelConfig,\\n\",\n        \"    task_config: graphcast.TaskConfig):\\n\",\n        \"  \\\"\\\"\\\"Constructs and wraps the GraphCast Predictor.\\\"\\\"\\\"\\n\",\n        \"  # Deeper one-step predictor.\\n\",\n        \"  predictor = graphcast.GraphCast(model_config, task_config)\\n\",\n        \"\\n\",\n        \"  # Modify inputs/outputs to `graphcast.GraphCast` to handle conversion to\\n\",\n        \"  # from/to float32 to/from BFloat16.\\n\",\n        \"  predictor = casting.Bfloat16Cast(predictor)\\n\",\n        \"\\n\",\n        \"  # Modify inputs/outputs to `casting.Bfloat16Cast` so the casting to/from\\n\",\n        \"  # BFloat16 happens after applying normalization to the inputs/targets.\\n\",\n        \"  predictor = normalization.InputsAndResiduals(\\n\",\n        \"      predictor,\\n\",\n        \"      diffs_stddev_by_level=diffs_stddev_by_level,\\n\",\n        \"      mean_by_level=mean_by_level,\\n\",\n        \"      stddev_by_level=stddev_by_level)\\n\",\n        \"\\n\",\n        \"  # Wraps everything so the one-step model can produce trajectories.\\n\",\n        \"  predictor = autoregressive.Predictor(predictor, gradient_checkpointing=True)\\n\",\n        \"  return predictor\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"@hk.transform_with_state\\n\",\n        \"def run_forward(model_config, task_config, inputs, targets_template, forcings):\\n\",\n        \"  predictor = construct_wrapped_graphcast(model_config, task_config)\\n\",\n        \"  return predictor(inputs, targets_template=targets_template, forcings=forcings)\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"@hk.transform_with_state\\n\",\n        \"def loss_fn(model_config, task_config, inputs, targets, forcings):\\n\",\n        \"  predictor = construct_wrapped_graphcast(model_config, task_config)\\n\",\n        \"  loss, diagnostics = predictor.loss(inputs, targets, forcings)\\n\",\n        \"  return xarray_tree.map_structure(\\n\",\n        \"      lambda x: xarray_jax.unwrap_data(x.mean(), require_jax=True),\\n\",\n        \"      (loss, diagnostics))\\n\",\n        \"\\n\",\n        \"def grads_fn(params, state, model_config, task_config, inputs, targets, forcings):\\n\",\n        \"  def _aux(params, state, i, t, f):\\n\",\n        \"    (loss, diagnostics), next_state = loss_fn.apply(\\n\",\n        \"        params, state, jax.random.PRNGKey(0), model_config, task_config,\\n\",\n        \"        i, t, f)\\n\",\n        \"    return loss, (diagnostics, next_state)\\n\",\n        \"  (loss, (diagnostics, next_state)), grads = jax.value_and_grad(\\n\",\n        \"      _aux, has_aux=True)(params, state, inputs, targets, forcings)\\n\",\n        \"  return loss, diagnostics, next_state, grads\\n\",\n        \"\\n\",\n        \"# Jax doesn't seem to like passing configs as args through the jit. Passing it\\n\",\n        \"# in via partial (instead of capture by closure) forces jax to invalidate the\\n\",\n        \"# jit cache if you change configs.\\n\",\n        \"def with_configs(fn):\\n\",\n        \"  return functools.partial(\\n\",\n        \"      fn, model_config=model_config, task_config=task_config)\\n\",\n        \"\\n\",\n        \"# Always pass params and state, so the usage below are simpler\\n\",\n        \"def with_params(fn):\\n\",\n        \"  return functools.partial(fn, params=params, state=state)\\n\",\n        \"\\n\",\n        \"# Our models aren't stateful, so the state is always empty, so just return the\\n\",\n        \"# predictions. This is requiredy by our rollout code, and generally simpler.\\n\",\n        \"def drop_state(fn):\\n\",\n        \"  return lambda **kw: fn(**kw)[0]\\n\",\n        \"\\n\",\n        \"init_jitted = jax.jit(with_configs(run_forward.init))\\n\",\n        \"\\n\",\n        \"if params is None:\\n\",\n        \"  params, state = init_jitted(\\n\",\n        \"      rng=jax.random.PRNGKey(0),\\n\",\n        \"      inputs=train_inputs,\\n\",\n        \"      targets_template=train_targets,\\n\",\n        \"      forcings=train_forcings)\\n\",\n        \"\\n\",\n        \"loss_fn_jitted = drop_state(with_params(jax.jit(with_configs(loss_fn.apply))))\\n\",\n        \"grads_fn_jitted = with_params(jax.jit(with_configs(grads_fn)))\\n\",\n        \"run_forward_jitted = drop_state(with_params(jax.jit(with_configs(\\n\",\n        \"    run_forward.apply))))\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"VBNutliiCyqA\"\n      },\n      \"source\": [\n        \"# Run the model\\n\",\n        \"\\n\",\n        \"Note that the cell below may take a while (possibly minutes) to run the first time you execute them, because this will include the time it takes for the code to compile. The second time running will be significantly faster.\\n\",\n        \"\\n\",\n        \"This use the python loop to iterate over prediction steps, where the 1-step prediction is jitted. This has lower memory requirements than the training steps below, and should enable making prediction with the small GraphCast model on 1 deg resolution data for 4 steps.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"7obeY9i9oTtD\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Autoregressive rollout (loop in python)\\n\",\n        \"\\n\",\n        \"assert model_config.resolution in (0, 360. / eval_inputs.sizes[\\\"lon\\\"]), (\\n\",\n        \"  \\\"Model resolution doesn't match the data resolution. You likely want to \\\"\\n\",\n        \"  \\\"re-filter the dataset list, and download the correct data.\\\")\\n\",\n        \"\\n\",\n        \"print(\\\"Inputs:  \\\", eval_inputs.dims.mapping)\\n\",\n        \"print(\\\"Targets: \\\", eval_targets.dims.mapping)\\n\",\n        \"print(\\\"Forcings:\\\", eval_forcings.dims.mapping)\\n\",\n        \"\\n\",\n        \"predictions = rollout.chunked_prediction(\\n\",\n        \"    run_forward_jitted,\\n\",\n        \"    rng=jax.random.PRNGKey(0),\\n\",\n        \"    inputs=eval_inputs,\\n\",\n        \"    targets_template=eval_targets * np.nan,\\n\",\n        \"    forcings=eval_forcings)\\n\",\n        \"predictions\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"ft298eZskHtn\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Choose predictions to plot\\n\",\n        \"\\n\",\n        \"plot_pred_variable = widgets.Dropdown(\\n\",\n        \"    options=predictions.data_vars.keys(),\\n\",\n        \"    value=\\\"2m_temperature\\\",\\n\",\n        \"    description=\\\"Variable\\\")\\n\",\n        \"plot_pred_level = widgets.Dropdown(\\n\",\n        \"    options=predictions.coords[\\\"level\\\"].values,\\n\",\n        \"    value=500,\\n\",\n        \"    description=\\\"Level\\\")\\n\",\n        \"plot_pred_robust = widgets.Checkbox(value=True, description=\\\"Robust\\\")\\n\",\n        \"plot_pred_max_steps = widgets.IntSlider(\\n\",\n        \"    min=1,\\n\",\n        \"    max=predictions.dims[\\\"time\\\"],\\n\",\n        \"    value=predictions.dims[\\\"time\\\"],\\n\",\n        \"    description=\\\"Max steps\\\")\\n\",\n        \"\\n\",\n        \"widgets.VBox([\\n\",\n        \"    plot_pred_variable,\\n\",\n        \"    plot_pred_level,\\n\",\n        \"    plot_pred_robust,\\n\",\n        \"    plot_pred_max_steps,\\n\",\n        \"    widgets.Label(value=\\\"Run the next cell to plot the predictions. Rerunning this cell clears your selection.\\\")\\n\",\n        \"])\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"_tTdx6fmmj1I\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Plot predictions\\n\",\n        \"\\n\",\n        \"plot_size = 5\\n\",\n        \"plot_max_steps = min(predictions.dims[\\\"time\\\"], plot_pred_max_steps.value)\\n\",\n        \"\\n\",\n        \"data = {\\n\",\n        \"    \\\"Targets\\\": scale(select(eval_targets, plot_pred_variable.value, plot_pred_level.value, plot_max_steps), robust=plot_pred_robust.value),\\n\",\n        \"    \\\"Predictions\\\": scale(select(predictions, plot_pred_variable.value, plot_pred_level.value, plot_max_steps), robust=plot_pred_robust.value),\\n\",\n        \"    \\\"Diff\\\": scale((select(eval_targets, plot_pred_variable.value, plot_pred_level.value, plot_max_steps) -\\n\",\n        \"                        select(predictions, plot_pred_variable.value, plot_pred_level.value, plot_max_steps)),\\n\",\n        \"                       robust=plot_pred_robust.value, center=0),\\n\",\n        \"}\\n\",\n        \"fig_title = plot_pred_variable.value\\n\",\n        \"if \\\"level\\\" in predictions[plot_pred_variable.value].coords:\\n\",\n        \"  fig_title += f\\\" at {plot_pred_level.value} hPa\\\"\\n\",\n        \"\\n\",\n        \"plot_data(data, fig_title, plot_size, plot_pred_robust.value)\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"Pa78b64bLYe1\"\n      },\n      \"source\": [\n        \"# Train the model\\n\",\n        \"\\n\",\n        \"The following operations require a large amount of memory and, depending on the accelerator being used, will only fit the very small \\\"random\\\" model on low resolution data. It uses the number of training steps selected above.\\n\",\n        \"\\n\",\n        \"The first time executing the cell takes more time, as it include the time to jit the function.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"Nv-u3dAP7IRZ\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Loss computation (autoregressive loss over multiple steps)\\n\",\n        \"loss, diagnostics = loss_fn_jitted(\\n\",\n        \"    rng=jax.random.PRNGKey(0),\\n\",\n        \"    inputs=train_inputs,\\n\",\n        \"    targets=train_targets,\\n\",\n        \"    forcings=train_forcings)\\n\",\n        \"print(\\\"Loss:\\\", float(loss))\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"mBNFq1IGZNLz\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Gradient computation (backprop through time)\\n\",\n        \"loss, diagnostics, next_state, grads = grads_fn_jitted(\\n\",\n        \"    inputs=train_inputs,\\n\",\n        \"    targets=train_targets,\\n\",\n        \"    forcings=train_forcings)\\n\",\n        \"mean_grad = np.mean(jax.tree_util.tree_flatten(jax.tree_util.tree_map(lambda x: np.abs(x).mean(), grads))[0])\\n\",\n        \"print(f\\\"Loss: {loss:.4f}, Mean |grad|: {mean_grad:.6f}\\\")\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"cellView\": \"form\",\n        \"id\": \"J4FJFKWD8Loz\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"# @title Autoregressive rollout (keep the loop in JAX)\\n\",\n        \"print(\\\"Inputs:  \\\", train_inputs.dims.mapping)\\n\",\n        \"print(\\\"Targets: \\\", train_targets.dims.mapping)\\n\",\n        \"print(\\\"Forcings:\\\", train_forcings.dims.mapping)\\n\",\n        \"\\n\",\n        \"predictions = run_forward_jitted(\\n\",\n        \"    rng=jax.random.PRNGKey(0),\\n\",\n        \"    inputs=train_inputs,\\n\",\n        \"    targets_template=train_targets * np.nan,\\n\",\n        \"    forcings=train_forcings)\\n\",\n        \"predictions\"\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"colab\": {\n      \"name\": \"GraphCast\",\n      \"private_outputs\": true,\n      \"provenance\": [],\n      \"toc_visible\": true\n    },\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.9150390625,
          "content": "# Copyright 2023 DeepMind Technologies Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS-IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Module setuptools script.\"\"\"\n\nfrom setuptools import setup\n\ndescription = (\n    \"GraphCast: Learning skillful medium-range global weather forecasting\"\n)\n\nsetup(\n    name=\"graphcast\",\n    version=\"0.2.0.dev\",\n    description=description,\n    long_description=description,\n    author=\"DeepMind\",\n    license=\"Apache License, Version 2.0\",\n    keywords=\"GraphCast Weather Prediction\",\n    url=\"https://github.com/deepmind/graphcast\",\n    packages=[\"graphcast\"],\n    install_requires=[\n        \"cartopy\",\n        \"chex\",\n        \"colabtools\",\n        \"dask\",\n        \"dinosaur-dycore\",\n        \"dm-haiku\",\n        \"dm-tree\",\n        \"jax\",\n        \"jraph\",\n        \"matplotlib\",\n        \"numpy\",\n        \"pandas\",\n        \"rtree\",\n        \"scipy\",\n        \"trimesh\",\n        \"typing_extensions\",\n        \"xarray\",\n        \"xarray_tensorstore\"\n    ],\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"Topic :: Scientific/Engineering :: Atmospheric Science\",\n        \"Topic :: Scientific/Engineering :: Physics\",\n    ],\n)\n"
        }
      ]
    }
  ]
}