{
  "metadata": {
    "timestamp": 1736560697732,
    "page": 355,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "IDEA-Research/GroundingDINO",
      "stars": 7153,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".asset",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8818359375,
          "content": "# IDE\n.idea/\n.vscode/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# vscode\n.vscode/\noutput/\noutputs/\nsubs/\nlogs/\n\ngrounding/config/configs\ngrounding/version.py\n\nvis/\ntmp/"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0400390625,
          "content": "FROM pytorch/pytorch:2.1.2-cuda12.1-cudnn8-runtime\nARG DEBIAN_FRONTEND=noninteractive\n\nENV CUDA_HOME=/usr/local/cuda \\\n     TORCH_CUDA_ARCH_LIST=\"6.0 6.1 7.0 7.5 8.0 8.6+PTX\" \\\n     SETUPTOOLS_USE_DISTUTILS=stdlib\n\nRUN conda update conda -y\n\n# Install libraries in the brand new image. \nRUN apt-get -y update && apt-get install -y --no-install-recommends \\\n         wget \\\n         build-essential \\\n         git \\\n         python3-opencv \\\n         ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set the working directory for all the subsequent Dockerfile instructions.\nWORKDIR /opt/program\n\nRUN git clone https://github.com/IDEA-Research/GroundingDINO.git\n\nRUN mkdir weights ; cd weights ; wget -q https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth ; cd ..\n\nRUN conda install -c \"nvidia/label/cuda-12.1.1\" cuda -y\nENV CUDA_HOME=$CONDA_PREFIX\n\nENV PATH=/usr/local/cuda/bin:$PATH\n\nRUN cd GroundingDINO/ && python -m pip install .\n\nCOPY docker_test.py docker_test.py\n\nCMD [ \"python\", \"docker_test.py\" ]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0888671875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 - present, IDEA Research.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.03515625,
          "content": "<div align=\"center\">\n  <img src=\"./.asset/grounding_dino_logo.png\" width=\"30%\">\n</div>\n\n# :sauropod: Grounding DINO \n\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/grounding-dino-marrying-dino-with-grounded/zero-shot-object-detection-on-mscoco)](https://paperswithcode.com/sota/zero-shot-object-detection-on-mscoco?p=grounding-dino-marrying-dino-with-grounded) [![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/grounding-dino-marrying-dino-with-grounded/zero-shot-object-detection-on-odinw)](https://paperswithcode.com/sota/zero-shot-object-detection-on-odinw?p=grounding-dino-marrying-dino-with-grounded) \\\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/grounding-dino-marrying-dino-with-grounded/object-detection-on-coco-minival)](https://paperswithcode.com/sota/object-detection-on-coco-minival?p=grounding-dino-marrying-dino-with-grounded) [![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/grounding-dino-marrying-dino-with-grounded/object-detection-on-coco)](https://paperswithcode.com/sota/object-detection-on-coco?p=grounding-dino-marrying-dino-with-grounded)\n\n\n**[IDEA-CVR, IDEA-Research](https://github.com/IDEA-Research)** \n\n[Shilong Liu](http://www.lsl.zone/), [Zhaoyang Zeng](https://scholar.google.com/citations?user=U_cvvUwAAAAJ&hl=zh-CN&oi=ao), [Tianhe Ren](https://rentainhe.github.io/), [Feng Li](https://scholar.google.com/citations?user=ybRe9GcAAAAJ&hl=zh-CN), [Hao Zhang](https://scholar.google.com/citations?user=B8hPxMQAAAAJ&hl=zh-CN), [Jie Yang](https://github.com/yangjie-cv), [Chunyuan Li](https://scholar.google.com/citations?user=Zd7WmXUAAAAJ&hl=zh-CN&oi=ao), [Jianwei Yang](https://jwyang.github.io/), [Hang Su](https://scholar.google.com/citations?hl=en&user=dxN1_X0AAAAJ&view_op=list_works&sortby=pubdate), [Jun Zhu](https://scholar.google.com/citations?hl=en&user=axsP38wAAAAJ), [Lei Zhang](https://www.leizhang.org/)<sup>:email:</sup>.\n\n\n[[`Paper`](https://arxiv.org/abs/2303.05499)] [[`Demo`](https://huggingface.co/spaces/ShilongLiu/Grounding_DINO_demo)] [[`BibTex`](#black_nib-citation)]\n\n\nPyTorch implementation and pretrained models for Grounding DINO. For details, see the paper **[Grounding DINO: Marrying DINO with Grounded Pre-Training for Open-Set Object Detection](https://arxiv.org/abs/2303.05499)**.\n\n- 🔥 **[Grounded SAM 2](https://github.com/IDEA-Research/Grounded-SAM-2)** is released now, which combines Grounding DINO with [SAM 2](https://github.com/facebookresearch/segment-anything-2) for any object tracking in open-world scenarios.\n- 🔥 **[Grounding DINO 1.5](https://github.com/IDEA-Research/Grounding-DINO-1.5-API)** is released now, which is IDEA Research's **Most Capable** Open-World Object Detection Model!\n- 🔥 **[Grounding DINO](https://arxiv.org/abs/2303.05499)** and **[Grounded SAM](https://arxiv.org/abs/2401.14159)** are now supported in Huggingface. For more convenient use, you can refer to [this documentation](https://huggingface.co/docs/transformers/model_doc/grounding-dino)\n\n## :sun_with_face: Helpful Tutorial\n\n- :grapes: [[Read our arXiv Paper](https://arxiv.org/abs/2303.05499)]\n- :apple:  [[Watch our simple introduction video on YouTube](https://youtu.be/wxWDt5UiwY8)]\n- :blossom:   &nbsp;[[Try the Colab Demo](https://colab.research.google.com/github/roboflow-ai/notebooks/blob/main/notebooks/zero-shot-object-detection-with-grounding-dino.ipynb)]\n- :sunflower: [[Try our Official Huggingface Demo](https://huggingface.co/spaces/ShilongLiu/Grounding_DINO_demo)]\n- :maple_leaf: [[Watch the Step by Step Tutorial about GroundingDINO by Roboflow AI](https://youtu.be/cMa77r3YrDk)]\n- :mushroom: [[GroundingDINO: Automated Dataset Annotation and Evaluation by Roboflow AI](https://youtu.be/C4NqaRBz_Kw)]\n- :hibiscus: [[Accelerate Image Annotation with SAM and GroundingDINO by Roboflow AI](https://youtu.be/oEQYStnF2l8)]\n- :white_flower: [[Autodistill: Train YOLOv8 with ZERO Annotations based on Grounding-DINO and Grounded-SAM by Roboflow AI](https://github.com/autodistill/autodistill)]\n\n<!-- Grounding DINO Methods | \n[![arXiv](https://img.shields.io/badge/arXiv-2303.05499-b31b1b.svg)](https://arxiv.org/abs/2303.05499) \n[![YouTube](https://badges.aleen42.com/src/youtube.svg)](https://youtu.be/wxWDt5UiwY8) -->\n\n<!-- Grounding DINO Demos |\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roboflow-ai/notebooks/blob/main/notebooks/zero-shot-object-detection-with-grounding-dino.ipynb) -->\n<!-- [![YouTube](https://badges.aleen42.com/src/youtube.svg)](https://youtu.be/cMa77r3YrDk)\n[![HuggingFace space](https://img.shields.io/badge/🤗-HuggingFace%20Space-cyan.svg)](https://huggingface.co/spaces/ShilongLiu/Grounding_DINO_demo)\n[![YouTube](https://badges.aleen42.com/src/youtube.svg)](https://youtu.be/oEQYStnF2l8)\n[![YouTube](https://badges.aleen42.com/src/youtube.svg)](https://youtu.be/C4NqaRBz_Kw) -->\n\n## :sparkles: Highlight Projects\n\n- [Semantic-SAM: a universal image segmentation model to enable segment and recognize anything at any desired granularity.](https://github.com/UX-Decoder/Semantic-SAM), \n- [DetGPT: Detect What You Need via Reasoning](https://github.com/OptimalScale/DetGPT)\n- [Grounded-SAM: Marrying Grounding DINO with Segment Anything](https://github.com/IDEA-Research/Grounded-Segment-Anything)\n- [Grounding DINO with Stable Diffusion](demo/image_editing_with_groundingdino_stablediffusion.ipynb)\n- [Grounding DINO with GLIGEN for Controllable Image Editing](demo/image_editing_with_groundingdino_gligen.ipynb)\n- [OpenSeeD: A Simple and Strong Openset Segmentation Model](https://github.com/IDEA-Research/OpenSeeD)\n- [SEEM: Segment Everything Everywhere All at Once](https://github.com/UX-Decoder/Segment-Everything-Everywhere-All-At-Once)\n- [X-GPT: Conversational Visual Agent supported by X-Decoder](https://github.com/microsoft/X-Decoder/tree/xgpt)\n- [GLIGEN: Open-Set Grounded Text-to-Image Generation](https://github.com/gligen/GLIGEN)\n- [LLaVA: Large Language and Vision Assistant](https://github.com/haotian-liu/LLaVA)\n\n<!-- Extensions | [Grounding DINO with Segment Anything](https://github.com/IDEA-Research/Grounded-Segment-Anything); [Grounding DINO with Stable Diffusion](demo/image_editing_with_groundingdino_stablediffusion.ipynb); [Grounding DINO with GLIGEN](demo/image_editing_with_groundingdino_gligen.ipynb)  -->\n\n\n\n<!-- Official PyTorch implementation of [Grounding DINO](https://arxiv.org/abs/2303.05499), a stronger open-set object detector. Code is available now! -->\n\n\n## :bulb: Highlight\n\n- **Open-Set Detection.** Detect **everything** with language!\n- **High Performance.** COCO zero-shot **52.5 AP** (training without COCO data!). COCO fine-tune **63.0 AP**.\n- **Flexible.** Collaboration with Stable Diffusion for Image Editting.\n\n\n\n\n## :fire: News\n- **`2023/07/18`**: We release [Semantic-SAM](https://github.com/UX-Decoder/Semantic-SAM), a universal image segmentation model to enable segment and recognize anything at any desired granularity. **Code** and **checkpoint** are available!\n- **`2023/06/17`**: We provide an example to evaluate Grounding DINO on COCO zero-shot performance.\n- **`2023/04/15`**: Refer to [CV in the Wild Readings](https://github.com/Computer-Vision-in-the-Wild/CVinW_Readings) for those who are interested in open-set recognition!\n- **`2023/04/08`**: We release [demos](demo/image_editing_with_groundingdino_gligen.ipynb) to combine [Grounding DINO](https://arxiv.org/abs/2303.05499) with [GLIGEN](https://github.com/gligen/GLIGEN)  for more controllable image editings.\n- **`2023/04/08`**: We release [demos](demo/image_editing_with_groundingdino_stablediffusion.ipynb) to combine [Grounding DINO](https://arxiv.org/abs/2303.05499) with [Stable Diffusion](https://github.com/Stability-AI/StableDiffusion) for image editings.\n- **`2023/04/06`**: We build a new demo by marrying GroundingDINO with [Segment-Anything](https://github.com/facebookresearch/segment-anything) named **[Grounded-Segment-Anything](https://github.com/IDEA-Research/Grounded-Segment-Anything)** aims to support segmentation in GroundingDINO.\n- **`2023/03/28`**: A YouTube [video](https://youtu.be/cMa77r3YrDk) about Grounding DINO and basic object detection prompt engineering. [[SkalskiP](https://github.com/SkalskiP)]\n- **`2023/03/28`**: Add a [demo](https://huggingface.co/spaces/ShilongLiu/Grounding_DINO_demo) on Hugging Face Space!\n- **`2023/03/27`**: Support CPU-only mode. Now the model can run on machines without GPUs.\n- **`2023/03/25`**: A [demo](https://colab.research.google.com/github/roboflow-ai/notebooks/blob/main/notebooks/zero-shot-object-detection-with-grounding-dino.ipynb) for Grounding DINO is available at Colab. [[SkalskiP](https://github.com/SkalskiP)]\n- **`2023/03/22`**: Code is available Now!\n\n<details open>\n<summary><font size=\"4\">\nDescription\n</font></summary>\n <a href=\"https://arxiv.org/abs/2303.05499\">Paper</a> introduction.\n<img src=\".asset/hero_figure.png\" alt=\"ODinW\" width=\"100%\">\nMarrying <a href=\"https://github.com/IDEA-Research/GroundingDINO\">Grounding DINO</a> and <a href=\"https://github.com/gligen/GLIGEN\">GLIGEN</a>\n<img src=\"https://huggingface.co/ShilongLiu/GroundingDINO/resolve/main/GD_GLIGEN.png\" alt=\"gd_gligen\" width=\"100%\">\n</details>\n\n## :star: Explanations/Tips for Grounding DINO Inputs and Outputs\n- Grounding DINO accepts an `(image, text)` pair as inputs.\n- It outputs `900` (by default) object boxes. Each box has similarity scores across all input words. (as shown in Figures below.)\n- We defaultly choose the boxes whose highest similarities are higher than a `box_threshold`.\n- We extract the words whose similarities are higher than the `text_threshold` as predicted labels.\n- If you want to obtain objects of specific phrases, like the `dogs` in the sentence `two dogs with a stick.`, you can select the boxes with highest text similarities with `dogs` as final outputs. \n- Note that each word can be split to **more than one** tokens with different tokenlizers. The number of words in a sentence may not equal to the number of text tokens.\n- We suggest separating different category names with `.` for Grounding DINO.\n![model_explain1](.asset/model_explan1.PNG)\n![model_explain2](.asset/model_explan2.PNG)\n\n## :label: TODO \n\n- [x] Release inference code and demo.\n- [x] Release checkpoints.\n- [x] Grounding DINO with Stable Diffusion and GLIGEN demos.\n- [ ] Release training codes.\n\n## :hammer_and_wrench: Install \n\n**Note:**\n\n0. If you have a CUDA environment, please make sure the environment variable `CUDA_HOME` is set. It will be compiled under CPU-only mode if no CUDA available.\n\nPlease make sure following the installation steps strictly, otherwise the program may produce: \n```bash\nNameError: name '_C' is not defined\n```\n\nIf this happened, please reinstalled the groundingDINO by reclone the git and do all the installation steps again.\n \n#### how to check cuda:\n```bash\necho $CUDA_HOME\n```\nIf it print nothing, then it means you haven't set up the path/\n\nRun this so the environment variable will be set under current shell. \n```bash\nexport CUDA_HOME=/path/to/cuda-11.3\n```\n\nNotice the version of cuda should be aligned with your CUDA runtime, for there might exists multiple cuda at the same time. \n\nIf you want to set the CUDA_HOME permanently, store it using:\n\n```bash\necho 'export CUDA_HOME=/path/to/cuda' >> ~/.bashrc\n```\nafter that, source the bashrc file and check CUDA_HOME:\n```bash\nsource ~/.bashrc\necho $CUDA_HOME\n```\n\nIn this example, /path/to/cuda-11.3 should be replaced with the path where your CUDA toolkit is installed. You can find this by typing **which nvcc** in your terminal:\n\nFor instance, \nif the output is /usr/local/cuda/bin/nvcc, then:\n```bash\nexport CUDA_HOME=/usr/local/cuda\n```\n**Installation:**\n\n1.Clone the GroundingDINO repository from GitHub.\n\n```bash\ngit clone https://github.com/IDEA-Research/GroundingDINO.git\n```\n\n2. Change the current directory to the GroundingDINO folder.\n\n```bash\ncd GroundingDINO/\n```\n\n3. Install the required dependencies in the current directory.\n\n```bash\npip install -e .\n```\n\n4. Download pre-trained model weights.\n\n```bash\nmkdir weights\ncd weights\nwget -q https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth\ncd ..\n```\n\n## :arrow_forward: Demo\nCheck your GPU ID (only if you're using a GPU)\n\n```bash\nnvidia-smi\n```\nReplace `{GPU ID}`, `image_you_want_to_detect.jpg`, and `\"dir you want to save the output\"` with appropriate values in the following command\n```bash\nCUDA_VISIBLE_DEVICES={GPU ID} python demo/inference_on_a_image.py \\\n-c groundingdino/config/GroundingDINO_SwinT_OGC.py \\\n-p weights/groundingdino_swint_ogc.pth \\\n-i image_you_want_to_detect.jpg \\\n-o \"dir you want to save the output\" \\\n-t \"chair\"\n [--cpu-only] # open it for cpu mode\n```\n\nIf you would like to specify the phrases to detect, here is a demo:\n```bash\nCUDA_VISIBLE_DEVICES={GPU ID} python demo/inference_on_a_image.py \\\n-c groundingdino/config/GroundingDINO_SwinT_OGC.py \\\n-p ./groundingdino_swint_ogc.pth \\\n-i .asset/cat_dog.jpeg \\\n-o logs/1111 \\\n-t \"There is a cat and a dog in the image .\" \\\n--token_spans \"[[[9, 10], [11, 14]], [[19, 20], [21, 24]]]\"\n [--cpu-only] # open it for cpu mode\n```\nThe token_spans specify the start and end positions of a phrases. For example, the first phrase is `[[9, 10], [11, 14]]`. `\"There is a cat and a dog in the image .\"[9:10] = 'a'`, `\"There is a cat and a dog in the image .\"[11:14] = 'cat'`. Hence it refers to the phrase `a cat` . Similarly, the `[[19, 20], [21, 24]]` refers to the phrase `a dog`.\n\nSee the `demo/inference_on_a_image.py` for more details.\n\n**Running with Python:**\n\n```python\nfrom groundingdino.util.inference import load_model, load_image, predict, annotate\nimport cv2\n\nmodel = load_model(\"groundingdino/config/GroundingDINO_SwinT_OGC.py\", \"weights/groundingdino_swint_ogc.pth\")\nIMAGE_PATH = \"weights/dog-3.jpeg\"\nTEXT_PROMPT = \"chair . person . dog .\"\nBOX_TRESHOLD = 0.35\nTEXT_TRESHOLD = 0.25\n\nimage_source, image = load_image(IMAGE_PATH)\n\nboxes, logits, phrases = predict(\n    model=model,\n    image=image,\n    caption=TEXT_PROMPT,\n    box_threshold=BOX_TRESHOLD,\n    text_threshold=TEXT_TRESHOLD\n)\n\nannotated_frame = annotate(image_source=image_source, boxes=boxes, logits=logits, phrases=phrases)\ncv2.imwrite(\"annotated_image.jpg\", annotated_frame)\n```\n**Web UI**\n\nWe also provide a demo code to integrate Grounding DINO with Gradio Web UI. See the file `demo/gradio_app.py` for more details.\n\n**Notebooks**\n\n- We release [demos](demo/image_editing_with_groundingdino_gligen.ipynb) to combine [Grounding DINO](https://arxiv.org/abs/2303.05499) with [GLIGEN](https://github.com/gligen/GLIGEN)  for more controllable image editings.\n- We release [demos](demo/image_editing_with_groundingdino_stablediffusion.ipynb) to combine [Grounding DINO](https://arxiv.org/abs/2303.05499) with [Stable Diffusion](https://github.com/Stability-AI/StableDiffusion) for image editings.\n\n## COCO Zero-shot Evaluations\n\nWe provide an example to evaluate Grounding DINO zero-shot performance on COCO. The results should be **48.5**.\n\n```bash\nCUDA_VISIBLE_DEVICES=0 \\\npython demo/test_ap_on_coco.py \\\n -c groundingdino/config/GroundingDINO_SwinT_OGC.py \\\n -p weights/groundingdino_swint_ogc.pth \\\n --anno_path /path/to/annoataions/ie/instances_val2017.json \\\n --image_dir /path/to/imagedir/ie/val2017\n```\n\n\n## :luggage: Checkpoints\n\n<!-- insert a table -->\n<table>\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>backbone</th>\n      <th>Data</th>\n      <th>box AP on COCO</th>\n      <th>Checkpoint</th>\n      <th>Config</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>GroundingDINO-T</td>\n      <td>Swin-T</td>\n      <td>O365,GoldG,Cap4M</td>\n      <td>48.4 (zero-shot) / 57.2 (fine-tune)</td>\n      <td><a href=\"https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth\">GitHub link</a> | <a href=\"https://huggingface.co/ShilongLiu/GroundingDINO/resolve/main/groundingdino_swint_ogc.pth\">HF link</a></td>\n      <td><a href=\"https://github.com/IDEA-Research/GroundingDINO/blob/main/groundingdino/config/GroundingDINO_SwinT_OGC.py\">link</a></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GroundingDINO-B</td>\n      <td>Swin-B</td>\n      <td>COCO,O365,GoldG,Cap4M,OpenImage,ODinW-35,RefCOCO</td>\n      <td>56.7 </td>\n      <td><a href=\"https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha2/groundingdino_swinb_cogcoor.pth\">GitHub link</a>  | <a href=\"https://huggingface.co/ShilongLiu/GroundingDINO/resolve/main/groundingdino_swinb_cogcoor.pth\">HF link</a> \n      <td><a href=\"https://github.com/IDEA-Research/GroundingDINO/blob/main/groundingdino/config/GroundingDINO_SwinB_cfg.py\">link</a></td>\n    </tr>\n  </tbody>\n</table>\n\n## :medal_military: Results\n\n<details open>\n<summary><font size=\"4\">\nCOCO Object Detection Results\n</font></summary>\n<img src=\".asset/COCO.png\" alt=\"COCO\" width=\"100%\">\n</details>\n\n<details open>\n<summary><font size=\"4\">\nODinW Object Detection Results\n</font></summary>\n<img src=\".asset/ODinW.png\" alt=\"ODinW\" width=\"100%\">\n</details>\n\n<details open>\n<summary><font size=\"4\">\nMarrying Grounding DINO with <a href=\"https://github.com/Stability-AI/StableDiffusion\">Stable Diffusion</a> for Image Editing\n</font></summary>\nSee our example <a href=\"https://github.com/IDEA-Research/GroundingDINO/blob/main/demo/image_editing_with_groundingdino_stablediffusion.ipynb\">notebook</a> for more details.\n<img src=\".asset/GD_SD.png\" alt=\"GD_SD\" width=\"100%\">\n</details>\n\n\n<details open>\n<summary><font size=\"4\">\nMarrying Grounding DINO with <a href=\"https://github.com/gligen/GLIGEN\">GLIGEN</a> for more Detailed Image Editing.\n</font></summary>\nSee our example <a href=\"https://github.com/IDEA-Research/GroundingDINO/blob/main/demo/image_editing_with_groundingdino_gligen.ipynb\">notebook</a> for more details.\n<img src=\".asset/GD_GLIGEN.png\" alt=\"GD_GLIGEN\" width=\"100%\">\n</details>\n\n## :sauropod: Model: Grounding DINO\n\nIncludes: a text backbone, an image backbone, a feature enhancer, a language-guided query selection, and a cross-modality decoder.\n\n![arch](.asset/arch.png)\n\n\n## :hearts: Acknowledgement\n\nOur model is related to [DINO](https://github.com/IDEA-Research/DINO) and [GLIP](https://github.com/microsoft/GLIP). Thanks for their great work!\n\nWe also thank great previous work including DETR, Deformable DETR, SMCA, Conditional DETR, Anchor DETR, Dynamic DETR, DAB-DETR, DN-DETR, etc. More related work are available at [Awesome Detection Transformer](https://github.com/IDEACVR/awesome-detection-transformer). A new toolbox [detrex](https://github.com/IDEA-Research/detrex) is available as well.\n\nThanks [Stable Diffusion](https://github.com/Stability-AI/StableDiffusion) and [GLIGEN](https://github.com/gligen/GLIGEN) for their awesome models.\n\n\n## :black_nib: Citation\n\nIf you find our work helpful for your research, please consider citing the following BibTeX entry.   \n\n```bibtex\n@article{liu2023grounding,\n  title={Grounding dino: Marrying dino with grounded pre-training for open-set object detection},\n  author={Liu, Shilong and Zeng, Zhaoyang and Ren, Tianhe and Li, Feng and Zhang, Hao and Yang, Jie and Li, Chunyuan and Yang, Jianwei and Su, Hang and Zhu, Jun and others},\n  journal={arXiv preprint arXiv:2303.05499},\n  year={2023}\n}\n```\n\n\n\n\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker_test.py",
          "type": "blob",
          "size": 0.28515625,
          "content": "from groundingdino.util.inference import load_model, load_image, predict, annotate\nimport torch\nimport cv2\n\nmodel = load_model(\"groundingdino/config/GroundingDINO_SwinT_OGC.pyy\", \"weights/groundingdino_swint_ogc.pth\")\nmodel = model.to('cuda:0')\nprint(torch.cuda.is_available())\nprint('DONE!')"
        },
        {
          "name": "environment.yaml",
          "type": "blob",
          "size": 7.693359375,
          "content": "name: dino\nchannels:\n  - pytorch\n  - nvidia\n  - conda-forge\n  - defaults\ndependencies:\n  - addict=2.4.0=pyhd8ed1ab_2\n  - aiohttp=3.8.5=py39ha55989b_0\n  - aiosignal=1.3.1=pyhd8ed1ab_0\n  - asttokens=2.0.5=pyhd3eb1b0_0\n  - async-timeout=4.0.3=pyhd8ed1ab_0\n  - attrs=23.1.0=pyh71513ae_1\n  - aws-c-auth=0.7.0=h6f3c987_2\n  - aws-c-cal=0.6.0=h6ba3258_0\n  - aws-c-common=0.8.23=hcfcfb64_0\n  - aws-c-compression=0.2.17=h420beca_1\n  - aws-c-event-stream=0.3.1=had47b81_1\n  - aws-c-http=0.7.11=h72ba615_0\n  - aws-c-io=0.13.28=ha35c040_0\n  - aws-c-mqtt=0.8.14=h4941efa_2\n  - aws-c-s3=0.3.13=he04eaa7_2\n  - aws-c-sdkutils=0.1.11=h420beca_1\n  - aws-checksums=0.1.16=h420beca_1\n  - aws-crt-cpp=0.20.3=h247a981_4\n  - aws-sdk-cpp=1.10.57=h1a0519f_17\n  - backcall=0.2.0=pyhd3eb1b0_0\n  - blas=2.118=mkl\n  - blas-devel=3.9.0=18_win64_mkl\n  - brotli=1.0.9=hcfcfb64_9\n  - brotli-bin=1.0.9=hcfcfb64_9\n  - brotli-python=1.0.9=py39h99910a6_9\n  - bzip2=1.0.8=h8ffe710_4\n  - c-ares=1.19.1=hcfcfb64_0\n  - ca-certificates=2023.08.22=haa95532_0\n  - certifi=2023.7.22=py39haa95532_0\n  - charset-normalizer=3.2.0=pyhd8ed1ab_0\n  - click=8.1.7=win_pyh7428d3b_0\n  - colorama=0.4.6=pyhd8ed1ab_0\n  - comm=0.1.2=py39haa95532_0\n  - contourpy=1.1.1=py39h1f6ef14_1\n  - cuda-cccl=12.2.140=0\n  - cuda-cudart=11.8.89=0\n  - cuda-cudart-dev=11.8.89=0\n  - cuda-cupti=11.8.87=0\n  - cuda-libraries=11.8.0=0\n  - cuda-libraries-dev=11.8.0=0\n  - cuda-nvrtc=11.8.89=0\n  - cuda-nvrtc-dev=11.8.89=0\n  - cuda-nvtx=11.8.86=0\n  - cuda-profiler-api=12.2.140=0\n  - cuda-runtime=11.8.0=0\n  - cycler=0.11.0=pyhd8ed1ab_0\n  - cython=3.0.0=py39h2bbff1b_0\n  - dataclasses=0.8=pyhc8e2a94_3\n  - datasets=2.14.5=pyhd8ed1ab_0\n  - debugpy=1.6.7=py39hd77b12b_0\n  - decorator=5.1.1=pyhd3eb1b0_0\n  - dill=0.3.7=pyhd8ed1ab_0\n  - exceptiongroup=1.0.4=py39haa95532_0\n  - executing=0.8.3=pyhd3eb1b0_0\n  - filelock=3.12.4=pyhd8ed1ab_0\n  - fonttools=4.42.1=py39ha55989b_0\n  - freeglut=3.2.2=h63175ca_2\n  - freetype=2.12.1=hdaf720e_2\n  - frozenlist=1.4.0=py39ha55989b_1\n  - fsspec=2023.6.0=pyh1a96a4e_0\n  - gettext=0.21.1=h5728263_0\n  - glib=2.78.0=h12be248_0\n  - glib-tools=2.78.0=h12be248_0\n  - gst-plugins-base=1.22.6=h001b923_1\n  - gstreamer=1.22.6=hb4038d2_1\n  - huggingface_hub=0.17.3=pyhd8ed1ab_0\n  - icu=70.1=h0e60522_0\n  - idna=3.4=pyhd8ed1ab_0\n  - importlib-metadata=6.8.0=pyha770c72_0\n  - importlib-resources=6.1.0=pyhd8ed1ab_0\n  - importlib_metadata=6.8.0=hd8ed1ab_0\n  - importlib_resources=6.1.0=pyhd8ed1ab_0\n  - intel-openmp=2023.2.0=h57928b3_49503\n  - ipykernel=6.25.0=py39h9909e9c_0\n  - ipython=8.15.0=py39haa95532_0\n  - jasper=2.0.33=hc2e4405_1\n  - jedi=0.18.1=py39haa95532_1\n  - jinja2=3.1.2=pyhd8ed1ab_1\n  - joblib=1.3.2=pyhd8ed1ab_0\n  - jpeg=9e=hcfcfb64_3\n  - jupyter_client=8.1.0=py39haa95532_0\n  - jupyter_core=5.3.0=py39haa95532_0\n  - kiwisolver=1.4.5=py39h1f6ef14_1\n  - krb5=1.20.1=heb0366b_0\n  - lcms2=2.14=h90d422f_0\n  - lerc=4.0.0=h63175ca_0\n  - libabseil=20230125.3=cxx17_h63175ca_0\n  - libarrow=12.0.1=h12e5d06_5_cpu\n  - libblas=3.9.0=18_win64_mkl\n  - libbrotlicommon=1.0.9=hcfcfb64_9\n  - libbrotlidec=1.0.9=hcfcfb64_9\n  - libbrotlienc=1.0.9=hcfcfb64_9\n  - libcblas=3.9.0=18_win64_mkl\n  - libclang=15.0.7=default_h77d9078_3\n  - libclang13=15.0.7=default_h77d9078_3\n  - libcrc32c=1.1.2=h0e60522_0\n  - libcublas=11.11.3.6=0\n  - libcublas-dev=11.11.3.6=0\n  - libcufft=10.9.0.58=0\n  - libcufft-dev=10.9.0.58=0\n  - libcurand=10.3.3.141=0\n  - libcurand-dev=10.3.3.141=0\n  - libcurl=8.1.2=h68f0423_0\n  - libcusolver=11.4.1.48=0\n  - libcusolver-dev=11.4.1.48=0\n  - libcusparse=11.7.5.86=0\n  - libcusparse-dev=11.7.5.86=0\n  - libdeflate=1.14=hcfcfb64_0\n  - libevent=2.1.12=h3671451_1\n  - libffi=3.4.2=h8ffe710_5\n  - libglib=2.78.0=he8f3873_0\n  - libgoogle-cloud=2.12.0=h00b2bdc_1\n  - libgrpc=1.54.3=ha177ca7_0\n  - libhwloc=2.9.3=default_haede6df_1009\n  - libiconv=1.17=h8ffe710_0\n  - liblapack=3.9.0=18_win64_mkl\n  - liblapacke=3.9.0=18_win64_mkl\n  - libnpp=11.8.0.86=0\n  - libnpp-dev=11.8.0.86=0\n  - libnvjpeg=11.9.0.86=0\n  - libnvjpeg-dev=11.9.0.86=0\n  - libogg=1.3.4=h8ffe710_1\n  - libopencv=4.5.3=py39h488c12c_8\n  - libpng=1.6.39=h19919ed_0\n  - libprotobuf=3.21.12=h12be248_2\n  - libsodium=1.0.18=h62dcd97_0\n  - libsqlite=3.43.0=hcfcfb64_0\n  - libssh2=1.11.0=h7dfc565_0\n  - libthrift=0.18.1=h06f6336_2\n  - libtiff=4.4.0=hc4f729c_5\n  - libutf8proc=2.8.0=h82a8f57_0\n  - libuv=1.44.2=hcfcfb64_1\n  - libvorbis=1.3.7=h0e60522_0\n  - libwebp-base=1.3.2=hcfcfb64_0\n  - libxcb=1.13=hcd874cb_1004\n  - libxml2=2.11.5=hc3477c8_1\n  - libzlib=1.2.13=hcfcfb64_5\n  - lz4-c=1.9.4=hcfcfb64_0\n  - m2w64-gcc-libgfortran=5.3.0=6\n  - m2w64-gcc-libs=5.3.0=7\n  - m2w64-gcc-libs-core=5.3.0=7\n  - m2w64-gmp=6.1.0=2\n  - m2w64-libwinpthread-git=5.0.0.4634.697f757=2\n  - markupsafe=2.1.3=py39ha55989b_1\n  - matplotlib-base=3.8.0=py39hf19769e_1\n  - matplotlib-inline=0.1.6=py39haa95532_0\n  - mkl=2022.1.0=h6a75c08_874\n  - mkl-devel=2022.1.0=h57928b3_875\n  - mkl-include=2022.1.0=h6a75c08_874\n  - mpmath=1.3.0=pyhd8ed1ab_0\n  - msys2-conda-epoch=20160418=1\n  - multidict=6.0.4=py39ha55989b_0\n  - multiprocess=0.70.15=py39ha55989b_1\n  - munkres=1.1.4=pyh9f0ad1d_0\n  - nest-asyncio=1.5.6=py39haa95532_0\n  - networkx=3.1=pyhd8ed1ab_0\n  - numpy=1.26.0=py39hddb5d58_0\n  - opencv=4.5.3=py39hcbf5309_8\n  - openjpeg=2.5.0=hc9384bd_1\n  - openssl=3.1.3=hcfcfb64_0\n  - orc=1.9.0=hada7b9e_1\n  - packaging=23.1=pyhd8ed1ab_0\n  - pandas=2.1.1=py39h32e6231_0\n  - parso=0.8.3=pyhd3eb1b0_0\n  - pcre2=10.40=h17e33f8_0\n  - pickleshare=0.7.5=pyhd3eb1b0_1003\n  - pillow=9.2.0=py39h595c93f_3\n  - pip=23.2.1=pyhd8ed1ab_0\n  - platformdirs=3.10.0=pyhd8ed1ab_0\n  - prompt-toolkit=3.0.36=py39haa95532_0\n  - psutil=5.9.0=py39h2bbff1b_0\n  - pthread-stubs=0.4=hcd874cb_1001\n  - pthreads-win32=2.9.1=hfa6e2cd_3\n  - pure_eval=0.2.2=pyhd3eb1b0_0\n  - py-opencv=4.5.3=py39h00e5391_8\n  - pyarrow=12.0.1=py39hca4e8af_5_cpu\n  - pycocotools=2.0.6=py39hc266a54_1\n  - pygments=2.15.1=py39haa95532_1\n  - pyparsing=3.1.1=pyhd8ed1ab_0\n  - pysocks=1.7.1=pyh0701188_6\n  - python=3.9.18=h4de0772_0_cpython\n  - python-dateutil=2.8.2=pyhd8ed1ab_0\n  - python-tzdata=2023.3=pyhd8ed1ab_0\n  - python-xxhash=3.3.0=py39ha55989b_1\n  - python_abi=3.9=4_cp39\n  - pytorch=2.0.1=py3.9_cuda11.8_cudnn8_0\n  - pytorch-cuda=11.8=h24eeafa_5\n  - pytorch-mutex=1.0=cuda\n  - pytz=2023.3.post1=pyhd8ed1ab_0\n  - pywin32=305=py39h2bbff1b_0\n  - pyyaml=6.0.1=py39ha55989b_1\n  - pyzmq=25.1.0=py39hd77b12b_0\n  - qt-main=5.15.8=h720456b_6\n  - re2=2023.03.02=hd4eee63_0\n  - regex=2023.8.8=py39ha55989b_1\n  - requests=2.31.0=pyhd8ed1ab_0\n  - sacremoses=0.0.53=pyhd8ed1ab_0\n  - safetensors=0.3.3=py39hf21820d_1\n  - setuptools=68.2.2=pyhd8ed1ab_0\n  - six=1.16.0=pyh6c4a22f_0\n  - snappy=1.1.10=hfb803bf_0\n  - stack_data=0.2.0=pyhd3eb1b0_0\n  - sympy=1.12=pyh04b8f61_3\n  - tbb=2021.10.0=h91493d7_1\n  - timm=0.9.7=pyhd8ed1ab_0\n  - tk=8.6.13=hcfcfb64_0\n  - tokenizers=0.13.3=py39hca44cb7_0\n  - tomli=2.0.1=pyhd8ed1ab_0\n  - tornado=6.3.2=py39h2bbff1b_0\n  - tqdm=4.66.1=pyhd8ed1ab_0\n  - traitlets=5.7.1=py39haa95532_0\n  - transformers=4.33.2=pyhd8ed1ab_0\n  - typing-extensions=4.8.0=hd8ed1ab_0\n  - typing_extensions=4.8.0=pyha770c72_0\n  - tzdata=2023c=h71feb2d_0\n  - ucrt=10.0.22621.0=h57928b3_0\n  - unicodedata2=15.0.0=py39ha55989b_1\n  - urllib3=2.0.5=pyhd8ed1ab_0\n  - vc=14.3=h64f974e_17\n  - vc14_runtime=14.36.32532=hdcecf7f_17\n  - vs2015_runtime=14.36.32532=h05e6639_17\n  - wcwidth=0.2.5=pyhd3eb1b0_0\n  - wheel=0.41.2=pyhd8ed1ab_0\n  - win_inet_pton=1.1.0=pyhd8ed1ab_6\n  - xorg-libxau=1.0.11=hcd874cb_0\n  - xorg-libxdmcp=1.1.3=hcd874cb_0\n  - xxhash=0.8.2=hcfcfb64_0\n  - xz=5.2.6=h8d14728_0\n  - yaml=0.2.5=h8ffe710_2\n  - yapf=0.40.1=pyhd8ed1ab_0\n  - yarl=1.9.2=py39ha55989b_0\n  - zeromq=4.3.4=hd77b12b_0\n  - zipp=3.17.0=pyhd8ed1ab_0\n  - zlib=1.2.13=hcfcfb64_5\n  - zstd=1.5.5=h12be248_0\n  - pip:\n      - opencv-python==4.8.0.76\n      - supervision==0.6.0\n      - torchaudio==2.0.2\n      - torchvision==0.15.2\nprefix: C:\\Users\\Makoto\\miniconda3\\envs\\dino\n"
        },
        {
          "name": "groundingdino",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.09765625,
          "content": "torch\ntorchvision\ntransformers\naddict\nyapf\ntimm\nnumpy\nopencv-python\nsupervision>=0.22.0\npycocotools\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.2578125,
          "content": "# coding=utf-8\n# Copyright 2022 The IDEA Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ------------------------------------------------------------------------------------------------\n# Modified from\n# https://github.com/fundamentalvision/Deformable-DETR/blob/main/models/ops/setup.py\n# https://github.com/facebookresearch/detectron2/blob/main/setup.py\n# https://github.com/open-mmlab/mmdetection/blob/master/setup.py\n# https://github.com/Oneflow-Inc/libai/blob/main/setup.py\n# ------------------------------------------------------------------------------------------------\n\nimport glob\nimport os\nimport subprocess\n\nimport subprocess\nimport sys\n\ndef install_torch():\n    try:\n        import torch\n    except ImportError:\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"torch\"])\n\n# Call the function to ensure torch is installed\ninstall_torch()\n\nimport torch\nfrom setuptools import find_packages, setup\nfrom torch.utils.cpp_extension import CUDA_HOME, CppExtension, CUDAExtension\n\n# groundingdino version info\nversion = \"0.1.0\"\npackage_name = \"groundingdino\"\ncwd = os.path.dirname(os.path.abspath(__file__))\n\n\nsha = \"Unknown\"\ntry:\n    sha = subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"], cwd=cwd).decode(\"ascii\").strip()\nexcept Exception:\n    pass\n\n\ndef write_version_file():\n    version_path = os.path.join(cwd, \"groundingdino\", \"version.py\")\n    with open(version_path, \"w\") as f:\n        f.write(f\"__version__ = '{version}'\\n\")\n        # f.write(f\"git_version = {repr(sha)}\\n\")\n\n\nrequirements = [\"torch\", \"torchvision\"]\n\ntorch_ver = [int(x) for x in torch.__version__.split(\".\")[:2]]\n\n\ndef get_extensions():\n    this_dir = os.path.dirname(os.path.abspath(__file__))\n    extensions_dir = os.path.join(this_dir, \"groundingdino\", \"models\", \"GroundingDINO\", \"csrc\")\n\n    main_source = os.path.join(extensions_dir, \"vision.cpp\")\n    sources = glob.glob(os.path.join(extensions_dir, \"**\", \"*.cpp\"))\n    source_cuda = glob.glob(os.path.join(extensions_dir, \"**\", \"*.cu\")) + glob.glob(\n        os.path.join(extensions_dir, \"*.cu\")\n    )\n\n    sources = [main_source] + sources\n\n    extension = CppExtension\n\n    extra_compile_args = {\"cxx\": []}\n    define_macros = []\n\n    if CUDA_HOME is not None and (torch.cuda.is_available() or \"TORCH_CUDA_ARCH_LIST\" in os.environ):\n        print(\"Compiling with CUDA\")\n        extension = CUDAExtension\n        sources += source_cuda\n        define_macros += [(\"WITH_CUDA\", None)]\n        extra_compile_args[\"nvcc\"] = [\n            \"-DCUDA_HAS_FP16=1\",\n            \"-D__CUDA_NO_HALF_OPERATORS__\",\n            \"-D__CUDA_NO_HALF_CONVERSIONS__\",\n            \"-D__CUDA_NO_HALF2_OPERATORS__\",\n        ]\n    else:\n        print(\"Compiling without CUDA\")\n        define_macros += [(\"WITH_HIP\", None)]\n        extra_compile_args[\"nvcc\"] = []\n        return None\n\n    sources = [os.path.join(extensions_dir, s) for s in sources]\n    include_dirs = [extensions_dir]\n\n    ext_modules = [\n        extension(\n            \"groundingdino._C\",\n            sources,\n            include_dirs=include_dirs,\n            define_macros=define_macros,\n            extra_compile_args=extra_compile_args,\n        )\n    ]\n\n    return ext_modules\n\n\ndef parse_requirements(fname=\"requirements.txt\", with_version=True):\n    \"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"\n    import re\n    import sys\n    from os.path import exists\n\n    require_fpath = fname\n\n    def parse_line(line):\n        \"\"\"Parse information from a line in a requirements text file.\"\"\"\n        if line.startswith(\"-r \"):\n            # Allow specifying requirements in other files\n            target = line.split(\" \")[1]\n            for info in parse_require_file(target):\n                yield info\n        else:\n            info = {\"line\": line}\n            if line.startswith(\"-e \"):\n                info[\"package\"] = line.split(\"#egg=\")[1]\n            elif \"@git+\" in line:\n                info[\"package\"] = line\n            else:\n                # Remove versioning from the package\n                pat = \"(\" + \"|\".join([\">=\", \"==\", \">\"]) + \")\"\n                parts = re.split(pat, line, maxsplit=1)\n                parts = [p.strip() for p in parts]\n\n                info[\"package\"] = parts[0]\n                if len(parts) > 1:\n                    op, rest = parts[1:]\n                    if \";\" in rest:\n                        # Handle platform specific dependencies\n                        # http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies\n                        version, platform_deps = map(str.strip, rest.split(\";\"))\n                        info[\"platform_deps\"] = platform_deps\n                    else:\n                        version = rest  # NOQA\n                    info[\"version\"] = (op, version)\n            yield info\n\n    def parse_require_file(fpath):\n        with open(fpath, \"r\") as f:\n            for line in f.readlines():\n                line = line.strip()\n                if line and not line.startswith(\"#\"):\n                    for info in parse_line(line):\n                        yield info\n\n    def gen_packages_items():\n        if exists(require_fpath):\n            for info in parse_require_file(require_fpath):\n                parts = [info[\"package\"]]\n                if with_version and \"version\" in info:\n                    parts.extend(info[\"version\"])\n                if not sys.version.startswith(\"3.4\"):\n                    # apparently package_deps are broken in 3.4\n                    platform_deps = info.get(\"platform_deps\")\n                    if platform_deps is not None:\n                        parts.append(\";\" + platform_deps)\n                item = \"\".join(parts)\n                yield item\n\n    packages = list(gen_packages_items())\n    return packages\n\n\nif __name__ == \"__main__\":\n    print(f\"Building wheel {package_name}-{version}\")\n\n    with open(\"LICENSE\", \"r\", encoding=\"utf-8\") as f:\n        license = f.read()\n\n    write_version_file()\n\n    setup(\n        name=\"groundingdino\",\n        version=\"0.1.0\",\n        author=\"International Digital Economy Academy, Shilong Liu\",\n        url=\"https://github.com/IDEA-Research/GroundingDINO\",\n        description=\"open-set object detector\",\n        license=license,\n        install_requires=parse_requirements(\"requirements.txt\"),\n        packages=find_packages(\n            exclude=(\n                \"configs\",\n                \"tests\",\n            )\n        ),\n        ext_modules=get_extensions(),\n        cmdclass={\"build_ext\": torch.utils.cpp_extension.BuildExtension},\n    )\n"
        },
        {
          "name": "test.ipynb",
          "type": "blob",
          "size": 3.0771484375,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"final text_encoder_type: bert-base-uncased\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"application/json\": {\n       \"ascii\": false,\n       \"bar_format\": null,\n       \"colour\": null,\n       \"elapsed\": 0.014210224151611328,\n       \"initial\": 0,\n       \"n\": 0,\n       \"ncols\": null,\n       \"nrows\": null,\n       \"postfix\": null,\n       \"prefix\": \"Downloading model.safetensors\",\n       \"rate\": null,\n       \"total\": 440449768,\n       \"unit\": \"B\",\n       \"unit_divisor\": 1000,\n       \"unit_scale\": true\n      },\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"5922f34578364d36afa13de9f01254bd\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"Downloading model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"/root/miniconda3/lib/python3.8/site-packages/transformers/modeling_utils.py:881: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.\\n\",\n      \"  warnings.warn(\\n\",\n      \"/root/miniconda3/lib/python3.8/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None\\n\",\n      \"  warnings.warn(\\\"None of the inputs have requires_grad=True. Gradients will be None\\\")\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"True\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from groundingdino.util.inference import load_model, load_image, predict, annotate\\n\",\n    \"import cv2\\n\",\n    \"\\n\",\n    \"model = load_model(\\\"groundingdino/config/GroundingDINO_SwinT_OGC.py\\\", \\\"../04-06-segment-anything/weights/groundingdino_swint_ogc.pth\\\")\\n\",\n    \"IMAGE_PATH = \\\".asset/cat_dog.jpeg\\\"\\n\",\n    \"TEXT_PROMPT = \\\"chair . person . dog .\\\"\\n\",\n    \"BOX_TRESHOLD = 0.35\\n\",\n    \"TEXT_TRESHOLD = 0.25\\n\",\n    \"\\n\",\n    \"image_source, image = load_image(IMAGE_PATH)\\n\",\n    \"\\n\",\n    \"boxes, logits, phrases = predict(\\n\",\n    \"    model=model,\\n\",\n    \"    image=image,\\n\",\n    \"    caption=TEXT_PROMPT,\\n\",\n    \"    box_threshold=BOX_TRESHOLD,\\n\",\n    \"    text_threshold=TEXT_TRESHOLD\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"annotated_frame = annotate(image_source=image_source, boxes=boxes, logits=logits, phrases=phrases)\\n\",\n    \"cv2.imwrite(\\\"annotated_image.jpg\\\", annotated_frame)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"base\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.10\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        }
      ]
    }
  ]
}