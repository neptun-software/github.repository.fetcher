{
  "metadata": {
    "timestamp": 1736560538028,
    "page": 143,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nashsu/FreeAskInternet",
      "stars": 8529,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 6.00390625,
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0341796875,
          "content": "__pycache__/\n*.py[cod]\n*$py.class\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2529296875,
          "content": "FROM python:3.9.15\n\nWORKDIR /app\nCOPY requirements.txt /app\nRUN pip3 install  -i https://mirrors.aliyun.com/pypi/simple/  --trusted-host mirrors.aliyun.com  -r requirements.txt --no-cache-dir\nCOPY . /app \nEXPOSE 8000\nENTRYPOINT [\"python3\"] \nCMD [\"server.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.513671875,
          "content": "# FreeAskInternet\n\n## 🎉🎉🎉 Yeah we have a logo now! 🎉🎉🎉\n\n![lgoo](./doc/logo-20240412.png)\n\n> Running www.perplexity.ai like app complete FREE, LOCAL, PRIVATE and NO GPU NEED on any computer\n> [!IMPORTANT]  \n> **If you are unable to use this project normally, it is most likely due to issues with your internet connection or your IP, you need free internet connection to use this project normally. 如果您无法正常使用此项目，很可能是由于您的 IP 存在问题，或者你不能自由访问互联网。**\n\n## What is FreeAskInternet\n\nFreeAskInternet is a completely free, private and locally running search aggregator & answer generate using LLM, Without GPU needed. The user can ask a question and the system will use searxng to make a multi engine search and combine the search result to the ChatGPT3.5 LLM and generate the answer based on search results. All process running locally and  No GPU or OpenAI or Google API keys are needed.\n\n## Features\n\n- 🈚️ Completely FREE (no need for any API keys)\n- 💻 Completely LOCAL (no GPU need, any computer can run )\n- 🔐 Completely PRIVATE (all thing running locally, using custom llm)\n- 👻 Runs WITHOUT LLM Hardware (NO GPU NEED!)\n- 🤩 Using Free ChatGPT3.5 / Qwen / Kimi / ZhipuAI(GLM) API (NO API keys need! Thx OpenAI)\n- 🐵 Custom LLM(ollama,llama.cpp) support, Yes we love ollama!\n- 🚀 Fast and easy to deploy with Docker Compose\n- 🌐 Web and Mobile friendly interface, designed for Web Search enhanced AI Chat, allowing for easy access from any device.\n\n## Screenshots\n\n1. index:\n\n![index](./doc/index.png)\n\n2. Search based AI Chat:\n\n![index](./doc/Screenshot-4.png)\n\n3. Multi LLM models and custom LLM like ollama support:\n\n![index](./doc/Screenshot-5.png)\n\n## How It Works?\n\n1. System get user input question in FreeAskInternet UI interface( running locally), and call searxng (running locally) to make search on multi search engine.\n2. crawl search result links content and pass to ChatGPT3.5 / Kimi / Qwen / ZhipuAI / ollama (by using custom llm), ask LLM to answer user question based on this contents as references.\n3. Stream the answer to Chat UI.\n4. We support custom LLM setting, so theoretically infinite llm support.\n\n## Status\n\nThis project is still in its very early days. Expect some bugs.\n\n### Run the latest release\n\n```bash\ngit clone https://github.com/nashsu/FreeAskInternet.git\ncd ./FreeAskInternet\ndocker-compose up -d \n```\n\n🎉 You should now be able to open the web interface on http://localhost:3000. Nothing else is exposed by default.( For old web interface, accessing  http://localhost:3030)\n\n## How to get and set Kimi / Qwen / ZhipuAI Token?\n\nHow to get Token?\n\nWe are using [https://github.com/LLM-Red-Team](https://github.com/LLM-Red-Team) projects to provide those service, you can reference to their readme.\n\nReference : [https://github.com/LLM-Red-Team/kimi-free-api](https://github.com/LLM-Red-Team/kimi-free-api)\n\n![setting token](./doc/Screenshot-3.png)\n\n## How to using custom LLM like ollama? (Yes we love ollama)\n\n1. start ollama serve\n\n```bash\nexport OLLAMA_HOST=0.0.0.0\nollama serve\n```\n\n2. set ollama url in setting:\nYou MUST using your computer's ip address, not localhost/127.0.0.1, because in docker you can't access this address.\nThe model name is the model you want to serve by ollama.\n![setting custom llm url](./doc/Screenshot-2.png)\n\nollama model Reference : [https://ollama.com/library](https://ollama.com/library)\n\n### How to update to latest\n\n```bash\ncd ./FreeAskInternet\ngit pull\ndocker compose down\ndocker compose rm backend\ndocker compose rm free_ask_internet_ui\ndocker image rm nashsu/free_ask_internet\ndocker image rm nashsu/free_ask_internet_ui\ndocker-compose up -d\n```\n\n## Credits\n\n- ChatGPT-Next-Web : [https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web](https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web)\n- FreeGPT35: [https://github.com/missuo/FreeGPT35](https://github.com/missuo/FreeGPT35)\n- Kimi\\Qwen\\ZhipuAI [https://github.com/LLM-Red-Team](https://github.com/LLM-Red-Team)\n- searxng: [https://github.com/searxng/searxng](https://github.com/searxng/searxng)\n\n## Special thanks to our logo designer\n\n[AdlerMurcus](https://github.com/AdlerMurcus)\n\n<a href=\"https://github.com/AdlerMurcus\">\n  <img src=\"https://avatars.githubusercontent.com/u/40649955?v=4\" width=\"100\" height=\"100\" class=\"avatar avatar-user width-full border color-bg-default\"/>\n</a>\n\n## License\n\nApache-2.0 license\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=nashsu/FreeAskInternet&type=Date)](https://star-history.com/#nashsu/FreeAskInternet&Date)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 1.4951171875,
          "content": "services:\n  backend:\n    image: docker.io/nashsu/free_ask_internet:latest\n    depends_on:\n      - llm-freegpt35\n    restart: on-failure\n \n\n  freeaskinternet-ui:\n    image: docker.io/nashsu/free_ask_internet_ui:latest\n    ports:\n      - \"3000:80\"\n    environment:\n      BACKEND_HOST: \"backend:8000\"\n    depends_on:\n      - backend\n    restart: always\n\n  chatgpt-next-web:\n    image: yidadaa/chatgpt-next-web\n    ports:\n      - \"3030:3000\"\n    environment:\n      OPENAI_API_KEY: \"FreeAskInternet\"\n      # CODE: \"FreeAskInternet\" # 如果你想要设置页面的访问密码，请修改这里\n      BASE_URL: \"http://backend:8000\"\n      CUSTOM_MODELS: \"-all,+gpt-3.5-turbo\"\n    depends_on:\n      - llm-freegpt35\n    restart: always\n\n  llm-freegpt35:\n    image: missuo/freegpt35:latest\n    restart: always\n\n  llm-kimi:\n    image: vinlic/kimi-free-api:latest\n    restart: always\n    environment:\n      - TZ=Asia/Shanghai\n\n  llm-glm4:\n    image: vinlic/glm-free-api:latest\n    restart: always\n    environment:\n      - TZ=Asia/Shanghai\n\n\n  llm-qwen:\n    image: vinlic/qwen-free-api:latest\n    restart: always\n    environment:\n      - TZ=Asia/Shanghai\n\n  searxng:\n    image: docker.io/searxng/searxng:latest\n    volumes:\n      - ./searxng:/etc/searxng:rw\n    environment:\n      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETGID\n      - SETUID\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '1m'\n        max-file: '1'\n    restart: always\n"
        },
        {
          "name": "free_ask_internet.py",
          "type": "blob",
          "size": 9.4970703125,
          "content": "# -*- coding: utf-8 -*-\n\nimport json\nimport os \nfrom pprint import pprint\nimport requests\nimport trafilatura\nfrom trafilatura import bare_extraction\nfrom concurrent.futures import ThreadPoolExecutor\nimport concurrent\nimport requests\nimport openai\nimport time \nfrom datetime import datetime\nfrom urllib.parse import urlparse\nimport tldextract\nimport platform\nimport urllib.parse\n\n \ndef extract_url_content(url):\n    downloaded = trafilatura.fetch_url(url)\n    content =  trafilatura.extract(downloaded)\n    \n    return {\"url\":url, \"content\":content}\n\n\n \n\ndef search_web_ref(query:str, debug=False):\n \n    content_list = []\n\n    try:\n\n        safe_string = urllib.parse.quote_plus(\":all !general \" + query)\n\n        response = requests.get('http://searxng:8080?q=' + safe_string + '&format=json')\n        response.raise_for_status()\n        search_results = response.json()\n \n        if debug:\n            print(\"JSON Response:\")\n            pprint(search_results)\n        pedding_urls = []\n\n        conv_links = []\n\n        if search_results.get('results'):\n            for item in search_results.get('results')[0:9]:\n                name = item.get('title')\n                snippet = item.get('content')\n                url = item.get('url')\n                pedding_urls.append(url)\n\n                if url:\n                    url_parsed = urlparse(url)\n                    domain = url_parsed.netloc\n                    icon_url =  url_parsed.scheme + '://' + url_parsed.netloc + '/favicon.ico'\n                    site_name = tldextract.extract(url).domain\n \n                conv_links.append({\n                    'site_name':site_name,\n                    'icon_url':icon_url,\n                    'title':name,\n                    'url':url,\n                    'snippet':snippet\n                })\n\n            results = []\n            futures = []\n\n            executor = ThreadPoolExecutor(max_workers=10) \n            for url in pedding_urls:\n                futures.append(executor.submit(extract_url_content,url))\n            try:\n                for future in futures:\n                    res = future.result(timeout=5)\n                    results.append(res)\n            except concurrent.futures.TimeoutError:\n                print(\"任务执行超时\")\n                executor.shutdown(wait=False,cancel_futures=True)\n\n            for content in results:\n                if content and content.get('content'):\n                    \n                    item_dict = {\n                        \"url\":content.get('url'),\n                        \"content\": content.get('content'),\n                        \"length\":len(content.get('content'))\n                    }\n                    content_list.append(item_dict)\n                if debug:\n                    print(\"URL: {}\".format(url))\n                    print(\"=================\")\n \n        return  conv_links,content_list\n    except Exception as ex:\n        raise ex\n\n\ndef gen_prompt(question,content_list, lang=\"zh-CN\", context_length_limit=11000,debug=False):\n    \n    limit_len = (context_length_limit - 2000)\n    if len(question) > limit_len:\n        question = question[0:limit_len]\n    \n    ref_content = [ item.get(\"content\") for item in content_list]\n    \n    answer_language = ' Simplified Chinese '\n    if lang == \"zh-CN\":\n        answer_language = ' Simplified Chinese '\n    if lang == \"zh-TW\":\n        answer_language = ' Traditional Chinese '\n    if lang == \"en-US\":\n        answer_language = ' English '\n\n\n    if len(ref_content) > 0:\n        \n        if False:\n            prompts = '''\n            您是一位由 nash_su 开发的大型语言人工智能助手。您将被提供一个用户问题，并需要撰写一个清晰、简洁且准确的答案。提供了一组与问题相关的上下文，每个都以[[citation:x]]这样的编号开头，x代表一个数字。请在适当的情况下在句子末尾引用上下文。答案必须正确、精确，并以专家的中立和职业语气撰写。请将答案限制在2000个标记内。不要提供与问题无关的信息，也不要重复。如果给出的上下文信息不足，请在相关主题后写上“信息缺失：”。请按照引用编号[citation:x]的格式在答案中对应部分引用上下文。如果一句话源自多个上下文，请列出所有相关的引用编号，例如[citation:3][citation:5]，不要将引用集中在最后返回，而是在答案对应部分列出。除非是代码、特定的名称或引用编号，答案的语言应与问题相同。以下是上下文的内容集：\n            '''  + \"\\n\\n\" + \"```\" \n            ref_index = 1\n\n            for ref_text in ref_content:\n                \n                prompts = prompts + \"\\n\\n\" + \" [citation:{}]  \".format(str(ref_index)) +  ref_text\n                ref_index += 1\n\n            if len(prompts) >= limit_len:\n                prompts = prompts[0:limit_len]        \n            prompts = prompts + '''\n    ```\n    记住，不要一字不差的重复上下文内容. 回答必须使用简体中文，如果回答很长，请尽量结构化、分段落总结。请按照引用编号[citation:x]的格式在答案中对应部分引用上下文。如果一句话源自多个上下文，请列出所有相关的引用编号，例如[citation:3][citation:5]，不要将引用集中在最后返回，而是在答案对应部分列出。下面是用户问题：\n    ''' + question  \n        else:\n            prompts = '''\n            You are a large language AI assistant develop by nash_su. You are given a user question, and please write clean, concise and accurate answer to the question. You will be given a set of related contexts to the question, each starting with a reference number like [[citation:x]], where x is a number. Please use the context and cite the context at the end of each sentence if applicable.\n            Your answer must be correct, accurate and written by an expert using an unbiased and professional tone. Please limit to 1024 tokens. Do not give any information that is not related to the question, and do not repeat. Say \"information is missing on\" followed by the related topic, if the given context do not provide sufficient information.\n\n            Please cite the contexts with the reference numbers, in the format [citation:x]. If a sentence comes from multiple contexts, please list all applicable citations, like [citation:3][citation:5]. Other than code and specific names and citations, your answer must be written in the same language as the question.\n            Here are the set of contexts:\n            '''  + \"\\n\\n\" + \"```\" \n            ref_index = 1\n\n            for ref_text in ref_content:\n                \n                prompts = prompts + \"\\n\\n\" + \" [citation:{}]  \".format(str(ref_index)) +  ref_text\n                ref_index += 1\n\n            if len(prompts) >= limit_len:\n                prompts = prompts[0:limit_len]        \n            prompts = prompts + '''\n            ```\n            Above is the reference contexts. Remember, don't repeat the context word for word. Answer in ''' + answer_language + '''. If the response is lengthy, structure it in paragraphs and summarize where possible. Cite the context using the format [citation:x] where x is the reference number. If a sentence originates from multiple contexts, list all relevant citation numbers, like [citation:3][citation:5]. Don't cluster the citations at the end but include them in the answer where they correspond.\n            Remember, don't blindly repeat the contexts verbatim. And here is the user question:\n            ''' + question  \n \n     \n    else:\n        prompts = question\n\n    if debug:\n        print(prompts)\n        print(\"总长度：\"+ str(len(prompts)))\n    return prompts\n\n\ndef chat(prompt, model:str,llm_auth_token:str,llm_base_url:str,using_custom_llm=False,stream=True, debug=False):\n    openai.base_url = \"http://127.0.0.1:3040/v1/\"\n\n    if model == \"gpt3.5\":\n        openai.base_url = \"http://llm-freegpt35:3040/v1/\"\n    \n    if model == \"kimi\":\n        openai.base_url = \"http://llm-kimi:8000/v1/\"\n    if model == \"glm4\":\n        openai.base_url = \"http://llm-glm4:8000/v1/\"\n    if model == \"qwen\":\n        openai.base_url = \"http://llm-qwen:8000/v1/\"\n    \n\n    if llm_auth_token == '':\n        llm_auth_token = \"CUSTOM\"\n        \n    openai.api_key = llm_auth_token\n\n    if using_custom_llm:\n        openai.base_url = llm_base_url\n        openai.api_key = llm_auth_token\n\n\n    total_content = \"\"\n    for chunk in openai.chat.completions.create(\n        model=model,\n        messages=[{\n            \"role\": \"user\",\n            \"content\": prompt\n        }],\n        stream=True,\n        max_tokens=1024,temperature=0.2\n    ):\n        stream_resp = chunk.dict()\n        token = stream_resp[\"choices\"][0][\"delta\"].get(\"content\", \"\")\n        if token:\n            \n            total_content += token\n            yield token\n    if debug:\n        print(total_content)\n \n\n \n    \ndef ask_internet(query:str,  debug=False):\n  \n    content_list = search_web_ref(query,debug=debug)\n    if debug:\n        print(content_list)\n    prompt = gen_prompt(query,content_list,context_length_limit=6000,debug=debug)\n    total_token =  \"\"\n \n    for token in chat(prompt=prompt):\n    # for token in daxianggpt.chat(prompt=prompt):\n        if token:\n            total_token += token\n            yield token\n    yield \"\\n\\n\"\n    # 是否返回参考资料\n    if True:\n        yield \"---\"\n        yield \"\\n\"\n        yield \"参考资料:\\n\"\n        count = 1\n        for url_content in content_list:\n            url = url_content.get('url')\n            yield \"*[{}. {}]({})*\".format(str(count),url,url )  \n            yield \"\\n\"\n            count += 1\n "
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.6396484375,
          "content": "annotated-types==0.6.0\nanyio==4.3.0\ncertifi==2024.2.2\ncharset-normalizer==3.3.2\nclick==8.1.7\ncourlan==1.0.0\ndateparser==1.2.0\ndistro==1.9.0\nexceptiongroup==1.2.0\nfastapi==0.110.1\nfilelock==3.13.3\nh11==0.14.0\nhtmldate==1.8.0\nhttpcore==1.0.5\nhttpx==0.27.0\nidna==3.6\njusText==3.0.0\nlangcodes==3.3.0\nlxml==5.1.1\nopenai==1.16.2\npydantic==2.6.4\npydantic_core==2.16.3\npython-dateutil==2.9.0.post0\npytz==2024.1\nregex==2023.12.25\nrequests==2.31.0\nrequests-file==2.0.0\nsix==1.16.0\nsniffio==1.3.1\nsse-starlette==2.0.0\nstarlette==0.37.2\ntld==0.13\ntldextract==5.1.2\ntqdm==4.66.2\ntrafilatura==1.8.1\ntyping_extensions==4.10.0\ntzlocal==5.2\nurllib3==2.2.1\nuvicorn==0.29.0\n"
        },
        {
          "name": "searxng",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 8.1708984375,
          "content": "# -*- coding: utf-8 -*-\n\nimport time\nimport uvicorn\nimport sys\nimport getopt\nimport json\nimport os \nfrom pprint import pprint\nimport requests\nimport trafilatura\nfrom trafilatura import bare_extraction\nfrom concurrent.futures import ThreadPoolExecutor\nimport concurrent\nimport requests\nimport openai\nimport time \nfrom datetime import datetime\nfrom urllib.parse import urlparse\nimport platform\nimport urllib.parse\nimport free_ask_internet\nfrom pydantic import BaseModel, Field\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom contextlib import asynccontextmanager\nfrom typing import Any, Dict, List, Literal, Optional, Union\nfrom sse_starlette.sse import ServerSentEvent, EventSourceResponse\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\nclass ModelCard(BaseModel):\n    id: str\n    object: str = \"model\"\n    created: int = Field(default_factory=lambda: int(time.time()))\n    owned_by: str = \"owner\"\n    root: Optional[str] = None\n    parent: Optional[str] = None\n    permission: Optional[list] = None\n\n\nclass ModelList(BaseModel):\n    object: str = \"list\"\n    data: List[ModelCard] = []\n\n\nclass ChatMessage(BaseModel):\n    role: Literal[\"user\", \"assistant\", \"system\"]\n    content: str\n\n\nclass DeltaMessage(BaseModel):\n    role: Optional[Literal[\"user\", \"assistant\", \"system\"]] = None\n    content: Optional[str] = None\n\n\nclass QueryRequest(BaseModel):\n    query:str\n    model: str\n    ask_type:  Literal[\"search\", \"llm\"]\n    llm_auth_token: Optional[str] = \"CUSTOM\"\n    llm_base_url: Optional[str] = \"\"\n    using_custom_llm:Optional[bool] = False\n    lang:Optional[str] = \"zh-CN\"\n\nclass ChatCompletionRequest(BaseModel):\n    model: str\n    messages: List[ChatMessage]\n    temperature: Optional[float] = None\n    top_p: Optional[float] = None\n    max_length: Optional[int] = None\n    stream: Optional[bool] = False\n\n\nclass ChatCompletionResponseChoice(BaseModel):\n    index: int\n    message: ChatMessage\n    finish_reason: Literal[\"stop\", \"length\"]\n\n\nclass ChatCompletionResponseStreamChoice(BaseModel):\n    index: int\n    delta: DeltaMessage\n    finish_reason: Optional[Literal[\"stop\", \"length\"]]\n\n\nclass ChatCompletionResponse(BaseModel):\n    model: str\n    object: Literal[\"chat.completion\", \"chat.completion.chunk\"]\n    choices: List[Union[ChatCompletionResponseChoice,\n                        ChatCompletionResponseStreamChoice]]\n    created: Optional[int] = Field(default_factory=lambda: int(time.time()))\n\nclass SearchItem(BaseModel):\n    url: str\n    icon_url: str\n    site_name:str\n    snippet:str\n    title:str \n\nclass SearchItemList(BaseModel):\n    search_items: List[SearchItem] = []\n \nclass SearchResp(BaseModel):\n    code:int\n    msg:str\n    data: List[SearchItem] = []\n \n\n@app.get(\"/v1/models\", response_model=ModelList)\nasync def list_models():\n    global model_args\n    model_card = ModelCard(id=\"gpt-3.5-turbo\")\n    return ModelList(data=[model_card])\n\n\n@app.post(\"/v1/chat/completions\", response_model=ChatCompletionResponse)\nasync def create_chat_completion(request: ChatCompletionRequest):\n    global model, tokenizer\n    print(request)\n    if request.messages[-1].role != \"user\":\n        raise HTTPException(status_code=400, detail=\"Invalid request\")\n    query = request.messages[-1].content\n\n\n    generate = predict(query, \"\", request.model)\n    return EventSourceResponse(generate, media_type=\"text/event-stream\")\n\n \n\ndef predict(query: str, history: None, model_id: str):\n    choice_data = ChatCompletionResponseStreamChoice(\n        index=0,\n        delta=DeltaMessage(role=\"assistant\"),\n        finish_reason=None\n    )\n    chunk = ChatCompletionResponse(model=model_id, choices=[\n                                choice_data], object=\"chat.completion.chunk\")\n    yield \"{}\".format(chunk.json(exclude_unset=True))\n    new_response = \"\"\n    current_length = 0\n    for token in free_ask_internet.ask_internet(query=query):\n    \n        new_response += token\n        if len(new_response) == current_length:\n            continue\n\n        new_text = new_response[current_length:]\n        current_length = len(new_response)\n\n        choice_data = ChatCompletionResponseStreamChoice(\n            index=0,\n            delta=DeltaMessage(content=new_text,role=\"assistant\"),\n            finish_reason=None\n        )\n        chunk = ChatCompletionResponse(model=model_id, choices=[\n                                       choice_data], object=\"chat.completion.chunk\")\n        yield \"{}\".format(chunk.json(exclude_unset=True))\n\n    choice_data = ChatCompletionResponseStreamChoice(\n        index=0,\n        delta=DeltaMessage(),\n        finish_reason=\"stop\"\n    )\n    chunk = ChatCompletionResponse(model=model_id, choices=[\n                                   choice_data], object=\"chat.completion.chunk\")\n    yield \"{}\".format(chunk.json(exclude_unset=True))\n    yield '[DONE]'\n \n\n\n@app.post(\"/api/search/get_search_refs\", response_model=SearchResp)\nasync def get_search_refs(request: QueryRequest):\n\n    global search_results\n    search_results = []\n    search_item_list = []\n    if request.ask_type == \"search\":\n        search_links,search_results = free_ask_internet.search_web_ref(request.query)\n        for search_item in search_links:\n            snippet = search_item.get(\"snippet\")\n            url = search_item.get(\"url\")\n            icon_url = search_item.get(\"icon_url\")\n            site_name = search_item.get(\"site_name\")\n            title = search_item.get(\"title\")\n    \n\n            si = SearchItem(snippet=snippet,url=url,icon_url=icon_url,site_name=site_name,title=title)\n\n            search_item_list.append(si)\n\n    resp = SearchResp(code=0,msg=\"success\",data=search_item_list)\n   \n    return  resp\n\ndef generator(prompt:str, model:str, llm_auth_token:str,llm_base_url:str, using_custom_llm=False,is_failed=False):\n    if is_failed:\n        yield \"搜索失败，没有返回结果\"\n    else:\n        total_token = \"\"\n        for token in  free_ask_internet.chat(prompt=prompt,model=model,llm_auth_token=llm_auth_token,llm_base_url=llm_base_url,using_custom_llm=using_custom_llm,stream=True):\n            total_token += token\n            yield token\n \n@app.post(\"/api/search/stream/{search_uuid}\")\nasync def stream(search_uuid:str,request: QueryRequest):\n    global search_results\n\n    if request.ask_type == \"llm\":\n            \n        answer_language = ' Simplified Chinese '\n        if request.lang == \"zh-CN\":\n            answer_language = ' Simplified Chinese '\n        if request.lang == \"zh-TW\":\n            answer_language = ' Traditional Chinese '\n        if request.lang == \"en-US\":\n            answer_language = ' English '\n        prompt = ' You are a large language AI assistant develop by nash_su. Answer user question in ' + answer_language + '. And here is the user question: ' + request.query\n        generate = generator(prompt,model=request.model,llm_auth_token=request.llm_auth_token, llm_base_url=request.llm_base_url, using_custom_llm=request.using_custom_llm)\n    else:\n        prompt = None\n        limit_count = 10\n\n        while limit_count > 0:\n            try:\n                if len(search_results) > 0:\n                    prompt = free_ask_internet.gen_prompt(request.query,search_results,lang=request.lang,context_length_limit=8000)\n                    break\n                else:\n                    limit_count -= 1\n                    time.sleep(1)\n            except Exception as err:\n                limit_count -= 1\n                time.sleep(1)\n        total_token =  \"\"\n        if prompt:   \n            generate = generator(prompt,model=request.model,llm_auth_token=request.llm_auth_token, llm_base_url=request.llm_base_url, using_custom_llm=request.using_custom_llm)\n        else:\n            generate = generator(prompt,model=request.model,llm_auth_token=request.llm_auth_token,llm_base_url=request.llm_base_url, using_custom_llm=request.using_custom_llm,is_failed=True)\n\n    # return EventSourceResponse(generate, media_type=\"text/event-stream\")\n    return StreamingResponse(generate, media_type=\"text/event-stream\")\n\ndef main():\n\n    port = 8000\n\n    search_results = []\n \n   \n    uvicorn.run(app, host='0.0.0.0', port=port, workers=1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        }
      ]
    }
  ]
}