{
  "metadata": {
    "timestamp": 1736560715370,
    "page": 383,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "skypilot-org/skypilot",
      "stars": 7023,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buildkite",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "**/.git\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1904296875,
          "content": "**/.DS_Store\n**/*.pyc\n**/__pycache__/\n*.egg-info/\n*.eggs/\n\ndocs/build/\ndocs/_build/\nbuild/\nsky_logs/\nsky/clouds/service_catalog/data_fetchers/*.csv\n.vscode/\n.idea/\n.env\n\n# For editor files\n*.swp\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.533203125,
          "content": "# Ensure this configuration aligns with format.sh and requirements.txt\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n\n-   repo: https://github.com/psf/black\n    rev: 22.10.0  # Match the version from requirements\n    hooks:\n    -   id: black\n        name: black (IBM specific)\n        files: \"^sky/skylet/providers/ibm/.*\"  # Match only files in the IBM directory\n\n-   repo: https://github.com/pycqa/isort\n    rev: 5.12.0  # Match the version from requirements\n    hooks:\n    # First isort command\n    -   id: isort\n        name: isort (general)\n        args:\n          - \"--sg=build/**\"  # Matches \"${ISORT_YAPF_EXCLUDES[@]}\"\n          - \"--sg=sky/skylet/providers/ibm/**\"\n    # Second isort command\n    -   id: isort\n        name: isort (IBM specific)\n        args:\n          - \"--profile=black\"\n          - \"-l=88\"\n          - \"-m=3\"\n        files: \"^sky/skylet/providers/ibm/.*\"  # Only match IBM-specific directory\n\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v0.991  # Match the version from requirements\n    hooks:\n    -   id: mypy\n        args:\n            # From tests/mypy_files.txt\n            - \"sky\"\n            - \"--exclude\"\n            - \"sky/benchmark|sky/callbacks|sky/skylet/providers/azure|sky/resources.py|sky/backends/monkey_patches\"\n        pass_filenames: false\n        additional_dependencies:\n            - types-PyYAML\n            - types-requests<2.31  # Match the condition in requirements.txt\n            - types-setuptools\n            - types-cachetools\n            - types-pyvmomi\n\n-   repo: https://github.com/google/yapf\n    rev: v0.32.0  # Match the version from requirements\n    hooks:\n    -   id: yapf\n        name: yapf\n        exclude: (sky/skylet/providers/ibm/.*)  # Matches exclusions from the script\n        args: ['--recursive', '--parallel', '--in-place']  # Only necessary flags\n        additional_dependencies: [toml==0.10.2]\n\n-   repo: https://github.com/pylint-dev/pylint\n    rev: v2.14.5  # Match the version from requirements\n    hooks:\n    -   id: pylint\n        additional_dependencies:\n            - pylint-quotes==0.2.3  # Match the version from requirements\n        name: pylint\n        args:\n            - --rcfile=.pylintrc  # Use your custom pylint configuration\n            - --load-plugins=pylint_quotes  # Load the pylint-quotes plugin\n        files: ^sky/  # Only include files from the 'sky/' directory\n        exclude: ^sky/skylet/providers/ibm/\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 14.07421875,
          "content": "# This Pylint rcfile contains a best-effort configuration to uphold the\n# best-practices and style described in the Google Python style guide:\n#   https://google.github.io/styleguide/pyguide.html\n#\n# Its canonical open-source location is:\n#   https://google.github.io/styleguide/pylintrc\n\n[MAIN]\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=third_party,ray_patches,providers\n\n# Files or directories matching the regex patterns are skipped. The regex\n# matches against base names, not paths.\nignore-patterns=\n\n# Pickle collected data for later comparisons.\npersistent=no\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=pylint.extensions.docstyle\n\n# Use multiple processes to speed up Pylint.\njobs=4\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=R,\n        abstract-method,\n        apply-builtin,\n        arguments-differ,\n        attribute-defined-outside-init,\n        backtick,\n        bad-option-value,\n        basestring-builtin,\n        buffer-builtin,\n        c-extension-no-member,\n        consider-using-enumerate,\n        consider-using-f-string, # FIXME(sky): make pass\n        cmp-builtin,\n        cmp-method,\n        coerce-builtin,\n        coerce-method,\n        delslice-method,\n        div-method,\n        duplicate-code,\n        eq-without-hash,\n        execfile-builtin,\n        file-builtin,\n        filter-builtin-not-iterating,\n        fixme,\n        getslice-method,\n        global-statement,\n        hex-method,\n        idiv-method,\n        implicit-str-concat,\n        import-error,\n        import-self,\n        import-star-module-level,\n        inconsistent-return-statements,\n        input-builtin,\n        intern-builtin,\n        invalid-str-codec,\n        locally-disabled,\n        logging-format-interpolation,  # FIXME(sky): make pass.\n        logging-fstring-interpolation,  # FIXME(sky): make pass.\n        long-builtin,\n        long-suffix,\n        map-builtin-not-iterating,\n        misplaced-comparison-constant,\n        missing-function-docstring,\n        metaclass-assignment,\n        next-method-called,\n        next-method-defined,\n        no-absolute-import,\n        no-else-break,\n        no-else-continue,\n        no-else-raise,\n        no-else-return,\n        no-init,  # added\n        no-member,\n        no-name-in-module,\n        no-self-use,\n        nonzero-method,\n        oct-method,\n        old-division,\n        old-ne-operator,\n        old-octal-literal,\n        old-raise-syntax,\n        parameter-unpacking,\n        print-statement,\n        raising-string,\n        range-builtin-not-iterating,\n        raw_input-builtin,\n        rdiv-method,\n        reduce-builtin,\n        relative-import,\n        reload-builtin,\n        round-builtin,\n        setslice-method,\n        signature-differs,\n        standarderror-builtin,\n        suppressed-message,\n        sys-max-int,\n        too-few-public-methods,\n        too-many-ancestors,\n        too-many-arguments,\n        too-many-boolean-expressions,\n        too-many-branches,\n        too-many-instance-attributes,\n        too-many-locals,\n        too-many-nested-blocks,\n        too-many-public-methods,\n        too-many-return-statements,\n        too-many-statements,\n        trailing-newlines,\n        unichr-builtin,\n        unicode-builtin,\n        unnecessary-lambda-assignment, # FIXME(sky): make pass.\n        unnecessary-pass,\n        unpacking-in-except,\n        useless-else-on-loop,\n        useless-object-inheritance,\n        useless-suppression,\n        using-cmp-argument,\n        wrong-import-order,\n        xrange-builtin,\n        zip-builtin-not-iterating,\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[BASIC]\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=main,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl\n\n# Regular expression matching correct function names\nfunction-rgx=^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$\n\n# Regular expression matching correct variable names\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct constant names\nconst-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression matching correct attribute names\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\n\n# Regular expression matching correct argument names\nargument-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression matching correct class names\nclass-rgx=^_?[A-Z][a-zA-Z0-9]*$\n\n# Regular expression matching correct module names\nmodule-rgx=^(_?[a-z][a-z0-9_]*|__init__)$\n\n# Regular expression matching correct method names\nmethod-rgx=(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=(__.*__|main|test.*|.*test|.*Test)$\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=10\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n\n# TODO(https://github.com/pylint-dev/pylint/issues/3352): Direct pylint to exempt\n# lines made too long by directives to pytype.\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=(?x)(\n  ^\\s*(\\#\\ )?<?https?://\\S+>?$|\n  ^\\s*(from\\s+\\S+\\s+)?import\\s+.+$)\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=yes\n\n# Maximum number of lines in a module\nmax-module-lines=99999\n\n# String used as indentation unit.  The internal Google style guide mandates 2\n# spaces.  Google's externaly-published style guide says 4, consistent with\n# PEP 8.  Here, we use 2 spaces, for conformity with many open-sourced Google\n# projects (like TensorFlow).\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=TODO\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=yes\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=^\\*{0,2}(_$|unused_|dummy_)\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six,six.moves,past.builtins,future.builtins,functools\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging,absl.logging,tensorflow.io.logging\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,\n                   TERMIOS,\n                   Bastion,\n                   rexec,\n                   sets\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant, absl\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls,\n                            class_\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=StandardError,\n                       Exception,\n                       BaseException\n\n#######\n\n# https://github.com/edaniszewski/pylint-quotes#configuration\nstring-quote=single\ntriple-quote=double\ndocstring-quote=double\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.484375,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.10\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - method: pip\n      path: .\n    - requirements: docs/requirements-docs.txt\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.2392578125,
          "content": "# Contributing to SkyPilot\n\nThank you for your interest in contributing to SkyPilot! We welcome and value\nall contributions to the project, including but not limited to:\n\n* [Bug reports](https://github.com/skypilot-org/skypilot/issues) and [discussions](https://github.com/skypilot-org/skypilot/discussions)\n* [Pull requests](https://github.com/skypilot-org/skypilot/pulls) for bug fixes and new features\n* Test cases to make the codebase more robust\n* Examples\n* Documentation\n* Tutorials, blog posts and talks on SkyPilot\n\n## Contributing Code\n\nWe use GitHub to track issues and features. For new contributors, we recommend looking at issues labeled [\"good first issue\"](https://github.com/sky-proj/sky/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+).\n\n### Installing SkyPilot for development\n```bash\n# SkyPilot requires python >= 3.7.\n# You can just install the dependencies for\n# certain clouds, e.g., \".[aws,azure,gcp,lambda]\"\npip install -e \".[all]\"\npip install -r requirements-dev.txt\n```\n\n### Testing\nTo run smoke tests (NOTE: Running all smoke tests launches ~20 clusters):\n```\n# Run all tests on AWS and Azure (default smoke test clouds)\npytest tests/test_smoke.py\n\n# Terminate a test's cluster even if the test failed (default is to keep it around for debugging)\npytest tests/test_smoke.py --terminate-on-failure\n\n# Re-run last failed tests\npytest --lf\n\n# Run one of the smoke tests\npytest tests/test_smoke.py::test_minimal\n\n# Only run managed spot tests\npytest tests/test_smoke.py --managed-spot\n\n# Only run test for GCP + generic tests\npytest tests/test_smoke.py --gcp\n\n# Change cloud for generic tests to Azure\npytest tests/test_smoke.py --generic-cloud azure\n```\n\nFor profiling code, use:\n```\npip install tuna # Tuna is used for visualization of profiling data.\npython3 -m cProfile -o sky.prof -m sky.cli status # Or some other command\ntuna sky.prof\n```\n\n#### Testing in a container\nIt is often useful to test your changes in a clean environment set up from scratch. Using a container is a good way to do this.\nWe have a dev container image `berkeleyskypilot/skypilot-debug` which we use for debugging skypilot inside a container. Use this image by running:\n\n```bash\ndocker run -it --rm --name skypilot-debug berkeleyskypilot/skypilot-debug /bin/bash\n# On Apple silicon Macs:\ndocker run --platform linux/amd64 -it --rm --name skypilot-debug berkeleyskypilot/skypilot-debug /bin/bash\n```\n\nIt has some convenience features which you might find helpful (see [Dockerfile](https://github.com/skypilot-org/skypilot/blob/dev/dockerfile_debug/Dockerfile_debug)):\n* Common dependencies and some utilities (rsync, screen, vim, nano etc) are pre-installed\n* requirements-dev.txt is pre-installed\n* Environment variables for dev/debug are set correctly\n* Automatically clones the latest master to `/sky_repo/skypilot` when the container is launched.\n  * Note that you still have to manually run `pip install -e \".[all]\"` to install skypilot, it is not pre-installed.\n  * If your branch is on the SkyPilot repo, you can run `git checkout <your_branch>` to switch to your branch.\n\n### Submitting pull requests\n- Fork the SkyPilot repository and create a new branch for your changes.\n- If relevant, add tests for your changes. For changes that touch the core system, run the [smoke tests](#testing) and ensure they pass.\n- Follow the [Google style guide](https://google.github.io/styleguide/pyguide.html).\n- Ensure code is properly formatted by running [`format.sh`](https://github.com/skypilot-org/skypilot/blob/master/format.sh).\n  - [Optional] You can also install pre-commit hooks by running `pre-commit install` to automatically format your code on commit.\n- Push your changes to your fork and open a pull request in the SkyPilot repository.\n- In the PR description, write a `Tested:` section to describe relevant tests performed.\n\n### Some general engineering practice suggestions\n\nThese are suggestions, not strict rules to follow. When in doubt, follow the [style guide](https://google.github.io/styleguide/pyguide.html).\n\n* Use `TODO(author_name)`/`FIXME(author_name)` instead of blank `TODO/FIXME`. This is critical for tracking down issues. You can write TODOs with your name and assign it to others (on github) if it is someone else's issue.\n* Delete your branch after merging it. This keeps the repo clean and faster to sync.\n* Use an exception if this is an error. Only use `assert` for debugging or proof-checking purposes. This is because exception messages usually contain more information.\n* Use modern python features and styles that increases code quality.\n  * Use f-string instead of `.format()` for short expressions to increase readability.\n  * Use `class MyClass:` instead of `class MyClass(object):`. The later one was a workaround for python2.x.\n  * Use `abc` module for abstract classes to ensure all abstract methods are implemented.\n  * Use python typing. But you should not import external objects just for typing. Instead, import typing-only external objects under `if typing.TYPE_CHECKING:`.\n\n### Environment variables for developers\n- `export SKYPILOT_DISABLE_USAGE_COLLECTION=1` to disable usage logging.\n- `export SKYPILOT_DEBUG=1` to show debugging logs (use logging.DEBUG level).\n- `export SKYPILOT_MINIMIZE_LOGGING=1` to minimize logging. Useful when trying to avoid multiple lines of output, such as for demos.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.30859375,
          "content": "# Use the latest version with Python 3.10\nFROM continuumio/miniconda3:23.3.1-0\n\n# Install dependencies\nRUN conda install -c conda-forge google-cloud-sdk && \\\n    apt update -y && \\\n    apt install rsync vim -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install sky\nRUN pip install --no-cache-dir \"skypilot[all]==0.6.0\"\n"
        },
        {
          "name": "Dockerfile_k8s",
          "type": "blob",
          "size": 1.923828125,
          "content": "FROM --platform=linux/amd64 continuumio/miniconda3:23.3.1-0\n\n# TODO(romilb): Investigate if this image can be consolidated with the skypilot\n#  client image (`Dockerfile`)\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Initialize conda for root user, install ssh and other local dependencies\nRUN apt update -y && \\\n    apt install git gcc rsync sudo patch openssh-server pciutils nano fuse socat netcat-openbsd curl -y && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    apt remove -y python3 && \\\n    conda init\n\n# Setup SSH and generate hostkeys\nRUN mkdir -p /var/run/sshd && \\\n    sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \\\n    sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd && \\\n    cd /etc/ssh/ && \\\n    ssh-keygen -A\n\n# Setup new user named sky and add to sudoers. Also add /opt/conda/bin to sudo path.\nRUN useradd -m -s /bin/bash sky && \\\n    echo \"sky ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers && \\\n    echo 'Defaults        secure_path=\"/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"' > /etc/sudoers.d/sky\n\n# Switch to sky user\nUSER sky\n\n# Set HOME environment variable for sky user\nENV HOME /home/sky\n\n# Set current working directory\nWORKDIR /home/sky\n\n# Install skypilot dependencies\nRUN conda init && export PIP_DISABLE_PIP_VERSION_CHECK=1 && \\\n    python3 -m venv ~/skypilot-runtime && \\\n    PYTHON_EXEC=$(echo ~/skypilot-runtime)/bin/python && \\\n    $PYTHON_EXEC -m pip install 'skypilot-nightly[remote,kubernetes]' 'ray[default]==2.9.3' 'pycryptodome==3.12.0' && \\\n    $PYTHON_EXEC -m pip uninstall skypilot-nightly -y && \\\n    curl -LO \"https://dl.k8s.io/release/v1.28.11/bin/linux/amd64/kubectl\" && \\\n    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \\\n    echo 'export PATH=\"$PATH:$HOME/.local/bin\"' >> ~/.bashrc\n\n# Set PYTHONUNBUFFERED=1 to have Python print to stdout/stderr immediately\nENV PYTHONUNBUFFERED=1\n"
        },
        {
          "name": "Dockerfile_k8s_gpu",
          "type": "blob",
          "size": 2.70703125,
          "content": "# We use the cuda runtime image instead of devel image to reduce size (1.3GB vs 3.6GB)\nFROM nvidia/cuda:12.1.1-runtime-ubuntu20.04\n\nARG DEBIAN_FRONTEND=noninteractive\n\n# Install ssh and other local dependencies\n# We remove cuda lists to avoid conflicts with the cuda version installed by ray\nRUN rm -rf /etc/apt/sources.list.d/cuda* && \\\n    apt update -y && \\\n    apt install git gcc rsync sudo patch openssh-server pciutils nano fuse unzip socat netcat-openbsd curl -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup SSH and generate hostkeys\nRUN sudo mkdir -p /var/run/sshd && \\\n    sudo sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \\\n    sudo sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd && \\\n    cd /etc/ssh/ && \\\n    sudo ssh-keygen -A\n\n# Setup new user named sky and add to sudoers. \\\n# Also add /opt/conda/bin to sudo path and give sky user permission to run sudo without password\nRUN sudo useradd -m -s /bin/bash sky && \\\n    sudo /bin/bash -c 'echo \"sky ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers' && \\\n    sudo /bin/bash -c \"echo 'Defaults        secure_path=\\\"/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"' > /etc/sudoers.d/sky\"\n\n# Switch to sky user\nUSER sky\n\n# Set HOME environment variable for sky user\nENV HOME /home/sky\n\n# Set current working directory\nWORKDIR /home/sky\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# Install conda and other dependencies\n# Keep the conda and Ray versions below in sync with the ones in skylet.constants\n# Keep this section in sync with the custom image optimization recommendations in our docs (kubernetes-getting-started.rst)\nRUN curl https://repo.anaconda.com/miniconda/Miniconda3-py310_23.11.0-2-Linux-x86_64.sh -o Miniconda3-Linux-x86_64.sh && \\\n    bash Miniconda3-Linux-x86_64.sh -b && \\\n    eval \"$(~/miniconda3/bin/conda shell.bash hook)\" && conda init && conda config --set auto_activate_base true && conda activate base && \\\n    grep \"# >>> conda initialize >>>\" ~/.bashrc || { conda init && source ~/.bashrc; } && \\\n    rm Miniconda3-Linux-x86_64.sh && \\\n    export PIP_DISABLE_PIP_VERSION_CHECK=1 && \\\n    python3 -m venv ~/skypilot-runtime && \\\n    PYTHON_EXEC=$(echo ~/skypilot-runtime)/bin/python && \\\n    $PYTHON_EXEC -m pip install 'skypilot-nightly[remote,kubernetes]' 'ray[default]==2.9.3' 'pycryptodome==3.12.0' && \\\n    $PYTHON_EXEC -m pip uninstall skypilot-nightly -y && \\\n    curl -LO \"https://dl.k8s.io/release/v1.28.11/bin/linux/amd64/kubectl\" && \\\n    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \\\n    echo 'export PATH=\"$PATH:$HOME/.local/bin\"' >> ~/.bashrc\n\n# Set PYTHONUNBUFFERED=1 to have Python print to stdout/stderr immediately\nENV PYTHONUNBUFFERED=1\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.884765625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n--------------------------------------------------------------------------------\n\nCode in examples/docker/detectron2/ from\nhttps://github.com/facebookresearch/detectron2/tree/main/docker/\nGit Revision: 0cebda53b71aead685627487d39dae4fa64017fb\n\nCopyright 2019-2022 detectron2 developers\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0263671875,
          "content": "sky/setup_files/MANIFEST.in"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.4228515625,
          "content": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/skypilot-org/skypilot/master/docs/source/images/skypilot-wide-dark-1k.png\">\n    <img alt=\"SkyPilot\" src=\"https://raw.githubusercontent.com/skypilot-org/skypilot/master/docs/source/images/skypilot-wide-light-1k.png\" width=55%>\n  </picture>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://docs.skypilot.co/\">\n    <img alt=\"Documentation\" src=\"https://readthedocs.org/projects/skypilot/badge/?version=latest\">\n  </a>\n\n  <a href=\"https://github.com/skypilot-org/skypilot/releases\">\n    <img alt=\"GitHub Release\" src=\"https://img.shields.io/github/release/skypilot-org/skypilot.svg\">\n  </a>\n\n  <a href=\"http://slack.skypilot.co\">\n    <img alt=\"Join Slack\" src=\"https://img.shields.io/badge/SkyPilot-Join%20Slack-blue?logo=slack\">\n  </a>\n\n</p>\n\n<h3 align=\"center\">\n    Run AI on Any Infra — Unified, Faster, Cheaper\n</h3>\n\n----\n:fire: *News* :fire:\n- [Oct 2024] :tada: **SkyPilot crossed 1M+ downloads** :tada:: Thank you to our community! [**Twitter/X**](https://x.com/skypilot_org/status/1844770841718067638)\n- [Sep 2024] Point, Launch and Serve **Llama 3.2** on Kubernetes or Any Cloud: [**example**](./llm/llama-3_2/)\n- [Sep 2024] Run and deploy [**Pixtral**](./llm/pixtral), the first open-source multimodal model from Mistral AI.\n- [Jun 2024] Reproduce **GPT** with [llm.c](https://github.com/karpathy/llm.c/discussions/481) on any cloud: [**guide**](./llm/gpt-2/)\n- [Apr 2024] Serve [**Qwen-110B**](https://qwenlm.github.io/blog/qwen1.5-110b/) on your infra: [**example**](./llm/qwen/)\n- [Apr 2024] Using [**Ollama**](https://github.com/ollama/ollama) to deploy quantized LLMs on CPUs and GPUs: [**example**](./llm/ollama/)\n- [Feb 2024] Deploying and scaling [**Gemma**](https://blog.google/technology/developers/gemma-open-models/) with SkyServe: [**example**](./llm/gemma/)\n- [Feb 2024] Serving [**Code Llama 70B**](https://ai.meta.com/blog/code-llama-large-language-model-coding/) with vLLM and SkyServe: [**example**](./llm/codellama/)\n- [Dec 2023] [**Mixtral 8x7B**](https://mistral.ai/news/mixtral-of-experts/), a high quality sparse mixture-of-experts model, was released by Mistral AI! Deploy via SkyPilot on any cloud: [**example**](./llm/mixtral/)\n- [Nov 2023] Using [**Axolotl**](https://github.com/OpenAccess-AI-Collective/axolotl) to finetune Mistral 7B on the cloud (on-demand and spot): [**example**](./llm/axolotl/)\n\n**LLM Finetuning Cookbooks**: Finetuning Llama 2 / Llama 3.1 in your own cloud environment, privately: Llama 2 [**example**](./llm/vicuna-llama-2/) and [**blog**](https://blog.skypilot.co/finetuning-llama2-operational-guide/); Llama 3.1 [**example**](./llm/llama-3_1-finetuning/) and [**blog**](https://blog.skypilot.co/finetune-llama-3_1-on-your-infra/)\n\n<details>\n  <summary>Archived</summary>\n\n- [Jul 2024] [**Finetune**](./llm/llama-3_1-finetuning/) and [**serve**](./llm/llama-3_1/) **Llama 3.1** on your infra\n- [Apr 2024] Serve and finetune [**Llama 3**](https://docs.skypilot.co/en/latest/gallery/llms/llama-3.html) on any cloud or Kubernetes: [**example**](./llm/llama-3/)\n- [Mar 2024] Serve and deploy [**Databricks DBRX**](https://www.databricks.com/blog/introducing-dbrx-new-state-art-open-llm) on your infra: [**example**](./llm/dbrx/)\n- [Feb 2024] Speed up your LLM deployments with [**SGLang**](https://github.com/sgl-project/sglang) for 5x throughput on SkyServe: [**example**](./llm/sglang/)\n- [Dec 2023] Using [**LoRAX**](https://github.com/predibase/lorax) to serve 1000s of finetuned LLMs on a single instance in the cloud: [**example**](./llm/lorax/)\n- [Sep 2023] [**Mistral 7B**](https://mistral.ai/news/announcing-mistral-7b/), a high-quality open LLM, was released! Deploy via SkyPilot on any cloud: [**Mistral docs**](https://docs.mistral.ai/self-deployment/skypilot)\n- [Sep 2023] Case study: [**Covariant**](https://covariant.ai/) transformed AI development on the cloud using SkyPilot, delivering models 4x faster cost-effectively: [**read the case study**](https://blog.skypilot.co/covariant/)\n- [Jul 2023] Self-Hosted **Llama-2 Chatbot** on Any Cloud: [**example**](./llm/llama-2/)\n- [Jun 2023] Serving LLM 24x Faster On the Cloud [**with vLLM**](https://vllm.ai/) and SkyPilot: [**example**](./llm/vllm/), [**blog post**](https://blog.skypilot.co/serving-llm-24x-faster-on-the-cloud-with-vllm-and-skypilot/)\n- [Apr 2023] [SkyPilot YAMLs](./llm/vicuna/) for finetuning & serving the [Vicuna LLM](https://lmsys.org/blog/2023-03-30-vicuna/) with a single command!\n\n</details>\n\n----\n\nSkyPilot is a framework for running AI and batch workloads on any infra, offering unified execution, high cost savings, and high GPU availability.\n\nSkyPilot **abstracts away infra burdens**:\n- Launch [dev clusters](https://docs.skypilot.co/en/latest/examples/interactive-development.html), [jobs](https://docs.skypilot.co/en/latest/examples/managed-jobs.html), and [serving](https://docs.skypilot.co/en/latest/serving/sky-serve.html) on any infra\n- Easy job management: queue, run, and auto-recover many jobs\n\nSkyPilot **supports multiple clusters, clouds, and hardware** ([the Sky](https://arxiv.org/abs/2205.07147)):\n- Bring your reserved GPUs, Kubernetes clusters, or 12+ clouds\n- [Flexible provisioning](https://docs.skypilot.co/en/latest/examples/auto-failover.html) of GPUs, TPUs, CPUs, with auto-retry\n\nSkyPilot **cuts your cloud costs & maximizes GPU availability**:\n* [Autostop](https://docs.skypilot.co/en/latest/reference/auto-stop.html): automatic cleanup of idle resources\n* [Managed Spot](https://docs.skypilot.co/en/latest/examples/managed-jobs.html): 3-6x cost savings using spot instances, with preemption auto-recovery\n* [Optimizer](https://docs.skypilot.co/en/latest/examples/auto-failover.html): 2x cost savings by auto-picking the cheapest & most available infra\n\nSkyPilot supports your existing GPU, TPU, and CPU workloads, with no code changes.\n\nInstall with pip:\n```bash\n# Choose your clouds:\npip install -U \"skypilot[kubernetes,aws,gcp,azure,oci,lambda,runpod,fluidstack,paperspace,cudo,ibm,scp]\"\n```\nTo get the latest features and fixes, use the nightly build or [install from source](https://docs.skypilot.co/en/latest/getting-started/installation.html):\n```bash\n# Choose your clouds:\npip install \"skypilot-nightly[kubernetes,aws,gcp,azure,oci,lambda,runpod,fluidstack,paperspace,cudo,ibm,scp]\"\n```\n\n[Current supported infra](https://docs.skypilot.co/en/latest/getting-started/installation.html) (Kubernetes; AWS, GCP, Azure, OCI, Lambda Cloud, Fluidstack, RunPod, Cudo, Paperspace, Cloudflare, Samsung, IBM, VMware vSphere):\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/skypilot-org/skypilot/master/docs/source/images/cloud-logos-dark.png\">\n    <img alt=\"SkyPilot\" src=\"https://raw.githubusercontent.com/skypilot-org/skypilot/master/docs/source/images/cloud-logos-light.png\" width=85%>\n  </picture>\n</p>\n\n\n## Getting Started\nYou can find our documentation [here](https://docs.skypilot.co/).\n- [Installation](https://docs.skypilot.co/en/latest/getting-started/installation.html)\n- [Quickstart](https://docs.skypilot.co/en/latest/getting-started/quickstart.html)\n- [CLI reference](https://docs.skypilot.co/en/latest/reference/cli.html)\n\n## SkyPilot in 1 Minute\n\nA SkyPilot task specifies: resource requirements, data to be synced, setup commands, and the task commands.\n\nOnce written in this [**unified interface**](https://docs.skypilot.co/en/latest/reference/yaml-spec.html) (YAML or Python API), the task can be launched on any available cloud.  This avoids vendor lock-in, and allows easily moving jobs to a different provider.\n\nPaste the following into a file `my_task.yaml`:\n\n```yaml\nresources:\n  accelerators: A100:8  # 8x NVIDIA A100 GPU\n\nnum_nodes: 1  # Number of VMs to launch\n\n# Working directory (optional) containing the project codebase.\n# Its contents are synced to ~/sky_workdir/ on the cluster.\nworkdir: ~/torch_examples\n\n# Commands to be run before executing the job.\n# Typical use: pip install -r requirements.txt, git clone, etc.\nsetup: |\n  pip install \"torch<2.2\" torchvision --index-url https://download.pytorch.org/whl/cu121\n\n# Commands to run as a job.\n# Typical use: launch the main program.\nrun: |\n  cd mnist\n  python main.py --epochs 1\n```\n\nPrepare the workdir by cloning:\n```bash\ngit clone https://github.com/pytorch/examples.git ~/torch_examples\n```\n\nLaunch with `sky launch` (note: [access to GPU instances](https://docs.skypilot.co/en/latest/cloud-setup/quota.html) is needed for this example):\n```bash\nsky launch my_task.yaml\n```\n\nSkyPilot then performs the heavy-lifting for you, including:\n1. Find the lowest priced VM instance type across different clouds\n2. Provision the VM, with auto-failover if the cloud returned capacity errors\n3. Sync the local `workdir` to the VM\n4. Run the task's `setup` commands to prepare the VM for running the task\n5. Run the task's `run` commands\n\n<p align=\"center\">\n  <img src=\"https://i.imgur.com/TgamzZ2.gif\" alt=\"SkyPilot Demo\"/>\n</p>\n\n\nRefer to [Quickstart](https://docs.skypilot.co/en/latest/getting-started/quickstart.html) to get started with SkyPilot.\n\n## More Information\nTo learn more, see [Concept: Sky Computing](https://docs.skypilot.co/en/latest/sky-computing.html), [SkyPilot docs](https://docs.skypilot.co/en/latest/), and [SkyPilot blog](https://blog.skypilot.co/).\n\n<!-- Keep this section in sync with index.rst in SkyPilot Docs -->\nRunnable examples:\n- [**AI Gallery**](https://docs.skypilot.co/en/latest/gallery/index.html)\n- LLMs on SkyPilot\n  - [Llama 3.2: lightweight and vision models](./llm/llama-3_2/)\n  - [Pixtral](./llm/pixtral/)\n  - [Llama 3.1 finetuning](./llm/llama-3_1-finetuning/) and [serving](./llm/llama-3_1/)\n  - [GPT-2 via `llm.c`](./llm/gpt-2/)\n  - [Llama 3](./llm/llama-3/)\n  - [Qwen](./llm/qwen/)\n  - [Databricks DBRX](./llm/dbrx/)\n  - [Gemma](./llm/gemma/)\n  - [Mixtral 8x7B](./llm/mixtral/); [Mistral 7B](https://docs.mistral.ai/self-deployment/skypilot/) (from official Mistral team)\n  - [Code Llama](./llm/codellama/)\n  - [vLLM: Serving LLM 24x Faster On the Cloud](./llm/vllm/) (from official vLLM team)\n  - [SGLang: Fast and Expressive LLM Serving On the Cloud](./llm/sglang/) (from official SGLang team)\n  - [Vicuna chatbots: Training & Serving](./llm/vicuna/) (from official Vicuna team)\n  - [Train your own Vicuna on Llama-2](./llm/vicuna-llama-2/)\n  - [Self-Hosted Llama-2 Chatbot](./llm/llama-2/)\n  - [Ollama: Quantized LLMs on CPUs](./llm/ollama/)\n  - [LoRAX](./llm/lorax/)\n  - [QLoRA](https://github.com/artidoro/qlora/pull/132)\n  - [LLaMA-LoRA-Tuner](https://github.com/zetavg/LLaMA-LoRA-Tuner#run-on-a-cloud-service-via-skypilot)\n  - [Tabby: Self-hosted AI coding assistant](https://github.com/TabbyML/tabby/blob/bed723fcedb44a6b867ce22a7b1f03d2f3531c1e/experimental/eval/skypilot.yaml)\n  - [LocalGPT](./llm/localgpt)\n  - [Falcon](./llm/falcon)\n  - Add yours here & see more in [`llm/`](./llm)!\n- Framework examples: [PyTorch DDP](https://github.com/skypilot-org/skypilot/blob/master/examples/resnet_distributed_torch.yaml), [DeepSpeed](./examples/deepspeed-multinode/sky.yaml), [JAX/Flax on TPU](https://github.com/skypilot-org/skypilot/blob/master/examples/tpu/tpuvm_mnist.yaml), [Stable Diffusion](https://github.com/skypilot-org/skypilot/tree/master/examples/stable_diffusion), [Detectron2](https://github.com/skypilot-org/skypilot/blob/master/examples/detectron2_docker.yaml), [Distributed](https://github.com/skypilot-org/skypilot/blob/master/examples/resnet_distributed_tf_app.py) [TensorFlow](https://github.com/skypilot-org/skypilot/blob/master/examples/resnet_app_storage.yaml), [Ray Train](examples/distributed_ray_train/ray_train.yaml), [NeMo](https://github.com/skypilot-org/skypilot/blob/master/examples/nemo/), [programmatic grid search](https://github.com/skypilot-org/skypilot/blob/master/examples/huggingface_glue_imdb_grid_search_app.py), [Docker](https://github.com/skypilot-org/skypilot/blob/master/examples/docker/echo_app.yaml), [Cog](https://github.com/skypilot-org/skypilot/blob/master/examples/cog/), [Unsloth](https://github.com/skypilot-org/skypilot/blob/master/examples/unsloth/unsloth.yaml), [Ollama](https://github.com/skypilot-org/skypilot/blob/master/llm/ollama), [llm.c](https://github.com/skypilot-org/skypilot/tree/master/llm/gpt-2), [Airflow](./examples/airflow/training_workflow) and [many more (`examples/`)](./examples).\n\nCase Studies and Integrations: [Community Spotlights](https://blog.skypilot.co/community/)\n\nFollow updates:\n- [Twitter](https://twitter.com/skypilot_org)\n- [Slack](http://slack.skypilot.co)\n- [SkyPilot Blog](https://blog.skypilot.co/) ([Introductory blog post](https://blog.skypilot.co/introducing-skypilot/))\n\nRead the research:\n- [SkyPilot paper](https://www.usenix.org/system/files/nsdi23-yang-zongheng.pdf) and [talk](https://www.usenix.org/conference/nsdi23/presentation/yang-zongheng) (NSDI 2023)\n- [Sky Computing whitepaper](https://arxiv.org/abs/2205.07147)\n- [Sky Computing vision paper](https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s02-stoica.pdf) (HotOS 2021)\n- [Policy for Managed Spot Jobs](https://www.usenix.org/conference/nsdi24/presentation/wu-zhanghao)  (NSDI 2024)\n\n## Support and Questions\nWe are excited to hear your feedback!\n* For issues and feature requests, please [open a GitHub issue](https://github.com/skypilot-org/skypilot/issues/new).\n* For questions, please use [GitHub Discussions](https://github.com/skypilot-org/skypilot/discussions).\n\nFor general discussions, join us on the [SkyPilot Slack](http://slack.skypilot.co).\n\n## Contributing\nWe welcome all contributions to the project! See [CONTRIBUTING](CONTRIBUTING.md) for how to get involved.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "format.sh",
          "type": "blob",
          "size": 4.5908203125,
          "content": "#!/usr/bin/env bash\n# YAPF formatter, adapted from ray.\n#\n# Usage:\n#    # Do work and commit your work.\n\n#    # Format files that differ from origin/master.\n#    bash format.sh\n\n#    # Commit changed files with message 'Run yapf and pylint'\n#\n#\n# YAPF + Clang formatter (if installed). This script formats all changed files from the last mergebase.\n# You are encouraged to run this locally before pushing changes for review.\n\n# Cause the script to exit if a single command fails\nset -eo pipefail\n\n# this stops git rev-parse from failing if we run this from the .git directory\nbuiltin cd \"$(dirname \"${BASH_SOURCE:-$0}\")\"\nROOT=\"$(git rev-parse --show-toplevel)\"\nbuiltin cd \"$ROOT\" || exit 1\n\nYAPF_VERSION=$(yapf --version | awk '{print $2}')\nPYLINT_VERSION=$(pylint --version | head -n 1 | awk '{print $2}')\nPYLINT_QUOTES_VERSION=$(pip list | grep pylint-quotes | awk '{print $2}')\nMYPY_VERSION=$(mypy --version | awk '{print $2}')\nBLACK_VERSION=$(black --version | head -n 1 | awk '{print $2}')\n\n# # params: tool name, tool version, required version\ntool_version_check() {\n    if [[ $2 != $3 ]]; then\n        echo \"Wrong $1 version installed: $3 is required, not $2.\"\n        exit 1\n    fi\n}\n\ntool_version_check \"yapf\" $YAPF_VERSION \"$(grep yapf requirements-dev.txt | cut -d'=' -f3)\"\ntool_version_check \"pylint\" $PYLINT_VERSION \"$(grep \"pylint==\" requirements-dev.txt | cut -d'=' -f3)\"\ntool_version_check \"pylint-quotes\" $PYLINT_QUOTES_VERSION \"$(grep \"pylint-quotes==\" requirements-dev.txt | cut -d'=' -f3)\"\ntool_version_check \"mypy\" \"$MYPY_VERSION\" \"$(grep mypy requirements-dev.txt | cut -d'=' -f3)\"\ntool_version_check \"black\" \"$BLACK_VERSION\" \"$(grep black requirements-dev.txt | cut -d'=' -f3)\"\n\nYAPF_FLAGS=(\n    '--recursive'\n    '--parallel'\n)\n\nYAPF_EXCLUDES=(\n    '--exclude' 'build/**'\n    '--exclude' 'sky/skylet/providers/ibm/**'\n)\n\nISORT_YAPF_EXCLUDES=(\n    '--sg' 'build/**'\n    '--sg' 'sky/skylet/providers/ibm/**'\n)\n\nBLACK_INCLUDES=(\n    'sky/skylet/providers/ibm'\n)\n\nPYLINT_FLAGS=(\n    '--load-plugins'  'pylint_quotes'\n)\n\n# Format specified files\nformat() {\n    yapf --in-place \"${YAPF_FLAGS[@]}\" \"$@\"\n}\n\n# Format files that differ from main branch. Ignores dirs that are not slated\n# for autoformat yet.\nformat_changed() {\n    # The `if` guard ensures that the list of filenames is not empty, which\n    # could cause yapf to receive 0 positional arguments, making it hang\n    # waiting for STDIN.\n    #\n    # `diff-filter=ACM` and $MERGEBASE is to ensure we only format files that\n    # exist on both branches.\n    MERGEBASE=\"$(git merge-base origin/master HEAD)\"\n\n    if ! git diff --diff-filter=ACM --quiet --exit-code \"$MERGEBASE\" -- '*.py' '*.pyi' &>/dev/null; then\n        git diff --name-only --diff-filter=ACM \"$MERGEBASE\" -- '*.py' '*.pyi' | \\\n            tr '\\n' '\\0' | xargs -P 5 -0 \\\n            yapf --in-place \"${YAPF_EXCLUDES[@]}\" \"${YAPF_FLAGS[@]}\"\n    fi\n\n}\n\n# Format all files\nformat_all() {\n    yapf --in-place \"${YAPF_FLAGS[@]}\" \"${YAPF_EXCLUDES[@]}\" sky tests examples llm\n}\n\necho 'SkyPilot Black:'\nblack \"${BLACK_INCLUDES[@]}\"\n\n## This flag formats individual files. --files *must* be the first command line\n## arg to use this option.\nif [[ \"$1\" == '--files' ]]; then\n   format \"${@:2}\"\n   # If `--all` is passed, then any further arguments are ignored and the\n   # entire python directory is formatted.\nelif [[ \"$1\" == '--all' ]]; then\n   format_all\nelse\n   # Format only the files that changed in last commit.\n   format_changed\nfi\necho 'SkyPilot yapf: Done'\n\necho 'SkyPilot isort:'\nisort sky tests examples llm docs \"${ISORT_YAPF_EXCLUDES[@]}\"\n\nisort --profile black -l 88 -m 3 \"sky/skylet/providers/ibm\"\n\n\n# Run mypy\n# TODO(zhwu): When more of the codebase is typed properly, the mypy flags\n# should be set to do a more stringent check.\necho 'SkyPilot mypy:'\nmypy $(cat tests/mypy_files.txt)\n\n# Run Pylint\necho 'Sky Pylint:'\nif [[ \"$1\" == '--files' ]]; then\n    # If --files is passed, filter to files within sky/ and pass to pylint.\n    pylint \"${PYLINT_FLAGS[@]}\" \"${@:2}\"\nelif [[ \"$1\" == '--all' ]]; then\n    # Pylint entire sky directory.\n    pylint \"${PYLINT_FLAGS[@]}\" sky\nelse\n    # Pylint only files in sky/ that have changed in last commit.\n    changed_files=$(git diff --name-only --diff-filter=ACM \"$MERGEBASE\" -- 'sky/*.py' 'sky/*.pyi')\n    if [[ -n \"$changed_files\" ]]; then\n        echo \"$changed_files\" | tr '\\n' '\\0' | xargs -0 pylint \"${PYLINT_FLAGS[@]}\"\n    else\n        echo 'Pylint skipped: no files changed in sky/.'\n    fi\nfi\n\nif ! git diff --quiet &>/dev/null; then\n    echo 'Reformatted files. Please review and stage the changes.'\n    echo 'Changes not staged for commit:'\n    echo\n    git --no-pager diff --name-only\n\n    exit 1\nfi\n"
        },
        {
          "name": "llm",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.625,
          "content": "[build-system]\nrequires = [\"setuptools>=58.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.yapf]\nbased_on_style = \"google\"\nallow_split_before_dict_value = false\n\n[tool.pytest.ini_options]\nrequired_plugins = [\n    \"pytest-xdist\",\n    \"pytest-env>=0.6\"\n]\nenv = [\n    \"SKYPILOT_DEBUG=1\",\n    \"SKYPILOT_DISABLE_USAGE_COLLECTION=1\"\n]\naddopts = \"-s -n 16 -q --tb=short --dist loadgroup --disable-warnings\"\n\n[tool.mypy]\npython_version = \"3.8\"\nfollow_imports = \"skip\"\nignore_missing_imports = true\nallow_redefinition = true\n\n[tool.isort]\nprofile = \"google\"\nline_length = 80\nmulti_line_output = 0\ncombine_as_imports = true\nuse_parentheses = true\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.5712890625,
          "content": "# formatting\nyapf==0.32.0\npylint==2.14.5\n# formatting the node_providers code from upstream ray-project/ray project\nblack==22.10.0\n# https://github.com/edaniszewski/pylint-quotes\npylint-quotes==0.2.3\ntoml==0.10.2\nisort==5.12.0\n\n# type checking\nmypy==0.991\ntypes-PyYAML\n# 2.31 requires urlib3>2, which is incompatible with SkyPilot, IBM and\n# kubernetes packages, which require urllib3<2.\ntypes-requests<2.31\ntypes-setuptools\ntypes-cachetools\ntypes-pyvmomi\n\n# testing\npytest\npytest-xdist\npytest-env>=0.6\n\n# memory profiler\nmemory_profiler==0.61.0\n\n# For testing SkyServe\naiohttp==3.9.1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.0234375,
          "content": "sky/setup_files/setup.py"
        },
        {
          "name": "sky",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}