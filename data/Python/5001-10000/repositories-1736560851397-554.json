{
  "metadata": {
    "timestamp": 1736560851397,
    "page": 554,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "donnemartin/dev-setup",
      "stars": 6150,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".aliases",
          "type": "blob",
          "size": 5.7451171875,
          "content": "# Easier navigation: .., ..., ...., ....., ~ and -\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\nalias .....=\"cd ../../../..\"\nalias ~=\"cd ~\" # `cd` is probably faster to type though\nalias -- -=\"cd -\"\n\n# Shortcuts\nalias d=\"cd ~/Documents/Dropbox\"\nalias dl=\"cd ~/Downloads\"\nalias dt=\"cd ~/Desktop\"\nalias p=\"cd ~/projects\"\nalias g=\"git\"\nalias h=\"history\"\nalias j=\"jobs\"\n\n# Detect which `ls` flavor is in use\nif ls --color > /dev/null 2>&1; then # GNU `ls`\n    colorflag=\"--color\"\nelse # OS X `ls`\n    colorflag=\"-G\"\nfi\n\n# List all files colorized in long format\nalias l=\"ls -lF ${colorflag}\"\n\n# List all files colorized in long format, including dot files\nalias la=\"ls -laF ${colorflag}\"\n\n# List only directories\nalias lsd=\"ls -lF ${colorflag} | grep --color=never '^d'\"\n\n# Always use color output for `ls`\nalias ls=\"command ls ${colorflag}\"\nexport LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'\n\n# Enable aliases to be sudo’ed\nalias sudo='sudo '\n\n# Get week number\nalias week='date +%V'\n\n# Stopwatch\nalias timer='echo \"Timer started. Stop with Ctrl-D.\" && date && time cat && date'\n\n# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages\nalias update='sudo softwareupdate -i -a; brew update; brew upgrade --all; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update'\n\n# IP addresses\nalias ip=\"dig +short myip.opendns.com @resolver1.opendns.com\"\nalias localip=\"ipconfig getifaddr en0\"\nalias ips=\"ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \\\"\\\"); print }'\"\n\n# Flush Directory Service cache\nalias flush=\"dscacheutil -flushcache && killall -HUP mDNSResponder\"\n\n# Clean up LaunchServices to remove duplicates in the “Open With” menu\nalias lscleanup=\"/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder\"\n\n# View HTTP traffic\nalias sniff=\"sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'\"\nalias httpdump=\"sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \\\"Host\\: .*|GET \\/.*\\\"\"\n\n# Canonical hex dump; some systems have this symlinked\ncommand -v hd > /dev/null || alias hd=\"hexdump -C\"\n\n# OS X has no `md5sum`, so use `md5` as a fallback\ncommand -v md5sum > /dev/null || alias md5sum=\"md5\"\n\n# OS X has no `sha1sum`, so use `shasum` as a fallback\ncommand -v sha1sum > /dev/null || alias sha1sum=\"shasum\"\n\n# JavaScriptCore REPL\njscbin=\"/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc\";\n[ -e \"${jscbin}\" ] && alias jsc=\"${jscbin}\";\nunset jscbin;\n\n# Trim new lines and copy to clipboard\nalias c=\"tr -d '\\n' | pbcopy\"\n\n# Recursively delete `.DS_Store` files\nalias cleanup=\"find . -type f -name '*.DS_Store' -ls -delete\"\n\n# Empty the Trash on all mounted volumes and the main HDD\n# Also, clear Apple’s System Logs to improve shell startup speed\nalias emptytrash=\"sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl\"\n\n# Show/hide hidden files in Finder\nalias show=\"defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder\"\nalias hide=\"defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder\"\n\n# Hide/show all desktop icons (useful when presenting)\nalias hidedesktop=\"defaults write com.apple.finder CreateDesktop -bool false && killall Finder\"\nalias showdesktop=\"defaults write com.apple.finder CreateDesktop -bool true && killall Finder\"\n\n# URL-encode strings\nalias urlencode='python -c \"import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);\"'\n\n# Merge PDF files\n# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`\nalias mergepdf='/System/Library/Automator/Combine\\ PDF\\ Pages.action/Contents/Resources/join.py'\n\n# Disable Spotlight\nalias spotoff=\"sudo mdutil -a -i off\"\n# Enable Spotlight\nalias spoton=\"sudo mdutil -a -i on\"\n\n# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it\nalias plistbuddy=\"/usr/libexec/PlistBuddy\"\n\n# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon\n# (useful when executing time-consuming commands)\nalias badge=\"tput bel\"\n\n# Intuitive map function\n# For example, to list all directories that contain a certain file:\n# find . -name .gitattributes | map dirname\nalias map=\"xargs -n1\"\n\n# One of @janmoesen’s ProTip™s\nfor method in GET HEAD POST PUT DELETE TRACE OPTIONS; do\n    alias \"$method\"=\"lwp-request -m '$method'\"\ndone\n\n# Make Grunt print stack traces by default\ncommand -v grunt > /dev/null && alias grunt=\"grunt --stack\"\n\n# Stuff I never really use but cannot delete either because of http://xkcd.com/530/\nalias stfu=\"osascript -e 'set volume output muted true'\"\nalias pumpitup=\"osascript -e 'set volume 7'\"\n\n# Kill all the tabs in Chrome to free up memory\n# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description\nalias chromekill=\"ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill\"\n\n# Lock the screen (when going AFK)\nalias afk=\"/System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend\"\n\n# Reload the shell (i.e. invoke as a login shell)\nalias reload=\"exec $SHELL -l\"\n"
        },
        {
          "name": ".aws",
          "type": "tree",
          "content": null
        },
        {
          "name": ".bash_profile",
          "type": "blob",
          "size": 1.853515625,
          "content": "# Add `~/bin` to the `$PATH`\nexport PATH=\"$HOME/bin:$PATH\";\n\n# Load the shell dotfiles, and then some:\n# * ~/.path can be used to extend `$PATH`.\n# * ~/.extra can be used for other settings you don’t want to commit.\nfor file in ~/.{path,bash_prompt,exports,aliases,functions,extra}; do\n    [ -r \"$file\" ] && [ -f \"$file\" ] && source \"$file\";\ndone;\nunset file;\n\n# Case-insensitive globbing (used in pathname expansion)\nshopt -s nocaseglob;\n\n# Append to the Bash history file, rather than overwriting it\nshopt -s histappend;\n\n# Autocorrect typos in path names when using `cd`\nshopt -s cdspell;\n\n# Enable some Bash 4 features when possible:\n# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`\n# * Recursive globbing, e.g. `echo **/*.txt`\nfor option in autocd globstar; do\n    shopt -s \"$option\" 2> /dev/null;\ndone;\n\n# Add tab completion for many Bash commands\nif which brew > /dev/null && [ -f \"$(brew --prefix)/share/bash-completion/bash_completion\" ]; then\n    source \"$(brew --prefix)/share/bash-completion/bash_completion\";\nelif [ -f /etc/bash_completion ]; then\n    source /etc/bash_completion;\nfi;\n\n# Enable tab completion for `g` by marking it as an alias for `git`\nif type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then\n    complete -o default -o nospace -F _git g;\nfi;\n\n# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards\n[ -e \"$HOME/.ssh/config\" ] && complete -o \"default\" -o \"nospace\" -W \"$(grep \"^Host\" ~/.ssh/config | grep -v \"[?*]\" | cut -d \" \" -f2- | tr ' ' '\\n')\" scp sftp ssh;\n\n# Add tab completion for `defaults read|write NSGlobalDomain`\n# You could just use `-g` instead, but I like being explicit\ncomplete -W \"NSGlobalDomain\" defaults;\n\n# Add `killall` tab completion for common apps\ncomplete -o \"nospace\" -W \"Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter\" killall;\n"
        },
        {
          "name": ".bash_prompt",
          "type": "blob",
          "size": 3.4599609375,
          "content": "# Shell prompt based on the Solarized Dark theme.\n# Screenshot: http://i.imgur.com/EkEtphC.png\n# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles\n# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.\n\nif [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then\n    export TERM='gnome-256color';\nelif infocmp xterm-256color >/dev/null 2>&1; then\n    export TERM='xterm-256color';\nfi;\n\nprompt_git() {\n    local s='';\n    local branchName='';\n\n    # Check if the current directory is in a Git repository.\n    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo \"${?}\") == '0' ]; then\n\n        # check if the current directory is in .git before running git checks\n        if [ \"$(git rev-parse --is-inside-git-dir 2> /dev/null)\" == 'false' ]; then\n\n            # Ensure the index is up to date.\n            git update-index --really-refresh -q &>/dev/null;\n\n            # Check for uncommitted changes in the index.\n            if ! $(git diff --quiet --ignore-submodules --cached); then\n                s+='+';\n            fi;\n\n            # Check for unstaged changes.\n            if ! $(git diff-files --quiet --ignore-submodules --); then\n                s+='!';\n            fi;\n\n            # Check for untracked files.\n            if [ -n \"$(git ls-files --others --exclude-standard)\" ]; then\n                s+='?';\n            fi;\n\n            # Check for stashed files.\n            if $(git rev-parse --verify refs/stash &>/dev/null); then\n                s+='$';\n            fi;\n\n        fi;\n\n        # Get the short symbolic ref.\n        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit\n        # Otherwise, just give up.\n        branchName=\"$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \\\n            git rev-parse --short HEAD 2> /dev/null || \\\n            echo '(unknown)')\";\n\n        [ -n \"${s}\" ] && s=\" [${s}]\";\n\n        echo -e \"${1}${branchName}${blue}${s}\";\n    else\n        return;\n    fi;\n}\n\nif tput setaf 1 &> /dev/null; then\n    tput sgr0; # reset colors\n    bold=$(tput bold);\n    reset=$(tput sgr0);\n    # Solarized colors, taken from http://git.io/solarized-colors.\n    black=$(tput setaf 0);\n    blue=$(tput setaf 33);\n    cyan=$(tput setaf 37);\n    green=$(tput setaf 64);\n    orange=$(tput setaf 166);\n    purple=$(tput setaf 125);\n    red=$(tput setaf 124);\n    violet=$(tput setaf 61);\n    white=$(tput setaf 15);\n    yellow=$(tput setaf 136);\nelse\n    bold='';\n    reset=\"\\e[0m\";\n    black=\"\\e[1;30m\";\n    blue=\"\\e[1;34m\";\n    cyan=\"\\e[1;36m\";\n    green=\"\\e[1;32m\";\n    orange=\"\\e[1;33m\";\n    purple=\"\\e[1;35m\";\n    red=\"\\e[1;31m\";\n    violet=\"\\e[1;35m\";\n    white=\"\\e[1;37m\";\n    yellow=\"\\e[1;33m\";\nfi;\n\n# Highlight the user name when logged in as root.\nif [[ \"${USER}\" == \"root\" ]]; then\n    userStyle=\"${red}\";\nelse\n    userStyle=\"${orange}\";\nfi;\n\n# Highlight the hostname when connected via SSH.\nif [[ \"${SSH_TTY}\" ]]; then\n    hostStyle=\"${bold}${red}\";\nelse\n    hostStyle=\"${yellow}\";\nfi;\n\n# Set the terminal title to the current working directory.\nPS1=\"\\[\\033]0;\\w\\007\\]\";\nPS1+=\"\\[${bold}\\]\\n\"; # newline\nPS1+=\"\\[${userStyle}\\]\\u\"; # username\nPS1+=\"\\[${white}\\] at \";\nPS1+=\"\\[${hostStyle}\\]\\h\"; # host\nPS1+=\"\\[${white}\\] in \";\nPS1+=\"\\[${green}\\]\\w\"; # working directory\nPS1+=\"\\$(prompt_git \\\"${white} on ${violet}\\\")\"; # Git repository details\nPS1+=\"\\n\";\nPS1+=\"\\[${white}\\]\\$ \\[${reset}\\]\"; # `$` (and reset color)\nexport PS1;\n\nPS2=\"\\[${yellow}\\]→ \\[${reset}\\]\";\nexport PS2;\n"
        },
        {
          "name": ".bashrc",
          "type": "blob",
          "size": 0.0400390625,
          "content": "[ -n \"$PS1\" ] && source ~/.bash_profile;\n"
        },
        {
          "name": ".curlrc",
          "type": "blob",
          "size": 0.259765625,
          "content": "# Disguise as IE 9 on Windows 7.\nuser-agent = \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\"\n\n# When following a redirect, automatically set the previous URL as referer.\nreferer = \";auto\"\n\n# Wait 60 seconds before timing out.\nconnect-timeout = 60\n"
        },
        {
          "name": ".dots",
          "type": "blob",
          "size": 4.2841796875,
          "content": "#!/usr/bin/env bash\n\nfunction runDots() {\n    # Ask for the administrator password upfront\n    sudo -v\n\n    # Keep-alive: update existing `sudo` time stamp until the script has finished\n    while true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n    # Run sections based on command line arguments\n    for ARG in \"$@\"\n    do\n        if [ $ARG == \"bootstrap\" ] || [ $ARG == \"all\" ]; then\n            echo \"\"\n            echo \"------------------------------\"\n            echo \"Syncing the dev-setup repo to your local machine.\"\n            echo \"------------------------------\"\n            echo \"\"\n            cd ~ && curl -#L https://github.com/donnemartin/dev-setup/tarball/master | tar -xzv --strip-components 1 --exclude={README.md,LICENSE}\n        fi\n        if [ $ARG == \"osxprep\" ] || [ $ARG == \"all\" ]; then\n            # Run the osxprep.sh Script\n            echo \"\"\n            echo \"------------------------------\"\n            echo \"Updating OSX and installing Xcode command line tools\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./osxprep.sh\n        fi\n        if [ $ARG == \"brew\" ] || [ $ARG == \"all\" ]; then\n            # Run the brew.sh Script\n            # For a full listing of installed formulae and apps, refer to\n            # the commented brew.sh source file directly and tweak it to\n            # suit your needs.\n            echo \"\"\n            echo \"------------------------------\"\n            echo \"Installing Homebrew along with some common formulae and apps.\"\n            echo \"This might take a while to complete, as some formulae need to be installed from source.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./brew.sh\n        fi\n        if [ $ARG == \"osx\" ] || [ $ARG == \"all\" ]; then\n            # Run the osx.sh Script\n            # I strongly suggest you read through the commented osx.sh\n            # source file and tweak any settings based on your personal\n            # preferences. The script defaults are intended for you to\n            # customize. For example, if you are not running an SSD you\n            # might want to change some of the settings listed in the\n            # SSD section.\n            echo \"\"\n            echo \"------------------------------\"\n            echo \"Setting sensible OSX defaults.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./osx.sh\n        fi\n        if [ $ARG == \"pydata\" ] || [ $ARG == \"all\" ]; then\n            # Run the pydata.sh Script\n            echo \"------------------------------\"\n            echo \"Setting up Python data development environment.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./pydata.sh\n        fi\n        if [ $ARG == \"aws\" ] || [ $ARG == \"all\" ]; then\n            # Run the aws.sh Script\n            echo \"------------------------------\"\n            echo \"Setting up AWS development environment.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./aws.sh\n        fi\n        if [ $ARG == \"datastores\" ] || [ $ARG == \"all\" ]; then\n            # Run the datastores.sh Script\n            echo \"------------------------------\"\n            echo \"Setting up data stores.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./datastores.sh\n        fi\n        if [ $ARG == \"web\" ] || [ $ARG == \"all\" ]; then\n            # Run the web.sh Script\n            echo \"------------------------------\"\n            echo \"Setting up JavaScript web development environment.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./web.sh\n        fi\n        if [ $ARG == \"android\" ] || [ $ARG == \"all\" ]; then\n            # Run the android.sh Script\n            echo \"------------------------------\"\n            echo \"Setting up Android development environment.\"\n            echo \"------------------------------\"\n            echo \"\"\n            ./android.sh\n        fi\n    done\n\n    echo \"------------------------------\"\n    echo \"Completed running .dots, restart your computer to ensure all updates take effect\"\n    echo \"------------------------------\"\n}\n\nread -p \"This script may overwrite existing files in your home directory. Are you sure? (y/n) \" -n 1;\necho \"\";\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    runDots $@\nfi;\n\nunset runDots;\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.228515625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = tab\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# 4 space indentation (pep8)\n[*.py]\nindent_style = space\nindent_size = 4\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".exports",
          "type": "blob",
          "size": 0.76171875,
          "content": "# Make vim the default editor.\nexport EDITOR='vim';\n\n# Enable persistent REPL history for `node`.\nNODE_REPL_HISTORY_FILE=~/.node_history;\n# Allow 32³ entries; the default is 1000.\nNODE_REPL_HISTORY_SIZE='32768';\n\n# Increase Bash history size. Allow 32³ entries; the default is 500.\nexport HISTSIZE='32768';\nexport HISTFILESIZE=\"${HISTSIZE}\";\n# Omit duplicates and commands that begin with a space from history.\nexport HISTCONTROL='ignoreboth';\n\n# Prefer US English and use UTF-8.\nexport LANG='en_US.UTF-8';\nexport LC_ALL='en_US.UTF-8';\n\n# Highlight section titles in manual pages.\nexport LESS_TERMCAP_md=\"${yellow}\";\n\n# Don’t clear the screen after quitting a manual page.\nexport MANPAGER='less -X';\n\n# Always enable colored `grep` output.\nexport GREP_OPTIONS='--color=auto';\n"
        },
        {
          "name": ".functions",
          "type": "blob",
          "size": 7.18359375,
          "content": "# Simple calculator\nfunction calc() {\n    local result=\"\";\n    result=\"$(printf \"scale=10;$*\\n\" | bc --mathlib | tr -d '\\\\\\n')\";\n    #                       └─ default (when `--mathlib` is used) is 20\n    #\n    if [[ \"$result\" == *.* ]]; then\n        # improve the output for decimal numbers\n        printf \"$result\" |\n        sed -e 's/^\\./0./'        `# add \"0\" for cases like \".5\"` \\\n            -e 's/^-\\./-0./'      `# add \"0\" for cases like \"-.5\"`\\\n            -e 's/0*$//;s/\\.$//';  # remove trailing zeros\n    else\n        printf \"$result\";\n    fi;\n    printf \"\\n\";\n}\n\n# Create a new directory and enter it\nfunction mkd() {\n    mkdir -p \"$@\" && cd \"$_\";\n}\n\n# Change working directory to the top-most Finder window location\nfunction cdf() { # short for `cdfinder`\n    cd \"$(osascript -e 'tell app \"Finder\" to POSIX path of (insertion location as alias)')\";\n}\n\n# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression\nfunction targz() {\n    local tmpFile=\"${@%/}.tar\";\n    tar -cvf \"${tmpFile}\" --exclude=\".DS_Store\" \"${@}\" || return 1;\n\n    size=$(\n        stat -f\"%z\" \"${tmpFile}\" 2> /dev/null; # OS X `stat`\n        stat -c\"%s\" \"${tmpFile}\" 2> /dev/null # GNU `stat`\n    );\n\n    local cmd=\"\";\n    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then\n        # the .tar file is smaller than 50 MB and Zopfli is available; use it\n        cmd=\"zopfli\";\n    else\n        if hash pigz 2> /dev/null; then\n            cmd=\"pigz\";\n        else\n            cmd=\"gzip\";\n        fi;\n    fi;\n\n    echo \"Compressing .tar using \\`${cmd}\\`…\";\n    \"${cmd}\" -v \"${tmpFile}\" || return 1;\n    [ -f \"${tmpFile}\" ] && rm \"${tmpFile}\";\n    echo \"${tmpFile}.gz created successfully.\";\n}\n\n# Determine size of a file or total size of a directory\nfunction fs() {\n    if du -b /dev/null > /dev/null 2>&1; then\n        local arg=-sbh;\n    else\n        local arg=-sh;\n    fi\n    if [[ -n \"$@\" ]]; then\n        du $arg -- \"$@\";\n    else\n        du $arg .[^.]* *;\n    fi;\n}\n\n# Use Git’s colored diff when available\nhash git &>/dev/null;\nif [ $? -eq 0 ]; then\n    function diff() {\n        git diff --no-index --color-words \"$@\";\n    }\nfi;\n\n# Create a data URL from a file\nfunction dataurl() {\n    local mimeType=$(file -b --mime-type \"$1\");\n    if [[ $mimeType == text/* ]]; then\n        mimeType=\"${mimeType};charset=utf-8\";\n    fi\n    echo \"data:${mimeType};base64,$(openssl base64 -in \"$1\" | tr -d '\\n')\";\n}\n\n# Create a git.io short URL\nfunction gitio() {\n    if [ -z \"${1}\" -o -z \"${2}\" ]; then\n        echo \"Usage: \\`gitio slug url\\`\";\n        return 1;\n    fi;\n    curl -i http://git.io/ -F \"url=${2}\" -F \"code=${1}\";\n}\n\n# Start an HTTP server from a directory, optionally specifying the port\nfunction server() {\n    local port=\"${1:-8000}\";\n    sleep 1 && open \"http://localhost:${port}/\" &\n    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`\n    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)\n    python -c $'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[\"\"] = \"text/plain\";\\nfor key, value in map.items():\\n\\tmap[key] = value + \";charset=UTF-8\";\\nSimpleHTTPServer.test();' \"$port\";\n}\n\n# Start a PHP server from a directory, optionally specifying the port\n# (Requires PHP 5.4.0+.)\nfunction phpserver() {\n    local port=\"${1:-4000}\";\n    local ip=$(ipconfig getifaddr en1);\n    sleep 1 && open \"http://${ip}:${port}/\" &\n    php -S \"${ip}:${port}\";\n}\n\n# Compare original and gzipped file size\nfunction gz() {\n    local origsize=$(wc -c < \"$1\");\n    local gzipsize=$(gzip -c \"$1\" | wc -c);\n    local ratio=$(echo \"$gzipsize * 100 / $origsize\" | bc -l);\n    printf \"orig: %d bytes\\n\" \"$origsize\";\n    printf \"gzip: %d bytes (%2.2f%%)\\n\" \"$gzipsize\" \"$ratio\";\n}\n\n# Syntax-highlight JSON strings or files\n# Usage: `json '{\"foo\":42}'` or `echo '{\"foo\":42}' | json`\nfunction json() {\n    if [ -t 0 ]; then # argument\n        python -mjson.tool <<< \"$*\" | pygmentize -l javascript;\n    else # pipe\n        python -mjson.tool | pygmentize -l javascript;\n    fi;\n}\n\n# Run `dig` and display the most useful info\nfunction digga() {\n    dig +nocmd \"$1\" any +multiline +noall +answer;\n}\n\n# UTF-8-encode a string of Unicode symbols\nfunction escape() {\n    printf \"\\\\\\x%s\" $(printf \"$@\" | xxd -p -c1 -u);\n    # print a newline unless we’re piping the output to another program\n    if [ -t 1 ]; then\n        echo \"\"; # newline\n    fi;\n}\n\n# Decode \\x{ABCD}-style Unicode escape sequences\nfunction unidecode() {\n    perl -e \"binmode(STDOUT, ':utf8'); print \\\"$@\\\"\";\n    # print a newline unless we’re piping the output to another program\n    if [ -t 1 ]; then\n        echo \"\"; # newline\n    fi;\n}\n\n# Get a character’s Unicode code point\nfunction codepoint() {\n    perl -e \"use utf8; print sprintf('U+%04X', ord(\\\"$@\\\"))\";\n    # print a newline unless we’re piping the output to another program\n    if [ -t 1 ]; then\n        echo \"\"; # newline\n    fi;\n}\n\n# Show all the names (CNs and SANs) listed in the SSL certificate\n# for a given domain\nfunction getcertnames() {\n    if [ -z \"${1}\" ]; then\n        echo \"ERROR: No domain specified.\";\n        return 1;\n    fi;\n\n    local domain=\"${1}\";\n    echo \"Testing ${domain}…\";\n    echo \"\"; # newline\n\n    local tmp=$(echo -e \"GET / HTTP/1.0\\nEOT\" \\\n        | openssl s_client -connect \"${domain}:443\" -servername \"${domain}\" 2>&1);\n\n    if [[ \"${tmp}\" = *\"-----BEGIN CERTIFICATE-----\"* ]]; then\n        local certText=$(echo \"${tmp}\" \\\n            | openssl x509 -text -certopt \"no_aux, no_header, no_issuer, no_pubkey, \\\n            no_serial, no_sigdump, no_signame, no_validity, no_version\");\n        echo \"Common Name:\";\n        echo \"\"; # newline\n        echo \"${certText}\" | grep \"Subject:\" | sed -e \"s/^.*CN=//\" | sed -e \"s/\\/emailAddress=.*//\";\n        echo \"\"; # newline\n        echo \"Subject Alternative Name(s):\";\n        echo \"\"; # newline\n        echo \"${certText}\" | grep -A 1 \"Subject Alternative Name:\" \\\n            | sed -e \"2s/DNS://g\" -e \"s/ //g\" | tr \",\" \"\\n\" | tail -n +2;\n        return 0;\n    else\n        echo \"ERROR: Certificate not found.\";\n        return 1;\n    fi;\n}\n\n# `s` with no arguments opens the current directory in Sublime Text, otherwise\n# opens the given location\nfunction s() {\n    if [ $# -eq 0 ]; then\n        subl .;\n    else\n        subl \"$@\";\n    fi;\n}\n\n# `a` with no arguments opens the current directory in Atom Editor, otherwise\n# opens the given location\nfunction a() {\n    if [ $# -eq 0 ]; then\n        atom .;\n    else\n        atom \"$@\";\n    fi;\n}\n\n# `v` with no arguments opens the current directory in Vim, otherwise opens the\n# given location\nfunction v() {\n    if [ $# -eq 0 ]; then\n        vim .;\n    else\n        vim \"$@\";\n    fi;\n}\n\n# `o` with no arguments opens the current directory, otherwise opens the given\n# location\nfunction o() {\n    if [ $# -eq 0 ]; then\n        open .;\n    else\n        open \"$@\";\n    fi;\n}\n\n# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring\n# the `.git` directory, listing directories first. The output gets piped into\n# `less` with options to preserve color and line numbers, unless the output is\n# small enough for one screen.\nfunction tre() {\n    tree -aC -I '.git|node_modules|bower_components' --dirsfirst \"$@\" | less -FRNX;\n}\n"
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 0.0283203125,
          "content": "set disassembly-flavor intel\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1513671875,
          "content": "# Automatically normalize line endings for all text-based files\n#* text=auto\n# Disabled because of https://github.com/mathiasbynens/dotfiles/issues/149 :(\n"
        },
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 5.158203125,
          "content": "[alias]\n\n    # View abbreviated SHA, description, and history graph of the latest 20 commits\n    l = log --pretty=oneline -n 20 --graph --abbrev-commit\n\n    # View the current working tree status using the short format\n    s = status -s\n\n    # Show the diff between the latest commit and the current state\n    d = !\"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat\"\n\n    # `git di $number` shows the diff between the state `$number` revisions ago and the current state\n    di = !\"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d\"\n\n    # Pull in remote changes for the current repository and all its submodules\n    p = !\"git pull; git submodule foreach git pull origin master\"\n\n    # Clone a repository including all submodules\n    c = clone --recursive\n\n    # Commit all changes\n    ca = !git add -A && git commit -av\n\n    # Switch to a branch, creating it if necessary\n    go = \"!f() { git checkout -b \\\"$1\\\" 2> /dev/null || git checkout \\\"$1\\\"; }; f\"\n\n    # Show verbose output about tags, branches or remotes\n    tags = tag -l\n    branches = branch -a\n    remotes = remote -v\n\n    # Amend the currently staged files to the latest commit\n    amend = commit --amend --reuse-message=HEAD\n\n    # Credit an author on the latest commit\n    credit = \"!f() { git commit --amend --author \\\"$1 <$2>\\\" -C HEAD; }; f\"\n\n    # Interactive rebase with the given number of latest commits\n    reb = \"!r() { git rebase -i HEAD~$1; }; r\"\n\n    # Remove the old tag with this name and tag the latest commit with it.\n    retag = \"!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r\"\n\n    # Find branches containing commit\n    fb = \"!f() { git branch -a --contains $1; }; f\"\n\n    # Find tags containing commit\n    ft = \"!f() { git describe --always --contains $1; }; f\"\n\n    # Find commits by source code\n    fc = \"!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f\"\n\n    # Find commits by commit message\n    fm = \"!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f\"\n\n    # Remove branches that have already been merged with master\n    # a.k.a. ‘delete merged’\n    dm = \"!git branch --merged | grep -v '\\\\*' | xargs -n 1 git branch -d\"\n\n    # List contributors with number of commits\n    contributors = shortlog --summary --numbered\n\n    # Merge GitHub pull request on top of the `master` branch\n    mpr = \"!f() { \\\n        if [ $(printf \\\"%s\\\" \\\"$1\\\" | grep '^[0-9]\\\\+$' > /dev/null; printf $?) -eq 0 ]; then \\\n            git fetch origin refs/pull/$1/head:pr/$1 && \\\n            git rebase master pr/$1 && \\\n            git checkout master && \\\n            git merge pr/$1 && \\\n            git branch -D pr/$1 && \\\n            git commit --amend -m \\\"$(git log -1 --pretty=%B)\\n\\nCloses #$1.\\\"; \\\n        fi \\\n    }; f\"\n\n[apply]\n\n    # Detect whitespace errors when applying a patch\n    whitespace = fix\n\n[core]\n\n    # Use custom `.gitignore` and `.gitattributes`\n    excludesfile = ~/.gitignore\n    attributesfile = ~/.gitattributes\n\n    # Treat spaces before tabs and all kinds of trailing whitespace as an error\n    # [default] trailing-space: looks for spaces at the end of a line\n    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line\n    whitespace = space-before-tab,-indent-with-non-tab,trailing-space\n\n    # Make `git rebase` safer on OS X\n    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>\n    trustctime = false\n\n    # Prevent showing files whose names contain non-ASCII symbols as unversioned.\n    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html\n    precomposeunicode = false\n\n[color]\n\n    # Use colors in Git commands that are capable of colored output when\n    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)\n    ui = auto\n\n[color \"branch\"]\n\n    current = yellow reverse\n    local = yellow\n    remote = green\n\n[color \"diff\"]\n\n    meta = yellow bold\n    frag = magenta bold # line info\n    old = red # deletions\n    new = green # additions\n\n[color \"status\"]\n\n    added = yellow\n    changed = green\n    untracked = cyan\n\n[diff]\n\n    # Detect copies as well as renames\n    renames = copies\n\n[help]\n\n    # Automatically correct and execute mistyped commands\n    autocorrect = 1\n\n[merge]\n\n    # Include summaries of merged commits in newly created merge commit messages\n    log = true\n\n[push]\n\n    # Use the Git 1.x.x default to avoid errors on machines with old Git\n    # installations. To use `simple` instead, add this to your `~/.extra` file:\n    # `git config --global push.default simple`. See http://git.io/mMah-w.\n    default = matching\n    # Make `git push` push relevant annotated tags when pushing branches out.\n    followTags = true\n\n# URL shorthands\n\n[url \"git@github.com:\"]\n\n    insteadOf = \"gh:\"\n    pushInsteadOf = \"github:\"\n    pushInsteadOf = \"git://github.com/\"\n\n[url \"git://github.com/\"]\n\n    insteadOf = \"github:\"\n\n[url \"git@gist.github.com:\"]\n\n    insteadOf = \"gst:\"\n    pushInsteadOf = \"gist:\"\n    pushInsteadOf = \"git://gist.github.com/\"\n\n[url \"git://gist.github.com/\"]\n\n    insteadOf = \"gist:\"\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3388671875,
          "content": "# IntelliJ IDEA IDE\n.idea\n\n# Compiled Python files\n*.pyc\n\n# Folder view configuration files\n.DS_Store\nDesktop.ini\n\n# Thumbnail cache files\n._*\nThumbs.db\n\n# Files that might appear on external disks\n.Spotlight-V100\n.Trashes\n\n# Files that contain credentials or personal info\n.extra\n.boto\n.mrjob.conf\n.s3cfg\n.aws/\n\n# Repo scratch directory\nscratch/\n"
        },
        {
          "name": ".gvimrc",
          "type": "blob",
          "size": 0.208984375,
          "content": "\" Use the Solarized Dark theme\nset background=dark\ncolorscheme solarized\n\" Use 14pt Monaco\nset guifont=Monaco:h14\n\" Don’t blink cursor in normal mode\nset guicursor=n:blinkon0\n\" Better line-height\nset linespace=8\n"
        },
        {
          "name": ".hgignore",
          "type": "blob",
          "size": 0.35546875,
          "content": "# Use shell-style glob syntax\nsyntax: glob\n\n# Compiled Python files\n*.pyc\n\n# Folder view configuration files\n.DS_Store\nDesktop.ini\n\n# Thumbnail cache files\n._*\nThumbs.db\n\n# Files that might appear on external disks\n.Spotlight-V100\n.Trashes\n\n# Files that contain credentials or personal info\n.extra\n.boto\n.mrjob.conf\n.s3cfg\n.aws/\n\n# Repo scratch directory\nscratch/\n"
        },
        {
          "name": ".hushlogin",
          "type": "blob",
          "size": 0.2353515625,
          "content": "# The mere presence of this file in the home directory disables the system\n# copyright notice, the date and time of the last login, the message of the\n# day as well as other information that may otherwise appear on login.\n# See `man login`.\n"
        },
        {
          "name": ".inputrc",
          "type": "blob",
          "size": 1.3984375,
          "content": "# Make Tab autocomplete regardless of filename case\nset completion-ignore-case on\n\n# List all matches in case multiple possible completions are possible\nset show-all-if-ambiguous on\n\n# Immediately add a trailing slash when autocompleting symlinks to directories\nset mark-symlinked-directories on\n\n# Use the text that has already been typed as the prefix for searching through\n# commands (i.e. more intelligent Up/Down behavior)\n\"\\e[B\": history-search-forward\n\"\\e[A\": history-search-backward\n\n# Do not autocomplete hidden files unless the pattern explicitly begins with a dot\nset match-hidden-files off\n\n# Show all autocomplete results at once\nset page-completions off\n\n# If there are more than 200 possible completions for a word, ask to show them all\nset completion-query-items 200\n\n# Show extra file information when completing, like `ls -F` does\nset visible-stats on\n\n# Be more intelligent when autocompleting by also looking at the text after\n# the cursor. For example, when the current line is \"cd ~/src/mozil\", and\n# the cursor is on the \"z\", pressing Tab will not autocomplete it to \"cd\n# ~/src/mozillail\", but to \"cd ~/src/mozilla\". (This is supported by the\n# Readline used by Bash 4.)\nset skip-completed-text on\n\n# Allow UTF-8 input and output, instead of showing stuff like $'\\0123\\0456'\nset input-meta on\nset output-meta on\nset convert-meta off\n\n# Use Alt/Meta + Delete to delete the preceding word\n\"\\e[3;3~\": kill-word\n"
        },
        {
          "name": ".mrjob.conf",
          "type": "blob",
          "size": 0.541015625,
          "content": "runners:\r\n  emr:\r\n    aws_access_key_id: YOURACCESSKEY\r\n    aws_secret_access_key: YOURSECRETKEY\r\n    aws_region: us-east-1\r\n    ec2_key_pair: YOURKEYPAIR\r\n    ec2_key_pair_file: ~/.ssh/YOURKEYPAIR.pem\r\n    ssh_tunnel_to_job_tracker: true\r\n    ec2_master_instance_type: m1.small\r\n    ec2_instance_type: m1.small\r\n    num_ec2_instances: 5\r\n    s3_scratch_uri: s3://YOURBUCKETSCRATCH\r\n    s3_log_uri: s3://YOURBUCKETLOG\r\n    enable_emr_debugging: True\r\n    bootstrap:\r\n    - sudo apt-get install -y python-pip\r\n    - sudo pip install --upgrade simplejson\r\n"
        },
        {
          "name": ".s3cfg",
          "type": "blob",
          "size": 1.1171875,
          "content": "[default]\naccess_key = YOURACCESSKEY\nsecret_key = YOURSECRETKEY\nbucket_location = US\ncloudfront_host = cloudfront.amazonaws.com\ncloudfront_resource = /2010-07-15/distribution\ndefault_mime_type = binary/octet-stream\ndelete_removed = False\ndry_run = False\nencoding = UTF-8\nencrypt = False\nfollow_symlinks = False\nforce = False\nget_continue = False\ngpg_command = /usr/local/bin/gpg\ngpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s\ngpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s\ngpg_passphrase = YOURPASSPHRASE\nguess_mime_type = True\nhost_base = s3.amazonaws.com\nhost_bucket = %(bucket)s.s3.amazonaws.com\nhuman_readable_sizes = False\nlist_md5 = False\nlog_target_prefix =\npreserve_attrs = True\nprogress_meter = True\nproxy_host =\nproxy_port = 0\nrecursive = False\nrecv_chunk = 4096\nreduced_redundancy = False\nsend_chunk = 4096\nsimpledb_host = sdb.amazonaws.com\nskip_existing = False\nsocket_timeout = 300\nurlencoding_mode = normal\nuse_https = True\nverbosity = WARNING\n"
        },
        {
          "name": ".screenrc",
          "type": "blob",
          "size": 0.16796875,
          "content": "# Disable the startup message\nstartup_message off\n\n# Set a large scrollback buffer\ndefscrollback 32000\n\n# Always start `screen` with UTF-8 enabled (`screen -U`)\ndefutf8 on\n"
        },
        {
          "name": ".vim",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 2.7041015625,
          "content": "\" Use the Solarized Dark theme\nset background=dark\ncolorscheme solarized\nlet g:solarized_termtrans=1\n\n\" Make Vim more useful\nset nocompatible\n\" Use the OS clipboard by default (on versions compiled with `+clipboard`)\nset clipboard=unnamed\n\" Enhance command-line completion\nset wildmenu\n\" Allow cursor keys in insert mode\nset esckeys\n\" Allow backspace in insert mode\nset backspace=indent,eol,start\n\" Optimize for fast terminal connections\nset ttyfast\n\" Add the g flag to search/replace by default\nset gdefault\n\" Use UTF-8 without BOM\nset encoding=utf-8 nobomb\n\" Change mapleader\nlet mapleader=\",\"\n\" Don’t add empty newlines at the end of files\nset binary\nset noeol\n\" Centralize backups, swapfiles and undo history\nset backupdir=~/.vim/backups\nset directory=~/.vim/swaps\nif exists(\"&undodir\")\n    set undodir=~/.vim/undo\nendif\n\n\" Don’t create backups when editing files in certain directories\nset backupskip=/tmp/*,/private/tmp/*\n\n\" Respect modeline in files\nset modeline\nset modelines=4\n\" Enable per-directory .vimrc files and disable unsafe commands in them\nset exrc\nset secure\n\" Enable line numbers\nset number\n\" Enable syntax highlighting\nsyntax on\n\" Highlight current line\nset cursorline\n\" Make tabs as wide as two spaces\nset tabstop=2\n\" Show “invisible” characters\nset lcs=tab:▸\\ ,trail:·,eol:¬,nbsp:_\nset list\n\" Highlight searches\nset hlsearch\n\" Ignore case of searches\nset ignorecase\n\" Highlight dynamically as pattern is typed\nset incsearch\n\" Always show status line\nset laststatus=2\n\" Enable mouse in all modes\nset mouse=a\n\" Disable error bells\nset noerrorbells\n\" Don’t reset cursor to start of line when moving around.\nset nostartofline\n\" Show the cursor position\nset ruler\n\" Don’t show the intro message when starting Vim\nset shortmess=atI\n\" Show the current mode\nset showmode\n\" Show the filename in the window titlebar\nset title\n\" Show the (partial) command as it’s being typed\nset showcmd\n\" Use relative line numbers\nif exists(\"&relativenumber\")\n    set relativenumber\n    au BufReadPost * set relativenumber\nendif\n\" Start scrolling three lines before the horizontal window border\nset scrolloff=3\n\n\" Strip trailing whitespace (,ss)\nfunction! StripWhitespace()\n    let save_cursor = getpos(\".\")\n    let old_query = getreg('/')\n    :%s/\\s\\+$//e\n    call setpos('.', save_cursor)\n    call setreg('/', old_query)\nendfunction\nnoremap <leader>ss :call StripWhitespace()<CR>\n\" Save a file as root (,W)\nnoremap <leader>W :w !sudo tee % > /dev/null<CR>\n\n\" Automatic commands\nif has(\"autocmd\")\n    \" Enable file type detection\n    filetype on\n    \" Treat .json files as .js\n    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript\n    \" Treat .md files as Markdown\n    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown\nendif\n"
        },
        {
          "name": ".wgetrc",
          "type": "blob",
          "size": 1.2919921875,
          "content": "# Use the server-provided last modification date, if available\ntimestamping = on\n\n# Do not go up in the directory structure when downloading recursively\nno_parent = on\n\n# Wait 60 seconds before timing out. This applies to all timeouts: DNS, connect and read. (The default read timeout is 15 minutes!)\ntimeout = 60\n\n# Retry a few times when a download fails, but don’t overdo it. (The default is 20!)\ntries = 3\n\n# Retry even when the connection was refused\nretry_connrefused = on\n\n# Use the last component of a redirection URL for the local file name\ntrust_server_names = on\n\n# Follow FTP links from HTML documents by default\nfollow_ftp = on\n\n# Add a `.html` extension to `text/html` or `application/xhtml+xml` files that lack one, or a `.css` extension to `text/css` files that lack one\nadjust_extension = on\n\n# Use UTF-8 as the default system encoding\n# Disabled as it makes `wget` builds that don’t support this feature unusable.\n# Does anyone know how to conditionally configure a wget setting?\n# http://unix.stackexchange.com/q/34730/6040\n#local_encoding = UTF-8\n\n# Ignore `robots.txt` and `<meta name=robots content=nofollow>`\nrobots = off\n\n# Print the HTTP and FTP server responses\nserver_response = on\n\n# Disguise as IE 9 on Windows 7\nuser_agent = Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 3.5263671875,
          "content": "Credits\n============\n\nThis repo builds on the awesome work from the following repos:\n\n* [dotfiles](https://github.com/mathiasbynens/dotfiles) by Mathias Bynens\n* [mac-dev-setup](https://github.com/nicolashery/mac-dev-setup) by Nicolas Hery\n\n#### Image Credits\n\n* [Xcode](http://www.playfripp.com/wp-content/uploads/2012/12/xcode_command_line.jpg)\n* [Terminal](http://cloudstudio.ethz.ch/comcom/img/terminal_icon.png)\n* [OSX](http://icons.iconarchive.com/icons/osullivanluke/orb-os-x/512/OSX-icon.png)\n* [Homebrew](http://blogs.alfresco.com/wp/developer/files/2012/12/homebrew.png)\n* [PyData](http://pydata.org/static/base/includes/images/pydatalogo-generic.png)\n* [AWS](http://aws.amazon.com)\n* [Data Stores](http://inwallspeakers1.com/wp-content/uploads/2014/10/database-symbol-png.png)\n* [Web Dev](http://html5beginners.com/wp-content/uploads/2014/09/js.png)\n* [Chrome](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Google_Chrome_icon_(2011).svg/1024px-Google_Chrome_icon_(2011).svg.png)\n* [iTerm2](https://upload.wikimedia.org/wikipedia/en/d/d7/ITerm2-icon.png)\n* [Atom](https://raw.githubusercontent.com/zeke/atom-icon/master/old-icon/2.png)\n* [Git](https://git-scm.com/images/logos/logomark-orange@2x.png)\n* [VirtualBox](http://www.discoposse.com/wp-content/uploads/2013/07/virtualbox-logo.png)\n* [Vagrant](https://hashicorp.com/images/blog/a-new-look-for-vagrant/logo_wide-fbb6c6e8.png)\n* [Docker](https://msopentech.com/wp-content/uploads/dockericon.png)\n* [Python](https://www.python.org/)\n* [Anaconda](https://store.continuum.io/static/img/anaconda_logo_web.png)\n* [NumPy](http://www.numpy.org/)\n* [Pandas](http://pandas.pydata.org/)\n* [Matplotlib](http://matplotlib.org/)\n* [Seaborn](http://i.stack.imgur.com/pDYIh.png)\n* [Scikit-learn](http://scikit-learn.org/)\n* [SciPy](http://www.scipy.org/)\n* [Flask](http://flask.pocoo.org/static/logo/flask.png)\n* [Bokeh](http://bokeh.pydata.org/en/latest/_static/bokeh-transparent.png)\n* [Spark](http://spark.apache.org/)\n* [Hadoop](https://hadoop.apache.org/)\n* [Mrjob](https://github.com/Yelp/mrjob)\n* [AWS S3](http://aws.amazon.com)\n* [AWS EMR](http://aws.amazon.com)\n* [AWS Redshift](http://aws.amazon.com)\n* [AWS Kinesis](http://aws.amazon.com)\n* [AWS Lambda](http://aws.amazon.com)\n* [AWS Machine Learning](http://aws.amazon.com)\n* [Heroku](https://www.heroku.com/)\n* [MySQL](https://upload.wikimedia.org/wikipedia/en/thumb/6/62/MySQL.svg/1280px-MySQL.svg.png)\n* [MySQL Workbench](http://www.orcsweb.com/wp-content/uploads/2013/05/mysqlWorkbench.png)\n* [MongoDB](http://s3.amazonaws.com/info-mongodb-com/_com_assets/media/mongodb-logo-rgb.jpeg)\n* [Redis](https://upload.wikimedia.org/wikipedia/en/thumb/6/6b/Redis_Logo.svg/467px-Redis_Logo.svg.png)\n* [Elasticsearch](https://www.joyent.com/content/02-public-cloud/02-benchmarks/01-elasticsearch/header.png?v=1433286522)\n* [Node.js](https://nodejs.org/images/logos/nodejs.png)\n* [JSHint](http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1425566554jshint-logo.png)\n* [Ruby](http://www.unixstickers.com/image/cache/data/stickers/ruby/ruby.sh-600x600.png)\n* [less](http://www.endertech.com/wp-content/uploads/2014/10/LESSLogo.jpeg)\n* [Java](http://cdn.rawgit.com/chocolatey/chocolatey-coreteampackages/50fd97744110dcbce1acde889c0870599c9d5584/icons/java.svg)\n* [Android](http://www.android.com/media/android_vector.jpg)\n* [Android SDK](http://geckobrosradio.com/wp-content/uploads/2014/06/android-logo-png.png)\n* [Android Studio](http://www.eightbitdreams.com/wp-content/uploads/2015/05/android-studio-logo.png)\n* [IntelliJ IDEA](http://www.jetbrains.com/img/logos/intellijIdea.png)"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.02734375,
          "content": "This repository contains a variety of content; some developed by Donne Martin,\nand some from third-parties.  The third-party content is distributed under the\nlicense provided by those parties.\n\nThe content developed by Donne Martin is distributed under the following license:\n\nI am providing code and resources in this repository to you under an open source\nlicense.  Because this is my personal repository, the license you receive to my\ncode and resources is from me and not my employer (Facebook).\n\nCopyright 2015 Donne Martin\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 71.8974609375,
          "content": "dev-setup\n============\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/repo-header.gif\">\n</p>\n\n## Motivation\n\nSetting up a new developer machine can be an **ad-hoc, manual, and time-consuming** process.  `dev-setup` aims to **simplify** the process with **easy-to-understand instructions** and **dotfiles/scripts** to **automate the setup** of the following:\n\n* **OS X updates and Xcode Command Line Tools**\n* **OS X defaults** geared towards developers\n* **Developer tools**: Vim, bash, tab completion, curl, git, GNU core utils, Python, Ruby, etc\n* **Developer apps**: iTerm2, Sublime Text, Atom, VirtualBox, Vagrant, Docker, Chrome, etc\n* **Python data analysis**: IPython Notebook, NumPy, Pandas, Scikit-Learn, Matplotlib, etc\n* **Big Data platforms**: Spark (with IPython Notebook integration) and MapReduce\n* **Cloud services**: Amazon Web Services (Boto, AWS CLI, S3cmd, etc) and Heroku\n* **Common data stores**: MySQL, PostgreSQL, MongoDB, Redis, and Elasticsearch\n* **Javascript web development**: Node.js, JSHint, and Less\n* **Android development**: Java, Android SDK, Android Studio, IntelliJ IDEA\n\n### But...I Don't Need All These Tools!\n\n**`dev-setup` is geared to be more of an organized *reference* of various developer tools.**\n\n**You're *not* meant to install everything.**\n\nIf you're interested in automation, `dev-setup` provides a customizable [setup script](#single-setup-script).  There's really no one-size-fits-all solution for developers so you're encouraged to make tweaks to suit your needs.\n\n[Credits](#credits): This repo builds on the awesome work from [Mathias Bynens](https://github.com/mathiasbynens) and [Nicolas Hery](https://github.com/nicolashery).\n\n### For Automation, What About Vagrant, Docker, or Boxen?\n\n[Vagrant](#vagrant) and [Docker](#docker) are great tools and are set up by this repo. I've found that Vagrant works well to ensure dev matches up with test and production tiers. I've only started playing around with Docker for side projects and it looks very promising. However, for Mac users, Docker and Vagrant both rely on **virtual machines**, which have their own considerations/pros/cons.\n\n[Boxen](https://boxen.github.com/) is a cool solution, although some might find it better geared towards \"more mature companies or devops teams\". I've seen some discussions of [difficulties as it is using Puppet under the hood](https://github.com/boxen/our-boxen/issues/742).\n\nThis repo takes a more **light-weight** approach to automation using a combination of **Homebrew, Homebrew Cask, and shell scripts** to do basic system setup.  It also provides **easy-to understand instructions** for installation, configuration, and usage for each developer app or tool.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/iterm2.png\">\n</p>\n\n### Sections Summary\n* Section 1 contains the dotfiles/scripts and instructions to set up your system.\n* Sections 2 through 7 detail more information about installation, configuration, and usage for topics in Section 1.\n\n## Section 1: Installation\n\n**Scripts tested on OS X 10.10 Yosemite and 10.11 El Capitan.**\n\n* [Single Setup Script](#single-setup-script)\n* [bootstrap.sh script](#bootstrapsh-script)\n    * Syncs dev-setup to your local home directory `~`\n* [osxprep.sh script](#osxprepsh-script)\n    * Updates OS X and installs Xcode command line tools\n* [brew.sh script](#brewsh-script)\n    * Installs common Homebrew formulae and apps\n* [osx.sh script](#osxsh-script)\n    * Sets up OS X defaults geared towards developers\n* [pydata.sh script](#pydatash-script)\n    * Sets up python for data analysis\n* [aws.sh script](#awssh-script)\n    * Sets up Spark, Hadoop MapReduce, and Amazon Web Services\n* [datastores.sh script](#datastoressh-script)\n    * Sets up common data stores\n* [web.sh script](#websh-script)\n    * Sets up JavaScript web development\n* [android.sh script](#androidsh-script)\n    * Sets up Android development\n\n## Section 2: General Apps and Tools\n\n* [Sublime Text](#sublime-text)\n* [Atom](#atom)\n* [Terminal Customization](#terminal-customization)\n* [iTerm2](#iterm2)\n* [Vim](#vim)\n* [Git](#git)\n* [VirtualBox](#virtualbox)\n* [Vagrant](#vagrant)\n* [Docker](#docker)\n* [Homebrew](#homebrew)\n* [Ruby and rbenv](#ruby-and-rbenv)\n* [Python](#python)\n* [Pip](#pip)\n* [Virtualenv](#virtualenv)\n* [Virtualenvwrapper](#virtualenvwrapper)\n\n## Section 3: Python Data Analysis\n\n* [Anaconda](#anaconda)\n* [IPython Notebook](#ipython-notebook)\n* [NumPy](#numpy)\n* [Pandas](#pandas)\n* [Matplotlib](#matplotlib)\n* [Seaborn](#seaborn)\n* [Scikit-learn](#scikit-learn)\n* [SciPy](#scipy)\n* [Flask](#flask)\n* [Bokeh](#bokeh)\n\n## Section 4: Big Data, AWS, and Heroku\n\n* [Spark](#spark)\n* [MapReduce](#mapreduce)\n* [Awesome AWS](#awesome-aws-)\n* [AWS Account](#aws-account)\n* [AWS CLI](#aws-cli)\n* [SAWS](#saws)\n* [Boto](#boto)\n* [S3cmd](#s3cmd)\n* [S3DistCp](#s3distcp)\n* [S3-parallel-put](#s3-parallel-put)\n* [Redshift](#redshift)\n* [Kinesis](#kinesis)\n* [Lambda](#lambda)\n* [AWS Machine Learning](#aws-machine-learning)\n* [Heroku](#heroku)\n\n## Section 5: Data Stores\n\n* [MySQL](#mysql)\n* [MySQL Workbench](#mysql-workbench)\n* [MongoDB](#mongodb)\n* [Redis](#redis)\n* [Elasticsearch](#elasticsearch)\n\n## Section 6: JavaScript Web Development\n\n* [Node.js](#nodejs)\n* [JSHint](#jshint)\n* [Less](#less)\n\n## Section 7: Android Development\n\n* [Java](#java)\n* [Android SDK](#android-sdk)\n* [Android Studio](#android-studio)\n* [IntelliJ IDEA](#intellij-idea)\n\n## Section 8: Misc\n\n* [Contributions](#contributions)\n* [Credits](#credits)\n* [Contact Info](#contact-info)\n* [License](#license)\n\n## Section 1: Installation\n\n### Single Setup Script\n\n#### Running with Git\n\n##### Clone the Repo\n\n    $ git clone https://github.com/donnemartin/dev-setup.git && cd dev-setup\n\n##### Run the .dots Script with Command Line Arguments\n\n**Since you probably don't want to install every section**, the `.dots` script supports command line arguments to run only specified sections.  Simply pass in the [scripts](#scripts) that you want to install.  Below are some examples.\n\n**For more customization, you can [clone](#clone-the-repo) or [fork](https://github.com/donnemartin/dev-setup/fork) the repo and tweak the `.dots` script and its associated components to suit your needs.**\n\nRun all:\n\n    $ ./.dots all\n\nRun `bootstrap.sh`, `osxprep.sh`, `brew.sh`, and `osx.sh`:\n\n    $ ./.dots bootstrap osxprep brew osx\n\nRun `bootstrap.sh`, `osxprep.sh`, `brew.sh`, and `osx.sh`, `pydata.sh`, `aws.sh`, and `datastores.sh`:\n\n    $ ./.dots bootstrap osxprep brew osx pydata aws datastores\n\n#### Running without Git\n\n    $ curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.dots && ./.dots [Add ARGS Here]\n\n#### Scripts\n\n* [.dots](https://github.com/donnemartin/dev-setup/blob/master/.dots)\n    * Runs specified scripts\n* [bootstrap.sh](https://github.com/donnemartin/dev-setup/blob/master/bootstrap.sh)\n    * Syncs dev-setup to your local home directory `~`\n* [osxprep.sh](https://github.com/donnemartin/dev-setup/blob/master/osxprep.sh)\n    * Updates OS X and installs Xcode command line tools\n* [brew.sh](https://github.com/donnemartin/dev-setup/blob/master/brew.sh)\n    * Installs common Homebrew formulae and apps\n* [osx.sh](https://github.com/donnemartin/dev-setup/blob/master/osx.sh)\n    * Sets up OS X defaults geared towards developers\n* [pydata.sh](https://github.com/donnemartin/dev-setup/blob/master/pydata.sh)\n    * Sets up python for data analysis\n* [aws.sh](https://github.com/donnemartin/dev-setup/blob/master/aws.sh)\n    * Sets up Spark, Hadoop MapReduce, and Amazon Web Services\n* [datastores.sh](https://github.com/donnemartin/dev-setup/blob/master/datastores.sh)\n    * Sets up common data stores\n* [web.sh](https://github.com/donnemartin/dev-setup/blob/master/web.sh)\n    * Sets up JavaScript web development\n* [android.sh](https://github.com/donnemartin/dev-setup/blob/master/android.sh)\n    * Sets up Android development\n\n**Notes:**\n\n* `.dots` will initially prompt you to enter your password.\n* `.dots` might ask you to re-enter your password at certain stages of the installation.\n* If OS X updates require a restart, simply run `.dots` again to resume where you left off.\n* When installing the Xcode command line tools, a dialog box will confirm installation.\n    * Once Xcode is installed, follow the instructions on the terminal to continue.\n* `.dots` runs `brew.sh`, which takes awhile to complete as some formulae need to be installed from source.\n* **When `.dots` completes, be sure to restart your computer for all updates to take effect.**\n\nI encourage you to read through Section 1 so you have a better idea of what each installation script does.  The following discussions describe in greater detail what is executed when running the [.dots](https://github.com/donnemartin/dev-setup/blob/master/.dots) script.\n\n### bootstrap.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/commands.png\">\n  <br/>\n</p>\n\nThe `bootstrap.sh` script will sync the dev-setup repo to your local home directory.  This will include customizations for Vim, bash, curl, git, tab completion, aliases, a number of utility functions, etc.  Section 2 of this repo describes some of the customizations.\n\n#### Running with Git\n\nFirst, fork or [clone the repo](#clone-the-repo).  The `bootstrap.sh` script will pull in the latest version and copy the files to your home folder `~`:\n\n    $ source bootstrap.sh\n\nTo update later on, just run that command again.\n\nAlternatively, to update while avoiding the confirmation prompt:\n\n    $ set -- -f; source bootstrap.sh\n\n#### Running without Git\n\nTo sync dev-setup to your local home directory without Git, run the following:\n\n    $ cd ~; curl -#L https://github.com/donnemartin/dev-setup/tarball/master | tar -xzv --strip-components 1 --exclude={README.md,bootstrap.sh,LICENSE}\n\nTo update later on, just run that command again.\n\n#### Optional: Specify PATH\n\nIf `~/.path` exists, it will be sourced along with the other files before any feature testing (such as detecting which version of `ls` is being used takes place.\n\nHere’s an example `~/.path` file that adds `/usr/local/bin` to the `$PATH`:\n\n```bash\nexport PATH=\"/usr/local/bin:$PATH\"\n```\n\n#### Optional: Add Custom Commands\n\nIf `~/.extra` exists, it will be sourced along with the other files. You can use this to add a few custom commands without the need to fork this entire repository, or to add commands you don’t want to commit to a public repository.\n\nMy `~/.extra` looks something like this:\n\n```bash\n# Git credentials\nGIT_AUTHOR_NAME=\"Donne Martin\"\nGIT_COMMITTER_NAME=\"$GIT_AUTHOR_NAME\"\ngit config --global user.name \"$GIT_AUTHOR_NAME\"\nGIT_AUTHOR_EMAIL=\"donne.martin@gmail.com\"\nGIT_COMMITTER_EMAIL=\"$GIT_AUTHOR_EMAIL\"\ngit config --global user.email \"$GIT_AUTHOR_EMAIL\"\n\n# Pip should only run if there is a virtualenv currently activated\nexport PIP_REQUIRE_VIRTUALENV=true\n\n# Install or upgrade a global package\n# Usage: gpip install –upgrade pip setuptools virtualenv\ngpip(){\n   PIP_REQUIRE_VIRTUALENV=\"\" pip \"$@\"\n}\n```\n\nYou could also use `~/.extra` to override settings, functions, and aliases from the dev-setup repository, although it’s probably better to [fork the dev-setup repository](https://github.com/donnemartin/dev-setup/fork).\n\n### osxprep.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/xcode.jpg\">\n  <br/>\n</p>\n\nRun the `osxprep.sh` script:\n\n    $ ./osxprep.sh\n\n`osxprep.sh` will first install all updates.  If a restart is required, simply run the script again.  Once all updates are installed, `osxprep.sh` will then [Install Xcode Command Line Tools](#install-xcode-command-line-tools).\n\nIf you want to go the manual route, you can also install all updates by running \"App Store\", selecting the \"Updates\" icon, then updating both the OS and installed apps.\n\n#### Install Xcode Command Line Tools\n\nAn important dependency before many tools such as Homebrew can work is the **Command Line Tools for Xcode**. These include compilers like gcc that will allow you to build from source.\n\nIf you are running **OS X 10.9 Mavericks or later**, then you can install the Xcode Command Line Tools directly from the command line with:\n\n    $ xcode-select --install\n\n**Note**: the `osxprep.sh` script executes this command.\n\nRunning the command above will display a dialog where you can either:\n* Install Xcode and the command line tools\n* Install the command line tools only\n* Cancel the install\n\n##### OS X 10.8 and Older\n\nIf you're running 10.8 or older, you'll need to go to [http://developer.apple.com/downloads](http://developer.apple.com/downloads), and sign in with your Apple ID (the same one you use for iTunes and app purchases). Unfortunately, you're greeted by a rather annoying questionnaire. All questions are required, so feel free to answer at random.\n\nOnce you reach the downloads page, search for \"command line tools\", and download the latest **Command Line Tools (OS X Mountain Lion) for Xcode**. Open the **.dmg** file once it's done downloading, and double-click on the **.mpkg** installer to launch the installation. When it's done, you can unmount the disk in Finder.\n\n### brew.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/homebrew2.png\">\n  <br/>\n</p>\n\nWhen setting up a new Mac, you may want to install [Homebrew](http://brew.sh/), a package manager that simplifies installing and updating applications or libraries.\n\nSome of the apps installed by the `brew.sh` script include: Chrome, Firefox, Sublime Text, Atom, Dropbox, Evernote, Skype, Slack, Alfred, VirtualBox, Vagrant, Docker, etc.  **For a full listing of installed formulae and apps, refer to the commented [brew.sh source file](https://github.com/donnemartin/dev-setup/blob/master/brew.sh) directly and tweak it to suit your needs.**\n\nRun the `brew.sh` script:\n\n    $ ./brew.sh\n\nThe `brew.sh` script takes awhile to complete, as some formulae need to be installed from source.\n\n**For your terminal customization to take full effect, quit and re-start the terminal**\n\n### osx.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/osx.png\">\n  <br/>\n</p>\n\nWhen setting up a new Mac, you may want to set OS X defaults geared towards developers.  The `osx.sh` script also configures common third-party apps such Sublime Text and Chrome.\n\n**Note**: **I strongly encourage you read through the commented [osx.sh source file](https://github.com/donnemartin/dev-setup/blob/master/osx.sh) and tweak any settings based on your personal preferences.  The script defaults are intended for you to customize.**  For example, if you are not running an SSD you might want to change some of the settings listed in the SSD section.\n\nRun the `osx.sh` script:\n\n    $ ./osx.sh\n\n**For your terminal customization to take full effect, quit and re-start the terminal.**\n\n### pydata.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/pydata.png\">\n  <br/>\n</p>\n\nTo set up a development environment to work with Python and data analysis without relying on the more heavyweight [Anaconda](#anaconda) distribution, run the `pydata.sh` script:\n\n    $ ./pydata.sh\n\nThis will install [Virtualenv](#virtualenv) and [Virtualenvwrapper](#virtualenvwrapper).  It will then set up two virtual environments loaded with the packages you will need to work with data in Python 2 and Python 3.\n\nTo switch to the Python 2 virtual environment, run the following Virtualenvwrapper command:\n\n    $ workon py2-data\n\nTo switch to the Python 3 virtual environment, run the following Virtualenvwrapper command:\n\n    $ workon py3-data\n\nThen start working with the installed packages, for example:\n\n    $ ipython notebook\n\n[Section 3: Python Data Analysis](#section-3-python-data-analysis) describes the installed packages and usage.\n\n### aws.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/aws.png\">\n  <br/>\n</p>\n\nTo set up a development environment to work with Spark, Hadoop MapReduce, and Amazon Web Services, run the `aws.sh` script:\n\n    $ ./aws.sh\n\n[Section 4: Big Data, AWS, and Heroku](#section-4-big-data-aws-and-heroku) describes the installed packages and usage.\n\n### datastores.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/datastores.png\">\n  <br/>\n</p>\n\nTo set up common data stores, run the `datastores.sh` script:\n\n    $ ./datastores.sh\n\n[Section 5: Data Stores](#section-5-data-stores) describes the installed packages and usage.\n\n### web.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/webdev.png\">\n  <br/>\n</p>\n\nTo set up a JavaScript web development environment, Run the `web.sh` script:\n\n    $ ./web.sh\n\n[Section 6: Web Development](#section-6-web-development) describes the installed packages and usage.\n\n### android.sh script\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/android.png\">\n  <br/>\n</p>\n\nTo set up an Android development environment, run the `android.sh` script:\n\n    $ ./android.sh\n\n[Section 7: Android Development](#section-7-android-development) describes the installed packages and usage.\n\n## Section 2: General Apps and Tools\n\n### Sublime Text\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/sublime.png\">\n  <br/>\n</p>\n\nWith the terminal, the text editor is a developer's most important tool. Everyone has their preferences, but unless you're a hardcore [Vim](http://en.wikipedia.org/wiki/Vim_(text_editor)) user, a lot of people are going to tell you that [Sublime Text](http://www.sublimetext.com/) is currently the best one out there.\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs Sublime Text.\n\nIf you prefer to install it separately, go ahead and [download](http://www.sublimetext.com/) it. Open the **.dmg** file, drag-and-drop in the **Applications** folder.\n\n**Note**: At this point I'm going to create a shortcut on the OS X Dock for both for Sublime Text. To do so, right-click on the running application and select **Options > Keep in Dock**.\n\nSublime Text is not free, but I think it has an unlimited \"evaluation period\". Anyhow, we're going to be using it so much that even the seemingly expensive $70 price tag is worth every penny. If you can afford it, I suggest you [support](http://www.sublimetext.com/buy) this awesome tool.\n\n#### Configuration\n\nThe [osx.sh script](#osxsh-script) contains Sublime Text configurations.\n\n#### Soda Theme\n\nThe [Soda Theme](https://github.com/buymeasoda/soda-theme) is a great UI theme for Sublime Text, especially if you use a dark theme and think the side bar sticks out like a sore thumb.\n\n##### Installation with Sublime Package Control\n\nIf you are using Will Bond's excellent [Sublime Package Control](http://wbond.net/sublime_packages/package_control), you can easily install Soda Theme via the `Package Control: Install Package` menu item. The Soda Theme package is listed as `Theme - Soda` in the packages list.\n\n##### Installation with Git\n\nAlternatively, if you are a git user, you can install the theme and keep up to date by cloning the repo directly into your `Packages` directory in the Sublime Text application settings area.\n\nYou can locate your Sublime Text `Packages` directory by using the menu item `Preferences -> Browse Packages...`.\n\nWhile inside the `Packages` directory, clone the theme repository using the command below:\n\n    $ git clone https://github.com/buymeasoda/soda-theme/ \"Theme - Soda\"\n\n##### Activating the Theme on Sublime Text 2\n\n* Open your User Settings Preferences file `Sublime Text 2 -> Preferences -> Settings - User`\n* Add (or update) your theme entry to be `\"theme\": \"Soda Light.sublime-theme\"` or `\"theme\": \"Soda Dark.sublime-theme\"`\n\n**Example Sublime Text 2 User Settings**\n\n    {\n        \"theme\": \"Soda Light.sublime-theme\"\n    }\n\n##### Activating the Theme on Sublime Text 3\n\n* Open your User Settings Preferences file `Sublime Text -> Preferences -> Settings - User`\n* Add (or update) your theme entry to be `\"theme\": \"Soda Light 3.sublime-theme\"` or `\"theme\": \"Soda Dark 3.sublime-theme\"`\n\n**Example Sublime Text 3 User Settings**\n\n    {\n        \"theme\": \"Soda Light 3.sublime-theme\"\n    }\n\n##### Changing Monokai Comment Color\n\nAlthough Monokai is a great color scheme, I find that comments can be difficult to see.  You can follow these [instructions](http://stackoverflow.com/a/32686509) to change the color of the default theme.\n\nI set my comments color to `#E6DB74`.\n\n```\n<dict>\n    ...\n    <dict>\n        <key>foreground</key>\n        <string>#E6DB74</string>\n    </dict>\n    ...\n</dict>\n```\n\n### Atom\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/atom.png\">\n  <br/>\n</p>\n\n[Atom](https://github.com/atom/atom) is a great open-source editor from GitHub that is rapidly gaining contributors and popularity.\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs Atom.\n\nIf you prefer to install it separately, [download](https://atom.io/) it, open the **.dmg** file, drag-and-drop in the **Applications** folder.\n\n#### Configuration\n\nAtom has a great package manager that allows you to easily install both core and community packages.\n\n### Terminal Customization\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/terminal.png\">\n  <br/>\n</p>\n\nSince we spend so much time in the terminal, we should try to make it a more pleasant and colorful place.\n\n#### Configuration\n\nThe [bootstrap.sh script](#bootstrapsh-script) and [osx.sh script](#osxsh-script) contain terminal customizations.\n\n### iTerm2\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/iterm2.png\">\n  <br/>\n</p>\n\nI prefer iTerm2 over the stock Terminal, as it has some additional [great features](https://www.iterm2.com/features.html). Download and install iTerm2 (the newest version, even if it says \"beta release\").\n\nIn Finder, drag and drop the iTerm Application file into the Applications folder.\n\nYou can now launch iTerm, through the Launchpad for instance.\n\nLet's just quickly change some preferences. In iTerm > Preferences..., in the tab Profiles, create a new one with the \"+\" icon, and rename it to your first name for example. Then, select Other Actions... > Set as Default. Under the section Window, change the size to something better, like Columns: 125 and Rows: 35.  I also like to set General > Working Directory > Reuse previous session's directory.  Finally, I change the way the option key works so that I can quickly jump between words as described [here](https://coderwall.com/p/h6yfda/use-and-to-jump-forwards-backwards-words-in-iterm-2-on-os-x).\n\nWhen done, hit the red \"X\" in the upper left (saving is automatic in OS X preference panes). Close the window and open a new one to see the size change.\n\n#### Configuration\n\nSince we spend so much time in the terminal, we should try to make it a more pleasant and colorful place. What follows might seem like a lot of work, but trust me, it'll make the development experience so much better.\n\nNow let's add some color. I'm a big fan of the [Solarized](http://ethanschoonover.com/solarized) color scheme. It is supposed to be scientifically optimal for the eyes. I just find it pretty.\n\n- In **iTerm2 Preferences**, under **Profiles** and **Colors**, go to **Load Presets...** and select **Solarized Dark** to activate it. Voila!\n\nAt this point you can also change your computer's name, which shows up in this terminal prompt. If you want to do so, go to **System Preferences** > **Sharing**. For example, I changed mine from \"Donne's MacBook Pro\" to just \"MacBook Pro\", so it shows up as `MacBook-Pro` in the terminal.\n\nNow we have a terminal we can work with!\n\n### Vim\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/vim.png\">\n  <br/>\n</p>\n\nAlthough Sublime Text will be our main editor, it is a good idea to learn some very basic usage of [Vim](http://www.vim.org/). It is a very popular text editor inside the terminal, and is usually pre-installed on any Unix system.\n\nFor example, when you run a Git commit, it will open Vim to allow you to type the commit message.\n\nI suggest you read a tutorial on Vim. Grasping the concept of the two \"modes\" of the editor, **Insert** (by pressing `i`) and **Normal** (by pressing `Esc` to exit Insert mode), will be the part that feels most unnatural. After that it's just remembering a few important keys.\n\n#### Configuration\n\nThe [bootstrap.sh script](#bootstrapsh-script) contains Vim customizations.\n\n### VirtualBox\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/virtualbox.png\">\n  <br/>\n</p>\n\nVirtualBox creates and manages virtual machines.  It's a solid free solution to its commercial rival VMware.\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs VirtualBox\n\nIf you prefer to install it separately, you can download it [here](https://www.virtualbox.org/wiki/Downloads) or run:\n\n    $ brew update\n    $ brew install caskroom/cask/brew-cask\n    $ brew cask install --appdir=\"/Applications\" virtualbox\n\n### Vagrant\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/vagrant.jpeg\">\n  <br/>\n</p>\n\nVagrant creates and configures development environments.  You can think of it as a higher-level wrapper around VirtualBox and configuration management tools like Ansible, Chef, Puppet, and Salt.  Vagrant also supports Docker containers and server environments like Amazon EC2.\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs Vagrant.\n\nIf you prefer to install it separately, you can download it [here](https://www.vagrantup.com/) or run:\n\n    $ brew update\n    $ brew install caskroom/cask/brew-cask\n    $ brew cask install --appdir=\"/Applications\" vagrant\n\n### Docker\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/docker.png\">\n  <br/>\n</p>\n\nDocker automates the deployment of applications inside software containers.  I think the following [quote](http://www.linux.com/news/enterprise/cloud-computing/731454-docker-a-shipping-container-for-linux-code) explains docker nicely: \"Docker is a tool that can package an application and its dependencies in a virtual container that can run on any Linux server. This helps enable flexibility and portability on where the application can run, whether on premise, public cloud, private cloud, bare metal, etc\".\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs Docker.\n\nIf you prefer to install it separately, you can download it [here](https://www.docker.com/) or run:\n\n    $ brew update\n    $ brew install docker\n    $ brew install boot2docker\n\n#### Configuration\n\nInitialize and start `boot2docker` (only need to do this once):\n\n    $ boot2docker init\n\nStart the VM:\n\n    $ boot2docker up\n\nSet the `DOCKER_HOST` environment variable and fill in IP and PORT based on the output from the `boot2coker up` command:\n\n    $ export DOCKER_HOST=tcp://IP:PORT\n\n### Git\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/git.png\">\n  <br/>\n</p>\n\nWhat's a developer without [Git](http://git-scm.com/)?\n\n#### Installation\n\nGit should have been installed when you ran through the [Install Xcode Command Line Tools](#install-xcode-command-line-tools) section.\n\n#### Configuration\n\nTo check your version of Git, run the following command:\n\n    $ git --version\n\nAnd `$ which git` should output `/usr/local/bin/git`.\n\nLet's set up some basic configuration. Download the [.gitconfig](https://raw.githubusercontent.com/donnemartin/dev-setup/master/.gitconfig) file to your home directory:\n\n    $ cd ~\n    $ curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.gitconfig\n\nIt will add some color to the `status`, `branch`, and `diff` Git commands, as well as a couple aliases. Feel free to take a look at the contents of the file, and add to it to your liking.\n\nNext, we'll define your Git user (should be the same name and email you use for [GitHub](https://github.com/) and [Heroku](http://www.heroku.com/)):\n\n    $ git config --global user.name \"Your Name Here\"\n    $ git config --global user.email \"your_email@youremail.com\"\n\nThey will get added to your `.gitconfig` file.\n\nTo push code to your GitHub repositories, we're going to use the recommended HTTPS method (versus SSH). So you don't have to type your username and password everytime, let's enable Git password caching as described [here](https://help.github.com/articles/set-up-git):\n\n    $ git config --global credential.helper osxkeychain\n\n**Note**: On a Mac, it is important to remember to add `.DS_Store` (a hidden OS X system file that's put in folders) to your `.gitignore` files. You can take a look at this repository's [.gitignore](https://github.com/donnemartin/dev-setup/blob/master/.gitignore) file for inspiration.  Also check out GitHub's [collection of .gitignore templates](https://github.com/github/gitignore).\n\n### Homebrew\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/homebrew.png\">\n  <br/>\n</p>\n\nPackage managers make it so much easier to install and update applications (for Operating Systems) or libraries (for programming languages). The most popular one for OS X is [Homebrew](http://brew.sh/).\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs Homebrew and a number of useful Homebrew formulae and apps.\n\nIf you prefer to install it separately, run the following command and follow the steps on the screen:\n\n    $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n#### Usage\n\nTo install a package (or **Formula** in Homebrew vocabulary) simply type:\n\n    $ brew install <formula>\n\nTo update Homebrew's directory of formulae, run:\n\n    $ brew update\n\n**Note**: I've seen that command fail sometimes because of a bug. If that ever happens, run the following (when you have Git installed):\n\n    $ cd /usr/local\n    $ git fetch origin\n    $ git reset --hard origin/master\n\nTo see if any of your packages need to be updated:\n\n    $ brew outdated\n\nTo update a package:\n\n    $ brew upgrade <formula>\n\nHomebrew keeps older versions of packages installed, in case you want to roll back. That rarely is necessary, so you can do some cleanup to get rid of those old versions:\n\n    $ brew cleanup\n\nTo see what you have installed (with their version numbers):\n\n    $ brew list --versions\n\n### Ruby and rbenv\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/ruby.png\">\n  <br/>\n</p>\n\n[Ruby](http://www.ruby-lang.org/) is already installed on Unix systems, but we don't want to mess around with that installation. More importantly, we want to be able to use the latest version of Ruby.\n\n#### Installation\n\n`brew.sh` provides [rbenv](https://github.com/rbenv/rbenv) and [ruby-build](https://github.com/rbenv/ruby-build) which allow you to manage multiple versions of Ruby on the same machine.  `brew.sh` adds the following line to your `.extra` file to initialize `rbenv`:\n\n```\neval \"$(rbenv init -)\"\n```\n\n#### Usage\n\n`rbenv` uses `ruby-build` to download, compile, and install new versions of Ruby. You can see all versions available to download and install:\n\n```\n$ ruby-build --definitions\n```\n\nTo install a new version of Ruby:\n\n```\n# list all available versions installed on the system:\n$ rbenv install -l\n\n# install a Ruby version:\n$ rbenv install 2.2.3\n```\n\nTo switch Ruby versions:\n\n```\n# set a local application-specific Ruby version in the current directory\n$ rbenv local 1.9.3\n\n# set the global version of Ruby to be used in all shells\n$ rbenv global 2.0.0\n\n```\n\n`rbenv` by default will install Ruby versions into a directory of the same name under `~/.rbenv/versions`. Because your user owns this directory, you no longer need to use `sudo` to install gems.\n\n### Python\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/python.png\">\n  <br/>\n</p>\n\nOS X, like Linux, ships with [Python](http://python.org/) already installed. But you don't want to mess with the system Python (some system tools rely on it, etc.), so we'll install our own version with Homebrew. It will also allow us to get the very latest version of Python 2.7 and Python 3.\n\n#### Installation\n\nThe [brew.sh script](#brewsh-script) installs the latest versions of Python 2 and Python 3.\n\n### Pip\n\n[Pip](https://pypi.python.org/pypi/pip) is the Python package manager.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs pip.\n\n#### Usage\n\nHere are a couple Pip commands to get you started. To install a Python package:\n\n    $ pip install <package>\n\nTo upgrade a package:\n\n    $ pip install --upgrade <package>\n\nTo see what's installed:\n\n    $ pip freeze\n\nTo uninstall a package:\n\n    $ pip uninstall <package>\n\n### Virtualenv\n\n[Virtualenv](http://www.virtualenv.org/) is a tool that creates an isolated Python environment for each of your projects. For a particular project, instead of installing required packages globally, it is best to install them in an isolated folder in the project (say a folder named `venv`), that will be managed by virtualenv.\n\nThe advantage is that different projects might require different versions of packages, and it would be hard to manage that if you install packages globally. It also allows you to keep your global `/usr/local/lib/python2.7/site-packages` folder clean.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs Virtualenv.\n\n#### Usage\n\nLet's say you have a project in a directory called `myproject`. To set up virtualenv for that project:\n\n    $ cd myproject/\n    $ virtualenv venv --distribute\n\nIf you want your virtualenv to also inherit globally installed packages (like IPython or Numpy mentioned above), use:\n\n    $ virtualenv venv --distribute --system-site-packages\n\nThese commands create a `venv` subdirectory in your project where everything is installed. You need to **activate** it first though (in every terminal where you are working on your project):\n\n    $ source venv/bin/activate\n\nYou should see a `(venv)` appear at the beginning of your terminal prompt indicating that you are working inside the virtualenv. Now when you install something:\n\n    $ pip install <package>\n\nIt will get installed in the `venv` folder, and not conflict with other projects.\n\n**Important**: Remember to add `venv` to your project's `.gitignore` file so you don't include all of that in your source code!\n\n### Virtualenvwrapper\n\n[Virtualenvwrapper](https://virtualenvwrapper.readthedocs.org/en/latest/) is a set of extensions that includes wrappers for creating and deleting virtual environments and otherwise managing your development workflow, making it easier to work on more than one project at a time without introducing conflicts in their dependencies.\n\nMain features include:\n\n* Organizes all of your virtual environments in one place.\n* Wrappers for managing your virtual environments (create, delete, copy).\n* Use a single command to switch between environments.\n* Tab completion for commands that take a virtual environment as argument.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs Virtualenvwrapper.\n\n#### Usage\n\nCreate a new virtual environment. When you create a new environment it automatically becomes the active environment:\n\n    $ mkvirtualenv [env name]\n\nRemove an existing virtual environment. The environment must be deactivated (see below) before it can be removed:\n\n    $ rmvirtualenv [env name]\n\nActivate a virtual environment. Will also list all existing virtual environments if no argument is passed:\n\n    $ workon [env name]\n\nDeactivate the currently active virtual environment. Note that workonwill automatically deactivate the current environment before activating a new one:\n\n    $ deactivate\n\n## Section 3: Python Data Analysis\n\n### Anaconda\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/anaconda.png\">\n  <br/>\n</p>\n\nAnaconda is a free distribution of the Python programming language for large-scale data processing, predictive analytics, and scientific computing that aims to simplify package management and deployment.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs packages you need to run Python data applications.  Alternatively, you can install the more heavy-weight Anaconda instead.\n\nFollow instructions to install [Anaconda](http://docs.continuum.io/anaconda/install.html) or the more lightweight [miniconda](http://conda.pydata.org/miniconda.html).\n\n### IPython Notebook\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/README_1200x800.gif\">\n</p>\n\n[IPython](http://ipython.org/) is an awesome project which provides a much better Python shell than the one you get from running `$ python` in the command-line. It has many cool functions (running Unix commands from the Python shell, easy copy & paste, creating Matplotlib charts in-line, etc.) and I'll let you refer to the [documentation](http://ipython.org/ipython-doc/stable/index.html) to discover them.\n\nIPython Notebook is a web-based interactive computational environment where you can combine code execution, text, mathematics, plots and rich media into a single document.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs IPython Notebook.  If you prefer to install it separately, run:\n\n    $ pip install \"ipython[notebook]\"\n\nIf you run into an issue about pyzmq, refer to the following [Stack Overflow post](http://stackoverflow.com/questions/24995438/pyzmq-missing-when-running-ipython-notebook) and run:\n\n    $ pip uninstall ipython\n    $ pip install \"ipython[all]\"\n\n#### Usage\n\n    $ ipython notebook\n\nIf you'd like to see some examples here are a couple of my repos that use IPython Notebooks heavily:\n* [data-science-ipython-notebooks](https://github.com/donnemartin/data-science-ipython-notebooks)\n* [interactive-coding-challenges](https://github.com/donnemartin/interactive-coding-challenges)\n\n### NumPy\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/numpy.png\">\n  <br/>\n</p>\n\nNumPy adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs NumPy.  If you prefer to install it separately, run:\n\n    $ pip install numpy\n\n#### Usage\n\nRefer to the following [Numpy IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#numpy).\n\n### Pandas\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/pandas.png\">\n  <br/>\n</p>\n\nPandas is a software library written for data manipulation and analysis in Python. Offers data structures and operations for manipulating numerical tables and time series.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs Pandas.  If you prefer to install it separately, run:\n\n    $ pip install pandas\n\n#### Usage\n\nRefer to the following [pandas IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#pandas).\n\n### Matplotlib\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/matplotlib.png\">\n  <br/>\n</p>\n\nMatplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs matplotlib.  If you prefer to install it separately, run:\n\n    $ pip install matplotlib\n\n#### Usage\n\nRefer to the following [matplotlib IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#matplotlib).\n\n### Seaborn\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/seaborn.png\">\n  <br/>\n</p>\n\nSeaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs matplotlib.  If you prefer to install it separately, run:\n\n    $ pip install seaborn\n\n#### Usage\n\nRefer to the following [matplotlib with Seaborn IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#matplotlib).\n\n### Scikit-learn\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/scikitlearn.png\">\n  <br/>\n</p>\n\nScikit-learn adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs Scikit-learn.  If you prefer to install it separately, run:\n\n    $ pip install scikit-learn\n\n#### Usage\n\nRefer to the following [scikit-learn IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#scikit-learn).\n\n### SciPy\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/scipy.png\">\n  <br/>\n</p>\n\nSciPy is a collection of mathematical algorithms and convenience functions built on the Numpy extension of Python. It adds significant power to the interactive Python session by providing the user with high-level commands and classes for manipulating and visualizing data.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs SciPy.  If you prefer to install it separately, run:\n\n    $ pip install scipy\n\n#### Usage\n\nRefer to the following [SciPy IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#statistical-inference-scipy).\n\n### Flask\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/flask.png\">\n  <br/>\n</p>\n\nFlask is a micro web application framework written in Python.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs SciPy.  If you prefer to install it separately, run:\n\n    $ pip install Flask\n\n#### Usage\n\n[Coming Soon] Refer to the following [Flask IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#).\n\n### Bokeh\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/bokeh.png\">\n  <br/>\n</p>\n\nBokeh is a Python interactive visualization library that targets modern web browsers for presentation. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, but also deliver this capability with high-performance interactivity over very large or streaming datasets. Bokeh can help anyone who would like to quickly and easily create interactive plots, dashboards, and data applications.\n\n#### Installation\n\nThe [pydata.sh script](#pydatash-script) installs Bokeh.  If you prefer to install it separately, run:\n\n    $ pip install bokeh\n\n#### Usage\n\n[Coming Soon] Refer to the following [Bokeh IPython Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks#).\n\n## Section 4: Big Data, AWS, and Heroku\n\n### Spark\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/spark.png\">\n  <br/>\n</p>\n\nSpark is an in-memory cluster computing framework, up to 100 times faster for certain applications and is well suited for machine learning algorithms.\n\n#### Installation\n\nThe [aws.sh script](#aws-script) installs Spark locally.  It also hooks up Spark to run within the IPython Notebook by configuring your `.bash_profile` and adding the repo's `profile_pyspark/` to `.ipython`.\n\nIf you prefer to install it separately, run:\n\n    $ brew install apache-spark\n\n#### Usage\n\nRun Spark locally:\n\n    $ pyspark\n\nRun Spark within IPython Notebook:\n\n    $ ipython notebook --profile=pyspark\n\nRefer to the following [Spark IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#spark).\n\nSpark is also supported on AWS Elastic MapReduce as described [here](https://aws.amazon.com/blogs/aws/new-apache-spark-on-amazon-emr/).  To create a cluster, run the following command with the [AWS CLI](#aws-cli), replacing ```myKeyPair``` with the name of your keypair to SSH into your cluster:\n\n    $ aws emr create-cluster --name \"Spark cluster\" --ami-version 3.8 --applications Name=Spark --ec2-attributes KeyName=myKeyPair --instance-type m3.xlarge --instance-count 3 --use-default-roles\n\n### MapReduce\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/mrjob.png\">\n  <br/>\n</p>\n\nMrjob supports MapReduce jobs in Python, running them locally or on Hadoop clusters such as AWS Elastic MapReduce (EMR).\n\n#### Installation\n\n**Mrjob is Python 2 only.**\n\nThe [aws.sh script](#aws-script) installs mrjob locally.  If you prefer to install it separately, run:\n\n    $ pip install mrjob\n\nThe aws.sh script also syncs the template ```.mrjob.conf``` file to your home folder.  Note running the aws.sh script will overwrite any existing ```~/.mrjob.conf``` file.  Update the config file with your credentials, keypair, region, and S3 bucket paths:\n\n```\nrunners:\n  emr:\n    aws_access_key_id: YOURACCESSKEY\n    aws_secret_access_key: YOURSECRETKEY\n    aws_region: us-east-1\n    ec2_key_pair: YOURKEYPAIR\n    ec2_key_pair_file: ~/.ssh/YOURKEYPAIR.pem\n    ...\n    s3_scratch_uri: s3://YOURBUCKETSCRATCH\n    s3_log_uri: s3://YOURBUCKETLOG\n    ...\n```\n\n#### Usage\n\nRefer to the following [mrjob IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#mapreduce-python).\n\n### Awesome AWS [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/aws.png\">\n</p>\n<br/>\n\n[Awesome AWS](https://github.com/donnemartin/awesome-aws) is a curated list of awesome AWS libraries, open source repos, guides, blogs, and other resources.  It's a great way to stay up-to-date with the various aws-backed and community-led efforts geared towards AWS.\n\n#### The Fiery Meter of AWSome\n\n'Hot' repos in Awesome AWS are visually tagged based on their popularity:\n\n* Repo with 0100+ Stars: :fire:\n* Repo with 0200+ Stars: :fire::fire:\n* Repo with 0500+ Stars: :fire::fire::fire:\n* Repo with 1000+ Stars: :fire::fire::fire::fire:\n* Repo with 2000+ Stars: :fire::fire::fire::fire::fire:\n\n*Repos not on `The Fiery Meter of AWSome` can still be awesome, see [A Note on Repo AWSomeness](https://github.com/donnemartin/awesome-aws/blob/master/CONTRIBUTING.md#a-note-on-repo-awsomeness).*\n\n### AWS Account\n\nTo start using AWS, you first need to sign up for an account.\n\n#### Sign up for AWS\n\nWhen you sign up for Amazon Web Services (AWS), your AWS account is automatically signed up for all services in AWS. You are charged only for the services that you use.  New users are eligible for 12 months of usage through the [AWS Free Tier](http://aws.amazon.com/free/).\n\nTo create an AWS account, open http://aws.amazon.com/, and then click Sign Up.  Follow the on-screen instructions.  Part of the sign-up procedure involves receiving a phone call and entering a PIN using the phone keypad.  Note your AWS account ID.\n\n### AWS CLI\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/aws_cli.png\">\n  <br/>\n</p>\n\nThe AWS Command Line Interface is a unified tool to manage AWS services, allowing you to control multiple AWS services from the command line and to automate them through scripts.\n\n#### Installation\n\nThe [aws.sh script](#aws-script) installs the AWS CLI.  If you prefer to install it separately, run:\n\n    $ pip install awscli\n\nRun the following command to configure the AWS CLI:\n\n    $ aws configure\n\nAlternatively, the aws.sh script also syncs the template ```.aws/``` folder to your home folder.  Note running the aws.sh script will overwrite any existing ```~/.aws/``` folder.  Update the config file with your credentials and location:\n\n```\n[default]\nregion = us-east-1\n```\n\n```\n[default]\naws_access_key_id = YOURACCESSKEY\naws_secret_access_key = YOURSECRETKEY\n```\n\n**Be careful you do not accidentally check in your credentials.**  The .gitignore file is set to ignore files with credentials.\n\n#### Usage\n\nRefer to the following [AWS CLI IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### SAWS\n\n![](http://i.imgur.com/vzC5zmA.gif)\n\nAlthough the [AWS CLI](https://github.com/aws/aws-cli) is a great resource to manage your AWS-powered services, it's **tough to remember usage** of:\n\n* 50+ top-level commands\n* 1400+ subcommands\n* Countless command-specific options\n* Resources such as instance tags and buckets\n\n#### SAWS: A Supercharged AWS CLI\n\n`SAWS` aims to **supercharge** the AWS CLI with features focusing on:\n\n* **Improving ease-of-use**\n* **Increasing productivity**\n\nUnder the hood, `SAWS` is **powered by the AWS CLI** and supports the **same commands** and **command structure**.\n\n`SAWS` and `AWS CLI` Usage:\n\n    aws <command> <subcommand> [parameters] [options]\n\n`SAWS` features:\n\n* Auto-completion of:\n    * Commands\n    * Subcommands\n    * Options\n* Auto-completion of resources:\n    * Bucket names\n    * Instance ids\n    * Instance tags\n    * [More coming soon!]((#todo-add-more-resources))\n* Customizable shortcuts\n* Fuzzy completion of resources and shortcuts\n* Syntax and output highlighting\n* Execution of shell commands\n* Command history\n* Contextual help\n* Toolbar options\n\n`SAWS` is available for Mac, Linux, Unix, and [Windows](#windows-support).\n\n![](http://i.imgur.com/Eo12q9T.png)\n\n#### Installation and Usage.\n\nRefer to the [repo link](https://github.com/donnemartin/saws).\n\n### Boto\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/boto.png\">\n  <br/>\n</p>\n\nBoto is the official AWS SDK for Python.\n\n#### Installation\n\nThe [aws.sh script](#aws-script) installs boto.  If you prefer to install it separately, run:\n\n    $ pip install boto\n\nBoto uses the same configuration as described in the [AWS CLI](#aws-cli) section.\n\n#### Usage\n\nRefer to the following [Boto IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### S3cmd\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/s3cmd.png\">\n  <br/>\n</p>\n\nBefore I discovered [S3cmd](http://s3tools.org/s3cmd), I had been using the [S3 console](http://aws.amazon.com/console/) to do basic operations and [boto](https://boto.readthedocs.org/en/latest/) to do more of the heavy lifting.  However, sometimes I just want to hack away at a command line to do my work.\n\nI've found S3cmd to be a great command line tool for interacting with S3 on AWS.  S3cmd is written in Python, is open source, and is free even for commercial use.  It offers more advanced features than those found in the [AWS CLI](http://aws.amazon.com/cli/).\n\n#### Installation\n\n**S3cmd is Python 2 only.**\n\nThe [aws.sh script](#aws-script) installs s3cmd.  If you prefer to install it separately, run:\n\n    $ pip install s3cmd\n\nRunning the following command will prompt you to enter your AWS access and AWS secret keys. To follow security best practices, make sure you are using an IAM account as opposed to using the root account.\n\nI also suggest enabling GPG encryption which will encrypt your data at rest, and enabling HTTPS to encrypt your data in transit. Note this might impact performance.\n\n    $ s3cmd --configure\n\nAlternatively, the aws.sh script also syncs the template ```.s3cfg``` file to your home folder.  Note running the aws.sh script will overwrite any existing ```~/.s3cfg``` file.  Update the config file with your credentials and location:\n\n```\n[Credentials]\naws_access_key_id = YOURACCESSKEY\naws_secret_access_key = YOURSECRETKEY\n...\nbucket_location = US\n...\ngpg_passphrase = YOURPASSPHRASE\n```\n\n**Be careful you do not accidentally check in your credentials.**  The .gitignore file is set to ignore files with credentials.\n\n#### Usage\n\nRefer to the following [s3cmd IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### S3DistCp\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/s3distcp.png\">\n  <br/>\n</p>\n\n[S3DistCp](http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/UsingEMR_s3distcp.html) is an extension of DistCp that is optimized to work with Amazon S3.  S3DistCp is useful for combining smaller files and aggregate them together, taking in a pattern and target file to combine smaller input files to larger ones.  S3DistCp can also be used to transfer large volumes of data from S3 to your Hadoop cluster.\n\n#### Installation\n\nS3DistCp comes bundled with the AWS CLI.\n\n#### Usage\n\nRefer to the following [S3DistCp IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### S3-parallel-put\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/s3-parallel-put.png\">\n  <br/>\n</p>\n\n[s3-parallel-put](https://github.com/twpayne/s3-parallel-put.git) is a great tool for uploading multiple files to S3 in parallel.\n\n#### Installation\n\n    $ git clone https://github.com/twpayne/s3-parallel-put.git\n\n#### Usage\n\nRefer to the following [s3-parallel-put IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### Redshift\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/aws_redshift.png\">\n  <br/>\n</p>\n\nRedshift is a fast data warehouse built on top of technology from massive parallel processing (MPP).\n\n#### Setup\n\nFollow these [instructions](http://docs.aws.amazon.com/redshift/latest/gsg/rs-gsg-prereq.html).\n\n#### Usage\n\nRefer to the following [Redshift IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### Kinesis\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/aws_kinesis.png\">\n  <br/>\n</p>\n\nKinesis streams data in real time with the ability to process thousands of data streams per second.\n\n#### Setup\n\nFollow these [instructions](http://docs.aws.amazon.com/kinesis/latest/dev/before-you-begin.html).\n\n#### Usage\n\nRefer to the following [Kinesis IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### Lambda\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/aws_lambda.png\">\n  <br/>\n</p>\n\nLambda runs code in response to events, automatically managing compute resources.\n\n#### Setup\n\nFollow these [instructions](http://docs.aws.amazon.com/lambda/latest/dg/setting-up.html).\n\n#### Usage\n\nRefer to the following [Lambda IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### AWS Machine Learning\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/aws_ml.png\">\n  <br/>\n</p>\n\nAmazon Machine Learning is a service that makes it easy for developers of all skill levels to use machine learning technology. Amazon Machine Learning provides visualization tools and wizards that guide you through the process of creating machine learning (ML) models without having to learn complex ML algorithms and technology. Once your models are ready, Amazon Machine Learning makes it easy to obtain predictions for your application using simple APIs, without having to implement custom prediction generation code, or manage any infrastructure.\n\n#### Setup\n\nFollow these [instructions](http://docs.aws.amazon.com/machine-learning/latest/dg/setting_up.html).\n\n#### Usage\n\n[Coming Soon] Refer to the following [AWS Machine Learning IPython Notebook](https://github.com/donnemartin/data-science-ipython-notebooks#aws).\n\n### Heroku\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/heroku.jpg\">\n  <br/>\n</p>\n\n[Heroku](http://www.heroku.com/), if you're not already familiar with it, is a [Platform-as-a-Service](http://en.wikipedia.org/wiki/Platform_as_a_service) (PaaS) that makes it really easy to deploy your apps online. There are other similar solutions out there, but Heroku was among the first and is currently the most popular. Not only does it make a developer's life easier, but I find that having Heroku deployment in mind when building an app forces you to follow modern app development [best practices](http://www.12factor.net/).\n\n#### Installation\n\nAssuming that you have an account (sign up if you don't), let's install the [Heroku Client](https://devcenter.heroku.com/articles/using-the-cli) for the command-line. Heroku offers a Mac OS X installer, the [Heroku Toolbelt](https://toolbelt.heroku.com/), that includes the client. But for these kind of tools, I prefer using Homebrew. It allows us to keep better track of what we have installed. Luckily for us, Homebrew includes a `heroku-toolbelt` formula:\n\n    $ brew install heroku-toolbelt\n\nThe formula might not have the latest version of the Heroku Client, which is updated pretty often. Let's update it now:\n\n    $ brew upgrade heroku-toolbelt\n\nDon't be afraid to run `heroku update` every now and then to always have the most recent version.\n\n#### Usage\n\nLogin to your Heroku account using your email and password:\n\n    $ heroku login\n\nIf this is a new account, and since you don't already have a public **SSH key** in your `~/.ssh` directory, it will offer to create one for you. Say yes! It will also upload the key to your Heroku account, which will allow you to deploy apps from this computer.\n\nIf it didn't offer create the SSH key for you (i.e. your Heroku account already has SSH keys associated with it), you can do so manually by running:\n\n     $ mkdir ~/.ssh\n     $ ssh-keygen -t rsa\n\nKeep the default file name and skip the passphrase by just hitting Enter both times. Then, add the key to your Heroku account:\n\n    $ heroku keys:add\n\nOnce the key business is done, you're ready to deploy apps! Heroku has a great [Getting Started](https://devcenter.heroku.com/articles/python) guide, so I'll let you refer to that (the one linked here is for Python, but there is one for every popular language). Heroku uses Git to push code for deployment, so make sure your app is under Git version control. A quick cheat sheet (if you've used Heroku before):\n\n    $ cd myapp/\n    $ heroku create myapp\n    $ git push heroku master\n    $ heroku ps\n    $ heroku logs -t\n\nThe [Heroku Dev Center](https://devcenter.heroku.com/) is full of great resources, so be sure to check it out!\n\n## Section 5: Data Stores\n\n### MySQL\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/mysql.png\">\n  <br/>\n</p>\n\n#### Installation\n\nThe [datastores.sh script](#datastoressh-script) installs MySQL.  If you prefer to install it separately, run:\n\n    $ brew update # Always good to do\n    $ brew install mysql\n\nAs you can see in the ouput from Homebrew, before we can use MySQL we first need to set it up with:\n\n    $ unset TMPDIR\n    $ mkdir /usr/local/var\n    $ mysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp\n\n#### Usage\n\nTo start the MySQL server, use the `mysql.server` tool:\n\n    $ mysql.server start\n\nTo stop it when you are done, run:\n\n    $ mysql.server stop\n\nYou can see the different commands available for `mysql.server` with:\n\n    $ mysql.server --help\n\nTo connect with the command-line client, run:\n\n    $ mysql -uroot\n\n(Use `exit` to quit the MySQL shell.)\n\n**Note**: By default, the MySQL user `root` has no password. It doesn't really matter for a local development database. If you wish to change it though, you can use `$ mysqladmin -u root password 'new-password'`.\n\n### MySQL Workbench\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/mysql_workbench.png\">\n  <br/>\n</p>\n\nIn terms of a GUI client for MySQL, I'm used to the official and free [MySQL Workbench](http://www.mysql.com/products/workbench/). But feel free to use whichever you prefer.\n\n#### Installation\n\nThe [datastores.sh script](#datastoressh-script) installs MySQL Workbench.  If you prefer to install it separately, run:\n\n    $ brew install caskroom/cask/brew-cask\n    $ brew cask install --appdir=\"/Applications\" mysqlworkbench\n\nYou can also find the MySQL Workbench download [here](http://www.mysql.com/downloads/workbench/). (**Note**: It will ask you to sign in, you don't need to, just click on \"No thanks, just start my download!\" at the bottom.)\n\n### MongoDB\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/mongodb.jpeg\">\n  <br/>\n</p>\n\n[MongoDB](http://www.mongodb.org/) is a popular [NoSQL](http://en.wikipedia.org/wiki/NoSQL) database.\n\n#### Installation\n\nThe [datastores.sh script](#datastoressh-script) installs MongoDB. If you prefer to install it separately, run:\n\n    $ brew update\n    $ brew install mongo\n\n#### Usage\n\nIn a terminal, start the MongoDB server:\n\n    $ mongod\n\nIn another terminal, connect to the database with the Mongo shell using:\n\n    $ mongo\n\nI'll let you refer to MongoDB's [Getting Started](http://docs.mongodb.org/manual/tutorial/getting-started/) guide for more!\n\n### Redis\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/redis.png\">\n  <br/>\n</p>\n\n[Redis](http://redis.io/) is a blazing fast, in-memory, key-value store, that uses the disk for persistence. It's kind of like a NoSQL database, but there are a lot of [cool things](http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html) that you can do with it that would be hard or inefficient with other database solutions. For example, it's often used as session management or caching by web apps, but it has many other uses.\n\n#### Installation\n\nThe [datastores.sh script](#datastoressh-script) installs Redis. If you prefer to install it separately, run:\n\n    $ brew update\n    $ brew install redis\n\n#### Usage\n\nStart a local Redis server using the default configuration settings with:\n\n    $ redis-server\n\nFor advanced usage, you can tweak the configuration file at `/usr/local/etc/redis.conf` (I suggest making a backup first), and use those settings with:\n\n    $ redis-server /usr/local/etc/redis.conf\n\nIn another terminal, connect to the server with the Redis command-line interface using:\n\n    $ redis-cli\n\nI'll let you refer to Redis' [documentation](http://redis.io/documentation) or other tutorials for more information.\n\n### Elasticsearch\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/elasticsearch.png\">\n  <br/>\n</p>\n\nAs it says on the box, [Elasticsearch](http://www.elasticsearch.org/) is a \"powerful open source, distributed real-time search and analytics engine\". It uses an HTTP REST API, making it really easy to work with from any programming language.\n\nYou can use elasticsearch for such cool things as real-time search results, autocomplete, recommendations, machine learning, and more.\n\n#### Installation\n\nThe [datastores.sh script](#datastoressh-script) installs Elasticsearch.  If you prefer to install it separately, check out the following discussion.\n\nElasticsearch runs on Java, so check if you have it installed by running:\n\n    $ java -version\n\nIf Java isn't installed yet, a window will appear prompting you to install it. Go ahead and click \"Install\".\n\nNext, install elasticsearch with:\n\n    $ brew install elasticsearch\n\n**Note**: Elasticsearch also has a `plugin` program that gets moved to your `PATH`. I find that too generic of a name, so I rename it to `elasticsearch-plugin` by running (will need to do that again if you update elasticsearch):\n\n    $ mv /usr/local/bin/plugin /usr/local/bin/elasticsearch-plugin\n\nBelow I will use `elasticsearch-plugin`, just replace it with `plugin` if you haven't followed this step.\n\nAs you guessed, you can add plugins to elasticsearch. A popular one is [elasticsearch-head](http://mobz.github.io/elasticsearch-head/), which gives you a web interface to the REST API. Install it with:\n\n    $ elasticsearch-plugin --install mobz/elasticsearch-head\n\n### Usage\n\nStart a local elasticsearch server with:\n\n    $ elasticsearch\n\nTest that the server is working correctly by running:\n\n    $ curl -XGET 'http://localhost:9200/'\n\nIf you installed the elasticsearch-head plugin, you can visit its interface at `http://localhost:9200/_plugin/head/`.\n\nElasticsearch's [documentation](http://www.elasticsearch.org/guide/) is more of a reference. To get started, I suggest reading some of the blog posts linked on this [StackOverflow answer](http://stackoverflow.com/questions/11593035/beginners-guide-to-elasticsearch/11767610#11767610).\n\n## Section 6: Web Development\n\n### Node.js\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/nodejs.png\">\n  <br/>\n</p>\n\n#### Installation\n\nThe [web.sh script](#websh-script) installs [Node.js](http://nodejs.org/).  You can also install it manually with Homebrew:\n\n    $ brew update\n    $ brew install node\n\nThe formula also installs the [npm](https://npmjs.org/) package manager. However, as suggested by the Homebrew output, we need to add `/usr/local/share/npm/bin` to our path so that npm-installed modules with executables will have them picked up.\n\nTo do so, add this line to your `~/.path` file, before the `export PATH` line:\n\n```bash\nPATH=/usr/local/share/npm/bin:$PATH\n```\n\nOpen a new terminal for the `$PATH` changes to take effect.\n\nWe also need to tell npm where to find the Xcode Command Line Tools, by running:\n\n    $ sudo xcode-select -switch /usr/bin\n\n(If Xcode Command Line Tools were installed by Xcode, try instead:)\n\n    $ sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer\n\nNode modules are installed locally in the `node_modules` folder of each project by default, but there are at least two that are worth installing globally. Those are [CoffeeScript](http://coffeescript.org/) and [Grunt](http://gruntjs.com/):\n\n    $ npm install -g coffee-script\n    $ npm install -g grunt-cli\n\n#### Npm usage\n\nTo install a package:\n\n    $ npm install <package> # Install locally\n    $ npm install -g <package> # Install globally\n\nTo install a package and save it in your project's `package.json` file:\n\n    $ npm install <package> --save\n\nTo see what's installed:\n\n    $ npm list # Local\n    $ npm list -g # Global\n\nTo find outdated packages (locally or globally):\n\n    $ npm outdated [-g]\n\nTo upgrade all or a particular package:\n\n    $ npm update [<package>]\n\nTo uninstall a package:\n\n    $ npm uninstall <package>\n\n### JSHint\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/jshint.png\">\n  <br/>\n</p>\n\nJSHint is a JavaScript developer's best friend.\n\nIf the extra credit assignment to install Sublime Package Manager was completed, JSHint can be run as part of Sublime Text.\n\n#### Installation\n\nThe [web.sh script](#websh-script) installs JSHint.  You can also install it manually via via npm:\n\n    $ npm install -g jshint\n\nFollow additional instructions on the [JSHint Package Manager page](https://sublime.wbond.net/packages/JSHint) or [build it manually](https://github.com/jshint/jshint).\n\n### LESS\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/less.png\">\n  <br/>\n</p>\n\nCSS preprocessors are becoming quite popular, the most popular processors are [LESS](http://lesscss.org/) and [SASS](http://sass-lang.com). Preprocessing is a lot like compiling code for CSS. It allows you to reuse CSS in many different ways. Let's start out with using LESS as a basic preprocessor, it's used by a lot of popular CSS frameworks like [Bootstrap](http://getbootstrap.com/).\n\n#### Installation\n\nThe [web.sh script](#websh-script) installs LESS.  To install LESS manually you have to use NPM / Node, which you installed earlier using Homebrew. In the terminal use:\n\n    $ npm install -g less\n\nNote: the `-g` flag is optional but it prevents having to mess around with file paths. You can install without the flag, just know what you're doing.\n\nYou can check that it installed properly by using:\n\n    $ lessc --version\n\nThis should output some information about the compiler:\n\n    lessc 1.5.1 (LESS Compiler) [JavaScript]\n\nOkay, LESS is installed and running. Great!\n\n#### Usage\n\nThere's a lot of different ways to use LESS. Generally I use it to compile my stylesheet locally. You can do that by using this command in the terminal:\n\n    $ lessc template.less template.css\n\nThe two options are the \"input\" and \"output\" files for the compiler. The command looks in the current directory for the LESS stylesheet, compiles it, and outputs it to the second file in the same directory. You can add in paths to keep your project files organized:\n\n    $ lessc less/template.less css/template.css\n\nRead more about LESS on their page here: http://lesscss.org/\n\n## Section 7: Android Development\n\n***This section is under development.***\n\n### Java\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/java.png\">\n  <br/>\n</p>\n\n#### Installation\n\nThe [android.sh script](#androidsh-script) installs Java.\n\nIf you prefer to install it separately, you can download the JDK [here](http://www.oracle.com/technetwork/java/javase/downloads/index.html) or run:\n\n    $ brew update\n    $ brew install caskroom/cask/brew-cask\n    $ brew cask install --appdir=\"~/Applications\" java\n\n### Android SDK\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/androidsdk.png\">\n  <br/>\n</p>\n\nThe [android.sh script](#androidsh-script) installs the Android SDK.\n\nIf you prefer to install it separately, you can download it [here](https://developer.android.com/sdk/index.html).\n\n### Android Studio\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/androidstudio.png\">\n  <br/>\n</p>\n\nThe [android.sh script](#androidsh-script) installs Android Studio.\n\nIf you prefer to install it separately, you can download it [here](https://developer.android.com/sdk/index.html) or run:\n\n    $ brew update\n    $ brew install caskroom/cask/brew-cask\n    $ brew cask install --appdir=\"~/Applications\" android-studio\n\n### IntelliJ IDEA\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/donnemartin/dev-setup-resources/master/res/intellij.png\">\n  <br/>\n</p>\n\nThe [android.sh script](#androidsh-script) installs Java.\n\nIf you prefer to install it separately, you can download it [here](https://www.jetbrains.com/idea/download/) or run:\n\n    $ brew update\n    $ brew install caskroom/cask/brew-cask\n    $ brew cask install --appdir=\"~/Applications\" intellij-idea-ce\n\n## Section 8: Misc\n\n### Contributions\n\nBug reports, suggestions, and pull requests are [welcome](https://github.com/donnemartin/dev-setup/issues)!\n\n### Credits\n\nSee the [Credits Page](https://github.com/donnemartin/dev-setup/blob/master/CREDITS.md).\n\n## Contact Info\n\nFeel free to contact me to discuss any issues, questions, or comments.\n\nMy contact info can be found on my [GitHub page](https://github.com/donnemartin).\n\n### License\n\nThis repository contains a variety of content; some developed by Donne Martin, and some from third-parties.  The third-party content is distributed under the license provided by those parties.\n\nThe content developed by Donne Martin is distributed under the following license:\n\n*I am providing code and resources in this repository to you under an open source license.  Because this is my personal repository, the license you receive to my code and resources is from me and not my employer (Facebook).*\n\n    Copyright 2015 Donne Martin\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "android.sh",
          "type": "blob",
          "size": 0.7861328125,
          "content": "#!/usr/bin/env bash\n\n# Install command-line tools using Homebrew.\n\n# Ask for the administrator password upfront.\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until the script has finished.\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n# Check for Homebrew,\n# Install if we don't have it\nif test ! $(which brew); then\n  echo \"Installing homebrew...\"\n  ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nfi\n\n# Make sure we’re using the latest Homebrew.\nbrew update\n\nbrew cask install --appdir=\"~/Applications\" java\nbrew cask install --appdir=\"~/Applications\" intellij-idea-ce\nbrew cask install --appdir=\"~/Applications\" android-studio\n\nbrew install android-sdk\n\n# Remove outdated versions from the cellar.\nbrew cleanup\n"
        },
        {
          "name": "aws.sh",
          "type": "blob",
          "size": 4.01171875,
          "content": "#!/usr/bin/env bash\n\n# ~/aws.sh\n\n# Removed user's cached credentials\n# This script might be run with .dots, which uses elevated privileges\nsudo -K\n\necho \"------------------------------\"\necho \"Setting up AWS.\"\necho \"This script requires pip and virtualenvwrapper to be installed.\"\necho \"See the pydata.sh script.\"\n\necho \"------------------------------\"\necho \"Source virtualenvwrapper from ~/.extra\"\nsource ~/.extra\n\n###############################################################################\n# Python 2 Virtual Enviroment                                                 #\n###############################################################################\n\necho \"------------------------------\"\necho \"Updating py2-data virtual environment with AWS modules.\"\n\n# Create a Python2 data environment\n# If this environment already exists from running pydata.sh,\n# it will not be overwritten\nmkvirtualenv py2-data\nworkon py2-data\n\npip install boto\npip install awscli\npip install mrjob\npip install s3cmd\n\nEXTRA_PATH=~/.extra\necho $EXTRA_PATH\necho \"\" >> $EXTRA_PATH\necho \"\" >> $EXTRA_PATH\necho \"# Configure aws cli autocomplete, added by aws.sh\" >> $EXTRA_PATH\necho \"complete -C '~/.virtualenvs/py2-data/bin/aws_completer' aws\" >> $EXTRA_PATH\nsource $EXTRA_PATH\n\n###############################################################################\n# Python 3 Virtual Enviroment                                                 #\n###############################################################################\n\necho \"------------------------------\"\necho \"Updating py3-data virtual environment with AWS modules.\"\n\n# Create a Python3 data environment\n# If this environment already exists from running pydata.sh,\n# it will not be overwritten\nmkvirtualenv --python=/usr/local/bin/python3 py3-data\nworkon py3-data\n\npip install boto\npip install awscli\n#pip install mrjob  # Python 2 only\n#pip install s3cmd  # Python 2 only\n\n# Uncomment if you want to hook up the aws cli autocomplete for Python 3\n#EXTRA_PATH=~/.extra\n#echo $EXTRA_PATH\n#echo \"\" >> $EXTRA_PATH\n#echo \"\" >> $EXTRA_PATH\n#echo \"# Configure aws cli autocomplete, added by aws.sh\" >> $EXTRA_PATH\n#echo \"complete -C '~/.virtualenvs/py3-data/bin/aws_completer' aws\" >> $EXTRA_PATH\n#source $EXTRA_PATH\n\n###############################################################################\n# System-Wide Packages                                                        #\n###############################################################################\n\n# Check for Homebrew,\n# Install if we don't have it\nif test ! $(which brew); then\n  echo \"Installing homebrew...\"\n  ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nfi\n\n# Make sure we’re using the latest Homebrew.\nbrew update\n\nbrew install apache-spark\n\n###############################################################################\n# Install IPython Notebook Spark Integration\n###############################################################################\n\necho \"------------------------------\"\necho \"Installing IPython Notebook Spark integration\"\n\n# Add the pyspark IPython profile\ncp -r init/profile_pyspark/ ~/.ipython/profile_pyspark\n\nBASH_PROFILE_PATH=~/.bash_profile\necho $BASH_PROFILE_PATH\necho \"\" >> $BASH_PROFILE_PATH\necho \"\" >> $BASH_PROFILE_PATH\necho \"# IPython Notebook Spark integration, added by aws.sh\" >> $BASH_PROFILE_PATH\n# Run $ brew info apache-spark to determine the Spark install location\necho \"export SPARK_HOME='/usr/local/Cellar/apache-spark/1.4.1'\" >> $BASH_PROFILE_PATH\necho \"# Appending pyspark-shell is needed for Spark 1.4+\" >> $BASH_PROFILE_PATH\necho \"export PYSPARK_SUBMIT_ARGS='--master local[2] pyspark-shell'\" >> $BASH_PROFILE_PATH\necho \"\" >> $BASH_PROFILE_PATH\nsource $BASH_PROFILE_PATH\n\necho \"------------------------------\"\necho \"TODO: Update .aws/ with your AWS credentials and region, or run aws --configure.\"\necho \"TODO: Update .mrjob.conf with your credentials, keypair, keypair location, region, and bucket info.\"\necho \"TODO: Update .s3cfg with your credentials, location, and passphrase or run s3cmd --configure.\"\necho \"Script completed.\""
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 0.513671875,
          "content": "#!/usr/bin/env bash\n\ncd \"$(dirname \"${BASH_SOURCE}\")\";\n\ngit pull origin master;\n\nfunction doIt() {\n    rsync --exclude \".git/\" --exclude \".DS_Store\" --exclude \"bootstrap.sh\" \\\n        --exclude \"README.md\" --exclude \"LICENSE\" -avh --no-perms . ~;\n    source ~/.bash_profile;\n}\n\nif [ \"$1\" == \"--force\" -o \"$1\" == \"-f\" ]; then\n    doIt;\nelse\n    read -p \"This may overwrite existing files in your home directory. Are you sure? (y/n) \" -n 1;\n    echo \"\";\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        doIt;\n    fi;\nfi;\nunset doIt;\n"
        },
        {
          "name": "brew.sh",
          "type": "blob",
          "size": 4.947265625,
          "content": "#!/usr/bin/env bash\n\n# Install command-line tools using Homebrew.\n\n# Ask for the administrator password upfront.\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until the script has finished.\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n# Check for Homebrew,\n# Install if we don't have it\nif test ! $(which brew); then\n  echo \"Installing homebrew...\"\n  ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nfi\n\n# Make sure we’re using the latest Homebrew.\nbrew update\n\n# Upgrade any already-installed formulae.\nbrew upgrade --all\n\n# Install GNU core utilities (those that come with OS X are outdated).\n# Don’t forget to add `$(brew --prefix coreutils)/libexec/gnubin` to `$PATH`.\nbrew install coreutils\nsudo ln -s /usr/local/bin/gsha256sum /usr/local/bin/sha256sum\n\n# Install some other useful utilities like `sponge`.\nbrew install moreutils\n# Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed.\nbrew install findutils\n# Install GNU `sed`, overwriting the built-in `sed`.\nbrew install gnu-sed\n# Install Bash 4.\nbrew install bash\nbrew install bash-completion2\n# We installed the new shell, now we have to activate it\necho \"Adding the newly installed shell to the list of allowed shells\"\n# Prompts for password\nsudo bash -c 'echo /usr/local/bin/bash >> /etc/shells'\n# Change to the new shell, prompts for password\nchsh -s /usr/local/bin/bash\n\n# Install `wget` with IRI support.\nbrew install wget --with-iri\n\n# Install RingoJS and Narwhal.\n# Note that the order in which these are installed is important;\n# see http://git.io/brew-narwhal-ringo.\nbrew install ringojs\nbrew install narwhal\n\n# Install Python\nbrew install python\nbrew install python3\n\n# Install ruby-build and rbenv\nbrew install ruby-build\nbrew install rbenv\nLINE='eval \"$(rbenv init -)\"'\ngrep -q \"$LINE\" ~/.extra || echo \"$LINE\" >> ~/.extra\n\n# Install more recent versions of some OS X tools.\nbrew install vim --override-system-vi\nbrew install homebrew/dupes/grep\nbrew install homebrew/dupes/openssh\nbrew install homebrew/dupes/screen\nbrew install homebrew/php/php55 --with-gmp\n\n# Install font tools.\nbrew tap bramstein/webfonttools\nbrew install sfnt2woff\nbrew install sfnt2woff-zopfli\nbrew install woff2\n\n# Install some CTF tools; see https://github.com/ctfs/write-ups.\nbrew install aircrack-ng\nbrew install bfg\nbrew install binutils\nbrew install binwalk\nbrew install cifer\nbrew install dex2jar\nbrew install dns2tcp\nbrew install fcrackzip\nbrew install foremost\nbrew install hashpump\nbrew install hydra\nbrew install john\nbrew install knock\nbrew install netpbm\nbrew install nmap\nbrew install pngcheck\nbrew install socat\nbrew install sqlmap\nbrew install tcpflow\nbrew install tcpreplay\nbrew install tcptrace\nbrew install ucspi-tcp # `tcpserver` etc.\nbrew install homebrew/x11/xpdf\nbrew install xz\n\n# Install other useful binaries.\nbrew install ack\nbrew install dark-mode\n#brew install exiv2\nbrew install git\nbrew install git-lfs\nbrew install git-flow\nbrew install git-extras\nbrew install hub\nbrew install imagemagick --with-webp\nbrew install lua\nbrew install lynx\nbrew install p7zip\nbrew install pigz\nbrew install pv\nbrew install rename\nbrew install rhino\nbrew install speedtest_cli\nbrew install ssh-copy-id\nbrew install tree\nbrew install webkit2png\nbrew install zopfli\nbrew install pkg-config libffi\nbrew install pandoc\n\n# Lxml and Libxslt\nbrew install libxml2\nbrew install libxslt\nbrew link libxml2 --force\nbrew link libxslt --force\n\n# Install Heroku\nbrew install heroku/brew/heroku\nheroku update\n\n# Core casks\nbrew cask install --appdir=\"/Applications\" alfred\nbrew cask install --appdir=\"~/Applications\" iterm2\nbrew cask install --appdir=\"~/Applications\" java\nbrew cask install --appdir=\"~/Applications\" xquartz\n\n# Development tool casks\nbrew cask install --appdir=\"/Applications\" sublime-text\nbrew cask install --appdir=\"/Applications\" atom\nbrew cask install --appdir=\"/Applications\" virtualbox\nbrew cask install --appdir=\"/Applications\" vagrant\nbrew cask install --appdir=\"/Applications\" macdown\n\n# Misc casks\nbrew cask install --appdir=\"/Applications\" google-chrome\nbrew cask install --appdir=\"/Applications\" firefox\nbrew cask install --appdir=\"/Applications\" skype\nbrew cask install --appdir=\"/Applications\" slack\nbrew cask install --appdir=\"/Applications\" dropbox\nbrew cask install --appdir=\"/Applications\" evernote\nbrew cask install --appdir=\"/Applications\" 1password\n#brew cask install --appdir=\"/Applications\" gimp\n#brew cask install --appdir=\"/Applications\" inkscape\n\n#Remove comment to install LaTeX distribution MacTeX\n#brew cask install --appdir=\"/Applications\" mactex\n\n# Install Docker, which requires virtualbox\nbrew install docker\nbrew install boot2docker\n\n# Install developer friendly quick look plugins; see https://github.com/sindresorhus/quick-look-plugins\nbrew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzip qlimagesize webpquicklook suspicious-package quicklookase qlvideo\n\n# Remove outdated versions from the cellar.\nbrew cleanup\n"
        },
        {
          "name": "datastores.sh",
          "type": "blob",
          "size": 0.85546875,
          "content": "#!/usr/bin/env bash\n\n# Install command-line tools using Homebrew.\n\n# Ask for the administrator password upfront.\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until the script has finished.\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n# Check for Homebrew,\n# Install if we don't have it\nif test ! $(which brew); then\n  echo \"Installing homebrew...\"\n  ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nfi\n\n# Make sure we’re using the latest Homebrew.\nbrew update\n\n# Install data stores\nbrew install mysql\nbrew install postgresql\nbrew install mongo\nbrew install redis\nbrew install elasticsearch\n\n# Install mysql workbench\n# Install Cask\nbrew install caskroom/cask/brew-cask\nbrew cask install --appdir=\"/Applications\" mysqlworkbench\n\n# Remove outdated versions from the cellar.\nbrew cleanup"
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "osx.sh",
          "type": "blob",
          "size": 51.3994140625,
          "content": "#!/usr/bin/env bash\n\n# ~/osx.sh — Originally from https://mths.be/osx\n\n# Ask for the administrator password upfront\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until `osx.sh` has finished\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n###############################################################################\n# General UI/UX                                                               #\n###############################################################################\n\n# Set computer name (as done via System Preferences → Sharing)\n#sudo scutil --set ComputerName \"0x6D746873\"\n#sudo scutil --set HostName \"0x6D746873\"\n#sudo scutil --set LocalHostName \"0x6D746873\"\n#sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string \"0x6D746873\"\n\n# Set standby delay to 24 hours (default is 1 hour or 3600)\n#sudo pmset -a standbydelay 86400\n\n# Disable the sound effects on boot\nsudo nvram SystemAudioVolume=\" \"\n\n# Disable transparency in the menu bar and elsewhere on Yosemite\ndefaults write com.apple.universalaccess reduceTransparency -bool true\n\n# Menu bar: hide the Time Machine, Volume, and User icons\nfor domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do\n    defaults write \"${domain}\" dontAutoLoad -array \\\n        \"/System/Library/CoreServices/Menu Extras/TimeMachine.menu\" \\\n        \"/System/Library/CoreServices/Menu Extras/Volume.menu\" \\\n        \"/System/Library/CoreServices/Menu Extras/User.menu\"\ndone\ndefaults write com.apple.systemuiserver menuExtras -array \\\n    \"/System/Library/CoreServices/Menu Extras/Bluetooth.menu\" \\\n    \"/System/Library/CoreServices/Menu Extras/AirPort.menu\" \\\n    \"/System/Library/CoreServices/Menu Extras/Battery.menu\" \\\n    \"/System/Library/CoreServices/Menu Extras/Clock.menu\"\n\n# Set highlight color to green\n#defaults write NSGlobalDomain AppleHighlightColor -string \"0.764700 0.976500 0.568600\"\n\n# Set sidebar icon size to medium\ndefaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2\n\n# Always show scrollbars\n#defaults write NSGlobalDomain AppleShowScrollBars -string \"Always\"\n# Possible values: `WhenScrolling`, `Automatic` and `Always`\n\n# Disable smooth scrolling\n# (Uncomment if you’re on an older Mac that messes up the animation)\n#defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false\n\n# Increase window resize speed for Cocoa applications\ndefaults write NSGlobalDomain NSWindowResizeTime -float 0.001\n\n# Expand save panel by default\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true\n\n# Expand print panel by default\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true\n\n# Save to disk (not to iCloud) by default\ndefaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false\n\n# Automatically quit printer app once the print jobs complete\ndefaults write com.apple.print.PrintingPrefs \"Quit When Finished\" -bool true\n\n# Disable the “Are you sure you want to open this application?” dialog\n#defaults write com.apple.LaunchServices LSQuarantine -bool false\n\n# Remove duplicates in the “Open With” menu (also see `lscleanup` alias)\n/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user\n\n# Display ASCII control characters using caret notation in standard text views\n# Try e.g. `cd /tmp; unidecode \"\\x{0000}\" > cc.txt; open -e cc.txt`\ndefaults write NSGlobalDomain NSTextShowsControlCharacters -bool true\n\n# Disable Resume system-wide\n#defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false\n\n# Disable automatic termination of inactive apps\n#defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true\n\n# Disable the crash reporter\n#defaults write com.apple.CrashReporter DialogType -string \"none\"\n\n# Set Help Viewer windows to non-floating mode\ndefaults write com.apple.helpviewer DevMode -bool true\n\n# Fix for the ancient UTF-8 bug in QuickLook (https://mths.be/bbo)\n# Commented out, as this is known to cause problems in various Adobe apps :(\n# See https://github.com/mathiasbynens/dotfiles/issues/237\n#echo \"0x08000100:0\" > ~/.CFUserTextEncoding\n\n# Reveal IP address, hostname, OS version, etc. when clicking the clock\n# in the login window\nsudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName\n\n# Restart automatically if the computer freezes\nsudo systemsetup -setrestartfreeze on\n\n# Never go into computer sleep mode\nsudo systemsetup -setcomputersleep Off > /dev/null\n\n# Set the computer to sleep after 60 minutes\n#sudo systemsetup -setcomputersleep 60\n\n# Check for software updates daily, not just once per week\ndefaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1\n\n# Disable Notification Center and remove the menu bar icon\nlaunchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null\n\n# Disable smart quotes as they’re annoying when typing code\ndefaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false\n\n# Disable smart dashes as they’re annoying when typing code\ndefaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false\n\n# Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and\n# all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.\n#rm -rf ~/Library/Application Support/Dock/desktoppicture.db\n#sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg\n#sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg\n\n###############################################################################\n# SSD-specific tweaks                                                         #\n# You might want to disable these if you are not running an SSD               #\n###############################################################################\n\n# Disable local Time Machine snapshots\nsudo tmutil disablelocal\n\n# Disable hibernation (speeds up entering sleep mode)\nsudo pmset -a hibernatemode 0\n\n# Remove the sleep image file to save disk space\nsudo rm -f /private/var/vm/sleepimage\n# Create a zero-byte file instead…\nsudo touch /private/var/vm/sleepimage\n# …and make sure it can’t be rewritten\nsudo chflags uchg /private/var/vm/sleepimage\n\n# Disable the sudden motion sensor as it’s not useful for SSDs\n#sudo pmset -a sms 0\n\n###############################################################################\n# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #\n###############################################################################\n\n# Trackpad: enable tap to click for this user and for the login screen\ndefaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true\ndefaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1\ndefaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1\n\n# Trackpad: map bottom right corner to right-click\ndefaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2\ndefaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true\ndefaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1\ndefaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true\n\n# Disable “natural” (Lion-style) scrolling\ndefaults write NSGlobalDomain com.apple.swipescrolldirection -bool false\n\n# Increase sound quality for Bluetooth headphones/headsets\ndefaults write com.apple.BluetoothAudioAgent \"Apple Bitpool Min (editable)\" -int 40\n\n# Enable full keyboard access for all controls\n# (e.g. enable Tab in modal dialogs)\ndefaults write NSGlobalDomain AppleKeyboardUIMode -int 3\n\n# Use scroll gesture with the Ctrl (^) modifier key to zoom\ndefaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true\ndefaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144\n# Follow the keyboard focus while zoomed in\ndefaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true\n\n# Disable press-and-hold for keys in favor of key repeat\ndefaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false\n\n# Set a blazingly fast keyboard repeat rate\ndefaults write NSGlobalDomain KeyRepeat -int 1\ndefaults write NSGlobalDomain InitialKeyRepeat -int 15\n\n# Set language and text formats\n#defaults write NSGlobalDomain AppleLanguages -array \"en\"\n#defaults write NSGlobalDomain AppleLocale -string \"en_US@currency=USD\"\n#defaults write NSGlobalDomain AppleMeasurementUnits -string \"Inches\"\n#defaults write NSGlobalDomain AppleMetricUnits -bool false\n\n# Set the timezone; see `sudo systemsetup -listtimezones` for other values\n#sudo systemsetup -settimezone \"America/New_York\" > /dev/null\n\n# Disable auto-correct\ndefaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false\n\n# Stop iTunes from responding to the keyboard media keys\n#launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null\n\n###############################################################################\n# Screen                                                                      #\n###############################################################################\n\n# Require password immediately after sleep or screen saver begins\ndefaults write com.apple.screensaver askForPassword -int 1\ndefaults write com.apple.screensaver askForPasswordDelay -int 0\n\n# Save screenshots to the desktop\n#defaults write com.apple.screencapture location -string \"${HOME}/Desktop\"\n\n# Save screenshots to the Pictures/Screenshots\nmkdir ${HOME}/Pictures/Screenshots\ndefaults write com.apple.screencapture location -string \"${HOME}/Pictures/Screenshots\"\n\n# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)\ndefaults write com.apple.screencapture type -string \"png\"\n\n# Disable shadow in screenshots\ndefaults write com.apple.screencapture disable-shadow -bool true\n\n# Enable subpixel font rendering on non-Apple LCDs\ndefaults write NSGlobalDomain AppleFontSmoothing -int 2\n\n# Enable HiDPI display modes (requires restart)\nsudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true\n\n###############################################################################\n# Finder                                                                      #\n###############################################################################\n\n# Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons\ndefaults write com.apple.finder QuitMenuItem -bool true\n\n# Finder: disable window animations and Get Info animations\ndefaults write com.apple.finder DisableAllAnimations -bool true\n\n# Set Desktop as the default location for new Finder windows\n# For other paths, use `PfLo` and `file:///full/path/here/`\ndefaults write com.apple.finder NewWindowTarget -string \"PfDe\"\ndefaults write com.apple.finder NewWindowTargetPath -string \"file://${HOME}/Desktop/\"\n\n# Show icons for hard drives, servers, and removable media on the desktop\ndefaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true\ndefaults write com.apple.finder ShowHardDrivesOnDesktop -bool true\ndefaults write com.apple.finder ShowMountedServersOnDesktop -bool true\ndefaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true\n\n# Finder: show hidden files by default\ndefaults write com.apple.finder AppleShowAllFiles -bool true\n\n# Finder: show all filename extensions\ndefaults write NSGlobalDomain AppleShowAllExtensions -bool true\n\n# Finder: show status bar\n#defaults write com.apple.finder ShowStatusBar -bool true\n\n# Finder: show path bar\ndefaults write com.apple.finder ShowPathbar -bool true\n\n# Finder: allow text selection in Quick Look\ndefaults write com.apple.finder QLEnableTextSelection -bool true\n\n# Display full POSIX path as Finder window title\ndefaults write com.apple.finder _FXShowPosixPathInTitle -bool true\n\n# When performing a search, search the current folder by default\ndefaults write com.apple.finder FXDefaultSearchScope -string \"SCcf\"\n\n# Disable the warning when changing a file extension\ndefaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\n\n# Enable spring loading for directories\ndefaults write NSGlobalDomain com.apple.springing.enabled -bool true\n\n# Tweak the spring loading delay for directories\ndefaults write NSGlobalDomain com.apple.springing.delay -float .5\n\n# Avoid creating .DS_Store files on network volumes\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true\n\n# Disable disk image verification\n#defaults write com.apple.frameworks.diskimages skip-verify -bool true\n#defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true\n#defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true\n\n# Automatically open a new Finder window when a volume is mounted\ndefaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true\ndefaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true\ndefaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true\n\n# Show item info near icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n\n# Show item info at the bottom of the icons on the desktop\n/usr/libexec/PlistBuddy -c \"Set DesktopViewSettings:IconViewSettings:labelOnBottom true\" ~/Library/Preferences/com.apple.finder.plist\n\n# Enable snap-to-grid for icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n\n# Set grid spacing for icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:gridSpacing 50\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 50\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:gridSpacing 50\" ~/Library/Preferences/com.apple.finder.plist\n\n# Set the size of icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:iconSize 24\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:iconSize 24\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:iconSize 24\" ~/Library/Preferences/com.apple.finder.plist\n\n# Use list view in all Finder windows by default\n# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`\ndefaults write com.apple.finder FXPreferredViewStyle -string \"Nlsv\"\n\n# Disable the warning before emptying the Trash\ndefaults write com.apple.finder WarnOnEmptyTrash -bool false\n\n# Empty Trash securely by default\ndefaults write com.apple.finder EmptyTrashSecurely -bool true\n\n# Enable AirDrop over Ethernet and on unsupported Macs running Lion\ndefaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true\n\n# Enable the MacBook Air SuperDrive on any Mac\nsudo nvram boot-args=\"mbasd=1\"\n\n# Show the ~/Library folder\nchflags nohidden ~/Library\n\n# Remove Dropbox’s green checkmark icons in Finder\n#file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns\n#[ -e \"${file}\" ] && mv -f \"${file}\" \"${file}.bak\"\n\n# Expand the following File Info panes:\n# “General”, “Open with”, and “Sharing & Permissions”\ndefaults write com.apple.finder FXInfoPanesExpanded -dict \\\n    General -bool true \\\n    OpenWith -bool true \\\n    Privileges -bool true\n\n###############################################################################\n# Dock, Dashboard, and hot corners                                            #\n###############################################################################\n\n# Enable highlight hover effect for the grid view of a stack (Dock)\ndefaults write com.apple.dock mouse-over-hilite-stack -bool true\n\n# Set the icon size of Dock items to 36 pixels\ndefaults write com.apple.dock tilesize -int 36\n\n# Change minimize/maximize window effect\ndefaults write com.apple.dock mineffect -string \"scale\"\n\n# Minimize windows into their application’s icon\n#defaults write com.apple.dock minimize-to-application -bool true\n\n# Enable spring loading for all Dock items\ndefaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true\n\n# Show indicator lights for open applications in the Dock\ndefaults write com.apple.dock show-process-indicators -bool true\n\n# Wipe all (default) app icons from the Dock\n# This is only really useful when setting up a new Mac, or if you don’t use\n# the Dock to launch apps.\n#defaults write com.apple.dock persistent-apps -array\n\n# Don’t animate opening applications from the Dock\ndefaults write com.apple.dock launchanim -bool false\n\n# Speed up Mission Control animations\ndefaults write com.apple.dock expose-animation-duration -float 0.1\n\n# Don’t group windows by application in Mission Control\n# (i.e. use the old Exposé behavior instead)\ndefaults write com.apple.dock expose-group-by-app -bool false\n\n# Disable Dashboard\n#defaults write com.apple.dashboard mcx-disabled -bool true\n\n# Don’t show Dashboard as a Space\ndefaults write com.apple.dock dashboard-in-overlay -bool true\n\n# Don’t automatically rearrange Spaces based on most recent use\ndefaults write com.apple.dock mru-spaces -bool false\n\n# Remove the auto-hiding Dock delay\ndefaults write com.apple.dock autohide-delay -float 0\n# Remove the animation when hiding/showing the Dock\ndefaults write com.apple.dock autohide-time-modifier -float 0\n\n# Automatically hide and show the Dock\ndefaults write com.apple.dock autohide -bool true\n\n# Make Dock icons of hidden applications translucent\n#defaults write com.apple.dock showhidden -bool true\n\n# Disable the Launchpad gesture (pinch with thumb and three fingers)\n#defaults write com.apple.dock showLaunchpadGestureEnabled -int 0\n\n# Reset Launchpad, but keep the desktop wallpaper intact\nfind \"${HOME}/Library/Application Support/Dock\" -name \"*-*.db\" -maxdepth 1 -delete\n\n# Add iOS Simulator to Launchpad\nsudo ln -sf \"/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app\" \"/Applications/iOS Simulator.app\"\n\n# Add a spacer to the left side of the Dock (where the applications are)\n#defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'\n# Add a spacer to the right side of the Dock (where the Trash is)\n#defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'\n\n# Hot corners\n# Possible values:\n#  0: no-op\n#  2: Mission Control\n#  3: Show application windows\n#  4: Desktop\n#  5: Start screen saver\n#  6: Disable screen saver\n#  7: Dashboard\n# 10: Put display to sleep\n# 11: Launchpad\n# 12: Notification Center\n# Top left screen corner → Mission Control\ndefaults write com.apple.dock wvous-tl-corner -int 2\ndefaults write com.apple.dock wvous-tl-modifier -int 0\n# Top right screen corner → Desktop\ndefaults write com.apple.dock wvous-tr-corner -int 4\ndefaults write com.apple.dock wvous-tr-modifier -int 0\n# Bottom left screen corner → Start screen saver\ndefaults write com.apple.dock wvous-bl-corner -int 5\ndefaults write com.apple.dock wvous-bl-modifier -int 0\n\n###############################################################################\n# Safari & WebKit                                                             #\n###############################################################################\n\n# Privacy: don’t send search queries to Apple\ndefaults write com.apple.Safari UniversalSearchEnabled -bool false\ndefaults write com.apple.Safari SuppressSearchSuggestions -bool true\n\n# Press Tab to highlight each item on a web page\ndefaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true\ndefaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true\n\n# Show the full URL in the address bar (note: this still hides the scheme)\ndefaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true\n\n# Set Safari’s home page to `about:blank` for faster loading\ndefaults write com.apple.Safari HomePage -string \"about:blank\"\n\n# Prevent Safari from opening ‘safe’ files automatically after downloading\ndefaults write com.apple.Safari AutoOpenSafeDownloads -bool false\n\n# Allow hitting the Backspace key to go to the previous page in history\n#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true\n\n# Hide Safari’s bookmarks bar by default\ndefaults write com.apple.Safari ShowFavoritesBar -bool false\n\n# Hide Safari’s sidebar in Top Sites\ndefaults write com.apple.Safari ShowSidebarInTopSites -bool false\n\n# Disable Safari’s thumbnail cache for History and Top Sites\ndefaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2\n\n# Enable Safari’s debug menu\ndefaults write com.apple.Safari IncludeInternalDebugMenu -bool true\n\n# Make Safari’s search banners default to Contains instead of Starts With\ndefaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false\n\n# Remove useless icons from Safari’s bookmarks bar\ndefaults write com.apple.Safari ProxiesInBookmarksBar \"()\"\n\n# Enable the Develop menu and the Web Inspector in Safari\ndefaults write com.apple.Safari IncludeDevelopMenu -bool true\ndefaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true\ndefaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true\n\n# Add a context menu item for showing the Web Inspector in web views\ndefaults write NSGlobalDomain WebKitDeveloperExtras -bool true\n\n###############################################################################\n# Mail                                                                        #\n###############################################################################\n\n# Disable send and reply animations in Mail.app\ndefaults write com.apple.mail DisableReplyAnimations -bool true\ndefaults write com.apple.mail DisableSendAnimations -bool true\n\n# Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app\ndefaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false\n\n# Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app\ndefaults write com.apple.mail NSUserKeyEquivalents -dict-add \"Send\" -string \"@\\\\U21a9\"\n\n# Display emails in threaded mode, sorted by date (oldest at the top)\ndefaults write com.apple.mail DraftsViewerAttributes -dict-add \"DisplayInThreadedMode\" -string \"yes\"\ndefaults write com.apple.mail DraftsViewerAttributes -dict-add \"SortedDescending\" -string \"yes\"\ndefaults write com.apple.mail DraftsViewerAttributes -dict-add \"SortOrder\" -string \"received-date\"\n\n# Disable inline attachments (just show the icons)\ndefaults write com.apple.mail DisableInlineAttachmentViewing -bool true\n\n# Disable automatic spell checking\ndefaults write com.apple.mail SpellCheckingBehavior -string \"NoSpellCheckingEnabled\"\n\n###############################################################################\n# Spotlight                                                                   #\n###############################################################################\n\n# Hide Spotlight tray-icon (and subsequent helper)\n#sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search\n# Disable Spotlight indexing for any volume that gets mounted and has not yet\n# been indexed before.\n# Use `sudo mdutil -i off \"/Volumes/foo\"` to stop indexing any volume.\nsudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array \"/Volumes\"\n# Change indexing order and disable some search results\n# Yosemite-specific search results (remove them if your are using OS X 10.9 or older):\n#   MENU_DEFINITION\n#   MENU_CONVERSION\n#   MENU_EXPRESSION\n#   MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)\n#   MENU_WEBSEARCH             (send search queries to Apple)\n#   MENU_OTHER\ndefaults write com.apple.spotlight orderedItems -array \\\n    '{\"enabled\" = 1;\"name\" = \"APPLICATIONS\";}' \\\n    '{\"enabled\" = 1;\"name\" = \"SYSTEM_PREFS\";}' \\\n    '{\"enabled\" = 1;\"name\" = \"DIRECTORIES\";}' \\\n    '{\"enabled\" = 1;\"name\" = \"PDF\";}' \\\n    '{\"enabled\" = 1;\"name\" = \"FONTS\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"DOCUMENTS\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MESSAGES\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"CONTACT\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"EVENT_TODO\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"IMAGES\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"BOOKMARKS\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MUSIC\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MOVIES\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"PRESENTATIONS\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"SPREADSHEETS\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"SOURCE\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MENU_DEFINITION\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MENU_OTHER\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MENU_CONVERSION\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MENU_EXPRESSION\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MENU_WEBSEARCH\";}' \\\n    '{\"enabled\" = 0;\"name\" = \"MENU_SPOTLIGHT_SUGGESTIONS\";}'\n# Load new settings before rebuilding the index\nkillall mds > /dev/null 2>&1\n# Make sure indexing is enabled for the main volume\nsudo mdutil -i on / > /dev/null\n# Rebuild the index from scratch\nsudo mdutil -E / > /dev/null\n\n###############################################################################\n# Terminal & iTerm 2                                                          #\n###############################################################################\n\n# Only use UTF-8 in Terminal.app\ndefaults write com.apple.terminal StringEncodings -array 4\n\n# Use a modified version of the Solarized Dark theme by default in Terminal.app\nosascript <<EOD\n\ntell application \"Terminal\"\n\n    local allOpenedWindows\n    local initialOpenedWindows\n    local windowID\n    set themeName to \"Solarized Dark xterm-256color\"\n\n    (* Store the IDs of all the open terminal windows. *)\n    set initialOpenedWindows to id of every window\n\n    (* Open the custom theme so that it gets added to the list\n       of available terminal themes (note: this will open two\n       additional terminal windows). *)\n    do shell script \"open '$HOME/init/\" & themeName & \".terminal'\"\n\n    (* Wait a little bit to ensure that the custom theme is added. *)\n    delay 1\n\n    (* Set the custom theme as the default terminal theme. *)\n    set default settings to settings set themeName\n\n    (* Get the IDs of all the currently opened terminal windows. *)\n    set allOpenedWindows to id of every window\n\n    repeat with windowID in allOpenedWindows\n\n        (* Close the additional windows that were opened in order\n           to add the custom theme to the list of terminal themes. *)\n        if initialOpenedWindows does not contain windowID then\n            close (every window whose id is windowID)\n\n        (* Change the theme for the initial opened terminal windows\n           to remove the need to close them in order for the custom\n           theme to be applied. *)\n        else\n            set current settings of tabs of (every window whose id is windowID) to settings set themeName\n        end if\n\n    end repeat\n\nend tell\n\nEOD\n\n# Enable “focus follows mouse” for Terminal.app and all X11 apps\n# i.e. hover over a window and start typing in it without clicking first\n#defaults write com.apple.terminal FocusFollowsMouse -bool true\n#defaults write org.x.X11 wm_ffm -bool true\n\nstart_if_needed() {\n  local grep_name=\"[${1:0:1}]${1:1}\"\n\n  if [[ -z $(ps aux | grep -e \"${grep_name}\") ]]; then\n    if [ -e ~/Applications/$1.app ]; then\n      open ~/Applications/$1.app\n    else\n      if [ -e /Applications/$1.app ]; then\n        open /Applications/$1.app\n      fi\n    fi\n  fi\n\n  true\n}\n\n# Install the Solarized Dark theme for iTerm\nstart_if_needed iTerm\nopen \"${HOME}/init/Solarized Dark.itermcolors\"\n\n# Don’t display the annoying prompt when quitting iTerm\ndefaults write com.googlecode.iterm2 PromptOnQuit -bool false\n\n###############################################################################\n# Time Machine                                                                #\n###############################################################################\n\n# Prevent Time Machine from prompting to use new hard drives as backup volume\ndefaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true\n\n# Disable local Time Machine backups\nhash tmutil &> /dev/null && sudo tmutil disablelocal\n\n###############################################################################\n# Activity Monitor                                                            #\n###############################################################################\n\n# Show the main window when launching Activity Monitor\ndefaults write com.apple.ActivityMonitor OpenMainWindow -bool true\n\n# Visualize CPU usage in the Activity Monitor Dock icon\ndefaults write com.apple.ActivityMonitor IconType -int 5\n\n# Show all processes in Activity Monitor\ndefaults write com.apple.ActivityMonitor ShowCategory -int 0\n\n# Sort Activity Monitor results by CPU usage\ndefaults write com.apple.ActivityMonitor SortColumn -string \"CPUUsage\"\ndefaults write com.apple.ActivityMonitor SortDirection -int 0\n\n###############################################################################\n# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #\n###############################################################################\n\n# Enable the debug menu in Address Book\ndefaults write com.apple.addressbook ABShowDebugMenu -bool true\n\n# Enable Dashboard dev mode (allows keeping widgets on the desktop)\ndefaults write com.apple.dashboard devmode -bool true\n\n# Enable the debug menu in iCal (pre-10.8)\ndefaults write com.apple.iCal IncludeDebugMenu -bool true\n\n# Use plain text mode for new TextEdit documents\ndefaults write com.apple.TextEdit RichText -int 0\n# Open and save files as UTF-8 in TextEdit\ndefaults write com.apple.TextEdit PlainTextEncoding -int 4\ndefaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4\n# Set tab width to 4 instead of the default 8\ndefaults write com.apple.TextEdit \"TabWidth\" '4'\n\n# Enable the debug menu in Disk Utility\ndefaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true\ndefaults write com.apple.DiskUtility advanced-image-options -bool true\n\n###############################################################################\n# Mac App Store                                                               #\n###############################################################################\n\n# Enable the WebKit Developer Tools in the Mac App Store\ndefaults write com.apple.appstore WebKitDeveloperExtras -bool true\n\n# Enable Debug Menu in the Mac App Store\ndefaults write com.apple.appstore ShowDebugMenu -bool true\n\n###############################################################################\n# Messages                                                                    #\n###############################################################################\n\n# Disable automatic emoji substitution (i.e. use plain text smileys)\ndefaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \"automaticEmojiSubstitutionEnablediMessage\" -bool false\n\n# Disable smart quotes as it’s annoying for messages that contain code\ndefaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \"automaticQuoteSubstitutionEnabled\" -bool false\n\n# Disable continuous spell checking\ndefaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \"continuousSpellCheckingEnabled\" -bool false\n\n###############################################################################\n# Google Chrome & Google Chrome Canary                                        #\n###############################################################################\n\n# Allow installing user scripts via GitHub Gist or Userscripts.org\ndefaults write com.google.Chrome ExtensionInstallSources -array \"https://gist.githubusercontent.com/\" \"http://userscripts.org/*\"\ndefaults write com.google.Chrome.canary ExtensionInstallSources -array \"https://gist.githubusercontent.com/\" \"http://userscripts.org/*\"\n\n# Disable the all too sensitive backswipe on trackpads\ndefaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false\ndefaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false\n\n# Disable the all too sensitive backswipe on Magic Mouse\ndefaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false\ndefaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false\n\n# Use the system-native print preview dialog\ndefaults write com.google.Chrome DisablePrintPreview -bool true\ndefaults write com.google.Chrome.canary DisablePrintPreview -bool true\n\n# Expand the print dialog by default\ndefaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true\ndefaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true\n\n###############################################################################\n# GPGMail 2                                                                   #\n###############################################################################\n\n# Disable signing emails by default\ndefaults write ~/Library/Preferences/org.gpgtools.gpgmail SignNewEmailsByDefault -bool false\n\n###############################################################################\n# Opera & Opera Developer                                                     #\n###############################################################################\n\n# Expand the print dialog by default\ndefaults write com.operasoftware.Opera PMPrintingExpandedStateForPrint2 -boolean true\ndefaults write com.operasoftware.OperaDeveloper PMPrintingExpandedStateForPrint2 -boolean true\n\n###############################################################################\n# SizeUp.app                                                                  #\n###############################################################################\n\n# Start SizeUp at login\ndefaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool true\n\n# Don’t show the preferences window on next start\ndefaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool false\n\n###############################################################################\n# Sublime Text                                                                #\n###############################################################################\n\n# Install Sublime Text settings\ncp -r init/Preferences.sublime-settings ~/Library/Application\\ Support/Sublime\\ Text*/Packages/User/Preferences.sublime-settings 2> /dev/null\n\n###############################################################################\n# Transmission.app                                                            #\n###############################################################################\n\n# Use `~/Documents/Torrents` to store incomplete downloads\ndefaults write org.m0k.transmission UseIncompleteDownloadFolder -bool true\ndefaults write org.m0k.transmission IncompleteDownloadFolder -string \"${HOME}/Documents/Torrents\"\n\n# Don’t prompt for confirmation before downloading\ndefaults write org.m0k.transmission DownloadAsk -bool false\n\n# Trash original torrent files\ndefaults write org.m0k.transmission DeleteOriginalTorrent -bool true\n\n# Hide the donate message\ndefaults write org.m0k.transmission WarningDonate -bool false\n# Hide the legal disclaimer\ndefaults write org.m0k.transmission WarningLegal -bool false\n\n###############################################################################\n# Twitter.app                                                                 #\n###############################################################################\n\n# Disable smart quotes as it’s annoying for code tweets\ndefaults write com.twitter.twitter-mac AutomaticQuoteSubstitutionEnabled -bool false\n\n# Show the app window when clicking the menu bar icon\ndefaults write com.twitter.twitter-mac MenuItemBehavior -int 1\n\n# Enable the hidden ‘Develop’ menu\ndefaults write com.twitter.twitter-mac ShowDevelopMenu -bool true\n\n# Open links in the background\ndefaults write com.twitter.twitter-mac openLinksInBackground -bool true\n\n# Allow closing the ‘new tweet’ window by pressing `Esc`\ndefaults write com.twitter.twitter-mac ESCClosesComposeWindow -bool true\n\n# Show full names rather than Twitter handles\ndefaults write com.twitter.twitter-mac ShowFullNames -bool true\n\n# Hide the app in the background if it’s not the front-most window\ndefaults write com.twitter.twitter-mac HideInBackground -bool true\n\n###############################################################################\n# Spectacle.app                                                               #\n###############################################################################\n\n# Set up my preferred keyboard shortcuts\ndefaults write com.divisiblebyzero.Spectacle MakeLarger -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035a4d616b654c6172676572d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f7a7f8a939c9fa8b1c3c6cb0000000000000101000000000000001c000000000000000000000000000000cd\ndefaults write com.divisiblebyzero.Spectacle MakeSmaller -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035b4d616b65536d616c6c6572d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f7b808b949da0a9b2c4c7cc0000000000000101000000000000001c000000000000000000000000000000ce\ndefaults write com.divisiblebyzero.Spectacle MoveToBottomDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107d80035f10134d6f7665546f426f74746f6d446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072888d98a1afb2c0c9dbdee30000000000000101000000000000001d000000000000000000000000000000e5\ndefaults write com.divisiblebyzero.Spectacle MoveToBottomHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107d80035f10104d6f7665546f426f74746f6d48616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072858a959ea7aab3bcced1d60000000000000101000000000000001d000000000000000000000000000000d8\ndefaults write com.divisiblebyzero.Spectacle MoveToCenter -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002100880035c4d6f7665546f43656e746572d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70727f848f98a1a4adb6c8cbd00000000000000101000000000000001d000000000000000000000000000000d2\ndefaults write com.divisiblebyzero.Spectacle MoveToFullscreen -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002102e80035f10104d6f7665546f46756c6c73637265656ed2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072858a959ea7aab3bcced1d60000000000000101000000000000001d000000000000000000000000000000d8\ndefaults write com.divisiblebyzero.Spectacle MoveToLeftDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107b80035f10114d6f7665546f4c656674446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072868b969fadb0bec7d9dce10000000000000101000000000000001d000000000000000000000000000000e3\ndefaults write com.divisiblebyzero.Spectacle MoveToLeftHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107b80035e4d6f7665546f4c65667448616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70728186919aa3a6afb8cacdd20000000000000101000000000000001d000000000000000000000000000000d4\ndefaults write com.divisiblebyzero.Spectacle MoveToLowerLeft -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731113008002107b80035f100f4d6f7665546f4c6f7765724c656674d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70728489949dabafbdc6cfe1e4e90000000000000101000000000000001e000000000000000000000000000000eb\ndefaults write com.divisiblebyzero.Spectacle MoveToLowerRight -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731113008002107c80035f10104d6f7665546f4c6f7765725269676874d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e7072858a959eacb0bec7d0e2e5ea0000000000000101000000000000001e000000000000000000000000000000ec\ndefaults write com.divisiblebyzero.Spectacle MoveToNextDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731118008002107c80035f10114d6f7665546f4e657874446973706c6179d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072868b969fa8abb4bdcfd2d70000000000000101000000000000001d000000000000000000000000000000d9\ndefaults write com.divisiblebyzero.Spectacle MoveToNextThird -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035f100f4d6f7665546f4e6578745468697264d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f8186919aa3a6afb8cacdd20000000000000101000000000000001c000000000000000000000000000000d4\ndefaults write com.divisiblebyzero.Spectacle MoveToPreviousDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731118008002107b80035f10154d6f7665546f50726576696f7573446973706c6179d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70728a8f9aa3acafb8c1d3d6db0000000000000101000000000000001d000000000000000000000000000000dd\ndefaults write com.divisiblebyzero.Spectacle MoveToPreviousThird -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035f10134d6f7665546f50726576696f75735468697264d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f858a959ea7aab3bcced1d60000000000000101000000000000001c000000000000000000000000000000d8\ndefaults write com.divisiblebyzero.Spectacle MoveToRightDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107c80035f10124d6f7665546f5269676874446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072878c97a0aeb1bfc8dadde20000000000000101000000000000001d000000000000000000000000000000e4\ndefaults write com.divisiblebyzero.Spectacle MoveToRightHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107c80035f100f4d6f7665546f526967687448616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70728489949da6a9b2bbcdd0d50000000000000101000000000000001d000000000000000000000000000000d7\ndefaults write com.divisiblebyzero.Spectacle MoveToTopDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107e80035f10104d6f7665546f546f70446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072858a959eacafbdc6d8dbe00000000000000101000000000000001d000000000000000000000000000000e2\ndefaults write com.divisiblebyzero.Spectacle MoveToTopHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107e80035d4d6f7665546f546f7048616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e707280859099a2a5aeb7c9ccd10000000000000101000000000000001d000000000000000000000000000000d3\ndefaults write com.divisiblebyzero.Spectacle MoveToUpperLeft -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731111008002107b80035f100f4d6f7665546f55707065724c656674d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70728489949dabafbdc6cfe1e4e90000000000000101000000000000001e000000000000000000000000000000eb\ndefaults write com.divisiblebyzero.Spectacle MoveToUpperRight -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731111008002107c80035f10104d6f7665546f55707065725269676874d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e7072858a959eacb0bec7d0e2e5ea0000000000000101000000000000001e000000000000000000000000000000ec\ndefaults write com.divisiblebyzero.Spectacle RedoLastMove -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c617373110b008002100680035c5265646f4c6173744d6f7665d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70727f848f98a6aab8c1cadcdfe40000000000000101000000000000001e000000000000000000000000000000e6\ndefaults write com.divisiblebyzero.Spectacle UndoLastMove -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731109008002100680035c556e646f4c6173744d6f7665d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70727f848f98a6aab8c1cadcdfe40000000000000101000000000000001e000000000000000000000000000000e6\n\n###############################################################################\n# Kill affected applications                                                  #\n###############################################################################\n\nfor app in \"Activity Monitor\" \"Address Book\" \"Calendar\" \"Contacts\" \"cfprefsd\" \\\n    \"Dock\" \"Finder\" \"Google Chrome\" \"Google Chrome Canary\" \"Mail\" \"Messages\" \\\n    \"Opera\" \"Safari\" \"SizeUp\" \"Spectacle\" \"SystemUIServer\" \\\n    \"Transmission\" \"Twitter\" \"iCal\"; do\n    killall \"${app}\" > /dev/null 2>&1\ndone\necho \"Done. Note that some of these changes require a logout/restart of your OS to take effect.  At a minimum, be sure to restart your Terminal.\"\n"
        },
        {
          "name": "osxprep.sh",
          "type": "blob",
          "size": 0.6650390625,
          "content": "#!/usr/bin/env bash\n\n# Ask for the administrator password upfront\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until `osxprep.sh` has finished\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n# Step 1: Update the OS and Install Xcode Tools\necho \"------------------------------\"\necho \"Updating OSX.  If this requires a restart, run the script again.\"\n# Install all available updates\nsudo softwareupdate -ia --verbose\n# Install only recommended available updates\n#sudo softwareupdate -ir --verbose\n\necho \"------------------------------\"\necho \"Installing Xcode Command Line Tools.\"\n# Install Xcode command line tools\nxcode-select --install\n"
        },
        {
          "name": "pydata.sh",
          "type": "blob",
          "size": 3.1689453125,
          "content": "#!/usr/bin/env bash\n\n# ~/pydata.sh\n\n# Removed user's cached credentials\n# This script might be run with .dots, which uses elevated privileges\nsudo -K\n\necho \"------------------------------\"\necho \"Setting up pip.\"\n\n# Install pip\neasy_install pip\n\n###############################################################################\n# Virtual Enviroments                                                         #\n###############################################################################\n\necho \"------------------------------\"\necho \"Setting up virtual environments.\"\n\n# Install virtual environments globally\n# It fails to install virtualenv if PIP_REQUIRE_VIRTUALENV was true\nexport PIP_REQUIRE_VIRTUALENV=false\npip install virtualenv\npip install virtualenvwrapper\n\necho \"------------------------------\"\necho \"Source virtualenvwrapper from ~/.extra\"\n\nEXTRA_PATH=~/.extra\necho $EXTRA_PATH\necho \"\" >> $EXTRA_PATH\necho \"\" >> $EXTRA_PATH\necho \"# Source virtualenvwrapper, added by pydata.sh\" >> $EXTRA_PATH\necho \"export WORKON_HOME=~/.virtualenvs\" >> $EXTRA_PATH\necho \"source /usr/local/bin/virtualenvwrapper.sh\" >> $EXTRA_PATH\necho \"\" >> $BASH_PROFILE_PATH\nsource $EXTRA_PATH\n\n###############################################################################\n# Python 2 Virtual Enviroment                                                 #\n###############################################################################\n\necho \"------------------------------\"\necho \"Setting up py2-data virtual environment.\"\n\n# Create a Python2 data environment\nmkvirtualenv py2-data\nworkon py2-data\n\n# Install Python data modules\npip install numpy\npip install scipy\npip install matplotlib\npip install pandas\npip install sympy\npip install nose\npip install unittest2\npip install seaborn\npip install scikit-learn\npip install \"ipython[all]\"\npip install bokeh\npip install Flask\npip install sqlalchemy\npip install mysql-python\n\n###############################################################################\n# Python 3 Virtual Enviroment                                                 #\n###############################################################################\n\necho \"------------------------------\"\necho \"Setting up py3-data virtual environment.\"\n\n# Create a Python3 data environment\nmkvirtualenv --python=/usr/local/bin/python3 py3-data\nworkon py3-data\n\n# Install Python data modules\npip install numpy\npip install scipy\npip install matplotlib\npip install pandas\npip install sympy\npip install nose\npip install unittest2\npip install seaborn\npip install scikit-learn\npip install \"ipython[all]\"\npip install bokeh\npip install Flask\npip install sqlalchemy\n#pip install mysql-python  # Python 2 only, use mysqlclient instead\npip install mysqlclient\n\n###############################################################################\n# Install IPython Profile\n###############################################################################\n\necho \"------------------------------\"\necho \"Installing IPython Notebook Default Profile\"\n\n# Add the IPython profile\nmkdir -p ~/.ipython\ncp -r init/profile_default/ ~/.ipython/profile_default\n\necho \"------------------------------\"\necho \"Script completed.\"\necho \"Usage: workon py2-data for Python2\"\necho \"Usage: workon py3-data for Python3\""
        },
        {
          "name": "web.sh",
          "type": "blob",
          "size": 0.728515625,
          "content": "#!/usr/bin/env bash\n\n# Install command-line tools using Homebrew.\n\n# Ask for the administrator password upfront.\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until the script has finished.\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n# Check for Homebrew,\n# Install if we don't have it\nif test ! $(which brew); then\n  echo \"Installing homebrew...\"\n  ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nfi\n\n# Make sure we’re using the latest Homebrew.\nbrew update\n\nbrew install node\n\n# Remove outdated versions from the cellar.\nbrew cleanup\n\nnpm install -g coffee-script\nnpm install -g grunt-cli\nnpm install -g jshint\nnpm install -g less\n\n#gem install jekyll\n"
        }
      ]
    }
  ]
}