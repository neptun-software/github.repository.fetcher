{
  "metadata": {
    "timestamp": 1736560463003,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vega/altair",
      "stars": 9504,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8818359375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nvenv\n.venv\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# emacs backups\n*~\n\\#*\\#\n\n.ipynb_checkpoints\n.idea/*\ntools/_build\nUntitled*.ipynb\n.mypy*\n.pytest_cache\n*.DS_Store\n\n# VSCode\n.vscode\n\n# hatch, doc generation\ndata.json\n\n# type stubs\ntypings/"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.171875,
          "content": "# Contributor Covenant Code of Conduct\n\nAs a project of the Vega Organization, we use the [Vega Code of Conduct](https://github.com/vega/.github/blob/main/CODE_OF_CONDUCT.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.2451171875,
          "content": "# Feedback and Contribution\n\nWe welcome any input, feedback, bug reports, and contributions via [Altair's\nGitHub Repository](http://github.com/vega/altair/). In particular, we\nwelcome companion efforts from other visualization libraries to render the\nVega-Lite specifications output by Altair. We see this portion of the effort\nas much bigger than Altair itself: the Vega and Vega-Lite specifications are\nperhaps the best existing candidates for a principled *lingua franca* of data\nvisualization.\n\nWe are also seeking contributions of additional Jupyter notebook-based examples\nin our separate GitHub repository: https://github.com/altair-viz/altair_notebooks.\n\nAll contributions, suggestions, and feedback you submitted are accepted under the [Project's license](./LICENSE). You represent that if you do not own copyright in the code that you have the authority to submit it under the [Project's license](./LICENSE). All feedback, suggestions, or contributions are not confidential. The Project abides by the Vega Organization's [code of conduct](https://github.com/vega/.github/blob/main/CODE_OF_CONDUCT.md) and [governance](https://github.com/vega/.github/blob/main/project-docs/GOVERNANCE.md).\n\n## How To Contribute Code to Vega-Altair\n\n### Setting Up Your Environment\n\nFork the Altair repository on GitHub and then clone the fork to you local\nmachine. For more details on forking see the [GitHub\nDocumentation](https://help.github.com/en/articles/fork-a-repo).\n\n```cmd\ngit clone https://github.com/YOUR-USERNAME/altair.git\n```\n\nTo keep your fork up to date with changes in this repo,\nyou can [use the fetch upstream button on GitHub](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork).\n\nNow you can install the latest version of Altair locally using `pip`.\nThe `-e` flag indicates that your local changes will be reflected\nevery time you open a new Python interpreter\n(instead of having to reinstall the package each time).\n\n```cmd\ncd altair/ \npython -m pip install -e \".[all, dev]\"\n```\n\n'[all, dev]' indicates that pip should also install the optional and development requirements\nwhich you can find in `pyproject.toml` (`[project.optional-dependencies]/all` and `[project.optional-dependencies]/dev`)\n\n### Creating a Branch\n\nOnce your local environment is up-to-date, you can create a new git branch\nwhich will contain your contribution\n(always create a new branch instead of making changes to the main branch):\n\n```cmd\ngit switch -c <your-branch-name>\n```\n\nWith this branch checked-out, make the desired changes to the package.\n\nA large part of Altair's code base is automatically generated.\nAfter you have made your manual changes,\nmake sure to run the following to see if there are any changes\nto the automatically generated files: \n\n```bash\nhatch run generate-schema-wrapper\n```\n\nFor information on how to update the Vega-Lite version that Altair uses,\nplease read [the maintainers' notes](NOTES_FOR_MAINTAINERS.md).\n\n### Testing your Changes\n\nBefore submitting your changes to the main Altair repository,\nit is recommended that you run the Altair test suite,\nwhich includes a number of tests to validate the correctness of your code:\n\n```bash\nhatch test\n```\n\n\nThis also runs the [`ruff`](https://ruff.rs/) linter and formatter as well as [`mypy`](https://mypy-lang.org/) as type checker.\n\n\nStudy the output of any failed tests and try to fix the issues\nbefore proceeding to the next section.\n\n#### Failures on specific python version(s)\nBy default, `hatch test` will run the test suite against the currently active python version.\nTwo useful variants for debugging failures that only appear *after* you've submitted your PR:\n\n```bash\n# Test against all python version(s) in the matrix\nhatch test --all\n# Test against a specific python version\nhatch test --python 3.8\n```\n\nSee [hatch test](https://hatch.pypa.io/latest/cli/reference/#hatch-test) docs for other options.\n\n#### Changes to `__all__`\nIf `test_completeness_of__all__` fails, you may need to run:\n\n```bash\nhatch run update-init-file\n```\nHowever, this test usually indicates *unintentional* addition(s) to the top-level `alt.` namespace that will need resolving first.\n\n### Creating a Pull Request\n\nWhen you are happy with your changes, you can commit them to your branch by running\n\n```cmd\ngit add <modified-file>\ngit commit -m \"Some descriptive message about your change\"\ngit push origin <your-branch-name>\n```\n\nYou will then need to submit a pull request (PR) on GitHub asking to merge\nyour example branch into the main Altair repository. For details on creating a PR see GitHub\ndocumentation [Creating a pull\nrequest](https://help.github.com/en/articles/creating-a-pull-request). You can\nadd more details about your example in the PR such as motivation for the\nexample or why you thought it would be a good addition.  You will get feed back\nin the PR discussion if anything needs to be changed. To make changes continue\nto push commits made in your local example branch to origin and they will be\nautomatically shown in the PR. \n\nHopefully your PR will be answered in a timely manner and your contribution will\nhelp others in the future.\n\n## How To Contribute Documentation to Vega-Altair\n\nAltair documentation is written in [reStructuredText](http://docutils.sourceforge.net/rst.html)\nand compiled into html pages using [Sphinx](http://www.sphinx-doc.org/en/master/).\nContributing to the documentation requires some extra dependencies and \nwe have some conventions and plugins that are used to help navigate the docs and \ngenerate great Altair visualizations. \n\nNote that the [Altair website](https://altair-viz.github.io/)\nis only updated when a new version is released so your contribution might not show\nup for a while.\n\n### Adding Examples\n\nWe are always interested in new examples contributed from the community. These\ncould be everything from simple one-panel scatter and line plots, to more\ncomplicated layered or stacked plots, to more advanced interactive features.\nBefore submitting a new example check the [Altair Example\nGallery](https://altair-viz.github.io/gallery/index.html) to make sure that\nyour idea has not already been implemented. \n\nOnce you have an example you would like to add there are a few guide lines to follow.\nEvery example should:\n- have a `arguments_syntax` and `methods_syntax` implementation. Each implementation \n  must be saved as a stand alone script in the `tests/examples_arguments_syntax` \n  and `tests/examples_methods_syntax` directories.\n- have a descriptive docstring, which will eventually be extracted for the\n  documentation website.\n- contain a category tag.\n- define a chart variable with the main chart object (This will be used both in\n  the unit tests to confirm that the example executes properly, and also\n  eventually used to display the visualization on the documentation website).\n- not make any external calls to download data within the script (i.e. don't\n  use urllib). You can define your data directly within the example file,\n  generate your data using pandas and numpy, or you can use data\n  available in the `vega_datasets` package.\n\nThe easiest way to get started would be to adapt examples from the [Vega-Lite\nexample gallery](https://vega.github.io/vega-lite/examples/) which are missing\nin the Altair gallery. Or you can feel free to be creative and build your own\nvisualizations.\n\nOften it is convenient to draft an example outside of the main repository, such\nas [Google Colab](https://colab.research.google.com/), to avoid difficulties\nwhen working with git. Once you have an example you would like to add, follow the\nsame contribution procedure outlined above.\n\nSome additional notes:\n\n- The format and style of new contributions should generally match that of existing examples.\n- The file docstring will be rendered into HTML via\n  [reStructuredText](http://docutils.sourceforge.net/rst.html), so use that\n  format for any hyperlinks or text styling. In particular, be sure you include\n  a title in the docstring underlined with `---`, and be sure that the size of\n  the underline exactly matches the size of the title text.\n- If your example fits into a chart type but involves significant configuration\n  it should be in the `Case Studies` category.\n- For consistency all data used for a visualization should be assigned to the\n  variable `source`. Then `source` is passed to the `alt.Chart` object.\n  If the example requires multiple dataframes then this does not apply. See\n  other examples for guidance. \n- Example code should not require downloading external datasets. We suggest\n  using the `vega_datasets` package if possible.\n  If you are using the `vega_datasets` package there are multiple ways to refer\n  to a data source. If the dataset you would like to use is included in local\n  installation (`vega_datasets.local_data.list_datasets()`) then the data can\n  be referenced directly, such as `source = data.iris()`. If the data is not\n  included then it should be referenced by URL, such as `source =\n  data.movies.url`. This is to ensure that Altair's automated test suite does\n  not depend on availability of external HTTP resources.\n- If VlConvert does not support PNG export of the chart (e.g. in the case of emoji),\n  then add the name of the example to the `SVG_EXAMPLES` set in \n  `tests/examples_arguments_syntax/__init__.py` and `tests/examples_methods_syntax/__init__.py`\n\n### Building the Documentation Locally\n\nThe process to build the documentation locally consists of three steps:\n\n1. Clean any previously generated files to ensure a clean build.\n2. Generate the documentation in HTML format.\n3. View the generated documentation using a local Python testing server.\n\nThe specific commands for each step depend on your operating system.\nMake sure you execute the following commands from the root dir of altair and have [`hatch`](https://hatch.pypa.io/) installed in your local environment.\n\n- For MacOS and Linux, run the following commands in your terminal:\n```bash\nhatch run doc:clean-all\nhatch run doc:build-html\nhatch run doc:serve\n```\n\n- For Windows, use these commands instead:\n```cmd\nhatch run doc:clean-all-win\nhatch run doc:build-html-win\nhatch run doc:serve\n```\n\nTo view the documentation, open your browser and go to `http://localhost:8000`. To stop the server, use `^C` (control+c) in the terminal.\n\n---\n\nPart of MVG-0.1-beta.\nMade with love by GitHub. Licensed under the [CC-BY 4.0 License](https://creativecommons.org/licenses/by-sa/4.0/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4619140625,
          "content": "Copyright (c) 2015-2025, Vega-Altair Developers\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of vega-altair nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "NOTES_FOR_MAINTAINERS.md",
          "type": "blob",
          "size": 4.7705078125,
          "content": "# Notes for Maintainers of Altair\n\n## Auto-generating the Python code\n\nThe core Python API for Altair can be found in the following locations:\n\n- ``altair/vegalite/v5/schema/``\n\nAll the files within these directories are created automatically by running\nthe following script from the root of the repository:\n\n```bash\nhatch run generate-schema-wrapper\n```\n\nThis script does a couple things:\n\n- downloads the appropriate schema files from the specified vega-lite\n  release versions & copies the JSON file to the appropriate ``schema``\n  directory\n- generates basic low-level schemapi wrappers from the definitions within\n  the schema: this is put in the ``schema/core.py`` file\n- generates a second layer of higher level wrappers for some vega-lite\n  functionality; this is put in ``schema/channels.py`` and ``schema/mixins.py``\n\nThe script output is designed to be deterministic; if the vega-lite version\nis not changed, then running the script should overwrite the schema wrappers\nwith identical copies.\n\n## Updating Vega versions\nAll versions are maintained in [pyproject.toml](pyproject.toml).\n\n### Python Packages\n\nProjects which publish a package to PyPI are listed with a version bound in one of the following tables:\n\n- [`project.dependencies`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#dependencies-optional-dependencies): Published dependencies.\n- [`project.optional-dependencies`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#dependencies-optional-dependencies): Published optional dependencies, or \"extras\".\n- [`dependency-groups`](https://peps.python.org/pep-0735/): Local dependencies for development.\n\n> [!NOTE]\n> All are currently declared in sub-tables of `project.optional-dependencies`.\n\nThe lower version bounds defined here are reused for [altair/utils/_importers.py](altair/utils/_importers.py).\n\n#### `vl-convert`\n\nWe need to ensure that [vl-convert](https://github.com/vega/vl-convert) includes support for the new Vega-Lite version. \nCheck the [vl-convert releases](https://github.com/vega/vl-convert/releases) to find the minimum\nversion of `vl-convert` that includes support for the desired version of Vega-Lite (and [open\nan issue](https://github.com/vega/vl-convert/issues) if this version hasn't been\nincluded in a released yet).\n\n### Javascript/other\n\nAdditional version constraints, including for [`Vega-Lite`](https://github.com/vega/vega-lite) itself are declared in `[tool.altair.vega]`.\n\nWhereas the [previous dependencies](#python-packages) are used primarily at *install-time*; this group is embedded into `altair` for use at *runtime* or when [generating the python code](#auto-generating-the-python-code):\n\n```toml\n[tool.altair.vega]\nvega-datasets     = \"...\" # https://github.com/vega/vega-datasets\nvega-embed        = \"...\" # https://github.com/vega/vega-embed\nvega-lite         = \"...\" # https://github.com/vega/vega-lite\n```\n\nSome examples of where these propagate to:\n- [altair/jupyter/js/index.js](altair/jupyter/js/index.js)\n- [altair/utils/_importers.py](altair/utils/_importers.py)\n- [tools/generate_schema_wrapper.py](tools/generate_schema_wrapper.py)\n- [tools/versioning.py](tools/versioning.py)\n- [altair/utils/schemapi.py](https://github.com/vega/altair/blob/0e23fd33e9a755bab0ef73a856340c48c14897e6/altair/utils/schemapi.py#L1619-L1640)\n\n> [!IMPORTANT]\n> When updating **any** of these versions, be sure to [re-generate the python code](#auto-generating-the-python-code).\n\n#### Updating the Vega-Lite version\n\nThe Vega-Lite version for the Python code propagates to `tools.generate_schema_wrapper.SCHEMA_VERSION`.\n\nThis will update all of the automatically-generated files in the ``schema``\ndirectory for each version, but please note that it will *not* update other\npieces (for example, the core of the Altair API, including methods and\ndoc strings within ``altair/vegalite/v5/api.py``).\nThese additional methods have fairly good test coverage, so running the test\nsuite should identify any inconsistencies:\n\n```bash\nhatch test\n```\n\nGenerally, minor version updates (e.g. Vega-Lite 2.3->2.4) have been relatively\npainless, maybe requiring the addition of a few chart methods or modification\nof some docstrings.\nMajor version updates (e.g. Vega-Lite 1.X->2.X) have required substantial\nrewrites, because the internal structure of the schema changed appreciably.\n\n## Releasing the Package\n\nTo cut a new release of Altair, follow the steps outlined in\n[RELEASING.md](RELEASING.md).\n\n## Web analytics\nWe use the privacy-friendly [plausible.io](https://plausible.io/) for tracking usage statistics of our documentation.\nIt is hosted on [https://views.scientific-python.org](https://views.scientific-python.org). You can view the stats [here](https://views.scientific-python.org/altair-viz.github.io). To get an account to edit the settings of the web tracking, ask another maintainer."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.525390625,
          "content": "# Vega-Altair <a href=\"https://altair-viz.github.io/\"><img align=\"right\" src=\"https://altair-viz.github.io/_static/altair-logo-light.png\" height=\"50\"></img></a>\n\n[![github actions](https://github.com/vega/altair/workflows/build/badge.svg)](https://github.com/vega/altair/actions?query=workflow%3Abuild)\n[![typedlib_mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://www.mypy-lang.org)\n[![JOSS Paper](https://joss.theoj.org/papers/10.21105/joss.01057/status.svg)](https://joss.theoj.org/papers/10.21105/joss.01057)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/altair)](https://pypi.org/project/altair)\n\n**Vega-Altair** is a declarative statistical visualization library for Python. With Vega-Altair, you can spend more time understanding your data and its meaning. Vega-Altair's\nAPI is simple, friendly and consistent and built on top of the powerful\n[Vega-Lite](https://github.com/vega/vega-lite) JSON specification. This elegant\nsimplicity produces beautiful and effective visualizations with a minimal amount of code. \n\n*Vega-Altair was originally developed by [Jake Vanderplas](https://github.com/jakevdp) and [Brian\nGranger](https://github.com/ellisonbg) in close collaboration with the [UW\nInteractive Data Lab](https://idl.cs.washington.edu/).*\n*The Vega-Altair open source project is not affiliated with Altair Engineering, Inc.*\n\n## Documentation\n\nSee [Vega-Altair's Documentation Site](https://altair-viz.github.io) as well as the [Tutorial Notebooks](https://github.com/altair-viz/altair_notebooks). You can\nrun the notebooks directly in your browser by clicking on one of the following badges:\n\n[![Binder](https://beta.mybinder.org/badge.svg)](https://beta.mybinder.org/v2/gh/altair-viz/altair_notebooks/master)\n[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/altair-viz/altair_notebooks/blob/master/notebooks/Index.ipynb)\n\n## Example\n\nHere is an example using Vega-Altair to quickly visualize and display a dataset with the native Vega-Lite renderer in the JupyterLab:\n\n```python\nimport altair as alt\n\n# load a simple dataset as a pandas DataFrame\nfrom vega_datasets import data\ncars = data.cars()\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n)\n```\n\n![Vega-Altair Visualization](https://raw.githubusercontent.com/altair-viz/altair/main/images/cars.png)\n\nOne of the unique features of Vega-Altair, inherited from Vega-Lite, is a declarative grammar of not just visualization, but _interaction_. \nWith a few modifications to the example above we can create a linked histogram that is filtered based on a selection of the scatter plot.\n\n```python \nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbrush = alt.selection_interval()\n\npoints = alt.Chart(source).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color=alt.when(brush).then(\"Origin\").otherwise(alt.value(\"lightgray\"))\n).add_params(\n    brush\n)\n\nbars = alt.Chart(source).mark_bar().encode(\n    y='Origin',\n    color='Origin',\n    x='count(Origin)'\n).transform_filter(\n    brush\n)\n\npoints & bars\n```\n\n![Vega-Altair Visualization Gif](https://raw.githubusercontent.com/altair-viz/altair/main/images/cars_scatter_bar.gif)\n\n## Features\n\n* Carefully-designed, declarative Python API.\n* Auto-generated internal Python API that guarantees visualizations are type-checked and\n  in full conformance with the [Vega-Lite](https://github.com/vega/vega-lite)\n  specification.\n* Display visualizations in JupyterLab, Jupyter Notebook, Visual Studio Code, on GitHub and\n  [nbviewer](https://nbviewer.jupyter.org/), and many more.\n* Export visualizations to various formats such as PNG/SVG images, stand-alone HTML pages and the\n[Online Vega-Lite Editor](https://vega.github.io/editor/#/).\n* Serialize visualizations as JSON files.\n\n## Installation\n\nVega-Altair can be installed with:\n```bash\npip install altair\n```\n\nIf you are using the conda package manager, the equivalent is:\n```bash\nconda install altair -c conda-forge\n```\n\nFor full installation instructions, please see [the documentation](https://altair-viz.github.io/getting_started/installation.html).\n\n## Getting Help\n\nIf you have a question that is not addressed in the documentation, \nyou can post it on [StackOverflow](https://stackoverflow.com/questions/tagged/altair) using the `altair` tag.\nFor bugs and feature requests, please open a [Github Issue](https://github.com/vega/altair/issues).\n\n## Development\n\n[![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg)](https://github.com/pypa/hatch)\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![pytest](https://img.shields.io/badge/logo-pytest-blue?logo=pytest&labelColor=5c5c5c&label=%20)](https://github.com/pytest-dev/pytest)\n\nYou can find the instructions on how to install the package for development in [the documentation](https://altair-viz.github.io/getting_started/installation.html).\n\nTo run the tests and linters, use\n\n```bash\nhatch test\n```\n\nFor information on how to contribute your developments back to the Vega-Altair repository, see\n[`CONTRIBUTING.md`](https://github.com/vega/altair/blob/main/CONTRIBUTING.md)\n\n## Citing Vega-Altair\n\n[![JOSS Paper](https://joss.theoj.org/papers/10.21105/joss.01057/status.svg)](https://joss.theoj.org/papers/10.21105/joss.01057)\n\nIf you use Vega-Altair in academic work, please consider citing https://joss.theoj.org/papers/10.21105/joss.01057 as\n\n```bib\n@article{VanderPlas2018,\n    doi = {10.21105/joss.01057},\n    url = {https://doi.org/10.21105/joss.01057},\n    year = {2018},\n    publisher = {The Open Journal},\n    volume = {3},\n    number = {32},\n    pages = {1057},\n    author = {Jacob VanderPlas and Brian Granger and Jeffrey Heer and Dominik Moritz and Kanit Wongsuphasawat and Arvind Satyanarayan and Eitan Lees and Ilia Timofeev and Ben Welsh and Scott Sievert},\n    title = {Altair: Interactive Statistical Visualizations for Python},\n    journal = {Journal of Open Source Software}\n}\n```\nPlease additionally consider citing the [Vega-Lite](https://vega.github.io/vega-lite/) project, which Vega-Altair is based on: https://dl.acm.org/doi/10.1109/TVCG.2016.2599030\n\n```bib\n@article{Satyanarayan2017,\n    author={Satyanarayan, Arvind and Moritz, Dominik and Wongsuphasawat, Kanit and Heer, Jeffrey},\n    title={Vega-Lite: A Grammar of Interactive Graphics},\n    journal={IEEE transactions on visualization and computer graphics},\n    year={2017},\n    volume={23},\n    number={1},\n    pages={341-350},\n    publisher={IEEE}\n} \n```\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 2.6142578125,
          "content": "1. Check all [Vega project](https://github.com/orgs/vega/repositories?type=source) versions are up-to-date. See [NOTES_FOR_MAINTAINERS.md](NOTES_FOR_MAINTAINERS.md)\n\n2. Make sure to have an environment set up with `hatch` installed. See [CONTRIBUTING.md](CONTRIBUTING.md).\n   Remove any existing environments managed by `hatch` so that it will create new ones\n   with the latest dependencies when executing the commands further below:\n   \n        hatch env prune\n\n3. Make certain your branch is in sync with head, and that you have no uncommitted modifications. If you work on a fork, replace `origin` with `upstream`:\n \n        git checkout main\n        git pull origin main\n        git status  # Should show \"nothing to commit, working tree clean\"\n\n4. Do a clean doc build:\n\n        hatch run doc:clean-all\n        hatch run doc:build-html\n        hatch run doc:serve\n   \n   Navigate to http://localhost:8000 and ensure it looks OK (particularly\n   do a visual scan of the gallery thumbnails).\n\n5. Create a new release branch:\n       \n        git switch -c version_5.0.0\n\n6. Update version to, e.g. 5.0.0:\n\n   - in ``altair/__init__.py``\n   - in ``doc/conf.py``\n\n7. Commit changes and push:\n\n        git add . -u\n        git commit -m \"chore: Bump version to 5.0.0\"\n        git push\n\n8. Merge release branch into main, make sure that all required checks pass\n\n9.  On main, build source & wheel distributions. If you work on a fork, replace `origin` with `upstream`:\n\n        git switch main\n        git pull origin main\n        hatch clean  # clean old builds & distributions\n        hatch build  # create a source distribution and universal wheel\n\n10. publish to PyPI (Requires correct PyPI owner permissions):\n\n        hatch publish\n\n11. build and publish docs (Requires write-access to altair-viz/altair-viz.github.io):\n\n        hatch run doc:publish-clean-build\n\n12. On main, tag the release. If you work on a fork, replace `origin` with `upstream`:\n\n       git tag -a v5.0.0 -m \"Version 5.0.0 release\"\n       git push origin v5.0.0\n\n13. Create a new branch:\n       \n       git switch -c maint_5.1.0dev\n\n14. Update version and add 'dev' suffix, e.g. 5.1.0dev:\n\n    - in ``altair/__init__.py``\n    - in ``doc/conf.py``\n\n15. Commit changes and push:\n\n        git add . -u\n        git commit -m \"chore: Bump version to 5.1.0dev\"\n        git push\n        \n16. Merge maintenance branch into main\n\n17. Double-check that a conda-forge pull request is generated from the updated\n    pip package by the conda-forge bot (may take up to several hours):\n    https://github.com/conda-forge/altair-feedstock/pulls\n\n18. Publish a new release in https://github.com/vega/altair/releases/\n"
        },
        {
          "name": "altair",
          "type": "tree",
          "content": null
        },
        {
          "name": "design",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 11.650390625,
          "content": "# this file contains:\n# 1 build system configuration\n# 2 project configuration\n# 3 tool configuration, for:\n# - hatch\n# - ruff\n# - pytest\n# - mypy\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"altair\"\nauthors = [{ name = \"Vega-Altair Contributors\" }]\ndependencies = [\n    \"typing_extensions>=4.10.0; python_version<\\\"3.14\\\"\",\n    \"jinja2\",\n    # If you update the minimum required jsonschema version, also update it in build.yml\n    \"jsonschema>=3.0\",\n    \"packaging\",\n    \"narwhals>=1.14.2\"\n]\ndescription = \"Vega-Altair: A declarative statistical visualization library for Python.\"\nreadme = \"README.md\"\nkeywords = [\n    \"declarative\",\n    \"statistics\",\n    \"visualization\",\n    \"interactive\",\n    \"json\",\n    \"vega-lite\",\n]\nrequires-python = \">=3.9\"\ndynamic = [\"version\"]\nlicense = {file = \"LICENSE\"}\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Console\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Natural Language :: English\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Typing :: Typed\",\n]\n\n[project.urls]\nDocumentation = \"https://altair-viz.github.io\"\nSource = \"https://github.com/vega/altair\"\n\n[project.optional-dependencies]\nsave = [\n    \"vl-convert-python>=1.7.0\",\n]\nall = [\n    \"altair[save]\",\n    \"vega_datasets>=0.9.0\",\n    \"pandas>=1.1.3\",\n    \"numpy\",\n    \"pyarrow>=11\",\n    \"vegafusion[embed]>=1.6.6\",\n    \"anywidget>=0.9.0\",\n    \"altair_tiles>=0.3.0\"\n]\ndev = [\n    \"hatch>=1.13.0\",\n    \"ruff>=0.8.4\",\n    \"duckdb>=1.0\",\n    \"ipython[kernel]\",\n    \"pandas>=1.1.3\",\n    \"pyarrow-stubs\",\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-xdist[psutil]~=3.5\",\n    \"mistune\",\n    \"mypy\",\n    \"pandas-stubs\",\n    \"types-jsonschema\",\n    \"types-setuptools\",\n    \"geopandas\",\n    \"polars>=0.20.3\",\n    \"tomli; python_version<\\\"3.11\\\"\"\n]\ndoc = [\n    \"sphinx\",\n    \"docutils\",\n    \"sphinxext_altair\",\n    \"jinja2\",\n    \"numpydoc\",\n    \"pillow\",\n    \"pydata-sphinx-theme>=0.14.1\",\n    \"myst-parser\",\n    \"sphinx_copybutton\",\n    \"sphinx-design\",\n    \"scipy\",\n]\n\n[tool.altair.vega]\n# Minimum/exact versions, for projects under the `vega` organization\nvega-datasets     = \"v2.11.0\" # https://github.com/vega/vega-datasets\nvega-embed        = \"6\"       # https://github.com/vega/vega-embed\nvega-lite         = \"v5.21.0\" # https://github.com/vega/vega-lite\n\n[tool.hatch.version]\npath = \"altair/__init__.py\"\n\n[tool.hatch.metadata]\nallow-direct-references = true\n\n[tool.hatch.build]\ninclude = [\"/altair\"]\nartifacts = [\"altair/jupyter/js/index.js\"]\n\n[tool.hatch.envs.default]\nfeatures = [\"all\", \"dev\"]\n# https://hatch.pypa.io/latest/how-to/environment/select-installer/#enabling-uv\ninstaller = \"uv\"\n\n[tool.hatch.envs.default.scripts]\ngenerate-schema-wrapper = [\n    \"mypy tools\",\n    \"python tools/generate_schema_wrapper.py\",\n    \"test\"\n]\ntest = [\n    \"ruff check .\",\n    \"ruff format --diff --check .\",\n    \"mypy altair tests\",\n    \"python -m pytest --pyargs --numprocesses=logical --doctest-modules tests altair tools\",\n]\ntest-coverage = \"python -m pytest --pyargs --doctest-modules --cov=altair --cov-report term altair\"\ntest-coverage-html = \"python -m pytest --pyargs --doctest-modules --cov=altair --cov-report html altair\"\nupdate-init-file = [\n    \"python tools/update_init_file.py\",\n    \"ruff check .\",\n    \"ruff format .\",\n]\ntest-fast = [\n    \"ruff check .\", \"ruff format .\",\n    \"pytest -p no:randomly -n logical --numprocesses=logical --doctest-modules tests altair tools -m \\\"not slow\\\" {args}\"\n]\ntest-slow = [\n    \"ruff check .\", \"ruff format .\",\n    \"pytest -p no:randomly -n logical --numprocesses=logical --doctest-modules tests altair tools -m \\\"slow\\\" {args}\"\n]\n\n[tool.hatch.envs.hatch-test]\n# https://hatch.pypa.io/latest/tutorials/testing/overview/\nfeatures = [\"all\", \"dev\", \"doc\"]\n# https://pytest-xdist.readthedocs.io/en/latest/distribution.html#running-tests-across-multiple-cpus\ndefault-args = [\"--numprocesses=logical\",\"--doctest-modules\", \"tests\", \"altair\", \"tools\"]\nparallel = true\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n[tool.hatch.envs.hatch-test.scripts]\nrun = [\n    \"ruff check .\", \n    \"ruff format --diff --check .\",\n    \"mypy altair tests\",\n    \"pytest{env:HATCH_TEST_ARGS:} {args}\"\n]\nrun-cov = \"coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}\"\ncov-combine = \"coverage combine\"\ncov-report = \"coverage report\"\n\n[tool.hatch.envs.doc]\nfeatures = [\"all\", \"dev\", \"doc\"]\n\n[tool.hatch.envs.doc.scripts]\nclean = \"rm -rf doc/_build\"\nclean-generated = [\"rm -rf doc/user_guide/generated\", \"rm -rf doc/gallery\"]\nclean-all = [\"clean\", \"clean-generated\", \"rm -rf doc/_images\"]\nclean-win = \"if exist doc\\\\_build rd /s /q doc\\\\_build\"\nclean-generated-win = [\n    \"if exist doc\\\\user_guide\\\\generated rd /s /q doc\\\\user_guide\\\\generated\",\n    \"if exist doc\\\\gallery rd /s /q doc\\\\gallery\",\n]\nclean-all-win = [\n    \"clean-win\",\n    \"clean-generated-win\",\n    \"if exist doc\\\\_images rd /s /q doc\\\\_images\",\n]\nbuild-html = [\n    \"mkdir -p doc/_images\",\n    \"sphinx-build -b html -d doc/_build/doctrees doc doc/_build/html\",\n]\nbuild-html-win = [\n    \"if not exist doc\\\\_images md doc\\\\_images\",\n    \"sphinx-build -b html -d doc\\\\_build\\\\doctrees doc doc\\\\_build\\\\html\",\n]\ndoctest = \"sphinx-build -b doctest -d doc/_build/doctrees doc doc/_build/doctest\"\ncoverage = \"sphinx-build -b coverage -d doc/_build/doctrees doc doc/_build/coverage\"\nserve = \"(cd doc/_build/html && python -m http.server)\"\npublish-clean-build = [\n    \"clean-all\",\n    \"build-html\",\n    \"(cd doc && bash sync_website.sh)\",\n]\n\n[tool.ruff]\nexclude = [\n    \".git\",\n    \"__pycache__\",\n    \"build\",\n    \"tests/examples_arguments_syntax\",\n    \"tests/examples_methods_syntax\",\n]\nindent-width = 4\nline-length = 88\ntarget-version = \"py39\"\n\n[tool.ruff.lint]\nextend-safe-fixes = [ # https://docs.astral.sh/ruff/settings/#lint_extend-safe-fixes\n    \"ANN204\",  # missing-return-type-special-method \n    \"C419\",    # unnecessary-comprehension-in-call\n    \"C420\",    # unnecessary-dict-comprehension-for-iterable\n    \"D200\",    # fits-on-one-line\n    \"D301\",    # escape-sequence-in-docstring\n    \"D400\",    # ends-in-period\n    \"EM101\",   # raw-string-in-exception\n    \"EM102\",   # f-string-in-exception\n    \"PLR6201\", # literal-membership\n    \"TC\",      # flake8-type-checking\n    \"UP006\",   # non-pep585-annotation\n    \"UP007\",   # non-pep604-annotation-union\n    \"UP008\",   # super-call-with-parameters\n    \"W291\",    # trailing-whitespace\n    \"W293\",    # blank line contains whitespace\n]\nextend-select = [ # https://docs.astral.sh/ruff/preview/#using-rules-that-are-in-preview\n    \"FURB\",    # refurb\n    \"PLC2801\", # unnecessary-dunder-call\n    \"PLR1733\", # unnecessary-dict-index-lookup\n    \"PLR1736\", # unnecessary-list-index-lookup\n    \"PLR6201\", # literal-membership\n    \"PLW1514\", # unspecified-encoding\n]\nignore = [\n    \"ANN401\", # any-type\n    \"D100\",   # undocumented-public-module\n    \"D101\",   # undocumented-public-class\n    \"D102\",   # undocumented-public-method\n    \"D103\",   # undocumented-public-function\n    \"D104\",   # undocumented-public-package\n    \"D105\",   # undocumented-magic-method\n    \"D107\",   # undocumented-public-init\n    \"D206\",   # indent-with-spaces\n    \"D212\",   # multi-line-summary-first-line ((D213) is the opposite of this)\n    \"D401\",   # non-imperative-mood  \n    \"D413\",   # missing-blank-line-after-last-section\n    \"E501\",   # line-too-long (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)\n    \"RUF012\", # mutable-class-default\n    \"RUF052\", # used-dummy-variable\n    \"SIM105\", # suppressible-exception (https://github.com/vega/altair/pull/3431#discussion_r1629808660)\n    \"W505\",   # doc-line-too-long\n]\nmccabe.max-complexity = 10\npreview = true # https://docs.astral.sh/ruff/preview/\npydocstyle.convention = \"numpy\" # https://docs.astral.sh/ruff/settings/#lintpydocstyle\nselect = [\n    \"ANN\",     # flake8-annotations\n    \"B\",       # flake8-bugbear\n    \"C4\",      # flake8-comprehensions\n    \"C901\",    # complex-structure\n    \"D\",       # pydocstyle\n    \"D213\",    # multi-line-summary-second-line\n    \"E\",       # pycodestyle-error\n    \"EM\",      # flake8-errmsg\n    \"F\",       # pyflakes\n    \"FA\",      # flake8-future-annotations\n    \"FLY\",     # flynt\n    \"I001\",    # unsorted-imports\n    \"NPY\",     # numpy-specific-rules\n    \"PIE\",     # flake8-pie\n    \"PLC0208\", # iteration-over-set\n    \"PLR0402\", # manual-from-import\n    \"PLR1711\", # useless-return\n    \"PLR1714\", # repeated-equality-comparison\n    \"PLR5501\", # collapsible-else-if\n    \"PLW0120\", # useless-else-on-loop\n    \"PLW1510\", # subprocess-run-without-check\n    \"PLW3301\", # nested-min-max\n    \"PT\",      # flake8-pytest-style\n    \"PTH\",     # flake8-use-pathlib\n    \"RUF\",     # Ruff-specific rules\n    \"SIM\",     # flake8-simplify\n    \"TC\",      # flake8-type-checking\n    \"TID\",     # flake8-tidy-imports\n    \"UP\",      # pyupgrade\n    \"W\",       # pycodestyle-warning\n]\n\n[tool.ruff.lint.isort]\nclasses = [\"datum\", \"expr\"]\nextra-standard-library = [\"typing_extensions\"]\nknown-first-party = [\n    \"altair_tiles\",\n    \"sphinxext_altair\",\n    \"vega_datasets\",\n    \"vegafusion\",\n    \"vl_convert\",\n]\nsplit-on-trailing-comma = false\n\n[tool.ruff.lint.flake8-tidy-imports.banned-api]\n# https://docs.astral.sh/ruff/settings/#lint_flake8-tidy-imports_banned-api\n\"narwhals.dependencies\".msg = \"\"\"\nImport `dependencies` from `narwhals.stable.v1` instead.\n\"\"\"\n\"narwhals.dtypes\".msg = \"\"\"\nImport `dtypes` from `narwhals.stable.v1` instead.\n\"\"\"\n\"narwhals.typing\".msg = \"\"\"\nImport `typing` from `narwhals.stable.v1` instead.\n\"\"\"\n\"typing.Optional\".msg = \"\"\"\nUse `Union[T, None]` instead.\n`typing.Optional` is likely to be confused with `altair.typing.Optional`, \\\nwhich have a similar but different semantic meaning.\nSee https://github.com/vega/altair/pull/3449\n\"\"\"\n\n[tool.ruff.lint.per-file-ignores]\n\"!altair/vegalite/v5/api.py\" = [\"ANN\"]  # Only enforce annotation rules on public api\n\"tests/**/*.py\"              = [\"C901\"] # Allow complex if/elif branching during tests\n\n[tool.ruff.format]\ndocstring-code-format      = true # https://docs.astral.sh/ruff/formatter/#docstring-formatting\ndocstring-code-line-length = 88\nline-ending                = \"lf\"\n\n[tool.pytest.ini_options]\n# Pytest does not need to search these folders for test functions.\n# They contain examples which are being executed by the\n# test_examples tests.\nnorecursedirs = [\"tests/examples_arguments_syntax\", \"tests/examples_methods_syntax\"]\naddopts = [\"--numprocesses=logical\"]\n# https://docs.pytest.org/en/stable/how-to/mark.html#registering-marks\nmarkers = [\n    \"slow: Label tests as slow (deselect with '-m \\\"not slow\\\"')\"\n]\n\n[tool.mypy]\nwarn_unused_ignores = true\npretty = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"vega_datasets.*\",\n    \"pyarrow.*\",\n    \"yaml.*\",\n    \"pandas.lib.*\",\n    \"geopandas.*\",\n    \"nbformat.*\",\n    \"ipykernel.*\",\n    \"ibis.*\",\n    \"vegafusion.*\",\n]\nignore_missing_imports = true\n\n[tool.pyright]\nenableExperimentalFeatures=true\nextraPaths=[\"./tools\"]\npythonPlatform=\"All\"\npythonVersion=\"3.9\"\nreportTypedDictNotRequiredAccess=\"none\"\nreportIncompatibleMethodOverride=\"none\"\nreportUnusedExpression=\"none\"\nreportUnsupportedDunderAll=\"none\"\ninclude=[\n    \"./altair/**/*.py\",\n    \"./doc/*.py\",\n\t\"./tests/**/*.py\",\n\t\"./tools/**/*.py\",\n    \"./sphinxext/**/*.py\",\n]\nignore=[\n    \"./altair/vegalite/v5/schema/channels.py\",  # 716 warns\n    \"./altair/vegalite/v5/schema/mixins.py\",    # 1001 warns\n    \"./altair/jupyter/\",                        # Mostly untyped\n    \"./tests/test_jupyter_chart.py\",            # Based on untyped module\n    \"../../../**/Lib\",                          # stdlib\n    \"../../../**/typeshed*\"                     # typeshed-fallback\n]\n"
        },
        {
          "name": "sphinxext",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}