{
  "metadata": {
    "timestamp": 1736560869908,
    "page": 581,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Lightning-AI/lit-llama",
      "stars": 6017,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1826171875,
          "content": "__pycache__\n.idea\n.DS_Store\n*.egg-info\nbuild\n\n# data\ndata\ncheckpoints\nout\n!data/shakespeare/prepare.py\nwandb\n\n# downloaded by our tests\noriginal_model.py\noriginal_adapter.py\n\n.ruff_cache/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2023] Lightning AI\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6591796875,
          "content": "<div align=\"center\">\n<img src=\"https://pl-public-data.s3.amazonaws.com/assets_lightning/Lit_LLaMA_Badge3x.png\" alt=\"Lit-LLaMA\" width=\"128\"/>\n\n# ⚡ Lit-LLaMA ️\n\n![cpu-tests](https://github.com/lightning-AI/lit-llama/actions/workflows/cpu-tests.yml/badge.svg) [![Build Status](https://dev.azure.com/Lightning-AI/lit%20Models/_apis/build/status%2FLightning-AI.lit-LLaMA?branchName=main)](https://dev.azure.com/Lightning-AI/lit%20Models/_build/latest?definitionId=49&branchName=main) [![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Lightning-AI/lit-llama/blob/master/LICENSE) [![Discord](https://img.shields.io/discord/1077906959069626439?style=plastic)](https://discord.gg/VptPCZkGNa)\n\n<pre>\n<b>⚠️ Warning: Not Actively Maintained</b>\n\nThis repository is no longer actively maintained. For a more up-to-date alternative, please visit the LitGPT project:\n<a href=\"https://github.com/Lightning-AI/litgpt\">https://github.com/Lightning-AI/litgpt</a>, which serves as the successor to this repository.\n\nFeel free to explore, reuse, or fork, but be aware that no further updates or support will be provided.\n</pre>\n\n<img src=\"https://pl-public-data.s3.amazonaws.com/assets_lightning/Llama_pineapple.gif\" alt=\"Lit-LLaMA and pineapple pizza\" width=\"500px\"/>\n\n</div>\n\n# ⚡ Lit-LLaMA ️\nIndependent implementation of [LLaMA](<https://github.com/facebookresearch/llama>) pretraining, finetuning, and inference code that is fully open source under the **Apache 2.0 license.**\n\nThis implementation builds on [nanoGPT](<https://github.com/karpathy/nanoGPT>).\n\nThe open-source code in this repository works with the original LLaMA weights that are distributed by Meta under a [research-only license](https://github.com/facebookresearch/llama/blob/main/MODEL_CARD.md#model-details).\n\n## Looking for LLaMA 2?\n\nMeta AI has since released LLaMA 2. Additionally, new Apache 2.0 licensed weights are being released as part of the [Open LLaMA project](https://github.com/openlm-research/open_llama).\n\nTo run LLaMA 2 weights, Open LLaMA weights, or Vicuna weights (among other LLaMA-like checkpoints), **check out the [Lit-GPT repository](https://github.com/Lightning-AI/lit-gpt)**.\n\n## Why?\n\nWe believe that AI should be fully open source and part of the collective knowledge.\n\nThe original [LLaMA code](https://github.com/facebookresearch/llama) is [GPL licensed](https://github.com/facebookresearch/llama/blob/main/LICENSE) which means any project using it must also be released under GPL.\n\nThis \"taints\" any other code and prevents integration with the rest of the ecosystem.\n\n**Lit-LLaMA solves that for good.**\n\n&nbsp;\n\n## Design principles\n**Lit-LLaMA** is:\n\n- **Simple:** Single-file implementation without boilerplate.\n- **Correct:** Numerically equivalent to the original model.\n- **Optimized:** Runs on consumer hardware or at scale.\n- **Open-source:** No strings attached.\n\n## Get involved!\n[Join our Discord](https://discord.gg/VptPCZkGNa) to build high-performance, truly open-source models for the common benefit of the community.\n\n&nbsp;\n\n## Setup\n\nClone the repo\n\n```bash\ngit clone https://github.com/Lightning-AI/lit-llama\ncd lit-llama\n```\n\ninstall dependencies\n\n```bash\npip install -e \".[all]\"\n```\n\nYou are all set! 🎉\n\n&nbsp;\n\n## Use the model\n\nTo generate text predictions, you need to download the model weights. **If you don't have them, check out our [guide](howto/download_weights.md).**\n\nRun inference:\n\n```bash\npython generate.py --prompt \"Hello, my name is\"\n```\n\nThis will run the 7B model and require ~26 GB of GPU memory (A100 GPU).\n\n[Full guide for generating samples from the model](howto/inference.md).\n\n### Run Lit-LLaMA on consumer devices\n\nOn GPUs with `bfloat16` support, the `generate.py` script will automatically convert the weights and consume about ~14 GB.\nFor GPUs with less memory, or ones that don't support `bfloat16`, enable quantization (`--quantize llm.int8`):\n\n```bash\npython generate.py --quantize llm.int8 --prompt \"Hello, my name is\"\n```\n\nSee `python generate.py --help` for more options.\n\nYou can also use GPTQ-style int4 quantization, but this needs conversions of the weights first:\n\n```bash\npython quantize/gptq.py --output_path checkpoints/lit-llama/7B/llama-gptq.4bit.pth --dtype bfloat16 --quantize gptq.int4\n```\n\nGPTQ-style int4 quantization brings GPU usage down to about ~5GB. As only the weights of the Linear layers are quantized, it is useful to also use `--dtype bfloat16` even with the quantization enabled.\n\nWith the generated quantized checkpoint generation quantization then works as usual with `--quantize gptq.int4` and the newly generated checkpoint file:\n\n```bash\npython generate.py --quantize gptq.int4 --checkpoint_path checkpoints/lit-llama/7B/llama-gptq.4bit.pth\n```\n\n[Full guide for generating samples from the model](howto/inference.md).\n\n## Finetune the model\n\nWe provide a simple training scripts in `finetune/lora.py` and `finetune/adapter.py` that instruction-tunes a pretrained model on the [Alpaca](https://github.com/tatsu-lab/stanford_alpaca) dataset using the techniques of [LoRA](https://arxiv.org/abs/2106.09685) and [Adapter](https://arxiv.org/abs/2303.16199).\n\n1. Download the data and generate a instruction tuning dataset:\n\n   ```bash\n   python scripts/prepare_alpaca.py\n   ```\n\n2. Run the finetuning script\n\n   ```bash\n   python finetune/lora.py\n   ```\n   or \n   ```bash\n   python finetune/adapter.py\n   ```\n\nIt is expected that you have downloaded the pretrained weights as described above.\nThe finetuning requires at least one GPU with ~24 GB memory (RTX 3090). Follow the instructions in the script to efficiently fit your GPU memory.\nNote: For some GPU models you might need to set `torch.backends.cuda.enable_flash_sdp(False)` (see comments at the top of the script).\n\nMore details about each finetuning method and how you can apply it to your own data can be found in our technical how-to guides.\n\n### Finetuning How-To Guides\n\nThese technical tutorials illustrate how to run the finetuning code.\n\n- [Finetune with LoRA](howto/finetune_lora.md)\n- [Finetune with Adapters](howto/finetune_adapter.md)\n\n### Understanding Finetuning -- Conceptual Tutorials\n\nLooking for conceptual tutorials and explanations? We have some additional articles below:\n\n- [Understanding Parameter-Efficient Finetuning of Large Language Models: From Prefix Tuning to LLaMA-Adapters](https://lightning.ai/pages/community/article/understanding-llama-adapters/)\n\n## Pre-training\n\nWe provide a simple training script based on Fabric if you want to venture into pre-training on RedPajama, a reproduction of the original LLaMA dataset.\nConversion scripts for our optimized streaming `PackedDataset` are included.\n\nFollow this guide to start pre-training on the RedPajama dataset:\n\n- [Pretrain on RedPajama](howto/train_redpajama.md)\n\n## Get involved!\n\nWe are on a quest towards fully open source AI.\n\n<img align=\"right\" src=\"https://pl-public-data.s3.amazonaws.com/assets_lightning/Lit_LLaMA_Illustration3x.png\" alt=\"Lit-LLaMA\" width=\"128\"/>\n\nJoin us and start contributing, especially on the following areas:\n\n- [ ] [Pre-training](https://github.com/Lightning-AI/lit-llama/labels/pre-training)\n- [ ] [Fine-tuning (full and LoRA)](https://github.com/Lightning-AI/lit-llama/labels/fine-tuning)\n- [ ] [Quantization](https://github.com/Lightning-AI/lit-llama/labels/quantization)\n- [ ] [Sparsification](https://github.com/Lightning-AI/lit-llama/labels/sparsification)\n\nLook at `train.py` for a starting point towards pre-training / fine-tuning using [Lightning Fabric](https://lightning.ai/docs/fabric/stable/).\n\nWe welcome all individual contributors, regardless of their level of experience or hardware. Your contributions are valuable, and we are excited to see what you can accomplish in this collaborative and supportive environment. \n\nUnsure about contributing? Check out our [Contributing to Lit-LLaMA: A Hitchhiker’s Guide to the Quest for Fully Open-Source AI](https://lightning.ai/pages/community/tutorial/contributing-to-lit-llama-a-hitchhikers-guide-to-the-quest-for-fully-open-source-ai/) guide.\n\nDon't forget to [join our Discord](https://discord.gg/VptPCZkGNa)!\n\n## Acknowledgements\n\n- [@karpathy](https://github.com/karpathy) for [nanoGPT](https://github.com/karpathy/nanoGPT)\n- [@FacebookResearch](https://github.com/facebookresearch) for the original [LLaMA implementation](https://github.com/facebookresearch/llama)\n- [@TimDettmers](https://github.com/TimDettmers) for [bitsandbytes](https://github.com/TimDettmers/bitsandbytes)\n- [@Microsoft](https://github.com/microsoft) for [LoRA](https://github.com/microsoft/LoRA)\n- [@IST-DASLab](https://github.com/IST-DASLab) for [GPTQ](https://github.com/IST-DASLab/gptq)\n\n## License\n\nLit-LLaMA is released under the [Apache 2.0](https://github.com/Lightning-AI/lightning-llama/blob/main/LICENSE) license.\n"
        },
        {
          "name": "evaluate",
          "type": "tree",
          "content": null
        },
        {
          "name": "finetune",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate.py",
          "type": "blob",
          "size": 6.0888671875,
          "content": "# Copyright Lightning AI. Licensed under the Apache License 2.0, see LICENSE file.\n\nimport sys\nimport time\nimport warnings\nfrom pathlib import Path\nfrom typing import Optional\n\nimport lightning as L\nimport torch\n\n# support running without installing as a package\nwd = Path(__file__).parent.parent.resolve()\nsys.path.append(str(wd))\n\nfrom lit_llama import LLaMA, Tokenizer\nfrom lit_llama.utils import lazy_load, llama_model_lookup, quantization\n\n\n@torch.no_grad()\ndef generate(\n    model: LLaMA,\n    idx: torch.Tensor,\n    max_new_tokens: int,\n    *,\n    max_seq_length: Optional[int] = None,\n    temperature: float = 1.0,\n    top_k: Optional[int] = None,\n    eos_id: Optional[int] = None,\n) -> torch.Tensor:\n    \"\"\"Takes a conditioning sequence (prompt) as input and continues to generate as many tokens as requested.\n\n    The implementation of this function is modified from A. Karpathy's nanoGPT.\n\n    Args:\n        model: The model to use.\n        idx: Tensor of shape (T) with indices of the prompt sequence.\n        max_new_tokens: The number of new tokens to generate.\n        max_seq_length: The maximum sequence length allowed.\n        temperature: Scales the predicted logits by 1 / temperature\n        top_k: If specified, only sample among the tokens with the k highest probabilities\n        eos_id: If specified, stop generating any more token once the <eos> token is triggered\n    \"\"\"\n    # create an empty tensor of the expected final shape and fill in the current tokens\n    T = idx.size(0)\n    T_new = T + max_new_tokens\n    if max_seq_length is None:\n        max_seq_length = min(T_new, model.config.block_size)\n\n    device, dtype = idx.device, idx.dtype\n    # create an empty tensor of the expected final shape and fill in the current tokens\n    empty = torch.empty(T_new, dtype=dtype, device=device)\n    empty[:T] = idx\n    idx = empty\n    input_pos = torch.arange(0, T, device=device)\n\n    if idx.device.type == \"xla\":\n        import torch_xla.core.xla_model as xm\n\n        xm.mark_step()\n\n    # generate max_new_tokens tokens\n    for _ in range(max_new_tokens):\n        x = idx.index_select(0, input_pos).view(1, -1)\n\n        # forward\n        logits = model(x, max_seq_length, input_pos)\n        logits = logits[0, -1] / temperature\n\n        # optionally crop the logits to only the top k options\n        if top_k is not None:\n            v, _ = torch.topk(logits, min(top_k, logits.size(-1)))\n            logits = torch.where(logits < v[[-1]], -float(\"Inf\"), logits)\n\n        probs = torch.nn.functional.softmax(logits, dim=-1)\n        idx_next = torch.multinomial(probs, num_samples=1).to(dtype=dtype)\n\n        # advance\n        input_pos = input_pos[-1:] + 1\n\n        if idx.device.type == \"xla\":\n            xm.mark_step()\n\n        # concatenate the new generation\n        idx = idx.index_copy(0, input_pos, idx_next)\n\n        # if <eos> token is triggered, return the output (stop generation)\n        if idx_next == eos_id:\n            return idx[:input_pos]  # include the EOS token\n\n    return idx\n\n\ndef main(\n    prompt: str = \"Hello, my name is\",\n    *,\n    num_samples: int = 1,\n    max_new_tokens: int = 50,\n    top_k: int = 200,\n    temperature: float = 0.8,\n    checkpoint_path: Path = Path(\"checkpoints/lit-llama/7B/lit-llama.pth\"),\n    tokenizer_path: Path = Path(\"checkpoints/lit-llama/tokenizer.model\"),\n    quantize: Optional[str] = None,\n) -> None:\n    \"\"\"Generates text samples based on a pre-trained LLaMA model and tokenizer.\n\n    Args:\n        prompt: The prompt string to use for generating the samples.\n        num_samples: The number of text samples to generate.\n        max_new_tokens: The number of generation steps to take.\n        top_k: The number of top most probable tokens to consider in the sampling process.\n        temperature: A value controlling the randomness of the sampling process. Higher values result in more random\n            samples.\n        checkpoint_path: The checkpoint path to load.\n        tokenizer_path: The tokenizer path to load.\n        quantize: Whether to quantize the model and using which method:\n            ``\"llm.int8\"``: LLM.int8() mode,\n            ``\"gptq.int4\"``: GPTQ 4-bit mode.\n    \"\"\"\n    assert checkpoint_path.is_file(), checkpoint_path\n    assert tokenizer_path.is_file(), tokenizer_path\n\n    precision = \"bf16-true\" if torch.cuda.is_available() and torch.cuda.is_bf16_supported() else \"32-true\"\n    fabric = L.Fabric(devices=1, precision=precision)\n\n    print(\"Loading model ...\", file=sys.stderr)\n    t0 = time.time()\n    with lazy_load(checkpoint_path) as checkpoint:\n        name = llama_model_lookup(checkpoint)\n\n        with fabric.init_module(empty_init=True), quantization(mode=quantize):\n            model = LLaMA.from_name(name)\n\n        model.load_state_dict(checkpoint)\n    print(f\"Time to load model: {time.time() - t0:.02f} seconds.\", file=sys.stderr)\n\n    model.eval()\n    model = fabric.setup(model)\n\n    tokenizer = Tokenizer(tokenizer_path)\n    encoded = tokenizer.encode(prompt, bos=True, eos=False, device=fabric.device)\n    prompt_length = encoded.size(0)\n\n    L.seed_everything(1234)\n    for i in range(num_samples):\n        t0 = time.perf_counter()\n        y = generate(model, encoded, max_new_tokens, temperature=temperature, top_k=top_k)\n        t = time.perf_counter() - t0\n\n        model.reset_cache()\n        print(tokenizer.decode(y))\n        tokens_generated = y.size(0) - prompt_length\n        print(f\"Time for inference {i + 1}: {t:.02f} sec total, {tokens_generated / t:.02f} tokens/sec\", file=sys.stderr)\n    if fabric.device.type == \"cuda\":\n        print(f\"Memory used: {torch.cuda.max_memory_reserved() / 1e9:.02f} GB\", file=sys.stderr)\n\n\nif __name__ == \"__main__\":\n    from jsonargparse import CLI\n\n    torch.set_float32_matmul_precision(\"high\")\n    warnings.filterwarnings(\n        # Triggered internally at ../aten/src/ATen/EmptyTensor.cpp:31\n        \"ignore\", \n        message=\"ComplexHalf support is experimental and many operators don't support it yet\"\n    )\n    warnings.filterwarnings(\n        # Triggered in bitsandbytes/autograd/_functions.py:298\n        \"ignore\", \n        message=\"MatMul8bitLt: inputs will be cast from torch.bfloat16 to float16 during quantization\",\n    )\n    CLI(main)\n"
        },
        {
          "name": "generate",
          "type": "tree",
          "content": null
        },
        {
          "name": "howto",
          "type": "tree",
          "content": null
        },
        {
          "name": "lit_llama",
          "type": "tree",
          "content": null
        },
        {
          "name": "pretrain",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.2880859375,
          "content": "[build-system]\nrequires = [\"setuptools\", \"setuptools-scm\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"lit-llama\"\nversion = \"0.1.0\"\ndescription = \"Implementation of the LLaMA language model\"\nlicense = {text = \"Apache-2.0\"}\nauthors = [\n    { name = \"Lightning AI\", email = \"community@lightning.ai\" }\n]\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\ndependencies = [\n    \"torch>=2.0.0\",\n    \"lightning @ git+https://github.com/Lightning-AI/lightning@master\",\n    \"sentencepiece\",\n    \"bitsandbytes\",\n]\nclassifiers = [\n    \"Topic :: Text Processing\"\n]\n\n[project.optional-dependencies]\nall = [\n    \"tqdm\",  # convert_checkpoint.py\n    \"numpy <2.0\",  # train.py dataset memmap\n    \"jsonargparse[signatures]\",  # generate.py, convert_checkpoint.py CLI\n    \"datasets\",  # evaluate.py\n    \"zstandard\",  # prepare_redpajama.py\"\n]\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]  # list of folders that contain the packages ([\".\"] by default)\ninclude = [\"lit_llama\"]  # package names should match these glob patterns ([\"*\"] by default)\nexclude = []  # exclude packages matching these glob patterns (empty by default)\nnamespaces = false  # to disable scanning PEP 420 namespaces (true by default)\n\n\n[tool.pytest.ini_options]\naddopts = [\n    \"--strict-markers\",\n    \"--color=yes\",\n    \"--disable-pytest-warnings\",\n]\n"
        },
        {
          "name": "quantize",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.119140625,
          "content": "# Copyright Lightning AI. Licensed under the Apache License 2.0, see LICENSE file.\n\nfrom setuptools import setup\n\nsetup()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}