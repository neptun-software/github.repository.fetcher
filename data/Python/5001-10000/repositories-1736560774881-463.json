{
  "metadata": {
    "timestamp": 1736560774881,
    "page": 463,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mher/flower",
      "stars": 6559,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.27734375,
          "content": ".DS_Store\n*.pyc\n*$py.class\n*~\n.*.sw[po]\ndist/\n*.egg-info\n*.egg\n*.egg/\n*.eggs\ndoc/__build/*\nbuild/\n.build/\npip-log.txt\n.directory\nerl_crash.dump\n*.db\nDocumentation/\n.tox/\n.ropeproject/\n.project\n.pydevproject\n.idea\n.vagrant\nenv\nvenv\n*.retry\n.cache/\n.mypy_cache/\nPipfile*\n.vscode/\ndata/\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 0.4345703125,
          "content": "[MASTER]\ndisable=\n    C0114, # missing-module-docstring\n    C0115, # missing-class-docstring\n    C0116, # missing-function-docstring\n    C0301, # line-too-long\n    W0223, # abstract-method\n    R0903, # too-few-public-methods\n    R0902, # too-many-instance-attributes\n    W0622, # redefined-builtin\n    C0415, # import-outside-toplevel\n    W0718, # broad-exception-caught\n    R1735, # use-dict-literal\n\n[BASIC]\ngood-names=i,e,n,x,logger,tz,db,dt\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2177734375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  configuration: docs/conf.py\n\npython:\n  install:\n    - requirements: requirements/docs.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.212890625,
          "content": "dist: focal\nlanguage: python\nos:\n  - linux\npython:\n  - \"3.6\"\n  - \"3.7\"\n  - \"3.8\"\n  - \"3.9\"\n  - \"3.10\"\n  - \"3.11\"\n  - \"3.12\"\n  - \"pypy3\"\ninstall:\n  - pip install tox-travis\nbefore_script:\n  - pip freeze\nscript:\n  - tox\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.53515625,
          "content": "======================================\n Contributors (in chronological order)\n======================================\n\nMher Movsisyan\nAsk Solem\nLukasz Marcin Dobrzanski\nAlexander Koshelev\nGary Linscott\nTommaso Barbugli\nMiguel Gaiowski\nMatt Hughes\nRomain Commandé\nAndres Riancho\nJet Zheung\nAudrius Butkevicius\nYulian Slobodyan\nRob O'Dwyer\nHorace Thomas\nKit Sunde\nAdam Greig\nLuciano Pacheco\nMiki Tebeka\nMichael J. Schultz\nTJ Kells\nGeoff Jukes\nPeter De Vries\nLisa Chung\nSabeel Saif Hakim\nGaurav Dadhania\nCharlie Marshall\nBenjamin Drung\nDavid Thorman\nHong Minhee\nJohn Costa\nIuri de Silvio\nBalthazar Rouberol\nAlexandre Ferland\nFlorian Glesser\nTomasz Pazurkiewicz\nBenjamin Toueg\nRob Hoelz\nTadej Janež\nCorey Farwell\nThomas Grainger\nTom Mortimer-Jones\nKonstantinos Koukopoulos\nSamuel Cormier-Iijima\nDavid Matson\nPaulo SantAnna\nSanchit Arora\nIlya Lebedev\nWendy Liu\nMike Helmick\nIlya Georgievsky\nRaghuram Onti Srinivasan\nMichael Kahn\nGaurav Kumar\nSimon Westphahl\nPedro Ferreira\nDanilo Resende\nKevin Wu\nVinay Karanam\nRodrigo Pinheiro Matias\nThomas Boquet\nMisha Behersky\nSebastian Kalinowski\nJingyu Zhou\nMaxim Krivodaev\nAlli Witheford\nAlexander Zaitsev\nAnton Prokhorov\nSharang Phadke\nMoinuddin Quadri\nJohn Arnold\nScott Kruger\nDavid Schneider\nS M Ahasanul Haque\nLeo Singer\nPavel Savchenko\nBhargav Srinivasan\nJosiah Berkebile\nDeniz Dogan\nAliaksei Urbanski\nMike Dearman\nFrancisco J. Capdevila\nScott Allen\nJohan Adami\nRay Marc Marcellones\nWen YE\nWaleed Darwish\nBjorn Stiel\nFabio Todaro\nSimon Gurcke\nJason Held\nLukas Matta\nTomasz Kluczkowski\nAlexey Nikitenko\nSergey Klyuykov\nLouis Frament"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.9658203125,
          "content": "FROM python:alpine\n\n# Get latest root certificates\nRUN apk add --no-cache ca-certificates tzdata && update-ca-certificates\n\n# Install the required packages\nRUN pip install --no-cache-dir redis flower\n\n# PYTHONUNBUFFERED: Force stdin, stdout and stderr to be totally unbuffered. (equivalent to `python -u`)\n# PYTHONHASHSEED: Enable hash randomization (equivalent to `python -R`)\n# PYTHONDONTWRITEBYTECODE: Do not write byte files to disk, since we maintain it as readonly. (equivalent to `python -B`)\nENV PYTHONUNBUFFERED=1 PYTHONHASHSEED=random PYTHONDONTWRITEBYTECODE=1\n\n# Default port\nEXPOSE 5555\n\nENV FLOWER_DATA_DIR /data\nENV PYTHONPATH ${FLOWER_DATA_DIR}\n\nWORKDIR $FLOWER_DATA_DIR\n\n# Add a user with an explicit UID/GID and create necessary directories\nRUN set -eux; \\\n    addgroup -g 1000 flower; \\\n    adduser -u 1000 -G flower flower -D; \\\n    mkdir -p \"$FLOWER_DATA_DIR\"; \\\n    chown flower:flower \"$FLOWER_DATA_DIR\"\nUSER flower\n\nVOLUME $FLOWER_DATA_DIR\n\nCMD [\"celery\", \"flower\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5087890625,
          "content": "Copyright (c) 2012, Mher Movsisyan and individual contributors.\nAll rights reserved. \n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met: \n\n * Redistributions of source code must retain the above copyright notice, \n   this list of conditions and the following disclaimer. \n\n * Redistributions in binary form must reproduce the above copyright \n   notice, this list of conditions and the following disclaimer in the \n   documentation and/or other materials provided with the distribution. \n\n * Neither the name of the Celery Flower nor the names of its contributors \n   may be used to endorse or promote products derived from this software\n   without specific prior written permission. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE \nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.240234375,
          "content": "include AUTHORS\ninclude CHANGES\ninclude LICENSE\ninclude MANIFEST.in\ninclude README.rst\nrecursive-include docs *\nrecursive-include flower/static *\nrecursive-include flower/templates *\nrecursive-include tests *\nrecursive-include requirements *.txt\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.1767578125,
          "content": "Flower\n======\n\n.. image:: https://img.shields.io/pypi/dm/flower.svg\n    :target: https://pypistats.org/packages/flower\n    :alt: PyPI - Downloads\n.. image:: https://img.shields.io/docker/pulls/mher/flower.svg\n    :target: https://hub.docker.com/r/mher/flower\n    :alt: Docker Pulls\n.. image:: https://github.com/mher/flower/workflows/Build/badge.svg\n    :target: https://github.com/mher/flower/actions\n.. image:: https://img.shields.io/pypi/v/flower.svg\n    :target: https://pypi.python.org/pypi/flower\n\nFlower is an open-source web application for monitoring and managing Celery clusters.\nIt provides real-time information about the status of Celery workers and tasks.\n\nFeatures\n--------\n\n- Real-time monitoring using Celery Events\n    - View task progress and history\n    - View task details (arguments, start time, runtime, and more)\n- Remote Control\n    - View worker status and statistics\n    - Shutdown and restart worker instances\n    - Control worker pool size and autoscale settings\n    - View and modify the queues a worker instance consumes from\n    - View currently running tasks\n    - View scheduled tasks (ETA/countdown)\n    - View reserved and revoked tasks\n    - Apply time and rate limits\n    - Revoke or terminate tasks\n- Broker monitoring\n    - View statistics for all Celery queues\n- HTTP Basic Auth, Google, Github, Gitlab and Okta OAuth\n- Prometheus integration\n- API\n\nInstallation\n------------\n\nInstalling `flower` with `pip <http://www.pip-installer.org/>`_ is simple ::\n\n    $ pip install flower\n\nThe development version can be installed from Github ::\n\n    $ pip install https://github.com/mher/flower/zipball/master#egg=flower\n\nUsage\n-----\n\nTo run Flower, you need to provide the broker URL ::\n\n    $ celery --broker=amqp://guest:guest@localhost:5672// flower\n\nOr use the configuration of `celery application <https://docs.celeryq.dev/en/stable/userguide/application.html>`_  ::\n\n    $ celery -A tasks.app flower\n\nBy default, flower runs on port 5555, which can be modified with the `port` option ::\n\n    $ celery -A tasks.app flower --port=5001\n\nYou can also run Flower using the docker image ::\n\n    $ docker run -v examples:/data -p 5555:5555 mher/flower celery --app=tasks.app flower\n\nIn this example, Flower is using the `tasks.app` defined in the `examples/tasks.py <https://github.com/mher/flower/blob/master/examples/tasks.py>`_ file\n\nAPI\n---\n\nFlower API enables to manage the cluster via HTTP `REST API`.\n\nFor example you can restart worker's pool by: ::\n\n    $ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n\nOr call a task by: ::\n\n    $ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n\nOr terminate executing task by: ::\n\n    $ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n\nFor more info checkout `API Reference`_\n\n.. _API Reference: https://flower.readthedocs.io/en/latest/api.html\n\nDocumentation\n-------------\n\nDocumentation is available at `Read the Docs`_\n\n.. _Read the Docs: https://flower.readthedocs.io\n\nLicense\n-------\n\nFlower is licensed under BSD 3-Clause License.\nSee the `License`_ file for the full license text.\n\n.. _`License`: https://github.com/mher/flower/blob/master/LICENSE\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.892578125,
          "content": "version: '3'\nservices:\n  redis:\n    image: redis:alpine\n    ports:\n      - 6379:6379\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - 9090:9090\n  grafana:\n    image: grafana/grafana\n    depends_on:\n      - prometheus\n    ports:\n      - 3000:3000\n  worker:\n    build: ./\n    entrypoint: celery\n    command: -A tasks worker -l info -E\n    user: nobody\n    volumes:\n      - ./examples:/data\n    environment:\n      CELERY_BROKER_URL: redis://redis\n      CELERY_RESULT_BACKEND: redis://redis\n      PYTHONPATH: /data\n    depends_on:\n      - redis\n  flower:\n    build: ./\n    command: celery -A tasks flower\n    volumes:\n      - ./examples:/data\n    working_dir: /data\n    ports:\n      - 5555:5555\n    environment:\n      CELERY_BROKER_URL: redis://redis\n      CELERY_RESULT_BACKEND: redis://redis\n    depends_on:\n      - worker\n      - redis"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flower",
          "type": "tree",
          "content": null
        },
        {
          "name": "prometheus.yml",
          "type": "blob",
          "size": 0.1484375,
          "content": "global:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: flower\n    static_configs:\n      - targets: ['flower:5555']"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scss",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.01953125,
          "content": "[wheel]\nuniversal=1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1474609375,
          "content": "#!/usr/bin/env python\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\n\nversion = re.compile(r'VERSION\\s*=\\s*\\((.*?)\\)')\n\n\ndef get_package_version():\n    \"returns package version without importing it\"\n    base = os.path.abspath(os.path.dirname(__file__))\n    with open(os.path.join(base, \"flower/__init__.py\")) as initf:\n        for line in initf:\n            m = version.match(line.strip())\n            if not m:\n                continue\n            return \".\".join(m.groups()[0].split(\", \"))\n\n\ndef get_requirements(filename):\n    return open('requirements/' + filename).read().splitlines()\n\n\nclasses = \"\"\"\n    Development Status :: 4 - Beta\n    Intended Audience :: Developers\n    License :: OSI Approved :: BSD License\n    Topic :: System :: Distributed Computing\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Operating System :: OS Independent\n\"\"\"\nclassifiers = [s.strip() for s in classes.split('\\n') if s]\n\n\nsetup(\n    name='flower',\n    version=get_package_version(),\n    description='Celery Flower',\n    long_description=open('README.rst').read(),\n    long_description_content_type=\"text/x-rst\",\n    author='Mher Movsisyan',\n    author_email='mher.movsisyan@gmail.com',\n    url='https://github.com/mher/flower',\n    license='BSD',\n    classifiers=classifiers,\n    python_requires=\">=3.7\",\n    packages=find_packages(exclude=['tests', 'tests.*']),\n    install_requires=get_requirements('default.txt'),\n    test_suite=\"tests\",\n    tests_require=get_requirements('test.txt'),\n    package_data={'flower': ['templates/*', 'static/*.*',\n                             'static/**/*.*', 'static/**/**/*.*']},\n    entry_points={\n        'celery.commands': [\n            'flower = flower.command:flower',\n        ],\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.458984375,
          "content": "[tox]\nenvlist = {py36,py37,py38,py39,py310,py311,py312,pypy3}-{celery505}-{tornado5,tornado6}\nskip_missing_interpreters = True\n\n[testenv]\ndeps =\n    mock\n    pytest\nsetenv =\n    celery505: CELERY_VERSION=5.0.5\n    tornado5: TORNADO_VERSION=>=5.0.0,<6.0.0\n    tornado6: TORNADO_VERSION=>=6.0.0,<7.0.0\ncommands =\n    pip install -q Celery=={env:CELERY_VERSION}\n    pip install \"tornado{env:TORNADO_VERSION}\"\n    py.test tests/\npassenv =\n    CELERY_VERSION TORNADO_VERSION\n"
        }
      ]
    }
  ]
}