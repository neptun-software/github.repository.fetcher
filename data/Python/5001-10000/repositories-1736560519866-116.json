{
  "metadata": {
    "timestamp": 1736560519866,
    "page": 116,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yzhao062/pyod",
      "stars": 8735,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1142578125,
          "content": "docs/* linguist-documentation\nnotebooks/*.ipynb linguist-documentation\nexamples/*.ipynb linguist-documentation=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": "__pycache__/\npyod.egg-info/\n.cache/\n.pytest_cache\n__pycache__\n.idea/\n.vscode/\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.55859375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# We recommend specifying your dependencies to enable reproducible builds:\n# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt"
        },
        {
          "name": "CHANGES.txt",
          "type": "blob",
          "size": 12.3935546875,
          "content": "v<0.1.0>, <05/20/2018> -- Initial release.\nv<0.1.1>, <05/20/2018> -- Hot fixes for broken documentation.\nv<0.1.2>, <05/20/2018> -- Hot fixes for broken dependency.\nv<0.1.3>, <05/21/2018> -- Function Signature Improvement.\nv<0.2.0>, <05/23/2018> -- Implement tests and improve stability.\nv<0.2.1>, <05/23/2018> -- Remove data loading func due to broken dependency.\nv<0.2.2>, <05/24/2018> -- Refactor models and add more testcases\nv<0.2.3>, <05/26/2018> -- Add more testcases.\nv<0.3.0>, <05/27/2018> -- Provide full documentation.\nv<0.3.1>, <05/28/2018> -- Add more complete coverage for Py3.5+.\nv<0.3.2>, <05/29/2018> -- Implement fastABOD and added more documentations.\nv<0.3.3>, <05/29/2018> -- Urgent bug fix.\nv<0.3.4>, <05/29/2018> -- Another urgent bug fix.\nv<0.4.0>, <05/31/2018> -- Refactor all models to be sklearn compatible.\nv<0.4.1>, <06/01/2018> -- Support Python 2.7, 3.4, 3.5 and 3.6.\nv<0.4.2>, <06/01/2018> -- Fix Python 2.7 installation issue.\nv<0.4.3>, <06/02/2018> -- Add more models and refactored examples.\nv<0.4.4>, <06/03/2018> -- Refactor HBOS and add new models.\nv<0.4.5>, <06/04/2018> -- Implemented Feature Bagging meta framework.\nv<0.4.6>, <06/05/2018> -- Incremental changes and documentation improvements.\nv<0.4.7>, <06/06/2018> -- Add Principal Component Analysis (PCA) detector.\nv<0.4.8>, <06/07/2018> -- Refactor documentation and add test cases.\nv<0.4.9>, <06/09/2018> -- Add new utility functions and improve documentations.\nv<0.5.0>, <06/10/2018> -- Refactor models and improve documentation.\nv<0.5.1>, <06/12/2018> -- Add MCD detector and more Jupyter notebooks.\nv<0.5.2>, <06/13/2018> -- Incremental changes.\nv<0.5.3>, <06/14/2018> -- Incremental changes.\nv<0.5.4>, <06/18/2018> -- Add CBLOF model and incremental improvements.\nv<0.5.7>, <09/03/2018> -- Add AutoEncoder with fully connected architecture.\nv<0.5.8>, <09/04/2018> -- Remove keras, tensorflow and matplotlib as dependency.\nv<0.5.9>, <09/04/2018> -- Optimize models with numba for fast execution.\nv<0.6.0>, <10/19/2018> -- Update LOF due to the changes in sklearn 0.20.0.\nv<0.6.1>, <11/03/2018> -- Inclusion of Python 3.7 & welcome Zain Nasrullah.\nv<0.6.1>, <11/10/2018> -- Incremental changes and official release of 0.6.1.\nv<0.6.2>, <11/19/2018> -- Refactor base class to decrease cognitive complexity.\nv<0.6.2>, <11/24/2018> -- Add maintainability check and Appveyor CI.\nv<0.6.2>, <11/24/2018> -- Add LSCP implementation (WIP).\nv<0.6.3>, <11/26/2018> -- Move from README.md to README.rst.\nv<0.6.4>, <11/26/2018> -- Refactor version file for Python 2 compatibility.\nv<0.6.5>, <11/27/2018> -- Update README.rst Reference section.\nv<0.6.5>, <11/28/2018> -- Add Stochastic Outlier Selection (SOS).\nv<0.6.5>, <11/30/2018> -- Add CircleCI continuous integration.\nv<0.6.5>, <12/03/2018> -- Add Local Correlation Integral (LOCI).\nv<0.6.6>, <12/06/2018> -- Add LSCP (production version).\nv<0.6.6>, <12/08/2018> -- Add XGBOD.\nv<0.6.6>, <12/18/2018> -- Fixed bugs in CBLOF.\nv<0.6.6>, <12/18/2018> -- Refactor docstring from rst to numpydoc.\nv<0.6.6b1>, <12/18/2018> -- Pre-release of V0.6.6.\nv<0.6.6>, <12/21/2018> -- Redesign visualize function for all examples.\nv<0.6.6>, <12/23/2018> -- Refactor all docstring to numpydoc.\nv<0.6.7>, <12/25/2018> -- Documentation clean-up.\nv<0.6.7>, <12/25/2018> -- Optimize LOCI with numba.\nv<0.6.7>, <12/26/2018> -- Refactor Feature Bagging and GAAL based models.\nv<0.6.7>, <12/27/2018> -- Refactor test cases for better coverage.\nv<0.6.7>, <12/28/2018> -- Redesign visualize function for all examples.\nv<0.6.7>, <12/30/2018> -- Add new models to jupyter notebook and benchmark.\nv<0.6.8>, <01/31/2019> -- Optimize unit tests for faster execution.\nv<0.6.8>, <02/08/2019> -- Update docs with media coverage.\nv<0.6.8>, <02/10/2019> -- Fix issue in CBLOF for n_cluster discrepancy.\nv<0.6.8>, <02/10/2019> -- Minor doc improvement and stability enhancement.\nv<0.6.9>, <03/12/2019> -- Major documentation update for JMLR.\nv<0.6.9>, <03/12/2019> -- Change CI tool env variable setting.\nv<0.6.9>, <03/18/2019> -- Update SOS default parameter setting and documentation.\nv<0.6.9>, <03/29/2019> -- Refactor visualize function (moved to utils).\nv<0.6.9>, <03/30/2019> -- Add License info and show support to 996.ICU!\nv<0.6.9>, <04/08/2019> -- Redesign ReadMe for clarity.\nv<0.6.9>, <04/08/2019> -- Deprecate fit_predict and fit_predict_score function.\nv<0.6.9>, <04/10/2019> -- Add inclusion criteria and Python 2.7 retirement notice.\nv<0.7.0>, <04/18/2019> -- Fix issue #23 that kNN fails with Mahalanobis distance.\nv<0.7.0>, <04/20/2019> -- Fix for sklearn new behaviour FutureWarning.\nv<0.7.0>, <04/29/2019> -- Refactor #76 (generate_data_clusters).\nv<0.7.1>, <05/13/2019> -- Fix installation errors caused by sklearn 0.21.\nv<0.7.2>, <05/27/2019> -- Enhanced CI integration.\nv<0.7.2>, <05/29/2019> -- Add Connectivity-Based Outlier Factor (COF).\nv<0.7.2>, <05/29/2019> -- Bug fixes in LSCP and minor documentation updates.\nv<0.7.3>, <06/10/2019> -- Update documentation.\nv<0.7.3>, <06/12/2019> -- Add Subspace Outlier Detection (SOD).\nv<0.7.3>, <06/12/2019> -- Fix bugs in SO_GAAL and MO_GAAL.\nv<0.7.4>, <07/10/2019> -- Fix bugs and update documentation.\nv<0.7.4>, <07/17/2019> -- Update dependency (six and joblib).\nv<0.7.4>, <07/19/2019> -- Update deprecation information.\nv<0.7.5>, <09/24/2019> -- Fix one dimensional data error in LSCP.\nv<0.7.5>, <10/13/2019> -- Document kNN and Isolation Forest's incoming changes.\nv<0.7.5>, <10/13/2019> -- SOD optimization (created by John-Almardeny in June).\nv<0.7.5>, <10/13/2019> -- Documentation updates.\nv<0.7.5.1>, <10/15/2019> -- kNN code optimization.\nv<0.7.5.1>, <12/05/2019> -- Hot fix for scikit-learn 0.22 update. To be complete.\nv<0.7.5.1>, <12/05/2019> -- Disable CircleCI for Python 2.7.\nv<0.7.6>, <12/18/2019> -- Update Isolation Forest and LOF to be consistent with sklearn 0.22.\nv<0.7.6>, <12/18/2019> -- Add Deviation-based Outlier Detection (LMDD).\nv<0.7.7>, <12/21/2019> -- Refactor code for combination simplification on combo.\nv<0.7.7>, <12/21/2019> -- Extended combination methods by median and majority vote.\nv<0.7.7>, <12/22/2019> -- Code optimization and documentation update.\nv<0.7.7>, <12/22/2019> -- Enable continuous integration for Python 3.7.\nv<0.7.7.1>, <12/29/2019> -- Minor update for SUOD and warning fixes.\nv<0.7.8>, <01/05/2019> -- Documentation update.\nv<0.7.8>, <01/30/2019> -- Bug fix for kNN (#158).\nv<0.7.8>, <03/14/2020> -- Add VAE (implemented by Dr Andrij Vasylenko).\nv<0.7.8>, <03/17/2020> -- Add LODA (adapted from tilitools).\nv<0.7.8.1>, <04/07/2020> -- Hot fix for SOD.\nv<0.7.8.2>, <04/14/2020> -- Bug Fix for LODA.\nv<0.7.9>, <04/20/2020> -- Relax the number of n_neighbors in ABOD and COF.\nv<0.7.9>, <05/01/2020> -- Extend Vanilla VAE to Beta VAE by Dr Andrij Vasylenko.\nv<0.7.9>, <05/01/2020> -- Add Conda Badge.\nv<0.8.0>, <05/18/2020> -- Update test frameworks by reflecting sklearn change.\nv<0.8.1>, <07/01/2020> -- Bug fix and documentation update.\nv<0.8.2>, <07/04/2020> -- Add a set of utility functions.\nv<0.8.2>, <08/30/2020> -- Add COPOD and MAD algorithm.\nv<0.8.3>, <09/01/2020> -- Make decision score consistent.\nv<0.8.3>, <09/19/2020> -- Add model persistence documentation (save and load).\nv<0.8.4>, <10/13/2020> -- Fix COPOD code inconsistency (issue #239).\nv<0.8.4>, <10/24/2020> -- Fix LSCP minor bug (issue #180).\nv<0.8.4>, <11/02/2020> -- Add support for Tensorflow 2.\nv<0.8.4>, <11/12/2020> -- Merge PR #!02 for categortical data generation.\nv<0.8.5>, <12/22/2020> -- Refactor test from sklearn to numpy\nv<0.8.5>, <12/22/2020> -- Refactor COPOD for consistency\nv<0.8.5>, <12/22/2020> -- Refactor due to sklearn 0.24 (issue #265)\nv<0.8.6>, <01/09/2021> -- Improve COF speed (PR #159)\nv<0.8.6>, <01/10/2021> -- Fix LMDD parameter inconsistenct.\nv<0.8.6>, <01/12/2021> -- Add option to specify feature names in copod explanation plot (PR #261).\nv<0.8.7>, <01/16/2021> -- Add ROD.\nv<0.8.7>, <02/18/2021> -- Dependency optimization.\nv<0.8.8>, <04/08/2021> -- COPOD optimization.\nv<0.8.8>, <04/08/2021> -- Add parallelization for COPOD.\nv<0.8.8>, <04/26/2021> -- Fix XGBOD issue with xgboost 1.4.\nv<0.8.9>, <05/17/2021> -- Turn on test for Python 3.5-3.8.\nv<0.8.9>, <06/10/2021> -- Add PyTorch AutoEncoder\nv<0.8.9>, <06/11/2021> -- Fix LMDD parameter (#307)\nv<0.9.0>, <06/20/2021> -- Add clone test for models.\nv<0.9.0>, <07/03/2021> -- ROD hot fix (#316).\nv<0.9.0>, <07/04/2021> -- Improve COPOD plot with colunms parameter.\nv<0.9.1>, <07/12/2021> -- Improve COPOD by dropping pandas dependency.\nv<0.9.1>, <07/19/2021> -- Add memory efficienct COF.\nv<0.9.1>, <08/01/2021> -- Fix Pytorch Dataset issue.\nv<0.9.1>, <08/14/2021> -- Synchronize scikit-learn LOF parameters.\nv<0.9.2>, <08/15/2021> -- Fix ROD.\nv<0.9.2>, <08/15/2021> -- Add DeepSVDD (implemented by Rafał Bodziony).\nv<0.9.3>, <08/19/2021> -- Expand test to Python 3.8 and 3.9.\nv<0.9.3>, <08/29/2021> -- Add SUOD.\nv<0.9.4>, <08/29/2021> -- Urgent update for scikit-learnin 1.0.\nv<0.9.5>, <09/10/2021> -- Update to GitHub Action for autotest!\nv<0.9.5>, <09/10/2021> -- Various documentation fix.\nv<0.9.5>, <10/26/2021> -- MAD fix #318.\nv<0.9.5>, <10/26/2021> -- Automatic histogram size selection for HBOS and LODA #321.\nv<0.9.5>, <10/27/2021> -- Add prediction confidence #349.\nv<0.9.6>, <11/05/2021> -- Minor bug fix for COPOD.\nv<0.9.6>, <12/24/2021> -- Bug fix for MAD (#358).\nv<0.9.6>, <12/24/2021> -- Bug fix for COPOD plotting (#337).\nv<0.9.6>, <12/24/2021> -- Model persistence doc improvement.\nv<0.9.7>, <01/03/2022> -- Add ECOD.\nv<0.9.8>, <02/23/2022> -- Add Feature Importance for iForest.\nv<0.9.8>, <03/05/2022> -- Update ECOD (TKDE 2022).\nv<0.9.9>, <03/20/2022> -- Renovate documentation.\nv<0.9.9>, <03/23/2022> -- Add example for COPOD interpretability.\nv<0.9.9>, <03/23/2022> -- Add outlier detection by Cook’s distances.\nv<0.9.9>, <04/04/2022> -- Various community fix.\nv<1.0.0>, <04/04/2022> -- Add KDE detector (#382).\nv<1.0.0>, <04/06/2022> -- Disable the bias term in DeepSVDD (#385).\nv<1.0.0>, <04/21/2022> -- Fix a set of issues of autoencoders (#313, #390, #391).\nv<1.0.0>, <04/23/2022> -- Add sampling based detector (#384).\nv<1.0.1>, <04/27/2022> -- Add INNE (#396).\nv<1.0.1>, <05/13/2022> -- Urgent fix for iForest (#406).\nv<1.0.2>, <06/21/2022> -- Add GMM detector (#402).\nv<1.0.2>, <06/23/2022> -- Add ADBench Benchmark.\nv<1.0.3>, <06/27/2022> -- Change default generation to new behaviors (#409).\nv<1.0.3>, <07/04/2022> -- Add AnoGAN (#412).\nv<1.0.4>, <07/29/2022> -- General improvement of code quality and test coverage.\nv<1.0.4>, <07/29/2022> -- Add LUNAR (#413).\nv<1.0.4>, <07/29/2022> -- Add LUNAR (#415).\nv<1.0.5>, <07/29/2022> -- Import optimization.\nv<1.0.5>, <08/27/2022> -- Code optimization.\nv<1.0.5>, <09/14/2022> -- Add ALAD.\nv<1.0.6>, <09/23/2022> -- Update ADBench benchmark for NeruIPS 2022.\nv<1.0.6>, <10/23/2022> -- ADD KPCA.\nv<1.0.7>, <12/14/2022> -- Enable automatic thresholding by pythresh (#454).\nv<1.0.8>, <03/08/2023> -- Improve clone compatibility (#471).\nv<1.0.8>, <03/08/2023> -- Add QMCD detector (#452).\nv<1.0.8>, <03/08/2023> -- Optimized ECDF and drop Statsmodels dependency (#467).\nv<1.0.9>, <03/19/2023> -- Hot fix for errors in ECOD and COPOD due to the issue of scipy.\nv<1.1.0>, <06/19/2023> -- Further integration of PyThresh.\nv<1.1.1>, <07/03/2023> -- Bump up sklearn requirement and some hot fixes.\nv<1.1.1>, <10/24/2023> -- Add deep isolation forest (#506).\nv<1.1.2>, <11/17/2023> -- Massive documentation optimization.\nv<1.1.2>, <11/17/2023> -- Fix the issue of contamination.\nv<1.1.2>, <11/17/2023> -- KPCA bug fix (#494).\nv<1.1.3>, <02/07/2024> -- Minor fix for SUOD changes.\nv<1.1.4>, <02/09/2024> -- Drop support of six for Python 2.\nv<1.1.4>, <03/16/2024> -- Fix documentation and temporarily restrict to Keras 2 in testing.\nv<2.0.0>, <05/21/2024> -- Moving from TF to Torch -- reimplement SO_GAAL.\nv<2.0.0>, <05/21/2024> -- Moving from TF to Torch -- implement dl base with more utilities.\nv<2.0.1>, <06/16/2024> -- Moving from TF to Torch -- reimplement DeepSVDD.\nv<2.0.1>, <06/17/2024> -- Moving from TF to Torch -- reimplement dl_base.\nv<2.0.1>, <06/21/2024> -- Moving from TF to Torch -- reimplement MO_GAAL.\nv<2.0.1>, <06/21/2024> -- Moving from TF to Torch -- reimplement AE and VAE.\nv<2.0.2>, <07/01/2024> -- Add AE1SVM.\nv<2.0.2>, <07/04/2024> -- Moving from TF to Torch -- reimplement ALAD.\nv<2.0.2>, <07/04/2024> -- Moving from TF to Torch -- reimplement anogan.\nv<2.0.2>, <07/06/2024> -- Complete of removing all Tensorflow and Keras code.\nv<2.0.2>, <07/21/2024> -- Add DevNet.\nv<2.0.3>, <09/06/2024> -- Add Reject Option in Unsupervised Anomaly Detection (#605).\nv<2.0.3>, <12/20/2024> -- Massive documentation polish."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2822265625,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2018, Yue Zhao\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.103515625,
          "content": "prune examples\nprune notebooks\nprune pyod/test\nprune README.md\ninclude README.rst\ninclude requirements.txt"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 1.076171875,
          "content": "### All Submissions Basics:\n\n* [ ] Have you followed the guidelines in our Contributing document?\n* [ ] Have you checked to ensure there aren't other open [Pull Requests](../../pulls) for the same update/change?\n* [ ] Have you checked all [Issues](../../issues) to tie the PR to a specific one?\n\n### All Submissions Cores:\n\n* [ ] Have you added an explanation of what your changes do and why you'd like us to include them?\n* [ ] Have you written new tests for your core changes, as applicable?\n* [ ] Have you successfully ran tests with your changes locally?\n* [ ] Does your submission pass tests, including CircleCI, Travis CI, and AppVeyor?\n* [ ] Does your submission have appropriate code coverage? The cutoff threshold is 95% by Coversall.\n\n<!-- You can erase any parts of this template not applicable to your Pull Request. -->\n\n### New Model Submissions:\n\n* [ ] Have you created a <NewModel>.py in ~/pyod/models/?\n* [ ] Have you created a <NewModel>_example.py in ~/examples/?\n* [ ] Have you created a test_<NewModel>.py in ~/pyod/test/?\n* [ ] Have you lint your code locally prior to submission?\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 43.005859375,
          "content": "Python Outlier Detection (PyOD) V2\n==================================\n\n**Deployment & Documentation & Stats & License**\n\n|badge_pypi| |badge_anaconda| |badge_docs| |badge_stars| |badge_forks| |badge_downloads| |badge_testing| |badge_coverage| |badge_maintainability| |badge_license| |badge_benchmark|\n\n.. |badge_pypi| image:: https://img.shields.io/pypi/v/pyod.svg?color=brightgreen\n   :target: https://pypi.org/project/pyod/\n   :alt: PyPI version\n\n.. |badge_anaconda| image:: https://anaconda.org/conda-forge/pyod/badges/version.svg\n   :target: https://anaconda.org/conda-forge/pyod\n   :alt: Anaconda version\n\n.. |badge_docs| image:: https://readthedocs.org/projects/pyod/badge/?version=latest\n   :target: https://pyod.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation status\n\n.. |badge_stars| image:: https://img.shields.io/github/stars/yzhao062/pyod.svg\n   :target: https://github.com/yzhao062/pyod/stargazers\n   :alt: GitHub stars\n\n.. |badge_forks| image:: https://img.shields.io/github/forks/yzhao062/pyod.svg?color=blue\n   :target: https://github.com/yzhao062/pyod/network\n   :alt: GitHub forks\n\n.. |badge_downloads| image:: https://pepy.tech/badge/pyod\n   :target: https://pepy.tech/project/pyod\n   :alt: Downloads\n\n.. |badge_testing| image:: https://github.com/yzhao062/pyod/actions/workflows/testing.yml/badge.svg\n   :target: https://github.com/yzhao062/pyod/actions/workflows/testing.yml\n   :alt: Testing\n\n\n.. |badge_coverage| image:: https://coveralls.io/repos/github/yzhao062/pyod/badge.svg\n   :target: https://coveralls.io/github/yzhao062/pyod\n   :alt: Coverage Status\n\n.. |badge_maintainability| image:: https://api.codeclimate.com/v1/badges/bdc3d8d0454274c753c4/maintainability\n   :target: https://codeclimate.com/github/yzhao062/Pyod/maintainability\n   :alt: Maintainability\n\n.. |badge_license| image:: https://img.shields.io/github/license/yzhao062/pyod.svg\n   :target: https://github.com/yzhao062/pyod/blob/master/LICENSE\n   :alt: License\n\n.. |badge_benchmark| image:: https://img.shields.io/badge/ADBench-benchmark_results-pink\n   :target: https://github.com/Minqi824/ADBench\n   :alt: Benchmark\n\n\n-----\n\n\nRead Me First\n^^^^^^^^^^^^^\n\nWelcome to PyOD, a well-developed and easy-to-use Python library for detecting anomalies in multivariate data. Whether you are working with a small-scale project or large datasets, PyOD provides a range of algorithms to fit your needs.\n\n**PyOD Version 2 is now available** (`Paper <https://www.arxiv.org/abs/2412.12154>`_) [#Chen2024PyOD]_, featuring:\n\n* **Expanded Deep Learning Support**: Integrates 12 modern neural models into a single PyTorch-based framework, bringing the total number of outlier detection methods to 45.\n* **Enhanced Performance and Ease of Use**: Models are optimized for efficiency and consistent performance across different datasets.\n* **LLM-based Model Selection**: Automated model selection guided by a large language model reduces manual tuning and assists users who may have limited experience with outlier detection.\n\n**Additional Resources**:\n\n* **NLP Anomaly Detection**: `NLP-ADBench <https://github.com/USC-FORTIS/NLP-ADBench>`_ provides both NLP anonaly detection datasets and algorithms\n* **Time-series Outlier Detection**: `TODS <https://github.com/datamllab/tods>`_\n* **Graph Outlier Detection**: `PyGOD <https://pygod.org/>`_\n* **Performance Comparison & Datasets**: Our 45-page `anomaly detection benchmark paper <https://openreview.net/forum?id=foA_SFQ9zo0>`_ and `ADBench <https://github.com/Minqi824/ADBench>`_, comparing 30 algorithms on 57 datasets\n* **PyOD on Distributed Systems**: `PyOD on Databricks <https://www.databricks.com/blog/2023/03/13/unsupervised-outlier-detection-databricks.html>`_\n* **Learn More**: `Anomaly Detection Resources <https://github.com/yzhao062/anomaly-detection-resources>`_\n\n**Check out our latest research in 2025 on LLM-based anomaly detection** [#Yang2024ad]_: `AD-LLM: Benchmarking Large Language Models for Anomaly Detection <https://arxiv.org/abs/2412.11142>`_.\n\n----\n\n\nAbout PyOD\n^^^^^^^^^^\n\nPyOD, established in 2017, has become a go-to **Python library** for **detecting anomalous/outlying objects** in multivariate data. This exciting yet challenging field is commonly referred to as `Outlier Detection <https://en.wikipedia.org/wiki/Anomaly_detection>`_ or `Anomaly Detection <https://en.wikipedia.org/wiki/Anomaly_detection>`_.\n\nPyOD includes more than 50 detection algorithms, from classical LOF (SIGMOD 2000) to the cutting-edge ECOD and DIF (TKDE 2022 and 2023). Since 2017, PyOD has been successfully used in numerous academic research projects and commercial products with more than `26 million downloads <https://pepy.tech/project/pyod>`_. It is also well acknowledged by the machine learning community with various dedicated posts/tutorials, including `Analytics Vidhya <https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/>`_, `KDnuggets <https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html>`_, and `Towards Data Science <https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1>`_.\n\n**PyOD is featured for**:\n\n* **Unified, User-Friendly Interface** across various algorithms.\n* **Wide Range of Models**, from classic techniques to the latest deep learning methods in **PyTorch**.\n* **High Performance & Efficiency**, leveraging `numba <https://github.com/numba/numba>`_ and `joblib <https://github.com/joblib/joblib>`_ for JIT compilation and parallel processing.\n* **Fast Training & Prediction**, achieved through the SUOD framework [#Zhao2021SUOD]_.\n\n**Outlier Detection with 5 Lines of Code**:\n\n.. code-block:: python\n\n    # Example: Training an ECOD detector\n    from pyod.models.ecod import ECOD\n    clf = ECOD()\n    clf.fit(X_train)\n    y_train_scores = clf.decision_scores_  # Outlier scores for training data\n    y_test_scores = clf.decision_function(X_test)  # Outlier scores for test data\n\n\n**Selecting the Right Algorithm:** Unsure where to start? Consider these robust and interpretable options:\n\n- `ECOD <https://github.com/yzhao062/pyod/blob/master/examples/ecod_example.py>`_: Example of using ECOD for outlier detection\n- `Isolation Forest <https://github.com/yzhao062/pyod/blob/master/examples/iforest_example.py>`_: Example of using Isolation Forest for outlier detection\n\nAlternatively, explore `MetaOD <https://github.com/yzhao062/MetaOD>`_ for a data-driven approach.\n\n**Citing PyOD**:\n\nIf you use PyOD in a scientific publication, we would appreciate citations to the following paper(s):\n\n`PyOD 2: A Python Library for Outlier Detection with LLM-powered Model Selection <https://arxiv.org/abs/2412.12154>`_ is available as a preprint. If you use PyOD in a scientific publication, we would appreciate citations to the following paper::\n\n    @article{zhao2024pyod2,\n        author  = {Chen, Sihan and Qian, Zhuangzhuang and Siu, Wingchun and Hu, Xingcan and Li, Jiaqi and Li, Shawn and Qin, Yuehan and Yang, Tiankai and Xiao, Zhuo and Ye, Wanghao and Zhang, Yichi and Dong, Yushun and Zhao, Yue},\n        title   = {PyOD 2: A Python Library for Outlier Detection with LLM-powered Model Selection},\n        journal = {arXiv preprint arXiv:2412.12154},\n        year    = {2024}\n    }\n\n`PyOD paper <http://www.jmlr.org/papers/volume20/19-011/19-011.pdf>`_ is published in `Journal of Machine Learning Research (JMLR) <http://www.jmlr.org/>`_ (MLOSS track).::\n\n    @article{zhao2019pyod,\n        author  = {Zhao, Yue and Nasrullah, Zain and Li, Zheng},\n        title   = {PyOD: A Python Toolbox for Scalable Outlier Detection},\n        journal = {Journal of Machine Learning Research},\n        year    = {2019},\n        volume  = {20},\n        number  = {96},\n        pages   = {1-7},\n        url     = {http://jmlr.org/papers/v20/19-011.html}\n    }\n\nor::\n\n    Zhao, Y., Nasrullah, Z. and Li, Z., 2019. PyOD: A Python Toolbox for Scalable Outlier Detection. Journal of machine learning research (JMLR), 20(96), pp.1-7.\n\n\nFor a broader perspective on anomaly detection, see our NeurIPS papers `ADBench: Anomaly Detection Benchmark Paper <https://arxiv.org/abs/2206.09426>`_ and `ADGym: Design Choices for Deep Anomaly Detection <https://arxiv.org/abs/2309.15376>`_::\n\n    @article{han2022adbench,\n        title={Adbench: Anomaly detection benchmark},\n        author={Han, Songqiao and Hu, Xiyang and Huang, Hailiang and Jiang, Minqi and Zhao, Yue},\n        journal={Advances in Neural Information Processing Systems},\n        volume={35},\n        pages={32142--32159},\n        year={2022}\n    }\n\n    @article{jiang2023adgym,\n        title={ADGym: Design Choices for Deep Anomaly Detection},\n        author={Jiang, Minqi and Hou, Chaochuan and Zheng, Ao and Han, Songqiao and Huang, Hailiang and Wen, Qingsong and Hu, Xiyang and Zhao, Yue},\n        journal={Advances in Neural Information Processing Systems},\n        volume={36},\n        year={2023}\n    }\n\n\n**Table of Contents**:\n\n* `Installation <#installation>`_\n* `API Cheatsheet & Reference <#api-cheatsheet--reference>`_\n* `ADBench Benchmark and Datasets <#adbench-benchmark-and-datasets>`_\n* `Model Save & Load <#model-save--load>`_\n* `Fast Train with SUOD <#fast-train-with-suod>`_\n* `Thresholding Outlier Scores <#thresholding-outlier-scores>`_\n* `Implemented Algorithms <#implemented-algorithms>`_\n* `Quick Start for Outlier Detection <#quick-start-for-outlier-detection>`_\n* `How to Contribute <#how-to-contribute>`_\n* `Inclusion Criteria <#inclusion-criteria>`_\n\n----\n\nInstallation\n^^^^^^^^^^^^\n\nPyOD is designed for easy installation using either **pip** or **conda**. We recommend using the latest version of PyOD due to frequent updates and enhancements:\n\n.. code-block:: bash\n\n   pip install pyod            # normal install\n   pip install --upgrade pyod  # or update if needed\n\n.. code-block:: bash\n\n   conda install -c conda-forge pyod\n\nAlternatively, you can clone and run the setup.py file:\n\n.. code-block:: bash\n\n   git clone https://github.com/yzhao062/pyod.git\n   cd pyod\n   pip install .\n\n**Required Dependencies**:\n\n* Python 3.8 or higher\n* joblib\n* matplotlib\n* numpy>=1.19\n* numba>=0.51\n* scipy>=1.5.1\n* scikit_learn>=0.22.0\n\n**Optional Dependencies (see details below)**:\n\n* combo (optional, required for models/combination.py and FeatureBagging)\n* pytorch (optional, required for AutoEncoder, and other deep learning models)\n* suod (optional, required for running SUOD model)\n* xgboost (optional, required for XGBOD)\n* pythresh (optional, required for thresholding)\n\n----\n\n\nAPI Cheatsheet & Reference\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe full API Reference is available at `PyOD Documentation <https://pyod.readthedocs.io/en/latest/pyod.html>`_. Below is a quick cheatsheet for all detectors:\n\n* **fit(X)**: Fit the detector. The parameter y is ignored in unsupervised methods.\n* **decision_function(X)**: Predict raw anomaly scores for X using the fitted detector.\n* **predict(X)**: Determine whether a sample is an outlier or not as binary labels using the fitted detector.\n* **predict_proba(X)**: Estimate the probability of a sample being an outlier using the fitted detector.\n* **predict_confidence(X)**: Assess the model's confidence on a per-sample basis (applicable in predict and predict_proba) [#Perini2020Quantifying]_.\n* **predict_with_rejection(X)**\\ : Allow the detector to reject (i.e., abstain from making) highly uncertain predictions (output = -2) [#Perini2023Rejection]_.\n\n**Key Attributes of a fitted model**:\n\n* **decision_scores_**: Outlier scores of the training data. Higher scores typically indicate more abnormal behavior. Outliers usually have higher scores.\n* **labels_**: Binary labels of the training data, where 0 indicates inliers and 1 indicates outliers/anomalies.\n\n\n----\n\n\nADBench Benchmark and Datasets\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWe just released a 45-page, the most comprehensive `ADBench: Anomaly Detection Benchmark <https://arxiv.org/abs/2206.09426>`_ [#Han2022ADBench]_.\nThe fully `open-sourced ADBench <https://github.com/Minqi824/ADBench>`_ compares 30 anomaly detection algorithms on 57 benchmark datasets.\n\nThe organization of **ADBench** is provided below:\n\n.. image:: https://github.com/Minqi824/ADBench/blob/main/figs/ADBench.png?raw=true\n   :target: https://github.com/Minqi824/ADBench/blob/main/figs/ADBench.png?raw=true\n   :alt: benchmark-fig\n\n\nFor a simpler visualization, we make **the comparison of selected models** via\n`compare_all_models.py <https://github.com/yzhao062/pyod/blob/master/examples/compare_all_models.py>`_\\.\n\n.. image:: https://github.com/yzhao062/pyod/blob/development/examples/ALL.png?raw=true\n   :target: https://github.com/yzhao062/pyod/blob/development/examples/ALL.png?raw=true\n   :alt: Comparison_of_All\n\n\n\n----\n\nModel Save & Load\n^^^^^^^^^^^^^^^^^\n\nPyOD takes a similar approach of sklearn regarding model persistence.\nSee `model persistence <https://scikit-learn.org/stable/modules/model_persistence.html>`_ for clarification.\n\nIn short, we recommend to use joblib or pickle for saving and loading PyOD models.\nSee `\"examples/save_load_model_example.py\" <https://github.com/yzhao062/pyod/blob/master/examples/save_load_model_example.py>`_ for an example.\nIn short, it is simple as below:\n\n.. code-block:: python\n\n    from joblib import dump, load\n\n    # save the model\n    dump(clf, 'clf.joblib')\n    # load the model\n    clf = load('clf.joblib')\n\nIt is known that there are challenges in saving neural network models.\nCheck `#328 <https://github.com/yzhao062/pyod/issues/328#issuecomment-917192704>`_\nand `#88 <https://github.com/yzhao062/pyod/issues/88#issuecomment-615343139>`_\nfor temporary workaround.\n\n\n----\n\n\nFast Train with SUOD\n^^^^^^^^^^^^^^^^^^^^\n\n**Fast training and prediction**: it is possible to train and predict with\na large number of detection models in PyOD by leveraging SUOD framework [#Zhao2021SUOD]_.\nSee  `SUOD Paper <https://www.andrew.cmu.edu/user/yuezhao2/papers/21-mlsys-suod.pdf>`_\nand  `SUOD example <https://github.com/yzhao062/pyod/blob/master/examples/suod_example.py>`_.\n\n\n.. code-block:: python\n\n    from pyod.models.suod import SUOD\n\n    # initialized a group of outlier detectors for acceleration\n    detector_list = [LOF(n_neighbors=15), LOF(n_neighbors=20),\n                     LOF(n_neighbors=25), LOF(n_neighbors=35),\n                     COPOD(), IForest(n_estimators=100),\n                     IForest(n_estimators=200)]\n\n    # decide the number of parallel process, and the combination method\n    # then clf can be used as any outlier detection model\n    clf = SUOD(base_estimators=detector_list, n_jobs=2, combination='average',\n               verbose=False)\n\n----\n\nThresholding Outlier Scores\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA more data-based approach can be taken when setting the contamination level. By using a thresholding method, guessing an arbitrary value can be replaced with tested techniques for separating inliers and outliers. Refer to `PyThresh <https://github.com/KulikDM/pythresh>`_ for a more in-depth look at thresholding.\n\n.. code-block:: python\n\n    from pyod.models.knn import KNN\n    from pyod.models.thresholds import FILTER\n\n    # Set the outlier detection and thresholding methods\n    clf = KNN(contamination=FILTER())\n\n\nSee supported thresholding methods in `thresholding <https://github.com/yzhao062/pyod/blob/master/docs/thresholding.rst>`_.\n\n----\n\n\n\nImplemented Algorithms\n^^^^^^^^^^^^^^^^^^^^^^\n\nPyOD toolkit consists of four major functional groups:\n\n**(i) Individual Detection Algorithms** :\n\n===================  ==================  ======================================================================================================  =====  ========================================\nType                 Abbr                Algorithm                                                                                               Year   Ref\n===================  ==================  ======================================================================================================  =====  ========================================\nProbabilistic        ECOD                Unsupervised Outlier Detection Using Empirical Cumulative Distribution Functions                        2022   [#Li2021ECOD]_\nProbabilistic        ABOD                Angle-Based Outlier Detection                                                                           2008   [#Kriegel2008Angle]_\nProbabilistic        FastABOD            Fast Angle-Based Outlier Detection using approximation                                                  2008   [#Kriegel2008Angle]_\nProbabilistic        COPOD               COPOD: Copula-Based Outlier Detection                                                                   2020   [#Li2020COPOD]_\nProbabilistic        MAD                 Median Absolute Deviation (MAD)                                                                         1993   [#Iglewicz1993How]_\nProbabilistic        SOS                 Stochastic Outlier Selection                                                                            2012   [#Janssens2012Stochastic]_\nProbabilistic        QMCD                Quasi-Monte Carlo Discrepancy outlier detection                                                         2001   [#Fang2001Wrap]_\nProbabilistic        KDE                 Outlier Detection with Kernel Density Functions                                                         2007   [#Latecki2007Outlier]_\nProbabilistic        Sampling            Rapid distance-based outlier detection via sampling                                                     2013   [#Sugiyama2013Rapid]_\nProbabilistic        GMM                 Probabilistic Mixture Modeling for Outlier Analysis                                                            [#Aggarwal2015Outlier]_ [Ch.2]\nLinear Model         PCA                 Principal Component Analysis (the sum of weighted projected distances to the eigenvector hyperplanes)   2003   [#Shyu2003A]_\nLinear Model         KPCA                Kernel Principal Component Analysis                                                                     2007   [#Hoffmann2007Kernel]_\nLinear Model         MCD                 Minimum Covariance Determinant (use the mahalanobis distances as the outlier scores)                    1999   [#Hardin2004Outlier]_ [#Rousseeuw1999A]_\nLinear Model         CD                  Use Cook's distance for outlier detection                                                               1977   [#Cook1977Detection]_\nLinear Model         OCSVM               One-Class Support Vector Machines                                                                       2001   [#Scholkopf2001Estimating]_\nLinear Model         LMDD                Deviation-based Outlier Detection (LMDD)                                                                1996   [#Arning1996A]_\nProximity-Based      LOF                 Local Outlier Factor                                                                                    2000   [#Breunig2000LOF]_\nProximity-Based      COF                 Connectivity-Based Outlier Factor                                                                       2002   [#Tang2002Enhancing]_\nProximity-Based      (Incremental) COF   Memory Efficient Connectivity-Based Outlier Factor (slower but reduce storage complexity)               2002   [#Tang2002Enhancing]_\nProximity-Based      CBLOF               Clustering-Based Local Outlier Factor                                                                   2003   [#He2003Discovering]_\nProximity-Based      LOCI                LOCI: Fast outlier detection using the local correlation integral                                       2003   [#Papadimitriou2003LOCI]_\nProximity-Based      HBOS                Histogram-based Outlier Score                                                                           2012   [#Goldstein2012Histogram]_\nProximity-Based      kNN                 k Nearest Neighbors (use the distance to the kth nearest neighbor as the outlier score)                 2000   [#Ramaswamy2000Efficient]_\nProximity-Based      AvgKNN              Average kNN (use the average distance to k nearest neighbors as the outlier score)                      2002   [#Angiulli2002Fast]_\nProximity-Based      MedKNN              Median kNN (use the median distance to k nearest neighbors as the outlier score)                        2002   [#Angiulli2002Fast]_\nProximity-Based      SOD                 Subspace Outlier Detection                                                                              2009   [#Kriegel2009Outlier]_\nProximity-Based      ROD                 Rotation-based Outlier Detection                                                                        2020   [#Almardeny2020A]_\nOutlier Ensembles    IForest             Isolation Forest                                                                                        2008   [#Liu2008Isolation]_\nOutlier Ensembles    INNE                Isolation-based Anomaly Detection Using Nearest-Neighbor Ensembles                                      2018   [#Bandaragoda2018Isolation]_\nOutlier Ensembles    DIF                 Deep Isolation Forest for Anomaly Detection                                                             2023   [#Xu2023Deep]_\nOutlier Ensembles    FB                  Feature Bagging                                                                                         2005   [#Lazarevic2005Feature]_\nOutlier Ensembles    LSCP                LSCP: Locally Selective Combination of Parallel Outlier Ensembles                                       2019   [#Zhao2019LSCP]_\nOutlier Ensembles    XGBOD               Extreme Boosting Based Outlier Detection **(Supervised)**                                               2018   [#Zhao2018XGBOD]_\nOutlier Ensembles    LODA                Lightweight On-line Detector of Anomalies                                                               2016   [#Pevny2016Loda]_\nOutlier Ensembles    SUOD                SUOD: Accelerating Large-scale Unsupervised Heterogeneous Outlier Detection **(Acceleration)**          2021   [#Zhao2021SUOD]_\nNeural Networks      AutoEncoder         Fully connected AutoEncoder (use reconstruction error as the outlier score)                                    [#Aggarwal2015Outlier]_ [Ch.3]\nNeural Networks      VAE                 Variational AutoEncoder (use reconstruction error as the outlier score)                                 2013   [#Kingma2013Auto]_\nNeural Networks      Beta-VAE            Variational AutoEncoder (all customized loss term by varying gamma and capacity)                        2018   [#Burgess2018Understanding]_\nNeural Networks      SO_GAAL             Single-Objective Generative Adversarial Active Learning                                                 2019   [#Liu2019Generative]_\nNeural Networks      MO_GAAL             Multiple-Objective Generative Adversarial Active Learning                                               2019   [#Liu2019Generative]_\nNeural Networks      DeepSVDD            Deep One-Class Classification                                                                           2018   [#Ruff2018Deep]_\nNeural Networks      AnoGAN              Anomaly Detection with Generative Adversarial Networks                                                  2017   [#Schlegl2017Unsupervised]_\nNeural Networks      ALAD                Adversarially learned anomaly detection                                                                 2018   [#Zenati2018Adversarially]_\nNeural Networks      AE1SVM              Autoencoder-based One-class Support Vector Machine                                                      2019   [#Nguyen2019scalable]_\nNeural Networks      DevNet              Deep Anomaly Detection with Deviation Networks                                                          2019   [#Pang2019Deep]_\nGraph-based          R-Graph             Outlier detection by R-graph                                                                            2017   [#You2017Provable]_\nGraph-based          LUNAR               LUNAR: Unifying Local Outlier Detection Methods via Graph Neural Networks                               2022   [#Goodge2022Lunar]_\n===================  ==================  ======================================================================================================  =====  ========================================\n\n\n**(ii) Outlier Ensembles & Outlier Detector Combination Frameworks**:\n\n===================  ================  =====================================================================================================  =====  ========================================\nType                 Abbr              Algorithm                                                                                              Year   Ref\n===================  ================  =====================================================================================================  =====  ========================================\nOutlier Ensembles    FB                Feature Bagging                                                                                        2005   [#Lazarevic2005Feature]_\nOutlier Ensembles    LSCP              LSCP: Locally Selective Combination of Parallel Outlier Ensembles                                      2019   [#Zhao2019LSCP]_\nOutlier Ensembles    XGBOD             Extreme Boosting Based Outlier Detection **(Supervised)**                                              2018   [#Zhao2018XGBOD]_\nOutlier Ensembles    LODA              Lightweight On-line Detector of Anomalies                                                              2016   [#Pevny2016Loda]_\nOutlier Ensembles    SUOD              SUOD: Accelerating Large-scale Unsupervised Heterogeneous Outlier Detection **(Acceleration)**         2021   [#Zhao2021SUOD]_\nOutlier Ensembles    INNE              Isolation-based Anomaly Detection Using Nearest-Neighbor Ensembles                                     2018   [#Bandaragoda2018Isolation]_\nCombination          Average           Simple combination by averaging the scores                                                             2015   [#Aggarwal2015Theoretical]_\nCombination          Weighted Average  Simple combination by averaging the scores with detector weights                                       2015   [#Aggarwal2015Theoretical]_\nCombination          Maximization      Simple combination by taking the maximum scores                                                        2015   [#Aggarwal2015Theoretical]_\nCombination          AOM               Average of Maximum                                                                                     2015   [#Aggarwal2015Theoretical]_\nCombination          MOA               Maximization of Average                                                                                2015   [#Aggarwal2015Theoretical]_\nCombination          Median            Simple combination by taking the median of the scores                                                  2015   [#Aggarwal2015Theoretical]_\nCombination          majority Vote     Simple combination by taking the majority vote of the labels (weights can be used)                     2015   [#Aggarwal2015Theoretical]_\n===================  ================  =====================================================================================================  =====  ========================================\n\n\n**(iii) Utility Functions**:\n\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\nType                 Name                    Function                                                                                                                                               Documentation\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\nData                 generate_data           Synthesized data generation; normal data is generated by a multivariate Gaussian and outliers are generated by a uniform distribution                  `generate_data <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.data.generate_data>`_\nData                 generate_data_clusters  Synthesized data generation in clusters; more complex data patterns can be created with multiple clusters                                              `generate_data_clusters <https://pyod.readthedocs.io/en/latest/pyod.utils.html#pyod.utils.data.generate_data_clusters>`_\nStat                 wpearsonr               Calculate the weighted Pearson correlation of two samples                                                                                              `wpearsonr <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.stat_models.wpearsonr>`_\nUtility              get_label_n             Turn raw outlier scores into binary labels by assign 1 to top n outlier scores                                                                         `get_label_n <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.get_label_n>`_\nUtility              precision_n_scores      calculate precision @ rank n                                                                                                                           `precision_n_scores <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.precision_n_scores>`_\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\n\n----\n\nQuick Start for Outlier Detection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPyOD has been well acknowledged by the machine learning community with a few featured posts and tutorials.\n\n**Analytics Vidhya**: `An Awesome Tutorial to Learn Outlier Detection in Python using PyOD Library <https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/>`_\n\n**KDnuggets**: `Intuitive Visualization of Outlier Detection Methods <https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html>`_, `An Overview of Outlier Detection Methods from PyOD <https://www.kdnuggets.com/2019/06/overview-outlier-detection-methods-pyod.html>`_\n\n**Towards Data Science**: `Anomaly Detection for Dummies <https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1>`_\n\n`\"examples/knn_example.py\" <https://github.com/yzhao062/pyod/blob/master/examples/knn_example.py>`_\ndemonstrates the basic API of using kNN detector. **It is noted that the API across all other algorithms are consistent/similar**.\n\nMore detailed instructions for running examples can be found in `examples directory <https://github.com/yzhao062/pyod/blob/master/examples>`_.\n\n\n#. Initialize a kNN detector, fit the model, and make the prediction.\n\n   .. code-block:: python\n\n\n       from pyod.models.knn import KNN   # kNN detector\n\n       # train kNN detector\n       clf_name = 'KNN'\n       clf = KNN()\n       clf.fit(X_train)\n\n       # get the prediction label and outlier scores of the training data\n       y_train_pred = clf.labels_  # binary labels (0: inliers, 1: outliers)\n       y_train_scores = clf.decision_scores_  # raw outlier scores\n\n       # get the prediction on the test data\n       y_test_pred = clf.predict(X_test)  # outlier labels (0 or 1)\n       y_test_scores = clf.decision_function(X_test)  # outlier scores\n\n       # it is possible to get the prediction confidence as well\n       y_test_pred, y_test_pred_confidence = clf.predict(X_test, return_confidence=True)  # outlier labels (0 or 1) and confidence in the range of [0,1]\n\n#. Evaluate the prediction by ROC and Precision @ Rank n (p@n).\n\n   .. code-block:: python\n\n       from pyod.utils.data import evaluate_print\n       \n       # evaluate and print the results\n       print(\"\\nOn Training Data:\")\n       evaluate_print(clf_name, y_train, y_train_scores)\n       print(\"\\nOn Test Data:\")\n       evaluate_print(clf_name, y_test, y_test_scores)\n\n\n#. See a sample output & visualization.\n\n\n   .. code-block:: python\n\n\n       On Training Data:\n       KNN ROC:1.0, precision @ rank n:1.0\n\n       On Test Data:\n       KNN ROC:0.9989, precision @ rank n:0.9\n\n   .. code-block:: python\n\n\n       visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred,\n           y_test_pred, show_figure=True, save_figure=False)\n\nVisualization (\\ `knn_figure <https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png>`_\\ ):\n\n.. image:: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png\n   :target: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png\n   :alt: kNN example figure\n\n----\n\nReference\n^^^^^^^^^\n\n\n.. [#Aggarwal2015Outlier] Aggarwal, C.C., 2015. Outlier analysis. In Data mining (pp. 237-263). Springer, Cham.\n\n.. [#Aggarwal2015Theoretical] Aggarwal, C.C. and Sathe, S., 2015. Theoretical foundations and algorithms for outlier ensembles.\\ *ACM SIGKDD Explorations Newsletter*\\ , 17(1), pp.24-47.\n\n.. [#Aggarwal2017Outlier] Aggarwal, C.C. and Sathe, S., 2017. Outlier ensembles: An introduction. Springer.\n\n.. [#Almardeny2020A] Almardeny, Y., Boujnah, N. and Cleary, F., 2020. A Novel Outlier Detection Method for Multivariate Data. *IEEE Transactions on Knowledge and Data Engineering*.\n\n.. [#Angiulli2002Fast] Angiulli, F. and Pizzuti, C., 2002, August. Fast outlier detection in high dimensional spaces. In *European Conference on Principles of Data Mining and Knowledge Discovery* pp. 15-27.\n\n.. [#Arning1996A] Arning, A., Agrawal, R. and Raghavan, P., 1996, August. A Linear Method for Deviation Detection in Large Databases. In *KDD* (Vol. 1141, No. 50, pp. 972-981).\n\n.. [#Bandaragoda2018Isolation] Bandaragoda, T. R., Ting, K. M., Albrecht, D., Liu, F. T., Zhu, Y., and Wells, J. R., 2018, Isolation-based anomaly detection using nearest-neighbor ensembles. *Computational Intelligence*\\ , 34(4), pp. 968-998.\n\n.. [#Breunig2000LOF] Breunig, M.M., Kriegel, H.P., Ng, R.T. and Sander, J., 2000, May. LOF: identifying density-based local outliers. *ACM Sigmod Record*\\ , 29(2), pp. 93-104.\n\n.. [#Burgess2018Understanding] Burgess, Christopher P., et al. \"Understanding disentangling in beta-VAE.\" arXiv preprint arXiv:1804.03599 (2018).\n\n.. [#Cook1977Detection] Cook, R.D., 1977. Detection of influential observation in linear regression. Technometrics, 19(1), pp.15-18.\n\n.. [#Chen2024PyOD] Chen, S., Qian, Z., Siu, W., Hu, X., Li, J., Li, S., Qin, Y., Yang, T., Xiao, Z., Ye, W. and Zhang, Y., 2024. PyOD 2: A Python Library for Outlier Detection with LLM-powered Model Selection. arXiv preprint arXiv:2412.12154.\n\n.. [#Fang2001Wrap] Fang, K.T. and Ma, C.X., 2001. Wrap-around L2-discrepancy of random sampling, Latin hypercube and uniform designs. Journal of complexity, 17(4), pp.608-624.\n\n.. [#Goldstein2012Histogram] Goldstein, M. and Dengel, A., 2012. Histogram-based outlier score (hbos): A fast unsupervised anomaly detection algorithm. In *KI-2012: Poster and Demo Track*\\ , pp.59-63.\n\n.. [#Goodge2022Lunar] Goodge, A., Hooi, B., Ng, S.K. and Ng, W.S., 2022, June. Lunar: Unifying local outlier detection methods via graph neural networks. In Proceedings of the AAAI Conference on Artificial Intelligence.\n\n.. [#Gopalan2019PIDForest] Gopalan, P., Sharan, V. and Wieder, U., 2019. PIDForest: Anomaly Detection via Partial Identification. In Advances in Neural Information Processing Systems, pp. 15783-15793.\n\n.. [#Han2022ADBench] Han, S., Hu, X., Huang, H., Jiang, M. and Zhao, Y., 2022. ADBench: Anomaly Detection Benchmark. arXiv preprint arXiv:2206.09426.\n\n.. [#Hardin2004Outlier] Hardin, J. and Rocke, D.M., 2004. Outlier detection in the multiple cluster setting using the minimum covariance determinant estimator. *Computational Statistics & Data Analysis*\\ , 44(4), pp.625-638.\n\n.. [#He2003Discovering] He, Z., Xu, X. and Deng, S., 2003. Discovering cluster-based local outliers. *Pattern Recognition Letters*\\ , 24(9-10), pp.1641-1650.\n\n.. [#Hoffmann2007Kernel] Hoffmann, H., 2007. Kernel PCA for novelty detection. Pattern recognition, 40(3), pp.863-874.\n\n.. [#Iglewicz1993How] Iglewicz, B. and Hoaglin, D.C., 1993. How to detect and handle outliers (Vol. 16). Asq Press.\n\n.. [#Janssens2012Stochastic] Janssens, J.H.M., Huszár, F., Postma, E.O. and van den Herik, H.J., 2012. Stochastic outlier selection. Technical report TiCC TR 2012-001, Tilburg University, Tilburg Center for Cognition and Communication, Tilburg, The Netherlands.\n\n.. [#Kingma2013Auto] Kingma, D.P. and Welling, M., 2013. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114.\n\n.. [#Kriegel2008Angle] Kriegel, H.P. and Zimek, A., 2008, August. Angle-based outlier detection in high-dimensional data. In *KDD '08*\\ , pp. 444-452. ACM.\n\n.. [#Kriegel2009Outlier] Kriegel, H.P., Kröger, P., Schubert, E. and Zimek, A., 2009, April. Outlier detection in axis-parallel subspaces of high dimensional data. In *Pacific-Asia Conference on Knowledge Discovery and Data Mining*\\ , pp. 831-838. Springer, Berlin, Heidelberg.\n\n.. [#Latecki2007Outlier] Latecki, L.J., Lazarevic, A. and Pokrajac, D., 2007, July. Outlier detection with kernel density functions. In International Workshop on Machine Learning and Data Mining in Pattern Recognition (pp. 61-75). Springer, Berlin, Heidelberg.\n\n.. [#Lazarevic2005Feature] Lazarevic, A. and Kumar, V., 2005, August. Feature bagging for outlier detection. In *KDD '05*. 2005.\n\n.. [#Li2019MADGAN] Li, D., Chen, D., Jin, B., Shi, L., Goh, J. and Ng, S.K., 2019, September. MAD-GAN: Multivariate anomaly detection for time series data with generative adversarial networks. In *International Conference on Artificial Neural Networks* (pp. 703-716). Springer, Cham.\n\n.. [#Li2020COPOD] Li, Z., Zhao, Y., Botta, N., Ionescu, C. and Hu, X. COPOD: Copula-Based Outlier Detection. *IEEE International Conference on Data Mining (ICDM)*, 2020.\n\n.. [#Li2021ECOD] Li, Z., Zhao, Y., Hu, X., Botta, N., Ionescu, C. and Chen, H. G. ECOD: Unsupervised Outlier Detection Using Empirical Cumulative Distribution Functions. *IEEE Transactions on Knowledge and Data Engineering (TKDE)*, 2022.\n\n.. [#Liu2008Isolation] Liu, F.T., Ting, K.M. and Zhou, Z.H., 2008, December. Isolation forest. In *International Conference on Data Mining*\\ , pp. 413-422. IEEE.\n\n.. [#Liu2019Generative] Liu, Y., Li, Z., Zhou, C., Jiang, Y., Sun, J., Wang, M. and He, X., 2019. Generative adversarial active learning for unsupervised outlier detection. *IEEE Transactions on Knowledge and Data Engineering*.\n\n.. [#Nguyen2019scalable] Nguyen, M.N. and Vien, N.A., 2019. Scalable and interpretable one-class svms with deep learning and random fourier features. In *Machine Learning and Knowledge Discovery in Databases: European Conference*, ECML PKDD, 2018.\n\n.. [#Pang2019Deep] Pang, Guansong, Chunhua Shen, and Anton Van Den Hengel. \"Deep anomaly detection with deviation networks.\" In *KDD*, pp. 353-362. 2019.\n\n.. [#Papadimitriou2003LOCI] Papadimitriou, S., Kitagawa, H., Gibbons, P.B. and Faloutsos, C., 2003, March. LOCI: Fast outlier detection using the local correlation integral. In *ICDE '03*, pp. 315-326. IEEE.\n\n.. [#Pevny2016Loda] Pevný, T., 2016. Loda: Lightweight on-line detector of anomalies. *Machine Learning*, 102(2), pp.275-304.\n\n.. [#Perini2020Quantifying] Perini, L., Vercruyssen, V., Davis, J. Quantifying the confidence of anomaly detectors in their example-wise predictions. In *Joint European Conference on Machine Learning and Knowledge Discovery in Databases (ECML-PKDD)*, 2020.\n\n.. [#Perini2023Rejection] Perini, L., Davis, J. Unsupervised anomaly detection with rejection. In *Proceedings of the Thirty-Seven Conference on Neural Information Processing Systems (NeurIPS)*, 2023.\n\n.. [#Ramaswamy2000Efficient] Ramaswamy, S., Rastogi, R. and Shim, K., 2000, May. Efficient algorithms for mining outliers from large data sets. *ACM Sigmod Record*\\ , 29(2), pp. 427-438.\n\n.. [#Rousseeuw1999A] Rousseeuw, P.J. and Driessen, K.V., 1999. A fast algorithm for the minimum covariance determinant estimator. *Technometrics*\\ , 41(3), pp.212-223.\n\n.. [#Ruff2018Deep] Ruff, L., Vandermeulen, R., Goernitz, N., Deecke, L., Siddiqui, S.A., Binder, A., Müller, E. and Kloft, M., 2018, July. Deep one-class classification. In *International conference on machine learning* (pp. 4393-4402). PMLR.\n\n.. [#Schlegl2017Unsupervised] Schlegl, T., Seeböck, P., Waldstein, S.M., Schmidt-Erfurth, U. and Langs, G., 2017, June. Unsupervised anomaly detection with generative adversarial networks to guide marker discovery. In International conference on information processing in medical imaging (pp. 146-157). Springer, Cham.\n\n.. [#Scholkopf2001Estimating] Scholkopf, B., Platt, J.C., Shawe-Taylor, J., Smola, A.J. and Williamson, R.C., 2001. Estimating the support of a high-dimensional distribution. *Neural Computation*, 13(7), pp.1443-1471.\n\n.. [#Shyu2003A] Shyu, M.L., Chen, S.C., Sarinnapakorn, K. and Chang, L., 2003. A novel anomaly detection scheme based on principal component classifier. *MIAMI UNIV CORAL GABLES FL DEPT OF ELECTRICAL AND COMPUTER ENGINEERING*.\n\n.. [#Sugiyama2013Rapid] Sugiyama, M. and Borgwardt, K., 2013. Rapid distance-based outlier detection via sampling. Advances in neural information processing systems, 26.\n\n.. [#Tang2002Enhancing] Tang, J., Chen, Z., Fu, A.W.C. and Cheung, D.W., 2002, May. Enhancing effectiveness of outlier detections for low density patterns. In *Pacific-Asia Conference on Knowledge Discovery and Data Mining*, pp. 535-548. Springer, Berlin, Heidelberg.\n\n.. [#Wang2020adVAE] Wang, X., Du, Y., Lin, S., Cui, P., Shen, Y. and Yang, Y., 2019. adVAE: A self-adversarial variational autoencoder with Gaussian anomaly prior knowledge for anomaly detection. *Knowledge-Based Systems*.\n\n.. [#Xu2023Deep] Xu, H., Pang, G., Wang, Y., Wang, Y., 2023. Deep isolation forest for anomaly detection. *IEEE Transactions on Knowledge and Data Engineering*.\n\n.. [#Yang2024ad] Yang, T., Nian, Y., Li, S., Xu, R., Li, Y., Li, J., Xiao, Z., Hu, X., Rossi, R., Ding, K. and Hu, X., 2024. AD-LLM: Benchmarking Large Language Models for Anomaly Detection. arXiv preprint arXiv:2412.11142.\n\n.. [#You2017Provable] You, C., Robinson, D.P. and Vidal, R., 2017. Provable self-representation based outlier detection in a union of subspaces. In Proceedings of the IEEE conference on computer vision and pattern recognition.\n\n.. [#Zenati2018Adversarially] Zenati, H., Romain, M., Foo, C.S., Lecouat, B. and Chandrasekhar, V., 2018, November. Adversarially learned anomaly detection. In 2018 IEEE International conference on data mining (ICDM) (pp. 727-736). IEEE.\n\n.. [#Zhao2018XGBOD] Zhao, Y. and Hryniewicki, M.K. XGBOD: Improving Supervised Outlier Detection with Unsupervised Representation Learning. *IEEE International Joint Conference on Neural Networks*\\ , 2018.\n\n.. [#Zhao2019LSCP] Zhao, Y., Nasrullah, Z., Hryniewicki, M.K. and Li, Z., 2019, May. LSCP: Locally selective combination in parallel outlier ensembles. In *Proceedings of the 2019 SIAM International Conference on Data Mining (SDM)*, pp. 585-593. Society for Industrial and Applied Mathematics.\n\n.. [#Zhao2021SUOD] Zhao, Y., Hu, X., Cheng, C., Wang, C., Wan, C., Wang, W., Yang, J., Bai, H., Li, Z., Xiao, C., Wang, Y., Qiao, Z., Sun, J. and Akoglu, L. (2021). SUOD: Accelerating Large-scale Unsupervised Heterogeneous Outlier Detection. *Conference on Machine Learning and Systems (MLSys)*.\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 0.130859375,
          "content": "1. ECOD parallelization and interpretability\n2. Add latest deep learning algorithms.\n3. finish the wrapping for cook distance detector"
        },
        {
          "name": "Threshold.rst",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyod",
          "type": "tree",
          "content": null
        },
        {
          "name": "pypi_build_commands.txt",
          "type": "blob",
          "size": 0.8046875,
          "content": "# This is a command list for building pypi packages\n\npython setup.py sdist\ntwine check dist/*\n\n# docstring check\npytest --doctest-modules pyod/\n\ntwine upload --repository pypitest dist/*\n# https://test.pypi.org/project/pyod/\n\ntwine upload dist/*\n\nhttps://pypi.org/project/pyod/\n\n\n#######################################################\n# For newly added models, conduct the following checks:\n\n1. check the license, author information, and imports\n2. read the algorithm introduction and citation\n3. check the parameter order and correctness\n4. check comment formats\n5. make sure the test run locally (roc floor)\n6. make sure the example look consistent\n7. add algorithm to pyod.model.rst\n8. add algorithm to index.rst and README.rst\n9. add to benchmark.py and compare_all_models.py; when applicable, change notebooks as well\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0732421875,
          "content": "joblib\nmatplotlib\nnumpy>=1.19\nnumba>=0.51\nscipy>=1.5.1\nscikit-learn>=0.22.0"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.rst"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.02734375,
          "content": "from setuptools import find_packages, setup\n\n# read the contents of README file\nfrom os import path\nfrom io import open  # for Python 2 and 3 compatibility\n\n# get __version__ from _version.py\nver_file = path.join('pyod', 'version.py')\nwith open(ver_file) as f:\n    exec(f.read())\n\nthis_directory = path.abspath(path.dirname(__file__))\n\n\n# read the contents of README.rst\ndef readme():\n    with open(path.join(this_directory, 'README.rst'), encoding='utf-8') as f:\n        return f.read()\n\n\n# read the contents of requirements.txt\nwith open(path.join(this_directory, 'requirements.txt'),\n          encoding='utf-8') as f:\n    requirements = f.read().splitlines()\n\nsetup(\n    name='pyod',\n    version=__version__,\n    description='A Comprehensive and Scalable Python Library for Outlier Detection (Anomaly Detection)',\n    long_description=readme(),\n    long_description_content_type='text/x-rst',\n    author='Yue Zhao',\n    author_email='yzhao062@gmail.com',\n    url='https://github.com/yzhao062/pyod',\n    download_url='https://github.com/yzhao062/pyod/archive/master.zip',\n    keywords=['outlier detection', 'anomaly detection', 'outlier ensembles',\n              'data mining', 'neural networks'],\n    packages=find_packages(exclude=['test']),\n    include_package_data=True,\n    install_requires=requirements,\n    setup_requires=['setuptools>=38.6.0'],\n    classifiers=[\n        'Development Status :: 6 - Mature',\n        'Intended Audience :: Education',\n        'Intended Audience :: Financial and Insurance Industry',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Information Technology',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n    ],\n)\n"
        },
        {
          "name": "temp_text.txt",
          "type": "blob",
          "size": 7.6484375,
          "content": "**Note on Python 2.7**\\ :\nThe maintenance of Python 2.7 will be stopped by January 1, 2020 (see `official announcement <https://github.com/python/devguide/pull/344>`_).\nTo be consistent with the Python change and PyOD's dependent libraries, e.g., scikit-learn, we will\nstop supporting Python 2.7 in the near future (dates are still to be decided). We encourage you to use\nPython 3.5 or newer for the latest functions and bug fixes. More information can\nbe found at `Moving to require Python 3 <https://python3statement.org/>`_.\n\n**Note on Python 2.7**\\ :\nThe maintenance of Python 2.7 will be stopped by January 1, 2020 (see `official announcement <https://github.com/python/devguide/pull/344>`_)\nTo be consistent with the Python change and PyOD's dependent libraries, e.g., scikit-learn, we will\nstop supporting Python 2.7 in the near future (dates are still to be decided). We encourage you to use\nPython 3.5 or newer for the latest functions and bug fixes. More information can\nbe found at `Moving to require Python 3 <https://python3statement.org/>`_.\n\n**Warning 2**\\ :\nRunning examples needs **matplotlib**, which may throw errors in conda\nvirtual environment on mac OS. See reasons and solutions `mac_matplotlib <https://github.com/yzhao062/pyod/issues/6>`_.\n\n\n.. image:: https://ci.appveyor.com/api/projects/status/1kupdy87etks5n3r/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/yzhao062/pyod/branch/master\n   :alt: Build status\n\n.. image:: https://circleci.com/gh/yzhao062/pyod.svg?style=svg\n   :target: https://circleci.com/gh/yzhao062/pyod\n   :alt: Circle CI\n\n.. image:: https://img.shields.io/badge/slack-join-green\n   :target: https://join.slack.com/t/pyod/shared_invite/zt-vprc4w2q-G2XV2Iou~H84yGSvrh0f6A\n   :alt: slack\n\n.. image:: https://pepy.tech/badge/pyod/month\n   :target: https://pepy.tech/project/pyod\n   :alt: Downloads\n\n.. image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/yzhao062/pyod/master\n   :alt: Binder\n\n-----\n\n**Build Status & Coverage & Maintainability & License**\n\n\n----\n\nQuick Start for Combining Outlier Scores from Various Base Detectors\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOutlier detection often suffers from model instability due to its unsupervised\nnature. Thus, it is recommended to combine various detector outputs, e.g., by averaging,\nto improve its robustness. Detector combination is a subfield of outlier ensembles;\nrefer [#Aggarwal2017Outlier]_ for more information.\n\n\nFour score combination mechanisms are shown in this demo:\n\n\n#. **Average**: average scores of all detectors.\n#. **maximization**: maximum score across all detectors.\n#. **Average of Maximum (AOM)**: divide base detectors into subgroups and take the maximum score for each subgroup. The final score is the average of all subgroup scores.\n#. **Maximum of Average (MOA)**: divide base detectors into subgroups and take the average score for each subgroup. The final score is the maximum of all subgroup scores.\n\n\n\"examples/comb_example.py\" illustrates the API for combining the output of multiple base detectors\n(\\ `comb_example.py <https://github.com/yzhao062/pyod/blob/master/examples/comb_example.py>`_\\ ,\n`Jupyter Notebooks <https://mybinder.org/v2/gh/yzhao062/pyod/master>`_\\ ). For Jupyter Notebooks,\nplease navigate to **\"/notebooks/Model Combination.ipynb\"**\n\n\n#. Import models and generate sample data.\n\n   .. code-block:: python\n\n       from pyod.models.knn import KNN\n       from pyod.models.combination import aom, moa, average, maximization\n       from pyod.utils.data import generate_data\n\n       X, y = generate_data(train_only=True)  # load data\n\n#. First initialize 20 kNN outlier detectors with different k (10 to 200), and get the outlier scores.\n\n   .. code-block:: python\n\n       # initialize 20 base detectors for combination\n       k_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,\n                   150, 160, 170, 180, 190, 200]\n\n       train_scores = np.zeros([X_train.shape[0], n_clf])\n       test_scores = np.zeros([X_test.shape[0], n_clf])\n\n       for i in range(n_clf):\n           k = k_list[i]\n\n           clf = KNN(n_neighbors=k, method='largest')\n           clf.fit(X_train_norm)\n\n           train_scores[:, i] = clf.decision_scores_\n           test_scores[:, i] = clf.decision_function(X_test_norm)\n\n#. Then the output scores are standardized into zero mean and unit variance before combination.\n   This step is crucial to adjust the detector outputs to the same scale.\n\n\n   .. code-block:: python\n\n       from pyod.utils.utility import standardizer\n       train_scores_norm, test_scores_norm = standardizer(train_scores, test_scores)\n\n#. Then four different combination algorithms are applied as described above.\n\n   .. code-block:: python\n\n       comb_by_average = average(test_scores_norm)\n       comb_by_maximization = maximization(test_scores_norm)\n       comb_by_aom = aom(test_scores_norm, 5) # 5 groups\n       comb_by_moa = moa(test_scores_norm, 5)) # 5 groups\n\n#. Finally, all four combination methods are evaluated with ROC and Precision @ Rank n.\n\n   .. code-block:: bash\n\n       Combining 20 kNN detectors\n       Combination by Average ROC:0.9194, precision @ rank n:0.4531\n       Combination by Maximization ROC:0.9198, precision @ rank n:0.4688\n       Combination by AOM ROC:0.9257, precision @ rank n:0.4844\n       Combination by MOA ROC:0.9263, precision @ rank n:0.4688\n\n* `Quick Start for Combining Outlier Scores from Various Base Detectors <#quick-start-for-combining-outlier-scores-from-various-base-detectors>`_\n\n* `Execute Interactive Jupyter Notebooks <https://mybinder.org/v2/gh/yzhao062/pyod/master>`_\n\n* `Old Algorithm Benchmark <#old-algorithm-benchmark>`_\n\n----\n\n\nOld Algorithm Benchmark\n^^^^^^^^^^^^^^^^^^^^^^^\n\nIn June 2022, we released a 36-page, the most comprehensive `anomaly detection benchmark paper <https://www.andrew.cmu.edu/user/yuezhao2/papers/22-preprint-adbench.pdf>`_.\nThe fully `open-sourced ADBench <https://github.com/Minqi824/ADBench>`_ compares 30 anomaly detection algorithms on 55 benchmark datasets.\n\nThe organization of **ADBench** is provided below:\n\n.. image:: https://github.com/Minqi824/ADBench/blob/main/figs/ADBench.png?raw=true\n   :target: https://github.com/Minqi824/ADBench/blob/main/figs/ADBench.png?raw=true\n   :alt: benchmark-old\n\n**The content below is obsolete**.\n\n**The comparison among of implemented models** is made available below\n(\\ `Figure <https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png>`_\\ ,\n`compare_all_models.py <https://github.com/yzhao062/pyod/blob/master/examples/compare_all_models.py>`_\\ ,\n`Interactive Jupyter Notebooks <https://mybinder.org/v2/gh/yzhao062/pyod/master>`_\\ ).\nFor Jupyter Notebooks, please navigate to **\"/notebooks/Compare All Models.ipynb\"**.\n\n\n.. image:: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png\n   :target: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png\n   :alt: Comparision_of_All\n\nA benchmark is supplied for select algorithms to provide an overview of the implemented models.\nIn total, 17 benchmark datasets are used for comparison, which\ncan be downloaded at `ODDS <http://odds.cs.stonybrook.edu/#table1>`_.\n\nFor each dataset, it is first split into 60% for training and 40% for testing.\nAll experiments are repeated 10 times independently with random splits.\nThe mean of 10 trials is regarded as the final result. Three evaluation metrics\nare provided:\n\n- The area under receiver operating characteristic (ROC) curve\n- Precision @ rank n (P@N)\n- Execution time\n\nCheck the latest `benchmark <https://pyod.readthedocs.io/en/latest/benchmark.html>`_. You could replicate this process by running\n`benchmark.py <https://github.com/yzhao062/pyod/blob/master/notebooks/benchmark.py>`_.\n\n\n----"
        }
      ]
    }
  ]
}