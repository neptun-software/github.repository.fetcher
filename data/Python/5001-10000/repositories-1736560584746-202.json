{
  "metadata": {
    "timestamp": 1736560584746,
    "page": 202,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/trax",
      "stars": 8130,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.2177734375,
          "content": "[run]\nsource =\n    trax/\nomit =\n    *_test.py\n    */site-packages/*\n\n[report]\nomit =\n    */site-packages/*\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise NotImplementedError\n    if __name__ == .__main__.:\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.04296875,
          "content": "# Copyright 2024 The Trax Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/source directory with Sphinx.\nsphinx:\n  configuration: docs/source/conf.py\n\n# Build docs in additional formats (PDF, ePub).\nformats: all\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  version: 3.7\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2685546875,
          "content": "sudo: required\nlanguage: python\ncache: pip\ngit:\n  depth: 3\n  quiet: true\npython:\n  - \"3.6\"\nenv:\n  global:\n    - TF_VERSION=\"2.4.*\"\n  matrix:\n    - TRAX_TEST=\"lib\"\n    - TRAX_TEST=\"research\"\ninstall:\n  - ./oss_scripts/oss_pip_install.sh\nscript:\n  - ./oss_scripts/oss_tests.sh\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.287109375,
          "content": "# This is the list of Trax authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\n\nGoogle Inc.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3330078125,
          "content": "# How to Contribute\n\n# Issues\n\n* Please tag your issue with `bug`, `feature request`, or `question` to help us\n  effectively respond.\n* Please include the versions of JAX or Tensorflow you are running.\n* Please provide the command line you ran as well as the log output.\n\n# Pull Requests\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.3466796875,
          "content": "### Description\n\n...\n\n### Environment information\n\n```\nOS: <your answer here>\n\n$ pip freeze | grep trax\n# your output here\n\n$ pip freeze | grep tensor\n# your output here\n\n$ pip freeze | grep jax\n# your output here\n\n$ python -V\n# your output here\n```\n\n### For bugs: reproduction and error logs\n\n```\n# Steps to reproduce:\n...\n```\n\n```\n# Error logs:\n...\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.974609375,
          "content": "# Trax &mdash; Deep Learning with Clear Code and Speed\n\n![train tracks](https://images.pexels.com/photos/461772/pexels-photo-461772.jpeg?dl&fit=crop&crop=entropy&w=32&h=21)\n[![PyPI\nversion](https://badge.fury.io/py/trax.svg)](https://badge.fury.io/py/trax)\n[![GitHub\nIssues](https://img.shields.io/github/issues/google/trax.svg)](https://github.com/google/trax/issues)\n![GitHub Build](https://github.com/google/trax/actions/workflows/build.yaml/badge.svg)\n[![Contributions\nwelcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](CONTRIBUTING.md)\n[![License](https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/trax-ml/community)\n\n[Trax](https://trax-ml.readthedocs.io/en/latest/) is an end-to-end library for deep learning that focuses on clear code and speed. It is actively used and maintained in the [Google Brain team](https://research.google.com/teams/brain/). This notebook ([run it in colab](https://colab.research.google.com/github/google/trax/blob/master/trax/intro.ipynb)) shows how to use Trax and where you can find more information.\n\n  1. **Run a pre-trained Transformer**: create a translator in a few lines of code\n  1. **Features and resources**: [API docs](https://trax-ml.readthedocs.io/en/latest/), where to [talk to us](https://gitter.im/trax-ml/community), how to [open an issue](https://github.com/google/trax/issues) and more\n  1. **Walkthrough**: how Trax works, how to make new models and train on your own data\n\nWe welcome **contributions** to Trax! We welcome PRs with code for new models and layers as well as improvements to our code and documentation. We especially love **notebooks** that explain how models work and show how to use them to solve problems!\n\n\n\nHere are a few example notebooks:-\n\n* [**trax.data API explained**](https://github.com/google/trax/blob/master/trax/examples/trax_data_Explained.ipynb) : Explains some of the major functions in the `trax.data` API \n* [**Named Entity Recognition using Reformer**](https://github.com/google/trax/blob/master/trax/examples/NER_using_Reformer.ipynb) : Uses a [Kaggle dataset](https://www.kaggle.com/abhinavwalia95/entity-annotated-corpus) for implementing Named Entity Recognition using the [Reformer](https://arxiv.org/abs/2001.04451) architecture.\n* [**Deep N-Gram models**](https://github.com/google/trax/blob/master/trax/examples/Deep_N_Gram_Models.ipynb) : Implementation of deep n-gram models trained on Shakespeares works\n\n\n\n**General Setup**\n\nExecute the following cell (once) before running any of the code samples.\n\n\n```python\nimport os\nimport numpy as np\n\n!pip install -q -U trax\nimport trax\n```\n\n\n## 1. Run a pre-trained Transformer\n\nHere is how you create an English-German translator in a few lines of code:\n\n* create a Transformer model in Trax with [trax.models.Transformer](https://trax-ml.readthedocs.io/en/latest/trax.models.html#trax.models.transformer.Transformer)\n* initialize it from a file with pre-trained weights with [model.init_from_file](https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.base.Layer.init_from_file)\n* tokenize your input sentence to input into the model with [trax.data.tokenize](https://trax-ml.readthedocs.io/en/latest/trax.data.html#trax.data.tf_inputs.tokenize)\n* decode from the Transformer with [trax.supervised.decoding.autoregressive_sample](https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.decoding.autoregressive_sample)\n* de-tokenize the decoded result to get the translation with [trax.data.detokenize](https://trax-ml.readthedocs.io/en/latest/trax.data.html#trax.data.tf_inputs.detokenize)\n\n\n\n```python\n# Create a Transformer model.\n# Pre-trained model config in gs://trax-ml/models/translation/ende_wmt32k.gin\nmodel = trax.models.Transformer(\n    input_vocab_size=33300,\n    d_model=512, d_ff=2048,\n    n_heads=8, n_encoder_layers=6, n_decoder_layers=6,\n    max_len=2048, mode='predict')\n\n# Initialize using pre-trained weights.\nmodel.init_from_file('gs://trax-ml/models/translation/ende_wmt32k.pkl.gz',\n                     weights_only=True)\n\n# Tokenize a sentence.\nsentence = 'It is nice to learn new things today!'\ntokenized = list(trax.data.tokenize(iter([sentence]),  # Operates on streams.\n                                    vocab_dir='gs://trax-ml/vocabs/',\n                                    vocab_file='ende_32k.subword'))[0]\n\n# Decode from the Transformer.\ntokenized = tokenized[None, :]  # Add batch dimension.\ntokenized_translation = trax.supervised.decoding.autoregressive_sample(\n    model, tokenized, temperature=0.0)  # Higher temperature: more diverse results.\n\n# De-tokenize,\ntokenized_translation = tokenized_translation[0][:-1]  # Remove batch and EOS.\ntranslation = trax.data.detokenize(tokenized_translation,\n                                   vocab_dir='gs://trax-ml/vocabs/',\n                                   vocab_file='ende_32k.subword')\nprint(translation)\n```\n\n    Es ist schön, heute neue Dinge zu lernen!\n\n\n## 2. Features and resources\n\nTrax includes basic models (like [ResNet](https://github.com/google/trax/blob/master/trax/models/resnet.py#L70), [LSTM](https://github.com/google/trax/blob/master/trax/models/rnn.py#L100), [Transformer](https://github.com/google/trax/blob/master/trax/models/transformer.py#L189)) and RL algorithms\n(like [REINFORCE](https://github.com/google/trax/blob/master/trax/rl/training.py#L244), [A2C](https://github.com/google/trax/blob/master/trax/rl/actor_critic_joint.py#L458), [PPO](https://github.com/google/trax/blob/master/trax/rl/actor_critic_joint.py#L209)). It is also actively used for research and includes\nnew models like the [Reformer](https://github.com/google/trax/tree/master/trax/models/reformer) and new RL algorithms like [AWR](https://arxiv.org/abs/1910.00177). Trax has bindings to a large number of deep learning datasets, including\n[Tensor2Tensor](https://github.com/tensorflow/tensor2tensor) and [TensorFlow datasets](https://www.tensorflow.org/datasets/catalog/overview).\n\n\nYou can use Trax either as a library from your own python scripts and notebooks\nor as a binary from the shell, which can be more convenient for training large models.\nIt runs without any changes on CPUs, GPUs and TPUs.\n\n* [API docs](https://trax-ml.readthedocs.io/en/latest/)\n* [chat with us](https://gitter.im/trax-ml/community)\n* [open an issue](https://github.com/google/trax/issues)\n* subscribe to [trax-discuss](https://groups.google.com/u/1/g/trax-discuss) for news\n\n\n## 3. Walkthrough\n\nYou can learn here how Trax works, how to create new models and how to train them on your own data.\n\n### Tensors and Fast Math\n\nThe basic units flowing through Trax models are *tensors* - multi-dimensional arrays, sometimes also known as numpy arrays, due to the most widely used package for tensor operations -- `numpy`. You should take a look at the [numpy guide](https://numpy.org/doc/stable/user/quickstart.html) if you don't know how to operate on tensors: Trax also uses the numpy API for that.\n\nIn Trax we want numpy operations to run very fast, making use of GPUs and TPUs to accelerate them. We also want to automatically compute gradients of functions on tensors. This is done in the `trax.fastmath` package thanks to its backends -- [JAX](https://github.com/google/jax) and [TensorFlow numpy](https://tensorflow.org/guide/tf_numpy).\n\n\n```python\nfrom trax.fastmath import numpy as fastnp\ntrax.fastmath.use_backend('jax')  # Can be 'jax' or 'tensorflow-numpy'.\n\nmatrix  = fastnp.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(f'matrix = \\n{matrix}')\nvector = fastnp.ones(3)\nprint(f'vector = {vector}')\nproduct = fastnp.dot(vector, matrix)\nprint(f'product = {product}')\ntanh = fastnp.tanh(product)\nprint(f'tanh(product) = {tanh}')\n```\n\n    matrix = \n    [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n    vector = [1. 1. 1.]\n    product = [12. 15. 18.]\n    tanh(product) = [0.99999994 0.99999994 0.99999994]\n\n\nGradients can be calculated using `trax.fastmath.grad`.\n\n\n```python\ndef f(x):\n  return 2.0 * x * x\n\ngrad_f = trax.fastmath.grad(f)\n\nprint(f'grad(2x^2) at 1 = {grad_f(1.0)}')\n```\n\n    grad(2x^2) at 1 = 4.0\n\n\n### Layers\n\nLayers are basic building blocks of Trax models. You will learn all about them in the [layers intro](https://trax-ml.readthedocs.io/en/latest/notebooks/layers_intro.html) but for now, just take a look at the implementation of one core Trax layer, `Embedding`:\n\n```python\nclass Embedding(base.Layer):\n  \"\"\"Trainable layer that maps discrete tokens/IDs to vectors.\"\"\"\n\n  def __init__(self,\n               vocab_size,\n               d_feature,\n               kernel_initializer=init.RandomNormalInitializer(1.0)):\n    \"\"\"Returns an embedding layer with given vocabulary size and vector size.\n\n    Args:\n      vocab_size: Size of the input vocabulary. The layer will assign a unique\n          vector to each ID in `range(vocab_size)`.\n      d_feature: Dimensionality/depth of the output vectors.\n      kernel_initializer: Function that creates (random) initial vectors for\n          the embedding.\n    \"\"\"\n    super().__init__(name=f'Embedding_{vocab_size}_{d_feature}')\n    self._d_feature = d_feature  # feature dimensionality\n    self._vocab_size = vocab_size\n    self._kernel_initializer = kernel_initializer\n\n  def forward(self, x):\n    \"\"\"Returns embedding vectors corresponding to input token IDs.\n\n    Args:\n      x: Tensor of token IDs.\n\n    Returns:\n      Tensor of embedding vectors.\n    \"\"\"\n    return jnp.take(self.weights, x, axis=0, mode='clip')\n\n  def init_weights_and_state(self, input_signature):\n    \"\"\"Returns tensor of newly initialized embedding vectors.\"\"\"\n    del input_signature\n    shape_w = (self._vocab_size, self._d_feature)\n    w = self._kernel_initializer(shape_w, self.rng)\n    self.weights = w\n```\n\nLayers with trainable weights like `Embedding` need to be initialized with the signature (shape and dtype) of the input, and then can be run by calling them.\n\n\n\n```python\nfrom trax import layers as tl\n\n# Create an input tensor x.\nx = np.arange(15)\nprint(f'x = {x}')\n\n# Create the embedding layer.\nembedding = tl.Embedding(vocab_size=20, d_feature=32)\nembedding.init(trax.shapes.signature(x))\n\n# Run the layer -- y = embedding(x).\ny = embedding(x)\nprint(f'shape of y = {y.shape}')\n```\n\n    x = [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]\n    shape of y = (15, 32)\n\n\n### Models\n\nModels in Trax are built from layers most often using the `Serial` and `Branch` combinators. You can read more about those combinators in the [layers intro](https://trax-ml.readthedocs.io/en/latest/notebooks/layers_intro.html) and\nsee the code for many models in `trax/models/`, e.g., this is how the [Transformer Language Model](https://github.com/google/trax/blob/master/trax/models/transformer.py#L167) is implemented. Below is an example of how to build a sentiment classification model.\n\n\n```python\nmodel = tl.Serial(\n    tl.Embedding(vocab_size=8192, d_feature=256),\n    tl.Mean(axis=1),  # Average on axis 1 (length of sentence).\n    tl.Dense(2),      # Classify 2 classes.\n    tl.LogSoftmax()   # Produce log-probabilities.\n)\n\n# You can print model structure.\nprint(model)\n```\n\n    Serial[\n      Embedding_8192_256\n      Mean\n      Dense_2\n      LogSoftmax\n    ]\n\n\n### Data\n\nTo train your model, you need data. In Trax, data streams are represented as python iterators, so you can call `next(data_stream)` and get a tuple, e.g., `(inputs, targets)`. Trax allows you to use [TensorFlow Datasets](https://www.tensorflow.org/datasets) easily and you can also get an iterator from your own text file using the standard `open('my_file.txt')`.\n\n\n```python\ntrain_stream = trax.data.TFDS('imdb_reviews', keys=('text', 'label'), train=True)()\neval_stream = trax.data.TFDS('imdb_reviews', keys=('text', 'label'), train=False)()\nprint(next(train_stream))  # See one example.\n```\n\n    (b\"This was an absolutely terrible movie. Don't be lured in by Christopher Walken or Michael Ironside. Both are great actors, but this must simply be their worst role in history. Even their great acting could not redeem this movie's ridiculous storyline. This movie is an early nineties US propaganda piece. The most pathetic scenes were those when the Columbian rebels were making their cases for revolutions. Maria Conchita Alonso appeared phony, and her pseudo-love affair with Walken was nothing but a pathetic emotional plug in a movie that was devoid of any real meaning. I am disappointed that there are movies like this, ruining actor's like Christopher Walken's good name. I could barely sit through it.\", 0)\n\n\nUsing the `trax.data` module you can create input processing pipelines, e.g., to tokenize and shuffle your data. You create data pipelines using `trax.data.Serial` and they are functions that you apply to streams to create processed streams.\n\n\n```python\ndata_pipeline = trax.data.Serial(\n    trax.data.Tokenize(vocab_file='en_8k.subword', keys=[0]),\n    trax.data.Shuffle(),\n    trax.data.FilterByLength(max_length=2048, length_keys=[0]),\n    trax.data.BucketByLength(boundaries=[  32, 128, 512, 2048],\n                             batch_sizes=[256,  64,  16,    4, 1],\n                             length_keys=[0]),\n    trax.data.AddLossWeights()\n  )\ntrain_batches_stream = data_pipeline(train_stream)\neval_batches_stream = data_pipeline(eval_stream)\nexample_batch = next(train_batches_stream)\nprint(f'shapes = {[x.shape for x in example_batch]}')  # Check the shapes.\n```\n\n    shapes = [(4, 1024), (4,), (4,)]\n\n\n### Supervised training\n\nWhen you have the model and the data, use `trax.supervised.training` to define training and eval tasks and create a training loop. The Trax training loop optimizes training and will create TensorBoard logs and model checkpoints for you.\n\n\n```python\nfrom trax.supervised import training\n\n# Training task.\ntrain_task = training.TrainTask(\n    labeled_data=train_batches_stream,\n    loss_layer=tl.WeightedCategoryCrossEntropy(),\n    optimizer=trax.optimizers.Adam(0.01),\n    n_steps_per_checkpoint=500,\n)\n\n# Evaluaton task.\neval_task = training.EvalTask(\n    labeled_data=eval_batches_stream,\n    metrics=[tl.WeightedCategoryCrossEntropy(), tl.WeightedCategoryAccuracy()],\n    n_eval_batches=20  # For less variance in eval numbers.\n)\n\n# Training loop saves checkpoints to output_dir.\noutput_dir = os.path.expanduser('~/output_dir/')\n!rm -rf {output_dir}\ntraining_loop = training.Loop(model,\n                              train_task,\n                              eval_tasks=[eval_task],\n                              output_dir=output_dir)\n\n# Run 2000 steps (batches).\ntraining_loop.run(2000)\n```\n\n    \n    Step      1: Ran 1 train steps in 0.78 secs\n    Step      1: train WeightedCategoryCrossEntropy |  1.33800304\n    Step      1: eval  WeightedCategoryCrossEntropy |  0.71843582\n    Step      1: eval      WeightedCategoryAccuracy |  0.56562500\n    \n    Step    500: Ran 499 train steps in 5.77 secs\n    Step    500: train WeightedCategoryCrossEntropy |  0.62914723\n    Step    500: eval  WeightedCategoryCrossEntropy |  0.49253047\n    Step    500: eval      WeightedCategoryAccuracy |  0.74062500\n    \n    Step   1000: Ran 500 train steps in 5.03 secs\n    Step   1000: train WeightedCategoryCrossEntropy |  0.42949259\n    Step   1000: eval  WeightedCategoryCrossEntropy |  0.35451687\n    Step   1000: eval      WeightedCategoryAccuracy |  0.83750000\n    \n    Step   1500: Ran 500 train steps in 4.80 secs\n    Step   1500: train WeightedCategoryCrossEntropy |  0.41843575\n    Step   1500: eval  WeightedCategoryCrossEntropy |  0.35207348\n    Step   1500: eval      WeightedCategoryAccuracy |  0.82109375\n    \n    Step   2000: Ran 500 train steps in 5.35 secs\n    Step   2000: train WeightedCategoryCrossEntropy |  0.38129005\n    Step   2000: eval  WeightedCategoryCrossEntropy |  0.33760912\n    Step   2000: eval      WeightedCategoryAccuracy |  0.85312500\n\n\nAfter training the model, run it like any layer to get results.\n\n\n```python\nexample_input = next(eval_batches_stream)[0][0]\nexample_input_str = trax.data.detokenize(example_input, vocab_file='en_8k.subword')\nprint(f'example input_str: {example_input_str}')\nsentiment_log_probs = model(example_input[None, :])  # Add batch dimension.\nprint(f'Model returned sentiment probabilities: {np.exp(sentiment_log_probs)}')\n```\n\n    example input_str: I first saw this when I was a teen in my last year of Junior High. I was riveted to it! I loved the special effects, the fantastic places and the trial-aspect and flashback method of telling the story.<br /><br />Several years later I read the book and while it was interesting and I could definitely see what Swift was trying to say, I think that while it's not as perfect as the book for social commentary, as a story the movie is better. It makes more sense to have it be one long adventure than having Gulliver return after each voyage and making a profit by selling the tiny Lilliput sheep or whatever.<br /><br />It's much more arresting when everyone thinks he's crazy and the sheep DO make a cameo anyway. As a side note, when I saw Laputa I was stunned. It looks very much like the Kingdom of Zeal from the Chrono Trigger video game (1995) that also made me like this mini-series even more.<br /><br />I saw it again about 4 years ago, and realized that I still enjoyed it just as much. Really high quality stuff and began an excellent run of Sweeps mini-series for NBC who followed it up with the solid Merlin and interesting Alice in Wonderland.<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n    Model returned sentiment probabilities: [[3.984500e-04 9.996014e-01]]\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "oss_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 7.681640625,
          "content": "\n\n[MASTER]\n\n# Pickle collected data for later comparisons.\npersistent=no\n\n# Set the cache size for astng objects.\ncache-size=500\n\n# Ignore Py3 files\nignore=get_references_web.py,get_references_web_single_group.py\n\n\n[REPORTS]\n\n# Set the output format.\n# output-format=sorted-text\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\nfiles-output=no\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Disable the report(s) with the given ID(s).\ndisable-report=R0001,R0002,R0003,R0004,R0101,R0102,R0201,R0202,R0220,R0401,R0402,R0701,R0801,R0901,R0902,R0903,R0904,R0911,R0912,R0913,R0914,R0915,R0921,R0922,R0923\n\n# Error message template (continued on second line)\nmsg-template={msg_id}:{line:3} {obj}: {msg} [{symbol}]\n\n\n[MESSAGES CONTROL]\n# List of checkers and warnings to enable.\nenable=indexing-exception,old-raise-syntax\n\n# List of checkers and warnings to disable.\ndisable=design,similarities,no-self-use,attribute-defined-outside-init,locally-disabled,star-args,pointless-except,bad-option-value,global-statement,fixme,suppressed-message,useless-suppression,locally-enabled,file-ignored,multiple-imports,c-extension-no-member,trailing-newlines,unsubscriptable-object,misplaced-comparison-constant,no-member,abstract-method,no-else-return,missing-docstring,wrong-import-order,protected-access,inconsistent-return-statements,invalid-unary-operand-type,import-error,no-name-in-module,arguments-differ,not-context-manager,unused-argument\n\n[BASIC]\n\n# Required attributes for module, separated by a comma\nrequired-attributes=\n\n# Regular expression which should only match the name\n# of functions or classes which do not require a docstring.\nno-docstring-rgx=(__.*__|main)\n\n# Min length in lines of a function that requires a docstring.\ndocstring-min-length=10\n\n# Regular expression which should only match correct module names. The\n# leading underscore is sanctioned for private modules by Google's style\n# guide.\n#\n# There are exceptions to the basic rule (_?[a-z][a-z0-9_]*) to cover\n# requirements of Python's module system.\nmodule-rgx=^(_?[a-z][a-z0-9_]*)|__init__$\n\n# Regular expression which should only match correct module level names\nconst-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression which should only match correct class attribute\nclass-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$\n\n# Regular expression which should only match correct class names\nclass-rgx=^_?[A-Z][a-zA-Z0-9]*$\n\n# Regular expression which should only match correct function names.\n# 'camel_case' and 'snake_case' group names are used for consistency of naming\n# styles across functions and methods.\nfunction-rgx=^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$\n\n\n# Regular expression which should only match correct method names.\n# 'camel_case' and 'snake_case' group names are used for consistency of naming\n# styles across functions and methods. 'exempt' indicates a name which is\n# consistent with all naming styles.\nmethod-rgx=(?x)\n  ^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase\n         |tearDownTestCase|setupSelf|tearDownClass|setUpClass\n         |(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)\n     |(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)\n     |(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$\n\n\n# Regular expression which should only match correct instance attribute names\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct argument names\nargument-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct variable names\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct list comprehension /\n# generator expression variable names\ninlinevar-rgx=^[a-z][a-z0-9_]*$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=main,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=input,apply,reduce\n\n# List of decorators that define properties, such as abc.abstractproperty.\nproperty-classes=abc.abstractproperty\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of decorators that create context managers from functions, such as\n# contextlib.contextmanager.\ncontextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching names used for dummy variables (i.e. not used).\ndummy-variables-rgx=^\\*{0,2}(_$|unused_|dummy_)\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# \"class_\" is also a valid for the first argument to a class method.\nvalid-classmethod-first-arg=cls,class_\n\n\n[EXCEPTIONS]\n\novergeneral-exceptions=StandardError,Exception,BaseException\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,TERMIOS,Bastion,rexec,sets\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n\n# Regexp for a line that is allowed to be longer than the limit.\n# This \"ignore\" regex is today composed of several independent parts:\n# (1) Long import lines\n# (2) URLs in comments or pydocs. Detecting URLs by regex is a hard problem and\n#     no amount of tweaking will make a perfect regex AFAICT. This one is a good\n#     compromise.\n# (3) Constant string literals at the start of files don't need to be broken\n#     across lines. Allowing long paths and urls to be on a single\n#     line. Also requires that the string not be a triplequoted string.\nignore-long-lines=(?x)\n  (^\\s*(import|from)\\s\n   |^\\s*(\\#\\ )?<?(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*>?$\n   |^[a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*(\"[^\"]\\S+\"|'[^']\\S+')\n   )\n\n# Maximum number of lines in a module\nmax-module-lines=99999\n\n# String used as indentation unit. We differ from PEP8's normal 4 spaces.\nindent-string='  '\n\n# Do not warn about multiple statements on a single line for constructs like\n#   if test: stmt\nsingle-line-if-stmt=y\n\n# Make sure : in dicts and trailing commas are checked for whitespace.\nno-space-check=\n\n\n[LOGGING]\n\n# Add logging modules.\nlogging-modules=logging,absl.logging\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=\n\n\n# Maximum line length for lambdas\nshort-func-length=1\n\n# List of module members that should be marked as deprecated.\n# All of the string functions are listed in 4.1.4 Deprecated string functions\n# in the Python 2.4 docs.\ndeprecated-members=string.atof,string.atoi,string.atol,string.capitalize,string.expandtabs,string.find,string.rfind,string.index,string.rindex,string.count,string.lower,string.split,string.rsplit,string.splitfields,string.join,string.joinfields,string.lstrip,string.rstrip,string.strip,string.swapcase,string.translate,string.upper,string.ljust,string.rjust,string.center,string.zfill,string.replace,sys.exitfunc,sys.maxint\n\n\n# List of exceptions that do not need to be mentioned in the Raises section of\n# a docstring.\nignore-exceptions=AssertionError,NotImplementedError,StopIteration,TypeError\n\n\n# Number of spaces of indent required when the last token on the preceding line\n# is an open (, [, or {.\nindent-after-paren=4\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.19921875,
          "content": "# coding=utf-8\n# Copyright 2024 The Trax Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# coding=utf-8\n\"\"\"Install trax.\"\"\"\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nsetup(\n    name='trax',\n    version='1.4.1',\n    description='Trax',\n    long_description=(\n        'Trax helps you understand deep learning. We start with basic maths and'\n        ' go through layers, models, supervised and reinforcement learning. We '\n        'get to advanced deep learning results, including recent papers and '\n        'state-of-the-art models.'\n    ),\n    author='Google Inc.',\n    author_email='no-reply@google.com',\n    url='http://github.com/google/trax',\n    license='Apache 2.0',\n    packages=find_packages(),\n    install_requires=[\n        'absl-py',\n        'funcsigs',\n        'gin-config',\n        'gym',\n        'jax',\n        'jaxlib',\n        'matplotlib',\n        'numpy',\n        'psutil',\n        'scipy',\n        'six',\n        'tensorflow-datasets',\n        'tensorflow-text',\n    ],\n    extras_require={\n        'tensorflow': ['tensorflow>=1.15.0'],\n        'tensorflow_gpu': ['tensorflow-gpu>=1.15.0'],\n        't5': ['t5>=0.4.0'],\n        'tests': [\n            'attrs',\n            'jupyter',\n            'mock',\n            'parameterized',\n            'pylint',\n            'pytest',\n            'wrapt==1.11.*',\n        ],\n        't2t': ['tensor2tensor',],\n    },\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n    ],\n    keywords='tensorflow machine learning jax',\n)\n"
        },
        {
          "name": "trax",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}