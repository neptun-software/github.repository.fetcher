{
  "metadata": {
    "timestamp": 1736560983746,
    "page": 732,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yadm-dev/yadm",
      "stars": 5429,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[flake8]\nmax-line-length = 120\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0166015625,
          "content": "yadm text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.087890625,
          "content": ".DS_Store\n.jekyll-metadata\n.pytest_cache\n.sass-cache\n.testyadm\n_site\ntestenv\n__pycache__/\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 6.939453125,
          "content": "3.3.0\n  * Support nested ifs in default template (#436)\n  * Support include and ifs in default template includes (#406)\n  * Support environment variables in ifs in default template (#488)\n  * Support != in default template (#358, #477)\n  * Fix multiple classes in default template on macOS (#437)\n\n3.2.2\n  * Support spaces in distro/distro-family (#432)\n  * Fix zsh hanging when tab completing add/checkout (#417)\n  * Add yadm-untracked script to contributed files (#418)\n  * Fix documentation typos (#425)\n  * Support docker-like OCI engines for dev testing (#431)\n\n3.2.1\n  * Fix Bash 3 bad array subscript bug (#411)\n\n3.2.0\n  * Support architecture for alternates/templates (#202, #203, #393)\n  * Support distro_family for alternates/templates (#213)\n  * Support setting multiple classes (#185, #304)\n  * Support environment variables in default template processor (#347)\n  * Update version command to include Bash & Git versions (#377)\n\n3.1.1\n  * Fix clone support for older versions of Git (#348)\n  * Fix support for multiple GPG recipients (#342)\n  * Find symlinks in bootstrap-in-dir (#340)\n\n3.1.0\n  * Use `git clone` directly during clone (#289, #323)\n  * Fix compatibility bug with Git completions (#318, #321)\n  * Support relative paths for --yadm-* and -w (#301)\n  * Improve parsing of if-statement in default template (#303)\n  * Read files without running cat in subshells (#317)\n  * Improve portability of updating read-only files (#320)\n  * Various code improvements (#306, #307, #311)\n\n3.0.2\n  * Fix parsing by sh (#299)\n\n3.0.1\n  * Improve handling of submodules at upgrade (#284, #285, #293)\n  * Improve Zsh completions (#292, #298)\n  * Use stderr for error messages (#297)\n\n3.0.0\n  * Support encryption with OpenSSL (#138)\n  * Support \"include\" directive in built-in template processor (#255)\n  * Support extensions for alternate files and templates (#257)\n  * Improve support for default branches (#231, #232)\n  * Add --version and --help as yadm internal commands (#267)\n  * Improve support for XDG base directory specification\n  * Use XDG_DATA_HOME used for encrypted data and repository (#208)\n  * Default repo is now ~/.local/share/yadm/repo.git\n  * Default encrypted archive is now ~/.local/share/yadm/archive\n  * Improve shell completions (#238, #274, #275)\n  * Remove support for YADM_COMPATIBILITY=1 (#242)\n  * Remove deprecated option cygwin-copy\n  * Fix template mode inheritance on FreeBSD (#243, #246)\n  * Fix hook execution under MinGW (#150)\n  * Improve compatibility with Oil shell (#210)\n\n2.5.0\n  * Support for transcrypt (#197)\n  * Support ESH templates (#220)\n  * Preserve file mode of template (#193)\n  * Fish shell completions (#224)\n  * Fix alt processing when worktree is `/` (#198)\n  * Assert config directory if missing (#226, #227)\n  * Documentation improvements (#229)\n\n2.4.0\n  * Support multiple keys in `yadm.gpg-recipient` (#139)\n  * Ensure all templates are written atomically (#142)\n  * Add encrypt_with_checksums to the hooks collection (#188)\n  * Escape white space in YADM_HOOK_FULL_COMMAND (#187)\n  * Improve parsing of os-release (#194)\n  * Improve identification of WSL (#196)\n  * Fix troff warnings emitted by man page (#195)\n  * Write encrypt-based exclusions during decrypt\n\n2.3.0\n  * Support git-crypt (#168)\n  * Support specifying a command after `yadm enter`\n  * Expose GIT_WORK_TREE during `yadm enter` (#160)\n  * Support GNUPGHOME environment variable (#134)\n  * Assert private dirs, only when worktree = $HOME (#171)\n\n2.2.0\n  * Resolve hostname using `uname -n` (#182)\n  * Use /etc/os-release if lsb_release is missing (#175)\n  * Issue warning for any invalid alternates found (#183)\n  * Add support for gawk (#180)\n\n2.1.0\n  * Use relative symlinks for alternates (#100, #177)\n  * Support double-star globs in .config/yadm/encrypt (#109)\n  * Improve bash completion (#136)\n  * Update docs about using magit (#123)\n  * Note exception for WSL (#113)\n\n2.0.1\n  * Fix bug with worktree permissions (#174)\n\n2.0.0\n  * Support XDG base directory specification\n  * Redesign alternate processing\n  * Add built-in default template processor\n  * Allow storing alternates in yadm dir (#90)\n  * Add support for j2cli template processor\n  * Ignore encrypted files (#69)\n  * Support DISTRO in alternates (#72)\n  * Support `source` in templates (#163)\n  * Change yadm.cygwin-copy to yadm.alt-copy\n  * Support `-b <branch>` when cloning (#133)\n  * Support includes for j2-based templates (#114)\n  * Remove stale/invalid linked alternates (#65)\n  * Add support for Mingw/Msys (#102)\n  * Allow `-l` to pass thru to the `yadm config` command\n  * Improve processing of `yadm/encrypt`\n  * Fix bugs in legacy alternate processing\n  * Fix bug with hidden private files\n  * Improve support for older versions of Git\n  * Add upgrade command\n\n1.12.0\n  * Add basic Zsh completion (#71, #79)\n  * Support directories in `.yadm/encrypt` (#81, #82)\n  * Support exclusions in `.yadm/encrypt` (#86)\n  * Improve portability with printf (#87)\n  * Eliminate usage of `eval` and `ls`\n\n1.11.1\n  * Create private dirs prior to merge (#74)\n\n1.11.0\n  * Option for Cygwin to copy files instead of symlink (#62)\n  * Support `YADM_DISTRO` in Jinja templates (#68)\n  * Support pre/post hooks for every command (#70)\n\n1.10.0\n  * Fix `COMP_WORDS bad array subscript` bug (#64)\n  * Transition to semantic versioning\n\n1.09\n  * Add Bash completion script (#60)\n  * Support WSL detection (#61)\n  * Add introspect command (used by completion)\n\n1.08\n  * Fix bug alternates based on `CLASS` (#51)\n  * Support globs and paths with space in .yadm/encrypt (#53, #54)\n  * Add support for alternate files using Jinja templates (#56, #58)\n  * Add `enter` command, for creating a sub-shell (#57)\n  * Support local.hostname properly (#59)\n\n1.07\n  * Add `CLASS` to supported alt-link patterns (#21)\n  * Add bootstrap command (#42)\n  * Support wildcards for alt-links (#43)\n  * Stash conflicting data during clone (#44)\n  * Offer bootstrap after successful clone (#45)\n  * Display supported configs for `yadm config` (#46)\n  * Add \"curl-pipe\" program to clone without installation (#48)\n  * Fix bug in alt-link regular expressions (#49)\n\n1.06\n  * Improve portability of `hostname` (#23)\n  * Fix incompatibilities between Cygwin and Git for Windows (#26)\n  * Allow Git program to be configured via yadm.git-program (#30)\n  * Support alt-links for encrypted files (#34)\n  * Exit with the same return value as Git (#35)\n  * Support spaces in alt-link paths (#36)\n  * Ignore empty lines in .yadm/encrypt (#40)\n  * Fix typos (#41)\n\n1.05\n  * Improve portability of shebang line (#14)\n  * Support for symlinked directories (#17)\n  * Improve portability of tar parameters (#18)\n  * Support alternate gpg program (#19)\n  * Fallback to using `ls` if `/bin/ls` does not exist (#22)\n\n1.04\n  * Support alternate paths for yadm data (#4, #5)\n  * Support asymmetric encryption (#7, #8)\n  * Prevent the mixing of output and gpg prompts\n\n1.03\n  * Add username matching for alternate files (#1)\n\n1.02\n  * Handle permissions for `~/.gnupg/*gpg`\n\n1.01\n  * Set `status.showUntrackedFiles` to \"no\"\n\n1.00\n  * Initial public release\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.7158203125,
          "content": "CONTRIBUTORS\n\nTim Byrne\nErik Flodin\nMartin Zuther\nJan Schulz\nRoss Smith II\nJonathan Daigle\nLuis López\nTin Lai\nEspen Henriksen\nCameron Eagans\nKlas Mellbourn\nJames Clark\nGlenn Waters\nNicolas signed-log FORMICHELLA\nTomas Cernaj\nJoshua Cold\njonasc\nNicolas stig124 FORMICHELLA\nChad Wade Day, Jr\nSébastien Gross\nDavid Mandelberg\nPaulo Köch\nOren Zipori\nDaniel Gray\nParaplegic Racehorse\nSiôn Le Roux\nMateusz Piotrowski\njapm48\nUroš Golja\nSatoshi Ohki\nJonas\nFranciszek Madej\nDaniel Wagenknecht\nStig Palmquist\nPatrick Hof\nSamisafool\nLFdev\ncon-f-use\nBram Ceulemans\nTravis A. Everett\nSheng Yang\nJared Smartt\nAdam Jimerson\nTim Condit\nThomas Luzat\nRuss Allbery\nPatrick Roddy\ndessert1\nBrayden Banks\nAlexandre GV\naddshore\nFelipe S. S. Schneider\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.421875,
          "content": "PYTESTS = $(wildcard test/test_*.py)\nIMAGE = docker.io/yadm/testbed:2024-11-11\nOCI = docker\n\n.PHONY: all\nall:\n\t@$(MAKE) usage | less\n\n# Display usage for all make targets\n.PHONY: usage\nusage:\n\t@echo\n\t@echo 'make TARGET [option=value, ...]'\n\t@echo\n\t@echo 'TESTING'\n\t@echo\n\t@echo '  make test [testargs=ARGS]'\n\t@echo '    - Run all tests. \"testargs\" can specify a single string of arguments'\n\t@echo '      for py.test.'\n\t@echo\n\t@echo '  make <testfile>.py [testargs=ARGS]'\n\t@echo '    - Run tests from a specific test file. \"testargs\" can specify a'\n\t@echo '      single string of arguments for py.test.'\n\t@echo\n\t@echo '  make testhost [version=VERSION]'\n\t@echo '    - Create an ephemeral container for doing adhoc yadm testing. The'\n\t@echo '      working copy version of yadm will be used unless \"version\" is'\n\t@echo '      specified. \"version\" can be set to any commit, branch, tag, etc.'\n\t@echo '      The targeted \"version\" will be retrieved from the repo, and'\n\t@echo '      linked into the container as a local volume.'\n\t@echo\n\t@echo '  make scripthost [version=VERSION]'\n\t@echo '    - Create an ephemeral container for demonstrating a bug. After'\n\t@echo '      exiting the shell, a log of the commands used to illustrate the'\n\t@echo '      problem will be written to the file \"script.txt\". This file can'\n\t@echo '      be useful to developers to make a repeatable test for the'\n\t@echo '      problem. The version parameter works as for \"testhost\" above.'\n\t@echo\n\t@echo 'LINTING'\n\t@echo\n\t@echo '  make testenv'\n\t@echo '    - Create a python virtual environment with the same dependencies'\n\t@echo \"      used by yadm's testbed environment. Creating and activating\"\n\t@echo '      this environment might be useful if your editor does real time'\n\t@echo '      linting of python files. After creating the virtual environment,'\n\t@echo '      you can activate it by typing:'\n\t@echo\n\t@echo '          source testenv/bin/activate'\n\t@echo\n\t@echo 'MANPAGES'\n\t@echo\n\t@echo '  make man'\n\t@echo '    - View yadm.1 as a standard man page.'\n\t@echo\n\t@echo '  make man-wide'\n\t@echo '    - View yadm.1 as a man page, using all columns of your display.'\n\t@echo\n\t@echo '  make man-ps'\n\t@echo '    - Create a postscript version of the man page.'\n\t@echo\n\t@echo 'FILE GENERATION'\n\t@echo\n\t@echo '  make yadm.md'\n\t@echo '    - Generate the markdown version of the man page (for viewing on'\n\t@echo '      the web).'\n\t@echo\n\t@echo '  make contrib'\n\t@echo '    - Generate the CONTRIBUTORS file, from the repo history.'\n\t@echo\n\t@echo 'INSTALLATION'\n\t@echo\n\t@echo '  make install PREFIX=<prefix>'\n\t@echo '    - Install yadm, manpage, etc. to <prefix>'\n\t@echo\n\t@echo 'UTILITIES'\n\t@echo\n\t@echo '  make sync-clock'\n\t@echo '    - Reset the hardware clock for the docker hypervisor host. This'\n\t@echo '      can be useful for docker engine hosts which are not'\n\t@echo '      Linux-based.'\n\t@echo\n\n# Make it possible to run make specifying a py.test test file\n.PHONY: $(PYTESTS)\n$(PYTESTS):\n\t@$(MAKE) test testargs=\"$@ $(testargs)\"\n%.py:\n\t@$(MAKE) test testargs=\"-k $@ $(testargs)\"\n\n# Run all tests with additional testargs\n.PHONY: test\ntest:\n\t@if [ -f /.yadmtestbed ]; then \\\n\t\tcd /yadm && \\\n\t\tpy.test -v $(testargs); \\\n\telse \\\n\t\t$(MAKE) -s require-docker && \\\n\t\t$(OCI) run \\\n\t\t\t--rm -t$(shell test -t 0 && echo i) \\\n\t\t\t-v \"$(CURDIR):/yadm:ro\" \\\n\t\t\t$(IMAGE) \\\n\t\t\tmake test testargs=\"$(testargs)\"; \\\n\tfi\n\n.PHONY: .testyadm\n.testyadm: version ?= local\n.testyadm:\n\t@rm -f $@\n\t@if [ \"$(version)\" = \"local\" ]; then \\\n\t\tln -sf yadm $@; \\\n\t\techo \"Using local yadm ($$(git describe --tags --dirty))\"; \\\n\telse \\\n\t\tgit show $(version):yadm > $@; \\\n\t\techo \"Using yadm version $$(git describe --tags $(version))\"; \\\n\tfi\n\t@chmod a+x $@\n\n.PHONY: testhost\ntesthost: require-docker .testyadm\n\t@echo \"Starting testhost\"\n\t@$(OCI) run \\\n\t\t-w /root \\\n\t\t--hostname testhost \\\n\t\t--rm -it \\\n\t\t-v \"$(CURDIR)/.testyadm:/bin/yadm:ro\" \\\n\t\t$(IMAGE) \\\n\t\tbash -l\n\n.PHONY: scripthost\nscripthost: require-docker .testyadm\n\t@echo \"Starting scripthost \\(recording script\\)\"\n\t@printf '' > script.gz\n\t@$(OCI) run \\\n\t\t-w /root \\\n\t\t--hostname scripthost \\\n\t\t--rm -it \\\n\t\t-v \"$(CURDIR)/script.gz:/script.gz:rw\" \\\n\t\t-v \"$(CURDIR)/.testyadm:/bin/yadm:ro\" \\\n\t\t$(IMAGE) \\\n\t\tbash -c \"script /tmp/script -q -c 'bash -l'; gzip < /tmp/script > /script.gz\"\n\t@echo\n\t@echo \"Script saved to $(CURDIR)/script.gz\"\n\n\n.PHONY: testenv\ntestenv:\n\t@echo 'Creating a local virtual environment in \"testenv/\"'\n\t@echo\n\t@rm -rf testenv\n\tpython3 -m venv --clear testenv\n\ttestenv/bin/pip3 install --upgrade pip setuptools\n\ttestenv/bin/pip3 install --upgrade -r test/requirements.txt;\n\t@for v in $$(sed -En -e 's:.*/yadm-([0-9.]+)$$:\\1:p' test/Dockerfile); do \\\n\t\tgit show $$v:yadm > testenv/bin/yadm-$$v; \\\n\t\tchmod +x testenv/bin/yadm-$$v; \\\n\tdone\n\t@echo\n\t@echo 'To activate this test environment type:'\n\t@echo '  source testenv/bin/activate'\n\n.PHONY: image\nimage:\n\t@$(OCI) build -f test/Dockerfile . -t \"$(IMAGE)\"\n\n\n.PHONY: man\nman:\n\t@groff -man -Tascii ./yadm.1 | less\n\n.PHONY: man-wide\nman-wide:\n\t@man ./yadm.1\n\n.PHONY: man-ps\nman-ps:\n\t@groff -man -Tps ./yadm.1 > yadm.ps\n\nyadm.md: yadm.1\n\t@groff -man -Tutf8 -Z ./yadm.1 | grotty -c | col -bx | sed 's/^[A-Z]/## &/g' | sed '/YADM(1)/d' > yadm.md\n\n.PHONY: contrib\ncontrib: SHELL = /bin/bash\ncontrib:\n\t@echo -e \"CONTRIBUTORS\\n\" > CONTRIBUTORS\n\t@IFS=$$'\\n'; for author in $$(git shortlog -ns master gh-pages develop dev-pages | cut -f2); do \\\n\t\tgit log master gh-pages develop dev-pages \\\n\t\t\t--author=\"$$author\" --format=tformat: --numstat | \\\n\t\t\tawk \"{sum += \\$$1 + \\$$2} END {print sum \\\"\\t\\\" \\\"$$author\\\"}\"; \\\n\tdone | sort -nr | cut -f2 >> CONTRIBUTORS\n\n.PHONY: install\ninstall:\n\t@[ -n \"$(PREFIX)\" ] || { echo \"PREFIX is not set\"; exit 1; }\n\t@{\\\n\t\tset -e                                               ;\\\n\t\tbin=\"$(DESTDIR)$(PREFIX)/bin\"                        ;\\\n\t\tdoc=\"$(DESTDIR)$(PREFIX)/share/doc/yadm\"             ;\\\n\t\tman=\"$(DESTDIR)$(PREFIX)/share/man/man1\"             ;\\\n\t\tinstall -d \"$$bin\" \"$$doc\" \"$$man\"                   ;\\\n\t\tinstall -m 0755 yadm \"$$bin\"                         ;\\\n\t\tinstall -m 0644 yadm.1 \"$$man\"                       ;\\\n\t\tinstall -m 0644 CHANGES CONTRIBUTORS LICENSE \"$$doc\" ;\\\n\t\tcp -r contrib \"$$doc\"                                ;\\\n\t}\n\n.PHONY: sync-clock\nsync-clock:\n\t$(OCI) run --rm --privileged alpine hwclock -s\n\n.PHONY: require-docker\nrequire-docker:\n\t@if ! command -v $(OCI) > /dev/null 2>&1; then \\\n\t\techo \"Sorry, this make target requires docker to be installed, to use another docker-compatible engine, like podman, re-run the make command adding OCI=podman\"; \\\n\t\tfalse; \\\n\tfi\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.015625,
          "content": "# yadm - Yet Another Dotfiles Manager\n\n[![Latest Version][releases-badge]][releases-link]\n[![Homebrew Version][homebrew-badge]][homebrew-link]\n[![OBS Version][obs-badge]][obs-link]\n[![Arch Version][arch-badge]][arch-link]\n[![License][license-badge]][license-link]<br />\n[![Master Update][master-date]][master-commits]\n[![Develop Update][develop-date]][develop-commits]\n[![Website Update][website-date]][website-commits]<br />\n[![Master Status][master-badge]][workflow-master]\n[![Develop Status][develop-badge]][workflow-develop]\n[![GH Pages Status][gh-pages-badge]][workflow-gh-pages]\n[![Dev Pages Status][dev-pages-badge]][workflow-dev-pages]\n\n[https://yadm.io/][website-link]\n\n**yadm** is a tool for managing [dotfiles][].\n\n* Based on [Git][], with full range of Git's features\n* Supports system-specific alternative files or templated files\n* Encryption of private data using [GnuPG][], [OpenSSL][], [transcrypt][], or\n  [git-crypt][]\n* Customizable initialization (bootstrapping)\n* Customizable hooks for before and after any operation\n\nComplete features, usage, examples and installation instructions can be found on\nthe [yadm.io][website-link] website.\n\n## A very quick tour\n\n    # Initialize a new repository\n    yadm init\n\n    # Clone an existing repository\n    yadm clone <url>\n\n    # Add files/changes\n    yadm add <important file>\n    yadm commit\n\n    # Encrypt your ssh key\n    echo '.ssh/id_rsa' > ~/.config/yadm/encrypt\n    yadm encrypt\n\n    # Later, decrypt your ssh key\n    yadm decrypt\n\n    # Create different files for Linux vs MacOS\n    yadm add path/file.cfg##os.Linux\n    yadm add path/file.cfg##os.Darwin\n\nIf you enjoy using yadm, consider adding a star to the repository on GitHub.\nThe star count helps others discover yadm.\n\n[Git]: https://git-scm.com/\n[GnuPG]: https://gnupg.org/\n[OpenSSL]: https://www.openssl.org/\n[arch-badge]: https://img.shields.io/archlinux/v/extra/any/yadm\n[arch-link]: https://archlinux.org/packages/extra/any/yadm/\n[dev-pages-badge]: https://img.shields.io/github/actions/workflow/status/yadm-dev/yadm/test.yml?branch=dev-pages\n[develop-badge]: https://img.shields.io/github/actions/workflow/status/yadm-dev/yadm/test.yml?branch=develop\n[develop-commits]: https://github.com/yadm-dev/yadm/commits/develop\n[develop-date]: https://img.shields.io/github/last-commit/yadm-dev/yadm/develop.svg?label=develop\n[dotfiles]: https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory\n[gh-pages-badge]: https://img.shields.io/github/actions/workflow/status/yadm-dev/yadm/test.yml?branch=gh-pages\n[git-crypt]: https://github.com/AGWA/git-crypt\n[homebrew-badge]: https://img.shields.io/homebrew/v/yadm.svg\n[homebrew-link]: https://formulae.brew.sh/formula/yadm\n[license-badge]: https://img.shields.io/github/license/yadm-dev/yadm.svg\n[license-link]: https://github.com/yadm-dev/yadm/blob/master/LICENSE\n[master-badge]: https://img.shields.io/github/actions/workflow/status/yadm-dev/yadm/test.yml?branch=master\n[master-commits]: https://github.com/yadm-dev/yadm/commits/master\n[master-date]: https://img.shields.io/github/last-commit/yadm-dev/yadm/master.svg?label=master\n[obs-badge]: https://img.shields.io/badge/OBS-v3.3.0-blue\n[obs-link]: https://software.opensuse.org//download.html?project=home%3ATheLocehiliosan%3Ayadm&package=yadm\n[releases-badge]: https://img.shields.io/github/tag/yadm-dev/yadm.svg?label=latest+release\n[releases-link]: https://github.com/yadm-dev/yadm/releases\n[transcrypt]: https://github.com/elasticdog/transcrypt\n[website-commits]: https://github.com/yadm-dev/yadm/commits/gh-pages\n[website-date]: https://img.shields.io/github/last-commit/yadm-dev/yadm/gh-pages.svg?label=website\n[website-link]: https://yadm.io/\n[workflow-dev-pages]: https://github.com/yadm-dev/yadm/actions?query=workflow%3a%22test+site%22+branch%3adev-pages\n[workflow-develop]: https://github.com/yadm-dev/yadm/actions?query=workflow%3ATests+branch%3Adevelop\n[workflow-gh-pages]: https://github.com/yadm-dev/yadm/actions?query=workflow%3a%22test+site%22+branch%3agh-pages\n[workflow-master]: https://github.com/yadm-dev/yadm/actions?query=workflow%3ATests+branch%3Amaster\n"
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 3.6376953125,
          "content": "#!/bin/bash\n\n#\n# This script can be \"curl-piped\" into bash to bootstrap a dotfiles repo when\n# yadm is not locally installed. Read below for instructions.\n#\n# This script is hosted at bootstrap.yadm.io to make it easy to remember/type.\n#\n# DISCLAIMER: In general, I would advise against piping someone's code directly\n#             from the Internet into an interpreter (like Bash). You should\n#             probably review any code like this prior to executing it. I leave\n#             it to you to decide if this is risky behavior or not. The main\n#             reason this script exists is because I find it to be a pragmatic\n#             way to bootstrap my dotfiles, and install yadm in one step\n#             (allowing the yadm project to be a submodule of my dotfiles\n#             repo).\n#\n# Invoke bootstrap with:\n#\n#   curl -L bootstrap.yadm.io | bash\n#\n#     OR\n#\n#   curl -L bootstrap.yadm.io | bash [-s -- REPO_URL [YADM_RELEASE]]\n#\n# Alternatively, source in this file to export a yadm() function which uses\n# yadm remotely until it is locally installed.\n#\n#   source <(curl -L bootstrap.yadm.io)\n#\n\nYADM_REPO=\"https://github.com/yadm-dev/yadm\"\nYADM_RELEASE=${release:-master}\nREPO_URL=\"\"\n\nfunction _private_yadm() {\n  unset -f yadm\n  if command -v yadm &>/dev/null; then\n    echo \"Found yadm installed locally, removing remote yadm() function\"\n    unset -f _private_yadm\n    command yadm \"$@\"\n  else\n    function yadm() { _private_yadm \"$@\"; }\n    export -f yadm\n    echo WARNING: Using yadm remotely. You should install yadm locally.\n    curl -fsSL \"$YADM_REPO/raw/$YADM_RELEASE/yadm\" | bash -s -- \"$@\"\n  fi\n}\nexport -f _private_yadm\nfunction yadm() { _private_yadm \"$@\"; }\nexport -f yadm\n\n# if being sourced, return here, otherwise continue processing\nreturn 2>/dev/null\nunset -f yadm\n\nfunction remote_yadm() {\n  curl -fsSL \"$YADM_REPO/raw/$YADM_RELEASE/yadm\" | bash -s -- \"$@\"\n}\n\nfunction ask_about_source() {\n  if ! command -v yadm &>/dev/null; then\n    echo\n    echo \"***************************************************\"\n    echo \"yadm is NOT currently installed.\"\n    echo \"You should install it locally, this link may help:\"\n    echo \"https://yadm.io/docs/install\"\n    echo \"***************************************************\"\n    echo\n    echo \"If installation is not possible right now, you can temporarily \\\"source\\\"\"\n    echo \"in a yadm() function which fetches yadm remotely each time it is called.\"\n    echo\n    echo \"    source <(curl -L bootstrap.yadm.io)\"\n    echo\n  fi\n}\n\nfunction build_url() {\n  echo \"No repo URL provided.\"\n  echo\n  echo \"Where is your repo?\"\n  echo\n  echo \"  1. GitHub\"\n  echo \"  2. Bitbucket\"\n  echo \"  3. GitLab\"\n  echo \"  4. Other\"\n  echo\n  read -r -p \"Where is your repo? (1/2/3/4) ->\" choice </dev/tty\n  case $choice in\n    1)\n      REPO_URL=\"https://github.com/\"\n      ;;\n    2)\n      REPO_URL=\"https://bitbucket.org/\"\n      ;;\n    3)\n      REPO_URL=\"https://gitlab.com/\"\n      ;;\n    *)\n      echo\n      echo Please specify the full URL of your dotfiles repo\n      read -r -p \"URL ->\" choice </dev/tty\n      REPO_URL=\"$choice\"\n      return\n      ;;\n  esac\n\n  echo\n  echo \"Provide your user and repo separated by '/'\"\n  echo \"For example: UserName/dotfiles\"\n  echo\n  read -r -p \"User/Repo ->\" choice </dev/tty\n  [[ \"$choice\" =~ ^[^[:space:]]+/[^[:space:]]+$ ]] || {\n    echo \"Not formatted as USER/REPO\"\n    REPO_URL=\n    return\n  }\n  REPO_URL=\"${REPO_URL}${choice}.git\"\n}\n\nfunction main() {\n\n  [ -n \"$1\" ] && REPO_URL=\"$1\"\n  [ -n \"$2\" ] && YADM_RELEASE=\"$2\"\n  [ -z \"$REPO_URL\" ] && build_url\n  [ -z \"$REPO_URL\" ] && echo \"Unable to determine the repo URL\" && exit 1\n\n  echo \"Using URL: $REPO_URL\"\n  remote_yadm clone \"$REPO_URL\"\n\n  ask_about_source\n\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.55078125,
          "content": "[tool.pytest.ini_options]\ncache_dir = \"/tmp\"\naddopts = \"-ra\"\nmarkers = [\n  \"deprecated\", # marks tests for deprecated features (deselect with '-m \"not deprecated\"')\n]\n\n[tool.pylint.design]\nmax-args = 14\nmax-positional-arguments = 10\nmax-locals = 28\nmax-attributes = 8\nmax-statements = 65\n\n[tool.pylint.format]\nmax-line-length = 120\n\n[tool.pylint.\"messages control\"]\ndisable = [\n  \"redefined-outer-name\",\n]\n\n[tool.pylint.similarities]\nignore-imports = \"yes\"\nmin-similarity-lines = 8\n\n[tool.black]\nline-length = 120\n\n[tool.isort]\nline_length = 120\nprofile = \"black\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "yadm",
          "type": "blob",
          "size": 55.5625,
          "content": "#!/bin/sh\n# yadm - Yet Another Dotfiles Manager\n# Copyright (C) 2015-2024 Tim Byrne\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# shellcheck shell=bash\n# execute script with bash (shebang line is /bin/sh for portability)\nif [ -z \"$BASH_VERSION\" ]; then\n  [ \"$YADM_TEST\" != 1 ] && exec bash \"$0\" \"$@\"\nfi\n\nVERSION=3.3.0\n\nYADM_WORK=\"$HOME\"\nYADM_DIR=\nYADM_DATA=\n\nYADM_LEGACY_DIR=\"${HOME}/.yadm\"\nYADM_LEGACY_ARCHIVE=\"files.gpg\"\n\n# these are the default paths relative to YADM_DIR\nYADM_CONFIG=\"config\"\nYADM_ENCRYPT=\"encrypt\"\nYADM_BOOTSTRAP=\"bootstrap\"\nYADM_HOOKS=\"hooks\"\nYADM_ALT=\"alt\"\n\n# these are the default paths relative to YADM_DATA\nYADM_REPO=\"repo.git\"\nYADM_ARCHIVE=\"archive\"\n\nHOOK_COMMAND=\"\"\nFULL_COMMAND=\"\"\n\nGPG_PROGRAM=\"gpg\"\nOPENSSL_PROGRAM=\"openssl\"\nGIT_PROGRAM=\"git\"\nAWK_PROGRAM=(\"gawk\" \"awk\")\nGIT_CRYPT_PROGRAM=\"git-crypt\"\nTRANSCRYPT_PROGRAM=\"transcrypt\"\nJ2CLI_PROGRAM=\"j2\"\nENVTPL_PROGRAM=\"envtpl\"\nESH_PROGRAM=\"esh\"\nLSB_RELEASE_PROGRAM=\"lsb_release\"\n\nOS_RELEASE=\"/etc/os-release\"\nPROC_VERSION=\"/proc/version\"\nOPERATING_SYSTEM=\"Unknown\"\n\nENCRYPT_INCLUDE_FILES=\"unparsed\"\n\nLEGACY_WARNING_ISSUED=0\nINVALID_ALT=()\n\nGPG_OPTS=()\nOPENSSL_OPTS=()\n\n# flag causing path translations with cygpath\nUSE_CYGPATH=0\n\n# flag when something may have changes (which prompts auto actions to be performed)\nCHANGES_POSSIBLE=0\n\n# flag when a bootstrap should be performed after cloning\n# 0: skip auto_bootstrap, 1: ask, 2: perform bootstrap, 3: prevent bootstrap\nDO_BOOTSTRAP=0\n\nfunction main() {\n\n  require_git\n\n  # capture full command, for passing to hooks\n  # the parameters will be space delimited and\n  # spaces, tabs, and backslashes will be escaped\n  _tab=$'\\t'\n  for param in \"$@\"; do\n    param=\"${param//\\\\/\\\\\\\\}\"\n    param=\"${param//$_tab/\\\\$_tab}\"\n    param=\"${param// /\\\\ }\"\n    _fc+=(\"$param\")\n  done\n  FULL_COMMAND=\"${_fc[*]}\"\n\n  # create the YADM_DIR & YADM_DATA if they doesn't exist yet\n  [ -d \"$YADM_DIR\" ] || mkdir -p \"$YADM_DIR\"\n  [ -d \"$YADM_DATA\" ] || mkdir -p \"$YADM_DATA\"\n\n  # parse command line arguments\n  local retval=0\n  internal_commands=\"^(alt|bootstrap|clean|clone|config|decrypt|encrypt|enter|git-crypt|help|--help|init|introspect|list|perms|transcrypt|upgrade|version|--version)$\"\n  if [ -z \"$*\" ]; then\n    # no argumnts will result in help()\n    help\n  elif [[ \"$1\" =~ $internal_commands ]]; then\n    # for internal commands, process all of the arguments\n    YADM_COMMAND=\"${1//-/_}\"\n    YADM_COMMAND=\"${YADM_COMMAND/__/}\"\n    YADM_ARGS=()\n    shift\n\n    # commands listed below do not process any of the parameters\n    if [[ \"$YADM_COMMAND\" =~ ^(enter|git_crypt)$ ]]; then\n      YADM_ARGS=(\"$@\")\n    else\n      while [[ $# -gt 0 ]]; do\n        key=\"$1\"\n        case $key in\n          -a) # used by list()\n            LIST_ALL=\"YES\"\n            ;;\n          -d) # used by all commands\n            DEBUG=\"YES\"\n            ;;\n          -f) # used by init(), clone() and upgrade()\n            FORCE=\"YES\"\n            ;;\n          -l) # used by decrypt()\n            DO_LIST=\"YES\"\n            [[ \"$YADM_COMMAND\" =~ ^(clone|config)$ ]] && YADM_ARGS+=(\"$1\")\n            ;;\n          -w) # used by init() and clone()\n            YADM_WORK=\"$(qualify_path \"$2\" \"work tree\")\"\n            shift\n            ;;\n          *) # any unhandled arguments\n            YADM_ARGS+=(\"$1\")\n            ;;\n        esac\n        shift\n      done\n    fi\n    [ ! -d \"$YADM_WORK\" ] && error_out \"Work tree does not exist: [$YADM_WORK]\"\n    HOOK_COMMAND=\"$YADM_COMMAND\"\n    invoke_hook \"pre\"\n    $YADM_COMMAND \"${YADM_ARGS[@]}\"\n  else\n    # any other commands are simply passed through to git\n    HOOK_COMMAND=\"$1\"\n    invoke_hook \"pre\"\n    git_command \"$@\"\n    retval=\"$?\"\n  fi\n\n  # process automatic events\n  auto_alt\n  auto_perms\n  auto_bootstrap\n\n  exit_with_hook $retval\n\n}\n\n# ****** Alternate Processing ******\n\nfunction score_file() {\n  local source=\"$1\"\n  local target=\"$2\"\n  local conditions=\"${source#*##}\"\n\n  score=0\n  local template_processor=\"\"\n\n  IFS=',' read -ra fields <<<\"$conditions\"\n  for field in \"${fields[@]}\"; do\n    local label=${field%%.*}\n    local value=${field#*.}\n    [ \"$field\" = \"$label\" ] && value=\"\" # when .value is omitted\n\n    shopt -s nocasematch\n    local -i delta=-1\n    case \"$label\" in\n      default)\n        delta=0\n        ;;\n      a | arch)\n        [[ \"$value\" = \"$local_arch\" ]] && delta=1\n        ;;\n      o | os)\n        [[ \"$value\" = \"$local_system\" ]] && delta=2\n        ;;\n      d | distro)\n        [[ \"${value// /_}\" = \"${local_distro// /_}\" ]] && delta=4\n        ;;\n      f | distro_family)\n        [[ \"${value// /_}\" = \"${local_distro_family// /_}\" ]] && delta=8\n        ;;\n      c | class)\n        in_list \"$value\" \"${local_classes[@]}\" && delta=16\n        ;;\n      h | hostname)\n        [[ \"$value\" = \"$local_host\" ]] && delta=32\n        ;;\n      u | user)\n        [[ \"$value\" = \"$local_user\" ]] && delta=64\n        ;;\n      e | extension)\n        # extension isn't a condition and doesn't affect the score\n        continue\n        ;;\n      t | template | yadm)\n        if [ -d \"$source\" ]; then\n          INVALID_ALT+=(\"$source\")\n        else\n          template_processor=$(choose_template_processor \"$value\")\n          if [ -n \"$template_processor\" ]; then\n            delta=0\n          elif [ -n \"$loud\" ]; then\n            echo \"No supported template processor for template $source\"\n          else\n            debug \"No supported template processor for template $source\"\n          fi\n        fi\n        ;;\n      *)\n        INVALID_ALT+=(\"$source\")\n        ;;\n    esac\n    shopt -u nocasematch\n\n    if ((delta < 0)); then\n      score=0\n      return\n    fi\n    score=$((score + 1000 + delta))\n  done\n\n  record_score \"$score\" \"$target\" \"$source\" \"$template_processor\"\n}\n\nfunction record_score() {\n  local score=\"$1\"\n  local target=\"$2\"\n  local source=\"$3\"\n  local template_processor=\"$4\"\n\n  # record nothing if the score is zero\n  [ \"$score\" -eq 0 ] && [ -z \"$template_processor\" ] && return\n\n  # search for the index of this target, to see if we already are tracking it\n  local -i index=$((${#alt_targets[@]} - 1))\n  for (( ; index >= 0; --index)); do\n    if [ \"${alt_targets[$index]}\" = \"$target\" ]; then\n      break\n    fi\n  done\n\n  if [ $index -lt 0 ]; then\n    # $YADM_CONFIG must be processed first, in case other templates lookup yadm configurations\n    if [ \"$target\" = \"$YADM_CONFIG\" ]; then\n      alt_targets=(\"$target\" \"${alt_targets[@]}\")\n\n      alt_sources=(\"$source\" \"${alt_sources[@]}\")\n      alt_scores=(\"$score\" \"${alt_scores[@]}\")\n      alt_template_processors=(\"$template_processor\" \"${alt_template_processors[@]}\")\n    else\n      alt_targets+=(\"$target\")\n\n      alt_sources+=(\"$source\")\n      alt_scores+=(\"$score\")\n      alt_template_processors+=(\"$template_processor\")\n    fi\n    return\n  fi\n\n  if [[ -n \"${alt_template_processors[$index]}\" ]]; then\n    if [[ -z \"$template_processor\" || \"$score\" -lt \"${alt_scores[$index]}\" ]]; then\n      # Not template, or template but lower score\n      return\n    fi\n  elif [[ -z \"$template_processor\" && \"$score\" -le \"${alt_scores[$index]}\" ]]; then\n    # Not template and too low score\n    return\n  fi\n\n  # Record new alt\n  alt_sources[index]=\"$source\"\n  alt_scores[index]=\"$score\"\n  alt_template_processors[index]=\"$template_processor\"\n}\n\nfunction choose_template_processor() {\n  local kind=\"$1\"\n\n  if [[ \"${kind:-default}\" = \"default\" ]]; then\n    awk_available && echo \"default\"\n  elif [[ \"$kind\" = \"esh\" ]]; then\n    esh_available && echo \"esh\"\n  elif [[ \"$kind\" = \"j2cli\" || \"$kind\" = \"j2\" ]] && j2cli_available; then\n    echo \"j2cli\"\n  elif [[ \"$kind\" = \"envtpl\" || \"$kind\" = \"j2\" ]] && envtpl_available; then\n    echo \"envtpl\"\n  fi\n\n}\n\n# ****** Template Processors ******\n\nfunction template() {\n  local processor=\"$1\"\n  local input=\"$2\"\n  local output=\"$3\"\n\n  local content\n  if ! content=$(\"template_$processor\" \"$input\"); then\n    echo \"Error: failed to process template '$input'\" >&2\n    return\n  fi\n\n  if [ -r \"$output\" ] && [ \"$content\" = \"$(<\"$output\")\" ]; then\n    debug \"Template output '$output' is unchanged\"\n    return\n  fi\n\n  # If the output file already exists as read-only, change it to be writable.\n  # There are some environments in which a read-only file will prevent the move\n  # from being successful.\n  if [ ! -w \"$output\" ] && [ -e \"$output\" ]; then\n    chmod u+w \"$output\"\n  fi\n\n  if [ -n \"$loud\" ]; then\n    echo \"Creating $output from template $input\"\n  else\n    debug \"Creating $output from template $input\"\n  fi\n\n  local temp_file=\"${output}.$$.$RANDOM\"\n  if cat >\"$temp_file\" <<<\"$content\" && mv -f \"$temp_file\" \"$output\"; then\n    copy_perms \"$input\" \"$output\"\n  else\n    echo \"Error: failed to create template output '$output'\"\n    rm -f \"$temp_file\"\n  fi\n}\n\nfunction template_default() {\n  local input=\"$1\"\n\n  # the explicit \"space + tab\" character class used below is used because not\n  # all versions of awk seem to support the POSIX character classes [[:blank:]]\n  local awk_pgm\n  read -r -d '' awk_pgm <<\"EOF\"\nBEGIN {\n  classes = ARGV[2]\n  for (i = 3; i < ARGC; ++i) {\n    classes = classes \"\\n\" ARGV[i]\n  }\n  yadm[\"class\"] = class\n  yadm[\"classes\"] = classes\n  yadm[\"arch\"] = arch\n  yadm[\"os\"] = os\n  yadm[\"hostname\"] = host\n  yadm[\"user\"] = user\n  yadm[\"distro\"] = distro\n  yadm[\"distro_family\"] = distro_family\n  yadm[\"source\"] = source\n\n  VARIABLE = \"(env|yadm)\\\\.[a-zA-Z0-9_]+\"\n\n  current = 0\n  filename[current] = ARGV[1]\n  line[current] = 0\n\n  level = 0\n  skip[level] = 0\n\n  for (; current >= 0; --current) {\n    while ((res = getline <filename[current]) > 0) {\n      ++line[current]\n      if ($0 ~ \"^[ \\t]*\\\\{%[ \\t]*if[ \\t]+\" VARIABLE \"[ \\t]*[!=]=[ \\t]*\\\".*\\\"[ \\t]*%\\\\}$\") {\n        if (skip[level]) { skip[++level] = 1; continue }\n\n        match($0, VARIABLE)\n        lhs = substr($0, RSTART, RLENGTH)\n        match($0, /[!=]=/)\n        op = substr($0, RSTART, RLENGTH)\n        match($0, /\".*\"/)\n        rhs = tolower(replace_vars(substr($0, RSTART + 1, RLENGTH - 2)))\n\n        if (lhs == \"yadm.class\") {\n          lhs = \"not\" rhs\n          split(classes, cls_array, \"\\n\")\n          for (idx in cls_array) {\n            if (rhs == tolower(cls_array[idx])) { lhs = rhs; break }\n          }\n        }\n        else {\n          lhs = tolower(replace_vars(\"{{\" lhs \"}}\"))\n        }\n\n        if (op == \"==\") { skip[++level] = lhs != rhs }\n        else { skip[++level] = lhs == rhs }\n      }\n      else if (/^[ \\t]*\\{%[ \\t]*else[ \\t]*%\\}$/) {\n        if (level == 0 || skip[level] < 0) { error(\"else without matching if\") }\n        skip[level] = skip[level] ? skip[level - 1] : -1\n      }\n      else if (/^[ \\t]*\\{%[ \\t]*endif[ \\t]*%\\}$/) {\n        if (--level < 0) { error(\"endif without matching if\") }\n      }\n      else if (!skip[level]) {\n        $0 = replace_vars($0)\n        if (match($0, /^[ \\t]*\\{%[ \\t]*include[ \\t]+(\"[^\"]+\"|[^\"]+)[ \\t]*%\\}$/)) {\n          include = $0\n          sub(/^[ \\t]*\\{%[ \\t]*include[ \\t]+\"?/, \"\", include)\n          sub(/\"?[ \\t]*%\\}$/, \"\", include)\n          if (index(include, \"/\") != 1) {\n            include = source_dir \"/\" include\n          }\n          filename[++current] = include\n          line[current] = 0\n        }\n        else { print }\n      }\n    }\n    if (res >= 0) { close(filename[current]) }\n    else if (current == 0) { error(\"could not read input file\") }\n    else { --current; error(\"could not read include file '\" filename[current + 1] \"'\") }\n  }\n  if (level > 0) {\n    current = 0\n    error(\"unterminated if\")\n  }\n  exit 0\n}\nfunction error(text) {\n  printf \"%s:%d: error: %s\\n\",\n    filename[current], line[current], text > \"/dev/stderr\"\n  exit 1\n}\nfunction replace_vars(input) {\n  output = \"\"\n  while (match(input, \"\\\\{\\\\{[ \\t]*\" VARIABLE \"[ \\t]*\\\\}\\\\}\")) {\n    if (RSTART > 1) {\n      output = output substr(input, 0, RSTART - 1)\n    }\n    data = substr(input, RSTART + 2, RLENGTH - 4)\n    input = substr(input, RSTART + RLENGTH)\n\n    gsub(/[ \\t]+/, \"\", data)\n    split(data, fields, /\\./)\n\n    if (fields[1] == \"env\") {\n      output = output ENVIRON[fields[2]]\n    }\n    else {\n      output = output yadm[fields[2]]\n    }\n  }\n  return output input\n}\nEOF\n\n  \"${AWK_PROGRAM[0]}\" \\\n    -v class=\"$local_class\" \\\n    -v arch=\"$local_arch\" \\\n    -v os=\"$local_system\" \\\n    -v host=\"$local_host\" \\\n    -v user=\"$local_user\" \\\n    -v distro=\"$local_distro\" \\\n    -v distro_family=\"$local_distro_family\" \\\n    -v source=\"$input\" \\\n    -v source_dir=\"$(builtin_dirname \"$input\")\" \\\n    \"$awk_pgm\" \\\n    \"$input\" \"${local_classes[@]}\"\n}\n\nfunction template_j2cli() {\n  local input=\"$1\"\n\n  YADM_CLASS=\"$local_class\" \\\n    YADM_ARCH=\"$local_arch\" \\\n    YADM_OS=\"$local_system\" \\\n    YADM_HOSTNAME=\"$local_host\" \\\n    YADM_USER=\"$local_user\" \\\n    YADM_DISTRO=\"$local_distro\" \\\n    YADM_DISTRO_FAMILY=\"$local_distro_family\" \\\n    YADM_SOURCE=\"$input\" \\\n    YADM_CLASSES=\"$(join_string $'\\n' \"${local_classes[@]}\")\" \\\n    \"$J2CLI_PROGRAM\" \"$input\"\n}\n\nfunction template_envtpl() {\n  local input=\"$1\"\n\n  YADM_CLASS=\"$local_class\" \\\n    YADM_ARCH=\"$local_arch\" \\\n    YADM_OS=\"$local_system\" \\\n    YADM_HOSTNAME=\"$local_host\" \\\n    YADM_USER=\"$local_user\" \\\n    YADM_DISTRO=\"$local_distro\" \\\n    YADM_DISTRO_FAMILY=\"$local_distro_family\" \\\n    YADM_SOURCE=\"$input\" \\\n    YADM_CLASSES=\"$(join_string $'\\n' \"${local_classes[@]}\")\" \\\n    \"$ENVTPL_PROGRAM\" -o - --keep-template \"$input\"\n}\n\nfunction template_esh() {\n  local input=\"$1\"\n\n  YADM_CLASSES=\"$(join_string $'\\n' \"${local_classes[@]}\")\" \\\n    \"$ESH_PROGRAM\" \"$input\" \\\n    YADM_CLASS=\"$local_class\" \\\n    YADM_ARCH=\"$local_arch\" \\\n    YADM_OS=\"$local_system\" \\\n    YADM_HOSTNAME=\"$local_host\" \\\n    YADM_USER=\"$local_user\" \\\n    YADM_DISTRO=\"$local_distro\" \\\n    YADM_DISTRO_FAMILY=\"$local_distro_family\" \\\n    YADM_SOURCE=\"$input\"\n}\n\n# ****** yadm Commands ******\n\nfunction alt() {\n\n  require_repo\n  parse_encrypt\n\n  # gather values for processing alternates\n  local local_class\n  local -a local_classes\n  local local_arch\n  local local_system\n  local local_host\n  local local_user\n  local local_distro\n  local local_distro_family\n  set_local_alt_values\n\n  # only be noisy if the \"alt\" command was run directly\n  local loud=\n  [ \"$YADM_COMMAND\" = \"alt\" ] && loud=\"YES\"\n\n  # decide if a copy should be done instead of a symbolic link\n  local do_copy=0\n  [ \"$(config --bool yadm.alt-copy)\" == \"true\" ] && do_copy=1\n\n  cd_work \"Alternates\" || return\n\n  # determine all tracked files\n  local tracked_files=()\n  local IFS=$'\\n'\n  for tracked_file in $(\"$GIT_PROGRAM\" ls-files -- '*##*'); do\n    tracked_files+=(\"$tracked_file\")\n  done\n\n  local alt_targets=()\n  local alt_sources=()\n  local alt_scores=()\n  local alt_template_processors=()\n\n  # For removing stale links\n  local possible_alt_targets=()\n\n  local alt_source\n  for alt_source in \"${tracked_files[@]}\" \"${ENCRYPT_INCLUDE_FILES[@]}\"; do\n    local conditions=\"${alt_source#*##}\"\n    if [ \"$alt_source\" = \"$conditions\" ]; then\n      continue\n    fi\n\n    local target_base=\"${alt_source%%##*}\"\n    alt_source=\"${YADM_BASE}/${target_base}##${conditions%%/*}\"\n    local alt_target=\"${YADM_BASE}/${target_base}\"\n    if [ \"${alt_target#\"$YADM_ALT/\"}\" != \"$alt_target\" ]; then\n      target_base=\"${alt_target#\"$YADM_ALT/\"}\"\n    fi\n    alt_target=\"${YADM_BASE}/${target_base}\"\n\n    if ! in_list \"$alt_target\" \"${possible_alt_targets[@]}\"; then\n      possible_alt_targets+=(\"$alt_target\")\n    fi\n\n    score_file \"$alt_source\" \"$alt_target\"\n  done\n\n  local alt_linked=()\n\n  alt_linking\n  remove_stale_links\n  report_invalid_alts\n}\n\nfunction report_invalid_alts() {\n  [ \"$LEGACY_WARNING_ISSUED\" = \"1\" ] && return\n  [ \"${#INVALID_ALT[@]}\" = \"0\" ] && return\n  local path_list\n  for invalid in \"${INVALID_ALT[@]}\"; do\n    path_list=\"$path_list    * $invalid\"$'\\n'\n  done\n  local msg\n  IFS='' read -r -d '' msg <<EOF\n\n**WARNING**\n  Invalid alternates have been detected.\n\n  Beginning with version 2.0.0, yadm uses a new naming convention for alternate\n  files. Read more about this change here:\n\n    https://yadm.io/docs/upgrade_from_1\n\n  Or to learn more about alternates in general, read:\n\n    https://yadm.io/docs/alternates\n\n  To rename the invalid alternates run:\n\n    yadm mv <old name> <new name>\n\n  Invalid alternates detected:\n${path_list}\n***********\nEOF\n  printf '%s\\n' \"$msg\" >&2\n}\n\nfunction remove_stale_links() {\n  # review alternate candidates for stale links\n  # if a possible alt IS linked, but it's source is not part of alt_linked,\n  # remove it.\n  if readlink_available; then\n    for stale_candidate in \"${possible_alt_targets[@]}\"; do\n      if [ -L \"$stale_candidate\" ]; then\n        src=$(readlink \"$stale_candidate\" 2>/dev/null)\n        if [ -n \"$src\" ]; then\n          for review_link in \"${alt_linked[@]}\"; do\n            [ \"$src\" = \"$review_link\" ] && continue 2\n          done\n          rm -f \"$stale_candidate\"\n        fi\n      fi\n    done\n  fi\n}\n\nfunction set_local_alt_values() {\n\n  local -a all_classes\n  all_classes=$(config --get-all local.class)\n  while IFS='' read -r class; do\n    local_classes+=(\"$class\")\n    local_class=\"$class\"\n  done <<<\"$all_classes\"\n\n  local_arch=\"$(config local.arch)\"\n  if [[ -z \"$local_arch\" ]]; then\n    local_arch=$(uname -m)\n  fi\n\n  local_system=\"$(config local.os)\"\n  if [[ -z \"$local_system\" ]]; then\n    local_system=\"$OPERATING_SYSTEM\"\n  fi\n\n  local_host=\"$(config local.hostname)\"\n  if [[ -z \"$local_host\" ]]; then\n    local_host=$(uname -n)\n    local_host=${local_host%%.*} # trim any domain from hostname\n  fi\n\n  local_user=\"$(config local.user)\"\n  if [[ -z \"$local_user\" ]]; then\n    local_user=$(id -u -n)\n  fi\n\n  local_distro=\"$(config local.distro)\"\n  if [[ -z \"$local_distro\" ]]; then\n    local_distro=\"$(query_distro)\"\n  fi\n\n  local_distro_family=\"$(config local.distro-family)\"\n  if [[ -z \"$local_distro_family\" ]]; then\n    local_distro_family=\"$(query_distro_family)\"\n  fi\n\n}\n\nfunction alt_linking() {\n  local -i index\n  for ((index = 0; index < ${#alt_targets[@]}; ++index)); do\n    local target=\"${alt_targets[$index]}\"\n    local source=\"${alt_sources[$index]}\"\n    local template_processor=\"${alt_template_processors[$index]}\"\n\n    if [[ -L \"$target\" ]]; then\n      rm -f \"$target\"\n    elif [[ -d \"$target\" ]]; then\n      echo \"Skipping alt $source as $target is a directory\"\n      continue\n    else\n      assert_parent \"$target\"\n    fi\n\n    if [[ -n \"$template_processor\" ]]; then\n      template \"$template_processor\" \"$source\" \"$target\"\n    elif [[ \"$do_copy\" -eq 1 ]]; then\n      debug \"Copying $source to $target\"\n      [[ -n \"$loud\" ]] && echo \"Copying $source to $target\"\n\n      cp -f \"$source\" \"$target\"\n    else\n      debug \"Linking $source to $target\"\n      [[ -n \"$loud\" ]] && echo \"Linking $source to $target\"\n\n      ln_relative \"$source\" \"$target\"\n    fi\n  done\n}\n\nfunction ln_relative() {\n  local source=\"$1\"\n  local target=\"$2\"\n\n  local rel_source\n  rel_source=$(relative_path \"$(builtin_dirname \"$target\")\" \"$source\")\n\n  ln -fs \"$rel_source\" \"$target\"\n  alt_linked+=(\"$rel_source\")\n}\n\nfunction bootstrap() {\n\n  bootstrap_available || error_out \"Cannot execute bootstrap\\n'$YADM_BOOTSTRAP' is not an executable program.\"\n\n  # GIT_DIR should not be set for user's bootstrap code\n  unset GIT_DIR\n\n  echo \"Executing $YADM_BOOTSTRAP\"\n  exec \"$YADM_BOOTSTRAP\"\n\n}\n\nfunction clean() {\n\n  error_out \"\\\"git clean\\\" has been disabled for safety. You could end up removing all unmanaged files.\"\n\n}\n\nfunction clone() {\n\n  DO_BOOTSTRAP=1\n  local -a args\n  local -i do_checkout=1\n  while [[ $# -gt 0 ]]; do\n    case \"$1\" in\n      --bootstrap) # force bootstrap, without prompt\n        DO_BOOTSTRAP=2\n        ;;\n      --no-bootstrap) # prevent bootstrap, without prompt\n        DO_BOOTSTRAP=3\n        ;;\n      --checkout)\n        do_checkout=1\n        ;;\n      -n | --no-checkout)\n        do_checkout=0\n        ;;\n      --bare | --mirror | --recurse-submodules* | --recursive | --separate-git-dir=*)\n        # ignore arguments without separate parameter\n        ;;\n      --separate-git-dir)\n        # ignore arguments with separate parameter\n        shift\n        ;;\n      *)\n        args+=(\"$1\")\n        ;;\n    esac\n    shift\n  done\n\n  [ -n \"$DEBUG\" ] && display_private_perms \"initial\"\n\n  # safety check, don't attempt to clone when the repo is already present\n  [ -d \"$YADM_REPO\" ] && [ -z \"$FORCE\" ] &&\n    error_out \"Git repo already exists. [$YADM_REPO]\\nUse '-f' if you want to force it to be overwritten.\"\n\n  # remove existing if forcing the clone to happen anyway\n  [ -d \"$YADM_REPO\" ] && {\n    debug \"Removing existing repo prior to clone\"\n    \"$GIT_PROGRAM\" -C \"$YADM_WORK\" submodule deinit -f --all\n    rm -rf \"$YADM_REPO\"\n  }\n\n  local wc\n  wc=\"$(mk_tmp_dir)\"\n  [ -d \"$wc\" ] || error_out \"Unable to create temporary directory\"\n\n  # first clone without checkout\n  debug \"Doing an initial clone of the repository\"\n  (cd \"$wc\" &&\n    \"$GIT_PROGRAM\" -c core.sharedrepository=0600 clone --no-checkout \\\n      --separate-git-dir=\"$YADM_REPO\" \"${args[@]}\" repo.git) || {\n    debug \"Removing repo after failed clone\"\n    rm -rf \"$YADM_REPO\" \"$wc\"\n    error_out \"Unable to clone the repository\"\n  }\n  configure_repo\n  rm -rf \"$wc\"\n\n  # then reset the index as the --no-checkout flag makes the index empty\n  \"$GIT_PROGRAM\" reset --quiet -- \":/\"\n\n  if [ \"$YADM_WORK\" = \"$HOME\" ]; then\n    debug \"Determining if repo tracks private directories\"\n    for private_dir in $(private_dirs all); do\n      found_log=$(\"$GIT_PROGRAM\" log -n 1 -- \"$private_dir\" 2>/dev/null)\n      if [ -n \"$found_log\" ]; then\n        debug \"Private directory $private_dir is tracked by repo\"\n        assert_private_dirs \"$private_dir\"\n      fi\n    done\n  fi\n\n  # finally check out (unless instructed not to) all files that don't exist in $YADM_WORK\n  if [[ $do_checkout -ne 0 ]]; then\n    [ -n \"$DEBUG\" ] && display_private_perms \"pre-checkout\"\n\n    cd_work \"Clone\" || return\n\n    \"$GIT_PROGRAM\" ls-files --deleted | while IFS= read -r file; do\n      \"$GIT_PROGRAM\" checkout -- \":/$file\"\n    done\n\n    if [ -n \"$(\"$GIT_PROGRAM\" ls-files --modified)\" ]; then\n      local msg\n      IFS='' read -r -d '' msg <<EOF\n**NOTE**\n  Local files with content that differs from the ones just\n  cloned were found in $YADM_WORK. They have been left\n  unmodified.\n\n  Please review and resolve any differences appropriately.\n  If you know what you're doing, and want to overwrite the\n  tracked files, consider 'yadm checkout \"$YADM_WORK\"'.\nEOF\n      printf '%s\\n' \"$msg\"\n    fi\n\n    [ -n \"$DEBUG\" ] && display_private_perms \"post-checkout\"\n\n    CHANGES_POSSIBLE=1\n  fi\n\n}\n\nfunction config() {\n\n  use_repo_config=0\n  local_options=\"^local\\.(class|arch|os|hostname|user|distro|distro-family)$\"\n  for option in \"$@\"; do\n    [[ \"$option\" =~ $local_options ]] && use_repo_config=1\n  done\n\n  if [ -z \"$*\" ]; then\n    # with no parameters, provide some helpful documentation\n    echo \"yadm supports the following configurations:\"\n    echo\n    local IFS=$'\\n'\n    for supported_config in $(introspect_configs); do\n      echo \"  ${supported_config}\"\n    done\n    echo\n    local msg\n    read -r -d '' msg <<EOF\nPlease read the CONFIGURATION section in the man\npage for more details about configurations, and\nhow to adjust them.\nEOF\n    printf '%s\\n' \"$msg\"\n  elif [ \"$use_repo_config\" -eq 1 ]; then\n\n    require_repo\n\n    # operate on the yadm repo's configuration file\n    # this is always local to the machine\n    \"$GIT_PROGRAM\" config \"$@\"\n\n    CHANGES_POSSIBLE=1\n\n  else\n    # make sure parent folder of config file exists\n    assert_parent \"$YADM_CONFIG\"\n    # operate on the yadm configuration file\n    \"$GIT_PROGRAM\" config --file=\"$(mixed_path \"$YADM_CONFIG\")\" \"$@\"\n\n  fi\n\n}\n\nfunction _set_gpg_options() {\n  gpg_key=\"$(config yadm.gpg-recipient)\"\n  if [ \"$gpg_key\" = \"ASK\" ]; then\n    GPG_OPTS=(\"--no-default-recipient\" \"-e\")\n  elif [ \"$gpg_key\" != \"\" ]; then\n    GPG_OPTS=(\"-e\")\n    for key in $gpg_key; do\n      GPG_OPTS+=(\"-r $key\")\n    done\n  else\n    GPG_OPTS=(\"-c\")\n  fi\n}\n\nfunction _get_openssl_ciphername() {\n  OPENSSL_CIPHERNAME=\"$(config yadm.openssl-ciphername)\"\n  if [ -z \"$OPENSSL_CIPHERNAME\" ]; then\n    OPENSSL_CIPHERNAME=\"aes-256-cbc\"\n  fi\n  echo \"$OPENSSL_CIPHERNAME\"\n}\n\nfunction _set_openssl_options() {\n  cipher_name=\"$(_get_openssl_ciphername)\"\n  OPENSSL_OPTS=(\"-${cipher_name}\" -salt)\n  if [ \"$(config --bool yadm.openssl-old)\" == \"true\" ]; then\n    OPENSSL_OPTS+=(-md md5)\n  else\n    OPENSSL_OPTS+=(-pbkdf2 -iter 100000 -md sha512)\n  fi\n}\n\nfunction _get_cipher() {\n  output_archive=\"$1\"\n  yadm_cipher=\"$(config yadm.cipher)\"\n  if [ -z \"$yadm_cipher\" ]; then\n    yadm_cipher=\"gpg\"\n  fi\n}\n\nfunction _decrypt_from() {\n\n  local output_archive\n  local yadm_cipher\n  _get_cipher \"$1\"\n\n  case \"$yadm_cipher\" in\n    gpg)\n      require_gpg\n      $GPG_PROGRAM -d \"$output_archive\"\n      ;;\n\n    openssl)\n      require_openssl\n      _set_openssl_options\n      $OPENSSL_PROGRAM enc -d \"${OPENSSL_OPTS[@]}\" -in \"$output_archive\"\n      ;;\n\n    *)\n      error_out \"Unknown cipher '$yadm_cipher'\"\n      ;;\n\n  esac\n\n}\n\nfunction _encrypt_to() {\n\n  local output_archive\n  local yadm_cipher\n  _get_cipher \"$1\"\n\n  case \"$yadm_cipher\" in\n    gpg)\n      require_gpg\n      _set_gpg_options\n      $GPG_PROGRAM --yes \"${GPG_OPTS[@]}\" --output \"$output_archive\"\n      ;;\n\n    openssl)\n      require_openssl\n      _set_openssl_options\n      $OPENSSL_PROGRAM enc -e \"${OPENSSL_OPTS[@]}\" -out \"$output_archive\"\n      ;;\n\n    *)\n      error_out \"Unknown cipher '$yadm_cipher'\"\n      ;;\n\n  esac\n\n}\n\nfunction decrypt() {\n\n  require_archive\n\n  [ -f \"$YADM_ENCRYPT\" ] && exclude_encrypted\n\n  if [ \"$DO_LIST\" = \"YES\" ]; then\n    tar_option=\"t\"\n  else\n    tar_option=\"x\"\n  fi\n\n  # decrypt the archive\n  if (_decrypt_from \"$YADM_ARCHIVE\" || echo 1) | tar v${tar_option}f - -C \"$YADM_WORK\"; then\n    [ ! \"$DO_LIST\" = \"YES\" ] && echo \"All files decrypted.\"\n  else\n    error_out \"Unable to extract encrypted files.\"\n  fi\n\n  CHANGES_POSSIBLE=1\n\n}\n\nfunction encrypt() {\n\n  require_encrypt\n  exclude_encrypted\n  parse_encrypt\n\n  cd_work \"Encryption\" || return\n\n  # report which files will be encrypted\n  echo \"Encrypting the following files:\"\n  printf '%s\\n' \"${ENCRYPT_INCLUDE_FILES[@]}\"\n  echo\n\n  # encrypt all files which match the globs\n  if tar -f - -c \"${ENCRYPT_INCLUDE_FILES[@]}\" | _encrypt_to \"$YADM_ARCHIVE\"; then\n    echo \"Wrote new file: $YADM_ARCHIVE\"\n  else\n    error_out \"Unable to write $YADM_ARCHIVE\"\n  fi\n\n  # offer to add YADM_ARCHIVE if untracked\n  archive_status=$(\"$GIT_PROGRAM\" status --porcelain -uall \"$(mixed_path \"$YADM_ARCHIVE\")\" 2>/dev/null)\n  archive_regex=\"^\\?\\?\"\n  if [[ $archive_status =~ $archive_regex ]]; then\n    echo \"It appears that $YADM_ARCHIVE is not tracked by yadm's repository.\"\n    echo \"Would you like to add it now? (y/n)\"\n    read -r answer </dev/tty\n    if [[ $answer =~ ^[yY]$ ]]; then\n      \"$GIT_PROGRAM\" add \"$(mixed_path \"$YADM_ARCHIVE\")\"\n    fi\n  fi\n\n  CHANGES_POSSIBLE=1\n\n}\n\nfunction git_crypt() {\n  require_git_crypt\n  enter \"${GIT_CRYPT_PROGRAM} $*\"\n}\n\nfunction transcrypt() {\n  require_transcrypt\n  enter \"${TRANSCRYPT_PROGRAM} $*\"\n}\n\nfunction enter() {\n  command=\"$*\"\n  require_shell\n  require_repo\n\n  local -a shell_opts\n  local shell_path=\"\"\n  if [[ \"$SHELL\" =~ bash$ ]]; then\n    shell_opts=(\"--norc\")\n    shell_path=\"\\w\"\n  elif [[ \"$SHELL\" =~ [cz]sh$ ]]; then\n    shell_opts=(\"-f\")\n    if [[ \"$SHELL\" =~ zsh$ && \"$TERM\" = \"dumb\" ]]; then\n      # Disable ZLE for tramp\n      shell_opts+=(\"--no-zle\")\n    fi\n    shell_path=\"%~\"\n  fi\n\n  shell_cmd=()\n  if [ -n \"$command\" ]; then\n    shell_cmd=('-c' \"$*\")\n  fi\n\n  GIT_WORK_TREE=\"$YADM_WORK\"\n  export GIT_WORK_TREE\n\n  [ \"${#shell_cmd[@]}\" -eq 0 ] && echo \"Entering yadm repo\"\n\n  yadm_prompt=\"yadm shell ($YADM_REPO) $shell_path > \"\n  PROMPT=\"$yadm_prompt\" PS1=\"$yadm_prompt\" \"$SHELL\" \"${shell_opts[@]}\" \"${shell_cmd[@]}\"\n  return_code=\"$?\"\n\n  if [ \"${#shell_cmd[@]}\" -eq 0 ]; then\n    echo \"Leaving yadm repo\"\n  else\n    exit_with_hook \"$return_code\"\n  fi\n}\n\nfunction git_command() {\n\n  require_repo\n\n  # translate 'gitconfig' to 'config' -- 'config' is reserved for yadm\n  if [ \"$1\" = \"gitconfig\" ]; then\n    set -- \"config\" \"${@:2}\"\n  fi\n\n  # ensure private .ssh and .gnupg directories exist first\n  # TODO: consider restricting this to only commands which modify the work-tree\n\n  if [ \"$YADM_WORK\" = \"$HOME\" ]; then\n    auto_private_dirs=$(config --bool yadm.auto-private-dirs)\n    if [ \"$auto_private_dirs\" != \"false\" ]; then\n      for pdir in $(private_dirs all); do\n        assert_private_dirs \"$pdir\"\n      done\n    fi\n  fi\n\n  CHANGES_POSSIBLE=1\n\n  # pass commands through to git\n  debug \"Running git command $GIT_PROGRAM $*\"\n  \"$GIT_PROGRAM\" \"$@\"\n  return \"$?\"\n}\n\nfunction help() {\n  readonly config=\"${YADM_CONFIG/$HOME/\\$HOME}\"\n  readonly encrypt=\"${YADM_ENCRYPT/$HOME/\\$HOME}\"\n  readonly bootstrap=\"${YADM_BOOTSTRAP/$HOME/\\$HOME}\"\n  readonly repo=\"${YADM_REPO/$HOME/\\$HOME}\"\n  readonly archive=\"${YADM_ARCHIVE/$HOME/\\$HOME}\"\n\n  readonly padding=\"                                \"\n\n  local msg\n  IFS='' read -r -d '' msg <<EOF\nUsage: yadm <command> [options...]\n\nManage dotfiles maintained in a Git repository. Manage alternate files\nfor specific systems or hosts. Encrypt/decrypt private files.\n\nGit Commands:\nAny Git command or alias can be used as a <command>. It will operate\non yadm's repository and files in the work tree (usually \\$HOME).\n\nCommands:\n  yadm init [-f]             - Initialize an empty repository\n  yadm clone <url> [-f]      - Clone an existing repository\n  yadm config <name> <value> - Configure a setting\n  yadm list [-a]             - List tracked files\n  yadm alt                   - Create links for alternates\n  yadm bootstrap             - Execute \\$HOME/.config/yadm/bootstrap\n  yadm encrypt               - Encrypt files\n  yadm decrypt [-l]          - Decrypt files\n  yadm perms                 - Fix perms for private files\n  yadm enter [COMMAND]       - Run sub-shell with GIT variables set\n  yadm git-crypt [OPTIONS]   - Run git-crypt commands for the yadm repo\n  yadm transcrypt [OPTIONS]  - Run transcrypt commands for the yadm repo\n\nFiles:\n  $config${padding:${#config}} - yadm's configuration file\n  $encrypt${padding:${#encrypt}} - List of globs to encrypt/decrypt\n  $bootstrap${padding:${#bootstrap}} - Script run via: yadm bootstrap\n  $repo${padding:${#repo}} - yadm's Git repository\n  $archive${padding:${#archive}} - Encrypted data stored here\n\nUse \"man yadm\" for complete documentation.\nEOF\n  printf '%s\\n' \"$msg\"\n  exit_with_hook 1\n\n}\n\n# shellcheck disable=SC2120\nfunction init() {\n\n  # safety check, don't attempt to init when the repo is already present\n  [ -d \"$YADM_REPO\" ] && [ -z \"$FORCE\" ] &&\n    error_out \"Git repo already exists. [$YADM_REPO]\\nUse '-f' if you want to force it to be overwritten.\"\n\n  # remove existing if forcing the init to happen anyway\n  [ -d \"$YADM_REPO\" ] && {\n    debug \"Removing existing repo prior to init\"\n    \"$GIT_PROGRAM\" -C \"$YADM_WORK\" submodule deinit -f --all\n    rm -rf \"$YADM_REPO\"\n  }\n\n  # init a new bare repo\n  debug \"Init new repo\"\n  \"$GIT_PROGRAM\" init --shared=0600 --bare \"$(mixed_path \"$YADM_REPO\")\" \"$@\"\n  configure_repo\n\n  CHANGES_POSSIBLE=1\n\n}\n\nfunction introspect() {\n  case \"$1\" in\n    commands | configs | repo | switches)\n      \"introspect_$1\"\n      ;;\n  esac\n}\n\nfunction introspect_commands() {\n  local msg\n  read -r -d '' msg <<-EOF\nalt\nbootstrap\nclean\nclone\nconfig\ndecrypt\nencrypt\nenter\ngit-crypt\ngitconfig\nhelp\ninit\nintrospect\nlist\nperms\ntranscrypt\nupgrade\nversion\nEOF\n  printf '%s' \"$msg\"\n}\n\nfunction introspect_configs() {\n  local msg\n  read -r -d '' msg <<-EOF\nlocal.arch\nlocal.class\nlocal.distro\nlocal.distro-family\nlocal.hostname\nlocal.os\nlocal.user\nyadm.alt-copy\nyadm.auto-alt\nyadm.auto-exclude\nyadm.auto-perms\nyadm.auto-private-dirs\nyadm.cipher\nyadm.git-program\nyadm.gpg-perms\nyadm.gpg-program\nyadm.gpg-recipient\nyadm.openssl-ciphername\nyadm.openssl-old\nyadm.openssl-program\nyadm.ssh-perms\nEOF\n  printf '%s' \"$msg\"\n}\n\nfunction introspect_repo() {\n  echo \"$YADM_REPO\"\n}\n\nfunction introspect_switches() {\n  local msg\n  read -r -d '' msg <<-EOF\n--yadm-archive\n--yadm-bootstrap\n--yadm-config\n--yadm-data\n--yadm-dir\n--yadm-encrypt\n--yadm-repo\n-Y\nEOF\n  printf '%s' \"$msg\"\n}\n\nfunction list() {\n\n  require_repo\n\n  # process relative to YADM_WORK when --all is specified\n  if [ -n \"$LIST_ALL\" ]; then\n    cd_work \"List\" || return\n  fi\n\n  # list tracked files\n  \"$GIT_PROGRAM\" ls-files\n\n}\n\nfunction perms() {\n\n  parse_encrypt\n\n  # TODO: prevent repeats in the files changed\n\n  cd_work \"Perms\" || return\n\n  GLOBS=()\n\n  # include the archive created by \"encrypt\"\n  [ -f \"$YADM_ARCHIVE\" ] && GLOBS+=(\"$YADM_ARCHIVE\")\n\n  # only include private globs if using HOME as worktree\n  if [ \"$YADM_WORK\" = \"$HOME\" ]; then\n    # include all .ssh files (unless disabled)\n    if [[ $(config --bool yadm.ssh-perms) != \"false\" ]]; then\n      GLOBS+=(\".ssh\" \".ssh/*\" \".ssh/.[!.]*\")\n    fi\n\n    # include all gpg files (unless disabled)\n    gnupghome=\"$(private_dirs gnupg)\"\n    if [[ $(config --bool yadm.gpg-perms) != \"false\" ]]; then\n      GLOBS+=(\"${gnupghome}\" \"${gnupghome}/*\" \"${gnupghome}/.[!.]*\")\n    fi\n  fi\n\n  # include any files we encrypt\n  GLOBS+=(\"${ENCRYPT_INCLUDE_FILES[@]}\")\n\n  # remove group/other permissions from collected globs\n  #shellcheck disable=SC2068\n  #(SC2068 is disabled because in this case, we desire globbing)\n  chmod -f go-rwx ${GLOBS[@]} &>/dev/null\n  # TODO: detect and report changing permissions in a portable way\n\n}\n\nfunction upgrade() {\n\n  local actions_performed=0\n  local -a submodules\n  local repo_updates=0\n\n  [[ -n \"${YADM_OVERRIDE_REPO}${YADM_OVERRIDE_ARCHIVE}\" || \"$YADM_DATA\" = \"$YADM_DIR\" ]] &&\n    error_out \"Unable to upgrade. Paths have been overridden with command line options\"\n\n  # choose a legacy repo, the version 2 location will be favored\n  local LEGACY_REPO=\n  [ -d \"$YADM_LEGACY_DIR/repo.git\" ] && LEGACY_REPO=\"$YADM_LEGACY_DIR/repo.git\"\n  [ -d \"$YADM_DIR/repo.git\" ] && LEGACY_REPO=\"$YADM_DIR/repo.git\"\n\n  # handle legacy repo\n  if [ -d \"$LEGACY_REPO\" ]; then\n    # choose\n    # legacy repo detected, it must be moved to YADM_REPO\n    if [ -e \"$YADM_REPO\" ]; then\n      error_out \"Unable to upgrade. '$YADM_REPO' already exists. Refusing to overwrite it.\"\n    else\n      actions_performed=1\n      echo \"Moving $LEGACY_REPO to $YADM_REPO\"\n\n      export GIT_DIR=\"$LEGACY_REPO\"\n\n      # Must absorb git dirs, otherwise deinit below will fail for modules that have\n      # been cloned first and then added as a submodule.\n      \"$GIT_PROGRAM\" submodule absorbgitdirs\n\n      local submodule_status\n      submodule_status=$(\"$GIT_PROGRAM\" -C \"$YADM_WORK\" submodule status)\n      while read -r sha submodule rest; do\n        [ \"$submodule\" == \"\" ] && continue\n        if [[ \"$sha\" = -* ]]; then\n          continue\n        fi\n        \"$GIT_PROGRAM\" -C \"$YADM_WORK\" submodule deinit ${FORCE:+-f} -- \"$submodule\" || {\n          for other in \"${submodules[@]}\"; do\n            \"$GIT_PROGRAM\" -C \"$YADM_WORK\" submodule update --init --recursive -- \"$other\"\n          done\n          error_out \"Unable to upgrade. Could not deinit submodule $submodule\"\n        }\n        submodules+=(\"$submodule\")\n      done <<<\"$submodule_status\"\n\n      assert_parent \"$YADM_REPO\"\n      mv \"$LEGACY_REPO\" \"$YADM_REPO\"\n    fi\n  fi\n  GIT_DIR=\"$YADM_REPO\"\n  export GIT_DIR\n\n  # choose a legacy archive, the version 2 location will be favored\n  local LEGACY_ARCHIVE=\n  [ -e \"$YADM_LEGACY_DIR/$YADM_LEGACY_ARCHIVE\" ] && LEGACY_ARCHIVE=\"$YADM_LEGACY_DIR/$YADM_LEGACY_ARCHIVE\"\n  [ -e \"$YADM_DIR/$YADM_LEGACY_ARCHIVE\" ] && LEGACY_ARCHIVE=\"$YADM_DIR/$YADM_LEGACY_ARCHIVE\"\n\n  # handle legacy archive\n  if [ -e \"$LEGACY_ARCHIVE\" ]; then\n    actions_performed=1\n    echo \"Moving $LEGACY_ARCHIVE to $YADM_ARCHIVE\"\n    assert_parent \"$YADM_ARCHIVE\"\n    # test to see if path is \"tracked\" in repo, if so 'git mv' must be used\n    if \"$GIT_PROGRAM\" ls-files --error-unmatch \"$LEGACY_ARCHIVE\" &>/dev/null; then\n      \"$GIT_PROGRAM\" mv \"$LEGACY_ARCHIVE\" \"$YADM_ARCHIVE\" && repo_updates=1\n    else\n      mv -i \"$LEGACY_ARCHIVE\" \"$YADM_ARCHIVE\"\n    fi\n  fi\n\n  # handle any remaining version 1 paths\n  for legacy_path in \\\n    \"$YADM_LEGACY_DIR/config\" \\\n    \"$YADM_LEGACY_DIR/encrypt\" \\\n    \"$YADM_LEGACY_DIR/bootstrap\" \\\n    \"$YADM_LEGACY_DIR\"/hooks/{pre,post}_*; do\n    if [ -e \"$legacy_path\" ]; then\n      new_filename=\"${legacy_path#\"$YADM_LEGACY_DIR/\"}\"\n      new_filename=\"$YADM_DIR/$new_filename\"\n      actions_performed=1\n      echo \"Moving $legacy_path to $new_filename\"\n      assert_parent \"$new_filename\"\n      # test to see if path is \"tracked\" in repo, if so 'git mv' must be used\n      if \"$GIT_PROGRAM\" ls-files --error-unmatch \"$legacy_path\" &>/dev/null; then\n        \"$GIT_PROGRAM\" mv \"$legacy_path\" \"$new_filename\" && repo_updates=1\n      else\n        mv -i \"$legacy_path\" \"$new_filename\"\n      fi\n    fi\n  done\n\n  # handle submodules, which need to be reinitialized\n  for submodule in \"${submodules[@]}\"; do\n    \"$GIT_PROGRAM\" -C \"$YADM_WORK\" submodule update --init --recursive -- \"$submodule\"\n  done\n\n  [ \"$actions_performed\" -eq 0 ] &&\n    echo \"No legacy paths found. Upgrade is not necessary\"\n\n  [ \"$repo_updates\" -eq 1 ] &&\n    echo \"Some files tracked by yadm have been renamed. These changes should probably be commited now.\"\n\n  exit 0\n\n}\n\nfunction version() {\n\n  echo \"bash version $BASH_VERSION\"\n  printf \" \"\n  \"$GIT_PROGRAM\" --version\n  echo \"yadm version $VERSION\"\n  exit_with_hook 0\n\n}\n\n# ****** Utility Functions ******\n\nfunction exclude_encrypted() {\n\n  auto_exclude=$(config --bool yadm.auto-exclude)\n  [ \"$auto_exclude\" == \"false\" ] && return 0\n\n  exclude_path=\"${YADM_REPO}/info/exclude\"\n  newline=$'\\n'\n  exclude_flag=\"# yadm-auto-excludes\"\n  exclude_header=\"${exclude_flag}${newline}\"\n  exclude_header=\"${exclude_header}# This section is managed by yadm.\"\n  exclude_header=\"${exclude_header}${newline}\"\n  exclude_header=\"${exclude_header}# Any edits below will be lost.\"\n  exclude_header=\"${exclude_header}${newline}\"\n\n  # do nothing if there is no YADM_ENCRYPT\n  [ -e \"$YADM_ENCRYPT\" ] || return 0\n\n  # read encrypt\n  encrypt_data=\"\"\n  while IFS='' read -r line || [ -n \"$line\" ]; do\n    encrypt_data=\"${encrypt_data}${line}${newline}\"\n  done <\"$YADM_ENCRYPT\"\n\n  # read info/exclude\n  unmanaged=\"\"\n  managed=\"\"\n  if [ -e \"$exclude_path\" ]; then\n    flag_seen=0\n    while IFS='' read -r line || [ -n \"$line\" ]; do\n      [ \"$line\" = \"$exclude_flag\" ] && flag_seen=1\n      if [ \"$flag_seen\" -eq 0 ]; then\n        unmanaged=\"${unmanaged}${line}${newline}\"\n      else\n        managed=\"${managed}${line}${newline}\"\n      fi\n    done <\"$exclude_path\"\n  fi\n\n  if [ \"${exclude_header}${encrypt_data}\" != \"$managed\" ]; then\n    debug \"Updating ${exclude_path}\"\n    assert_parent \"$exclude_path\"\n    printf \"%s\" \"${unmanaged}${exclude_header}${encrypt_data}\" >\"$exclude_path\"\n  fi\n\n  return 0\n\n}\n\nfunction query_distro() {\n  local distro=\"\"\n  if command -v \"$LSB_RELEASE_PROGRAM\" &>/dev/null; then\n    distro=$($LSB_RELEASE_PROGRAM -si 2>/dev/null)\n  elif [ -f \"$OS_RELEASE\" ]; then\n    while IFS='' read -r line || [ -n \"$line\" ]; do\n      if [[ \"$line\" = ID=* ]]; then\n        distro=\"${line#ID=}\"\n        distro=\"${distro//\\\"/}\"\n        break\n      fi\n    done <\"$OS_RELEASE\"\n  fi\n  echo \"$distro\"\n}\n\nfunction query_distro_family() {\n  local family=\"\"\n  if [ -f \"$OS_RELEASE\" ]; then\n    while IFS='' read -r line || [ -n \"$line\" ]; do\n      if [[ \"$line\" = ID_LIKE=* ]]; then\n        family=\"${line#ID_LIKE=}\"\n        break\n      elif [[ \"$line\" = ID=* ]]; then\n        family=\"${line#ID=}\"\n        # No break, only used as fallback in case ID_LIKE isn't found\n      fi\n    done <\"$OS_RELEASE\"\n  fi\n  echo \"${family//\\\"/}\"\n}\n\nfunction process_global_args() {\n\n  # global arguments are removed before the main processing is done\n  MAIN_ARGS=()\n  while [[ $# -gt 0 ]]; do\n    key=\"$1\"\n    case $key in\n      -Y | --yadm-dir) # override the standard YADM_DIR\n        YADM_DIR=\"$(qualify_path \"$2\" \"yadm\")\"\n        shift\n        ;;\n      --yadm-data) # override the standard YADM_DATA\n        YADM_DATA=\"$(qualify_path \"$2\" \"data\")\"\n        shift\n        ;;\n      --yadm-repo) # override the standard YADM_REPO\n        YADM_OVERRIDE_REPO=\"$(qualify_path \"$2\" \"repo\")\"\n        shift\n        ;;\n      --yadm-config) # override the standard YADM_CONFIG\n        YADM_OVERRIDE_CONFIG=\"$(qualify_path \"$2\" \"config\")\"\n        shift\n        ;;\n      --yadm-encrypt) # override the standard YADM_ENCRYPT\n        YADM_OVERRIDE_ENCRYPT=\"$(qualify_path \"$2\" \"encrypt\")\"\n        shift\n        ;;\n      --yadm-archive) # override the standard YADM_ARCHIVE\n        YADM_OVERRIDE_ARCHIVE=\"$(qualify_path \"$2\" \"archive\")\"\n        shift\n        ;;\n      --yadm-bootstrap) # override the standard YADM_BOOTSTRAP\n        YADM_OVERRIDE_BOOTSTRAP=\"$(qualify_path \"$2\" \"bootstrap\")\"\n        shift\n        ;;\n      *) # main arguments are kept intact\n        MAIN_ARGS+=(\"$1\")\n        ;;\n    esac\n    shift\n  done\n\n}\n\nfunction qualify_path() {\n  local path=\"$1\"\n  if [ -z \"$path\" ]; then\n    error_out \"You can't specify an empty $2 path\"\n  fi\n\n  if [ \"$path\" = \".\" ]; then\n    path=\"$PWD\"\n  elif [[ \"$path\" != /* ]]; then\n    path=\"$PWD/${path#./}\"\n  fi\n  echo \"$path\"\n}\n\nfunction set_yadm_dirs() {\n\n  # only resolve YADM_DATA if it hasn't been provided already\n  if [ -z \"$YADM_DATA\" ]; then\n    local base_yadm_data=\"$XDG_DATA_HOME\"\n    if [[ ! \"$base_yadm_data\" =~ ^/ ]]; then\n      base_yadm_data=\"${HOME}/.local/share\"\n    fi\n    YADM_DATA=\"${base_yadm_data}/yadm\"\n  fi\n\n  # only resolve YADM_DIR if it hasn't been provided already\n  if [ -z \"$YADM_DIR\" ]; then\n    local base_yadm_dir=\"$XDG_CONFIG_HOME\"\n    if [[ ! \"$base_yadm_dir\" =~ ^/ ]]; then\n      base_yadm_dir=\"${HOME}/.config\"\n    fi\n    YADM_DIR=\"${base_yadm_dir}/yadm\"\n  fi\n\n  issue_legacy_path_warning\n\n}\n\nfunction issue_legacy_path_warning() {\n\n  # no warnings during upgrade\n  [[ \"${MAIN_ARGS[*]}\" =~ upgrade ]] && return\n\n  # no warnings if YADM_DIR is resolved as the leacy path\n  [ \"$YADM_DIR\" = \"$YADM_LEGACY_DIR\" ] && return\n\n  # no warnings if overrides have been provided\n  [[ -n \"${YADM_OVERRIDE_REPO}${YADM_OVERRIDE_ARCHIVE}\" || \"$YADM_DATA\" = \"$YADM_DIR\" ]] && return\n\n  # test for legacy paths\n  local legacy_found=()\n  # this is ordered by importance\n  for legacy_path in \\\n    \"$YADM_DIR/$YADM_REPO\" \\\n    \"$YADM_DIR/$YADM_LEGACY_ARCHIVE\" \\\n    \"$YADM_LEGACY_DIR/$YADM_REPO\" \\\n    \"$YADM_LEGACY_DIR/$YADM_BOOTSTRAP\" \\\n    \"$YADM_LEGACY_DIR/$YADM_CONFIG\" \\\n    \"$YADM_LEGACY_DIR/$YADM_ENCRYPT\" \\\n    \"$YADM_LEGACY_DIR/$YADM_HOOKS\"/{pre,post}_* \\\n    \"$YADM_LEGACY_DIR/$YADM_LEGACY_ARCHIVE\"; do\n    [ -e \"$legacy_path\" ] && legacy_found+=(\"$legacy_path\")\n  done\n\n  [ ${#legacy_found[@]} -eq 0 ] && return\n\n  local path_list\n  for legacy_path in \"${legacy_found[@]}\"; do\n    path_list=\"$path_list    * $legacy_path\"$'\\n'\n  done\n\n  local msg\n  IFS='' read -r -d '' msg <<EOF\n\n**WARNING**\n  Legacy paths have been detected.\n\n  With version 3.0.0, yadm uses the XDG Base Directory Specification\n  to find its configurations and data. Read more about these changes here:\n\n    https://yadm.io/docs/upgrade_from_2\n    https://yadm.io/docs/upgrade_from_1\n\n  In your environment, the data directory has been resolved to:\n\n    $YADM_DATA\n\n  To remove this warning do one of the following:\n    * Run \"yadm upgrade\" to move the yadm data to the new paths. (RECOMMENDED)\n    * Manually move yadm data to new default paths and reinit any submodules.\n    * Specify your preferred paths with --yadm-data and --yadm-archive each execution.\n\n  Legacy paths detected:\n${path_list}\n***********\nEOF\n  printf '%s\\n' \"$msg\" >&2\n  LEGACY_WARNING_ISSUED=1\n\n}\n\nfunction configure_paths() {\n\n  # change paths to be relative to YADM_DIR\n  YADM_CONFIG=\"$YADM_DIR/$YADM_CONFIG\"\n  YADM_ENCRYPT=\"$YADM_DIR/$YADM_ENCRYPT\"\n  YADM_BOOTSTRAP=\"$YADM_DIR/$YADM_BOOTSTRAP\"\n  YADM_HOOKS=\"$YADM_DIR/$YADM_HOOKS\"\n  YADM_ALT=\"$YADM_DIR/$YADM_ALT\"\n\n  # change paths to be relative to YADM_DATA\n  YADM_REPO=\"$YADM_DATA/$YADM_REPO\"\n  YADM_ARCHIVE=\"$YADM_DATA/$YADM_ARCHIVE\"\n\n  # independent overrides for paths\n  if [ -n \"$YADM_OVERRIDE_REPO\" ]; then\n    YADM_REPO=\"$YADM_OVERRIDE_REPO\"\n  fi\n  if [ -n \"$YADM_OVERRIDE_CONFIG\" ]; then\n    YADM_CONFIG=\"$YADM_OVERRIDE_CONFIG\"\n  fi\n  if [ -n \"$YADM_OVERRIDE_ENCRYPT\" ]; then\n    YADM_ENCRYPT=\"$YADM_OVERRIDE_ENCRYPT\"\n  fi\n  if [ -n \"$YADM_OVERRIDE_ARCHIVE\" ]; then\n    YADM_ARCHIVE=\"$YADM_OVERRIDE_ARCHIVE\"\n  fi\n  if [ -n \"$YADM_OVERRIDE_BOOTSTRAP\" ]; then\n    YADM_BOOTSTRAP=\"$YADM_OVERRIDE_BOOTSTRAP\"\n  fi\n\n  # use the yadm repo for all git operations\n  GIT_DIR=$(mixed_path \"$YADM_REPO\")\n  export GIT_DIR\n\n  # obtain YADM_WORK from repo if it exists\n  if [ -d \"$GIT_DIR\" ]; then\n    local work\n    work=$(unix_path \"$(\"$GIT_PROGRAM\" config core.worktree)\")\n    [ -n \"$work\" ] && YADM_WORK=\"$work\"\n  fi\n\n  # YADM_BASE is used for manipulating the base worktree path for much of the\n  # alternate file processing\n  if [ \"$YADM_WORK\" == \"/\" ]; then\n    YADM_BASE=\"\"\n  else\n    YADM_BASE=\"$YADM_WORK\"\n  fi\n\n}\n\nfunction configure_repo() {\n\n  debug \"Configuring new repo\"\n\n  # change bare to false (there is a working directory)\n  \"$GIT_PROGRAM\" config core.bare 'false'\n\n  # set the worktree for the yadm repo\n  \"$GIT_PROGRAM\" config core.worktree \"$(mixed_path \"$YADM_WORK\")\"\n\n  # by default, do not show untracked files and directories\n  \"$GIT_PROGRAM\" config status.showUntrackedFiles no\n\n  # possibly used later to ensure we're working on the yadm repo\n  \"$GIT_PROGRAM\" config yadm.managed 'true'\n\n}\n\nfunction set_operating_system() {\n\n  if [[ \"$(<$PROC_VERSION)\" =~ [Mm]icrosoft ]]; then\n    OPERATING_SYSTEM=\"WSL\"\n  else\n    OPERATING_SYSTEM=$(uname -s)\n  fi 2>/dev/null\n\n  case \"$OPERATING_SYSTEM\" in\n    CYGWIN* | MINGW* | MSYS*)\n      git_version=\"$(\"$GIT_PROGRAM\" --version 2>/dev/null)\"\n      if [[ \"$git_version\" =~ windows ]]; then\n        USE_CYGPATH=1\n      fi\n      OPERATING_SYSTEM=$(uname -o)\n      ;;\n    *) ;;\n  esac\n\n}\n\nfunction set_awk() {\n  local pgm\n  for pgm in \"${AWK_PROGRAM[@]}\"; do\n    command -v \"$pgm\" &>/dev/null && AWK_PROGRAM=(\"$pgm\") && return\n  done\n}\n\nfunction debug() {\n\n  [ -n \"$DEBUG\" ] && echo_e \"DEBUG: $*\"\n\n}\n\nfunction error_out() {\n\n  echo_e \"ERROR: $*\" >&2\n  exit_with_hook 1\n\n}\n\nfunction exit_with_hook() {\n\n  invoke_hook \"post\" \"$1\"\n  exit \"$1\"\n\n}\n\nfunction invoke_hook() {\n\n  mode=\"$1\"\n  exit_status=\"$2\"\n  hook_command=\"${YADM_HOOKS}/${mode}_$HOOK_COMMAND\"\n\n  if [ -x \"$hook_command\" ] ||\n    { [[ $OPERATING_SYSTEM == MINGW* ]] && [ -f \"$hook_command\" ]; }; then\n    debug \"Invoking hook: $hook_command\"\n\n    # expose some internal data to all hooks\n    YADM_HOOK_COMMAND=$HOOK_COMMAND\n    YADM_HOOK_DIR=$YADM_DIR\n    YADM_HOOK_DATA=$YADM_DATA\n    YADM_HOOK_EXIT=$exit_status\n    YADM_HOOK_FULL_COMMAND=$FULL_COMMAND\n    YADM_HOOK_REPO=$YADM_REPO\n    YADM_HOOK_WORK=$YADM_WORK\n\n    # pack array to export it; filenames including a newline character (\\n)\n    # are NOT supported\n    YADM_ENCRYPT_INCLUDE_FILES=$(join_string $'\\n' \"${ENCRYPT_INCLUDE_FILES[@]}\")\n\n    export YADM_HOOK_COMMAND\n    export YADM_HOOK_DIR\n    export YADM_HOOK_DATA\n    export YADM_HOOK_EXIT\n    export YADM_HOOK_FULL_COMMAND\n    export YADM_HOOK_REPO\n    export YADM_HOOK_WORK\n    export YADM_ENCRYPT_INCLUDE_FILES\n\n    # export helper functions\n    export -f builtin_dirname\n    export -f relative_path\n    export -f unix_path\n    export -f mixed_path\n\n    \"$hook_command\"\n    hook_status=$?\n\n    # failing \"pre\" hooks will prevent commands from being run\n    if [ \"$mode\" = \"pre\" ] && [ \"$hook_status\" -ne 0 ]; then\n      echo \"Hook $hook_command was not successful\"\n      echo \"$HOOK_COMMAND will not be run\"\n      exit \"$hook_status\"\n    fi\n\n  fi\n\n}\n\nfunction private_dirs() {\n  fetch=\"$1\"\n  pdirs=(.ssh)\n  if [ -z \"${GNUPGHOME:-}\" ]; then\n    pdirs+=(.gnupg)\n  else\n    pdirs+=(\"$(relative_path \"$YADM_WORK\" \"$GNUPGHOME\")\")\n  fi\n  if [ \"$fetch\" = \"all\" ]; then\n    echo \"${pdirs[@]}\"\n  else\n    echo \"${pdirs[1]}\"\n  fi\n}\n\nfunction assert_private_dirs() {\n  for private_dir in \"$@\"; do\n    if [ ! -d \"$YADM_WORK/$private_dir\" ]; then\n      debug \"Creating $YADM_WORK/$private_dir\"\n      #shellcheck disable=SC2174\n      mkdir -m 0700 -p \"$YADM_WORK/$private_dir\" &>/dev/null\n    fi\n  done\n}\n\nfunction assert_parent() {\n  basedir=${1%/*}\n  if [ -n \"$basedir\" ]; then\n    [ -e \"$basedir\" ] || mkdir -p \"$basedir\"\n  fi\n}\n\nfunction display_private_perms() {\n  when=\"$1\"\n  for private_dir in $(private_dirs all); do\n    if [ -d \"$YADM_WORK/$private_dir\" ]; then\n      private_perms=$(ls -ld \"$YADM_WORK/$private_dir\")\n      debug \"$when\" private dir perms \"$private_perms\"\n    fi\n  done\n}\n\nfunction cd_work() {\n  cd \"$YADM_WORK\" || {\n    debug \"$1 not processed, unable to cd to $YADM_WORK\"\n    return 1\n  }\n  return 0\n}\n\nfunction parse_encrypt() {\n  if [ \"$ENCRYPT_INCLUDE_FILES\" != \"unparsed\" ]; then\n    #shellcheck disable=SC2034\n    PARSE_ENCRYPT_SHORT=\"parse_encrypt() not reprocessed\"\n    return\n  fi\n\n  ENCRYPT_INCLUDE_FILES=()\n\n  [ -f \"$YADM_ENCRYPT\" ] || return\n\n  cd_work \"Parsing encrypt\" || return\n\n  local -a exclude\n  local -a include\n\n  while IFS= read -r pattern; do\n    case $pattern in\n      \\#*)\n        # Ignore comments\n        ;;\n      !*)\n        exclude+=(\"--exclude=${pattern:1}\")\n        ;;\n      *)\n        if ! [[ $pattern =~ ^[[:blank:]]*$ ]]; then\n          include+=(\"$pattern\")\n        fi\n        ;;\n    esac\n  done <\"$YADM_ENCRYPT\"\n\n  if [[ ${#include} -gt 0 ]]; then\n    while IFS= read -r filename; do\n      ENCRYPT_INCLUDE_FILES+=(\"${filename%/}\")\n    done <<<\"$(\"$GIT_PROGRAM\" ls-files --others \"${exclude[@]}\" -- \"${include[@]}\")\"\n  fi\n}\n\nfunction builtin_dirname() {\n  # dirname is not builtin, and universally available, this is a built-in\n  # replacement using parameter expansion\n  local path=\"$1\"\n  while [ \"${path: -1}\" = \"/\" ]; do\n    path=\"${path%/}\"\n  done\n\n  local dir_name=\"${path%/*}\"\n  while [ \"${dir_name: -1}\" = \"/\" ]; do\n    dir_name=\"${dir_name%/}\"\n  done\n\n  if [ \"$path\" = \"$dir_name\" ]; then\n    dir_name=\".\"\n  elif [ -z \"$dir_name\" ]; then\n    dir_name=\"/\"\n  fi\n  echo \"$dir_name\"\n}\n\nfunction relative_path() {\n  # Output a path to $2/full, relative to $1/base\n  #\n  # This function created with ideas from\n  # https://stackoverflow.com/questions/2564634\n  local base=\"$1\"\n  if [ \"${base:0:1}\" != \"/\" ]; then\n    base=\"$PWD/$base\"\n  fi\n\n  local full=\"$2\"\n  if [ \"${full:0:1}\" != \"/\" ]; then\n    full=\"$PWD/$full\"\n  fi\n\n  local common_part=\"$base\"\n  local result=\"\"\n\n  while [ \"$common_part\" != \"$full\" ]; do\n    if [ \"$common_part\" = \"/\" ]; then\n      # No common part found. Append / if result is set to make the final\n      # result correct.\n      result=\"${result:+$result/}\"\n      break\n    elif [ \"${full#\"$common_part\"/}\" != \"$full\" ]; then\n      common_part=\"$common_part/\"\n      result=\"${result:+$result/}\"\n      break\n    fi\n    # Move to parent directory and update result\n    common_part=$(builtin_dirname \"$common_part\")\n    result=\"..${result:+/$result}\"\n  done\n\n  echo \"$result${full#\"$common_part\"}\"\n}\n\n# ****** Auto Functions ******\n\nfunction auto_alt() {\n\n  # process alternates if there are possible changes\n  if [ \"$CHANGES_POSSIBLE\" = \"1\" ]; then\n    auto_alt=$(config --bool yadm.auto-alt)\n    if [ \"$auto_alt\" != \"false\" ]; then\n      [ -d \"$YADM_REPO\" ] && alt\n    fi\n  fi\n\n}\n\nfunction auto_perms() {\n\n  # process permissions if there are possible changes\n  if [ \"$CHANGES_POSSIBLE\" = \"1\" ]; then\n    auto_perms=$(config --bool yadm.auto-perms)\n    if [ \"$auto_perms\" != \"false\" ]; then\n      [ -d \"$YADM_REPO\" ] && perms\n    fi\n  fi\n\n}\n\nfunction auto_bootstrap() {\n\n  bootstrap_available || return\n\n  [ \"$DO_BOOTSTRAP\" -eq 0 ] && return\n  [ \"$DO_BOOTSTRAP\" -eq 3 ] && return\n  [ \"$DO_BOOTSTRAP\" -eq 2 ] && bootstrap\n  if [ \"$DO_BOOTSTRAP\" -eq 1 ]; then\n    echo \"Found $YADM_BOOTSTRAP\"\n    echo \"It appears that a bootstrap program exists.\"\n    echo \"Would you like to execute it now? (y/n)\"\n    read -r answer </dev/tty\n    if [[ $answer =~ ^[yY]$ ]]; then\n      bootstrap\n    fi\n  fi\n\n}\n\n# ****** Helper Functions ******\n\nfunction join_string {\n  local IFS=\"$1\"\n  printf \"%s\" \"${*:2}\"\n}\n\nfunction in_list {\n  local element=\"$1\"\n  shift\n\n  for e in \"$@\"; do\n    [[ \"$e\" = \"$element\" ]] && return 0\n  done\n  return 1\n}\n\nfunction get_mode {\n  local filename=\"$1\"\n  local mode\n\n  # most *nixes\n  mode=$(stat -c '%a' \"$filename\" 2>/dev/null)\n  if [ -z \"$mode\" ]; then\n    # BSD-style\n    mode=$(stat -f '%p' \"$filename\" 2>/dev/null)\n    mode=${mode: -4}\n  fi\n\n  # only accept results if they are octal\n  if [[ ! $mode =~ ^[0-7]+$ ]]; then\n    return 1\n  fi\n\n  echo \"$mode\"\n}\n\nfunction copy_perms {\n  local source=\"$1\"\n  local target=\"$2\"\n\n  local mode\n  if ! mode=$(get_mode \"$source\") || ! chmod \"$mode\" \"$target\"; then\n    debug \"Unable to copy perms '$mode' from '$source' to '$target'\"\n  fi\n\n  return 0\n}\n\nfunction mk_tmp_dir {\n  local tempdir=\"$YADM_DATA/tmp.$$.$RANDOM\"\n  assert_parent \"$tempdir/\"\n  echo \"$tempdir\"\n}\n\n# ****** Prerequisites Functions ******\n\nfunction require_archive() {\n  [ -f \"$YADM_ARCHIVE\" ] || error_out \"$YADM_ARCHIVE does not exist. did you forget to create it?\"\n}\nfunction require_encrypt() {\n  [ -f \"$YADM_ENCRYPT\" ] || error_out \"$YADM_ENCRYPT does not exist. did you forget to create it?\"\n}\nfunction require_git() {\n  local alt_git\n  alt_git=\"$(config yadm.git-program)\"\n\n  local more_info=\"\"\n\n  if [ \"$alt_git\" != \"\" ]; then\n    GIT_PROGRAM=\"$alt_git\"\n    more_info=\"\\nThis command has been set via the yadm.git-program configuration.\"\n  fi\n  command -v \"$GIT_PROGRAM\" &>/dev/null ||\n    error_out \"This functionality requires Git to be installed, but the command '$GIT_PROGRAM' cannot be located.$more_info\"\n}\nfunction require_gpg() {\n  local alt_gpg\n  alt_gpg=\"$(config yadm.gpg-program)\"\n\n  local more_info=\"\"\n\n  if [ \"$alt_gpg\" != \"\" ]; then\n    GPG_PROGRAM=\"$alt_gpg\"\n    more_info=\"\\nThis command has been set via the yadm.gpg-program configuration.\"\n  fi\n  command -v \"$GPG_PROGRAM\" &>/dev/null ||\n    error_out \"This functionality requires GPG to be installed, but the command '$GPG_PROGRAM' cannot be located.$more_info\"\n}\nfunction require_openssl() {\n  local alt_openssl\n  alt_openssl=\"$(config yadm.openssl-program)\"\n\n  local more_info=\"\"\n\n  if [ \"$alt_openssl\" != \"\" ]; then\n    OPENSSL_PROGRAM=\"$alt_openssl\"\n    more_info=\"\\nThis command has been set via the yadm.openssl-program configuration.\"\n  fi\n  command -v \"$OPENSSL_PROGRAM\" &>/dev/null ||\n    error_out \"This functionality requires OpenSSL to be installed, but the command '$OPENSSL_PROGRAM' cannot be located.$more_info\"\n}\nfunction require_repo() {\n  [ -d \"$YADM_REPO\" ] || error_out \"Git repo does not exist. did you forget to run 'init' or 'clone'?\"\n}\nfunction require_shell() {\n  [ -x \"$SHELL\" ] || error_out \"\\$SHELL does not refer to an executable.\"\n}\nfunction require_git_crypt() {\n  command -v \"$GIT_CRYPT_PROGRAM\" &>/dev/null ||\n    error_out \"This functionality requires git-crypt to be installed, but the command '$GIT_CRYPT_PROGRAM' cannot be located.\"\n}\nfunction require_transcrypt() {\n  command -v \"$TRANSCRYPT_PROGRAM\" &>/dev/null ||\n    error_out \"This functionality requires transcrypt to be installed, but the command '$TRANSCRYPT_PROGRAM' cannot be located.\"\n}\nfunction bootstrap_available() {\n  [ -f \"$YADM_BOOTSTRAP\" ] && [ -x \"$YADM_BOOTSTRAP\" ] && return\n  return 1\n}\nfunction awk_available() {\n  command -v \"${AWK_PROGRAM[0]}\" &>/dev/null && return\n  return 1\n}\nfunction j2cli_available() {\n  command -v \"$J2CLI_PROGRAM\" &>/dev/null && return\n  return 1\n}\nfunction envtpl_available() {\n  command -v \"$ENVTPL_PROGRAM\" &>/dev/null && return\n  return 1\n}\nfunction esh_available() {\n  command -v \"$ESH_PROGRAM\" &>/dev/null && return\n  return 1\n}\nfunction readlink_available() {\n  command -v \"readlink\" &>/dev/null && return\n  return 1\n}\n\n# ****** Directory translations ******\n\nfunction unix_path() {\n  # for paths used by bash/yadm\n  if [ \"$USE_CYGPATH\" = \"1\" ]; then\n    cygpath -u \"$1\"\n  else\n    echo \"$1\"\n  fi\n}\nfunction mixed_path() {\n  # for paths used by Git\n  if [ \"$USE_CYGPATH\" = \"1\" ]; then\n    cygpath -m \"$1\"\n  else\n    echo \"$1\"\n  fi\n}\n\n# ****** echo replacements ******\n\nfunction echo() {\n  IFS=' '\n  printf '%s\\n' \"$*\"\n}\nfunction echo_n() {\n  IFS=' '\n  printf '%s' \"$*\"\n}\nfunction echo_e() {\n  IFS=' '\n  printf '%b\\n' \"$*\"\n}\n\n# ****** Main processing (when not unit testing) ******\n\nif [ \"$YADM_TEST\" != 1 ]; then\n  process_global_args \"$@\"\n  set_operating_system\n  set_awk\n  set_yadm_dirs\n  configure_paths\n  main \"${MAIN_ARGS[@]}\"\nfi\n"
        },
        {
          "name": "yadm.1",
          "type": "blob",
          "size": 29.3173828125,
          "content": ".\\\" vim: set spell so=8:\n.TH YADM 1 \"November 8, 2024\" \"3.3.0\"\n\n.SH NAME\n\nyadm \\- Yet Another Dotfiles Manager\n\n.SH SYNOPSIS\n\n.B yadm\n.I command\n.RI [ options ]\n\n.B yadm\n.I git-command-or-alias\n.RI [ options ]\n\n.B yadm init\n.RB [ \\-f ]\n.RB [ \\-w\n.IR dir ]\n\n.B yadm clone\n.I url\n.RB [ \\-f ]\n.RB [ \\-w\n.IR dir ]\n.RB [ \\-b\n.IR branch ]\n.RB [ \\-\\-bootstrap ]\n.RB [ \\-\\-no\\-bootstrap ]\n\n.B yadm config\n.I name\n.RI [ value ]\n\n.B yadm config\n.RB [ \\-e ]\n\n.B yadm list\n.RB [ \\-a ]\n\n.B yadm bootstrap\n\n.B yadm encrypt\n\n.B yadm decrypt\n.RB [ \\-l ]\n\n.B yadm alt\n\n.B yadm perms\n\n.B yadm enter\n.RI [ command ]\n\n.B yadm git\\-crypt\n.RI [ options ]\n\n.B yadm transcrypt\n.RI [ options ]\n\n.B yadm upgrade\n.RB [ \\-f ]\n\n.B yadm introspect\n.I category\n\n.SH DESCRIPTION\n\nyadm is a tool for managing a collection of files across multiple computers,\nusing a shared Git repository.\nIn addition, yadm provides a feature to select alternate versions of files for\nparticular systems.\nLastly, yadm supplies the ability to manage a subset of secure files, which are\nencrypted before they are included in the repository.\n\n.SH COMMANDS\n\n.TP\n.IR git-command \" or \" git-alias\nAny command not internally handled by yadm is passed through to\n.BR git (1).\nGit commands or aliases are invoked with the yadm managed repository.\nThe working directory for Git commands will be the configured\n.IR work-tree \\ (usually\\  $HOME ).\n\nDotfiles are managed by using standard\n.B git\ncommands;\n.IR add ,\n.IR commit ,\n.IR push ,\n.IR pull ,\netc.\n\n.RI The\\  config\ncommand is not passed directly through.\nInstead use the\n.I gitconfig\ncommand (see below).\n.TP\n.B alt\nCreate symbolic links and process templates for any managed files matching the\nnaming rules described in the ALTERNATES and TEMPLATES sections. It is usually\nunnecessary to run this command, as yadm automatically processes alternates by\ndefault. This automatic behavior can be disabled by setting the configuration\n.I yadm.auto-alt\nto \"false\".\n.TP\n.B bootstrap\nExecute\n.I $HOME/.config/yadm/bootstrap\nif it exists.\n.TP\n.BI clone \\ url\nClone a remote repository for tracking dotfiles.\nAfter the contents of the remote repository have been fetched, a \"check out\" of\nthe remote HEAD branch is attempted.\nIf there are conflicting files already present in the\n.IR work-tree ,\nthe local version will be left unmodified and you'll have to review and resolve\nthe difference.\n\nThe repository is stored in\n.IR $HOME/.local/share/yadm/repo.git .\nBy default,\n.I $HOME\nwill be used as the\n.IR work-tree ,\nbut this can be overridden with the\n.BR \\-w \\ option.\nyadm can be forced to overwrite an existing repository by providing the\n.BR \\-f \\ option.\nIf you want to use a branch other than the remote HEAD branch\nyou can specify it using the\n.BR \\-b \\ option.\nBy default yadm will ask the user if the bootstrap program should be run (if it\nexists). The options\n.BR \\-\\-bootstrap \" or \" \\-\\-no\\-bootstrap\nwill either force the bootstrap to be run, or prevent it from being run,\nwithout prompting the user.\n.TP\n.B config\nThis command manages configurations for yadm.\nThis command works exactly the way\n.BR git-config (1)\ndoes.\nSee the CONFIGURATION section for more details.\n.TP\n.B decrypt\nDecrypt all files stored in\n.IR $HOME/.local/share/yadm/archive .\nFiles decrypted will be relative to the configured\n.IR work-tree \\ (usually\\  $HOME ).\nUsing the\n.B \\-l\noption will list the files stored without extracting them.\n.TP\n.B encrypt\nEncrypt all files matching the patterns found in\n.IR $HOME/.config/yadm/encrypt .\nSee the ENCRYPTION section for more details.\n.TP\n.B enter\nRun a sub-shell with all Git variables set. Exit the sub-shell the same way you\nleave your normal shell (usually with the \"exit\" command). This sub-shell can\nbe used to easily interact with your yadm repository using \"git\" commands. This\ncould be useful if you are using a tool which uses Git directly, such as tig,\nvim-fugitive, git-cola, etc.\n\nOptionally, you can provide a command after \"enter\", and instead of invoking\nyour shell, that command will be run with all of the Git variables exposed to\nthe command's environment.\n\nEmacs Tramp and Magit can manage files by using this configuration:\n\n.RS\n    (add-to-list 'tramp-methods\n         '(\"yadm\"\n           (tramp-login-program \"yadm\")\n           (tramp-login-args ((\"enter\")))\n           (tramp-login-env ((\"SHELL\") (\"/bin/sh\")))\n           (tramp-remote-shell \"/bin/sh\")\n           (tramp-remote-shell-args (\"-c\"))))\n.RE\n\n.RS\nWith this config, use (magit-status \"/yadm::\").\n.RE\n.TP\n.BI git-crypt \\ options\nIf git-crypt is installed, this command allows you to pass options directly to\ngit-crypt, with the environment configured to use the yadm repository.\n\ngit-crypt enables transparent encryption and decryption of files in a git\nrepository. You can read\nhttps://github.com/AGWA/git-crypt\nfor details.\n.TP\n.B gitconfig\nPass options to the\n.B git config\ncommand. Since yadm already uses the\n.I config\ncommand to manage its own configurations,\nthis command is provided as a way to change configurations of the repository\nmanaged by yadm.\nOne useful case might be to configure the repository so untracked files are\nshown in status commands. yadm initially configures its repository so that\nuntracked files are not shown.\nIf you wish use the default Git behavior (to show untracked files and\ndirectories), you can remove this configuration.\n\n.RS\n.RS\nyadm gitconfig --unset status.showUntrackedFiles\n.RE\n.RE\n.TP\n.B help\nPrint a summary of yadm commands.\n.TP\n.B init\nInitialize a new, empty repository for tracking dotfiles.\nThe repository is stored in\n.IR $HOME/.local/share/yadm/repo.git .\nBy default,\n.I $HOME\nwill be used as the\n.IR work-tree ,\nbut this can be overridden with the\n.BR \\-w \\ option.\nyadm can be forced to overwrite an existing repository by providing the\n.BR \\-f \\ option.\n.TP\n.B list\nPrint a list of files managed by yadm.\n.RB The \\ \\-a\noption will cause all managed files to be listed.\nOtherwise, the list will only include files from the current directory or below.\n.TP\n.BI introspect \\ category\nReport internal yadm data. Supported categories are\n.IR commands ,\n.IR configs ,\n.IR repo,\nand\n.IR switches .\nThe purpose of introspection is to support command line completion.\n.TP\n.B perms\nUpdate permissions as described in the PERMISSIONS section.\nIt is usually unnecessary to run this command, as yadm automatically processes\npermissions by default. This automatic behavior can be disabled by setting the\nconfiguration\n.I yadm.auto-perms\nto \"false\".\n.TP\n.BI transcrypt \\ options\nIf transcrypt is installed, this command allows you to pass options directly to\ntranscrypt, with the environment configured to use the yadm repository.\n\ntranscrypt enables transparent encryption and decryption of files in a git\nrepository. You can read\nhttps://github.com/elasticdog/transcrypt\nfor details.\n.TP\n.B upgrade\nVersion 3 of yadm uses a different directory for storing data.\nWhen you start to use version 3 for the first time, you may see warnings about\nmoving your data to this new directory.\nThe easiest way to accomplish this is by running \"yadm upgrade\".\nThis command will start by moving your yadm repo to the new path.\nNext it will move any archive data.\nIf the archive is tracked within your yadm repo, this command will\n\"stage\" the renaming of that file in the repo's index.\n\nUpgrading will attempt to de-initialize and re-initialize your submodules. If\nyour submodules cannot be de-initialized, the upgrade will fail. The most\ncommon reason submodules will fail to de-initialize is because they have local\nmodifications. If you are willing to lose the local modifications to those\nsubmodules, you can use the\n.B \\-f\noption with the \"upgrade\" command to force the de-initialization.\n\nAfter running \"yadm upgrade\", you should run \"yadm status\" to review changes\nwhich have been staged, and commit them to your repository.\n\nYou can read\nhttps://yadm.io/docs/upgrade_from_2\nfor more information.\n.TP\n.B version\nPrint the version of yadm.\n\n.SH OPTIONS\n\nyadm supports a set of universal options that alter the paths it uses. The\ndefault paths are documented in the FILES section. Any path specified by these\noptions must be fully qualified. If you always want to override one or more of\nthese paths, it may be useful to create an alias for the yadm command.\nFor example, the following alias could be used to override the repository\ndirectory.\n\n.RS\nalias yadm='yadm \\-\\-yadm\\-repo /alternate/path/to/repo'\n.RE\n\nThe following is the full list of universal options.\nEach option should be followed by a path.\n.TP\n.B \\-Y, \\-\\-yadm\\-dir\nOverride the yadm directory.\nyadm stores its configurations relative to this directory.\n.TP\n.B \\-\\-yadm\\-data\nOverride the yadm data directory.\nyadm stores its data relative to this directory.\n.TP\n.B \\-\\-yadm\\-repo\nOverride the location of the yadm repository.\n.TP\n.B \\-\\-yadm\\-config\nOverride the location of the yadm configuration file.\n.TP\n.B \\-\\-yadm\\-encrypt\nOverride the location of the yadm encryption configuration.\n.TP\n.B \\-\\-yadm\\-archive\nOverride the location of the yadm encrypted files archive.\n.TP\n.B \\-\\-yadm\\-bootstrap\nOverride the location of the yadm bootstrap program.\n\n.SH CONFIGURATION\n\nyadm uses a configuration file named\n.IR $HOME/.config/yadm/config .\nThis file uses the same format as\n.BR git-config (1).\nAlso, you can control the contents of the configuration file\nvia the\n.B yadm config\ncommand (which works exactly like\n.BR git-config ).\nFor example, to disable alternates you can run the command:\n\n.RS\nyadm config yadm.auto-alt false\n.RE\n\nThe following is the full list of supported configurations:\n.TP\n.B yadm.alt-copy\nIf set to \"true\", alternate files will be copies instead of symbolic links.\nThis might be desirable, because some systems may not properly support\nsymlinks.\n.TP\n.B yadm.auto-alt\nDisable the automatic linking described in the section ALTERNATES. If disabled,\nyou may still run \"yadm alt\" manually to create the alternate links. This\nfeature is enabled by default.\n.TP\n.B yadm.auto-exclude\nDisable the automatic exclusion of patterns defined in\n.IR $HOME/.config/yadm/encrypt .\nThis feature is enabled by default.\n.TP\n.B yadm.auto-perms\nDisable the automatic permission changes described in the section PERMISSIONS.\nIf disabled, you may still run\n.B yadm perms\nmanually to update permissions.\nThis feature is enabled by default.\n.TP\n.B yadm.auto-private-dirs\nDisable the automatic creating of private directories described in the section\nPERMISSIONS.\n.TP\n.B yadm.cipher\nConfigure which encryption system is used by the encrypt/decrypt commands.\nValid options are \"gpg\" and \"openssl\". The default is \"gpg\".\nDetailed information can be found in the section ENCRYPTION.\n.TP\n.B yadm.git-program\nSpecify an alternate program to use instead of \"git\".\nBy default, the first \"git\" found in $PATH is used.\n.TP\n.B yadm.gpg-perms\nDisable the permission changes to\n.IR $HOME/.gnupg/* .\nThis feature is enabled by default.\n.TP\n.B yadm.gpg-program\nSpecify an alternate program to use instead of \"gpg\".\nBy default, the first \"gpg\" found in $PATH is used.\n.TP\n.B yadm.gpg-recipient\nAsymmetrically encrypt files with a gpg public/private key pair.\nProvide a \"key ID\" to specify which public key to encrypt with.\nThe key must exist in your public keyrings.\nMultiple recipients can be specified (separated by space).\nIf left blank or not provided, symmetric encryption is used instead.\nIf set to \"ASK\", gpg will interactively ask for recipients.\nSee the ENCRYPTION section for more details.\nThis feature is disabled by default.\n.TP\n.B yadm.openssl-ciphername\nSpecify which cipher should be used by openssl.\n\"aes-256-cbc\" is used by default.\n.TP\n.B yadm.openssl-old\nNewer versions of openssl support the pbkdf2 key derivation function. This is\nused by default. If this configuration is set to \"true\", openssl operations\nwill use options compatible with older versions of openssl. If you change this\noption, you will need to recreate your encrypted archive.\n.TP\n.B yadm.openssl-program\nSpecify an alternate program to use instead of \"openssl\".\nBy default, the first \"openssl\" found in $PATH is used.\n.TP\n.B yadm.ssh-perms\nDisable the permission changes to\n.IR $HOME/.ssh/* .\nThis feature is enabled by default.\n\n.LP\nThe following \"local\" configurations are not stored in the\n.IR $HOME/.config/yadm/config,\nthey are stored in the local repository.\n\n.TP\n.B local.class\nSpecify a class for the purpose of symlinking alternate files.\nBy default, no class will be matched.\nThe local host can be assigned multiple classes using command:\n\n.RS\nyadm config \\-\\-add local.class <additional-class>\n.RE\n.TP\n.B local.arch\nOverride the architecture for the purpose of symlinking alternate files.\n.TP\n.B local.hostname\nOverride the hostname for the purpose of symlinking alternate files.\n.TP\n.B local.os\nOverride the OS for the purpose of symlinking alternate files.\n.TP\n.B local.user\nOverride the user for the purpose of symlinking alternate files.\n.TP\n.B local.distro\nOverride the distro for the purpose of symlinking alternate files.\n.TP\n.B local.distro-family\nOverride the distro family for the purpose of symlinking alternate files.\n\n.SH ALTERNATES\n\nWhen managing a set of files across different systems, it can be useful to have\nan automated way of choosing an alternate version of a file for a different\noperating system, host, user, etc.\n\nyadm will automatically create a symbolic link to the appropriate version of a\nfile, when a valid suffix is appended to the filename. The suffix contains\nthe conditions that must be met for that file to be used.\n\nThe suffix begins with \"##\", followed by any number of conditions separated by\ncommas.\n\n  ##<condition>[,<condition>,...]\n\nEach condition is an attribute/value pair, separated by a period. Some\nconditions do not require a \"value\", and in that case, the period and value can\nbe omitted. Most attributes can be abbreviated as a single letter.\n\n  <attribute>[.<value>]\n\n.BR NOTE :\nValue is compared case-insensitive.\n\nThese are the supported attributes, in the order of the weighted precedence:\n\n.TP\n.BR template ,\\  t\nValid when the value matches a supported template processor.\nSee the TEMPLATES section for more details.\n.TP\n.BR user ,\\  u\nValid if the value matches the current user.\nCurrent user is calculated by running\n.BR \"id \\-u \\-n\" .\n.TP\n.BR hostname ,\\  h\nValid if the value matches the short hostname.\nHostname is calculated by running\n.BR \"uname \\-n\" ,\nand trimming off any domain.\n.TP\n.BR class ,\\  c\nValid if the value matches the\n.B local.class\nconfiguration.\nClass must be manually set using\n.BR \"yadm config local.class <class>\" .\nSee the CONFIGURATION section for more details about setting\n.BR local.class .\n.TP\n.BR distro ,\\  d\nValid if the value matches the distro.\nDistro is calculated by running\n.B \"lsb_release \\-si\"\nor by inspecting the ID from\n.BR \"/etc/os-release\" .\n.TP\n.BR distro_family ,\\  f\nValid if the value matches the distro family.\nDistro family is calculated by inspecting the ID_LIKE line from\n.B \"/etc/os-release\"\n(or ID if no ID_LIKE line is found).\n.TP\n.BR os ,\\  o\nValid if the value matches the OS.\nOS is calculated by running\n.BR \"uname \\-s\" .\n.TP\n.BR arch ,\\  a\nValid if the value matches the architecture.\nArchitecture is calculated by running\n.BR \"uname \\-m\" .\n.TP\n.B default\nValid when no other alternate is valid.\n.TP\n.BR extension ,\\  e\nA special \"condition\" that doesn't affect the selection process. Its purpose is\ninstead to allow the alternate file to end with a certain extension to\ne.g. make editors highlight the content properly.\n\n.LP\n.BR NOTE :\nThe OS for \"Windows Subsystem for Linux\" is reported as \"WSL\", even\nthough uname identifies as \"Linux\".\n\nYou may use any number of conditions, in any order.\nAn alternate will only be used if ALL conditions are valid.\nFor all files managed by yadm's repository or listed in\n.IR $HOME/.config/yadm/encrypt ,\nif they match this naming convention,\nsymbolic links will be created for the most appropriate version.\n\nThe \"most appropriate\" version is determined by calculating a score for each\nversion of a file. A template is always scored higher than any symlink\ncondition. The number of conditions is the next largest factor in scoring.\nFiles with more conditions will always be favored. Any invalid condition will\ndisqualify that file completely.\n\nIf you don't care to have all versions of alternates stored in the same\ndirectory as the generated symlink, you can place them in the\n.I $HOME/.config/yadm/alt\ndirectory. The generated symlink or processed template will be created using\nthe same relative path.\n\nAlternate linking may best be demonstrated by example. Assume the following\nfiles are managed by yadm's repository:\n\n  - $HOME/path/example.txt##default\n  - $HOME/path/example.txt##class.Work\n  - $HOME/path/example.txt##os.Darwin\n  - $HOME/path/example.txt##os.Darwin,hostname.host1\n  - $HOME/path/example.txt##os.Darwin,hostname.host2\n  - $HOME/path/example.txt##os.Linux\n  - $HOME/path/example.txt##os.Linux,hostname.host1\n  - $HOME/path/example.txt##os.Linux,hostname.host2\n\nIf running on a Macbook named \"host2\",\nyadm will create a symbolic link which looks like this:\n\n.IR $HOME/path/example.txt \" -> \" $HOME/path/example.txt##os.Darwin,hostname.host2\n\nHowever, on another Mackbook named \"host3\", yadm will create a symbolic link\nwhich looks like this:\n\n.IR $HOME/path/example.txt \" -> \" $HOME/path/example.txt##os.Darwin\n\nSince the hostname doesn't match any of the managed files, the more generic\nversion is chosen.\n\nIf running on a Linux server named \"host4\", the link will be:\n\n.IR $HOME/path/example.txt \" -> \" $HOME/path/example.txt##os.Linux\n\nIf running on a Solaris server, the link will use the default version:\n\n.IR $HOME/path/example.txt \" -> \" $HOME/path/example.txt##default\n\nIf running on a system, with class set to \"Work\", the link will be:\n\n.IR $HOME/path/example.txt \" -> \" $HOME/path/example.txt##class.Work\n\nIf no \"##default\" version exists and no files have valid conditions, then no\nlink will be created.\n\nLinks are also created for directories named this way, as long as they have at\nleast one yadm managed file within them.\n\nyadm will automatically create these links by default. This can be disabled\nusing the\n.I yadm.auto-alt\nconfiguration.\nEven if disabled, links can be manually created by running\n.BR \"yadm alt\" .\n\nClass is a special value which is stored locally on each host (inside the local\nrepository). To use alternate symlinks using class, you must set the value of\nclass using the configuration\n.BR local.class .\nThis is set like any other yadm configuration with the\n.B yadm config\ncommand. The following sets the class to be \"Work\".\n\n  yadm config local.class Work\n\nSimilarly, the values of architecture, os, hostname, user, distro, and\ndistro_family can be manually overridden using the configuration options\n.BR local.arch ,\n.BR local.os ,\n.BR local.hostname ,\n.BR local.user ,\n.BR local.distro ,\nand\n.BR local.distro-family .\n\n.SH TEMPLATES\n\nIf a template condition is defined in an alternate file's \"##\" suffix, and the\nnecessary dependencies for the template are available, then the file will be\nprocessed to create or overwrite files.\n\nSupported template processors:\n.TP\n.B default\nThis is yadm's built-in template processor. This processor is very basic, with\na Jinja-like syntax. The advantage of this processor is that it only depends\nupon\n.BR awk ,\nwhich is available on most *nix systems. To use this processor,\nspecify the value of \"default\" or just leave the value off (e.g. \"##template\").\n\n.BR NOTE :\nThis template processor performs case-insensitive comparisions in if statements.\n.TP\n.B ESH\nESH is a template processor written in POSIX compliant shell. It allows\nexecuting shell commands within templates. This can be used to reference your\nown configurations within templates, for example:\n\n  <% yadm config mysection.myconfig %>\n\nTo use the ESH template processor, specify the value of \"esh\"\n.TP\n.B j2cli\nTo use the j2cli Jinja template processor, specify the value of \"j2\"  or\n\"j2cli\".\n.TP\n.B envtpl\nTo use the envtpl Jinja template processor, specify the value of \"j2\" or\n\"envtpl\".\n\n.LP\n.BR NOTE :\nSpecifying \"j2\" as the processor will attempt to use j2cli or envtpl, whichever\nis available.\n\nIf the template processor specified is available, templates will be processed\nto create or overwrite files.\n\nDuring processing, the following variables are available in the template:\n\n Default              Jinja or ESH         Description\n -------------        -------------        ----------------------------\n yadm.arch            YADM_ARCH            uname \\-m\n yadm.class           YADM_CLASS           Last locally defined class\n yadm.classes         YADM_CLASSES         All classes\n yadm.distro          YADM_DISTRO          lsb_release \\-si\n yadm.distro_family   YADM_DISTRO_FAMILY   ID_LIKE from /etc/os-release\n yadm.hostname        YADM_HOSTNAME        uname \\-n (without domain)\n yadm.os              YADM_OS              uname \\-s\n yadm.source          YADM_SOURCE          Template filename\n yadm.user            YADM_USER            id \\-u \\-n\n env.VAR                                   Environment variable VAR\n\n.BR NOTE :\nThe OS for \"Windows Subsystem for Linux\" is reported as \"WSL\", even\nthough uname identifies as \"Linux\".\n\n.BR NOTE :\nIf lsb_release is not available, DISTRO will be the ID specified in\n/etc/os-release.\n\nExamples:\n\n.I whatever##template\nwith the following content\n\n  {% if yadm.user == \"harvey\" %}\n  config={{yadm.class}}-{{yadm.os}}\n  {% else %}\n  config=dev-whatever\n  {% include \"whatever.extra\" %}\n  {% endif %}\n\nwould output a file named\n.I whatever\nwith the following content if the user is \"harvey\":\n\n  config=work-Linux\n\nand the following otherwise (if\n.I whatever.extra\ncontains admin=false):\n\n  config=dev-whatever\n  admin=false\n\nAn equivalent Jinja template named\n.I whatever##template.j2\nwould look like:\n\n  {% if YADM_USER == 'harvey' -%}\n  config={{YADM_CLASS}}-{{YADM_OS}}\n  {% else -%}\n  config=dev-whatever\n  {% include 'whatever.extra' %}\n  {% endif -%}\n\nAn equivalent ESH templated named\n.I whatever##template.esh\nwould look like:\n\n  <% if [ \"$YADM_USER\" = \"harvey\" ]; then -%>\n  config=<%= $YADM_CLASS %>-<%= $YADM_OS %>\n  <% else -%>\n  config=dev-whatever\n  <%+ whatever.extra %>\n  <% fi -%>\n\n.SH ENCRYPTION\n\nIt can be useful to manage confidential files, like SSH or GPG keys, across\nmultiple systems. However, doing so would put plain text data into a Git\nrepository, which often resides on a public system. yadm can make it easy to\nencrypt and decrypt a set of files so the encrypted version can be maintained\nin the Git repository.\nThis feature will only work if a supported tool is available.\nBoth\n.BR gpg (1)\nand\n.BR openssl (1)\nare supported.\ngpg is used by default, but openssl can be configured with the\n.I yadm.cipher\nconfiguration.\n\nTo use this feature, a list of patterns (one per line) must be created and\nsaved as\n.IR $HOME/.config/yadm/encrypt .\nThis list of patterns should be relative to the configured\n.IR work-tree \\ (usually\\  $HOME ).\nFor example:\n\n.RS\n    .ssh/*.key\n    .gnupg/*.gpg\n.RE\n\nStandard filename expansions (*, ?, [) are supported. Two consecutive asterisks\n\"**\" can be used to match all subdirectories.  Other shell expansions like\nbrace and tilde are not supported.  Spaces in paths are supported, and should\nnot be quoted.  If a directory is specified, its contents will be included.\nPaths beginning with a \"!\" will be excluded.\n\nThe\n.B yadm encrypt\ncommand will find all files matching the patterns, and prompt for a\npassword. Once a password has confirmed, the matching files will be encrypted\nand saved as\n.IR $HOME/.local/share/yadm/archive .\nThe \"encrypt\" and \"archive\" files should be added to the yadm repository so\nthey are available across multiple systems.\n\nTo decrypt these files later, or on another system run\n.B yadm decrypt\nand provide the correct password.\nAfter files are decrypted, permissions are automatically updated as described\nin the PERMISSIONS section.\n\nSymmetric encryption is used by default, but asymmetric encryption may be\nenabled using the\n.I yadm.gpg-recipient\nconfiguration.\n\n.BR NOTE :\nIt is recommended that you use a private repository when keeping confidential\nfiles, even though they are encrypted.\n\nPatterns found in\n.I $HOME/.config/yadm/encrypt\nare automatically added to the repository's\n.I info/exclude\nfile every time\n.B yadm encrypt\nis run.\nThis is to prevent accidentally committing sensitive data to the repository.\nThis can be disabled using the\n.I yadm.auto-exclude\nconfiguration.\n\n.B Using transcrypt or git-crypt\n\nA completely separate option for encrypting data is to install and use\ntranscrypt or git-crypt.\nOnce installed, you can use these tools by running\n.B \"yadm transcrypt\"\nor\n.BR \"yadm git-crypt\" .\nThese tools enables transparent encryption and decryption of files in a git\nrepository. See the following web sites for more information:\n\n- https://github.com/elasticdog/transcrypt\n\n- https://github.com/AGWA/git-crypt\n\n.SH PERMISSIONS\n\nWhen files are checked out of a Git repository, their initial permissions are\ndependent upon the user's umask. Because of this, yadm will automatically\nupdate the permissions of some file paths. The \"group\" and \"others\" permissions\nwill be removed from the following files:\n\n.RI -\\  $HOME/.local/share/yadm/archive\n\n- All files matching patterns in\n.I $HOME/.config/yadm/encrypt\n\n- The SSH directory and files,\n.I .ssh/*\n\n- The GPG directory and files,\n.I .gnupg/*\n\nyadm will automatically update permissions by default. This can be disabled\nusing the\n.I yadm.auto-perms\nconfiguration. Even if disabled, permissions can be manually updated by running\n.BR \"yadm perms\" .\nThe\n.I .ssh\ndirectory processing can be disabled using the\n.I yadm.ssh-perms\nconfiguration. The\n.I .gnupg\ndirectory processing can be disabled using the\n.I yadm.gpg-perms\nconfiguration.\n\nWhen cloning a repo which includes data in a\n.IR .ssh \" or \" .gnupg\ndirectory, if those directories do not exist at the time of cloning, yadm will\ncreate the directories with mask 0700 prior to merging the fetched data into\nthe work-tree.\n\nWhen running a Git command and\n.IR .ssh \" or \" .gnupg\ndirectories do not exist, yadm will create those directories with mask 0700\nprior to running the Git command. This can be disabled using the\n.I yadm.auto-private-dirs\nconfiguration.\n\n.SH HOOKS\n\nFor every command yadm supports, a program can be provided to run before or\nafter that command. These are referred to as \"hooks\". yadm looks for hooks in\nthe directory\n.IR $HOME/.config/yadm/hooks .\nEach hook is named using a prefix of\n.I pre_\nor\n.IR post_ ,\nfollowed by the command which should trigger the hook. For\nexample, to create a hook which is run after every\n.I yadm pull\ncommand, create a hook named\n.IR post_pull.\nHooks must have the executable file permission set.\n\nIf a\n.I pre_\nhook is defined, and the hook terminates with a non-zero exit status, yadm will\nrefuse to run the yadm command. For example, if a\n.I pre_commit\nhook is defined, but that command ends with a non-zero exit status, the\n.I yadm commit\nwill never be run. This allows one to \"short-circuit\" any operation using a\n.I pre_\nhook.\n\nHooks have the following environment variables available to them at runtime:\n.TP\n.B YADM_HOOK_COMMAND\nThe command which triggered the hook\n.TP\n.B YADM_HOOK_EXIT\nThe exit status of the yadm command\n.TP\n.B YADM_HOOK_FULL_COMMAND\nThe yadm command with all command line arguments (parameters are space\ndelimited, and any space, tab or backslash will be escaped with a backslash)\n.TP\n.B YADM_HOOK_REPO\nThe path to the yadm repository\n.TP\n.B YADM_HOOK_WORK\nThe path to the work-tree\n\n.SH FILES\n\nAll of yadm's configurations are relative to the \"yadm directory\".\nyadm uses the \"XDG Base Directory Specification\" to determine this directory.\nIf the environment variable\n.B $XDG_CONFIG_HOME\nis defined as a fully qualified path, this directory will be\n.IR \"$XDG_CONFIG_HOME/yadm\" .\nOtherwise it will be\n.IR \"$HOME/.config/yadm\" .\n\nSimilarly, yadm's data files are relative to the \"yadm data directory\".\nyadm uses the \"XDG Base Directory Specification\" to determine this directory.\nIf the environment variable\n.B $XDG_DATA_HOME\nis defined as a fully qualified path, this directory will be\n.IR \"$XDG_DATA_HOME/yadm\" .\nOtherwise it will be\n.IR \"$HOME/.local/share/yadm\" .\n\nThe following are the default paths yadm uses for its own data.\nMost of these paths can be altered using universal options.\nSee the OPTIONS section for details.\n.TP\n.I $HOME/.config/yadm\nThe yadm directory. By default, all configs yadm stores is relative to this\ndirectory.\n.TP\n.I $HOME/.local/share/yadm\nThe yadm data directory. By default, all data yadm stores is relative to this\ndirectory.\n.TP\n.I $YADM_DIR/config\nConfiguration file for yadm.\n.TP\n.I $YADM_DIR/alt\nThis is a directory to keep \"alternate files\" without having them side-by-side\nwith the resulting symlink or processed template. Alternate files placed in\nthis directory will be created relative to $HOME instead.\n.TP\n.I $YADM_DATA/repo.git\nGit repository used by yadm.\n.TP\n.I $YADM_DIR/encrypt\nList of globs used for encrypt/decrypt\n.TP\n.I $YADM_DATA/archive\nAll files encrypted with\n.B yadm encrypt\nare stored in this file.\n\n.SH EXAMPLES\n\n.TP\n.B yadm init\nCreate an empty repo for managing files\n.TP\n.B yadm add .bash_profile ; yadm commit\nAdd\n.I .bash_profile\nto the Git index and create a new commit\n.TP\n.B yadm remote add origin <url>\nAdd a remote origin to an existing repository\n.TP\n.B yadm push \\-u origin master\nInitial push of master to origin\n.TP\n.B echo \".ssh/*.key\" >> $HOME/.config/yadm/encrypt\nAdd a new pattern to the list of encrypted files\n.TP\n.B yadm encrypt ; yadm add ~/.local/share/yadm/archive ; yadm commit\nCommit a new set of encrypted files\n\n.SH REPORTING BUGS\n\nReport issues or create pull requests at GitHub:\n\nhttps://github.com/yadm-dev/yadm/issues\n\n.SH AUTHOR\n\nTim Byrne <sultan@locehilios.com>\n\n.SH SEE ALSO\n\n.BR git (1),\n.BR gpg (1)\n.BR openssl (1)\n.BR transcrypt (1)\n.BR git-crypt (1)\n\nhttps://yadm.io/\n"
        },
        {
          "name": "yadm.md",
          "type": "blob",
          "size": 33.8525390625,
          "content": "\n## NAME\n       yadm - Yet Another Dotfiles Manager\n\n\n## SYNOPSIS\n       yadm command [options]\n\n       yadm git-command-or-alias [options]\n\n       yadm init [-f] [-w dir]\n\n       yadm clone url [-f] [-w dir] [-b branch] [--bootstrap] [--no-bootstrap]\n\n       yadm config name [value]\n\n       yadm config [-e]\n\n       yadm list [-a]\n\n       yadm bootstrap\n\n       yadm encrypt\n\n       yadm decrypt [-l]\n\n       yadm alt\n\n       yadm perms\n\n       yadm enter [ command ]\n\n       yadm git-crypt [ options ]\n\n       yadm transcrypt [ options ]\n\n       yadm upgrade [-f]\n\n       yadm introspect category\n\n\n## DESCRIPTION\n       yadm  is a tool for managing a collection of files across multiple com‐\n       puters, using a shared Git repository.  In addition,  yadm  provides  a\n       feature  to  select alternate versions of files for particular systems.\n       Lastly, yadm supplies the ability to manage a subset of  secure  files,\n       which are encrypted before they are included in the repository.\n\n\n## COMMANDS\n       git-command or git-alias\n              Any  command not internally handled by yadm is passed through to\n              git(1).  Git commands or aliases are invoked with the yadm  man‐\n              aged repository.  The working directory for Git commands will be\n              the configured work-tree (usually $HOME).\n\n              Dotfiles  are  managed by using standard git commands; add, com‐\n              mit, push, pull, etc.\n\n              The config command is not passed directly through.  Instead  use\n              the gitconfig command (see below).\n\n       alt    Create  symbolic  links  and  process  templates for any managed\n              files matching the naming rules described in the ALTERNATES  and\n              TEMPLATES  sections.  It is usually unnecessary to run this com‐\n              mand, as yadm automatically  processes  alternates  by  default.\n              This  automatic behavior can be disabled by setting the configu‐\n              ration yadm.auto-alt to \"false\".\n\n       bootstrap\n              Execute $HOME/.config/yadm/bootstrap if it exists.\n\n       clone url\n              Clone a remote repository for tracking dotfiles.  After the con‐\n              tents of the remote repository have been fetched, a \"check  out\"\n              of  the remote HEAD branch is attempted.  If there are conflict‐\n              ing files already present in the work-tree,  the  local  version\n              will  be  left  unmodified and you'll have to review and resolve\n              the difference.\n\n              The repository is  stored  in  $HOME/.local/share/yadm/repo.git.\n              By default, $HOME will be used as the work-tree, but this can be\n              overridden  with the -w option.  yadm can be forced to overwrite\n              an existing repository by providing the -f option.  If you  want\n              to  use a branch other than the remote HEAD branch you can spec‐\n              ify it using the -b option.  By default yadm will ask  the  user\n              if  the  bootstrap program should be run (if it exists). The op‐\n              tions --bootstrap or --no-bootstrap will either force the  boot‐\n              strap to be run, or prevent it from being run, without prompting\n              the user.\n\n       config This  command  manages  configurations  for  yadm.  This command\n              works exactly the way git-config(1) does.  See the CONFIGURATION\n              section for more details.\n\n       decrypt\n              Decrypt all  files  stored  in  $HOME/.local/share/yadm/archive.\n              Files  decrypted  will  be  relative to the configured work-tree\n              (usually $HOME).  Using the -l option will list the files stored\n              without extracting them.\n\n       encrypt\n              Encrypt all files matching the  patterns  found  in  $HOME/.con‐\n              fig/yadm/encrypt.  See the ENCRYPTION section for more details.\n\n       enter  Run  a  sub-shell with all Git variables set. Exit the sub-shell\n              the same way you leave  your  normal  shell  (usually  with  the\n              \"exit\"  command).  This sub-shell can be used to easily interact\n              with your yadm repository using \"git\" commands.  This  could  be\n              useful  if you are using a tool which uses Git directly, such as\n              tig, vim-fugitive, git-cola, etc.\n\n              Optionally, you can provide a command after \"enter\", and instead\n              of invoking your shell, that command will be run with all of the\n              Git variables exposed to the command's environment.\n\n              Emacs Tramp and Magit can manage files by using this  configura‐\n              tion:\n\n                  (add-to-list 'tramp-methods\n                       '(\"yadm\"\n                         (tramp-login-program \"yadm\")\n                         (tramp-login-args ((\"enter\")))\n                         (tramp-login-env ((\"SHELL\") (\"/bin/sh\")))\n                         (tramp-remote-shell \"/bin/sh\")\n                         (tramp-remote-shell-args (\"-c\"))))\n\n              With this config, use (magit-status \"/yadm::\").\n\n       git-crypt options\n              If  git-crypt  is installed, this command allows you to pass op‐\n              tions directly to git-crypt, with the environment configured  to\n              use the yadm repository.\n\n              git-crypt enables transparent encryption and decryption of files\n              in  a git repository.  You can read https://github.com/AGWA/git-\n              crypt for details.\n\n       gitconfig\n              Pass options to the git config command. Since yadm already  uses\n              the  config  command to manage its own configurations, this com‐\n              mand is provided as a way to change configurations of the repos‐\n              itory managed by yadm.  One useful case might  be  to  configure\n              the  repository so untracked files are shown in status commands.\n              yadm initially configures its repository so that untracked files\n              are not shown.  If you wish use the  default  Git  behavior  (to\n              show  untracked files and directories), you can remove this con‐\n              figuration.\n\n                     yadm gitconfig --unset status.showUntrackedFiles\n\n       help   Print a summary of yadm commands.\n\n       init   Initialize a new, empty repository for tracking  dotfiles.   The\n              repository  is  stored  in $HOME/.local/share/yadm/repo.git.  By\n              default, $HOME will be used as the work-tree, but  this  can  be\n              overridden  with the -w option.  yadm can be forced to overwrite\n              an existing repository by providing the -f option.\n\n       list   Print a list of files managed by yadm.  The -a option will cause\n              all managed files to be listed.  Otherwise, the list  will  only\n              include files from the current directory or below.\n\n       introspect category\n              Report  internal  yadm  data. Supported categories are commands,\n              configs, repo, and switches.  The purpose of introspection is to\n              support command line completion.\n\n       perms  Update permissions as described in the PERMISSIONS section.   It\n              is  usually  unnecessary  to run this command, as yadm automati‐\n              cally processes permissions by default. This automatic  behavior\n              can  be disabled by setting the configuration yadm.auto-perms to\n              \"false\".\n\n       transcrypt options\n              If transcrypt is installed, this command allows you to pass  op‐\n              tions directly to transcrypt, with the environment configured to\n              use the yadm repository.\n\n              transcrypt  enables  transparent  encryption  and  decryption of\n              files    in    a    git    repository.      You     can     read\n              https://github.com/elasticdog/transcrypt for details.\n\n       upgrade\n              Version  3  of yadm uses a different directory for storing data.\n              When you start to use version 3 for the first time, you may  see\n              warnings about moving your data to this new directory.  The eas‐\n              iest  way to accomplish this is by running \"yadm upgrade\".  This\n              command will start by moving your yadm repo  to  the  new  path.\n              Next  it  will move any archive data.  If the archive is tracked\n              within your yadm repo, this command will \"stage\" the renaming of\n              that file in the repo's index.\n\n              Upgrading will attempt to de-initialize and  re-initialize  your\n              submodules. If your submodules cannot be de-initialized, the up‐\n              grade  will fail. The most common reason submodules will fail to\n              de-initialize is because they have local modifications.  If  you\n              are willing to lose the local modifications to those submodules,\n              you  can  use  the -f option with the \"upgrade\" command to force\n              the de-initialization.\n\n              After running \"yadm upgrade\", you should run  \"yadm  status\"  to\n              review  changes  which have been staged, and commit them to your\n              repository.\n\n              You can read https://yadm.io/docs/upgrade_from_2 for more infor‐\n              mation.\n\n       version\n              Print the version of yadm.\n\n\n## OPTIONS\n       yadm supports a set of universal options that alter the paths it  uses.\n       The  default paths are documented in the FILES section. Any path speci‐\n       fied by these options must be fully qualified. If you  always  want  to\n       override  one  or  more  of  these paths, it may be useful to create an\n       alias for the yadm command.  For example, the following alias could  be\n       used to override the repository directory.\n\n              alias yadm='yadm --yadm-repo /alternate/path/to/repo'\n\n       The  following  is  the  full  list  of universal options.  Each option\n       should be followed by a path.\n\n       -Y,--yadm-dir\n              Override the yadm directory.   yadm  stores  its  configurations\n              relative to this directory.\n\n       --yadm-data\n              Override the yadm data directory.  yadm stores its data relative\n              to this directory.\n\n       --yadm-repo\n              Override the location of the yadm repository.\n\n       --yadm-config\n              Override the location of the yadm configuration file.\n\n       --yadm-encrypt\n              Override the location of the yadm encryption configuration.\n\n       --yadm-archive\n              Override the location of the yadm encrypted files archive.\n\n       --yadm-bootstrap\n              Override the location of the yadm bootstrap program.\n\n\n## CONFIGURATION\n       yadm  uses  a configuration file named $HOME/.config/yadm/config.  This\n       file uses the same format as git-config(1).  Also, you can control  the\n       contents  of  the configuration file via the yadm config command (which\n       works exactly like git-config).  For example, to disable alternates you\n       can run the command:\n\n              yadm config yadm.auto-alt false\n\n       The following is the full list of supported configurations:\n\n       yadm.alt-copy\n              If set to \"true\", alternate files will be copies instead of sym‐\n              bolic links.  This might be desirable, because some systems  may\n              not properly support symlinks.\n\n       yadm.auto-alt\n              Disable  the  automatic  linking described in the section ALTER‐\n              NATES. If disabled, you may still run  \"yadm  alt\"  manually  to\n              create the alternate links. This feature is enabled by default.\n\n       yadm.auto-exclude\n              Disable   the   automatic   exclusion  of  patterns  defined  in\n              $HOME/.config/yadm/encrypt.  This feature is enabled by default.\n\n       yadm.auto-perms\n              Disable the automatic permission changes described in  the  sec‐\n              tion  PERMISSIONS.   If  disabled,  you may still run yadm perms\n              manually to update permissions.  This feature is enabled by  de‐\n              fault.\n\n       yadm.auto-private-dirs\n              Disable  the automatic creating of private directories described\n              in the section PERMISSIONS.\n\n       yadm.cipher\n              Configure which encryption system is used by the encrypt/decrypt\n              commands.  Valid options are \"gpg\" and \"openssl\". The default is\n              \"gpg\".  Detailed information can be found in the section ENCRYP‐\n              TION.\n\n       yadm.git-program\n              Specify an alternate program to use instead of  \"git\".   By  de‐\n              fault, the first \"git\" found in $PATH is used.\n\n       yadm.gpg-perms\n              Disable  the permission changes to $HOME/.gnupg/*.  This feature\n              is enabled by default.\n\n       yadm.gpg-program\n              Specify an alternate program to use instead of  \"gpg\".   By  de‐\n              fault, the first \"gpg\" found in $PATH is used.\n\n       yadm.gpg-recipient\n              Asymmetrically encrypt files with a gpg public/private key pair.\n              Provide  a \"key ID\" to specify which public key to encrypt with.\n              The key must exist in your public keyrings.  Multiple recipients\n              can be specified (separated by space).  If  left  blank  or  not\n              provided,  symmetric  encryption  is  used  instead.   If set to\n              \"ASK\", gpg will interactively ask for recipients.  See  the  EN‐\n              CRYPTION  section for more details.  This feature is disabled by\n              default.\n\n       yadm.openssl-ciphername\n              Specify which cipher should be used by  openssl.   \"aes-256-cbc\"\n              is used by default.\n\n       yadm.openssl-old\n              Newer  versions  of  openssl  support  the pbkdf2 key derivation\n              function. This is used by default. If this configuration is  set\n              to  \"true\",  openssl operations will use options compatible with\n              older versions of openssl. If you change this option,  you  will\n              need to recreate your encrypted archive.\n\n       yadm.openssl-program\n              Specify  an  alternate  program to use instead of \"openssl\".  By\n              default, the first \"openssl\" found in $PATH is used.\n\n       yadm.ssh-perms\n              Disable the permission changes to $HOME/.ssh/*.  This feature is\n              enabled by default.\n\n       The following  five  \"local\"  configurations  are  not  stored  in  the\n       $HOME/.config/yadm/config, they are stored in the local repository.\n\n\n       local.class\n              Specify  a  class for the purpose of symlinking alternate files.\n              By default, no class will be matched.  The local host can be as‐\n              signed multiple classes using command:\n\n              yadm config --add local.class <additional-class>\n\n       local.arch\n              Override the architecture for the purpose of  symlinking  alter‐\n              nate files.\n\n       local.hostname\n              Override  the  hostname  for the purpose of symlinking alternate\n              files.\n\n       local.os\n              Override the OS for the purpose of symlinking alternate files.\n\n       local.user\n              Override the user for the purpose of symlinking alternate files.\n\n\n## ALTERNATES\n       When managing a set of files across different systems, it can be useful\n       to have an automated way of choosing an alternate version of a file for\n       a different operating system, host, user, etc.\n\n       yadm will automatically create a symbolic link to the appropriate  ver‐\n       sion  of  a  file, when a valid suffix is appended to the filename. The\n       suffix contains the conditions that must be met for  that  file  to  be\n       used.\n\n       The suffix begins with \"##\", followed by any number of conditions sepa‐\n       rated by commas.\n\n         ##<condition>[,<condition>,...]\n\n       Each  condition is an attribute/value pair, separated by a period. Some\n       conditions do not require a \"value\", and in that case, the  period  and\n       value  can  be  omitted. Most attributes can be abbreviated as a single\n       letter.\n\n         <attribute>[.<value>]\n\n       These are the supported attributes, in the order of the weighted prece‐\n       dence:\n\n\n       template, t\n              Valid when the value matches  a  supported  template  processor.\n              See the TEMPLATES section for more details.\n\n       user, u\n              Valid  if  the  value matches the current user.  Current user is\n              calculated by running id -u -n.\n\n       hostname, h\n              Valid if the value matches the short hostname.  Hostname is cal‐\n              culated by running uname -n, and trimming off any domain.\n\n       class, c\n              Valid if the value matches the local.class configuration.  Class\n              must be manually set using yadm config local.class <class>.  See\n              the CONFIGURATION section for more  details  about  setting  lo‐\n              cal.class.\n\n       distro, d\n              Valid  if the value matches the distro.  Distro is calculated by\n              running lsb_release -si or by inspecting the ID from /etc/os-re‐\n              lease.\n\n       distro_family, f\n              Valid if the value matches the distro family.  Distro family  is\n              calculated by inspecting the ID_LIKE line from /etc/os-release.\n\n       os, o  Valid  if the value matches the OS.  OS is calculated by running\n              uname -s.\n\n       arch, a\n              Valid if the value matches the  architecture.   Architecture  is\n              calculated by running uname -m.\n\n       default\n              Valid when no other alternate is valid.\n\n       extension, e\n              A special \"condition\" that doesn't affect the selection process.\n              Its purpose is instead to allow the alternate file to end with a\n              certain  extension  to  e.g.  make editors highlight the content\n              properly.\n\n       NOTE: The OS for \"Windows Subsystem for Linux\" is  reported  as  \"WSL\",\n       even though uname identifies as \"Linux\".\n\n       You  may use any number of conditions, in any order.  An alternate will\n       only be used if ALL conditions are valid.  For  all  files  managed  by\n       yadm's  repository  or  listed  in  $HOME/.config/yadm/encrypt, if they\n       match this naming convention, symbolic links will be  created  for  the\n       most appropriate version.\n\n       The \"most appropriate\" version is determined by calculating a score for\n       each  version  of  a  file. A template is always scored higher than any\n       symlink condition. The number of conditions is the next largest  factor\n       in scoring.  Files with more conditions will always be favored. Any in‐\n       valid condition will disqualify that file completely.\n\n       If you don't care to have all versions of alternates stored in the same\n       directory  as  the  generated  symlink,  you  can  place  them  in  the\n       $HOME/.config/yadm/alt directory. The generated  symlink  or  processed\n       template will be created using the same relative path.\n\n       Alternate  linking may best be demonstrated by example. Assume the fol‐\n       lowing files are managed by yadm's repository:\n\n         - $HOME/path/example.txt##default\n         - $HOME/path/example.txt##class.Work\n         - $HOME/path/example.txt##os.Darwin\n         - $HOME/path/example.txt##os.Darwin,hostname.host1\n         - $HOME/path/example.txt##os.Darwin,hostname.host2\n         - $HOME/path/example.txt##os.Linux\n         - $HOME/path/example.txt##os.Linux,hostname.host1\n         - $HOME/path/example.txt##os.Linux,hostname.host2\n\n       If running on a Macbook named \"host2\", yadm will create a symbolic link\n       which looks like this:\n\n       $HOME/path/example.txt    ->    $HOME/path/example.txt##os.Darwin,host‐\n       name.host2\n\n       However, on another Mackbook named \"host3\", yadm will create a symbolic\n       link which looks like this:\n\n       $HOME/path/example.txt -> $HOME/path/example.txt##os.Darwin\n\n       Since  the  hostname  doesn't  match any of the managed files, the more\n       generic version is chosen.\n\n       If running on a Linux server named \"host4\", the link will be:\n\n       $HOME/path/example.txt -> $HOME/path/example.txt##os.Linux\n\n       If running on a Solaris server, the link will use the default version:\n\n       $HOME/path/example.txt -> $HOME/path/example.txt##default\n\n       If running on a system, with class set to \"Work\", the link will be:\n\n       $HOME/path/example.txt -> $HOME/path/example.txt##class.Work\n\n       If no \"##default\" version exists and no files  have  valid  conditions,\n       then no link will be created.\n\n       Links  are also created for directories named this way, as long as they\n       have at least one yadm managed file within them (at the top level).\n\n       yadm will automatically create these links by default. This can be dis‐\n       abled using the yadm.auto-alt configuration.  Even if  disabled,  links\n       can be manually created by running yadm alt.\n\n       Class  is  a special value which is stored locally on each host (inside\n       the local repository). To use alternate symlinks using class, you  must\n       set  the  value  of class using the configuration local.class.  This is\n       set like any other yadm configuration with the yadm config command. The\n       following sets the class to be \"Work\".\n\n         yadm config local.class Work\n\n       Similarly, the values of architecture, os, hostname, and  user  can  be\n       manually  overridden  using  the  configuration options local.arch, lo‐\n       cal.os, local.hostname, and local.user.\n\n\n## TEMPLATES\n       If a template condition is defined in an alternate file's \"##\"  suffix,\n       and the necessary dependencies for the template are available, then the\n       file will be processed to create or overwrite files.\n\n       Supported template processors:\n\n       default\n              This  is  yadm's  built-in template processor. This processor is\n              very basic, with a Jinja-like  syntax.  The  advantage  of  this\n              processor  is  that it only depends upon awk, which is available\n              on most *nix systems. To use this processor, specify  the  value\n              of \"default\" or just leave the value off (e.g. \"##template\").\n\n       ESH    ESH is a template processor written in POSIX compliant shell. It\n              allows  executing  shell  commands within templates. This can be\n              used to reference your own configurations within templates,  for\n              example:\n\n                <% yadm config mysection.myconfig %>\n\n              To use the ESH template processor, specify the value of \"esh\"\n\n       j2cli  To  use the j2cli Jinja template processor, specify the value of\n              \"j2\"  or \"j2cli\".\n\n       envtpl To use the envtpl Jinja template processor, specify the value of\n              \"j2\" or \"envtpl\".\n\n       NOTE: Specifying \"j2\" as the processor will attempt to use j2cli or en‐\n       vtpl, whichever is available.\n\n       If the template processor specified is  available,  templates  will  be\n       processed to create or overwrite files.\n\n       During  processing,  the  following variables are available in the tem‐\n       plate:\n\n        Default              Jinja or ESH         Description\n        -------------        -------------        ----------------------------\n        yadm.arch            YADM_ARCH            uname -m\n        yadm.class           YADM_CLASS           Last locally defined class\n        yadm.classes         YADM_CLASSES         All classes\n        yadm.distro          YADM_DISTRO          lsb_release -si\n        yadm.distro_family   YADM_DISTRO_FAMILY   ID_LIKE from /etc/os-release\n        yadm.hostname        YADM_HOSTNAME        uname -n (without domain)\n        yadm.os              YADM_OS              uname -s\n        yadm.source          YADM_SOURCE          Template filename\n        yadm.user            YADM_USER            id -u -n\n        env.VAR                                   Environment variable VAR\n\n       NOTE: The OS for \"Windows Subsystem for Linux\" is  reported  as  \"WSL\",\n       even though uname identifies as \"Linux\".\n\n       NOTE:  If lsb_release is not available, DISTRO will be the ID specified\n       in /etc/os-release.\n\n       Examples:\n\n       whatever##template with the following content\n\n         {% if yadm.user == \"harvey\" %}\n         config={{yadm.class}}-{{yadm.os}}\n         {% else %}\n         config=dev-whatever\n         {% include \"whatever.extra\" %}\n         {% endif %}\n\n       would output a file named whatever with the following  content  if  the\n       user is \"harvey\":\n\n         config=work-Linux\n\n       and the following otherwise (if whatever.extra contains admin=false):\n\n         config=dev-whatever\n         admin=false\n\n       An  equivalent  Jinja  template  named whatever##template.j2 would look\n       like:\n\n         {% if YADM_USER == 'harvey' -%}\n         config={{YADM_CLASS}}-{{YADM_OS}}\n         {% else -%}\n         config=dev-whatever\n         {% include 'whatever.extra' %}\n         {% endif -%}\n\n       An equivalent ESH templated  named  whatever##template.esh  would  look\n       like:\n\n         <% if [ \"$YADM_USER\" = \"harvey\" ]; then -%>\n         config=<%= $YADM_CLASS %>-<%= $YADM_OS %>\n         <% else -%>\n         config=dev-whatever\n         <%+ whatever.extra %>\n         <% fi -%>\n\n\n## ENCRYPTION\n       It  can  be  useful to manage confidential files, like SSH or GPG keys,\n       across multiple systems. However, doing so would put  plain  text  data\n       into a Git repository, which often resides on a public system. yadm can\n       make  it  easy  to  encrypt and decrypt a set of files so the encrypted\n       version can be maintained in the Git  repository.   This  feature  will\n       only work if a supported tool is available.  Both gpg(1) and openssl(1)\n       are  supported.   gpg is used by default, but openssl can be configured\n       with the yadm.cipher configuration.\n\n       To use this feature, a list of patterns must be created  and  saved  as\n       $HOME/.config/yadm/encrypt.   This  list of patterns should be relative\n       to the configured work-tree (usually $HOME).  For example:\n\n                  .ssh/*.key\n                  .gnupg/*.gpg\n\n       Standard filename expansions (*, ?, [) are supported.  If you have Bash\n       version 4, you may use \"**\" to match all subdirectories.   Other  shell\n       expansions like brace and tilde are not supported.  Spaces in paths are\n       supported,  and should not be quoted.  If a directory is specified, its\n       contents will be included, but not recursively.  Paths beginning with a\n       \"!\" will be excluded.\n\n       The yadm encrypt command will find all files matching the patterns, and\n       prompt for a password. Once a  password  has  confirmed,  the  matching\n       files  will  be encrypted and saved as $HOME/.local/share/yadm/archive.\n       The \"encrypt\" and \"archive\" files should be added to the  yadm  reposi‐\n       tory so they are available across multiple systems.\n\n       To decrypt these files later, or on another system run yadm decrypt and\n       provide  the  correct password.  After files are decrypted, permissions\n       are automatically updated as described in the PERMISSIONS section.\n\n       Symmetric encryption is used by default, but asymmetric encryption  may\n       be enabled using the yadm.gpg-recipient configuration.\n\n       NOTE:  It is recommended that you use a private repository when keeping\n       confidential files, even though they are encrypted.\n\n       Patterns found in $HOME/.config/yadm/encrypt are automatically added to\n       the repository's info/exclude file every  time  yadm  encrypt  is  run.\n       This is to prevent accidentally committing sensitive data to the repos‐\n       itory.  This can be disabled using the yadm.auto-exclude configuration.\n\n       Using transcrypt or git-crypt\n\n       A  completely separate option for encrypting data is to install and use\n       transcrypt or git-crypt.  Once installed, you can use  these  tools  by\n       running  yadm transcrypt or yadm git-crypt.  These tools enables trans‐\n       parent encryption and decryption of files in a git repository. See  the\n       following web sites for more information:\n\n       - https://github.com/elasticdog/transcrypt\n\n       - https://github.com/AGWA/git-crypt\n\n## PERMISSIONS\n       When  files  are checked out of a Git repository, their initial permis‐\n       sions are dependent upon the user's umask. Because of this,  yadm  will\n       automatically  update  the  permissions of some file paths. The \"group\"\n       and \"others\" permissions will be removed from the following files:\n\n       - $HOME/.local/share/yadm/archive\n\n       - All files matching patterns in $HOME/.config/yadm/encrypt\n\n       - The SSH directory and files, .ssh/*\n\n       - The GPG directory and files, .gnupg/*\n\n       yadm will automatically update permissions by default. This can be dis‐\n       abled using the yadm.auto-perms configuration. Even if  disabled,  per‐\n       missions  can  be manually updated by running yadm perms.  The .ssh di‐\n       rectory processing can be disabled using the yadm.ssh-perms  configura‐\n       tion.  The  .gnupg  directory  processing  can  be  disabled  using the\n       yadm.gpg-perms configuration.\n\n       When cloning a repo which includes data in a .ssh or .gnupg  directory,\n       if  those  directories  do  not exist at the time of cloning, yadm will\n       create the directories with mask 0700 prior to merging the fetched data\n       into the work-tree.\n\n       When running a Git command and .ssh or .gnupg directories do not exist,\n       yadm will create those directories with mask 0700 prior to running  the\n       Git command. This can be disabled using the yadm.auto-private-dirs con‐\n       figuration.\n\n\n## HOOKS\n       For  every  command yadm supports, a program can be provided to run be‐\n       fore or after that command. These are  referred  to  as  \"hooks\".  yadm\n       looks  for  hooks in the directory $HOME/.config/yadm/hooks.  Each hook\n       is named using a prefix of pre_ or post_, followed by the command which\n       should trigger the hook. For example, to create a hook which is run af‐\n       ter every yadm pull command, create a hook named post_pull.  Hooks must\n       have the executable file permission set.\n\n       If a pre_ hook is defined, and the hook terminates with a non-zero exit\n       status, yadm will refuse to run the yadm command.  For  example,  if  a\n       pre_commit  hook is defined, but that command ends with a non-zero exit\n       status, the yadm commit will never be run. This allows one  to  \"short-\n       circuit\" any operation using a pre_ hook.\n\n       Hooks  have  the  following  environment variables available to them at\n       runtime:\n\n       YADM_HOOK_COMMAND\n              The command which triggered the hook\n\n       YADM_HOOK_EXIT\n              The exit status of the yadm command\n\n       YADM_HOOK_FULL_COMMAND\n              The yadm command with all command line arguments (parameters are\n              space delimited, and any space, tab or backslash will be escaped\n              with a backslash)\n\n       YADM_HOOK_REPO\n              The path to the yadm repository\n\n       YADM_HOOK_WORK\n              The path to the work-tree\n\n\n## FILES\n       All of yadm's configurations are  relative  to  the  \"yadm  directory\".\n       yadm  uses the \"XDG Base Directory Specification\" to determine this di‐\n       rectory.  If the environment variable $XDG_CONFIG_HOME is defined as  a\n       fully  qualified  path,  this  directory will be $XDG_CONFIG_HOME/yadm.\n       Otherwise it will be $HOME/.config/yadm.\n\n       Similarly, yadm's data files are relative to the \"yadm data directory\".\n       yadm uses the \"XDG Base Directory Specification\" to determine this  di‐\n       rectory.   If  the  environment variable $XDG_DATA_HOME is defined as a\n       fully qualified path, this directory will be $XDG_DATA_HOME/yadm.  Oth‐\n       erwise it will be $HOME/.local/share/yadm.\n\n       The following are the default paths yadm uses for its own  data.   Most\n       of these paths can be altered using universal options.  See the OPTIONS\n       section for details.\n\n       $HOME/.config/yadm\n              The yadm directory. By default, all configs yadm stores is rela‐\n              tive to this directory.\n\n       $HOME/.local/share/yadm\n              The  yadm  data  directory.  By default, all data yadm stores is\n              relative to this directory.\n\n       $YADM_DIR/config\n              Configuration file for yadm.\n\n       $YADM_DIR/alt\n              This is a directory to keep  \"alternate  files\"  without  having\n              them  side-by-side  with the resulting symlink or processed tem‐\n              plate. Alternate files placed in this directory will be  created\n              relative to $HOME instead.\n\n       $YADM_DATA/repo.git\n              Git repository used by yadm.\n\n       $YADM_DIR/encrypt\n              List of globs used for encrypt/decrypt\n\n       $YADM_DATA/archive\n              All files encrypted with yadm encrypt are stored in this file.\n\n\n## EXAMPLES\n       yadm init\n              Create an empty repo for managing files\n\n       yadm add .bash_profile ; yadm commit\n              Add .bash_profile to the Git index and create a new commit\n\n       yadm remote add origin <url>\n              Add a remote origin to an existing repository\n\n       yadm push -u origin master\n              Initial push of master to origin\n\n       echo .ssh/*.key >> $HOME/.config/yadm/encrypt\n              Add a new pattern to the list of encrypted files\n\n       yadm encrypt ; yadm add ~/.local/share/yadm/archive ; yadm commit\n              Commit a new set of encrypted files\n\n\n## REPORTING BUGS\n       Report issues or create pull requests at GitHub:\n\n       https://github.com/yadm-dev/yadm/issues\n\n\n## AUTHOR\n       Tim Byrne <sultan@locehilios.com>\n\n\n## SEE ALSO\n       git(1), gpg(1) openssl(1) transcrypt(1) git-crypt(1)\n\n       https://yadm.io/\n\n"
        },
        {
          "name": "yadm.spec",
          "type": "blob",
          "size": 1.38671875,
          "content": "%{!?_pkgdocdir: %global _pkgdocdir %{_docdir}/%{name}-%{version}}\nName: yadm\nSummary: Yet Another Dotfiles Manager\nVersion: 3.3.0\nGroup: Development/Tools\nRelease: 1%{?dist}\nURL: https://yadm.io\nLicense: GPL-3.0-only\nRequires: bash\nRequires: git\n\nSource: %{name}.tar.gz\nBuildRoot: %{_tmppath}/%{name}-%{version}-build\nBuildArch: noarch\n\n%description\nyadm is a tool for managing a collection of files across multiple computers,\nusing a shared Git repository. In addition, yadm provides a feature to select\nalternate versions of files based on the operation system or host name. Lastly,\nyadm supplies the ability to manage a subset of secure files, which are\nencrypted before they are included in the repository.\n\n%prep\n%setup -c\n\n%build\n\n%install\n\n# this is done to allow paths other than yadm-x.x.x (for example, when building\n# from branches instead of release tags)\ntest -f yadm || cd *yadm-*\n\n%{__mkdir} -p %{buildroot}%{_bindir}\n%{__cp}  yadm %{buildroot}%{_bindir}\n\n%{__mkdir} -p  %{buildroot}%{_mandir}/man1\n%{__cp} yadm.1 %{buildroot}%{_mandir}/man1\n\n%{__mkdir} -p                        %{buildroot}%{_pkgdocdir}\n%{__cp} README.md                    %{buildroot}%{_pkgdocdir}/README\n%{__cp} CHANGES CONTRIBUTORS LICENSE %{buildroot}%{_pkgdocdir}\n%{__cp} -r completion contrib        %{buildroot}%{_pkgdocdir}\n\n%files\n%attr(755,root,root) %{_bindir}/yadm\n%attr(644,root,root) %{_mandir}/man1/*\n%doc %{_pkgdocdir}\n"
        }
      ]
    }
  ]
}