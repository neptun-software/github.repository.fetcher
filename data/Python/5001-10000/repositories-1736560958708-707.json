{
  "metadata": {
    "timestamp": 1736560958708,
    "page": 707,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Qiskit/qiskit",
      "stars": 5501,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".azure",
          "type": "tree",
          "content": null
        },
        {
          "name": ".binder",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clippy.toml",
          "type": "blob",
          "size": 0.1298828125,
          "content": "disallowed-types = [\n    \"std::collections::HashSet\",\n    \"std::collections::HashMap\",\n    \"ahash::HashSet\",\n    \"ahash::HashMap\",\n]\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.169921875,
          "content": "# This code is part of Qiskit.\n#\n# (C) Copyright IBM 2017, 2021.\n#\n# This code is licensed under the Apache License, Version 2.0. You may\n# obtain a copy of this license in the LICENSE.txt file in the root directory\n# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.\n#\n# Any modifications or derivative works of this code must retain this\n# copyright notice, and modified files need to carry a notice indicating\n# that they have been altered from the originals.\n\n# EditorConfig sets project-wide editor defaults: https://EditorConfig.org\n\n# top-most EditorConfig file, stop looking higher in the tree\nroot = true\n\n# Default settings can be overidden by editorconfig file in a subdir\n# or by a specific glob later in this file\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\ntrim_trailing_whitespace = true\n\n# Python\n[*.py]\nindent_size = 4\n\n# Javascript\n[*.{js,json}]\nindent_style = space\nindent_size = 2\n\n## Windows files\n# [*.bat]\n# end_of_line = crlf\n\n# Makefile\n[Makefile]\nindent_style = tab\n\n# Markdown\n[*.md]\n# trailing whitespace is used for <br/> in md (yuck)\ntrim_trailing_whitespace = false\n\n# YAML\n[*.{yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1201171875,
          "content": "2eee56616d50a9e26756f855ef4aa0135920ad78\n3763e61f16f97598cb0fa317277ad85fa15db738\n9aa2982aacdd39ca3bc2994d7103992059a105d3\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.033203125,
          "content": "# SDK config file\nQconfig.py\n\n# ply outputs\nqiskit/qasm/parser.out\n\n# editor files\n.vscode/\n.idea/\n\n#standard python ignores follow\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n.pytest_cache/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\ntest/python/*.log\ntest/python/*.pdf\ntest/python/*.prof\n.stestr/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.asv/\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n.DS_Store\n\ndummyscripts/*\n\ntoken.json\n\ntutorial/rst/_build/*\n\ntest/python/test_qasm_python_simulator.pdf\n\nqiskit/bin/*\n\ntest/python/test_save.json\n\ntest/python/*.tex\n\nout/*\n\n# CMake generates this file on the fly\nqiskit/providers/local/qasm_simulator_cpp\nqiskit/providers/legacysimulators/qasm_simulator_cpp\n\nsrc/qasm-simulator-cpp/test/qubit_vector_tests\n\n*.o\n\n# Cython pass\nqiskit/transpiler/passes/**/cython/**/*.cpp\nqiskit/quantum_info/states/cython/*.cpp\n\n# Sphinx documentation\n/docs/_build\n/docs/stubs\n/docs/locale\n/executed_tutorials\n\n# Notebook testing images\ntest/visual/mpl/circuit/circuit_results/*.png\ntest/visual/mpl/circuit/circuit_results/*.json\ntest/visual/mpl/graph/graph_results/*.png\ntest/visual/mpl/graph/graph_results/*.json\ntest/visual/mpl/visual_test_failures/*.png\n\n# Added by cargo\n\n/target\n"
        },
        {
          "name": ".local-spellings",
          "type": "blob",
          "size": 2.4541015625,
          "content": "Aaronson\nAbelian\nAbhari\nacyclic\nadjoint\nal\nancilla\nancillas\nansatz\nAPI\nASCII\nasync\nattribute's\nautofunction\nautosummary\nazimuthal\nbackend\nbackend's\nbackends\nbargraph\nBFS\nBiamonte\nbijective\nbijectivity\nbitstring\nbitstrings\nBloch\nblog\nBrassard\nBravyi\nBravyi's\nbuiltin\nBures\ncancelled\ncancelling\ncastable\nCem\nChernoff\nChilds\nChoi\nChong\nChuang\nCirac\nCliffords\ncnot\ncnots\ncombinatorial\nconformant\nCP\nCPTP\nCPU\nCPUs\nCSR\ncswap\ncurrentmodule\nCVaR\ncython\nDAG's\nDehaene\ndeserialization\ndeserialize\ndeserialized\ndeserializes\ndevectorization\ndevectorize\ndict\ndicts\ndisassembler\ndit\ndocstring\ndropdown\ndunder\ndurations\nendian\nentangler\nenums\nenv\neof\net\nEuler\nevolutions\nfallback\nfetchable\nfidelities\nformatter\nframechange\nFredkin\nfrontend\nGacon\nGambetta\ngaussian\ngetter\nGHz\nGHZ\nGottesman\nGushu\nHaar\nhacky\nHadamard\nHaselgrove\nhashable\nHellinger\nHinton\nHoare\nHorodecki\nhostname\nHoyer\nhyperthreading\nidempotence\niff\nindices\ninit\ninitializer\ninline\ninstantiation\ninternet\ninvariants\nisometry\niswap\nIten\niterable\nJacobian\nJandura's\nJavadi\nJeroen\nJohansson\njson\njsonschema\njupyter\nket\nKetan\nKitaev\nKraus\nkwarg\nkwargs\nlabelling\nlen\nlexer\nlexers\nLHS\nlookahead\nlossy\nLSB\nMakhlin\nMartonosi\nMaslov\nmergeable\nMerkel\nmetadata\nMetger\nmodelled\nMølmer\nMosca\nMotzoi\nMoyard\nmultigraph\nmultiplexor\nmultiplexors\nMurali\nnamespace\nNelder\nnormals\noffline\nonline\nopflow\noptimizers\novercomplete\noveroptimization\nparameterization\nparameterizations\npass's\nPauli\nPaulis\npiecewise\nplugin\nplugins\npostprocessing\nPRA\nPrakash\nprogressbar\nPTM\npyplot\nqasm\nqft\nQiskit's\nqobj\nqsphere\nquaternion\nquaternions\nqubit\nqubit's\nqubits\nqudit\nrecurse\nrecursing\nredistributions\nrefactor\nregisterless\nrenormalizing\nrescaling\nresynthesis\nresynthesized\nRHS\nruntime\nSabo\nsanitization\nschemas\nSchoute\nscikit\nSDK\nseealso\nSergey\nSergey's\nShende\nShor\nSNO\nSørensen\nstatespace\nstatevector\nstderr\nstdin\nstdout\nstepwise\nStinespring\nstylesheet\nstylesheets\nsubcircuit\nsubcircuits\nsubclassed\nsubclasses\nsubclassing\nsubgraph\nsupercontrolled\nsuperoperator\nsuperoperators\nSutter\nsvg\nSvore\nswapper\nsymplectic\nteleport\nteleportation\nTetris\nth\ntimeslot\ntimeslots\ntimestep\ntoctree\nToffoli\nTP\ntranspilation\ntranspile\ntranspiled\ntranspiler\ntranspiling\nTrotterization\nunary\nuncompiled\nuncomputed\nuncomputing\nundirected\nunentangled\nunhandled\nunitaries\nunmergeable\nunpickling\nunroller\nunrollers\nUnsal\nunsubscribe\nunsubscribed\nunsubscribing\nURL\nvalidator\nvalidators\nvariational\nvectorization\nvectorize\nvertices\nvon\nWatrous\nwaveforms\nwavefunction\nWeyl\nwireframe\nwiremap\nWoerner\nXie\nYufei\nZhang\nZoufal"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 14.5341796875,
          "content": "# Entries in this file are made for two reasons:\n# 1) to merge multiple git commit authors that correspond to a single author\n# 2) to change the canonical name and/or email address of an author.\n#\n# Format to replace name and email:\n#     Canonical Name <Canonical@email>  <commit@email>\n#     \\--------------+---------------/ \\------+------/\n#                 replace                    find\n# Format to replace name only:\n#     Canonical Name <Canonical@email>\n#     \\------+-----/ \\-------+-------/\n#          replace         find\n# See also: 'git shortlog --help' and 'git check-mailmap --help'.\n#\n# If you don't like the way your name is cited by qiskit, please feel free to\n# open a pull request against this file to set your preferred naming.\n#\n# Note that each qiskit element uses its own mailmap so it may be necessary to\n# propagate changes in other repos for consistency.\n#\nAbby Mitchell <23662430+javabster@users.noreply.github.com> <abby.mitchell@btinternet.com>\nAbby Mitchell <23662430+javabster@users.noreply.github.com> <abby.s.mitchell@gmail.com>\nAbdón Rodríguez Davila <a@abdonrd.com>\nAbigail J. Cross <across@us.ibm.com>\nAbraham Asfaw <abraham.asfaw@ibm.com> <asfaw@princeton.edu>\nAdenilton Silva <7927558+adjs@users.noreply.github.com> <adjs@users.noreply.github.com>\nAdenilton Silva <7927558+adjs@users.noreply.github.com> <ajsilva@cin.ufpe.br>\nAdish Vartak <avartak@cern.ch> <adishvartak@gmail.com>\nAdrien Suau <adrien.suau@cerfacs.fr>\nAlbert Frisch <albert.frisch@de.ibm.com>\nAlbert Frisch <albert.frisch@de.ibm.com> <alfr@de.ibm.com>\nAlberto Maldonado Romo <Alberto.Maldonado.Romo@ibm.com>\nAlberto Maldonado Romo <Alberto.Maldonado.Romo@ibm.com> <amaldonador1300@alumno.ipn.mx>\nAlejandro Montanez <alejomonbar@gmail.com>\nAlex Zhang <alex.lx.zhang@gmail.com>\nAlexander Ivrii <alexi@il.ibm.com>\nAli Javadi-Abhari <ali.javadi@ibm.com>\nAli Javadi-Abhari <ali.javadi@ibm.com> <ajavadia@princeton.com>\nAli Javadi-Abhari <ali.javadi@ibm.com> <ajavadia@princeton.edu>\nAli Javadi-Abhari <ali.javadi@ibm.com> <ajavadia@users.noreply.github.com>\nAlmudena Carrera Vazquez <acv@zurich.ibm.com>\nAlmudena Carrera Vazquez <acv@zurich.ibm.com> <almudenacarreravazquez@hotmail.com>\nAndrew W. Cross <awcross@us.ibm.com>\nAndrew W. Cross <awcross@us.ibm.com> <awcross@Andrews-MacBook-Pro.local>\nAndrew W. Cross <awcross@us.ibm.com> <awcross@andrews-mbp.watson.ibm.com>\nAndré Großardt <99898527+grossardt@users.noreply.github.com>\nAndré Großardt <99898527+grossardt@users.noreply.github.com> <andgros@einstein.tpi.uni-jena.de>\nAnimesh N. Dangwal <animesh.leo@gmail.com>\nAnna Phan <9410731+attp@users.noreply.github.com> <anna.phan@au1.ibm.com>\nAnnanay Kapila <k.annanay@gmail.com>\nAnthony Gandon <anthony.gandon@ibm.com>\nAnthony Gandon <anthony.gandon@ibm.com> <antho91370@gmail.com>\nAnthony Gandon <anthony.gandon@ibm.com> <nan@zurich.ibm.com>\nAnton Dekusar <62334182+adekusar-drl@users.noreply.github.com>\nAnton Dekusar <62334182+adekusar-drl@users.noreply.github.com> <adekusar@ie.ibm.com>\nAntonio D. Córcoles-Gonzales <adcorcol@us.ibm.com>\nAntonio Mezzacapo <30698465+antoniomezzacapo@users.noreply.github.com> <amezzac@us.ibm.com>\nArijit Saha <59946663+Arijit02@users.noreply.github.com>\nArtemiy Burov <95361834+tyrolize@users.noreply.github.com> <artemiy.v.burov@gmail.com>\nAtsushi Matsuo <47442626+a-matsuo@users.noreply.github.com>\nAtsushi Matsuo <47442626+a-matsuo@users.noreply.github.com> <matsuoa@jp.ibm.com>\nAziz Ngoueya <49644465+AzizNgoueya@users.noreply.github.com>\nBartłomiej Stępień <35294021+bartek-bartlomiej@users.noreply.github.com>\nBen Rosand <brosand@gmail.com>\nBhargav Vishnu <38890773+Bhargavishnu@users.noreply.github.com>\nBryce Fuller <Bryce.Fuller@ibm.com>\nBryce Fuller <Bryce.Fuller@ibm.com> <bgf024@gmail.com>\nCarmen Recio Valcarce <car_rv@outlook.es> <49230820+carmenrv@users.noreply.github.com>\nCaroline Tornow <79633854+catornow@users.noreply.github.com>\nChris Culver <chris.cb.culver@gmail.com>\nChrista Zoufal <40824883+Zoufalc@users.noreply.github.com>\nChrista Zoufal <40824883+Zoufalc@users.noreply.github.com> <ouf@zurich.ibm.com>\nChristian Clauss <cclauss@me.com> <cclauss@bluewin.ch>\nChristophe Vuillot <c.vuillot@tudelft.nl>\nChristopher J. Wood <cjwood@us.ibm.com>\nChristopher Zachow <Christopher.zachow@sva.de> <christopher.zachow@sva.de>\nDaniel Aja <51513641+DanielAja@users.noreply.github.com>\nDaniel Egger <38065505+eggerdj@users.noreply.github.com>\nDariusz Lasecki <dal@zurich.ibm.com>\nDavid Ittah <dime10@users.noreply.github.com>\nDavide Facoetti <dfacoet@gmail.com>\nDavide Ferrari <20130061+DavideFrr@users.noreply.github.com>\nDennis Liu <54714046+dennis-liu-1@users.noreply.github.com>\nDhruv Bhatnagar <61590679+dhruvbhq@users.noreply.github.com>\nDiego M. Rodríguez <diego.plan9@gmail.com>\nDimitar Trenev <64981310+dtrenev@users.noreply.github.com>\nDmitri Maslov <34778124+dmitrimaslov@users.noreply.github.com>\nDouglas T. McClure <dtmcclur@us.ibm.com>\nDoğukan Tuna <5399244-sotapr@users.noreply.gitlab.com> <dtuname@gmail.com>\nDrew Risinger <drewrisinger@users.noreply.github.com>\nEdward H. Chen <1069980+ehchen@users.noreply.github.com>\nEdward H. Chen <1069980+ehchen@users.noreply.github.com> <ehchen@ibm.com>\nEdwin Navarro <enavarro@comcast.net>\nElena Peña Tapia <57907331+ElePT@users.noreply.github.com>\nElena Peña Tapia <57907331+ElePT@users.noreply.github.com> <epenatap@gmail.com>\nEli Arbel <46826214+eliarbel@users.noreply.github.com> <arbel@il.ibm.com>\nEric Arellano <14852634+Eric-Arellano@users.noreply.github.com> <arellano@erics-macbook-pro.local>\nEric Arellano <14852634+Eric-Arellano@users.noreply.github.com> <ericarellano@me.com>\nEric Peterson <Eric.Peterson@ibm.com> <peterson.eric.c@gmail.com>\nErick Winston <ewinston@us.ibm.com>\nErick Winston <ewinston@us.ibm.com> <ewinston@users.noreply.github.com>\nEvgenii Zheltonozhskii <zheltonozhskiy@gmail.com>\nFaisal Debouni <faisal@megoapps.com>\nFarai Mazhandu <35575882+faraimazh@users.noreply.github.com>\nFran Cabrera <francabrera@users.noreply.github.com> <fcabrera@us.ibm.com>\nFran Cabrera <francabrera@users.noreply.github.com> <francabrera@Frans-MacBook-Pro.local>\nFranck Chevallier <fchevallier10@gmail.com>\nFrank Harkins <frankharkins@users.noreply.github.com> <frankharkins@hotmail.co.uk>\nFreya Shah <28627285+fs1132429@users.noreply.github.com>\nFreya Shah <28627285+fs1132429@users.noreply.github.com> <you@example.comfs1132429@gmail.com>\nGabriele Agliardi <72732327+gabrieleagl@users.noreply.github.com>\nGadi Aleksandrowicz <gadial@gmail.com>\nGadi Aleksandrowicz <gadial@gmail.com> <gadia@il.ibm.com>\nGeorge Zhou <geoyzhou@gmail.com>\nGeorgios Tsilimigkounakis <45130028+georgios-ts@users.noreply.github.com>\nGeorgios Tsilimigkounakis <45130028+georgios-ts@users.noreply.github.com> <ts.giorgos@yahoo.gr>\nGiacomo Nannicini <gnannicini@users.noreply.github.com> <giacomo.n@gmail.com>\nGian Gentinetta <31244916+gentinettagian@users.noreply.github.com> <gian.gentinetta@gmx.ch>\nGinés Carrascal <gines_carrascal@es.ibm.com> <gines.carrascal@gmail.com>\nHiroshi Horii <horii@jp.ibm.com> <hhorii@users.noreply.github.com>\nIan Hincks <2229105+ihincks@users.noreply.github.com> <ian.hincks@gmail.com>\nIan Hincks <2229105+ihincks@users.noreply.github.com> <ian.hincks@ibm.com>\nIgor Olegovich Sokolov <iso@zurich.ibm.com> <ISO@zurich.ibm.com>\nIkko Hamamura <ikkoham@users.noreply.github.com>\nIsha Rajput <33170219+irajput@users.noreply.github.com>\nIsmael Faro Sertage <ismael.faro1@ibm.com> <ismael.faro.sertage@gmail.com>\nIsmael Faro Sertage <ismael.faro1@ibm.com> <ismael.faro1@ibm.com>\nIsmail Yunus Akhalwaya <ismaila@za.ibm.com>\nIsmail Yunus Akhalwaya <ismaila@za.ibm.com> <30803146+ismaila-at-za-ibm@users.noreply.github.com>\nIvan Carvalho <ivancarv@student.ubc.ca> <ivan.ivancps.cn@gmail.com>\nJack J. Woehr <4604036+jwoehr@users.noreply.github.com> <jwoehr@softwoehr.com>\nJake Lishman <jake.lishman@ibm.com>\nJake Lishman <jake.lishman@ibm.com> <jake@binhbar.com>\nJames R. Garrison <garrison@ibm.com>\nJames R. Garrison <garrison@ibm.com> <jim@garrison.cc>\nJames Seaward <58116376+JamesSeaward@users.noreply.github.com>\nJay M. Gambetta <jay.gambetta@us.ibm.com>\nJerry M. Chow <chowmj@us.ibm.com>\nJessica Wilson <jessicalostinspace@gmail.com>\nJesús Pérez <jesusper@us.ibm.com> <jesusprubio@gmail.com>\nJesús Sistos <46694558+jsistos@users.noreply.github.com> <jesussistos.josb@gmail.com>\nJohannes Weidenfeller <54772951+Knabberjoe@users.noreply.github.com>\nJonathan A. Wildstrom <34069155+jwildstr-ibm@users.noreply.github.com>\nJonathan A. Wildstrom <34069155+jwildstr-ibm@users.noreply.github.com> <jwildstr@us.ibm.com>\nJonathan Shoemaker <Jonathan-Shoemaker@ibm.com>\nJonathan Shoemaker <Jonathan-Shoemaker@ibm.com> <66969627+jonathan-shoemaker@users.noreply.github.com>\nJordan Connor <jordanhconnor@gmail.com>\nJorge Carballo <carballo@us.ibm.com> <jelcaf@gmail.com>\nJuan Cruz-Benito <juan.cruz@ibm.com>\nJuan Gomez-Mosquera <atilag@gmail.com>\nJuan Gomez-Mosquera <atilag@gmail.com> <Juan.Gomez1@ibm.com>\nJuan Luis Sánchez Toural <toural@es.ibm.com>\nJulien Gacon <jul@zurich.ibm.com>\nJulien Gacon <jul@zurich.ibm.com> <gaconju@gmail.com>\nJulien Gacon <jul@zurich.ibm.com> <jules.gacon@gmail.com>\nJulien Gacon <jul@zurich.ibm.com> <jules.gacon@googlemail.com>\nKazuaki Ishizaki <kiszk@users.noreply.github.com> <ishizaki@jp.ibm.com>\nKazuki Tsuoka <103920010+king-p3nguin@users.noreply.github.com> <kazukitsuoka@g.ecc.u-tokyo.ac.jp>\nKazumasa Umezawa <e35372@jp.ibm.com>\nKevin J. Sung <kevinsung@users.noreply.github.com> <kevinjefferysung@gmail.com>\nKevin J. Sung <kevinsung@users.noreply.github.com> <kevjsung@umich.edu>\nKevin Krsulich <kevin.krsulich@ibm.com> <kevin@krsulich.net>\nLauren Capelluto <lcapelluto@users.noreply.github.com> <laurencapelluto@gmail.com>\nLev S. Bishop <18673315+levbishop@users.noreply.github.com>\nLuciano Bello <luciano.bello@ibm.com> <bel@zurich.ibm.com>\nLuciano Bello <luciano.bello@ibm.com> <lbello@gmail.com>\nLuciano Bello <luciano.bello@ibm.com> <luciano.bello@ibm.com>\nLuciano Bello <luciano.bello@ibm.com> <luciano@debian.org>\nM. Chandler Bennett <mchandlerbennett@gmail.com> <mcbennet@ncsu.edu>\nManoel Marques <manoel@us.ibm.com> <manoel.marques@ibm.com>\nManoel Marques <manoel@us.ibm.com> <manoelmrqs@gmail.com>\nMarco Pistoia <pistoia@us.ibm.com> <mpistoia@gmail.com>\nMartin Sandberg <martinos@us.ibm.com>\nMathieu Tillet <50137038+mtillet@users.noreply.github.com>\nMatt Stypulkoski <50181769+Matt-Stypulkoski@users.noreply.github.com>\nMax Reuter <Max.Reuter@ibm.com>\nMax Rossmannek <rmax@ethz.ch>\nMax Rossmannek <rmax@ethz.ch> <max.rossmannek@uzh.ch>\nMax Rossmannek <rmax@ethz.ch> <oss@zurich.ibm.com>\nNaoki Kanazawa <39517270+nkanazawa1989@users.noreply.github.com>\nNaoki Kanazawa <39517270+nkanazawa1989@users.noreply.github.com> <knzwnao@jp.ibm.com>\nNaoki Kanazawa <39517270+nkanazawa1989@users.noreply.github.com> <nkanazawa1989@gmail.com>\nNick Bronn <nick.bronn@gmail.com>\nNick Bronn <nick.bronn@gmail.com> <ntbronn@us.ibm.com>\nNinad Sathaye <sathayen@users.noreply.github.com>\nOmar Costa Hamido <18335360+omarcostahamido@users.noreply.github.com> <omarcostinha@gmail.com>\nPaco Martín Fernández <fmartinfdez@gmail.com>\nPanagiotis Barkoutsos <bpa@zurich.ibm.com> <pbarkoutsos@gmail.com>\nPatrick Neuweiler <npatrick@ethz.ch> <56123073+neupat@users.noreply.github.com>\nPaul Kassebaum <paul.kassebaum@ibm.com>\nPauline Ollitrault <49036540+paulineollitrault@users.noreply.github.com> <pauline.ollitrault1@gmail.com>\nPeng Liu <34400304+liupibm@users.noreply.github.com>\nPeng Liu <34400304+liupibm@users.noreply.github.com> <liup@us.ibm.com>\nPieter Eendebak <pieter.eendebak@gmail.com> <p.t.eendebak@tudelft.nl>\nPradeep Niroula <niroulapradeep@gmail.com> <npdeep@users.noreply.github.com>\nPrakash Murali <prakashmurali@gmail.com>\nQian Jianhua <87301318+QianJianhua1@users.noreply.github.com> <qianjh@fujitsu.com>\nqiskit-bot <54866446+qiskit-bot@users.noreply.github.com>\nQuintiii <46296978+IsidoreCarinae@users.noreply.github.com>\nRafael Martín-Cuevas Redondo <r.martin-cuevas@alumnos.upm.es> <r.martinc@outlook.com>\nRafaella Vale <26910380+rafaella-vale@users.noreply.github.com>\nRafaella Vale <26910380+rafaella-vale@users.noreply.github.com> <rfv@cin.ufpe.br>\nRafal Wieczorek <kenorb@users.noreply.github.com>\nRafał Pracht <55279376+rafal-pracht@users.noreply.github.com> <rpracht@wp.pl>\nRaphaël Lambert <49641842+rfclambert@users.noreply.github.com>\nRaynel Sanchez <87539502+raynelfss@users.noreply.github.com> <raynelfss@hotmail.com>\nRichard Chen <chunfuchen@users.noreply.github.com> <chenrich@us.ibm.com>\nRomain Moyard <36766072+rmoyard@users.noreply.github.com>\nRudy Raymond <rudyhar@jp.ibm.com> <rudyhar@jp.ibm.com>\nSalvador de la Puente González <neo.salvador@gmail.com> <salva@unoyunodiez.com>\nSamuel Bosch <BoschSamuel@users.noreply.github.com>\nScott Kelso <scottkelso07@hotmail.com>\nSebastian Brandhofer <sebastian.brandhofer@gmail.com>\nSebastian Brandhofer <sebastian.brandhofer@gmail.com> <148463728+sbrandhsn@users.noreply.github.com>\nSeif Mostafa <csseifms@gmail.com>\nShaohan Hu <shaohan.hu@ibm.com> <hushaohan@gmail.com>\nShelly Garion <46566946+ShellyGarion@users.noreply.github.com>\nShelly Garion <46566946+ShellyGarion@users.noreply.github.com> <shellygarion@users.noreply.github.com>\nShravan Patel <78003234+shravanpatel30@users.noreply.github.com>\nSoolu Thomas <soolu.thomas@ibm.com> <soolu.elto@gmail.com>\nStefan Woerner <wor@zurich.ibm.com> <41292468+stefan-woerner@users.noreply.github.com>\nStefan Woerner <wor@zurich.ibm.com> <stefan@swoerner.de>\nStefan Woerner <wor@zurich.ibm.com> <wor@zurich.ibm.com>\nStephen Wood <40241007+woodsp-ibm@users.noreply.github.com>\nStephen Wood <40241007+woodsp-ibm@users.noreply.github.com> <woodsp@us.ibm.com>\nSumit Puri <er.sumitpuri@gmail.com>\nTakashi Imamichi <31178928+t-imamichi@users.noreply.github.com> <imamichi@jp.ibm.com>\nTakashi Imamichi <31178928+t-imamichi@users.noreply.github.com> <t.imamichi@gmail.com>\nTharrmashastha SAPV <51048173+TharrmashasthaPV@users.noreply.github.com>\nTharrmashastha SAPV <51048173+TharrmashasthaPV@users.noreply.github.com> <tharrmashasthapv@users.noreply.github.com>\nThiago Melo <thiagomdazevedo@hotmail.com>\nThomas Alexander <talexander@ibm.com> <thomas.a.alexander@ibm.com>\nThomas Alexander <talexander@ibm.com> <thomasalexander2718@gmail.com>\nToshinari Itoko <itoko@jp.ibm.com>\nToshinari Itoko <itoko@jp.ibm.com> <15028342+itoko@users.noreply.github.com>\nVictor Villar <59838221+vvilpas@users.noreply.github.com> <vvilpas@gmail.com>\nVishnu Ajith <vishnuajith@gmail.com>\nVismai Khanderao <59114226+Vismai-Khanderao@users.noreply.github.com>\nVojtech Havlicek <Vojtech.Havlicek@ibm.com>\nWei Hu <weihu@cs.virginia.edu> <wei.hu@kfquantum.com>\nWill Bang <will.h.bang@gmail.com>\nWill Shanks <willshanks@us.ibm.com> <wshaos@posteo.net>\nYael Ben-Haim <yaelbh@il.ibm.com>\nyang.luh <34480044+LuhangYang@users.noreply.github.com>\nYotam Vaknin <Yotam.Vaknin@Ibm.com> <52409900+yotamvakninibm@users.noreply.github.com>\n"
        },
        {
          "name": ".mergify.yml",
          "type": "blob",
          "size": 0.1650390625,
          "content": "---\npull_request_rules:\n  - name: backport\n    conditions:\n      - label=stable backport potential\n    actions:\n      backport:\n        branches:\n          - stable/1.3\n"
        },
        {
          "name": ".stestr.conf",
          "type": "blob",
          "size": 0.033203125,
          "content": "[DEFAULT]\ntest_path=./test/python\n"
        },
        {
          "name": "CITATION.bib",
          "type": "blob",
          "size": 0.4599609375,
          "content": "@misc{qiskit2024,\n      title={Quantum computing with {Q}iskit},\n      author={Javadi-Abhari, Ali and Treinish, Matthew and Krsulich, Kevin and Wood, Christopher J. and Lishman, Jake and Gacon, Julien and Martiel, Simon and Nation, Paul D. and Bishop, Lev S. and Cross, Andrew W. and Johnson, Blake R. and Gambetta, Jay M.},\n      year={2024},\n      doi={10.48550/arXiv.2405.08810},\n      eprint={2405.08810},\n      archivePrefix={arXiv},\n      primaryClass={quant-ph}\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.20703125,
          "content": "# Code of Conduct\n\nAll members of this project agree to adhere to the Qiskit Code of Conduct listed at [docs.quantum.ibm.com/open-source/code-of-conduct](https://docs.quantum.ibm.com/open-source/code-of-conduct)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 41.2685546875,
          "content": "# Contributing\n\nQiskit is an open-source project committed to bringing quantum computing to\npeople of all backgrounds. This page describes how you can join the Qiskit\ncommunity in this goal.\n\n\n## Contents\n* [Before you start](#before-you-start)\n* [Choose an issue to work on](#Choose-an-issue-to-work-on)\n* [Set up Python virtual development environment](#set-up-python-virtual-development-environment)\n* [Installing Qiskit from source](#installing-qiskit-from-source)\n* [Issues and pull requests](#issues-and-pull-requests)\n* [Contributor Licensing Agreement](#contributor-licensing-agreement)\n* [Changelog generation](#changelog-generation)\n* [Release notes](#release-notes)\n* [Testing](#testing)\n* [Style and Lint](#style-and-lint)\n* [Building API docs locally](#building-api-docs-locally)\n  * [Troubleshooting docs builds](#troubleshooting-docs-builds)\n* [Development Cycle](#development-cycle)\n  * [Branches](#branches)\n  * [Release Cycle](#release-cycle)\n* [Adding deprecation warnings](#adding-deprecation-warnings)\n* [Using dependencies](#using-dependencies)\n  * [Adding a requirement](#adding-a-requirement)\n  * [Adding an optional dependency](#adding-an-optional-dependency)\n  * [Checking for optionals](#checking-for-optionals)\n* [Dealing with git blame ignore list](#dealing-with-the-git-blame-ignore-list)\n\n\n## Before you start\n\nIf you are new to Qiskit contributing we recommend you do the following before diving into the code:\n\n* Read the [Code of Conduct](https://github.com/Qiskit/qiskit/blob/main/CODE_OF_CONDUCT.md)\n* Familiarize yourself with the Qiskit community (via [Slack](https://qisk.it/join-slack),\n   [Stack Exchange](https://quantumcomputing.stackexchange.com), [GitHub](https://github.com/qiskit-community/feedback/discussions) etc.)\n\n\n## Choose an issue to work on\nQiskit uses the following labels to help non-maintainers find issues best suited to their interests and experience level:\n\n* [good first issue](https://github.com/Qiskit/qiskit/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) - these issues are typically the simplest available to work on, ideal for newcomers. They should already be fully scoped, with a clear approach outlined in the descriptions.\n* [help wanted](https://github.com/Qiskit/qiskit/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) - these issues are generally more complex than good first issues. They typically cover work that core maintainers don't currently have capacity to implement and may require more investigation/discussion. These are a great option for experienced contributors looking for something a bit more challenging.\n* [short project](https://github.com/Qiskit/qiskit/issues?q=is%3Aopen+is%3Aissue+label%3A%22short+project%22) - these issues are bigger pieces of work that require greater time commitment. Good options for hackathons, internship projects etc.\n\n\n## Set up Python virtual development environment\n\nVirtual environments are used for Qiskit development to isolate the development environment\nfrom system-wide packages. This way, we avoid inadvertently becoming dependent on a\nparticular system configuration. For developers, this also makes it easy to maintain multiple\nenvironments (e.g. one per supported Python version, for older versions of Qiskit, etc.).\n\n### Set up a Python venv\n\nAll Python versions supported by Qiskit include built-in virtual environment module\n[venv](https://docs.python.org/3/tutorial/venv.html).\n\nStart by creating a new virtual environment with `venv`. The resulting\nenvironment will use the same version of Python that created it and will not inherit installed\nsystem-wide packages by default. The specified folder will be created and is used to hold the environment's\ninstallation. It can be placed anywhere. For more detail, see the official Python documentation,\n[Creation of virtual environments](https://docs.python.org/3/library/venv.html).\n\n```\npython3 -m venv ~/.venvs/qiskit-dev\n```\n\nActivate the environment by invoking the appropriate activation script for your system, which can\nbe found within the environment folder. For example, for bash/zsh:\n\n\n```\nsource ~/.venvs/qiskit-dev/bin/activate\n```\n\nUpgrade pip within the environment to ensure Qiskit dependencies installed in the subsequent sections\ncan be located for your system.\n\n```\npip install -U pip\n```\n\n```\npip install -e .\n```\n\n### Set up a Conda environment\n\nFor Conda users, a new environment can be created as follows.\n\n```\nconda create -y -n QiskitDevenv python=3\nconda activate QiskitDevenv\n```\n\n```\npip install -e .\n```\n\n## Installing Qiskit from source\n\nQiskit is primarily written in Python but there are some core routines\nthat are written in the [Rust](https://www.rust-lang.org/) programming\nlanguage to improve the runtime performance. For the released versions of\nQiskit we publish precompiled binaries on the\n[Python Package Index](https://pypi.org/) for all the supported platforms\nwhich only requires a functional Python environment to install. However, when\nbuilding and installing from source you will need a Rust compiler installed. You can do this very easily\nusing rustup: https://rustup.rs/ which provides a single tool to install and\nconfigure the latest version of the rust compiler.\n[Other installation methods](https://forge.rust-lang.org/infra/other-installation-methods.html)\nexist too. For Windows users, besides rustup, you will also need install\nthe Visual C++ build tools so that Rust can link against the system c/c++\nlibraries. You can see more details on this in the\n[rustup documentation](https://rust-lang.github.io/rustup/installation/windows-msvc.html).\n\nIf you use Rustup, it will automatically install the correct Rust version\ncurrently used by the project.\n\nOnce you have a Rust compiler installed, you can rely on the normal Python\nbuild/install steps to install Qiskit. This means you just run\n`pip install .` in your local git clone to build and install Qiskit.\n\nDo note that if you do use develop mode/editable install (via `python setup.py develop` or `pip install -e .`) the Rust extension will be built in debug mode\nwithout any optimizations enabled. This will result in poor runtime performance.\nIf you'd like to use an editable install with an optimized binary you can\nrun `python setup.py build_rust --release --inplace` after you install in\neditable mode to recompile the rust extensions in release mode.\n\nNote that in order to run `python setup.py ...` commands you need have build\ndependency packages installed in your environment, which are listed in the\n`pyproject.toml` file under the `[build-system]` section.\n\n### Compile time options\n\nWhen building qiskit from source there are options available to control how\nQiskit is built. Right now the only option is if you set the environment\nvariable `QISKIT_NO_CACHE_GATES=1` this will disable runtime caching of\nPython gate objects when accessing them from a `QuantumCircuit` or `DAGCircuit`.\nThis makes a tradeoff between runtime performance for Python access and memory\noverhead. Caching gates will result in better runtime for users of Python at\nthe cost of increased memory consumption. If you're working with any custom\ntranspiler passes written in Python or are otherwise using a workflow that\nrepeatedly accesses the `operation` attribute of a `CircuitInstruction` or `op`\nattribute of `DAGOpNode` enabling caching is recommended.\n\n## Issues and pull requests\n\nWe use [GitHub pull requests](https://help.github.com/articles/about-pull-requests) to accept\ncontributions.\n\nWhile not required, opening a new issue about the bug you're fixing or the\nfeature you're working on before you open a pull request is an important step\nin starting a discussion with the community about your work. The issue gives us\na place to talk about the idea and how we can work together to implement it in\nthe code. It also lets the community know what you're working on, and if you\nneed help, you can reference the issue when discussing it with other community\nand team members.\n\n* For documentation issues relating to pages in the Start, Build, Transpile, Verify, Run, and Migration guides sections of [docs.quantum.ibm.com](https://docs.quantum.ibm.com/), please open an issue in the [Qiskit/documentation repo](https://github.com/Qiskit/documentation/issues/new/choose) rather than the Qiskit/qiskit repo. In other words, any page that DOES NOT have `/api/` in the url should be addressed in the Qiskit/documentation repo.\n* For issues relating to API reference pages (any page that contains `/api/` in the url), please open an issue in the repo specific to that API reference, for example [Qiskit/qiskit](https://github.com/Qiskit/qiskit/issues/new/choose), [Qiskit/qiskit-aer](https://github.com/Qiskit/qiskit-aer/issues/new/choose), or [Qiskit/qiskit-ibm-runtime](https://github.com/Qiskit/qiskit-ibm-runtime/issues/new/choose).\n\nIf you've written some code but need help finishing it, want to get initial\nfeedback on it prior to finishing it, or want to share it and discuss prior\nto finishing the implementation, you can open a *Draft* pull request and prepend\nthe title with the **\\[WIP\\]** tag (for Work In Progress). This will indicate\nto reviewers that the code in the PR isn't in its final state and will change.\nIt also means that we will not merge the commit until it is finished. You or a\nreviewer can remove the [WIP] tag when the code is ready to be fully reviewed for merging.\n\nBefore marking your Pull Request as \"ready for review\" make sure you have followed the\nPR Checklist below. PRs that adhere to this list are more likely to get reviewed and\nmerged in a timely manner.\n\n### Pull request checklist\n\nWhen submitting a pull request and you feel it is ready for review,\nplease ensure that:\n\n1. The code follows the code style of the project and successfully\n   passes the CI tests. For convenience, you can execute `tox` locally,\n   which will run these checks and report any issues.\n\n   If your code fails the local style checks (specifically the black\n   or Rust code formatting check) you can use `tox -eblack` and\n   `cargo fmt` to automatically fix the code formatting.\n2. The documentation has been updated accordingly. In particular, if a\n   function or class has been modified during the PR, please update the\n   *docstring* accordingly.\n\n   If your pull request is adding a new class, function, or module that is\n   intended to be user facing ensure that you've also added those to a\n   documentation `autosummary` index to include it in the api documentation.\n3. If you are of the opinion that the modifications you made warrant additional tests,\n   feel free to include them\n4. Ensure that if your change has an end user facing impact (new feature,\n   deprecation, removal etc) that you have added a reno release note for that\n   change and that the PR is tagged for the changelog.\n5. All contributors have signed the CLA.\n6. The PR has a concise and explanatory title (e.g. `Fixes Issue1234` is a bad title!).\n7. If the PR addresses an open issue the PR description includes the `fixes #issue-number`\n  syntax to link the PR to that issue (**you must use the exact phrasing in order for GitHub\n  to automatically close the issue when the PR merges**)\n\n### Code Review\n\nCode review is done in the open and is open to anyone. While only maintainers have\naccess to merge commits, community feedback on pull requests is extremely valuable.\nIt is also a good mechanism to learn about the code base.\n\nResponse times may vary for your PR, it is not unusual to wait a few weeks for a maintainer\nto review your work, due to other internal commitments. If you have been waiting over a week\nfor a review on your PR feel free to tag the relevant maintainer in a comment to politely remind\nthem to review your work.\n\nPlease be patient! Maintainers have a number of other priorities to focus on and so it may take\nsome time for your work to get reviewed and merged. PRs that are in a good shape (i.e. following the [Pull request checklist](#pull-request-checklist))\nare easier for maintainers to review and more likely to get merged in a timely manner. Please also make\nsure to always be kind and respectful in your interactions with maintainers and other contributors, you can read\n[the Qiskit Code of Conduct](https://github.com/Qiskit/qiskit/blob/main/CODE_OF_CONDUCT.md).\n\n\n## Contributor Licensing Agreement\n\nBefore you can submit any code, all contributors must sign a\ncontributor license agreement (CLA). By signing a CLA, you're attesting\nthat you are the author of the contribution, and that you're freely\ncontributing it under the terms of the Apache-2.0 license.\n\nWhen you contribute to the Qiskit project with a new pull request,\na bot will evaluate whether you have signed the CLA. If required, the\nbot will comment on the pull request, including a link to accept the\nagreement. The [individual CLA](https://qiskit.org/license/qiskit-cla.pdf)\ndocument is available for review as a PDF.\n\nNote: If your contribution is part of your employment or your contribution\nis the property of your employer, then you will more than likely need to sign a\n[corporate CLA](https://qiskit.org/license/qiskit-corporate-cla.pdf) too and\nemail it to us at <qiskit@us.ibm.com>.\n\n## Changelog generation\n\nThe changelog is automatically generated as part of the release process\nautomation. This works through a combination of the git log and the pull\nrequest. When a release is tagged and pushed to github the release automation\nbot looks at all commit messages from the git log for the release. It takes the\nPR numbers from the git log (assuming a squash merge) and checks if that PR had\na `Changelog:` label on it. If there is a label it will add the git commit\nmessage summary line from the git log for the release to the changelog.\n\nIf there are multiple `Changelog:` tags on a PR the git commit message summary\nline from the git log will be used for each changelog category tagged.\n\nThe current categories for each label are as follows:\n\n| PR Label               | Changelog Category |\n| -----------------------|--------------------|\n| Changelog: Deprecation | Deprecated         |\n| Changelog: New Feature | Added              |\n| Changelog: API Change  | Changed            |\n| Changelog: Removal     | Removed            |\n| Changelog: Bugfix      | Fixed              |\n\n## Release notes\n\nWhen making any end user facing changes in a contribution we have to make sure\nwe document that when we release a new version of qiskit. The expectation\nis that if your code contribution has user facing changes that you will write\nthe release documentation for these changes. This documentation must explain\nwhat was changed, why it was changed, and how users can either use or adapt\nto the change. The idea behind release documentation is that when a naive\nuser with limited internal knowledge of the project is upgrading from the\nprevious release to the new one, they should be able to read the release notes,\nunderstand if they need to update their program which uses qiskit, and how they\nwould go about doing that. It ideally should explain why they need to make\nthis change too, to provide the necessary context.\n\nTo make sure we don't forget a release note or if the details of user facing\nchanges over a release cycle we require that all user facing changes include\ndocumentation at the same time as the code. To accomplish this we use the\n[reno](https://docs.openstack.org/reno/latest/) tool which enables a git based\nworkflow for writing and compiling release notes.\n\n### Adding a new release note\n\nMaking a new release note is quite straightforward. Ensure that you have reno\ninstalled with:\n\n    pip install -U reno\n\nOnce you have reno installed you can make a new release note by running in\nyour local repository checkout's root:\n\n    reno new short-description-string\n\nwhere short-description-string is a brief string (with no spaces) that describes\nwhat's in the release note. This will become the prefix for the release note\nfile. Once that is run it will create a new yaml file in releasenotes/notes.\nThen open that yaml file in a text editor and write the release note. The basic\nstructure of a release note is restructured text in yaml lists under category\nkeys. You add individual items under each category and they will be grouped\nautomatically by release when the release notes are compiled. A single file\ncan have as many entries in it as needed, but to avoid potential conflicts\nyou'll want to create a new file for each pull request that has user facing\nchanges. When you open the newly created file it will be a full template of\nthe different categories with a description of a category as a single entry\nin each category. You'll want to delete all the sections you aren't using and\nupdate the contents for those you are. For example, the end result should\nlook something like:\n\n```yaml\nfeatures:\n  - |\n    Introduced a new feature foo, that adds support for doing something to\n    :class:`.QuantumCircuit` objects. It can be used by using the foo function,\n    for example::\n\n      from qiskit import foo\n      from qiskit import QuantumCircuit\n      foo(QuantumCircuit())\n\n  - |\n    The :class:`.QuantumCircuit` class has a new method :meth:`~.QuantumCircuit.foo`. \n    This is the equivalent of calling the :func:`~qiskit.foo` to do something to your\n    :class:`.QuantumCircuit`. This is the equivalent of running :func:`~qiskit.foo` \n    on your circuit, but provides the convenience of running it natively on\n    an object. For example::\n\n      from qiskit import QuantumCircuit\n\n      circ = QuantumCircuit()\n      circ.foo()\n\ndeprecations:\n  - |\n    The ``qiskit.bar`` module has been deprecated and will be removed in a\n    future release. Its sole function, ``foobar()`` has been superseded by the\n    :func:`~qiskit.foo` function which provides similar functionality but with\n    more accurate results and better performance. You should update your\n    :func:`~qiskit.bar.foobar` calls to :func:`~qiskit.foo`.\n```\n\nYou can also look at other release notes for other examples.\n\nFor the ``features``, ``deprecations``, and ``upgrade`` sections there are a\nlist of subsections available which are used to provide more structure to the\nrelease notes organization. If you're adding a feature, making an API change,\nor deprecating an API you should pick the subsection that matches that note.\nFor example if you're adding a new feature to the transpiler, you should put\nit under the ``upgrade_transpiler`` section.\n\nNote that you can use sphinx [restructured text syntax](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html).\nIn fact, you can use any restructured text feature in them (code sections, tables,\nenumerated lists, bulleted list, etc) to express what is being changed as\nneeded. In general you want the release notes to include as much detail as\nneeded so that users will understand what has changed, why it changed, and how\nthey'll have to update their code.\n\nAfter you've finished writing your release notes you'll want to add the note\nfile to your commit with `git add` and commit them to your PR branch to make\nsure they're included with the code in your PR.\n\n#### Linking to issues\n\nIf you need to link to an issue or other github artifact as part of the release\nnote this should be done using an inline link with the text being the issue\nnumber. For example you would write a release note with a link to issue 12345\nas:\n\n```yaml\nfixes:\n  - |\n    Fixes a race condition in the function ``foo()``. Refer to\n    `#12345 <https://github.com/Qiskit/qiskit/issues/12345>` for more\n    details.\n```\n\n#### Generating the release notes\n\nAfter release notes have been added, you can use reno to see what the full output\nof the release notes is. In general the output from reno that we'll get is a rst\n(ReStructuredText) file that can be compiled by\n[sphinx](https://www.sphinx-doc.org/en/master/). To generate the rst file you\nuse the ``reno report`` command. If you want to generate the full release\nnotes for all releases (since we started using reno during 0.9) you just run:\n\n    reno report\n\nbut you can also use the ``--version`` argument to view a single release (after\nit has been tagged:\n\n    reno report --version 0.9.0\n\n#### Building release notes locally\n\nBuilding The release notes are part of the standard qiskit documentation\nbuilds. To check what the rendered html output of the release notes will look\nlike for the current state of the repo you can run: `tox -edocs` which will\nbuild all the documentation into `docs/_build/html` and the release notes in\nparticular will be located at `docs/_build/html/release_notes.html`\n\n## Testing\n\nOnce you've made a code change, it is important to verify that your change\ndoes not break any existing tests and that any new tests that you've added\nalso run successfully. Before you open a new pull request for your change,\nyou'll want to run the test suite locally.\n\nThe easiest way to run the test suite is to use\n[**tox**](https://tox.readthedocs.io/en/latest/#). You can install tox\nwith pip: `pip install -U tox`. Tox provides several advantages, but the\nbiggest one is that it builds an isolated virtualenv for running tests. This\nmeans it does not pollute your system python when running. Additionally, the\nenvironment that tox sets up matches the CI environment more closely and it\nruns the tests in parallel (resulting in much faster execution). To run tests\non all installed supported python versions and lint/style checks you can simply\nrun `tox`. Or if you just want to run the tests once run for a specific python\nversion: `tox -epy310` (or replace py310 with the python version you want to use,\npy39 or py311).\n\nIf you just want to run a subset of tests you can pass a selection regex to\nthe test runner. For example, if you want to run all tests that have \"dag\" in\nthe test id you can run: `tox -epy310 -- dag`. You can pass arguments directly to\nthe test runner after the bare `--`. To see all the options on test selection\nyou can refer to the stestr manual:\nhttps://stestr.readthedocs.io/en/stable/MANUAL.html#test-selection\n\nIf you want to run a single test module, test class, or individual test method\nyou can do this faster with the `-n`/`--no-discover` option. For example:\n\nto run a module:\n```\ntox -epy310 -- -n test.python.compiler.test_transpiler\n```\nor to run the same module by path:\n\n```\ntox -epy310 -- -n test/python/compiler/test_transpiler.py\n```\nto run a class:\n\n```\ntox -epy310 -- -n test.python.compiler.test_transpiler.TestTranspile\n```\nto run a method:\n```\ntox -epy310 -- -n test.python.compiler.test_transpiler.TestTranspile.test_transpile_non_adjacent_layout\n```\n\nAlternatively there is a makefile provided to run tests, however this\ndoes not perform any environment setup. It also doesn't run tests in\nparallel and doesn't provide an option to easily modify the tests run.\nFor executing the tests with the makefile, a `make test` target is available.\nThe execution of the tests (both via the make target and during manual\ninvocation) takes into account the `LOG_LEVEL` environment variable. If\npresent, a `.log` file will be created on the test directory with the\noutput of the log calls, which will also be printed to stdout. You can\nadjust the verbosity via the content of that variable, for example:\n\nLinux and Mac:\n\n``` {.bash}\n$ cd out\nout$ LOG_LEVEL=\"DEBUG\" ARGS=\"-V\" make test\n```\n\nWindows:\n\n``` {.bash}\n$ cd out\nC:\\..\\out> set LOG_LEVEL=\"DEBUG\"\nC:\\..\\out> set ARGS=\"-V\"\nC:\\..\\out> make test\n```\n\nFor executing a simple python test manually, we don\\'t need to change\nthe directory to `out`, just run this command:\n\nLinux and Mac:\n\n``` {.bash}\n$ LOG_LEVEL=INFO python -m unittest test/python/circuit/test_circuit_operations.py\n```\n\nWindows:\n\n``` {.bash}\nC:\\..\\> set LOG_LEVEL=\"INFO\"\nC:\\..\\> python -m unittest test/python/circuit/test_circuit_operations.py\n```\n\n##### STDOUT/STDERR and logging capture\n\nWhen running tests in parallel using `stestr` either via tox, the Makefile\n(`make test_ci`), or in CI we set the env variable\n`QISKIT_TEST_CAPTURE_STREAMS` which will capture any text written to stdout,\nstderr, and log messages and add them as attachments to the tests run so\noutput can be associated with the test case it originated from. However, if\nyou run tests with `stestr` outside of these mechanisms by default the streams\nare not captured. To enable stream capture just set the\n`QISKIT_TEST_CAPTURE_STREAMS` env variable to `1`. If this environment\nvariable is set outside of running with `stestr` the streams (STDOUT, STDERR,\nand logging) will still be captured but **not** displayed in the test runners\noutput. If you are using the stdlib unittest runner a similar result can be\naccomplished by using the\n[`--buffer`](https://docs.python.org/3/library/unittest.html#command-line-options)\noption (e.g. `python -m unittest discover --buffer ./test/python`).\n\n##### Test Skip Options\n\nHow and which tests are executed is controlled by an environment\nvariable, `QISKIT_TESTS`:\n\nOption | Description | Default\n------ | ----------- | -------\n`run_slow` | It runs tests tagged as *slow*. | `False`\n\nIt is possible to provide more than one option separated with commas.\n\nAlternatively, the `make test_ci` target can be used instead of\n`make test` in order to run in a setup that replicates the configuration\nwe used in our CI systems more closely.\n\n### Snapshot Testing for Visualizations\n\nIf you are working on code that makes changes to any matplotlib visualizations\nyou will need to check that your changes don't break any snapshot tests, and add\nnew tests where necessary. You can do this as follows:\n\n1. Make sure you have pushed your latest changes to your remote branch.\n2. Go to link: `https://mybinder.org/v2/gh/<github_user>/<repo>/<branch>?urlpath=apps/test/ipynb/mpl_tester.ipynb`. For example, if your GitHub username is `username`, your forked repo has the same name the original, and your branch is `my_awesome_new_feature`, you should visit https://mybinder.org/v2/gh/username/qiskit/my_awesome_new_feature?urlpath=apps/test/ipynb/mpl_tester.ipynb.\nThis opens a Jupyter Notebook application running in the cloud that automatically runs\nthe snapshot tests (note this may take some time to finish loading).\n3. Each test result provides a set of 3 images (left: reference image, middle: your test result, right: differences). In the list of tests the passed tests are collapsed and failed tests are expanded. If a test fails, you will see a situation like this:\n\n   <img width=\"995\" alt=\"Screenshot_2021-03-26_at_14 13 54\" src=\"https://user-images.githubusercontent.com/23662430/112663508-d363e800-8e50-11eb-9478-6d665d0ff086.png\">\n4. Fix any broken tests. Working on code for one aspect of the visualizations\ncan sometimes result in minor changes elsewhere to spacing etc. In these cases\nyou just need to update the reference images as follows:\n    - download the mismatched images (link at top of Jupyter Notebook output)\n    - unzip the folder\n    - copy and paste the new images into `qiskit/test/ipynb/mpl/references`,\n  replacing the existing reference images\n    - add, commit and push your changes, then restart the Jupyter Notebook app in your browser. The\n  tests should now pass.\n5. Add new snapshot tests covering your new features, extensions, or bugfixes.\n    - add your new snapshot tests to `test/ipynb/mpl/test_circuit_matplotlib_drawer.py`\n    , where you can also find existing tests to use as a guide.\n    - commit and push your changes, restart the Jupyter Notebook app in your browser.\n    As this is the first time you run your new tests there won't be any reference\n    images to compare to. Instead you should see an option in the list of tests\n    to download the new images, like so:\n\n    <img width=\"1002\" alt=\"Screenshot_2021-03-26_at_15 38 31\" src=\"https://user-images.githubusercontent.com/23662430/112665215-b9c3a000-8e52-11eb-89e7-b18550718522.png\">\n\n    - download the new images, then copy and paste into `qiskit/test/ipynb/mpl/references`\n    - add, commit and push your changes, restart the Jupyter Notebook app in your browser. The\n    new tests should now pass.\n\nNote: If you have run `test/ipynb/mpl_tester.ipynb` locally it is possible some file metadata has changed, **please do not commit and push changes to this file unless they were intentional**.\n\n\n### Testing Rust components\n\nMany Rust-accelerated functions are generally tested from Python space, but in cases\nwhere new Rust-native APIs are being added, or there are Rust-specific internal details\nto be tested, `#[test]` functions can be included inline. It's typically most\nconvenient to place these in a separate inline module that is only conditionally\ncompiled in, such as\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn my_first_test() {\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nFor more detailed guidance on how to add Rust testing you can refer to the Rust\ndocumentation's [guide on writing tests](https://doc.rust-lang.org/book/ch11-01-writing-tests.html).\n\nTo run the Rust-space tests, do\n\n```bash\ncargo test --no-default-features\n```\n\nOur Rust-space components are configured such that setting the\n``-no-default-features`` flag will compile the test runner, but not attempt to\nbuild a linked CPython extension module, which would cause linker failures.\n\n### Unsafe code and Miri\n\nAny `unsafe` code added to the Rust logic should be exercised by Rust-space\ntests, in addition to the more complete Python test suite.  In CI, we run the\nRust test suite under [Miri](https://github.com/rust-lang/miri) as an\nundefined-behavior sanitizer.\n\nMiri is currently only available on `nightly` Rust channels, so to run it\nlocally you will need to ensure you have that channel available, such as by\n```bash\nrustup install nightly --components miri\n```\n\nAfter this, you can run the Miri test suite with\n```bash\nMIRIFLAGS=\"<flags go here>\" cargo +nightly miri test\n```\n\nFor the current set of `MIRIFLAGS` used by Qiskit's CI, see the\n[`miri.yml`](https://github.com/Qiskit/qiskit/blob/main/.github/workflows/miri.yml)\nGitHub Action file.  This same file may also include patches to dependencies to\nmake them compatible with Miri, which you would need to temporarily apply as\nwell.\n\n## Style and lint\n\nQiskit uses three tools for verify code formatting and lint checking. The\nfirst tool is [black](https://github.com/psf/black) which is a code formatting\ntool that will automatically update the code formatting to a consistent style.\nThe second tool is [pylint](https://www.pylint.org/) which is a code linter\nwhich does a deeper analysis of the Python code to find both style issues and\npotential bugs and other common issues in Python. The third tool is the linter\n[ruff](https://github.com/charliermarsh/ruff), which has been recently\nintroduced into Qiskit on an experimental basis. Only a very small number\nof rules are enabled.\n\nYou can check that your local modifications conform to the style rules by\nrunning `tox -elint` which will run `black`, `ruff`, and `pylint` to check the\nlocal code formatting and lint. If black returns a code formatting error you can\nrun `tox -eblack` to automatically update the code formatting to conform to the\nstyle. However, if `ruff` or `pylint` return any error you will have to fix\nthese issues by manually updating your code.\n\nBecause `pylint` analysis can be slow, there is also a `tox -elint-incr` target,\nwhich runs `black` and `ruff` just as `tox -elint` does, but only applies\n`pylint` to files which have changed from the source github. On rare occasions\nthis will miss some issues that would have been caught by checking the complete\nsource tree, but makes up for this by being much faster (and those rare\noversights will still be caught by the CI after you open a pull request).\n\nBecause they are so fast, it is sometimes convenient to run the tools `black` and `ruff` separately\nrather than via `tox`. If you have installed the development packages in your python environment via\n`pip install -r requirements-dev.txt`, then `ruff` and `black` will be available and can be run from\nthe command line. See [`tox.ini`](tox.ini) for how `tox` invokes them.\n\n### Rust style and lint\n\nFor formatting and lint checking Rust code, you'll need to use different tools than you would for Python. Qiskit uses [rustfmt](https://github.com/rust-lang/rustfmt) for\ncode formatting. You can simply run `cargo fmt` (if you installed Rust with the\ndefault settings using `rustup`), and it will update the code formatting automatically to\nconform to the style guidelines. This is very similar to running `tox -eblack` for Python code. For lint checking, Qiskit uses [clippy](https://github.com/rust-lang/rust-clippy) which can be invoked via `cargo clippy`. \n\nRust lint and formatting checks are included in the the `tox -elint` command. For CI to pass you will need both checks to pass without any warnings or errors. Note that this command checks the code but won't apply any modifications, if you need to update formatting, you'll need to run `cargo fmt`.\n\n\n## Building API docs locally\n\nThe API documentation is built with Sphinx.\nWe recommend that you use [**tox**](https://tox.readthedocs.io/en/latest) to orchestrate this.\nRun a complete documentation build with\n```\ntox -e docs\n```\n\nThe documentation output will be located at `docs/_build/html`.\nOpen the `index.html` file there in your browser to find the main page.\n\n### Troubleshooting docs builds\n\nWhen you build documentation, you might get errors that look like\n```\nValueError: earliest-version set to unknown revision '1.0.0rc1'\n```\nIf so, you need to fetch Qiskit's `git` tags and stable branches, in order to fully build the release notes.\nTo do this, run the command:\n```\ngit fetch --tags upstream\n```\nwhere `upstream` is your name for the [git remote repository](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes) that corresponds to https://github.com/Qiskit/qiskit (this repository).\nYou might need to re-run this command if Qiskit has issued a new release since the last time you built the documentation.\n\nSometimes, you might get errors about \"names not existing\" or \"failed to import\" during the docs build, even when the test suite passes.\nThis can mean that Sphinx's cache has become invalidated, but hasn't been successfully cleared.\nUse the command:\n```\ntox -e docs-clean\n```\nto fully clean out all documentation build artefacts and partial builds, and see if the problem persists.\n\n\n## Development cycle\n\nThe development cycle for qiskit is all handled in the open using\nthe project boards in Github for project management. We use milestones\nin Github to track work for specific releases. The features or other changes\nthat we want to include in a release will be tagged and discussed in Github.\nAs we're preparing a new release we'll document what has changed since the\nprevious version in the release notes.\n\n### Branches\n\n* `main`:\n\nThe main branch is used for development of the next version of qiskit.\nIt will be updated frequently and should not be considered stable. The API\ncan and will change on main as we introduce and refine new features.\n\n* `stable/*` branches:\nBranches under `stable/*` are used to maintain released versions of qiskit.\nIt contains the version of the code corresponding to the latest release for\nthat minor version on pypi. For example, stable/0.8 contains the code for the\n0.8.2 release on pypi. The API on these branches are stable and the only changes\nmerged to it are bugfixes.\n\n### Release cycle\n\nIn the lead up to a release there are a few things to keep in mind. Prior to\nthe release date there is a feature, removal, and deprecation proposal freeze\ndate. This date in each release cycle is the last day where a new PR adding a\nnew feature, removing something, or adding a new deprecation can be proposed (in\na ready for review state) for potential inclusion in the release. If a new\nPR is opened after this date it will not be considered for inclusion in that\nrelease. Note, that meeting these deadlines does not guarantee inclusion in a\nrelease: they are preconditions. You can refer to the milestone page for each\nrelease to see these dates for each release (for example for 0.21.0 the page is:\nhttps://github.com/Qiskit/qiskit/milestone/23).\n\nAfter the proposal freeze a release review period will begin, during this time\nrelease candidate PRs will be reviewed as we finalize the feature set and merge\nthe last PRs for the release. Following the review period a release candidate will be\ntagged and published. This release candidate is pre-release that enables users and\ndevelopers to test the release ahead of time. When the pre-release is tagged the release\nautomation will publish the pre-release to PyPI (but only get installed on user request),\ncreate the `stable/*` branch, and generate a pre-release changelog/release page. At\nthis point the `main` opens up for development of the next release. The `stable/*`\nbranches should only receive changes in the form of bug fixes at this point. If there\nis a need additional release candidates can be published from `stable/*` and when the\nrelease is ready a full release will be tagged and published from `stable/*`.\n\n## Adding deprecation warnings\nThe qiskit code is part of Qiskit and, therefore, the [Qiskit Deprecation Policy](./DEPRECATION.md) fully applies here. Additionally, qiskit does not allow `DeprecationWarning`s in its testsuite. If you are deprecating code, you should add a test to use the new/non-deprecated method (most of the time based on the existing test of the deprecated method) and alter the existing test to check that the deprecated method still works as expected, [using `assertWarns`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns). The `assertWarns` context will silence the deprecation warning while checking that it raises.\n\nFor example, if `Obj.method1` is being deprecated in favour of `Obj.method2`, the existing test (or tests) for `method1` might look like this:\n\n```python\ndef test_method1(self):\n   result = Obj.method1()\n   self.assertEqual(result, <expected>)\n```\n\nDeprecating `method1` means that `Obj.method1()` now raises a deprecation warning and the test will not pass. The existing test should be updated and a new test added for `method2`:\n\n\n```python\ndef test_method1_deprecated(self):\n   with self.assertWarns(DeprecationWarning):\n       result = Obj.method1()\n   self.assertEqual(result, <expected>)\n\ndef test_method2(self):\n   result = Obj.method2()\n   self.assertEqual(result, <expected>)\n```\n\n`test_method1_deprecated` can be removed after `Obj.method1` is removed (following the [Qiskit Deprecation Policy](./DEPRECATION.md)).\n\n## Using dependencies\n\nWe distinguish between \"requirements\" and \"optional dependencies\" in qiskit.\nA requirement is a package that is absolutely necessary for core functionality in qiskit, such as Numpy or Scipy.\nAn optional dependency is a package that is used for specialized functionality, which might not be needed by all users.\nIf a new feature has a new dependency, it is almost certainly optional.\n\n### Adding a requirement\n\nAny new requirement must have broad system support; it needs to be supported on all the Python versions and operating systems that qiskit supports.\nIt also cannot impose many version restrictions on other packages.\nUsers often install qiskit into virtual environments with many different packages in, and we need to ensure that neither we, nor any of our requirements, conflict with their other packages.\nWhen adding a new requirement, you must add it to [`requirements.txt`](requirements.txt) with as loose a constraint on the allowed versions as possible.\n\n### Adding an optional dependency\n\nNew features can also use optional dependencies, which might be used only in very limited parts of qiskit.\nThese are not required to use the rest of the package, and so should not be added to `requirements.txt`.\nInstead, if several optional dependencies are grouped together to provide one feature, you can consider adding an \"extra\" to the package metadata, such as the `visualization` extra that installs Matplotlib and Seaborn (amongst others).\nTo do this, modify the [`setup.py`](setup.py) file, adding another entry in the `extras_require` keyword argument to `setup()` at the bottom of the file.\nYou do not need to be quite as accepting of all versions here, but it is still a good idea to be as permissive as you possibly can be.\nYou should also add a new \"tester\" to [`qiskit.utils.optionals`](qiskit/utils/optionals.py), for use in the next section.\n\n### Checking for optionals\n\nYou cannot `import` an optional dependency at the top of a file, because if it is not installed, it will raise an error and qiskit will be unusable.\nWe also largely want to avoid importing packages until they are actually used; if we import a lot of packages during `import qiskit`, it becomes sluggish for the user if they have a large environment.\nInstead, you should use [one of the \"lazy testers\" for optional dependencies](https://docs.quantum.ibm.com/api/qiskit/utils#optional-dependency-checkers), and import your optional dependency inside the function or class that uses it, as in the examples within that link.\nVery lightweight _requirements_ can be imported at the tops of files, but even this should be limited; it's always ok to `import numpy`, but Scipy modules are relatively heavy, so only import them within functions that use them.\n\n\n## Dealing with the git blame ignore list\n\nIn the qiskit repository we maintain a list of commits for git blame\nto ignore. This is mostly commits that are code style changes that don't\nchange the functionality but just change the code formatting (for example,\nwhen we migrated to use black for code formatting). This file,\n`.git-blame-ignore-revs` just contains a list of commit SHA1s you can tell git\nto ignore when using the `git blame` command. This can be done one time\nwith something like\n\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs qiskit/version.py\n\n```\n\nfrom the root of the repository. If you'd like to enable this by default you\ncan update your local repository's configuration with:\n\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\nwhich will update your local repositories configuration to use the ignore list\nby default.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 44.517578125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c6cb57a04249c6480766f7f7cef5467412af1490f8d1e243141daddada3264f\"\n\n[[package]]\nname = \"approx\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f2a05fd1bd10b2527e20a2cd32d8873d115b8b39fe219ee25f42a8aca6ba278\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"approx\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6\"\ndependencies = [\n \"num-complex\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"ariadne\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72fe02fc62033df9ba41cba57ee19acf5e742511a140c7dbc3a873e19a19a1bd\"\ndependencies = [\n \"concolor\",\n \"unicode-width\",\n \"yansi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"boolenum\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6c8abd585d7026df20a9ae12982127ba5e81cc7a09397b957e71659da8c5de8\"\ndependencies = [\n \"proc-macro-error\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef657dfab802224e671f5818e9a4935f9b1957ed18e58292690cc39e7a4092a3\"\ndependencies = [\n \"bytemuck_derive\",\n]\n\n[[package]]\nname = \"bytemuck_derive\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcfcc3cd946cb52f0bbfdbbcfa2f4e24f75ebb6c0e1002f7c25904fada18b9ec\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"coe-rs\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e8f1e641542c07631228b1e0dc04b69ae3c1d58ef65d5691a439711d805c698\"\n\n[[package]]\nname = \"concolor\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b946244a988c390a94667ae0e3958411fa40cc46ea496a929b263d883f5f9c3\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"concolor-query\",\n \"is-terminal\",\n]\n\n[[package]]\nname = \"concolor-query\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88d11d52c3d7ca2e6d0040212be9e4dbbcd78b6447f535b6b561f449427944cf\"\ndependencies = [\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"countme\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7704b5fdd17b18ae31c4c1da5a2e0305a2bf17b5249300a9ee9ed7b72114c636\"\n\n[[package]]\nname = \"cov-mark\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0570650661aa447e7335f1d5e4f499d8e58796e617bedc9267d971e51c8b49d4\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"608697df725056feaccfa42cffdaeeec3fccc4ffc38358ecd19b243e716a78e0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"dbgf\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6ca96b45ca70b8045e0462f191bd209fcb3c3bfe8dbfb1257ada54c4dd59169\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"drop_bomb\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bda8e21c04aca2ae33ffc2fd8c23134f3cac46db123ba97bd9d3f3b8a4a85e1\"\n\n[[package]]\nname = \"dyn-stack\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56e53799688f5632f364f8fb387488dd05db9fe45db7011be066fc20e7027f8b\"\ndependencies = [\n \"bytemuck\",\n \"reborrow\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"enum-as-inner\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1e6a265c649f3f5979b601d26f1d05ada116434c87741c9493cb56218f76cbc\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"equator\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c35da53b5a021d2484a7cc49b2ac7f2d840f8236a286f84202369bd338d761ea\"\ndependencies = [\n \"equator-macro 0.2.1\",\n]\n\n[[package]]\nname = \"equator\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5099e7b6f0b7431c7a1c49f75929e2777693da192784f167066977a2965767af\"\ndependencies = [\n \"equator-macro 0.4.1\",\n]\n\n[[package]]\nname = \"equator-macro\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3bf679796c0322556351f287a51b49e48f7c4986e727b5dd78c972d30e2e16cc\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"equator-macro\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5322a90066ddae2b705096eb9e10c465c0498ae93bf9bdd6437415327c88e3bb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"faer\"\nversion = \"0.19.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64bc4855cb2792ae3520e8af22051a47a6d6dc8300ebc0ddf51ad73f65bd0dc9\"\ndependencies = [\n \"bytemuck\",\n \"coe-rs\",\n \"dbgf\",\n \"dyn-stack\",\n \"equator 0.4.1\",\n \"faer-entity\",\n \"gemm\",\n \"libm\",\n \"matrixcompare\",\n \"matrixcompare-core\",\n \"nano-gemm\",\n \"npyz\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"rand\",\n \"rand_distr\",\n \"rayon\",\n \"reborrow\",\n \"serde\",\n]\n\n[[package]]\nname = \"faer-entity\"\nversion = \"0.19.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9c752ab2bff6f0b9597c6a1adc0112f7fd41fb343bc5a009a6274ae9d32fd03\"\ndependencies = [\n \"bytemuck\",\n \"coe-rs\",\n \"libm\",\n \"num-complex\",\n \"num-traits\",\n \"pulp\",\n \"reborrow\",\n]\n\n[[package]]\nname = \"faer-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cf30f6ae73f372c0e0cf7556c44e50f1eee0a714d71396091613d68c43625c9\"\ndependencies = [\n \"faer\",\n \"ndarray\",\n \"num-complex\",\n]\n\n[[package]]\nname = \"fixedbitset\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80\"\n\n[[package]]\nname = \"gemm\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e400f2ffd14e7548356236c35dc39cad6666d833a852cb8a8f3f28029359bb03\"\ndependencies = [\n \"dyn-stack\",\n \"gemm-c32\",\n \"gemm-c64\",\n \"gemm-common\",\n \"gemm-f16\",\n \"gemm-f32\",\n \"gemm-f64\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"raw-cpuid\",\n \"seq-macro\",\n]\n\n[[package]]\nname = \"gemm-c32\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10dc4a6176c8452d60eac1a155b454c91c668f794151a303bf3c75ea2874812d\"\ndependencies = [\n \"dyn-stack\",\n \"gemm-common\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"raw-cpuid\",\n \"seq-macro\",\n]\n\n[[package]]\nname = \"gemm-c64\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc2032ce2c0bb150da0256338759a6fb01ca056f6dfe28c4d14af32d7f878f6f\"\ndependencies = [\n \"dyn-stack\",\n \"gemm-common\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"raw-cpuid\",\n \"seq-macro\",\n]\n\n[[package]]\nname = \"gemm-common\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90fd234fc525939654f47b39325fd5f55e552ceceea9135f3aa8bdba61eabef6\"\ndependencies = [\n \"bytemuck\",\n \"dyn-stack\",\n \"half\",\n \"num-complex\",\n \"num-traits\",\n \"once_cell\",\n \"paste\",\n \"pulp\",\n \"raw-cpuid\",\n \"rayon\",\n \"seq-macro\",\n \"sysctl\",\n]\n\n[[package]]\nname = \"gemm-f16\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fc3652651f96a711d46b8833e1fac27a864be4bdfa81a374055f33ddd25c0c6\"\ndependencies = [\n \"dyn-stack\",\n \"gemm-common\",\n \"gemm-f32\",\n \"half\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"raw-cpuid\",\n \"rayon\",\n \"seq-macro\",\n]\n\n[[package]]\nname = \"gemm-f32\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbc51c44ae3defd207e6d9416afccb3c4af1e7cef5e4960e4c720ac4d6f998e\"\ndependencies = [\n \"dyn-stack\",\n \"gemm-common\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"raw-cpuid\",\n \"seq-macro\",\n]\n\n[[package]]\nname = \"gemm-f64\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f37fc86e325c2415a4d0cab8324a0c5371ec06fc7d2f9cb1636fcfc9536a8d8\"\ndependencies = [\n \"dyn-stack\",\n \"gemm-common\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"raw-cpuid\",\n \"seq-macro\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"half\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888\"\ndependencies = [\n \"bytemuck\",\n \"cfg-if\",\n \"crunchy\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.8\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash 0.8.11\",\n \"allocator-api2\",\n \"rayon\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.2\",\n \"rayon\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"2.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b248f5224d1d606005e02c97f5aa4e88eeb230488bcc03bc9ca4d7991399f2b5\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1c173a5686ce8bfa551b3563d0c2170bf24ca44da99c7ca4bfdab5418c3fe57\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.159\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"561d97a539a36e26a9a5fad1ea11a3039a67714694aaa379433e580854bc3dc5\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"matrixcompare\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37832ba820e47c93d66b4360198dccb004b43c74abc3ac1ce1fed54e65a80445\"\ndependencies = [\n \"matrixcompare-core\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"matrixcompare-core\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0bdabb30db18805d5290b3da7ceaccbddba795620b86c02145d688e04900a73\"\n\n[[package]]\nname = \"matrixmultiply\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9380b911e3e96d10c1f415da0876389aaf1b56759054eeb0de7df940c456ba1a\"\ndependencies = [\n \"autocfg\",\n \"rawpointer\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"nano-gemm\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f563548d38f390ef9893e4883ec38c1fb312f569e98d76bededdd91a3b41a043\"\ndependencies = [\n \"equator 0.2.2\",\n \"nano-gemm-c32\",\n \"nano-gemm-c64\",\n \"nano-gemm-codegen\",\n \"nano-gemm-core\",\n \"nano-gemm-f32\",\n \"nano-gemm-f64\",\n \"num-complex\",\n]\n\n[[package]]\nname = \"nano-gemm-c32\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a40449e57a5713464c3a1208c4c3301c8d29ee1344711822cf022bc91373a91b\"\ndependencies = [\n \"nano-gemm-codegen\",\n \"nano-gemm-core\",\n \"num-complex\",\n]\n\n[[package]]\nname = \"nano-gemm-c64\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"743a6e6211358fba85d1009616751e4107da86f4c95b24e684ce85f25c25b3bf\"\ndependencies = [\n \"nano-gemm-codegen\",\n \"nano-gemm-core\",\n \"num-complex\",\n]\n\n[[package]]\nname = \"nano-gemm-codegen\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"963bf7c7110d55430169dc74c67096375491ed580cd2ef84842550ac72e781fa\"\n\n[[package]]\nname = \"nano-gemm-core\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe3fc4f83ae8861bad79dc3c016bd6b0220da5f9de302e07d3112d16efc24aa6\"\n\n[[package]]\nname = \"nano-gemm-f32\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e3681b7ce35658f79da94b7f62c60a005e29c373c7111ed070e3bf64546a8bb\"\ndependencies = [\n \"nano-gemm-codegen\",\n \"nano-gemm-core\",\n]\n\n[[package]]\nname = \"nano-gemm-f64\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc1e619ed04d801809e1f63e61b669d380c4119e8b0cdd6ed184c6b111f046d8\"\ndependencies = [\n \"nano-gemm-codegen\",\n \"nano-gemm-core\",\n]\n\n[[package]]\nname = \"ndarray\"\nversion = \"0.15.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb12d4e967ec485a5f71c6311fe28158e9d6f4bc4a447b474184d0f91a8fa32\"\ndependencies = [\n \"approx 0.4.0\",\n \"approx 0.5.1\",\n \"matrixmultiply\",\n \"num-complex\",\n \"num-integer\",\n \"num-traits\",\n \"rawpointer\",\n \"rayon\",\n]\n\n[[package]]\nname = \"ndarray_einsum_beta\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"668b3abeae3e0637740340e0e32a9bf9308380e146ea6797950f9ff16e88d88a\"\ndependencies = [\n \"lazy_static\",\n \"ndarray\",\n \"num-traits\",\n \"regex\",\n]\n\n[[package]]\nname = \"npyz\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13f27ea175875c472b3df61ece89a6d6ef4e0627f43704e400c782f174681ebd\"\ndependencies = [\n \"byteorder\",\n \"num-bigint\",\n \"py_literal\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-complex\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73f88a1307638156682bada9d7604135552957b7818057dcef22705b4d509495\"\ndependencies = [\n \"bytemuck\",\n \"num-traits\",\n \"rand\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"numpy\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edb929bc0da91a4d85ed6c0a84deaa53d411abfb387fc271124f91bf6b89f14e\"\ndependencies = [\n \"libc\",\n \"ndarray\",\n \"num-complex\",\n \"num-integer\",\n \"num-traits\",\n \"pyo3\",\n \"rustc-hash\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"oq3_lexer\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a27bbc91e3e9d6193a44aac8f5d62c1507c41669af71a4e7e0ef66fd6470e960\"\ndependencies = [\n \"unicode-properties\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"oq3_parser\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a72022fcb414e8a0912920a1cf46417b6aa95f19d4b38778df7450f8a3c17fa\"\ndependencies = [\n \"drop_bomb\",\n \"oq3_lexer\",\n \"ra_ap_limit\",\n]\n\n[[package]]\nname = \"oq3_semantics\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b72dffd869f3548190c705828d030fbb7fca94e519dcfa6a489227e5c3ffd777\"\ndependencies = [\n \"boolenum\",\n \"hashbrown 0.12.3\",\n \"oq3_source_file\",\n \"oq3_syntax\",\n \"rowan\",\n]\n\n[[package]]\nname = \"oq3_source_file\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff8c03f1f92c7a8f0b5249664b526169ceb8f925cb314ff93d3b27d8a4afb78c\"\ndependencies = [\n \"ariadne\",\n \"oq3_syntax\",\n]\n\n[[package]]\nname = \"oq3_syntax\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42c754ce1d9da28d6c0334c212d64b521288fe8c7cf16e9727d45dcf661ff084\"\ndependencies = [\n \"cov-mark\",\n \"either\",\n \"indexmap\",\n \"itertools 0.10.5\",\n \"once_cell\",\n \"oq3_lexer\",\n \"oq3_parser\",\n \"rowan\",\n \"rustc-hash\",\n \"rustversion\",\n \"smol_str\",\n \"triomphe\",\n \"xshell\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdbef9d1d47087a895abd220ed25eb4ad973a5e26f6a4367b038c25e28dfc2d9\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pest_derive\"\nversion = \"2.7.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d3a6e3394ec80feb3b6393c725571754c6188490265c61aaf260810d6b95aa0\"\ndependencies = [\n \"pest\",\n \"pest_generator\",\n]\n\n[[package]]\nname = \"pest_generator\"\nversion = \"2.7.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94429506bde1ca69d1b5601962c73f4172ab4726571a59ea95931218cb0e930e\"\ndependencies = [\n \"pest\",\n \"pest_meta\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"pest_meta\"\nversion = \"2.7.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac8a071862e93690b6e34e9a5fb8e33ff3734473ac0245b27232222c4906a33f\"\ndependencies = [\n \"once_cell\",\n \"pest\",\n \"sha2\",\n]\n\n[[package]]\nname = \"petgraph\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db\"\ndependencies = [\n \"fixedbitset\",\n \"indexmap\",\n]\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc9c68a3f6da06753e9335d63e27f6b9754dd1920d941135b7ea8224f141adb2\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"priority-queue\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"714c75db297bc88a63783ffc6ab9f830698a6705aa0201416931759ef4c8183d\"\ndependencies = [\n \"autocfg\",\n \"equivalent\",\n \"indexmap\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3e4daa0dcf6feba26f985457cdf104d4b4256fc5a09547140f3631bb076b19a\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"pulp\"\nversion = \"0.18.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0a01a0dc67cf4558d279f0c25b0962bd08fc6dec0137699eae304103e882fe6\"\ndependencies = [\n \"bytemuck\",\n \"libm\",\n \"num-complex\",\n \"pulp-macro\",\n \"reborrow\",\n]\n\n[[package]]\nname = \"pulp-macro\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d315b3197b780e4873bc0e11251cb56a33f65a6032a3d39b8d1405c255513766\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"py_literal\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"102df7a3d46db9d3891f178dcc826dc270a6746277a9ae6436f8d29fd490a8e1\"\ndependencies = [\n \"num-bigint\",\n \"num-complex\",\n \"num-traits\",\n \"pest\",\n \"pest_derive\",\n]\n\n[[package]]\nname = \"pyo3\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f402062616ab18202ae8319da13fa4279883a2b8a9d9f83f20dbade813ce1884\"\ndependencies = [\n \"cfg-if\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"indoc\",\n \"libc\",\n \"memoffset\",\n \"num-bigint\",\n \"num-complex\",\n \"once_cell\",\n \"portable-atomic\",\n \"pyo3-build-config\",\n \"pyo3-ffi\",\n \"pyo3-macros\",\n \"smallvec\",\n \"unindent\",\n]\n\n[[package]]\nname = \"pyo3-build-config\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b14b5775b5ff446dd1056212d778012cbe8a0fbffd368029fd9e25b514479c38\"\ndependencies = [\n \"once_cell\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"pyo3-ffi\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ab5bcf04a2cdcbb50c7d6105de943f543f9ed92af55818fd17b660390fc8636\"\ndependencies = [\n \"libc\",\n \"pyo3-build-config\",\n]\n\n[[package]]\nname = \"pyo3-macros\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fd24d897903a9e6d80b968368a34e1525aeb719d568dba8b3d4bfa5dc67d453\"\ndependencies = [\n \"proc-macro2\",\n \"pyo3-macros-backend\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"pyo3-macros-backend\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36c011a03ba1e50152b4b394b479826cad97e7a21eb52df179cd91ac411cbfbe\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"pyo3-build-config\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"qiskit-accelerate\"\nversion = \"2.0.0\"\ndependencies = [\n \"ahash 0.8.11\",\n \"approx 0.5.1\",\n \"bytemuck\",\n \"faer\",\n \"faer-ext\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"itertools 0.13.0\",\n \"ndarray\",\n \"ndarray_einsum_beta\",\n \"num-bigint\",\n \"num-complex\",\n \"num-traits\",\n \"numpy\",\n \"once_cell\",\n \"pulp\",\n \"pyo3\",\n \"qiskit-circuit\",\n \"rand\",\n \"rand_distr\",\n \"rand_pcg\",\n \"rayon\",\n \"rustiq-core\",\n \"rustworkx-core\",\n \"smallvec\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"qiskit-circuit\"\nversion = \"2.0.0\"\ndependencies = [\n \"ahash 0.8.11\",\n \"approx 0.5.1\",\n \"bytemuck\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"itertools 0.13.0\",\n \"ndarray\",\n \"num-complex\",\n \"numpy\",\n \"pyo3\",\n \"rayon\",\n \"rustworkx-core\",\n \"smallvec\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"qiskit-pyext\"\nversion = \"2.0.0\"\ndependencies = [\n \"pyo3\",\n \"qiskit-accelerate\",\n \"qiskit-circuit\",\n \"qiskit-qasm2\",\n \"qiskit-qasm3\",\n]\n\n[[package]]\nname = \"qiskit-qasm2\"\nversion = \"2.0.0\"\ndependencies = [\n \"hashbrown 0.14.5\",\n \"num-bigint\",\n \"pyo3\",\n \"qiskit-circuit\",\n]\n\n[[package]]\nname = \"qiskit-qasm3\"\nversion = \"2.0.0\"\ndependencies = [\n \"ahash 0.8.11\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"oq3_semantics\",\n \"pyo3\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"ra_ap_limit\"\nversion = \"0.0.188\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92d33758724f997689f84146e5401e28d875a061804f861f113696f44f5232aa\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rand_distr\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32cb0b9bc82b0a0876c2dd994a7e7a2683d3e7390ca40e6886785ef0c7e3ee31\"\ndependencies = [\n \"num-traits\",\n \"rand\",\n]\n\n[[package]]\nname = \"rand_pcg\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59cad018caf63deb318e5a4586d99a24424a364f40f1e5778c29aca23f4fc73e\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"raw-cpuid\"\nversion = \"10.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c297679cb867470fa8c9f67dbba74a78d78e3e98d7cf2b08d6d71540f797332\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"rawpointer\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3\"\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-cond\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"059f538b55efd2309c9794130bc149c6a553db90e9d99c2030785c82f0bd7df9\"\ndependencies = [\n \"either\",\n \"itertools 0.11.0\",\n \"rayon\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"reborrow\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03251193000f4bd3b042892be858ee50e8b3719f2b08e5833ac4353724632430\"\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38200e5ee88914975b69f657f0801b6f6dccafd44fd9326302a4aaeecfacb1d8\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"rowan\"\nversion = \"0.15.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a58fa8a7ccff2aec4f39cc45bf5f985cec7125ab271cf681c279fd00192b49\"\ndependencies = [\n \"countme\",\n \"hashbrown 0.14.5\",\n \"memoffset\",\n \"rustc-hash\",\n \"text-size\",\n]\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustiq-core\"\nversion = \"0.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"666b580cb45b60a39f5a17b284bbe8343cfcd67929931729b4afee19ec94d308\"\ndependencies = [\n \"itertools 0.10.5\",\n \"petgraph\",\n \"rand\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"955d28af4278de8121b7ebeb796b6a45735dc01436d898801014aced2773a3d6\"\n\n[[package]]\nname = \"rustworkx-core\"\nversion = \"0.15.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef8108bdaf5b590d2ea261c6ca9b1795cbf253d0733b2e209b7990c95ed23843\"\ndependencies = [\n \"ahash 0.8.11\",\n \"fixedbitset\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"ndarray\",\n \"num-traits\",\n \"petgraph\",\n \"priority-queue\",\n \"rand\",\n \"rand_pcg\",\n \"rayon\",\n \"rayon-cond\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"seq-macro\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3f0bf26fd526d2a95683cd0f87bf103b8539e2ca1ef48ce002d67aad59aa0b4\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"smol_str\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd538fb6910ac1099850255cf94a94df6551fbdd602454387d0adb2d1ca6dead\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89132cd0bf050864e1d38dc3bbc07a0eb8e7530af26344d3d2bbbef83499f590\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sysctl\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec7dddc5f0fee506baf8b9fdb989e242f17e4b11c61dfbb0635b705217199eea\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"byteorder\",\n \"enum-as-inner\",\n \"libc\",\n \"thiserror\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.12.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61c41af27dd6d1e27b1b16b489db798443478cef1f06a660c96db617ba5de3b1\"\n\n[[package]]\nname = \"text-size\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f18aa187839b2bdb1ad2fa35ead8c4c2976b64e4363c386d45ac0f7ee85c9233\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.65\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d11abd9594d9b38965ef50805c5e469ca9cc6f197f883f717e0269a3057b3d5\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.65\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae71770322cbd277e69d762a16c444af02aa0575ac0d174f0b9562d3b37f8602\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"triomphe\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"859eb650cfee7434994602c3a68b25d77ad9e68c8a6cd491616ef86661382eb3\"\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2896d95c02a80c6d6a5d6e953d479f5ddf2dfdb6a244441010e373ac0fb88971\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"unicode-properties\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e70f2a8b45122e719eb623c01822704c4e0907e7e426a05927e1a1cfff5b75d0\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n\n[[package]]\nname = \"unindent\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7de7d73e1754487cb58364ee906a499937a0dfabd86bcb980fa99ec8c8fa2ce\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"xshell\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6db0ab86eae739efd1b054a8d3d16041914030ac4e01cd1dca0cf252fd8b6437\"\ndependencies = [\n \"xshell-macros\",\n]\n\n[[package]]\nname = \"xshell-macros\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d422e8e38ec76e2f06ee439ccc765e9c6a9638b9e7c9f2e8255e4d41e8bd852\"\n\n[[package]]\nname = \"yansi\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.5244140625,
          "content": "[workspace]\nmembers = [\"crates/*\"]\nresolver = \"2\"\n\n[workspace.package]\nversion = \"2.0.0\"\nedition = \"2021\"\nrust-version = \"1.70\"  # Keep in sync with README.md and rust-toolchain.toml.\nlicense = \"Apache-2.0\"\n\n# Shared dependencies that can be inherited.  This just helps a little with\n# making sure our crates don't directly depend on different versions of things,\n# although we can't help it if our transitive dependencies pull in more.\n#\n# Each crate can add on specific features freely as it inherits.\n[workspace.dependencies]\nbytemuck = \"1.21\"\nindexmap.version = \"2.7.0\"\nhashbrown.version = \"0.14.5\"\nnum-bigint = \"0.4\"\nnum-complex = \"0.4\"\nndarray = \"0.15\"\nnumpy = \"0.22.1\"\nsmallvec = \"1.13\"\nthiserror = \"1.0\"\nrustworkx-core = \"0.15\"\napprox = \"0.5\"\nitertools = \"0.13.0\"\nahash = \"0.8.11\"\nrayon = \"1.10\"\n\n# Most of the crates don't need the feature `extension-module`, since only `qiskit-pyext` builds an\n# actual C extension (the feature disables linking in `libpython`, which is forbidden in Python\n# distributions).  We only activate that feature when building the C extension module; we still need\n# it disabled for Rust-only tests to avoid linker errors with it not being loaded.  See\n# https://pyo3.rs/main/features#extension-module for more.\npyo3 = { version = \"0.22.6\", features = [\"abi3-py39\"] }\n\n# These are our own crates.\nqiskit-accelerate = { path = \"crates/accelerate\" }\nqiskit-circuit = { path = \"crates/circuit\" }\nqiskit-qasm2 = { path = \"crates/qasm2\" }\nqiskit-qasm3 = { path = \"crates/qasm3\" }\n\n[profile.release]\nlto = 'fat'\ncodegen-units = 1\n"
        },
        {
          "name": "DEPRECATION.md",
          "type": "blob",
          "size": 12.8525390625,
          "content": "# Deprecation Policy\n\nStarting from the 1.0.0 release, Qiskit follows semantic versioning, with a yearly release cycle for major releases.\n[Full details of the scheduling are hosted with the external public documentation](https://docs.quantum.ibm.com/open-source/qiskit-sdk-version-strategy).\n\nThis document is primarily intended for developers of Qiskit themselves.\n\n## Principles\n\nMany users and other packages depend on different parts of Qiskit.  We must\nmake sure that whenever we make changes to the code, we give users ample time to\nadjust without breaking code that they have already written.\n\nMost importantly: *do not* change any interface that is public-facing unless we\nabsolutely have to.  Adding things is ok, taking things away is annoying for\nusers but can be handled reasonably with plenty notice, but changing behavior\ngenerally means users cannot write code that will work with two subsequent\nversions of Qiskit, which is not acceptable.\n\nBeware that users will often be using functions, classes and methods that we,\nthe Qiskit developers, may consider internal or not widely used.  Do not make\nassumptions that \"this is buried, so nobody will be using it\"; if it is public,\nit is subject to the policy.  The only exceptions here are functions and modules\nthat are explicitly internal, *i.e.* those whose names begin with a leading\nunderscore (`_`).\n\nThe guiding principles are:\n\n- removals or behavior changes in the public API can only occur in major releases;\n\n- new deprecations to the public API can only occur in minor releases;\n\n- there must always be a way to achieve valid goals that does not issue any\n  warnings with the most recent two minor releases in a series;\n\n- never assume that an object that is part of the public interface is not in use.\n\nWhile the no-breaking-changes rule is only formally required *within* a major release series, you should make every effort to avoid breaking changes wherever possible.\nSimilarly, while it is permissible where necessary for behavior to change with no single-code path to support both the last minor of one major release and the first minor of a new major release, it is still strongly preferable if you can achieve this.\n\n\n## What is the public interface?\n\n> [!NOTE]\n> This section should be in sync with [the release schedule documentation of Qiskit](https://docs.quantum.ibm.com/open-source/qiskit-sdk-version-strategy).\n> Please [open an issue against Qiskit](https://github.com/Qiskit/qiskit/issues/new/choose) if there are discrepancies so we can clarify them.\n\nFor the purposes of semantic versioning, the Qiskit public API comprises all *publicly documented* packages, modules, classes, functions, methods, and attributes.\n\nAn object is *publicly documented* if and only if it appears in [the hosted API documentation](https://docs.quantum.ibm.com/api/qiskit) for Qiskit.\nThe presence of a docstring in the Python source (or a `__doc__` attribute) is not sufficient to make an object publicly documented; this documentation must also be rendered in the public API documentation.\n\nAs well as the objects themselves needing to be publicly documented, the only public-API *import locations* for a given object is the location it is documented at in [the public API documentation](https://docs.quantum.ibm.com/api/qiskit), and parent modules or packages that re-export the object (if any).\nFor example, while it is possible to import `Measure` from `qiskit.circuit.measure`, this is not a supported part of the public API for two reasons:\n\n1. The module `qiskit.circuit.measure` is not publicly documented, so is not part of the public interface.\n2. The [`Measure` object is documented as being in `qiskit.circuit.library`](https://docs.quantum.ibm.com/api/qiskit/qiskit.circuit.library.Measure), and is re-exported by `qiskit.circuit`, so the public import paths are `from qiskit.circuit.library import Measure` and `from qiskit.circuit import Measure`.\n\nAs a rule of thumb, if you are using Qiskit, you should import objects from the highest-level package that exports that object.\n\nSome components of the documented public interface may be marked as \"experimental\", and not subject to the stability guarantees of semantic versioning.\nThese will be clearly denoted in the documentation, and will raise an `ExperimentalWarning` when used.\nWe will only use these \"experimental\" features sparingly, when we feel there is a real benefit to making the experimental version public in an unstable form, such as a backwards-incompatible new version of core functionality that shows significant improvements over the existing form for limited inputs, but is not yet fully feature complete.\nTypically, a feature will only become part of the public API when we are ready to commit to its stability properly.\n\n\n## Removing a feature\n\n> [!IMPORTANT]\n> Features can only be removed in new major versions.\n> Deprecations can only be added in new minor versions.\n\nWhen removing a feature (for example a class, function or function parameter),\nwe will follow this procedure:\n\n- The alternative path must be in place for one minor version before any\n  warnings are issued.  For example, if we want to replace the function `foo()`\n  with `bar()`, we must make at least one minor release with both functions before\n  issuing any warnings within `foo()`.  You may issue\n  `PendingDeprecationWarning`s from the old paths immediately, but this is not\n  necessary and does not affect any timelines for removal.\n\n  *Reason*: we need to give people time to swap over without breaking their\n  code as soon as they upgrade.\n\n- After the alternative path has been in place for at least one minor version,\n  [issue the deprecation warnings](#issuing-deprecation-warnings).  Add a\n  release note with a `deprecations` section listing all deprecated paths,\n  their alternatives, and the reason for deprecation.  [Update the tests to test the warnings](#testing-deprecated-functionality).\n\n  *Reason*: removals must be highly visible for at least one version, to\n  minimize the surprise to users when they actually go.\n\n- Apply the removal to the branch for the next major release, or open an issue to remind us to effect the removal and tag it for the milestone of the next major release.\n\n> [!NOTE]\n> These are _minimum_ requirements.\n> For removal of significant or core features, try to give as long a warning period as is feasible.\n\nWhen a feature is marked as deprecated it is slated for removal, but users\nshould still be able to rely on it to work correctly.  We consider a feature\nmarked \"deprecated\" as frozen; we commit to maintaining it with critical bug\nfixes until it is removed, but we won't merge new functionality to it.\n\n\n## Changing behavior\n\n> [!IMPORTANT]\n> Breaking behavior changes can only occur in new major versions, and should be avoided as much as possible.\n\nChanging behavior without a removal is particularly difficult to manage, because\nwe need to have both options available for two versions, and be able to issue\nwarnings.  For example, changing the type of the return value from a function\nwill almost invariably involve making an API break, which is frustrating for\nusers and makes it difficult for them to use Qiskit.\n\nThe best solution here is often to make a new function, and then use [the procedures for removal](#removing-features) above.\n\nIf you absolutely must change the behavior of existing code (other than fixing\nbugs), you will need to use your best judgment to apply the guiding principles\nat the top of this document.  The most appropriate warning for behavioral\nchanges is usually `FutureWarning`.  Some possibilities for how to effect a\nchange:\n\n- If you are changing the default behavior of a function, consider adding a\n  keyword argument to select between old and new behaviors.  When it comes time,\n  you can issue a `FutureWarning` if the keyword argument is not given\n  (*e.g.* if it is `None`), saying that the new value will soon become the\n  default.  You will need to go through the normal deprecation period for\n  removing this keyword argument after you have made the behavior change.  This\n  will take at least six months to go through both cycles.\n\n- If you need to change the return type of a function, consider adding a new\n  function that returns the new type, and then follow the procedures for\n  deprecating the old function.\n\n- If you need to accept a new input that you cannot distinguish from an existing\n  possibility because of its type, consider letting it be passed by a different\n  keyword argument, or add a second function that only accepts the new form.\n\n\n\n## Issuing deprecation warnings\n\nThe proper way to raise a deprecation warning is to use the decorators `@deprecate_arg` and\n`@deprecate_func` from `qiskit.utils.deprecation`. These will generate a standardized message and\nand add the deprecation to that function's docstring so that it shows up in the docs.\n\n\n```python\nfrom qiskit.utils.deprecation import deprecate_arg, deprecate_func\n\n@deprecate_func(since=\"0.24.0\", additional_msg=\"No replacement is provided.\")\ndef deprecated_func():\n    pass\n\n@deprecate_arg(\"bad_arg\", new_alias=\"new_name\", since=\"0.24.0\")\ndef another_func(bad_arg: str, new_name: str):\n    pass\n```\n\nUsually, you should set `additional_msg: str` with the format `\"Instead, use ...\"` so that\npeople know how to migrate. Read those functions' docstrings for additional arguments like\n`pending: bool` and `predicate`.\n\nIf you are deprecating outside the main Qiskit repo, set `package_name` to match your package.\nAlternatively, if you prefer to use your own decorator helpers, then have them call\n`add_deprecation_to_docstring` from `qiskit.utils.deprecation`.\n\nIf `@deprecate_func` and `@deprecate_arg` cannot handle your use case, consider improving\nthem. Otherwise, you can directly call the `warn` function\nfrom the [warnings module in the Python standard library](https://docs.python.org/3/library/warnings.html),\nusing the category `DeprecationWarning`.  For example:\n\n```python\nimport warnings\n\ndef deprecated_function():\n   warnings.warn(\n      \"The function qiskit.deprecated_function() is deprecated since \"\n      \"Qiskit 0.44.0, and will be removed 3 months or more later. \"\n      \"Instead, you should use qiskit.other_function().\",\n      category=DeprecationWarning,\n      stacklevel=2,\n   )\n   # ... the rest of the function ...\n\n```\n\nMake sure you include the version of the package that introduced the deprecation\nwarning (so maintainers can easily see when it is valid to remove it), and what\nthe alternative path is.\n\nTake note of the `stacklevel` argument.  This controls which function is\naccused of being deprecated.  Setting `stacklevel=1` (the default) means the\nwarning will blame the `warn` function itself, while `stacklevel=2` will\ncorrectly blame the containing function.  It is unusual to set this to anything\nother than `2`, but can be useful if you use a helper function to issue the\nsame warning in multiple places.\n\n\n## Testing deprecated functionality\n\nWhenever you add deprecation warnings, you will need to update tests involving\nthe functionality.  The test suite should fail otherwise, because of the new\nwarnings.  We must continue to test deprecated functionality throughout the\ndeprecation period, to ensure that it still works.\n\nTo update the tests, you need to wrap each call of deprecated behavior in its\nown assertion block.  For subclasses of `unittest.TestCase` (which all Qiskit\ntest cases are), this is done by:\n\n\n```python\nclass MyTestSuite(QiskitTestCase):\n   def test_deprecated_function(self):\n      with self.assertWarns(DeprecationWarning):\n         output = deprecated_function()\n      # ... do some things with output ...\n      self.assertEqual(output, expected)\n```\n\n## Documenting deprecations and breaking changes\n\nIt is important to warn the user when your breaking changes are coming.\n\n`@deprecate_arg` and `@deprecate_func` will automatically add the deprecation to the docstring\nfor the function so that it shows up in docs.\n\nIf you are not using those decorators, you should directly add a [Sphinx deprecated directive](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated):\n\n\n```python\ndef deprecated_function():\n    \"\"\"\n    Short description of the deprecated function.\n\n    .. deprecated:: 0.44.0\n       The function qiskit.deprecated_function() is deprecated since\n       Qiskit 0.44.0, and will be removed 3 months or more later.\n       Instead, you should use qiskit.other_function().\n\n    <rest of the docstring>\n    \"\"\"\n    # ... the rest of the function ...\n```\n\n\nYou should also document the deprecation in the changelog by using Reno. Explain the deprecation\nand how to migrate.\n\nIn particular situations where a deprecation or change might be a major disruptor for users, a\n*migration guide* might be needed. Please write these guides in Qiskit's documentation at\nhttps://github.com/Qiskit/documentation/tree/main/docs/api/migration-guides. Once\nthe migration guide is written and published, deprecation\nmessages and documentation should link to it (use the `additional_msg` argument for\n`@deprecate_arg` and `@deprecate_func`).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.1484375,
          "content": "                    Copyright 2017 IBM and its contributors\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 IBM and its contributors.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINING.md",
          "type": "blob",
          "size": 2.52734375,
          "content": "# Maintainers Guide\n\nThis document defines a *maintainer* as a contributor with merge privileges.\nThe information detailed here is mostly related to Qiskit releases and other internal processes.\n\n\n## Stable Branch Policy\n\nThe stable branch is intended to be a safe source of fixes for high-impact\nbugs and security issues that have been fixed on `main` since a\nrelease. When reviewing a stable branch PR, we must balance the risk\nof any given patch with the value that it will provide to users of the\nstable branch. Only a limited class of changes are appropriate for\ninclusion on the stable branch. A large, risky patch for a major issue\nmight make sense, as might a trivial fix for a fairly obscure error-handling\ncase. A number of factors must be weighed when considering a\nchange:\n\n-   The risk of regression: even the tiniest changes carry some risk of\n    breaking something, and we really want to avoid regressions on the\n    stable branch.\n-   The user visibility benefit: are we fixing something that users might\n    actually notice, and if so, how important is it?\n-   How self-contained the fix is: if it fixes a significant issue but\n    also refactors a lot of code, it's probably worth thinking about\n    what a less risky fix might look like.\n-   Whether the fix is already on `main`: a change must be a backport of\n    a change already merged onto `main`, unless the change simply does\n    not make sense on `main`.\n\n\n### Backporting\n\nWhen a PR tagged with `stable backport potential` is merged, or when a\nmerged PR is given that tag, the [Mergify bot](https://mergify.com) will\nopen a PR to the current stable branch.  You can review and merge this PR\nlike normal.\n\n\n## Documentation Structure\n\nThe way documentation is structured in Qiskit is to push as much of the actual\ndocumentation into the docstrings as possible. This makes it easier for\nadditions and corrections to be made during development, because the majority\nof the documentation lives near the code being changed. These docstrings are then pulled into\nthe API Reference section of https://docs.quantum.ibm.com.\n\nRefer to https://qiskit.github.io/qiskit_sphinx_theme/apidocs/index.html for how to create and\nwrite effective API documentation, such as setting up the RST files and docstrings.\n\nIf changes you are making affect non-API reference content in https://docs.quantum.ibm.com\nyou can open an issue (or better yet a PR) to update the relevant page in https://github.com/Qiskit/documentation.\nYou can also use this repo to suggest or contribute brand new content beyond updates to the API reference.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4638671875,
          "content": "include LICENSE.txt\ninclude requirements.txt\nrecursive-include qiskit/qasm/libs *.inc\ninclude qiskit/VERSION.txt\ninclude qiskit/visualization/circuit/styles/*.json\nrecursive-include qiskit/providers/fake_provider/backends_v1 *.json\n\n# Include the tests files.\nrecursive-include test *.py\ninclude test/python/qasm/*.qasm\ninclude test/python/visualization/references/*.png\ninclude test/python/notebooks/*.ipynb\n\ninclude Cargo.toml\ninclude Cargo.lock\nrecursive-include crates *\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.806640625,
          "content": "# This code is part of Qiskit.\n#\n# (C) Copyright IBM 2017.\n#\n# This code is licensed under the Apache License, Version 2.0. You may\n# obtain a copy of this license in the LICENSE.txt file in the root directory\n# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.\n#\n# Any modifications or derivative works of this code must retain this\n# copyright notice, and modified files need to carry a notice indicating\n# that they have been altered from the originals.\n\nOS := $(shell uname -s)\n\n.PHONY: default ruff env lint lint-incr style black test test_randomized pytest pytest_randomized test_ci coverage coverage_erase clean\n\ndefault: ruff style lint-incr test ;\n\n# Dependencies need to be installed on the Anaconda virtual environment.\nenv:\n\tif test $(findstring qiskitenv, $(shell conda info --envs | tr '[:upper:]' '[:lower:]')); then \\\n\t\tbash -c \"source activate Qiskitenv;pip install -r requirements.txt\"; \\\n\telse \\\n\t\tconda create -y -n Qiskitenv python=3; \\\n\t\tbash -c \"source activate Qiskitenv;pip install -r requirements.txt\"; \\\n\tfi;\n\n# Ignoring generated ones with .py extension.\nlint:\n\tpylint -rn qiskit test tools\n\ttools/verify_headers.py qiskit test tools\n\ttools/find_optional_imports.py\n\ttools/find_stray_release_notes.py\n\ttools/verify_images.py\n\n# Only pylint on files that have changed from origin/main. Also parallelize (disables cyclic-import check)\nlint-incr:\n\t-git fetch -q https://github.com/Qiskit/qiskit-terra.git :lint_incr_latest\n\ttools/pylint_incr.py -j4 -rn -sn --paths :/qiskit/*.py :/test/*.py :/tools/*.py\n\ttools/verify_headers.py qiskit test tools\n\ttools/find_optional_imports.py\n\ttools/verify_images.py\n\nruff:\n\truff qiskit test tools setup.py\n\nstyle:\n\tblack --check qiskit test tools setup.py\n\nblack:\n\tblack qiskit test tools setup.py\n\n# Use the -s (starting directory) flag for \"unittest discover\" is necessary,\n# otherwise the QuantumCircuit header will be modified during the discovery.\ntest:\n\t@echo ================================================\n\t@echo Consider using tox as suggested in the CONTRIBUTING.MD guideline. For running the tests as the CI, use test_ci\n\t@echo ================================================\n\tpython3 -m unittest discover -s test/python -t . -v\n\t@echo ================================================\n\t@echo Consider using tox as suggested in the CONTRIBUTING.MD guideline. For running the tests as the CI, use test_ci\n\t@echo ================================================\n\n# Use pytest to run tests\npytest:\n\tpytest test/python\n\n# Use pytest to run randomized tests\npytest_randomized:\n\tpytest test/randomized\n\ntest_ci:\n\tQISKIT_TEST_CAPTURE_STREAMS=1 stestr run\n\ntest_randomized:\n\tpython3 -m unittest discover -s test/randomized -t . -v\n\ncoverage:\n\tcoverage3 run --source qiskit -m unittest discover -s test/python -q\n\tcoverage3 report\n\ncoverage_erase:\n\tcoverage erase\n\nclean: coverage_erase ;\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.21484375,
          "content": "# Qiskit\n\n[![License](https://img.shields.io/github/license/Qiskit/qiskit.svg?)](https://opensource.org/licenses/Apache-2.0) <!--- long-description-skip-begin -->\n[![Current Release](https://img.shields.io/github/release/Qiskit/qiskit.svg?logo=Qiskit)](https://github.com/Qiskit/qiskit/releases)\n[![Extended Support Release](https://img.shields.io/github/v/release/Qiskit/qiskit?sort=semver&filter=0.*&logo=Qiskit&label=extended%20support)](https://github.com/Qiskit/qiskit/releases?q=tag%3A0)\n[![Downloads](https://img.shields.io/pypi/dm/qiskit.svg)](https://pypi.org/project/qiskit/)\n[![Coverage Status](https://coveralls.io/repos/github/Qiskit/qiskit/badge.svg?branch=main)](https://coveralls.io/github/Qiskit/qiskit?branch=main)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/qiskit)\n[![Minimum rustc 1.70](https://img.shields.io/badge/rustc-1.70+-blue.svg)](https://rust-lang.github.io/rfcs/2495-min-rust-version.html)\n[![Downloads](https://static.pepy.tech/badge/qiskit)](https://pepy.tech/project/qiskit)<!--- long-description-skip-end -->\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2583252.svg)](https://doi.org/10.5281/zenodo.2583252)\n\n**Qiskit**  is an open-source SDK for working with quantum computers at the level of extended quantum circuits, operators, and primitives.\n\nThis library is the core component of Qiskit, which contains the building blocks for creating and working with quantum circuits, quantum operators, and primitive functions (Sampler and Estimator).\nIt also contains a transpiler that supports optimizing quantum circuits, and a quantum information toolbox for creating advanced operators.\n\nFor more details on how to use Qiskit, refer to the documentation located here:\n\n<https://docs.quantum.ibm.com/>\n\n\n## Installation\n\n> [!WARNING]\n> Do not try to upgrade an existing Qiskit 0.* environment to Qiskit 1.0 in-place. [Read more](https://docs.quantum.ibm.com/migration-guides/qiskit-1.0-installation).\n\nWe encourage installing Qiskit via ``pip``:\n\n```bash\npip install qiskit\n```\n\nPip will handle all dependencies automatically and you will always install the latest (and well-tested) version.\n\nTo install from source, follow the instructions in the [documentation](https://docs.quantum.ibm.com/guides/install-qiskit-source).\n\n## Create your first quantum program in Qiskit\n\nNow that Qiskit is installed, it's time to begin working with Qiskit. The essential parts of a quantum program are:\n1. Define and build a quantum circuit that represents the quantum state\n2. Define the classical output by measurements or a set of observable operators\n3. Depending on the output, use the primitive function `sampler` to sample outcomes or the `estimator` to estimate values.\n\nCreate an example quantum circuit using the `QuantumCircuit` class:\n\n```python\nimport numpy as np\nfrom qiskit import QuantumCircuit\n\n# 1. A quantum circuit for preparing the quantum state |000> + i |111>\nqc_example = QuantumCircuit(3)\nqc_example.h(0)          # generate superpostion\nqc_example.p(np.pi/2,0)  # add quantum phase\nqc_example.cx(0,1)       # 0th-qubit-Controlled-NOT gate on 1st qubit\nqc_example.cx(0,2)       # 0th-qubit-Controlled-NOT gate on 2nd qubit\n```\n\nThis simple example makes an entangled state known as a [GHZ state](https://en.wikipedia.org/wiki/Greenberger%E2%80%93Horne%E2%80%93Zeilinger_state) $(|000\\rangle + i|111\\rangle)/\\sqrt{2}$. It uses the standard quantum gates: Hadamard gate (`h`), Phase gate (`p`), and CNOT gate (`cx`). \n\nOnce you've made your first quantum circuit, choose which primitive function you will use. Starting with `sampler`,\nwe use `measure_all(inplace=False)` to get a copy of the circuit in which all the qubits are measured:\n\n```python\n# 2. Add the classical output in the form of measurement of all qubits\nqc_measured = qc_example.measure_all(inplace=False)\n\n# 3. Execute using the Sampler primitive\nfrom qiskit.primitives import StatevectorSampler\nsampler = StatevectorSampler()\njob = sampler.run([qc_measured], shots=1000)\nresult = job.result()\nprint(f\" > Counts: {result[0].data[\"meas\"].get_counts()}\")\n```\nRunning this will give an outcome similar to `{'000': 497, '111': 503}` which is `000` 50% of the time and `111` 50% of the time up to statistical fluctuations.\nTo illustrate the power of Estimator, we now use the quantum information toolbox to create the operator $XXY+XYX+YXX-YYY$ and pass it to the `run()` function, along with our quantum circuit. Note the Estimator requires a circuit _**without**_ measurement, so we use the `qc_example` circuit we created earlier.\n\n```python\n# 2. Define the observable to be measured \nfrom qiskit.quantum_info import SparsePauliOp\noperator = SparsePauliOp.from_list([(\"XXY\", 1), (\"XYX\", 1), (\"YXX\", 1), (\"YYY\", -1)])\n\n# 3. Execute using the Estimator primitive\nfrom qiskit.primitives import StatevectorEstimator\nestimator = StatevectorEstimator()\njob = estimator.run([(qc_example, operator)], precision=1e-3)\nresult = job.result()\nprint(f\" > Expectation values: {result[0].data.evs}\")\n```\n\nRunning this will give the outcome `4`. For fun, try to assign a value of +/- 1 to each single-qubit operator X and Y \nand see if you can achieve this outcome. (Spoiler alert: this is not possible!)\n\nUsing the Qiskit-provided `qiskit.primitives.StatevectorSampler` and `qiskit.primitives.StatevectorEstimator` will not take you very far.\nThe power of quantum computing cannot be simulated on classical computers and you need to use real quantum hardware to scale to larger quantum circuits.\nHowever, running a quantum circuit on hardware requires rewriting to the basis gates and connectivity of the quantum hardware.\nThe tool that does this is the [transpiler](https://docs.quantum.ibm.com/api/qiskit/transpiler), and Qiskit includes transpiler passes for synthesis, optimization, mapping, and scheduling.\nHowever, it also includes a default compiler, which works very well in most examples.\nThe following code will map the example circuit to the `basis_gates = ['cz', 'sx', 'rz']` and a linear chain of qubits $0 \\rightarrow 1 \\rightarrow 2$ with the `coupling_map =[[0, 1], [1, 2]]`.\n\n```python\nfrom qiskit import transpile\nqc_transpiled = transpile(qc_example, basis_gates = ['cz', 'sx', 'rz'], coupling_map =[[0, 1], [1, 2]] , optimization_level=3)\n```\n\n### Executing your code on real quantum hardware\n\nQiskit provides an abstraction layer that lets users run quantum circuits on hardware from any vendor that provides a compatible interface. \nThe best way to use Qiskit is with a runtime environment that provides optimized implementations of `sampler` and `estimator` for a given hardware platform. This runtime may involve using pre- and post-processing, such as optimized transpiler passes with error suppression, error mitigation, and, eventually, error correction built in. A runtime implements `qiskit.primitives.BaseSamplerV2` and `qiskit.primitives.BaseEstimatorV2` interfaces. For example,\nsome packages that provide implementations of a runtime primitive implementation are:\n\n* https://github.com/Qiskit/qiskit-ibm-runtime\n\nQiskit also provides a lower-level abstract interface for describing quantum backends. This interface, located in\n``qiskit.providers``, defines an abstract `BackendV2` class that providers can implement to represent their\nhardware or simulators to Qiskit. The backend class includes a common interface for executing circuits on the backends; however, in this interface each provider may perform different types of pre- and post-processing and return outcomes that are vendor-defined. Some examples of published provider packages that interface with real hardware are:\n\n* https://github.com/qiskit-community/qiskit-ionq\n* https://github.com/qiskit-community/qiskit-aqt-provider\n* https://github.com/qiskit-community/qiskit-braket-provider\n* https://github.com/qiskit-community/qiskit-quantinuum-provider\n* https://github.com/rigetti/qiskit-rigetti\n\n<!-- This is not an exhaustive list, and if you maintain a provider package please feel free to open a PR to add new providers -->\n\nYou can refer to the documentation of these packages for further instructions\non how to get access and use these systems.\n\n## Contribution Guidelines\n\nIf you'd like to contribute to Qiskit, please take a look at our\n[contribution guidelines](CONTRIBUTING.md). By participating, you are expected to uphold our [code of conduct](CODE_OF_CONDUCT.md).\n\nWe use [GitHub issues](https://github.com/Qiskit/qiskit/issues) for tracking requests and bugs. Please\n[join the Qiskit Slack community](https://qisk.it/join-slack) for discussion, comments, and questions.\nFor questions related to running or using Qiskit, [Stack Overflow has a `qiskit`](https://stackoverflow.com/questions/tagged/qiskit).\nFor questions on quantum computing with Qiskit, use the `qiskit` tag in the [Quantum Computing Stack Exchange](https://quantumcomputing.stackexchange.com/questions/tagged/qiskit) (please, read first the [guidelines on how to ask](https://quantumcomputing.stackexchange.com/help/how-to-ask) in that forum).\n\n\n## Authors and Citation\n\nQiskit is the work of [many people](https://github.com/Qiskit/qiskit/graphs/contributors) who contribute\nto the project at different levels. If you use Qiskit, please cite as per the included [BibTeX file](CITATION.bib).\n\n## Changelog and Release Notes\n\nThe changelog for a particular release is dynamically generated and gets\nwritten to the release page on Github for each release. For example, you can\nfind the page for the `0.46.0` release here:\n\n<https://github.com/Qiskit/qiskit/releases/tag/0.46.0>\n\nThe changelog for the current release can be found in the releases tab:\n[![Releases](https://img.shields.io/github/release/Qiskit/qiskit.svg?style=flat&label=)](https://github.com/Qiskit/qiskit/releases)\nThe changelog provides a quick overview of notable changes for a given\nrelease.\n\nAdditionally, as part of each release, detailed release notes are written to\ndocument in detail what has changed as part of a release. This includes any\ndocumentation on potential breaking changes on upgrade and new features. See [all release notes here](https://docs.quantum.ibm.com/api/qiskit/release-notes).\n\n## Acknowledgements\n\nWe acknowledge partial support for Qiskit development from the DOE Office of Science National Quantum Information Science Research Centers, Co-design Center for Quantum Advantage (C2QA) under contract number DE-SC0012704.\n\n## License\n\n[Apache License 2.0](LICENSE.txt)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.4814453125,
          "content": "# Security Policy\n\n## Supported Versions\n\nQiskit supports the most recent major release with new features, which will only appear in minor releases of that series.\nThe most recent minor release in the current major release series is also supported with bug fixes.\nIn addition, the last minor release of the *previous* major release series is supported with bug fixes for six months after a new major release.\n\nFor example, if the most recent release is 1.0.1, then the current major release series is 1.x and the current minor release is 1.0.x.\nThe 1.0.x series will be supported with bug fixes, until the release of 1.1.0, which will include new features.\nThe last version of the previous major release, 0.46.x, is supported with bugfixes only until six months after the final release of 1.0.0.\n\nWe provide more detail on [the release and support schedule of Qiskit in our documentation](https://docs.quantum.ibm.com/open-source/qiskit-sdk-version-strategy).\n\n## Reporting a Vulnerability\n\nTo report vulnerabilities, you can privately report a potential security issue\nvia the GitHub security vulnerabilities feature. This can be done here:\n\nhttps://github.com/Qiskit/qiskit/security/advisories\n\nPlease do **not** open a public issue about a potential security vulnerability.\n\nYou can find more details on the security vulnerability feature in the GitHub\ndocumentation here:\n\nhttps://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability\n"
        },
        {
          "name": "asv.conf.json",
          "type": "blob",
          "size": 0.7578125,
          "content": "{\n    \"version\": 1,\n    \"project\": \"qiskit\",\n    \"project_url\": \"https://qiskit.org\",\n    \"repo\": \".\",\n    \"install_command\": [\n        \"in-dir={env_dir} python -m pip install {wheel_file}[csp-layout-pass]\"\n      ],\n    \"uninstall_command\": [\n        \"return-code=any python -m pip uninstall -y qiskit qiskit-terra\"\n    ],\n    \"build_command\": [\n        \"python -m pip install -U build\",\n        \"python -m build --outdir {build_cache_dir} --wheel {build_dir}\"\n    ],\n    \"branches\": [\"main\"],\n    \"dvcs\": \"git\",\n    \"environment_type\": \"virtualenv\",\n    \"show_commit_url\": \"http://github.com/Qiskit/qiskit/commit/\",\n    \"pythons\": [\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"],\n    \"benchmark_dir\": \"test/benchmarks\",\n    \"env_dir\": \".asv/env\",\n    \"results_dir\": \".asv/results\"\n}\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 9.9677734375,
          "content": "# Trigger types.  This needs to include all the triggers for the different\n# pipelines we might want to run.\n#\n# Each of these individually triggers the pipeline compilation step, but it's\n# the templating expressions in the `stages` list that actually set what runs.\ntrigger:\n  branches:\n    include:\n      - 'main'\n      - 'stable/*'\n      - 'gh-readonly-queue/*'\n\npr:\n  autoCancel: true\n  branches:\n    include:\n      - '*'\n\n# A schedule only runs on branches that match include rules from _both_ `main`\n# and the branch itself.  On `main`, we blanket include all branches that might\n# want to be enabled, then particular branches can override it to exclude\n# themselves by removing themselves from the trigger list.  For example, old\n# stable branches can remove `stable/*` from their copy of this file once they\n# reach their end-of-life.\nschedules:\n  - cron: \"20 6 * * *\"\n    displayName: \"Complete matrix test\"\n    branches:\n      include: [ \"main\", \"stable/*\" ]\n    always: false  # Only run if the code changed since the last cron sync.\n\n\n# Configuration.  In theory a manual trigger on the Azure website or embedding\n# this pipeline as a template can override these, but we're not interested in\n# that.  We just want to give names to things to make it easier to read.\nparameters:\n  - name: \"supportedPythonVersions\"\n    displayName: \"All supported versions of Python\"\n    type: object\n    default: [\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n\n  - name: \"minimumPythonVersion\"\n    displayName: \"Minimum supported version of Python\"\n    type: string\n    default: \"3.9\"\n\n  - name: \"maximumPythonVersion\"\n    displayName: \"Maximum supported version of Python\"\n    type: string\n    default: \"3.13\"\n\n  # These two versions of Python can be chosen somewhat arbitrarily, but we get\n  # slightly better coverage per PR if they're neither the maximum nor minimum\n  # supported versions.\n\n  - name: \"branchPushPythonVersion\"\n    displayName: \"Version of Python to run simple tests on pushes to protected branches\"\n    type: string\n    default: \"3.9\"\n\n  # Sync with 'python-version' in '.github/workflows/docs_deploy.yml'.\n  - name: \"documentationPythonVersion\"\n    displayName: \"Version of Python to use to build Sphinx documentation\"\n    type: string\n    default: \"3.9\"\n\n# Conditional compilation logic.  This is all the logic for \"what to run\"; each\n# stage in turn delegates to various templates in \".azure\" that provide the\n# information on \"how to run\" them.\n#\n# The conditional conditions use the template-expression syntax `${{ }}` so only\n# the relevant stages even appear in the job list.  The documentation on the\n# expression syntax is here:\n#\n#   https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops\n#\n# Not all variables are available at template-expansion time - this happens\n# before any machine is provisioned, so mostly you can access things from\n# GitHub, but nothing about the actual machine.  This is the list of variables\n# (look in the \"available in templates\" column):\n#\n#   https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n#\n# The main differentiator is `variables['Build.Reason']`, which contains the\n# trigger type:\n#   - cron (`Schedule`)\n#   - push to a git reference like a branch or tag (`IndividualCI`)\n#   - push to a pull request (`PullRequest`)\n# For `IndividualCI` (push/merge to a branch/tag on Qiskit/qiskit-terra), you\n# need to examine `variables['Build.SourceBranch']` to determine whether it's a\n# branch or a tag, and if a branch, then whether it's in the merge queue or a\n# push to a \"real\" branch.\nstages:\n  # Nightly cron job.\n  #\n  # For this to run on a branch, the `schedules` trigger  up at the top of this\n  # file needs to match on _both_ `main` and the branch itself.\n  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:\n    - stage: \"Nightly\"\n      displayName: \"Nightly complete matrix tests\"\n      jobs:\n        - ${{ each version in parameters.supportedPythonVersions }}:\n          - template: \".azure/test-linux.yml\"\n            parameters:\n              pythonVersion: ${{ version }}\n              testImages: false\n              testRust: false\n              installOptionals: true\n\n          - template: \".azure/test-macos.yml\"\n            parameters:\n              pythonVersion: ${{ version }}\n              installOptionals: true\n\n          - template: \".azure/test-windows.yml\"\n            parameters:\n              pythonVersion: ${{ version }}\n              installOptionals: true\n\n    - stage: \"Nightly_Failure\"\n      displayName: \"Comment on nightly failure\"\n      dependsOn: \"Nightly\"\n      condition: failed()\n      pool: {vmImage: 'ubuntu-latest'}\n      jobs:\n        - job: \"Comment\"\n          steps:\n            - task: GitHubComment@0\n              inputs:\n                gitHubConnection: Qiskit\n                repositoryName: ${{ variables['Build.Repository.Name'] }}\n                id: 7864\n                comment: Nightly test job failed at commit $(Build.SourceVersion).  View the logs at $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId).\n\n  # Full PR suite.  PRs need to pass this pipeline in order to be moved to the\n  # merge queue, where they'll use the next rule as the branch-protection rule\n  # for the final merge to the base branch.\n  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:\n    # The preliminary stage should be small in both total runtime (including\n    # provisioning) and resources required.  About half of PR commits result in\n    # a CI failure, and over 90% of these are in linting, documention or a test\n    # failure that would affect _any_ OS or Python version.  The goal in the\n    # first stage is to catch the vast majority of failures with minimal cost.\n    - stage: \"Lint_Docs_Prelim_Tests\"\n      displayName: \"Preliminary tests\"\n      jobs:\n        - template: \".azure/lint_docs-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.minimumPythonVersion }}\n\n        - template: \".azure/test-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.minimumPythonVersion }}\n            # A PR is more likely to fail CI because it introduces a logic error\n            # into an existing test than because it adds a new test / optional\n            # dependency that isn't accounted for in the test-skipping logic\n            # (and such a failure would need fewer iterations to fix).  We want\n            # to fail fast in the first CI stage.\n            installOptionals: true\n            testRust: true\n            testImages: true\n\n    # The rest of the PR pipeline is to test the oldest and newest supported\n    # versions of Python. It's very rare for a failure to be specific to an\n    # intermediate version of Python, so we just catch those in the cron-job\n    # pipeline to reduce the amount of resources used.\n    - stage: \"Tests\"\n      displayName: \"Main tests\"\n      dependsOn: \"Lint_Docs_Prelim_Tests\"\n      jobs:\n        - template: \".azure/test-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.maximumPythonVersion }}\n            testRust: false\n            testImages: false\n            installFromSdist: true\n            installOptionals: false\n\n        - template: \".azure/test-macos.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.minimumPythonVersion }}\n            installOptionals: true\n\n        - template: \".azure/test-macos.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.maximumPythonVersion }}\n            installOptionals: false\n\n        - template: \".azure/test-windows.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.minimumPythonVersion }}\n            installOptionals: true\n\n        - template: \".azure/test-windows.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.maximumPythonVersion }}\n            installOptionals: false\n\n  # Merge queue.  A PR that reaches here has already passed the more rigorous PR\n  # suite, so is very likely to pass.  The main reasons for failures here are\n  # flaky VMs timing out (which we can't do much about), or a merge conflict\n  # with another PR that is also in the merge queue.\n  #\n  # There's no reason to have multiple stages in this case, because we're\n  # expecting it to pass.  Having more than one stage frustrates parallel\n  # throughput in low-contention cases, and guarantees a longer critical path.\n  - ${{ if and(eq(variables['Build.Reason'], 'IndividualCI'), contains(variables['Build.SourceBranch'], 'gh-readonly-queue')) }}:\n    - stage: \"Merge_Queue\"\n      displayName: \"Merge queue\"\n      jobs:\n        - template: \".azure/lint_docs-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.minimumPythonVersion }}\n\n        - template: \".azure/test-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.minimumPythonVersion }}\n            installOptionals: true\n            testRust: true\n            testImages: true\n\n        - template: \".azure/test-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.maximumPythonVersion }}\n            installOptionals: false\n            testRust: false\n            testImages: false\n\n        - template: \".azure/test-macos.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.maximumPythonVersion }}\n            installOptionals: false\n\n        - template: \".azure/test-windows.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.maximumPythonVersion }}\n            installOptionals: false\n\n  # Push to main or the stable branches.  The triggering branches also need to\n  # be in the triggers at the top of this file.\n  - ${{ if and(eq(variables['Build.Reason'], 'IndividualCI'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/stable/'))) }}:\n    - stage: \"Push\"\n      jobs:\n        - template: \".azure/test-linux.yml\"\n          parameters:\n            pythonVersion: ${{ parameters.branchPushPythonVersion }}\n            testRust: true\n            testImages: true\n            installOptionals: false\n"
        },
        {
          "name": "constraints.txt",
          "type": "blob",
          "size": 0.873046875,
          "content": "# Scipy 1.11 seems to have caused an instability in the Weyl coordinates\n# eigensystem code for one of the test cases.  See\n# https://github.com/Qiskit/qiskit-terra/issues/10345 for current details.\nscipy<1.11; python_version<'3.12'\n\n# z3-solver from 4.12.3 onwards upped the minimum macOS API version for its\n# wheels to 11.7. The Azure VM images contain pre-built CPythons, of which at\n# least CPython 3.8 was compiled for an older macOS, so does not match a\n# `macos_11_7` platform tag.  This should be purely a CI artefact, and not\n# affect local usage.\nz3-solver==4.12.2.0; platform_system==\"Darwin\"\n\n# There are minor differences in output between pydot 2 and pydot 3 for\n# things like the pass-manager drawer.  This is totally fine for general\n# usage, but our test suite uses an exact reference file that uses the\n# pydot 3 output, so we need to enforce that during tests.\npydot>=3.0.0\n"
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 13.697265625,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\", \"setuptools-rust\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"qiskit\"\ndescription = \"An open-source SDK for working with quantum computers at the level of extended quantum circuits, operators, and primitives.\"\nrequires-python = \">=3.9\"\nlicense = {text = \"Apache 2.0\"}\nauthors = [\n    { name = \"Qiskit Development Team\", email = \"qiskit@us.ibm.com\" },\n]\nkeywords = [\n    \"qiskit\",\n    \"quantum circuit\",\n    \"quantum computing\",\n    \"quantum programming language\",\n    \"quantum\",\n    \"sdk\",\n]\nclassifiers = [\n    \"Environment :: Console\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Scientific/Engineering\",\n]\n# These are configured in the `tool.setuptools.dynamic` table.\ndynamic = [\"version\", \"readme\", \"dependencies\"]\n\n# If modifying this table, be sure to sync with `requirements-optional.txt` and\n# `qiskit.utils.optionals`.\n[project.optional-dependencies]\nqasm3-import = [\n    \"qiskit-qasm3-import >= 0.1.0\",\n]\nvisualization = [\n    \"matplotlib >= 3.3\",\n    \"pydot\",\n    \"Pillow >= 4.2.1\",\n    \"pylatexenc >= 1.4\",\n    \"seaborn >= 0.9.0\",\n]\ncrosstalk-pass = [\n    \"z3-solver >= 4.7\",\n]\ncsp-layout-pass = [\n    \"python-constraint >= 1.4\",\n]\n# This will make the resolution work for installers from PyPI, but `pip install .[all]` will be\n# unreliable because `qiskit` will resolve to the PyPI version, so local changes in the\n# optionals won't be reflected.\nall = [\"qiskit[qasm3-import,visualization,crosstalk-pass,csp-layout-pass]\"]\n\n[project.urls]\nHomepage = \"https://www.ibm.com/quantum/qiskit\"\nDocumentation = \"https://docs.quantum.ibm.com\"\n\"API Reference\" = \"https://docs.quantum.ibm.com/api/qiskit\"\nRepository = \"https://github.com/Qiskit/qiskit\"\nIssues = \"https://github.com/Qiskit/qiskit/issues\"\nChangelog = \"https://docs.quantum.ibm.com/api/qiskit/release-notes\"\n\n[project.entry-points.\"qiskit.unitary_synthesis\"]\ndefault = \"qiskit.transpiler.passes.synthesis.unitary_synthesis:DefaultUnitarySynthesis\"\naqc = \"qiskit.transpiler.passes.synthesis.aqc_plugin:AQCSynthesisPlugin\"\nsk = \"qiskit.transpiler.passes.synthesis.solovay_kitaev_synthesis:SolovayKitaevSynthesis\"\n\n[project.entry-points.\"qiskit.synthesis\"]\n\"clifford.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:DefaultSynthesisClifford\"\n\"clifford.ag\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:AGSynthesisClifford\"\n\"clifford.bm\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:BMSynthesisClifford\"\n\"clifford.greedy\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:GreedySynthesisClifford\"\n\"clifford.layers\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:LayerSynthesisClifford\"\n\"clifford.lnn\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:LayerLnnSynthesisClifford\"\n\"linear_function.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:DefaultSynthesisLinearFunction\"\n\"linear_function.kms\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:KMSSynthesisLinearFunction\"\n\"linear_function.pmh\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:PMHSynthesisLinearFunction\"\n\"mcx.n_dirty_i15\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCXSynthesisNDirtyI15\"\n\"mcx.n_clean_m15\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCXSynthesisNCleanM15\"\n\"mcx.1_clean_b95\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCXSynthesis1CleanB95\"\n\"mcx.gray_code\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCXSynthesisGrayCode\"\n\"mcx.noaux_v24\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCXSynthesisNoAuxV24\"\n\"mcx.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCXSynthesisDefault\"\n\"mcmt.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCMTSynthesisDefault\"\n\"mcmt.noaux\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCMTSynthesisNoAux\"\n\"mcmt.vchain\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MCMTSynthesisVChain\"\n\"permutation.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:BasicSynthesisPermutation\"\n\"permutation.kms\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:KMSSynthesisPermutation\"\n\"permutation.basic\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:BasicSynthesisPermutation\"\n\"permutation.acg\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:ACGSynthesisPermutation\"\n\"qft.full\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:QFTSynthesisFull\"\n\"qft.line\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:QFTSynthesisLine\"\n\"qft.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:QFTSynthesisFull\"\n\"permutation.token_swapper\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:TokenSwapperSynthesisPermutation\"\n\"ModularAdder.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:ModularAdderSynthesisDefault\"\n\"ModularAdder.ripple_c04\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:ModularAdderSynthesisC04\"\n\"ModularAdder.ripple_v95\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:ModularAdderSynthesisV95\"\n\"ModularAdder.qft_d00\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:ModularAdderSynthesisD00\"\n\"HalfAdder.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:HalfAdderSynthesisDefault\"\n\"HalfAdder.ripple_c04\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:HalfAdderSynthesisC04\"\n\"HalfAdder.ripple_v95\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:HalfAdderSynthesisV95\"\n\"HalfAdder.qft_d00\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:HalfAdderSynthesisD00\"\n\"FullAdder.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:FullAdderSynthesisDefault\"\n\"FullAdder.ripple_c04\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:FullAdderSynthesisC04\"\n\"FullAdder.ripple_v95\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:FullAdderSynthesisV95\"\n\"Multiplier.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MultiplierSynthesisR17\"\n\"Multiplier.qft_r17\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MultiplierSynthesisR17\"\n\"Multiplier.cumulative_h18\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:MultiplierSynthesisH18\"\n\"PauliEvolution.default\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:PauliEvolutionSynthesisDefault\"\n\"PauliEvolution.rustiq\" = \"qiskit.transpiler.passes.synthesis.hls_plugins:PauliEvolutionSynthesisRustiq\"\n\n[project.entry-points.\"qiskit.transpiler.init\"]\ndefault = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:DefaultInitPassManager\"\n\n[project.entry-points.\"qiskit.transpiler.translation\"]\nsynthesis = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:UnitarySynthesisPassManager\"\ntranslator = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:BasisTranslatorPassManager\"\n\n[project.entry-points.\"qiskit.transpiler.routing\"]\nbasic = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:BasicSwapPassManager\"\nlookahead = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:LookaheadSwapPassManager\"\nnone = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:NoneRoutingPassManager\"\nsabre = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:SabreSwapPassManager\"\nstochastic = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:StochasticSwapPassManager\"\n\n[project.entry-points.\"qiskit.transpiler.optimization\"]\ndefault = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:OptimizationPassManager\"\n\n[project.entry-points.\"qiskit.transpiler.layout\"]\ndefault = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:DefaultLayoutPassManager\"\ndense = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:DenseLayoutPassManager\"\nsabre = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:SabreLayoutPassManager\"\ntrivial = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:TrivialLayoutPassManager\"\n\n[project.entry-points.\"qiskit.transpiler.scheduling\"]\nalap = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:AlapSchedulingPassManager\"\nasap = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:AsapSchedulingPassManager\"\ndefault = \"qiskit.transpiler.preset_passmanagers.builtin_plugins:DefaultSchedulingPassManager\"\n\n[tool.setuptools]\ninclude-package-data = true\n\n[tool.setuptools.dynamic]\nversion = { file = \"qiskit/VERSION.txt\" }\nreadme = { file = \"README.md\", content-type = \"text/markdown\" }\ndependencies = {file = \"requirements.txt\" }\n\n[tool.setuptools.packages.find]\ninclude = [\"qiskit\", \"qiskit.*\"]\n\n[tool.black]\nline-length = 100\ntarget-version = ['py39', 'py310', 'py311']\n\n[tool.cibuildwheel]\nmanylinux-x86_64-image = \"manylinux2014\"\nmanylinux-i686-image = \"manylinux2014\"\nskip = \"pp* cp36-* cp37-* cp38-* *musllinux* *win32 *i686 cp38-macosx_arm64\"\ntest-skip = \"*win32 *linux_i686\"\ntest-command = \"cp -r {project}/test . && QISKIT_PARALLEL=FALSE stestr --test-path test/python run --abbreviate\"\n# We need to use pre-built versions of Numpy and Scipy in the tests; they have a\n# tendency to crash if they're installed from source by `pip install`, and since\n# Numpy 1.22 there are no i686 wheels, so we force pip to use older ones without\n# restricting any dependencies that Numpy and Scipy might have.\nbefore-test = \"pip install --prefer-binary --only-binary=numpy,scipy numpy scipy -c constraints.txt -r requirements-dev.txt\"\n# Some jobs locally override the before-build and environment configuration if a\n# specific job override is needed. For example tier 1 platforms locally override\n# the before-build and environment configuration to enable PGO,\n# see: .github/workflows/wheels.yml for the jobs where this is done\nenvironment = 'RUSTUP_TOOLCHAIN=\"stable\"'\n\n[tool.cibuildwheel.linux]\nbefore-all = \"yum install -y wget && {package}/tools/install_rust.sh\"\nenvironment = 'PATH=\"$PATH:$HOME/.cargo/bin\" CARGO_NET_GIT_FETCH_WITH_CLI=\"true\" RUSTUP_TOOLCHAIN=\"stable\"'\nrepair-wheel-command = \"auditwheel repair -w {dest_dir} {wheel} && pipx run abi3audit --strict --report {wheel}\"\n\n[tool.cibuildwheel.macos]\nrepair-wheel-command = \"delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} && pipx run abi3audit --strict --report {wheel}\"\n\n[tool.cibuildwheel.windows]\ntest-command = \"cp -r {project}/test . && stestr --test-path test/python run --abbreviate\"\nrepair-wheel-command = \"cp {wheel} {dest_dir}/. && pipx run abi3audit --strict --report {wheel}\"\n\n[tool.ruff]\nselect = [\n  # Rules in alphabetic order\n  \"C4\",    # category: flake8-comprehensions\n  \"EXE\",   # Category: flake8-executable\n  \"F631\",  # assert-tuple\n  \"F632\",  # is-literal\n  \"F634\",  # if-tuple\n  \"F823\",  # undefined-local\n  \"G\",     # flake8-logging-format\n  \"T10\",   # category: flake8-debugger\n]\n\n[tool.pylint.main]\nextension-pkg-allow-list = [\n    \"numpy\",\n    \"qiskit._accelerate\",\n    \"qiskit._qasm2\",\n    \"qiskit._qasm3\",\n    # We can't allow pylint to load qiskit._qasm2 because it's not able to\n    # statically resolve the cyclical load of the exception and it bugs out.\n    \"retworkx\",\n    \"rustworkx\",\n    \"tweedledum\",\n]\nload-plugins = [\"pylint.extensions.docparams\", \"pylint.extensions.docstyle\"]\npy-version = \"3.9\"  # update it when bumping minimum supported python version\n\n[tool.pylint.basic]\ngood-names = [\"a\", \"b\", \"i\", \"j\", \"k\", \"d\", \"n\", \"m\", \"ex\", \"v\", \"w\", \"x\", \"y\", \"z\", \"Run\", \"_\", \"logger\", \"q\", \"c\", \"r\", \"qr\", \"cr\", \"qc\", \"nd\", \"pi\", \"op\", \"b\", \"ar\", \"br\", \"p\", \"cp\", \"ax\", \"dt\", \"__unittest\", \"iSwapGate\", \"mu\"]\nmethod-rgx = \"(([a-z_][a-z0-9_]{2,49})|(assert[A-Z][a-zA-Z0-9]{2,43})|(test_[_a-zA-Z0-9]{2,}))$\"\nvariable-rgx = \"[a-z_][a-z0-9_]{1,30}$\"\n\n[tool.pylint.format]\nmax-line-length = 105  # default 100\n\n[tool.pylint.\"messages control\"]\ndisable = [\n# intentionally disabled:\n    \"spelling\",  # too noisy\n    \"fixme\", # disabled as TODOs would show up as warnings\n    \"protected-access\", # disabled as we don't follow the public vs private convention strictly\n    \"duplicate-code\", # disabled as it is too verbose\n    \"redundant-returns-doc\", # for @abstractmethod, it cannot interpret \"pass\"\n    \"too-many-lines\", \"too-many-branches\", \"too-many-locals\", \"too-many-nested-blocks\", \"too-many-statements\",\n    \"too-many-instance-attributes\", \"too-many-arguments\", \"too-many-public-methods\", \"too-few-public-methods\", \"too-many-ancestors\",\n    \"unnecessary-pass\", # allow for methods with just \"pass\", for clarity\n    \"unnecessary-dunder-call\", # do not want to implement\n    \"no-else-return\",  # relax \"elif\" after a clause with a return\n    \"docstring-first-line-empty\", # relax docstring style\n    \"import-outside-toplevel\", \"import-error\", # overzealous with our optionals/dynamic packages\n    \"nested-min-max\", # this gives false equivalencies if implemented for the current lint version\n    \"consider-using-max-builtin\", \"consider-using-min-builtin\",  # unnecessary stylistic opinion\n# TODO(#9614): these were added in modern Pylint. Decide if we want to enable them. If so,\n#  remove from here and fix the issues. Else, move it above this section and add a comment\n#  with the rationale\n    \"no-member\",  # for dynamically created members\n    \"not-context-manager\",\n    \"unnecessary-lambda-assignment\",  # do not want to implement\n    \"unspecified-encoding\",  # do not want to implement\n]\n\nenable = [\n    \"use-symbolic-message-instead\"\n]\n\n[tool.pylint.spelling]\nspelling-private-dict-file = \".local-spellings\"\n\n[tool.coverage.report]\nexclude_also = [\n    \"def __repr__\",               # Printable epresentational string does not typically execute during testing\n    \"raise NotImplementedError\",  # Abstract methods are not testable\n    \"raise RuntimeError\",         # Exceptions for defensive programming that cannot be tested a head\n    \"if TYPE_CHECKING:\",          # Code that only runs during type checks\n    \"@abstractmethod\",            # Abstract methods are not testable\n    ]\n"
        },
        {
          "name": "qiskit",
          "type": "tree",
          "content": null
        },
        {
          "name": "qiskit_bot.yaml",
          "type": "blob",
          "size": 0.861328125,
          "content": "---\n# We use quotes around users who don`t want a GitHub notification,\n# but whom we still want their name in the Qiskit Bot message so\n# people know they are relevant.\nnotifications:\n    \".*\":\n        - \"`@Qiskit/terra-core`\"\n    \"visualization/pulse_v2\":\n        - \"`@nkanazawa1989`\"\n    \"visualization/timeline\":\n        - \"`@nkanazawa1989`\"\n    \"pulse\":\n        - \"`@nkanazawa1989`\"\n    \"scheduler\":\n        - \"`@nkanazawa1989`\"\n    \"qpy\":\n        - \"`@mtreinish`\"\n        - \"`@nkanazawa1989`\"\n    \"two_qubit_decompose\":\n        - \"`@levbishop`\"\n    \"circuit/library\":\n        - \"`@Cryoris`\"\n        - \"`@ajavadia`\"\n    \"primitives\":\n        - \"`@t-imamichi`\"\n        - \"`@ajavadia`\"\n        - \"`@levbishop`\"\n    \"(?!.*pulse.*)\\\\bvisualization\\\\b\":\n        - \"@enavarro51\"\n    \"^docs/\":\n        - \"@Eric-Arellano\"\n        - \"@abbycross\"\n        - \"@beckykd\"\nalways_notify: true\n"
        },
        {
          "name": "releasenotes",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 1.568359375,
          "content": "# Requirements to develop Terra, and the minimum needed to run its CI.  All\n# optional requirements should go in `requirements-optionals.txt` instead.\n#\n# Version requirements here can be more restrictive than elsewhere, because they\n# never become actual package requirements, but still try to be as relaxed as\n# possible so it's easy to develop multiple packages from the same venv.\n\n# Build Rust directly\nsetuptools\nsetuptools-rust\n\n# Style\nblack[jupyter]~=24.1\n\n\n# Lint\n#\n# These versions are pinned precisely because pylint frequently includes new\n# on-by-default lint failures in new versions, which breaks our CI.\nastroid==3.2.2\npylint==3.2.3\nruff==0.0.267\n\n\n# Tests\ncoverage>=4.4.0\nhypothesis>=4.24.3\nstestr>=2.0.0,!=4.0.0\nddt>=1.2.0,!=1.4.0,!=1.4.3\n# used to get more complete information on Numpy/Scipy and their BLAS usage during\n# CI reporting\nthreadpoolctl\n\n\n# Documentation tooling.\n#\n# This alone is not sufficient to fully build the documentation, because several\n# components of Qiskit use some of its optional dependencies in order to document\n# themselves. These are the requirements that are _only_ required for the docs\n# build, and are not used by Qiskit itself.\n#\n# Be careful when adding new requirements. We want to keep the docs build simple because\n# we only build docs in this repo to generate API references that get consumed by\n# https://github.com/Qiskit/documentation. For example, coordinate adding dependencies\n# like `sphinx-design` to make sure that `Qiskit/documentation` will be able to\n# consume it properly.\nSphinx>=6.0,<7.2\nreno >= 4.1.0\nsphinxcontrib-katex==0.9.9\n"
        },
        {
          "name": "requirements-optional.txt",
          "type": "blob",
          "size": 0.8828125,
          "content": "# Optional dependencies of Qiskit that can (mostly) reliably be installed with\n# `pip`.  This file is still called `requirements-optional.txt` just to match\n# standard pip conventions, even though none of these are required.\n#\n# If updating this, you probably want to update `qiskit.utils.optionals` and\n# maybe `pyproject.toml` too.\n\n# Test-runner enhancements.\nfixtures\ntesttools\n\n# Interactivity.\nipython\nmatplotlib>=3.3\npillow>=4.2.1\npydot\npylatexenc>=1.4\nseaborn>=0.9.0\n\n# Functionality and accelerators.\nqiskit-aer\nqiskit-qasm3-import>=0.5.0\npython-constraint>=1.4\ncvxpy\nscikit-learn>=0.20.0\nz3-solver>=4.7\n# Tweedledum is unmaintained and its existing Mac wheels are unreliable. If you\n# manage to get a working install on a Mac the functionality should still work,\n# but as a convenience this file won't attempt the install itself.\ntweedledum; python_version<'3.11' and platform_system!=\"Darwin\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3056640625,
          "content": "rustworkx>=0.15.0\nnumpy>=1.17,<3\nscipy>=1.5\nsympy>=1.3\ndill>=0.3\npython-dateutil>=2.8.0\nstevedore>=3.0.0\ntyping-extensions\n\n# If updating the version range here, consider updating 'test/qpy_compat/run_tests.sh' to update the\n# list of symengine dependencies used in the cross-version tests.\nsymengine>=0.11,<0.14\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.15234375,
          "content": "[toolchain]\n# Keep in sync with Cargo.toml's `rust-version`.\nchannel = \"1.70\"\ncomponents = [\n  \"cargo\",\n  \"clippy\",\n  \"rust-std\",\n  \"rustc\",\n  \"rustfmt\",\n]\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.9638671875,
          "content": "# This code is part of Qiskit.\n#\n# (C) Copyright IBM 2017.\n#\n# This code is licensed under the Apache License, Version 2.0. You may\n# obtain a copy of this license in the LICENSE.txt file in the root directory\n# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.\n#\n# Any modifications or derivative works of this code must retain this\n# copyright notice, and modified files need to carry a notice indicating\n# that they have been altered from the originals.\n\n\"The Qiskit setup file.\"\n\nimport os\nfrom setuptools import setup\nfrom setuptools_rust import Binding, RustExtension\n\n# Most of this configuration is managed by `pyproject.toml`.  This only includes the extra bits to\n# configure `setuptools-rust`, because we do a little dynamic trick with the debug setting, and we\n# also want an explicit `setup.py` file to exist so we can manually call\n#\n#   python setup.py build_rust --inplace --release\n#\n# to make optimized Rust components even for editable releases, which would otherwise be quite\n# unergonomic to do otherwise.\n\n\n# If RUST_DEBUG is set, force compiling in debug mode. Else, use the default behavior of whether\n# it's an editable installation.\nrust_debug = True if os.getenv(\"RUST_DEBUG\") == \"1\" else None\n\n# If QISKIT_NO_CACHE_GATES is set then don't enable any features while building\n#\n# TODO: before final release we should reverse this by default once the default transpiler pass\n# is all in rust (default to no caching and make caching an opt-in feature). This is opt-out\n# right now to avoid the runtime overhead until we are leveraging the rust gates infrastructure.\nif os.getenv(\"QISKIT_NO_CACHE_GATES\") == \"1\":\n    features = []\nelse:\n    features = [\"cache_pygates\"]\n\n\nsetup(\n    rust_extensions=[\n        RustExtension(\n            \"qiskit._accelerate\",\n            \"crates/pyext/Cargo.toml\",\n            binding=Binding.PyO3,\n            debug=rust_debug,\n            features=features,\n        )\n    ],\n    options={\"bdist_wheel\": {\"py_limited_api\": \"cp39\"}},\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 2.9287109375,
          "content": "[tox]\nminversion = 4.0\nenvlist = py39, py310, py311, py312, py313, lint-incr\nisolated_build = true\n\n[testenv]\n# The colons in the substitutions below let us re-use the `install_command` in\n# places where `tox` doesn't automatically fill in those values.\ninstall_command = pip install -c{toxinidir}/constraints.txt -U {opts:} {packages:}\nsetenv =\n  VIRTUAL_ENV={envdir}\n  LANGUAGE=en_US\n  LC_ALL=en_US.utf-8\n  ARGS=\"-V\"\n  QISKIT_SUPRESS_PACKAGING_WARNINGS=Y\n  QISKIT_TEST_CAPTURE_STREAMS=1\n  QISKIT_PARALLEL=FALSE\npassenv =\n  RUSTUP_TOOLCHAIN\n  RAYON_NUM_THREADS\n  OMP_NUM_THREADS\n  QISKIT_PARALLEL\n  RUST_BACKTRACE\n  SETUPTOOLS_ENABLE_FEATURES\n  QISKIT_TESTS\n  QISKIT_IN_PARALLEL\n  QISKIT_DOCS_GITHUB_BRANCH_NAME\ndeps =\n    -r{toxinidir}/requirements.txt\n    -r{toxinidir}/requirements-dev.txt\ncommands =\n  stestr run {posargs}\n\n[testenv:lint]\nbasepython = python3\n# `pylint` will examine the source code, not the version that would otherwise be\n# installed in `site-packages`, so we use an editable install to make sure the\n# compiled modules are built into a valid place for it to find them.\npackage = editable\nallowlist_externals = cargo\ncommands =\n  black --check {posargs} qiskit test tools setup.py\n  cargo fmt --check\n  ruff check qiskit test tools setup.py\n  cargo clippy -- -D warnings\n  pylint -rn qiskit test tools\n  python {toxinidir}/tools/verify_headers.py qiskit test tools crates\n  python {toxinidir}/tools/find_optional_imports.py\n  python {toxinidir}/tools/find_stray_release_notes.py\n  python {toxinidir}/tools/verify_images.py\n  reno -q lint\n\n[testenv:lint-incr]\nbasepython = python3\nallowlist_externals = git\ncommands =\n  ruff check qiskit test tools setup.py\n  black --check {posargs} qiskit test tools setup.py\n  -git fetch -q https://github.com/Qiskit/qiskit.git :lint_incr_latest\n  python {toxinidir}/tools/pylint_incr.py -rn -j4 -sn --paths :/qiskit/*.py :/test/*.py :/tools/*.py\n  python {toxinidir}/tools/verify_headers.py qiskit test tools crates\n  python {toxinidir}/tools/find_optional_imports.py\n  python {toxinidir}/tools/find_stray_release_notes.py\n  python {toxinidir}/tools/verify_images.py\n  reno -q lint\n\n[testenv:black]\nskip_install = true\ndeps =\n    -r requirements-dev.txt\ncommands = black {posargs} qiskit test tools setup.py\n\n[testenv:coverage]\nbasepython = python3\nsetenv =\n  {[testenv]setenv}\n  PYTHON=coverage3 run --source qiskit --parallel-mode\ncommands_pre =\n  {[testenv]install_command} -r{toxinidir}/requirements-optional.txt\ncommands =\n  stestr run {posargs}\n  coverage3 combine\n  coverage3 report\n\n[testenv:docs]\nbasepython = python3\nsetenv =\n  {[testenv]setenv}\n  RUST_DEBUG=1  # Faster to compile.\ncommands_pre =\n  {[testenv]install_command} -r{toxinidir}/requirements-optional.txt\ncommands =\n  sphinx-build -W -j auto -T --keep-going -b html docs/ docs/_build/html {posargs}\n\n[testenv:docs-clean]\nskip_install = true\ndeps =\nallowlist_externals =\n  rm\ncommands =\n  rm -rf {toxinidir}/docs/stubs/ {toxinidir}/docs/_build {toxinidir}/docs/locale\n"
        }
      ]
    }
  ]
}