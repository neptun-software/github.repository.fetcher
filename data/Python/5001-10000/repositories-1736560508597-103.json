{
  "metadata": {
    "timestamp": 1736560508597,
    "page": 103,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SWivid/F5-TTS",
      "stars": 8829,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.12890625,
          "content": "# Customed\n.vscode/\ntests/\nruns/\ndata/\nckpts/\nwandb/\nresults/\n\n\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1123046875,
          "content": "[submodule \"src/third_party/BigVGAN\"]\n\tpath = src/third_party/BigVGAN\n\turl = https://github.com/NVIDIA/BigVGAN.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.322265625,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.7.0\n    hooks:\n      # Run the linter.\n      - id: ruff\n        args: [--fix]\n      # Run the formatter.\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n      - id: check-yaml\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.794921875,
          "content": "FROM pytorch/pytorch:2.4.0-cuda12.4-cudnn9-devel\n\nUSER root\n\nARG DEBIAN_FRONTEND=noninteractive\n\nLABEL github_repo=\"https://github.com/SWivid/F5-TTS\"\n\nRUN set -x \\\n    && apt-get update \\\n    && apt-get -y install wget curl man git less openssl libssl-dev unzip unar build-essential aria2 tmux vim \\\n    && apt-get install -y openssh-server sox libsox-fmt-all libsox-fmt-mp3 libsndfile1-dev ffmpeg \\\n    && apt-get install -y librdmacm1 libibumad3 librdmacm-dev libibverbs1 libibverbs-dev ibverbs-utils ibverbs-providers \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n    \nWORKDIR /workspace\n\nRUN git clone https://github.com/SWivid/F5-TTS.git \\\n    && cd F5-TTS \\\n    && git submodule update --init --recursive \\\n    && pip install -e . --no-cache-dir\n\nENV SHELL=/bin/bash\n\nWORKDIR /workspace/F5-TTS\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2024 Yushen CHEN\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.541015625,
          "content": "# F5-TTS: A Fairytaler that Fakes Fluent and Faithful Speech with Flow Matching\n\n[![python](https://img.shields.io/badge/Python-3.10-brightgreen)](https://github.com/SWivid/F5-TTS)\n[![arXiv](https://img.shields.io/badge/arXiv-2410.06885-b31b1b.svg?logo=arXiv)](https://arxiv.org/abs/2410.06885)\n[![demo](https://img.shields.io/badge/GitHub-Demo%20page-orange.svg)](https://swivid.github.io/F5-TTS/)\n[![hfspace](https://img.shields.io/badge/ðŸ¤—-Space%20demo-yellow)](https://huggingface.co/spaces/mrfakename/E2-F5-TTS)\n[![msspace](https://img.shields.io/badge/ðŸ¤–-Space%20demo-blue)](https://modelscope.cn/studios/modelscope/E2-F5-TTS)\n[![lab](https://img.shields.io/badge/X--LANCE-Lab-grey?labelColor=lightgrey)](https://x-lance.sjtu.edu.cn/)\n[![lab](https://img.shields.io/badge/Peng%20Cheng-Lab-grey?labelColor=lightgrey)](https://www.pcl.ac.cn)\n<!-- <img src=\"https://github.com/user-attachments/assets/12d7749c-071a-427c-81bf-b87b91def670\" alt=\"Watermark\" style=\"width: 40px; height: auto\"> -->\n\n**F5-TTS**: Diffusion Transformer with ConvNeXt V2, faster trained and inference.\n\n**E2 TTS**: Flat-UNet Transformer, closest reproduction from [paper](https://arxiv.org/abs/2406.18009).\n\n**Sway Sampling**: Inference-time flow step sampling strategy, greatly improves performance\n\n### Thanks to all the contributors !\n\n## News\n- **2024/10/08**: F5-TTS & E2 TTS base models on [ðŸ¤— Hugging Face](https://huggingface.co/SWivid/F5-TTS), [ðŸ¤– Model Scope](https://www.modelscope.cn/models/SWivid/F5-TTS_Emilia-ZH-EN), [ðŸŸ£ Wisemodel](https://wisemodel.cn/models/SJTU_X-LANCE/F5-TTS_Emilia-ZH-EN).\n\n## Installation\n\n```bash\n# Create a python 3.10 conda env (you could also use virtualenv)\nconda create -n f5-tts python=3.10\nconda activate f5-tts\n\n# NVIDIA GPU: install pytorch with your CUDA version, e.g.\npip install torch==2.3.0+cu118 torchaudio==2.3.0+cu118 --extra-index-url https://download.pytorch.org/whl/cu118\n\n# AMD GPU: install pytorch with your ROCm version, e.g.\npip install torch==2.5.1+rocm6.2 torchaudio==2.5.1+rocm6.2 --extra-index-url https://download.pytorch.org/whl/rocm6.2\n```\n\nThen you can choose from a few options below:\n\n### 1. As a pip package (if just for inference)\n\n```bash\npip install git+https://github.com/SWivid/F5-TTS.git\n```\n\n### 2. Local editable (if also do training, finetuning)\n\n```bash\ngit clone https://github.com/SWivid/F5-TTS.git\ncd F5-TTS\n# git submodule update --init --recursive  # (optional, if need bigvgan)\npip install -e .\n```\n\n### 3. Docker usage\n```bash\n# Build from Dockerfile\ndocker build -t f5tts:v1 .\n\n# Or pull from GitHub Container Registry\ndocker pull ghcr.io/swivid/f5-tts:main\n```\n\n\n## Inference\n\n### 1. Gradio App\n\nCurrently supported features:\n\n- Basic TTS with Chunk Inference\n- Multi-Style / Multi-Speaker Generation\n- Voice Chat powered by Qwen2.5-3B-Instruct\n- [Custom inference with more language support](src/f5_tts/infer/SHARED.md)\n\n```bash\n# Launch a Gradio app (web interface)\nf5-tts_infer-gradio\n\n# Specify the port/host\nf5-tts_infer-gradio --port 7860 --host 0.0.0.0\n\n# Launch a share link\nf5-tts_infer-gradio --share\n```\n\n### 2. CLI Inference\n\n```bash\n# Run with flags\n# Leave --ref_text \"\" will have ASR model transcribe (extra GPU memory usage)\nf5-tts_infer-cli \\\n--model \"F5-TTS\" \\\n--ref_audio \"ref_audio.wav\" \\\n--ref_text \"The content, subtitle or transcription of reference audio.\" \\\n--gen_text \"Some text you want TTS model generate for you.\"\n\n# Run with default setting. src/f5_tts/infer/examples/basic/basic.toml\nf5-tts_infer-cli\n# Or with your own .toml file\nf5-tts_infer-cli -c custom.toml\n\n# Multi voice. See src/f5_tts/infer/README.md\nf5-tts_infer-cli -c src/f5_tts/infer/examples/multi/story.toml\n```\n\n### 3. More instructions\n\n- In order to have better generation results, take a moment to read [detailed guidance](src/f5_tts/infer).\n- The [Issues](https://github.com/SWivid/F5-TTS/issues?q=is%3Aissue) are very useful, please try to find the solution by properly searching the keywords of problem encountered. If no answer found, then feel free to open an issue.\n\n\n## Training\n\n### 1. Gradio App\n\nRead [training & finetuning guidance](src/f5_tts/train) for more instructions.\n\n```bash\n# Quick start with Gradio web interface\nf5-tts_finetune-gradio\n```\n\n\n## [Evaluation](src/f5_tts/eval)\n\n\n## Development\n\nUse pre-commit to ensure code quality (will run linters and formatters automatically)\n\n```bash\npip install pre-commit\npre-commit install\n```\n\nWhen making a pull request, before each commit, run: \n\n```bash\npre-commit run --all-files\n```\n\nNote: Some model components have linting exceptions for E722 to accommodate tensor notation\n\n\n## Acknowledgements\n\n- [E2-TTS](https://arxiv.org/abs/2406.18009) brilliant work, simple and effective\n- [Emilia](https://arxiv.org/abs/2407.05361), [WenetSpeech4TTS](https://arxiv.org/abs/2406.05763), [LibriTTS](https://arxiv.org/abs/1904.02882), [LJSpeech](https://keithito.com/LJ-Speech-Dataset/) valuable datasets\n- [lucidrains](https://github.com/lucidrains) initial CFM structure with also [bfs18](https://github.com/bfs18) for discussion\n- [SD3](https://arxiv.org/abs/2403.03206) & [Hugging Face diffusers](https://github.com/huggingface/diffusers) DiT and MMDiT code structure\n- [torchdiffeq](https://github.com/rtqichen/torchdiffeq) as ODE solver, [Vocos](https://huggingface.co/charactr/vocos-mel-24khz) and [BigVGAN](https://github.com/NVIDIA/BigVGAN) as vocoder\n- [FunASR](https://github.com/modelscope/FunASR), [faster-whisper](https://github.com/SYSTRAN/faster-whisper), [UniSpeech](https://github.com/microsoft/UniSpeech), [SpeechMOS](https://github.com/tarepan/SpeechMOS) for evaluation tools\n- [ctc-forced-aligner](https://github.com/MahmoudAshraf97/ctc-forced-aligner) for speech edit test\n- [mrfakename](https://x.com/realmrfakename) huggingface space demo ~\n- [f5-tts-mlx](https://github.com/lucasnewman/f5-tts-mlx/tree/main) Implementation with MLX framework by [Lucas Newman](https://github.com/lucasnewman)\n- [F5-TTS-ONNX](https://github.com/DakeQQ/F5-TTS-ONNX) ONNX Runtime version by [DakeQQ](https://github.com/DakeQQ)\n\n## Citation\nIf our work and codebase is useful for you, please cite as:\n```\n@article{chen-etal-2024-f5tts,\n      title={F5-TTS: A Fairytaler that Fakes Fluent and Faithful Speech with Flow Matching}, \n      author={Yushen Chen and Zhikang Niu and Ziyang Ma and Keqi Deng and Chunhui Wang and Jian Zhao and Kai Yu and Xie Chen},\n      journal={arXiv preprint arXiv:2410.06885},\n      year={2024},\n}\n```\n## License\n\nOur code is released under MIT License. The pre-trained models are licensed under the CC-BY-NC license due to the training data Emilia, which is an in-the-wild dataset. Sorry for any inconvenience this may cause.\n"
        },
        {
          "name": "ckpts",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.4697265625,
          "content": "[build-system]\nrequires = [\"setuptools >= 61.0\", \"setuptools-scm>=8.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"f5-tts\"\nversion = \"0.3.4\"\ndescription = \"F5-TTS: A Fairytaler that Fakes Fluent and Faithful Speech with Flow Matching\"\nreadme = \"README.md\"\nlicense = {text = \"MIT License\"}\nclassifiers = [\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3\",\n]\ndependencies = [\n    \"accelerate>=0.33.0\",\n    \"bitsandbytes>0.37.0; platform_machine != 'arm64' and platform_system != 'Darwin'\",\n    \"cached_path\",\n    \"click\",\n    \"datasets\",\n    \"ema_pytorch>=0.5.2\",\n    \"gradio>=3.45.2\",\n    \"hydra-core>=1.3.0\",\n    \"jieba\",\n    \"librosa\",\n    \"matplotlib\",\n    \"numpy<=1.26.4\",\n    \"pydub\",\n    \"pypinyin\",\n    \"safetensors\",\n    \"soundfile\",\n    \"tomli\",\n    \"torch>=2.0.0\",\n    \"torchaudio>=2.0.0\",\n    \"torchdiffeq\",\n    \"tqdm>=4.65.0\",\n    \"transformers\",\n    \"transformers_stream_generator\",\n    \"vocos\",\n    \"wandb\",\n    \"x_transformers>=1.31.14\",\n]\n\n[project.optional-dependencies]\neval = [\n    \"faster_whisper==0.10.1\",\n    \"funasr\",\n    \"jiwer\",\n    \"modelscope\",\n    \"zhconv\",\n    \"zhon\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/SWivid/F5-TTS\"\n\n[project.scripts]\n\"f5-tts_infer-cli\" = \"f5_tts.infer.infer_cli:main\"\n\"f5-tts_infer-gradio\" = \"f5_tts.infer.infer_gradio:main\"\n\"f5-tts_finetune-cli\" = \"f5_tts.train.finetune_cli:main\"\n\"f5-tts_finetune-gradio\" = \"f5_tts.train.finetune_gradio:main\"\n"
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.1923828125,
          "content": "line-length = 120\ntarget-version = \"py310\"\n\n[lint]\n# Only ignore variables with names starting with \"_\".\ndummy-variable-rgx = \"^_.*$\"\n\n[lint.isort]\nforce-single-line = true\nlines-after-imports = 2\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}