{
  "metadata": {
    "timestamp": 1736560503086,
    "page": 97,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "seleniumbase/SeleniumBase",
      "stars": 8897,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8154296875,
          "content": "# Compiled Python Bytecode\n*.py[cod]\n\n# Packages\n*.egg\n*.egg-info\n.eggs\neggs\ndevelop-eggs\nbin\nbuild\ndist\nlib\nlib64\nparts\nsdist\nvar\n.installed.cfg\n__pycache__\n\n# Python3 pyvenv\n.env\n.venv\nenv/\nvenv/\nENV/\nVENV/\nenv.bak/\nvenv.bak/\n.sbase\n.sbase*\nseleniumbase_env\nseleniumbase_venv\nsbase_env\nsbase_venv\npyvenv.cfg\n.Python\ninclude\npip-delete-this-directory.txt\npip-selfcheck.json\nipython.1.gz\nnosetests.1\n.noseids\n\n# Installer logs\npip-log.txt\n.swp\n\n# Unit test / coverage reports\n.coverage\n.tox\ncoverage.xml\nnosetests.xml\n\n# py.test\n.cache/*\n.pytest_cache/*\n.pytest_config\n\n# Azure Pipelines\njunit\ntest-results.xml\n\n# Developer\n.idea\n.project\n.pydevproject\n.vscode\n\n# Web Drivers\nchromedriver\ngeckodriver\nmsedgedriver\noperadriver\nuc_driver\nMicrosoftWebDriver.exe\nheadless_ie_selenium.exe\nIEDriverServer.exe\nchromedriver.exe\ngeckodriver.exe\nmsedgedriver.exe\noperadriver.exe\nuc_driver.exe\n\n# msedgedriver requirements\nlibc++.dylib\n\n# Logs\nlogs\nlatest_logs\nlog_archives\narchived_logs\ngeckodriver.log\nghostdriver.log\npytestdebug.log\n\n# Reports\nreports/*.xml\nlatest_report\nreport_archives\narchived_reports\nhtml_report.html\nlast_report.html\nreport.html\nreport.xml\n\n# Dashboard\ndashboard.html\ndashboard.json\ndash_pie.json\ndashboard.lock\n\n# Allure Reports / Results\nallure_report\nallure-report\nallure_results\nallure-results\n\n# Charts\nsaved_charts\n\n# Presentations\nsaved_presentations\n\n# Tours\ntours_exported\n\n# Images\nimages_exported\n\n# Cookies\nsaved_cookies\n\n# Recordings\nrecordings\n\n# Automated Visual Testing\nvisual_baseline\n\n# MkDocs WebSite Generator\nsite/*\nmkdocs_build/*.md\nmkdocs_build/*/*.md\nmkdocs_build/*/*/*.md\nmkdocs_build/*/*/*/*.md\n\n# macOS system files\n.DS_Store\n\n# Other\nselenium-server-standalone.jar\nproxy.zip\nproxy.lock\nverbose_hub_server.dat\nverbose_node_server.dat\nip_of_grid_hub.dat\ndownloaded_files\narchived_files\nassets\ntemp\ntemp_*/\nnode_modules\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.3369140625,
          "content": "<h2><img src=\"https://seleniumbase.github.io/img/logo6.png\" title=\"SeleniumBase\" width=\"32\" /> CHANGELOG</h2>\n\n## See: [SeleniumBase/releases](https://github.com/seleniumbase/SeleniumBase/releases) 🗂️ 📋\n\n### (For CDP updates, see the [CDP Mode docs](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/cdp_mode/ReadMe.md))\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.015625,
          "content": "seleniumbase.dev"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.5810546875,
          "content": "# Code of conduct\n\n(SeleniumBase uses a modified version of [Flutter's Code of conduct](https://github.com/flutter/flutter/blob/master/CODE_OF_CONDUCT.md))\n\nThe SeleniumBase project expects SeleniumBase's contributors to act professionally and respectfully. SeleniumBase contributors are expected to maintain the safety and dignity of SeleniumBase's social environments (such as GitHub and Gitter).\n\nSpecifically:\n\n* Respect people, their identities, their culture, and their work.\n* Be kind. Be courteous. Be welcoming.\n* Listen. Consider and acknowledge people's points before responding.\n\nShould you experience anything that makes you feel unwelcome in SeleniumBase's community, please [contact us](https://gitter.im/seleniumbase/SeleniumBase).\n\nThe SeleniumBase project will not tolerate harassment in SeleniumBase's community, even outside of SeleniumBase's public communication channels.\n\n## Questions\n\nIt's always OK to ask questions. Seleniumbase is a big project, and we don't expect everyone to know everything about everything.\n\n![\"I try not to make fun of people for admitting they don't know things, because for each thing 'everyone knows' by the time they're adults, every day there are, on average, 10,000 people in the US hearing about it for the first time. If I make fun of people, I train them not to tell me when they have those moments. And I miss out on the fun.\" \"Diet coke and mentos thing? What's that?\" \"Oh, man! We're going to the grocery store.\" \"Why?\" \"You're one of today's lucky 10,000.\"](https://imgs.xkcd.com/comics/ten_thousand.png)\n\nSource: _[xkcd, May 2012](https://xkcd.com/1053/)_\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.64453125,
          "content": "# Contributing to SeleniumBase\n\nThe SeleniumBase project welcomes meaningful contributions.\n\nThere are many ways to help:\n\n## Bug Reports\n\nWhen opening a new issue or commenting on an existing issue, please make sure to provide concise, detailed instructions on how to reproduce the issue. If the issue can't be reproduced, it will be closed. Clearly describe the results you're seeing, and the results you're expecting.\n\n## Feature Requests\n\nIf you find that SeleniumBase is missing something, feel free to open an issue with details describing what feature(s) you'd like added or changed.  \n\n## Documentation\n\nSeleniumBase is a big software project, and documentation is key to\nunderstanding how it works and how to use it properly. If you feel that important documentation is missing, please let us know, or submit a pull request.\n\n## Code Contributions\n\nThe SeleniumBase project welcomes meaningful contributions. Given the complexity of the project, it may be easier to open an issue for a change you want made than to try implementing the change yourself.\n\n## (A Note on Style Guide Rules)\n\n[flake8](https://github.com/PyCQA/flake8) is the law of the land. The only flake8 rule ignored is [W503](https://github.com/grantmcconnaughey/Flake8Rules/blob/master/_rules/W503.md). For more details on why W503 should be ignored, see [this explanation](https://peps.python.org/pep-0008/#should-a-line-break-before-or-after-a-binary-operator), or [this shorter explanation](https://github.com/PyCQA/flake8/issues/494) by Python expert [Anthony Sottile](https://github.com/asottile).\n\n--------\n\nFor questions about this document, reach out to [Michael Mintz](https://github.com/mdmintz).\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.666015625,
          "content": "# SeleniumBase Docker Image\nFROM ubuntu:22.04\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV PYTHONUNBUFFERED=1\nENV PYTHONIOENCODING=UTF-8\n\n#======================\n# Locale Configuration\n#======================\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends tzdata locales\nRUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen\nENV TZ=America/New_York\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nENV LANG=en_US.UTF-8\nENV LANGUAGE=en_US:en\nENV LC_ALL=en_US.UTF-8\nRUN echo \"LC_ALL=en_US.UTF-8\" >> /etc/environment\nRUN echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen\nRUN echo \"LANG=en_US.UTF-8\" > /etc/locale.conf\nRUN locale-gen en_US.UTF-8\n\n#======================\n# Install Common Fonts\n#======================\nRUN apt-get update\nRUN apt-get install -y \\\n    fonts-liberation \\\n    fonts-liberation2 \\\n    fonts-font-awesome \\\n    fonts-ubuntu \\\n    fonts-terminus \\\n    fonts-powerline \\\n    fonts-open-sans \\\n    fonts-mononoki \\\n    fonts-roboto \\\n    fonts-lato\n\n#============================\n# Install Linux Dependencies\n#============================\nRUN apt-get update\nRUN apt-get install -y \\\n    libasound2 \\\n    libatk-bridge2.0-0 \\\n    libatk1.0-0 \\\n    libatspi2.0-0 \\\n    libcups2 \\\n    libdbus-1-3 \\\n    libdrm2 \\\n    libgbm1 \\\n    libgtk-3-0 \\\n    libnspr4 \\\n    libnss3 \\\n    libu2f-udev \\\n    libvulkan1 \\\n    libwayland-client0 \\\n    libxcomposite1 \\\n    libxdamage1 \\\n    libxfixes3 \\\n    libxkbcommon0 \\\n    libxrandr2\n\n#==========================\n# Install useful utilities\n#==========================\nRUN apt-get update\nRUN apt-get install -y xdg-utils ca-certificates\n\n#=================================\n# Install Bash Command Line Tools\n#=================================\nRUN apt-get update\nRUN apt-get -qy --no-install-recommends install \\\n    curl \\\n    sudo \\\n    unzip \\\n    vim \\\n    wget \\\n    xvfb\n\n#================\n# Install Chrome\n#================\nRUN apt-get update\nRUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nRUN apt-get install -y ./google-chrome-stable_current_amd64.deb\nRUN rm ./google-chrome-stable_current_amd64.deb\n\n#================\n# Install Python\n#================\nRUN apt-get update\nRUN apt-get install -y python3 python3-pip python3-setuptools python3-dev python3-tk\nRUN alias python=python3\nRUN echo \"alias python=python3\" >> ~/.bashrc\nRUN apt-get -qy --no-install-recommends install python3.10\nRUN rm /usr/bin/python3\nRUN ln -s python3.10 /usr/bin/python3\n\n#===============\n# Cleanup Lists\n#===============\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/*\n\n#=====================\n# Set up SeleniumBase\n#=====================\nCOPY sbase /SeleniumBase/sbase/\nCOPY seleniumbase /SeleniumBase/seleniumbase/\nCOPY examples /SeleniumBase/examples/\nCOPY integrations /SeleniumBase/integrations/\nCOPY requirements.txt /SeleniumBase/requirements.txt\nCOPY setup.py /SeleniumBase/setup.py\nCOPY MANIFEST.in /SeleniumBase/MANIFEST.in\nCOPY pytest.ini /SeleniumBase/pytest.ini\nCOPY setup.cfg /SeleniumBase/setup.cfg\nCOPY virtualenv_install.sh /SeleniumBase/virtualenv_install.sh\nRUN find . -name '*.pyc' -delete\nRUN pip install --upgrade pip setuptools wheel\nRUN cd /SeleniumBase && ls && pip install -r requirements.txt --upgrade\nRUN cd /SeleniumBase && pip install .\nRUN pip install pyautogui\n\n#=======================\n# Download chromedriver\n#=======================\nRUN seleniumbase get chromedriver --path\n\n#==========================================\n# Create entrypoint and grab example tests\n#==========================================\nCOPY integrations/docker/docker-entrypoint.sh /\nCOPY integrations/docker/run_docker_test_in_chrome.sh /\nRUN chmod +x *.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2025 Michael Mintz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.693359375,
          "content": "include README.md\ninclude pytest.ini\ninclude setup.cfg\ninclude .gitignore\ninclude requirements.txt\ninclude install.sh\ninclude install.bat\ninclude virtualenv_install.sh\ninclude virtualenv_install.bat\ninclude seleniumbase/core/create_db_tables.sql\ninclude seleniumbase/extensions/*.zip\ninclude seleniumbase/utilities/selenium_grid/grid-hub\ninclude seleniumbase/utilities/selenium_grid/grid-node\ninclude seleniumbase/utilities/selenium_grid/font_color\ninclude seleniumbase/utilities/selenium_grid/start-grid-hub.bat\ninclude seleniumbase/utilities/selenium_grid/register-grid-node.bat\ninclude seleniumbase/utilities/selenium_grid/start-grid-hub.sh\ninclude seleniumbase/utilities/selenium_grid/register-grid-node.sh"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 75.96484375,
          "content": "<!-- SeleniumBase Docs -->\n\n<meta property=\"og:site_name\" content=\"SeleniumBase\">\n<meta property=\"og:title\" content=\"SeleniumBase: Python Web Automation and E2E Testing\" />\n<meta property=\"og:description\" content=\"Fast, easy, and reliable Web/UI testing with Python.\" />\n<meta property=\"og:keywords\" content=\"Python, pytest, selenium, webdriver, testing, automation, seleniumbase, framework, dashboard, recorder, reports, screenshots\">\n<meta property=\"og:image\" content=\"https://seleniumbase.github.io/cdn/img/mac_sb_logo_5b.png\" />\n<link rel=\"icon\" href=\"https://seleniumbase.github.io/img/logo7.png\" />\n\n<h1>SeleniumBase</h1>\n\n<p align=\"center\"><a href=\"https://github.com/seleniumbase/SeleniumBase/\"><img src=\"https://seleniumbase.github.io/cdn/img/super_logo_sb3.png\" alt=\"SeleniumBase\" title=\"SeleniumBase\" width=\"350\" /></a></p>\n\n\n<p align=\"center\" class=\"hero__title\"><b>All-in-one Browser Automation Framework:<br />Web Crawling / Testing / Scraping / Stealth</b></p>\n\n<p align=\"center\"><a href=\"https://pypi.python.org/pypi/seleniumbase\" target=\"_blank\"><img src=\"https://img.shields.io/pypi/v/seleniumbase.svg?color=3399EE\" alt=\"PyPI version\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/releases\" target=\"_blank\"><img src=\"https://img.shields.io/github/v/release/seleniumbase/SeleniumBase.svg?color=22AAEE\" alt=\"GitHub version\" /></a> <a href=\"https://seleniumbase.io\"><img src=\"https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg\" alt=\"SeleniumBase Docs\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/actions\" target=\"_blank\"><img src=\"https://github.com/seleniumbase/SeleniumBase/workflows/CI%20build/badge.svg\" alt=\"SeleniumBase GitHub Actions\" /></a> <a href=\"https://discord.gg/EdhQTn3EyE\" target=\"_blank\"><img src=\"https://img.shields.io/badge/join-discord-infomational\" alt=\"Join the SeleniumBase chat on Discord\"/></a></p>\n\n<p align=\"center\">\n<a href=\"#python_installation\">🚀 Start</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/features_list.md\">🏰 Features</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/customizing_test_runs.md\">🎛️ Options</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/ReadMe.md\">📚 Examples</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/console_scripts/ReadMe.md\">🌠 Scripts</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/mobile_testing.md\">📱 Mobile</a>\n<br />\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/method_summary.md\">📘 APIs</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/syntax_formats.md\"> 🔠 Formats</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/recorder_mode.md\">🔴 Recorder</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/example_logs/ReadMe.md\">📊 Dashboard</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/locale_codes.md\">🗾 Locales</a> |\n<a href=\"https://seleniumbase.io/devices/?url=seleniumbase.com\">💻 Farm</a>\n<br />\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/commander.md\">🎖️ GUI</a> |\n<a href=\"https://seleniumbase.io/demo_page\">📰 TestPage</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/uc_mode.md\">👤 UC Mode</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/cdp_mode/ReadMe.md\">🐙 CDP Mode</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/chart_maker/ReadMe.md\">📶 Charts</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md\">🌐 Grid</a>\n<br />\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/how_it_works.md\">👁️ How</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/tree/master/examples/migration/raw_selenium\">🚝 Migrate</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/case_plans.md\">🗂️ CasePlans</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/tree/master/examples/boilerplates\">♻️ Template</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/master_qa/ReadMe.md\">🧬 Hybrid</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/tour_examples/ReadMe.md\">🚎 Tours</a>\n<br />\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/github/workflows/ReadMe.md\">🤖 CI/CD</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/js_package_manager.md\">🕹️ JSMgr</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/translations.md\">🌏 Translator</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/presenter/ReadMe.md\">🎞️ Presenter</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/dialog_boxes/ReadMe.md\">🛂 Dialog</a> |\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/visual_testing/ReadMe.md\">🖼️ Visual</a>\n<br />\n</p>\n\n<p>SeleniumBase is the professional toolkit for web automation activities. Built for testing websites, bypassing CAPTCHAs, enhancing productivity, completing tasks, and scaling your business.</p>\n\n--------\n\n📚 Learn from [**over 200 examples** in the **SeleniumBase/examples/** folder](https://github.com/seleniumbase/SeleniumBase/tree/master/examples).\n\n🐙 Note that <a translate=\"no\" href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/uc_mode.md\"><b>UC Mode</b></a> / <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/cdp_mode/ReadMe.md\"><b>CDP Mode</b></a> (Stealth Mode) have their own ReadMe files.\n\nℹ️ Most scripts run with raw <code translate=\"no\"><b>python</b></code>, although some scripts use <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/syntax_formats.md\">Syntax Formats</a> that expect <a href=\"https://docs.pytest.org/en/latest/how-to/usage.html\" translate=\"no\"><b>pytest</b></a> (a Python unit-testing framework included with SeleniumBase that can discover, collect, and run tests automatically).\n\n--------\n\n<p align=\"left\">📗 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/raw_google.py\">raw_google.py</a>, which performs a Google search:</p>\n\n```python\nfrom seleniumbase import SB\n\nwith SB(test=True) as sb:\n    sb.open(\"https://google.com/ncr\")\n    sb.type('[title=\"Search\"]', \"SeleniumBase GitHub page\\n\")\n    sb.click('[href*=\"github.com/seleniumbase/\"]')\n    sb.save_screenshot_to_logs()  # ./latest_logs/\n    print(sb.get_page_title())\n```\n\n> `python raw_google.py`\n\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/raw_google.py\"><img src=\"https://seleniumbase.github.io/cdn/gif/google_search.gif\" alt=\"SeleniumBase Test\" title=\"SeleniumBase Test\" width=\"420\" /></a>\n\n--------\n\n<p align=\"left\">📗 Here's an example of bypassing Cloudflare's challenge page: <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/cdp_mode/raw_gitlab.py\">SeleniumBase/examples/cdp_mode/raw_gitlab.py</a></p>\n\n```python\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, locale_code=\"en\") as sb:\n    url = \"https://gitlab.com/users/sign_in\"\n    sb.activate_cdp_mode(url)\n    sb.uc_gui_click_captcha()\n    sb.sleep(2)\n```\n\n<img src=\"https://seleniumbase.github.io/other/cf_sec.jpg\" title=\"SeleniumBase\" width=\"332\"> <img src=\"https://seleniumbase.github.io/other/gitlab_bypass.png\" title=\"SeleniumBase\" width=\"288\">\n\n--------\n\n<p align=\"left\">📗 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_get_swag.py\">test_get_swag.py</a>, which tests an e-commerce site:</p>\n\n```python\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)  # Call pytest\n\nclass MyTestClass(BaseCase):\n    def test_swag_labs(self):\n        self.open(\"https://www.saucedemo.com\")\n        self.type(\"#user-name\", \"standard_user\")\n        self.type(\"#password\", \"secret_sauce\\n\")\n        self.assert_element(\"div.inventory_list\")\n        self.click('button[name*=\"backpack\"]')\n        self.click(\"#shopping_cart_container a\")\n        self.assert_text(\"Backpack\", \"div.cart_item\")\n        self.click(\"button#checkout\")\n        self.type(\"input#first-name\", \"SeleniumBase\")\n        self.type(\"input#last-name\", \"Automation\")\n        self.type(\"input#postal-code\", \"77123\")\n        self.click(\"input#continue\")\n        self.click(\"button#finish\")\n        self.assert_text(\"Thank you for your order!\")\n```\n\n> `pytest test_get_swag.py`\n\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_get_swag.py\"><img src=\"https://seleniumbase.github.io/cdn/gif/fast_swag_2.gif\" alt=\"SeleniumBase Test\" title=\"SeleniumBase Test\" width=\"480\" /></a>\n\n> (The default browser is ``--chrome`` if not set.)\n\n--------\n\n<p align=\"left\">📗 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_coffee_cart.py\" target=\"_blank\">test_coffee_cart.py</a>, which verifies an e-commerce site:</p>\n\n```bash\npytest test_coffee_cart.py --demo\n```\n\n<p align=\"left\"><a href=\"https://seleniumbase.io/coffee/\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/cdn/gif/coffee_cart.gif\" width=\"480\" alt=\"SeleniumBase Coffee Cart Test\" title=\"SeleniumBase Coffee Cart Test\" /></a></p>\n\n> <p>(<code translate=\"no\">--demo</code> mode slows down tests and highlights actions)</p>\n\n--------\n\n<a id=\"multiple_examples\"></a>\n\n<p align=\"left\">📗 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_demo_site.py\" target=\"_blank\">test_demo_site.py</a>, which covers several actions:</p>\n\n```bash\npytest test_demo_site.py\n```\n\n<p align=\"left\"><a href=\"https://seleniumbase.io/demo_page\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/cdn/gif/demo_page_5.gif\" width=\"480\" alt=\"SeleniumBase Example\" title=\"SeleniumBase Example\" /></a></p>\n\n> Easy to type, click, select, toggle, drag & drop, and more.\n\n(For more examples, see the <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/ReadMe.md\">SeleniumBase/examples/</a> folder.)\n\n--------\n\n<p align=\"left\"><a href=\"https://github.com/seleniumbase/SeleniumBase/\"><img src=\"https://seleniumbase.github.io/cdn/img/super_logo_sb3.png\" alt=\"SeleniumBase\" title=\"SeleniumBase\" width=\"232\" /></a></p>\n\n<blockquote>\n<p dir=\"auto\"><strong>Explore the README:</strong></p>\n<ul dir=\"auto\">\n<li><a href=\"#install_seleniumbase\"   ><strong>Get Started / Installation</strong></a></li>\n<li><a href=\"#basic_example_and_usage\"><strong>Basic Example / Usage</strong></a></li>\n<li><a href=\"#common_methods\"         ><strong>Common Test Methods</strong></a></li>\n<li><a href=\"#fun_facts\"              ><strong>Fun Facts / Learn More</strong></a></li>\n<li><a href=\"#demo_mode_and_debugging\"><strong>Demo Mode / Debugging</strong></a></li>\n<li><a href=\"#command_line_options\"   ><strong>Command-line Options</strong></a></li>\n<li><a href=\"#directory_configuration\"><strong>Directory Configuration</strong></a></li>\n<li><a href=\"#seleniumbase_dashboard\" ><strong>SeleniumBase Dashboard</strong></a></li>\n<li><a href=\"#creating_visual_reports\"><strong>Generating Test Reports</strong></a></li>\n</ul>\n</blockquote>\n\n--------\n\n<details>\n<summary> ▶️ How is <b>SeleniumBase</b> different from raw Selenium? (<b>click to expand</b>)</summary>\n<div>\n\n<p>💡 SeleniumBase is a Python framework for browser automation and testing. SeleniumBase uses <a href=\"https://www.w3.org/TR/webdriver2/#endpoints\" target=\"_blank\">Selenium/WebDriver</a> APIs and incorporates test-runners such as <code translate=\"no\">pytest</code>, <code translate=\"no\">pynose</code>, and <code translate=\"no\">behave</code> to provide organized structure, test discovery, test execution, test state (<i>eg. passed, failed, or skipped</i>), and command-line options for changing default settings (<i>eg. browser selection</i>). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line.</p>\n\n<p>💡 SeleniumBase's driver manager gives you more control over automatic driver downloads. (Use <code translate=\"no\">--driver-version=VER</code> with your <code translate=\"no\">pytest</code> run command to specify the version.) By default, SeleniumBase will download a driver version that matches your major browser version if not set.</p>\n\n<p>💡 SeleniumBase automatically detects between CSS Selectors and XPath, which means you don't need to specify the type of selector in your commands (<i>but optionally you could</i>).</p>\n\n<p>💡 SeleniumBase methods often perform multiple actions in a single method call. For example, <code translate=\"no\">self.type(selector, text)</code> does the following:<br />1. Waits for the element to be visible.<br />2. Waits for the element to be interactive.<br />3. Clears the text field.<br />4. Types in the new text.<br />5. Presses Enter/Submit if the text ends in <code translate=\"no\">\"\\n\"</code>.<br />With raw Selenium, those actions require multiple method calls.</p>\n\n<p>💡 SeleniumBase uses default timeout values when not set:<br />\n✅ <code translate=\"no\">self.click(\"button\")</code><br />\nWith raw Selenium, methods would fail instantly (<i>by default</i>) if an element needed more time to load:<br />\n❌ <code translate=\"no\">self.driver.find_element(by=\"css selector\", value=\"button\").click()</code><br />\n(Reliable code is better than unreliable code.)</p>\n\n<p>💡 SeleniumBase lets you change the explicit timeout values of methods:<br />\n✅ <code translate=\"no\">self.click(\"button\", timeout=10)</code><br />\nWith raw Selenium, that requires more code:<br />\n❌ <code translate=\"no\">WebDriverWait(driver, 10).until(EC.element_to_be_clickable(\"css selector\", \"button\")).click()</code><br />\n(Simple code is better than complex code.)</p>\n\n<p>💡 SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy.</p>\n\n<p>💡 SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the <code translate=\"no\">./latest_logs/</code> folder. Raw <a href=\"https://www.selenium.dev/documentation/webdriver/\" translate=\"no\" target=\"_blank\">Selenium</a> does not have these options out-of-the-box.</p>\n\n<p>💡 SeleniumBase includes desktop GUI apps for running tests, such as <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/commander.md\" translate=\"no\">SeleniumBase Commander</a> for <code translate=\"no\">pytest</code> and <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/behave_bdd/ReadMe.md\" translate=\"no\">SeleniumBase Behave GUI</a> for <code translate=\"no\">behave</code>.</p>\n\n<p>💡 SeleniumBase has its own <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/recorder_mode.md\">Recorder / Test Generator</a> for creating tests from manual browser actions.</p>\n\n<p>💡 SeleniumBase comes with <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/case_plans.md\">test case management software, (\"CasePlans\")</a>, for organizing tests and step descriptions.</p>\n\n<p>💡 SeleniumBase includes tools for <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/chart_maker/ReadMe.md\">building data apps, (\"ChartMaker\")</a>, which can generate JavaScript from Python.</p>\n\n</div>\n</details>\n\n--------\n\n<p>📚 <b>Learn about different ways of writing tests:</b></p>\n\n<p align=\"left\">📗📝 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_simple_login.py\">test_simple_login.py</a>, which uses <code translate=\"no\"><a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/fixtures/base_case.py\">BaseCase</a></code> class inheritance, and runs with <a href=\"https://docs.pytest.org/en/latest/how-to/usage.html\">pytest</a> or <a href=\"https://github.com/mdmintz/pynose\">pynose</a>. (Use <code translate=\"no\">self.driver</code> to access Selenium's raw <code translate=\"no\">driver</code>.)</p>\n\n```python\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass TestSimpleLogin(BaseCase):\n    def test_simple_login(self):\n        self.open(\"seleniumbase.io/simple/login\")\n        self.type(\"#username\", \"demo_user\")\n        self.type(\"#password\", \"secret_pass\")\n        self.click('a:contains(\"Sign in\")')\n        self.assert_exact_text(\"Welcome!\", \"h1\")\n        self.assert_element(\"img#image1\")\n        self.highlight(\"#image1\")\n        self.click_link(\"Sign out\")\n        self.assert_text(\"signed out\", \"#top_message\")\n```\n\n<p align=\"left\">📘📝 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/raw_login_sb.py\">raw_login_sb.py</a>, which uses the <b><code translate=\"no\">SB</code></b> Context Manager. Runs with pure <code translate=\"no\">python</code>. (Use <code translate=\"no\">sb.driver</code> to access Selenium's raw <code translate=\"no\">driver</code>.)</p>\n\n```python\nfrom seleniumbase import SB\n\nwith SB() as sb:\n    sb.open(\"seleniumbase.io/simple/login\")\n    sb.type(\"#username\", \"demo_user\")\n    sb.type(\"#password\", \"secret_pass\")\n    sb.click('a:contains(\"Sign in\")')\n    sb.assert_exact_text(\"Welcome!\", \"h1\")\n    sb.assert_element(\"img#image1\")\n    sb.highlight(\"#image1\")\n    sb.click_link(\"Sign out\")\n    sb.assert_text(\"signed out\", \"#top_message\")\n```\n\n<p align=\"left\">📙📝 Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/raw_login_driver.py\">raw_login_driver.py</a>, which uses the <b><code translate=\"no\">Driver</code></b> Manager. Runs with pure <code translate=\"no\">python</code>. (The <code>driver</code> is an improved version of Selenium's raw <code translate=\"no\">driver</code>, with more methods.)</p>\n\n```python\nfrom seleniumbase import Driver\n\ndriver = Driver()\ntry:\n    driver.open(\"seleniumbase.io/simple/login\")\n    driver.type(\"#username\", \"demo_user\")\n    driver.type(\"#password\", \"secret_pass\")\n    driver.click('a:contains(\"Sign in\")')\n    driver.assert_exact_text(\"Welcome!\", \"h1\")\n    driver.assert_element(\"img#image1\")\n    driver.highlight(\"#image1\")\n    driver.click_link(\"Sign out\")\n    driver.assert_text(\"signed out\", \"#top_message\")\nfinally:\n    driver.quit()\n```\n\n--------\n\n<a id=\"python_installation\"></a>\n<h2><img src=\"https://seleniumbase.github.io/cdn/img/python_logo.png\" title=\"SeleniumBase\" width=\"42\" /> Set up Python & Git:</h2>\n\n<a href=\"https://www.python.org/downloads/\"><img src=\"https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=FACE42\" title=\"Supported Python Versions\" /></a>\n\n🔵 Add <b><a href=\"https://www.python.org/downloads/\">Python</a></b> and <b><a href=\"https://git-scm.com/\">Git</a></b> to your System PATH.\n\n🔵 Using a <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/virtualenv_instructions.md\">Python virtual env</a> is recommended.\n\n<a id=\"install_seleniumbase\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Install SeleniumBase:</h2>\n\n**You can install ``seleniumbase`` from [PyPI](https://pypi.org/project/seleniumbase/) or [GitHub](https://github.com/seleniumbase/SeleniumBase):**\n\n🔵 **How to install ``seleniumbase`` from PyPI:**\n\n```bash\npip install seleniumbase\n```\n\n* (Add ``--upgrade`` OR ``-U`` to upgrade SeleniumBase.)\n* (Add ``--force-reinstall`` to upgrade indirect packages.)\n* (Use ``pip3`` if multiple versions of Python are present.)\n\n🔵 **How to install ``seleniumbase`` from a GitHub clone:**\n\n```bash\ngit clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase/\npip install -e .\n```\n\n🔵 **How to upgrade an existing install from a GitHub clone:**\n\n```bash\ngit pull\npip install -e .\n```\n\n🔵 **Type ``seleniumbase`` or ``sbase`` to verify that SeleniumBase was installed successfully:**\n\n```bash\n ___      _          _             ___              \n/ __| ___| |___ _ _ (_)_  _ _ __  | _ ) __ _ ______ \n\\__ \\/ -_) / -_) ' \\| | \\| | '  \\ | _ \\/ _` (_-< -_)\n|___/\\___|_\\___|_||_|_|\\_,_|_|_|_\\|___/\\__,_/__|___|\n----------------------------------------------------\n\n╭──────────────────────────────────────────────────╮\n│  * USAGE: \"seleniumbase [COMMAND] [PARAMETERS]\"  │\n│  *    OR:        \"sbase [COMMAND] [PARAMETERS]\"  │\n│                                                  │\n│ COMMANDS:        PARAMETERS / DESCRIPTIONS:      │\n│    get / install    [DRIVER_NAME] [OPTIONS]      │\n│    methods          (List common Python methods) │\n│    options          (List common pytest options) │\n│    behave-options   (List common behave options) │\n│    gui / commander  [OPTIONAL PATH or TEST FILE] │\n│    behave-gui       (SBase Commander for Behave) │\n│    caseplans        [OPTIONAL PATH or TEST FILE] │\n│    mkdir            [DIRECTORY] [OPTIONS]        │\n│    mkfile           [FILE.py] [OPTIONS]          │\n│    mkrec / codegen  [FILE.py] [OPTIONS]          │\n│    recorder         (Open Recorder Desktop App.) │\n│    record           (If args: mkrec. Else: App.) │\n│    mkpres           [FILE.py] [LANG]             │\n│    mkchart          [FILE.py] [LANG]             │\n│    print            [FILE] [OPTIONS]             │\n│    translate        [SB_FILE.py] [LANG] [ACTION] │\n│    convert          [WEBDRIVER_UNITTEST_FILE.py] │\n│    extract-objects  [SB_FILE.py]                 │\n│    inject-objects   [SB_FILE.py] [OPTIONS]       │\n│    objectify        [SB_FILE.py] [OPTIONS]       │\n│    revert-objects   [SB_FILE.py] [OPTIONS]       │\n│    encrypt / obfuscate                           │\n│    decrypt / unobfuscate                         │\n│    proxy            (Start a basic proxy server) │\n│    download server  (Get Selenium Grid JAR file) │\n│    grid-hub         [start|stop] [OPTIONS]       │\n│    grid-node        [start|stop] --hub=[HOST/IP] │\n│                                                  │\n│ *  EXAMPLE => \"sbase get chromedriver stable\"    │\n│ *  For command info => \"sbase help [COMMAND]\"    │\n│ *  For info on all commands => \"sbase --help\"    │\n╰──────────────────────────────────────────────────╯\n```\n\n<h3>🔵 Downloading webdrivers:</h3>\n\n✅ SeleniumBase automatically downloads webdrivers as needed, such as ``chromedriver``.\n\n<div></div>\n<details>\n<summary> ▶️ Here's sample output from a chromedriver download. (<b>click to expand</b>)</summary>\n\n```bash\n*** chromedriver to download = 131.0.6778.108 (Latest Stable) \n\nDownloading chromedriver-mac-arm64.zip from:\nhttps://storage.googleapis.com/chrome-for-testing-public/131.0.6778.108/mac-arm64/chromedriver-mac-arm64.zip ...\nDownload Complete!\n\nExtracting ['chromedriver'] from chromedriver-mac-arm64.zip ...\nUnzip Complete!\n\nThe file [chromedriver] was saved to:\n~/github/SeleniumBase/seleniumbase/drivers/\nchromedriver\n\nMaking [chromedriver 131.0.6778.108] executable ...\n[chromedriver 131.0.6778.108] is now ready for use!\n```\n\n</details>\n\n\n<a id=\"basic_example_and_usage\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Basic Example / Usage:</h2>\n\n🔵 If you've cloned SeleniumBase, you can run tests from the [examples/](https://github.com/seleniumbase/SeleniumBase/tree/master/examples) folder.\n\n<p align=\"left\">Here's <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/my_first_test.py\">my_first_test.py</a>:</p>\n\n```bash\ncd examples/\npytest my_first_test.py\n```\n\n<a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/my_first_test.py\"><img src=\"https://seleniumbase.github.io/cdn/gif/fast_swag_2.gif\" alt=\"SeleniumBase Test\" title=\"SeleniumBase Test\" width=\"480\" /></a>\n\n<p align=\"left\"><b>Here's the full code for <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/my_first_test.py\">my_first_test.py</a>:</b></p>\n\n```python\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass MyTestClass(BaseCase):\n    def test_swag_labs(self):\n        self.open(\"https://www.saucedemo.com\")\n        self.type(\"#user-name\", \"standard_user\")\n        self.type(\"#password\", \"secret_sauce\\n\")\n        self.assert_element(\"div.inventory_list\")\n        self.assert_exact_text(\"Products\", \"span.title\")\n        self.click('button[name*=\"backpack\"]')\n        self.click(\"#shopping_cart_container a\")\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\n        self.assert_text(\"Backpack\", \"div.cart_item\")\n        self.click(\"button#checkout\")\n        self.type(\"#first-name\", \"SeleniumBase\")\n        self.type(\"#last-name\", \"Automation\")\n        self.type(\"#postal-code\", \"77123\")\n        self.click(\"input#continue\")\n        self.assert_text(\"Checkout: Overview\")\n        self.assert_text(\"Backpack\", \"div.cart_item\")\n        self.assert_text(\"29.99\", \"div.inventory_item_price\")\n        self.click(\"button#finish\")\n        self.assert_exact_text(\"Thank you for your order!\", \"h2\")\n        self.assert_element('img[alt=\"Pony Express\"]')\n        self.js_click(\"a#logout_sidebar_link\")\n        self.assert_element(\"div#login_button_container\")\n```\n\n* By default, **[CSS Selectors](https://www.w3schools.com/cssref/css_selectors.asp)** are used for finding page elements.\n* If you're new to CSS Selectors, games like [CSS Diner](http://flukeout.github.io/) can help you learn.\n* For more reading, [here's an advanced guide on CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n\n\n<a id=\"common_methods\"></a>\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Here are some common SeleniumBase methods:</h3>\n\n```python\nself.open(url)  # Navigate the browser window to the URL.\nself.type(selector, text)  # Update the field with the text.\nself.click(selector)  # Click the element with the selector.\nself.click_link(link_text)  # Click the link containing text.\nself.go_back()  # Navigate back to the previous URL.\nself.select_option_by_text(dropdown_selector, option)\nself.hover_and_click(hover_selector, click_selector)\nself.drag_and_drop(drag_selector, drop_selector)\nself.get_text(selector)  # Get the text from the element.\nself.get_current_url()  # Get the URL of the current page.\nself.get_page_source()  # Get the HTML of the current page.\nself.get_attribute(selector, attribute)  # Get element attribute.\nself.get_title()  # Get the title of the current page.\nself.switch_to_frame(frame)  # Switch into the iframe container.\nself.switch_to_default_content()  # Leave the iframe container.\nself.open_new_window()  # Open a new window in the same browser.\nself.switch_to_window(window)  # Switch to the browser window.\nself.switch_to_default_window()  # Switch to the original window.\nself.get_new_driver(OPTIONS)  # Open a new driver with OPTIONS.\nself.switch_to_driver(driver)  # Switch to the browser driver.\nself.switch_to_default_driver()  # Switch to the original driver.\nself.wait_for_element(selector)  # Wait until element is visible.\nself.is_element_visible(selector)  # Return element visibility.\nself.is_text_visible(text, selector)  # Return text visibility.\nself.sleep(seconds)  # Do nothing for the given amount of time.\nself.save_screenshot(name)  # Save a screenshot in .png format.\nself.assert_element(selector)  # Verify the element is visible.\nself.assert_text(text, selector)  # Verify text in the element.\nself.assert_exact_text(text, selector)  # Verify text is exact.\nself.assert_title(title)  # Verify the title of the web page.\nself.assert_downloaded_file(file)  # Verify file was downloaded.\nself.assert_no_404_errors()  # Verify there are no broken links.\nself.assert_no_js_errors()  # Verify there are no JS errors.\n```\n\n🔵 For the complete list of SeleniumBase methods, see: <b><a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/method_summary.md\">Method Summary</a></b>\n\n\n<a id=\"fun_facts\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Fun Facts / Learn More:</h2>\n\n<p>✅ SeleniumBase automatically handles common <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">WebDriver</a> actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.</p>\n\n<p>✅ SeleniumBase lets you customize tests via <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/customizing_test_runs.md\">command-line options</a>.</p>\n\n<p>✅ SeleniumBase uses simple syntax for commands. Example:</p>\n\n```python\nself.type(\"input\", \"dogs\\n\")  # (The \"\\n\" presses ENTER)\n```\n\nMost SeleniumBase scripts can be run with <code translate=\"no\">pytest</code>, <code translate=\"no\">pynose</code>, or pure <code translate=\"no\">python</code>. Not all test runners can run all test formats. For example, tests that use the ``sb`` pytest fixture can only be run with ``pytest``. (See <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/syntax_formats.md\">Syntax Formats</a>) There's also a <a href=\"https://behave.readthedocs.io/en/stable/gherkin.html#features\" target=\"_blank\">Gherkin</a> test format that runs with <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/behave_bdd/ReadMe.md\">behave</a>.\n\n```bash\npytest coffee_cart_tests.py --rs\npytest test_sb_fixture.py --demo\npytest test_suite.py --rs --html=report.html --dashboard\n\npynose basic_test.py --mobile\npynose test_suite.py --headless --report --show-report\n\npython raw_sb.py\npython raw_test_scripts.py\n\nbehave realworld.feature\nbehave calculator.feature -D rs -D dashboard\n```\n\n<p>✅ <code translate=\"no\">pytest</code> includes automatic test discovery. If you don't specify a specific file or folder to run, <code translate=\"no\">pytest</code> will automatically search through all subdirectories for tests to run based on the following criteria:</p>\n\n* Python files that start with ``test_`` or end with ``_test.py``.\n* Python methods that start with ``test_``.\n\nWith a SeleniumBase [pytest.ini](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/pytest.ini) file present, you can modify default discovery settings. The Python class name can be anything because ``seleniumbase.BaseCase`` inherits ``unittest.TestCase`` to trigger autodiscovery.\n\n<p>✅ You can do a pre-flight check to see which tests would get discovered by <code translate=\"no\">pytest</code> before the actual run:</p>\n\n```bash\npytest --co -q\n```\n\n<p>✅ You can be more specific when calling <code translate=\"no\">pytest</code> or <code translate=\"no\">pynose</code> on a file:</p>\n\n```bash\npytest [FILE_NAME.py]::[CLASS_NAME]::[METHOD_NAME]\n\npynose [FILE_NAME.py]:[CLASS_NAME].[METHOD_NAME]\n```\n\n<p>✅ No More Flaky Tests! SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (<i>up to a timeout limit</i>). This means <b>you no longer need random <span><code translate=\"no\">time.sleep()</code></span> statements</b> in your scripts.</p>\n<img src=\"https://img.shields.io/badge/Flaky%20Tests%3F-%20NO%21-11BBDD.svg\" alt=\"NO MORE FLAKY TESTS!\" />\n\n✅ SeleniumBase supports all major browsers and operating systems:\n<p><b>Browsers:</b> Chrome, Edge, Firefox, and Safari.</p>\n<p><b>Systems:</b> Linux/Ubuntu, macOS, and Windows.</p>\n\n✅ SeleniumBase works on all popular CI/CD platforms:\n<p><a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/github/workflows/ReadMe.md\"><img alt=\"GitHub Actions integration\" src=\"https://img.shields.io/badge/GitHub_Actions-12B2C2.svg?logo=GitHubActions&logoColor=CFFFC2\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/azure/jenkins/ReadMe.md\"><img alt=\"Jenkins integration\" src=\"https://img.shields.io/badge/Jenkins-32B242.svg?logo=jenkins&logoColor=white\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/azure/azure_pipelines/ReadMe.md\"><img alt=\"Azure integration\" src=\"https://img.shields.io/badge/Azure-2288EE.svg?logo=AzurePipelines&logoColor=white\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/google_cloud/ReadMe.md\"><img alt=\"Google Cloud integration\" src=\"https://img.shields.io/badge/Google_Cloud-11CAE8.svg?logo=GoogleCloud&logoColor=EE0066\" /></a> <a href=\"#utilizing_advanced_features\"><img alt=\"AWS integration\" src=\"https://img.shields.io/badge/AWS-4488DD.svg?logo=AmazonAWS&logoColor=FFFF44\" /></a> <a href=\"https://en.wikipedia.org/wiki/Personal_computer\" target=\"_blank\"><img alt=\"Your Computer\" src=\"https://img.shields.io/badge/💻_Your_Computer-44E6E6.svg\" /></a></p>\n\n<p>✅ SeleniumBase includes an automated/manual hybrid solution called <b><a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/master_qa/ReadMe.md\">MasterQA</a></b> to speed up manual testing with automation while manual testers handle validation.</p>\n\n<p>✅ SeleniumBase supports <a href=\"https://github.com/seleniumbase/SeleniumBase/tree/master/examples/offline_examples\">running tests while offline</a> (<i>assuming webdrivers have previously been downloaded when online</i>).</p>\n\n<p>✅ For a full list of SeleniumBase features, <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/features_list.md\">Click Here</a>.</p>\n\n\n<a id=\"demo_mode_and_debugging\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Demo Mode / Debugging:</h2>\n\n🔵 <b>Demo Mode</b> helps you see what a test is doing. If a test is moving too fast for your eyes, run it in <b>Demo Mode</b> to pause the browser briefly between actions, highlight page elements being acted on, and display assertions:\n\n```bash\npytest my_first_test.py --demo\n```\n\n🔵 ``time.sleep(seconds)`` can be used to make a test wait at a specific spot:\n\n```python\nimport time; time.sleep(3)  # Do nothing for 3 seconds.\n```\n\n🔵 **Debug Mode** with Python's built-in **[pdb](https://docs.python.org/3/library/pdb.html)** library helps you debug tests:\n\n```python\nimport pdb; pdb.set_trace()\nimport pytest; pytest.set_trace()\nbreakpoint()  # Shortcut for \"import pdb; pdb.set_trace()\"\n```\n\n> (**``pdb``** commands: ``n``, ``c``, ``s``, ``u``, ``d`` => ``next``, ``continue``, ``step``, ``up``, ``down``)\n\n🔵 To pause an active test that throws an exception or error, (*and keep the browser window open while **Debug Mode** begins in the console*), add **``--pdb``** as a ``pytest`` option:\n\n```bash\npytest test_fail.py --pdb\n```\n\n🔵 To start tests in Debug Mode, add **``--trace``** as a ``pytest`` option:\n\n```bash\npytest test_coffee_cart.py --trace\n```\n\n<a href=\"https://github.com/mdmintz/pdbp\"><img src=\"https://seleniumbase.github.io/cdn/gif/coffee_pdbp.gif\" alt=\"SeleniumBase test with the pdbp (Pdb+) debugger\" title=\"SeleniumBase test with the pdbp (Pdb+) debugger\" /></a>\n\n\n<a id=\"command_line_options\"></a>\n<h2>🔵 Command-line Options:</h2>\n\n<a id=\"pytest_options\"></a>\n✅ Here are some useful command-line options that come with <code translate=\"no\">pytest</code>:\n\n```bash\n-v  # Verbose mode. Prints the full name of each test and shows more details.\n-q  # Quiet mode. Print fewer details in the console output when running tests.\n-x  # Stop running the tests after the first failure is reached.\n--html=report.html  # Creates a detailed pytest-html report after tests finish.\n--co | --collect-only  # Show what tests would get run. (Without running them)\n--co -q  # (Both options together!) - Do a dry run with full test names shown.\n-n=NUM  # Multithread the tests using that many threads. (Speed up test runs!)\n-s  # See print statements. (Should be on by default with pytest.ini present.)\n--junit-xml=report.xml  # Creates a junit-xml report after tests finish.\n--pdb  # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!)\n--trace  # Enter Debug Mode at the beginning of each test. (Don't use with CI!)\n-m=MARKER  # Run tests with the specified pytest marker.\n```\n\n<a id=\"new_pytest_options\"></a>\n✅ SeleniumBase provides additional <code translate=\"no\">pytest</code> command-line options for tests:\n\n```bash\n--browser=BROWSER  # (The web browser to use. Default: \"chrome\".)\n--chrome  # (Shortcut for \"--browser=chrome\". On by default.)\n--edge  # (Shortcut for \"--browser=edge\".)\n--firefox  # (Shortcut for \"--browser=firefox\".)\n--safari  # (Shortcut for \"--browser=safari\".)\n--settings-file=FILE  # (Override default SeleniumBase settings.)\n--env=ENV  # (Set the test env. Access with \"self.env\" in tests.)\n--account=STR  # (Set account. Access with \"self.account\" in tests.)\n--data=STRING  # (Extra test data. Access with \"self.data\" in tests.)\n--var1=STRING  # (Extra test data. Access with \"self.var1\" in tests.)\n--var2=STRING  # (Extra test data. Access with \"self.var2\" in tests.)\n--var3=STRING  # (Extra test data. Access with \"self.var3\" in tests.)\n--variables=DICT  # (Extra test data. Access with \"self.variables\".)\n--user-data-dir=DIR  # (Set the Chrome user data directory to use.)\n--protocol=PROTOCOL  # (The Selenium Grid protocol: http|https.)\n--server=SERVER  # (The Selenium Grid server/IP used for tests.)\n--port=PORT  # (The Selenium Grid port used by the test server.)\n--cap-file=FILE  # (The web browser's desired capabilities to use.)\n--cap-string=STRING  # (The web browser's desired capabilities to use.)\n--proxy=SERVER:PORT  # (Connect to a proxy server:port as tests are running)\n--proxy=USERNAME:PASSWORD@SERVER:PORT  # (Use an authenticated proxy server)\n--proxy-bypass-list=STRING # (\";\"-separated hosts to bypass, Eg \"*.foo.com\")\n--proxy-pac-url=URL  # (Connect to a proxy server using a PAC_URL.pac file.)\n--proxy-pac-url=USERNAME:PASSWORD@URL  # (Authenticated proxy with PAC URL.)\n--proxy-driver  # (If a driver download is needed, will use: --proxy=PROXY.)\n--multi-proxy  # (Allow multiple authenticated proxies when multi-threaded.)\n--agent=STRING  # (Modify the web browser's User-Agent string.)\n--mobile  # (Use the mobile device emulator while running tests.)\n--metrics=STRING  # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".)\n--chromium-arg=\"ARG=N,ARG2\"  # (Set Chromium args, \",\"-separated, no spaces.)\n--firefox-arg=\"ARG=N,ARG2\"  # (Set Firefox args, comma-separated, no spaces.)\n--firefox-pref=SET  # (Set a Firefox preference:value set, comma-separated.)\n--extension-zip=ZIP  # (Load a Chrome Extension .zip|.crx, comma-separated.)\n--extension-dir=DIR  # (Load a Chrome Extension directory, comma-separated.)\n--disable-features=\"F1,F2\"  # (Disable features, comma-separated, no spaces.)\n--binary-location=PATH  # (Set path of the Chromium browser binary to use.)\n--driver-version=VER  # (Set the chromedriver or uc_driver version to use.)\n--sjw  # (Skip JS Waits for readyState to be \"complete\" or Angular to load.)\n--wfa  # (Wait for AngularJS to be done loading after specific web actions.)\n--pls=PLS  # (Set pageLoadStrategy on Chrome: \"normal\", \"eager\", or \"none\".)\n--headless  # (The default headless mode. Linux uses this mode by default.)\n--headless1  # (Use Chrome's old headless mode. Fast, but has limitations.)\n--headless2  # (Use Chrome's new headless mode, which supports extensions.)\n--headed  # (Run tests in headed/GUI mode on Linux OS, where not default.)\n--xvfb  # (Run tests using the Xvfb virtual display server on Linux OS.)\n--xvfb-metrics=STRING  # (Set Xvfb display size on Linux: \"Width,Height\".)\n--locale=LOCALE_CODE  # (Set the Language Locale Code for the web browser.)\n--interval=SECONDS  # (The autoplay interval for presentations & tour steps)\n--start-page=URL  # (The starting URL for the web browser when tests begin.)\n--archive-logs  # (Archive existing log files instead of deleting them.)\n--archive-downloads  # (Archive old downloads instead of deleting them.)\n--time-limit=SECONDS  # (Safely fail any test that exceeds the time limit.)\n--slow  # (Slow down the automation. Faster than using Demo Mode.)\n--demo  # (Slow down and visually see test actions as they occur.)\n--demo-sleep=SECONDS  # (Set the wait time after Slow & Demo Mode actions.)\n--highlights=NUM  # (Number of highlight animations for Demo Mode actions.)\n--message-duration=SECONDS  # (The time length for Messenger alerts.)\n--check-js  # (Check for JavaScript errors after page loads.)\n--ad-block  # (Block some types of display ads from loading.)\n--host-resolver-rules=RULES  # (Set host-resolver-rules, comma-separated.)\n--block-images  # (Block images from loading during tests.)\n--do-not-track  # (Indicate to websites that you don't want to be tracked.)\n--verify-delay=SECONDS  # (The delay before MasterQA verification checks.)\n--ee | --esc-end  # (Lets the user end the current test via the ESC key.)\n--recorder  # (Enables the Recorder for turning browser actions into code.)\n--rec-behave  # (Same as Recorder Mode, but also generates behave-gherkin.)\n--rec-sleep  # (If the Recorder is enabled, also records self.sleep calls.)\n--rec-print  # (If the Recorder is enabled, prints output after tests end.)\n--disable-cookies  # (Disable Cookies on websites. Pages might break!)\n--disable-js  # (Disable JavaScript on websites. Pages might break!)\n--disable-csp  # (Disable the Content Security Policy of websites.)\n--disable-ws  # (Disable Web Security on Chromium-based browsers.)\n--enable-ws  # (Enable Web Security on Chromium-based browsers.)\n--enable-sync  # (Enable \"Chrome Sync\" on websites.)\n--uc | --undetected  # (Use undetected-chromedriver to evade bot-detection.)\n--uc-cdp-events  # (Capture CDP events when running in \"--undetected\" mode.)\n--log-cdp  # (\"goog:loggingPrefs\", {\"performance\": \"ALL\", \"browser\": \"ALL\"})\n--remote-debug  # (Sync to Chrome Remote Debugger chrome://inspect/#devices)\n--ftrace | --final-trace  # (Debug Mode after each test. Don't use with CI!)\n--dashboard  # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html)\n--dash-title=STRING  # (Set the title shown for the generated dashboard.)\n--enable-3d-apis  # (Enables WebGL and 3D APIs.)\n--swiftshader  # (Chrome \"--use-gl=angle\" / \"--use-angle=swiftshader-webgl\")\n--incognito  # (Enable Chrome's Incognito mode.)\n--guest  # (Enable Chrome's Guest mode.)\n--dark  # (Enable Chrome's Dark mode.)\n--devtools  # (Open Chrome's DevTools when the browser opens.)\n--rs | --reuse-session  # (Reuse browser session for all tests.)\n--rcs | --reuse-class-session  # (Reuse session for tests in class.)\n--crumbs  # (Delete all cookies between tests reusing a session.)\n--disable-beforeunload  # (Disable the \"beforeunload\" event on Chrome.)\n--window-position=X,Y  # (Set the browser's starting window position.)\n--window-size=WIDTH,HEIGHT  # (Set the browser's starting window size.)\n--maximize  # (Start tests with the browser window maximized.)\n--screenshot  # (Save a screenshot at the end of each test.)\n--no-screenshot  # (No screenshots saved unless tests directly ask it.)\n--visual-baseline  # (Set the visual baseline for Visual/Layout tests.)\n--wire  # (Use selenium-wire's webdriver for replacing selenium webdriver.)\n--external-pdf  # (Set Chromium \"plugins.always_open_pdf_externally\":True.)\n--timeout-multiplier=MULTIPLIER  # (Multiplies the default timeout values.)\n--list-fail-page  # (After each failing test, list the URL of the failure.)\n```\n\n(See the full list of command-line option definitions **[here](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/plugins/pytest_plugin.py)**. For detailed examples of command-line options, see **[customizing_test_runs.md](https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/customizing_test_runs.md)**)\n\n--------\n\n🔵 During test failures, logs and screenshots from the most recent test run will get saved to the ``latest_logs/`` folder. Those logs will get moved to ``archived_logs/`` if you add --archive_logs to command-line options, or have ``ARCHIVE_EXISTING_LOGS`` set to True in [settings.py](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/settings.py), otherwise log files with be cleaned up at the start of the next test run. The ``test_suite.py`` collection contains tests that fail on purpose so that you can see how logging works.\n\n```bash\ncd examples/\n\npytest test_suite.py --chrome\n\npytest test_suite.py --firefox\n```\n\nAn easy way to override seleniumbase/config/settings.py is by using a custom settings file.\nHere's the command-line option to add to tests: (See [examples/custom_settings.py](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/custom_settings.py))\n``--settings_file=custom_settings.py``\n(Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)\n\n🔵 To pass additional data from the command-line to tests, add ``--data=\"ANY STRING\"``.\nInside your tests, you can use ``self.data`` to access that.\n\n<a id=\"directory_configuration\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Directory Configuration:</h2>\n\n🔵 When running tests with **``pytest``**, you'll want a copy of **[pytest.ini](https://github.com/seleniumbase/SeleniumBase/blob/master/pytest.ini)** in your root folders. When running tests with **``pynose``**, you'll want a copy of **[setup.cfg](https://github.com/seleniumbase/SeleniumBase/blob/master/setup.cfg)** in your root folders. These files specify default configuration details for tests. Test folders should also include a blank **[__init__.py](https://github.com/seleniumbase/SeleniumBase/blob/master/examples/offline_examples/__init__.py)** file to allow your test files to import other files from that folder.\n\n🔵 ``sbase mkdir DIR`` creates a folder with config files and sample tests:\n\n```bash\nsbase mkdir ui_tests\n```\n\n> That new folder will have these files:\n\n```bash\nui_tests/\n├── __init__.py\n├── my_first_test.py\n├── parameterized_test.py\n├── pytest.ini\n├── requirements.txt\n├── setup.cfg\n├── test_demo_site.py\n└── boilerplates/\n    ├── __init__.py\n    ├── base_test_case.py\n    ├── boilerplate_test.py\n    ├── classic_obj_test.py\n    ├── page_objects.py\n    ├── sb_fixture_test.py\n    └── samples/\n        ├── __init__.py\n        ├── google_objects.py\n        ├── google_test.py\n        ├── sb_swag_test.py\n        └── swag_labs_test.py\n```\n\n<b>ProTip™:</b> You can also create a boilerplate folder without any sample tests in it by adding ``-b`` or ``--basic`` to the ``sbase mkdir`` command:\n\n```bash\nsbase mkdir ui_tests --basic\n```\n\n> That new folder will have these files:\n\n```bash\nui_tests/\n├── __init__.py\n├── pytest.ini\n├── requirements.txt\n└── setup.cfg\n```\n\nOf those files, the ``pytest.ini`` config file is the most important, followed by a blank ``__init__.py`` file. There's also a ``setup.cfg`` file (for pynose). Finally, the ``requirements.txt`` file can be used to help you install seleniumbase into your environments (if it's not already installed).\n\n--------\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Log files from failed tests:</h3>\n\nLet's try an example of a test that fails:\n\n```python\n\"\"\" test_fail.py \"\"\"\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass MyTestClass(BaseCase):\n\n    def test_find_army_of_robots_on_xkcd_desert_island(self):\n        self.open(\"https://xkcd.com/731/\")\n        self.assert_element(\"div#ARMY_OF_ROBOTS\", timeout=1)  # This should fail\n```\n\nYou can run it from the ``examples/`` folder like this:\n\n```bash\npytest test_fail.py\n```\n\n🔵 You'll notice that a logs folder, ``./latest_logs/``, was created to hold information (and screenshots) about the failing test. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in [settings.py](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/settings.py), or if your run tests with ``--archive-logs``. If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.\n\n--------\n\n<a id=\"seleniumbase_dashboard\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> SeleniumBase Dashboard:</h2>\n\n🔵 The ``--dashboard`` option for pytest generates a SeleniumBase Dashboard located at ``dashboard.html``, which updates automatically as tests run and produce results. Example:\n\n```bash\npytest --dashboard --rs --headless\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/dashboard_1.png\" alt=\"The SeleniumBase Dashboard\" title=\"The SeleniumBase Dashboard\" width=\"380\" />\n\n🔵 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python's ``http.server``:\n\n```bash\npython -m http.server 1948\n```\n\n🔵 Now you can navigate to ``http://localhost:1948/dashboard.html`` in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use <kbd>Ctrl+C</kbd> to stop the http server.)\n\n🔵 Here's a full example of what the SeleniumBase Dashboard may look like:\n\n```bash\npytest test_suite.py test_image_saving.py --dashboard --rs --headless\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/dashboard_2.png\" alt=\"The SeleniumBase Dashboard\" title=\"The SeleniumBase Dashboard\" width=\"520\" />\n\n--------\n\n<a id=\"creating_visual_reports\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Generating Test Reports:</h2>\n\n<h3>🔵 <code>pytest</code> HTML Reports:</h3>\n\n✅ Using ``--html=report.html`` gives you a fancy report of the name specified after your test suite completes.\n\n```bash\npytest test_suite.py --html=report.html\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/html_report.png\" alt=\"Example Pytest Report\" title=\"Example Pytest Report\" width=\"520\" />\n\n✅ When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: ``--dashboard --html=dashboard.html``), then the Dashboard will become an advanced html report when all the tests complete.\n\n✅ Here's an example of an upgraded html report:\n\n```bash\npytest test_suite.py --dashboard --html=report.html\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/dash_report.jpg\" alt=\"Dashboard Pytest HTML Report\" title=\"Dashboard Pytest HTML Report\" width=\"520\" />\n\nIf viewing pytest html reports in [Jenkins](https://www.jenkins.io/), you may need to [configure Jenkins settings](https://stackoverflow.com/a/46197356/7058266) for the html to render correctly. This is due to [Jenkins CSP changes](https://www.jenkins.io/doc/book/system-administration/security/configuring-content-security-policy/).\n\nYou can also use ``--junit-xml=report.xml`` to get an xml report instead. Jenkins can use this file to display better reporting for your tests.\n\n```bash\npytest test_suite.py --junit-xml=report.xml\n```\n\n<h3>🔵 <code>pynose</code> Reports:</h3>\n\nThe ``--report`` option gives you a fancy report after your test suite completes.\n\n```bash\npynose test_suite.py --report\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/nose_report.png\" alt=\"Example pynose Report\" title=\"Example pynose Report\" width=\"320\" />\n\n(NOTE: You can add ``--show-report`` to immediately display pynose reports after the test suite completes. Only use ``--show-report`` when running tests locally because it pauses the test run.)\n\n<h3>🔵 <code>behave</code> Dashboard & Reports:</h3>\n\n(The [behave_bdd/](https://github.com/seleniumbase/SeleniumBase/tree/master/examples/behave_bdd) folder can be found in the [examples/](https://github.com/seleniumbase/SeleniumBase/tree/master/examples) folder.)\n\n```bash\nbehave behave_bdd/features/ -D dashboard -D headless\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/sb_behave_dashboard.png\" title=\"SeleniumBase\" width=\"520\">\n\nYou can also use ``--junit`` to get ``.xml`` reports for each <code translate=\"no\">behave</code> feature. Jenkins can use these files to display better reporting for your tests.\n\n```bash\nbehave behave_bdd/features/ --junit -D rs -D headless\n```\n\n<h3>🔵 Allure Reports:</h3>\n\nSee: [https://allurereport.org/docs/pytest/](https://allurereport.org/docs/pytest/)\n\nSeleniumBase no longer includes ``allure-pytest`` as part of installed dependencies. If you want to use it, install it first:\n\n```bash\npip install allure-pytest\n```\n\nNow your tests can create Allure results files, which can be processed by Allure Reports.\n\n```bash\npytest test_suite.py --alluredir=allure_results\n```\n\n--------\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Using a Proxy Server:</h3>\n\nIf you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add ``--proxy=IP_ADDRESS:PORT`` as an argument on the command line.\n\n```bash\npytest proxy_test.py --proxy=IP_ADDRESS:PORT\n```\n\nIf the proxy server that you wish to use requires authentication, you can do the following (Chromium only):\n\n```bash\npytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT\n```\n\nSeleniumBase also supports SOCKS4 and SOCKS5 proxies:\n\n```bash\npytest proxy_test.py --proxy=\"socks4://IP_ADDRESS:PORT\"\n\npytest proxy_test.py --proxy=\"socks5://IP_ADDRESS:PORT\"\n```\n\nTo make things easier, you can add your frequently-used proxies to PROXY_LIST in [proxy_list.py](https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/proxy_list.py), and then use ``--proxy=KEY_FROM_PROXY_LIST`` to use the IP_ADDRESS:PORT of that key.\n\n```bash\npytest proxy_test.py --proxy=proxy1\n```\n\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Changing the User-Agent:</h3>\n\n🔵 If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add ``--agent=\"USER AGENT STRING\"`` as an argument on the command-line.\n\n```bash\npytest user_agent_test.py --agent=\"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\"\n```\n\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Handling Pop-Up Alerts:</h3>\n\n🔵 <code translate=\"no\">self.accept_alert()</code> automatically waits for and accepts alert pop-ups. <code translate=\"no\">self.dismiss_alert()</code> automatically waits for and dismisses alert pop-ups. On occasion, some methods like <code translate=\"no\">self.click(SELECTOR)</code> might dismiss a pop-up on its own because they call JavaScript to make sure that the <code translate=\"no\">readyState</code> of the page is <code translate=\"no\">complete</code> before advancing. If you're trying to accept a pop-up that got dismissed this way, use this workaround: Call <code translate=\"no\">self.find_element(SELECTOR).click()</code> instead, (which will let the pop-up remain on the screen), and then use <code translate=\"no\">self.accept_alert()</code> to accept the pop-up (<a href=\"https://github.com/seleniumbase/SeleniumBase/issues/600#issuecomment-647270426\">more on that here</a>). If pop-ups are intermittent, wrap code in a try/except block.\n\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Building Guided Tours for Websites:</h3>\n\n🔵 Learn about <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/tour_examples/ReadMe.md\">SeleniumBase Interactive Walkthroughs</a> (in the ``examples/tour_examples/`` folder). It's great for prototyping a website onboarding experience.\n\n\n<a id=\"utilizing_advanced_features\"></a>\n\n--------\n\n<div></div>\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Production Environments & Integrations:</h3>\n\n<div></div>\n<details>\n<summary> ▶️ Here are some things you can do to set up a production environment for your testing. (<b>click to expand</b>)</summary>\n\n<ul>\n<li>You can set up a <a href=\"https://jenkins.io/\" target=\"_blank\">Jenkins</a> build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/azure/jenkins/ReadMe.md\">SeleniumBase Jenkins example on Azure</a> or the <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/integrations/google_cloud/ReadMe.md\">SeleniumBase Jenkins example on Google Cloud</a>.</li>\n\n<li>You can use <a href=\"https://selenium.dev/documentation/en/grid/\" target=\"_blank\">the Selenium Grid</a> to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the <a href=\"https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/utilities/selenium_grid\">SeleniumBase selenium_grid folder</a>, which should have everything you need, including the <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md\">Selenium Grid ReadMe</a> to help you get started.</li>\n\n<li>If you're using the <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/mysql_installation.md\">SeleniumBase MySQL feature</a> to save results from tests running on a server machine, you can install <a href=\"https://dev.mysql.com/downloads/tools/workbench/\">MySQL Workbench</a> to help you read & write from your DB more easily.</li>\n\n<li>If you're using AWS, you can set up an <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\">Amazon S3</a> account for saving log files and screenshots from your tests. To activate this feature, modify <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/seleniumbase/config/settings.py\">settings.py</a> with connection details in the S3 section, and add <code translate=\"no\">--with-s3-logging</code> on the command-line when running your tests.</li>\n</ul>\n\nHere's an example of running tests with some additional features enabled:\n\n```bash\npytest [YOUR_TEST_FILE.py] --with-db-reporting --with-s3-logging\n```\n\n</details>\n\n\n<a id=\"detailed_method_specifications\"></a>\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Detailed Method Specifications and Examples:</h3>\n\n🔵 **Navigating to a web page: (and related commands)**\n\n```python\nself.open(\"https://xkcd.com/378/\")  # This method opens the specified page.\n\nself.go_back()  # This method navigates the browser to the previous page.\n\nself.go_forward()  # This method navigates the browser forward in history.\n\nself.refresh_page()  # This method reloads the current page.\n\nself.get_current_url()  # This method returns the current page URL.\n\nself.get_page_source()  # This method returns the current page source.\n```\n\n<b>ProTip™:</b> You can use the <code translate=\"no\">self.get_page_source()</code> method with Python's <code translate=\"no\">find()</code> command to parse through HTML to find something specific. (For more advanced parsing, see the <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/examples/test_parse_soup.py\">BeautifulSoup example</a>.)\n\n```python\nsource = self.get_page_source()\nhead_open_tag = source.find('<head>')\nhead_close_tag = source.find('</head>', head_open_tag)\neverything_inside_head = source[head_open_tag+len('<head>'):head_close_tag]\n```\n\n🔵 **Clicking:**\n\nTo click an element on the page:\n\n```python\nself.click(\"div#my_id\")\n```\n\n**ProTip™:** In most web browsers, you can right-click on a page and select ``Inspect Element`` to see the CSS selector details that you'll need to create your own scripts.\n\n🔵 **Typing Text:**\n\n<code translate=\"no\">self.type(selector, text)</code>  # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example:\n\n```python\nself.type(\"input#id_value\", \"2012\")\n```\n\nYou can also use <code translate=\"no\">self.add_text()</code> or the <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">WebDriver</a> <code translate=\"no\">.send_keys()</code> command, but those won't clear the text box first if there's already text inside.\n\n🔵 **Getting the text from an element on a page:**\n\n```python\ntext = self.get_text(\"header h2\")\n```\n\n🔵 **Getting the attribute value from an element on a page:**\n\n```python\nattribute = self.get_attribute(\"#comic img\", \"title\")\n```\n\n🔵 **Asserting existence of an element on a page within some number of seconds:**\n\n```python\nself.wait_for_element_present(\"div.my_class\", timeout=10)\n```\n\n(NOTE: You can also use: ``self.assert_element_present(ELEMENT)``)\n\n🔵 **Asserting visibility of an element on a page within some number of seconds:**\n\n```python\nself.wait_for_element_visible(\"a.my_class\", timeout=5)\n```\n\n(NOTE: The short versions of that are ``self.find_element(ELEMENT)`` and ``self.assert_element(ELEMENT)``. The ``find_element()`` version returns the element.)\n\nSince the line above returns the element, you can combine that with ``.click()`` as shown below:\n\n```python\nself.find_element(\"a.my_class\", timeout=5).click()\n\n# But you're better off using the following statement, which does the same thing:\n\nself.click(\"a.my_class\")  # DO IT THIS WAY!\n```\n\n**ProTip™:** You can use dots to signify class names (Ex: ``div.class_name``) as a simplified version of ``div[class=\"class_name\"]`` within a CSS selector. \n\nYou can also use ``*=`` to search for any partial value in a CSS selector as shown below:\n\n```python\nself.click('a[name*=\"partial_name\"]')\n```\n\n🔵 **Asserting visibility of text inside an element on a page within some number of seconds:**\n\n```python\nself.assert_text(\"Make it so!\", \"div#trek div.picard div.quotes\")\nself.assert_text(\"Tea. Earl Grey. Hot.\", \"div#trek div.picard div.quotes\", timeout=3)\n```\n\n(NOTE: ``self.find_text(TEXT, ELEMENT)`` and ``self.wait_for_text(TEXT, ELEMENT)`` also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)\n\n🔵 **Asserting Anything:**\n\n```python\nself.assert_true(var1 == var2)\n\nself.assert_false(var1 == var2)\n\nself.assert_equal(var1, var2)\n```\n\n🔵 **Useful Conditional Statements: (with creative examples)**\n\n❓ ``is_element_visible(selector):``  (visible on the page)\n\n```python\nif self.is_element_visible('div#warning'):\n    print(\"Red Alert: Something bad might be happening!\")\n```\n\n❓ ``is_element_present(selector):``  (present in the HTML)\n\n```python\nif self.is_element_present('div#top_secret img.tracking_cookie'):\n    self.contact_cookie_monster()  # Not a real SeleniumBase method\nelse:\n    current_url = self.get_current_url()\n    self.contact_the_nsa(url=current_url, message=\"Dark Zone Found\")  # Not a real SeleniumBase method\n```\n\n```python\ndef is_there_a_cloaked_klingon_ship_on_this_page():\n    if self.is_element_present(\"div.ships div.klingon\"):\n        return not self.is_element_visible(\"div.ships div.klingon\")\n    return False\n```\n\n❓ ``is_text_visible(text, selector):``  (text visible on element)\n\n```python\nif self.is_text_visible(\"You Shall Not Pass!\", \"h1\"):\n    self.open(\"https://www.youtube.com/watch?v=3xYXUeSmb-Y\")\n```\n\n<div></div>\n<details>\n<summary> ▶️ Click for a longer example of <code translate=\"no\">is_text_visible():</code></summary>\n\n```python\ndef get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):\n    selector = \"div.superbowl_%s div.commercials div.transcript div.picard\" % superbowl_year\n    if self.is_text_visible(\"Yes, it was I who summoned you all here.\", selector):\n        return \"Picard Paramount+ Superbowl Ad 2020\"\n    elif self.is_text_visible(\"Commander, signal the following: Our Network is Secure!\"):\n        return \"Picard Mirror Universe iboss Superbowl Ad 2018\"\n    elif self.is_text_visible(\"For the Love of Marketing and Earl Grey Tea!\", selector):\n        return \"Picard Mirror Universe HubSpot Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Delivery Drones... Engage\", selector):\n        return \"Picard Mirror Universe Amazon Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Bing it on Screen!\", selector):\n        return \"Picard Mirror Universe Microsoft Superbowl Ad 2015\"\n    elif self.is_text_visible(\"OK Glass, Make it So!\", selector):\n        return \"Picard Mirror Universe Google Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Number One, I've Never Seen Anything Like It.\", selector):\n        return \"Picard Mirror Universe Tesla Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Let us make sure history never forgets the name ... Facebook\", selector):\n        return \"Picard Mirror Universe Facebook Superbowl Ad 2015\"\n    elif self.is_text_visible(\"\"\"With the first link, the chain is forged.\n                              The first speech censored, the first thought forbidden,\n                              the first freedom denied, chains us all irrevocably.\"\"\", selector):\n        return \"Picard Mirror Universe Wikimedia Superbowl Ad 2015\"\n    else:\n        raise Exception(\"Reports of my assimilation are greatly exaggerated.\")\n```\n\n</details>\n\n❓ ``is_link_text_visible(link_text):``\n\n```python\nif self.is_link_text_visible(\"Stop! Hammer time!\"):\n    self.click_link(\"Stop! Hammer time!\")\n```\n\n<h3>🔵 Switching Tabs:</h3>\n\n<p>If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don't open to <code translate=\"no\">about:blank</code> URLs.)</p>\n\n```python\nself.switch_to_window(1)  # This switches to the new tab (0 is the first one)\n```\n\n<h3>🔵 How to handle iframes:</h3>\n\n🔵 <b>iframes</b> follow the same principle as new windows: You must first switch to the iframe if you want to perform actions in there:\n\n```python\nself.switch_to_frame(\"iframe\")\n# ... Now perform actions inside the iframe\nself.switch_to_parent_frame()  # Exit the current iframe\n```\n\nTo exit from multiple iframes, use ``self.switch_to_default_content()``. (If inside a single iframe, this has the same effect as ``self.switch_to_parent_frame()``.)\n\n```python\nself.switch_to_frame('iframe[name=\"frame1\"]')\nself.switch_to_frame('iframe[name=\"frame2\"]')\n# ... Now perform actions inside the inner iframe\nself.switch_to_default_content()  # Back to the main page\n```\n\n🔵 You can also use a context manager to act inside iframes:\n\n```python\nwith self.frame_switch(\"iframe\"):\n    # ... Now perform actions while inside the code block\n# You have left the iframe\n```\n\nThis also works with nested iframes:\n\n```python\nwith self.frame_switch('iframe[name=\"frame1\"]'):\n    with self.frame_switch('iframe[name=\"frame2\"]'):\n        # ... Now perform actions while inside the code block\n    # You are now back inside the first iframe\n# You have left all the iframes\n```\n\n<h3>🔵 How to execute custom jQuery scripts:</h3>\n\n<p>jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser.\nIf the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately.\nYou'd know this because the web page would contain something like the following in the HTML:</p>\n\n```html\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n```\n\n🔵 It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first:\n\n```python\nself.activate_jquery()\n```\n\n<div></div>\n<details>\n<summary> ▶️ Here are some examples of using jQuery in your scripts. (<b>click to expand</b>)</summary>\n\n```python\nself.execute_script(\"jQuery, window.scrollTo(0, 600)\")  # Scrolling the page\n\nself.execute_script(\"jQuery('#annoying-widget').hide()\")  # Hiding elements on a page\n\nself.execute_script(\"jQuery('#hidden-widget').show(0)\")  # Showing hidden elements on a page\n\nself.execute_script(\"jQuery('#annoying-button a').remove()\")  # Removing elements on a page\n\nself.execute_script(\"jQuery('%s').mouseover()\" % (mouse_over_item))  # Mouse-over elements on a page\n\nself.execute_script(\"jQuery('input#the_id').val('my_text')\")  # Fast text input on a page\n\nself.execute_script(\"jQuery('div#dropdown a.link').click()\")  # Click elements on a page\n\nself.execute_script(\"return jQuery('div#amazing')[0].text\")  # Returns the css \"text\" of the element given\n\nself.execute_script(\"return jQuery('textarea')[2].value\")  # Returns the css \"value\" of the 3rd textarea element on the page\n```\n\n(Most of the above commands can be done directly with built-in SeleniumBase methods.)\n\n</details>\n\n<h3>🔵 How to handle a restrictive CSP:</h3>\n\n❗ Some websites have a restrictive [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on those websites, add ``--disable-csp`` as a ``pytest`` command-line option to load a Chromium extension that bypasses the CSP.\n\n<h3>🔵 More JavaScript fun:</h3>\n\n<div></div>\n<details>\n<summary> ▶️ In this example, JavaScript creates a referral button on a page, which is then clicked. (<b>click to expand</b>)</summary>\n\n```python\nstart_page = \"https://xkcd.com/465/\"\ndestination_page = \"https://github.com/seleniumbase/SeleniumBase\"\nself.open(start_page)\nreferral_link = '''<a class='analytics test' href='%s'>Free-Referral Button!</a>''' % destination_page\nself.execute_script('''document.body.innerHTML = \\\"%s\\\"''' % referral_link)\nself.click(\"a.analytics\")  # Clicks the generated button\n```\n\n(Due to popular demand, this traffic generation example has been included in SeleniumBase with the <code translate=\"no\">self.generate_referral(start_page, end_page)</code> and the <code translate=\"no\">self.generate_traffic(start_page, end_page, loops)</code> methods.)\n\n</details>\n\n<h3>🔵 How to use deferred asserts:</h3>\n\n<p>Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's an example:</p>\n\n```python\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass DeferredAssertTests(BaseCase):\n    def test_deferred_asserts(self):\n        self.open(\"https://xkcd.com/993/\")\n        self.wait_for_element(\"#comic\")\n        self.deferred_assert_element('img[alt=\"Brand Identity\"]')\n        self.deferred_assert_element('img[alt=\"Rocket Ship\"]')  # Will Fail\n        self.deferred_assert_element(\"#comicmap\")\n        self.deferred_assert_text(\"Fake Item\", \"ul.comicNav\")  # Will Fail\n        self.deferred_assert_text(\"Random\", \"ul.comicNav\")\n        self.deferred_assert_element('a[name=\"Super Fake !!!\"]')  # Will Fail\n        self.deferred_assert_exact_text(\"Brand Identity\", \"#ctitle\")\n        self.deferred_assert_exact_text(\"Fake Food\", \"#comic\")  # Will Fail\n        self.process_deferred_asserts()\n```\n\n<code translate=\"no\">deferred_assert_element()</code> and <code translate=\"no\">deferred_assert_text()</code> will save any exceptions that would be raised.\nTo flush out all the failed deferred asserts into a single exception, make sure to call <code translate=\"no\">self.process_deferred_asserts()</code> at the end of your test method. If your test hits multiple pages, you can call <code translate=\"no\">self.process_deferred_asserts()</code> before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.\n\n<h3>🔵 How to access raw <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">WebDriver</a>:</h3>\n\n<p>If you need access to any commands that come with standard <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">WebDriver</a>, you can call them directly like this:</p>\n\n```python\nself.driver.delete_all_cookies()\ncapabilities = self.driver.capabilities\nself.driver.find_elements(\"partial link text\", \"GitHub\")\n```\n\n(In general, you'll want to use the SeleniumBase versions of methods when available.)\n\n<h3>🔵 How to retry failing tests automatically:</h3>\n\n<p>You can use <code translate=\"no\">pytest --reruns=NUM</code> to retry failing tests that many times. Add <code translate=\"no\">--reruns-delay=SECONDS</code> to wait that many seconds between retries. Example:</p>\n\n```bash\npytest --reruns=1 --reruns-delay=1\n```\n\n<p>You can use the <code translate=\"no\">@retry_on_exception()</code> decorator to retry failing methods. (First import: <code translate=\"no\">from seleniumbase import decorators</code>). To learn more about SeleniumBase decorators, <a href=\"https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/common\">click here</a>.</p>\n\n--------\n\n> \"Catch bugs in QA before deploying code to Production!\"\n\n<p align=\"left\"><a href=\"https://seleniumbase.io/error_page\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/cdn/gif/error_page.gif\" alt=\"Catch bugs in QA before deploying code to Production!\" title=\"Catch bugs in QA before deploying code to Production!\" /></a></p>\n\n--------\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"SeleniumBase\" width=\"32\" /> Wrap-Up</h3>\n\n<p>\n<div><b>If you see something, say something!</b></div>\n<div><a href=\"https://github.com/seleniumbase/SeleniumBase/issues?q=is%3Aissue+is%3Aclosed\"><img src=\"https://img.shields.io/github/issues-closed-raw/seleniumbase/SeleniumBase.svg?color=22BB88\" title=\"Closed Issues\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/pulls?q=is%3Apr+is%3Aclosed\"><img src=\"https://img.shields.io/github/issues-pr-closed/seleniumbase/SeleniumBase.svg?logo=github&logoColor=white&color=22BB99\" title=\"Closed Pull Requests\" /></a></div>\n</p>\n\n<p align=\"left\"><a href=\"https://github.com/seleniumbase/SeleniumBase/\"><img src=\"https://seleniumbase.github.io/cdn/img/sb_logo_10t.png\" alt=\"SeleniumBase\" title=\"SeleniumBase\" width=\"274\" /></a></p>\n\n<a href=\"https://pypi.org/project/seleniumbase/\" target=\"_blank\"><img src=\"https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=22AAEE&logo=python&logoColor=FEDC54\" title=\"Supported Python Versions\" /></a>\n\n<p><div>\n<span><a href=\"https://www.youtube.com/playlist?list=PLp9uKicxkBc5UIlGi2BuE3aWC7JyXpD3m\"><img src=\"https://seleniumbase.github.io/cdn/img/youtube.png\" title=\"SeleniumBase Playlist on YouTube\" alt=\"SeleniumBase Playlist on YouTube\" width=\"70\" /></a></span>\n<span><a href=\"https://github.com/seleniumbase/SeleniumBase\"><img src=\"https://seleniumbase.github.io/img/social/share_github.svg\" title=\"SeleniumBase on GitHub\" alt=\"SeleniumBase on GitHub\" width=\"64\" /></a></span>\n<span><a href=\"https://discord.gg/EdhQTn3EyE\"><img src=\"https://seleniumbase.github.io/other/discord_icon.png\" title=\"SeleniumBase on Discord\" alt=\"SeleniumBase on Discord\" width=\"66\" /></a></span>\n<span><a href=\"https://www.facebook.com/SeleniumBase\"><img src=\"https://seleniumbase.io/img/social/share_facebook.svg\" title=\"SeleniumBase on Facebook\" alt=\"SeleniumBase on Facebook\" width=\"62\" /></a></span>\n</div></p>\n\n<p><div><b><a href=\"https://github.com/mdmintz\">https://github.com/mdmintz</a></b></div></p>\n\n<div><a href=\"https://github.com/seleniumbase/SeleniumBase/\"><img src=\"https://seleniumbase.github.io/cdn/img/super_logo_sb3.png\" title=\"SeleniumBase\" width=\"274\" /></a></div>\n<div><a href=\"https://seleniumbase.io\"><img src=\"https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg\" alt=\"SeleniumBase Docs\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-22BBCC.svg\" title=\"SeleniumBase\" /></a></div>\n<div><a href=\"https://github.com/seleniumbase/SeleniumBase\"><img src=\"https://img.shields.io/badge/tested%20with-SeleniumBase-04C38E.svg\" alt=\"Tested with SeleniumBase\" /></a> <a href=\"https://github.com/seleniumbase/SeleniumBase/stargazers\"><img src=\"https://img.shields.io/github/stars/seleniumbase/seleniumbase.svg?color=19A57B\" title=\"Stargazers\" /></a></div>\n<div><a href=\"https://hellogithub.com/repository/c6be2d0f1969448697683d11a4ff915e\" target=\"_blank\"><img src=\"https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=c6be2d0f1969448697683d11a4ff915e&claim_uid=xcrm4p9j3d6JCO5&theme=small\" alt=\"Featured｜HelloGitHub\" /></a> <a href=\"https://discord.gg/EdhQTn3EyE\" target=\"_blank\"><img src=\"https://img.shields.io/badge/join-discord-infomational\" alt=\"Join the SeleniumBase chat on Discord\"/></a> <a href=\"https://gitter.im/seleniumbase/SeleniumBase\" target=\"_blank\"><img src=\"https://img.shields.io/gitter/room/seleniumbase/SeleniumBase.svg\" alt=\"Gitter chat\"/></a></div>\n<div><a href=\"https://pepy.tech/project/seleniumbase\" target=\"_blank\"><img src=\"https://static.pepy.tech/badge/seleniumbase\" alt=\"SeleniumBase PyPI downloads\" /></a> <img src=\"https://views.whatilearened.today/views/github/seleniumbase/SeleniumBase.svg\" width=\"98px\" height=\"20px\" alt=\"Views\" /></div>\n<div align=\"left\"></div>\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3251953125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you've found a security vulnerability in SeleniumBase, (or a dependency we use), please open an issue.\n\n[github.com/seleniumbase/SeleniumBase/issues](https://github.com/seleniumbase/SeleniumBase/issues)\n\nPlease describe the results you're seeing, and the results you're expecting.\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0947265625,
          "content": "theme: jekyll-theme-cayman\ntitle: SeleniumBase\ndescription: Reliable Browser Automation & Testing"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 3.0283203125,
          "content": "# Test the SeleniumBase Python package with Azure Pipelines.\n# https://docs.microsoft.com/azure/devops/pipelines/languages/python\n\ntrigger:\n- master\n\njobs:\n\n- job: 'Test'\n  pool:\n    vmImage: 'Ubuntu-22.04'\n  strategy:\n    matrix:\n      Python3_7:\n        python.version: '3.7'\n      Python3_8:\n        python.version: '3.8'\n      Python3_9:\n        python.version: '3.9'\n      Python3_10:\n        python.version: '3.10'\n      Python3_11:\n        python.version: '3.11'\n    maxParallel: 5\n\n  steps:\n  - task: UsePythonVersion@0\n    inputs:\n      versionSpec: '$(python.version)'\n      architecture: 'x64'\n\n  - script: python -m pip install --upgrade pip && pip --version\n    displayName: 'Install/upgrade pip'\n\n  - script: python -m pip install seleniumbase\n    displayName: 'Verify install from PyPI'\n\n  #- script: python -m pip install -r requirements.txt --upgrade\n  #  displayName: 'Install dependencies'\n\n  - script: python -m pip install -e .\n    displayName: 'Install SeleniumBase'\n\n  - script: |\n      sudo apt install google-chrome-stable\n    displayName: 'Install Chrome'\n\n  #- script: |\n  #    sudo apt-get install firefox\n  #  displayName: 'Install Firefox'\n\n  - script: |\n      seleniumbase\n      sbase\n    displayName: 'Check the console scripts interface'\n\n  - script: |\n      seleniumbase install chromedriver\n    displayName: 'Install chromedriver'\n\n  - script: |\n      echo \"def test_1(): pass\" > nothing.py\n      pytest nothing.py\n    displayName: 'Make sure pytest is working'\n\n  #- script: python -m pytest examples/unit_tests/verify_framework.py\n  #  displayName: 'Run pytest verify_framework.py'\n\n  - script: python -m pytest examples/boilerplates/boilerplate_test.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml\n    displayName: 'Run pytest boilerplate_test.py --browser=chrome --headless'\n\n  #- script: python -m pytest examples/boilerplates/boilerplate_test.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml\n  #  displayName: 'Run pytest boilerplate_test.py --browser=firefox --headless'\n\n  #- script: python -m pytest examples/test_demo_site.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml\n  #  displayName: 'Run pytest test_demo_site.py --browser=chrome --headless'\n\n  #- script: python -m pytest examples/my_first_test.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml\n  #  displayName: 'Run pytest my_first_test.py --browser=chrome --headless'\n\n  #- script: python -m pytest examples/test_inspect_html.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml\n  #  displayName: 'Run pytest test_inspect_html.py --browser=chrome --headless'\n\n  - task: PublishTestResults@2\n    inputs:\n      testResultsFiles: '**/test-results.xml'\n      testRunTitle: 'Python $(python.version)'\n    condition: succeededOrFailed()\n\n#- job: 'Publish'\n#  dependsOn: 'Test'\n#  pool:\n#    vmImage: 'Ubuntu-22.04'\n\n#  steps:\n#  - task: UsePythonVersion@0\n#    inputs:\n#      versionSpec: '3.x'\n#      architecture: 'x64'\n\n#  - script: python setup.py sdist\n#    displayName: 'Build sdist'\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "help_docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.0888671875,
          "content": "#!/usr/bin/env bash\npip install -e . --use-pep517 --config-settings=\"editable_mode=compat\"\n"
        },
        {
          "name": "integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 8.220703125,
          "content": "# Project information\nsite_name: SeleniumBase Docs\nsite_url: https://seleniumbase.io\nsite_author: Michael Mintz\nsite_description: A complete framework for end-to-end testing with Python, pytest, behave-BDD, and WebDriver.\n# Repository information\nrepo_name: seleniumbase/SeleniumBase\nrepo_url: https://github.com/seleniumbase/SeleniumBase\nedit_uri: \"\"\nsite_dir: \"site\"\ndocs_dir: \"mkdocs_build\"\n# Copyright\ncopyright: Copyright &copy; 2014 - 2024 Michael Mintz\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - md_in_html\n  - tables\n  - toc:\n      permalink: true\n  - pymdownx.highlight:\n      linenums: false\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - pymdownx.inlinehilite\n  # - pymdownx.details\n  # - pymdownx.snippets\n# Configuration\ntheme:\n  name: material\n  logo: img/logo3c.png\n  favicon: img/green_logo3.png\n  language: en\n  include_homepage_in_sidebar: true\n  sticky_navigation: true\n  collapse_navigation: true\n  # titles_only: false\n  include_search_page: false\n  search_index_only: true\n  static_templates:\n    - 404.html\n  features:\n    # - search.highlight\n    # - toc.integrate\n    - toc.hide\n    # - navigation.indexes\n    - toc.follow\n    - navigation.sections\n    # - navigation.expand\n    # - navigation.tabs\n    - navigation.top\n    - navigation.tracking\n    - navigation.instant\n  palette:\n    scheme: default\n    primary: blue\n    accent: green\n  font:\n    text: Roboto\n    code: Roboto Mono\n  icon:\n    logo: img/sb_logo_10.png\n# Plugins\nplugins:\n  - search:\n      separator: '[\\s]+'\n      lang: en\n  - exclude-search:\n      exclude:\n        - CODE_OF_CONDUCT.md\n        - CONTRIBUTING.md\n        - SECURITY.md\n        - examples/case_summary.md\n        - examples/migration/raw_selenium/ReadMe.md\n        - help_docs/chinese.md\n        - integrations/katalon/ReadMe.md\n        - help_docs/ReadMe.md\n        - help_docs/verify_webdriver.md\n        - help_docs/webdriver_installation.md\n        - seleniumbase/masterqa/ReadMe.md\n        - seleniumbase/utilities/selenium_ide/ReadMe.md\n        - seleniumbase/examples/chart_maker/ReadMe.md\n  # - minify:\n  #     minify_html: true\n  #     minify_css: true\n  #     minify_js: true\n  - mkdocs-simple-hooks:\n      hooks:\n        on_pre_build: mkdocs_build.prepare:main\n# Page tree\nnav:\n  - ✅ SeleniumBase README: README.md\n  - 🏰 List of Features: help_docs/features_list.md\n  - 📚 Running Example Tests: examples/ReadMe.md\n  - 🎛️ Command Line Options: help_docs/customizing_test_runs.md\n  - 🌠 Console Scripts: seleniumbase/console_scripts/ReadMe.md\n  - 📊 Dashboard / Reports: examples/example_logs/ReadMe.md\n  - 🔡 Syntax Formats: help_docs/syntax_formats.md\n  - 🎖️ GUI / Commander: help_docs/commander.md\n  - 🔴 Recorder Mode: help_docs/recorder_mode.md\n  - 📘 API Reference: help_docs/method_summary.md\n  - Python Setup / Install:\n    - 🐉 Get Python, pip, & git: help_docs/install_python_pip_git.md\n    - ⚙️ Virtualenv Instructions: help_docs/virtualenv_instructions.md\n    - 🏄 Install SeleniumBase: help_docs/install.md\n    - 👁️ How it Works: help_docs/how_it_works.md\n  - JS Manager / JS Tools:\n    - 🕹️ Package Manager: help_docs/js_package_manager.md\n    - 🎦 Demo Mode: help_docs/demo_mode.md\n    - 🚎 Tour Maker: examples/tour_examples/ReadMe.md\n    - 🛂 Dialog Boxes: examples/dialog_boxes/ReadMe.md\n    - 🛂 MasterQA Mode: examples/master_qa/ReadMe.md\n    - 📶 Chart Maker: examples/chart_maker/ReadMe.md\n    - 🎞️ Presentation Maker: examples/presenter/ReadMe.md\n  - Integrations:\n    - 👤 UC Mode: help_docs/uc_mode.md\n    - 🐙 CDP Mode: examples/cdp_mode/ReadMe.md\n    - 🤖 GitHub CI: integrations/github/workflows/ReadMe.md\n    - 🛂 MasterQA: seleniumbase/masterqa/ReadMe.md\n    - 🗂️ Case Plans: help_docs/case_plans.md\n    - 📱 Mobile Mode: help_docs/mobile_testing.md\n    - 🌐 Selenium Grid: seleniumbase/utilities/selenium_grid/ReadMe.md\n    - 🖼️ Visual Testing: examples/visual_testing/ReadMe.md\n    - 🕵️ The HTML Inspector: help_docs/html_inspector.md\n    - 🤖 Azure Pipelines: integrations/azure/azure_pipelines/ReadMe.md\n    - 🤖 Jenkins on Azure: integrations/azure/jenkins/ReadMe.md\n    - 🤖 Jenkins on Google Cloud: integrations/google_cloud/ReadMe.md\n    - 🤖 NodeJS Test Runner: https://github.com/seleniumbase/SeleniumBase/tree/master/integrations/node_js\n  - Presentations:\n    - ✅ Core Presentation: https://seleniumbase.io/other/core_presentation.html\n    - 🎞️ Presenter Demo: https://seleniumbase.io/other/presenter.html\n    - 📊 Chart Maker Demo: https://seleniumbase.io/other/chart_presentation.html\n    - ⚙️ Python Virtual Envs: https://seleniumbase.io/other/py_virtual_envs.html\n    - 🔰 Fundamentals Demo: https://seleniumbase.io/other/fundamentals.html\n  - Demo Pages:\n    - 🍵 Coffee Cart (Test App): https://seleniumbase.io/coffee/\n    - 📑 Demo Page (Test Page): https://seleniumbase.io/demo_page\n    - 🔑 Simple App (Test Page): https://seleniumbase.io/simple/login\n    - 🔑 MFA Login (Test App): https://seleniumbase.io/realworld/login\n    - 📝 TinyMCE (Test Page): https://seleniumbase.io/tinymce/\n    - 🔢 Calculator (Test App): https://seleniumbase.io/apps/calculator\n    - 📱 Device Farm (Virtual): https://seleniumbase.io/devices/\n    - ⚠️ Error Page (Test Page): https://seleniumbase.io/error_page/\n    - ⚠️ Page with broken links: https://seleniumbase.io/other/broken_page\n    - ↔️ Drag & Drop (Test Page): https://seleniumbase.io/other/drag_and_drop\n    - 🖼️ Canvas Test Page One: https://seleniumbase.io/canvas/\n    - 🖼️ Canvas Test Page Two: https://seleniumbase.io/other/canvas\n    - 👤 Shadow DOM/Root Page: https://seleniumbase.io/other/shadow_dom\n    - 🖥️ SeleniumBase in iframe: https://seleniumbase.io/w3schools/sbase\n    - 🖥️ W3Schools Playground: https://seleniumbase.io/w3schools/\n    - 🖥️ W3Schools iframes: https://seleniumbase.io/w3schools/iframes\n    - 🗃️ W3Schools file upload: https://seleniumbase.io/w3schools/file_upload\n    - 🖲️ W3Schools doubleclick: https://seleniumbase.io/w3schools/double_click\n    - ↔️ W3Schools drag & drop: https://seleniumbase.io/w3schools/drag_drop\n    - ☑️ W3Schools checkboxes: https://seleniumbase.io/w3schools/checkboxes\n    - 🔘 W3Schools radio buttons: https://seleniumbase.io/w3schools/radio_buttons\n  - Pages with CAPTCHAs:\n    - 🔑 CF Turnstile Test: https://seleniumbase.io/apps/turnstile\n    - 🔑 CF Turnstile on Form: https://seleniumbase.io/apps/form_turnstile\n    - 🔐 reCAPTCHA v2 Test: https://seleniumbase.io/apps/recaptcha\n    - 🔐 reCAPTCHA v2 on Form: https://seleniumbase.io/apps/form_recaptcha\n    - 🔐 reCAPTCHA, invisible: https://seleniumbase.io/apps/invisible_recaptcha\n  - Additional Help Docs:\n    - 📑 Table of Contents: help_docs/ReadMe.md\n    - 🖼️ How to handle iframes: help_docs/handling_iframes.md\n    - 🔐 Decorators / Security: seleniumbase/common/ReadMe.md\n    - 🗂️ Case Plans (examples): examples/case_summary.md\n    - 🧭 Using Safari Driver: help_docs/using_safari_driver.md\n    - 🐳 Docker Start Guide: integrations/docker/ReadMe.md\n    - 👤 Shadow DOM Support: help_docs/shadow_dom.md\n    - 👥 macOS Hidden Files: help_docs/hidden_files_info.md\n    - 🗄️ MySQL Instructions: help_docs/mysql_installation.md\n    - 📃 Desired Capabilities: help_docs/desired_capabilities.md\n    - 📜 Useful grep commands: help_docs/useful_grep_commands.md\n    - ⚙️ Downloading drivers: help_docs/webdriver_installation.md\n    - ✅ Selenium Migration: examples/migration/raw_selenium/ReadMe.md\n    - ✔️ Verifying drivers: help_docs/verify_webdriver.md\n  - Behave-BDD Integration:\n    - 🐝 Behave-BDD ReadMe: examples/behave_bdd/ReadMe.md\n    - 🐝 Behave-BDD GUI App: help_docs/behave_gui.md\n  - Languages:\n    - 🌏 Translations: help_docs/translations.md\n    - 🐲 Chinese Docs: help_docs/chinese.md\n    - 🗾 Locale Codes: help_docs/locale_codes.md\n  - Other:\n    - 📺 YouTube Link: https://www.youtube.com/playlist?list=PLp9uKicxkBc5UIlGi2BuE3aWC7JyXpD3m\n    - 📋 Case Studies: help_docs/happy_customers.md\n    - 🙏 Thank You: help_docs/thank_you.md\n# Google Analytics\nextra:\n  analytics:\n    provider: google\n    property: G-P5KFWRNLRN\n    # property: UA-167313767-1\n# google_analytics: ['G-P5KFWRNLRN', 'seleniumbase.io']"
        },
        {
          "name": "mkdocs_build",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.2607421875,
          "content": "[build-system]\r\nrequires = [\"setuptools>=70.2.0\", \"wheel>=0.44.0\"]\r\nbuild-backend = \"setuptools.build_meta\"\r\n\r\n[project]\r\nname = \"seleniumbase\"\r\nreadme = \"README.md\"\r\ndynamic = [\r\n    \"version\",\r\n    \"license\",\r\n    \"authors\",\r\n    \"scripts\",\r\n    \"keywords\",\r\n    \"classifiers\",\r\n    \"description\",\r\n    \"maintainers\",\r\n    \"entry-points\",\r\n    \"dependencies\",\r\n    \"requires-python\",\r\n    \"optional-dependencies\",\r\n]\r\n\r\n[project.urls]\r\n\"Homepage\" = \"https://github.com/seleniumbase/SeleniumBase\"\r\n\"Changelog\" = \"https://github.com/seleniumbase/SeleniumBase/releases\"\r\n\"Download\" = \"https://pypi.org/project/seleniumbase/#files\"\r\n\"Blog\" = \"https://seleniumbase.com/\"\r\n\"Discord\" = \"https://discord.gg/EdhQTn3EyE\"\r\n\"PyPI\" = \"https://pypi.org/project/seleniumbase/\"\r\n\"Source\" = \"https://github.com/seleniumbase/SeleniumBase\"\r\n\"Repository\" = \"https://github.com/seleniumbase/SeleniumBase\"\r\n\"Documentation\" = \"https://seleniumbase.io/\"\r\n\r\n[tool.setuptools]\r\npackages = [\r\n    \"seleniumbase\",\r\n    \"sbase\",\r\n    \"seleniumbase.behave\",\r\n    \"seleniumbase.common\",\r\n    \"seleniumbase.config\",\r\n    \"seleniumbase.console_scripts\",\r\n    \"seleniumbase.core\",\r\n    \"seleniumbase.drivers\",\r\n    \"seleniumbase.extensions\",\r\n    \"seleniumbase.fixtures\",\r\n    \"seleniumbase.js_code\",\r\n    \"seleniumbase.masterqa\",\r\n    \"seleniumbase.plugins\",\r\n    \"seleniumbase.resources\",\r\n    \"seleniumbase.translate\",\r\n    \"seleniumbase.undetected\",\r\n    \"seleniumbase.undetected.cdp_driver\",\r\n    \"seleniumbase.utilities\",\r\n    \"seleniumbase.utilities.selenium_grid\",\r\n    \"seleniumbase.utilities.selenium_ide\",\r\n]\r\n\r\n[tool.pytest.ini_options]\r\naddopts = [\"--capture=tee-sys\", \"-p no:cacheprovider\"]\r\nnorecursedirs = [\".*\", \"build\", \"dist\", \"recordings\", \"temp\", \"assets\"]\r\nfilterwarnings = [\r\n    \"ignore::pytest.PytestWarning\",\r\n    \"ignore:.*U.*mode is deprecated:DeprecationWarning\",\r\n]\r\njunit_family = [\"legacy\"]\r\npython_files = [\"test_*.py\", \"*_test.py\", \"*_tests.py\", \"*_suite.py\"]\r\npython_classes = [\"Test*\", \"*Test*\", \"*Test\", \"*Tests\", \"*Suite\"]\r\npython_functions = [\"test_*\"]\r\nmarkers = [\r\n    \"marker1\", \"marker2\", \"marker3\", \"marker_test_suite\",\r\n    \"local\", \"remote\", \"offline\", \"expected_failure\",\r\n    \"qa\", \"ci\", \"e2e\", \"smoke\", \"ready\", \"master\", \"deploy\",\r\n    \"develop\", \"staging\", \"production\", \"release\", \"active\",\r\n]\r\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 1.4111328125,
          "content": "[pytest]\n\n# Display console output. Disable cacheprovider:\naddopts = --capture=tee-sys -p no:cacheprovider\n\n# Skip these directories during test collection:\nnorecursedirs = .* build dist recordings temp assets\n\n# Ignore DeprecationWarning, PytestUnknownMarkWarning\nfilterwarnings =\n    ignore::pytest.PytestWarning\n    ignore:.*U.*mode is deprecated:DeprecationWarning\n\n# Configure the junit_family option explicitly:\njunit_family = legacy\n\n# Set pytest discovery rules:\n# (Most of the rules here are similar to the default rules.)\n# (Inheriting unittest.TestCase could override these rules.)\npython_files = test_*.py *_test.py *_tests.py *_suite.py\npython_classes = Test* *Test* *Test *Tests *Suite\npython_functions = test_*\n\n# Common pytest markers used in examples:\n# (pytest may require marker registration to prevent warnings.)\n# (Future versions may turn those marker warnings into errors.)\nmarkers =\n    marker1: custom marker\n    marker2: custom marker\n    marker3: custom marker\n    marker_test_suite: custom marker\n    expected_failure: custom marker\n    local: custom marker\n    remote: custom marker\n    offline: custom marker\n    develop: custom marker\n    qa: custom marker\n    ci: custom marker\n    e2e: custom marker\n    ready: custom marker\n    smoke: custom marker\n    deploy: custom marker\n    active: custom marker\n    master: custom marker\n    release: custom marker\n    staging: custom marker\n    production: custom marker\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 1.93359375,
          "content": "pip>=24.3.1\npackaging>=24.2\nsetuptools~=70.2;python_version<\"3.10\"\nsetuptools>=75.8.0;python_version>=\"3.10\"\nwheel>=0.45.1\nattrs>=24.3.0\ncertifi>=2024.12.14\nexceptiongroup>=1.2.2\nwebsockets~=13.1;python_version<\"3.9\"\nwebsockets>=14.1;python_version>=\"3.9\"\nfilelock>=3.16.1\nfasteners>=0.19\nmycdp>=1.1.0\npynose>=1.5.3\nplatformdirs>=4.3.6\ntyping-extensions>=4.12.2\nsbvirtualdisplay>=1.4.0\nMarkupSafe==2.1.5;python_version<\"3.9\"\nMarkupSafe>=3.0.2;python_version>=\"3.9\"\nJinja2>=3.1.5\nsix>=1.17.0\nparse>=1.20.2\nparse-type>=0.6.4\ncolorama>=0.4.6\npyyaml>=6.0.2\npygments>=2.19.1\npyreadline3>=3.5.3;platform_system==\"Windows\"\ntabcompleter>=1.4.0\npdbp>=1.6.1\nidna==3.10\nchardet==5.2.0\ncharset-normalizer==3.4.1\nurllib3>=1.26.20,<2;python_version<\"3.10\"\nurllib3>=1.26.20,<2.4.0;python_version>=\"3.10\"\nrequests==2.32.3\nsniffio==1.3.1\nh11==0.14.0\noutcome==1.3.0.post0\ntrio==0.27.0;python_version<\"3.9\"\ntrio==0.28.0;python_version>=\"3.9\"\ntrio-websocket==0.11.1\nwsproto==1.2.0\nwebsocket-client==1.8.0\nselenium==4.27.1\ncssselect==1.2.0\nsortedcontainers==2.4.0\nexecnet==2.1.1\niniconfig==2.0.0\npluggy==1.5.0\npytest==8.3.4\npytest-html==4.0.2\npytest-metadata==3.1.1\npytest-ordering==0.6\npytest-rerunfailures==14.0;python_version<\"3.9\"\npytest-rerunfailures==15.0;python_version>=\"3.9\"\npytest-xdist==3.6.1\nparameterized==0.9.0\nbehave==1.2.6\nsoupsieve==2.6\nbeautifulsoup4==4.12.3\npyotp==2.9.0\npython-xlib==0.33;platform_system==\"Linux\"\nmarkdown-it-py==3.0.0\nmdurl==0.1.2\nrich==13.9.4\n\n# --- Testing Requirements --- #\n# (\"pip install -r requirements.txt\" also installs this, but \"pip install -e .\" won't.)\n\ncoverage>=7.6.1;python_version<\"3.9\"\ncoverage>=7.6.10;python_version>=\"3.9\"\npytest-cov>=5.0.0;python_version<\"3.9\"\npytest-cov>=6.0.0;python_version>=\"3.9\"\nflake8==5.0.4;python_version<\"3.9\"\nflake8==7.1.1;python_version>=\"3.9\"\nmccabe==0.7.0\npyflakes==2.5.0;python_version<\"3.9\"\npyflakes==3.2.0;python_version>=\"3.9\"\npycodestyle==2.9.1;python_version<\"3.9\"\npycodestyle==2.12.1;python_version>=\"3.9\"\n"
        },
        {
          "name": "sbase",
          "type": "tree",
          "content": null
        },
        {
          "name": "seleniumbase",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3466796875,
          "content": "[flake8]\n# W503 (line break before binary operator) can be ignored.\nexclude=recordings,temp\nignore=W503\n\n[nosetests]\n# nocapture=1 (Display print statements from output)\n#             (Undo this by using: \"--nologcapture\")\n# logging-level=INFO (Shorter logs than using DEBUG)\nnocapture=1\nlogging-level=INFO\n\n[behave]\nshow_skipped=false\nshow_timings=false\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 13.8896484375,
          "content": "\"\"\"Setup steps for installing SeleniumBase dependencies and plugins.\n(Uses selenium 4.x and is compatible with Python 3.8+)\"\"\"\nfrom setuptools import setup, find_packages  # noqa: F401\nimport os\nimport sys\n\n\nthis_dir = os.path.abspath(os.path.dirname(__file__))\nlong_description = None\ntotal_description = None\ntry:\n    with open(os.path.join(this_dir, \"README.md\"), \"rb\") as f:\n        total_description = f.read().decode(\"utf-8\")\n    description_lines = total_description.split(\"\\n\")\n    long_description_lines = []\n    for line in description_lines:\n        if not line.startswith(\"<meta \") and not line.startswith(\"<link \"):\n            long_description_lines.append(line)\n    long_description = \"\\n\".join(long_description_lines)\nexcept IOError:\n    long_description = \"A complete library for building end-to-end tests.\"\nabout = {}\n# Get the package version from the seleniumbase/__version__.py file\nwith open(os.path.join(this_dir, \"seleniumbase\", \"__version__.py\"), \"rb\") as f:\n    exec(f.read().decode(\"utf-8\"), about)\n\nif sys.argv[-1] == \"publish\":\n    reply = None\n    input_method = input\n    confirm_text = \">>> Confirm release PUBLISH to PyPI? (yes/no): \"\n    reply = str(input_method(confirm_text)).lower().strip()\n    if reply == \"yes\":\n        if sys.version_info < (3, 9):\n            print(\"\\nERROR! Publishing to PyPI requires Python>=3.9\")\n            sys.exit()\n        print(\"\\n*** Checking code health with flake8:\\n\")\n        os.system(\"python -m pip install 'flake8==7.1.1'\")\n        flake8_status = os.system(\"flake8 --exclude=recordings,temp\")\n        if flake8_status != 0:\n            print(\"\\nERROR! Fix flake8 issues before publishing to PyPI!\\n\")\n            sys.exit()\n        else:\n            print(\"*** No flake8 issues detected. Continuing...\")\n        print(\"\\n*** Removing existing distribution packages: ***\\n\")\n        os.system(\"rm -f dist/*.egg; rm -f dist/*.tar.gz; rm -f dist/*.whl\")\n        os.system(\"rm -rf build/bdist.*; rm -rf build/lib\")\n        print(\"\\n*** Installing build: *** (Required for PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'build'\")\n        print(\"\\n*** Installing pkginfo: *** (Required for PyPI uploads)\\n\")\n        os.system(\"python -m pip install 'pkginfo'\")\n        print(\"\\n*** Installing readme-renderer: *** (For PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'readme-renderer'\")\n        print(\"\\n*** Installing jaraco.classes: *** (For PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'jaraco.classes'\")\n        print(\"\\n*** Installing more-itertools: *** (For PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'more-itertools'\")\n        print(\"\\n*** Installing zipp: *** (Required for PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'zipp'\")\n        print(\"\\n*** Installing importlib-metadata: *** (For PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'importlib-metadata'\")\n        print(\"\\n*** Installing keyring, requests-toolbelt: *** (For PyPI)\\n\")\n        os.system(\"python -m pip install --upgrade keyring requests-toolbelt\")\n        print(\"\\n*** Installing twine: *** (Required for PyPI uploads)\\n\")\n        os.system(\"python -m pip install --upgrade 'twine'\")\n        print(\"\\n*** Rebuilding distribution packages: ***\\n\")\n        os.system(\"python -m build\")  # Create new tar/wheel\n        print(\"\\n*** Publishing The Release to PyPI: ***\\n\")\n        os.system(\"python -m twine upload dist/*\")  # Requires ~/.pypirc Keys\n        print(\"\\n*** The Release was PUBLISHED SUCCESSFULLY to PyPI! :) ***\\n\")\n    else:\n        print(\"\\n>>> The Release was NOT PUBLISHED to PyPI! <<<\\n\")\n    sys.exit()\n\nsetup(\n    name=\"seleniumbase\",\n    version=about[\"__version__\"],\n    description=\"A complete web automation framework for end-to-end testing.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/seleniumbase/SeleniumBase\",\n    project_urls={\n        \"Homepage\": \"https://github.com/seleniumbase/SeleniumBase\",\n        \"Changelog\": \"https://github.com/seleniumbase/SeleniumBase/releases\",\n        \"Download\": \"https://pypi.org/project/seleniumbase/#files\",\n        \"Blog\": \"https://seleniumbase.com/\",\n        \"Discord\": \"https://discord.gg/EdhQTn3EyE\",\n        \"PyPI\": \"https://pypi.org/project/seleniumbase/\",\n        \"Source\": \"https://github.com/seleniumbase/SeleniumBase\",\n        \"Repository\": \"https://github.com/seleniumbase/SeleniumBase\",\n        \"Documentation\": \"https://seleniumbase.io/\",\n    },\n    platforms=[\"Windows\", \"Linux\", \"Mac OS-X\"],\n    author=\"Michael Mintz\",\n    author_email=\"mdmintz@gmail.com\",\n    maintainer=\"Michael Mintz\",\n    license=\"MIT\",\n    keywords=[\n        \"pytest\",\n        \"selenium\",\n        \"framework\",\n        \"automation\",\n        \"browser\",\n        \"testing\",\n        \"webdriver\",\n        \"seleniumbase\",\n        \"sbase\",\n        \"crawling\",\n        \"scraping\",\n    ],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Environment :: MacOS X\",\n        \"Environment :: Win32 (MS Windows)\",\n        \"Environment :: Web Environment\",\n        \"Framework :: Pytest\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n        \"Topic :: Internet\",\n        \"Topic :: Internet :: WWW/HTTP :: Browsers\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        \"Topic :: Scientific/Engineering :: Image Processing\",\n        \"Topic :: Scientific/Engineering :: Visualization\",\n        \"Topic :: Software Development\",\n        \"Topic :: Software Development :: Quality Assurance\",\n        \"Topic :: Software Development :: Code Generators\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Software Development :: Testing\",\n        \"Topic :: Software Development :: Testing :: Acceptance\",\n        \"Topic :: Software Development :: Testing :: Traffic Generation\",\n        \"Topic :: Utilities\",\n    ],\n    python_requires=\">=3.8\",\n    install_requires=[\n        'pip>=24.3.1',\n        'packaging>=24.2',\n        'setuptools~=70.2;python_version<\"3.10\"',  # Newer ones had issues\n        'setuptools>=75.8.0;python_version>=\"3.10\"',\n        'wheel>=0.45.1',\n        'attrs>=24.3.0',\n        \"certifi>=2024.12.14\",\n        \"exceptiongroup>=1.2.2\",\n        'websockets~=13.1;python_version<\"3.9\"',\n        'websockets>=14.1;python_version>=\"3.9\"',\n        'filelock>=3.16.1',\n        'fasteners>=0.19',\n        \"mycdp>=1.1.0\",\n        \"pynose>=1.5.3\",\n        'platformdirs>=4.3.6',\n        'typing-extensions>=4.12.2',\n        \"sbvirtualdisplay>=1.4.0\",\n        'MarkupSafe==2.1.5;python_version<\"3.9\"',\n        'MarkupSafe>=3.0.2;python_version>=\"3.9\"',\n        \"Jinja2>=3.1.5\",\n        \"six>=1.17.0\",\n        'parse>=1.20.2',\n        'parse-type>=0.6.4',\n        'colorama>=0.4.6',\n        'pyyaml>=6.0.2',\n        'pygments>=2.19.1',\n        'pyreadline3>=3.5.3;platform_system==\"Windows\"',\n        \"tabcompleter>=1.4.0\",\n        \"pdbp>=1.6.1\",\n        \"idna==3.10\",\n        'chardet==5.2.0',\n        'charset-normalizer==3.4.1',\n        'urllib3>=1.26.20,<2;python_version<\"3.10\"',\n        'urllib3>=1.26.20,<2.4.0;python_version>=\"3.10\"',\n        'requests==2.32.3',\n        'sniffio==1.3.1',\n        'h11==0.14.0',\n        'outcome==1.3.0.post0',\n        'trio==0.27.0;python_version<\"3.9\"',\n        'trio==0.28.0;python_version>=\"3.9\"',\n        'trio-websocket==0.11.1',\n        'wsproto==1.2.0',\n        'websocket-client==1.8.0',\n        'selenium==4.27.1',\n        'cssselect==1.2.0',\n        \"sortedcontainers==2.4.0\",\n        'execnet==2.1.1',\n        'iniconfig==2.0.0',\n        'pluggy==1.5.0',\n        'pytest==8.3.4',\n        \"pytest-html==4.0.2\",  # Newer ones had issues\n        'pytest-metadata==3.1.1',\n        \"pytest-ordering==0.6\",\n        'pytest-rerunfailures==14.0;python_version<\"3.9\"',\n        'pytest-rerunfailures==15.0;python_version>=\"3.9\"',\n        'pytest-xdist==3.6.1',\n        'parameterized==0.9.0',\n        \"behave==1.2.6\",\n        'soupsieve==2.6',\n        \"beautifulsoup4==4.12.3\",\n        'pyotp==2.9.0',\n        'python-xlib==0.33;platform_system==\"Linux\"',\n        'markdown-it-py==3.0.0',\n        'mdurl==0.1.2',\n        'rich==13.9.4',\n    ],\n    extras_require={\n        # pip install -e .[allure]\n        # Usage: pytest --alluredir=allure_results\n        # Serve: allure serve allure_results\n        \"allure\": [\n            'allure-pytest>=2.13.5',\n            'allure-python-commons>=2.13.5',\n            'allure-behave>=2.13.5',\n        ],\n        # pip install -e .[coverage]\n        # Usage: coverage run -m pytest; coverage html; coverage report\n        \"coverage\": [\n            'coverage>=7.6.1;python_version<\"3.9\"',\n            'coverage>=7.6.10;python_version>=\"3.9\"',\n            'pytest-cov>=5.0.0;python_version<\"3.9\"',\n            'pytest-cov>=6.0.0;python_version>=\"3.9\"',\n        ],\n        # pip install -e .[flake8]\n        # Usage: flake8\n        \"flake8\": [\n            'flake8==5.0.4;python_version<\"3.9\"',\n            'flake8==7.1.1;python_version>=\"3.9\"',\n            \"mccabe==0.7.0\",\n            'pyflakes==2.5.0;python_version<\"3.9\"',\n            'pyflakes==3.2.0;python_version>=\"3.9\"',\n            'pycodestyle==2.9.1;python_version<\"3.9\"',\n            'pycodestyle==2.12.1;python_version>=\"3.9\"',\n        ],\n        # pip install -e .[ipdb]\n        # (Not needed for debugging anymore. SeleniumBase now includes \"pdbp\".)\n        \"ipdb\": [\n            \"ipdb==0.13.13\",\n            'ipython==7.34.0',\n        ],\n        # pip install -e .[mss]\n        # (An optional library for tile_windows() in CDP Mode.)\n        \"mss\": [\n            \"mss==9.0.2\",  # Next one drops Python 3.8/3.9\n        ],\n        # pip install -e .[pdfminer]\n        # (An optional library for parsing PDF files.)\n        \"pdfminer\": [\n            'pdfminer.six==20240706',\n            'cryptography==39.0.2;python_version<\"3.9\"',\n            'cryptography==44.0.0;python_version>=\"3.9\"',\n            'cffi==1.17.1',\n            \"pycparser==2.22\",\n        ],\n        # pip install -e .[pillow]\n        # (An optional library for image-processing.)\n        \"pillow\": [\n            'Pillow>=10.4.0;python_version<\"3.9\"',\n            'Pillow>=11.1.0;python_version>=\"3.9\"',\n        ],\n        # pip install -e .[pip-system-certs]\n        # (If you see [SSL: CERTIFICATE_VERIFY_FAILED], then get this.)\n        # (May help those with corporate self-signed certs on Windows.)\n        \"pip-system-certs\": [\n            'pip-system-certs==4.0;platform_system==\"Windows\"',\n        ],\n        # pip install -e .[proxy]\n        # Usage: proxy\n        # (That starts a proxy server on \"127.0.0.1:8899\".)\n        \"proxy\": [\n            \"proxy.py==2.4.3\",  # 2.4.4 did not have \"Listening on ...\"\n        ],\n        # pip install -e .[psutil]\n        \"psutil\": [\n            \"psutil==6.0.0\",\n        ],\n        # pip install -e .[pyautogui]\n        \"pyautogui\": [\n            \"PyAutoGUI==0.9.54\",\n        ],\n        # pip install -e .[selenium-stealth]\n        \"selenium-stealth\": [\n            'selenium-stealth==1.0.6',\n        ],\n        # pip install -e .[selenium-wire]\n        \"selenium-wire\": [\n            'selenium-wire==5.1.0',\n            'pyOpenSSL==24.2.1',\n            'pyparsing>=3.1.4',\n            'Brotli==1.1.0',\n            'blinker==1.7.0',  # Newer ones had issues\n            'h2==4.1.0',\n            'hpack==4.0.0',\n            'hyperframe==6.0.1',\n            'kaitaistruct==0.10',\n            'pyasn1==0.6.1',\n            'zstandard==0.23.0',\n        ],\n    },\n    packages=[\n        \"seleniumbase\",\n        \"sbase\",\n        \"seleniumbase.behave\",\n        \"seleniumbase.common\",\n        \"seleniumbase.config\",\n        \"seleniumbase.console_scripts\",\n        \"seleniumbase.core\",\n        \"seleniumbase.drivers\",\n        \"seleniumbase.extensions\",\n        \"seleniumbase.fixtures\",\n        \"seleniumbase.js_code\",\n        \"seleniumbase.masterqa\",\n        \"seleniumbase.plugins\",\n        \"seleniumbase.resources\",\n        \"seleniumbase.translate\",\n        \"seleniumbase.undetected\",\n        \"seleniumbase.undetected.cdp_driver\",\n        \"seleniumbase.utilities\",\n        \"seleniumbase.utilities.selenium_grid\",\n        \"seleniumbase.utilities.selenium_ide\",\n    ],\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\n            \"seleniumbase = seleniumbase.console_scripts.run:main\",\n            \"sbase = seleniumbase.console_scripts.run:main\",  # Simplified name\n        ],\n        \"nose.plugins\": [\n            \"base_plugin = seleniumbase.plugins.base_plugin:Base\",\n            \"selenium = seleniumbase.plugins.selenium_plugin:SeleniumBrowser\",\n            \"page_source = seleniumbase.plugins.page_source:PageSource\",\n            \"screen_shots = seleniumbase.plugins.screen_shots:ScreenShots\",\n            \"test_info = seleniumbase.plugins.basic_test_info:BasicTestInfo\",\n            (\n                \"db_reporting = \"\n                \"seleniumbase.plugins.db_reporting_plugin:DBReporting\"\n            ),\n            \"s3_logging = seleniumbase.plugins.s3_logging_plugin:S3Logging\",\n        ],\n        \"pytest11\": [\"seleniumbase = seleniumbase.plugins.pytest_plugin\"],\n    },\n)\n\n# print(os.system(\"cat seleniumbase.egg-info/PKG-INFO\"))\nprint(\"\\n*** SeleniumBase Installation Complete! ***\\n\")\n"
        },
        {
          "name": "virtualenv_install.sh",
          "type": "blob",
          "size": 1.4697265625,
          "content": "# Performs necessary setup steps to allow the use of\n# virtualenv commands such as \"mkvirtualenv [ENV_NAME]\"\n# for creating and using Python virtual environments.\n#\n# Run by using the following command: \"source virtualenv_install.sh\"\n\n[[ $0 != \"$BASH_SOURCE\" ]] && sourced=1 || sourced=0\nif [ $sourced = 1 ]\nthen\n  python3 -m pip install --upgrade pip setuptools wheel\n  python3 -m pip install --upgrade virtualenvwrapper --upgrade-strategy=eager\n  export WORKON_HOME=$HOME/.virtualenvs\n  source `which virtualenvwrapper.sh`\n  echo \"\"\n  echo \"\"\n  echo \"*** You may now use virtualenv commands in your command shell. ***\"\n  echo \"\"\n  echo \"virtualenv commands:\"\n  echo '  *  \"mkvirtualenv [ENV_NAME]\"  -  Create a Python virtual environment'\n  echo '  *  \"deactivate\"               -  Exit the current virtual environment'\n  echo '  *  \"workon [ENV_NAME]\"        -  Enter an existing virtual environment'\n  echo '  *  \"lsvirtualenv\" OR \"workon\" -  List all virtual environments'\n  echo '  *  \"rmvirtualenv [ENV_NAME]\"  -  Delete a virtual environment'\n  echo \"\"\n  echo \"Example:\"\n  echo \"      mkvirtualenv seleniumbase \"\n  echo \"      mkvirtualenv seleniumbase --python=[PATH_TO_PYTHON]\"\n  echo \"\"\nelse\n  echo \"\"\n  echo \"--------------------\"\n  echo '*** - WARNING! - ***'\n  echo \"--------------------\"\n  echo \"\"\n  echo 'You need to \"source\" this file for virtualenv commands to work!'\n  echo \"\"\n  echo '*** USE:  source virtualenv_install.sh'\n  echo \"          ----------------------------\"\n  echo \"\"\nfi\n"
        },
        {
          "name": "win_install.bat",
          "type": "blob",
          "size": 0.0791015625,
          "content": "@ECHO OFF\npip install -e . --use-pep517 --config-settings=\"editable_mode=compat\"\n"
        },
        {
          "name": "win_virtualenv.bat",
          "type": "blob",
          "size": 0.921875,
          "content": "@ECHO OFF\n:: Performs necessary setup steps to allow the use of\n:: virtualenv commands such as \"mkvirtualenv [ENV_NAME]\"\n:: for creating and using Python virtual environments.\n\npy -m pip install --upgrade pip --user\npy -m pip install --upgrade wheel --user\npy -m pip install virtualenvwrapper-win --force-reinstall --user\necho:\necho:\necho: *** You may now use virtualenv commands in your command shell. ***\necho:\necho: virtualenv commands:\necho:   *  \"mkvirtualenv [ENV_NAME]\"  -  Create a Python virtual environment\necho:   *  \"deactivate\"               -  Exit the current virtual environment\necho:   *  \"workon [ENV_NAME]\"        -  Enter an existing virtual environment\necho:   *  \"lsvirtualenv\" OR \"workon\" -  List all virtual environments\necho:   *  \"rmvirtualenv [ENV_NAME]\"  -  Delete a virtual environment\necho:\necho: Example:\necho:       mkvirtualenv seleniumbase\necho:       mkvirtualenv seleniumbase --python=[PATH_TO_PYTHON]\necho:\n"
        }
      ]
    }
  ]
}