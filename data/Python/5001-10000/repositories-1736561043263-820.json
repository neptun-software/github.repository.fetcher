{
  "metadata": {
    "timestamp": 1736561043263,
    "page": 820,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huangsam/ultimate-python",
      "stars": 5140,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2138671875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{py,toml}]\nindent_size = 4\nindent_style = space\n\n[*.{xml,yaml,yml}]\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1513671875,
          "content": "# System\n.DS_Store\n\n# IDE\n.idea/\n.vscode/\n\n# Python\n*.pyc\n.coverage\ncoverage.json\ncoverage.xml\n*.egg-info/\n.ruff_cache/\n__pycache__/\nbuild/\nhtmlcov/\nvenv/\n"
        },
        {
          "name": ".replit",
          "type": "blob",
          "size": 0.044921875,
          "content": "language = \"python3\"\nrun = \"python runner.py\"\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at samhuang91@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.8896484375,
          "content": "# 🚀 Welcome to the Ultimate Python Study Guide! 📚\n\n🎉 Thank you for considering contributing to this awesome project! 🎉\n\nBut first, before you jump in, let's vibe with our [Code of Conduct](CODE_OF_CONDUCT.md). We want this space to be 🌈 inclusive, respectful, and nothing but fun!\n\n## 🐍 What's This All About?\n\nOur Python Study Guide is your ticket to Python mastery! 🐍 This place is all about energy, excitement, and pure Python magic. 💫\n\n## 📖 Let's Talk Documentation\n\nOur README is like the opening act at a concert. It's where the party starts, and we want it to be sensational! Here are the keys to this performance:\n\n- Translations? 🌍 Yes, they're right at the top for everyone to enjoy!\n- Python modules? 🤓 Oh, they've got a VIP seat in our Table of Contents (ToC).\n- External links? 🔗 They're all about HTTPS and that sweet `2xx` status.\n- Python documentation? For both newbies and wizards, it's all in here!\n- GitHub repositories? 🌟 We love stars! If it's got at least 1k stars, bring it on!\n- Practice resources? 🏋️‍♂️ We've got Python exercises to keep you in shape.\n\n## 📚 Get into Python Modules\n\nOur Python modules are like mini-python-parties that you can host anywhere! They're packed with energy and make learning a blast! 🎉\n\n### 🧩 The Setup\n\nEach Python module follows a rock-solid structure:\n\n```python\n# The main event 🎉\ndef main():\n    # Here's where the magic happens!\n    assert 1 + 1 == 2\n    assert True is not False\n\n# The show must go on\nif __name__ == \"__main__\":\n    main()\n```\n\nIf there's more Python goodness, it's up front before the main event!\n\n### ✨ Style and Shine\n\nWe've got style, oh baby! Check out the PEPs:\n\n- [PEP 8](https://www.python.org/dev/peps/pep-0008) - Our fashion bible!\n- [PEP 257](https://www.python.org/dev/peps/pep-0257) - Docstring Glamour!\n\nBut there's more! We have our own style:\n\n- Imports are perfectly sorted with [isort](https://github.com/timothycrosley/isort).\n- Constants? They follow the `_UNDER_SCORE_FIRST` party rule.\n- Strings love double-quotes, but if there's a `\"`, they'll use single quotes!\n- For dynamic strings, it's all about those fabulous f-strings! 🎤\n\n### 📈 Code Coverage Stars\n\nWe like to keep the energy high, and that means every module should have a whopping 80-100% code coverage! Our modules are like dance floors, and we don't want any empty spaces. That's because each module is a standalone lesson, and the `main` function is where the magic happens.\n\n## 🌟 Your Contribution\n\nYour contributions are like the encore at a concert - they're a big deal! We appreciate your dedication to making this project even more amazing. Don't hesitate to reach out if you have any questions. Your contributions, no matter how small, are making a big difference in the Python learning world!\n\nSo, get ready to rock and roll, Python style! 🤘🐍💥\n\n# 💥 Dive into the Python World\n\nPython is a versatile language used in web development, data analysis, artificial intelligence, and more. As a contributor, you're joining a vibrant community of learners and mentors.\n\n# 🧑‍💻 Learning Together\n\nOur project isn't just a repository; it's a collaborative learning experience. You can learn from the contributions of others and share your Python wisdom with the world. Together, we can unlock the true potential of this fantastic language.\n\n# 🚀 Opportunities Galore\n\nWhen you contribute to this project, you're not just improving it; you're also enhancing your own skills. You might discover new Python tricks, learn more about best practices, and even find inspiration for your own projects.\n\n# 🌍 Global Impact\n\nPython is a worldwide phenomenon, and your contributions will impact Python enthusiasts globally. Your work can help someone on the other side of the planet learn Python, kickstart their career, or solve a problem they've been struggling with.\n\n# 🙋‍♀️ Join a Supportive Community\n\nOur community is welcoming and supportive. If you have questions or need guidance, don't hesitate to ask. We're all here to help each other and grow together.\n\n# 📢 Your Voice Matters\n\nYour unique perspective is valuable. If you have ideas to make this guide even more engaging or fun, share them with us! We're open to creative and innovative suggestions.\n\n# 🤖 Evolving with Python\n\nPython is constantly evolving, and so is our guide. You can help keep it up-to-date, ensuring that learners always have access to the latest Python features and best practices.\n\n# 🎉 Your Contribution Matters\n\nYour contributions, whether they are big or small, are the building blocks of our project's success. Together, we're creating a resource that makes Python more accessible and exciting.\n\n# 🌟 Be a Python Star\n\nBy contributing to this project, you're becoming a Python star, and you're helping others shine brightly too. Let's light up the Python world together!\n\n## How to Contribute\n\nReady to dive in? Here's how you can contribute:\n\n1. **Fork the Repository**: Head to [https://github.com/huangsam/ultimate-python/](https://github.com/huangsam/ultimate-python/) and click the \"Fork\" button in the top right corner.\n\n2. **Clone Your Fork**: After forking, you'll have your copy of the repository. Clone it to your local machine.\n\n3. **Make Your Contributions**: Create or update Python modules, documentation, or anything that adds value to the project.\n\n4. **Push Your Changes**: Once your work is ready, push your changes to your forked repository.\n\n5. **Create a Pull Request**: Head back to the original repository (https://github.com/huangsam/ultimate-python/) and create a pull request. Describe your changes and let us know why they're awesome.\n\nWe're excited to see what you bring to the table! Your contributions are making the Python world a better place.\n\nPlease don't hesitate to reach out if you have any questions. Your contributions, no matter how small, are making a big difference! 🌟🐍💥\n\n## Feel the Pythonic Energy - Contribute Now!🔥\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020 Samuel Huang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.de.md",
          "type": "blob",
          "size": 9.8837890625,
          "content": "# Ultimativer Python-Lernführer\n\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/ultimate-python/ci.yml)](https://github.com/huangsam/ultimate-python/actions)\n[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/ultimate-python)](https://codecov.io/gh/huangsam/ultimate-python)\n[![Quality Gate Status](https://img.shields.io/sonar/quality_gate/huangsam_ultimate-python?server=https%3A%2F%2Fsonarcloud.io)](https://sonarcloud.io/dashboard?id=huangsam_ultimate-python)\n[![License](https://img.shields.io/github/license/huangsam/ultimate-python)](https://github.com/huangsam/ultimate-python/blob/main/LICENSE)\n[![r/Python](https://img.shields.io/badge/reddit-original_post-red)](https://www.reddit.com/r/Python/comments/inllmf/ultimate_python_study_guide/)\n\nDer ultimative Python-Lernführer für Einsteiger und Profis gleichermaßen. 🐍 🐍 🐍\n\n```python\nprint(\"Ultimativer Python-Lernführer\")\n```\n\n[English](README.md) |\n[한국어](README.ko.md) |\n[繁体中文](README.zh_tw.md) |\n[Español](README.es.md) |\n[Deutsch](README.de.md) |\n[हिन्दी](README.hi.md)\n\n## Motivation\n\nIch habe dieses GitHub-Repository erstellt, um meine Erkenntnisse über [core Python](https://www.python.org/)\nin den letzten 5 Jahren als Hochschulabsolvent, Angestellter in\ngroßen Unternehmen und als Open-Source-Mitarbeiter von Repositories wie\n[Celery](https://github.com/celery/celery) und\n[Full Stack Python](https://github.com/mattmakai/fullstackpython.com) weiterzugeben.\nIch freue mich darauf, dass noch mehr Menschen Python lernen und damit ihren Leidenschaften nachgehen. 🎓\n\n## Ziele\n\nDies sind die Hauptziele bei der Erstellung dieses Leitfadens:\n\n🏆 **Als Ressource fungieren** für Python-Neulinge, die es vorziehen, praktisch zu lernen.\nDieses Repository enthält eine Sammlung von eigenständigen Modulen, die in einer IDE\nwie [PyCharm](https://www.jetbrains.com/pycharm/) und im Browser wie\n[Replit](https://replit.com/languages/python3). Wleches wie ein einfaches Terminal\nmit den Beispielen funktioniert. Die meisten Zeilen haben sorgfältig ausgearbeitete Kommentare, die den Leser\nSchritt für Schritt durch das Programm führen. Die Benutzer werden ermutigt, den\nQuellcode überall zu ändern, solange die \"Haupt\"-Routinen nicht gelöscht werden und\n[run successfully](runner.py) nach jeder Änderung.\n\n🏆 **Als reiner Leitfaden dienen** für diejenigen, die die wichtigsten Python-Konzepte wiederholen möchten.\nWo nur [builtin libraries](https://docs.python.org/3/library/) genutzt werden, so dass\ndiese Konzepte ohne den Overhead der bereichsspezifischen Konzepte vermittelt werden können. Als\nbeliebte Open-Source-Bibliotheken und -Frameworks (d.h. `sqlalchemy`, `requests`,\n`pandas`) nicht installiert sind. Das Lesen des Quellcodes dieser Frameworks ist jedoch\ninspirierend und wird dringend empfohlen, wenn Sie ein echter Profi werden wollen.\n[Pythonista](https://www.urbandictionary.com/define.php?term=pythonista).\n\n## Erste Schritte\n\n[![Run on Replit](https://replit.com/badge/github/huangsam/ultimate-python)](https://replit.com/github/huangsam/ultimate-python)\n\nKlicken Sie auf das obige Abzeichen, um eine Arbeitsumgebung im Browser zu starten, ohne\nohne dass Sie Git und Python auf Ihrem lokalen Rechner installiert haben müssen. Wenn diese Voraussetzungen\nbereits erfüllt sind, können Sie das Repository direkt klonen.\n\nSobald das Repository zugänglich ist, können Sie mit den eigenständigen\nModulen lernen. Um den größtmöglichen Nutzen aus jedem Modul zu ziehen, lesen Sie den Modulcode und führen Sie ihn aus.\nEs gibt zwei Möglichkeiten, die Module auszuführen:\n\n1. Führen Sie ein einzelnes Modul aus: `python ultimatepython/syntax/variable.py`\n2. Führen Sie alle Module aus: `python runner.py`\n\n## Inhaltsübersicht\n\n📚 = Externe Ressource,\n🍰 = Thema für Anfänger,\n🤯 = Fortgeschrittenes Thema\n\n1. **Über Python**\n    - Overview: [What is Python](https://github.com/trekhleb/learn-python/blob/master/src/getting_started/what_is_python.md) ( 📚, 🍰 )\n    - Design philosophy: [The Zen of Python](https://www.python.org/dev/peps/pep-0020/) ( 📚 )\n    - Style guide: [Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/) ( 📚, 🤯 )\n    - Data model: [Data model](https://docs.python.org/3/reference/datamodel.html) ( 📚, 🤯 )\n    - Standard library: [The Python Standard Library](https://docs.python.org/3/library/) ( 📚, 🤯 )\n    - Built-in functions: [Built-in Functions](https://docs.python.org/3/library/functions.html) ( 📚 )\n2. **Syntax**\n    - Variable: [Built-in literals](ultimatepython/syntax/variable.py) ( 🍰 )\n    - Expression: [Numeric operations](ultimatepython/syntax/expression.py) ( 🍰 )\n    - Bitwise: [Bitwise operators](ultimatepython/syntax/bitwise.py) ( 🍰 ), [One's/Two's Complement](https://www.geeksforgeeks.org/difference-between-1s-complement-representation-and-2s-complement-representation-technique/) ( 📚 )\n    - Conditional: [if | if-else | if-elif-else](ultimatepython/syntax/conditional.py) ( 🍰 )\n    - Loop: [for-loop | while-loop](ultimatepython/syntax/loop.py) ( 🍰 )\n    - Function: [def | lambda](ultimatepython/syntax/function.py) ( 🍰 )\n3. **Daten-Strukturen**\n    - List: [List operations](ultimatepython/data_structures/list.py) ( 🍰 )\n    - Tuple: [Tuple operations](ultimatepython/data_structures/tuple.py)\n    - Set: [Set operations](ultimatepython/data_structures/set.py)\n    - Dict: [Dictionary operations](ultimatepython/data_structures/dict.py) ( 🍰 )\n    - Comprehension: [list | tuple | set | dict](ultimatepython/data_structures/comprehension.py)\n    - String: [String operations](ultimatepython/data_structures/string.py) ( 🍰 )\n    - Deque: [deque](ultimatepython/data_structures/deque.py) ( 🤯 )\n    - Namedtuple: [namedtuple](ultimatepython/data_structures/namedtuple.py) ( 🤯 )\n    - Defaultdict: [defaultdict](ultimatepython/data_structures/defaultdict.py) ( 🤯 )\n    - Time complexity: [cPython operations](https://wiki.python.org/moin/TimeComplexity) ( 📚, 🤯 )\n4. **Klassen**\n    - Basic class: [Basic definition](ultimatepython/classes/basic_class.py) ( 🍰 )\n    - Inheritance: [Inheritance](ultimatepython/classes/inheritance.py) ( 🍰 )\n    - Abstract class: [Abstract definition](ultimatepython/classes/abstract_class.py)\n    - Exception class: [Exception definition](ultimatepython/classes/exception_class.py)\n    - Iterator class: [Iterator definition | yield](ultimatepython/classes/iterator_class.py) ( 🤯 )\n    - Encapsulation: [Encapsulation definition](ultimatepython/classes/encapsulation.py)\n5. **Fortgeschrittene**\n    - Decorator: [Decorator definition | wraps](ultimatepython/advanced/decorator.py) ( 🤯 )\n    - File Handling: [File Handling](ultimatepython/advanced/file_handling.py) ( 🤯 )\n    - Context manager: [Context managers](ultimatepython/advanced/context_manager.py) ( 🤯 )\n    - Method resolution order: [mro](ultimatepython/advanced/mro.py) ( 🤯 )\n    - Mixin: [Mixin definition](ultimatepython/advanced/mixin.py) ( 🤯 )\n    - Metaclass: [Metaclass definition](ultimatepython/advanced/meta_class.py) ( 🤯 )\n    - Thread: [ThreadPoolExecutor](ultimatepython/advanced/thread.py) ( 🤯 )\n    - Asyncio: [async | await](ultimatepython/advanced/async.py) ( 🤯 )\n    - Weak reference: [weakref](ultimatepython/advanced/weak_ref.py) ( 🤯 )\n    - Benchmark: [cProfile | pstats](ultimatepython/advanced/benchmark.py) ( 🤯 )\n    - Mocking: [MagicMock | PropertyMock | patch](ultimatepython/advanced/mocking.py) ( 🤯 )\n    - Regular expression: [search | findall | match | fullmatch](ultimatepython/advanced/regex.py) ( 🤯 )\n    - Data format: [json | xml | csv](ultimatepython/advanced/data_format.py) ( 🤯 )\n    - Datetime: [datetime | timezone](ultimatepython/advanced/date_time.py) ( 🤯 )\n\n## Zusätzliche Ressourcen\n\n👔 = Interview-Ressource,\n🧪 = Code-Beispiele,\n🧠 = Projektideen\n\n### GitHub repositories\n\nLernen Sie weiter, indem Sie von anderen Quellen lesen.\n\n- [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python) ( 👔, 🧪 )\n- [faif/python-patterns](https://github.com/faif/python-patterns) ( 👔, 🧪 )\n- [geekcomputers/Python](https://github.com/geekcomputers/Python) ( 🧪 )\n- [trekhleb/homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) ( 🧪 )\n- [karan/Projects](https://github.com/karan/Projects) ( 🧠 )\n- [MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners) ( 🧠 )\n- [vinta/awesome-python](https://github.com/vinta/awesome-python)\n- [academic/awesome-datascience](https://github.com/academic/awesome-datascience)\n- [josephmisiti/awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning)\n- [ZuzooVn/machine-learning-for-software-engineers](https://github.com/ZuzooVn/machine-learning-for-software-engineers)\n- [30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python) ( 🧪 )\n- [ml-tooling/best-of-python](https://github.com/ml-tooling/best-of-python)\n- [practical-tutorials/project-based-learning](https://github.com/practical-tutorials/project-based-learning#python)\n- [freeCodeCamp/freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) ( 👔 )\n\n### Interaktive Übungen\n\nÜben Sie weiter, damit Ihre Programmierkenntnisse nicht einrosten.\n\n- [codechef.com](https://www.codechef.com/) ( 👔 )\n- [codeforces.com](https://codeforces.com/)\n- [codementor.io](https://www.codementor.io) ( 🧠 )\n- [coderbyte.com](https://www.coderbyte.com/) ( 👔 )\n- [codewars.com](https://www.codewars.com/)\n- [exercism.io](https://exercism.io/)\n- [geeksforgeeks.org](https://www.geeksforgeeks.org/) ( 👔 )\n- [hackerearth.com](https://www.hackerearth.com/)\n- [hackerrank.com](https://www.hackerrank.com/) ( 👔 )\n- [kaggle.com](https://www.kaggle.com/) ( 🧠 )\n- [leetcode.com](https://leetcode.com/) ( 👔 )\n- [projecteuler.net](https://projecteuler.net/)\n- [replit.com](https://replit.com/)\n- [w3schools.com](https://www.w3schools.com/python/) ( 🧪 )\n"
        },
        {
          "name": "README.es.md",
          "type": "blob",
          "size": 10.1015625,
          "content": "# Guía de estudio \"Python Definitivo\"\n\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/ultimate-python/ci.yml)](https://github.com/huangsam/ultimate-python/actions)\n[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/ultimate-python)](https://codecov.io/gh/huangsam/ultimate-python)\n[![Quality Gate Status](https://img.shields.io/sonar/quality_gate/huangsam_ultimate-python?server=https%3A%2F%2Fsonarcloud.io)](https://sonarcloud.io/dashboard?id=huangsam_ultimate-python)\n[![License](https://img.shields.io/github/license/huangsam/ultimate-python)](https://github.com/huangsam/ultimate-python/blob/main/LICENSE)\n[![r/Python](https://img.shields.io/badge/reddit-original_post-red)](https://www.reddit.com/r/Python/comments/inllmf/ultimate_python_study_guide/)\n\nGuía de estudio \"Python Definitivo\" para principiantes y profesionales. 🐍 🐍 🐍\n\n```python\nprint(\"Guía de estudio 'Python Definitivo'\")\n```\n\n[English](README.md) |\n[한국어](README.ko.md) |\n[繁体中文](README.zh_tw.md) |\n[Español](README.es.md) |\n[Deutsch](README.de.md) |\n[हिन्दी](README.hi.md)\n\n## Motivación\n\nCreé este repositorio de GitHub para compartir lo que he aprendido sobre [Python](https://www.python.org/)\ndurante más de 5 años usándolo como graduado de universidad, empleado en grandes empresas y como contribuidor\nde código abierto en repositorios como [Celery](https://github.com/celery/celery) y\n[Full Stack Python](https://github.com/mattmakai/fullstackpython.com).\nEspero ver a más personas aprendiendo Python y persiguiendo su pasión a través de él. 🎓\n\n## Objetivos\n\nEstos son los objetivos principales de esta guía:\n\n🏆 **Servir como un recurso** para principiantes de Python que prefieren aprender por su cuenta.\nEste repositorio enumera una colección de módulos independientes que pueden ser ejecutados en\nun IDE como [PyCharm](https://www.jetbrains.com/pycharm/) e incluso en el navegador, como\n[Repl.it](https://repl.it/languages/python3). Incluso una terminal antigua funcionará igual de bien\ncon los ejemplos. La mayoría de las líneas de código tienen comentarios útiles que ayudan a guiar\nal lector para entender paso a paso el proceso que el programa está ejecutando. Se anima a los usuarios\na que modifiquen el código fuente en cualquier parte siempre y cuando las rutinas principales (`main`)\nse eliminen y se [ejecuten con éxito](runner.py) tras cada cambio.\n\n🏆 **Servir como una guía pura** para aquellos que quieren reforzar los conceptos base de\nPython. Se utilizan sólo las [librerías integradas](https://docs.python.org/3/library/) para que\nestos conceptos puedan adquirirse sin el esfuerzo de aprender conocimientos de dominios específicos.\nPor ello no se han instalado librerías y entornos de código abierto populares (como `sqlalchemy`,\n`requests`, `pandas`). No obstante, leer el código fuente de estos frameworks es inspirador y altamente\nrecomendado si tu objetivo es convertirte en un verdadero\n[Pythonista](https://www.urbandictionary.com/define.php?term=pythonista).\n\n## Empezando\n\n[![Run on Repl.it](https://repl.it/badge/github/huangsam/ultimate-python)](https://repl.it/github/huangsam/ultimate-python)\n\nHaz clic en la imagen de arriba para crear un ambiente de trabajo en el navegador sin necesidad\nde tener Git y Python instalados en tu ordenador local. Si estos requisitos ya se cumplen,\npuedes clonar el repositorio directamente.\n\nUna vez que el repositorio sea accesible, estás listo para aprender de los módulos independientes.\nPara aprender el máximo de cada módulo, lee el código del módulo y ejecútalo.\nHay dos maneras de ejecutar los módulos:\n\n1. Ejecuta un solo módulo: `python ultimatepython/syntax/variable.py`\n2. Ejecuta todos los módulos: `python runner.py`\n\n## Contenido\n\n📚 = Recurso externo,\n🍰 = Tema principiante,\n🤯 = Tema avanzado\n\n1. **Sobre Python**\n    - Resumen: [¿Qué es Python?](https://github.com/trekhleb/learn-python/blob/master/src/getting_started/what_is_python.md) ( 📚, 🍰 )\n    - Filosofía de diseño: [El Zen de Python](https://www.python.org/dev/peps/pep-0020/) ( 📚 )\n    - Guía de estilos: [Guía de estilos para código de Python](https://www.python.org/dev/peps/pep-0008/) ( 📚, 🤯 )\n    - Modelo de datos: [Modelo de datos](https://docs.python.org/3/reference/datamodel.html) ( 📚, 🤯 )\n    - Librería estándar: [La librería estándar de Python](https://docs.python.org/3/library/) ( 📚, 🤯 )\n    - Funciones integradas: [Funciones integradas](https://docs.python.org/3/library/functions.html) ( 📚 )\n2. **Sintaxis**\n    - Variables: [Literales integrados](ultimatepython/syntax/variable.py) ( 🍰 )\n    - Expresiones: [Operaciones numéricas](ultimatepython/syntax/expression.py) ( 🍰 )\n    - Bit a bit: [Operadores bit a bit](ultimatepython/syntax/bitwise.py) ( 🍰 ), [Complemento a uno/dos](https://www.geeksforgeeks.org/difference-between-1s-complement-representation-and-2s-complement-representation-technique/) ( 📚 )\n    - Condicionales: [if | if-else | if-elif-else](ultimatepython/syntax/conditional.py) ( 🍰 )\n    - Iteraciones: [for-loop | while-loop](ultimatepython/syntax/loop.py) ( 🍰 )\n    - Funciones: [def | lambda](ultimatepython/syntax/function.py) ( 🍰 )\n3. **Estructura de datos**\n    - Lista: [Operaciones con listas](ultimatepython/data_structures/list.py) ( 🍰 )\n    - Tupla: [Operaciones con tuplas](ultimatepython/data_structures/tuple.py)\n    - Set: [Operaciones con sets](ultimatepython/data_structures/set.py)\n    - Diccionario: [Operaciones con dicts](ultimatepython/data_structures/dict.py) ( 🍰 )\n    - Comprensión: [list | tuple | set | dict](ultimatepython/data_structures/comprehension.py)\n    - Cadena: [Operaciones con strings](ultimatepython/data_structures/string.py) ( 🍰 )\n    - Deque: [deque](ultimatepython/data_structures/deque.py) ( 🤯 )\n    - Namedtuple: [namedtuple](ultimatepython/data_structures/namedtuple.py) ( 🤯 )\n    - Defaultdict: [defaultdict](ultimatepython/data_structures/defaultdict.py) ( 🤯 )\n    - Complejidad de tiempo: [Operaciones de cPython](https://wiki.python.org/moin/TimeComplexity) ( 📚, 🤯 )\n4. **Clases**\n    - Clase básica: [Definición de básica](ultimatepython/classes/basic_class.py) ( 🍰 )\n    - Herencia: [Herencia](ultimatepython/classes/inheritance.py) ( 🍰 )\n    - Clase abstracta: [Definición de abstracta](ultimatepython/classes/abstract_class.py)\n    - Clase de excepción: [Definición de excepción](ultimatepython/classes/exception_class.py)\n    - Clase iteradora: [Definición de iteradora | yield](ultimatepython/classes/iterator_class.py) ( 🤯 )\n    - Encapsulación: [Definición de encapsulación](ultimatepython/classes/encapsulation.py)\n5. **Avanzado**\n    - Decorador: [Definición de decorador | wraps](ultimatepython/advanced/decorator.py) ( 🤯 )\n    - Manejo de archivos: [Manejo de archivos](ultimatepython/advanced/file_handling.py) ( 🤯 )\n    - Gestor de contexto: [Gestores de contexto](ultimatepython/advanced/context_manager.py) ( 🤯 )\n    - Orden de resolución de método (MRO por sus siglas en inglés): [mro](ultimatepython/advanced/mro.py) ( 🤯 )\n    - Mixin: [Definición de Mixin](ultimatepython/advanced/mixin.py) ( 🤯 )\n    - Metaclase: [Definición de metaclase](ultimatepython/advanced/meta_class.py) ( 🤯 )\n    - Hilos: [ThreadPoolExecutor](ultimatepython/advanced/thread.py) ( 🤯 )\n    - Asyncio: [async | await](ultimatepython/advanced/async.py) ( 🤯 )\n    - Referencias débiles: [weakref](ultimatepython/advanced/weak_ref.py) ( 🤯 )\n    - Referencia: [cProfile | pstats](ultimatepython/advanced/benchmark.py) ( 🤯 )\n    - Mocking: [MagicMock | PropertyMock | patch](ultimatepython/advanced/mocking.py) ( 🤯 )\n    - Expresiones regulares: [search | findall | match | fullmatch](ultimatepython/advanced/regex.py) ( 🤯 )\n    - Formatos de datos: [json | xml | csv](ultimatepython/advanced/data_format.py) ( 🤯 )\n    - Fecha y hora: [datetime | timezone](ultimatepython/advanced/date_time.py) ( 🤯 )\n\n## Recursos adicionales\n\n👔 = Recurso de entrevista,\n🧪 = Ejemplos de código,\n🧠 = Ideas para proyecto\n\n### Repositorios de GitHub\n\nSigue aprendiendo leyendo otros buenos recursos.\n\n- [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python) ( 👔, 🧪 )\n- [faif/python-patterns](https://github.com/faif/python-patterns) ( 👔, 🧪 )\n- [geekcomputers/Python](https://github.com/geekcomputers/Python) ( 🧪 )\n- [trekhleb/homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) ( 🧪 )\n- [karan/Projects](https://github.com/karan/Projects) (🧠 )\n- [MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners) ( 🧠 )\n- [vinta/awesome-python](https://github.com/vinta/awesome-python)\n- [academic/awesome-datascience](https://github.com/academic/awesome-datascience)\n- [josephmisiti/awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning)\n- [ZuzooVn/machine-learning-for-software-engineers](https://github.com/ZuzooVn/machine-learning-for-software-engineers)\n- [30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python) ( 🧪 )\n- [ml-tooling/best-of-python](https://github.com/ml-tooling/best-of-python)\n- [practical-tutorials/project-based-learning](https://github.com/practical-tutorials/project-based-learning#python)\n- [freeCodeCamp/freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) ( 👔 )\n\n### Práctica interactiva\n\nContinua practicando para que no se oxiden tus habilidades de programación.\n\n- [codechef.com](https://www.codechef.com/) ( 👔 )\n- [codeforces.com](https://codeforces.com/)\n- [codementor.io](https://www.codementor.io) ( 🧠 )\n- [coderbyte.com](https://www.coderbyte.com/) ( 👔 )\n- [codewars.com](https://www.codewars.com/)\n- [exercism.io](https://exercism.io/)\n- [geeksforgeeks.org](https://www.geeksforgeeks.org/) ( 👔 )\n- [hackerearth.com](https://www.hackerearth.com/)\n- [hackerrank.com](https://www.hackerrank.com/) ( 👔 )\n- [kaggle.com](https://www.kaggle.com/) ( 🧠 )\n- [leetcode.com](https://leetcode.com/) ( 👔 )\n- [projecteuler.net](https://projecteuler.net/)\n- [replit.com](https://replit.com/)\n- [w3schools.com](https://www.w3schools.com/python/) ( 🧪 )\n"
        },
        {
          "name": "README.hi.md",
          "type": "blob",
          "size": 14.72265625,
          "content": "# अल्टीमेट Python अध्ययन गाइड\n\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/ultimate-python/ci.yml)](https://github.com/huangsam/ultimate-python/actions)\n[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/ultimate-python)](https://codecov.io/gh/huangsam/ultimate-python)\n[![Quality Gate Status](https://img.shields.io/sonar/quality_gate/huangsam_ultimate-python?server=https%3A%2F%2Fsonarcloud.io)](https://sonarcloud.io/dashboard?id=huangsam_ultimate-python)\n[![License](https://img.shields.io/github/license/huangsam/ultimate-python)](https://github.com/huangsam/ultimate-python/blob/main/LICENSE)\n[![r/Python](https://img.shields.io/badge/reddit-original_post-red)](https://www.reddit.com/r/Python/comments/inllmf/ultimate_python_study_guide/)\n\nनए और पेशेवर लोगों के लिए अल्टीमेट पायथन अध्ययन गाइड। 🐍 🐍 🐍\n\n```python\nprint(\"Ultimate Python study guide\")\n```\n\n[English](README.md) |\n[한국어](README.ko.md) |\n[繁体中文](README.zh_tw.md) |\n[Español](README.es.md) |\n[Deutsch](README.de.md) |\n[हिन्दी](README.hi.md)\n\n## प्रेरणा\n\nमैंने यह गिटहब रिपोजिटरी [core Python](https://www.python.org/) के बारे में जो कुछ मैंने पिछले 5+ वर्षों में सीखा है, उसे साझा करने के लिए बनाई है। मैंने इसे एक कॉलेज ग्रेजुएट, बड़ी कंपनियों के कर्मचारी, और [Celery](https://github.com/celery/celery) और [Full Stack Python](https://github.com/mattmakai/fullstackpython.com) जैसी रिपोजिटरी के ओपन-सोर्स कंट्रीब्यूटर के रूप में उपयोग किया है। मैं यह देखने के लिए उत्सुक हूँ कि और लोग पायथन सीखें और इसके माध्यम से अपने जुनून को आगे बढ़ाएं। 🎓\n\n\n## लक्ष्य\n\nइस गाइड को बनाने के मुख्य लक्ष्य निम्नलिखित हैं:\n\n🏆 **संसाधन के रूप में सेवा देना** उन नए पायथन उपयोगकर्ताओं के लिए जो प्रैक्टिकल तरीके से सीखना पसंद करते हैं। इस रिपोजिटरी में स्वतंत्र मॉड्यूलों का एक संग्रह है, जिन्हें IDE जैसे [PyCharm](https://www.jetbrains.com/pycharm/) में या [Replit](https://replit.com/languages/python3) जैसे ब्राउज़र में चलाया जा सकता है। पुराने साधारण टर्मिनल में भी इन उदाहरणों को चलाया जा सकता है। अधिकतर लाइनों में बहुत ही अच्छे से लिखे गए comments होते हैं, जो पाठक को प्रोग्राम्स के प्रत्येक चरण के माध्यम से मार्गदर्शन करते हैं। उपयोगकर्ताओं को कोड में बदलाव करने के लिए प्रोत्साहित किया जाता है, बशर्ते कि `main` रूटीन को हटाया न जाए और हर परिवर्तन के बाद [सफलतापूर्वक चलाया जाए](runner.py)।\n\n🏆 **शुद्ध गाइड के रूप में सेवा देना** उन लोगों के लिए जो मुख्य पायथन अवधारणाओं को फिर से समझना चाहते हैं। केवल [बिल्ट-इन लाइब्रेरीज़](https://docs.python.org/3/library/) का उपयोग किया गया है ताकि इन अवधारणाओं को बिना किसी विशेष डोमेन की अवधारणाओं के सरलता से समझाया जा सके। इसी कारण से लोकप्रिय ओपन-सोर्स लाइब्रेरीज़ और फ्रेमवर्क (जैसे `sqlalchemy`, `requests`, `pandas`) को इंस्टॉल नहीं किया गया है। हालांकि, इन फ्रेमवर्क्स के स्रोत कोड को पढ़ना प्रेरणादायक है और यदि आपका लक्ष्य एक सच्चे [Pythonista](https://www.urbandictionary.com/define.php?term=pythonista) बनने का है तो इसे ज़रूर पढ़ना चाहिए।\n\n\n## शुरूआत\n\n[![Run on Replit](https://replit.com/badge/github/huangsam/ultimate-python)](https://replit.com/github/huangsam/ultimate-python)\n\nऊपर दिए गए बैज पर क्लिक करें ताकि आप ब्राउज़र में एक कार्यशील वातावरण शुरू कर सकें, इसके लिए आपके स्थानीय मशीन पर Git और पायथन की आवश्यकता नहीं होगी। यदि ये आवश्यकताएँ पहले से ही पूरी हो चुकी हैं, तो आप सीधे रिपोजिटरी को क्लोन कर सकते हैं।\n\nएक बार जब रिपोजिटरी उपलब्ध हो जाती है, तो आप स्वतंत्र मॉड्यूल से सीखने के लिए तैयार हैं। प्रत्येक मॉड्यूल का अधिकतम लाभ उठाने के लिए, मॉड्यूल का कोड पढ़ें और इसे चलाएं। मॉड्यूल चलाने के दो तरीके हैं:\n\n1. एकल मॉड्यूल चलाएं: `python ultimatepython/syntax/variable.py`\n2. सभी मॉड्यूल चलाएं: `python runner.py`\n\n## विषय सूची\n\n📚 = बाहरी स्रोत,\n🍰 = शुरुआती विषय,\n🤯 = उन्नत विषय\n\n\n1. **पायथन के बारे में**\n    - अवलोकन: [पायथन क्या है](https://github.com/trekhleb/learn-python/blob/master/src/getting_started/what_is_python.md) ( 📚, 🍰 )\n    - डिज़ाइन दर्शन: [पायथन का ज़ेन](https://www.python.org/dev/peps/pep-0020/) ( 📚 )\n    - शैली मार्गदर्शिका: [पायथन कोड के लिए शैली मार्गदर्शिका](https://www.python.org/dev/peps/pep-0008/) ( 📚, 🤯 )\n    - डेटा मॉडल: [डेटा मॉडल](https://docs.python.org/3/reference/datamodel.html) ( 📚, 🤯 )\n    - मानक पुस्तकालय: [पायथन मानक पुस्तकालय](https://docs.python.org/3/library/) ( 📚, 🤯 )\n    - अंतर्निहित कार्य: [अंतर्निहित कार्य](https://docs.python.org/3/library/functions.html) ( 📚 )\n2. **सिंटेक्स**\n    - वेरिएबल: [अंतर्निहित लिटरल](ultimatepython/syntax/variable.py) ( 🍰 )\n    - अभिव्यक्ति: [संख्यात्मक ऑपरेशन्स](ultimatepython/syntax/expression.py) ( 🍰 )\n    - बाइनरी: [बाइनरी ऑपरेटर](ultimatepython/syntax/bitwise.py) ( 🍰 ), [एक्स/टू का पूरक](https://www.geeksforgeeks.org/difference-between-1s-complement-representation-and-2s-complement-representation-technique/) ( 📚 )\n    - कंडीशनल: [if | if-else | if-elif-else](ultimatepython/syntax/conditional.py) ( 🍰 )\n    - लूप: [for-loop | while-loop](ultimatepython/syntax/loop.py) ( 🍰 )\n    - फ़ंक्शन: [def | lambda](ultimatepython/syntax/function.py) ( 🍰 )\n3. **डेटा संरचनाएँ**\n    - लिसट: [लिसट ऑपरेशन्स](ultimatepython/data_structures/list.py) ( 🍰 )\n    - ट्यूपल: [ट्यूपल ऑपरेशन्स](ultimatepython/data_structures/tuple.py)\n    - सेट: [सेट ऑपरेशन्स](ultimatepython/data_structures/set.py)\n    - डिक्ट: [डिक्शनरी ऑपरेशन्स](ultimatepython/data_structures/dict.py) ( 🍰 )\n    - संकलन: [लिसट | ट्यूपल | सेट | डिक्ट](ultimatepython/data_structures/comprehension.py)\n    - स्ट्रिंग: [स्ट्रिंग ऑपरेशन्स](ultimatepython/data_structures/string.py) ( 🍰 )\n    - डेक: [डेक](ultimatepython/data_structures/deque.py) ( 🤯 )\n    - नामित ट्यूपल: [नामित ट्यूपल](ultimatepython/data_structures/namedtuple.py) ( 🤯 )\n    - डिफ़ॉल्ट डिक्ट: [डिफ़ॉल्ट डिक्ट](ultimatepython/data_structures/defaultdict.py) ( 🤯 )\n    - समय कोम्पलेक्सिटी: [cPython ऑपरेशन्स](https://wiki.python.org/moin/TimeComplexity) ( 📚, 🤯 )\n4. **क्लासेज़**\n    - बेसिक क्लास: [बेसिक परिभाषा](ultimatepython/classes/basic_class.py) ( 🍰 )\n    - इन्हरिटैंस: [इन्हरिटैंस](ultimatepython/classes/inheritance.py) ( 🍰 )\n    - एैबस्टराक्ट क्लास: [एैबस्टराक्ट परिभाषा](ultimatepython/classes/abstract_class.py)\n    - एक्सेपशन क्लास: [एक्सेपशन परिभाषा](ultimatepython/classes/exception_class.py)\n    - इटरेटर क्लास: [इटरेटर परिभाषा | yield](ultimatepython/classes/iterator_class.py) ( 🤯 )\n    - ऐनकैपसुलेषन: [ऐनकैपसुलेषन परिभाषा](ultimatepython/classes/encapsulation.py)\n5. **उन्नत**\n    - डेकोरेटर: [डेकोरेटर परिभाषा | wraps](ultimatepython/advanced/decorator.py) ( 🤯 )\n    - फ़ाइल प्रबंधन: [फ़ाइल प्रबंधन](ultimatepython/advanced/file_handling.py) ( 🤯 )\n    - संदर्भ प्रबंधक: [संदर्भ प्रबंधक](ultimatepython/advanced/context_manager.py) ( 🤯 )\n    - मेथड रिज़ॉल्यूशन क्रम: [mro](ultimatepython/advanced/mro.py) ( 🤯 )\n    - मिक्सिन: [मिक्सिन परिभाषा](ultimatepython/advanced/mixin.py) ( 🤯 )\n    - मेटाक्लास: [मेटाक्लास परिभाषा](ultimatepython/advanced/meta_class.py) ( 🤯 )\n    - थ्रेड: [ThreadPoolExecutor](ultimatepython/advanced/thread.py) ( 🤯 )\n    - एसिंको: [async | await](ultimatepython/advanced/async.py) ( 🤯 )\n    - वीक रेफरेंस: [weakref](ultimatepython/advanced/weak_ref.py) ( 🤯 )\n    - बेंचमार्क: [cProfile | pstats](ultimatepython/advanced/benchmark.py) ( 🤯 )\n    - मॉकिंग: [MagicMock | PropertyMock | patch](ultimatepython/advanced/mocking.py) ( 🤯 )\n    - नियमित अभिव्यक्ति: [search | findall | match | fullmatch](ultimatepython/advanced/regex.py) ( 🤯 )\n    - डेटा फ़ॉर्मेट: [json | xml | csv](ultimatepython/advanced/data_format.py) ( 🤯 )\n    - दिनांक और समय: [datetime | timezone](ultimatepython/advanced/date_time.py) ( 🤯 )\n\n\n## अतिरिक्त संसाधन\n\n👔 = इंटरव्यू संसाधन,\n🧪 = कोड नमूने,\n🧠 = प्रोजेक्ट विचार\n\n\n### गिटहब रिपॉजिटरी\n\nअन्य उच्च मानक संसाधनों से पढ़कर सीखना जारी रखें।\n\n- [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python) ( 👔 , 🧪 )\n- [faif/python-patterns](https://github.com/faif/python-patterns) ( 👔 , 🧪 )\n- [geekcomputers/Python](https://github.com/geekcomputers/Python) ( 🧪 )\n- [trekhleb/homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) ( 🧪 )\n- [karan/Projects](https://github.com/karan/Projects) ( 🧠 )\n- [MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners) ( 🧠 )\n- [vinta/awesome-python](https://github.com/vinta/awesome-python)\n- [academic/awesome-datascience](https://github.com/academic/awesome-datascience)\n- [josephmisiti/awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning)\n- [ZuzooVn/machine-learning-for-software-engineers](https://github.com/ZuzooVn/machine-learning-for-software-engineers)\n- [30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python) ( 🧪 )\n- [ml-tooling/best-of-python](https://github.com/ml-tooling/best-of-python)\n- [practical-tutorials/project-based-learning](https://github.com/practical-tutorials/project-based-learning#python)\n- [freeCodeCamp/freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) ( 👔 )\n\n### इंटरैक्टिव प्रैक्टिस\n\nअभ्यास करते रहें ताकि आपकी कोडिंग कौशल खराब न हों।\n\n- [codechef.com](https://www.codechef.com/) ( 👔 )\n- [codeforces.com](https://codeforces.com/)\n- [codementor.io](https://www.codementor.io) ( 🧠 )\n- [coderbyte.com](https://www.coderbyte.com/) ( 👔 )\n- [codewars.com](https://www.codewars.com/)\n- [exercism.io](https://exercism.io/)\n- [geeksforgeeks.org](https://www.geeksforgeeks.org/) ( 👔 )\n- [hackerearth.com](https://www.hackerearth.com/)\n- [hackerrank.com](https://www.hackerrank.com/) ( 👔 )\n- [kaggle.com](https://www.kaggle.com/) ( 🧠 )\n- [leetcode.com](https://leetcode.com/) ( 👔 )\n- [projecteuler.net](https://projecteuler.net/)\n- [replit.com](https://replit.com/)\n- [w3schools.com](https://www.w3schools.com/python/) ( 🧪 )\n"
        },
        {
          "name": "README.ko.md",
          "type": "blob",
          "size": 10.037109375,
          "content": "# Ultimate Python 학습 가이드\n\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/ultimate-python/ci.yml)](https://github.com/huangsam/ultimate-python/actions)\n[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/ultimate-python)](https://codecov.io/gh/huangsam/ultimate-python)\n[![Quality Gate Status](https://img.shields.io/sonar/quality_gate/huangsam_ultimate-python?server=https%3A%2F%2Fsonarcloud.io)](https://sonarcloud.io/dashboard?id=huangsam_ultimate-python)\n[![License](https://img.shields.io/github/license/huangsam/ultimate-python)](https://github.com/huangsam/ultimate-python/blob/main/LICENSE)\n[![r/Python](https://img.shields.io/badge/reddit-original_post-red)](https://www.reddit.com/r/Python/comments/inllmf/ultimate_python_study_guide/)\n\n초보자와 전문가 모두를 위한 최고의 Python 학습 가이드입니다. 🐍 🐍 🐍\n\n```python\nprint(\"Ultimate Python 학습 가이드\")\n```\n\n[English](README.md) |\n[한국어](README.ko.md) |\n[繁体中文](README.zh_tw.md) |\n[Español](README.es.md) |\n[Deutsch](README.de.md) |\n[हिन्दी](README.hi.md)\n\n## 동기\n\n이 GitHub 저장소는 대학 졸업 후, 대규모 회사에서 근무하면서\n그리고 [Celery](https://github.com/celery/celery)와 [Full Stack Python](https://github.com/mattmakai/fullstackpython.com) 같은 오픈소스 프로젝트에 기여하면서\n지난 5년 이상 동안 배운 [core Python](https://www.python.org/)에 대한 지식을 공유하기 위해 만들었습니다.\n저는 더 많은 사람들이 Python을 배우고 자신의 열정을 추구하길 기대합니다. 🎓\n\n## 목표\n\n이 가이드를 만드는 주요 목표는 다음과 같습니다:\n\n🏆 실습 학습을 선호하는 Python 초보자를 위한 **학습 자료를 제공합니다.**\n이 저장소에는 [PyCharm](https://www.jetbrains.com/pycharm/)과 같은 IDE 및 [Replit](https://replit.com/languages/python3)와 같은 브라우저에서 실행할 수 있는 독립형 모듈 모음이 있습니다. 기본 터미널에서도 예제를 실행할 수 있습니다.\n대부분의 코드 라인에 프로그램이 단계별로 어떤 작업을 하는지 안내하는 신중하게 작성된 주석이 있습니다.\n사용자는 `main` 루틴을 삭제하지 않고, 각 변경 후에 [성공적으로 실행](runner.py)되는 한 소스 코드를 얼마든지 수정할 수 있습니다.\n\n🏆 core Python 개념을 다시 복습하고 싶은 사람들을 위한 **순수 가이드를 제공합니다.**\n여기서는 오직 [내장 라이브러리](https://docs.python.org/3/library/)만을 사용하여 이러한 개념을 도메인 특화된 개념의 오버헤드 없이 전달합니다.\n따라서 유명한 오픈소스 라이브러리와 프레임워크(`sqlalchemy`, `requests`, `pandas` 등)는 설치되어 있지 않습니다.\n그러나, 당신의 목표가 진정한 진정한 [Pythonista](https://www.urbandictionary.com/define.php?term=pythonista)이 되는 것 이라면 이러한 프레임워크의 소스 코드를 읽는 것은 매우 고무적이고 권장이 됩니다.\n\n## 시작하기\n\n[![Run on Replit](https://repl.it/badge/github/huangsam/ultimate-python)](https://repl.it/github/huangsam/ultimate-python)\n\n로컬 컴퓨터에 Git 및 Python을 설치하지 않고도 브라우저에서 작업 환경을 시작하려면 위의 배지를 클릭하세요. 이러한\n요구 사항이 이미 충족된 경우, 저장소를 바로 clone해도 됩니다.\n\n저장소에 접근할 수 있게 되면 단독 모듈에서 배울 준비가 된 것입니다. 각 모듈을 최대한 활용하려면 모듈 코드를\n읽고 실행하십시오. 모듈을 실행하는 두 가지 방법이 있습니다:\n\n1. 단일 모듈 실행 : `python ultimatepython/syntax/variable.py`\n2. 전체 모듈 실행 : `python runner.py`\n\n## 목차\n\n📚 = 외부 리소스,\n🍰 = 초급 주제,\n🤯 = 고급 주제\n\n1. **Python 정보**\n    - 개요 : [Python이란 무엇인가](https://github.com/trekhleb/learn-python/blob/master/src/getting_started/what_is_python.md) ( 📚, 🍰 )\n    - 디자인 철학 : [The Zen of Python](https://www.python.org/dev/peps/pep-0020/) ( 📚 )\n    - 스타일 가이드 : [Python 코드 스타일 가이드](https://www.python.org/dev/peps/pep-0008/) ( 📚, 🤯 )\n    - 데이터 모델 : [데이터 모델](https://docs.python.org/3/reference/datamodel.html) ( 📚, 🤯 )\n    - 표준 라이브러리 : [Python 표준 라이브러리](https://docs.python.org/3/library/) ( 📚, 🤯 )\n    - 내장 함수 : [내장 함수](https://docs.python.org/3/library/functions.html) ( 📚 )\n2. **통사론**\n    - 변수 : [내장 리터럴](ultimatepython/syntax/variable.py) ( 🍰 )\n    - 표현식 : [숫자 연산](ultimatepython/syntax/expression.py) ( 🍰 )\n    - 비트 연산 : [비트 연산자](ultimatepython/syntax/bitwise.py) ( 🍰 ), [1의 보수/2의 보수](https://www.geeksforgeeks.org/difference-between-1s-complement-representation-and-2s-complement-representation-technique/) ( 📚 )\n    - 조건문 : [if | if-else | if-elif-else](ultimatepython/syntax/conditional.py) ( 🍰 )\n    - 반복문 : [for-loop | while-loop](ultimatepython/syntax/loop.py) ( 🍰 )\n    - 함수 : [def | lambda](ultimatepython/syntax/function.py) ( 🍰 )\n3. **데이터 구조**\n    - 리스트 : [리스트 연산](ultimatepython/data_structures/list.py) ( 🍰 )\n    - 튜플 : [튜플 연산](ultimatepython/data_structures/tuple.py)\n    - 세트 : [세트 연산](ultimatepython/data_structures/set.py)\n    - 딕셔너리 : [딕셔너리 연산](ultimatepython/data_structures/dict.py) ( 🍰 )\n    - 컴프리헨션 : [리스트 | 튜플 | 세트 | 딕셔너리](ultimatepython/data_structures/comprehension.py)\n    - 문자열 : [문자열 연산](ultimatepython/data_structures/string.py) ( 🍰 )\n    - 덱: [deque](ultimatepython/data_structures/deque.py) ( 🤯 )\n    - Namedtuple: [namedtuple](ultimatepython/data_structures/namedtuple.py) ( 🤯 )\n    - Defaultdict: [defaultdict](ultimatepython/data_structures/defaultdict.py) ( 🤯 )\n    - 시간 복잡도 : [cPython 연산](https://wiki.python.org/moin/TimeComplexity) ( 📚, 🤯 )\n4. **클래스**\n    - 기본 클래스 : [기본 정의](ultimatepython/classes/basic_class.py) ( 🍰 )\n    - 계승: [계승](ultimatepython/classes/inheritance.py) ( 🍰 )\n    - 추상 클래스 : [추상 정의](ultimatepython/classes/abstract_class.py)\n    - 예외 클래스 : [예외 정의](ultimatepython/classes/exception_class.py)\n    - 이터레이터 클래스 : [이터레이터 정의 | yield](ultimatepython/classes/iterator_class.py) ( 🤯 )\n    - 캡슐화: [캡슐화 정의](ultimatepython/classes/encapsulation.py)\n5. **고급**\n    - 데코레이터 : [데코레이터 정의 | wraps](ultimatepython/advanced/decorator.py) ( 🤯 )\n    - 파일 처리: [파일 처리](ultimatepython/advanced/file_handling.py) ( 🤯 )\n    - 컨텍스트 매니저 : [컨텍스트 매니저](ultimatepython/advanced/context_manager.py) ( 🤯 )\n    - 메서드 결정 순서 : [mro](ultimatepython/advanced/mro.py) ( 🤯 )\n    - 믹스인 : [믹스인 정의](ultimatepython/advanced/mixin.py) ( 🤯 )\n    - 메타클래스 : [메타클래스 정의](ultimatepython/advanced/meta_class.py) ( 🤯 )\n    - 스레드 : [ThreadPoolExecutor](ultimatepython/advanced/thread.py) ( 🤯 )\n    - Asyncio : [async | await](ultimatepython/advanced/async.py) ( 🤯 )\n    - 약한 참조 : [weakref](ultimatepython/advanced/weak_ref.py) ( 🤯 )\n    - 벤치마크 : [cProfile | pstats](ultimatepython/advanced/benchmark.py) ( 🤯 )\n    - 모킹 : [MagicMock | PropertyMock | patch](ultimatepython/advanced/mocking.py) ( 🤯 )\n    - 정규식 : [search | findall | match | fullmatch](ultimatepython/advanced/regex.py) ( 🤯 )\n    - 데이터 포맷 : [json | xml | csv](ultimatepython/advanced/data_format.py) ( 🤯 )\n    - 날짜와 시간 : [datetime | timezone](ultimatepython/advanced/date_time.py) ( 🤯 )\n\n## 추가 자료\n\n👔 = 인터뷰 자료,\n🧪 = 코드 샘플,\n🧠 = 프로젝트 아이디어\n\n### GitHub 저장소\n\n잘 알려진 다른 자료를 읽으면서 계속 배우세요.\n\n- [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python) ( 👔, 🧪 )\n- [faif/python-patterns](https://github.com/faif/python-patterns) ( 👔, 🧪 )\n- [geekcomputers/Python](https://github.com/geekcomputers/Python) ( 🧪 )\n- [trekhleb/homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) ( 🧪 )\n- [karan/Projects](https://github.com/karan/Projects) ( 🧠 )\n- [MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners) ( 🧠 )\n- [vinta/awesome-python](https://github.com/vinta/awesome-python)\n- [academic/awesome-datascience](https://github.com/academic/awesome-datascience)\n- [josephmisiti/awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning)\n- [ZuzooVn/machine-learning-for-software-engineers](https://github.com/ZuzooVn/machine-learning-for-software-engineers)\n- [30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python) ( 🧪 )\n- [ml-tooling/best-of-python](https://github.com/ml-tooling/best-of-python)\n- [practical-tutorials/project-based-learning](https://github.com/practical-tutorials/project-based-learning#python)\n- [freeCodeCamp/freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) ( 👔 )\n\n### 대화형 연습\n\n코딩 실력이 녹슬지 않기 위해 계속 연습하세요.\n\n- [codechef.com](https://www.codechef.com/) ( 👔 )\n- [codeforces.com](https://codeforces.com/)\n- [codementor.io](https://www.codementor.io) ( 🧠 )\n- [coderbyte.com](https://www.coderbyte.com/) ( 👔 )\n- [codewars.com](https://www.codewars.com/)\n- [exercism.io](https://exercism.io/)\n- [geeksforgeeks.org](https://www.geeksforgeeks.org/) ( 👔 )\n- [hackerearth.com](https://www.hackerearth.com/)\n- [hackerrank.com](https://www.hackerrank.com/) ( 👔 )\n- [kaggle.com](https://www.kaggle.com/) ( 🧠 )\n- [leetcode.com](https://leetcode.com/) ( 👔 )\n- [projecteuler.net](https://projecteuler.net/)\n- [replit.com](https://replit.com/)\n- [w3schools.com](https://www.w3schools.com/python/) ( 🧪 )\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5556640625,
          "content": "# Ultimate Python study guide\n\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/ultimate-python/ci.yml)](https://github.com/huangsam/ultimate-python/actions)\n[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/ultimate-python)](https://codecov.io/gh/huangsam/ultimate-python)\n[![Quality Gate Status](https://img.shields.io/sonar/quality_gate/huangsam_ultimate-python?server=https%3A%2F%2Fsonarcloud.io)](https://sonarcloud.io/dashboard?id=huangsam_ultimate-python)\n[![License](https://img.shields.io/github/license/huangsam/ultimate-python)](https://github.com/huangsam/ultimate-python/blob/main/LICENSE)\n[![r/Python](https://img.shields.io/badge/reddit-original_post-red)](https://www.reddit.com/r/Python/comments/inllmf/ultimate_python_study_guide/)\n\nUltimate Python study guide for newcomers and professionals alike. 🐍 🐍 🐍\n\n```python\nprint(\"Ultimate Python study guide\")\n```\n\n[English](README.md) |\n[한국어](README.ko.md) |\n[繁体中文](README.zh_tw.md) |\n[Español](README.es.md) |\n[Deutsch](README.de.md) |\n[हिन्दी](README.hi.md)\n\n## Motivation\n\nI created this GitHub repo to share what I've learned about [core Python](https://www.python.org/)\nover the past 5+ years of using it as a college graduate, an employee at\nlarge-scale companies and an open-source contributor of repositories like\n[Celery](https://github.com/celery/celery) and\n[Full Stack Python](https://github.com/mattmakai/fullstackpython.com).\nI look forward to seeing more people learn Python and pursue their passions\nthrough it. 🎓\n\n## Goals\n\nHere are the primary goals of creating this guide:\n\n🏆 **Serve as a resource** for Python newcomers who prefer to learn hands-on.\nThis repository has a collection of standalone modules which can be run in an IDE\nlike [PyCharm](https://www.jetbrains.com/pycharm/) and in the browser like\n[Replit](https://replit.com/languages/python3). Even a plain old terminal will work\nwith the examples. Most lines have carefully crafted comments which guide a reader\nthrough what the programs are doing step-by-step. Users are encouraged to modify\nsource code anywhere as long as the `main` routines are not deleted and\n[run successfully](runner.py) after each change.\n\n🏆 **Serve as a pure guide** for those who want to revisit core Python concepts.\nOnly [builtin libraries](https://docs.python.org/3/library/) are leveraged so that\nthese concepts can be conveyed without the overhead of domain-specific concepts. As\nsuch, popular open-source libraries and frameworks (i.e. `sqlalchemy`, `requests`,\n`pandas`) are not installed. However, reading the source code in these frameworks is\ninspiring and highly encouraged if your goal is to become a true\n[Pythonista](https://www.urbandictionary.com/define.php?term=pythonista).\n\n## Getting started\n\n[![Run on Replit](https://replit.com/badge/github/huangsam/ultimate-python)](https://replit.com/github/huangsam/ultimate-python)\n\nClick the badge above to spin up a working environment in the browser without\nneeding Git and Python installed on your local machine. If these requirements\nare already met, feel free to clone the repository directly.\n\nOnce the repository is accessible, you are ready to learn from the standalone\nmodules. To get the most out of each module, read the module code and run it.\nThere are two ways of running the modules:\n\n1. Run a single module: `python ultimatepython/syntax/variable.py`\n2. Run all of the modules: `python runner.py`\n\n## Table of contents\n\n📚 = External resource,\n🍰 = Beginner topic,\n🤯 = Advanced topic\n\n1. **About Python**\n    - Overview: [What is Python](https://github.com/trekhleb/learn-python/blob/master/src/getting_started/what_is_python.md) ( 📚, 🍰 )\n    - Design philosophy: [The Zen of Python](https://www.python.org/dev/peps/pep-0020/) ( 📚 )\n    - Style guide: [Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/) ( 📚, 🤯 )\n    - Data model: [Data model](https://docs.python.org/3/reference/datamodel.html) ( 📚, 🤯 )\n    - Standard library: [The Python Standard Library](https://docs.python.org/3/library/) ( 📚, 🤯 )\n    - Built-in functions: [Built-in Functions](https://docs.python.org/3/library/functions.html) ( 📚 )\n2. **Syntax**\n    - Variable: [Built-in literals](ultimatepython/syntax/variable.py) ( 🍰 )\n    - Expression: [Numeric operations](ultimatepython/syntax/expression.py) ( 🍰 )\n    - Bitwise: [Bitwise operators](ultimatepython/syntax/bitwise.py) ( 🍰 ), [One's/Two's Complement](https://www.geeksforgeeks.org/difference-between-1s-complement-representation-and-2s-complement-representation-technique/) ( 📚 )\n    - Conditional: [if | if-else | if-elif-else](ultimatepython/syntax/conditional.py) ( 🍰 )\n    - Loop: [for-loop | while-loop](ultimatepython/syntax/loop.py) ( 🍰 )\n    - Function: [def | lambda](ultimatepython/syntax/function.py) ( 🍰 )\n3. **Data Structures**\n    - List: [List operations](ultimatepython/data_structures/list.py) ( 🍰 )\n    - Tuple: [Tuple operations](ultimatepython/data_structures/tuple.py)\n    - Set: [Set operations](ultimatepython/data_structures/set.py)\n    - Dict: [Dictionary operations](ultimatepython/data_structures/dict.py) ( 🍰 )\n    - Comprehension: [list | tuple | set | dict](ultimatepython/data_structures/comprehension.py)\n    - String: [String operations](ultimatepython/data_structures/string.py) ( 🍰 )\n    - Deque: [deque](ultimatepython/data_structures/deque.py) ( 🤯 )\n    - Namedtuple: [namedtuple](ultimatepython/data_structures/namedtuple.py) ( 🤯 )\n    - Defaultdict: [defaultdict](ultimatepython/data_structures/defaultdict.py) ( 🤯 )\n    - Time complexity: [cPython operations](https://wiki.python.org/moin/TimeComplexity) ( 📚, 🤯 )\n4. **Classes**\n    - Basic class: [Basic definition](ultimatepython/classes/basic_class.py) ( 🍰 )\n    - Inheritance: [Inheritance](ultimatepython/classes/inheritance.py) ( 🍰 )\n    - Abstract class: [Abstract definition](ultimatepython/classes/abstract_class.py)\n    - Exception class: [Exception definition](ultimatepython/classes/exception_class.py)\n    - Iterator class: [Iterator definition | yield](ultimatepython/classes/iterator_class.py) ( 🤯 )\n    - Encapsulation: [Encapsulation definition](ultimatepython/classes/encapsulation.py)\n5. **Advanced**\n    - Decorator: [Decorator definition | wraps](ultimatepython/advanced/decorator.py) ( 🤯 )\n    - File Handling: [File Handling](ultimatepython/advanced/file_handling.py) ( 🤯 )\n    - Context manager: [Context managers](ultimatepython/advanced/context_manager.py) ( 🤯 )\n    - Method resolution order: [mro](ultimatepython/advanced/mro.py) ( 🤯 )\n    - Mixin: [Mixin definition](ultimatepython/advanced/mixin.py) ( 🤯 )\n    - Metaclass: [Metaclass definition](ultimatepython/advanced/meta_class.py) ( 🤯 )\n    - Thread: [ThreadPoolExecutor](ultimatepython/advanced/thread.py) ( 🤯 )\n    - Asyncio: [async | await](ultimatepython/advanced/async.py) ( 🤯 )\n    - Weak reference: [weakref](ultimatepython/advanced/weak_ref.py) ( 🤯 )\n    - Benchmark: [cProfile | pstats](ultimatepython/advanced/benchmark.py) ( 🤯 )\n    - Mocking: [MagicMock | PropertyMock | patch](ultimatepython/advanced/mocking.py) ( 🤯 )\n    - Regular expression: [search | findall | match | fullmatch](ultimatepython/advanced/regex.py) ( 🤯 )\n    - Data format: [json | xml | csv](ultimatepython/advanced/data_format.py) ( 🤯 )\n    - Datetime: [datetime | timezone](ultimatepython/advanced/date_time.py) ( 🤯 )\n\n## Additional resources\n\n👔 = Interview resource,\n🧪 = Code samples,\n🧠 = Project ideas\n\n### GitHub repositories\n\nKeep learning by reading from other well-regarded resources.\n\n- [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python) ( 👔 , 🧪 )\n- [faif/python-patterns](https://github.com/faif/python-patterns) ( 👔 , 🧪 )\n- [geekcomputers/Python](https://github.com/geekcomputers/Python) ( 🧪 )\n- [trekhleb/homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) ( 🧪 )\n- [karan/Projects](https://github.com/karan/Projects) ( 🧠 )\n- [MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners) ( 🧠 )\n- [vinta/awesome-python](https://github.com/vinta/awesome-python)\n- [academic/awesome-datascience](https://github.com/academic/awesome-datascience)\n- [josephmisiti/awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning)\n- [ZuzooVn/machine-learning-for-software-engineers](https://github.com/ZuzooVn/machine-learning-for-software-engineers)\n- [30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python) ( 🧪 )\n- [ml-tooling/best-of-python](https://github.com/ml-tooling/best-of-python)\n- [practical-tutorials/project-based-learning](https://github.com/practical-tutorials/project-based-learning#python)\n- [freeCodeCamp/freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) ( 👔 )\n\n### Interactive practice\n\nKeep practicing so that your coding skills don't get rusty.\n\n- [codechef.com](https://www.codechef.com/) ( 👔 )\n- [codeforces.com](https://codeforces.com/)\n- [codementor.io](https://www.codementor.io) ( 🧠 )\n- [coderbyte.com](https://www.coderbyte.com/) ( 👔 )\n- [codewars.com](https://www.codewars.com/)\n- [exercism.io](https://exercism.io/)\n- [geeksforgeeks.org](https://www.geeksforgeeks.org/) ( 👔 )\n- [hackerearth.com](https://www.hackerearth.com/)\n- [hackerrank.com](https://www.hackerrank.com/) ( 👔 )\n- [kaggle.com](https://www.kaggle.com/) ( 🧠 )\n- [leetcode.com](https://leetcode.com/) ( 👔 )\n- [projecteuler.net](https://projecteuler.net/)\n- [replit.com](https://replit.com/)\n- [w3schools.com](https://www.w3schools.com/python/) ( 🧪 )\n"
        },
        {
          "name": "README.zh_tw.md",
          "type": "blob",
          "size": 8.6884765625,
          "content": "# Ultimate Python 學習大綱\n\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/ultimate-python/ci.yml)](https://github.com/huangsam/ultimate-python/actions)\n[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/ultimate-python)](https://codecov.io/gh/huangsam/ultimate-python)\n[![Quality Gate Status](https://img.shields.io/sonar/quality_gate/huangsam_ultimate-python?server=https%3A%2F%2Fsonarcloud.io)](https://sonarcloud.io/dashboard?id=huangsam_ultimate-python)\n[![License](https://img.shields.io/github/license/huangsam/ultimate-python)](https://github.com/huangsam/ultimate-python/blob/main/LICENSE)\n[![r/Python](https://img.shields.io/badge/reddit-original_post-red)](https://www.reddit.com/r/Python/comments/inllmf/ultimate_python_study_guide/)\n\nUltimate Python 學習大綱 - 適用於新手和專業人士。🐍 🐍 🐍\n\n```python\nprint(\"Ultimate Python 學習大綱\")\n```\n\n[English](README.md) |\n[한국어](README.ko.md) |\n[繁体中文](README.zh_tw.md) |\n[Español](README.es.md) |\n[Deutsch](README.de.md) |\n[हिन्दी](README.hi.md)\n\n## 動力\n\n我為了分享過去五年作為一個學生，大公司員工，以及開源（例如 Celery 和 Full Stack Python）貢獻者所習得的知識而創\n建了這個代碼倉庫。我期待更多人能抱持熱忱並開始一段與Python的美好旅程。🎓\n\n## 目標\n\n這是創建本指南的主要目標：\n\n🏆 **為喜歡動手學習的Python新手提供資源。** 本存儲庫集合了不同題目的獨立模組範例，而每個模組可以獨立在普通\n終端機（Terminal），IDE（如PyCharm）或者瀏覽器（如Repl.it）中運行。範例中的註解都經過精心編寫，引導讀者逐步了解程\n式流程。在不刪除主例程（main)並在修改後成功運行大前題下，我鼓勵讀者修改源代碼作練習。\n\n🏆 **為想重溫Python核心概念的程式員提供指南。** 本存儲庫主要借助內置庫（builtin libraries）作重溫工具，\n故不需額外安裝開源庫（如`sqlalchemy`，`requests`，`pandas`）。但是，如果您的目標是成為一個真正的Python\n達人（Pythonista)，那麼我會鼓勵您閱讀這些源代碼，而激發靈感。\n\n## 學習之旅\n\n[![Run on Repl.it](https://repl.it/badge/github/huangsam/ultimate-python)](https://repl.it/github/huangsam/ultimate-python)\n\n單擊上面的徽章就可在瀏覽器中啟動工作環境，而無需在電腦上額外安裝Git和Python。當你完成啟動，請複製這存儲庫。\n當你可以開啟你所複製存儲庫後，您就準備好Python學習之旅!善用每個模組，請細讀註解並嘗試運行模組代碼。\n\n有兩種運行模組的方式：\n\n1. 運行單一模組：`python ultimatepython/syntax/variable.py`\n2. 運行所有模組：`python runner.py`\n\n## 目錄\n\n📚 = 外部資源，\n🍰 = 入門題目，\n🤯 = 進階題目\n\n1. **關於 Python**\n    - 概述：[什麼是 Python](https://github.com/trekhleb/learn-python/blob/master/src/getting_started/what_is_python.md) ( 📚, 🍰 )\n    - 設計理念：[Python之格言](https://www.python.org/dev/peps/pep-0020/) ( 📚 )\n    - 樣式指南：[Python代碼樣式指南](https://www.python.org/dev/peps/pep-0008/) ( 📚, 🤯 )\n    - 數據模型：[數據模型](https://docs.python.org/3/reference/datamodel.html) ( 📚, 🤯 )\n    - 標準庫：[Python標準庫](https://docs.python.org/3/library/) ( 📚, 🤯 )\n    - 內置函式：[內置函式](https://docs.python.org/3/library/functions.html) ( 📚 )\n2. **語法**\n    - 變數：[內置值](ultimatepython/syntax/variable.py) ( 🍰 )\n    - 運算式：[數值運算](ultimatepython/syntax/expression.py) ( 🍰 )\n    - 按位: [中的位元運算符](ultimatepython/syntax/bitwise.py) ( 🍰 ), [一個的補語/補碼](https://www.geeksforgeeks.org/difference-between-1s-complement-representation-and-2s-complement-representation-technique/) ( 📚 )\n    - 條件運算式：[if | if-else | if-elif-else](ultimatepython/syntax/conditional.py) ( 🍰 )\n    - 迴圈：[for迴圈 | while迴圈](ultimatepython/syntax/loop.py) ( 🍰 )\n    - 定義函式：[def | lambda](ultimatepython/syntax/function.py) ( 🍰 )\n3. **資料結構**\n    - 列表：[列表操作](ultimatepython/data_structures/list.py) ( 🍰 )\n    - 元組：[元組操作](ultimatepython/data_structures/tuple.py)\n    - 集合：[集合操作](ultimatepython/data_structures/set.py)\n    - 字典：[字典操作](ultimatepython/data_structures/dict.py) ( 🍰 )\n    - 綜合：[list | tuple | set | dict](ultimatepython/data_structures/comprehension.py)\n    - 字串：[字串操作](ultimatepython/data_structures/string.py) ( 🍰 )\n    - 雙端隊列：[deque](ultimatepython/data_structures/deque.py) ( 🤯 )\n    - Namedtuple: [namedtuple](ultimatepython/data_structures/namedtuple.py) ( 🤯 )\n    - Defaultdict: [defaultdict](ultimatepython/data_structures/defaultdict.py) ( 🤯 )\n    - 時間複雜度：[cPython操作](https://wiki.python.org/moin/TimeComplexity) ( 📚, 🤯 )\n4. **類別**\n    - 基本類別：[基本定義](ultimatepython/classes/basic_class.py) ( 🍰 )\n    - 抽象類別：[抽象定義](ultimatepython/classes/abstract_class.py)\n    - 異常類別：[異常定義](ultimatepython/classes/exception_class.py)\n    - 迭代類別：[迭代器定義](ultimatepython/classes/iterator_class.py) ( 🤯 )\n    - 封裝: [封裝定義](ultimatepython/classes/encapsulation.py)\n5. **進階技巧**\n    - 裝飾器：[Decorator definition | wraps](ultimatepython/advanced/decorator.py) ( 🤯 )\n    - 文件處理: [File Handling](ultimatepython/advanced/file_handling.py) ( 🤯 )\n    - 資源管理器：[Context managers](ultimatepython/advanced/context_manager.py) ( 🤯 )\n    - 方法解析順序：[mro](ultimatepython/advanced/mro.py) ( 🤯 )\n    - Mixin：[Mixin定義](ultimatepython/advanced/mixin.py) ( 🤯 )\n    - 元類：[Metaclass定義](ultimatepython/advanced/meta_class.py) ( 🤯 )\n    - 執行緒：[ThreadPoolExecutor](ultimatepython/advanced/thread.py) ( 🤯 )\n    - 異步：[async | await](ultimatepython/advanced/async.py) ( 🤯 )\n    - 弱引用：[weakref](ultimatepython/advanced/weak_ref.py) ( 🤯 )\n    - 基準：[cProfile | pstats](ultimatepython/advanced/benchmark.py) ( 🤯 )\n    - 模擬：[MagicMock | PropertyMock | patch](ultimatepython/advanced/mocking.py) ( 🤯 )\n    - 正規表示式：[search | findall | match | fullmatch](ultimatepython/advanced/regex.py) ( 🤯 )\n    - 數據格式：[json | xml | csv](ultimatepython/advanced/data_format.py) ( 🤯 )\n    - 日期時間: [datetime | timezone](ultimatepython/advanced/date_time.py) ( 🤯 )\n\n## 額外資源\n\n👔 = 面試資源，\n🧪 = 代碼範例，\n🧠 = 項目構想\n\n### GitHub儲存庫\n\n通過閱讀其他備受尊重的資源來繼續學習。\n\n- [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python) ( 👔, 🧪 )\n- [faif/python-patterns](https://github.com/faif/python-patterns) ( 👔, 🧪 )\n- [geekcomputers/Python](https://github.com/geekcomputers/Python) ( 🧪 )\n- [trekhleb/homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) ( 🧪 )\n- [karan/Projects](https://github.com/karan/Projects) ( 🧠 )\n- [MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners) ( 🧠 )\n- [vinta/awesome-python](https://github.com/vinta/awesome-python)\n- [academic/awesome-datascience](https://github.com/academic/awesome-datascience)\n- [josephmisiti/awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning)\n- [ZuzooVn/machine-learning-for-software-engineers](https://github.com/ZuzooVn/machine-learning-for-software-engineers)\n- [30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python) ( 🧪 )\n- [ml-tooling/best-of-python](https://github.com/ml-tooling/best-of-python)\n- [practical-tutorials/project-based-learning](https://github.com/practical-tutorials/project-based-learning#python)\n- [freeCodeCamp/freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) ( 👔 )\n\n### 互動練習\n\n繼續練習才能使您的編碼技能不會生疏。\n\n- [DevProjects](https://www.codementor.io/projects/python)\n- [codechef.com](https://www.codechef.com/) ( 👔 )\n- [codeforces.com](https://codeforces.com/)\n- [coderbyte.com](https://www.coderbyte.com/) ( 👔 )\n- [codewars.com](https://www.codewars.com/)\n- [exercism.io](https://exercism.io/)\n- [geeksforgeeks.org](https://www.geeksforgeeks.org/) ( 👔 )\n- [hackerearth.com](https://www.hackerearth.com/)\n- [hackerrank.com](https://www.hackerrank.com/) ( 👔 )\n- [kaggle.com](https://www.kaggle.com/) ( 🧠 )\n- [leetcode.com](https://leetcode.com/) ( 👔 )\n- [projecteuler.net](https://projecteuler.net/)\n- [replit.com](https://replit.com/)\n- [w3schools.com](https://www.w3schools.com/python/) ( 🧪 )\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.16015625,
          "content": "# https://docs.codecov.com/docs/common-recipe-list\n# https://docs.codecov.com/docs/commit-status\ncoverage:\n  status:\n    patch:\n      default:\n        target: 100%\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.4658203125,
          "content": "[tool.ruff]\nline-length = 160\n\n[tool.isort]\nmulti_line_output = 3\ninclude_trailing_comma = true\nforce_grid_wrap = 0\nuse_parentheses = true\nensure_newline_before_comments = true\nline_length = 160\n\n[tool.coverage.run]\nbranch = true\n\n[tool.coverage.report]\nexclude_lines = [\n    \"skip: (if|else)\",\n    \"def __repr__\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"any\\\\(\"\n]\nfail_under = 80\nomit = [\n    \"venv/**\",\n    \"runner.py\",\n    \"**/__init__.py\"\n]\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0419921875,
          "content": "coverage==7.6.10\nisort==5.13.2\nruff==0.8.6\n"
        },
        {
          "name": "runner.py",
          "type": "blob",
          "size": 1.3720703125,
          "content": "from importlib import import_module\nfrom inspect import isfunction, signature\nfrom pkgutil import walk_packages\n\nfrom ultimatepython import __name__ as root_name\nfrom ultimatepython import __path__ as root_path\n\n# Module-level constants\n_STYLE_SUCCESS = \"\\033[92m\"\n_STYLE_BOLD = \"\\033[1m\"\n_STYLE_END = \"\\033[0m\"\n_RUNNER_PROGRESS = \"->\"\n_RUNNER_MAIN = \"main\"\n\n\ndef success_text(text):\n    \"\"\"Get success text.\"\"\"\n    return f\"{_STYLE_SUCCESS}{bold_text(text)}{_STYLE_END}\"\n\n\ndef bold_text(text):\n    \"\"\"Get bold text.\"\"\"\n    return f\"{_STYLE_BOLD}{text}{_STYLE_END}\"\n\n\ndef main():\n    print(bold_text(f\"Start {root_name} runner\"))\n\n    for item in walk_packages(root_path, f\"{root_name}.\"):\n        mod = import_module(item.name)\n\n        # Skip modules without a main object\n        if not hasattr(mod, _RUNNER_MAIN):\n            continue\n\n        # By this point, there is a main object in the module\n        mod_main = getattr(mod, _RUNNER_MAIN)\n\n        # The main object is a function\n        assert isfunction(mod_main)\n\n        # The main function has zero parameters\n        assert len(signature(mod_main).parameters) == 0\n\n        # The main function should not throw any errors\n        print(f\"{_RUNNER_PROGRESS} Run {mod.__name__}:{_RUNNER_MAIN}\", end=\"\")\n        mod_main()\n        print(\" [PASS]\")\n\n    print(success_text(f\"Finish {root_name} runner\"))\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "ultimatepython",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}