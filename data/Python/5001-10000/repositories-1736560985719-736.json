{
  "metadata": {
    "timestamp": 1736560985719,
    "page": 736,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adamchainz/django-cors-headers",
      "stars": 5415,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2236328125,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\nend_of_line = lf\n\n[*.py]\nindent_size = 4\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "*.egg-info/\n*.pyc\n/.coverage\n/.coverage.*\n/.tox\n/build/\n/dist/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.5849609375,
          "content": "ci:\n  autoupdate_schedule: monthly\n\ndefault_language_version:\n  python: python3.12\n\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v5.0.0\n  hooks:\n  - id: check-added-large-files\n  - id: check-case-conflict\n  - id: check-json\n  - id: check-merge-conflict\n  - id: check-symlinks\n  - id: check-toml\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n- repo: https://github.com/tox-dev/pyproject-fmt\n  rev: v2.5.0\n  hooks:\n  - id: pyproject-fmt\n- repo: https://github.com/tox-dev/tox-ini-fmt\n  rev: 1.4.1\n  hooks:\n  - id: tox-ini-fmt\n- repo: https://github.com/rstcheck/rstcheck\n  rev: v6.2.4\n  hooks:\n  - id: rstcheck\n    additional_dependencies:\n    - tomli==2.0.1\n- repo: https://github.com/asottile/pyupgrade\n  rev: v3.19.1\n  hooks:\n  - id: pyupgrade\n    args: [--py39-plus]\n- repo: https://github.com/adamchainz/django-upgrade\n  rev: 1.22.2\n  hooks:\n  - id: django-upgrade\n    args: [--target-version, '4.2']\n- repo: https://github.com/psf/black-pre-commit-mirror\n  rev: 24.10.0\n  hooks:\n  - id: black\n- repo: https://github.com/adamchainz/blacken-docs\n  rev: 1.19.1\n  hooks:\n  - id: blacken-docs\n    additional_dependencies:\n    - black==23.1.0\n- repo: https://github.com/pycqa/isort\n  rev: 5.13.2\n  hooks:\n    - id: isort\n      name: isort (python)\n- repo: https://github.com/PyCQA/flake8\n  rev: 7.1.1\n  hooks:\n  - id: flake8\n    additional_dependencies:\n    - flake8-bugbear\n    - flake8-comprehensions\n    - flake8-logging\n    - flake8-tidy-imports\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.14.1\n  hooks:\n  - id: mypy\n    additional_dependencies:\n    - django-stubs==5.0.4\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 12.763671875,
          "content": "=========\nChangelog\n=========\n\n4.6.0 (2024-10-29)\n------------------\n\n* Drop Django 3.2 to 4.1 support.\n\n4.5.0 (2024-10-12)\n------------------\n\n* Drop Python 3.8 support.\n\n* Support Python 3.13.\n\n4.4.0 (2024-06-19)\n------------------\n\n* Support Django 5.1.\n\n4.3.1 (2023-11-14)\n------------------\n\n* Fixed ASGI compatibility on Python 3.12.\n\n  Thanks to Adrian Capitanu for the report in `Issue #908 <https://github.com/adamchainz/django-cors-headers/issues/908>`__ and Rooyal in `PR #911 <https://github.com/adamchainz/django-cors-headers/pull/911>`__.\n\n4.3.0 (2023-10-11)\n------------------\n\n* Avoid adding the ``access-control-allow-credentials`` header to unallowed responses.\n\n  Thanks to Adam Romanek in `PR #888 <https://github.com/adamchainz/django-cors-headers/pull/888>`__.\n\n* Support Django 5.0.\n\n4.2.0 (2023-07-10)\n------------------\n\n* Drop Python 3.7 support.\n\n4.1.0 (2023-06-14)\n------------------\n\n* Support Python 3.12.\n\n4.0.0 (2023-05-12)\n------------------\n\n* Add ``CORS_ALLOW_PRIVATE_NETWORK`` setting, which enables support for the Local Network Access draft specification.\n\n  Thanks to Issac Kelly in `PR #745 <https://github.com/adamchainz/django-cors-headers/pull/745>`__ and jjurgens0 in `PR #833 <https://github.com/adamchainz/django-cors-headers/pull/833>`__.\n\n* Remove three headers from the default \"accept list\": ``accept-encoding``, ``dnt``, and ``origin``.\n  These are `Forbidden header names <https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name>`__, which means requests JavaScript can never set them.\n  Consequently, allowing them via CORS has no effect.\n\n  Thanks to jub0bs for the report in `Issue #842 <https://github.com/adamchainz/django-cors-headers/issues/842>`__.\n\n* Drop the ``CORS_REPLACE_HTTPS_REFERER`` setting and ``CorsPostCsrfMiddleware``.\n  Since Django 1.9, the ``CSRF_TRUSTED_ORIGINS`` setting has been the preferred solution to making CSRF checks pass for CORS requests.\n  The removed setting and middleware only existed as a workaround for Django versions before 1.9.\n\n* Add async support to the middleware, reducing overhead on async views.\n\n3.14.0 (2023-02-25)\n-------------------\n\n* Support Django 4.2.\n\n* Switch from ``urlparse()`` to ``urlsplit()`` for URL parsing, reducing the middleware runtime up to 5%.\n  This changes the type passed to ``origin_found_in_white_lists()``, so if you have subclassed the middleware to override this method, you should check it is compatible (it most likely is).\n\n  Thanks to Thibaut Decombe in `PR #793 <https://github.com/adamchainz/django-cors-headers/pull/793>`__.\n\n3.13.0 (2022-06-05)\n-------------------\n\n* Support Python 3.11.\n\n* Support Django 4.1.\n\n3.12.0 (2022-05-10)\n-------------------\n\n* Drop support for Django 2.2, 3.0, and 3.1.\n\n3.11.0 (2022-01-10)\n-------------------\n\n* Drop Python 3.6 support.\n\n3.10.1 (2021-12-05)\n-------------------\n\n* Prevent a crash when an invalid ``Origin`` header is sent.\n\n  Thanks to minusf for the report in `Issue #701 <https://github.com/adamchainz/django-cors-headers/issues/701>`__.\n\n3.10.0 (2021-10-05)\n-------------------\n\n* Support Python 3.10.\n\n3.9.0 (2021-09-28)\n------------------\n\n* Support Django 4.0.\n\n3.8.0 (2021-08-15)\n------------------\n\n* Add type hints.\n\n* Stop distributing tests to reduce package size. Tests are not intended to be\n  run outside of the tox setup in the repository. Repackagers can use GitHub's\n  tarballs per tag.\n\n3.7.0 (2021-01-25)\n------------------\n\n* Support Django 3.2.\n\n3.6.0 (2020-12-13)\n------------------\n\n* Drop Python 3.5 support.\n* Support Python 3.9.\n\n3.5.0 (2020-08-25)\n------------------\n\n* Following Django’s example in\n  `Ticket #31670 <https://code.djangoproject.com/ticket/31670>`__ for replacing\n  the term “whitelist”, plus an aim to make the setting names more\n  comprehensible, the following settings have been renamed:\n\n  * ``CORS_ORIGIN_WHITELIST`` -> ``CORS_ALLOWED_ORIGINS``\n  * ``CORS_ORIGIN_REGEX_WHITELIST`` -> ``CORS_ALLOWED_ORIGIN_REGEXES``\n  * ``CORS_ORIGIN_ALLOW_ALL`` -> ``CORS_ALLOW_ALL_ORIGINS``\n\n  The old names will continue to work as aliases, with the new ones taking\n  precedence.\n\n3.4.0 (2020-06-19)\n------------------\n\n* Drop Django 2.0 and 2.1 support.\n\n3.4.0 (2020-06-15)\n------------------\n\n* Add Django 3.1 support.\n\n3.3.0 (2020-05-18)\n------------------\n\n* Drop Django 1.11 support. Only Django 2.0+ is supported now.\n* Drop the ``providing_args`` argument from ``Signal`` to prevent a deprecation\n  warning on Django 3.1.\n\n3.2.1 (2020-01-04)\n------------------\n\n* Update LICENSE file to Unix line endings, fixing issues with license checker\n  ``pip-licenses`` (`Issue\n  #477 <https://github.com/adamchainz/django-cors-headers/issues/477>`__).\n\n3.2.0 (2019-11-15)\n------------------\n\n* Converted setuptools metadata to configuration file. This meant removing the\n  ``__version__`` attribute from the package. If you want to inspect the\n  installed version, use\n  ``importlib.metadata.version(\"django-cors-headers\")``\n  (`docs <https://docs.python.org/3.8/library/importlib.metadata.html#distribution-versions>`__ /\n  `backport <https://pypi.org/project/importlib-metadata/>`__).\n* Support Python 3.8.\n\n3.1.1 (2019-09-30)\n------------------\n\n* Support the value `file://` for origins, which is accidentally sent by some\n  versions of Chrome on Android.\n\n3.1.0 (2019-08-13)\n------------------\n\n* Drop Python 2 support, only Python 3.5-3.7 is supported now.\n* Fix all links for move from ``github.com/ottoyiu/django-cors-headers`` to\n  ``github.com/adamchainz/django-cors-headers``.\n\n3.0.2 (2019-05-28)\n------------------\n\n* Add a hint to the ``corsheaders.E013`` check to make it more obvious how to\n  resolve it.\n\n3.0.1 (2019-05-13)\n------------------\n\n* Allow 'null' in ``CORS_ORIGIN_WHITELIST`` check.\n\n3.0.0 (2019-05-10)\n------------------\n\n* ``CORS_ORIGIN_WHITELIST`` now requires URI schemes, and optionally ports.\n  This is part of the CORS specification\n  (`Section 3.2 <https://tools.ietf.org/html/rfc6454#section-3.2>`_) that was\n  not implemented in this library, except from with the\n  ``CORS_ORIGIN_REGEX_WHITELIST`` setting. It fixes a security issue where the\n  CORS middleware would allow requests between schemes, for example from\n  insecure ``http://`` Origins to a secure ``https://`` site.\n\n  You will need to update your whitelist to include schemes, for example from\n  this:\n\n  .. code-block:: python\n\n      CORS_ORIGIN_WHITELIST = [\"example.com\"]\n\n  ...to this:\n\n  .. code-block:: python\n\n      CORS_ORIGIN_WHITELIST = [\"https://example.com\"]\n\n* Removed the ``CORS_MODEL`` setting, and associated class. It seems very few,\n  or no users were using it, since there were no bug reports since its move to\n  abstract in version 2.0.0 (2017-01-07). If you *are* using this\n  functionality, you can continue by changing your model to not inherit from\n  the abstract one, and add a signal handler for ``check_request_enabled`` that\n  reads from your model. Note you'll need to handle the move to include schemes\n  for Origins.\n\n2.5.3 (2019-04-28)\n------------------\n\n* Tested on Django 2.2. No changes were needed for compatibility.\n* Tested on Python 3.7. No changes were needed for compatibility.\n\n2.5.2 (2019-03-15)\n------------------\n\n* Improve inclusion of tests in ``sdist`` to ignore ``.pyc`` files.\n\n2.5.1 (2019-03-13)\n------------------\n\n* Include test infrastructure in ``sdist`` to allow consumers to use it.\n\n2.5.0 (2019-03-05)\n------------------\n\n* Drop Django 1.8, 1.9, and 1.10 support. Only Django 1.11+ is supported now.\n\n2.4.1 (2019-02-28)\n------------------\n\n* Fix ``DeprecationWarning`` from importing ``collections.abc.Sequence`` on\n  Python 3.7.\n\n2.4.0 (2018-07-18)\n------------------\n\n* Always add 'Origin' to the 'Vary' header for responses to enabled URL's,\n  to prevent caching of responses intended for one origin being served for\n  another.\n\n2.3.0 (2018-06-27)\n------------------\n\n* Match ``CORS_URLS_REGEX`` to ``request.path_info`` instead of\n  ``request.path``, so the patterns can work without knowing the site's path\n  prefix at configuration time.\n\n2.2.1 (2018-06-27)\n------------------\n\n* Add ``Content-Length`` header to CORS preflight requests. This fixes issues\n  with some HTTP proxies and servers, e.g. AWS Elastic Beanstalk.\n\n2.2.0 (2018-02-28)\n------------------\n\n* Django 2.0 compatibility. Again there were no changes to the actual library\n  code, so previous versions probably work.\n* Ensured that ``request._cors_enabled`` is always a ``bool()`` - previously it\n  could be set to a regex match object.\n\n2.1.0 (2017-05-28)\n------------------\n\n* Django 1.11 compatibility. There were no changes to the actual library code,\n  so previous versions probably work, though they weren't properly tested on\n  1.11.\n\n2.0.2 (2017-02-06)\n------------------\n\n* Fix when the check for ``CORS_MODEL`` is done to allow it to properly add\n  the headers and respond to ``OPTIONS`` requests.\n\n2.0.1 (2017-01-29)\n------------------\n\n* Add support for specifying 'null' in ``CORS_ORIGIN_WHITELIST``.\n\n2.0.0 (2017-01-07)\n------------------\n\n* Remove previously undocumented ``CorsModel`` as it was causing migration\n  issues. For backwards compatibility, any users previously using ``CorsModel``\n  should create a model in their own app that inherits from the new\n  ``AbstractCorsModel``, and to keep using the same data, set the model's\n  ``db_table`` to 'corsheaders_corsmodel'. Users not using ``CorsModel``\n  will find they have an unused table that they can drop.\n* Make sure that ``Access-Control-Allow-Credentials`` is in the response if the\n  client asks for it.\n\n1.3.1 (2016-11-09)\n------------------\n\n* Fix a bug with the single check if CORS enabled added in 1.3.0: on Django\n  < 1.10 shortcut responses could be generated by middleware above\n  ``CorsMiddleware``, before it processed the request, failing with an\n  ``AttributeError`` for ``request._cors_enabled``. Also clarified the docs\n  that ``CorsMiddleware`` should be kept as high as possible in your middleware\n  stack, above any middleware that can generate such responses.\n\n1.3.0 (2016-11-06)\n------------------\n\n* Add checks to validate the types of the settings.\n* Add the 'Do Not Track' header ``'DNT'`` to the default for\n  ``CORS_ALLOW_HEADERS``.\n* Add 'Origin' to the 'Vary' header of outgoing requests when not allowing all\n  origins, as per the CORS spec. Note this changes the way HTTP caching works\n  with your CORS-enabled responses.\n* Check whether CORS should be enabled on a request only once. This has had a\n  minor change on the conditions where any custom signals will be called -\n  signals will now always be called *before* ``HTTP_REFERER`` gets replaced,\n  whereas before they could be called before and after. Also this attaches the\n  attribute ``_cors_enabled`` to ``request`` - please take care that other\n  code you're running does not remove it.\n\n1.2.2 (2016-10-05)\n------------------\n\n* Add ``CorsModel.__str__`` for human-readable text\n* Add a signal that allows you to add code for more intricate control over when\n  CORS headers are added.\n\n1.2.1 (2016-09-30)\n------------------\n\n* Made settings dynamically respond to changes, and which allows you to import\n  the defaults for headers and methods in order to extend them.\n\n1.2.0 (2016-09-28)\n------------------\n\n* Drop Python 2.6 support.\n* Drop Django 1.3-1.7 support, as they are no longer supported.\n* Confirmed Django 1.9 support (no changes outside of tests were necessary).\n* Added Django 1.10 support.\n* Package as a universal wheel.\n\n1.1.0 (2014-12-15)\n------------------\n\n* django-cors-header now supports Django 1.8 with its new application loading\n  system! Thanks @jpadilla for making this possible and sorry for the delay in\n  making a release.\n\n1.0.0 (2014-12-13)\n------------------\n\ndjango-cors-headers is all grown-up :) Since it's been used in production for\nmany many deployments, I think it's time we mark this as a stable release.\n\n* Switching this middleware versioning over to semantic versioning\n* #46 add user-agent and accept-encoding default headers\n* #45 pep-8 this big boy up\n\n0.13 (2014-08-14)\n-----------------\n\n* Add support for Python 3\n* Updated tests\n* Improved documentation\n* Small bugfixes\n\n0.12 (2013-09-24)\n-----------------\n\n* Added an option to selectively enable CORS only for specific URLs\n\n0.11 (2013-09-24)\n\n* Added the ability to specify a regex for whitelisting many origin hostnames\n  at once\n\n0.10 (2013-09-05)\n-----------------\n\n* Introduced port distinction for origin checking\n* Use ``urlparse`` for Python 3 support\n* Added testcases to project\n\n0.06 (2013-02-18)\n-----------------\n\n* Add support for exposed response headers\n\n0.05 (2013-01-26)\n-----------------\n\n* Fixed middleware to ensure correct response for CORS preflight requests\n\n0.04 (2013-01-25)\n-----------------\n\n* Add ``Access-Control-Allow-Credentials`` control to simple requests\n\n0.03 (2013-01-22)\n-----------------\n\n* Bugfix to repair mismatched default variable names\n\n0.02 (2013-01-19)\n-----------------\n\n* Refactor/pull defaults into separate file\n\n0.01 (2013-01-19)\n-----------------\n\n* Initial release\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 0.076171875,
          "content": "See https://github.com/adamchainz/django-cors-headers/blob/main/CHANGELOG.rst\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0849609375,
          "content": "MIT License\n\nCopyright (c) 2017 Otto Yiu (https://ottoyiu.com) and other contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1123046875,
          "content": "prune tests\ninclude CHANGELOG.rst\ninclude LICENSE\ninclude pyproject.toml\ninclude README.rst\ninclude src/*/py.typed\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 14.5009765625,
          "content": "===================\ndjango-cors-headers\n===================\n\n.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/django-cors-headers/main.yml.svg?branch=main&style=for-the-badge\n   :target: https://github.com/adamchainz/django-cors-headers/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-cors-headers/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-cors-headers.svg?style=for-the-badge\n    :target: https://pypi.org/project/django-cors-headers/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n    :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nA Django App that adds Cross-Origin Resource Sharing (CORS) headers to\nresponses. This allows in-browser requests to your Django application from\nother origins.\n\n----\n\n**Improve your Django and Git skills** with `my books <https://adamj.eu/books/>`__.\n\n----\n\nAbout CORS\n----------\n\nAdding CORS headers allows your resources to be accessed on other domains. It's\nimportant you understand the implications before adding the headers, since you\ncould be unintentionally opening up your site's private data to others.\n\nSome good resources to read on the subject are:\n\n* Julia Evans' `introductory comic <https://drawings.jvns.ca/cors/>`__ and\n  `educational quiz <https://questions.wizardzines.com/cors.html>`__.\n* Jake Archibald’s `How to win at CORS <https://jakearchibald.com/2021/cors/>`__\n* The `MDN Article <https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS>`_\n* The `web.dev Article <https://web.dev/articles/cross-origin-resource-sharing>`_\n* The `Wikipedia Page <https://en.wikipedia.org/wiki/Cross-origin_resource_sharing>`_\n\nRequirements\n------------\n\nPython 3.9 to 3.13 supported.\n\nDjango 4.2 to 5.1 supported.\n\nSetup\n-----\n\nInstall from **pip**:\n\n.. code-block:: sh\n\n    python -m pip install django-cors-headers\n\nand then add it to your installed apps:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...,\n        \"corsheaders\",\n        ...,\n    ]\n\nMake sure you add the trailing comma or you might get a ``ModuleNotFoundError``\n(see `this blog\npost <https://adamj.eu/tech/2020/06/29/why-does-python-raise-modulenotfounderror-when-modifying-installed-apps/>`__).\n\nYou will also need to add a middleware class to listen in on responses:\n\n.. code-block:: python\n\n    MIDDLEWARE = [\n        ...,\n        \"corsheaders.middleware.CorsMiddleware\",\n        \"django.middleware.common.CommonMiddleware\",\n        ...,\n    ]\n\n``CorsMiddleware`` should be placed as high as possible, especially before any\nmiddleware that can generate responses such as Django's ``CommonMiddleware`` or\nWhitenoise's ``WhiteNoiseMiddleware``. If it is not before, it will not be able\nto add the CORS headers to these responses.\n\nAbout\n-----\n\n**django-cors-headers** was created in January 2013 by Otto Yiu. It went\nunmaintained from August 2015 and was forked in January 2016 to the package\n`django-cors-middleware <https://github.com/zestedesavoir/django-cors-middleware>`_\nby Laville Augustin at Zeste de Savoir.\nIn September 2016, Adam Johnson, Ed Morley, and others gained maintenance\nresponsibility for **django-cors-headers**\n(`Issue 110 <https://github.com/adamchainz/django-cors-headers/issues/110>`__)\nfrom Otto Yiu.\nBasically all of the changes in the forked **django-cors-middleware** were\nmerged back, or re-implemented in a different way, so it should be possible to\nswitch back. If there's a feature that hasn't been merged, please open an issue\nabout it.\n\n**django-cors-headers** has had `40+ contributors\n<https://github.com/adamchainz/django-cors-headers/graphs/contributors>`__\nin its time; thanks to every one of them.\n\nConfiguration\n-------------\n\nConfigure the middleware's behaviour in your Django settings. You must set at\nleast one of three following settings:\n\n* ``CORS_ALLOWED_ORIGINS``\n* ``CORS_ALLOWED_ORIGIN_REGEXES``\n* ``CORS_ALLOW_ALL_ORIGINS``\n\n``CORS_ALLOWED_ORIGINS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of origins that are authorized to make cross-site HTTP requests.\nThe origins in this setting will be allowed, and the requesting origin will be echoed back to the client in the |access-control-allow-origin header|__.\nDefaults to ``[]``.\n\n.. |access-control-allow-origin header| replace:: ``access-control-allow-origin`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\n\nAn Origin is defined by `the CORS RFC Section 3.2 <https://tools.ietf.org/html/rfc6454#section-3.2>`_ as a URI scheme + hostname + port, or one of the special values ``'null'`` or ``'file://'``.\nDefault ports (HTTPS = 443, HTTP = 80) are optional.\n\nThe special value ``null`` is sent by the browser in `\"privacy-sensitive contexts\" <https://tools.ietf.org/html/rfc6454#section-6>`__, such as when the client is running from a ``file://`` domain.\nThe special value `file://` is sent accidentally by some versions of Chrome on Android as per `this bug <https://bugs.chromium.org/p/chromium/issues/detail?id=991107>`__.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ALLOWED_ORIGINS = [\n        \"https://example.com\",\n        \"https://sub.example.com\",\n        \"http://localhost:8080\",\n        \"http://127.0.0.1:9000\",\n    ]\n\nPreviously this setting was called ``CORS_ORIGIN_WHITELIST``, which still works as an alias, with the new name taking precedence.\n\n``CORS_ALLOWED_ORIGIN_REGEXES: Sequence[str | Pattern[str]]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests.\nDefaults to ``[]``.\nUseful when ``CORS_ALLOWED_ORIGINS`` is impractical, such as when you have a large number of subdomains.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ALLOWED_ORIGIN_REGEXES = [\n        r\"^https://\\w+\\.example\\.com$\",\n    ]\n\nPreviously this setting was called ``CORS_ORIGIN_REGEX_WHITELIST``, which still works as an alias, with the new name taking precedence.\n\n``CORS_ALLOW_ALL_ORIGINS: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, all origins will be allowed.\nOther settings restricting allowed origins will be ignored.\nDefaults to ``False``.\n\nSetting this to ``True`` can be *dangerous*, as it allows any website to make cross-origin requests to yours.\nGenerally you'll want to restrict the list of allowed origins with ``CORS_ALLOWED_ORIGINS`` or ``CORS_ALLOWED_ORIGIN_REGEXES``.\n\nPreviously this setting was called ``CORS_ORIGIN_ALLOW_ALL``, which still works as an alias, with the new name taking precedence.\n\n--------------\n\nThe following are optional settings, for which the defaults probably suffice.\n\n``CORS_URLS_REGEX: str | Pattern[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA regex which restricts the URL's for which the CORS headers will be sent.\nDefaults to ``r'^.*$'``, i.e. match all URL's.\nUseful when you only need CORS on a part of your site, e.g. an API at ``/api/``.\n\nExample:\n\n.. code-block:: python\n\n    CORS_URLS_REGEX = r\"^/api/.*$\"\n\n``CORS_ALLOW_METHODS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of HTTP verbs that are allowed for the actual request.\nDefaults to:\n\n.. code-block:: python\n\n    CORS_ALLOW_METHODS = (\n        \"DELETE\",\n        \"GET\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"POST\",\n        \"PUT\",\n    )\n\nThe default can be imported as ``corsheaders.defaults.default_methods`` so you can just extend it with your custom methods.\nThis allows you to keep up to date with any future changes.\nFor example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_methods\n\n    CORS_ALLOW_METHODS = (\n        *default_methods,\n        \"POKE\",\n    )\n\n``CORS_ALLOW_HEADERS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of non-standard HTTP headers that you permit in requests from the browser.\nSets the |Access-Control-Allow-Headers header|__ in responses to `preflight requests <https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request>`__.\nDefaults to:\n\n.. |Access-Control-Allow-Headers header| replace:: ``Access-Control-Allow-Headers`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers\n\n.. code-block:: python\n\n    CORS_ALLOW_HEADERS = (\n        \"accept\",\n        \"authorization\",\n        \"content-type\",\n        \"user-agent\",\n        \"x-csrftoken\",\n        \"x-requested-with\",\n    )\n\nThe default can be imported as ``corsheaders.defaults.default_headers`` so you can extend it with your custom headers.\nThis allows you to keep up to date with any future changes.\nFor example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_headers\n\n    CORS_ALLOW_HEADERS = (\n        *default_headers,\n        \"my-custom-header\",\n    )\n\n``CORS_EXPOSE_HEADERS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of extra HTTP headers to expose to the browser, in addition to the default `safelisted headers <https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_response_header>`__.\nIf non-empty, these are declared in the |access-control-expose-headers header|__.\nDefaults to ``[]``.\n\n.. |access-control-expose-headers header| replace:: ``access-control-expose-headers`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\n\n``CORS_PREFLIGHT_MAX_AGE: int``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe number of seconds the browser can cache the preflight response.\nThis sets the |access-control-max-age header|__ in preflight responses.\nIf this is 0 (or any falsey value), no max age header will be sent.\nDefaults to ``86400`` (one day).\n\n.. |access-control-max-age header| replace:: ``access-control-max-age`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age\n\n**Note:**\nBrowsers send `preflight requests <https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request>`__ before certain “non-simple” requests, to check they will be allowed.\nRead more about it in the `CORS MDN article <https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflighted_requests>`_.\n\n``CORS_ALLOW_CREDENTIALS: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, cookies will be allowed to be included in cross-site HTTP requests.\nThis sets the |access-control-allow-credentials header|__ in preflight and normal responses.\nDefaults to ``False``.\n\n.. |access-control-allow-credentials header| replace:: ``Access-Control-Allow-Credentials`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/access-control-allow-credentials\n\nNote: in Django 2.1 the `SESSION_COOKIE_SAMESITE`_ setting was added, set to ``'Lax'`` by default, which will prevent Django's session cookie being sent cross-domain.\nChange the setting to ``'None'`` if you need to bypass this security restriction.\n\n.. _SESSION_COOKIE_SAMESITE: https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SESSION_COOKIE_SAMESITE\n\n``CORS_ALLOW_PRIVATE_NETWORK: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, allow requests from sites on “public” IP to this server on a “private” IP.\nIn such cases, browsers send an extra CORS header ``access-control-request-private-network``, for which ``OPTIONS`` responses must contain ``access-control-allow-private-network: true``.\n\nRefer to:\n\n* `Local Network Access <https://wicg.github.io/local-network-access/>`__, the W3C Community Draft specification.\n* `Private Network Access: introducing preflights <https://developer.chrome.com/blog/private-network-access-preflight/>`__, a blog post from the Google Chrome team.\n\nCSRF Integration\n----------------\n\nMost sites will need to take advantage of the `Cross-Site Request Forgery\nprotection <https://docs.djangoproject.com/en/stable/ref/csrf/>`_ that Django\noffers. CORS and CSRF are separate, and Django has no way of using your CORS\nconfiguration to exempt sites from the ``Referer`` checking that it does on\nsecure requests. The way to do that is with its `CSRF_TRUSTED_ORIGINS setting\n<https://docs.djangoproject.com/en/stable/ref/settings/#csrf-trusted-origins>`_.\nFor example:\n\n.. code-block:: python\n\n    CORS_ALLOWED_ORIGINS = [\n        \"https://read-only.example.com\",\n        \"https://read-and-write.example.com\",\n    ]\n\n    CSRF_TRUSTED_ORIGINS = [\n        \"https://read-and-write.example.com\",\n    ]\n\nSignals\n-------\n\nIf you have a use case that requires more than just the above configuration,\nyou can attach code to check if a given request should be allowed. For example,\nthis can be used to read the list of origins you allow from a model. Attach any\nnumber of handlers to the ``check_request_enabled``\n`Django signal <https://docs.djangoproject.com/en/stable/ref/signals/>`_, which\nprovides the ``request`` argument (use ``**kwargs`` in your handler to protect\nagainst any future arguments being added). If any handler attached to the\nsignal returns a truthy value, the request will be allowed.\n\nFor example you might define a handler like this:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n    from myapp.models import MySite\n\n\n    def cors_allow_mysites(sender, request, **kwargs):\n        return MySite.objects.filter(host=request.headers[\"origin\"]).exists()\n\n\n    check_request_enabled.connect(cors_allow_mysites)\n\nThen connect it at app ready time using a `Django AppConfig\n<https://docs.djangoproject.com/en/stable/ref/applications/>`_:\n\n.. code-block:: python\n\n    # myapp/__init__.py\n\n    default_app_config = \"myapp.apps.MyAppConfig\"\n\n.. code-block:: python\n\n    # myapp/apps.py\n\n    from django.apps import AppConfig\n\n\n    class MyAppConfig(AppConfig):\n        name = \"myapp\"\n\n        def ready(self):\n            # Makes sure all signal handlers are connected\n            from myapp import handlers  # noqa\n\nA common use case for the signal is to allow *all* origins to access a subset\nof URL's, whilst allowing a normal set of origins to access *all* URL's. This\nisn't possible using just the normal configuration, but it can be achieved with\na signal handler.\n\nFirst set ``CORS_ALLOWED_ORIGINS`` to the list of trusted origins that are\nallowed to access every URL, and then add a handler to\n``check_request_enabled`` to allow CORS regardless of the origin for the\nunrestricted URL's. For example:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n\n    def cors_allow_api_to_everyone(sender, request, **kwargs):\n        return request.path.startswith(\"/api/\")\n\n\n    check_request_enabled.connect(cors_allow_api_to_everyone)\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.3056640625,
          "content": "[build-system]\nbuild-backend = \"setuptools.build_meta\"\nrequires = [\n  \"setuptools\",\n]\n\n[project]\nname = \"django-cors-headers\"\nversion = \"4.6.0\"\ndescription = \"django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS).\"\nreadme = \"README.rst\"\nkeywords = [\n  \"api\",\n  \"cors\",\n  \"django\",\n  \"middleware\",\n  \"rest\",\n]\nmaintainers = [\n  { name = \"Adam Johnson\", email = \"me@adamj.eu\" },\n]\nauthors = [\n  { name = \"Otto Yiu\", email = \"otto@live.ca\" },\n]\nrequires-python = \">=3.9\"\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Environment :: Web Environment\",\n  \"Framework :: Django\",\n  \"Framework :: Django :: 4.2\",\n  \"Framework :: Django :: 5.0\",\n  \"Framework :: Django :: 5.1\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Natural Language :: English\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: Implementation :: CPython\",\n  \"Typing :: Typed\",\n]\ndependencies = [\n  \"asgiref>=3.6\",\n  \"django>=4.2\",\n]\nurls.Changelog = \"https://github.com/adamchainz/django-cors-headers/blob/main/CHANGELOG.rst\"\nurls.Funding = \"https://adamj.eu/books/\"\nurls.Repository = \"https://github.com/adamchainz/django-cors-headers\"\n\n[tool.isort]\nadd_imports = [\n  \"from __future__ import annotations\",\n]\nforce_single_line = true\nprofile = \"black\"\n\n[tool.pyproject-fmt]\nmax_supported_python = \"3.13\"\n\n[tool.pytest.ini_options]\naddopts = \"\"\"\\\n    --strict-config\n    --strict-markers\n    --ds=tests.settings\n    \"\"\"\ndjango_find_project = false\nxfail_strict = true\n\n[tool.coverage.run]\nbranch = true\nparallel = true\nsource = [\n  \"corsheaders\",\n  \"tests\",\n]\n\n[tool.coverage.paths]\nsource = [\n  \"src\",\n  \".tox/**/site-packages\",\n]\n\n[tool.coverage.report]\nshow_missing = true\n\n[tool.mypy]\nenable_error_code = [\n  \"ignore-without-code\",\n  \"redundant-expr\",\n  \"truthy-bool\",\n]\nmypy_path = \"src/\"\nnamespace_packages = false\nstrict = true\nwarn_unreachable = true\n\n[[tool.mypy.overrides]]\nmodule = \"tests.*\"\nallow_untyped_defs = true\n\n[tool.rstcheck]\nreport_level = \"ERROR\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.537109375,
          "content": "[tox]\nrequires =\n    tox>=4.2\nenv_list =\n    py313-django{51}\n    py312-django{51, 50, 42}\n    py311-django{51, 50, 42}\n    py310-django{51, 50, 42}\n    py39-django{42}\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\ndeps =\n    -r tests/requirements/{envname}.txt\nset_env =\n    PYTHONDEVMODE = 1\ncommands =\n    python \\\n      -W error::ResourceWarning \\\n      -W error::DeprecationWarning \\\n      -W error::PendingDeprecationWarning \\\n      -m coverage run \\\n      -m pytest {posargs:tests}\n\n[flake8]\nmax-line-length = 88\nextend-ignore = E203,E501\n"
        }
      ]
    }
  ]
}