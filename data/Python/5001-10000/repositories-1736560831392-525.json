{
  "metadata": {
    "timestamp": 1736560831392,
    "page": 525,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MaartenGr/BERTopic",
      "stars": 6301,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.138671875,
          "content": "# Initial Ruff Linting\n70d7725e5c89bccfe7d4e5a3ccd87e05c642d74b\n# Change line-length and ruff format\n39bbfdb8298b5faa32e4bc052080d240f6140bea\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03125,
          "content": "*.ipynb linguist-documentation \n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9638671875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\nmodel_dir\nmodel_dir/\ntest\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Sphinx documentation\ndocs/_build/\n\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Artifacts\n.idea\n.idea/\n.vscode\n.DS_Store\n\n# mkdocs\nsite/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.3447265625,
          "content": "# Contributing to BERTopic\n\nHi! Thank you for considering contributing to BERTopic. With the modular nature of BERTopic, many new add-ons, backends, representation models, sub-models, and LLMs, can quickly be added to keep up with the incredibly fast-pacing field. \n\nWhether contributions are new features, better documentation, bug fixes, or improvement on the repository itself, anything is appreciated!\n\n## üìö Guidelines\n\n### ü§ñ Contributing Code\n\nTo contribute to this project, we follow an `issue -> pull request` approach for main features and bug fixes. This means that any new feature, bug fix, or anything else that touches on code directly needs to start from an issue first. That way, the main discussion about what needs to be added/fixed can be done in the issue before creating a pull request. This makes sure that we are on the same page before you start coding your pull request. If you start working on an issue, please assign it to yourself but do so after there is an agreement with the maintainer, [@MaartenGr](https://github.com/MaartenGr). \n\nWhen there is agreement on the assigned approach, a pull request can be created in which the fix/feature can be added. This follows a  [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow.\nPlease do not try to push directly to this repo unless you are a maintainer.\n\nThere are exceptions to the `issue -> pull request` approach that are typically small changes that do not need agreements, such as:\n* Documentation\n* Spelling/grammar issues\n* Docstrings\n* etc.\n\nThere is a large focus on documentation in this repository, so please make sure to add extensive descriptions of features when creating the pull request. \n\nNote that the main focus of pull requests and code should be:\n* Easy readability\n* Clear communication\n* Sufficient documentation\n\n## üöÄ Quick Start\n\nTo start contributing, make sure to first start from a fresh environment. Using an environment manager, such as `conda` or `pyenv` helps in making sure that your code is reproducible and tracks the versions you have in your environment. \n\nIf you are using conda, you can approach it as follows:\n\n1. Create and activate a new conda environment (e.g., `conda create -n bertopic python=3.9`)\n2. Install requirements (e.g., `pip install .[dev]`)\n  * This makes sure to also install documentation and testing packages\n3. (Optional) Run `make docs` to build your documentation\n4. (Optional) Run `make test` to run the unit tests and `make coverage` to check the coverage of unit tests\n\n‚ùóNote: Unit testing the package can take quite some time since it needs to run several variants of the BERTopic pipeline.\n\n## üßπ Linting and Formatting\n\nWe use [Ruff](https://docs.astral.sh/ruff/) to ensure code is uniformly formatted and to avoid common mistakes and bad practices.\n\n* To automatically re-format code, run `make format`\n* To check for linting issues, run `make lint` - some issues may be automatically fixed, some will not be\n\nWhen a pull request is made, the CI will automatically check for linting and formatting issues. However, it will not automatically apply any fixes, so it is easiest to run locally.\n\nIf you believe an error is incorrectly flagged, use a [`# noqa:` comment to suppress](https://docs.astral.sh/ruff/linter/#error-suppression), but this is discouraged unless strictly necessary.\n\n## ü§ì Collaborative Efforts\n\nWhen you run into any issue with the above or need help to start with a pull request, feel free to reach out in the issues! As with all repositories, this one has its particularities as a result of the maintainer's view. Each repository is quite different and so will their processes. \n\n## üèÜ Recognition\n\nIf your contribution has made its way into a new release of BERTopic, you will be given credit in the changelog of the new release! Regardless of the size of the contribution, any help is greatly appreciated. \n\n## üéà Release\n\nBERTopic tries to mostly follow [semantic versioning](https://semver.org/) for its new releases. Even though BERTopic has been around for a few years now, it is still pre-1.0 software. With the rapid chances in the field and as a way to keep up, this versioning is on purpose. Backwards-compatibility is taken into account but integrating new features and thereby keeping up with the field takes priority. Especially since BERTopic focuses on modularity, flexibility is necessary. \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "MIT License\n\nCopyright (c) 2024, Maarten P. Grootendorst\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.37109375,
          "content": "test:\n\tpytest\n\ncoverage:\n\tpytest --cov\n\nformat:\n\truff format\n\nlint:\n\truff check --fix\n\ninstall:\n\tpython -m pip install -e .\n\ninstall-test:\n\tpython -m pip install -e \".[dev]\"\n\ndocs:\n\tmkdocs serve\n\npypi:\n\tpython -m build\n\ttwine upload dist/*\n\nclean:\n\trm -rf **/.ipynb_checkpoints **/.pytest_cache **/__pycache__ **/**/__pycache__ .ipynb_checkpoints .pytest_cache\n\ncheck: test clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.6884765625,
          "content": "[![PyPI - Python](https://img.shields.io/badge/python-v3.9+-blue.svg)](https://pypi.org/project/bertopic/)\n[![Build](https://img.shields.io/github/actions/workflow/status/MaartenGr/BERTopic/testing.yml?branch=master)](https://github.com/MaartenGr/BERTopic/actions)\n[![docs](https://img.shields.io/badge/docs-Passing-green.svg)](https://maartengr.github.io/BERTopic/)\n[![PyPI - PyPi](https://img.shields.io/pypi/v/BERTopic)](https://pypi.org/project/bertopic/)\n[![PyPI - License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/MaartenGr/VLAC/blob/master/LICENSE)\n[![arXiv](https://img.shields.io/badge/arXiv-2203.05794-<COLOR>.svg)](https://arxiv.org/abs/2203.05794)\n\n\n# BERTopic\n\n<img src=\"images/logo.png\" width=\"35%\" height=\"35%\" align=\"right\" />\n\nBERTopic is a topic modeling technique that leverages ü§ó transformers and c-TF-IDF to create dense clusters\nallowing for easily interpretable topics whilst keeping important words in the topic descriptions.\n\nBERTopic supports all kinds of topic modeling techniques:  \n<table>\n  <tr>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/guided/guided.html\">Guided</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/supervised/supervised.html\">Supervised</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/semisupervised/semisupervised.html\">Semi-supervised</a></td>\n </tr>\n   <tr>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/manual/manual.html\">Manual</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/distribution/distribution.html\">Multi-topic distributions</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/hierarchicaltopics/hierarchicaltopics.html\">Hierarchical</a></td>\n </tr>\n <tr>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/topicsperclass/topicsperclass.html\">Class-based</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/topicsovertime/topicsovertime.html\">Dynamic</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/online/online.html\">Online/Incremental</a></td>\n </tr>\n <tr>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/multimodal/multimodal.html\">Multimodal</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/multiaspect/multiaspect.html\">Multi-aspect</a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/representation/llm.html\">Text Generation/LLM</a></td>\n </tr>\n <tr>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/zeroshot/zeroshot.html\">Zero-shot <b>(new!)</b></a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/merge/merge.html\">Merge Models <b>(new!)</b></a></td>\n    <td><a href=\"https://maartengr.github.io/BERTopic/getting_started/seed_words/seed_words.html\">Seed Words <b>(new!)</b></a></td>\n </tr>\n</table>\n\nCorresponding medium posts can be found [here](https://towardsdatascience.com/topic-modeling-with-bert-779f7db187e6?source=friends_link&sk=0b5a470c006d1842ad4c8a3057063a99), [here](https://towardsdatascience.com/interactive-topic-modeling-with-bertopic-1ea55e7d73d8?sk=03c2168e9e74b6bda2a1f3ed953427e4) and [here](https://towardsdatascience.com/using-whisper-and-bertopic-to-model-kurzgesagts-videos-7d8a63139bdf?sk=b1e0fd46f70cb15e8422b4794a81161d). For a more detailed overview, you can read the [paper](https://arxiv.org/abs/2203.05794) or see a [brief overview](https://maartengr.github.io/BERTopic/algorithm/algorithm.html). \n\n## Installation\n\nInstallation, with sentence-transformers, can be done using [pypi](https://pypi.org/project/bertopic/):\n\n```bash\npip install bertopic\n```\n\nIf you want to install BERTopic with other embedding models, you can choose one of the following:\n\n```bash\n# Choose an embedding backend\npip install bertopic[flair,gensim,spacy,use]\n\n# Topic modeling with images\npip install bertopic[vision]\n```\n\n## Getting Started\nFor an in-depth overview of the features of BERTopic \nyou can check the [**full documentation**](https://maartengr.github.io/BERTopic/) or you can follow along \nwith one of the examples below:\n\n| Name  | Link  |\n|---|---|\n| Start Here - **Best Practices in BERTopic**  | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1BoQ_vakEVtojsd2x_U6-_x52OOuqruj2?usp=sharing)  |\n| **üÜï New!** - Topic Modeling on Large Data (GPU Acceleration)  | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1W7aEdDPxC29jP99GGZphUlqjMFFVKtBC?usp=sharing)  |\n| **üÜï New!** - Topic Modeling with Llama 2 ü¶ô | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1QCERSMUjqGetGGujdrvv_6_EeoIcd_9M?usp=sharing)  |\n| **üÜï New!** - Topic Modeling with Quantized LLMs | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1DdSHvVPJA3rmNfBWjCo2P1E9686xfxFx?usp=sharing)  |\n| Topic Modeling with BERTopic  | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1FieRA9fLdkQEGDIMYl0I3MCjSUKVF8C-?usp=sharing)  |\n| (Custom) Embedding Models in BERTopic  | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/18arPPe50szvcCp_Y6xS56H2tY0m-RLqv?usp=sharing) |\n| Advanced Customization in BERTopic  |  [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1ClTYut039t-LDtlcd-oQAdXWgcsSGTw9?usp=sharing) |\n| (semi-)Supervised Topic Modeling with BERTopic  |  [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1bxizKzv5vfxJEB29sntU__ZC7PBSIPaQ?usp=sharing)  |\n| Dynamic Topic Modeling with Trump's Tweets  | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1un8ooI-7ZNlRoK0maVkYhmNRl0XGK88f?usp=sharing)  |\n| Topic Modeling arXiv Abstracts | [![Kaggle](https://img.shields.io/static/v1?style=for-the-badge&message=Kaggle&color=222222&logo=Kaggle&logoColor=20BEFF&label=)](https://www.kaggle.com/maartengr/topic-modeling-arxiv-abstract-with-bertopic) |\n\n\n## Quick Start\nWe start by extracting topics from the well-known 20 newsgroups dataset containing English documents:\n\n```python\nfrom bertopic import BERTopic\nfrom sklearn.datasets import fetch_20newsgroups\n \ndocs = fetch_20newsgroups(subset='all',  remove=('headers', 'footers', 'quotes'))['data']\n\ntopic_model = BERTopic()\ntopics, probs = topic_model.fit_transform(docs)\n```\n\nAfter generating topics and their probabilities, we can access all of the topics together with their topic representations:\n\n```python\n>>> topic_model.get_topic_info()\n\nTopic\tCount\tName\n-1\t4630\t-1_can_your_will_any\n0\t693\t49_windows_drive_dos_file\n1\t466\t32_jesus_bible_christian_faith\n2\t441\t2_space_launch_orbit_lunar\n3\t381\t22_key_encryption_keys_encrypted\n...\n```\n\nThe `-1` topic refers to all outlier documents and are typically ignored. Each word in a topic describes the underlying theme of that topic and can be used \nfor interpreting that topic. Next, let's take a look at the most frequent topic that was generated:\n\n```python\n>>> topic_model.get_topic(0)\n\n[('windows', 0.006152228076250982),\n ('drive', 0.004982897610645755),\n ('dos', 0.004845038866360651),\n ('file', 0.004140142872194834),\n ('disk', 0.004131678774810884),\n ('mac', 0.003624848635985097),\n ('memory', 0.0034840976976789903),\n ('software', 0.0034415334250699077),\n ('email', 0.0034239554442333257),\n ('pc', 0.003047105930670237)]\n```  \n\nUsing `.get_document_info`, we can also extract information on a document level, such as their corresponding topics, probabilities, whether they are representative documents for a topic, etc.:\n\n```python\n>>> topic_model.get_document_info(docs)\n\nDocument                               Topic\tName\t                        Top_n_words                     Probability    ...\nI am sure some bashers of Pens...\t0\t0_game_team_games_season\tgame - team - games...\t        0.200010       ...\nMy brother is in the market for...      -1     -1_can_your_will_any\t        can - your - will...\t        0.420668       ...\nFinally you said what you dream...\t-1     -1_can_your_will_any\t        can - your - will...            0.807259       ...\nThink! It's the SCSI card doing...\t49     49_windows_drive_dos_file\twindows - drive - docs...\t0.071746       ...\n1) I have an old Jasmine drive...\t49     49_windows_drive_dos_file\twindows - drive - docs...\t0.038983       ...\n```\n\n**`üî• Tip`**: Use `BERTopic(language=\"multilingual\")` to select a model that supports 50+ languages. \n\n## Fine-tune Topic Representations\n\nIn BERTopic, there are a number of different [topic representations](https://maartengr.github.io/BERTopic/getting_started/representation/representation.html) that we can choose from. They are all quite different from one another and give interesting perspectives and variations of topic representations. A great start is `KeyBERTInspired`, which for many users increases the coherence and reduces stopwords from the resulting topic representations:\n\n ```python\nfrom bertopic.representation import KeyBERTInspired\n\n# Fine-tune your topic representations\nrepresentation_model = KeyBERTInspired()\ntopic_model = BERTopic(representation_model=representation_model)\n```\n\nHowever, you might want to use something more powerful to describe your clusters. You can even use ChatGPT or other models from OpenAI to generate labels, summaries, phrases, keywords, and more:\n\n```python\nimport openai\nfrom bertopic.representation import OpenAI\n\n# Fine-tune topic representations with GPT\nclient = openai.OpenAI(api_key=\"sk-...\")\nrepresentation_model = OpenAI(client, model=\"gpt-3.5-turbo\", chat=True)\ntopic_model = BERTopic(representation_model=representation_model)\n```\n\n**`üî• Tip`**: Instead of iterating over all of these different topic representations, you can model them simultaneously with [multi-aspect topic representations](https://maartengr.github.io/BERTopic/getting_started/multiaspect/multiaspect.html) in BERTopic. \n\n\n## Visualizations\nAfter having trained our BERTopic model, we can iteratively go through hundreds of topics to get a good \nunderstanding of the topics that were extracted. However, that takes quite some time and lacks a global representation. Instead, we can use one of the [many visualization options](https://maartengr.github.io/BERTopic/getting_started/visualization/visualization.html) in BERTopic. \nFor example, we can visualize the topics that were generated in a way very similar to \n[LDAvis](https://github.com/cpsievert/LDAvis):\n\n```python\ntopic_model.visualize_topics()\n``` \n\n<img src=\"images/topic_visualization.gif\" width=\"60%\" height=\"60%\" align=\"center\" />\n\n## Modularity\nBy default, the [main steps](https://maartengr.github.io/BERTopic/algorithm/algorithm.html) for topic modeling with BERTopic are sentence-transformers, UMAP, HDBSCAN, and c-TF-IDF run in sequence. However, it assumes some independence between these steps which makes BERTopic quite modular. In other words, BERTopic not only allows you to build your own topic model but to explore several topic modeling techniques on top of your customized topic model:\n\nhttps://user-images.githubusercontent.com/25746895/218420473-4b2bb539-9dbe-407a-9674-a8317c7fb3bf.mp4\n\nYou can swap out any of these models or even remove them entirely. The following steps are completely modular:\n\n1. [Embedding](https://maartengr.github.io/BERTopic/getting_started/embeddings/embeddings.html) documents\n2. [Reducing dimensionality](https://maartengr.github.io/BERTopic/getting_started/dim_reduction/dim_reduction.html) of embeddings\n3. [Clustering](https://maartengr.github.io/BERTopic/getting_started/clustering/clustering.html) reduced embeddings into topics\n4. [Tokenization](https://maartengr.github.io/BERTopic/getting_started/vectorizers/vectorizers.html) of topics\n5. [Weight](https://maartengr.github.io/BERTopic/getting_started/ctfidf/ctfidf.html) tokens\n6. [Represent topics](https://maartengr.github.io/BERTopic/getting_started/representation/representation.html) with one or [multiple](https://maartengr.github.io/BERTopic/getting_started/multiaspect/multiaspect.html) representations\n\n\n## Functionality\nBERTopic has many functions that quickly can become overwhelming. To alleviate this issue, you will find an overview \nof all methods and a short description of its purpose. \n\n### Common\nBelow, you will find an overview of common functions in BERTopic. \n\n| Method | Code  | \n|-----------------------|---|\n| Fit the model    |  `.fit(docs)` |\n| Fit the model and predict documents  |  `.fit_transform(docs)` |\n| Predict new documents    |  `.transform([new_doc])` |\n| Access single topic   | `.get_topic(topic=12)`  |   \n| Access all topics     |  `.get_topics()` |\n| Get topic freq    |  `.get_topic_freq()` |\n| Get all topic information|  `.get_topic_info()` |\n| Get all document information|  `.get_document_info(docs)` |\n| Get representative docs per topic |  `.get_representative_docs()` |\n| Update topic representation | `.update_topics(docs, n_gram_range=(1, 3))` |\n| Generate topic labels | `.generate_topic_labels()` |\n| Set topic labels | `.set_topic_labels(my_custom_labels)` |\n| Merge topics | `.merge_topics(docs, topics_to_merge)` |\n| Reduce nr of topics | `.reduce_topics(docs, nr_topics=30)` |\n| Reduce outliers | `.reduce_outliers(docs, topics)` |\n| Find topics | `.find_topics(\"vehicle\")` |\n| Save model    |  `.save(\"my_model\", serialization=\"safetensors\")` |\n| Load model    |  `BERTopic.load(\"my_model\")` |\n| Get parameters |  `.get_params()` |\n\n\n### Attributes\nAfter having trained your BERTopic model, several attributes are saved within your model. These attributes, in part, \nrefer to how model information is stored on an estimator during fitting. The attributes that you see below all end in `_` and are \npublic attributes that can be used to access model information. \n\n| Attribute | Description |\n|------------------------|---------------------------------------------------------------------------------------------|\n| `.topics_`               | The topics that are generated for each document after training or updating the topic model. |\n| `.probabilities_` | The probabilities that are generated for each document if HDBSCAN is used. |\n| `.topic_sizes_`           | The size of each topic                                                                      |\n| `.topic_mapper_`          | A class for tracking topics and their mappings anytime they are merged/reduced.             |\n| `.topic_representations_` | The top *n* terms per topic and their respective c-TF-IDF values.                           |\n| `.c_tf_idf_`              | The topic-term matrix as calculated through c-TF-IDF.                                       |\n| `.topic_aspects_`          | The different aspects, or representations, of each topic.                                  |\n| `.topic_labels_`          | The default labels for each topic.                                                          |\n| `.custom_labels_`         | Custom labels for each topic as generated through `.set_topic_labels`.                      |\n| `.topic_embeddings_`      | The embeddings for each topic if `embedding_model` was used.                                |\n| `.representative_docs_`   | The representative documents for each topic if HDBSCAN is used.                             |\n\n\n### Variations\nThere are many different use cases in which topic modeling can be used. As such, several variations of BERTopic have been developed such that one package can be used across many use cases.\n\n| Method | Code  | \n|-----------------------|---|\n| [Topic Distribution Approximation](https://maartengr.github.io/BERTopic/getting_started/distribution/distribution.html) | `.approximate_distribution(docs)` |\n| [Online Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/online/online.html) | `.partial_fit(doc)` |\n| [Semi-supervised Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/semisupervised/semisupervised.html) | `.fit(docs, y=y)` |\n| [Supervised Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/supervised/supervised.html) | `.fit(docs, y=y)` |\n| [Manual Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/manual/manual.html) | `.fit(docs, y=y)` |\n| [Multimodal Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/multimodal/multimodal.html) | ``.fit(docs, images=images)`` |\n| [Topic Modeling per Class](https://maartengr.github.io/BERTopic/getting_started/topicsperclass/topicsperclass.html) | `.topics_per_class(docs, classes)` |\n| [Dynamic Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/topicsovertime/topicsovertime.html) | `.topics_over_time(docs, timestamps)` |\n| [Hierarchical Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/hierarchicaltopics/hierarchicaltopics.html) | `.hierarchical_topics(docs)` |\n| [Guided Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/guided/guided.html) | `BERTopic(seed_topic_list=seed_topic_list)` |\n| [Zero-shot Topic Modeling](https://maartengr.github.io/BERTopic/getting_started/zeroshot/zeroshot.html) | `BERTopic(zeroshot_topic_list=zeroshot_topic_list)` |\n| [Merge Multiple Models](https://maartengr.github.io/BERTopic/getting_started/merge/merge.html) | `BERTopic.merge_models([topic_model_1, topic_model_2])` |\n\n\n### Visualizations\nEvaluating topic models can be rather difficult due to the somewhat subjective nature of evaluation. \nVisualizing different aspects of the topic model helps in understanding the model and makes it easier \nto tweak the model to your liking. \n\n| Method | Code  | \n|-----------------------|---|\n| Visualize Topics    |  `.visualize_topics()` |\n| Visualize Documents    |  `.visualize_documents()` |\n| Visualize Document Hierarchy    |  `.visualize_hierarchical_documents()` |\n| Visualize Topic Hierarchy    |  `.visualize_hierarchy()` |\n| Visualize Topic Tree   |  `.get_topic_tree(hierarchical_topics)` |\n| Visualize Topic Terms    |  `.visualize_barchart()` |\n| Visualize Topic Similarity  |  `.visualize_heatmap()` |\n| Visualize Term Score Decline  |  `.visualize_term_rank()` |\n| Visualize Topic Probability Distribution    |  `.visualize_distribution(probs[0])` |\n| Visualize Topics over Time   |  `.visualize_topics_over_time(topics_over_time)` |\n| Visualize Topics per Class | `.visualize_topics_per_class(topics_per_class)` | \n\n\n## Citation\nTo cite the [BERTopic paper](https://arxiv.org/abs/2203.05794), please use the following bibtex reference:\n\n```bibtext\n@article{grootendorst2022bertopic,\n  title={BERTopic: Neural topic modeling with a class-based TF-IDF procedure},\n  author={Grootendorst, Maarten},\n  journal={arXiv preprint arXiv:2203.05794},\n  year={2022}\n}\n```\n"
        },
        {
          "name": "bertopic",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 5.1005859375,
          "content": "site_name: BERTopic\nrepo_url: https://github.com/MaartenGr/BERTopic\nsite_url: https://maartengr.github.io/BERTopic/\nsite_description: Leveraging BERT and a class-based TF-IDF to create easily interpretable topics.\nsite_author: Maarten P. Grootendorst\nuse_directory_urls: false\nextra_css:\n  - stylesheets/extra.css\n\nnav:\n  - Home: index.md\n  - The Algorithm: algorithm/algorithm.md\n  - Getting Started:\n      - Quick Start: getting_started/quickstart/quickstart.md\n      - Serialization: getting_started/serialization/serialization.md       \n      - Search Topics: getting_started/search/search.md\n      - Best Practices: getting_started/best_practices/best_practices.md\n      - In-depth:\n        - Visualizations:\n          - Topics:  getting_started/visualization/visualize_topics.md\n          - Documents:  getting_started/visualization/visualize_documents.md\n          - Terms:  getting_started/visualization/visualize_terms.md\n          - Hierarchy:  getting_started/visualization/visualize_hierarchy.md\n        - Update Topics:\n          - Topic Reduction: getting_started/topicreduction/topicreduction.md\n          - Update Topic Representations: getting_started/topicrepresentation/topicrepresentation.md\n          - Outlier reduction: getting_started/outlier_reduction/outlier_reduction.md       \n        - Parameter tuning: getting_started/parameter tuning/parametertuning.md       \n        - Tips & Tricks: getting_started/tips_and_tricks/tips_and_tricks.md       \n      - Sub-models:\n        - 1. Embeddings: getting_started/embeddings/embeddings.md\n        - 2. Dimensionality Reduction: getting_started/dim_reduction/dim_reduction.md\n        - 3. Clustering: getting_started/clustering/clustering.md\n        - 4. Vectorizers: getting_started/vectorizers/vectorizers.md\n        - 5. c-TF-IDF: getting_started/ctfidf/ctfidf.md\n        - 6. Fine-tune Topics:\n          - 6A. Representation Models: getting_started/representation/representation.md\n          - 6B. LLM & Generative AI: getting_started/representation/llm.md\n          - 6C. Multiple Representations: getting_started/multiaspect/multiaspect.md\n      - Variations:\n        - Dynamic Topic Modeling: getting_started/topicsovertime/topicsovertime.md\n        - Hierarchical Topic Modeling: getting_started/hierarchicaltopics/hierarchicaltopics.md\n        - Multimodal Topic Modeling: getting_started/multimodal/multimodal.md\n        - Online Topic Modeling: getting_started/online/online.md\n        - Merge Multiple Models: getting_started/merge/merge.md\n        - (semi)-supervised:\n          - Semi-supervised Topic Modeling: getting_started/semisupervised/semisupervised.md\n          - Supervised Topic Modeling: getting_started/supervised/supervised.md\n          - Manual Topic Modeling: getting_started/manual/manual.md\n          - Guided Topic Modeling: getting_started/guided/guided.md\n          - Zero-shot Topic Modeling: getting_started/zeroshot/zeroshot.md\n        - Topic Distributions: getting_started/distribution/distribution.md\n        - Topics per Class: getting_started/topicsperclass/topicsperclass.md\n        - Seed Words: getting_started/seed_words/seed_words.md\n  - FAQ: faq.md\n  - Use Cases: usecases.md\n  - API:\n      - BERTopic: api/bertopic.md\n      - Sub-models:\n        - 1. Backends: api/backends.md\n        - 2. Dimensionality Reduction: api/dimensionality.md\n        - 3. Clustering: api/cluster.md\n        - 4. Vectorizers: api/vectorizers.md\n        - 5. c-TF-IDF: api/ctfidf.md\n        - 6. Fine-Tune Topic Representation: api/representations.md\n      - Plotting:\n        - Barchart: api/plotting/barchart.md\n        - Documents: api/plotting/documents.md\n        - Documents with DataMapPlot: api/plotting/document_datamap.md\n        - DTM: api/plotting/dtm.md\n        - Hierarchical documents: api/plotting/hierarchical_documents.md\n        - Hierarchical topics: api/plotting/hierarchy.md\n        - Distribution: api/plotting/distribution.md\n        - Heatmap: api/plotting/heatmap.md\n        - Term Scores: api/plotting/term.md\n        - Topics: api/plotting/topics.md\n        - Topics per Class: api/plotting/topics_per_class.md\n  - Changelog: changelog.md\n\nplugins:\n  - mkdocstrings:\n      watch:\n        - bertopic\n  - search\ncopyright: Copyright &copy; 2024 Maintained by <a href=\"https://github.com/MaartenGr\">Maarten Grootendorst</a>.\n\ntheme:\n  custom_dir: images/\n  name: material\n  icon:\n    logo: material/library\n  font:\n    text: Ubuntu\n    code: Ubuntu Mono\n  favicon: icon.png\n  logo: img/icon.png\n  feature:\n    tabs: true  \n  features:\n    - navigation.tabs\n    - navigation.sections\n    - navigation.instant\n    - navigation.top\n    - navigation.tracking\n    - toc.follow\n    - content.code.copy\n  palette:\n  - media: \"(prefers-color-scheme: light)\"\n    primary: custom\n    scheme: black\n    toggle:\n      icon: material/weather-sunny\n      name: Switch to dark mode\n  - media: \"(prefers-color-scheme: dark)\"\n    scheme: slate\n    primary: black\n    toggle:\n      icon: material/weather-night\n      name: Switch to light mode\n\nmarkdown_extensions:\n  - admonition\n  - md_in_html\n  - pymdownx.details\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - pymdownx.snippets\n  - toc:\n      permalink: true\n"
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.763671875,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"bertopic\"\nversion = \"0.16.4\"\ndescription = \"BERTopic performs topic Modeling with state-of-the-art transformer models.\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE\"}\nrequires-python = \">=3.9\"\nauthors = [\n    { name = \"Maarten P. Grootendorst\", email = \"maartengrootendorst@gmail.com\" },\n]\nkeywords = [\n    \"nlp\",\n    \"bert\",\n    \"topic\",\n    \"modeling\",\n    \"embeddings\",\n]\nclassifiers = [\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX\",\n    \"Operating System :: Unix\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Scientific/Engineering\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\ndependencies = [\n    \"hdbscan>=0.8.29\",\n    \"numpy>=1.20.0\",\n    \"pandas>=1.1.5\",\n    \"plotly>=4.7.0\",\n    \"scikit-learn>=0.22.2.post1\",\n    \"sentence-transformers>=0.4.1\",\n    \"tqdm>=4.41.1\",\n    \"umap-learn>=0.5.0\",\n]\n\n[project.optional-dependencies]\ndatamap = [\n    \"datamapplot>=0.1\",\n    \"matplotlib>=3.8\",\n]\ndev = [\n    \"bertopic[docs,test]\",\n]\ndocs = [\n    \"mkdocs==1.5.3\",\n    \"mkdocs-material==9.5.18\",\n    \"mkdocstrings-python==1.10.0\",\n    \"mkdocstrings==0.24.3\",\n]\nflair = [\n    \"flair>=0.7\",\n    \"torch>=1.4.0\",\n    \"transformers>=3.5.1\",\n]\ngensim = [\n    \"gensim>=4.0.0\",\n]\nspacy = [\n    \"spacy>=3.0.1\",\n]\ntest = [\n    \"pytest>=5.4.3\",\n    \"pytest-cov>=2.6.1\",\n    \"ruff~=0.4.7\",\n]\nuse = [\n    \"tensorflow\",\n    \"tensorflow_hub\",\n    \"tensorflow_text\",\n]\nvision = [\n    \"accelerate>=0.19.0\", # To prevent \"cannot import name 'PartialState' from 'accelerate'\"\n    \"Pillow>=9.2.0\",\n]\n\n[project.urls]\nDocumentation = \"https://maartengr.github.io/BERTopic/\"\nHomepage = \"https://github.com/MaartenGr/BERTopic\"\nIssues = \"https://github.com/MaartenGr/BERTopic/issues\"\nRepository = \"https://github.com/MaartenGr/BERTopic.git\"\n\n[tool.setuptools.packages.find]\ninclude = [\"bertopic*\"]\nexclude = [\"tests\"]\n\n[tool.ruff]\nline-length = 120\n\n[tool.ruff.lint]\nselect = [  \n  \"E4\",  # Ruff Defaults\n  \"E7\",\n  \"E9\",\n  \"F\",   # End Ruff Defaults,\n  \"D\"\n]\n\nignore = [\n  \"D100\", # Missing docstring in public module\n  \"D104\", # Missing docstring in public package\n  \"D205\", # 1 blank line required between summary line and description\n  \"E731\", # Do not assign a lambda expression, use a def\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"**/tests/*\" = [\"D\"] # Ignore all docstring errors in tests\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\""
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}