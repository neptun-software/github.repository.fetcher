{
  "metadata": {
    "timestamp": 1736560839996,
    "page": 538,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "b-ryan/powerline-shell",
      "stars": 6239,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": "*.swp\n.git/\n.gitignore\n.travis.yml\nCHANGELOG.md\nDockerfile\nLICENSE\nREADME.md\nbash-powerline-screenshot.png\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1337890625,
          "content": "powerline-shell.py\n*.py[co]\nconfig.py\npowerline_shell.egg-info/\n/build/\n/dist/\ntags\nconfig.json\npowerline-shell.json\n.DS_Store\n*sublime*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.052734375,
          "content": "sudo: required\nservices:\n  - docker\nscript: ./test.sh\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.9130859375,
          "content": "# Changes\n\n2018-09-15 (version 0.7.0)\n\n* New generic `stdout` and `env` segments\n\n2018-06-20 (version 0.6.0)\n\n* Support for custom themes\n* New option for the `time` segment to specify format of the displayed time\n  ([@dundalek](https://github.com/b-ryan/powerline-shell/pull/383))\n\n2018-04-22 (version 0.5.4)\n\n* Reverted fix for\n  ([#249](https://github.com/b-ryan/powerline-shell/issues/249)) because it\n  caused issues on Mac.\n\n2018-04-21 (version 0.5.3)\n\n* New theme! (gruvbox)\n  ([@monicaycli](https://github.com/b-ryan/powerline-shell/pull/388))\n\n2018-04-21 (version 0.5.2)\n\n* Fix hostname colorize bug\n  ([@comagnaw](https://github.com/b-ryan/powerline-shell/issues/353))\n* Fix issue with prompt bleeding behavior\n  ([@bytebeast](https://github.com/b-ryan/powerline-shell/issues/249))\n* Better error message when config file cannot be decoded (Closes\n  [#371](https://github.com/b-ryan/powerline-shell/issues/371))\n\n2018-04-13 (version 0.5.1)\n\n* Fix Python 3 compatibility of `git_stash` segment\n\n2018-04-10 (version 0.5.0)\n\n* Patch environment for VCS subprocesses rather than generating a new one\n* Fix `cwd` segment so it respects `max_depth` configuration\n* Fix Ruby segment for Python 3 compatibility\n  ([@Blue-Dog-Archolite](https://github.com/b-ryan/powerline-shell/pull/366))\n* Configuration is now expected to be at\n  `~/.config/powerline-shell/config.json` ([@emansije and\n  @kc9jud](https://github.com/b-ryan/powerline-shell/pull/334))\n* New `git_stash` segment\n  ([@apinkney97](https://github.com/b-ryan/powerline-shell/pull/379))\n\n2018-02-19 (version 0.4.9)\n\n* Fix root user segment\n  ([@TiGR](https://github.com/b-ryan/powerline-shell/pull/362))\n* Fixes and enhancements for SVN segment\n  ([@emansije](https://github.com/b-ryan/powerline-shell/pull/349))\n\n2018-01-29 (version 0.4.8)\n\n* Bring back the ability to create custom themes\n  ([@b-ryan](https://github.com/b-ryan/powerline-shell/pull/352))\n* Add the ability to customize the `time` segment in themes\n  ([@gaurav-nelson](https://github.com/b-ryan/powerline-shell/pull/338))\n\n2018-01-15 (version 0.4.7)\n\n* VCS segments (git, hg, etc.) can now show a symbol identifying what VPS the\n  current directory uses\n  ([@emansije](https://github.com/b-ryan/powerline-shell/pull/298))\n\n2018-01-11 (version 0.4.6)\n\n* Fix bug in SVN segment\n  ([@kc9jud](https://github.com/b-ryan/powerline-shell/pull/347))\n\n2017-12-20 (version 0.4.5)\n\n* Fix `cwd` segment in Bash for Windows\n  ([@b-ryan](https://github.com/b-ryan/powerline-shell/pull/340))\n\n2017-12-19 (version 0.4.4)\n\n* New options and symbol for the `battery` segment\n  ([@kc9jud](https://github.com/b-ryan/powerline-shell/pull/332))\n* Update `svn` segment to use threads\n  ([@kc9jud](https://github.com/b-ryan/powerline-shell/pull/333))\n* Fix `username` segment in cygwin\n  ([@ericLemanissier](https://github.com/b-ryan/powerline-shell/commits/master))\n\n2017-11-25 (version 0.4.3)\n\n* New option for `cwd` segment that allows the last directory to not be\n  shortened when `max_dir_size` is used\n  ([@jceaser](https://github.com/banga/powerline-shell/pull/321)).\n\n2017-10-16 (version 0.4.2)\n\n* VCS segments will use ASCII `?` instead of a unicode symbol for new files.\n\n2017-10-16 (version 0.4.1)\n\n* Fix cwd bug when `$HOME` ends in a slash\n  ([@tbodt](https://github.com/banga/powerline-shell/pull/309))\n* Use docker to run tests\n  ([@aa8y](https://github.com/banga/powerline-shell/pull/297))\n\n2017-10-06 (version 0.4.0)\n\n* tcsh support\n\n2017-09-30 (version 0.3.1)\n\n* Fix username segment's background color after \"su\" command\n  ([@Fak3](https://github.com/banga/powerline-shell/pull/175))\n* New `battery` segment which shows the percentage your battery is charged and\n  an icon when your battery is charging.\n  ([@wattengard](https://github.com/banga/powerline-shell/pull/204))\n* New `aws_profile` segment which shows which AWS profile you are using.\n  ([@bryangrimes](https://github.com/banga/powerline-shell/pull/223))\n\n2017-09-30 (version 0.3.0)\n\n* Redo Fossil segment to be consistent with git, svn, etc.\n  ([@emansije](https://github.com/banga/powerline-shell/pull/286))\n* Fix subshell execution in bash described by\n  [pw3nage](https://github.com/njhartwell/pw3nage)\n  ([@b-ryan](https://github.com/banga/powerline-shell/pull/282))\n* Change SSH segment to just use the text `SSH` instead of showing a lock\n  symbol. Closes [#287](https://github.com/banga/powerline-shell/issues/287).\n\n2017-09-18 (version 0.2.2)\n\n* Fix python3 issue in uptime segment. Fixes\n  [#291](https://github.com/banga/powerline-shell/issues/291).\n\n2017-09-16 (version 0.2.1)\n\n* Fix issues preventing fish shell from rendering.\n\n2017-09-13 (version 0.2.0)\n\n* Add Bazaar segment\n  ([@emansije](https://github.com/banga/powerline-shell/pull/283))\n  * And rename properties of RepoStats for clarity\n    ([@emansije](https://github.com/banga/powerline-shell/pull/284))\n* Rewrite SVN segment to be consistent with git\n* Remove duplicate function in colortrans.py\n  ([@jmtd](https://github.com/banga/powerline-shell/pull/273))\n* Make python 3 check compatible with older Python versions\n* New theme! `solarized_light`\n  ([@ruturajv](https://github.com/banga/powerline-shell/pull/143)\n\n2017-09-10\n\n* Complete overhaul of the project\n  ([@b-ryan](https://github.com/banga/powerline-shell/pull/280))\n  * There is now a PyPi package\n  * It's significantly faster now\n  * Configuration and installation is brand new. See README.md\n\n2017-06-21\n\n* Add `rbenv` segment\n  ([@dogo](https://github.com/banga/powerline-shell/pull/260))\n* Fix path segment so that current directory is emphasized\n  ([@inamiy](https://github.com/banga/powerline-shell/pull/235))\n\n2017-06-20\n\n* Add `newline` segment\n  ([@ffried](https://github.com/banga/powerline-shell/pull/266))\n* Add `npm_version` segment\n  ([@WileESpaghetti](https://github.com/banga/powerline-shell/pull/265))\n* Fix issue with conda environments\n  ([@drorata](https://github.com/banga/powerline-shell/pull/257))\n* Fix jobs segment for Cygwin\n  ([@themiwi](https://github.com/banga/powerline-shell/pull/256))\n\n2017-05-15\n\n* Fix the `set_term_title` segment for ZSH\n  ([@themiwi](https://github.com/banga/powerline-shell/pull/255))\n\n2016-04-16\n\n* Fix issue around unicode function for python 3\n\n2016-04-01\n\n* Refactor of the way the git segment manages data about git's state.\n  ([@b-ryan](https://github.com/milkbikis/powerline-shell/pull/221))\n\n2015-12-26\n\n* Beginnings of unit testing for segments. Included in this change was a\n  refactor of the way segments are added to powerline. Now, instead of looking\n  for a global `powerline` object, `powerline` is passed into the function to\n  add the segment. Segments will also no longer add the segments by calling the\n  `add` function themselves.\n  ([@b-ryan](https://github.com/milkbikis/powerline-shell/pull/212))\n* Python3 fixes for `lib/color_compliment.py`.\n  ([@ceholden](https://github.com/milkbikis/powerline-shell/pull/220))\n\n2015-11-25\n\n* `virtual_env` segment now supports environments made with `conda`\n  ([@ceholden](https://github.com/milkbikis/powerline-shell/pull/198))\n\n2015-11-21\n\n* Fixes for Python 3 compatibility\n  ([@b-ryan](https://github.com/milkbikis/powerline-shell/pull/211))\n\n2015-11-18\n\n* The git segment has gotten a makeover\n  ([@MartinWetterwald](https://github.com/milkbikis/powerline-shell/pull/136))\n* Fix git segment when git is not on the standard PATH\n  ([@andrejgl](https://github.com/milkbikis/powerline-shell/pull/153))\n* Fix `--cwd-max-depth` showing duplicates when it's <= 2\n  ([@b-ryan](https://github.com/milkbikis/powerline-shell/pull/209))\n* Add padding around `exit_code` segment\n  ([@phatblat](https://github.com/milkbikis/powerline-shell/pull/205))\n\n2015-10-02\n\n* New option (`--cwd-max-dir-size`) which allows you to limit each directory\n  that is displayed to a number of characters. This currently does not apply\n  if you are using `--cwd-mode plain`.\n  ([@mart-e](https://github.com/milkbikis/powerline-shell/pull/127))\n\n2015-08-26\n\n* New `plain` mode of displaying the current working directory which can be\n  used by adding `--cwd-only plain` to `powerline-shell.py`.\n  This deprecates the `--cwd-only` option. `--cwd-mode dironly` can be used\n  instead. ([@paol](https://github.com/milkbikis/powerline-shell/pull/156))\n\n2015-08-18\n\n* New `time` segment\n  ([@filipebarros](https://github.com/milkbikis/powerline-shell/pull/107))\n\n2015-08-01\n\n* Use `print` function for some python3 compatibility\n  ([@strycore](https://github.com/milkbikis/powerline-shell/pull/195))\n\n2015-07-31\n\n* The current working directory no longer follows symbolic links\n* New `exit_code` segment\n  ([@disruptek](https://github.com/milkbikis/powerline-shell/pull/129))\n\n2015-07-30\n\n* Fix ZSH root indicator\n  ([@nkcfan](https://github.com/milkbikis/powerline-shell/pull/150))\n* Add uptime segment\n  ([@marcioAlmada](https://github.com/milkbikis/powerline-shell/pull/139))\n\n2015-07-27\n\n* Use `python2` instead of `python` in hashbangs\n  ([@Undeterminant](https://github.com/milkbikis/powerline-shell/pull/100))\n* Add `node_version` segment\n  ([@mmilleruva](https://github.com/milkbikis/powerline-shell/pull/189))\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5771484375,
          "content": "FROM python:2-alpine\n\nMAINTAINER github.com/b-ryan/powerline-shell\n\nUSER root\nRUN apk add --no-cache --update \\\n      bzr \\\n      fossil \\\n      git \\\n      mercurial \\\n      php5 \\\n      subversion \\\n      && \\\n    rm -rf /var/cache/apk/*\n\nRUN mkdir /code\nWORKDIR /code\nCOPY requirements-dev.txt .\nRUN pip install -r requirements-dev.txt && \\\n    rm requirements-dev.txt\n\nRUN bzr whoami \"root <root@example.com>\" && \\\n    git config --global user.email \"root@example.com\" && \\\n    git config --global user.name \"root\"\n\n# COPY . ./\n# RUN ./setup.py install\n\nENV USER root\n\nCMD [\"nosetests\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Shrey Banga and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.958984375,
          "content": "# A Powerline style prompt for your shell\n\nA beautiful and useful prompt generator for Bash, ZSH, Fish, and tcsh:\n\n![MacVim+Solarized+Powerline+CtrlP](https://raw.github.com/b-ryan/powerline-shell/master/bash-powerline-screenshot.png)\n\n- Shows some important details about the git/svn/hg/fossil branch (see below)\n- Changes color if the last command exited with a failure code\n- If you're too deep into a directory tree, shortens the displayed path with an ellipsis\n- Shows the current Python [virtualenv](http://www.virtualenv.org/) environment\n- It's easy to customize and extend. See below for details.\n\nThe generated prompts are designed to resemble\n[powerline](https://github.com/powerline/powerline), but otherwise this project\nhas no relation to powerline.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Version Control](#version-control)\n- [Setup](#setup)\n  - [Bash](#bash)\n  - [ZSH](#zsh)\n  - [Fish](#fish)\n  - [tcsh](#tcsh)\n- [Customization](#customization)\n  - [Config File](#config-file)\n  - [Adding, Removing and Re-arranging segments](#adding-removing-and-re-arranging-segments)\n  - [Generic Segments](#generic-segments)\n  - [Segment Separator](#segment-separator)\n  - [Themes](#themes)\n  - [Segment Configuration](#segment-configuration)\n  - [Contributing new types of segments](#contributing-new-types-of-segments)\n- [Troubleshooting](#troubleshooting)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Version Control\n\nAll of the version control systems supported by powerline shell give you a\nquick look into the state of your repo:\n\n- The current branch is displayed and changes background color when the\n  branch is dirty.\n- When the local branch differs from the remote, the difference in number\n  of commits is shown along with `⇡` or `⇣` indicating whether a git push\n  or pull is pending.\n\nIf files are modified or in conflict, the situation is summarized with the\nfollowing symbols:\n\n- `✎` -- a file has been modified (but not staged for commit, in git)\n- `✔` -- a file is staged for commit (git) or added for tracking\n- `✼` -- a file has conflicts\n- `?` -- a file is untracked\n\nEach of these will have a number next to it if more than one file matches.\n\nThe segment can start with a symbol representing the version control system in\nuse. To show that symbol, the configuration file must have a variable `vcs`\nwith an option `show_symbol` set to `true` (see\n[Segment Configuration](#segment-configuration)).\n\n## Setup\n\nThis script uses ANSI color codes to display colors in a terminal. These are\nnotoriously non-portable, so may not work for you out of the box, but try\nsetting your $TERM to `xterm-256color`.\n\n- Patch the font you use for your terminal: see\n  [powerline-fonts](https://github.com/Lokaltog/powerline-fonts)\n  - If you struggle too much to get working fonts in your terminal, you can use\n    \"compatible\" mode.\n  - If you're using old patched fonts, you have to use the older symbols.\n    Basically reverse [this\n    commit](https://github.com/milkbikis/powerline-shell/commit/2a84ecc) in\n    your copy.\n\n- Install using pip:\n\n```\npip install powerline-shell\n```\n\n(*You can use the\n[`--user`](https://pip.pypa.io/en/stable/user_guide/#user-installs) option to\ninstall for just your user, if you'd like. But you may need to fiddle with your\n`PATH` to get this working properly.*)\n\n- Or, install from the git repository:\n\n```\ngit clone https://github.com/b-ryan/powerline-shell\ncd powerline-shell\npython setup.py install\n```\n\n- Setup your shell prompt using the instructions for your shell below.\n\n### Bash\n\nAdd the following to your `.bashrc` file:\n\n```\nfunction _update_ps1() {\n    PS1=$(powerline-shell $?)\n}\n\nif [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then\n    PROMPT_COMMAND=\"_update_ps1; $PROMPT_COMMAND\"\nfi\n```\n\n**Note:** On macOS, you must add this to one of `.bash_profile`, `.bash_login`,\nor `.profile`. macOS will execute the files in the aforementioned order and\nwill stop execution at the first file it finds. For more information on the\norder of precedence, see the section **INVOCATION** in `man bash`.\n\n### ZSH\n\nAdd the following to your `.zshrc`:\n\n```\nfunction powerline_precmd() {\n    PS1=\"$(powerline-shell --shell zsh $?)\"\n}\n\nfunction install_powerline_precmd() {\n  for s in \"${precmd_functions[@]}\"; do\n    if [ \"$s\" = \"powerline_precmd\" ]; then\n      return\n    fi\n  done\n  precmd_functions+=(powerline_precmd)\n}\n\nif [ \"$TERM\" != \"linux\" -a -x \"$(command -v powerline-shell)\" ]; then\n    install_powerline_precmd\nfi\n```\n\n### Fish\n\nRedefine `fish_prompt` in ~/.config/fish/config.fish:\n\n```\nfunction fish_prompt\n    powerline-shell --shell bare $status\nend\n```\n\n### tcsh\n\nAdd the following to your `.tcshrc`:\n\n```\nalias precmd 'set prompt=\"`powerline-shell --shell tcsh $?`\"'\n```\n\n## Customization\n\n### Config File\n\nPowerline-shell is customizable through the use of a config file. This file is\nexpected to be located at `~/.config/powerline-shell/config.json`. You can\ngenerate the default config at this location using:\n\n```\nmkdir -p ~/.config/powerline-shell && \\\npowerline-shell --generate-config > ~/.config/powerline-shell/config.json\n```\n\n(As an example, my config file is located here:\n[here](https://github.com/b-ryan/dotfiles/blob/master/home/config/powerline-shell/config.json))\n\n### Adding, Removing and Re-arranging segments\n\nOnce you have generated your config file, you can now start adding or removing\n\"segments\" - the building blocks of your shell. The list of segments available\ncan be seen\n[here](https://github.com/b-ryan/powerline-shell/tree/master/powerline_shell/segments).\n\nYou can also create custom segments. Start by copying an existing segment like\n[this](https://github.com/b-ryan/powerline-shell/blob/master/powerline_shell/segments/aws_profile.py).\nMake sure to change any relative imports to absolute imports. Ie. change things\nlike:\n\n```python\nfrom ..utils import BasicSegment\n```\n\nto\n\n```python\nfrom powerline_shell.utils import BasicSegment\n```\n\nThen change the `add_to_powerline` function to do what you want. You can then\nuse this segment in your configuration by putting the path to your segment in\nthe segments section, like:\n\n```json\n\"segments\": [\n    \"~/path/to/segment.py\"\n]\n```\n\n### Generic Segments\n\nThere are two special segments available. `stdout` accepts an arbitrary command\nand the output of the command will be put into your prompt. `env` takes an\nenvironment variable and the value of the variable will be set in your prompt.\nFor example, your config could look like this:\n\n```\n{\n  \"segments\": [\n    \"cwd\",\n    \"git\",\n    {\n      \"type\": \"stdout\",\n      \"command\": [\"echo\", \"hi\"],\n      \"fg_color\": 22,\n      \"bg_color\": 161\n    },\n    {\n      \"type\": \"env\",\n      \"var\": \"DOCKER_MACHINE_NAME\"\n    },\n  ]\n}\n```\n\n### Segment Separator\n\nBy default, a unicode character (resembling the > symbol) is used to separate\neach segment. This can be changed by changing the \"mode\" option in the config\nfile. The available modes are:\n\n- `patched` - The default.\n- `compatible` - Attempts to use characters that may already be available using\n  your chosen font.\n- `flat` - No separator is used between segments, giving each segment a\n  rectangular appearance (and also saves space).\n\n### Themes\n\nThe `powerline_shell/themes` directory stores themes for your prompt, which are\nbasically color values used by segments. The `default.py` defines a default\ntheme which can be used standalone, and every other theme falls back to it if\nthey miss colors for any segments.\n\nIf you want to create a custom theme, start by copying one of the existing\nthemes, like the\n[basic](https://github.com/b-ryan/powerline-shell/blob/master/powerline_shell/themes/basic.py).\nand update your `~/.config/powerline-shell/config.json`, setting the `\"theme\"`\nto the path of the file. For example your configuration might have:\n\n```\n  \"theme\": \"~/mythemes/my-great-theme.py\"\n```\n\nYou can then modify the color codes to your liking. Theme colors are specified\nusing [Xterm-256 color codes](https://jonasjacek.github.io/colors/).\n\nA script for testing color combinations is provided at `colortest.py`. Note\nthat the colors you see may vary depending on your terminal. When designing a\ntheme, please test your theme on multiple terminals, especially with default\nsettings.\n\n### Segment Configuration\n\nSome segments support additional configuration. The options for the segment are\nnested under the name of the segment itself. For example, all of the options\nfor the `cwd` segment are set in `~/.config/powerline-shell/config.json` like:\n\n```\n{\n    \"segments\": [...],\n    \"cwd\": {\n        options go here\n    }\n    \"theme\": \"theme-name\",\n    \"vcs\": {\n        options go here\n    }\n}\n```\n\nThe options for the `cwd` segment are:\n\n- `mode`: If `plain`, then simple text will be used to show the cwd. If\n  `dironly`, only the current directory will be shown. Otherwise expands the\n  cwd into individual directories.\n- `max_depth`: Maximum number of directories to show in path.\n- `max_dir_size`: Maximum number of characters displayed for each directory in\n  the path.\n- `full_cwd`: If true, the last directory will not be shortened when\n  `max_dir_size` is used.\n\nThe `hostname` segment provides one option:\n\n- `colorize`: If true, the hostname will be colorized based on a hash of\n  itself.\n\nThe `vcs` segment provides one option:\n\n- `show_symbol`: If `true`, the version control system segment will start with\n  a symbol representing the specific version control system in use in the\n  current directory.\n\nThe options for the `battery` segment are:\n\n- `always_show_percentage`: If true, show percentage when fully charged on AC.\n- `low_threshold`: Threshold percentage for low-battery indicator color.\n\nThe options for the `time` segment are:\n\n- `format`: Format string as used by strftime function, e.g. `%H:%M`.\n\n### Contributing new types of segments\n\nThe `powerline_shell/segments` directory contains python scripts which are\ninjected as is into a single file `powerline_shell_base.py`. Each segment\nscript defines a function that inserts one or more segments into the prompt. If\nyou want to add a new segment, simply create a new file in the segments\ndirectory.\n\nMake sure that your script does not introduce new globals which might conflict\nwith other scripts. Your script should fail silently and run quickly in any\nscenario.\n\nMake sure you introduce new default colors in `themes/default.py` for every new\nsegment you create. Test your segment with this theme first.\n\nYou should add tests for your segment as best you are able. Unit and\nintegration tests are both welcome. Run your tests by running the `test.sh`\nscript. It uses `docker` to manage dependencies and the environment.\nAlternatively, you can run the `nosetests` command after installing the\nrequirements in `requirements-dev.txt`.\n\n## Troubleshooting\n\nSee the [FAQ](https://github.com/b-ryan/powerline-shell/wiki/FAQ). If you\ncontinue to have issues, please open an\n[issue](https://github.com/b-ryan/powerline-shell/issues/new).\n"
        },
        {
          "name": "bash-powerline-screenshot.png",
          "type": "blob",
          "size": 35.0029296875,
          "content": null
        },
        {
          "name": "colortest.py",
          "type": "blob",
          "size": 0.826171875,
          "content": "#!/usr/bin/env python2\nimport sys\n\nESCAPE = chr(27)\n\ndef fg(color):\n    return ESCAPE + '[38;5;{0}m'.format(color)\n\ndef bg(color):\n    return ESCAPE + '[48;5;{0}m'.format(color)\n\ndef reset():\n    return ESCAPE + '[48;0m'\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 6:\n        print 'Usage: colortest.py fg_start fg_end bg_start bg_end test_string'\n        sys.exit(1)\n\n    fg_start, fg_end, bg_start, bg_end = map(int, sys.argv[1:5])\n    test_string = sys.argv[5]\n\n    print ' ' * len(str(bg_start)),\n    for fg_color in range(fg_start, fg_end + 1):\n        print ' ' * (len(test_string) - len(str(fg_color))), fg_color,\n    print\n\n    for bg_color in range(bg_start, bg_end + 1):\n        print bg_color, bg(bg_color),\n        for fg_color in range(fg_start, fg_end + 1):\n            print fg(fg_color), test_string,\n        print reset()\n"
        },
        {
          "name": "powerline_shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0517578125,
          "content": "nose>=1.3.7\nmock>=1.3.0\nsh>=1.11\nparameterized>=0.6.1"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0673828125,
          "content": "[bdist_wheel]\nuniversal = 1\n\n[metadata]\ndescription-file = README.md\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.865234375,
          "content": "#!/usr/bin/env python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"powerline-shell\",\n    version=\"0.7.0\",\n    description=\"A pretty prompt for your shell\",\n    author=\"Buck Ryan\",\n    author_email=\"buck@buckryan.com\",\n    license=\"MIT\",\n    url=\"https://github.com/b-ryan/powerline-shell\",\n    classifiers=[\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n    ],\n    packages=[\n        \"powerline_shell\",\n        \"powerline_shell.segments\",\n        \"powerline_shell.themes\",\n    ],\n    install_requires=[\n        \"argparse\",\n    ],\n    entry_points=\"\"\"\n    [console_scripts]\n    powerline-shell=powerline_shell:main\n    \"\"\",\n)\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.1376953125,
          "content": "#!/bin/sh\nset -eu\ndocker build -t powerline-shell .\ndocker run --rm --interactive --tty \\\n    --volume $PWD:/code \\\n    powerline-shell \"$@\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}