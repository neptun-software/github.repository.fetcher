{
  "metadata": {
    "timestamp": 1736560688936,
    "page": 343,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "anishathalye/dotbot",
      "stars": 7202,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1513671875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\ntrim_trailing_whitespace = true\n\n[*.py]\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "*.pyc\ndist/\n.coverage*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.095703125,
          "content": "[submodule \"lib/pyyaml\"]\n\tpath = lib/pyyaml\n\turl = https://github.com/yaml/pyyaml\n\tignore = dirty\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.62109375,
          "content": "Note: this changelog only lists feature additions, not bugfixes. For details on\nthose, see the Git history.\n\n- v1.21\n    - Drop support for Python 3.6: the minimum version supported is now Python\n      3.7\n- v1.20\n    - Drop support for Python 2 and old versions of Python 3: the minimum\n      version supported is now Python 3.6\n- v1.19\n    - Add `mode:` option for `create`\n    - Add `exclude:` option for `link`\n- v1.18\n    - Add `--only` and `--except` flags\n    - Add support to run with `python -m dotbot`\n    - Add `--force-color` option\n- v1.17\n    - Add `canonicalize-path:` option for `link`\n- v1.16\n    - Add `create` plugin\n- v1.15\n    - Add `quiet:` option for `shell`\n- v1.14\n    - Add `if:` option for `link`\n- v1.13\n    - Add `--no-color` flag\n- v1.12\n    - Add globbing support to `link`\n- v1.11\n    - Add force option to `clean` to remove all broken symlinks\n- v1.10\n    - Update `link` to support shorthand syntax for links\n- v1.9\n    - Add support for default options for commands\n- v1.8\n    - Update `link` to be able to create relative links\n- v1.7\n    - Add support for plugins\n- v1.6\n    - Update `link` to expand environment variables in paths\n- v1.5\n    - Update `link` to be able to automatically overwrite broken symlinks\n- v1.4\n    - Update `shell` to allow for selectively enabling/disabling stdin, stdout,\n      and stderr\n- v1.3\n    - Add support for YAML format configs\n- v1.2\n    - Update `link` to be able to force create links (deleting things that were\n      previously there)\n    - Update `link` to be able to create parent directories\n- v1.1\n    - Update `clean` to remove old broken symlinks\n- v1.0\n    - Initial commit\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.6142578125,
          "content": "# Contributing\n\nAll kinds of contributions to Dotbot are greatly appreciated. For someone\nunfamiliar with the code base, the most efficient way to contribute is usually\nto submit a [feature request](#feature-requests) or [bug report](#bug-reports).\nIf you want to dive into the source code, you can submit a [patch](#patches) as\nwell, either working on your own ideas or [existing issues][issues].\n\n## Feature Requests\n\nDo you have an idea for an awesome new feature for Dotbot? Please [submit a\nfeature request][issue]. It's great to hear about new ideas.\n\nIf you are inclined to do so, you're welcome to [fork][fork] Dotbot, work on\nimplementing the feature yourself, and submit a patch. In this case, it's\n*highly recommended* that you first [open an issue][issue] describing your\nenhancement to get early feedback on the new feature that you are implementing.\nThis will help avoid wasted efforts and ensure that your work is incorporated\ninto the code base.\n\n## Bug Reports\n\nDid something go wrong with Dotbot? Sorry about that! Bug reports are greatly\nappreciated!\n\nWhen you [submit a bug report][issue], please include relevant information such\nas Dotbot version, operating system, configuration file, error messages, and\nsteps to reproduce the bug. The more details you can include, the easier it is\nto find and fix the bug.\n\n## Patches\n\nWant to hack on Dotbot? Awesome!\n\nIf there are [open issues][issues], you're more than welcome to work on those -\nthis is probably the best way to contribute to Dotbot. If you have your own\nideas, that's great too! In that case, before working on substantial changes to\nthe code base, it is *highly recommended* that you first [open an issue][issue]\ndescribing what you intend to work on.\n\n**Patches are generally submitted as pull requests.** Patches are also\n[accepted over email][email].\n\nAny changes to the code base should follow the style and coding conventions\nused in the rest of the project. The version history should be clean, and\ncommit messages should be descriptive and [properly\nformatted][commit-messages]. It's recommended that you add unit tests to\ndemonstrate that the bug is fixed (or that the feature works).\n\nSee the [Dotbot development guide][development] to learn how to run the tests,\ntype checking, and more.\n\n---\n\nIf you have any questions about anything, feel free to [ask][email]!\n\n[issue]: https://github.com/anishathalye/dotbot/issues/new\n[issues]: https://github.com/anishathalye/dotbot/issues\n[fork]: https://github.com/anishathalye/dotbot/fork\n[email]: mailto:me@anishathalye.com\n[commit-messages]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[development]: DEVELOPMENT.md\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 2.513671875,
          "content": "# Development\n\nDotbot uses the [Hatch] project manager ([installation instructions][hatch-install]).\n\nHatch automatically manages dependencies and runs testing, type checking, and other operations in isolated [environments][hatch-environments].\n\n[Hatch]: https://hatch.pypa.io/\n[hatch-install]: https://hatch.pypa.io/latest/install/\n[hatch-environments]: https://hatch.pypa.io/latest/environment/\n\n## Testing\n\nYou can run the tests on your local machine with:\n\n```bash\nhatch test\n```\n\nThe [`test` command][hatch-test] supports options such as `-c` for measuring test coverage, `-a` for testing with a matrix of Python versions, and appending an argument like `tests/test_shell.py::test_shell_can_override_defaults` for running a single test.\n\n[hatch-test]: https://hatch.pypa.io/latest/tutorials/testing/overview/\n\n### Isolation\n\nDotbot executes shell commands and interacts with the filesystem, and the tests exercise this functionality. The tests try to [insulate][dotbot-conftest] themselves from the machine, but if you prefer to run tests in an isolated container using Docker, you can do so with the following:\n\n```bash\ndocker run -it --rm -v \"${PWD}:/dotbot\" -w /dotbot python:3.13-bookworm /bin/bash\n```\n\nAfter spawning the container, install Hatch with `pip install hatch`, and then run the tests as described above.\n\n[dotbot-conftest]: tests/conftest.py\n\n## Type checking\n\nYou can run the [mypy static type checker][mypy] with:\n\n```bash\nhatch run types:check\n```\n\n[mypy]: https://mypy-lang.org/\n\n## Formatting and linting\n\nYou can run the [Ruff][ruff] formatter and linter with:\n\n```bash\nhatch fmt\n```\n\nThis will automatically make [safe fixes][fix-safety] to your code. If you want to only check your files without making modifications, run `hatch fmt --check`.\n\n[ruff]: https://github.com/astral-sh/ruff\n[fix-safety]: https://docs.astral.sh/ruff/linter/#fix-safety\n\n## Packaging\n\nYou can use [`hatch build`][hatch-build] to create build artifacts, a [source distribution (\"sdist\")][sdist] and a [built distribution (\"wheel\")][bdist].\n\nYou can use [`hatch publish`][hatch-publish] to publish build artifacts to [PyPI][pypi].\n\n[hatch-build]: https://hatch.pypa.io/latest/build/\n[sdist]: https://packaging.python.org/en/latest/glossary/#term-Source-Distribution-or-sdist\n[bdist]: https://packaging.python.org/en/latest/glossary/#term-Built-Distribution\n[hatch-publish]: https://hatch.pypa.io/latest/publish/\n[pypi]: https://pypi.org/\n\n## Continuous integration\n\nTesting, type checking, and formatting/linting is [checked in CI][ci].\n\n[ci]: .github/workflows/ci.yml\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0966796875,
          "content": "The MIT License (MIT)\n=====================\n\n**Copyright (c) Anish Athalye (me@anishathalye.com)**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.1025390625,
          "content": "# Dotbot [![Build Status](https://github.com/anishathalye/dotbot/workflows/CI/badge.svg)](https://github.com/anishathalye/dotbot/actions?query=workflow%3ACI) [![Coverage](https://codecov.io/gh/anishathalye/dotbot/branch/master/graph/badge.svg)](https://app.codecov.io/gh/anishathalye/dotbot) [![PyPI](https://img.shields.io/pypi/v/dotbot.svg)](https://pypi.org/pypi/dotbot/) [![Python 3.7+](https://img.shields.io/badge/python-3.7%2B-blue)](https://pypi.org/pypi/dotbot/)\n\nDotbot makes installing your dotfiles as easy as `git clone $url && cd dotfiles\n&& ./install`, even on a freshly installed system!\n\n- [Rationale](#rationale)\n- [Getting Started](#getting-started)\n- [Configuration](#configuration)\n- [Directives](#directives) ([Link](#link), [Create](#create), [Shell](#shell), [Clean](#clean), [Defaults](#defaults))\n- [Plugins](#plugins)\n- [Command-line Arguments](#command-line-arguments)\n- [Wiki][wiki]\n\n---\n\n## Rationale\n\nDotbot is a tool that bootstraps your dotfiles (it's a [Dot]files\n[bo]o[t]strapper, get it?). It does *less* than you think, because version\ncontrol systems do more than you think.\n\nDotbot is designed to be lightweight and self-contained, with no external\ndependencies and no installation required. Dotbot can also be a drop-in\nreplacement for any other tool you were using to manage your dotfiles, and\nDotbot is VCS-agnostic -- it doesn't make any attempt to manage your dotfiles.\n\nSee [this blog\npost](https://www.anishathalye.com/2014/08/03/managing-your-dotfiles/) or more\nresources on the [tutorials\npage](https://github.com/anishathalye/dotbot/wiki/Tutorials) for more detailed\nexplanations of how to organize your dotfiles.\n\n## Getting Started\n\n### Starting Fresh?\n\nGreat! You can automate the creation of your dotfiles by using the\nuser-contributed [init-dotfiles][init-dotfiles] script. If you'd rather use a\ntemplate repository, check out [dotfiles_template][dotfiles-template]. Or, if\nyou're just looking for [some inspiration][inspiration], we've got you covered.\n\n### Integrate with Existing Dotfiles\n\nThe following will help you get set up using Dotbot in just a few steps.\n\nIf you're using **Git**, you can add Dotbot as a submodule:\n\n```bash\ncd ~/.dotfiles # replace with the path to your dotfiles\ngit init # initialize repository if needed\ngit submodule add https://github.com/anishathalye/dotbot\ngit config -f .gitmodules submodule.dotbot.ignore dirty # ignore dirty commits in the submodule\ncp dotbot/tools/git-submodule/install .\ntouch install.conf.yaml\n```\n\nIf you're using **Mercurial**, you can add Dotbot as a subrepo:\n\n```bash\ncd ~/.dotfiles # replace with the path to your dotfiles\nhg init # initialize repository if needed\necho \"dotbot = [git]https://github.com/anishathalye/dotbot\" > .hgsub\nhg add .hgsub\ngit clone https://github.com/anishathalye/dotbot\ncp dotbot/tools/hg-subrepo/install .\ntouch install.conf.yaml\n```\n\nIf you are using PowerShell instead of a POSIX shell, you can use the provided\n`install.ps1` script instead of `install`. On Windows, Dotbot only supports\nPython 3.8+, and it requires that your account is [allowed to create symbolic\nlinks][windows-symlinks].\n\nTo get started, you just need to fill in the `install.conf.yaml` and Dotbot\nwill take care of the rest. To help you get started we have [an\nexample](#full-example) config file as well as [configuration\ndocumentation](#configuration) for the accepted parameters.\n\nNote: The `install` script is merely a shim that checks out the appropriate\nversion of Dotbot and calls the full Dotbot installer. By default, the script\nassumes that the configuration is located in `install.conf.yaml` the Dotbot\nsubmodule is located in `dotbot`. You can change either of these parameters by\nediting the variables in the `install` script appropriately.\n\nSetting up Dotbot as a submodule or subrepo locks it on the current version.\nYou can upgrade Dotbot at any point. If using a submodule, run `git submodule\nupdate --remote dotbot`, substituting `dotbot` with the path to the Dotbot\nsubmodule; be sure to commit your changes before running `./install`, otherwise\nthe old version of Dotbot will be checked out by the install script. If using a\nsubrepo, run `git fetch && git checkout origin/master` in the Dotbot directory.\n\nIf you prefer, you can install Dotbot from [PyPI] and call it as a command-line\nprogram:\n\n```bash\npip install dotbot\ntouch install.conf.yaml\n```\n\nIn this case, rather than running `./install`, you can invoke Dotbot with\n`dotbot -c <path to configuration file>`.\n\n### Full Example\n\nHere's an example of a complete configuration.\n\nThe conventional name for the configuration file is `install.conf.yaml`.\n\n```yaml\n- defaults:\n    link:\n      relink: true\n\n- clean: ['~']\n\n- link:\n    ~/.tmux.conf: tmux.conf\n    ~/.vim: vim\n    ~/.vimrc: vimrc\n\n- create:\n    - ~/downloads\n    - ~/.vim/undo-history\n\n- shell:\n  - [git submodule update --init --recursive, Installing submodules]\n```\n\nThe configuration file is typically written in YAML, but it can also be written\nin JSON (which is a [subset of YAML][json2yaml]). JSON configuration files are\nconventionally named `install.conf.json`.\n\n## Configuration\n\nDotbot uses YAML or JSON-formatted configuration files to let you specify how\nto set up your dotfiles. Currently, Dotbot knows how to [link](#link) files and\nfolders, [create](#create) folders, execute [shell](#shell) commands, and\n[clean](#clean) directories of broken symbolic links. Dotbot also supports user\n[plugins](#plugins) for custom commands.\n\n**Ideally, bootstrap configurations should be idempotent. That is, the\ninstaller should be able to be run multiple times without causing any\nproblems.** This makes a lot of things easier to do (in particular, syncing\nupdates between machines becomes really easy).\n\nDotbot configuration files are arrays of tasks, where each task\nis a dictionary that contains a command name mapping to data for that command.\nTasks are run in the order in which they are specified. Commands within a task\ndo not have a defined ordering.\n\nWhen writing nested constructs, keep in mind that YAML is whitespace-sensitive.\nFollowing the formatting used in the examples is a good idea. If a YAML\nconfiguration file is not behaving as you expect, try inspecting the\n[equivalent JSON][json2yaml] and check that it is correct.\n\n## Directives\n\nMost Dotbot commands support both a simplified and extended syntax, and they\ncan also be configured via setting [defaults](#defaults).\n\n### Link\n\nLink commands specify how files and directories should be symbolically linked.\nIf desired, items can be specified to be forcibly linked, overwriting existing\nfiles if necessary. Environment variables in paths are automatically expanded.\n\n#### Format\n\nLink commands are specified as a dictionary mapping targets to source\nlocations. Source locations are specified relative to the base directory (that\nis specified when running the installer). If linking directories, *do not*\ninclude a trailing slash.\n\nLink commands support an optional extended configuration. In this type of\nconfiguration, instead of specifying source locations directly, targets are\nmapped to extended configuration dictionaries.\n\n| Parameter | Explanation |\n| --- | --- |\n| `path` | The source for the symlink, the same as in the shortcut syntax (default: null, automatic (see below)) |\n| `create` | When true, create parent directories to the link as needed. (default: false) |\n| `relink` | Removes the old target if it's a symlink (default: false) |\n| `force` | Force removes the old target, file or folder, and forces a new link (default: false) |\n| `relative` | Use a relative path to the source when creating the symlink (default: false, absolute links) |\n| `canonicalize` | Resolve any symbolic links encountered in the source to symlink to the canonical path (default: true, real paths) |\n| `if` | Execute this in your `$SHELL` and only link if it is successful. |\n| `ignore-missing` | Do not fail if the source is missing and create the link anyway (default: false) |\n| `glob` | Treat `path` as a glob pattern, expanding patterns referenced below, linking all *files* matched. (default: false) |\n| `exclude` | Array of glob patterns to remove from glob matches. Uses same syntax as `path`. Ignored if `glob` is `false`. (default: empty, keep all matches) |\n| `prefix` | Prepend prefix prefix to basename of each file when linked, when `glob` is `true`. (default: '') |\n\nWhen `glob: true`, Dotbot uses [glob.glob](https://docs.python.org/3/library/glob.html#glob.glob) to resolve glob paths, expanding Unix shell-style wildcards, which are **not** the same as regular expressions; Only the following are expanded:\n\n| Pattern  | Meaning                            |\n|:---------|:-----------------------------------|\n| `*`      | matches anything                   |\n| `**`     | matches any **file**, recursively  |\n| `?`      | matches any single character       |\n| `[seq]`  | matches any character in `seq`     |\n| `[!seq]` | matches any character not in `seq` |\n\nHowever, due to the design of `glob.glob`, using a glob pattern such as `config/*`, will **not** match items that begin with `.`. To specifically capture items that being with `.`, you will need to include the `.` in the pattern, like this: `config/.*`.\n\nWhen using glob with the `exclude:` option, the paths in the exclude paths should be relative to the base directory, same as the glob pattern itself. For example, if a glob pattern `vim/*` matches directories `vim/autoload`, `vim/ftdetect`, `vim/ftplugin`, and `vim/spell`, and you want to ignore the spell directory, then you should use `exclude: [\"vim/spell\"]` (not just `\"spell\"`).\n\n#### Example\n\n```yaml\n- link:\n    ~/.config/terminator:\n      create: true\n      path: config/terminator\n    ~/.vim: vim\n    ~/.vimrc:\n      relink: true\n      path: vimrc\n    ~/.zshrc:\n      force: true\n      path: zshrc\n    ~/.hammerspoon:\n      if: '[ `uname` = Darwin ]'\n      path: hammerspoon\n    ~/.config/:\n      glob: true\n      path: dotconf/config/**\n    ~/:\n      glob: true\n      path: dotconf/*\n      prefix: '.'\n```\n\nIf the source location is omitted or set to `null`, Dotbot will use the\nbasename of the destination, with a leading `.` stripped if present. This makes\nthe following two config files equivalent.\n\nExplicit sources:\n\n```yaml\n- link:\n    ~/bin/ack: ack\n    ~/.vim: vim\n    ~/.vimrc:\n      relink: true\n      path: vimrc\n    ~/.zshrc:\n      force: true\n      path: zshrc\n    ~/.config/:\n      glob: true\n      path: config/*\n      relink: true\n      exclude: [ config/Code ]\n    ~/.config/Code/User/:\n      create: true\n      glob: true\n      path: config/Code/User/*\n      relink: true\n```\n\nImplicit sources:\n\n```yaml\n- link:\n    ~/bin/ack:\n    ~/.vim:\n    ~/.vimrc:\n      relink: true\n    ~/.zshrc:\n      force: true\n    ~/.config/:\n      glob: true\n      path: config/*\n      relink: true\n      exclude: [ config/Code ]\n    ~/.config/Code/User/:\n      create: true\n      glob: true\n      path: config/Code/User/*\n      relink: true\n```\n\n### Create\n\nCreate commands specify empty directories to be created.  This can be useful\nfor scaffolding out folders or parent folder structure required for various\napps, plugins, shell commands, etc.\n\n#### Format\n\nCreate commands are specified as an array of directories to be created. If you\nwant to use the optional extended configuration, create commands are specified\nas dictionaries. For convenience, it's permissible to leave the options blank\n(null) in the dictionary syntax.\n\n| Parameter | Explanation |\n| --- | --- |\n| `mode` | The file mode to use for creating the leaf directory (default: 0777) |\n\nThe `mode` parameter is treated in the same way as in Python's\n[os.mkdir](https://docs.python.org/3/library/os.html#mkdir-modebits). Its\nbehavior is platform-dependent. On Unix systems, the current umask value is\nfirst masked out.\n\n#### Example\n\n```yaml\n- create:\n    - ~/downloads\n    - ~/.vim/undo-history\n- create:\n    ~/.ssh:\n      mode: 0700\n    ~/projects:\n```\n\n### Shell\n\nShell commands specify shell commands to be run. Shell commands are run in the\nbase directory (that is specified when running the installer).\n\n#### Format\n\nShell commands can be specified in several different ways. The simplest way is\njust to specify a command as a string containing the command to be run.\n\nAnother way is to specify a two element array where the first element is the\nshell command and the second is an optional human-readable description.\n\nShell commands support an extended syntax as well, which provides more\nfine-grained control.\n\n| Parameter | Explanation |\n| --- | --- |\n| `command` | The command to be run |\n| `description` | A human-readable message describing the command (default: null) |\n| `quiet` | Show only the description but not the command in log output (default: false) |\n| `stdin` | Allow a command to read from standard input (default: false) |\n| `stdout` | Show a command's output from stdout (default: false) |\n| `stderr` | Show a command's error output from stderr (default: false) |\n\nNote that `quiet` controls whether the command (a string) is printed in log\noutput, it does not control whether the output from running the command is\nprinted (that is controlled by `stdout` / `stderr`). When a command's `stdin` /\n`stdout` / `stderr` is not enabled (which is the default), it's connected to\n`/dev/null`, disabling input and hiding output.\n\n#### Example\n\n```yaml\n- shell:\n  - chsh -s $(which zsh)\n  - [chsh -s $(which zsh), Making zsh the default shell]\n  -\n    command: read var && echo Your variable is $var\n    stdin: true\n    stdout: true\n    description: Reading and printing variable\n    quiet: true\n  -\n    command: read fail\n    stderr: true\n```\n\n### Clean\n\nClean commands specify directories that should be checked for dead symbolic\nlinks. These dead links are removed automatically. Only dead links that point\nto somewhere within the dotfiles directory are removed unless the `force`\noption is set to `true`.\n\n#### Format\n\nClean commands are specified as an array of directories to be cleaned.\n\nClean commands also support an extended configuration syntax.\n\n| Parameter | Explanation |\n| --- | --- |\n| `force` | Remove dead links even if they don't point to a file inside the dotfiles directory (default: false) |\n| `recursive` | Traverse the directory recursively looking for dead links (default: false) |\n\nNote: using the `recursive` option for `~` is not recommended because it will\nbe slow.\n\n#### Example\n\n```yaml\n- clean: ['~']\n\n- clean:\n    ~/:\n      force: true\n    ~/.config:\n      recursive: true\n```\n\n### Defaults\n\nDefault options for plugins can be specified so that options don't have to be\nrepeated many times. This can be very useful to use with the link command, for\nexample.\n\nDefaults apply to all commands that come after setting the defaults. Defaults\ncan be set multiple times; each change replaces the defaults with a new set of\noptions.\n\n#### Format\n\nDefaults are specified as a dictionary mapping action names to settings, which\nare dictionaries from option names to values.\n\n#### Example\n\n```yaml\n- defaults:\n    link:\n      create: true\n      relink: true\n```\n\n### Plugins\n\nDotbot also supports custom directives implemented by plugins. Plugins are\nimplemented as subclasses of `dotbot.Plugin`, so they must implement\n`can_handle()` and `handle()`. The `can_handle()` method should return `True`\nif the plugin can handle an action with the given name. The `handle()` method\nshould do something and return whether or not it completed successfully.\n\nAll built-in Dotbot directives are written as plugins that are loaded by\ndefault, so those can be used as a reference when writing custom plugins.\n\nPlugins are loaded using the `--plugin` and `--plugin-dir` options, using\neither absolute paths or paths relative to the base directory. It is\nrecommended that these options are added directly to the `install` script.\n\nSee [here][plugins] for a current list of plugins.\n\n## Command-line Arguments\n\nDotbot takes a number of command-line arguments; you can run Dotbot with\n`--help`, e.g. by running `./install --help`, to see the full list of options.\nHere, we highlight a couple that are particularly interesting.\n\n### `--only`\n\nYou can call `./install --only [list of directives]`, such as `./install --only\nlink`, and Dotbot will only run those sections of the config file.\n\n### `--except`\n\nYou can call `./install --except [list of directives]`, such as `./install\n--except shell`, and Dotbot will run all the sections of the config file except\nthe ones listed.\n\n## Wiki\n\nCheck out the [Dotbot wiki][wiki] for more information, tips and tricks,\nuser-contributed plugins, and more.\n\n## Contributing\n\nDo you have a feature request, bug report, or patch? Great! See\n[CONTRIBUTING.md][contributing] for information on what you can do about that.\n\n## License\n\nCopyright (c) Anish Athalye. Released under the MIT License. See\n[LICENSE.md][license] for details.\n\n[PyPI]: https://pypi.org/project/dotbot/\n[init-dotfiles]: https://github.com/Vaelatern/init-dotfiles\n[dotfiles-template]: https://github.com/anishathalye/dotfiles_template\n[inspiration]: https://github.com/anishathalye/dotbot/wiki/Users\n[windows-symlinks]: https://learn.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links\n[json2yaml]: https://www.json2yaml.com/\n[plugins]: https://github.com/anishathalye/dotbot/wiki/Plugins\n[wiki]: https://github.com/anishathalye/dotbot/wiki\n[contributing]: CONTRIBUTING.md\n[license]: LICENSE.md\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.05078125,
          "content": "coverage:\n  status:\n    project: off\n    patch: off\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.033203125,
          "content": "[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"dotbot\"\nauthors = [\n  { name = \"Anish Athalye\", email = \"me@anishathalye.com\" },\n]\ndescription = \"A tool that bootstraps your dotfiles\"\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3\",\n  \"Topic :: Utilities\",\n]\nkeywords = [\"dotfiles\"]\ndynamic = [\"version\"]\ndependencies = [\n  \"PyYAML>=6.0.1,<7\",\n]\n\n[project.scripts]\ndotbot = \"dotbot.cli:main\"\n\n[project.urls]\nhomepage = \"https://github.com/anishathalye/dotbot\"\nrepository = \"https://github.com/anishathalye/dotbot.git\"\nissues = \"https://github.com/anishathalye/dotbot/issues\"\n\n[tool.hatch.version]\npath = \"src/dotbot/__init__.py\"\n\n[tool.hatch.build.targets.sdist]\nexclude = [\n  \"lib/\",\n]\n\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\", \"pypy3.9\", \"pypy3.10\"]\n\n# the default configuration for the hatch-test environment\n# (https://hatch.pypa.io/latest/config/internal/testing/#dependencies) uses a\n# version of coverage[toml] that is incompatible with Python 3.7, so we override\n# the test dependencies for Python 3.7 here\n[tool.hatch.envs.hatch-test.overrides]\nname.\"^py3\\\\.7$\".set-dependencies = [\n  \"coverage-enable-subprocess\",\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-mock\",\n  \"pytest-randomly\",\n  \"pytest-rerunfailures\",\n  \"pytest-xdist[psutil]\",\n]\n\n[tool.coverage.run]\nomit = [\n  \"*/tests/*\",\n  \"*/dotfiles/*\" # the tests create some .py files in a \"dotfiles\" directory\n]\n\n[tool.hatch.envs.types]\nextra-dependencies = [\n  \"mypy>=1.0.0\",\n  \"pytest\",\n]\n\n[tool.hatch.envs.types.scripts]\ncheck = \"mypy --strict --install-types --non-interactive {args:src tests}\"\n\n[tool.hatch.envs.coverage]\ndetached = true\ndependencies = [\n  \"coverage\",\n]\n\n[tool.hatch.envs.coverage.scripts]\nhtml = \"coverage html\"\nxml = \"coverage xml\"\n\n[tool.ruff]\nextend-exclude = [\n  \"lib/*.py\"\n]\nlint.ignore = [\n  \"FA100\",\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}