{
  "metadata": {
    "timestamp": 1736560541841,
    "page": 149,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NVIDIA/apex",
      "stars": 8493,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.1328125,
          "content": "apex.egg-info\ndist\nbuild\ndocs/build\n*~\n__pycache__\n.vscode\n\n# Copied from https://raw.githubusercontent.com/github/gitignore/master/Python.gitignore\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.298828125,
          "content": "[submodule \"apex/contrib/csrc/multihead_attn/cutlass\"]\n\tpath = apex/contrib/csrc/multihead_attn/cutlass\n\turl = https://github.com/NVIDIA/cutlass.git\n\tbranch = v1.2.0\n[submodule \"apex/contrib/csrc/cudnn-frontend\"]\n\tpath = apex/contrib/csrc/cudnn-frontend\n\turl = https://github.com/NVIDIA/cudnn-frontend.git\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4150390625,
          "content": "All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4873046875,
          "content": "# Introduction\n\nThis repository holds NVIDIA-maintained utilities to streamline mixed precision and distributed training in Pytorch.\nSome of the code here will be included in upstream Pytorch eventually.\nThe intent of Apex is to make up-to-date utilities available to users as quickly as possible.\n\n## Full API Documentation: [https://nvidia.github.io/apex](https://nvidia.github.io/apex)\n\n## [GTC 2019](https://github.com/mcarilli/mixed_precision_references/tree/master/GTC_2019) and [Pytorch DevCon 2019](https://github.com/mcarilli/mixed_precision_references/tree/master/Pytorch_Devcon_2019) Slides\n\n# Contents\n\n## 1. Amp:  Automatic Mixed Precision\n\n**Deprecated. Use [PyTorch AMP](https://pytorch.org/docs/stable/amp.html)**\n\n`apex.amp` is a tool to enable mixed precision training by changing only 3 lines of your script.\nUsers can easily experiment with different pure and mixed precision training modes by supplying\ndifferent flags to `amp.initialize`.\n\n[Webinar introducing Amp](https://info.nvidia.com/webinar-mixed-precision-with-pytorch-reg-page.html)\n(The flag `cast_batchnorm` has been renamed to `keep_batchnorm_fp32`).\n\n[API Documentation](https://nvidia.github.io/apex/amp.html)\n\n[Comprehensive Imagenet example](https://github.com/NVIDIA/apex/tree/master/examples/imagenet)\n\n[DCGAN example coming soon...](https://github.com/NVIDIA/apex/tree/master/examples/dcgan)\n\n[Moving to the new Amp API](https://nvidia.github.io/apex/amp.html#transition-guide-for-old-api-users) (for users of the deprecated \"Amp\" and \"FP16_Optimizer\" APIs)\n\n## 2. Distributed Training\n\n**`apex.parallel.DistributedDataParallel` is deprecated. Use [`torch.nn.parallel.DistributedDataParallel`](https://pytorch.org/docs/stable/generated/torch.nn.parallel.DistributedDataParallel.html?highlight=distributeddataparallel#torch.nn.parallel.DistributedDataParallel)**\n\n`apex.parallel.DistributedDataParallel` is a module wrapper, similar to\n`torch.nn.parallel.DistributedDataParallel`.  It enables convenient multiprocess distributed training,\noptimized for NVIDIA's NCCL communication library.\n\n[API Documentation](https://nvidia.github.io/apex/parallel.html)\n\n[Python Source](https://github.com/NVIDIA/apex/tree/master/apex/parallel)\n\n[Example/Walkthrough](https://github.com/NVIDIA/apex/tree/master/examples/simple/distributed)\n\nThe [Imagenet example](https://github.com/NVIDIA/apex/tree/master/examples/imagenet)\nshows use of `apex.parallel.DistributedDataParallel` along with `apex.amp`.\n\n### Synchronized Batch Normalization\n\n**Deprecated. Use [`torch.nn.SyncBatchNorm`](https://pytorch.org/docs/stable/generated/torch.nn.SyncBatchNorm.html)**\n\n`apex.parallel.SyncBatchNorm` extends `torch.nn.modules.batchnorm._BatchNorm` to\nsupport synchronized BN.\nIt allreduces stats across processes during multiprocess (DistributedDataParallel) training.\nSynchronous BN has been used in cases where only a small\nlocal minibatch can fit on each GPU.\nAllreduced stats increase the effective batch size for the BN layer to the\nglobal batch size across all processes (which, technically, is the correct\nformulation).\nSynchronous BN has been observed to improve converged accuracy in some of our research models.\n\n### Checkpointing\n\nTo properly save and load your `amp` training, we introduce the `amp.state_dict()`, which contains all `loss_scalers` and their corresponding unskipped steps,\nas well as `amp.load_state_dict()` to restore these attributes.\n\nIn order to get bitwise accuracy, we recommend the following workflow:\n```python\n# Initialization\nopt_level = 'O1'\nmodel, optimizer = amp.initialize(model, optimizer, opt_level=opt_level)\n\n# Train your model\n...\nwith amp.scale_loss(loss, optimizer) as scaled_loss:\n    scaled_loss.backward()\n...\n\n# Save checkpoint\ncheckpoint = {\n    'model': model.state_dict(),\n    'optimizer': optimizer.state_dict(),\n    'amp': amp.state_dict()\n}\ntorch.save(checkpoint, 'amp_checkpoint.pt')\n...\n\n# Restore\nmodel = ...\noptimizer = ...\ncheckpoint = torch.load('amp_checkpoint.pt')\n\nmodel, optimizer = amp.initialize(model, optimizer, opt_level=opt_level)\nmodel.load_state_dict(checkpoint['model'])\noptimizer.load_state_dict(checkpoint['optimizer'])\namp.load_state_dict(checkpoint['amp'])\n\n# Continue training\n...\n```\n\nNote that we recommend restoring the model using the same `opt_level`. Also note that we recommend calling the `load_state_dict` methods after `amp.initialize`.\n\n# Installation\nEach [`apex.contrib`](./apex/contrib) module requires one or more install options other than `--cpp_ext` and `--cuda_ext`.\nNote that contrib modules do not necessarily support stable PyTorch releases.\n\n## Containers\nNVIDIA PyTorch Containers are available on NGC: https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch.\nThe containers come with all the custom extensions available at the moment. \n\nSee [the NGC documentation](https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/index.html) for details such as:\n- how to pull a container\n- how to run a pulled container\n- release notes\n\n## From Source\n\nTo install Apex from source, we recommend using the nightly Pytorch obtainable from https://github.com/pytorch/pytorch.\n\nThe latest stable release obtainable from https://pytorch.org should also work.\n\nWe recommend installing [`Ninja`](https://ninja-build.org/) to make compilation faster.\n\n### Linux\nFor performance and full functionality, we recommend installing Apex with\nCUDA and C++ extensions via\n```bash\ngit clone https://github.com/NVIDIA/apex\ncd apex\n# if pip >= 23.1 (ref: https://pip.pypa.io/en/stable/news/#v23-1) which supports multiple `--config-settings` with the same key... \npip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings \"--build-option=--cpp_ext\" --config-settings \"--build-option=--cuda_ext\" ./\n# otherwise\npip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./\n```\n\nAPEX also supports a Python-only build via\n```bash\npip install -v --disable-pip-version-check --no-build-isolation --no-cache-dir ./\n```\nA Python-only build omits:\n- Fused kernels required to use `apex.optimizers.FusedAdam`.\n- Fused kernels required to use `apex.normalization.FusedLayerNorm` and `apex.normalization.FusedRMSNorm`.\n- Fused kernels that improve the performance and numerical stability of `apex.parallel.SyncBatchNorm`.\n- Fused kernels that improve the performance of `apex.parallel.DistributedDataParallel` and `apex.amp`.\n`DistributedDataParallel`, `amp`, and `SyncBatchNorm` will still be usable, but they may be slower.\n\n\n### [Experimental] Windows\n`pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings \"--build-option=--cpp_ext\" --config-settings \"--build-option=--cuda_ext\" .` may work if you were able to build Pytorch from source\non your system. A Python-only build via `pip install -v --no-cache-dir .` is more likely to work.  \nIf you installed Pytorch in a Conda environment, make sure to install Apex in that same environment.\n\n\n## Custom C++/CUDA Extensions and Install Options\n\nIf a requirement of a module is not met, then it will not be built.\n\n|  Module Name  |  Install Option  |  Misc  |\n|---------------|------------------|--------|\n|  `apex_C`     |  `--cpp_ext`     | |\n|  `amp_C`      |  `--cuda_ext`    | |\n|  `syncbn`     |  `--cuda_ext`    | |\n|  `fused_layer_norm_cuda`  |  `--cuda_ext`  | [`apex.normalization`](./apex/normalization) |\n|  `mlp_cuda`   |  `--cuda_ext`    | |\n|  `scaled_upper_triang_masked_softmax_cuda`  |  `--cuda_ext`  | |\n|  `generic_scaled_masked_softmax_cuda`  |  `--cuda_ext`  | |\n|  `scaled_masked_softmax_cuda`  |  `--cuda_ext`  | |\n|  `fused_weight_gradient_mlp_cuda`  |  `--cuda_ext`  | Requires CUDA>=11 |\n|  `permutation_search_cuda`  |  `--permutation_search`  | [`apex.contrib.sparsity`](./apex/contrib/sparsity)  |\n|  `bnp`        |  `--bnp`         |  [`apex.contrib.groupbn`](./apex/contrib/groupbn) |\n|  `xentropy`   |  `--xentropy`    |  [`apex.contrib.xentropy`](./apex/contrib/xentropy)  |\n|  `focal_loss_cuda`  |  `--focal_loss`  |  [`apex.contrib.focal_loss`](./apex/contrib/focal_loss)  |\n|  `fused_index_mul_2d`  |  `--index_mul_2d`  |  [`apex.contrib.index_mul_2d`](./apex/contrib/index_mul_2d)  |\n|  `fused_adam_cuda`  |  `--deprecated_fused_adam`  |  [`apex.contrib.optimizers`](./apex/contrib/optimizers)  |\n|  `fused_lamb_cuda`  |  `--deprecated_fused_lamb`  |  [`apex.contrib.optimizers`](./apex/contrib/optimizers)  |\n|  `fast_layer_norm`  |  `--fast_layer_norm`  |  [`apex.contrib.layer_norm`](./apex/contrib/layer_norm). different from `fused_layer_norm` |\n|  `fmhalib`    |  `--fmha`        |  [`apex.contrib.fmha`](./apex/contrib/fmha)  |\n|  `fast_multihead_attn`  |  `--fast_multihead_attn`  |  [`apex.contrib.multihead_attn`](./apex/contrib/multihead_attn)  |\n|  `transducer_joint_cuda`  |  `--transducer`  |  [`apex.contrib.transducer`](./apex/contrib/transducer)  |\n|  `transducer_loss_cuda`   |  `--transducer`  |  [`apex.contrib.transducer`](./apex/contrib/transducer)  |\n|  `cudnn_gbn_lib`  |  `--cudnn_gbn`  | Requires cuDNN>=8.5, [`apex.contrib.cudnn_gbn`](./apex/contrib/cudnn_gbn) |\n|  `peer_memory_cuda`  |  `--peer_memory`  |  [`apex.contrib.peer_memory`](./apex/contrib/peer_memory)  |\n|  `nccl_p2p_cuda`  |  `--nccl_p2p`  | Requires NCCL >= 2.10, [`apex.contrib.nccl_p2p`](./apex/contrib/nccl_p2p)  |\n|  `fast_bottleneck`  |  `--fast_bottleneck`  |  Requires `peer_memory_cuda` and `nccl_p2p_cuda`, [`apex.contrib.bottleneck`](./apex/contrib/bottleneck) |\n|  `fused_conv_bias_relu`  |  `--fused_conv_bias_relu`  | Requires cuDNN>=8.4, [`apex.contrib.conv_bias_relu`](./apex/contrib/conv_bias_relu) |\n"
        },
        {
          "name": "apex",
          "type": "tree",
          "content": null
        },
        {
          "name": "csrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0986328125,
          "content": "[build-system]\nrequires = [\n    \"setuptools\",\n    \"wheel\",\n]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.08203125,
          "content": "cxxfilt>=0.2.0\ntqdm>=4.28.1\nnumpy>=1.15.3\nPyYAML>=5.1\npytest>=3.5.1\npackaging>=14.0\n"
        },
        {
          "name": "requirements_dev.txt",
          "type": "blob",
          "size": 0.0458984375,
          "content": "-r requirements.txt\nflake8>=3.7.9\nSphinx>=3.0.3"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 34.1962890625,
          "content": "import sys\nimport warnings\nimport os\nimport glob\nfrom packaging.version import parse, Version\n\nfrom setuptools import setup, find_packages\nimport subprocess\n\nimport torch\nfrom torch.utils.cpp_extension import (\n    BuildExtension,\n    CppExtension,\n    CUDAExtension,\n    CUDA_HOME,\n    load,\n)\n\n# ninja build does not work unless include_dirs are abs path\nthis_dir = os.path.dirname(os.path.abspath(__file__))\n\n\ndef get_cuda_bare_metal_version(cuda_dir):\n    raw_output = subprocess.check_output([cuda_dir + \"/bin/nvcc\", \"-V\"], universal_newlines=True)\n    output = raw_output.split()\n    release_idx = output.index(\"release\") + 1\n    bare_metal_version = parse(output[release_idx].split(\",\")[0])\n\n    return raw_output, bare_metal_version\n\n\ndef check_cuda_torch_binary_vs_bare_metal(cuda_dir):\n    raw_output, bare_metal_version = get_cuda_bare_metal_version(cuda_dir)\n    torch_binary_version = parse(torch.version.cuda)\n\n    print(\"\\nCompiling cuda extensions with\")\n    print(raw_output + \"from \" + cuda_dir + \"/bin\\n\")\n\n    if (bare_metal_version != torch_binary_version):\n        raise RuntimeError(\n            \"Cuda extensions are being compiled with a version of Cuda that does \"\n            \"not match the version used to compile Pytorch binaries.  \"\n            \"Pytorch binaries were compiled with Cuda {}.\\n\".format(torch.version.cuda)\n            + \"In some cases, a minor-version mismatch will not cause later errors:  \"\n            \"https://github.com/NVIDIA/apex/pull/323#discussion_r287021798.  \"\n            \"You can try commenting out this check (at your own risk).\"\n        )\n\n\ndef raise_if_cuda_home_none(global_option: str) -> None:\n    if CUDA_HOME is not None:\n        return\n    raise RuntimeError(\n        f\"{global_option} was requested, but nvcc was not found.  Are you sure your environment has nvcc available?  \"\n        \"If you're installing within a container from https://hub.docker.com/r/pytorch/pytorch, \"\n        \"only images whose names contain 'devel' will provide nvcc.\"\n    )\n\n\ndef check_cudnn_version_and_warn(global_option: str, required_cudnn_version: int) -> bool:\n    cudnn_available = torch.backends.cudnn.is_available()\n    cudnn_version = torch.backends.cudnn.version() if cudnn_available else None\n    if not (cudnn_available and (cudnn_version >= required_cudnn_version)):\n        warnings.warn(\n            f\"Skip `{global_option}` as it requires cuDNN {required_cudnn_version} or later, \"\n            f\"but {'cuDNN is not available' if not cudnn_available else cudnn_version}\"\n        )\n        return False\n    return True\n\n\nif not torch.cuda.is_available():\n    # https://github.com/NVIDIA/apex/issues/486\n    # Extension builds after https://github.com/pytorch/pytorch/pull/23408 attempt to query torch.cuda.get_device_capability(),\n    # which will fail if you are compiling in an environment without visible GPUs (e.g. during an nvidia-docker build command).\n    print(\n        \"\\nWarning: Torch did not find available GPUs on this system.\\n\",\n        \"If your intention is to cross-compile, this is not an error.\\n\"\n        \"By default, Apex will cross-compile for Pascal (compute capabilities 6.0, 6.1, 6.2),\\n\"\n        \"Volta (compute capability 7.0), Turing (compute capability 7.5),\\n\"\n        \"and, if the CUDA version is >= 11.0, Ampere (compute capability 8.0).\\n\"\n        \"If you wish to cross-compile for a single specific architecture,\\n\"\n        'export TORCH_CUDA_ARCH_LIST=\"compute capability\" before running setup.py.\\n',\n    )\n    if os.environ.get(\"TORCH_CUDA_ARCH_LIST\", None) is None and CUDA_HOME is not None:\n        _, bare_metal_version = get_cuda_bare_metal_version(CUDA_HOME)\n        if bare_metal_version >= Version(\"11.8\"):\n            os.environ[\"TORCH_CUDA_ARCH_LIST\"] = \"6.0;6.1;6.2;7.0;7.5;8.0;8.6;9.0\"\n        elif bare_metal_version >= Version(\"11.1\"):\n            os.environ[\"TORCH_CUDA_ARCH_LIST\"] = \"6.0;6.1;6.2;7.0;7.5;8.0;8.6\"\n        elif bare_metal_version == Version(\"11.0\"):\n            os.environ[\"TORCH_CUDA_ARCH_LIST\"] = \"6.0;6.1;6.2;7.0;7.5;8.0\"\n        else:\n            os.environ[\"TORCH_CUDA_ARCH_LIST\"] = \"6.0;6.1;6.2;7.0;7.5\"\n\nprint(\"\\n\\ntorch.__version__  = {}\\n\\n\".format(torch.__version__))\nTORCH_MAJOR = int(torch.__version__.split(\".\")[0])\nTORCH_MINOR = int(torch.__version__.split(\".\")[1])\n\nif TORCH_MAJOR == 0 and TORCH_MINOR < 4:\n    raise RuntimeError(\n        \"Apex requires Pytorch 0.4 or newer.\\nThe latest stable release can be obtained from https://pytorch.org/\"\n    )\n\ncmdclass = {}\next_modules = []\n\nextras = {}\n\nif \"--cpp_ext\" in sys.argv or \"--cuda_ext\" in sys.argv:\n    if TORCH_MAJOR == 0:\n        raise RuntimeError(\n            \"--cpp_ext requires Pytorch 1.0 or later, \" \"found torch.__version__ = {}\".format(torch.__version__)\n        )\n\nif \"--cpp_ext\" in sys.argv:\n    sys.argv.remove(\"--cpp_ext\")\n    ext_modules.append(CppExtension(\"apex_C\", [\"csrc/flatten_unflatten.cpp\"]))\n\n\n# Set up macros for forward/backward compatibility hack around\n# https://github.com/pytorch/pytorch/commit/4404762d7dd955383acee92e6f06b48144a0742e\n# and\n# https://github.com/NVIDIA/apex/issues/456\n# https://github.com/pytorch/pytorch/commit/eb7b39e02f7d75c26d8a795ea8c7fd911334da7e#diff-4632522f237f1e4e728cb824300403ac\nversion_ge_1_1 = []\nif (TORCH_MAJOR > 1) or (TORCH_MAJOR == 1 and TORCH_MINOR > 0):\n    version_ge_1_1 = [\"-DVERSION_GE_1_1\"]\nversion_ge_1_3 = []\nif (TORCH_MAJOR > 1) or (TORCH_MAJOR == 1 and TORCH_MINOR > 2):\n    version_ge_1_3 = [\"-DVERSION_GE_1_3\"]\nversion_ge_1_5 = []\nif (TORCH_MAJOR > 1) or (TORCH_MAJOR == 1 and TORCH_MINOR > 4):\n    version_ge_1_5 = [\"-DVERSION_GE_1_5\"]\nversion_dependent_macros = version_ge_1_1 + version_ge_1_3 + version_ge_1_5\n\n_, bare_metal_version = get_cuda_bare_metal_version(CUDA_HOME)\n\nif \"--distributed_adam\" in sys.argv:\n    sys.argv.remove(\"--distributed_adam\")\n    raise_if_cuda_home_none(\"--distributed_adam\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"distributed_adam_cuda\",\n            sources=[\n                \"apex/contrib/csrc/optimizers/multi_tensor_distopt_adam.cpp\",\n                \"apex/contrib/csrc/optimizers/multi_tensor_distopt_adam_kernel.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\", \"--use_fast_math\"] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--distributed_lamb\" in sys.argv:\n    sys.argv.remove(\"--distributed_lamb\")\n    raise_if_cuda_home_none(\"--distributed_lamb\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"distributed_lamb_cuda\",\n            sources=[\n                \"apex/contrib/csrc/optimizers/multi_tensor_distopt_lamb.cpp\",\n                \"apex/contrib/csrc/optimizers/multi_tensor_distopt_lamb_kernel.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\", \"--use_fast_math\"] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--cuda_ext\" in sys.argv:\n    sys.argv.remove(\"--cuda_ext\")\n    raise_if_cuda_home_none(\"--cuda_ext\")\n    check_cuda_torch_binary_vs_bare_metal(CUDA_HOME)\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"amp_C\",\n            sources=[\n                \"csrc/amp_C_frontend.cpp\",\n                \"csrc/multi_tensor_sgd_kernel.cu\",\n                \"csrc/multi_tensor_scale_kernel.cu\",\n                \"csrc/multi_tensor_axpby_kernel.cu\",\n                \"csrc/multi_tensor_l2norm_kernel.cu\",\n                \"csrc/multi_tensor_l2norm_kernel_mp.cu\",\n                \"csrc/multi_tensor_l2norm_scale_kernel.cu\",\n                \"csrc/multi_tensor_lamb_stage_1.cu\",\n                \"csrc/multi_tensor_lamb_stage_2.cu\",\n                \"csrc/multi_tensor_adam.cu\",\n                \"csrc/multi_tensor_adagrad.cu\",\n                \"csrc/multi_tensor_novograd.cu\",\n                \"csrc/multi_tensor_lamb.cu\",\n                \"csrc/multi_tensor_lamb_mp.cu\",\n                \"csrc/update_scale_hysteresis.cu\",\n            ],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-lineinfo\",\n                    \"-O3\",\n                    # '--resource-usage',\n                    \"--use_fast_math\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n    ext_modules.append(\n        CUDAExtension(\n            name=\"syncbn\",\n            sources=[\"csrc/syncbn.cpp\", \"csrc/welford.cu\"],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\"] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fused_layer_norm_cuda\",\n            sources=[\"csrc/layer_norm_cuda.cpp\", \"csrc/layer_norm_cuda_kernel.cu\"],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-maxrregcount=50\", \"-O3\", \"--use_fast_math\"] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"mlp_cuda\",\n            sources=[\"csrc/mlp.cpp\", \"csrc/mlp_cuda.cu\"],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\"] + version_dependent_macros,\n            },\n        )\n    )\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fused_dense_cuda\",\n            sources=[\"csrc/fused_dense.cpp\", \"csrc/fused_dense_cuda.cu\"],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\"] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"scaled_upper_triang_masked_softmax_cuda\",\n            sources=[\n                \"csrc/megatron/scaled_upper_triang_masked_softmax.cpp\",\n                \"csrc/megatron/scaled_upper_triang_masked_softmax_cuda.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"generic_scaled_masked_softmax_cuda\",\n            sources=[\n                \"csrc/megatron/generic_scaled_masked_softmax.cpp\",\n                \"csrc/megatron/generic_scaled_masked_softmax_cuda.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"scaled_masked_softmax_cuda\",\n            sources=[\"csrc/megatron/scaled_masked_softmax.cpp\", \"csrc/megatron/scaled_masked_softmax_cuda.cu\"],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"scaled_softmax_cuda\",\n            sources=[\"csrc/megatron/scaled_softmax.cpp\", \"csrc/megatron/scaled_softmax_cuda.cu\"],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fused_rotary_positional_embedding\",\n            sources=[\n                \"csrc/megatron/fused_rotary_positional_embedding.cpp\",\n                \"csrc/megatron/fused_rotary_positional_embedding_cuda.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n\n    if bare_metal_version >= Version(\"11.0\"):\n\n        cc_flag = []\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_70,code=sm_70\")\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_80,code=sm_80\")\n        if bare_metal_version >= Version(\"11.1\"):\n            cc_flag.append(\"-gencode\")\n            cc_flag.append(\"arch=compute_86,code=sm_86\")\n        if bare_metal_version >= Version(\"11.8\"):\n            cc_flag.append(\"-gencode\")\n            cc_flag.append(\"arch=compute_90,code=sm_90\")\n\n        ext_modules.append(\n            CUDAExtension(\n                name=\"fused_weight_gradient_mlp_cuda\",\n                include_dirs=[os.path.join(this_dir, \"csrc\")],\n                sources=[\n                    \"csrc/megatron/fused_weight_gradient_dense.cpp\",\n                    \"csrc/megatron/fused_weight_gradient_dense_cuda.cu\",\n                    \"csrc/megatron/fused_weight_gradient_dense_16bit_prec_cuda.cu\",\n                ],\n                extra_compile_args={\n                    \"cxx\": [\"-O3\"] + version_dependent_macros,\n                    \"nvcc\": [\n                        \"-O3\",\n                        \"-U__CUDA_NO_HALF_OPERATORS__\",\n                        \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                        \"--expt-relaxed-constexpr\",\n                        \"--expt-extended-lambda\",\n                        \"--use_fast_math\",\n                    ] + version_dependent_macros + cc_flag,\n                },\n            )\n        )\n\nif \"--permutation_search\" in sys.argv:\n    sys.argv.remove(\"--permutation_search\")\n\n    if CUDA_HOME is None:\n        raise RuntimeError(\"--permutation_search was requested, but nvcc was not found.  Are you sure your environment has nvcc available?  If you're installing within a container from https://hub.docker.com/r/pytorch/pytorch, only images whose names contain 'devel' will provide nvcc.\")\n    else:\n        cc_flag = ['-Xcompiler', '-fPIC', '-shared']\n        ext_modules.append(\n            CUDAExtension(name='permutation_search_cuda',\n                          sources=['apex/contrib/sparsity/permutation_search_kernels/CUDA_kernels/permutation_search_kernels.cu'],\n                          include_dirs=[os.path.join(this_dir, 'apex', 'contrib', 'sparsity', 'permutation_search_kernels', 'CUDA_kernels')],\n                          extra_compile_args={'cxx': ['-O3'] + version_dependent_macros,\n                                              'nvcc':['-O3'] + version_dependent_macros + cc_flag}))\n\nif \"--bnp\" in sys.argv:\n    sys.argv.remove(\"--bnp\")\n    raise_if_cuda_home_none(\"--bnp\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"bnp\",\n            sources=[\n                \"apex/contrib/csrc/groupbn/batch_norm.cu\",\n                \"apex/contrib/csrc/groupbn/ipc.cu\",\n                \"apex/contrib/csrc/groupbn/interface.cpp\",\n                \"apex/contrib/csrc/groupbn/batch_norm_add_relu.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-DCUDA_HAS_FP16=1\",\n                    \"-D__CUDA_NO_HALF_OPERATORS__\",\n                    \"-D__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"-D__CUDA_NO_HALF2_OPERATORS__\",\n                ] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--xentropy\" in sys.argv:\n    from datetime import datetime\n    sys.argv.remove(\"--xentropy\")\n    raise_if_cuda_home_none(\"--xentropy\")\n    xentropy_ver = datetime.today().strftime(\"%y.%m.%d\")\n    print(f\"`--xentropy` setting version of {xentropy_ver}\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"xentropy_cuda\",\n            sources=[\"apex/contrib/csrc/xentropy/interface.cpp\", \"apex/contrib/csrc/xentropy/xentropy_kernel.cu\"],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros + [f'-DXENTROPY_VER=\"{xentropy_ver}\"'],\n                \"nvcc\": [\"-O3\"] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--focal_loss\" in sys.argv:\n    sys.argv.remove(\"--focal_loss\")\n    raise_if_cuda_home_none(\"--focal_loss\")\n    ext_modules.append(\n        CUDAExtension(\n            name='focal_loss_cuda',\n            sources=[\n                'apex/contrib/csrc/focal_loss/focal_loss_cuda.cpp',\n                'apex/contrib/csrc/focal_loss/focal_loss_cuda_kernel.cu',\n            ],\n            include_dirs=[os.path.join(this_dir, 'csrc')],\n            extra_compile_args={\n                'cxx': ['-O3'] + version_dependent_macros,\n                'nvcc':['-O3', '--use_fast_math', '--ftz=false'] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--group_norm\" in sys.argv:\n    sys.argv.remove(\"--group_norm\")\n    raise_if_cuda_home_none(\"--group_norm\")\n\n    # CUDA group norm supports from SM70\n    arch_flags = []\n    for arch in [70, 75, 80, 86, 90]:\n        arch_flag = f\"-gencode=arch=compute_{arch},code=sm_{arch}\"\n        arch_flags.append(arch_flag)\n    arch_flag = f\"-gencode=arch=compute_90,code=compute_90\"\n    arch_flags.append(arch_flag)\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"group_norm_cuda\",\n            sources=[\n                \"apex/contrib/csrc/group_norm/group_norm_nhwc_op.cpp\",\n            ] + glob.glob(\"apex/contrib/csrc/group_norm/*.cu\"),\n            include_dirs=[os.path.join(this_dir, 'csrc')],\n            extra_compile_args={\n                \"cxx\": [\"-O3\", \"-std=c++17\"] + version_dependent_macros,\n                \"nvcc\": [\n                    \"-O3\", \"-std=c++17\", \"--use_fast_math\", \"--ftz=false\",\n                ] + arch_flags + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--index_mul_2d\" in sys.argv:\n    sys.argv.remove(\"--index_mul_2d\")\n    raise_if_cuda_home_none(\"--index_mul_2d\")\n    ext_modules.append(\n        CUDAExtension(\n            name='fused_index_mul_2d',\n            sources=[\n                'apex/contrib/csrc/index_mul_2d/index_mul_2d_cuda.cpp',\n                'apex/contrib/csrc/index_mul_2d/index_mul_2d_cuda_kernel.cu',\n            ],\n            include_dirs=[os.path.join(this_dir, 'csrc')],\n            extra_compile_args={\n                'cxx': ['-O3'] + version_dependent_macros,\n                'nvcc':['-O3', '--use_fast_math', '--ftz=false'] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--deprecated_fused_adam\" in sys.argv:\n    sys.argv.remove(\"--deprecated_fused_adam\")\n    raise_if_cuda_home_none(\"--deprecated_fused_adam\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fused_adam_cuda\",\n            sources=[\n                \"apex/contrib/csrc/optimizers/fused_adam_cuda.cpp\",\n                \"apex/contrib/csrc/optimizers/fused_adam_cuda_kernel.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\", \"--use_fast_math\"] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--deprecated_fused_lamb\" in sys.argv:\n    sys.argv.remove(\"--deprecated_fused_lamb\")\n    raise_if_cuda_home_none(\"--deprecated_fused_lamb\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fused_lamb_cuda\",\n            sources=[\n                \"apex/contrib/csrc/optimizers/fused_lamb_cuda.cpp\",\n                \"apex/contrib/csrc/optimizers/fused_lamb_cuda_kernel.cu\",\n                \"csrc/multi_tensor_l2norm_kernel.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\", \"--use_fast_math\"] + version_dependent_macros,\n            },\n        )\n    )\n\n# Check, if ATen/CUDAGeneratorImpl.h is found, otherwise use ATen/cuda/CUDAGeneratorImpl.h\n# See https://github.com/pytorch/pytorch/pull/70650\ngenerator_flag = []\ntorch_dir = torch.__path__[0]\nif os.path.exists(os.path.join(torch_dir, \"include\", \"ATen\", \"CUDAGeneratorImpl.h\")):\n    generator_flag = [\"-DOLD_GENERATOR_PATH\"]\n\nif \"--fast_layer_norm\" in sys.argv:\n    sys.argv.remove(\"--fast_layer_norm\")\n    raise_if_cuda_home_none(\"--fast_layer_norm\")\n\n    cc_flag = []\n    cc_flag.append(\"-gencode\")\n    cc_flag.append(\"arch=compute_70,code=sm_70\")\n\n    if bare_metal_version >= Version(\"11.0\"):\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_80,code=sm_80\")\n    if bare_metal_version >= Version(\"11.8\"):\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_90,code=sm_90\")\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fast_layer_norm\",\n            sources=[\n                \"apex/contrib/csrc/layer_norm/ln_api.cpp\",\n                \"apex/contrib/csrc/layer_norm/ln_fwd_cuda_kernel.cu\",\n                \"apex/contrib/csrc/layer_norm/ln_bwd_semi_cuda_kernel.cu\",\n            ],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"-U__CUDA_NO_BFLOAT16_OPERATORS__\",\n                    \"-U__CUDA_NO_BFLOAT16_CONVERSIONS__\",\n                    \"-U__CUDA_NO_BFLOAT162_OPERATORS__\",\n                    \"-U__CUDA_NO_BFLOAT162_CONVERSIONS__\",\n                    \"-I./apex/contrib/csrc/layer_norm/\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                    \"--use_fast_math\",\n                ] + version_dependent_macros + generator_flag + cc_flag,\n            },\n            include_dirs=[os.path.join(this_dir, \"apex/contrib/csrc/layer_norm\")],\n        )\n    )\n\nif \"--fmha\" in sys.argv:\n    sys.argv.remove(\"--fmha\")\n    raise_if_cuda_home_none(\"--fmha\")\n\n    if bare_metal_version < Version(\"11.0\"):\n        raise RuntimeError(\"--fmha only supported on sm_80 and sm_90 GPUs\")\n\n    cc_flag = []\n    cc_flag.append(\"-gencode\")\n    cc_flag.append(\"arch=compute_80,code=sm_80\")\n    if bare_metal_version >= Version(\"11.8\"):\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_90,code=sm_90\")\n\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fmhalib\",\n            sources=[\n                \"apex/contrib/csrc/fmha/fmha_api.cpp\",\n                \"apex/contrib/csrc/fmha/src/fmha_fill.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_noloop_reduce.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_fprop_fp16_128_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_fprop_fp16_256_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_fprop_fp16_384_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_fprop_fp16_512_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_dgrad_fp16_128_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_dgrad_fp16_256_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_dgrad_fp16_384_64_kernel.sm80.cu\",\n                \"apex/contrib/csrc/fmha/src/fmha_dgrad_fp16_512_64_kernel.sm80.cu\",\n            ],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                    \"--use_fast_math\",\n                ] + version_dependent_macros + generator_flag + cc_flag,\n            },\n            include_dirs=[\n                os.path.join(this_dir, \"apex/contrib/csrc\"),\n                os.path.join(this_dir, \"apex/contrib/csrc/fmha/src\"),\n            ],\n        )\n    )\n\n\nif \"--fast_multihead_attn\" in sys.argv:\n    sys.argv.remove(\"--fast_multihead_attn\")\n    raise_if_cuda_home_none(\"--fast_multihead_attn\")\n\n    cc_flag = []\n    cc_flag.append(\"-gencode\")\n    cc_flag.append(\"arch=compute_70,code=sm_70\")\n\n    if bare_metal_version >= Version(\"11.0\"):\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_80,code=sm_80\")\n    if bare_metal_version >= Version(\"11.1\"):\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_86,code=sm_86\")\n    if bare_metal_version >= Version(\"11.8\"):\n        cc_flag.append(\"-gencode\")\n        cc_flag.append(\"arch=compute_90,code=sm_90\")\n\n    subprocess.run([\"git\", \"submodule\", \"update\", \"--init\", \"apex/contrib/csrc/multihead_attn/cutlass\"])\n    ext_modules.append(\n        CUDAExtension(\n            name=\"fast_multihead_attn\",\n            sources=[\n                \"apex/contrib/csrc/multihead_attn/multihead_attn_frontend.cpp\",\n                \"apex/contrib/csrc/multihead_attn/additive_masked_softmax_dropout_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/masked_softmax_dropout_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/encdec_multihead_attn_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/encdec_multihead_attn_norm_add_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/self_multihead_attn_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/self_multihead_attn_bias_additive_mask_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/self_multihead_attn_bias_cuda.cu\",\n                \"apex/contrib/csrc/multihead_attn/self_multihead_attn_norm_add_cuda.cu\",\n            ],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag,\n                \"nvcc\": [\n                    \"-O3\",\n                    \"-U__CUDA_NO_HALF_OPERATORS__\",\n                    \"-U__CUDA_NO_HALF_CONVERSIONS__\",\n                    \"--expt-relaxed-constexpr\",\n                    \"--expt-extended-lambda\",\n                    \"--use_fast_math\",\n                ]\n                + version_dependent_macros\n                + generator_flag\n                + cc_flag,\n            },\n            include_dirs=[\n                os.path.join(this_dir, \"apex/contrib/csrc/multihead_attn/cutlass/include/\"),\n                os.path.join(this_dir, \"apex/contrib/csrc/multihead_attn/cutlass/tools/util/include\")\n            ],\n        )\n    )\n\nif \"--transducer\" in sys.argv:\n    sys.argv.remove(\"--transducer\")\n    raise_if_cuda_home_none(\"--transducer\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"transducer_joint_cuda\",\n            sources=[\n                \"apex/contrib/csrc/transducer/transducer_joint.cpp\",\n                \"apex/contrib/csrc/transducer/transducer_joint_kernel.cu\",\n            ],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag,\n                \"nvcc\": [\"-O3\"] + version_dependent_macros + generator_flag,\n            },\n            include_dirs=[os.path.join(this_dir, \"csrc\"), os.path.join(this_dir, \"apex/contrib/csrc/multihead_attn\")],\n        )\n    )\n    ext_modules.append(\n        CUDAExtension(\n            name=\"transducer_loss_cuda\",\n            sources=[\n                \"apex/contrib/csrc/transducer/transducer_loss.cpp\",\n                \"apex/contrib/csrc/transducer/transducer_loss_kernel.cu\",\n            ],\n            include_dirs=[os.path.join(this_dir, \"csrc\")],\n            extra_compile_args={\n                \"cxx\": [\"-O3\"] + version_dependent_macros,\n                \"nvcc\": [\"-O3\"] + version_dependent_macros,\n            },\n        )\n    )\n\nif \"--cudnn_gbn\" in sys.argv:\n    sys.argv.remove(\"--cudnn_gbn\")\n    raise_if_cuda_home_none(\"--cudnn_gbn\")\n    if check_cudnn_version_and_warn(\"--cudnn_gbn\", 8500):\n        subprocess.run([\"git\", \"submodule\", \"update\", \"--init\", \"apex/contrib/csrc/cudnn-frontend/\"])\n        ext_modules.append(\n            CUDAExtension(\n                name=\"cudnn_gbn_lib\",\n                sources=[\n                    \"apex/contrib/csrc/cudnn_gbn/norm_sample.cpp\",\n                    \"apex/contrib/csrc/cudnn_gbn/cudnn_gbn.cpp\",\n                ],\n                include_dirs=[os.path.join(this_dir, \"apex/contrib/csrc/cudnn-frontend/include\")],\n                extra_compile_args={\"cxx\": [\"-O3\", \"-g\"] + version_dependent_macros + generator_flag},\n            )\n        )\n\nif \"--peer_memory\" in sys.argv:\n    sys.argv.remove(\"--peer_memory\")\n    raise_if_cuda_home_none(\"--peer_memory\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"peer_memory_cuda\",\n            sources=[\n                \"apex/contrib/csrc/peer_memory/peer_memory_cuda.cu\",\n                \"apex/contrib/csrc/peer_memory/peer_memory.cpp\",\n            ],\n            extra_compile_args={\"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag},\n        )\n    )\n\n# NOTE: Requires NCCL >= 2.10.3\nif \"--nccl_p2p\" in sys.argv:\n    sys.argv.remove(\"--nccl_p2p\")\n    raise_if_cuda_home_none(\"--nccl_p2p\")\n    # Check NCCL version.\n    _nccl_version_getter = load(\n        name=\"_nccl_version_getter\",\n        sources=[\"apex/contrib/csrc/nccl_p2p/nccl_version.cpp\", \"apex/contrib/csrc/nccl_p2p/nccl_version_check.cu\"],\n\n    )\n    _available_nccl_version = _nccl_version_getter.get_nccl_version()\n    if _available_nccl_version >= (2, 10):\n        ext_modules.append(\n            CUDAExtension(\n                name=\"nccl_p2p_cuda\",\n                sources=[\n                    \"apex/contrib/csrc/nccl_p2p/nccl_p2p_cuda.cu\",\n                    \"apex/contrib/csrc/nccl_p2p/nccl_p2p.cpp\",\n                ],\n                extra_compile_args={\"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag},\n            )\n        )\n    else:\n        warnings.warn(\n            f\"Skip `--nccl_p2p` as it requires NCCL 2.10.3 or later, but {_available_nccl_version[0]}.{_available_nccl_version[1]}\"\n        )\n\n# note (mkozuki): Now `--fast_bottleneck` option (i.e. apex/contrib/bottleneck) depends on `--peer_memory` and `--nccl_p2p`.\nif \"--fast_bottleneck\" in sys.argv:\n    sys.argv.remove(\"--fast_bottleneck\")\n    raise_if_cuda_home_none(\"--fast_bottleneck\")\n    if check_cudnn_version_and_warn(\"--fast_bottleneck\", 8400):\n        subprocess.run([\"git\", \"submodule\", \"update\", \"--init\", \"apex/contrib/csrc/cudnn-frontend/\"])\n        ext_modules.append(\n            CUDAExtension(\n                name=\"fast_bottleneck\",\n                sources=[\"apex/contrib/csrc/bottleneck/bottleneck.cpp\"],\n                include_dirs=[os.path.join(this_dir, \"apex/contrib/csrc/cudnn-frontend/include\")],\n                extra_compile_args={\"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag},\n            )\n        )\n\n\nif \"--fused_conv_bias_relu\" in sys.argv:\n    sys.argv.remove(\"--fused_conv_bias_relu\")\n    raise_if_cuda_home_none(\"--fused_conv_bias_relu\")\n    if check_cudnn_version_and_warn(\"--fused_conv_bias_relu\", 8400):\n        subprocess.run([\"git\", \"submodule\", \"update\", \"--init\", \"apex/contrib/csrc/cudnn-frontend/\"])\n        ext_modules.append(\n            CUDAExtension(\n                name=\"fused_conv_bias_relu\",\n                sources=[\"apex/contrib/csrc/conv_bias_relu/conv_bias_relu.cpp\"],\n                include_dirs=[os.path.join(this_dir, \"apex/contrib/csrc/cudnn-frontend/include\")],\n                extra_compile_args={\"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag},\n            )\n        )\n\n\nif \"--nccl_allocator\" in sys.argv:\n    sys.argv.remove(\"--nccl_allocator\")\n    raise_if_cuda_home_none(\"--nccl_allocator\")\n    _nccl_version_getter = load(\n        name=\"_nccl_version_getter\",\n        sources=[\"apex/contrib/csrc/nccl_p2p/nccl_version.cpp\", \"apex/contrib/csrc/nccl_p2p/nccl_version_check.cu\"],\n    )\n    _available_nccl_version = _nccl_version_getter.get_nccl_version()\n    if _available_nccl_version >= (2, 19):\n        ext_modules.append(\n            CUDAExtension(\n                name=\"_apex_nccl_allocator\",\n                sources=[\n                    \"apex/contrib/csrc/nccl_allocator/NCCLAllocator.cpp\",\n                ],\n                include_dirs=[os.path.join(this_dir, \"apex/apex/contrib/csrc/nccl_allocator\")],\n                libraries=[\"nccl\"],\n                extra_compile_args={\"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag},\n            )\n        )\n    else:\n        warnings.warn(\n            f\"Skip `--nccl_allocator` as it requires NCCL 2.19 or later, but {_available_nccl_version[0]}.{_available_nccl_version[1]}\"\n        )\n\n\nif \"--gpu_direct_storage\" in sys.argv:\n    sys.argv.remove(\"--gpu_direct_storage\")\n    raise_if_cuda_home_none(\"--gpu_direct_storage\")\n    ext_modules.append(\n        CUDAExtension(\n            name=\"_apex_gpu_direct_storage\",\n            sources=[\"apex/contrib/csrc/gpu_direct_storage/gds.cpp\", \"apex/contrib/csrc/gpu_direct_storage/gds_pybind.cpp\"],\n            include_dirs=[os.path.join(this_dir, \"apex/contrib/csrc/gpu_direct_storage\")],\n            libraries=[\"cufile\"],\n            extra_compile_args={\"cxx\": [\"-O3\"] + version_dependent_macros + generator_flag},\n        )\n    )\n\n\nsetup(\n    name=\"apex\",\n    version=\"0.1\",\n    packages=find_packages(\n        exclude=(\"build\", \"csrc\", \"include\", \"tests\", \"dist\", \"docs\", \"tests\", \"examples\", \"apex.egg-info\",)\n    ),\n    install_requires=[\"packaging>20.6\"],\n    description=\"PyTorch Extensions written by NVIDIA\",\n    ext_modules=ext_modules,\n    cmdclass={\"build_ext\": BuildExtension} if ext_modules else {},\n    extras_require=extras,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}