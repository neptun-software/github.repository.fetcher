{
  "metadata": {
    "timestamp": 1736560790305,
    "page": 481,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "liuhuanyong/QASystemOnMedicalKG",
      "stars": 6499,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.896484375,
          "content": "# QABasedOnMedicaKnowledgeGraph\nself-implement of disease centered Medical graph from zero to full and sever as question answering base. 从无到有搭建一个以疾病为中心的一定规模医药领域知识图谱，并以该知识图谱完成自动问答与分析服务。\n\n# 项目介绍\n\n知识图谱是目前自然语言处理的一个热门方向，关于较全面的参考资料，可以查看我的ccks2018参会总结(https://github.com/liuhuanyong/CCKS2018Summary )。  \n与知识图谱相关的另一种形态，即事理图谱，本人在这方面也尝试性地积累了一些工作，可参考：(https://github.com/liuhuanyong/ComplexEventExtraction )  \n关于知识图谱概念性的介绍就不在此赘述。目前知识图谱在各个领域全面开花，如教育、医疗、司法、金融等。本项目立足医药领域，以垂直型医药网站为数据来源，以疾病为核心，构建起一个包含7类规模为4.4万的知识实体，11类规模约30万实体关系的知识图谱。\n本项目将包括以下两部分的内容：\n1) 基于垂直网站数据的医药知识图谱构建\n2) 基于医药知识图谱的自动问答\n\n# 项目最终效果\n话不多少，直接上图。以下两图是实际问答运行过程中的截图：\n![image](https://github.com/liuhuanyong/QABasedOnMedicalKnowledgeGraph/blob/master/img/chat1.png)\n\n![image](https://github.com/liuhuanyong/QABasedOnMedicalKnowledgeGraph/blob/master/img/chat2.png)\n\n# 项目运行方式\n1、配置要求：要求配置neo4j数据库及相应的python依赖包。neo4j数据库用户名密码记住，并修改相应文件。  \n2、知识图谱数据导入：python build_medicalgraph.py，导入的数据较多，估计需要几个小时。  \n3、启动问答：python chat_graph.py\n\n# 以下介绍详细方案\n# 一、医疗知识图谱构建\n# 1.1 业务驱动的知识图谱构建框架\n![image](https://github.com/liuhuanyong/QABasedOnMedicalKnowledgeGraph/blob/master/img/kg_route.png)\n\n# 1.2 脚本目录\nprepare_data/datasoider.py：网络资讯采集脚本  \nprepare_data/datasoider.py：网络资讯采集脚本  \nprepare_data/max_cut.py：基于词典的最大向前/向后切分脚本  \nbuild_medicalgraph.py：知识图谱入库脚本    　　\n\n# 1.3 医药领域知识图谱规模\n1.3.1 neo4j图数据库存储规模\n![image](https://github.com/liuhuanyong/QABasedOnMedicalKnowledgeGraph/blob/master/img/graph_summary.png)\n\n1.3.2 知识图谱实体类型\n\n| 实体类型 | 中文含义 | 实体数量 |举例 |\n| :--- | :---: | :---: | :--- |\n| Check | 诊断检查项目 | 3,353| 支气管造影;关节镜检查|\n| Department | 医疗科目 | 54 |  整形美容科;烧伤科|\n| Disease | 疾病 | 8,807 |  血栓闭塞性脉管炎;胸降主动脉动脉瘤|\n| Drug | 药品 | 3,828 |  京万红痔疮膏;布林佐胺滴眼液|\n| Food | 食物 | 4,870 |  番茄冲菜牛肉丸汤;竹笋炖羊肉|\n| Producer | 在售药品 | 17,201 |  通药制药青霉素V钾片;青阳醋酸地塞米松片|\n| Symptom | 疾病症状 | 5,998 |  乳腺组织肥厚;脑实质深部出血|\n| Total | 总计 | 44,111 | 约4.4万实体量级|\n\n\n1.3.3 知识图谱实体关系类型\n\n| 实体关系类型 | 中文含义 | 关系数量 | 举例|\n| :--- | :---: | :---: | :--- |\n| belongs_to | 属于 | 8,844| <妇科,属于,妇产科>|\n| common_drug | 疾病常用药品 | 14,649 | <阳强,常用,甲磺酸酚妥拉明分散片>|\n| do_eat |疾病宜吃食物 | 22,238| <胸椎骨折,宜吃,黑鱼>|\n| drugs_of |  药品在售药品 | 17,315| <青霉素V钾片,在售,通药制药青霉素V钾片>|\n| need_check | 疾病所需检查 | 39,422| <单侧肺气肿,所需检查,支气管造影>|\n| no_eat | 疾病忌吃食物 | 22,247| <唇病,忌吃,杏仁>|\n| recommand_drug | 疾病推荐药品 | 59,467 | <混合痔,推荐用药,京万红痔疮膏>|\n| recommand_eat | 疾病推荐食谱 | 40,221 | <鞘膜积液,推荐食谱,番茄冲菜牛肉丸汤>|\n| has_symptom | 疾病症状 | 5,998 |  <早期乳腺癌,疾病症状,乳腺组织肥厚>|\n| acompany_with | 疾病并发疾病 | 12,029 | <下肢交通静脉瓣膜关闭不全,并发疾病,血栓闭塞性脉管炎>|\n| Total | 总计 | 294,149 | 约30万关系量级|\n\n1.3.4 知识图谱属性类型\n\n| 属性类型 | 中文含义 | 举例 |\n| :--- | :---: | :---: |\n| name | 疾病名称 | 喘息样支气管炎 |\n| desc | 疾病简介 | 又称哮喘性支气管炎... |\n| cause | 疾病病因 | 常见的有合胞病毒等...|\n| prevent | 预防措施 | 注意家族与患儿自身过敏史... |\n| cure_lasttime | 治疗周期 | 6-12个月 |\n| cure_way | 治疗方式 | \"药物治疗\",\"支持性治疗\" |\n| cured_prob | 治愈概率 | 95% |\n| easy_get | 疾病易感人群 | 无特定的人群 |\n\n\n# 二、基于医疗知识图谱的自动问答\n# 2.1 技术架构\n![image](https://github.com/liuhuanyong/QABasedOnMedicalKnowledgeGraph/blob/master/img/qa_route.png)\n\n# 2.2 脚本结构\nquestion_classifier.py：问句类型分类脚本  \nquestion_parser.py：问句解析脚本  \nchatbot_graph.py：问答程序脚本  \n\n# 2.3　支持问答类型\n\n| 问句类型 | 中文含义 | 问句举例 |\n| :--- | :---: | :---: |\n| disease_symptom | 疾病症状| 乳腺癌的症状有哪些？ |\n| symptom_disease | 已知症状找可能疾病 | 最近老流鼻涕怎么办？ |\n| disease_cause | 疾病病因 | 为什么有的人会失眠？|\n| disease_acompany | 疾病的并发症 | 失眠有哪些并发症？ |\n| disease_not_food | 疾病需要忌口的食物 | 失眠的人不要吃啥？ |\n| disease_do_food | 疾病建议吃什么食物 | 耳鸣了吃点啥？ |\n| food_not_disease | 什么病最好不要吃某事物 | 哪些人最好不好吃蜂蜜？ |\n| food_do_disease | 食物对什么病有好处| 鹅肉有什么好处？ |\n| disease_drug | 啥病要吃啥药 | 肝病要吃啥药？ |\n| drug_disease | 药品能治啥病 | 板蓝根颗粒能治啥病？ |\n| disease_check | 疾病需要做什么检查 | 脑膜炎怎么才能查出来？|\n| check_disease |　检查能查什么病 | 全血细胞计数能查出啥来？ |\n| disease_prevent | 预防措施| 怎样才能预防肾虚？ |\n| disease_lasttime | 治疗周期 | 感冒要多久才能好？ |\n| disease_cureway | 治疗方式 | 高血压要怎么治？ |\n| disease_cureprob | 治愈概率 | 白血病能治好吗？ |\n| disease_easyget | 疾病易感人群 | 什么人容易得高血压？ |\n| disease_desc | 疾病描述 | 糖尿病 |\n\n# 问答结果展示\n\n        用户:乳腺癌的症状有哪些？\n        小勇: 乳腺癌的症状包括：乳腺癌的远处转移；胸痛；乳头溢液；乳头破碎；肝肿大；泌乳障碍；乳头内陷；乳房肿块；剧痛\n        ******************************************************************************************\n        用户:最近老流鼻涕怎么办？\n        小勇: 症状流鼻涕可能染上的疾病有：枯草热；副流行性感冒；急性上呼吸道感染；硫化氢中毒；小儿衣原体肺炎；风寒感冒；慢性额窦炎；鼻源性头痛；人禽流行性感冒；小儿流行性喘憋性肺炎；病毒性感冒；慢性鼻炎；风热犯肺；感冒；顿呛；小儿急性上呼吸道感染；嗜酸细胞增多性非变态反应性鼻炎；干酪性鼻窦炎；下呼吸道感染；麻疹\n        ******************************************************************************************\n        用户:为什么有的人会失眠？\n        小勇: 失眠可能的成因有：躯体疾病和服用药物可以影响睡眠，如消化不良，头痛，背痛，关节炎，心脏病，糖尿病，哮喘，鼻窦炎，溃疡病，或服用某些影响中枢神经的药物。\n        由于生活方式引起睡眠问题也很常见，如饮用咖啡或茶叶，晚间饮酒，睡前进食或晚饭较晚造成满腹食物尚未消化，大量吸烟，睡前剧烈的体力活动，睡前过度的精神活动，夜班工作，白天小睡，上床时间不规律，起床时间不规律。\n        可能的原因有压力很大，过度忧虑，紧张或焦虑，悲伤或抑郁，生气，容易出现睡眠问题。\n        吵闹的睡眠环境，睡眠环境过于明亮，污染，过度拥挤。\n        ******************************************************************************************\n        用户:失眠有哪些并发症？\n        小勇: 失眠的症状包括：心肾不交；神经性耳鸣；咽鼓管异常开放症；偏执狂；十二指肠胃反流及胆汁反流性胃炎；腋臭；黧黑斑；巨细胞动脉炎；Stargardt病；抑郁症；腔隙性脑梗死；甲状腺功能亢进伴发的精神障碍；紧张性头痛；胃下垂；心血虚；迷路震荡；口腔结核性溃疡；痰饮；游走性结节性脂膜炎；小儿脑震荡\n        ******************************************************************************************\n        用户:失眠的人不要吃啥？\n        小勇: 失眠忌食的食物包括有：油条；河蚌；猪油（板油）；淡菜(鲜)\n        ******************************************************************************************\n        用户:耳鸣了吃点啥？\n        小勇: 耳鸣宜食的食物包括有：南瓜子仁;鸡翅;芝麻;腰果\n        推荐食谱包括有：紫菜芙蓉汤;羊肉汤面;油豆腐油菜;紫菜鸡蛋莲草汤;乌药羊肉汤;可乐鸡翅;栗子鸡翅;冬菇油菜心\n        ******************************************************************************************\n        用户:哪些人最好不好吃蜂蜜？\n        小勇: 患有散发性脑炎伴发的精神障碍；情感性心境障碍；蝎螫伤；四肢淋巴水肿；农药中毒所致的精神障碍；肝错构瘤；细菌性肺炎；急性高原病；小儿颅后窝室管膜瘤；柯萨奇病毒疹；眼眶静脉性血管瘤；乙脑伴发的精神障碍；晚期产后出血；吸入性肺炎；腓总神经损伤；铍及其化合物引起的皮肤病；猝死型冠心病；彼得异常；过敏性急性小管间质性肾炎；小儿腹胀的人最好不要吃蜂蜜\n        ******************************************************************************************\n        用户:鹅肉有什么好处？\n        小勇: 患有子宫内膜厚；呼吸疾病；肛肠病；闭经；丧偶后适应性障碍；宫颈外翻；巨球蛋白血症；急性颌下腺炎；锥体外系损害；腺样体炎；咳嗽；错构瘤；牙科病；子宫内膜炎；闭锁综合征；结膜炎；恶性淋巴瘤；足外翻；神经炎；病理性近视的人建议多试试鹅肉\n        ******************************************************************************************\n        用户:肝病要吃啥药？\n        小勇: 肝病宜食的食物包括有：鹅肉;鸡肉;鸡肝;鸡腿\n        推荐食谱包括有：小米红糖粥;小米蛋奶粥;扁豆小米粥;黄豆小米粥;人参小米粥;小米粉粥;鲜菇小米粥;芝麻小米粥\n        肝病通常的使用的药品包括：恩替卡韦分散片；维生素C片；二十五味松石丸；拉米夫定胶囊；阿德福韦酯片\n        ******************************************************************************************\n        用户:板蓝根颗粒能治啥病？\n        小勇: 板蓝根颗粒主治的疾病有流行性腮腺炎；喉痹；喉炎；咽部异感症；急性单纯性咽炎；腮腺隙感染；过敏性咽炎；咽囊炎；急性鼻咽炎；喉水肿；慢性化脓性腮腺炎；慢性咽炎；急性喉炎；咽异感症；鼻咽炎；锁喉痈；小儿咽喉炎；喉返神经损伤；化脓性腮腺炎；喉血管瘤,可以试试\n        ******************************************************************************************\n        用户:脑膜炎怎么才能查出来？\n        小勇: 脑膜炎通常可以通过以下方式检查出来：脑脊液钠；尿常规；Fisher手指试验；颈项强直；脑脊液细菌培养；尿谷氨酰胺；脑脊液钾；脑脊液天门冬氨酸氨基转移酶；脑脊液病原体检查；硝酸盐还原试验\n        ******************************************************************************************\n        用户:怎样才能预防肾虚？\n        小勇: 肾虚可能的成因有：1、多因房劳过度，或少年频繁手淫。2、思虑忧郁，损伤心脾，则病及阳明冲脉。3、恐惧伤肾，恐则伤肾。4、肝主筋，阴器为宗筋之汇，若情志不遂，忧思郁怒，肝失疏泄条达，则宗筋所聚无能。5、湿热下注，宗筋弛纵。\n        肾虚是肾脏精气阴阳不足所产生的诸如精神疲乏、头晕耳鸣、健忘脱发、腰脊酸痛、遗精阳痿、男子不育、女子不孕、更年期综合征等多种病证的一个综合概念。关于肾虚形成的原因，可归结为两个方面，一为先天禀赋不足，二为后天因素引起。\n        从引起肾虚的先天因素来看，首先是先天禀赋薄弱。《灵枢.寿天刚柔》篇说：“人之生也，有刚有柔，有弱有强。”由于父母体弱多病，精血亏虚时怀孕;或酒后房事怀孕;或年过五十精气力量大减之时怀孕;或男女双方年龄不够，身体发育不完全结婚，也就是早婚时怀孕，或生育过多，精血过度耗损;或妊娠期中失于调养，胎气不足等等都可导致肾的精气亏虚成为肾虚证形成的重要原因;其次，如果肾藏精功能失常就会导致性功能异常，生殖功能下降，影响生殖能力，便会引起下一代形体虚衰，或先天畸形、痴呆、缺陷、男子出现精少不育、早泄，女子出现闭经不孕、小产、习惯性流产等等。\n        肾虚的预防措施包括：肾虚日常预防\n        在预防方面，因起病与恣情纵欲有关的，应清心寡欲，戒除手淫;如与全身衰弱、营养不良或身心过劳有关的，应适当增加营养或注意劳逸结合，节制性欲。\n        1、性生活要适度，不勉强，不放纵。\n        2、饮食方面：无力疲乏时多吃含铁、蛋白质的食物，如木耳、大枣、乌鸡等;消化不良者多喝酸奶，吃山楂;平日护肾要多吃韭菜、海参、人参、乌鸡、家鸽等。\n        3、经常进行腰部活动，这些运动可以健运命门，补肾纳气。还可多做一些刺激脚心的按摩，中医认为，脚心的涌泉穴是浊气下降的地方，经常按摩涌泉穴，可益精补肾、强身健体、防止早衰，并能舒肝明目，清喉定心，促进睡眠，增进食欲。\n        4、充足的睡眠也是恢复精气神的重要保障，工作再紧张，家里的烦心事再多，到了该睡觉的时候也要按时休息。\n        健康教育\n        1、过度苦寒、冰凉的食物易伤肾，如芦荟、苦瓜、雪糕、鹅肉、啤酒进食过多都伤肾，应该多食黑色素含量高和温补性中药如黑米黑豆等。\n        2、男性接触过多的洗涤剂也伤肾，家庭应少用洗涤剂清洗餐具及蔬果，以免洗涤剂残留物被过多摄入。\n        3、适当运动可延缓衰老，但强度不宜太大，应选能力所及的运动项目，以促进血液循环，可改善血淤、气损等情况。散步、慢跑、快步走，或在鹅卵石上赤足适当行走，都会促进血液循环，对肾虚有辅助治疗作用。\n        4、保持良好的作息习惯，尽量避免熬夜。\n        5、积极参加户外运动，放松心情。\n        6、不要给自己太大的压力，学会合理减压。\n        ******************************************************************************************\n        用户:感冒要多久才能好？\n        小勇: 感冒治疗可能持续的周期为：7-14天\n        ******************************************************************************************\n        用户:高血压要怎么治？\n        小勇: 高血压可以尝试如下治疗：药物治疗;手术治疗;支持性治疗\n        ******************************************************************************************\n        用户:白血病能治好吗？\n        小勇: 白血病治愈的概率为（仅供参考）：50%-70%\n        ******************************************************************************************\n        用户:什么人容易得高血压？\n        小勇: 高血压的易感人群包括：有高血压家族史，不良的生活习惯，缺乏运动的人群\n        ******************************************************************************************\n        用户:糖尿病\n        小勇: 糖尿病,熟悉一下：糖尿病是一种比较常见的内分泌代谢性疾病。该病发病原因主要是由于胰岛素分泌不足，以及胰升高血糖素不适当地分泌过多所引起。多见于40岁以上喜食甜食而肥胖的病人，城市多于农村，常有家族史，故与遗传有关。少数病人与病毒感染和自身免疫反应有关。主要表现为烦渴、多饮、多尿、多食、乏力、消瘦等症状。生命的常见病，伴发高血压、冠心病、高脂血症等，严重时危及生命。\n        中医学认为，肝主疏泄，关系人体接收机的升降与调畅，肝气郁滞则气机升降输布紊乱，肝失疏泄则血糖等精微物质不能随清阳之气输布于周身而郁滞于血中，出现高血糖或精微物质的输布紊乱，反见血糖升高，进一步导致血脂、蛋白等其它精微物质紊乱，引起其他合并症，治疗以疏肝调气为主，顺肝条达之性以恢复其生理功能，肝气条达，气机调畅，精微得以输布，糖被利用而血糖自然下降。\n        另外，因糖尿病的发生和饮食有关，饮食控制的好坏直接影响着治疗的效果。再就是配合运动，注意调摄情志，再适当的配合中药治疗会取得良好的治疗效果。 \n        ******************************************************************************************\n        用户:全血细胞计数能查出啥来\n        小勇: 通常可以通过全血细胞计数检查出来的疾病有成人类风湿性关节炎性巩膜炎；外阴-阴道-牙龈综合征；电击伤；老年收缩期高血压；小儿肝硬化；异常血红蛋白病；痴呆综合征；高血压病伴发的精神障碍；睾丸淋巴瘤；叶酸缺乏所致贫血；眼球内炎；不稳定血红蛋白病；类癌综合征；老年痴呆；急性淋巴管炎；宫颈妊娠；蚕食性角膜溃疡；低增生性急性白血病；交感性眼炎；原发性免疫缺陷病\n\n# 总结\n１、本项目完成了从无到有，以垂直网站为数据来源，构建起以疾病为中心的医疗知识图谱，实体规模4.4万，实体关系规模30万。并基于此，搭建起了一个可以回答18类问题的自动问答小系统,总共耗时3天。其中，数据采集与整理1天，知识图谱构建与入库0.5天，问答系统组件1.5天。总的来说，还是比较快速。      \n2、本项目以业务驱动，构建医疗知识图谱，知识schema设计基于所采集的结构化数据生成(对网页结构化数据进行xpath解析)。    \n3、本项目以neo4j作为存储，并基于传统规则的方式完成了知识问答，并最终以cypher查询语句作为问答搜索sql，支持了问答服务。  \n4、本项目可以快速部署，数据已经放在data/medical.json当中，本项目的数据，如侵犯相关单位权益，请联系我删除。本数据请勿商用，以免引起不必要的纠纷。在本项目中的部署上，可以遵循项目运行步骤，完成数据库搭建，并提供搜索服务。  \n5、本项目还有不足：关于疾病的起因、预防等，实际返回的是一大段文字，这里其实可以引入事件抽取的概念，进一步将原因结构化表示出来。这个可以后面进行尝试。    \n\nIf any question about the project or me ,see https://liuhuanyong.github.io/\n\n如有自然语言处理、知识图谱、事理图谱、社会计算、语言资源建设等问题或合作，可联系我：    \n1、我的github项目介绍：https://liuhuanyong.github.io  \n3、about me:刘焕勇，lhy_in_blcu@126.com.       \n4、我的公众号:老刘说NLP,扫码一键关注： \n\n![image](https://github.com/liuhuanyong/QABasedOnMedicalKnowledgeGraph/blob/master/img/wechat.jpg)\n\n"
        },
        {
          "name": "__pycache__",
          "type": "tree",
          "content": null
        },
        {
          "name": "answer_search.py",
          "type": "blob",
          "size": 6.2568359375,
          "content": "#!/usr/bin/env python3\n# coding: utf-8\n# File: answer_search.py\n# Author: lhy<lhy_in_blcu@126.com,https://huangyong.github.io>\n# Date: 18-10-5\n\nfrom py2neo import Graph\n\nclass AnswerSearcher:\n    def __init__(self):\n        self.g = Graph(\n            host=\"127.0.0.1\",\n            http_port=7474,\n            user=\"lhy\",\n            password=\"lhy123\")\n        self.num_limit = 20\n\n    '''执行cypher查询，并返回相应结果'''\n    def search_main(self, sqls):\n        final_answers = []\n        for sql_ in sqls:\n            question_type = sql_['question_type']\n            queries = sql_['sql']\n            answers = []\n            for query in queries:\n                ress = self.g.run(query).data()\n                answers += ress\n            final_answer = self.answer_prettify(question_type, answers)\n            if final_answer:\n                final_answers.append(final_answer)\n        return final_answers\n\n    '''根据对应的qustion_type，调用相应的回复模板'''\n    def answer_prettify(self, question_type, answers):\n        final_answer = []\n        if not answers:\n            return ''\n        if question_type == 'disease_symptom':\n            desc = [i['n.name'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}的症状包括：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'symptom_disease':\n            desc = [i['m.name'] for i in answers]\n            subject = answers[0]['n.name']\n            final_answer = '症状{0}可能染上的疾病有：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_cause':\n            desc = [i['m.cause'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}可能的成因有：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_prevent':\n            desc = [i['m.prevent'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}的预防措施包括：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_lasttime':\n            desc = [i['m.cure_lasttime'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}治疗可能持续的周期为：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_cureway':\n            desc = [';'.join(i['m.cure_way']) for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}可以尝试如下治疗：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_cureprob':\n            desc = [i['m.cured_prob'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}治愈的概率为（仅供参考）：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_easyget':\n            desc = [i['m.easy_get'] for i in answers]\n            subject = answers[0]['m.name']\n\n            final_answer = '{0}的易感人群包括：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_desc':\n            desc = [i['m.desc'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0},熟悉一下：{1}'.format(subject,  '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_acompany':\n            desc1 = [i['n.name'] for i in answers]\n            desc2 = [i['m.name'] for i in answers]\n            subject = answers[0]['m.name']\n            desc = [i for i in desc1 + desc2 if i != subject]\n            final_answer = '{0}的症状包括：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_not_food':\n            desc = [i['n.name'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}忌食的食物包括有：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_do_food':\n            do_desc = [i['n.name'] for i in answers if i['r.name'] == '宜吃']\n            recommand_desc = [i['n.name'] for i in answers if i['r.name'] == '推荐食谱']\n            subject = answers[0]['m.name']\n            final_answer = '{0}宜食的食物包括有：{1}\\n推荐食谱包括有：{2}'.format(subject, ';'.join(list(set(do_desc))[:self.num_limit]), ';'.join(list(set(recommand_desc))[:self.num_limit]))\n\n        elif question_type == 'food_not_disease':\n            desc = [i['m.name'] for i in answers]\n            subject = answers[0]['n.name']\n            final_answer = '患有{0}的人最好不要吃{1}'.format('；'.join(list(set(desc))[:self.num_limit]), subject)\n\n        elif question_type == 'food_do_disease':\n            desc = [i['m.name'] for i in answers]\n            subject = answers[0]['n.name']\n            final_answer = '患有{0}的人建议多试试{1}'.format('；'.join(list(set(desc))[:self.num_limit]), subject)\n\n        elif question_type == 'disease_drug':\n            desc = [i['n.name'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}通常的使用的药品包括：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'drug_disease':\n            desc = [i['m.name'] for i in answers]\n            subject = answers[0]['n.name']\n            final_answer = '{0}主治的疾病有{1},可以试试'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'disease_check':\n            desc = [i['n.name'] for i in answers]\n            subject = answers[0]['m.name']\n            final_answer = '{0}通常可以通过以下方式检查出来：{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        elif question_type == 'check_disease':\n            desc = [i['m.name'] for i in answers]\n            subject = answers[0]['n.name']\n            final_answer = '通常可以通过{0}检查出来的疾病有{1}'.format(subject, '；'.join(list(set(desc))[:self.num_limit]))\n\n        return final_answer\n\n\nif __name__ == '__main__':\n    searcher = AnswerSearcher()"
        },
        {
          "name": "build_medicalgraph.py",
          "type": "blob",
          "size": 11.3017578125,
          "content": "#!/usr/bin/env python3\n# coding: utf-8\n# File: MedicalGraph.py\n# Author: lhy<lhy_in_blcu@126.com,https://huangyong.github.io>\n# Date: 18-10-3\n\nimport os\nimport json\nfrom py2neo import Graph,Node\n\nclass MedicalGraph:\n    def __init__(self):\n        cur_dir = '/'.join(os.path.abspath(__file__).split('/')[:-1])\n        self.data_path = os.path.join(cur_dir, 'data/medical.json')\n        self.g = Graph(\n            host=\"127.0.0.1\",  # neo4j 搭载服务器的ip地址，ifconfig可获取到\n            http_port=7474,  # neo4j 服务器监听的端口号\n            user=\"lhy\",  # 数据库user name，如果没有更改过，应该是neo4j\n            password=\"lhy123\")\n\n    '''读取文件'''\n    def read_nodes(self):\n        # 共７类节点\n        drugs = [] # 药品\n        foods = [] #　食物\n        checks = [] # 检查\n        departments = [] #科室\n        producers = [] #药品大类\n        diseases = [] #疾病\n        symptoms = []#症状\n\n        disease_infos = []#疾病信息\n\n        # 构建节点实体关系\n        rels_department = [] #　科室－科室关系\n        rels_noteat = [] # 疾病－忌吃食物关系\n        rels_doeat = [] # 疾病－宜吃食物关系\n        rels_recommandeat = [] # 疾病－推荐吃食物关系\n        rels_commonddrug = [] # 疾病－通用药品关系\n        rels_recommanddrug = [] # 疾病－热门药品关系\n        rels_check = [] # 疾病－检查关系\n        rels_drug_producer = [] # 厂商－药物关系\n\n        rels_symptom = [] #疾病症状关系\n        rels_acompany = [] # 疾病并发关系\n        rels_category = [] #　疾病与科室之间的关系\n\n\n        count = 0\n        for data in open(self.data_path):\n            disease_dict = {}\n            count += 1\n            print(count)\n            data_json = json.loads(data)\n            disease = data_json['name']\n            disease_dict['name'] = disease\n            diseases.append(disease)\n            disease_dict['desc'] = ''\n            disease_dict['prevent'] = ''\n            disease_dict['cause'] = ''\n            disease_dict['easy_get'] = ''\n            disease_dict['cure_department'] = ''\n            disease_dict['cure_way'] = ''\n            disease_dict['cure_lasttime'] = ''\n            disease_dict['symptom'] = ''\n            disease_dict['cured_prob'] = ''\n\n            if 'symptom' in data_json:\n                symptoms += data_json['symptom']\n                for symptom in data_json['symptom']:\n                    rels_symptom.append([disease, symptom])\n\n            if 'acompany' in data_json:\n                for acompany in data_json['acompany']:\n                    rels_acompany.append([disease, acompany])\n\n            if 'desc' in data_json:\n                disease_dict['desc'] = data_json['desc']\n\n            if 'prevent' in data_json:\n                disease_dict['prevent'] = data_json['prevent']\n\n            if 'cause' in data_json:\n                disease_dict['cause'] = data_json['cause']\n\n            if 'get_prob' in data_json:\n                disease_dict['get_prob'] = data_json['get_prob']\n\n            if 'easy_get' in data_json:\n                disease_dict['easy_get'] = data_json['easy_get']\n\n            if 'cure_department' in data_json:\n                cure_department = data_json['cure_department']\n                if len(cure_department) == 1:\n                     rels_category.append([disease, cure_department[0]])\n                if len(cure_department) == 2:\n                    big = cure_department[0]\n                    small = cure_department[1]\n                    rels_department.append([small, big])\n                    rels_category.append([disease, small])\n\n                disease_dict['cure_department'] = cure_department\n                departments += cure_department\n\n            if 'cure_way' in data_json:\n                disease_dict['cure_way'] = data_json['cure_way']\n\n            if  'cure_lasttime' in data_json:\n                disease_dict['cure_lasttime'] = data_json['cure_lasttime']\n\n            if 'cured_prob' in data_json:\n                disease_dict['cured_prob'] = data_json['cured_prob']\n\n            if 'common_drug' in data_json:\n                common_drug = data_json['common_drug']\n                for drug in common_drug:\n                    rels_commonddrug.append([disease, drug])\n                drugs += common_drug\n\n            if 'recommand_drug' in data_json:\n                recommand_drug = data_json['recommand_drug']\n                drugs += recommand_drug\n                for drug in recommand_drug:\n                    rels_recommanddrug.append([disease, drug])\n\n            if 'not_eat' in data_json:\n                not_eat = data_json['not_eat']\n                for _not in not_eat:\n                    rels_noteat.append([disease, _not])\n\n                foods += not_eat\n                do_eat = data_json['do_eat']\n                for _do in do_eat:\n                    rels_doeat.append([disease, _do])\n\n                foods += do_eat\n                recommand_eat = data_json['recommand_eat']\n\n                for _recommand in recommand_eat:\n                    rels_recommandeat.append([disease, _recommand])\n                foods += recommand_eat\n\n            if 'check' in data_json:\n                check = data_json['check']\n                for _check in check:\n                    rels_check.append([disease, _check])\n                checks += check\n            if 'drug_detail' in data_json:\n                drug_detail = data_json['drug_detail']\n                producer = [i.split('(')[0] for i in drug_detail]\n                rels_drug_producer += [[i.split('(')[0], i.split('(')[-1].replace(')', '')] for i in drug_detail]\n                producers += producer\n            disease_infos.append(disease_dict)\n        return set(drugs), set(foods), set(checks), set(departments), set(producers), set(symptoms), set(diseases), disease_infos,\\\n               rels_check, rels_recommandeat, rels_noteat, rels_doeat, rels_department, rels_commonddrug, rels_drug_producer, rels_recommanddrug,\\\n               rels_symptom, rels_acompany, rels_category\n\n    '''建立节点'''\n    def create_node(self, label, nodes):\n        count = 0\n        for node_name in nodes:\n            node = Node(label, name=node_name)\n            self.g.create(node)\n            count += 1\n            print(count, len(nodes))\n        return\n\n    '''创建知识图谱中心疾病的节点'''\n    def create_diseases_nodes(self, disease_infos):\n        count = 0\n        for disease_dict in disease_infos:\n            node = Node(\"Disease\", name=disease_dict['name'], desc=disease_dict['desc'],\n                        prevent=disease_dict['prevent'] ,cause=disease_dict['cause'],\n                        easy_get=disease_dict['easy_get'],cure_lasttime=disease_dict['cure_lasttime'],\n                        cure_department=disease_dict['cure_department']\n                        ,cure_way=disease_dict['cure_way'] , cured_prob=disease_dict['cured_prob'])\n            self.g.create(node)\n            count += 1\n            print(count)\n        return\n\n    '''创建知识图谱实体节点类型schema'''\n    def create_graphnodes(self):\n        Drugs, Foods, Checks, Departments, Producers, Symptoms, Diseases, disease_infos,rels_check, rels_recommandeat, rels_noteat, rels_doeat, rels_department, rels_commonddrug, rels_drug_producer, rels_recommanddrug,rels_symptom, rels_acompany, rels_category = self.read_nodes()\n        self.create_diseases_nodes(disease_infos)\n        self.create_node('Drug', Drugs)\n        print(len(Drugs))\n        self.create_node('Food', Foods)\n        print(len(Foods))\n        self.create_node('Check', Checks)\n        print(len(Checks))\n        self.create_node('Department', Departments)\n        print(len(Departments))\n        self.create_node('Producer', Producers)\n        print(len(Producers))\n        self.create_node('Symptom', Symptoms)\n        return\n\n\n    '''创建实体关系边'''\n    def create_graphrels(self):\n        Drugs, Foods, Checks, Departments, Producers, Symptoms, Diseases, disease_infos, rels_check, rels_recommandeat, rels_noteat, rels_doeat, rels_department, rels_commonddrug, rels_drug_producer, rels_recommanddrug,rels_symptom, rels_acompany, rels_category = self.read_nodes()\n        self.create_relationship('Disease', 'Food', rels_recommandeat, 'recommand_eat', '推荐食谱')\n        self.create_relationship('Disease', 'Food', rels_noteat, 'no_eat', '忌吃')\n        self.create_relationship('Disease', 'Food', rels_doeat, 'do_eat', '宜吃')\n        self.create_relationship('Department', 'Department', rels_department, 'belongs_to', '属于')\n        self.create_relationship('Disease', 'Drug', rels_commonddrug, 'common_drug', '常用药品')\n        self.create_relationship('Producer', 'Drug', rels_drug_producer, 'drugs_of', '生产药品')\n        self.create_relationship('Disease', 'Drug', rels_recommanddrug, 'recommand_drug', '好评药品')\n        self.create_relationship('Disease', 'Check', rels_check, 'need_check', '诊断检查')\n        self.create_relationship('Disease', 'Symptom', rels_symptom, 'has_symptom', '症状')\n        self.create_relationship('Disease', 'Disease', rels_acompany, 'acompany_with', '并发症')\n        self.create_relationship('Disease', 'Department', rels_category, 'belongs_to', '所属科室')\n\n    '''创建实体关联边'''\n    def create_relationship(self, start_node, end_node, edges, rel_type, rel_name):\n        count = 0\n        # 去重处理\n        set_edges = []\n        for edge in edges:\n            set_edges.append('###'.join(edge))\n        all = len(set(set_edges))\n        for edge in set(set_edges):\n            edge = edge.split('###')\n            p = edge[0]\n            q = edge[1]\n            query = \"match(p:%s),(q:%s) where p.name='%s'and q.name='%s' create (p)-[rel:%s{name:'%s'}]->(q)\" % (\n                start_node, end_node, p, q, rel_type, rel_name)\n            try:\n                self.g.run(query)\n                count += 1\n                print(rel_type, count, all)\n            except Exception as e:\n                print(e)\n        return\n\n    '''导出数据'''\n    def export_data(self):\n        Drugs, Foods, Checks, Departments, Producers, Symptoms, Diseases, disease_infos, rels_check, rels_recommandeat, rels_noteat, rels_doeat, rels_department, rels_commonddrug, rels_drug_producer, rels_recommanddrug, rels_symptom, rels_acompany, rels_category = self.read_nodes()\n        f_drug = open('drug.txt', 'w+')\n        f_food = open('food.txt', 'w+')\n        f_check = open('check.txt', 'w+')\n        f_department = open('department.txt', 'w+')\n        f_producer = open('producer.txt', 'w+')\n        f_symptom = open('symptoms.txt', 'w+')\n        f_disease = open('disease.txt', 'w+')\n\n        f_drug.write('\\n'.join(list(Drugs)))\n        f_food.write('\\n'.join(list(Foods)))\n        f_check.write('\\n'.join(list(Checks)))\n        f_department.write('\\n'.join(list(Departments)))\n        f_producer.write('\\n'.join(list(Producers)))\n        f_symptom.write('\\n'.join(list(Symptoms)))\n        f_disease.write('\\n'.join(list(Diseases)))\n\n        f_drug.close()\n        f_food.close()\n        f_check.close()\n        f_department.close()\n        f_producer.close()\n        f_symptom.close()\n        f_disease.close()\n\n        return\n\n\n\nif __name__ == '__main__':\n    handler = MedicalGraph()\n    print(\"step1:导入图谱节点中\")\n    handler.create_graphnodes()\n    print(\"step2:导入图谱边中\")      \n    handler.create_graphrels()\n    \n"
        },
        {
          "name": "chatbot_graph.py",
          "type": "blob",
          "size": 1.12109375,
          "content": "#!/usr/bin/env python3\n# coding: utf-8\n# File: chatbot_graph.py\n# Author: lhy<lhy_in_blcu@126.com,https://huangyong.github.io>\n# Date: 18-10-4\n\nfrom question_classifier import *\nfrom question_parser import *\nfrom answer_search import *\n\n'''问答类'''\nclass ChatBotGraph:\n    def __init__(self):\n        self.classifier = QuestionClassifier()\n        self.parser = QuestionPaser()\n        self.searcher = AnswerSearcher()\n\n    def chat_main(self, sent):\n        answer = '您好，我是小勇医药智能助理，希望可以帮到您。如果没答上来，可联系https://liuhuanyong.github.io/。祝您身体棒棒！'\n        res_classify = self.classifier.classify(sent)\n        if not res_classify:\n            return answer\n        res_sql = self.parser.parser_main(res_classify)\n        final_answers = self.searcher.search_main(res_sql)\n        if not final_answers:\n            return answer\n        else:\n            return '\\n'.join(final_answers)\n\nif __name__ == '__main__':\n    handler = ChatBotGraph()\n    while 1:\n        question = input('用户:')\n        answer = handler.chat_main(question)\n        print('小勇:', answer)\n\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dict",
          "type": "tree",
          "content": null
        },
        {
          "name": "document",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "prepare_data",
          "type": "tree",
          "content": null
        },
        {
          "name": "question_classifier.py",
          "type": "blob",
          "size": 10.54296875,
          "content": "#!/usr/bin/env python3\n# coding: utf-8\n# File: question_classifier.py\n# Author: lhy<lhy_in_blcu@126.com,https://huangyong.github.io>\n# Date: 18-10-4\n\nimport os\nimport ahocorasick\n\nclass QuestionClassifier:\n    def __init__(self):\n        cur_dir = '/'.join(os.path.abspath(__file__).split('/')[:-1])\n        #　特征词路径\n        self.disease_path = os.path.join(cur_dir, 'dict/disease.txt')\n        self.department_path = os.path.join(cur_dir, 'dict/department.txt')\n        self.check_path = os.path.join(cur_dir, 'dict/check.txt')\n        self.drug_path = os.path.join(cur_dir, 'dict/drug.txt')\n        self.food_path = os.path.join(cur_dir, 'dict/food.txt')\n        self.producer_path = os.path.join(cur_dir, 'dict/producer.txt')\n        self.symptom_path = os.path.join(cur_dir, 'dict/symptom.txt')\n        self.deny_path = os.path.join(cur_dir, 'dict/deny.txt')\n        # 加载特征词\n        self.disease_wds= [i.strip() for i in open(self.disease_path) if i.strip()]\n        self.department_wds= [i.strip() for i in open(self.department_path) if i.strip()]\n        self.check_wds= [i.strip() for i in open(self.check_path) if i.strip()]\n        self.drug_wds= [i.strip() for i in open(self.drug_path) if i.strip()]\n        self.food_wds= [i.strip() for i in open(self.food_path) if i.strip()]\n        self.producer_wds= [i.strip() for i in open(self.producer_path) if i.strip()]\n        self.symptom_wds= [i.strip() for i in open(self.symptom_path) if i.strip()]\n        self.region_words = set(self.department_wds + self.disease_wds + self.check_wds + self.drug_wds + self.food_wds + self.producer_wds + self.symptom_wds)\n        self.deny_words = [i.strip() for i in open(self.deny_path) if i.strip()]\n        # 构造领域actree\n        self.region_tree = self.build_actree(list(self.region_words))\n        # 构建词典\n        self.wdtype_dict = self.build_wdtype_dict()\n        # 问句疑问词\n        self.symptom_qwds = ['症状', '表征', '现象', '症候', '表现']\n        self.cause_qwds = ['原因','成因', '为什么', '怎么会', '怎样才', '咋样才', '怎样会', '如何会', '为啥', '为何', '如何才会', '怎么才会', '会导致', '会造成']\n        self.acompany_qwds = ['并发症', '并发', '一起发生', '一并发生', '一起出现', '一并出现', '一同发生', '一同出现', '伴随发生', '伴随', '共现']\n        self.food_qwds = ['饮食', '饮用', '吃', '食', '伙食', '膳食', '喝', '菜' ,'忌口', '补品', '保健品', '食谱', '菜谱', '食用', '食物','补品']\n        self.drug_qwds = ['药', '药品', '用药', '胶囊', '口服液', '炎片']\n        self.prevent_qwds = ['预防', '防范', '抵制', '抵御', '防止','躲避','逃避','避开','免得','逃开','避开','避掉','躲开','躲掉','绕开',\n                             '怎样才能不', '怎么才能不', '咋样才能不','咋才能不', '如何才能不',\n                             '怎样才不', '怎么才不', '咋样才不','咋才不', '如何才不',\n                             '怎样才可以不', '怎么才可以不', '咋样才可以不', '咋才可以不', '如何可以不',\n                             '怎样才可不', '怎么才可不', '咋样才可不', '咋才可不', '如何可不']\n        self.lasttime_qwds = ['周期', '多久', '多长时间', '多少时间', '几天', '几年', '多少天', '多少小时', '几个小时', '多少年']\n        self.cureway_qwds = ['怎么治疗', '如何医治', '怎么医治', '怎么治', '怎么医', '如何治', '医治方式', '疗法', '咋治', '怎么办', '咋办', '咋治']\n        self.cureprob_qwds = ['多大概率能治好', '多大几率能治好', '治好希望大么', '几率', '几成', '比例', '可能性', '能治', '可治', '可以治', '可以医']\n        self.easyget_qwds = ['易感人群', '容易感染', '易发人群', '什么人', '哪些人', '感染', '染上', '得上']\n        self.check_qwds = ['检查', '检查项目', '查出', '检查', '测出', '试出']\n        self.belong_qwds = ['属于什么科', '属于', '什么科', '科室']\n        self.cure_qwds = ['治疗什么', '治啥', '治疗啥', '医治啥', '治愈啥', '主治啥', '主治什么', '有什么用', '有何用', '用处', '用途',\n                          '有什么好处', '有什么益处', '有何益处', '用来', '用来做啥', '用来作甚', '需要', '要']\n\n        print('model init finished ......')\n\n        return\n\n    '''分类主函数'''\n    def classify(self, question):\n        data = {}\n        medical_dict = self.check_medical(question)\n        if not medical_dict:\n            return {}\n        data['args'] = medical_dict\n        #收集问句当中所涉及到的实体类型\n        types = []\n        for type_ in medical_dict.values():\n            types += type_\n        question_type = 'others'\n\n        question_types = []\n\n        # 症状\n        if self.check_words(self.symptom_qwds, question) and ('disease' in types):\n            question_type = 'disease_symptom'\n            question_types.append(question_type)\n\n        if self.check_words(self.symptom_qwds, question) and ('symptom' in types):\n            question_type = 'symptom_disease'\n            question_types.append(question_type)\n\n        # 原因\n        if self.check_words(self.cause_qwds, question) and ('disease' in types):\n            question_type = 'disease_cause'\n            question_types.append(question_type)\n        # 并发症\n        if self.check_words(self.acompany_qwds, question) and ('disease' in types):\n            question_type = 'disease_acompany'\n            question_types.append(question_type)\n\n        # 推荐食品\n        if self.check_words(self.food_qwds, question) and 'disease' in types:\n            deny_status = self.check_words(self.deny_words, question)\n            if deny_status:\n                question_type = 'disease_not_food'\n            else:\n                question_type = 'disease_do_food'\n            question_types.append(question_type)\n\n        #已知食物找疾病\n        if self.check_words(self.food_qwds+self.cure_qwds, question) and 'food' in types:\n            deny_status = self.check_words(self.deny_words, question)\n            if deny_status:\n                question_type = 'food_not_disease'\n            else:\n                question_type = 'food_do_disease'\n            question_types.append(question_type)\n\n        # 推荐药品\n        if self.check_words(self.drug_qwds, question) and 'disease' in types:\n            question_type = 'disease_drug'\n            question_types.append(question_type)\n\n        # 药品治啥病\n        if self.check_words(self.cure_qwds, question) and 'drug' in types:\n            question_type = 'drug_disease'\n            question_types.append(question_type)\n\n        # 疾病接受检查项目\n        if self.check_words(self.check_qwds, question) and 'disease' in types:\n            question_type = 'disease_check'\n            question_types.append(question_type)\n\n        # 已知检查项目查相应疾病\n        if self.check_words(self.check_qwds+self.cure_qwds, question) and 'check' in types:\n            question_type = 'check_disease'\n            question_types.append(question_type)\n\n        #　症状防御\n        if self.check_words(self.prevent_qwds, question) and 'disease' in types:\n            question_type = 'disease_prevent'\n            question_types.append(question_type)\n\n        # 疾病医疗周期\n        if self.check_words(self.lasttime_qwds, question) and 'disease' in types:\n            question_type = 'disease_lasttime'\n            question_types.append(question_type)\n\n        # 疾病治疗方式\n        if self.check_words(self.cureway_qwds, question) and 'disease' in types:\n            question_type = 'disease_cureway'\n            question_types.append(question_type)\n\n        # 疾病治愈可能性\n        if self.check_words(self.cureprob_qwds, question) and 'disease' in types:\n            question_type = 'disease_cureprob'\n            question_types.append(question_type)\n\n        # 疾病易感染人群\n        if self.check_words(self.easyget_qwds, question) and 'disease' in types :\n            question_type = 'disease_easyget'\n            question_types.append(question_type)\n\n        # 若没有查到相关的外部查询信息，那么则将该疾病的描述信息返回\n        if question_types == [] and 'disease' in types:\n            question_types = ['disease_desc']\n\n        # 若没有查到相关的外部查询信息，那么则将该疾病的描述信息返回\n        if question_types == [] and 'symptom' in types:\n            question_types = ['symptom_disease']\n\n        # 将多个分类结果进行合并处理，组装成一个字典\n        data['question_types'] = question_types\n\n        return data\n\n    '''构造词对应的类型'''\n    def build_wdtype_dict(self):\n        wd_dict = dict()\n        for wd in self.region_words:\n            wd_dict[wd] = []\n            if wd in self.disease_wds:\n                wd_dict[wd].append('disease')\n            if wd in self.department_wds:\n                wd_dict[wd].append('department')\n            if wd in self.check_wds:\n                wd_dict[wd].append('check')\n            if wd in self.drug_wds:\n                wd_dict[wd].append('drug')\n            if wd in self.food_wds:\n                wd_dict[wd].append('food')\n            if wd in self.symptom_wds:\n                wd_dict[wd].append('symptom')\n            if wd in self.producer_wds:\n                wd_dict[wd].append('producer')\n        return wd_dict\n\n    '''构造actree，加速过滤'''\n    def build_actree(self, wordlist):\n        actree = ahocorasick.Automaton()\n        for index, word in enumerate(wordlist):\n            actree.add_word(word, (index, word))\n        actree.make_automaton()\n        return actree\n\n    '''问句过滤'''\n    def check_medical(self, question):\n        region_wds = []\n        for i in self.region_tree.iter(question):\n            wd = i[1][1]\n            region_wds.append(wd)\n        stop_wds = []\n        for wd1 in region_wds:\n            for wd2 in region_wds:\n                if wd1 in wd2 and wd1 != wd2:\n                    stop_wds.append(wd1)\n        final_wds = [i for i in region_wds if i not in stop_wds]\n        final_dict = {i:self.wdtype_dict.get(i) for i in final_wds}\n\n        return final_dict\n\n    '''基于特征词进行分类'''\n    def check_words(self, wds, sent):\n        for wd in wds:\n            if wd in sent:\n                return True\n        return False\n\n\nif __name__ == '__main__':\n    handler = QuestionClassifier()\n    while 1:\n        question = input('input an question:')\n        data = handler.classify(question)\n        print(data)"
        },
        {
          "name": "question_parser.py",
          "type": "blob",
          "size": 8.3935546875,
          "content": "#!/usr/bin/env python3\n# coding: utf-8\n# File: question_parser.py\n# Author: lhy<lhy_in_blcu@126.com,https://huangyong.github.io>\n# Date: 18-10-4\n\nclass QuestionPaser:\n\n    '''构建实体节点'''\n    def build_entitydict(self, args):\n        entity_dict = {}\n        for arg, types in args.items():\n            for type in types:\n                if type not in entity_dict:\n                    entity_dict[type] = [arg]\n                else:\n                    entity_dict[type].append(arg)\n\n        return entity_dict\n\n    '''解析主函数'''\n    def parser_main(self, res_classify):\n        args = res_classify['args']\n        entity_dict = self.build_entitydict(args)\n        question_types = res_classify['question_types']\n        sqls = []\n        for question_type in question_types:\n            sql_ = {}\n            sql_['question_type'] = question_type\n            sql = []\n            if question_type == 'disease_symptom':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'symptom_disease':\n                sql = self.sql_transfer(question_type, entity_dict.get('symptom'))\n\n            elif question_type == 'disease_cause':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_acompany':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_not_food':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_do_food':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'food_not_disease':\n                sql = self.sql_transfer(question_type, entity_dict.get('food'))\n\n            elif question_type == 'food_do_disease':\n                sql = self.sql_transfer(question_type, entity_dict.get('food'))\n\n            elif question_type == 'disease_drug':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'drug_disease':\n                sql = self.sql_transfer(question_type, entity_dict.get('drug'))\n\n            elif question_type == 'disease_check':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'check_disease':\n                sql = self.sql_transfer(question_type, entity_dict.get('check'))\n\n            elif question_type == 'disease_prevent':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_lasttime':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_cureway':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_cureprob':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_easyget':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            elif question_type == 'disease_desc':\n                sql = self.sql_transfer(question_type, entity_dict.get('disease'))\n\n            if sql:\n                sql_['sql'] = sql\n\n                sqls.append(sql_)\n\n        return sqls\n\n    '''针对不同的问题，分开进行处理'''\n    def sql_transfer(self, question_type, entities):\n        if not entities:\n            return []\n\n        # 查询语句\n        sql = []\n        # 查询疾病的原因\n        if question_type == 'disease_cause':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cause\".format(i) for i in entities]\n\n        # 查询疾病的防御措施\n        elif question_type == 'disease_prevent':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.prevent\".format(i) for i in entities]\n\n        # 查询疾病的持续时间\n        elif question_type == 'disease_lasttime':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cure_lasttime\".format(i) for i in entities]\n\n        # 查询疾病的治愈概率\n        elif question_type == 'disease_cureprob':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cured_prob\".format(i) for i in entities]\n\n        # 查询疾病的治疗方式\n        elif question_type == 'disease_cureway':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cure_way\".format(i) for i in entities]\n\n        # 查询疾病的易发人群\n        elif question_type == 'disease_easyget':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.easy_get\".format(i) for i in entities]\n\n        # 查询疾病的相关介绍\n        elif question_type == 'disease_desc':\n            sql = [\"MATCH (m:Disease) where m.name = '{0}' return m.name, m.desc\".format(i) for i in entities]\n\n        # 查询疾病有哪些症状\n        elif question_type == 'disease_symptom':\n            sql = [\"MATCH (m:Disease)-[r:has_symptom]->(n:Symptom) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n\n        # 查询症状会导致哪些疾病\n        elif question_type == 'symptom_disease':\n            sql = [\"MATCH (m:Disease)-[r:has_symptom]->(n:Symptom) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n\n        # 查询疾病的并发症\n        elif question_type == 'disease_acompany':\n            sql1 = [\"MATCH (m:Disease)-[r:acompany_with]->(n:Disease) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql2 = [\"MATCH (m:Disease)-[r:acompany_with]->(n:Disease) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql = sql1 + sql2\n        # 查询疾病的忌口\n        elif question_type == 'disease_not_food':\n            sql = [\"MATCH (m:Disease)-[r:no_eat]->(n:Food) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n\n        # 查询疾病建议吃的东西\n        elif question_type == 'disease_do_food':\n            sql1 = [\"MATCH (m:Disease)-[r:do_eat]->(n:Food) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql2 = [\"MATCH (m:Disease)-[r:recommand_eat]->(n:Food) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql = sql1 + sql2\n\n        # 已知忌口查疾病\n        elif question_type == 'food_not_disease':\n            sql = [\"MATCH (m:Disease)-[r:no_eat]->(n:Food) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n\n        # 已知推荐查疾病\n        elif question_type == 'food_do_disease':\n            sql1 = [\"MATCH (m:Disease)-[r:do_eat]->(n:Food) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql2 = [\"MATCH (m:Disease)-[r:recommand_eat]->(n:Food) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql = sql1 + sql2\n\n        # 查询疾病常用药品－药品别名记得扩充\n        elif question_type == 'disease_drug':\n            sql1 = [\"MATCH (m:Disease)-[r:common_drug]->(n:Drug) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql2 = [\"MATCH (m:Disease)-[r:recommand_drug]->(n:Drug) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql = sql1 + sql2\n\n        # 已知药品查询能够治疗的疾病\n        elif question_type == 'drug_disease':\n            sql1 = [\"MATCH (m:Disease)-[r:common_drug]->(n:Drug) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql2 = [\"MATCH (m:Disease)-[r:recommand_drug]->(n:Drug) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n            sql = sql1 + sql2\n        # 查询疾病应该进行的检查\n        elif question_type == 'disease_check':\n            sql = [\"MATCH (m:Disease)-[r:need_check]->(n:Check) where m.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n\n        # 已知检查查询疾病\n        elif question_type == 'check_disease':\n            sql = [\"MATCH (m:Disease)-[r:need_check]->(n:Check) where n.name = '{0}' return m.name, r.name, n.name\".format(i) for i in entities]\n\n        return sql\n\n\n\nif __name__ == '__main__':\n    handler = QuestionPaser()\n"
        },
        {
          "name": "wechat.jpg",
          "type": "blob",
          "size": 111.9609375,
          "content": null
        }
      ]
    }
  ]
}