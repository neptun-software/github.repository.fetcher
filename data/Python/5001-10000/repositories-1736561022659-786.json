{
  "metadata": {
    "timestamp": 1736561022659,
    "page": 786,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "prompt-toolkit/ptpython",
      "stars": 5250,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6591796875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 15.5556640625,
          "content": "CHANGELOG\n=========\n\n3.0.29: 2024-07-22\n------------------\n\nFixes:\n- Further improve performance of dictionary completions.\n\n\n3.0.28: 2024-07-22\n------------------\n\nNew features:\n- Custom 'exit' function to return from REPL that\n  * doesn't terminate `sys.stdin` when `exit` is called (important for\n    `embed()`).\n  * doesn't require to be called with parentheses.\n\nFixes:\n- Clean up signatures on control-c.\n\n\n3.0.27: 2024-05-27\n------------------\n\n- Limit number of completions to 5k (for performance).\n- Several typing fixes.\n\n\n3.0.26: 2024-02-06\n------------------\n\nFixes:\n- Handle `GeneratorExit` exception when leaving the paginator.\n\n\n3.0.25: 2023-12-14\n------------------\n\nFixes:\n- Fix handling of 'config file does not exist' when embedding ptpython.\n\n\n3.0.24: 2023-12-13\n------------------\n\nFixes:\n- Don't show \"Impossible to read config file\" warnings when no config file was\n  passed to `run_config()`.\n- IPython integration fixes:\n  * Fix top-level await in IPython.\n  * Fix IPython `DeprecationWarning`.\n- Output printing fixes:\n  * Paginate exceptions if pagination is enabled.\n  * Handle big outputs without running out of memory.\n- Asyncio REPL improvements:\n  * From now on, passing `--asyncio` is required to activate the asyncio-REPL.\n    This will ensure that an event loop is created at the start in which we can\n    run top-level await statements.\n  * Use `get_running_loop()` instead of `get_event_loop()`.\n  * Better handling of `SystemExit` and control-c in the async REPL.\n\n\n3.0.23: 2023-02-22\n------------------\n\nFixes:\n- Don't print exception messages twice for unhandled exceptions.\n- Added cursor shape support.\n\nBreaking changes:\n- Drop Python 3.6 support.\n\n\n3.0.22: 2022-12-06\n------------------\n\nNew features:\n- Improve rendering performance when there are many completions.\n\n\n3.0.21: 2022-11-25\n------------------\n\nNew features:\n- Make ptipython respect more config changes.\n  (See: https://github.com/prompt-toolkit/ptpython/pull/110 )\n- Improved performance of `DictionaryCompleter` for slow mappings.\n\nFixes:\n- Call `super()` in `PythonInputFilter`. This will prevent potentially breakage\n  with an upcoming prompt_toolkit change.\n  (See: https://github.com/prompt-toolkit/python-prompt-toolkit/pull/1690 )\n- Improved type annotations.\n- Added `py.typed` to the `package_data`.\n\n\n3.0.20: 2021-09-14\n------------------\n\nNew features:\n- For `DictionaryCompleter`: show parentheses after methods.\n\nFixes:\n- Don't crash when trying to complete broken mappings in `DictionaryCompleter`.\n- Don't crash when an older version of `black` is installed that is not\n  compatible.\n\n\n3.0.19: 2021-07-08\n------------------\n\nFixes:\n- Fix handling of `SystemExit` (fixes \"ValueError: I/O operation on closed\n  file\").\n- Allow usage of `await` in assignment expressions or for-loops.\n\n\n3.0.18: 2021-06-26\n------------------\n\nFixes:\n- Made \"black\" an optional dependency.\n\n\n3.0.17: 2021-03-22\n------------------\n\nFixes:\n- Fix leaking file descriptors due to not closing the asyncio event loop after\n  reading input in a thread.\n- Fix race condition during retrieval of signatures.\n\n\n3.0.16: 2021-02-11\n------------------\n\n(Commit 7f619e was missing in previous release.)\n\nFixes:\n- Several fixes to the completion code:\n  * Give dictionary completions priority over path completions.\n  * Always call non-fuzzy completer after fuzzy completer to prevent that some\n    completions were missed out if the fuzzy completer doesn't find them.\n\n\n3.0.15: 2021-02-11\n------------------\n\nNew features:\n- When pressing control-w, only delete characters until a punctuation.\n\nFixes:\n- Fix `AttributeError` during retrieval of signatures with type annotations.\n\n\n3.0.14: 2021-02-10\n------------------\n\nNew features:\n- Display of signature and completion drop down together.\n- If `DictionaryCompleter` is enabled, also retrieve signatures when Jedi\n  fails, using the same logic.\n- List function parameters first and private attributes at the end in the\n  completion menu.\n- Cleanup of the completion code.\n\nFixes:\n- Handle exceptions raised when `repr()` is called.\n- Fix leakage of `exc_info` from eval to exec call.\n- Fix handling of `KeyboardInterrupt` in REPL during evaluation of `__repr__`.\n- Fix style for signature toolbar.\n- Hide signature when sidebar is visible.\n\n\n3.0.13: 2021-01-26\n------------------\n\nNew features:\n- Added 'print all' option to pager.\n- Improve handling of indented code:\n  * Allow multiline input to be indented as a whole (we will unindent before\n    executing).\n  * Correctly visualize tabs (instead of ^I, which happens when pasted in\n    bracketed paste).\n\nFixes:\n- Fix line ending bug in pager.\n\n\n3.0.12: 2021-01-24\n------------------\n\nNew features:\n- Expose a `get_ptpython` function in the global namespace, to get programmatic\n  access to the REPL.\n- Expose `embed()` at the top level of the package. Make it possible to do\n  `from ptpython import embed`.\n\nFixes:\n- Properly handle exceptions when trying to access `__pt_repr__`.\n- Properly handle `SystemExit`.\n\n\n3.0.11: 2021-01-20\n------------------\n\nNew features:\n- Add support for top-level await.\n- Refactoring of event loop usage:\n\n  * The ptpython input UI will now run in a separate thread. This makes it\n    possible to properly embed ptpython in an asyncio application, without\n    having to deal with nested event loops (which asyncio does not support).\n\n  * The \"eval\" part doesn't anymore take place within a ptpython coroutine, so\n    it can spawn its own loop if needed. This also fixes `asyncio.run()` usage\n    in the REPL, which was broken before.\n\n- Added syntax highlighting and autocompletion for !-style system commands.\n\nFixes:\n- Remove unexpected additional line after output.\n- Fix system prompt. Accept !-style inputs again.\n- Don't execute PYTHONSTARTUP when -i flag was given.\n\n\n3.0.10: 2021-01-13\n------------------\n\nFixes:\n- Do dictionary completion on Sequence and Mapping objects (from\n  collections.abc). Note that dictionary completion is still turned off by\n  default.\n\n\n3.0.9: 2021-01-10\n-----------------\n\nNew features:\n- Allow replacing `PythonInput.completer` at runtime (useful for tools build on\n  top of ptpython).\n- Show REPL title in pager.\n\n\n3.0.8: 2021-01-05\n-----------------\n\nNew features:\n- Optional output formatting using Black.\n- Optional pager for displaying outputs that don't fit on the screen.\n- Added --light-bg and --dark-bg flags to automatically optimize the brightness\n  of the colors according to the terminal background.\n- Add `PTPYTHON_CONFIG_HOME` for explicitly setting the config directory.\n- Show completion suffixes (like '(' for functions).\n\nFixes:\n- Fix dictionary completion on Pandas objects.\n- Stop using deprecated Jedi functions.\n\n\n3.0.7: 2020-09-25\n-----------------\n\nNew features:\n- Option to show/hide private attributes during a completion\n- Added `insert_blank_line_after_input` option similar to\n  `insert_blank_line_after_output`.\n\nFixes:\n- Fixed some formatting issues of `__pt_repr__`.\n- Abbreviate completion meta information for dictionary completer if needed.\n\n\n3.0.6: 2020-09-23\n-----------------\n\nNew features:\n- (Experimental) support for `__pt_repr__` methods. If objects implement this\n  method, this will be used to print the result in the REPL instead of the\n  normal `__repr__`.\n- Added py.typed file, to enable type checking for applications that are\n  embedding ptpython.\n\n\n3.0.5: 2020-08-10\n-----------------\n\nFixes:\n- Handle bug in dictionary completion when numeric keys are used.\n\n\n3.0.4: 2020-08-10\n-----------------\n\nNew features:\n- Allow leading whitespace before single line expressions.\n- Show full syntax error in validator.\n- Added `vi_start_in_navigation_mode` and `vi_keep_last_used_mode` options.\n\nFixes:\n- Improved dictionary completion: handle keys that contain spaces and don't\n  recognize numbers as variable names.\n- Fix in exit confirmation.\n\n\n3.0.3: 2020-07-10\n-----------------\n\nFixes:\n- Sort attribute names for `DictionaryCompleter` and move underscored\n  attributes to the end.\n- Handle unhandled exceptions in `get_compiler_flags`.\n- Improved `run_async` code.\n- Fix --version parameter.\n\n\n3.0.2: 2020-04-14\n-----------------\n\nNew features:\n- Improved custom dictionary completion:\n    * Also complete list indexes.\n    * Also complete attributes after doing a dictionary lookup.\n    * Also complete iterators in a for-loop.\n- Added a 'title' option, so that applications embedding ptpython can set a\n  title in the status bar.\n\n\n3.0.1: 2020-02-24\n-----------------\n\n- Fix backwards-compatibility of the `run_config` function. (used by\n  django-extensions).\n- Fix input mode in status bar for block selection.\n\n\n3.0.0: 2020-01-29\n-----------------\n\nUpgrade to prompt_toolkit 3.0.\nRequires at least Python 3.6.\n\nNew features:\n- Uses XDG base directory specification.\n\n\n2.0.5: 2019-10-09\n-----------------\n\nNew features:\n- Added dictionary completer (off by default).\n- Added fuzzy completion (off by default).\n- Highlight keywords in completion dropdown menu.\n- Enable universal wheels.\n\nFixes:\n- Fixed embedding repl as asyncio coroutine.\n- Fixed patching stdout in embedded repl.\n- Fixed ResourceWarning in setup.py.\n\n\n2.0.4: 2018-10-30\n-----------------\n\n- Fixed ptipython.\n- Fixed config: setting of color depth.\n- Fixed auto-suggest key bindings.\n- Fixed Control-D key binding for exiting REPL when (confirm_exit=False).\n- Correctly focus/unfocus sidebar.\n- Fixed open_in_editor and suspend key bindings.\n\n\n2.0.3: 2018-10-12\n-----------------\n\n- Allow changing the min/max brightness.\n- Some changes for compatibility with the latest prompt_toolkit.\n\n2.0.2: 2018-09-30\n-----------------\n\nFixes:\n- Don't crash the history browser when there was no history.\n- Set last exception in the sys module, when an exception was raised.\n- Require prompt_toolkit 2.0.5.\n\n\n2.0.1: 2018-09-30\n-----------------\n\nUpgrade to prompt_toolkit 2.0.x.\n\n\n0.36: 2016-10-16\n----------------\n\nNew features:\n- Support for editing in Vi block mode. (Only enabled for\n  prompt_toolkit>=1.0.8.)\n\nFixes:\n- Handle two Jedi crashes. (GitHub ptpython issues #136 and #91.)\n\n0.35: 2016-07-19\n----------------\n\nFixes:\n- Fix in completer. Don't hang when pasting a long string with many\n  backslashes.\n- Fix Python2 bug: crash when filenames contain non-ascii characters.\n- Added `pt[i]pythonX` and `pt[i]pythonX.X` commands.\n- Compatibility with IPython 5.0.\n\n\n0.34: 2016-05-06\n---------------\n\nBugfix in ptipython: reset input buffer before every read in run().\n\n\n0.33: 2016-05-05\n---------------\n\nUpgrade to prompt_toolkit 1.0.0\n\nImprovements:\n- Unindent after typing 'pass'.\n- Make it configurable whether or not a blank line has to be inserted after the output.\n\n\n0.32: 2016-03-29\n---------------\n\nFixes:\n- Fixed bug when PYTHONSTARTUP was not found.\n- Support $PYTHONSTARTUP for ptipython.\n\n\n0.31: 2016-03-14\n---------------\n\nUpgrade to prompt_toolkit 0.60\n\n\n0.30: 2016-02-27\n---------------\n\nUpgrade to prompt_toolkit 0.59\n\n\n0.29: 2016-02-24\n----------------\n\nUpgrade to prompt_toolkit 0.58\n\nNew features:\n- Improved mouse support\n\n\n0.28: 2016-01-04\n----------------\n\nUpgrade to prompt_toolkit 0.57\n\n\n0.27: 2016-01-03\n----------------\n\nUpgrade to prompt_toolkit 0.56\n\n\n0.26: 2016-01-03\n----------------\n\nUpgrade to prompt_toolkit 0.55\n\nFixes:\n- Handle several bugs in Jedi.\n- Correctly handle sys.argv when pt(i)python is started with --interactive.\n- Support for 24bit true color.\n- Take compiler flags into account for ptipython.\n\n\n0.25: 2015-10-29\n----------------\n\nUpgrade to prompt_toolkit 0.54\n\nFixes:\n- Consider input multiline when there's a colon at the end of the line.\n- Handle bug in Jedi.\n- Enable search bindings in history browser.\n\n\n0.24: 2015-09-24\n----------------\n\nUpgrade to prompt_toolkit 0.52\n\n\n0.23: 2015-09-24\n----------------\n\nUpgrade to prompt_toolkit 0.51\n\nNew features:\n- Mouse support\n- Fish style auto suggestion.\n- Optionally disabling of line wraps.\n- Use Python3Lexer for Python 3.\n\n\n0.22: 2015-09-06\n----------------\n\nUpgrade to prompt_toolkit 0.50\n\nFixes:\n- Correctly accept file parameter in the print function of\n  asyncssh_repl.ReplSSHServerSession.\n- Create config directory if it doesn't exist yet (For IPython entry point.)\n\nNew features:\n- Implementation of history-selection: a tool to select lines from the history.\n- Make exit message configurable.\n- Improve start-up time: Lazy load completer grammar and lazy-import Jedi.\n- Make multi-column the default completion visualisation.\n- Implementation of a custom prompts. In_tokens and out_tokens can be\n  customized.\n- Made an option to show/hide highlighting for matching parenthesis.\n- Some styling improvements.\n\n\n0.21: 2015-08-08\n---------------\n\nUpgrade to prompt_toolkit 0.46\n\nFixes:\n- Correctly add current directory to sys.path.\n- Only show search highlighting when the search is the current input buffer.\n- Styling fix.\n\n\n0.20: 2015-07-30\n---------------\n\nUpgrade to prompt_toolkit 0.45\n\n\n0.19: 2015-07-30\n---------------\n\nUpgrade to prompt_toolkit 0.44\n\nNew features:\n- Added --interactive option for ptipython.\n- A few style improvements.\n\n\n0.18: 2015-07-15\n---------------\n\nFixes:\n- Python 2.6 compatibility.\n\n\n0.17: 2015-07-15\n---------------\n\nUpgrade to prompt_toolkit 0.43\n\nNew features:\n- Integration with Tk eventloop. (This makes turtle and other Tk stuff work\n  again from the REPL.)\n- Multi column completion visualisation.\n\n\n0.16: 2015-06-25\n---------------\n\nUpgrade to prompt_toolkit 0.42\n\nFixes:\n- Workaround for Jedi bug. (Signatures of functions with keyword-only arguments.)\n- Correctly show traceback on Python 3.\n- Better styling of the options sidebar.\n\nNew features:\n- Exit REPL when input starts with Control-Z.\n- Set terminal title.\n- Display help text in options sidebar.\n- Better colorscheme for Windows.\n\n\n0.15: 2015-06-20\n---------------\n\nUpgrade to prompt_toolkit 0.41\n\nFixes:\n- Correct tokens for IPython prompt.\n- Syntax fix in asyncssh_repl.\n\n\n0.14: 2015-06-16\n---------------\n\nFix:\n- Correct dependency for prompt_toolkit.\n\n0.13: 2015-06-15\n---------------\n\nNew features:\n- Upgrade to prompt_toolkit 0.40\n- Options sidebar.\n- Custom color schemes.\n- Syntax highlighting of the output.\n- Input validation can now be turned off.\n- Determine compiler flags dynamically. (Fixes importing unicode_literals).\n- Exit confirmation and dialog.\n- Autocompletion of IPython %cat command.\n- Correctly render tracebacks on Windows.\n\n0.12: 2015-06-04\n---------------\n\nUpgrade to prompt_toolkit 0.39\n\n0.11: 2015-05-31\n---------------\n\nNew features:\n- Upgrade to prompt-toolkit 0.38.\n- Upgrade to Jedi 0.9.0\n- Fixed default globals for repl (correct __name, __builtins__, etc...)\n- Display deprecation warnings in the REPL.\n- Added configuration support.\n- Added asyncio-ssh-python-embed example.\n\n\n0.10: 2015-05-11\n---------------\n\nUpgrade to prompt-toolkit 0.37.\n\n\n0.9: 2015-05-07\n---------------\n\nUpgrade to prompt-toolkit 0.35.\n\n\n0.8: 2015-04-26\n---------------\n\nFixed:\n- eval() doesn't run using unicode_literals anymore.\n- Upgrade to prompt-toolkit 0.34.\n\n\n0.7: 2015-04-25\n---------------\n\nFixed:\n- Upgrade to prompt-toolkit 0.33.\n\nNew features:\n- Added complete_while_typing option.\n\n\n0.6: 2015-04-22\n---------------\n\nFixed:\n- Upgrade to prompt-toolkit 0.32 which has many new features.\n\nChanges:\n- Removal of tab pages + clean up.\n- Pressing enter twice will now always automatically execute the input.\n- Improved Control-D key binding.\n- Hide docstring by default.\n\n\n0.5: 2015-01-30\n---------------\n\nFixed:\n- Tab autocompletion on first line.\n- Upgrade to prompt-toolkit 0.31\n\nNew features:\n- Simple autocompletion for IPython magics.\n\n0.4: 2015-01-26\n---------------\n\nFixed:\n- Upgrade to prompt-toolkit 0.30\n\n0.3: 2015-01-25\n---------------\n\nFixed:\n- Upgrade to prompt-toolkit 0.28\n\n0.2: 2015-01-25\n---------------\n\nMoved ptpython code from prompt-toolkit inside this repository.\n\n0.1: 2014-09-29\n---------------\n\nInitial ptpython version. (Source code was still in the\nprompt-toolkit repository itself.)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.462890625,
          "content": "Copyright (c) 2015-2023, Jonathan Slenders\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\n* Neither the name of the {organization} nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1015625,
          "content": "include *rst LICENSE CHANGELOG MANIFEST.in\nrecursive-include examples *.py\nprune examples/sample?/build\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 9.57421875,
          "content": "ptpython\n========\n\n|Build Status|  |PyPI|  |License|\n\n*A better Python REPL*\n\n::\n\n    pip install ptpython\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/example1.png\n\nPtpython is an advanced Python REPL. It should work on all\nPython versions from 2.6 up to 3.11 and work cross platform (Linux,\nBSD, OS X and Windows).\n\nNote: this version of ptpython requires at least Python 3.6. Install ptpython\n2.0.5 for older Python versions.\n\n\nInstallation\n************\n\nInstall it using pip:\n\n::\n\n    pip install ptpython\n\nStart it by typing ``ptpython``.\n\n\nFeatures\n********\n\n- Syntax highlighting.\n- Multiline editing (the up arrow works).\n- Autocompletion.\n- Mouse support. [1]\n- Support for color schemes.\n- Support for `bracketed paste <https://cirw.in/blog/bracketed-paste>`_ [2].\n- Both Vi and Emacs key bindings.\n- Support for double width (Chinese) characters.\n- ... and many other things.\n\n\n[1] Disabled by default. (Enable in the menu.)\n\n[2] If the terminal supports it (most terminals do), this allows pasting\nwithout going into paste mode. It will keep the indentation.\n\nCommand Line Options\n********************\n\nThe help menu shows basic command-line options.\n\n::\n\n    $ ptpython --help\n    usage: ptpython [-h] [--vi] [-i] [--light-bg] [--dark-bg] [--config-file CONFIG_FILE]\n                    [--history-file HISTORY_FILE] [-V]\n                    [args ...]\n\n    ptpython: Interactive Python shell.\n\n    positional arguments:\n      args                  Script and arguments\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --vi                  Enable Vi key bindings\n      -i, --interactive     Start interactive shell after executing this file.\n      --asyncio             Run an asyncio event loop to support top-level \"await\".\n      --light-bg            Run on a light background (use dark colors for text).\n      --dark-bg             Run on a dark background (use light colors for text).\n      --config-file CONFIG_FILE\n                            Location of configuration file.\n      --history-file HISTORY_FILE\n                            Location of history file.\n      -V, --version         show program's version number and exit\n\n    environment variables:\n      PTPYTHON_CONFIG_HOME: a configuration directory to use\n      PYTHONSTARTUP: file executed on interactive startup (no default)\n\n\n__pt_repr__: A nicer repr with colors\n*************************************\n\nWhen classes implement a ``__pt_repr__`` method, this will be used instead of\n``__repr__`` for printing. Any `prompt_toolkit \"formatted text\"\n<https://python-prompt-toolkit.readthedocs.io/en/master/pages/printing_text.html>`_\ncan be returned from here. In order to avoid writing a ``__repr__`` as well,\nthe ``ptpython.utils.ptrepr_to_repr`` decorator can be applied. For instance:\n\n.. code:: python\n\n    from ptpython.utils import ptrepr_to_repr\n    from prompt_toolkit.formatted_text import HTML\n\n    @ptrepr_to_repr\n    class MyClass:\n        def __pt_repr__(self):\n            return HTML('<yellow>Hello world!</yellow>')\n\nMore screenshots\n****************\n\nThe configuration menu:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ptpython-menu.png\n\nThe history page and its help:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ptpython-history-help.png\n\nAutocompletion:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/file-completion.png\n\n\nEmbedding the REPL\n******************\n\nEmbedding the REPL in any Python application is easy:\n\n.. code:: python\n\n    from ptpython.repl import embed\n    embed(globals(), locals())\n\nYou can make ptpython your default Python REPL by creating a `PYTHONSTARTUP file\n<https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file>`_ containing code\nlike this:\n\n.. code:: python\n\n   import sys\n   try:\n       from ptpython.repl import embed\n   except ImportError:\n       print(\"ptpython is not available: falling back to standard prompt\")\n   else:\n       sys.exit(embed(globals(), locals()))\n\nNote config file support currently only works when invoking `ptpython` directly.\nThat it, the config file will be ignored when embedding ptpython in an application.\n\nMultiline editing\n*****************\n\nMulti-line editing mode will automatically turn on when you press enter after a\ncolon.\n\nTo execute the input in multi-line mode, you can either press ``Alt+Enter``, or\n``Esc`` followed by ``Enter``. (If you want the first to work in the OS X\nterminal, you have to check the \"Use option as meta key\" checkbox in your\nterminal settings. For iTerm2, you have to check \"Left option acts as +Esc\" in\nthe options.)\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/multiline.png\n\n\nSyntax validation\n*****************\n\nBefore execution, ``ptpython`` will see whether the input is syntactically\ncorrect Python code. If not, it will show a warning, and move the cursor to the\nerror.\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/validation.png\n\n\nAsyncio REPL and top level await\n********************************\n\nIn order to get top-level ``await`` support, start ptpython as follows:\n\n.. code::\n\n   ptpython --asyncio\n\nThis will spawn an asyncio event loop and embed the async REPL in the event\nloop. After this, top-level await will work and statements like ``await\nasyncio.sleep(10)`` will execute.\n\n\nAdditional features\n*******************\n\nRunning system commands: Press ``Meta-!`` in Emacs mode or just ``!`` in Vi\nnavigation mode to see the \"Shell command\" prompt. There you can enter system\ncommands without leaving the REPL.\n\nSelecting text: Press ``Control+Space`` in Emacs mode or ``V`` (major V) in Vi\nnavigation mode.\n\n\nConfiguration\n*************\n\nIt is possible to create a ``config.py`` file to customize configuration.\nptpython will look in an appropriate platform-specific directory via `appdirs\n<https://pypi.org/project/appdirs/>`. See the ``appdirs`` documentation for the\nprecise location for your platform. A ``PTPYTHON_CONFIG_HOME`` environment\nvariable, if set, can also be used to explicitly override where configuration\nis looked for.\n\nHave a look at this example to see what is possible:\n`config.py <https://github.com/jonathanslenders/ptpython/blob/master/examples/ptpython_config/config.py>`_\n\nNote config file support currently only works when invoking `ptpython` directly.\nThat it, the config file will be ignored when embedding ptpython in an application.\n\n\nIPython support\n***************\n\nRun ``ptipython`` (prompt_toolkit - IPython), to get a nice interactive shell\nwith all the power that IPython has to offer, like magic functions and shell\nintegration. Make sure that IPython has been installed. (``pip install\nipython``)\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ipython.png\n\nThis is also available for embedding:\n\n.. code:: python\n\n    from ptpython.ipython import embed\n    embed(globals(), locals())\n\n\nDjango support\n**************\n\n`django-extensions <https://github.com/django-extensions/django-extensions>`_\nhas a ``shell_plus`` management command. When ``ptpython`` has been installed,\nit will by default use ``ptpython`` or ``ptipython``.\n\n\nPDB\n***\n\nThere is an experimental PDB replacement: `ptpdb\n<https://github.com/jonathanslenders/ptpdb>`_.\n\n\nWindows support\n***************\n\n``prompt_toolkit`` and ``ptpython`` works better on Linux and OS X than on\nWindows. Some things might not work, but it is usable:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/windows.png\n\nWindows terminal integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are using the `Windows Terminal <https://aka.ms/terminal>`_ and want to \nintegrate ``ptpython`` as a profile, go to *Settings -> Open JSON file* and add the\nfollowing profile under *profiles.list*:\n\n.. code-block:: JSON\n\n    {\n        \"commandline\": \"%SystemRoot%\\\\System32\\\\cmd.exe /k ptpython\",\n        \"guid\": \"{f91d49a3-741b-409c-8a15-c4360649121f}\",\n        \"hidden\": false,\n        \"icon\": \"https://upload.wikimedia.org/wikipedia/commons/e/e6/Python_Windows_interpreter_icon_2006%E2%80%932016_Tiny.png\",\n        \"name\": \"ptpython@cmd\"\n    }\n\nFAQ\n***\n\n**Q**: The ``Ctrl-S`` forward search doesn't work and freezes my terminal.\n\n**A**: Try to run ``stty -ixon`` in your terminal to disable flow control.\n\n**Q**: The ``Meta``-key doesn't work.\n\n**A**: For some terminals you have to enable the Alt-key to act as meta key, but you\ncan also type ``Escape`` before any key instead.\n\n\nAlternatives\n************\n\n- `BPython <http://bpython-interpreter.org/downloads.html>`_\n- `IPython <https://ipython.org/>`_\n\nIf you find another alternative, you can create an issue and we'll list it\nhere. If you find a nice feature somewhere that is missing in ``ptpython``,\nalso create a GitHub issue and maybe we'll implement it.\n\n\nSpecial thanks to\n*****************\n\n- `Pygments <http://pygments.org/>`_: Syntax highlighter.\n- `Jedi <http://jedi.jedidjah.ch/en/latest/>`_: Autocompletion library.\n- `wcwidth <https://github.com/jquast/wcwidth>`_: Determine columns needed for a wide characters.\n- `prompt_toolkit <http://github.com/jonathanslenders/python-prompt-toolkit>`_ for the interface.\n\n.. |Build Status| image:: https://github.com/prompt-toolkit/ptpython/actions/workflows/test.yaml/badge.svg\n    :target: https://github.com/prompt-toolkit/ptpython/actions/workflows/test.yaml\n\n.. |License| image:: https://img.shields.io/github/license/prompt-toolkit/ptpython.svg\n    :target: https://github.com/prompt-toolkit/ptpython/blob/master/LICENSE\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/ptpython.svg\n    :target: https://pypi.org/project/ptpython/\n    :alt: Latest Version\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.125,
          "content": "[mypy]\nignore_missing_imports = True\nno_implicit_optional = True\nplatform = win32\nstrict_equality = True\nstrict_optional = True\n"
        },
        {
          "name": "ptpython",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0380859375,
          "content": "[tool.ruff]\ntarget-version = \"py37\"\nlint.select = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"C\",  # flake8-comprehensions\n    \"T\",  # Print.\n    \"I\",  # isort\n    # \"B\",  # flake8-bugbear\n    \"UP\",  # pyupgrade\n    \"RUF100\",  # unused-noqa\n    \"Q\", # quotes\n]\nlint.ignore = [\n    \"E501\",  # Line too long, handled by black\n    \"C901\",  # Too complex\n    \"E722\",  # bare except.\n]\n\n\n[tool.ruff.lint.per-file-ignores]\n\"examples/*\" = [\"T201\"]  # Print allowed in examples.\n\"examples/ptpython_config/config.py\" = [\"F401\"]  # Unused imports in config.\n\"ptpython/entry_points/run_ptipython.py\" = [\"T201\", \"F401\"] # Print, import usage.\n\"ptpython/entry_points/run_ptpython.py\" = [\"T201\"]  # Print usage.\n\"ptpython/ipython.py\" = [\"T100\"]  # Import usage.\n\"ptpython/repl.py\" = [\"T201\"]  # Print usage.\n\"ptpython/printer.py\" = [\"T201\"]  # Print usage.\n\"tests/run_tests.py\" = [\"F401\"]  # Unused imports.\n\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"ptpython\"]\nknown-third-party = [\"prompt_toolkit\", \"pygments\", \"asyncssh\"]\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3466796875,
          "content": "[bdist_wheel]\nuniversal=1\n\n[flake8]\nexclude=__init__.py\nmax_line_length=150\nignore=\n  E114,\n  E116,\n  E117,\n  E121,\n  E122,\n  E123,\n  E125,\n  E126,\n  E127,\n  E128,\n  E131,\n  E171,\n  E203,\n  E211,\n  E221,\n  E227,\n  E231,\n  E241,\n  E251,\n  E301,\n  E402,\n  E501,\n  E701,\n  E702,\n  E704,\n  E731,\n  E741,\n  F401,\n  F403,\n  F405,\n  F811,\n  W503,\n  W504,\n  E722\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.4384765625,
          "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nfrom setuptools import find_packages, setup\n\nwith open(os.path.join(os.path.dirname(__file__), \"README.rst\")) as f:\n    long_description = f.read()\n\n\nsetup(\n    name=\"ptpython\",\n    author=\"Jonathan Slenders\",\n    version=\"3.0.29\",\n    url=\"https://github.com/prompt-toolkit/ptpython\",\n    description=\"Python REPL build on top of prompt_toolkit\",\n    long_description=long_description,\n    package_urls={\n        \"Changelog\": \"https://github.com/prompt-toolkit/ptpython/blob/master/CHANGELOG\",\n    },\n    project_urls={\n        \"Bug Tracker\": \"https://github.com/prompt-toolkit/ptpython/issues\",\n        \"Source Code\": \"https://github.com/prompt-toolkit/ptpython\",\n        \"Changelog\": \"https://github.com/prompt-toolkit/ptpython/blob/master/CHANGELOG\",\n    },\n    packages=find_packages(\".\"),\n    package_data={\"ptpython\": [\"py.typed\"]},\n    install_requires=[\n        \"appdirs\",\n        \"importlib_metadata;python_version<'3.8'\",\n        \"jedi>=0.16.0\",\n        # Use prompt_toolkit 3.0.43, because of `OneStyleAndTextTuple` import.\n        \"prompt_toolkit>=3.0.43,<3.1.0\",\n        \"pygments\",\n    ],\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"ptpython = ptpython.entry_points.run_ptpython:run\",\n            \"ptipython = ptpython.entry_points.run_ptipython:run\",\n            f\"ptpython{sys.version_info[0]} = ptpython.entry_points.run_ptpython:run\",\n            \"ptpython{}.{} = ptpython.entry_points.run_ptpython:run\".format(\n                *sys.version_info[:2]\n            ),\n            f\"ptipython{sys.version_info[0]} = ptpython.entry_points.run_ptipython:run\",\n            \"ptipython{}.{} = ptpython.entry_points.run_ptipython:run\".format(\n                *sys.version_info[:2]\n            ),\n        ]\n    },\n    extras_require={\n        \"ptipython\": [\"ipython\"],  # For ptipython, we need to have IPython\n        \"all\": [\"black\"],  # Black not always possible on PyPy\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}