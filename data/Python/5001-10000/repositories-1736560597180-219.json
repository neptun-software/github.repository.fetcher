{
  "metadata": {
    "timestamp": 1736560597180,
    "page": 219,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "houtianze/bypy",
      "stars": 8023,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.30078125,
          "content": "# EditorConfig: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = tab\nindent_size = tab\n\n# Set default charset\n[*.py]\ncharset = utf-8\ntab_width = 4\n\n[*.json]\ntab_width = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.59375,
          "content": "#backup file\n*.*~\n\n*.py[cod]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n__pycache__\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n### personal\n# setuptools cache\n.eggs\n*.swp\n## PyCharm\n#.idea/\n#.idea/workspace.xml\n#*.rst\n#\n\n.metals/\n.idea/\n\n**/.DS_Store\nbypy/test/**/*.bin\nbypy/test/downdir/\nbypy/test/sharedir/\nbypy/test/configdir/bypy.setting.json\nbypy/test/configdir/bypy.hashcache.json\n.vscode/tags\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.61328125,
          "content": "language: python\n#sudo: false\nsudo: false\npython:\n  - \"2.7\"\n  - \"3.3\"\n#  - \"3.5\"\n# command to install dependencies,\n# e.g. pip install -r requirements.txt --use-mirrors\naddons:\n  apt:\n    packages:\n    - aria2\ninstall:\n - pip install -r requirements.txt\n - pip install pyflakes\n - pip install coverage\n - pip install coveralls\n# command to run tests, e.g. python setup.py test\nscript:\n - pyflakes bypy\n - python -m coverage run --include \"bypy*\" -m bypy.test\n# - python -m coverage run -m bypy\nnotifications:\n  email:\n    on_success: change # default: change\n    on_failure: always # default: always\nafter_success:\n - coveralls\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.080078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.6923828125,
          "content": "# Contributing Guideline\n\nFirst of all, thank you very much for submitting codes / pull requests to this little project. :smile:\n\nI want the whole project to be licensed under the permissive **MIT license**, so that anybody can use it pretty much anyway they want. So by submitting codes / changes to this project, you agree to license all of them under the **MIT license** to this project.\n\n--------\n\n首先，非常感谢你对这个小工具提交的代码/改动。 :smile:\n\n我希望整个项目都是使用**MIT授权协议**的，好让每个人使用的时候几乎不受任何限制。所以通过向这个项目提交代码/改动，你同意将它们全部用**MIT协议**授权给这个项目。\n\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 4.9248046875,
          "content": "### Version History:\n\n- 1.8.5: Workaround Baidu returning 200 for invalid/expired `access_token` so that `refresh_token()` continues to work\n- 1.8.4: Fix packing error (missing 'auth.json')\n- 1.8.3: Fix upload getting 31023 - 'Param Error'\n- 1.8.2: Remove invalid GPL text\n- 1.8.1: Fix multiprocess (by changing all `__foo()` to `_foo()`)\n- 1.8: No longer server auth\n- 1.7.14: Fix issue #612: Can't download file when a directory has more than 1000 items\n- 1.7.13: Correct the Aliyun auth server address\n- 1.7.12: Fix deps in setup.py\n- 1.7.11: Fix jsonload() bug introduced in the previous commit\n- 1.7.10: Make sure progress json loading error handling works in both Json 2 and 3\n- 1.7.9: Fix multiprocess file writing\n- 1.7.8: Fix package reading\n- 1.7.7: Enable local auth using env vars\n- 1.7.6: Fix refresh_token\n- 1.7.5: Restore recursive directory walk\n- 1.7.4: Screwed up refresh_token\n- 1.7.3: Make `list` able to handle more than 1000 items\n- 1.7.2: Fix release.sh\n- 1.7.1: Fix upgrading in Python2 (unicode file name support seems to be broken)\n- 1.7.0: Follow Baidu's encrypted MD5 algorithm\n- 1.6.11: Revert the previous change - Baidu PCS's behavior is wrong and makes no sense\n- 1.6.10: Fix MD5 comparison (thanks to @shenchucheng)\n- 1.6.9: Make auth server list dynamic\n- 1.6.8: Fix 1000 items limit for downloading\n- 1.6.7: Handle update check network exceptions\n- 1.6.6: Let it cry when dies, so we can have some trace\n- 1.6.5: Fix `KeyError: u'md5'` in remote directory walking\n- 1.6.4: Fix `--move` argument causing exception\n- 1.6.3: Change default timeout to 5 minutes\n- 1.6.2: Properly handle (treat it as no error) error_code 31061 (file already exists) from PCS\n- 1.6.1: Ensure cache loading/saving failures won't affect normal operations; Fix the bug that clean up code not called on exit\n- 1.6.0: Fix 1000 items limit for remote directory listing\n- 1.5.13: Fix multiprocess upload/syncup missing some files\n- 1.5.12: Add one more heroku server; Workaround \"ValueError: unknown locale: UTF-8\" on macOS (by xslidian)\n- 1.5.11: Fix typo near version string\n- 1.5.10: Print the error code if the action failed\n- 1.5.9: Migrate the OpenShift auth server\n- 1.5.8: Add `--move` flag to delete source files/directories on successfull transfers\n- 1.5.7: Reduce multiprocess timeout to 49 days, to accommodate Python 3 on Windows\n- 1.5.6: Downloading using downloader also retries\n- 1.5.5: Minor: Improve 'multiprocess' installation prompts\n- 1.5.4: Print instructions on how to fix 'multiprocess' errors\n- 1.5.3: Change to streaming upload\n- 1.5.2: Defuse the circular import bomb brought in the previous version...\n- 1.5.1: Improve multiprocess (and fix filter() for Python3)\n- 1.5.0: Multi-Process for directory download / upload / sync up/down\n\n- 1.4.4: Aria2 download works even file names contain single quote (')\n- 1.4.3: Fix __server_auth()\n- 1.4.2: Add bypy version in getting and refresshing token requests for finer control\n- 1.4.1: Fix a severe bug in token refreshing\n- 1.4.0: Correct Refresh server list; Add in update check\n\n- 1.3.9: Add in queue for capturing JSONs returned from PCS\n- 1.3.8: Don't output Auth Server failures if no `-d` specified\n- 1.3.7: Allow passing leading dash arguments to downloader\n- 1.3.6: Fix downdir downloads to a wrong directory structure\n- 1.3.5: Fix aria2 unable to resume download\n- 1.3.4: Add --select-fastest-mirror, --config-dir command line arguments; Switch to wheel dist format\n- 1.3.3: Fix the upload failure when slices expired\n- 1.3.2: Enable SSL check by default now\n- 1.3.1: Fix setup.py failures\n- 1.3.0: Major change: Make bypy a real Python package\n\n- 1.2.22: Fix \"TypeError: b'xxxxxx' is not JSON serializable\" for cache\n- 1.2.21: Support aria2 downloading resuming (disable preallocation)\n- 1.2.20: Fix an error in upload resuming; Add in retries for aria2\n- 1.2.19: Add in aria2 download support\n- 1.2.18: Add in upload resuming using slices; Fix Unicode issues with py2_jsondump(); Fix the pypi setup package\n- 1.2.17: Fix UnicodeEncodeError on redirect; Add in retry on urllib3 TimeOutError\n- 1.2.16: Add in proxy prompts\n- 1.2.15: Fix a severe bug (accidental directory deletion) in `download` command intoduced in 1.2.14\n- 1.2.14: Add in `download` command\n- 1.2.13: Remove argcomplete; Improve encoding handling prompting\n- 1.2.12: Add in (optional) argcomplete\n- 1.2.11: Fix Exception in error dump introduced in 1.2.10\n- 1.2.10: Handle (32, 'EPIPE'); Warn LOUDLY on encoding failures; Remove 'is_revision'\n- 1.2.9: Fix formatex() Syntax Error; Handle (110, 'ETIMEDOUT')\n- 1.2.8: Fix a Syntax Error; Handle {'error_code': 0, 'error_msg': 'no error'}\n- 1.2.7: Fix Hash Cache JSON saving (need to use string for Hashes)\n- 1.2.6: Fix Hash Cache JSON dumping (`Unicode` again)\n- 1.2.5: Add in offline (cloud) download; Fix stack printing\n- 1.2.4: Fix command line parsing for Python 3 (`Unicode` by default)\n- 1.2.3: Fix GUI for Python 3\n- 1.2.2: Fix division for Python 3\n- 1.2.1: Make it `universal` (Python 2 & 3 compatible)\n- 1.0.20: Initial release\n\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 5.244140625,
          "content": "Version History:\n~~~~~~~~~~~~~~~~\n\n-  1.8.5: Workaround Baidu returning 200 for invalid/expired\n   ``access_token`` so that ``refresh_token()`` continues to work\n\n-  1.8.4: Fix packing error (missing ‘auth.json’)\n\n-  1.8.3: Fix upload getting 31023 - ‘Param Error’\n\n-  1.8.2: Remove invalid GPL text\n\n-  1.8.1: Fix multiprocess (by changing all ``__foo()`` to ``_foo()``)\n\n-  1.8: No longer server auth\n\n-  1.7.14: Fix issue #612: Can’t download file when a directory has more\n   than 1000 items\n\n-  1.7.13: Correct the Aliyun auth server address\n\n-  1.7.12: Fix deps in setup.py\n\n-  1.7.11: Fix jsonload() bug introduced in the previous commit\n\n-  1.7.10: Make sure progress json loading error handling works in both\n   Json 2 and 3\n\n-  1.7.9: Fix multiprocess file writing\n\n-  1.7.8: Fix package reading\n\n-  1.7.7: Enable local auth using env vars\n\n-  1.7.6: Fix refresh_token\n\n-  1.7.5: Restore recursive directory walk\n\n-  1.7.4: Screwed up refresh_token\n\n-  1.7.3: Make ``list`` able to handle more than 1000 items\n\n-  1.7.2: Fix release.sh\n\n-  1.7.1: Fix upgrading in Python2 (unicode file name support seems to\n   be broken)\n\n-  1.7.0: Follow Baidu’s encrypted MD5 algorithm\n\n-  1.6.11: Revert the previous change - Baidu PCS’s behavior is wrong\n   and makes no sense\n\n-  1.6.10: Fix MD5 comparison (thanks to @shenchucheng)\n\n-  1.6.9: Make auth server list dynamic\n\n-  1.6.8: Fix 1000 items limit for downloading\n\n-  1.6.7: Handle update check network exceptions\n\n-  1.6.6: Let it cry when dies, so we can have some trace\n\n-  1.6.5: Fix ``KeyError: u'md5'`` in remote directory walking\n\n-  1.6.4: Fix ``--move`` argument causing exception\n\n-  1.6.3: Change default timeout to 5 minutes\n\n-  1.6.2: Properly handle (treat it as no error) error_code 31061 (file\n   already exists) from PCS\n\n-  1.6.1: Ensure cache loading/saving failures won’t affect normal\n   operations; Fix the bug that clean up code not called on exit\n\n-  1.6.0: Fix 1000 items limit for remote directory listing\n\n-  1.5.13: Fix multiprocess upload/syncup missing some files\n\n-  1.5.12: Add one more heroku server; Workaround “ValueError: unknown\n   locale: UTF-8” on macOS (by xslidian)\n\n-  1.5.11: Fix typo near version string\n\n-  1.5.10: Print the error code if the action failed\n\n-  1.5.9: Migrate the OpenShift auth server\n\n-  1.5.8: Add ``--move`` flag to delete source files/directories on\n   successfull transfers\n\n-  1.5.7: Reduce multiprocess timeout to 49 days, to accommodate Python\n   3 on Windows\n\n-  1.5.6: Downloading using downloader also retries\n\n-  1.5.5: Minor: Improve ‘multiprocess’ installation prompts\n\n-  1.5.4: Print instructions on how to fix ‘multiprocess’ errors\n\n-  1.5.3: Change to streaming upload\n\n-  1.5.2: Defuse the circular import bomb brought in the previous\n   version…\n\n-  1.5.1: Improve multiprocess (and fix filter() for Python3)\n\n-  1.5.0: Multi-Process for directory download / upload / sync up/down\n\n-  1.4.4: Aria2 download works even file names contain single quote (’)\n\n-  1.4.3: Fix \\__server_auth()\n\n-  1.4.2: Add bypy version in getting and refresshing token requests for\n   finer control\n\n-  1.4.1: Fix a severe bug in token refreshing\n\n-  1.4.0: Correct Refresh server list; Add in update check\n\n-  1.3.9: Add in queue for capturing JSONs returned from PCS\n\n-  1.3.8: Don’t output Auth Server failures if no ``-d`` specified\n\n-  1.3.7: Allow passing leading dash arguments to downloader\n\n-  1.3.6: Fix downdir downloads to a wrong directory structure\n\n-  1.3.5: Fix aria2 unable to resume download\n\n-  1.3.4: Add –select-fastest-mirror, –config-dir command line\n   arguments; Switch to wheel dist format\n\n-  1.3.3: Fix the upload failure when slices expired\n\n-  1.3.2: Enable SSL check by default now\n\n-  1.3.1: Fix setup.py failures\n\n-  1.3.0: Major change: Make bypy a real Python package\n\n-  1.2.22: Fix “TypeError: b’xxxxxx’ is not JSON serializable” for cache\n\n-  1.2.21: Support aria2 downloading resuming (disable preallocation)\n\n-  1.2.20: Fix an error in upload resuming; Add in retries for aria2\n\n-  1.2.19: Add in aria2 download support\n\n-  1.2.18: Add in upload resuming using slices; Fix Unicode issues with\n   py2_jsondump(); Fix the pypi setup package\n\n-  1.2.17: Fix UnicodeEncodeError on redirect; Add in retry on urllib3\n   TimeOutError\n\n-  1.2.16: Add in proxy prompts\n\n-  1.2.15: Fix a severe bug (accidental directory deletion) in\n   ``download`` command intoduced in 1.2.14\n\n-  1.2.14: Add in ``download`` command\n\n-  1.2.13: Remove argcomplete; Improve encoding handling prompting\n\n-  1.2.12: Add in (optional) argcomplete\n\n-  1.2.11: Fix Exception in error dump introduced in 1.2.10\n\n-  1.2.10: Handle (32, ‘EPIPE’); Warn LOUDLY on encoding failures;\n   Remove ‘is_revision’\n\n-  1.2.9: Fix formatex() Syntax Error; Handle (110, ‘ETIMEDOUT’)\n\n-  1.2.8: Fix a Syntax Error; Handle {‘error_code’: 0, ‘error_msg’: ‘no\n   error’}\n\n-  1.2.7: Fix Hash Cache JSON saving (need to use string for Hashes)\n\n-  1.2.6: Fix Hash Cache JSON dumping (``Unicode`` again)\n\n-  1.2.5: Add in offline (cloud) download; Fix stack printing\n\n-  1.2.4: Fix command line parsing for Python 3 (``Unicode`` by default)\n\n-  1.2.3: Fix GUI for Python 3\n\n-  1.2.2: Fix division for Python 3\n\n-  1.2.1: Make it ``universal`` (Python 2 & 3 compatible)\n\n-  1.0.20: Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Hou Tianze ( https://github.com/houtianze )\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.11328125,
          "content": "include bypy/*.pem\ninclude LICENSE\ninclude README.md\ninclude HISTORY.md\ninclude HISTORY.rst\ninclude CONTRIBUTING.md\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.169921875,
          "content": "bypy - Python client for Baidu Yun (Personal Cloud Storage) 百度云/百度网盘Python客户端\n====================================================================================\n\n[![alt text](https://img.shields.io/pypi/v/bypy.svg \"PyPi Version\")](https://pypi.python.org/pypi/bypy)\n[![alt text](https://img.shields.io/pypi/dm/bypy.svg \"PyPi Downloads\")](https://pypi.python.org/pypi/bypy)\n[![alt text](https://travis-ci.org/houtianze/bypy.svg \"Build status\")](https://travis-ci.org/houtianze/bypy)\n[![Coverage Status](https://coveralls.io/repos/houtianze/bypy/badge.svg?branch=master&service=github)](https://coveralls.io/github/houtianze/bypy?branch=master)\n[![Code Climate](https://codeclimate.com/github/houtianze/bypy/badges/gpa.svg)](https://codeclimate.com/github/houtianze/bypy)\n[![Join the chat at https://gitter.im/houtianze/bypy](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/houtianze/bypy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n极简说明\n-------\n\n- 安装: `pip install bypy`\n- 运行: `bypy`\n\nTL;DR\n-----\n\n- To install: `pip install bypy`\n- To use: `bypy`\n\n**此项目已经进入维护状态：不会再有新的功能加入，只有在发现重大bug情况下才会有 _可能_ 更新。**\n\n**This is project is now in \"maintenance\" mode: NO new features will be added, and _may_ be updated only if critical bugs are found.**\n\n---\n\n**如果有人想帮助搭国内建授权服务器的话，请按以下步骤进行:**\n\n1. Clone <https://github.com/houtianze/bypyoauth> 并用任意值配置好环境变量后成功运行服务\n2. Fork 此repo，并把你的新服务器地址加到这里 <https://github.com/houtianze/bypy/blob/master/bypy/res/auth.json>\n3. 创建拉取请求，然后通过 [![Join the chat at https://gitter.im/houtianze/bypy](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/houtianze/bypy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) 或者在拉取请求里留下你的联系方式\n4. 我测试新服务器可以使用后，通过Gitter/邮件把Secret Key发给你，你用正确的配置启动授权服务器\n5. 新的授权服务器配置好后我合并拉取请求\n6. 谢谢。\n\n---\n\n中文说明 (English readme is at the bottom)\n-----------------------------------------\n\n- 最新: 目录上传/下载/同步加入了多进程支持（`--processes`）\n\n---\n这是一个百度云/百度网盘的Python客户端。主要的目的就是在Linux环境下（Windows下应该也可用，但没有仔细测试过）通过命令行来使用百度云盘的2TB的巨大空间。比如，你可以用在Raspberry Pi树莓派上。它提供文件列表、下载、上传、比较、向上同步、向下同步，等操作。\n\n**由于百度PCS API权限限制，程序只能存取百度云端`/apps/bypy`目录下面的文件和目录。**\n\n**（已解决）~~据说百度PCS API最多返回目录下1000个文件（ #285 )，如果属实，百度云盘上若有超过1000个文件的目录，将有一部分文件无法被看到 / 下载~~**\n\n**特征: 支持Unicode/中文；失败重试；递归上传/下载；目录比较; 哈希缓存。**\n\n界面是英文的，主要是因为这个是为了Raspberry Pi树莓派开发的。\n\n程序依赖\n------\n\n**重要：需要把系统的区域编码设置为UTF-8。（参见：<http://perlgeek.de/en/article/set-up-a-clean-utf8-environment>)**\n\n安装\n---\n\n- 通过`pip`来安装：`pip install bypy` （支持Python 2.7+, 3.3+)\n\n运行\n---\n\n- 作为独立程序: 运行 `bypy` (或者`python -m bypy`，或者`python3 -m bypy`）\n\n  可以看到命令行支持的全部命令和参数。\n- 作为一个包，在代码中使用: `import bypy`\n\n简单的图形界面：\n运行 `bypygui`\n\n基本操作\n------\n\n显示使用帮助和所有命令（英文）:\n\n```bash\nbypy\n```\n\n第一次运行时需要授权，只需跑任何一个命令（比如 `bypy info`）然后跟着说明（登陆等）来授权即可。授权只需一次，一旦成功，以后不会再出现授权提示.\n\n更详细的了解某一个命令：\n\n```bash\nbypy help <command>\n```\n\n显示在云盘（程序的）根目录下文件列表：\n\n```bash\nbypy list\n```\n\n把当前目录同步到云盘：\n\n```bash\nbypy syncup\n```\n\nor\n\n```bash\nbypy upload\n```\n\n把云盘内容同步到本地来：\n\n```bash\nbypy syncdown\n```\n\nor\n\n```bash\nbypy downdir /\n```\n\n**比较本地当前目录和云盘（程序的）根目录（个人认为非常有用）：**\n\n```bash\nbypy compare\n```\n\n更多命令和详细解释请见运行`bypy`的输出。\n\n调试\n---\n\n- 运行时添加`-v`参数，会显示进度详情。\n- 运行时添加`-d`，会显示一些调试信息。\n- 运行时添加`-ddd`，还会会显示HTTP通讯信息（**警告：非常多**）\n\n整合测试（15 - 30分钟）\n-------------------\n\n- 在主目录下跑：`python -m bypy.test`\n\n直接在Python程序中调用\n-------------------\n\n```python\nfrom bypy import ByPy\nbp=ByPy()\nbp.list() # or whatever instance methods of ByPy class\n```\n\n经验分享\n-------\n\n请移步至[wiki](../../wiki)，方便分享/交流。\n\n授权许可\n-------\n\n请阅: [LICENSE](LICENSE)\n\n---\n\nPCS API文档（已失效）: <http://developer.baidu.com/wiki/index.php?title=docs/pcs/rest/file_data_apis_list> (以前保存的离线版： [baidudoc](baidudoc) directory)\n\n---\n\nIntroduction\n------------\n\n- Latest feature: Multiprocessing added to directory upload / download / sync（`--processes`）\n\n---\nThis is a Python client for Baidu Yun (a.k.a PCS - Personal Cloud Storage), an online storage website offering 2 TB (fast) free personal storage. This main purpose is to be able to utilize this storage service under Linux environment (console), e.g. Raspberry Pi.\n\n**Due to Baidu PC permission restrictions, this program can only access your `/apps/bypy` directory at Baidu PCS**\n\n**(Fixed) ~~It's said the Baidu PCS API won't return more than 1000 items inside a directory ( #285 )，if this is true，you won't be able to see / download some files if you have a directory with more than 1000 files on Baidu Cloud~~**\n\n**Features: Unicode / Chinese support; Retry on failures; Recursive down/up-load; Directory comparison; Hash caching.**\n\nPrerequisite\n------------\n\n**Important: You need to set you system locale encoding to UTF-8 for this to work (You can refer here: <http://perlgeek.de/en/article/set-up-a-clean-utf8-environment>)**\n\nInstallation\n------------\n\n- `pip install bypy` (Supports Python 2.7+, 3.3+)\n\nUsage\n-----\n\n- Standalone program\n  - Simply run `bypy`  (or `python -m bypy`, or `python3 -m bypy`）\n  You will see all the commands and parameters it supports\n\n- As a package in your code\n  - `import bypy`\n\nSimple GUI:\nRun `bypygui`\n\nGetting started\n---------------\n\nTo get help and a list of available commands:\n\n```bash\nbypy\n```\n\nTo authorize for first time use, run any commands e.g. `bypy info` and follow the instructions (login etc). This is a one-time requirement only.\n\nTo get more details about certain command:\n\n```bash\nbypy help <command>\n```\n\nList files at (App's) root directory at Baidu PCS:\n\n```bash\nbypy list\n```\n\nTo sync up to the cloud (from the current directory):\n\n```bash\nbypy syncup\n```\n\nor\n\n```bash\nbypy upload\n```\n\nTo sync down from the cloud (to the current directory):\n\n```bash\nbypy syncdown\n```\n\nor\n\n```bash\nbypy downdir /\n```\n\n**To compare the current directory to (App's) root directory at Baidu PCS (which I think is very useful):**\n\n```bash\nbypy compare\n```\n\nTo get more information about the commands, check the output of `bypy`.\n\nDebug\n-----\n\n- Add in `-v` parameter, it will print more details about the progress.\n- Add in `-d` parameter, it will print some debug messages.\n- Add in `-ddd`, it will display HTTP messages as well (**Warning: A lot**）\n\nIntegration Test (15-30min)\n--------------------------\n\n- (In the project root directory) run: `python -m bypy.test`\n\nTo call from Python code\n------------------------\n\n```python\nfrom bypy import ByPy\nbp=ByPy()\nbp.list() # or whatever instance methods of ByPy class\n```\n\nTips / Sharing\n--------------\n\nPlease go to [wiki](../../wiki)\n\nLicense\n---\n\nPlease refer to [LICENSE](LICENSE)\n\n---\n\nPCS API Document (link dead 404): <http://developer.baidu.com/wiki/index.php?title=docs/pcs/rest/file_data_apis_list> (Offline pdf retrieved before: [baidudoc](baidudoc) directory)\n"
        },
        {
          "name": "baidudoc",
          "type": "tree",
          "content": null
        },
        {
          "name": "bypy",
          "type": "tree",
          "content": null
        },
        {
          "name": "genrst.py",
          "type": "blob",
          "size": 0.1259765625,
          "content": "#!/usr/bin/env python\n\nimport pypandoc\n\nfor md in ['HISTORY']:\n\tpypandoc.convert_file(md + '.md', 'rst', outputfile=md + '.rst')\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 2.37890625,
          "content": "#!/bin/sh\n\necho !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\necho !!! RUN THIS SCRIPT UNDER VIRTUALENV !!!\necho !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n# need to run the following commands before running this release script\n# (This is for macOS, and for python virtualenv is recommended)\n# --------\n# brew install pandoc\n# pip3 install pandoc pypandoc twine pyflakes\n\n### Usage ###\n# - Testing: ./release.sh -buti\n# - Actual: ./release.sh -abigtu\n\n#set -o errexit\n#set -x\n\ntrap \"echo '=== Release script interrupted ==='; exit 255\" INT\n\ncheck() {\n\tcommand -v \"$1\" || { echo \"'$1' doesn't exist, aborting.\"; exit 255; }\n}\n\npycmd=python3\n\ncheck git\ncheck $pycmd\ncheck pandoc\ncheck pyflakes\ncheck twine\ncheck jq\n\nactual=0\nbuild=0\ninstall=0\nupload=0\ntestit=0\ntagit=0\n\nparsearg() {\n\twhile getopts \"abigtu\" opt; do\n\t\tcase \"$opt\" in\n\t\ta)\n\t\t\tactual=1\n\t\t\t;;\n\t\tb)\n\t\t\tbuild=1\n\t\t\t;;\n\t\tu)\n\t\t\tupload=1\n\t\t\t;;\n\t\ti)\n\t\t\tinstall=1\n\t\t\t;;\n\t\tt)\n\t\t\ttestit=1\n\t\t\t;;\n\t\tg)\n\t\t\ttagit=1\n\t\t\t;;\n\t\t*)\n\t\t\techo \"Invalid arguments.\"\n\t\t\texit 255\n\t\t\t;;\n\t\tesac\n\tdone\n}\n\nruntest() {\n\teval $pycmd -m pyflakes bypy\n\teval $pycmd setup.py test\n\t#eval $pycmd -m doctest -v bypy.py\n\teval $pycmd -m bypy -V\n\t# eval $pycmd -m bypy --config-dir bypy/test/configdir quota\n}\n\ninstalltest() {\n\t# due to requests not in testpypi\n\tif [ $actual -eq 0 ]\n\tthen\n\t\tpip install requests\n\telse\n\t\tpip uninstall -y requests\n\tfi\n\n\tpip uninstall -y bypy\n\tif [ -z \"$indexopt\" ]\n\tthen\n\t\tpip install -U bypy\n\telse\n\t\tpip install -U bypy \"$indexopt\"\n\tfi\n\tbypy -V\n\t# bypy --config-dir bypy/test/configdir quota\n}\n\nmain() {\n\t./syncver.sh\n\teval $pycmd genrst.py\n\tparsearg \"$@\"\n\n\tif [ \"$actual\" -eq 0 ]\n\tthen\n\t\trepoopt=\"-r testpypi\"\n\t\tindexopt=\"-ihttps://testpypi.python.org/simple/\"\n\telse\n\t\trepoopt=\"\"\n\t\tindexopt=\"\"\n\tfi\n\n\tif [ \"$tagit\" -eq 1 ]\n\tthen\n\t\t# shellcheck disable=SC2006\n\t\tbypyversion=`grep __version__ bypy/const.py | sed -e \"s/__version__ *= *'//g\" -e \"s/'//g\"`\n\t\tgit --no-pager tag\n\t\tgit tag \"$bypyversion\"\n\t\tgit push\n\t\tgit push --tags\n\t\tgit --no-pager tag\n\tfi\n\n\tif [ \"$testit\" -eq 1 ]\n\tthen\n\t\truntest\n\tfi\n\n\tif [ \"$build\" -eq 1 ]\n\tthen\n\t\trm dist/*\n\t\teval $pycmd setup.py clean --all\n\t\teval $pycmd setup.py bdist_wheel #sdist\n\tfi\n\n\tuploadcmd=\"twine upload dist/* $repoopt\"\n\tif [ \"$upload\" -eq 0 ]\n\tthen\n\t\techo \"$uploadcmd\"\n\telse\n\t\teval \"$uploadcmd\"\n\tfi\n\n\tif [ \"$install\" -eq 1 ]\n\tthen\n\t\tinstalltest\n\tfi\n}\n\nmain \"$@\"\n\n# vim: tabstop=4 noexpandtab shiftwidth=4 softtabstop=4 ff=unix fileencoding=utf-8\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.05859375,
          "content": "#requests[security]\nrequests\nrequests-toolbelt\nmultiprocess\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.07421875,
          "content": "[metadata]\nlong_description = file: README.rst\n\n[bdist_wheel]\nuniversal = 1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.4443359375,
          "content": "#!/usr/bin/env python\n# coding=utf-8\n\nimport io\nimport re\n\nfrom setuptools import setup\n\n# https://packaging.python.org/single_source_version/\n# CAN'T believe there is no single *clean* way of retrieving the version.\ndef getmeta(path, encoding = 'utf8'):\n\twith io.open(path, encoding = encoding) as fp:\n\t\tcontent = fp.read()\n\tmetakeys = ['title', 'version', 'desc', 'author', 'license', 'url']\n\tmetatrans = {'title': 'name', 'desc': 'description'}\n\tmeta = {}\n\tfor mk in metakeys:\n\t\tmatch = re.search(\n\t\t\tr\"^__\" + mk + r\"__\\s*=\\s*['\\\"]([^'\\\"]*)['\\\"]\",\n            content, re.M)\n\t\tif match:\n\t\t\tif mk in metatrans:\n\t\t\t\tkey = metatrans[mk]\n\t\t\telse:\n\t\t\t\tkey = mk\n\t\t\tmeta[key] = match.group(1)\n\t\telse:\n\t\t\traise RuntimeError(\"Unable to find meta key: {}\".format(mk))\n\treturn meta\n\nmeta = getmeta('bypy/const.py')\n\nlong_desc = '''\\\nDocuments:\n~~~~~~~~~~\nSee: https://github.com/houtianze/bypy\n\n\n'''\nrequirements = []\n\nwith open('HISTORY.rst') as f:\n\tlong_desc += f.read()\n\nwith open('requirements.txt') as f:\n\trequirements = list(filter(lambda x: x and not x.startswith('#'), map(str.strip, f.read().splitlines())))\n\nsetup(\n\tlong_description=long_desc,\n\tauthor_email = 'houtianze@users.noreply.github.com',\n\tdownload_url = 'https://github.com/houtianze/bypy/tarball/' + meta['version'],\n\t#packages=find_packages(),\n\tpackages = ['bypy', 'bypy.res', 'bypy.test'],\n\tpackage_data = {\n\t\t'bypy': ['../*.rst', '*.pem'],\n\t\t'bypy.res': ['*.json']\n\t},\n\tentry_points = {\n\t\t'console_scripts': [\n\t\t\t'bypy = bypy.bypy:main'\n\t\t],\n\t\t'gui_scripts': [\n\t\t\t'bypygui = bypy.gui:main'\n\t\t]\n\t},\n\ttest_suite = 'bypy.test',\n\tkeywords = ['bypy', 'bypy.py', 'baidu pcs', 'baidu yun', 'baidu pan', 'baidu netdisk',\n\t\t\t\t'baidu cloud storage', 'baidu personal cloud storage',\n\t\t\t\t'百度云', '百度云盘', '百度网盘', '百度个人云存储'],\n\tclassifiers = [\n\t\t'Development Status :: 4 - Beta',\n\t\t'Environment :: Console',\n\t\t'Intended Audience :: End Users/Desktop',\n\t\t'Intended Audience :: Developers',\n\t\t'Intended Audience :: System Administrators',\n\t\t'License :: OSI Approved :: MIT License',\n\t\t'Natural Language :: English',\n\t\t'Operating System :: MacOS :: MacOS X',\n\t\t'Operating System :: Microsoft :: Windows',\n\t\t'Operating System :: POSIX',\n\t\t'Operating System :: Unix',\n\t\t'Programming Language :: Python',\n\t\t'Topic :: Utilities',\n\t\t'Topic :: Internet :: WWW/HTTP'],\n\tinstall_requires = requirements,\n\tinclude_package_data = True,\n\t**meta\n)\n\n# vim: tabstop=4 noexpandtab shiftwidth=4 softtabstop=4 ff=unix fileencoding=utf-8\n"
        },
        {
          "name": "syncver.sh",
          "type": "blob",
          "size": 0.2998046875,
          "content": "#!/usr/bin/env bash\n\nver=$(grep __version__ bypy/const.py | sed -e \"s/__version__ *= *'//g\" -e \"s/'//g\")\nsed -i -e \"s/\\(^.*\\)\\\"recommendedVersion\\\".*$/\\1\\\"recommendedVersion\\\": \\\"$ver\\\",/g\" update/update.json\n# mac sed fix\nsedresidue='update/update.json-e'\nif [ -f $sedresidue ]; then\n\trm -f $sedresidue\nfi\n"
        },
        {
          "name": "update",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}