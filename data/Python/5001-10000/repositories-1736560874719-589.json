{
  "metadata": {
    "timestamp": 1736560874719,
    "page": 589,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "boltgolt/howdy",
      "stars": 5975,
      "defaultBranch": "beta",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.623046875,
          "content": "Checks: 'clang-diagnostic-*,clang-analyser-*,-clang-diagnostic-unused-command-line-argument,google-*,bugprone-*,modernize-*,performance-*,portability-*,readability-*,-bugprone-easily-swappable-*,-readability-magic-numbers,-google-readability-todo'\nWarningsAsErrors: 'clang-diagnostic-*,clang-analyser-*,-clang-diagnostic-unused-command-line-argument,google-*,bugprone-*,modernize-*,performance-*,portability-*,readability-*,-bugprone-easily-swappable-*,-readability-magic-numbers,-google-readability-todo'\nCheckOptions:\n  - key:             readability-function-cognitive-complexity.Threshold\n    value:           '50'\n\n# vim:syntax=yaml\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.537109375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# generated models\n/howdy/src/models\n\n# snapshots\n/howdy/src/snapshots\n\n# build files\ndebian/howdy.substvars\ndebian/files\ndebian/debhelper-build-stamp\ndebian/howdy\n\n# vscode\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n# Meson\nsubprojects/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2018 boltgolt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.72265625,
          "content": "![](https://boltgolt.nl/howdy/banner.png)\n\n<p align=\"center\">\n\t<a href=\"https://github.com/boltgolt/howdy/releases\">\n\t\t<img src=\"https://img.shields.io/github/release/boltgolt/howdy.svg?colorB=4c1\">\n\t</a>\n\t<a href=\"https://github.com/boltgolt/howdy/graphs/contributors\">\n\t\t<img src=\"https://img.shields.io/github/contributors/boltgolt/howdy.svg?style=flat\">\n\t</a>\n\t<a href=\"https://www.buymeacoffee.com/boltgolt\">\n\t\t<img src=\"https://img.shields.io/badge/endpoint.svg?url=https://boltgolt.nl/howdy/shield.json\">\n\t</a>\n\t<a href=\"https://actions-badge.atrox.dev/boltgolt/howdy/goto?ref=beta\">\n\t\t<img src=\"https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fboltgolt%2Fhowdy%2Fbadge%3Fref%3Dbeta&style=flat&label=build&logo=none\">\n\t</a>\n\t<a href=\"https://aur.archlinux.org/packages/howdy\">\n\t\t<img src=\"https://img.shields.io/aur/votes/howdy?color=4c1&label=aur%20votes\">\n\t</a>\n</p>\n\nHowdy provides Windows Hello™ style authentication for Linux. Use your built-in IR emitters and camera in combination with facial recognition to prove who you are.\n\nUsing the central authentication system (PAM), this works everywhere you would otherwise need your password: Login, lock screen, sudo, su, etc.\n\n## Installation\n\nHowdy is currently available and packaged for Debian/Ubuntu, Arch Linux, Fedora and openSUSE. If you’re interested in packaging Howdy for your distro, don’t hesitate to open an issue.\n\n**Note:** The build of dlib can hang on 100% for over a minute, give it time.\n\n### Ubuntu or Linux Mint\n\nRun the installer by pasting (`ctrl+shift+V`) the following commands into the terminal one at a time:\n\n```\nsudo add-apt-repository ppa:boltgolt/howdy\nsudo apt update\nsudo apt install howdy\n```\n\nThis will guide you through the installation.\n\n### Debian\n\nDownload the .deb file from the [Releases page](https://github.com/boltgolt/howdy/releases) and install with gdebi.\n\n### Arch Linux\n\n_Maintainer wanted._\n\nInstall the `howdy` package from the AUR. For AUR installation instructions, take a look at this [wiki page](https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_packages).\n\nYou will need to do some additional configuration steps. Please read the [ArchWiki entry](https://wiki.archlinux.org/index.php/Howdy) for more information.\n\n### Fedora\n\n_Maintainer: [@luyatshimbalanga](https://github.com/luyatshimbalanga)_\n\nThe `howdy` package is available as a [Fedora COPR repository](https://copr.fedorainfracloud.org/coprs/principis/howdy/), install it by simply executing the following commands in a terminal:\n\n```\nsudo dnf copr enable principis/howdy\nsudo dnf --refresh install howdy\n```\n\nSee the link to the COPR repository for detailed configuration steps.\n\n### openSUSE\n\n_Maintainer: [@dmafanasyev](https://github.com/dmafanasyev)_\n\nGo to the [openSUSE wiki page](https://en.opensuse.org/SDB:Facial_authentication) for detailed installation instructions.\n\n### Building from source\n\nIf you want to build Howdy from source, a few dependencies are required.\n\n#### Dependencies\n\n- Python 3.6 or higher\n  * pip\n  * setuptools\n  * wheel\n- meson version 0.64 or higher\n- ninja\n- INIReader (can be pulled from git automatically if not found)\n- libevdev\n\nTo install them on Debian/Ubuntu for example:\n\n```\nsudo apt-get update && sudo apt-get install -y \\\npython3 python3-pip python3-setuptools python3-wheel \\\ncmake make build-essential \\\nlibpam0g-dev libinih-dev libevdev-dev \\\npython3-dev libopencv-dev\n```\n\n#### Build\n\n```sh\nmeson setup build\nmeson compile -C build\n```\n\nYou can also install Howdy to your system with `meson install -C build`.\n\n## Setup\n\nAfter installation, Howdy needs to learn what you look like so it can recognise you later. Run `sudo howdy add` to add a face model.\n\nIf nothing went wrong we should be able to run sudo by just showing your face. Open a new terminal and run `sudo -i` to see it in action. Please check [this wiki page](https://github.com/boltgolt/howdy/wiki/Common-issues) if you're experiencing problems or [search](https://github.com/boltgolt/howdy/issues) for similar issues.\n\nIf you're curious you can run `sudo howdy config` to open the central config file and see the options Howdy has to offer. On most systems this will open the nano editor, where you have to press `ctrl`+`x` to save your changes.\n\n## CLI\n\nThe installer adds a `howdy` command to manage face models for the current user. Use `howdy --help` or `man howdy` to list the available options.\n\nUsage:\n```\nhowdy [-U user] [-y] command [argument]\n```\n\n| Command   | Description                                   |\n|-----------|-----------------------------------------------|\n| `add`     | Add a new face model for a user               |\n| `clear`   | Remove all face models for a user             |\n| `config`  | Open the config file in your default editor   |\n| `disable` | Disable or enable howdy                       |\n| `list`    | List all saved face models for a user         |\n| `remove`  | Remove a specific model for a user            |\n| `snapshot`| Take a snapshot of your camera input          |\n| `test`    | Test the camera and recognition methods       |\n| `version` | Print the current version number              |\n\n## Contributing [![](https://img.shields.io/travis/boltgolt/howdy/dev.svg?label=dev%20build)](https://github.com/boltgolt/howdy/tree/dev) [![](https://img.shields.io/github/issues-raw/boltgolt/howdy/enhancement.svg?label=feature+requests&colorB=4c1)](https://github.com/boltgolt/howdy/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement)\n\nThe easiest ways to contribute to Howdy is by starring the repository and opening GitHub issues for features you'd like to see. If you want to do more, you can also [buy me a coffee](https://www.buymeacoffee.com/boltgolt).\n\nCode contributions are also very welcome. If you want to port Howdy to another distro, feel free to open an issue for that too.\n\n## Troubleshooting\n\nAny Python errors get logged directly into the console and should indicate what went wrong. If authentication still fails but no errors are printed, you could take a look at the last lines in `/var/log/auth.log` to see if anything has been reported there.\n\nPlease first check the [wiki on common issues](https://github.com/boltgolt/howdy/wiki/Common-issues) and \nif you encounter an error that hasn't been reported yet, don't be afraid to open a new issue.\n\n## A note on security\n\nThis package is in no way as secure as a password and will never be. Although it's harder to fool than normal face recognition, a person who looks similar to you, or a well-printed photo of you could be enough to do it. Howdy is a more quick and convenient way of logging in, not a more secure one.\n\nTo minimize the chance of this program being compromised, it's recommended to leave Howdy in `/lib/security` and to keep it read-only.\n\nDO NOT USE HOWDY AS THE SOLE AUTHENTICATION METHOD FOR YOUR SYSTEM.\n"
        },
        {
          "name": "howdy-gtk",
          "type": "tree",
          "content": null
        },
        {
          "name": "howdy",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.83203125,
          "content": "project('howdy', 'cpp', license: 'MIT', version: 'beta', meson_version: '>= 0.64.0')\n\ndlibdatadir = get_option('dlib_data_dir') != '' ? get_option('dlib_data_dir') : join_paths(get_option('prefix'), get_option('datadir'), 'dlib-data')\nconfdir = get_option('config_dir') != '' ? get_option('config_dir') : join_paths(get_option('prefix'), get_option('sysconfdir'), 'howdy')\nusermodelsdir = get_option('user_models_dir') != '' ? get_option('user_models_dir') : join_paths(confdir, 'models')\nlogpath = get_option('log_path')\n\nconfig_path = join_paths(confdir, 'config.ini')\n\npaths_dict = {\n    'config_dir': confdir,\n    'dlib_data_dir': dlibdatadir,\n    'user_models_dir': usermodelsdir,\n    'log_path': logpath,\n}\n\n# We need to keep this order beause howdy-gtk defines the gtk script path which is used later in howdy\nsubdir('howdy-gtk')\nsubdir('howdy')"
        },
        {
          "name": "meson.options",
          "type": "blob",
          "size": 0.9111328125,
          "content": "option('pam_dir', type: 'string', value: '', description: 'Set the pam_howdy destination directory')\n#option('fetch_dlib_data', type: 'boolean', value: false, description: 'Download dlib data files')\noption('config_dir', type: 'string', value: '', description: 'Set the howdy config directory')\noption('dlib_data_dir', type: 'string', value: '', description: 'Set the dlib data directory')\noption('user_models_dir', type: 'string', value: '', description: 'Set the user models directory')\noption('log_path', type: 'string', value: '/var/log/howdy', description: 'Set the log file path')\noption('install_in_site_packages', type: 'boolean', value: false, description: 'Install howdy python files in site packages')\noption('py_sources_dir', type: 'string', value: '', description: 'Set the python sources directory')\noption('install_pam_config', type: 'boolean', value: false, description: 'Install pam config file (for Debian/Ubuntu)')"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.0126953125,
          "content": "meson.options"
        }
      ]
    }
  ]
}