{
  "metadata": {
    "timestamp": 1736560876702,
    "page": 592,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "open-mmlab/mmcv",
      "stars": 5968,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dev_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": ".git\n.gitignore\n*.egg-info\n.eggs/\n.mypy-cache\npip-wheel-metadata\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.40234375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# PyTorch checkpoint\n*.pth\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\nmlu-ops/\nmlu-ops.*\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/en/_build/\ndocs/en/api/generated/\ndocs/zh_cn/_build/\ndocs/zh_cn/api/generated/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# editors and IDEs\n.idea/\n.vscode/\n\n# custom\n.DS_Store\n\n# datasets and logs and checkpoints\ndata/\nwork_dir/\n\nsrc/\n"
        },
        {
          "name": ".pre-commit-config-zh-cn.yaml",
          "type": "blob",
          "size": 2.208984375,
          "content": "exclude: ^tests/data/\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit\n    rev: v4.0.0\n    hooks:\n      - id: validate_manifest\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n  - repo: https://gitee.com/openmmlab/mirrors-isort\n    rev: 5.11.5\n    hooks:\n      - id: isort\n  - repo: https://gitee.com/openmmlab/mirrors-yapf\n    rev: v0.32.0\n    hooks:\n      - id: yapf\n  - repo: https://gitee.com/openmmlab/mirrors-pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: requirements-txt-fixer\n      - id: double-quote-string-fixer\n      - id: check-merge-conflict\n      - id: fix-encoding-pragma\n        args: [\"--remove\"]\n      - id: mixed-line-ending\n        args: [\"--fix=lf\"]\n  - repo: https://gitee.com/openmmlab/mirrors-codespell\n    rev: v2.2.1\n    hooks:\n      - id: codespell\n  - repo: https://gitee.com/openmmlab/mirrors-mdformat\n    rev: 0.7.9\n    hooks:\n      - id: mdformat\n        args: [\"--number\"]\n        additional_dependencies:\n          - mdformat-openmmlab\n          - mdformat_frontmatter\n          - linkify-it-py\n  - repo: https://gitee.com/openmmlab/mirrors-docformatter\n    # TODO:https://github.com/PyCQA/docformatter/issues/289\n    rev: v1.3.1\n    hooks:\n      - id: docformatter\n        args: [\"--in-place\", \"--wrap-descriptions\", \"79\"]\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.0.0\n    hooks:\n      - id: pyupgrade\n        args: [\"--py36-plus\"]\n  - repo: https://gitee.com/openmmlab/pre-commit-hooks\n    rev: v0.2.0  # Use the ref you want to point at\n    hooks:\n      - id: check-copyright\n        args: [\"mmcv\", \"tests\", \"--excludes\", \"mmcv/ops\"]\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.2.0\n    hooks:\n      - id: mypy\n        exclude: |-\n          (?x)(\n              ^test\n              | ^docs\n          )\n        additional_dependencies: [\"types-setuptools\", \"types-requests\"]\n  # - repo: local\n  #   hooks:\n  #     - id: clang-format\n  #       name: clang-format\n  #       description: Format files with ClangFormat\n  #       entry: clang-format -style=google -i\n  #       language: system\n  #       files: \\.(c|cc|cxx|cpp|cu|h|hpp|hxx|cuh|proto)$\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.1279296875,
          "content": "exclude: ^tests/data/\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit\n    rev: v4.0.0\n    hooks:\n      - id: validate_manifest\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.11.5\n    hooks:\n      - id: isort\n  - repo: https://github.com/pre-commit/mirrors-yapf\n    rev: v0.32.0\n    hooks:\n      - id: yapf\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: requirements-txt-fixer\n      - id: double-quote-string-fixer\n      - id: check-merge-conflict\n      - id: fix-encoding-pragma\n        args: [\"--remove\"]\n      - id: mixed-line-ending\n        args: [\"--fix=lf\"]\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.2.1\n    hooks:\n      - id: codespell\n  - repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.9\n    hooks:\n      - id: mdformat\n        args: [\"--number\"]\n        additional_dependencies:\n          - mdformat-openmmlab\n          - mdformat_frontmatter\n          - linkify-it-py\n  - repo: https://github.com/myint/docformatter\n    rev: 06907d0\n    hooks:\n      - id: docformatter\n        args: [\"--in-place\", \"--wrap-descriptions\", \"79\"]\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.0.0\n    hooks:\n      - id: pyupgrade\n        args: [\"--py36-plus\"]\n  - repo: https://github.com/open-mmlab/pre-commit-hooks\n    rev: v0.2.0  # Use the ref you want to point at\n    hooks:\n      - id: check-copyright\n        args: [\"mmcv\", \"tests\", \"--excludes\", \"mmcv/ops\"]\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.2.0\n    hooks:\n      - id: mypy\n        exclude: |-\n          (?x)(\n              ^test\n              | ^docs\n          )\n        additional_dependencies: [\"types-setuptools\", \"types-requests\"]\n  # - repo: local\n  #   hooks:\n  #     - id: clang-format\n  #       name: clang-format\n  #       description: Format files with ClangFormat\n  #       entry: clang-format -style=google -i\n  #       language: system\n  #       files: \\.(c|cc|cxx|cpp|cu|h|hpp|hxx|cuh|proto)$\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.181640625,
          "content": "version: 2\n\nformats: all\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.7\"\n\npython:\n  install:\n    - requirements: requirements/runtime.txt\n    - requirements: requirements/docs.txt\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.248046875,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - name: \"MMCV Contributors\"\ntitle: \"OpenMMLab Computer Vision Foundation\"\ndate-released: 2018-08-22\nurl: \"https://github.com/open-mmlab/mmcv\"\nlicense: Apache-2.0\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 11.509765625,
          "content": "## Contributing to OpenMMLab\n\nWelcome to the MMCV community, we are committed to building a cutting-edge computer vision foundational library and all kinds of contributions are welcomed, including but not limited to\n\n**Fix bug**\n\nYou can directly post a Pull Request to fix typo in code or documents\n\nThe steps to fix the bug of code implementation are as follows.\n\n1. If the modification involve significant changes, you should create an issue first and describe the error information and how to trigger the bug. Other developers will discuss with you and propose an proper solution.\n\n2. Posting a pull request after fixing the bug and adding corresponding unit test.\n\n**New Feature or Enhancement**\n\n1. If the modification involve significant changes, you should create an issue to discuss with our developers to propose an proper design.\n2. Post a Pull Request after implementing the new feature or enhancement and add corresponding unit test.\n\n**Document**\n\nYou can directly post a pull request to fix documents. If you want to add a document, you should first create an issue to check if it is reasonable.\n\n### Pull Request Workflow\n\nIf you're not familiar with Pull Request, don't worry! The following guidance will tell you how to create a Pull Request step by step. If you want to dive into the develop mode of Pull Request, you can refer to the [official documents](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests)\n\n#### 1. Fork and clone\n\nIf you are posting a pull request for the first time, you should fork the OpenMMLab repositories by clicking the **Fork** button in the top right corner of the GitHub page, and the forked repositories will appear under your GitHub profile.\n\n<img src=\"https://user-images.githubusercontent.com/57566630/167305749-43c7f4e9-449b-4e98-ade5-0c9276d5c9ce.png\" width=\"1200\">\n\nThen, you can clone the repositories to local:\n\n```shell\ngit clone git@github.com:{username}/mmcv.git\n```\n\nAfter that, you should ddd official repository as the upstream repository\n\n```bash\ngit remote add upstream git@github.com:open-mmlab/mmcv\n```\n\nCheck whether remote repository has been added successfully by `git remote -v`\n\n```bash\norigin\tgit@github.com:{username}/mmcv.git (fetch)\norigin\tgit@github.com:{username}/mmcv.git (push)\nupstream\tgit@github.com:open-mmlab/mmcv (fetch)\nupstream\tgit@github.com:open-mmlab/mmcv (push)\n```\n\n> Here's a brief introduction to origin and upstream. When we use \"git clone\", we create an \"origin\" remote by default, which points to the repository cloned from. As for \"upstream\", we add it ourselves to point to the target repository. Of course, if you don't like the name \"upstream\", you could name it as you wish. Usually, we'll push the code to \"origin\". If the pushed code conflicts with the latest code in official(\"upstream\"), we should pull the latest code from upstream to resolve the conflicts, and then push to \"origin\" again. The posted Pull Request will be updated automatically.\n\n#### 2. Configure pre-commit\n\nYou should configure [pre-commit](https://pre-commit.com/#intro) in the local development environment to make sure the code style matches that of OpenMMLab. **Note**: The following code should be executed under the MMCV directory.\n\n```shell\npip install -U pre-commit\npre-commit install\n```\n\nCheck that pre-commit is configured successfully, and install the hooks defined in `.pre-commit-config.yaml`.\n\n```shell\npre-commit run --all-files\n```\n\n<img src=\"https://user-images.githubusercontent.com/57566630/173660750-3df20a63-cb66-4d33-a986-1f643f1d8aaf.png\" width=\"1200\">\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202368856-0465a90d-8fce-4345-918e-67b8b9c82614.png\" width=\"1200\">\n\nIf the installation process is interrupted, you can repeatedly run `pre-commit run ... ` to continue the installation.\n\nIf the code does not conform to the code style specification, pre-commit will raise a warning and  fixes some of the errors automatically.\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202369176-67642454-0025-4023-a095-263529107aa3.png\" width=\"1200\">\n\nIf we want to commit our code bypassing the pre-commit hook, we can use the `--no-verify` option(**only for temporarily commit**).\n\n```shell\ngit commit -m \"xxx\" --no-verify\n```\n\n#### 3. Create a development branch\n\nAfter configuring the pre-commit, we should create a branch based on the master branch to develop the new feature or fix the bug. The proposed branch name is `username/pr_name`\n\n```shell\ngit checkout -b yhc/refactor_contributing_doc\n```\n\nIn subsequent development, if the master branch of the local repository is behind the master branch of \"upstream\", we need to pull the upstream for synchronization, and then execute the above command:\n\n```shell\ngit pull upstream master\n```\n\n#### 4. Commit the code and pass the unit test\n\n- MMCV introduces mypy to do static type checking to increase the robustness of the code. Therefore, we need to add Type Hints to our code and pass the mypy check. If you are not familiar with Type Hints, you can refer to [this tutorial](https://docs.python.org/3/library/typing.html).\n\n- The committed code should pass through the unit test\n\n  ```shell\n  # Pass all unit tests\n  pytest tests\n\n  # Pass the unit test of runner\n  pytest tests/test_runner/test_runner.py\n  ```\n\n  If the unit test fails for lack of dependencies, you can install the dependencies referring to the [guidance](#unit-test)\n\n- If the documents are modified/added, we should check the rendering result referring to [guidance](#document-rendering)\n\n#### 5. Push the code to remote\n\nWe could push the local commits to remote after passing through the check of unit test and pre-commit. You can associate the local branch with remote branch by adding `-u` option.\n\n```shell\ngit push -u origin {branch_name}\n```\n\nThis will allow you to use the `git push` command to push code directly next time, without having to specify a branch or the remote repository.\n\n#### 6. Create a Pull Request\n\n(1) Create a pull request in GitHub's Pull request interface\n\n<img src=\"https://user-images.githubusercontent.com/57566630/201533288-516f7ac4-0b14-4dc8-afbd-912475c368b5.png\" width=\"1200\">\n\n(2) Modify the PR description according to the guidelines so that other developers can better understand your changes\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202242953-c91a18ff-e388-4ff9-8591-5fae0ead6c1e.png\" width=\"1200\">\n\nFind more details about Pull Request description in [pull request guidelines](#pr-specs).\n\n**note**\n\n(a) The Pull Request description should contain the reason for the change, the content of the change, and the impact of the change, and be associated with the relevant Issue (see [documentation](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)\n\n(b) If it is your first contribution, please sign the CLA\n\n<img src=\"https://user-images.githubusercontent.com/57566630/167307569-a794b967-6e28-4eac-a942-00deb657815f.png\" width=\"1200\">\n\n(c) Check whether the Pull Request pass through the CI\n\n<img src=\"https://user-images.githubusercontent.com/57566630/167307490-f9ebf9fa-63c0-4d83-8ba1-081ea169eb3a.png\" width=\"1200\">\n\nMMCV will run unit test for the posted Pull Request on different platforms (Linux, Window, Mac), based on different versions of Python, PyTorch, CUDA to make sure the code is correct. We can see the specific test information by clicking `Details` in the above image so that we can modify the code.\n\n(3) If the Pull Request passes the CI, then you can wait for the review from other developers. You'll modify the code based on the reviewer's comments, and repeat the steps [4](#4-commit-the-code-and-pass-the-unit-test)-[5](#5-push-the-code-to-remote) until all reviewers approve it. Then, we will merge it ASAP.\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202145400-cc2cd8c4-10b0-472f-ba37-07e6f50acc67.png\" width=\"1200\">\n\n#### 7. Resolve conflicts\n\nIf your local branch conflicts with the latest master branch of \"upstream\", you'll need to resolove them. There are two ways to do this:\n\n```shell\ngit fetch --all --prune\ngit rebase upstream/master\n```\n\nor\n\n```shell\ngit fetch --all --prune\ngit merge upstream/master\n```\n\nIf you are very good at handling conflicts, then you can use rebase to resolve conflicts, as this will keep your commit logs tidy. If you are not familiar with `rebase`, then you can use `merge` to resolve conflicts.\n\n### Guidance\n\n#### Unit test\n\nIf you cannot run the unit test of some modules for lacking of some dependencies, such as [video](https://github.com/open-mmlab/mmcv/tree/master/mmcv/video) module, you can try to install the following dependencies:\n\n```shell\n# Linux\nsudo apt-get update -y\nsudo apt-get install -y libturbojpeg\nsudo apt-get install -y ffmpeg\n\n# Windows\nconda install ffmpeg\n```\n\nWe should also make sure the committed code will not decrease the coverage of unit test, we could run the following command to check the coverage of unit test:\n\n```shell\npython -m coverage run -m pytest /path/to/test_file\npython -m coverage html\n# check file in htmlcov/index.html\n```\n\n#### Document rendering\n\nIf the documents are modified/added, we should check the rendering result. We could install the dependencies and run the following command to render the documents and check the results:\n\n```shell\npip install -r requirements/docs.txt\ncd docs/zh_cn/\n# or docs/en\nmake html\n# check file in ./docs/zh_cn/_build/html/index.html\n```\n\n### Code style\n\n#### Python\n\nWe adopt [PEP8](https://www.python.org/dev/peps/pep-0008/) as the preferred code style.\n\nWe use the following tools for linting and formatting:\n\n- [flake8](https://github.com/PyCQA/flake8): A wrapper around some linter tools.\n- [isort](https://github.com/timothycrosley/isort): A Python utility to sort imports.\n- [yapf](https://github.com/google/yapf): A formatter for Python files.\n- [codespell](https://github.com/codespell-project/codespell): A Python utility to fix common misspellings in text files.\n- [mdformat](https://github.com/executablebooks/mdformat): Mdformat is an opinionated Markdown formatter that can be used to enforce a consistent style in Markdown files.\n- [docformatter](https://github.com/myint/docformatter): A formatter to format docstring.\n\nStyle configurations of yapf and isort can be found in [setup.cfg](./setup.cfg).\n\nWe use [pre-commit hook](https://pre-commit.com/) that checks and formats for `flake8`, `yapf`, `isort`, `trailing whitespaces`, `markdown files`,\nfixes `end-of-files`, `double-quoted-strings`, `python-encoding-pragma`, `mixed-line-ending`, sorts `requirments.txt` automatically on every commit.\nThe config for a pre-commit hook is stored in [.pre-commit-config](./.pre-commit-config.yaml).\n\n#### C++ and CUDA\n\nWe follow the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\n\n### PR Specs\n\n1. Use [pre-commit](https://pre-commit.com) hook to avoid issues of code style\n\n2. One short-time branch should be matched with only one PR\n\n3. Accomplish a detailed change in one PR. Avoid large PR\n\n   - Bad: Support Faster R-CNN\n   - Acceptable: Add a box head to Faster R-CNN\n   - Good: Add a parameter to box head to support custom conv-layer number\n\n4. Provide clear and significant commit message\n\n5. Provide clear and meaningful PR description\n\n   - Task name should be clarified in title. The general format is: \\[Prefix\\] Short description of the PR (Suffix)\n   - Prefix: add new feature \\[Feature\\], fix bug \\[Fix\\], related to documents \\[Docs\\], in developing \\[WIP\\] (which will not be reviewed temporarily)\n   - Introduce main changes, results and influences on other modules in short description\n   - Associate related issues and pull requests with a milestone\n"
        },
        {
          "name": "CONTRIBUTING_zh-CN.md",
          "type": "blob",
          "size": 11.6298828125,
          "content": "## 贡献代码\n\n欢迎加入 MMCV 社区，我们致力于打造最前沿的计算机视觉基础库，我们欢迎任何类型的贡献，包括但不限于\n\n**修复错误**\n\n修复代码实现错误的步骤如下：\n\n1. 如果提交的代码改动较大，建议先提交 issue，并正确描述 issue 的现象、原因和复现方式，讨论后确认修复方案。\n2. 修复错误并补充相应的单元测试，提交拉取请求。\n\n**新增功能或组件**\n\n1. 如果新功能或模块涉及较大的代码改动，建议先提交 issue，确认功能的必要性。\n2. 实现新增功能并添单元测试，提交拉取请求。\n\n**文档补充**\n\n修复文档可以直接提交拉取请求\n\n添加文档或将文档翻译成其他语言步骤如下\n\n1. 提交 issue，确认添加文档的必要性。\n2. 添加文档，提交拉取请求。\n\n### 拉取请求工作流\n\n如果你对拉取请求不了解，没关系，接下来的内容将会从零开始，一步一步地指引你如何创建一个拉取请求。如果你想深入了解拉取请求的开发模式，可以参考 github [官方文档](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests)\n\n#### 1. 复刻仓库\n\n当你第一次提交拉取请求时，先复刻 OpenMMLab 原代码库，点击 GitHub 页面右上角的 **Fork** 按钮，复刻后的代码库将会出现在你的 GitHub 个人主页下。\n\n<img src=\"https://user-images.githubusercontent.com/57566630/167305749-43c7f4e9-449b-4e98-ade5-0c9276d5c9ce.png\" width=\"1200\">\n\n将代码克隆到本地\n\n```shell\ngit clone git@github.com:{username}/mmcv.git\n```\n\n添加原代码库为上游代码库\n\n```bash\ngit remote add upstream git@github.com:open-mmlab/mmcv\n```\n\n检查 remote 是否添加成功，在终端输入 `git remote -v`\n\n```bash\norigin\tgit@github.com:{username}/mmcv.git (fetch)\norigin\tgit@github.com:{username}/mmcv.git (push)\nupstream\tgit@github.com:open-mmlab/mmcv (fetch)\nupstream\tgit@github.com:open-mmlab/mmcv (push)\n```\n\n> 这里对 origin 和 upstream 进行一个简单的介绍，当我们使用 git clone 来克隆代码时，会默认创建一个 origin 的 remote，它指向我们克隆的代码库地址，而 upstream 则是我们自己添加的，用来指向原始代码库地址。当然如果你不喜欢他叫 upstream，也可以自己修改，比如叫 open-mmlab。我们通常向 origin 提交代码（即 fork 下来的远程仓库），然后向 upstream 提交一个 pull request。如果提交的代码和最新的代码发生冲突，再从 upstream 拉取最新的代码，和本地分支解决冲突，再提交到 origin。\n\n#### 2. 配置 pre-commit\n\n在本地开发环境中，我们使用 [pre-commit](https://pre-commit.com/#intro) 来检查代码风格，以确保代码风格的统一。在提交代码，需要先安装 pre-commit（需要在 MMCV 目录下执行）:\n\n```shell\npip install -U pre-commit\npre-commit install\n```\n\n检查 pre-commit 是否配置成功，并安装 `.pre-commit-config.yaml` 中的钩子：\n\n```shell\npre-commit run --all-files\n```\n\n<img src=\"https://user-images.githubusercontent.com/57566630/173660750-3df20a63-cb66-4d33-a986-1f643f1d8aaf.png\" width=\"1200\">\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202368856-0465a90d-8fce-4345-918e-67b8b9c82614.png\" width=\"1200\">\n\n> 如果你是中国用户，由于网络原因，可能会出现安装失败的情况，这时可以使用国内源\n\n> pre-commit install -c .pre-commit-config-zh-cn.yaml\n\n> pre-commit run --all-files -c .pre-commit-config-zh-cn.yaml\n\n如果安装过程被中断，可以重复执行 `pre-commit run ...` 继续安装。\n\n如果提交的代码不符合代码风格规范，pre-commit 会发出警告，并自动修复部分错误。\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202369176-67642454-0025-4023-a095-263529107aa3.png\" width=\"1200\">\n\n如果我们想临时绕开 pre-commit 的检查提交一次代码，可以在 `git commit` 时加上 `--no-verify`（需要保证最后推送至远程仓库的代码能够通过 pre-commit 检查）。\n\n```shell\ngit commit -m \"xxx\" --no-verify\n```\n\n#### 3. 创建开发分支\n\n安装完 pre-commit 之后，我们需要基于 master 创建开发分支，建议的分支命名规则为 `username/pr_name`。\n\n```shell\ngit checkout -b yhc/refactor_contributing_doc\n```\n\n在后续的开发中，如果本地仓库的 master 分支落后于 upstream 的 master 分支，我们需要先拉取 upstream 的代码进行同步，再执行上面的命令\n\n```shell\ngit pull upstream master\n```\n\n#### 4. 提交代码并在本地通过单元测试\n\n- MMCV 引入了 mypy 来做静态类型检查，以增加代码的鲁棒性。因此我们在提交代码时，需要补充 Type Hints。具体规则可以参考[教程](https://zhuanlan.zhihu.com/p/519335398)。\n\n- 提交的代码同样需要通过单元测试\n\n  ```shell\n  # 通过全量单元测试\n  pytest tests\n\n  # 我们需要保证提交的代码能够通过修改模块的单元测试，以 runner 为例\n  pytest tests/test_runner/test_runner.py\n  ```\n\n  如果你由于缺少依赖无法运行修改模块的单元测试，可以参考[指引-单元测试](#单元测试)\n\n- 如果修改/添加了文档，参考[指引](#文档渲染)确认文档渲染正常。\n\n#### 5. 推送代码到远程\n\n代码通过单元测试和 pre-commit 检查后，将代码推送到远程仓库，如果是第一次推送，可以在 `git push` 后加上 `-u` 参数以关联远程分支\n\n```shell\ngit push -u origin {branch_name}\n```\n\n这样下次就可以直接使用 `git push` 命令推送代码了，而无需指定分支和远程仓库。\n\n#### 6. 提交拉取请求（PR）\n\n(1) 在 GitHub 的 Pull request 界面创建拉取请求\n<img src=\"https://user-images.githubusercontent.com/57566630/201533288-516f7ac4-0b14-4dc8-afbd-912475c368b5.png\" width=\"1200\">\n\n(2) 根据指引修改 PR 描述，以便于其他开发者更好地理解你的修改\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202242953-c91a18ff-e388-4ff9-8591-5fae0ead6c1e.png\" width=\"1200\">\n\n描述规范详见[拉取请求规范](#拉取请求规范)\n\n&#160;\n\n**注意事项**\n\n(a) PR 描述应该包含修改理由、修改内容以及修改后带来的影响，并关联相关 Issue（具体方式见[文档](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)）\n\n(b) 如果是第一次为 OpenMMLab 做贡献，需要签署 CLA\n\n<img src=\"https://user-images.githubusercontent.com/57566630/167307569-a794b967-6e28-4eac-a942-00deb657815f.png\" width=\"1200\">\n\n(c) 检查提交的 PR 是否通过 CI（集成测试）\n\n<img src=\"https://user-images.githubusercontent.com/57566630/167307490-f9ebf9fa-63c0-4d83-8ba1-081ea169eb3a.png\" width=\"1200\">\n\nMMCV 会在不同的平台（Linux、Window、Mac），基于不同版本的 Python、PyTorch、CUDA 对提交的代码进行单元测试，以保证代码的正确性，如果有任何一个没有通过，我们可点击上图中的 `Details` 来查看具体的测试信息，以便于我们修改代码。\n\n(3) 如果 PR 通过了 CI，那么就可以等待其他开发者的 review，并根据 reviewer 的意见，修改代码，并重复 [4](#4-提交代码并本地通过单元测试)-[5](#5-推送代码到远程) 步骤，直到 reviewer 同意合入 PR。\n\n<img src=\"https://user-images.githubusercontent.com/57566630/202145400-cc2cd8c4-10b0-472f-ba37-07e6f50acc67.png\" width=\"1200\">\n\n所有 reviewer 同意合入 PR 后，我们会尽快将 PR 合并到主分支。\n\n#### 7. 解决冲突\n\n随着时间的推移，我们的代码库会不断更新，这时候，如果你的 PR 与主分支存在冲突，你需要解决冲突，解决冲突的方式有两种：\n\n```shell\ngit fetch --all --prune\ngit rebase upstream/master\n```\n\n或者\n\n```shell\ngit fetch --all --prune\ngit merge upstream/master\n```\n\n如果你非常善于处理冲突，那么可以使用 rebase 的方式来解决冲突，因为这能够保证你的 commit log 的整洁。如果你不太熟悉 `rebase` 的使用，那么可以使用 `merge` 的方式来解决冲突。\n\n### 指引\n\n#### 单元测试\n\n如果你无法正常执行部分模块的单元测试，例如 [video](https://github.com/open-mmlab/mmcv/tree/master/mmcv/video) 模块，可能是你的当前环境没有安装以下依赖\n\n```shell\n# Linux\nsudo apt-get update -y\nsudo apt-get install -y libturbojpeg\nsudo apt-get install -y ffmpeg\n\n# Windows\nconda install ffmpeg\n```\n\n在提交修复代码错误或新增特性的拉取请求时，我们应该尽可能的让单元测试覆盖所有提交的代码，计算单元测试覆盖率的方法如下\n\n```shell\npython -m coverage run -m pytest /path/to/test_file\npython -m coverage html\n# check file in htmlcov/index.html\n```\n\n#### 文档渲染\n\n在提交修复代码错误或新增特性的拉取请求时，可能会需要修改/新增模块的 docstring。我们需要确认渲染后的文档样式是正确的。\n本地生成渲染后的文档的方法如下\n\n```shell\npip install -r requirements/docs.txt\ncd docs/zh_cn/\n# or docs/en\nmake html\n# check file in ./docs/zh_cn/_build/html/index.html\n```\n\n### 代码风格\n\n#### Python\n\n[PEP8](https://www.python.org/dev/peps/pep-0008/) 作为 OpenMMLab 算法库首选的代码规范，我们使用以下工具检查和格式化代码\n\n- [flake8](https://github.com/PyCQA/flake8): Python 官方发布的代码规范检查工具，是多个检查工具的封装\n- [isort](https://github.com/timothycrosley/isort): 自动调整模块导入顺序的工具\n- [yapf](https://github.com/google/yapf): Google 发布的代码规范检查工具\n- [codespell](https://github.com/codespell-project/codespell): 检查单词拼写是否有误\n- [mdformat](https://github.com/executablebooks/mdformat): 检查 markdown 文件的工具\n- [docformatter](https://github.com/myint/docformatter): 格式化 docstring 的工具\n\nyapf 和 isort 的配置可以在 [setup.cfg](./setup.cfg) 找到\n\n通过配置 [pre-commit hook](https://pre-commit.com/) ，我们可以在提交代码时自动检查和格式化 `flake8`、`yapf`、`isort`、`trailing whitespaces`、`markdown files`，\n修复 `end-of-files`、`double-quoted-strings`、`python-encoding-pragma`、`mixed-line-ending`，调整 `requirments.txt` 的包顺序。\npre-commit 钩子的配置可以在 [.pre-commit-config](./.pre-commit-config.yaml) 找到。\n\npre-commit 具体的安装使用方式见[拉取请求](#2-配置-pre-commit)。\n\n更具体的规范请参考 [OpenMMLab 代码规范](code_style.md)。\n\n#### C++ and CUDA\n\nC++ 和 CUDA 的代码规范遵从 [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html)\n\n### 拉取请求规范\n\n1. 使用 [pre-commit hook](https://pre-commit.com)，尽量减少代码风格相关问题\n\n2. 一个`拉取请求`对应一个短期分支\n\n3. 粒度要细，一个`拉取请求`只做一件事情，避免超大的`拉取请求`\n\n   - Bad：实现 Faster R-CNN\n   - Acceptable：给 Faster R-CNN 添加一个 box head\n   - Good：给 box head 增加一个参数来支持自定义的 conv 层数\n\n4. 每次 Commit 时需要提供清晰且有意义 commit 信息\n\n5. 提供清晰且有意义的`拉取请求`描述\n\n   - 标题写明白任务名称，一般格式:\\[Prefix\\] Short description of the pull request (Suffix)\n   - prefix: 新增功能 \\[Feature\\], 修 bug \\[Fix\\], 文档相关 \\[Docs\\], 开发中 \\[WIP\\] (暂时不会被review)\n   - 描述里介绍`拉取请求`的主要修改内容，结果，以及对其他部分的影响, 参考`拉取请求`模板\n   - 关联相关的`议题` (issue) 和其他`拉取请求`\n\n6. 如果引入了其他三方库，或借鉴了三方库的代码，请确认他们的许可证和 mmcv 兼容，并在借鉴的代码上补充 `This code is inspired from http://`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1455078125,
          "content": "Copyright (c) OpenMMLab. All rights reserved\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018-2020 Open-MMLab. All rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSES.md",
          "type": "blob",
          "size": 1.5546875,
          "content": "# Licenses for special operations\n\nIn this file, we list the operations with other licenses instead of Apache 2.0. Users should be careful about adopting these operations in any commercial matters.\n\n|    Operation     |                                                                             Files                                                                              |    License     |\n| :--------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------: |\n|    upfirdn2d     |          [mmcv/ops/csrc/pytorch/cuda/upfirdn2d_kernel.cu](https://github.com/open-mmlab/mmcv/tree/2.x/mmcv/ops/csrc/pytorch/cuda/upfirdn2d_kernel.cu)          | NVIDIA License |\n| fused_leaky_relu | [mmcv/ops/csrc/pytorch/cuda/fused_bias_leakyrelu_cuda.cu](https://github.com/open-mmlab/mmcv/tree/2.x/mmcv/ops/csrc/pytorch/cuda/fused_bias_leakyrelu_cuda.cu) | NVIDIA License |\n|     bias_act     |             [mmcv/ops/csrc/pytorch/cuda/bias_act_cuda.cu](https://github.com/open-mmlab/mmcv/tree/2.x/mmcv/ops/csrc/pytorch/cuda/bias_act_cuda.cu)             | NVIDIA License |\n|  filtered_lrelu  |            [mmcv/ops/csrc/pytorch/cuda/filtered_lrelu.cu](https://github.com/open-mmlab/mmcv/tree/2.x/mmcv/ops/csrc/pytorch/cuda/filtered_lrelu.cu)            | NVIDIA License |\n|  conv2d_gradfix  |                              [mmcv/ops/conv2d_gradfix.py](https://github.com/open-mmlab/mmcv/tree/2.x/mmcv/ops/conv2d_gradfix.py)                              | NVIDIA License |\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.478515625,
          "content": "include requirements/runtime.txt\ninclude mmcv/ops/csrc/common/cuda/*.cuh mmcv/ops/csrc/common/cuda/*.hpp mmcv/ops/csrc/common/*.hpp\ninclude mmcv/ops/csrc/pytorch/*.cpp mmcv/ops/csrc/pytorch/cuda/*.cu mmcv/ops/csrc/pytorch/cuda/*.cpp mmcv/ops/csrc/pytorch/cpu/*.cpp\ninclude mmcv/ops/csrc/parrots/*.h mmcv/ops/csrc/parrots/*.cpp\ninclude mmcv/ops/csrc/pytorch/mps/*.mm mmcv/ops/csrc/common/mps/*.h mmcv/ops/csrc/common/mps/*.mm\nrecursive-include mmcv/ops/csrc/ *.h *.hpp *.cpp *.cuh *.cu *.mm\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.328125,
          "content": "<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/open-mmlab/mmcv/main/docs/en/mmcv-logo.png\" width=\"300\"/>\n  <div>&nbsp;</div>\n  <div align=\"center\">\n    <b><font size=\"5\">OpenMMLab website</font></b>\n    <sup>\n      <a href=\"https://openmmlab.com\">\n        <i><font size=\"4\">HOT</font></i>\n      </a>\n    </sup>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <b><font size=\"5\">OpenMMLab platform</font></b>\n    <sup>\n      <a href=\"https://platform.openmmlab.com\">\n        <i><font size=\"4\">TRY IT OUT</font></i>\n      </a>\n    </sup>\n  </div>\n  <div>&nbsp;</div>\n\n[![platform](https://img.shields.io/badge/platform-Linux%7CWindows%7CmacOS-blue)](https://mmcv.readthedocs.io/en/latest/get_started/installation.html)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mmcv)](https://pypi.org/project/mmcv/)\n[![pytorch](https://img.shields.io/badge/pytorch-1.8~2.0-orange)](https://pytorch.org/get-started/previous-versions/)\n[![cuda](https://img.shields.io/badge/cuda-10.1~11.8-green)](https://developer.nvidia.com/cuda-downloads)\n[![PyPI](https://img.shields.io/pypi/v/mmcv)](https://pypi.org/project/mmcv)\n[![badge](https://github.com/open-mmlab/mmcv/workflows/build/badge.svg)](https://github.com/open-mmlab/mmcv/actions)\n[![codecov](https://codecov.io/gh/open-mmlab/mmcv/branch/master/graph/badge.svg)](https://codecov.io/gh/open-mmlab/mmcv)\n[![license](https://img.shields.io/github/license/open-mmlab/mmcv.svg)](https://github.com/open-mmlab/mmcv/blob/master/LICENSE)\n\n[📘Documentation](https://mmcv.readthedocs.io/en/latest/) |\n[🛠️Installation](https://mmcv.readthedocs.io/en/latest/get_started/installation.html) |\n[🤔Reporting Issues](https://github.com/open-mmlab/mmcv/issues/new/choose)\n\n</div>\n\n<div align=\"center\">\n\nEnglish | [简体中文](README_zh-CN.md)\n\n</div>\n\n## Highlights\n\nThe OpenMMLab team released a new generation of training engine [MMEngine](https://github.com/open-mmlab/mmengine) at the World Artificial Intelligence Conference on September 1, 2022. It is a foundational library for training deep learning models. Compared with MMCV, it provides a universal and powerful runner, an open architecture with a more unified interface, and a more customizable training process.\n\nMMCV v2.0.0 official version was released on April 6, 2023. In version 2.x, it removed components related to the training process and added a data transformation module. Also, starting from 2.x, it renamed the package names **mmcv** to **mmcv-lite** and **mmcv-full** to **mmcv**. For details, see [Compatibility Documentation](docs/en/compatibility.md).\n\nMMCV will maintain both [1.x](https://github.com/open-mmlab/mmcv/tree/1.x) (corresponding to the original [master](https://github.com/open-mmlab/mmcv/tree/master) branch) and **2.x** (corresponding to the **main** branch, now the default branch) versions simultaneously. For details, see [Branch Maintenance Plan](README.md#branch-maintenance-plan).\n\n## Introduction\n\nMMCV is a foundational library for computer vision research and it provides the following functionalities:\n\n- [Image/Video processing](https://mmcv.readthedocs.io/en/latest/understand_mmcv/data_process.html)\n- [Image and annotation visualization](https://mmcv.readthedocs.io/en/latest/understand_mmcv/visualization.html)\n- [Image transformation](https://mmcv.readthedocs.io/en/latest/understand_mmcv/data_transform.html)\n- [Various CNN architectures](https://mmcv.readthedocs.io/en/latest/understand_mmcv/cnn.html)\n- [High-quality implementation of common CPU and CUDA ops](https://mmcv.readthedocs.io/en/latest/understand_mmcv/ops.html)\n\nIt supports the following systems:\n\n- Linux\n- Windows\n- macOS\n\nSee the [documentation](http://mmcv.readthedocs.io/en/latest) for more features and usage.\n\nNote: MMCV requires Python 3.7+.\n\n## Installation\n\nThere are two versions of MMCV:\n\n- **mmcv**: comprehensive, with full features and various CUDA ops out of the box. It takes longer time to build.\n- **mmcv-lite**: lite, without CUDA ops but all other features, similar to mmcv\\<1.0.0. It is useful when you do not need those CUDA ops.\n\n**Note**: Do not install both versions in the same environment, otherwise you may encounter errors like `ModuleNotFound`. You need to uninstall one before installing the other. `Installing the full version is highly recommended if CUDA is available`.\n\n### Install mmcv\n\nBefore installing mmcv, make sure that PyTorch has been successfully installed following the [PyTorch official installation guide](https://github.com/pytorch/pytorch#installation). For apple silicon users, please use PyTorch 1.13+.\n\nThe command to install mmcv:\n\n```bash\npip install -U openmim\nmim install mmcv\n```\n\nIf you need to specify the version of mmcv, you can use the following command:\n\n```bash\nmim install mmcv==2.0.0\n```\n\nIf you find that the above installation command does not use a pre-built package ending with `.whl` but a source package ending with `.tar.gz`, you may not have a pre-build package corresponding to the PyTorch or CUDA or mmcv version, in which case you can [build mmcv from source](https://mmcv.readthedocs.io/en/latest/get_started/build.html).\n\n<details>\n<summary>Installation log using pre-built packages</summary>\n\nLooking in links: https://download.openmmlab.com/mmcv/dist/cu102/torch1.8.0/index.html<br />\nCollecting mmcv<br />\n<b>Downloading https://download.openmmlab.com/mmcv/dist/cu102/torch1.8.0/mmcv-2.0.0-cp38-cp38-manylinux1_x86_64.whl</b>\n\n</details>\n\n<details>\n<summary>Installation log using source packages</summary>\n\nLooking in links: https://download.openmmlab.com/mmcv/dist/cu102/torch1.8.0/index.html<br />\nCollecting mmcv==2.0.0<br />\n<b>Downloading mmcv-2.0.0.tar.gz</b>\n\n</details>\n\nFor more installation methods, please refer to the [Installation documentation](https://mmcv.readthedocs.io/en/latest/get_started/installation.html).\n\n### Install mmcv-lite\n\nIf you need to use PyTorch-related modules, make sure PyTorch has been successfully installed in your environment by referring to the [PyTorch official installation guide](https://github.com/pytorch/pytorch#installation).\n\n```bash\npip install -U openmim\nmim install mmcv-lite\n```\n\n## FAQ\n\nIf you face some installation issues, CUDA related issues or RuntimeErrors,\nyou may first refer to this [Frequently Asked Questions](https://mmcv.readthedocs.io/en/latest/faq.html).\n\nIf you face installation problems or runtime issues, you may first refer to this [Frequently Asked Questions](https://mmcv.readthedocs.io/en/latest/faq.html) to see if there is a solution. If the problem is still not solved, feel free to open an [issue](https://github.com/open-mmlab/mmcv/issues).\n\n## Citation\n\nIf you find this project useful in your research, please consider cite:\n\n```latex\n@misc{mmcv,\n    title={{MMCV: OpenMMLab} Computer Vision Foundation},\n    author={MMCV Contributors},\n    howpublished = {\\url{https://github.com/open-mmlab/mmcv}},\n    year={2018}\n}\n```\n\n## Contributing\n\nWe appreciate all contributions to improve MMCV. Please refer to [CONTRIBUTING.md](CONTRIBUTING.md) for the contributing guideline.\n\n## License\n\nMMCV is released under the Apache 2.0 license, while some specific operations in this library are with other licenses. Please refer to [LICENSES.md](LICENSES.md) for the careful check, if you are using our code for commercial matters.\n\n## Branch Maintenance Plan\n\nMMCV currently has four branches, namely main, 1.x, master, and 2.x, where 2.x is an alias for the main branch, and master is an alias for the 1.x branch. The 2.x and master branches will be deleted in the future. MMCV's branches go through the following three stages:\n\n| Phase                | Time                  | Branch                                                                                                                              | description                                                                                                                                            |\n| -------------------- | --------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| RC Period            | 2022.9.1 - 2023.4.5   | Release candidate code (2.x version) will be released on 2.x branch. Default master branch is still 1.x version                     | Master and 2.x branches iterate normally                                                                                                               |\n| Compatibility Period | 2023.4.6 - 2023.12.31 | **The 2.x branch has been renamed to the main branch and set as the default branch**, and 1.x branch will correspond to 1.x version | We still maintain the old version 1.x, respond to user needs, but try not to introduce changes that break compatibility; main branch iterates normally |\n| Maintenance Period   | From 2024/1/1         | Default main branch corresponds to 2.x version and 1.x branch is 1.x version                                                        | 1.x branch is in maintenance phase, no more new feature support; main branch is iterating normally                                                     |\n\n## Projects in OpenMMLab\n\n- [MMEngine](https://github.com/open-mmlab/mmengine): OpenMMLab foundational library for training deep learning models.\n- [MMCV](https://github.com/open-mmlab/mmcv): OpenMMLab foundational library for computer vision.\n- [MIM](https://github.com/open-mmlab/mim): MIM installs OpenMMLab packages.\n- [MMClassification](https://github.com/open-mmlab/mmclassification): OpenMMLab image classification toolbox and benchmark.\n- [MMDetection](https://github.com/open-mmlab/mmdetection): OpenMMLab detection toolbox and benchmark.\n- [MMDetection3D](https://github.com/open-mmlab/mmdetection3d): OpenMMLab's next-generation platform for general 3D object detection.\n- [MMRotate](https://github.com/open-mmlab/mmrotate): OpenMMLab rotated object detection toolbox and benchmark.\n- [MMYOLO](https://github.com/open-mmlab/mmyolo): OpenMMLab YOLO series toolbox and benchmark.\n- [MMSegmentation](https://github.com/open-mmlab/mmsegmentation): OpenMMLab semantic segmentation toolbox and benchmark.\n- [MMOCR](https://github.com/open-mmlab/mmocr): OpenMMLab text detection, recognition, and understanding toolbox.\n- [MMPose](https://github.com/open-mmlab/mmpose): OpenMMLab pose estimation toolbox and benchmark.\n- [MMHuman3D](https://github.com/open-mmlab/mmhuman3d): OpenMMLab 3D human parametric model toolbox and benchmark.\n- [MMSelfSup](https://github.com/open-mmlab/mmselfsup): OpenMMLab self-supervised learning toolbox and benchmark.\n- [MMRazor](https://github.com/open-mmlab/mmrazor): OpenMMLab model compression toolbox and benchmark.\n- [MMFewShot](https://github.com/open-mmlab/mmfewshot): OpenMMLab fewshot learning toolbox and benchmark.\n- [MMAction2](https://github.com/open-mmlab/mmaction2): OpenMMLab's next-generation action understanding toolbox and benchmark.\n- [MMTracking](https://github.com/open-mmlab/mmtracking): OpenMMLab video perception toolbox and benchmark.\n- [MMFlow](https://github.com/open-mmlab/mmflow): OpenMMLab optical flow toolbox and benchmark.\n- [MMEditing](https://github.com/open-mmlab/mmediting): OpenMMLab image and video editing toolbox.\n- [MMGeneration](https://github.com/open-mmlab/mmgeneration): OpenMMLab image and video generative models toolbox.\n- [MMDeploy](https://github.com/open-mmlab/mmdeploy): OpenMMLab model deployment framework.\n"
        },
        {
          "name": "README_zh-CN.md",
          "type": "blob",
          "size": 13.158203125,
          "content": "<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/open-mmlab/mmcv/main/docs/en/mmcv-logo.png\" width=\"300\"/>\n  <div>&nbsp;</div>\n  <div align=\"center\">\n    <b><font size=\"5\">OpenMMLab 官网</font></b>\n    <sup>\n      <a href=\"https://openmmlab.com\">\n        <i><font size=\"4\">HOT</font></i>\n      </a>\n    </sup>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <b><font size=\"5\">OpenMMLab 开放平台</font></b>\n    <sup>\n      <a href=\"https://platform.openmmlab.com\">\n        <i><font size=\"4\">TRY IT OUT</font></i>\n      </a>\n    </sup>\n  </div>\n  <div>&nbsp;</div>\n\n[![platform](https://img.shields.io/badge/platform-Linux%7CWindows%7CmacOS-blue)](https://mmcv.readthedocs.io/zh_CN/latest/get_started/installation.html)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mmcv)](https://pypi.org/project/mmcv/)\n[![pytorch](https://img.shields.io/badge/pytorch-1.8~2.0-orange)](https://pytorch.org/get-started/previous-versions/)\n[![cuda](https://img.shields.io/badge/cuda-10.1~11.8-green)](https://developer.nvidia.com/cuda-downloads)\n[![PyPI](https://img.shields.io/pypi/v/mmcv)](https://pypi.org/project/mmcv)\n[![badge](https://github.com/open-mmlab/mmcv/workflows/build/badge.svg)](https://github.com/open-mmlab/mmcv/actions)\n[![codecov](https://codecov.io/gh/open-mmlab/mmcv/branch/master/graph/badge.svg)](https://codecov.io/gh/open-mmlab/mmcv)\n[![license](https://img.shields.io/github/license/open-mmlab/mmcv.svg)](https://github.com/open-mmlab/mmcv/blob/master/LICENSE)\n\n[📘使用文档](https://mmcv.readthedocs.io/zh_CN/latest/) |\n[🛠️安装教程](https://mmcv.readthedocs.io/zh_CN/latest/get_started/installation.html) |\n[🤔报告问题](https://github.com/open-mmlab/mmcv/issues/new/choose)\n\n</div>\n\n<div align=\"center\">\n\n[English](README.md) | 简体中文\n\n</div>\n\n<div align=\"center\">\n  <a href=\"https://openmmlab.medium.com/\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/219255827-67c1a27f-f8c5-46a9-811d-5e57448c61d1.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://discord.gg/raweFPmdzG\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/218347213-c080267f-cbb6-443e-8532-8e1ed9a58ea9.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://twitter.com/OpenMMLab\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/218346637-d30c8a0f-3eba-4699-8131-512fb06d46db.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://www.youtube.com/openmmlab\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/218346691-ceb2116a-465a-40af-8424-9f30d2348ca9.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://space.bilibili.com/1293512903\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/219026751-d7d14cce-a7c9-4e82-9942-8375fca65b99.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://www.zhihu.com/people/openmmlab\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/219026120-ba71e48b-6e94-4bd4-b4e9-b7d175b5e362.png\" width=\"3%\" alt=\"\" /></a>\n</div>\n\n## Highlights\n\nOpenMMLab 团队于 2022 年 9 月 1 日在世界人工智能大会发布了新一代训练引擎 [MMEngine](https://github.com/open-mmlab/mmengine)，它是一个用于训练深度学习模型的基础库。相比于 MMCV，它提供了更高级且通用的训练器、接口更加统一的开放架构以及可定制化程度更高的训练流程。\n\nMMCV v2.0.0 正式版本于 2023 年 4 月 6 日发布。在 2.x 版本中，它删除了和训练流程相关的组件，并新增了数据变换模块。另外，从 2.x 版本开始，重命名包名 **mmcv** 为 **mmcv-lite** 以及 **mmcv-full** 为 **mmcv**。详情见[兼容性文档](docs/zh_cn/compatibility.md)。\n\nMMCV 会同时维护 [1.x](https://github.com/open-mmlab/mmcv/tree/1.x) (对应原 [master](https://github.com/open-mmlab/mmcv/tree/master) 分支) 和 **2.x**（对应 **main** 分支，现为默认分支）版本，详情见[分支维护计划](README_zh-CN.md#分支维护计划)。\n\n## 简介\n\nMMCV 是一个面向计算机视觉的基础库，它提供了以下功能：\n\n- [图像和视频处理](https://mmcv.readthedocs.io/zh_CN/latest/understand_mmcv/data_process.html)\n- [图像和标注结果可视化](https://mmcv.readthedocs.io/zh_CN/latest/understand_mmcv/visualization.html)\n- [图像变换](https://mmcv.readthedocs.io/zh_CN/latest/understand_mmcv/data_transform.html)\n- [多种 CNN 网络结构](https://mmcv.readthedocs.io/zh_CN/latest/understand_mmcv/cnn.html)\n- [高质量实现的常见 CUDA 算子](https://mmcv.readthedocs.io/zh_CN/latest/understand_mmcv/ops.html)\n\nMMCV 支持多种平台，包括：\n\n- Linux\n- Windows\n- macOS\n\n如想了解更多特性和使用，请参考[文档](http://mmcv.readthedocs.io/zh_CN/latest)。\n\n提示: MMCV 需要 Python 3.7 以上版本。\n\n## 安装\n\nMMCV 有两个版本：\n\n- **mmcv**: 完整版，包含所有的特性以及丰富的开箱即用的 CUDA 算子。注意完整版本可能需要更长时间来编译。\n- **mmcv-lite**: 精简版，不包含 CUDA 算子但包含其余所有特性和功能，类似 MMCV 1.0 之前的版本。如果你不需要使用 CUDA 算子的话，精简版可以作为一个考虑选项。\n\n**注意**: 请不要在同一个环境中安装两个版本，否则可能会遇到类似 `ModuleNotFound` 的错误。在安装一个版本之前，需要先卸载另一个。`如果 CUDA 可用，强烈推荐安装 mmcv`。\n\n### 安装 mmcv\n\n在安装 mmcv 之前，请确保 PyTorch 已经成功安装在环境中，可以参考 [PyTorch 官方安装文档](https://github.com/pytorch/pytorch#installation)。如果你使用的是搭载 apple silicon 的 mac 设备，请安装 PyTorch 1.13+ 的版本。\n\n安装 mmcv 的命令如下：\n\n```bash\npip install -U openmim\nmim install mmcv\n```\n\n如果需要指定 mmcv 的版本，可以使用以下命令\n\n```bash\nmim install mmcv==2.0.0\n```\n\n如果发现上述的安装命令没有使用预编译包（以 `.whl` 结尾）而是使用源码包（以 `.tar.gz` 结尾）安装，则有可能是我们没有提供和当前环境的 PyTorch 版本、CUDA 版本相匹配的 mmcv 预编译包，此时，你可以[源码安装 mmcv](https://mmcv.readthedocs.io/zh_CN/latest/get_started/build.html)。\n\n<details>\n<summary>使用预编译包的安装日志</summary>\n\nLooking in links: https://download.openmmlab.com/mmcv/dist/cu102/torch1.8.0/index.html<br />\nCollecting mmcv<br />\n<b>Downloading https://download.openmmlab.com/mmcv/dist/cu102/torch1.8.0/mmcv-2.0.0-cp38-cp38-manylinux1_x86_64.whl</b>\n\n</details>\n\n<details>\n<summary>使用源码包的安装日志</summary>\n\nLooking in links: https://download.openmmlab.com/mmcv/dist/cu102/torch1.8.0/index.html<br />\nCollecting mmcv==2.0.0<br />\n<b>Downloading mmcv-2.0.0.tar.gz</b>\n\n</details>\n\n更多安装方式请参考[安装文档](https://mmcv.readthedocs.io/zh_CN/latest/get_started/installation.html)。\n\n### 安装 mmcv-lite\n\n如果你需要使用和 PyTorch 相关的模块，请确保 PyTorch 已经成功安装在环境中，可以参考 [PyTorch 官方安装文档](https://github.com/pytorch/pytorch#installation)。\n\n```bash\npip install -U openmim\nmim install mmcv-lite\n```\n\n## FAQ\n\n如果你遇到了安装问题或者运行时问题，请查看[问题解决页面](https://mmcv.readthedocs.io/zh_CN/latest/faq.html)是否已有解决方案。如果问题仍然没有解决，欢迎提 [issue](https://github.com/open-mmlab/mmcv/issues)。\n\n## 贡献指南\n\n我们感谢所有的贡献者为改进和提升 MMCV 所作出的努力。请参考[贡献指南](CONTRIBUTING.md)来了解参与项目贡献的相关指引。\n\n## 许可证\n\n`MMCV` 目前以 Apache 2.0 的许可证发布，但是其中有一部分功能并不是使用的 Apache2.0 许可证，我们在 [许可证](LICENSES.md) 中详细地列出了这些功能以及他们对应的许可证，如果您正在从事盈利性活动，请谨慎参考此文档。\n\n## 分支维护计划\n\nMMCV 目前有四个分支，分别是 main、1.x、master 和 2.x，其中 2.x 为 main 分支的别名，master 为 1.x 分支的别名，2.x 和 master 这两个分支在将来会被删除。MMCV 的分支经历以下三个阶段：\n\n| 阶段   | 时间                  | 分支                                                                  | 说明                                                                                                   |\n| ------ | --------------------- | --------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| 公测期 | 2022.9.1 - 2023.4.5   | 公测版代码发布在 2.x 分支；默认主分支 master 仍对应 1.x 版本          | master 和 2.x 分支正常进行迭代                                                                         |\n| 兼容期 | 2023.4.6 - 2023.12.31 | **2.x 分支重命名为 main 分支并设置为默认分支**；1.x 分支对应 1.x 版本 | 保持对旧版本 1.x 的维护和开发，响应用户需求，但尽量不引进破坏旧版本兼容性的改动；main 分支正常进行迭代 |\n| 维护期 | 2024.1.1 - 待定       | 默认主分支 main 为 2.x 版本；1.x 分支对应 1.x 版本                    | 1.x 分支进入维护阶段，不再进行新功能支持；main 分支正常进行迭代                                        |\n\n## OpenMMLab 的其他项目\n\n- [MMEngine](https://github.com/open-mmlab/mmengine): OpenMMLab 深度学习模型训练基础库\n- [MMCV](https://github.com/open-mmlab/mmcv): OpenMMLab 计算机视觉基础库\n- [MIM](https://github.com/open-mmlab/mim): MIM 是 OpenMMlab 项目、算法、模型的统一入口\n- [MMClassification](https://github.com/open-mmlab/mmclassification): OpenMMLab 图像分类工具箱\n- [MMDetection](https://github.com/open-mmlab/mmdetection): OpenMMLab 目标检测工具箱\n- [MMDetection3D](https://github.com/open-mmlab/mmdetection3d): OpenMMLab 新一代通用 3D 目标检测平台\n- [MMRotate](https://github.com/open-mmlab/mmrotate): OpenMMLab 旋转框检测工具箱与测试基准\n- [MMYOLO](https://github.com/open-mmlab/mmyolo): OpenMMLab YOLO 系列工具箱与测试基准\n- [MMSegmentation](https://github.com/open-mmlab/mmsegmentation): OpenMMLab 语义分割工具箱\n- [MMOCR](https://github.com/open-mmlab/mmocr): OpenMMLab 全流程文字检测识别理解工具箱\n- [MMPose](https://github.com/open-mmlab/mmpose): OpenMMLab 姿态估计工具箱\n- [MMHuman3D](https://github.com/open-mmlab/mmhuman3d): OpenMMLab 人体参数化模型工具箱与测试基准\n- [MMSelfSup](https://github.com/open-mmlab/mmselfsup): OpenMMLab 自监督学习工具箱与测试基准\n- [MMRazor](https://github.com/open-mmlab/mmrazor): OpenMMLab 模型压缩工具箱与测试基准\n- [MMFewShot](https://github.com/open-mmlab/mmfewshot): OpenMMLab 少样本学习工具箱与测试基准\n- [MMAction2](https://github.com/open-mmlab/mmaction2): OpenMMLab 新一代视频理解工具箱\n- [MMTracking](https://github.com/open-mmlab/mmtracking): OpenMMLab 一体化视频目标感知平台\n- [MMFlow](https://github.com/open-mmlab/mmflow): OpenMMLab 光流估计工具箱与测试基准\n- [MMEditing](https://github.com/open-mmlab/mmediting): OpenMMLab 图像视频编辑工具箱\n- [MMGeneration](https://github.com/open-mmlab/mmgeneration): OpenMMLab 图片视频生成模型工具箱\n- [MMDeploy](https://github.com/open-mmlab/mmdeploy): OpenMMLab 模型部署框架\n\n## 欢迎加入 OpenMMLab 社区\n\n扫描下方的二维码可关注 OpenMMLab 团队的 [知乎官方账号](https://www.zhihu.com/people/openmmlab)，加入 OpenMMLab 团队的 [官方交流 QQ 群](https://jq.qq.com/?_wv=1027&k=K0QI8ByU)，或添加微信小助手”OpenMMLabwx“加入官方交流微信群。\n\n<div align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/25839884/205870927-39f4946d-8751-4219-a4c0-740117558fd7.jpg\" height=\"400\" />  <img src=\"https://user-images.githubusercontent.com/25839884/203904835-62392033-02d4-4c73-a68c-c9e4c1e2b07f.jpg\" height=\"400\" /> <img src=\"https://user-images.githubusercontent.com/25839884/205872898-e2e6009d-c6bb-4d27-8d07-117e697a3da8.jpg\" height=\"400\" />\n</div>\n\n我们会在 OpenMMLab 社区为大家\n\n- 📢 分享 AI 框架的前沿核心技术\n- 💻 解读 PyTorch 常用模块源码\n- 📰 发布 OpenMMLab 的相关新闻\n- 🚀 介绍 OpenMMLab 开发的前沿算法\n- 🏃 获取更高效的问题答疑和意见反馈\n- 🔥 提供与各行各业开发者充分交流的平台\n\n干货满满 📘，等你来撩 💗，OpenMMLab 社区期待您的加入 👬\n"
        },
        {
          "name": "TERMINOLOGY.md",
          "type": "blob",
          "size": 1.125,
          "content": "# English-Chinese terminology comparison (英汉术语对照)\n\nThis document is used as a reference for English-Chinese terminology translation.\n\n该文档用作中英文翻译对照参考。\n\n|      English      |     中文     |\n| :---------------: | :----------: |\n|    annotation     |     标注     |\n|     backbone      |   主干网络   |\n|     benchmark     |   基准测试   |\n|    checkpoint     | 模型权重文件 |\n|    classifier     |    分类器    |\n|     cls_head      |    分类头    |\n|      decoder      |    解码器    |\n|     detector      |    检测器    |\n|      encoder      |    编码器    |\n|     finetune      |     微调     |\n|   ground truth    |   真实标签   |\n|       hook        |     钩子     |\n|     localizer     |    定位器    |\n|       neck        |   模型颈部   |\n|     pipeline      |    流水线    |\n|    recognizer     |    识别器    |\n|     register      |    注册器    |\n|     schedule      |     调整     |\n|     scheduler     |    调度器    |\n|     segmentor     |    分割器    |\n|      tensor       |     张量     |\n| training schedule |   训练策略   |\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mmcv",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.10546875,
          "content": "-r requirements/build.txt\n-r requirements/optional.txt\n-r requirements/runtime.txt\n-r requirements/test.txt\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.7373046875,
          "content": "[bdist_wheel]\nuniversal=1\n\n[aliases]\ntest=pytest\n\n[yapf]\nbased_on_style = pep8\nblank_line_before_nested_class_or_def = true\nsplit_before_expression_after_opening_paren = true\n\n[isort]\nline_length = 79\nmulti_line_output = 0\nextra_standard_library = pkg_resources,setuptools,logging,os,warnings,abc\nknown_first_party = mmcv\nknown_third_party = addict,cv2,matplotlib,numpy,onnx,packaging,pytest,pytorch_sphinx_theme,scipy,sphinx,torch,torchvision,yaml,yapf\nno_lines_before = STDLIB,LOCALFOLDER\ndefault_section = THIRDPARTY\n\n# ignore-words-list needs to be lowercase format. For example, if we want to\n# ignore word \"BA\", then we need to append \"ba\" to ignore-words-list rather\n# than \"BA\"\n[codespell]\nquiet-level = 3\nignore-words-list = inout,hist,ba,ro,inh\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 21.212890625,
          "content": "import glob\nimport os\nimport platform\nimport re\nfrom pkg_resources import DistributionNotFound, get_distribution, parse_version\nfrom setuptools import find_packages, setup\n\nEXT_TYPE = ''\ntry:\n    import torch\n    if torch.__version__ == 'parrots':\n        from parrots.utils.build_extension import BuildExtension\n        EXT_TYPE = 'parrots'\n    elif (hasattr(torch, 'is_mlu_available') and torch.is_mlu_available()) or \\\n            os.getenv('FORCE_MLU', '0') == '1':\n        from torch_mlu.utils.cpp_extension import BuildExtension\n        EXT_TYPE = 'pytorch'\n    else:\n        from torch.utils.cpp_extension import BuildExtension\n        EXT_TYPE = 'pytorch'\n    cmd_class = {'build_ext': BuildExtension}\nexcept ModuleNotFoundError:\n    cmd_class = {}\n    print('Skip building ext ops due to the absence of torch.')\n\n\ndef choose_requirement(primary, secondary):\n    \"\"\"If some version of primary requirement installed, return primary, else\n    return secondary.\"\"\"\n    try:\n        name = re.split(r'[!<>=]', primary)[0]\n        get_distribution(name)\n    except DistributionNotFound:\n        return secondary\n\n    return str(primary)\n\n\ndef get_version():\n    version_file = 'mmcv/version.py'\n    with open(version_file, encoding='utf-8') as f:\n        exec(compile(f.read(), version_file, 'exec'))\n    return locals()['__version__']\n\n\ndef parse_requirements(fname='requirements/runtime.txt', with_version=True):\n    \"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"\n    import sys\n    from os.path import exists\n    require_fpath = fname\n\n    def parse_line(line):\n        \"\"\"Parse information from a line in a requirements text file.\"\"\"\n        if line.startswith('-r '):\n            # Allow specifying requirements in other files\n            target = line.split(' ')[1]\n            for info in parse_require_file(target):\n                yield info\n        else:\n            info = {'line': line}\n            if line.startswith('-e '):\n                info['package'] = line.split('#egg=')[1]\n            else:\n                # Remove versioning from the package\n                pat = '(' + '|'.join(['>=', '==', '>']) + ')'\n                parts = re.split(pat, line, maxsplit=1)\n                parts = [p.strip() for p in parts]\n\n                info['package'] = parts[0]\n                if len(parts) > 1:\n                    op, rest = parts[1:]\n                    if ';' in rest:\n                        # Handle platform specific dependencies\n                        # http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies\n                        version, platform_deps = map(str.strip,\n                                                     rest.split(';'))\n                        info['platform_deps'] = platform_deps\n                    else:\n                        version = rest  # NOQA\n                    info['version'] = (op, version)\n            yield info\n\n    def parse_require_file(fpath):\n        with open(fpath) as f:\n            for line in f.readlines():\n                line = line.strip()\n                if line and not line.startswith('#'):\n                    yield from parse_line(line)\n\n    def gen_packages_items():\n        if exists(require_fpath):\n            for info in parse_require_file(require_fpath):\n                parts = [info['package']]\n                if with_version and 'version' in info:\n                    parts.extend(info['version'])\n                if not sys.version.startswith('3.4'):\n                    # apparently package_deps are broken in 3.4\n                    platform_deps = info.get('platform_deps')\n                    if platform_deps is not None:\n                        parts.append(';' + platform_deps)\n                item = ''.join(parts)\n                yield item\n\n    packages = list(gen_packages_items())\n    return packages\n\n\ninstall_requires = parse_requirements()\n\ntry:\n    # OpenCV installed via conda.\n    import cv2  # NOQA: F401\n    major, minor, *rest = cv2.__version__.split('.')\n    if int(major) < 3:\n        raise RuntimeError(\n            f'OpenCV >=3 is required but {cv2.__version__} is installed')\nexcept ImportError:\n    # If first not installed install second package\n    CHOOSE_INSTALL_REQUIRES = [('opencv-python-headless>=3',\n                                'opencv-python>=3')]\n    for main, secondary in CHOOSE_INSTALL_REQUIRES:\n        install_requires.append(choose_requirement(main, secondary))\n\n\ndef get_extensions():\n    extensions = []\n\n    if os.getenv('MMCV_WITH_OPS', '1') == '0':\n        return extensions\n\n    if EXT_TYPE == 'parrots':\n        ext_name = 'mmcv._ext'\n        from parrots.utils.build_extension import Extension\n\n        # new parrots op impl do not use MMCV_USE_PARROTS\n        # define_macros = [('MMCV_USE_PARROTS', None)]\n        define_macros = []\n        include_dirs = []\n        op_files = glob.glob('./mmcv/ops/csrc/pytorch/cuda/*.cu') +\\\n            glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp') +\\\n            glob.glob('./mmcv/ops/csrc/parrots/*.cpp')\n        include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n        include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common/cuda'))\n        op_files.remove('./mmcv/ops/csrc/pytorch/cuda/iou3d_cuda.cu')\n        op_files.remove('./mmcv/ops/csrc/pytorch/cpu/bbox_overlaps_cpu.cpp')\n        op_files.remove('./mmcv/ops/csrc/pytorch/cuda/bias_act_cuda.cu')\n        cuda_args = os.getenv('MMCV_CUDA_ARGS')\n        extra_compile_args = {\n            'nvcc': [cuda_args, '-std=c++14'] if cuda_args else ['-std=c++14'],\n            'cxx': ['-std=c++14'],\n        }\n        if torch.cuda.is_available() or os.getenv('FORCE_CUDA', '0') == '1':\n            define_macros += [('MMCV_WITH_CUDA', None)]\n            extra_compile_args['nvcc'] += [\n                '-D__CUDA_NO_HALF_OPERATORS__',\n                '-D__CUDA_NO_HALF_CONVERSIONS__',\n                '-D__CUDA_NO_HALF2_OPERATORS__',\n            ]\n        ext_ops = Extension(\n            name=ext_name,\n            sources=op_files,\n            include_dirs=include_dirs,\n            define_macros=define_macros,\n            extra_compile_args=extra_compile_args,\n            cuda=True,\n            pytorch=True)\n        extensions.append(ext_ops)\n    elif EXT_TYPE == 'pytorch':\n        ext_name = 'mmcv._ext'\n        from torch.utils.cpp_extension import CppExtension, CUDAExtension\n\n        # prevent ninja from using too many resources\n        try:\n            import psutil\n            num_cpu = len(psutil.Process().cpu_affinity())\n            cpu_use = max(4, num_cpu - 1)\n        except (ModuleNotFoundError, AttributeError):\n            cpu_use = 4\n\n        os.environ.setdefault('MAX_JOBS', str(cpu_use))\n        define_macros = []\n\n        # Before PyTorch1.8.0, when compiling CUDA code, `cxx` is a\n        # required key passed to PyTorch. Even if there is no flag passed\n        # to cxx, users also need to pass an empty list to PyTorch.\n        # Since PyTorch1.8.0, it has a default value so users do not need\n        # to pass an empty list anymore.\n        # More details at https://github.com/pytorch/pytorch/pull/45956\n        extra_compile_args = {'cxx': []}\n\n        if platform.system() != 'Windows':\n            if parse_version(torch.__version__) <= parse_version('1.12.1'):\n                extra_compile_args['cxx'] = ['-std=c++14']\n            else:\n                extra_compile_args['cxx'] = ['-std=c++17']\n        else:\n            if parse_version(torch.__version__) <= parse_version('1.12.1'):\n                extra_compile_args['cxx'] = ['/std:c++14']\n            else:\n                extra_compile_args['cxx'] = ['/std:c++17']\n\n        include_dirs = []\n        library_dirs = []\n        libraries = []\n\n        extra_objects = []\n        extra_link_args = []\n        is_rocm_pytorch = False\n        try:\n            from torch.utils.cpp_extension import ROCM_HOME\n            is_rocm_pytorch = True if ((torch.version.hip is not None) and\n                                       (ROCM_HOME is not None)) else False\n        except ImportError:\n            pass\n\n        if os.getenv('MMCV_WITH_DIOPI', '0') == '1':\n            import mmengine  # NOQA: F401\n            from mmengine.utils.version_utils import digit_version\n            assert digit_version(mmengine.__version__) >= digit_version(\n                '0.7.4'), f'mmengine >= 0.7.4 is required \\\n                but {mmengine.__version__} is installed'\n\n            print(f'Compiling {ext_name} with CPU and DIPU')\n            define_macros += [('MMCV_WITH_DIOPI', None)]\n            define_macros += [('DIOPI_ATTR_WEAK', None)]\n            op_files = glob.glob('./mmcv/ops/csrc/pytorch/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp')\n            extension = CppExtension\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n            dipu_root = os.getenv('DIPU_ROOT')\n            diopi_path = os.getenv('DIOPI_PATH')\n            dipu_path = os.getenv('DIPU_PATH')\n            vendor_include_dirs = os.getenv('VENDOR_INCLUDE_DIRS')\n            nccl_include_dirs = os.getenv('NCCL_INCLUDE_DIRS')\n            pytorch_dir = os.getenv('PYTORCH_DIR')\n            include_dirs.append(dipu_root)\n            include_dirs.append(diopi_path + '/include')\n            include_dirs.append(dipu_path + '/dist/include')\n            include_dirs.append(vendor_include_dirs)\n            include_dirs.append(pytorch_dir + 'torch/include')\n            if nccl_include_dirs:\n                include_dirs.append(nccl_include_dirs)\n            library_dirs += [dipu_root]\n            libraries += ['torch_dipu']\n        elif is_rocm_pytorch or torch.cuda.is_available() or os.getenv(\n                'FORCE_CUDA', '0') == '1':\n            if is_rocm_pytorch:\n                define_macros += [('MMCV_WITH_HIP', None)]\n            define_macros += [('MMCV_WITH_CUDA', None)]\n            cuda_args = os.getenv('MMCV_CUDA_ARGS')\n            extra_compile_args['nvcc'] = [cuda_args] if cuda_args else []\n            op_files = glob.glob('./mmcv/ops/csrc/pytorch/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cuda/*.cu') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cuda/*.cpp')\n            extension = CUDAExtension\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/pytorch'))\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common/cuda'))\n        elif (hasattr(torch, 'is_mlu_available') and\n                torch.is_mlu_available()) or \\\n                os.getenv('FORCE_MLU', '0') == '1':\n            from torch_mlu.utils.cpp_extension import MLUExtension\n\n            def get_mluops_version(file_path):\n                with open(file_path) as f:\n                    for line in f:\n                        if re.search('MLUOP_MAJOR', line):\n                            major = line.strip().split(' ')[2]\n                        if re.search('MLUOP_MINOR', line):\n                            minor = line.strip().split(' ')[2]\n                        if re.search('MLUOP_PATCHLEVEL', line):\n                            patchlevel = line.strip().split(' ')[2]\n                mluops_version = f'v{major}.{minor}.{patchlevel}'\n                return mluops_version\n\n            mmcv_mluops_version = get_mluops_version(\n                './mmcv/ops/csrc/pytorch/mlu/mlu_common_helper.h')\n            mlu_ops_path = os.getenv('MMCV_MLU_OPS_PATH')\n            if mlu_ops_path:\n                exists_mluops_version = get_mluops_version(\n                    mlu_ops_path + '/bangc-ops/mlu_op.h')\n                if exists_mluops_version != mmcv_mluops_version:\n                    print('the version of mlu-ops provided is %s,'\n                          ' while %s is needed.' %\n                          (exists_mluops_version, mmcv_mluops_version))\n                    exit()\n                try:\n                    if os.path.exists('mlu-ops'):\n                        if os.path.islink('mlu-ops'):\n                            os.remove('mlu-ops')\n                            os.symlink(mlu_ops_path, 'mlu-ops')\n                        elif os.path.abspath('mlu-ops') != mlu_ops_path:\n                            os.symlink(mlu_ops_path, 'mlu-ops')\n                    else:\n                        os.symlink(mlu_ops_path, 'mlu-ops')\n                except Exception:\n                    raise FileExistsError(\n                        'mlu-ops already exists, please move it out,'\n                        'or rename or remove it.')\n            else:\n                if not os.path.exists('mlu-ops'):\n                    import requests\n                    mluops_url = 'https://github.com/Cambricon/mlu-ops/' + \\\n                        'archive/refs/tags/' + mmcv_mluops_version + '.zip'\n                    req = requests.get(mluops_url)\n                    with open('./mlu-ops.zip', 'wb') as f:\n                        try:\n                            f.write(req.content)\n                        except Exception:\n                            raise ImportError('failed to download mlu-ops')\n\n                    from zipfile import BadZipFile, ZipFile\n                    with ZipFile('./mlu-ops.zip', 'r') as archive:\n                        try:\n                            archive.extractall()\n                            dir_name = archive.namelist()[0].split('/')[0]\n                            os.rename(dir_name, 'mlu-ops')\n                        except BadZipFile:\n                            print('invalid mlu-ops.zip file')\n                else:\n                    exists_mluops_version = get_mluops_version(\n                        './mlu-ops/bangc-ops/mlu_op.h')\n                    if exists_mluops_version != mmcv_mluops_version:\n                        print('the version of provided mlu-ops is %s,'\n                              ' while %s is needed.' %\n                              (exists_mluops_version, mmcv_mluops_version))\n                        exit()\n\n            define_macros += [('MMCV_WITH_MLU', None)]\n            mlu_args = os.getenv('MMCV_MLU_ARGS', '-DNDEBUG ')\n            mluops_includes = []\n            mluops_includes.append('-I' +\n                                   os.path.abspath('./mlu-ops/bangc-ops'))\n            mluops_includes.append(\n                '-I' + os.path.abspath('./mlu-ops/bangc-ops/kernels'))\n            extra_compile_args['cncc'] = [mlu_args] + \\\n                mluops_includes if mlu_args else mluops_includes\n            extra_compile_args['cxx'] += ['-fno-gnu-unique']\n            op_files = glob.glob('./mmcv/ops/csrc/pytorch/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/mlu/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/common/mlu/*.mlu') + \\\n                glob.glob(\n                    './mlu-ops/bangc-ops/core/**/*.cpp', recursive=True) + \\\n                glob.glob(\n                    './mlu-ops/bangc-ops/kernels/**/*.cpp', recursive=True) + \\\n                glob.glob(\n                    './mlu-ops/bangc-ops/kernels/**/*.mlu', recursive=True)\n            extra_link_args = [\n                '-Wl,--whole-archive',\n                './mlu-ops/bangc-ops/kernels/kernel_wrapper/lib/libextops.a',\n                '-Wl,--no-whole-archive'\n            ]\n            extension = MLUExtension\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common/mlu'))\n            include_dirs.append(os.path.abspath('./mlu-ops/bangc-ops'))\n        elif (hasattr(torch.backends, 'mps')\n              and torch.backends.mps.is_available()) or os.getenv(\n                  'FORCE_MPS', '0') == '1':\n            # objc compiler support\n            from distutils.unixccompiler import UnixCCompiler\n            if '.mm' not in UnixCCompiler.src_extensions:\n                UnixCCompiler.src_extensions.append('.mm')\n                UnixCCompiler.language_map['.mm'] = 'objc'\n\n            define_macros += [('MMCV_WITH_MPS', None)]\n            extra_compile_args = {}\n            extra_compile_args['cxx'] = ['-Wall', '-std=c++17']\n            extra_compile_args['cxx'] += [\n                '-framework', 'Metal', '-framework', 'Foundation'\n            ]\n            extra_compile_args['cxx'] += ['-ObjC++']\n            # src\n            op_files = glob.glob('./mmcv/ops/csrc/pytorch/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp')\n            # TODO: support mps ops on torch>=2.1.0\n            if parse_version(torch.__version__) < parse_version('2.1.0'):\n                op_files += glob.glob('./mmcv/ops/csrc/common/mps/*.mm') + \\\n                    glob.glob('./mmcv/ops/csrc/pytorch/mps/*.mm')\n            extension = CppExtension\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common/mps'))\n        elif (os.getenv('FORCE_NPU', '0') == '1'):\n            print(f'Compiling {ext_name} only with CPU and NPU')\n            try:\n                import importlib\n\n                from torch_npu.utils.cpp_extension import NpuExtension\n                extra_compile_args['cxx'] += [\n                    '-D__FILENAME__=\\\"$$(notdir $$(abspath $$<))\\\"'\n                ]\n                extra_compile_args['cxx'] += [\n                    '-I' + importlib.util.find_spec(\n                        'torch_npu').submodule_search_locations[0] +\n                    '/include/third_party/acl/inc'\n                ]\n                define_macros += [('MMCV_WITH_NPU', None)]\n                extension = NpuExtension\n                if parse_version(torch.__version__) < parse_version('2.1.0'):\n                    define_macros += [('MMCV_WITH_XLA', None)]\n                if parse_version(torch.__version__) >= parse_version('2.1.0'):\n                    define_macros += [('MMCV_WITH_KPRIVATE', None)]\n            except Exception:\n                raise ImportError('can not find any torch_npu')\n            # src\n            op_files = glob.glob('./mmcv/ops/csrc/pytorch/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/common/npu/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/npu/*.cpp')\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common/npu'))\n        else:\n            print(f'Compiling {ext_name} only with CPU')\n            op_files = glob.glob('./mmcv/ops/csrc/pytorch/*.cpp') + \\\n                glob.glob('./mmcv/ops/csrc/pytorch/cpu/*.cpp')\n            extension = CppExtension\n            include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))\n\n        # Since the PR (https://github.com/open-mmlab/mmcv/pull/1463) uses\n        # c++14 features, the argument ['std=c++14'] must be added here.\n        # However, in the windows environment, some standard libraries\n        # will depend on c++17 or higher. In fact, for the windows\n        # environment, the compiler will choose the appropriate compiler\n        # to compile those cpp files, so there is no need to add the\n        # argument\n        if 'nvcc' in extra_compile_args and platform.system() != 'Windows':\n            if parse_version(torch.__version__) <= parse_version('1.12.1'):\n                extra_compile_args['nvcc'] += ['-std=c++14']\n            else:\n                extra_compile_args['nvcc'] += ['-std=c++17']\n\n        ext_ops = extension(\n            name=ext_name,\n            sources=op_files,\n            include_dirs=include_dirs,\n            define_macros=define_macros,\n            extra_objects=extra_objects,\n            extra_compile_args=extra_compile_args,\n            library_dirs=library_dirs,\n            libraries=libraries,\n            extra_link_args=extra_link_args)\n        extensions.append(ext_ops)\n    return extensions\n\n\nsetup(\n    name='mmcv' if os.getenv('MMCV_WITH_OPS', '1') == '1' else 'mmcv-lite',\n    version=get_version(),\n    description='OpenMMLab Computer Vision Foundation',\n    keywords='computer vision',\n    packages=find_packages(),\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'License :: OSI Approved :: Apache Software License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Topic :: Utilities',\n    ],\n    url='https://github.com/open-mmlab/mmcv',\n    author='MMCV Contributors',\n    author_email='openmmlab@gmail.com',\n    install_requires=install_requires,\n    extras_require={\n        'all': parse_requirements('requirements.txt'),\n        'tests': parse_requirements('requirements/test.txt'),\n        'build': parse_requirements('requirements/build.txt'),\n        'optional': parse_requirements('requirements/optional.txt'),\n    },\n    python_requires='>=3.7',\n    ext_modules=get_extensions(),\n    cmdclass=cmd_class,\n    zip_safe=False)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}