{
  "metadata": {
    "timestamp": 1736561013489,
    "page": 772,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "coleifer/huey",
      "stars": 5288,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "__pycache__\n.idea\n*.pyc\ndocs/_build\nvenv/\nhuey.egg-info/\nhuey.db\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.1005859375,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\nsphinx:\n  configuration: docs/conf.py\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 27.185546875,
          "content": "Changelog\n=========\n\n## master\n\n[View commits](https://github.com/coleifer/huey/compare/2.5.2...HEAD)\n\n## 2.5.2\n\n* Prevent bad task serialization in schedule from causing a batch of tasks\n  to be lost, see #815..\n* Ensure we catch ResultTimeout which may occur when used with Sentinel, #813.\n* Remove junk SQS implementation I was testing out.\n\n## 2.5.1\n\n* More makework thanks to the ass-clowns running Python. Fix issue with\n  deprecation of `datetime.utcnow()` in 3.12.\n* Add API for customizing the `TaskWrapper` implementation, suitably named\n  `get_task_wrapper_class()`.\n* Make the `revoke_all()`, `restore_all()` and `is_revoked()` more robust for\n  various input types.\n* Fix bug that could occur in the event of a SIGHUP followed by a SIGINT when\n  using thread workers.\n* Added new experimental contrib module for SQS queue and S3 result storage.\n\n## 2.5.0\n\n* Check to ensure the gevent monkeypatch was applied when running the consumer\n  with greenlet workers, log warning if it is not.\n* Explicitly clear the revoked flag on task instances after execution (#713).\n  This will help reduce junk keys left in the storage if you attempt to revoke\n  a task while it is executing.\n* Add support for `delay=`, `eta=` in Huey's `.s()` and `.then()` - this adds\n  support for delaying or scheduling pipelines.\n* Add support for rescheduling callback pipelines when rescheduling a task.\n  This is enabled by default (`preserve_pipeline=True`).\n* Add an `on_commit_task()` decorator for Django extension that will enqueue\n  the task after any database changes have been committed. This eliminates a\n  common race condition where a task is enqueued and executed before the\n  corresponding database changes have been committed.\n* Allow overriding the `delay` and `eta` when raising a `RetryTask` exception.\n  This provides finer-grained control over when a task should be retried.\n* Add a very simple `ResultGroup.as_completed()` helper to provide a way to\n  deal with multiple results as they become available. Refs #746.\n* Add an `asyncio` helper for resolving task results asynchronously. Asyncio\n  users can use `await aget_result(result)` or `await aget_result_group(rg)` to\n  fetch a task result in non-blocking fashion.\n* Fix bug in SIGINT and SIGTERM behavior for gevent users.\n* Include lock name when a task fails due to `TaskLocked` exception (#757).\n\n[View commits](https://github.com/coleifer/huey/compare/2.4.5...2.5.0)\n\n## 2.4.5\n\nImproves propagation of errors in task results and includes fix for newer\nversions of pip.\n\n[View commits](https://github.com/coleifer/huey/compare/2.4.4...2.4.5)\n\n## 2.4.4\n\n* Add `is_locked(lock_name)` to test whether lock is held.\n* Allow raising `CancelExecution` within a Task, and override `retries`.\n* Add a very basic redis-backed lock that can be acquired more than once (to\n  provide a rudimentary semaphore).\n* Add a `periodic_task()` wrapper for `MiniHuey` class.\n\n[View commits](https://github.com/coleifer/huey/compare/2.4.3...2.4.4)\n\n## 2.4.3\n\n* Fix compatibility with redis-py 4.0.0+.\n\n[View commits](https://github.com/coleifer/huey/compare/2.4.2...2.4.3)\n\n## 2.4.2\n\n* Fix implementation of schedule-pop Lua script so it works with Redis cluster.\n* Ensure Django connections are closed before *and* after (previously they were\n  only closed after) task execution with `db_task()` and `db_periodic_task()`.\n* Allow additional lock-names to be specified when flushing locks.\n\n[View commits](https://github.com/coleifer/huey/compare/2.4.1...2.4.2)\n\n## 2.4.1\n\n* Attempt to reconnect to database if connection becomes unusable (e.g. due to\n  a server restart). See: `huey.contrib.sql_huey.SqlHuey`.\n* Do not use a soft file-lock for `FileStorage` - use `fcntl.flock()` instead.\n\n[View commits](https://github.com/coleifer/huey/compare/2.4.0...2.4.1)\n\n## 2.4.0\n\n* Task expiration: https://huey.readthedocs.io/en/latest/guide.html#task-expiration\n* Add option to make `crontab()` parsing strict, raising an error if an invalid\n  interval specification is given. You probably want to enable this.\n* Fix bug in the FileStorage dequeue() method, which attempted to unlink an\n  open file.\n\n[View commits](https://github.com/coleifer/huey/compare/2.3.2...2.4.0)\n\n## 2.3.2\n\n* Add hook (`Huey.build_error_result`) for customizing the error result\n  metadata.\n* Avoid crashing if another module already modified/set the multiprocessing\n  start method.\n\n[View commits](https://github.com/coleifer/huey/compare/2.3.1...2.3.2)\n\n## 2.3.1\n\n* Add `SIGNAL_INTERRUPTED` to signal when a task is interrupted when a consumer\n  exits abruptly.\n* Use the `Huey.create_consumer()` API within the Django management command, to\n  allow Django users to customize the creation of the `Consumer` instance.\n\n[View commits](https://github.com/coleifer/huey/compare/2.3.0...2.3.1)\n\n## 2.3.0\n\n* Use monotonic clock for timing operations within the consumer.\n* Ensure internal state is cleaned up on file-lock when released.\n* Support passing around TaskException as a pickled value.\n* Set the multiprocessing mode to \"fork\" on MacOS and Python 3.8 or newer.\n* Added option to enforce FIFO behavior when using Sqlite as storage.\n* Added the `on_shutdown` handler to djhuey namespace.\n* Ensure exception is set on AsyncResult in mini-huey.\n\n[View commits](https://github.com/coleifer/huey/compare/2.2.0...2.3.0)\n\n## 2.2.0\n\n* Fix task `repr` (refs #460).\n* Adds task-id into metadata for task exceptions (refs #461).\n* Ensure database connection is not closed when using the `call_local` method\n  of Django helper extension `db_periodic_task()`.\n* Allow pickle protocol to be explicitly configured in serializer parameters.\n* Adds `FileHuey` and full `FileStorage` implementation.\n* Add `shutdown()` hook, which will be run in the context of the worker\n  threads/processes during shutdown. This hook can be used to clean-up shared\n  or global resources, for example.\n* Allow pipelines to be chained together. Additionally, support chaining task\n  instances.\n\n[View commits](https://github.com/coleifer/huey/compare/2.1.3...2.2.0)\n\n## 2.1.3\n\n* Fix semantics of `SIGNAL_COMPLETE` so that it is not sent until the result is\n  ready.\n* Use classes for the specific Huey implementations (e.g. `RedisHuey`) so that\n  it is easier to subclass / extend. Previously we just used a partial\n  application of the constructor, which could be confusing.\n* Fix shutdown logic in consumer when using multiprocess worker model.\n  Previously the consumer would perform a \"graceful\" shutdown, even when an\n  immediate shutdown was requested (SIGTERM). Also cleans up the\n  signal-handling code and ensures that interrupted tasks log a warning\n  properly to indicate they were interrupted.\n\n[View commits](https://github.com/coleifer/huey/compare/2.1.2...2.1.3)\n\n## 2.1.2\n\n* Allow `AsyncResult` object used in `MiniHuey` to support the `__call__()`\n  method to block and resolve the task result.\n* When running the django `run_huey` management command, the huey loggers will\n  not be configured if another logging handler is already registered to the\n  huey namespace.\n* Added experimental contrib storage engine using `kyoto tycoon <http://fallabs.com/kyototycoon>`_\n  which supports task priority and the option to do automatic result\n  expiration. Requires the `ukt <https://github.com/coleifer/ukt>`_ python\n  package and a custom kyototycoon lua script.\n* Allow the Sqlite storage engine busy timeout to be configured when\n  instantiating `SqliteHuey`.\n\n[View commits](https://github.com/coleifer/huey/compare/2.1.1...2.1.2)\n\n## 2.1.1\n\n* Ensure that `task()`-decorated functions retain their docstrings.\n* Fix logger setup so that the consumer log configuration is only applied to\n  the `huey` namespace, rather than the root logger.\n* Expose `result`, `signal` and `disconnect_signal` in the Django huey\n  extension.\n* Add `SignedSerializer`, which signs and validates task messages.\n* Refactor the `SqliteStorage` so that it can be more easily extended to\n  support other databases.\n\n[View commits](https://github.com/coleifer/huey/compare/2.1.0...2.1.1)\n\n## 2.1.0\n\n* Added new contrib module `sql_huey`, which uses `peewee <https://github.com/coleifer/peewee>`_\n  to provide storage layer using any of the supported databases (sqlite, mysql\n  or postgresql).\n* Added `RedisExpireHuey`, which modifies the usual Redis result storage logic\n  to use an expire time for task result values. A consequence of this is that\n  this storage implementation must keep all result keys at the top-level Redis\n  keyspace. There are some small changes to the storage APIs as well, but will\n  only possibly affect maintainers of alternative storage layers.\n* Also added a `PriorityRedisExpireHuey` which combines the priority-queue\n  support from `PriorityRedisHuey` with the result-store expiration mechanism\n  of `RedisExpireHuey`.\n* Fix gzip compatibility issue when using Python 2.x.\n* Add option to `Huey` to use `zlib` as the compression method instead of gzip.\n* Added `FileStorageMethods` storage mixin, which uses the filesystem for task\n  result-store APIs (put, peek, pop).\n* The storage-specific `Huey` implementations (e.g. `RedisHuey`) are no longer\n  subclasses, but instead are partial applications of the `Huey` constructor.\n\n[View commits](https://github.com/coleifer/huey/compare/2.0.1...2.1.0)\n\n### 2.0.1\n\n* Small fixes, fixed typo in Exception class being caught by scheduler.\n\n[View commits](https://github.com/coleifer/huey/compare/2.0.0...2.0.1)\n\n# 2.0.0\n\nThis section describes the changes in the 2.0.0 release. A detailed list of\nchanges can be found here: https://huey.readthedocs.io/en/latest/changes.html\n\nOverview of changes:\n\n* `always_eager` mode has been renamed to `immediate` mode. Unlike previous\n  versions, `immediate` mode involves the same code paths used by the consumer\n  process. This makes it easier to test features like task revocation and task\n  scheduling without needing to run a dedicated consumer process. Immediate\n  mode uses an in-memory storage layer by default, but can be configured to use\n  \"live\" storage like Redis or Sqlite.\n* The events stream API has been removed in favor of simpler callback-driven\n  [signals](https://huey.readthedocs.io/en/latest/signals.html) APIs. These\n  callbacks are executed synchronously within the huey consumer process.\n* A new serialization format is used in 2.0.0, however consumers running 2.0\n  will continue to be able to read and deserialize messages enqueued by Huey\n  version 1.11.0 for backwards compatibility.\n* Support for [task priorities](https://huey.readthedocs.io/en/latest/guide.html#task-priority).\n* New `Serializer` abstraction allows users to customize the serialization\n  format used when reading and writing tasks.\n* Huey consumer and scheduler can be more easily run within the application\n  process, if you prefer not to run a separate consumer process.\n* Tasks can now specify an `on_error` handler, in addition to the\n  previously-supported `on_complete` handler.\n* Task pipelines return a special `ResultGroup` object which simplifies reading\n  the results of a sequence of task executions.\n* `SqliteHuey` has been promoted out of `contrib`, onto an equal footing with\n  `RedisHuey`. To simplify deployment, the dependency on\n  [peewee](https://github.com/coleifer/peewee) was removed and the Sqlite\n  storage engine uses the Python `sqlite3` driver directly.\n\n[View commits](https://github.com/coleifer/huey/compare/1.11.0...2.0.0)\n\n## 1.11.0\n\n**Backwards-incompatible changes**\n\nPreviously, it was possible for certain tasks to be silently ignored if a task\nwith that name already existed in the registry. To fix this, I have made two\nchanges:\n\n1. The task-name, when serialized, now consists of the task module and the name\n   of the decorated function. So, \"queue_task_foo\" becomes \"myapp.tasks.foo\".\n2. An exception will be raised when attempting to register a task function with\n   the same module + name.\n\nTogether, these changes are intended to fix problems described in #386.\n\nBecause these changes will impact the serialization (and deserialization) of\nmessages, **it is important that you consume all tasks (including scheduled\ntasks) before upgrading**.\n\n**Always-eager mode changes**\n\nIn order to provide a more consistent API, tasks enqueued using `always_eager`\nmode will now return a dummy `TaskResultWrapper` implementation that wraps the\nreturn value of the task. This change is designed to provide the same API for\nreading task result values, regardless of whether you are using always-eager\nmode or not.\n\nPreviously, tasks executed with `always_eager` would return the Python value\ndirectly from the task. When using Huey with the consumer, though, task results\nare not available immediately, so a special wrapper `TaskResultWrapper` is\nreturned, which provides helper methods for retrieving the return value of the\ntask. Going forward, `always_eager` tasks will return `EagerTaskResultWrapper`,\nwhich implements the same `get()` API that is typically used to retrieve task\nreturn values.\n\n[View commits](https://github.com/coleifer/huey/compare/1.10.5...1.11.0)\n\n### v1.10.5\n\n* Compatibility with redis-py 3.0, updated requirements / dependencies.\n* Add pre-/post- hooks into the djhuey namespace.\n\n[View commits](https://github.com/coleifer/huey/compare/1.10.4...1.10.5)\n\n### v1.10.4\n\n* Log time taken to execute tasks at default log level.\n* Fix missing import in SQLite storage backend.\n* Small refactoring in Redis storage backend to make it easier to override the\n  driver / client implementation.\n* Fix failing tests for simpledb storage backend.\n\n[View commits](https://github.com/coleifer/huey/compare/1.10.3...1.10.4)\n\n### v1.10.3\n\n* Fixed regression where in *always eager* mode exceptions within tasks were\n  being swallowed instead of raised.\n* Added an API for registering hooks to run when each worker process starts-up.\n  This simplifies creating global/process-wide shared resources, such as a\n  connection pool or database client. [Documentation](https://huey.readthedocs.io/en/latest/api.html#Huey.on_startup).\n\n[View commits](https://github.com/coleifer/huey/compare/1.10.2...1.10.3)\n\n### v1.10.2\n\n* More granular \"extras\" installation options.\n\n[View commits](https://github.com/coleifer/huey/compare/1.10.1...1.10.2)\n\n### v1.10.1\n\n* Remove call to SimpleDB Client.connect(), as the `simpledb` APIs have\n  changed and no longer use this method.\n* Ensure that pre- and post-execute hooks are run when using Huey in\n  \"always_eager\" mode.\n* Gracefully stop Huey consumer when SIGINT is received.\n* Improved continuous integration, now testing on Python 3.7 as well.\n\n[View commits](https://github.com/coleifer/huey/compare/1.10.0...1.10.1)\n\n## v1.10.0\n\n* Ensure that the default SIGINT handler is registered. This fixes an edge-case\n  that arises when the consumer is run without job control, which causes\n  interrupt signals to be ignored.\n* Restarts (SIGHUP) are now graceful by default.\n\n[View commits](https://github.com/coleifer/huey/compare/1.9.1...1.10.0)\n\n### v1.9.1\n\n* Ensure the scheduler loop does not drift (fixes #304).\n* Add `TaskResultWrapper.reset()` to enable resetting the results of tasks that\n  failed and are subsequently being retried.\n* Allow task-decorated functions to be also decorated as periodic tasks.\n\n[View commits](https://github.com/coleifer/huey/compare/1.9.0...1.9.1)\n\n## v1.9.0\n\n[View commits](https://github.com/coleifer/huey/compare/1.8.0...1.9.0)\n\n#### ROLLBACK of 1.8.0 Django Changes\n\nDue to problems with the django patch that added support for multiple huey\ninstances, I've decided to rollback those changes.\n\nDjango integration in Huey 1.9.0 will work the same as it had previously in\n1.7.x and earlier.\n\nApologies, I should have reviewed the patch more thoroughly and insisted on\nbetter test coverage.\n\n## v1.8.0\n\n[View commits](https://github.com/coleifer/huey/compare/1.7.0...1.8.0)\n\n#### Backwards-incompatible change to Django integration\n\n**NOTE: These changes were remove in 1.9.0**\n\nIn 1.8.0, support for multiple huey instances was added (with thanks to @Sebubu\nand @MarcoGlauser for the patches). Although existing Django/Huey apps should\ncontinue to work, there is a new configuration format available and I'd\nrecommend that you take a look at the docs and switch over to it:\n\n[Django integration documentation](http://huey.readthedocs.io/en/latest/contrib.html#django)\n\n## v1.7.0\n\n#### Backwards-incompatible change\n\nPrevious versions of huey would store the traceback and associated metadata for\na failed task within the `result_store`, regardless of whether `store_errors`\nwas true or not. As of 1.7.0, task exceptions will only be stored in the result\nstore if `store_errors` is True. See #290 for discussion.\n\n[View commits](https://github.com/coleifer/huey/compare/1.6.1...1.7.0)\n\n### v1.6.1\n\n* Add backwards-compatibility to queue serialization protocol so that 1.6\n  consumers can continue to work with tasks enqueued by huey versions 1.5 and\n  lower.\n\n[View commits](https://github.com/coleifer/huey/compare/1.6.0...1.6.1)\n\n## v1.6.0\n\n* Support for [task pipelining](http://huey.readthedocs.io/en/latest/getting-started.html#task-pipelines) and task function partials\n  (which is not compatible with 1.5's task serialization format see note below).\n* Support for triggering task retries using `RetryTask` exception.\n* Support for task locking, restricting concurrency of a given task.\n* Getting result of task that failed with an exception results in a `TaskException` being raised.\n* Updated health check to ensure the task scheduler is always running.\n* Refactor implementation of `task()` and `periodic_task()` decorators, which should have the added benefit of making them easier to extend.\n* Refactored result-store APIs to simplify serialization / deserialization logic.\n* Fixed bug in serialization of task exceptions.\n* Added simple client/server implementation for testing locally. [Blog post on the subject](http://charlesleifer.com/blog/building-a-simple-redis-server-with-python/).\n\n#### Task serialization format\n\nIn v1.6.0, the serialization format of tasks has changed to accomodate an extra\npiece of metadata. As a result, tasks enqueued with huey versions previous to\n1.6 will not be able to be consumed by the 1.6 consumer.\n\nAt present there is a workaround available in 1.6.1, but it will be removed\nwhen 1.7.0 is released later.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.6...1.6.0)\n\n### v1.5.6\n\n* Allow arbitrary settings to be specified in ``task()`` decorators.\n* New task name format includes function module as part of task name.\n* Fix for operating systems that do not implement SIGHUP.\n* Fix bug in `contrib.minimal` task scheduler timing.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.5...1.5.6)\n\n### v1.5.5\n\n* Implemented [pre-execute](http://huey.readthedocs.io/en/latest/api.html#Huey.register_pre_execute)\n  and [post-execute](http://huey.readthedocs.io/en/latest/api.html#Huey.register_pre_execute)\n  hooks.\n* Implemented task cancellation mechanism as part of pre-execute hooks.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.4...1.5.5)\n\n### v1.5.4\n\n* Implemented atomic \"set if not exists\" for Redis and SQLite, which is used by\n  the locking APIs.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.3...1.5.4)\n\n### v1.5.3\n\n* Includes addition of `TaskLock` and `Huey.lock_task()` helpers.\n* Extend `Huey` API to add method for creating the consumer.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.2...1.5.3)\n\n### v1.5.2\n\n* Added support for gracefully restarting the consumer using SIGHUP.\n* Fixed a bug where periodic tasks were not being given unique task IDs when\n  executed by the consumer. Periodic tasks now receive a unique ID each time\n  they are invoked.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.1...1.5.2)\n\n### v1.5.1\n\nAdded support for specifying a `retry` and `retry_delay` on periodic tasks.\nSimply pass the desired values into the `periodic_task()` decorator after the\nvalidation function, as keyword arguments.\n\n[View commits](https://github.com/coleifer/huey/compare/1.5.0...1.5.1)\n\n## v1.5.0\n\n* Allow all instances of a task to be revoked/restored by adding the\n  `revoke()`, `restore()` and `is_revoked()` methods to all decorated tasks\n  (where previously they were only available on periodic tasks).\n* Periodic task instances now have a unique identifier.\n* Added documentation on how to correctly use the Django consumer management\n  command with the `gevent` worker model.\n* Logging will lazily resolve log messages.\n* Bug was fixed that prevented the local (non-global) task registry from\n  working as intended. This is now fixed.\n* Docstrings added to the `BaseStorage` APIs.\n\nThanks to @mindojo-victor and @nachtmaar for help with some of the above items.\n\n[View commits](https://github.com/coleifer/huey/compare/1.4.1...1.5.0)\n\n### v1.4.1\n\n* Support using `7` to represent *Sunday* when doing day-of-week calculations\n  in the `crontab` helper.\n* Fix bug #243, wherein Django interpreted boolean CLI arguments as having a\n  boolean default value.\n\n[View commits](https://github.com/coleifer/huey/compare/1.4.0...1.4.1)\n\n## v1.4.0\n\nFixed a subtle bug in the way Huey calculated when to run the periodic task\nscheduler. If you had configured the consumer to check the schedule at an\ninterval that was not a factor of 60, then there is a chance that periodic\ntasks may be scheduled at incorrect intervals from one minute to the next. This\nis fixed in 1.4.0.\n\nAdded better signal handling in order to support graceful shutdown. Graceful\nshutdown involves letting workers finish executing any tasks they may be\nprocessing at the time the shutdown signal is received. The default behavior is\nto interrupt the workers mid-task. Huey uses `SIGTERM` to shutdown the\nconsumer immediately, and `SIGINT` to gracefully shutdown.\n\nAdded support for using either a global task registry, or a registry bound to\na particular `Huey` instance. The default behavior is to use a global registry\n(backwards-compatible). To bind the registry to a single `Huey` instance, pass\n`global_registry=False` when initializing your `Huey` object.\n\nAdded a `reschedule()` method to the `TaskResultWrapper`.\n\nDocumentation clean-ups and additions, particularly around the logic used to\nhandle datetime conversion. Also added docs on shutdown modes for huey\nconsumer.\n\n[View commits](https://github.com/coleifer/huey/compare/1.3.1...1.4.0)\n\n### v1.3.1\n\nSmarter conversion between datetimes, so that huey will correctly interpret\nnaive or timezone-aware datetimes and properly convert to UTC when configured\nto do so. Previously, huey only operated on naive datetimes. Many thanks to\n@Antoine for this patch-set.\n\nDocumentation clean-ups and additions.\n\n[View commits](https://github.com/coleifer/huey/compare/1.3.0...1.3.1)\n\n## v1.3.0\n\nAdds flag to preserve result-store value in certain circumstances. Contains yet\nmore hacking at the consumer configuration options, specifically hard-coded\ndefaults are removed from the option definitions.\n\nThe `run_huey` management command was simplified as we are dropping support for\nolder (officially unsupported) versions of Django.\n\nAdded a `sqlitedb` contrib module that uses a local SQLite database instead of\nRedis for Queue persistence, task scheduling and result-storage.\n\n[View commits](https://github.com/coleifer/huey/compare/1.2.3...1.3.0)\n\n### v1.2.3\n\nContains an attempt at fixing the django management command handling of the\n`default` option.\n\n[View commits](https://github.com/coleifer/huey/compare/1.2.2...1.2.3)\n\n### v1.2.2\n\nContains small bugfix for an earlier bugfix meant to prevent time.sleep() from\nbeing called with a negative time interval.\n\n[View commits](https://github.com/coleifer/huey/compare/1.2.0...1.2.2)\n\n## v1.2.0\n\nRemoved the metadata APIs added in 1.1.0, as they seemed poorly-designed and\naltogether a decent idea terribly implemented. Perhaps something I'll revisit,\nbut which should be easy to implement as a third-party library using the events\nAPIs.\n\n* `AsyncData` is renamed to `TaskResultWrapper`.\n* `Huey.result()` is a new method that provides the result of a task, given a\n  task ID.\n* Fixed a handful of bugs related to the error serialization.\n* Change the default consumer log handler from RotatingFileHandler to the\n  vanilla FileHandler class.\n\n[View commits](https://github.com/coleifer/huey/compare/1.1.2...1.2.0)\n\n### v1.1.2\n\nI've added a new API for fetching a task's result given on the task's ID. You\ncan now call `huey.result(task_id)` and retrieve the result if the task has\nfinished executing. Additionally, the [Huey.result](https://huey.readthedocs.io/en/latest/api.html#Huey.result)\nmethod accepts the same parameters as [AsyncData.get](https://huey.readthedocs.io/en/latest/api.html#AsyncData.get),\nallowing you to block for results, specify a timeout, etc.\n\nThere is also a new parameter on the above methods, ``preserve=False``. By\ndefault, the result store will delete a task result once it has been read. Specifying\n``preserve=True`` ensures the data is not removed.\n\n[View commits](https://github.com/coleifer/huey/compare/1.1.1...1.1.2)\n\n### v1.1.1\n\nThis is a small release with a couple minor bugfixes.\n\n* Fixed task metadata serialization bug. #140\n* Small cleanup to event iterator storage implementation.\n* Updated [getting started documentation](https://huey.readthedocs.io/en/latest/getting-started.html)\n  to reflect changes in the 1.x APIs.\n\n[View commits](https://github.com/coleifer/huey/compare/1.1.0...1.1.1)\n\n## v1.1.0\n\n* Big changes to simplify the way ``Huey`` is instantiated. No changes should\n  be necessary if already using ``RedisHuey``.\n* Refactored the storage APIs and simplified the public interface. There is\n  now a single object, whereas before there were 4 components (queue, result\n  store, scheduler and event emitter).\n* Added methods for retrieving and introspecting the pending task queue, the\n  schedule, results, and errors.\n* Errors can now be stored, in addition to regular task results.\n* Added metadata methods for tracking task execution, errors, task duration,\n  and more. These will be the building blocks for tools to provide some\n  insight into the inner-workings of your consumers and producers.\n* Many new events are emitted by the consumer, and some have parameters. These\n  are documented [here](https://huey.readthedocs.io/en/latest/events.html).\n\n# v1.0.0\n\nWhat follows is a description of the changes between 0.4.9 and 1.0.0. There are\nsome backwards-incompatible changes to be aware of as well as new options for\nthe consumer. Most APIs are the same, however.\n\n\nBackwards incompatible changes:\n\n* ``huey.djhuey`` moved to ``huey.contrib.djhuey``. You will need to update\n  any import statements as well as your Django ``INSTALLED_APPS`` setting to\n  reflect the new module path.\n* Redis backend is now the only one available, and the corresponding code moved\n  from ``huey.backends.redis_backend`` to ``huey.storage``.\n* Removed the \"RabbitMQ\" and \"SQLite\" queue backends.\n* Removed the ``-t`` and ``--threads`` option from the consumer. You should now\n  use ``-w`` or ``--workers``.\n* Removed the ``-p`` and ``--periodic`` no-op options from the consumer. These\n  are enabled by default so the option had no meaning.\n* The ``scheduler-interval`` option is configured using ``-s`` when previously\n  it was ``-S``. Furthermore, this must be a value between 1 and 60.\n* Removed the ``peewee_helpers`` module.\n\n\nNew features:\n\n* The queue consumer now supports multi-process or multi-greenlet execution\n  models (in addition to multi-threaded, which previously was the only option).\n* Added `pending()`, `scheduled()` and `all_results()` methods to the `Huey`\n  class to allow introspection of the Queue's state at the current moment in\n  time.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2017 Charles Leifer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1494140625,
          "content": "include CHANGELOG.md\ninclude LICENSE\ninclude MANIFEST.in\ninclude README.rst\ninclude pyproject.toml\nrecursive-include docs *\nrecursive-include examples *\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.513671875,
          "content": ".. image:: http://media.charlesleifer.com/blog/photos/huey2-logo.png\n\n*a lightweight alternative*.\n\nhuey is:\n\n* a task queue\n* written in python\n* clean and simple API\n* redis, sqlite, file-system, or in-memory storage\n* `example code <https://github.com/coleifer/huey/tree/master/examples/>`_.\n* `read the documentation <https://huey.readthedocs.io/>`_.\n\nhuey supports:\n\n* multi-process, multi-thread or greenlet task execution models\n* schedule tasks to execute at a given time, or after a given delay\n* schedule recurring tasks, like a crontab\n* automatically retry tasks that fail\n* task prioritization\n* task result storage\n* task expiration\n* task locking\n* task pipelines and chains\n\n.. image:: http://i.imgur.com/2EpRs.jpg\n\nAt a glance\n-----------\n\n.. code-block:: python\n\n    from huey import RedisHuey, crontab\n\n    huey = RedisHuey('my-app', host='redis.myapp.com')\n\n    @huey.task()\n    def add_numbers(a, b):\n        return a + b\n\n    @huey.task(retries=2, retry_delay=60)\n    def flaky_task(url):\n        # This task might fail, in which case it will be retried up to 2 times\n        # with a delay of 60s between retries.\n        return this_might_fail(url)\n\n    @huey.periodic_task(crontab(minute='0', hour='3'))\n    def nightly_backup():\n        sync_all_data()\n\nCalling a ``task``-decorated function will enqueue the function call for\nexecution by the consumer. A special result handle is returned immediately,\nwhich can be used to fetch the result once the task is finished:\n\n.. code-block:: pycon\n\n    >>> from demo import add_numbers\n    >>> res = add_numbers(1, 2)\n    >>> res\n    <Result: task 6b6f36fc-da0d-4069-b46c-c0d4ccff1df6>\n\n    >>> res()\n    3\n\nTasks can be scheduled to run in the future:\n\n.. code-block:: pycon\n\n    >>> res = add_numbers.schedule((2, 3), delay=10)  # Will be run in ~10s.\n    >>> res(blocking=True)  # Will block until task finishes, in ~10s.\n    5\n\nFor much more, check out the `guide <https://huey.readthedocs.io/en/latest/guide.html>`_\nor take a look at the `example code <https://github.com/coleifer/huey/tree/master/examples/>`_.\n\nRunning the consumer\n^^^^^^^^^^^^^^^^^^^^\n\nRun the consumer with four worker processes:\n\n.. code-block:: console\n\n    $ huey_consumer.py my_app.huey -k process -w 4\n\nTo run the consumer with a single worker thread (default):\n\n.. code-block:: console\n\n    $ huey_consumer.py my_app.huey\n\nIf your work-loads are mostly IO-bound, you can run the consumer with threads\nor greenlets instead. Because greenlets are so lightweight, you can run quite a\nfew of them efficiently:\n\n.. code-block:: console\n\n    $ huey_consumer.py my_app.huey -k greenlet -w 32\n\nStorage\n-------\n\nHuey's design and feature-set were informed by the capabilities of the\n`Redis <https://redis.io>`_ database. Redis is a fantastic fit for a\nlightweight task queueing library like Huey: it's self-contained, versatile,\nand can be a multi-purpose solution for other web-application tasks like\ncaching, event publishing, analytics, rate-limiting, and more.\n\nAlthough Huey was designed with Redis in mind, the storage system implements a\nsimple API and many other tools could be used instead of Redis if that's your\npreference.\n\nHuey comes with builtin support for Redis, Sqlite and in-memory storage.\n\nDocumentation\n----------------\n\n`See Huey documentation <https://huey.readthedocs.io/>`_.\n\nProject page\n---------------\n\n`See source code and issue tracker on Github <https://github.com/coleifer/huey/>`_.\n\nHuey is named in honor of my cat:\n\n.. image:: http://m.charlesleifer.com/t/800x-/blog/photos/p1473037658.76.jpg?key=mD9_qMaKBAuGPi95KzXYqg\n\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.099609375,
          "content": "* Postgres / MySQL support\n* At least once delivery?\n* Redis streams as viable broker implementation?\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "huey",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.048828125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n"
        },
        {
          "name": "runtests.py",
          "type": "blob",
          "size": 1.3740234375,
          "content": "#!/usr/bin/env python\n\nimport glob\nimport optparse\nimport os\nimport sys\nimport unittest\n\nfrom huey import tests\n\n\ndef collect_tests(args=None):\n    suite = unittest.TestSuite()\n\n    if not args:\n        from huey import tests\n        module_suite = unittest.TestLoader().loadTestsFromModule(tests)\n        suite.addTest(module_suite)\n    else:\n        tmpl = 'huey.tests.test_%s'\n        cleaned = [tmpl % arg if not arg.startswith('test') else arg\n                   for arg in args]\n        user_suite = unittest.TestLoader().loadTestsFromNames(cleaned)\n        suite.addTest(user_suite)\n    return suite\n\n\ndef runtests(suite, verbosity=1, failfast=False):\n    runner = unittest.TextTestRunner(verbosity=verbosity, failfast=failfast)\n    results = runner.run(suite)\n    return results.failures, results.errors\n\n\nif __name__ == '__main__':\n    parser = optparse.OptionParser()\n    parser.add_option('-v', '--verbosity', dest='verbosity', default=1,\n                      type='int', help='Verbosity of output')\n    parser.add_option('-f', '--failfast', action='store_true', default=False,\n                      help='Stop on first failure or error.')\n\n    options, args = parser.parse_args()\n    suite = collect_tests(args)\n    failures, errors = runtests(suite, options.verbosity, options.failfast)\n    for f in glob.glob('huey*.db*'):\n        os.unlink(f)\n\n    if errors or failures:\n        sys.exit(1)\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.66796875,
          "content": "import os\nfrom setuptools import setup, find_packages\n\n\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as fh:\n    readme = fh.read()\n\nextras_require = {\n    'backends': ['redis>=3.0.0'],\n    'redis': ['redis>=3.0.0'],\n}\n\nsetup(\n    name='huey',\n    version=__import__('huey').__version__,\n    description='huey, a little task queue',\n    long_description=readme,\n    author='Charles Leifer',\n    author_email='coleifer@gmail.com',\n    url='http://github.com/coleifer/huey/',\n    packages=find_packages(),\n    extras_require=extras_require,\n    package_data={\n        'huey': [\n        ],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        #'Programming Language :: Python :: 3.13',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    test_suite='runtests.collect_tests',\n    entry_points={\n        'console_scripts': [\n            'huey_consumer = huey.bin.huey_consumer:consumer_main'\n        ]\n    },\n    scripts=['huey/bin/huey_consumer.py'],\n)\n"
        }
      ]
    }
  ]
}