{
  "metadata": {
    "timestamp": 1736560667304,
    "page": 310,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matplotlib/cheatsheets",
      "stars": 7388,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bumpversion.cfg",
          "type": "blob",
          "size": 0.5830078125,
          "content": "[bumpversion]\ncurrent_version = 3.7.4\n\n[bumpversion:file:./check-matplotlib-version.py]\nsearch = __version__ == '{current_version}'\nreplace = __version__ == '{new_version}'\n\n[bumpversion:glob:./handout-*.tex]\nsearch = Matplotlib {current_version}\nreplace = Matplotlib {new_version}\n\n[bumpversion:file:./Makefile]\nsearch = v{current_version}\nreplace = v{new_version}\n\n[bumpversion:file:./cheatsheets.tex]\nsearch = Version {current_version}\nreplace = Version {new_version}\n\n[bumpversion:file:./requirements/requirements.in]\nsearch = matplotlib=={current_version}\nreplace = matplotlib=={new_version}\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0849609375,
          "content": "[flake8]\nignore = E20,E22,E501,E701,F401,W\n\n[pep8]\nselect = E12,E231,E241,E251,E26,E30\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3505859375,
          "content": "# built cheatsheets and handouts\n# ----------------------------------\ncheatsheets*.pdf\ncheatsheets*.png\nhandout-*.pdf\nhandout-*.png\n\n# TeX auxiliary files\n# ----------------------------------\n*.aux\n*.log\n*.out\n*.upa\n\n# generated figures\n# ----------------------------------\nfigures/*.pdf\nfonts/**/*.[ot]tf\n\n# html build\ndocs/_build/*\n\n# OS specific\n.DS_Store\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.294921875,
          "content": "exclude: |\n  (?x)^(\n    .+[.]svg|\n  )$\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.0.1\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/pycqa/flake8\n    rev: 4.0.1\n    hooks:\n      - id: flake8\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.2529296875,
          "content": "Copyright (c) 2020, Nicolas P. Rougier\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.2109375,
          "content": "SRC := $(wildcard *.tex)\nCONVERTFLAGS = -density 150 -alpha remove -depth 8\n\n.PHONY: default\ndefault: all\n\n.PHONY: all\nall: logos figures cheatsheets handouts docs\n\n.PHONY: logos\nlogos:\n\twget https://github.com/matplotlib/matplotlib/raw/v3.7.4/doc/_static/logo2.png -O ./logos/logo2.png\n\n.PHONY: figures\nfigures:\n\t# generate the figures\n\tcd scripts && for script in *.py; do echo $$script; MPLBACKEND=\"agg\" python $$script; done\n\t# crop some of the figures\n\tcd figures && pdfcrop adjustments.pdf adjustments.pdf\n\tcd figures && pdfcrop annotate.pdf annotate.pdf\n\tcd figures && pdfcrop annotation-arrow-styles.pdf annotation-arrow-styles.pdf\n\tcd figures && pdfcrop anatomy.pdf anatomy.pdf\n\tcd figures && pdfcrop colornames.pdf colornames.pdf\n\tcd figures && pdfcrop fonts.pdf fonts.pdf\n\tcd figures && pdfcrop markers.pdf markers.pdf\n\tcd figures && pdfcrop text-alignments.pdf text-alignments.pdf\n\tcd figures && pdfcrop tick-formatters.pdf tick-formatters.pdf\n\tcd figures && pdfcrop tick-locators.pdf tick-locators.pdf\n\tcd figures && pdfcrop tip-font-family.pdf tip-font-family.pdf\n\tcd figures && pdfcrop tip-hatched.pdf tip-hatched.pdf\n\n.PHONY: cheatsheets\ncheatsheets:\n\txelatex cheatsheets.tex\n\tconvert $(CONVERTFLAGS) cheatsheets.pdf -scene 1 cheatsheets.png\n\n.PHONY: handouts\nhandouts:\n\txelatex handout-beginner.tex\n\txelatex handout-intermediate.tex\n\txelatex handout-tips.tex\n\tconvert $(CONVERTFLAGS) handout-tips.pdf handout-tips.png\n\tconvert $(CONVERTFLAGS) handout-beginner.pdf handout-beginner.png\n\tconvert $(CONVERTFLAGS) handout-intermediate.pdf handout-intermediate.png\n\n.PHONY: check\ncheck:\n\t./check-matplotlib-version.py\n\t./check-num-pages.sh cheatsheets.pdf 2\n\t./check-num-pages.sh handout-tips.pdf 1\n\t./check-num-pages.sh handout-beginner.pdf 1\n\t./check-num-pages.sh handout-intermediate.pdf 1\n\t./check-diffs.py\n\t./check-links.py cheatsheets.pdf\n\n.PHONY: docs\ndocs:\n\tmake -C docs/ html\n\tcp ./cheatsheets*.p* ./docs/_build/html\n\tcp ./handout-*.p* ./docs/_build/html\n\n\n.PHONY: fonts\nfonts:\n\tmake -C fonts/\n\n.PHONY: clean\nclean: $(SRC)\n\tlatexmk -c $^\n\t- rm -rf ./build/\n\n.PHONY: clean-all\nclean-all: clean\n\t- rm ./logos/mpl-logo2.pdf\n\tgit clean -f -X ./figures/\n\tgit clean -f ./scripts/*.pdf\n\n.PHONY: requirements\nrequirements:\n\t$(MAKE) -C ./requirements/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0390625,
          "content": "# Cheatsheets for Matplotlib users\n\n## Cheatsheets\nCheatsheet [(download pdf)](https://matplotlib.org/cheatsheets/cheatsheets.pdf) | |\n:------------------------------------------------------------------------------:|:----------------------------------------------------------:\n![](https://matplotlib.org/cheatsheets/cheatsheets-1.png)                       | ![](https://matplotlib.org/cheatsheets/cheatsheets-2.png)\n\n## Handouts\n\nBeginner handout [(download pdf)](https://matplotlib.org/cheatsheets/handout-beginner.pdf) | Intermediate handout [(download pdf)](https://matplotlib.org/cheatsheets/handout-intermediate.pdf) | Tips handout [(download pdf)](https://matplotlib.org/cheatsheets/handout-tips.pdf)\n:-----------------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------:\n![](https://matplotlib.org/cheatsheets/handout-beginner.png)                               | ![](https://matplotlib.org/cheatsheets/handout-intermediate.png)                                   | ![](https://matplotlib.org/cheatsheets/handout-tips.png)\n\n# For contributors to the cheatsheets\n\n## How to compile\n\n1. You need to create a `fonts` repository with:\n\n* `fonts/roboto/*`           : See https://fonts.google.com/specimen/Roboto\n                                or https://github.com/googlefonts/roboto/tree/master/src/hinted\n* `fonts/roboto-slab/*`      : See https://fonts.google.com/specimen/Roboto+Slab\n                                or https://github.com/googlefonts/robotoslab/tree/master/fonts/static\n* `fonts/source-code-pro/*`  : See https://fonts.google.com/specimen/Source+Code+Pro\n                                or https://github.com/adobe-fonts/source-code-pro/tree/release/OTF\n* `fonts/source-sans-pro/*`  : See https://fonts.google.com/specimen/Source+Sans+Pro\n                                or https://github.com/adobe-fonts/source-sans-pro/tree/release/OTF\n* `fonts/source-serif-pro/*` : See https://fonts.google.com/specimen/Source+Serif+Pro\n                                or https://github.com/adobe-fonts/source-serif-pro/tree/release/OTF\n* `fonts/eb-garamond/*`      : See https://bitbucket.org/georgd/eb-garamond/src/master\n* `fonts/pacifico/*`         : See https://fonts.google.com/download?family=Pacifico\n\nOn Linux, with `make` installed, the fonts can be set up with the following command:\n```shell\nmake -C fonts\n```\n\nThe fonts can be made discoverable by `matplotlib` (through `fontconfig`) by creating the following in `$HOME/.config/fontconfig/fonts.conf` (see [here](https://www.freedesktop.org/software/fontconfig/fontconfig-user.html)):\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n<dir>/path/to/cheatsheets/fonts/</dir>\n...\n</fontconfig>\n```\n\n\n2. You need to generate all the figures:\n\n```\n$ cd scripts\n$ for script in *.py; do python $script; done\n$ cd ..\n```\n\n3. Compile the sheet\n```\n$ xelatex cheatsheets.tex\n$ xelatex cheatsheets.tex\n```\n"
        },
        {
          "name": "cheatsheets.tex",
          "type": "blob",
          "size": 35.3291015625,
          "content": "% -----------------------------------------------------------------------------\n% Matplotlib cheat sheet - Released under the BSD License\n% -----------------------------------------------------------------------------\n\\documentclass[10pt,landscape,a4paper]{article}\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\n% --- Page layout -------------------------------------------------------------\n\\usepackage[right=2.5mm, left=2.5mm, top=2.5mm, bottom=2.5mm]{geometry}\n\n% --- English stuff -----------------------------------------------------------\n\\usepackage[english]{babel}\n\\usepackage{xspace}\n\\usepackage{csquotes}\n\n% --- Graphics ----------------------------------------------------------------\n\\usepackage{tikz}\n\\usepackage{graphicx}\n\\usepackage[percent]{overpic}\n\\graphicspath{{./figures/}{./icons/}{./logos/}}\n\\usepackage[export]{adjustbox}\n\n% --- Framed boxes ------------------------------------------------------------\n\\usepackage[framemethod=TikZ]{mdframed}\n\\mdfsetup{skipabove=0pt,skipbelow=0pt}\n\\usepackage{menukeys}\n\n% --- URL, href and colors ----------------------------------------------------\n\\usepackage{xcolor}\n\\colorlet{citecolor}{black}\n\\colorlet{linkcolor}{black}\n\\colorlet{urlcolor}{black}\n\\usepackage[\n  bookmarks=true,\n  breaklinks=true,\n  pdfborder={0 0 0},\n  citecolor=citecolor,\n  linkcolor=linkcolor,\n  urlcolor=urlcolor,\n  colorlinks=true,\n  linktocpage=false,\n  hyperindex=true,\n  colorlinks=true,\n  linktocpage=false,\n  linkbordercolor=white]{hyperref}\n\n% --- Tests -------------------------------------------------------------------\n\\usepackage{etoolbox}\n\n% --- Fonts -------------------------------------------------------------------\n\\usepackage{fontspec}\n\\usepackage[fixed]{fontawesome5}\n\\usepackage[babel=true]{microtype}\n\\defaultfontfeatures{Ligatures=TeX}\n\\setmainfont{Source Serif Pro}[\n  Path           = fonts/source-serif-pro/SourceSerifPro-,\n  Extension      = .otf,\n  UprightFont    = Light,\n  ItalicFont     = LightIt,\n  BoldFont       = Regular,\n  BoldItalicFont = It ]\n\\setsansfont{Roboto}[\n  Path        = fonts/roboto/Roboto-,\n  Extension   = .ttf,\n  UprightFont = Light,\n  ItalicFont  = LightItalic,\n  BoldFont    = Regular ]\n\\setmonofont{Source Code Pro}[\n  Path        = fonts/source-code-pro/SourceCodePro-,\n  Extension   = .otf,\n  UprightFont = Light,\n  BoldFont    = Regular ]\n\\newfontfamily\\RobotoCon{Roboto Condensed}[\n  Path        = fonts/roboto/RobotoCondensed-,\n  Extension   = .ttf,\n  UprightFont = Regular,\n  ItalicFont  = Italic,\n  BoldFont    = Bold ]\n\\newfontfamily\\RobotoSlab{Roboto Slab}[\n  Path        = fonts/roboto-slab/RobotoSlab-,\n  Extension   = .ttf,\n  UprightFont = Light,\n  BoldFont    = Regular ]\n\\newfontfamily\\Roboto{Roboto}[\n  Path        = fonts/roboto/Roboto-,\n  Extension   = .ttf,\n  UprightFont = Regular,\n  ItalicFont  = Italic,\n  BoldFont    = Black ]\n\n% --- Arrays ------------------------------------------------------------------\n\\usepackage{multicol}\n\\usepackage{colortbl}\n\\usepackage{array, multirow}\n\n% --- Maths -------------------------------------------------------------------\n\\usepackage{amsmath}\n\n\n% --- PDF comments ------------------------------------------------------------\n\\usepackage{pdfcomment}\n\n% --- Default options ---------------------------------------------------------\n\\setlength\\parindent{0pt}\n\\setlength{\\tabcolsep}{2pt}\n\\baselineskip=0pt\n\\setlength\\columnsep{1.75mm}\n\n\n% --- Macros ------------------------------------------------------------------\n\\newcommand{\\button}[1]{\\tikz[baseline=(X.base)]\n  \\node [fill=orange!40, rectangle, inner sep=2pt,rounded corners=1pt] (X) {#1};}\n\n\\newcommand{\\API}[1]{\\tikz[baseline=(X.base)]\n  \\node [fill=black!40, rectangle, inner sep=2pt,rounded corners=1pt] (X)\n        {\\href{#1}{\\color{white}{\\tiny \\sffamily \\textbf{API}}}};}\n\n\\newcommand{\\READ}[1]{\\tikz[baseline=(X.base)]\n  \\node [fill=black!40, rectangle, inner sep=2pt,rounded corners=1pt] (X)\n        {\\href{#1}{\\color{white}{\\tiny \\sffamily \\textbf{READ}}}};}\n\n\\newcommand{\\api}[1]{\\tikz[baseline=(X.base)]\n  \\node [fill=orange!40, rectangle, inner sep=2pt,rounded corners=1pt] (X)\n        {\\href{#1}{\\color{white}{\\tiny \\sffamily \\textbf{API}}}};}\n\n\n\\newcommand{\\plot}[5]{%\n  \\begin{tabular}{@{}p{0.18\\columnwidth}p{0.795\\columnwidth}@{}}\n    \\adjustimage{width=0.18\\columnwidth,valign=t}{#1} &\n    {\\ttfamily \\scriptsize #2} \\hfill \\api{#3} \\newline\n    {\\scriptsize #4}  \\newline\n    {\\scriptsize #5 } \\vspace{.7em}\\\\\n  \\end{tabular}}\n\n\\newcommand{\\scale}[3]{%\n  \\begin{tabular}{@{}p{0.18\\columnwidth}p{0.288\\columnwidth}@{}}\n    \\adjustimage{width=0.18\\columnwidth,valign=t}{#1} & {\\ttfamily #2} \\newline\n    {\\scriptsize #3}\n  \\end{tabular}}\n\n\\newcommand{\\colormap}[1]{%\n  \\adjustimage{width=0.7\\columnwidth,valign=c}{colormap-#1.pdf} &\n  \\tiny \\ttfamily #1\\\\ \\arrayrulecolor{white}\\hline\n}\n\n\\newcommand{\\palette}[2]{%\n  \\adjustimage{width=0.7\\columnwidth,valign=c}{colors-#1.pdf} &\n  \\tiny \\ttfamily #2\\\\ \\arrayrulecolor{white}\\hline\n}\n\n\n\\newcommand{\\optional}[1]{\\textcolor{gray}{#1}}\n\\newcommand{\\mandatory}[1]{\\textbf{#1}}\n\\newcommand{\\parameter}[2]{%\n  \\expandafter\\ifstrequal\\expandafter{#1}{optional}%\n                                     {\\optional{#2}}{\\mandatory{#2}}}\n% --- Parameter: interpolation\n\n\\newcommand{\\paramx}[1]{%\n  \\pdftooltip{\\parameter{#1}{X}}\n  {Horizontal coordinates of data point. 1D array like or scalar. }\n}\n\n\\newcommand{\\paramy}[1]{%\n  \\pdftooltip{\\parameter{#1}{Y}}%\n  {Vertical coordinates of data point. 1D array like or scalar. }\n}\n\n\\newcommand{\\paramfmt}[1]{%\n  \\pdftooltip{\\parameter{#1}{fmt}}%\n  {A format string, e.g. 'ro' for red circles. Format strings are just\n   an abbreviation for quickly setting basic line properties. All of\n   these and more can also be controlled by keyword arguments.}\n}\n\n\\newcommand{\\paramcolor}[1]{%\n  \\pdftooltip{\\parameter{#1}{color}}%\n  {Set line color.}\n}\n\n\\newcommand{\\parammarker}[1]{%\n  \\pdftooltip{\\parameter{#1}{marker}}%\n  {Set marker style.}\n}\n\n\\newcommand{\\paramlinestyle}[1]{%\n  \\pdftooltip{\\parameter{#1}{linestyle}}%\n  {Set line style.}\n}\n\n\n  \\newcommand{\\interpolation}[1]{%\n  \\pdftooltip{\\parameter{#1}{interpolation}}\n  {None, 'none', 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36',\n   'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom', 'gaussian',\n   'bessel', 'mitchell', 'sinc', 'lanczos'}\n}\n\n% --- Parameter: extent\n\\newcommand{\\extent}{\\pdftooltip{extent}{[left, right, bottom, top]}}\n\n% --- Parameter: origin\n\\newcommand{\\origin}{\\pdftooltip{origin}{'upper', 'lower'}}\n\n% --- Parameter: z\n\\newcommand{\\Z}{\\pdftooltip{z}{(M,N): an image with scalar data. The values are mappedto colors using normalization and a colormap.\\textCR\n(M, N, 3): an image with RGB values (0-1 float or 0-255 int)\\textCR\n(M, N, 4): an image with RGBA values (0-1 float or 0-255 int)}}\n\n% --- Parameter: cmap\n\\newcommand{\\cmap}{\\pdftooltip{cmap}{\n    Uniform: 'viridis', 'plasma', 'inferno', 'magma', 'cividis'\\textCR\n    \\textCR\n    Sequential: 'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',\n                'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n                'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'\\textCR\n    \\textCR\n    Diverging: 'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',\n               'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr',\n               'seismic'\\textCR\n    \\textCR\n    Cyclic: 'twilight', 'twilight_shifted', 'hsv'\\textCR\n    \\textCR\n    Qualitative: 'Pastel1', 'Pastel2', 'Paired', 'Accent',\n                 'Dark2', 'Set1', 'Set2', 'Set3', 'tab10',\n                 'tab20', 'tab20b', 'tab20c'}}\n\n\n\\newenvironment{myboxed}[1]\n{\\begin{mdframed}[linecolor=black,\n                  backgroundcolor=white,\n                  outerlinewidth=0.25pt,\n                  %roundcorner=0.25em,\n                  innertopmargin=1ex,\n                  topline=true,\n                  rightline=true,\n                  leftline=true,\n                  bottomline=true,\n                  linecolor=black!0,\n                  frametitleaboveskip=0.5em,\n                  frametitlebelowskip=0.5em,\n                  innerbottommargin=.5\\baselineskip,\n                  innerrightmargin=.5em,\n                  innerleftmargin=.5em,\n                  %userdefinedwidth=1\\textwidth,\n                  % frametitle={\\scshape \\bfseries \\sffamily #1},\n                  frametitle={\\footnotesize \\RobotoSlab \\bfseries \\hspace*{0mm} #1},\n                  % frametitlerule=true,\n                  %frametitlerulecolor=red,\n                  frametitlebackgroundcolor=black!5,\n                  frametitlerulewidth=2pt]}\n{\\end{mdframed}}\n\n\n\n\n\n% -----------------------------------------------------------------------------\n\\begin{document}\n\\thispagestyle{empty}\n% \\footnotesize\n\\scriptsize\n\n\\begin{multicols*}{5}\n  \\begin{overpic}[width=\\columnwidth,tics=6,trim=12 6 18 6, clip]{logo2.png}\n    \\put (16.5,1.5) {\\scriptsize\\RobotoCon \\textcolor[HTML]{11557c}{Cheat sheet}}\n    \\put (80,1.5) {\\tiny\\Roboto \\textcolor[HTML]{11557c}{Version 3.7.4}}\n   \\end{overpic}\n  %\\textbf{\\Large \\RobotoCon Matplotlib 3.2 cheat sheet}\\\\\n  %{\\ttfamily https://matplotlib.org} \\hfill CC-BY 4.0\n  % \\bigskip\n  \\vspace{\\fill}\n  %\\hspace{1mm} \\small \\url{https://matplotlib.org/}\n  %\\vspace{\\fill}\n\n  % --- Quick start -----------------------------------------------------------\n  \\begin{myboxed}{Quick start \\hfill\n      \\API{https://matplotlib.org/tutorials/introductory/pyplot.html}}\n  {\\ttfamily \\scriptsize\n  import numpy as np\\\\\n  import matplotlib as mpl\\\\\n  import matplotlib.pyplot as plt\\\\\n  \\\\\n  \\\\\n  X = np.linspace(0, 2*np.pi, 100)\\\\\n  Y = np.cos(X)\\\\\n  \\\\\n  fig, ax = plt.subplots()\\\\\n  ax.plot(X, Y, color='green')\\\\\n  \\\\\n  fig.savefig(``figure.pdf'')\\\\\n  plt.show() }\n  \\end{myboxed}\n  \\vspace{\\fill}\n\n  % --- Figure anatomy --------------------------------------------------------\n  \\begin{myboxed}{Anatomy of a figure}\n  \\includegraphics[width=\\columnwidth]{anatomy.pdf}\n  \\end{myboxed}\n  \\vspace{\\fill}\n  % --- Layout ---------------------------------------------------------------\n  \\begin{myboxed}{Subplots layout \\hfill\n      \\API{https://matplotlib.org/tutorials/intermediate/gridspec.html} }\n  \\plot{layout-subplot.pdf}{\\textbf{subplot[s]}(rows, cols, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html}\n       {\\ttfamily fig, axs = plt.subplots(3, 3)}\n       {}\n  \\plot{layout-gridspec.pdf}{G = \\textbf{gridspec}(rows,cols, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html}\n       {\\ttfamily ax = G[0, :]}{}\n  \\plot{layout-inset.pdf}{ax.\\textbf{inset\\_axes}(extent)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.inset_axes.html}\n       {}{}\n  \\plot{layout-divider.pdf}{d=\\textbf{make\\_axes\\_locatable}(ax)}\n       {https://matplotlib.org/mpl_toolkits/axes_grid/users/axes_divider.html}\n       {\\ttfamily ax = d.new\\_horizontal('10\\%')}{}\n  \\end{myboxed}\n  \\vspace{\\fill}\n\n  % --- Getting help ----------------------------------------------------------\n  \\begin{myboxed}{Getting help}\n    \\href{https://matplotlib.org}\n         {\\faIcon{globe}\\,matplotlib.org}\\\\\n    \\href{https://github.com/matplotlib/matplotlib/issues}\n         {\\faIcon{github}\\,github.com/matplotlib/matplotlib/issues}\\\\\n    \\href{https://discourse.matplotlib.org}\n         {\\faIcon{discourse}\\,discourse.matplotlib.org}\\\\\n    \\href{https://stackoverflow.com/questions/tagged/matplotlib}\n         {\\faIcon{stack-overflow}\\,stackoverflow.com/questions/tagged/matplotlib}\\\\\n    \\href{https://gitter.im/matplotlib/matplotlib}\n         {\\faIcon{gitter}\\,{https://gitter.im/matplotlib/matplotlib}}\\\\\n    \\href{https://twitter.com/matplotlib}\n         {\\faIcon{twitter}\\,twitter.com/matplotlib}\\\\\n    \\href{https://mail.python.org/mailman/listinfo/matplotlib-users}\n         {\\faIcon[regular]{envelope}\\,Matplotlib users mailing list}\n  \\end{myboxed}\n\n\n  % --- Basic plots -----------------------------------------------------------\n  \\begin{myboxed}{Basic plots}\n  \\plot{basic-plot.pdf}{\\textbf{plot}([X], Y, [fmt], …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html}\n       {\\optional{X},\n        \\mandatory{Y},\n        \\optional{fmt},\n        \\optional{color},\n        \\optional{marker},\n        \\optional{linestyle}}\n       {}\n  \\plot{basic-scatter.pdf}{\\textbf{scatter}(X, Y, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html}\n       {\\mandatory{X},\n        \\mandatory{Y},\n        \\optional{[s]izes},\n        \\optional{[c]olors},\n        \\optional{marker},\n        \\optional{cmap}}\n       {}\n  \\plot{basic-bar.pdf}{\\textbf{bar[h]}(x, height, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html}\n       { \\mandatory{x},\n         \\mandatory{height},\n         \\optional{width},\n         \\optional{bottom},\n         \\optional{align},\n         \\optional{color} }{}\n  \\plot{basic-imshow.pdf}{\\textbf{imshow}(Z, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html}\n       { \\mandatory{Z},\n         \\optional{cmap},\n         \\optional{interpolation},\n         \\optional{extent},\n         \\optional{origin} }\n       {}\n  \\plot{basic-contour.pdf}{\\textbf{contour[f]}([X], [Y], Z, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contour.html}\n       { \\optional{X},\n         \\optional{Y},\n         \\mandatory{Z},\n         \\optional{levels},\n         \\optional{colors},\n         \\optional{extent},\n         \\optional{origin} }\n       {}\n  \\plot{basic-pcolormesh.pdf}{\\textbf{pcolormesh}([X], [Y], Z, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html}\n       { \\optional{X},\n         \\optional{Y},\n         \\mandatory{Z},\n         \\optional{vmin},\n         \\optional{vmax},\n         \\optional{cmap}}\n       {}\n  \\plot{basic-quiver.pdf}{\\textbf{quiver}([X], [Y], U, V, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.quiver.html}\n     { \\optional{X},\n       \\optional{Y},\n       \\mandatory{U},\n       \\mandatory{V},\n       \\optional{C},\n       \\optional{units},\n       \\optional{angles} }\n     {}\n  \\plot{basic-pie.pdf}{\\textbf{pie}(X, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html}\n       {\\mandatory{Z},\n         \\optional{explode},\n         \\optional{labels},\n         \\optional{colors},\n         \\optional{radius}}\n       {}\n   \\plot{basic-text.pdf}{\\textbf{text}(x, y, text, …)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html}\n       {\\mandatory{x},\n        \\mandatory{y},\n        \\mandatory{text},\n        \\optional{va},\n        \\optional{ha},\n        \\optional{size},\n        \\optional{weight},\n        \\optional{transform} }\n       {}\n   \\plot{basic-fill.pdf}{\\textbf{fill[\\_between][x]}(…)}\n       {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.fill.html}\n       {\\mandatory{X},\n        \\optional{Y1},\n        \\optional{Y2},\n        \\optional{color},\n        \\optional{where} }\n       {}\n  \\end{myboxed}\n  \\vspace{\\fill}\n  % --- Advanced plots --------------------------------------------------------\n  \\begin{myboxed}{Advanced plots}\n  \\plot{advanced-step.pdf}{\\textbf{step}(X, Y, [fmt], …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.step.html}\n     {\\mandatory{X},\n      \\mandatory{Y},\n      \\optional{fmt},\n      \\optional{color},\n      \\optional{marker},\n      \\optional{where} }\n     {}\n  \\plot{advanced-boxplot.pdf}{\\textbf{boxplot}(X, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html}\n     { \\mandatory{X},\n       \\optional{notch},\n       \\optional{sym},\n       \\optional{bootstrap},\n       \\optional{widths} }\n     {}\n  \\plot{advanced-errorbar.pdf}{\\textbf{errorbar}(X,Y,xerr,yerr, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.errorbar.html}\n     { \\mandatory{X},\n       \\mandatory{Y},\n       \\optional{xerr},\n       \\optional{yerr},\n       \\optional{fmt} }\n     {}\n  \\plot{advanced-hist.pdf}{\\textbf{hist}(X, bins, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html}\n     {\\mandatory{X},\n      \\optional{bins},\n      \\optional{range},\n      \\optional{density},\n      \\optional{weights}}\n     {}\n  \\plot{advanced-violin.pdf}{\\textbf{violinplot}(D, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.violinplot.html}\n     {\\mandatory{D},\n      \\optional{positions},\n      \\optional{widths},\n      \\optional{vert} }\n     {}\n  \\plot{advanced-barbs.pdf}{\\textbf{barbs}([X], [Y], U, V, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.barbs.html}\n     { \\optional{X},\n       \\optional{Y},\n       \\mandatory{U},\n       \\mandatory{V},\n       \\optional{C},\n       \\optional{length},\n       \\optional{pivot},\n       \\optional{sizes} }\n     {}\n  \\plot{advanced-event.pdf}{\\textbf{eventplot}(positions, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.eventplot.html}\n     {\\mandatory{positions},\n       \\optional{orientation},\n       \\optional{lineoffsets} }\n     {}\n  \\plot{advanced-hexbin.pdf}{\\textbf{hexbin}(X, Y, C, …)}\n     {https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html}\n     {\\mandatory{X},\n      \\mandatory{Y},\n      \\optional{C},\n      \\optional{gridsize},\n       \\optional{bins} }\n     {}\n  \\end{myboxed}\n\n\n  % --- Scale ---------------------------------------------------------------\n  \\begin{myboxed}{Scales \\hfill\n    \\API{https://matplotlib.org/stable/api/scale_api.html}}\n  {\\ttfamily ax.\\textbf{set\\_[xy]scale}(scale, …)}\n  \\smallskip\n  \\scale{scale-linear.pdf}{\\textbf{linear}}{any values}\n  \\scale{scale-log.pdf}{\\textbf{log}}{values > 0}\n  \\scale{scale-symlog.pdf}{\\textbf{symlog}}{any values}\n  \\scale{scale-logit.pdf}{\\textbf{logit}}{0 < values <  1}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  % --- Projections -----------------------------------------------------------\n  \\begin{myboxed}{Projections \\hfill\n      \\API{https://matplotlib.org/stable/api/projections_api.html}}\n  {\\ttfamily \\textbf{subplot}(…, projection=p)}\n  \\smallskip\n  \\scale{projection-polar.pdf}{p='polar'}{}\n  \\scale{projection-3d.pdf}\n      {p='3d'\\hfill\\api{https://matplotlib.org/stable/api/toolkits/mplot3d.html}}{}\n  \\plot{projection-cartopy.pdf}{p=ccrs.Orthographic()}\n       {https://scitools.org.uk/cartopy/docs/latest/reference/projections.html}\n       {import cartopy.crs as ccrs}\n       {}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  % --- Linestyles ---------------------------------------------------------------\n  \\begin{myboxed}{Lines \\hfill\n      \\API{https://matplotlib.org/gallery/lines_bars_and_markers/linestyles.html}}\n  \\includegraphics[width=\\columnwidth]{linestyles.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  % --- Markers ---------------------------------------------------------------\n  \\begin{myboxed}{Markers \\hfill\n                \\API{https://matplotlib.org/stable/api/markers_api.html}}\n      \\includegraphics[width=\\columnwidth]{markers.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  % --- Colors ---------------------------------------------------------------\n  \\begin{myboxed}{Colors \\hfill\n      \\API{https://matplotlib.org/tutorials/colors/colors.html}}\n    %  mpl.colors.to\\_rbga(\\textbf{color})\\smallskip\\\\\n    \\def\\arraystretch{0.5}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\palette{cycle}{'Cn'}\n      \\palette{raw}{ 'x' }\n      \\palette{name}{'name'}\n      \\palette{rgba}{(R,G,B[,A])}\n      \\palette{HexRGBA}{'\\#RRGGBB[AA]'}\n      \\palette{grey}{'x.y'}\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n\n\n  % --- Colormaps -------------------------------------------------------------\n  \\begin{myboxed}{Colormaps \\hfill\n      \\API{https://matplotlib.org/tutorials/colors/colormaps.html}}\n    {\\ttfamily plt.\\textbf{get\\_cmap}(name) \\smallskip\\\\}\n    \\def\\arraystretch{0.5}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}Uniform & \\\\\n      \\colormap{viridis} \\colormap{magma} \\colormap{plasma}\n      %\n      \\scriptsize \\rule{0pt}{1.25em}Sequential &\\\\\n      \\colormap{Greys} \\colormap{YlOrBr} \\colormap{Wistia}\n      %\n      \\scriptsize \\rule{0pt}{1.25em}Diverging &\\\\\n      \\colormap{Spectral} \\colormap{coolwarm} \\colormap{RdGy}\n      %\n      \\scriptsize \\rule{0pt}{1.25em}Qualitative &\\\\\n      \\colormap{tab10} \\colormap{tab20}\n      %\n      \\scriptsize \\rule{0pt}{1.25em}Cyclic &\\\\\n      \\colormap{twilight} % \\colormap{hsv}\n    \\end{tabular}\n  \\end{myboxed}\n\n  % --- Ticks locators --------------------------------------------------------\n  \\begin{myboxed}{Tick locators \\hfill\n    \\API{https://matplotlib.org/stable/api/ticker_api.html}}\n    {\\tiny \\ttfamily\n      from matplotlib import ticker\\\\\n      ax.[xy]axis.set\\_[minor|major]\\_locator(\\textbf{locator})\\par\n      \\vspace{1em}\n      \\hspace{-1em}\\includegraphics[width=\\columnwidth]{tick-locators.pdf}\n      }\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Tick formatters \\hfill\n    \\API{https://matplotlib.org/stable/api/ticker_api.html}}\n    {\\tiny \\ttfamily\n      from matplotlib import ticker\\\\\n      ax.[xy]axis.set\\_[minor|major]\\_formatter(\\textbf{formatter})\\par\n      \\vspace{1em}\n      \\hspace{-1em}\\includegraphics[width=\\columnwidth]{tick-formatters.pdf}\n    }\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Ornaments}\n    {\\ttfamily ax.\\textbf{legend}(…) \\hfill\n    \\api{https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html}}\\\\\n     handles, labels, loc, title, frameon\\smallskip\\\\\n    \\includegraphics[width=0.9\\columnwidth]{legend.pdf}\n    \\medskip\\\\\n    %\n    {\\ttfamily ax.\\textbf{colorbar}(…)} \\hfill\n    \\api{https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.colorbar.html}\\\\\n    mappable, ax, cax, orientation \\smallskip\\\\\n    \\includegraphics[width=\\columnwidth]{colorbar.pdf}\\\\\n    \\medskip\\\\\n    %\n    {\\ttfamily ax.\\textbf{annotate}(…)} \\hfill\n    \\api{https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html}\\\\\n    \\mandatory{text},\n    \\mandatory{xy},\n    \\mandatory{xytext},\n    \\optional{xycoords},\n    \\optional{textcoords},\n    \\optional{arrowprops}\n    \\smallskip\\\\\n    \\includegraphics[width=\\columnwidth]{annotate.pdf}\\\\\n    %\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Event handling \\hfill\n      \\API{https://matplotlib.org/users/event_handling.html}}\n    {\\ttfamily \\scriptsize\n      fig, ax = plt.subplots()\\par\n      \\par\n      def on\\_click(event):\\par\n      ~~print(event)\\par\n      fig.canvas.mpl\\_connect(\\par\n      ~~'button\\_press\\_event', on\\_click)\\par\n    }\n  \\end{myboxed}\n\n  %\n  % \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Animation \\hfill\n      \\API{https://matplotlib.org/stable/api/animation_api.html}}\n  {\\ttfamily \\scriptsize\n  import matplotlib.animation as mpla\\par\n  ~\\par\n  T = np.linspace(0, 2*np.pi, 100)\\par\n  S = np.sin(T)\\par\n  line, = plt.plot(T, S)\\par\n  def animate(i):\\par\n  ~~~~line.set\\_ydata(np.sin(T+i/50))\\par\n  anim = mpla.FuncAnimation(\\par\n  ~~~~plt.gcf(), animate, interval=5)\\par\n  plt.show()\\par\n  }\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Styles \\hfill\n      \\API{https://matplotlib.org/tutorials/introductory/customizing.html}}\n    \\setlength{\\fboxsep}{0pt}%\n    \\setlength{\\fboxrule}{.25pt}%\n              {\\ttfamily plt.style.use(\\textbf{style})\\medskip}\\\\\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-default.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-classic.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-grayscale.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-ggplot.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-seaborn-v0_8.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-fast.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-bmh.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-Solarize_Light2.pdf}}\n    \\fbox{\\includegraphics[width=.32\\columnwidth]{style-seaborn-v0_8-notebook.pdf}}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Quick reminder}\n  {\\ttfamily\n    ax.\\textbf{grid}()\\\\\n    ax.\\textbf{set\\_[xy]lim}(vmin, vmax)\\\\\n    ax.\\textbf{set\\_[xy]label}(label)\\\\\n    ax.\\textbf{set\\_[xy]ticks}(ticks, [labels])\\\\\n    ax.\\textbf{set\\_[xy]ticklabels}(labels)\\\\\n    ax.\\textbf{set\\_title}(title)\\\\\n    ax.\\textbf{tick\\_params}(width=10, …)\\\\\n    ax.\\textbf{set\\_axis\\_[on|off]}()\\\\\n    \\\\\n    fig.\\textbf{suptitle}(title)\\\\\n    fig.\\textbf{tight\\_layout}()\\\\\n    plt.\\textbf{gcf}(), plt.\\textbf{gca}()\\\\\n    mpl.\\textbf{rc}('axes', linewidth=1, …)\\\\\n    {[fig|ax]}.patch.\\textbf{set\\_alpha}(0)\\\\\n    \\verb|text=r'$\\frac{-e^{i\\pi}}{2^n}$'|}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  %% % --- Toolkits --------------------------------------------------------------\n  %% \\begin{myboxed}{Toolkits and libraries}\n  %%   \\href{https://matplotlib.org/basemap/}{Basemap} ---\n  %% \\href{https://scitools.org.uk/cartopy/docs/latest/}{Cartopy} ---\n  %% \\href{https://geopandas.org/}{GeoPandas} ---\n  %% \\href{https://residentmario.github.io/geoplot/index.html}{Geoplot} ---\n  %% \\href{https://github.com/yhat/ggpy}{GGPlot} ---\n  %% \\href{http://holoviews.org/}{Holoviews} ---\n  %% \\href{https://seaborn.pydata.org/}{Seaborn} ---\n  %% \\href{https://gr-framework.org/}{GR Framework} ---\n  %% \\href{https://www.scikit-yb.org/en/latest/}{Yellowbrick}\n  %% \\end{myboxed}\n  %% %\n  %% \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Keyboard shortcuts \\hfill\n    \\API{https://matplotlib.org/users/navigation_toolbar.html}}\n    \\def\\arraystretch{1.25}\n    \\begin{tabular}{ll}\n      \\keys{\\ctrl+s} Save        & \\keys{\\ctrl+w} Close plot\\\\\n      \\keys{r} Reset view        & \\keys{f} Fullscreen 0/1\\\\\n      \\keys{f} View forward      & \\keys{b} View back\\\\\n      \\keys{p} Pan view          & \\keys{o} Zoom to rect\\\\\n      \\keys{x} X pan/zoom        & \\keys{y} Y pan/zoom\\\\\n      \\keys{g} Minor grid 0/1    & \\keys{G} Major grid 0/1\\\\\n      \\keys{l} X axis log/linear & \\keys{L} Y axis log/linear\\\\\n      %\\keys{l} & Toggle y linear / log axis\\\\\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Ten simple rules \\hfill\n      \\READ{https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833}}\n    1. Know your audience\\\\\n    2. Identify your message\\\\\n    3. Adapt the figure\\\\\n    4. Captions are not optional\\\\\n    5. Do not trust the defaults\\\\\n    6. Use color effectively\\\\\n    7. Do not mislead the reader\\\\\n    8. Avoid “chartjunk”\\\\\n    9. Message trumps beauty\\\\\n    10. Get the right tool\n  \\end{myboxed}\n\\end{multicols*}\n\n\\begin{multicols*}{5}\n  \\begin{myboxed}{Axes adjustments\\hfill\n      \\API{https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots_adjust.html}}\n    plt.\\textbf{subplots\\_adjust}( … )\\\\\n\n    \\includegraphics[width=\\columnwidth]{adjustments.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Extent \\& origin \\hfill\n      \\API{https://matplotlib.org/tutorials/intermediate/imshow_extent.html} }\n    ax.\\textbf{imshow}( extent=…, origin=… )\\\\\n\n    \\includegraphics[width=\\columnwidth]{extents.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Text alignments \\hfill\n      \\API{https://matplotlib.org/tutorials/text/text_props.html} }\n    ax.\\textbf{text}( …, ha=… , va=…, …)\\\\\n\n    \\includegraphics[width=\\columnwidth]{text-alignments.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Text parameters  \\hfill\n      \\API{https://matplotlib.org/tutorials/text/text_props.html}}\n    ax.\\textbf{text}(…, family=…, size=…, weight=…)\\\\\n    ax.\\textbf{text}(…, fontproperties=…)\\\\\n\n    \\includegraphics[width=\\columnwidth]{fonts.pdf}\n  \\end{myboxed}\n\n\n  \\begin{myboxed}{Uniform colormaps}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      \\colormap{viridis}\n      \\colormap{plasma}\n      \\colormap{inferno}\n      \\colormap{magma}\n      \\colormap{cividis}\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Sequential colormaps}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      \\colormap{Greys}\n      \\colormap{Purples}\n      \\colormap{Blues}\n      \\colormap{Greens}\n      \\colormap{Oranges}\n      \\colormap{Reds}\n      \\colormap{YlOrBr}\n      \\colormap{YlOrRd}\n      \\colormap{OrRd}\n      \\colormap{PuRd}\n      \\colormap{RdPu}\n      \\colormap{BuPu}\n      \\colormap{GnBu}\n      \\colormap{PuBu}\n      \\colormap{YlGnBu}\n      \\colormap{PuBuGn}\n      \\colormap{BuGn}\n      \\colormap{YlGn}\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Diverging colormaps}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      \\colormap{PiYG}\n      \\colormap{PRGn}\n      \\colormap{BrBG}\n      \\colormap{PuOr}\n      \\colormap{RdGy}\n      \\colormap{RdBu}\n      \\colormap{RdYlBu}\n      \\colormap{RdYlGn}\n      \\colormap{Spectral}\n      \\colormap{coolwarm}\n      \\colormap{bwr}\n      \\colormap{seismic}\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Qualitative colormaps}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      \\colormap{Pastel1}\n      \\colormap{Pastel2}\n      \\colormap{Paired}\n      \\colormap{Accent}\n      \\colormap{Dark2}\n      \\colormap{Set1}\n      \\colormap{Set2}\n      \\colormap{Set3}\n      \\colormap{tab10}\n      \\colormap{tab20}\n      \\colormap{tab20b}\n      \\colormap{tab20c}\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Miscellaneous colormaps}\n    \\begin{tabular}{@{}p{0.7\\columnwidth}p{0.25\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      \\colormap{terrain}\n      \\colormap{ocean}\n      \\colormap{cubehelix}\n      \\colormap{rainbow}\n      \\colormap{twilight}\n    \\end{tabular}\n  \\end{myboxed}\n\n\n\n  \\begin{myboxed}{Color names \\hfill\n      \\API{https://matplotlib.org/stable/api/colors_api.html} }\n    \\includegraphics[width=\\columnwidth]{colornames.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Image interpolation\n      \\hfill \\API{https://matplotlib.org/gallery/images_contours_and_fields/interpolation_methods.html} }\n        \\smallskip\n%%    plt.\\textbf{imshow}(…, interpolation=…)\\\\\n%%    plt.\\textbf{contour[f]}(…, interpolation=…)\\\\\n    \\includegraphics[width=\\columnwidth]{interpolations.pdf}\n  \\end{myboxed}\n\n\n  \\begin{myboxed}{Legend placement}\n    \\includegraphics[width=\\columnwidth]{legend-placement.pdf}\n    ax.\\textbf{legend}(loc=\"string\", bbox\\_to\\_anchor=(x, y))\\\\\n    \\begin{tabular}{@{}p{0.33\\columnwidth}\n                       p{0.33\\columnwidth}\n                       p{0.33\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      2: upper left  & 9: upper center  & 1: upper right\\\\\n      6: center left & 10: center       & 7: center right\\\\\n      3: lower left  & 8: lower center  & 4: lower right\\\\\n    \\end{tabular}\n\n    \\begin{tabular}{@{}p{0.495\\columnwidth}\n                       p{0.495\\columnwidth}@{}}\n      \\scriptsize \\rule{0pt}{1.25em}\\noindent\n      \\tiny A: upper right /  {\\ttfamily (-0.1, 0.9)} & \\tiny B: center right / {\\ttfamily (-0.1, 0.5)}\\\\\n      \\tiny C: lower right /  {\\ttfamily (-0.1, 0.1)} & \\tiny D: upper left /   {\\ttfamily (0.1, -0.1)}\\\\\n      \\tiny E: upper center / {\\ttfamily (0.5, -0.1)} & \\tiny F: upper right /  {\\ttfamily (0.9, -0.1)}\\\\\n      \\tiny G: lower left /   {\\ttfamily (1.1, 0.1)} & \\tiny H: center left /  {\\ttfamily (1.1, 0.5)}\\\\\n      \\tiny I: upper left /   {\\ttfamily (1.1, 0.9)} & \\tiny J: lower right /  {\\ttfamily (0.9, 1.1)}\\\\\n      \\tiny K: lower center / {\\ttfamily (0.5, 1.1)} & \\tiny L: lower left /   {\\ttfamily (0.1, 1.1)}\n    \\end{tabular}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Annotation connection styles \\hfill\n      \\API{https://matplotlib.org/tutorials/text/annotations.html} }\n    \\includegraphics[width=\\columnwidth]{annotation-connection-styles.pdf}\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Annotation arrow styles \\hfill\n      \\API{https://matplotlib.org/tutorials/text/annotations.html} }\n    \\includegraphics[width=\\columnwidth]{annotation-arrow-styles.pdf}\n  \\end{myboxed}\n\n  %\n  \\vspace{\\fill}\n  %\n\n  %\n  \\begin{myboxed}{How do I …}\n    \\textbf{… resize a figure?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ fig.set\\_size\\_inches(w, h)\\\\\n    \\textbf{… save a figure?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ fig.savefig(\"figure.pdf\")\\\\\n    \\textbf{… save a transparent figure?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ fig.savefig(\"figure.pdf\", transparent=True)\\\\\n    \\textbf{… clear a figure/an axes?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ fig.clear() $\\rightarrow$ ax.clear()\\\\\n    \\textbf{… close all figures?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ plt.close(\"all\")\\\\\n    \\textbf{… remove ticks?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ ax.set\\_[xy]ticks([])\\\\\n    \\textbf{… remove tick labels ?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ ax.set\\_[xy]ticklabels([])\\\\\n    \\textbf{… rotate tick labels ?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ ax.tick\\_params(axis=\"x\", rotation=90)\\\\\n    \\textbf{… hide top spine?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ ax.spines['top'].set\\_visible(False)\\\\\n    \\textbf{… hide legend border?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$  ax.legend(frameon=False)\\\\\n    \\textbf{… show error as shaded region?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ ax.fill\\_between(X, Y+error, Y-error)\\\\\n    \\textbf{… draw a rectangle?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$  ax.add\\_patch(plt.Rectangle((0, 0), 1, 1)\\\\\n    \\textbf{… draw a vertical line?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$  ax.axvline(x=0.5)\\\\\n    \\textbf{… draw outside frame?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$  ax.plot(…, clip\\_on=False)\\\\\n    \\textbf{… use transparency?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$  ax.plot(…, alpha=0.25)\\\\\n    \\textbf{… convert an RGB image into a gray image? }\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$  gray = 0.2989*R + 0.5870*G + 0.1140*B\\\\\n    \\textbf{… set figure background color?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ fig.patch.set\\_facecolor(``grey'')\\\\\n    \\textbf{… get a reversed colormap?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ plt.get\\_cmap(``viridis\\_r'')\\\\\n    \\textbf{… get a discrete colormap?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ plt.get\\_cmap(``viridis'', 10)\\\\\n    \\textbf{… show a figure for one second?}\\\\\n    \\hspace*{2.5mm}~$\\rightarrow$ fig.show(block=False), time.sleep(1)\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Performance tips}\n    \\smallskip\n    {\\ttfamily \\fontsize{6pt}{7pt}\\selectfont\n     %\n    \\textcolor{red}{scatter(X, Y)  \\hfill slow}\\\\\n    plot(X, Y, marker=\"o\", ls=\"\")  \\hfill fast%\n    \\vskip.5\\baselineskip\n    %\n    \\textcolor{red}{for i in range(n): plot(i, X[i], \"o\") \\hfill slow}\\\\\n    plot(X, marker=\"o\", ls=\"\") \\hfill fast%\n    \\vskip.5\\baselineskip\n    %\n    \\textcolor{red}{cla(); imshow(…); canvas.draw() \\hfill slow}\\\\\n    im.set\\_data(…); canvas.draw() \\hfill fast%\n    \\vskip.1\\baselineskip\n    }\n  \\end{myboxed}\n  %\n  \\vspace{\\fill}\n  %\n  \\begin{myboxed}{Beyond Matplotlib}\n        \\smallskip\n    \\href{https://seaborn.pydata.org/}{\\textbf{Seaborn}}: Statistical data visualization\\\\\n    \\href{https://scitools.org.uk/cartopy/docs/latest/}{\\textbf{Cartopy}}: Geospatial data processing\\\\\n    \\href{https://yt-project.org/doc/index.html}{\\textbf{yt}}: Volumetric data visualization\\\\\n    \\href{https://mpld3.github.io}{\\textbf{mpld3}}: Bringing Matplotlib to the browser\\\\\n    \\href{https://datashader.org/}{\\textbf{Datashader}}: Large data processing pipeline\\\\\n    \\href{https://plotnine.org/}{\\textbf{plotnine}}: A grammar of graphics for Python\n  \\end{myboxed}\n  %\n  \\begin{center}\n  \\href{https://github.com/matplotlib/cheatsheets}{Matplotlib Cheatsheets}\\\\\n  Copyright (c) 2021 Matplotlib Development Team\\\\\n  Released under a CC-BY 4.0 International License\\\\\n  \\smallskip\n  \\includegraphics[width=\\columnwidth]{numfocus.png}\n  \\end{center}\n\n\\end{multicols*}\n\\end{document}\n"
        },
        {
          "name": "check-diffs.py",
          "type": "blob",
          "size": 1.798828125,
          "content": "#!/usr/bin/env python\n\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\n\n\nROOT_DIR = Path(__file__).parent\n\nif os.environ.get('GITHUB_ACTIONS', '') == '':\n    print('Not running when not in GitHub Actions.')\n    sys.exit()\nsummary_file = os.environ.get('GITHUB_STEP_SUMMARY')\nif summary_file is None:\n    sys.exit('$GITHUB_STEP_SUMMARY is not set')\n\ngh_pages = ROOT_DIR.parent / 'pages'\nsubprocess.run(['git', 'fetch', 'https://github.com/matplotlib/cheatsheets.git',\n                'gh-pages:upstream-gh-pages'], check=True)\nsubprocess.run(['git', 'worktree', 'add', gh_pages, 'upstream-gh-pages'],\n               check=True)\n\ndiff_dir = ROOT_DIR / 'diffs'\ndiff_dir.mkdir(exist_ok=True)\n\nhashes = {}\nfor original in gh_pages.glob('*.png'):\n    result = subprocess.run(\n        ['compare', '-metric', 'PHASH',\n         original,\n         ROOT_DIR / 'docs/_build/html' / original.name,\n         diff_dir / f'{original.stem}-diff.png'],\n        text=True, stderr=subprocess.PIPE)\n    if result.returncode == 2:  # Some kind of IO or similar error.\n        hashes[original] = (float('nan'), result.stderr)\n    elif result.stderr:  # Images were different.\n        hashes[original] = (float(result.stderr), '')\n    else:  # No differences.\n        hashes[original] = (0.0, '')\n\nwith open(summary_file, 'w+') as summary:\n    print('# Cheatsheet image comparison', file=summary)\n    print('| Filename | Perceptual Hash Difference | Error message |', file=summary)\n    print('| -------- | -------------------------- | ------------- |', file=summary)\n    for filename, (hash, message) in sorted(hashes.items()):\n        message = message.replace('\\n', ' ').replace('|', '\\\\|')\n        print(f'| {filename.name} | {hash:.05f} | {message}', file=summary)\n    print(file=summary)\n\nsubprocess.run(['git', 'worktree', 'remove', gh_pages])\n"
        },
        {
          "name": "check-links.py",
          "type": "blob",
          "size": 0.521484375,
          "content": "#!/usr/bin/env python\nimport sys\n\nimport pdfx\n\n\npdf = pdfx.PDFx(sys.argv[1])\n\nrefs = [ref for ref in pdf.get_references() if ref.reftype == 'url']\n\nstatus_codes = [pdfx.downloader.get_status_code(ref.ref) for ref in refs]\n\nbroken_links = [(ref.ref, code) for ref, code in zip(refs, status_codes) if code != 200]\n\n# it seems that Twitter does not respond well to the link checker and throws a 400\nif all(['twitter.com' in url for url, _ in broken_links]):\n    sys.exit(0)\nelse:\n    print('Broken links:', broken_links)\n    sys.exit(1)\n"
        },
        {
          "name": "check-matplotlib-version.py",
          "type": "blob",
          "size": 0.0810546875,
          "content": "#!/usr/bin/env python\nimport matplotlib as mpl\n\n\nassert mpl.__version__ == '3.7.4'\n"
        },
        {
          "name": "check-num-pages.sh",
          "type": "blob",
          "size": 0.236328125,
          "content": "#!/bin/bash\n#\n# Check that a given pdf has a certain number of pages.\n# Usage:\n#   check-num-pages.sh [pdffile] [num_pages]\n\nset -x\npdffile=$1\nnum_pages=$2\n[[ \"$(pdfinfo $pdffile | grep Pages | awk '{print $2}')\" == \"$num_pages\" ]] || exit 1\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "figures",
          "type": "tree",
          "content": null
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "handout-beginner.tex",
          "type": "blob",
          "size": 10.94921875,
          "content": "\\documentclass[10pt,landscape,a4paper]{article}\n\\usepackage[right=10mm, left=10mm, top=10mm, bottom=10mm]{geometry}\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage[english]{babel}\n\\usepackage[rm,light]{roboto}\n\\usepackage{xcolor}\n\\usepackage{graphicx}\n\\graphicspath{{./figures/}}\n\\usepackage{multicol}\n\\usepackage{colortbl}\n\\usepackage{array}\n\\setlength\\parindent{0pt}\n\\setlength{\\tabcolsep}{2pt}\n\\baselineskip=0pt\n\\setlength\\columnsep{1em}\n\\definecolor{Gray}{gray}{0.85}\n\n% --- Listing -----------------------------------------------------------------\n\\usepackage{listings}\n\\lstset{\n  frame=tb, framesep=4pt, framerule=0pt,\n  backgroundcolor=\\color{black!5},\n  basicstyle=\\ttfamily,\n  commentstyle=\\ttfamily\\color{black!50},\n  breakatwhitespace=false,\n  breaklines=true,\n  extendedchars=true,\n  keepspaces=true,\n  language=Python,\n  rulecolor=\\color{black},\n  showspaces=false,\n  showstringspaces=false,\n  showtabs=false,\n  tabsize=2,\n  %\n  emph = { plot, scatter, imshow, bar, contourf, pie, subplots, show, savefig,\n           errorbar, boxplot, hist, set_title, set_xlabel, set_ylabel, suptitle,  },\n  emphstyle = {\\ttfamily\\bfseries}\n}\n\n% --- Fonts -------------------------------------------------------------------\n\\usepackage{fontspec}\n\\usepackage[babel=true]{microtype}\n\\defaultfontfeatures{Ligatures = TeX, Mapping = tex-text}\n\\setsansfont{Roboto} [ Path           = fonts/roboto/Roboto-,\n                       Extension      = .ttf,\n                       UprightFont    = Light,\n                       ItalicFont     = LightItalic,\n                       BoldFont       = Regular,\n                       BoldItalicFont = Italic ]\n\\setromanfont{RobotoSlab} [ Path           = fonts/roboto-slab/RobotoSlab-,\n                            Extension      = .ttf,\n                            UprightFont    = Light,\n                            BoldFont       = Bold ]\n\\setmonofont{RobotoMono} [ Path           = fonts/roboto-mono/RobotoMono-,\n                           Extension      = .ttf,\n                           Scale          = 0.90,\n                           UprightFont    = Light,\n                           ItalicFont     = LightItalic,\n                           BoldFont       = Regular,\n                           BoldItalicFont = Italic ]\n\\renewcommand{\\familydefault}{\\sfdefault}\n\n% -----------------------------------------------------------------------------\n\\begin{document}\n\\thispagestyle{empty}\n\n\\section*{\\LARGE \\rmfamily\n          Matplotlib \\textcolor{orange}{\\mdseries for beginners}}\n\n\\begin{multicols*}{3}\n\nMatplotlib is a library for making 2D plots in Python. It is designed\nwith the philosophy that you should be able to create simple plots\nwith just a few commands:\\\\\n\n\\fbox{1} \\textbf{Initialize}\n\\begin{lstlisting}\n import numpy as np\n import matplotlib.pyplot as plt\n\\end{lstlisting}\n%\n\\fbox{2} \\textbf{Prepare}\n\\begin{lstlisting}\n X = np.linspace(0, 10*np.pi, 1000)\n Y = np.sin(X)\n\\end{lstlisting}\n%\n\\fbox{3} \\textbf{Render}\n\\begin{lstlisting}\n fig, ax = plt.subplots()\n ax.plot(X, Y)\n plt.show()\n\\end{lstlisting}\n%\n\\fbox{4} \\textbf{Observe} \\medskip\\\\\n\\includegraphics[width=\\linewidth]{sine.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Choose}\n% -----------------------------------------------------------------------------\n\nMatplotlib offers several kind of plots (see Gallery): \\medskip\n\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.random.uniform(0, 1, 100)\n Y = np.random.uniform(0, 1, 100)\n ax.scatter(X, Y)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{basic-scatter.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.arange(10)\n Y = np.random.uniform(1, 10, 10)\n ax.bar(X, Y)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{basic-bar.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n Z = np.random.uniform(0, 1, (8, 8))\n\n ax.imshow(Z)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{basic-imshow.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n Z = np.random.uniform(0, 1, (8, 8))\n\n ax.contourf(Z)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{basic-contour.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n Z = np.random.uniform(0, 1, 4)\n\n ax.pie(Z)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{basic-pie.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n Z = np.random.normal(0, 1, 100)\n\n ax.hist(Z)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{advanced-hist.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.arange(5)\n Y = np.random.uniform(0, 1, 5)\n ax.errorbar(X, Y, Y/4)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{advanced-errorbar.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n Z = np.random.normal(0, 1, (100, 3))\n\n ax.boxplot(Z)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{advanced-boxplot.pdf}}\n\\end{tabular}\n\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Tweak}\n% -----------------------------------------------------------------------------\nYou can modify pretty much anything in a plot, including limits,\ncolors, markers, line width and styles, ticks and ticks labels,\ntitles, etc. \\medskip\n\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.linspace(0, 10, 100)\n Y = np.sin(X)\n ax.plot(X, Y, color=\"black\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-color.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.linspace(0, 10, 100)\n Y = np.sin(X)\n ax.plot(X, Y, linestyle=\"--\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-linestyle.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.linspace(0, 10, 100)\n Y = np.sin(X)\n ax.plot(X, Y, linewidth=5)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-linewidth.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.linspace(0, 10, 100)\n Y = np.sin(X)\n ax.plot(X, Y, marker=\"o\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-marker.pdf}}\n\\end{tabular}\n\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Organize}\n% -----------------------------------------------------------------------------\n\nYou can plot several data on the same figure, but you can also split a figure\nin several subplots (named {\\em Axes}): \\medskip\n\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.linspace(0, 10, 100)\n Y1, Y2 = np.sin(X), np.cos(X)\n ax.plot(X, Y1, X, Y2)\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-multi.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n fig, (ax1, ax2) = plt.subplots(2, 1)\n ax1.plot(X, Y1, color=\"C1\")\n ax2.plot(X, Y2, color=\"C0\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-vsplit.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n fig, (ax1, ax2) = plt.subplots(1, 2)\n ax1.plot(Y1, X, color=\"C1\")\n ax2.plot(Y2, X, color=\"C0\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-hsplit.pdf}}\n\\end{tabular}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Label \\mdseries (everything)}\n% -----------------------------------------------------------------------------\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n ax.plot(X, Y)\n fig.suptitle(None)\n ax.set_title(\"A Sine wave\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-title.pdf}}\n\\end{tabular}\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n ax.plot(X, Y)\n ax.set_ylabel(None)\n ax.set_xlabel(\"Time\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{plot-xlabel.pdf}}\n\\end{tabular}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Explore}\n% -----------------------------------------------------------------------------\n\nFigures are shown with a graphical user interface that allows to zoom\nand pan the figure, to navigate between the different views and to\nshow the value under the mouse.\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Save \\mdseries (bitmap or vector format)}\n% -----------------------------------------------------------------------------\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n fig.savefig(\"my-first-figure.png\", dpi=300)\n fig.savefig(\"my-first-figure.pdf\")\n\\end{lstlisting}\n%\n\\vfill\n%\n{\\scriptsize\n  Matplotlib 3.7.4 handout for beginners.\n  Copyright (c) 2021 Matplotlib Development Team.\n  Released under a CC-BY 4.0 International License.\n  Supported by NumFOCUS.\n\\par}\n\n\\end{multicols*}\n\\end{document}\n"
        },
        {
          "name": "handout-intermediate.tex",
          "type": "blob",
          "size": 7.154296875,
          "content": "\\documentclass[10pt,landscape,a4paper]{article}\n\\usepackage[right=10mm, left=10mm, top=10mm, bottom=10mm]{geometry}\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage[english]{babel}\n\\usepackage[rm,light]{roboto}\n\\usepackage{xcolor}\n\\usepackage{graphicx}\n\\graphicspath{{./figures/}}\n\\usepackage{multicol}\n\\usepackage{colortbl}\n\\usepackage{array}\n\\setlength\\parindent{0pt}\n\\setlength{\\tabcolsep}{2pt}\n\\baselineskip=0pt\n\\setlength\\columnsep{1em}\n\\definecolor{Gray}{gray}{0.85}\n\n% --- Listing -----------------------------------------------------------------\n\\usepackage{listings}\n\\lstset{\n  frame=tb, framesep=4pt, framerule=0pt,\n  backgroundcolor=\\color{black!5},\n  basicstyle=\\ttfamily,\n  commentstyle=\\ttfamily\\color{black!50},\n  breakatwhitespace=false,\n  breaklines=true,\n  extendedchars=true,\n  keepspaces=true,\n  language=Python,\n  rulecolor=\\color{black},\n  showspaces=false,\n  showstringspaces=false,\n  showtabs=false,\n  tabsize=2,\n  %\n  emph = { plot, scatter, imshow, bar, contourf, pie, subplots, spines,\n    add_gridspec, add_subplot, set_xscale, set_minor_locator,\n    annotate, set_minor_formatter, tick_params, fill_betweenx, text, legend,\n    errorbar, boxplot, hist, title, xlabel, ylabel, suptitle },\n  emphstyle = {\\ttfamily\\bfseries}\n}\n\n% --- Fonts -------------------------------------------------------------------\n\\usepackage{fontspec}\n\\usepackage[babel=true]{microtype}\n\\defaultfontfeatures{Ligatures = TeX, Mapping = tex-text}\n\\setsansfont{Roboto} [ Path           = fonts/roboto/Roboto-,\n                       Extension      = .ttf,\n                       UprightFont    = Light,\n                       ItalicFont     = LightItalic,\n                       BoldFont       = Regular,\n                       BoldItalicFont = Italic ]\n\\setromanfont{RobotoSlab} [ Path           = fonts/roboto-slab/RobotoSlab-,\n                            Extension      = .ttf,\n                            UprightFont    = Light,\n                            BoldFont       = Bold ]\n\\setmonofont{RobotoMono} [ Path           = fonts/roboto-mono/RobotoMono-,\n                           Extension      = .ttf,\n                           Scale          = 0.90,\n                           UprightFont    = Light,\n                           ItalicFont     = LightItalic,\n                           BoldFont       = Regular,\n                           BoldItalicFont = Italic ]\n\\renewcommand{\\familydefault}{\\sfdefault}\n\n% -----------------------------------------------------------------------------\n\\begin{document}\n\\thispagestyle{empty}\n\n\\section*{\\LARGE \\rmfamily\n          Matplotlib \\textcolor{orange}{\\mdseries for intermediate users}}\n\n\\begin{multicols*}{3}\n\nA matplotlib figure is composed of a hierarchy of elements that forms\nthe actual figure. Each element can be modified. \\medskip\n\n\\includegraphics[width=\\linewidth]{anatomy.pdf}\n\n\\subsection*{\\rmfamily Figure, axes \\& spines}\n\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n fig, axs = plt.subplots(3, 3)\n axs[0, 0].set_facecolor(\"#ddddff\")\n axs[2, 2].set_facecolor(\"#ffffdd\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{layout-subplot-color.pdf}}\n\\end{tabular}\n\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n gs = fig.add_gridspec(3, 3)\n ax = fig.add_subplot(gs[0, :])\n ax.set_facecolor(\"#ddddff\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{layout-gridspec-color.pdf}}\n\\end{tabular}\n\n% -----------------------------------------------------------------------------\n\\begin{tabular}{@{}m{.821\\linewidth}m{.169\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n fig, ax = plt.subplots()\n ax.spines[\"top\"].set_color(\"None\")\n ax.spines[\"right\"].set_color(\"None\")\n\\end{lstlisting}\n& \\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{layout-spines.pdf}}\n\\end{tabular}\n\n\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Ticks \\& labels}\n\n\\begin{lstlisting}[basicstyle=\\ttfamily\\small]\n from mpl.ticker import MultipleLocator as ML\n from mpl.ticker import ScalarFormatter as SF\n ax.xaxis.set_minor_locator(ML(0.2))\n ax.xaxis.set_minor_formatter(SF())\n ax.tick_params(axis='x',which='minor',rotation=90)\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{tick-multiple-locator.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Lines \\& markers}\n\n\\begin{lstlisting}\n X = np.linspace(0.1, 10*np.pi, 1000)\n Y = np.sin(X)\n ax.plot(X, Y, \"C1o:\", markevery=50, mec=\"1.0\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{sine-marker.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Scales \\& projections}\n\n\\begin{lstlisting}\n fig, ax = plt.subplots()\n ax.set_xscale(\"log\")\n ax.plot(X, Y, \"C1o-\", markevery=50, mec=\"1.0\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{sine-logscale.pdf}\n\n\\subsection*{\\rmfamily Text \\& ornaments}\n\\begin{lstlisting}[]\n ax.fill_betweenx([-1, 1], [0], [2*np.pi])\n ax.text(0, -1, r\" Period $\\Phi$\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{sine-period.pdf}\n\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Legend}\n\\begin{lstlisting}[]\n ax.plot(X, np.sin(X), \"C0\", label=\"Sine\")\n ax.plot(X, np.cos(X), \"C1\", label=\"Cosine\")\n ax.legend(bbox_to_anchor=(0,1,1,.1), ncol=2,\n           mode=\"expand\", loc=\"lower left\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{sine-legend.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Annotation}\n\\begin{lstlisting}[]\n ax.annotate(\"A\", (X[250],Y[250]), (X[250],-1),\n   ha=\"center\", va=\"center\", arrowprops={\n     \"arrowstyle\": \"->\", \"color\": \"C1\"})\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{sine-annotate.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Colors}\n\nAny color can be used, but Matplotlib offers sets of colors:\\\\\n\\includegraphics[width=\\linewidth]{colors-cycle.pdf} \\smallskip\n\\includegraphics[width=\\linewidth]{colors-grey.pdf}\\\\\n%As well as nice colormaps (viridis an magma):\\\\\n%\\includegraphics[width=\\linewidth]{colormap-viridis.pdf} \\smallskip\n%\\includegraphics[width=\\linewidth]{colormap-magma.pdf} \\medskip\n\n% -----------------------------------------------------------------------------\n\\vspace{-1em}\n\\subsection*{\\rmfamily Size \\& DPI}\n\nConsider a square figure to be included in a two-column A4 paper with\n2\\,cm margins on each side and a column separation of 1\\,cm. The width of\na figure is (21 - 2*2 - 1)/2 = 8\\,cm. One inch being 2.54\\,cm, figure size\nshould be 3.15$\\times$3.15\\,in.\n\\begin{lstlisting}[]\n fig = plt.figure(figsize=(3.15, 3.15), dpi=50)\n plt.savefig(\"figure.pdf\", dpi=600)\n\\end{lstlisting}\n\n\n\\vfill\n%\n{\\scriptsize\n  Matplotlib 3.7.4 handout for intermediate users.\n  Copyright (c) 2021 Matplotlib Development Team.\n  Released under a CC-BY 4.0 International License.\n  Supported by NumFOCUS.\n\\par}\n\n\n\n\\end{multicols*}\n\\end{document}\n"
        },
        {
          "name": "handout-tips.tex",
          "type": "blob",
          "size": 8.6396484375,
          "content": "\\documentclass[10pt,landscape,a4paper]{article}\n\\usepackage[right=10mm, left=10mm, top=10mm, bottom=10mm]{geometry}\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage[english]{babel}\n\\usepackage[rm,light]{roboto}\n\\usepackage{xcolor}\n\\usepackage{graphicx}\n\\graphicspath{{./figures/}}\n\\usepackage{multicol}\n\\usepackage{colortbl}\n\\usepackage{array}\n\\setlength\\parindent{0pt}\n\\setlength{\\tabcolsep}{2pt}\n\\baselineskip=0pt\n\\setlength\\columnsep{1em}\n\\definecolor{Gray}{gray}{0.85}\n\n% --- Listing -----------------------------------------------------------------\n\\usepackage{listings}\n\\lstset{\n  frame=tb, framesep=4pt, framerule=0pt,\n  backgroundcolor=\\color{black!5},\n  basicstyle=\\ttfamily\\footnotesize,\n  commentstyle=\\ttfamily\\color{black!50},\n  breakatwhitespace=false,\n  breaklines=true,\n  extendedchars=true,\n  keepspaces=true,\n  language=Python,\n  rulecolor=\\color{black},\n  showspaces=false,\n  showstringspaces=false,\n  showtabs=false,\n  tabsize=2,\n  %\n  emph = {\n    plot, scatter, imshow, bar, contourf, pie, subplots, spines,\n    add_gridspec, add_subplot, set_xscale, set_minor_locator, linestyle,\n    dash_capstyle, projection, Stroke, Normal, add_axes, label, savefig,\n    get_cmap, histtype, annotate, set_minor_formatter, tick_params,\n    fill_betweenx, text, legend, errorbar, boxplot, hist, title, xlabel,\n    ylabel, suptitle, fraction, pad, set_fontname, get_xticklabels},\n  emphstyle = {\\ttfamily\\bfseries}\n}\n\n% --- Fonts -------------------------------------------------------------------\n\\usepackage{fontspec}\n\\usepackage[babel=true]{microtype}\n\\defaultfontfeatures{Ligatures = TeX, Mapping = tex-text}\n\\setsansfont{Roboto} [ Path           = fonts/roboto/Roboto-,\n                       Extension      = .ttf,\n                       UprightFont    = Light,\n                       ItalicFont     = LightItalic,\n                       BoldFont       = Regular,\n                       BoldItalicFont = Italic ]\n\\setromanfont{RobotoSlab} [ Path           = fonts/roboto-slab/RobotoSlab-,\n                            Extension      = .ttf,\n                            UprightFont    = Light,\n                            BoldFont       = Bold ]\n\\setmonofont{RobotoMono} [ Path           = fonts/roboto-mono/RobotoMono-,\n                           Extension      = .ttf,\n                           Scale          = 0.90,\n                           UprightFont    = Light,\n                           ItalicFont     = LightItalic,\n                           BoldFont       = Regular,\n                           BoldItalicFont = Italic ]\n\\renewcommand{\\familydefault}{\\sfdefault}\n\n% -----------------------------------------------------------------------------\n\\begin{document}\n\\thispagestyle{empty}\n\n\\section*{\\LARGE \\rmfamily\n          Matplotlib \\textcolor{orange}{\\mdseries tips \\& tricks}}\n\n\\begin{multicols*}{3}\n\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Transparency}\n\nScatter plots can be enhanced by using transparency (alpha) in order\nto show area with higher density. Multiple scatter plots can be\nused to delineate a frontier.\n\n\\begin{tabular}{@{}m{.774\\linewidth}m{.216\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.random.normal(-1, 1, 500)\n Y = np.random.normal(-1, 1, 500)\n ax.scatter(X, Y, 50, \"0.0\", lw=2) # optional\n ax.scatter(X, Y, 50, \"1.0\", lw=0) # optional\n ax.scatter(X, Y, 40, \"C1\",  lw=0, alpha=0.1)\n\\end{lstlisting} &\n\\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{tip-transparency.pdf}}\n\\end{tabular}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Rasterization}\nIf your figure has many graphical elements, such as a huge\nscatter, you can rasterize them to save memory and keep other elements\nin vector format.\n\\begin{lstlisting}\n X = np.random.normal(-1, 1, 10_000)\n Y = np.random.normal(-1, 1, 10_000)\n ax.scatter(X, Y, rasterized=True)\n fig.savefig(\"rasterized-figure.pdf\", dpi=600)\n\\end{lstlisting}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Offline rendering}\n\nUse the Agg backend to render a figure directly in an array.\n\\begin{lstlisting}\n from matplotlib.backends.backend_agg import FigureCanvas\n canvas = FigureCanvas(Figure()))\n ... # draw some stuff\n canvas.draw()\n Z = np.array(canvas.renderer.buffer_rgba())\n\\end{lstlisting}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Range of continuous colors}\n\nYou can use colormap to pick from a range of continuous colors.\n\n\\begin{tabular}{@{}m{.774\\linewidth}m{.216\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n X = np.random.randn(1000, 4)\n cmap = plt.get_cmap(\"Oranges\")\n colors = cmap([0.2, 0.4, 0.6, 0.8])\n\n ax.hist(X, 2, histtype='bar', color=colors)\n\\end{lstlisting} &\n\\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{tip-color-range.pdf}}\n\\end{tabular}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Text outline}\nUse text outline to make text more visible.\n\n\\begin{tabular}{@{}m{.774\\linewidth}m{.216\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n import matplotlib.patheffects as fx\n text = ax.text(0.5, 0.1, \"Label\")\n text.set_path_effects([\n   fx.Stroke(linewidth=3, foreground='1.0'),\n   fx.Normal()])\n\\end{lstlisting} &\n\\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{tip-outline.pdf}}\n\\end{tabular}\n\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Multiline plot}\nYou can plot several lines at once using {\\em None} as separator.\n\n\\begin{lstlisting}\n X,Y = [], []\n for x in np.linspace(0, 10*np.pi, 100):\n   X.extend([x, x, None]), Y.extend([0, sin(x), None])\n ax.plot(X, Y, \"black\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{tip-multiline.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Dotted lines}\nTo have rounded dotted lines, use a custom {\\ttfamily linestyle} and\nmodify {\\ttfamily dash\\_capstyle}.\n\\begin{lstlisting}\n ax.plot([0, 1], [0, 0], \"C1\",\n        linestyle=(0, (0.01, 1)), dash_capstyle=\"round\")\n ax.plot([0, 1], [1, 1], \"C1\",\n        linestyle=(0, (0.01, 2)), dash_capstyle=\"round\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{tip-dotted.pdf}\n\n% -----------------------------------------------------------------------------\n\\subsection*{\\rmfamily Combining axes}\nYou can use overlaid axes with different projections.\n\n\\begin{tabular}{@{}m{.774\\linewidth}m{.216\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n ax1 = fig.add_axes([0, 0, 1, 1],\n                    label=\"cartesian\")\n ax2 = fig.add_axes([0, 0, 1, 1],\n                    label=\"polar\",\n                    projection=\"polar\")\n\\end{lstlisting} &\n\\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{tip-dual-axis.pdf}}\n\\end{tabular}\n\n\\subsection*{\\rmfamily Colorbar adjustment}\nYou can adjust a colorbar's size when adding it.\n\n\\begin{tabular}{@{}m{.754\\linewidth}m{.236\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n im = ax.imshow(Z)\n\n cb = plt.colorbar(im,\n         fraction=0.046, pad=0.04)\n cb.set_ticks([])\n\\end{lstlisting} &\n\\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{tip-colorbar.pdf}}\n\\end{tabular}\n\n\\subsection*{\\rmfamily Taking advantage of typography}\nYou can use a condensed font such as Roboto\nCondensed to save space on tick labels.\n\\begin{lstlisting}\n for tick in ax.get_xticklabels(which='both'):\n     tick.set_fontname(\"Roboto Condensed\")\n\\end{lstlisting}\n\\includegraphics[width=\\linewidth]{tip-font-family.pdf}\n\n\\subsection*{\\rmfamily Getting rid of margins}\nOnce your figure is finished, you can call {\\ttfamily tight\\_layout()}\nto remove white margins. If there are remaining margins, you can use\nthe {\\ttfamily pdfcrop} utility (comes with TeX live).\n\n\n\\subsection*{\\rmfamily Hatching}\nYou can achieve a nice visual effect with thick hatch patterns.\n\n\\begin{tabular}{@{}m{.774\\linewidth}m{.216\\linewidth}}\n\\begin{lstlisting}[belowskip=-\\baselineskip]\n cmap = plt.get_cmap(\"Oranges\")\n plt.rcParams['hatch.color'] = cmap(0.2)\n plt.rcParams['hatch.linewidth'] = 8\n ax.bar(X, Y, color=cmap(0.6), hatch=\"/\")\n\\end{lstlisting} &\n\\raisebox{-0.75em}{\\includegraphics[width=\\linewidth]{tip-hatched.pdf}}\n\\end{tabular}\n\n\n\\subsection*{\\rmfamily Read the documentation}\n\nMatplotlib comes with an extensive documentation explaining the\ndetails of each command and is generally accompanied by examples.\nTogether with the huge online gallery, this documentation is a\ngold-mine.\n\n\\vfill\n%\n{\\scriptsize\n  Matplotlib 3.7.4 handout for tips \\& tricks.\n  Copyright (c) 2021 Matplotlib Development Team.\n  Released under a CC-BY 4.0 International License.\n  Supported by NumFOCUS.\n\\par}\n\n\n\n\\end{multicols*}\n\\end{document}\n"
        },
        {
          "name": "logos",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}