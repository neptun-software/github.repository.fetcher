{
  "metadata": {
    "timestamp": 1736560531795,
    "page": 133,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SigmaHQ/sigma",
      "stars": 8576,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.470703125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=lf\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.c text\n*.h text\n*.csv text\n*.sh text\n*.py text\n\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n\n# force lf for Sigma rule\n*.yml text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.142578125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# MacOS Finder\n.DS_Store\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# vi(m)\n*.swp\nsettings.json\n\n# VisualStudio\n.vs/\n.vscode/launch.json\n\n# sigma2attack\nheatmap.json\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.53515625,
          "content": "# https://yamllint.readthedocs.io/en/latest/configuration.html\nextends: default\n\nignore:\n    - .github/\n    - deprecated/\n    - other/godmode_sigma_rule.yml\n    - tests/\n    - unsupported/\n\nrules:\n    comments:\n        require-starting-space: true\n        min-spaces-from-content: 1\n    comments-indentation: disable\n    document-start: {present: false}\n    empty-lines: {max: 2, max-start: 2, max-end: 2}\n    indentation: {spaces: 4, indent-sequences: whatever}\n    line-length: disable\n    new-line-at-end-of-file: enable\n    trailing-spaces: {}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.916015625,
          "content": "# Contributing to Sigma üßô‚Äç‚ôÇÔ∏è\n\nFirst off, thank you for considering contributing to Sigma! Your help is invaluable in keeping this project up-to-date and useful for the community.\n\nThe following guidelines will help you understand how to contribute effectively.\n\n## üìù Reporting False Positives Or Proposing New Detection Rule Ideas üîé\n\nIf you find a false positive or would like to propose a new detection rule idea but do not have the time to create one, please create a new issue on the [GitHub repository](https://github.com/SigmaHQ/sigma/issues/new/choose) by selecting one of the available templates.\n\n## üõ†Ô∏è Submitting Pull Requests (PRs)\n\n1. Fork the [SigmaHQ repository](https://github.com/SigmaHQ/sigma) and clone your fork to your local machine.\n\n2. Create a new branch for your changes:\n\n```bash\ngit checkout -b your-feature-branch\n```\n\n3. Make your changes, and test them:\n\n```bash\npython tests/test_logsource.py\npython tests/test_rules.py\n```\n\n4. Once the test is successful, commit the changes to your branch:\n\n```bash\ngit add .\ngit commit -m \"Your commit message\"\n```\n\n5. Push your changes to your fork:\n\n```bash\ngit push origin your-feature-branch\n```\n\n6. Create a new Pull Request (PR) against the upstream repository:\n\n* Go to the [Sigma repository](https://github.com/SigmaHQ/sigma) on GitHub\n* Click the \"New Pull Request\" button\n* Choose your fork and your feature branch\n* Add a clear and descriptive title and a detailed description of your changes\n* Submit the Pull Request\n\n## üìö Adding or Updating Detection Rules\n\nTo update or contribute a new rule please make sure to follow the guidelines in the [SigmaHQ conventions documents](https://github.com/SigmaHQ/sigma-specification/blob/main/sigmahq). Consider installing the [VsCode Sigma Extension](https://marketplace.visualstudio.com/items?itemName=humpalum.sigma) for auto completion and quality of life features.\n\nThank you for contributing to Sigma! üßô‚Äç‚ôÇÔ∏è\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.375,
          "content": "# Licenses\n\nThe content of this repository is released under the following licenses:\n\n- The Sigma specification (https://github.com/SigmaHQ/sigma-specification) and the Sigma logo are public domain\n- The rules contained in the SigmaHQ repository (https://github.com/SigmaHQ) are released under the [Detection Rule License (DRL) 1.1](https://github.com/SigmaHQ/Detection-Rule-License)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8076171875,
          "content": "# Sigma - Generic Signature Format for SIEM Systems\n\n<a href=\"https://sigmahq.io/\">\n<p align=\"center\">\n<br />\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"./images/sigma_logo_dark.png\">\n  <img width=\"454\" alt=\"Sigma Logo\" src=\"./images/sigma_logo_light.png\">\n</picture>\n</p>\n</a>\n<br />\n\n<p align=\"center\">\n<a href=\"https://github.com/SigmaHQ/sigma/actions?query=branch%3Amaster\"><img src=\"https://github.com/SigmaHQ/sigma/actions/workflows/sigma-test.yml/badge.svg?branch=master\" alt=\"Sigma Build Status\"></a> <a href=\"https://sigmahq.io/\"><img src=\"https://cdn.jsdelivr.net/gh/SigmaHQ/sigmahq.github.io@master/images/Sigma%20Official%20Badge.svg\" alt=\"Sigma Official Badge\"></a> <img alt=\"GitHub Repo stars\" src=\"https://img.shields.io/github/stars/SigmaHQ/sigma\">\n<img alt=\"GitHub all releases\" src=\"https://img.shields.io/github/downloads/SigmaHq/Sigma/total\">\n<br />\n<a href=\"https://opensourcesecurityindex.io/\" target=\"_blank\" rel=\"noopener\">\n<img style=\"width: 170px;\" src=\"https://opensourcesecurityindex.io/badge.svg\" alt=\"Open Source Security Index - Fastest Growing Open Source Security Projects\" width=\"170\" />\n</a>\n</p>\n\nWelcome to the Sigma main rule repository. The place where detection engineers, threat hunters and all defensive security practitioners collaborate on detection rules. The repository offers more than 3000 detection rules of different type and aims to make reliable detections accessible to all at no cost.\n\nCurrently the repository offers three types of rules:\n\n* [Generic Detection Rules](./rules/) - Are threat agnostic, their aim is to detect a behavior or an implementation of a technique or procedure that was, can or will be used by a potential threat actor.\n* [Threat Hunting Rules](./rules-threat-hunting/) - Are broader in scope and are meant to give the analyst a starting point to hunt for potential suspicious or malicious activity\n* [Emerging Threat Rules](./rules-emerging-threats/) - Are rules that cover specific threats, that are timely and relevant for certain periods of time. These threats include specific APT campaigns, exploitation of Zero-Day vulnerabilities, specific malware used during an attack,...etc.\n\n## Explore Sigma\n\nTo start exploring the Sigma ecosystem, please visit the official website [sigmahq.io](https://sigmahq.io)\n\n### What is Sigma\n\nSigma is a generic and open signature format that allows you to describe relevant log events in a straightforward manner. The rule format is very flexible, easy to write and applicable to any type of log file.\n\nThe main purpose of this project is to provide a structured form in which researchers or analysts can describe their once developed detection methods and make them shareable with others.\n\nSigma is for log files what [Snort](https://www.snort.org/) is for network traffic and [YARA](https://github.com/VirusTotal/yara) is for files.\n\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"./images/Sigma_description_dark.png\">\n  <img alt=\"Sigma Description - A diagram showing Yaml Files (Sigma Rules) moving through a Sigma Convertor, and coming out as many SIEM logos, showing how Sigma rules can be converted to many different available SIEM query languages\" src=\"./images/Sigma_description_light.png\">\n</picture>\n\n### Why Sigma\n\nToday, everyone collects log data for analysis. People start working on their own, processing numerous white papers, blog posts and log analysis guidelines, extracting the necessary information and build their own searches and dashboard. Some of their searches and correlations are great and very useful but they lack a standardized format in which they can share their work with others.\n\nOthers provide excellent analyses, include IOCs and YARA rules to detect the malicious files and network connections, but have no way to describe a specific or generic detection method in log events. Sigma is meant to be an open standard in which such detection mechanisms can be defined, shared and collected in order to improve the detection capabilities for everyone.\n\n### üåü Key Features\n\n* A continuously growing list of detection and hunting rules, peer reviewed by a community of professional Detection Engineers.\n* Vendor agnostic detection rules.\n* Easily shareable across communities and reports\n\n## üèóÔ∏è Rule Creation\n\nTo start writing Sigma rules please check the following guides:\n\n* [Rule Creation Guide](https://github.com/SigmaHQ/sigma/wiki/Rule-Creation-Guide)\n* [How to Write Sigma Rules - Nextron Systems](https://www.nextron-systems.com/2018/02/10/write-sigma-rules/)\n\n## üîé Contributing & Making PRs\n\nPlease refer to the [CONTRIBUTING](./CONTRIBUTING.md) guide for detailed instructions on how you can start contributing new rules.\n\n## üì¶ Rule Packages\n\nYou can download the latest rule packages from the [release page](https://github.com/SigmaHQ/sigma/releases/latest) and start leveraging Sigma rules today.\n\n## üß¨ Rule Usage and Conversion\n\n* You can start converting Sigma rules today using [Sigma CLI](https://github.com/SigmaHQ/sigma-cli) or [sigconverter.io](https://sigconverter.io) the GUI interface\n\n* To integrate Sigma rules in your own toolchain or products use [pySigma](https://github.com/SigmaHQ/pySigma).\n\n## üö® Reporting False Positives or New Rule Ideas\n\nIf you find a false positive or would like to propose a new detection rule idea but do not have the time to create one, please create a new issue on the [GitHub repository](https://github.com/SigmaHQ/sigma/issues/new/choose) by selecting one of the available templates.\n\n## üìö Resources & Further Reading\n\n* [Hack.lu 2017 Sigma - Generic Signatures for Log Events by Thomas Patzke](https://www.youtube.com/watch?v=OheVuE9Ifhs)\n* [MITRE ATT&CK¬Æ and Sigma Alerting SANS Webcast Recording](https://www.sans.org/webcasts/mitre-att-ck-sigma-alerting-110010 \"MITRE ATT&CK¬Æ and Sigma Alerting\")\n* [Sigma - Generic Signatures for SIEM Systems by Florian Roth](https://www.slideshare.net/secret/gvgxeXoKblXRcA)\n\n## Projects or Products that use or integrate Sigma rules\n\n* [alterix](https://github.com/mtnmunuklu/alterix) - Converts Sigma rules to the query language of CRYPTTECH's SIEM\n* [AttackIQ](https://www.attackiq.com/2024/01/10/sigmaiq-attackiqs-latest-innovation-for-actionable-detections/) - Sigma Rules integrated in AttackIQ's platform, and [SigmAIQ](https://github.com/AttackIQ/SigmAIQ) for Sigma rule conversion and LLM apps\n* [Atomic Threat Coverage](https://github.com/atc-project/atomic-threat-coverage) (Since December 2018)\n* [AttackRuleMap - Mapping of Atomic Red Team tests and Sigma Rules](https://attackrulemap.com/)\n* [Confluent Sigma](https://github.com/confluentinc/confluent-sigma) - Kafka Streams supported Sigma rules\n* [IBM QRadar](https://community.ibm.com/community/user/security/blogs/gladys-koskas1/2023/08/02/qradar-natively-supports-sigma-for-rules-creation)\n* [Impede Detection Platform](https://impede.ai/)\n* [Joe Sandbox](https://www.joesecurity.org/blog/8225577975210857708)\n* [LimaCharlie](https://limacharlie.io/)\n* [MISP](http://www.misp-project.org/2017/03/26/MISP.2.4.70.released.html) (Since Version 2.4.70, March 2017)\n* [Nextron's Aurora Agent](https://www.nextron-systems.com/aurora/)\n* [Nextron's THOR Scanner](https://www.nextron-systems.com/thor/) - Scan with Sigma rules on endpoints\n* [RANK VASA](https://globenewswire.com/news-release/2019/03/04/1745907/0/en/RANK-Software-to-Help-MSSPs-Scale-Cybersecurity-Offerings.html)\n* [Security Onion](https://docs.securityonion.net/en/latest/sigma.html)\n* [Sekoia.io XDR](https://www.sekoia.io) - XDR supporting Sigma and Sigma Correlation rules languages\n* [sigma2stix](https://github.com/muchdogesec/sigma2stix) - Converts the entire SigmaHQ Ruleset into STIX 2.1 Objects.\n  * A versioned archive of sigma2stix STIX 2.1 data is also available to [download here](https://github.com/muchdogesec/cti_knowledge_base_store/tree/main/sigma-rules).\n* [SIŒ£GMA](https://github.com/3CORESec/SIEGMA) - SIEM consumable generator that utilizes Sigma for query conversion\n* [SOC Prime](https://tdm.socprime.com/sigma/)\n* [TA-Sigma-Searches](https://github.com/dstaulcu/TA-Sigma-Searches) (Splunk App)\n* [TimeSketch](https://github.com/google/timesketch/commit/0c6c4b65a6c0f2051d074e87bbb2da2424fa6c35)\n* [ypsilon](https://github.com/P4T12ICK/ypsilon) - Automated Use Case Testing\n\n## üìú Maintainers\n\n* [Nasreddine Bencherchali (@nas_bench)](https://twitter.com/nas_bench)\n* [Florian Roth (@cyb3rops)](https://twitter.com/cyb3rops)\n* [Christian Burkard (@phantinuss)](https://twitter.com/phantinuss)\n* [Fran√ßois Hubaut (@frack113)](https://twitter.com/frack113)\n* [Thomas Patzke (@blubbfiction)](https://twitter.com/blubbfiction)\n\n## Credits\n\nThis project would've never reached this height without the help of the hundreds of contributors. Thanks to all past and present contributors for their help.\n\n## Licenses\n\nThe content of this repository is released under the [Detection Rule License (DRL) 1.1](https://github.com/SigmaHQ/Detection-Rule-License).\n"
        },
        {
          "name": "Releases.md",
          "type": "blob",
          "size": 5.154296875,
          "content": "This following document describes the different types of rule packages provided with every release.\n\n## Package Introduction\n\nThe rule packages provided with every release are split based on the [status](https://github.com/SigmaHQ/sigma-specification/blob/main/Sigma_specification.md#status-optional), [level](https://github.com/SigmaHQ/sigma-specification/blob/main/Sigma_specification.md#level) and [type](https://medium.com/sigma-hq/sigma-rule-repository-enhancements-new-folder-structure-rule-types-30adb70f5e10) of a sigma rule.\n\nThere are currently 3 main rule types provided in the sigma repository:\n\n- **core/generic**: Rules that match on attacker techniques. These rules are timeless and often match on new threats.\n- **emerging-threats/ET**: Rules that match on patterns of specific threat actors or exploits. High signal to noise ratio but will decrease in relevance over time.\n- **threat-hunting/TH**: Rules that should not be run for alerting but are interesting in giving detection ideas or hunt for suspicious activity inside an environment.\n\n### Package Overview\n\nname | status | level | type\n--- | --- | --- | ---\n[Core (Default)](#core-rules) | testing, stable | high, critical | core\n[Core+ (Rule Review needed)](#core-rules-1) | testing, stable | medium, high, critical | core\n[Core++ (Experimental)](#core-rules-2) | experimental, testing, stable | medium, high, critical | core\n[Emerging Threats AddOn Rules](#et-emerging-threats-addon-rules) | experimental, testing, stable | medium, high, critical | emerging threats\n[All rules](#all-rules) | experimental, testing, stable | medium, high, critical | core, emerging threats\n\nIf you are new, best start with the `Core` Sigma package. It includes high quality rules of high confidence and relevance and should not produce many false positives.\n\nIf your setup is working fine, you can add the `emerging threats` rules and start thinking about upgrading to `Core+` rules. If that is not enough and you like the pain, use the \"all\" rules package.\n\n### Defined Package\n\n#### Core Rules\n\nThe `Core` Sigma package includes high quality rules of high confidence and relevance and should not produce many false positives.\n\nThe selected rules are of level `high` or `critical`, which means matches are of high or critical importance. The rule status is `testing` or `stable`, which means the rule is at least of an age of half a year and no false positives were reported on it.\n\nThe type is `core`, meaning the rules will match on attacker technique and generic suspicious or malicious behavior.\n\n#### Core+ Rules\n\nThe plus in the `Core+` Sigma package stands for the addition of `medium` level rules. Those rules most often need additional tuning as certain applications, legitimate user behavior or scripts of an organization might be matched. Not every `medium` level rule is useful in every organization.\n\n#### Core++ Rules\n\nThe `Core++` package additionally includes the rules of `experimental` status. These rules are bleeding edge. They are validated against the Goodlog tests available to the SigmaHQ project and reviewed by multiple detection engineers. Other than that they are pretty much untested at first. Use these if you want to be able to detect threats as early as possible at the cost of managing a higher threshold of false positives.\n\nPlease report any false positives you find in the wild via our [github issue tracker](https://github.com/SigmaHQ/sigma/issues/new?assignees=&labels=False-Positive&projects=&template=false_positive_report.yml). After a grace period all `experimental` rules will eventually be promoted to status `test`.\n\n### Package AddOn's\n\n#### ET (Emerging Threats) AddOn Rules\n\nThe `ET AddOn` Sigma package contains all of the `emerging threats` rules. These rules have a low false positive rate so that it already contains rules of status `experimental`. These rules target specific threats and are especially useful for current threats where maybe not much information is yet available. So we want to get them to you as fast as possible. The package is an `AddOn` so you can use it on top of whichever `Core` package is most useful to you.\n\n### All Rules\n\n> **Note**\n>\n> This package doesn't contain all rules\n\nThis package includes all rules from level `medium` with a status of `experimental` and upwards including the `emerging threats` rules. Some heavy tuning is required when using this package.\n\nYou'll notice that rules of level `low` and some other are omitted even from this the `All Rules` package. We do not recommend using any other types of rules to generate alerts except for those provided in these packages.\n\n### Create Your Own Custom Rule Package\n\nReleases are tagged using the format `r<ISO 8601 date>` (e.g. `r2023-12-24`).\n\nYou can checkout any release version and create your own package using the [sigma-package-release](tests/sigma-package-release.py) script. Define the `status`, `level` and `type` of rules and the script generates a ZIP archive containing only those rules.\n\ne.g.\n\n```bash\n# python3 tests/sigma-package-release.py --min-status testing --levels high critical --types generic --outfile Sigma-custom.zip\n```\n\nYou can either give `level` and `status` as a space separated list or using a minimum value. See `--help` for all options\n"
        },
        {
          "name": "deprecated",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules-compliance",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules-dfir",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules-emerging-threats",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules-placeholder",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules-threat-hunting",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "unsupported",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}