{
  "metadata": {
    "timestamp": 1736561049698,
    "page": 828,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sripathikrishnan/redis-rdb-tools",
      "stars": 5109,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2177734375,
          "content": ".project\n.pydevproject\n*.pyc\nbuild/\ndist/\nrdbtools.egg-info/\ntests/dumps/dump.rdb.backup\ntests/dumps/dump_dealers_vins.rdb\ntests/dumps/dump_random_lists.rdb\ntests/dumps/dump_sorted_sets.rdb\n\n.idea/*\nvenv2.6/\nvenv2.7/\nvenv3/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1025390625,
          "content": "language: python\ndist: trusty\npython:\n  - \"2.6\"\n  - \"2.7\"\n  - \"3.4\"\n  - \"3.5\"\n\nscript: python run_tests\n\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 1.552734375,
          "content": "* 0.1.15\n    * add --no-expire and --amend-expire features for protocol backend\n    * fix bugs handling module rdb aux data (when no key name)\n    * fix bug of being unable to correctly skip (filter) a module value\n    * use ArgumentParser instead of OptionParser\n\n* 0.1.14\n    * fix parsing crash for rdb with module data containing floats\n    * fix memprofiler crash on python 2.x crash on long integers\n    * fix memprofiler crash on rdb with modules or streams\n    * improvements in memprofiler report to show totals and metadata\n\n* 0.1.13\n    * Add support for rdb v9 (redis 5.0) and memory analysis of streams\n    * Adding expiry to memory csv\n    * Warning users when python-lzf is not installed\n    * Minor fix to memory calculations of small numeric values\n\n* 0.1.12\n    * add parser support for redis 4.0 module types\n    * fix bug in memory report for long encoding in python2.6\n\n* 0.1.11\n    * fix recent bug failing to parse rdb files with sorted sets\n\n* 0.1.10\n    * fix endianess parsing exception in python 3\n    * Fix bytes escape functions to handle floats\n    * fix to cli help message\n    * fixes to redis-profiler memory report utility\n    * test suite improvements\n\n* 0.1.9\n    * python 3 support\n    * rdb v8 (redis 4.0) support\n    * binary to string conversion fixes\n    * use ujson/cStringIO/python-lzf if they're available\n    * filter keys by size\n    * bugfixes parsing sorted sets\n    * fix setup.py dependancies and remove requirements.txt file\n\n* 0.1.8\n    * fix a crash in the memory profiler recently introduced.\n\n* 0.1.7\n    * rdb v7 (redis 3.2) support\n\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.142578125,
          "content": "Please use\n python setup.py install\n\nTo report errors, create a new issue on Github - https://github.com/sripathikrishnan/redis-rdb-tools/issues\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License\n\nCopyright (c) 2012 Sripathi Krishnan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0693359375,
          "content": "include CHANGES\ninclude INSTALL\ninclude LICENSE\ninclude README.textile\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.2060546875,
          "content": "# Parse Redis dump.rdb files, Analyze Memory, and Export Data to JSON #\n\nRdbtools is a parser for Redis' dump.rdb files. The parser generates events similar to an xml sax parser, and is very efficient memory wise.\n\nIn addition, rdbtools provides utilities to :\n\n 1.  Generate a Memory Report of your data across all databases and keys\n 2.  Convert dump files to JSON\n 3.  Compare two dump files using standard diff tools\n\nRdbtools is written in Python, though there are similar projects in other languages. See [FAQs](https://github.com/sripathikrishnan/redis-rdb-tools/wiki/FAQs) for more information.\n\nSee https://rdbtools.com for a gui to administer redis, commercial support, and other enterprise features.\n\n## Installing rdbtools ##\n\nPre-Requisites : \n\n1. python-lzf is optional but highly recommended to speed up parsing.\n1. redis-py is optional and only needed to run test cases.\n\nTo install from PyPI (recommended) :\n\n    pip install rdbtools python-lzf\n    \nTo install from source : \n\n    git clone https://github.com/sripathikrishnan/redis-rdb-tools\n    cd redis-rdb-tools\n    sudo python setup.py install\n\n# Command line usage examples\n\nEvery run of RDB Tool requires to specify a command to indicate what should be done with the parsed RDB data.\nValid commands are: json, diff, justkeys, justkeyvals and protocol.\n\nJSON from a two database dump:\n\n    > rdb --command json /var/redis/6379/dump.rdb\n\n    [{\n    \"user003\":{\"fname\":\"Ron\",\"sname\":\"Bumquist\"},\n    \"lizards\":[\"Bush anole\",\"Jackson's chameleon\",\"Komodo dragon\",\"Ground agama\",\"Bearded dragon\"],\n    \"user001\":{\"fname\":\"Raoul\",\"sname\":\"Duke\"},\n    \"user002\":{\"fname\":\"Gonzo\",\"sname\":\"Dr\"},\n    \"user_list\":[\"user003\",\"user002\",\"user001\"]},{\n    \"baloon\":{\"helium\":\"birthdays\",\"medical\":\"angioplasty\",\"weather\":\"meteorology\"},\n    \"armadillo\":[\"chacoan naked-tailed\",\"giant\",\"Andean hairy\",\"nine-banded\",\"pink fairy\"],\n    \"aroma\":{\"pungent\":\"vinegar\",\"putrid\":\"rotten eggs\",\"floral\":\"roses\"}}]\n\n## Filter parsed output\n\nOnly process keys that match the regex, and only print key and values:\n\n    > rdb --command justkeyvals --key \"user.*\" /var/redis/6379/dump.rdb\n\n    user003 fname Ron,sname Bumquist,\n    user001 fname Raoul,sname Duke,\n    user002 fname Gonzo,sname Dr,\n    user_list user003,user002,user001\n    \nOnly process hashes starting with \"a\", in database 2:\n\n    > rdb -c json --db 2 --type hash --key \"a.*\" /var/redis/6379/dump.rdb\n    \n    [{},{\n    \"aroma\":{\"pungent\":\"vinegar\",\"putrid\":\"rotten eggs\",\"floral\":\"roses\"}}]\n\n## Converting dump files to JSON ##\n\nThe `json` command output is UTF-8 encoded JSON.\nBy default, the callback try to parse RDB data using UTF-8 and escape non 'ASCII printable' characters with the `\\U` notation, or non UTF-8 parsable bytes with `\\x`.\nAttempting to decode RDB data can lead to binary data curroption, this can be avoided by using the `--escape raw` option.\nAnother option, is to use `-e base64` for Base64 encoding of binary data.\n\n\nParse the dump file and print the JSON on standard output:\n\n    > rdb -c json /var/redis/6379/dump.rdb\n\n    [{\n    \"Citat\":[\"B\\u00e4ttre sent \\u00e4n aldrig\",\"Bra karl reder sig sj\\u00e4lv\",\"Man ska inte k\\u00f6pa grisen i s\\u00e4cken\"],\n    \"bin_data\":\"\\\\xFE\\u0000\\u00e2\\\\xF2\"}]\n\nParse the dump file to raw bytes and print the JSON on standard output:\n\n    > rdb -c json /var/redis/6379/dump.rdb --escape raw\n\n    [{\n    \"Citat\":[\"B\\u00c3\\u00a4ttre sent \\u00c3\\u00a4n aldrig\",\"Bra karl reder sig sj\\u00c3\\u00a4lv\",\"Man ska inte k\\u00c3\\u00b6pa grisen i s\\u00c3\\u00a4cken\"],\n    \"bin_data\":\"\\u00fe\\u0000\\u00c3\\u00a2\\u00f2\"}]\n\n## Generate Memory Report ##\n\nRunning with the  `-c memory` generates a CSV report with the approximate memory used by that key. `--bytes C` and `'--largest N` can be used to limit output to keys larger than C bytes, or the N largest keys.\n\n    > rdb -c memory /var/redis/6379/dump.rdb --bytes 128 -f memory.csv\n\t> cat memory.csv\n\n\tdatabase,type,key,size_in_bytes,encoding,num_elements,len_largest_element\n\t0,list,lizards,241,quicklist,5,19\n\t0,list,user_list,190,quicklist,3,7\n\t2,hash,baloon,138,ziplist,3,11\n\t2,list,armadillo,231,quicklist,5,20\n\t2,hash,aroma,129,ziplist,3,11\n\n\nThe generated CSV has the following columns - Database Number, Data Type, Key, Memory Used in bytes and RDB Encoding type.\nMemory usage includes the key, the value and any other overheads.\n\nNote that the memory usage is approximate. In general, the actual memory used will be slightly higher than what is reported.\n\nYou can filter the report on keys or database number or data type.\n\nThe memory report should help you detect memory leaks caused by your application logic. It will also help you optimize Redis memory usage. \n\n## Find Memory used by a Single Key ##\n\nSometimes you just want to find the memory used by a particular key, and running the entire memory report on the dump file is time consuming.\n\nIn such cases, you can use the `redis-memory-for-key` command:\n\n    > redis-memory-for-key person:1\n    \n    > redis-memory-for-key -s localhost -p 6379 -a mypassword person:1\n\n    Key \t\t\tperson:1\n    Bytes\t\t\t\t111\n    Type\t\t\t\thash\n    Encoding\t\t\tziplist\n    Number of Elements\t\t2\n    Length of Largest Element\t8\n\nNOTE : \n\n1. This was added to redis-rdb-tools version 0.1.3\n2. This command depends [redis-py](https://github.com/andymccurdy/redis-py) package\n\n## Comparing RDB files ##\n\nFirst, use the --command diff option, and pipe the output to standard sort utility\n\n    > rdb --command diff /var/redis/6379/dump1.rdb | sort > dump1.txt\n    > rdb --command diff /var/redis/6379/dump2.rdb | sort > dump2.txt\n    \nThen, run your favourite diff program\n\n    > kdiff3 dump1.txt dump2.txt\n\nTo limit the size of the files, you can filter on keys using the `--key` option\n\n## Emitting Redis Protocol ##\n\nYou can convert RDB file into a stream of [redis protocol](http://redis.io/topics/protocol) using the `protocol` command.\n\n    > rdb -c protocol /var/redis/6379/dump.rdb\n    \n    *4\n    $4\n    HSET\n    $9\n    users:123\n    $9\n    firstname\n    $8\n    Sripathi\n\nYou can pipe the output to netcat and re-import a subset of the data.\nFor example, if you want to shard your data into two redis instances, you can use the --key flag to select a subset of data,\nand then pipe the output to a running redis instance to load that data.\nRead [Redis Mass Insert](http://redis.io/topics/mass-insert) for more information on this.\n\nWhen printing protocol output, the `--escape` option can be used with `printable` or `utf8` to avoid non printable/control characters.\n\nBy default, expire times are emitted verbatim if they are present in the rdb file, causing all keys that expire in the past to be removed.\nIf this behaviour is unwanted the `-x/--no-expire` option will ignore all key expiry commands.\n\nOtherwise you may want to set an expiry time in the future with `-a/--amend-expire` option which adds an integer number of seconds to the expiry time of each key which is already set to expire.\nThis will not change keys that do not already have an expiry set.\n\n# Using the Parser ##\n\n    from rdbtools import RdbParser, RdbCallback\n    from rdbtools.encodehelpers import bytes_to_unicode\n\n    class MyCallback(RdbCallback):\n        ''' Simple example to show how callback works.\n            See RdbCallback for all available callback methods.\n            See JsonCallback for a concrete example\n        '''\n\n        def __init__(self):\n            super(MyCallback, self).__init__(string_escape=None)\n\n        def encode_key(self, key):\n            return bytes_to_unicode(key, self._escape, skip_printable=True)\n\n        def encode_value(self, val):\n            return bytes_to_unicode(val, self._escape)\n\n        def set(self, key, value, expiry, info):\n            print('%s = %s' % (self.encode_key(key), self.encode_value(value)))\n\n        def hset(self, key, field, value):\n            print('%s.%s = %s' % (self.encode_key(key), self.encode_key(field), self.encode_value(value)))\n\n        def sadd(self, key, member):\n            print('%s has {%s}' % (self.encode_key(key), self.encode_value(member)))\n\n        def rpush(self, key, value):\n            print('%s has [%s]' % (self.encode_key(key), self.encode_value(value)))\n\n        def zadd(self, key, score, member):\n            print('%s has {%s : %s}' % (str(key), str(member), str(score)))\n\n\n    callback = MyCallback()\n    parser = RdbParser(callback)\n    parser.parse('/var/redis/6379/dump.rdb')\n\n## Other Pages\n\n 1. [Frequently Asked Questions](https://github.com/sripathikrishnan/redis-rdb-tools/wiki/FAQs)\n 2. [Redis Dump File Specification](https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format)\n 3. [Redis Dump File Version History](https://github.com/sripathikrishnan/redis-rdb-tools/blob/master/docs/RDB_Version_History.textile) - this also has notes on converting a dump file to an older version.\n\n## License\n\nrdbtools is licensed under the MIT License. See [LICENSE](https://github.com/sripathikrishnan/redis-rdb-tools/blob/master/LICENSE)\n\n## Maintained By \n\nSripathi Krishnan : @srithedabbler\n\n## Credits\n\n 1. [Didier Spézia](https://twitter.com/#!/didier_06)\n 2. [Yoav Steinberg](https://github.com/yoav-steinberg)\n 3. [Daniel Mezzatto](https://github.com/mezzatto)\n 4. [Carlo Cabanilla](https://github.com/clofresh)\n 5. [Josep M. Pujol](https://github.com/solso)\n 6. [Charles Gordon](https://github.com/cgordon)\n 7. [Justin Poliey](https://github.com/jdp)\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "rdbtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_tests",
          "type": "blob",
          "size": 0.236328125,
          "content": "#!/usr/bin/env python\n\nimport unittest\nfrom tests import all_tests\n\n\nif __name__ == \"__main__\":\n    tests = all_tests()\n    results = unittest.TextTestRunner().run(tests)\n    exit(0 if len(results.errors) + len(results.failures) == 0 else 1)\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1416015625,
          "content": "#!/usr/bin/env python\nimport os\nfrom rdbtools import __version__\n\nlong_description = '''\nParse Redis dump.rdb files, Analyze Memory, and Export Data to JSON\n\nRdbtools is a parser for Redis' dump.rdb files. The parser generates events similar to an xml sax parser, and is very efficient memory wise.\n\nIn addition, rdbtools provides utilities to :\n\n 1. Generate a Memory Report of your data across all databases and keys\n 2. Convert dump files to JSON\n 3. Compare two dump files using standard diff tools\n\nRdbtools is written in Python, though there are similar projects in other languages. See FAQs (https://github.com/sripathikrishnan/redis-rdb-tools/wiki/FAQs) for more information.\n'''\n\n\nsdict = {\n    'name' : 'rdbtools',\n    'version' : __version__,\n    'description' : 'Utilities to convert Redis RDB files to JSON or SQL formats',\n    'long_description' : long_description,\n    'url': 'https://github.com/sripathikrishnan/redis-rdb-tools',\n    'download_url': 'https://github.com/sripathikrishnan/redis-rdb-tools/archive/rdbtools-%s.tar.gz' % __version__,\n    'author': 'Sripathi Krishnan, Redis Labs',\n    'author_email' : 'Sripathi.Krishnan@gmail.com',\n    'maintainer': 'Sripathi Krishnan, Redis Labs',\n    'maintainer_email': 'oss@redislabs.com',\n    'keywords' : ['Redis', 'RDB', 'Export', 'Dump', 'Memory Profiler'],\n    'license' : 'MIT',\n    'packages' : ['rdbtools', 'rdbtools.cli'],\n    'package_data' : {\n        'rdbtools': ['templates/*'],\n    },\n    'test_suite' : 'tests.all_tests',\n    'install_requires': ['redis'],\n    'entry_points' : {\n        'console_scripts' : [\n            'rdb = rdbtools.cli.rdb:main',\n            'redis-memory-for-key = rdbtools.cli.redis_memory_for_key:main',\n            'redis-profiler = rdbtools.cli.redis_profiler:main'],\n    },\n    'classifiers' : [\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python'],\n}\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nsetup(**sdict)\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}