{
  "metadata": {
    "timestamp": 1736560854894,
    "page": 559,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "guofei9987/blind_watermark",
      "stars": 6137,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5048828125,
          "content": "language: python\npython:\n  - \"3.8\"\n\n\n# command to install dependencies\ninstall:\n  - pip install -r requirements.txt\n  - pip install numpy==1.18.1\n  - pip install coverage codecov\n  - python setup.py install\n\n# command to run tests\nscript:\n  - cd examples\n  - coverage run -p example_no_writing.py\n  - coverage run -p example_bit.py\n  - coverage run -p example_str.py\n  - coverage run -p example_img.py\n  - cp .coverage.* ..\n  - cd ..\n\n# Push the results back to codecov\nafter_success:\n  - coverage combine\n  - codecov"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2019 郭飞\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.751953125,
          "content": "\n\n\n# blind-watermark\n\nBlind watermark based on DWT-DCT-SVD.\n\n\n[![PyPI](https://img.shields.io/pypi/v/blind_watermark)](https://pypi.org/project/blind_watermark/)\n[![Build Status](https://travis-ci.com/guofei9987/blind_watermark.svg?branch=master)](https://travis-ci.com/guofei9987/blind_watermark)\n[![codecov](https://codecov.io/gh/guofei9987/blind_watermark/branch/master/graph/badge.svg)](https://codecov.io/gh/guofei9987/blind_watermark)\n[![License](https://img.shields.io/pypi/l/blind_watermark.svg)](https://github.com/guofei9987/blind_watermark/blob/master/LICENSE)\n![Python](https://img.shields.io/badge/python->=3.5-green.svg)\n![Platform](https://img.shields.io/badge/platform-windows%20|%20linux%20|%20macos-green.svg)\n[![stars](https://img.shields.io/github/stars/guofei9987/blind_watermark.svg?style=social)](https://github.com/guofei9987/blind_watermark/)\n[![fork](https://img.shields.io/github/forks/guofei9987/blind_watermark?style=social)](https://github.com/guofei9987/blind_watermark/fork)\n[![Downloads](https://pepy.tech/badge/blind-watermark)](https://pepy.tech/project/blind-watermark)\n[![Discussions](https://img.shields.io/badge/discussions-green.svg)](https://github.com/guofei9987/blind_watermark/discussions)\n\n\n- **Documentation:** [https://BlindWatermark.github.io/blind_watermark/#/en/](https://BlindWatermark.github.io/blind_watermark/#/en/)\n- **文档：** [https://BlindWatermark.github.io/blind_watermark/#/zh/](https://BlindWatermark.github.io/blind_watermark/#/zh/)  \n- **中文 readme** [README_cn.md](README_cn.md)\n- **Source code:** [https://github.com/guofei9987/blind_watermark](https://github.com/guofei9987/blind_watermark)\n\n\n\n# install\n```bash\npip install blind-watermark\n```\n\nFor the current developer version:\n```bach\ngit clone git@github.com:guofei9987/blind_watermark.git\ncd blind_watermark\npip install .\n```\n\n# How to use\n\n\n## Use in bash\n\n\n```bash\n# embed watermark into image:\nblind_watermark --embed --pwd 1234 examples/pic/ori_img.jpeg \"watermark text\" examples/output/embedded.png\n# extract watermark from image:\nblind_watermark --extract --pwd 1234 --wm_shape 111 examples/output/embedded.png\n```\n\n\n\n## Use in Python\n\nOriginal Image + Watermark = Watermarked Image\n\n![origin_image](docs/原图.jpeg) + '@guofei9987 开源万岁！' = ![打上水印的图](docs/打上水印的图.jpg)\n\n\nSee the [codes](/examples/example_str.py)\n\nEmbed watermark:\n```python\nfrom blind_watermark import WaterMark\n\nbwm1 = WaterMark(password_img=1, password_wm=1)\nbwm1.read_img('pic/ori_img.jpg')\nwm = '@guofei9987 开源万岁！'\nbwm1.read_wm(wm, mode='str')\nbwm1.embed('output/embedded.png')\nlen_wm = len(bwm1.wm_bit)\nprint('Put down the length of wm_bit {len_wm}'.format(len_wm=len_wm))\n```\n\nExtract watermark:\n```python\nbwm1 = WaterMark(password_img=1, password_wm=1)\nwm_extract = bwm1.extract('output/embedded.png', wm_shape=len_wm, mode='str')\nprint(wm_extract)\n```\nOutput:\n>@guofei9987 开源万岁！\n\n### attacks on Watermarked Image\n\n\n|attack method|image after attack|extracted watermark|\n|--|--|--|\n|Rotate 45 Degrees|![旋转攻击](docs/旋转攻击.jpg)|'@guofei9987 开源万岁！'|\n|Random crop|![截屏攻击](docs/截屏攻击2_还原.jpg)|'@guofei9987 开源万岁！'|\n|Masks| ![多遮挡攻击](docs/多遮挡攻击.jpg) |'@guofei9987 开源万岁！'|\n|Vertical cut|![横向裁剪攻击](docs/横向裁剪攻击_填补.jpg)|'@guofei9987 开源万岁！'|\n|Horizontal cut|![纵向裁剪攻击](docs/纵向裁剪攻击_填补.jpg)|'@guofei9987 开源万岁！'|\n|Resize|![缩放攻击](docs/缩放攻击.jpg)|'@guofei9987 开源万岁！'|\n|Pepper Noise|![椒盐攻击](docs/椒盐攻击.jpg)|'@guofei9987 开源万岁！'|\n|Brightness 10% Down|![亮度攻击](docs/亮度攻击.jpg)|'@guofei9987 开源万岁！'|\n\n\n\n\n\n\n### embed images\n\nembed watermark:\n```python\nfrom blind_watermark import WaterMark\n\nbwm1 = WaterMark(password_wm=1, password_img=1)\n# read original image\nbwm1.read_img('pic/ori_img.jpg')\n# read watermark\nbwm1.read_wm('pic/watermark.png')\n# embed\nbwm1.embed('output/embedded.png')\n```\n\n\nExtract watermark:\n```python\nbwm1 = WaterMark(password_wm=1, password_img=1)\n# notice that wm_shape is necessary\nbwm1.extract(filename='output/embedded.png', wm_shape=(128, 128), out_wm_name='output/extracted.png', )\n```\n\n\n|attack method|image after attack|extracted watermark|\n|--|--|--|\n|Rotate 45 Degrees|![旋转攻击](docs/旋转攻击.jpg)|![](docs/旋转攻击_提取水印.png)|\n|Random crop|![截屏攻击](docs/截屏攻击2_还原.jpg)|![多遮挡_提取水印](docs/多遮挡攻击_提取水印.png)|\n|Mask| ![多遮挡攻击](docs/多遮挡攻击.jpg) |![多遮挡_提取水印](docs/多遮挡攻击_提取水印.png)|\n\n\n### embed array of bits\n\nSee it [here](/examples/example_bit.py)\n\n\nAs demo, we embed 6 bytes data:\n```python\nwm = [True, False, True, True, True, False]\n```\n\nEmbed:\n```python\nfrom blind_watermark import WaterMark\n\nbwm1 = WaterMark(password_img=1, password_wm=1)\nbwm1.read_ori_img('pic/ori_img.jpg')\nbwm1.read_wm([True, False, True, True, True, False], mode='bit')\nbwm1.embed('output/embedded.png')\n```\n\nExtract:\n```python\nbwm1 = WaterMark(password_img=1, password_wm=1, wm_shape=6)\nwm_extract = bwm1.extract('output/打上水印的图.png', mode='bit')\nprint(wm_extract)\n```\nNotice that `wm_shape` (shape of watermark) is necessary\n\nThe output `wm_extract` is an array of float. set a threshold such as 0.5.\n\n\n# Concurrency\n\n```python\nWaterMark(..., processes=None)\n```\n- `processes` number of processes, can be integer. Default `None`, which means using all processes.  \n\n## Related Project\n\n- text_blind_watermark (Embed message into text): [https://github.com/guofei9987/text_blind_watermark](https://github.com/guofei9987/text_blind_watermark)  \n- HideInfo（hide as image, hide as sounds, hide as text）：[https://github.com/guofei9987/HideInfo](https://github.com/guofei9987/HideInfo)\n"
        },
        {
          "name": "README_cn.md",
          "type": "blob",
          "size": 5.8798828125,
          "content": "# blind-watermark\n\n基于频域的数字盲水印  \n\n\n[![PyPI](https://img.shields.io/pypi/v/blind_watermark)](https://pypi.org/project/blind_watermark/)\n[![Build Status](https://travis-ci.com/guofei9987/blind_watermark.svg?branch=master)](https://travis-ci.com/guofei9987/blind_watermark)\n[![codecov](https://codecov.io/gh/guofei9987/blind_watermark/branch/master/graph/badge.svg)](https://codecov.io/gh/guofei9987/blind_watermark)\n[![License](https://img.shields.io/pypi/l/blind_watermark.svg)](https://github.com/guofei9987/blind_watermark/blob/master/LICENSE)\n![Python](https://img.shields.io/badge/python->=3.5-green.svg)\n![Platform](https://img.shields.io/badge/platform-windows%20|%20linux%20|%20macos-green.svg)\n[![stars](https://img.shields.io/github/stars/guofei9987/blind_watermark.svg?style=social)](https://github.com/guofei9987/blind_watermark/)\n[![fork](https://img.shields.io/github/forks/guofei9987/blind_watermark?style=social)](https://github.com/guofei9987/blind_watermark/fork)\n[![Downloads](https://pepy.tech/badge/blind-watermark)](https://pepy.tech/project/blind-watermark)\n[![Discussions](https://img.shields.io/badge/discussions-green.svg)](https://github.com/guofei9987/blind_watermark/discussions)\n\n\n- **Documentation:** [https://BlindWatermark.github.io/blind_watermark/#/en/](https://BlindWatermark.github.io/blind_watermark/#/en/)\n- **文档：** [https://BlindWatermark.github.io/blind_watermark/#/zh/](https://BlindWatermark.github.io/blind_watermark/#/zh/)  \n- **English readme** [README.md](README.md)\n- **Source code:** [https://github.com/guofei9987/blind_watermark](https://github.com/guofei9987/blind_watermark)\n\n# 安装\n```bash\npip install blind-watermark\n```\n\n或者安装最新开发版本\n```bach\ngit clone git@github.com:guofei9987/blind_watermark.git\ncd blind_watermark\npip install .\n```\n\n# 如何使用\n\n## 命令行中使用\n\n```bash\n# 嵌入水印：\nblind_watermark --embed --pwd 1234 examples/pic/ori_img.jpeg \"watermark text\" examples/output/embedded.png\n# 提取水印：\nblind_watermark --extract --pwd 1234 --wm_shape 111 examples/output/embedded.png\n```\n\n\n\n## Python 中使用\n\n原图 + 水印 = 打上水印的图\n\n![origin_image](docs/原图.jpeg) + '@guofei9987 开源万岁！' = ![打上水印的图](docs/打上水印的图.jpg)\n\n\n\n参考 [代码](/examples/example_str.py)\n\n\n嵌入水印\n```python\nfrom blind_watermark import WaterMark\n\nbwm1 = WaterMark(password_img=1, password_wm=1)\nbwm1.read_img('pic/ori_img.jpg')\nwm = '@guofei9987 开源万岁！'\nbwm1.read_wm(wm, mode='str')\nbwm1.embed('output/embedded.png')\nlen_wm = len(bwm1.wm_bit)\nprint('Put down the length of wm_bit {len_wm}'.format(len_wm=len_wm))\n```\n\n\n提取水印\n```python\nbwm1 = WaterMark(password_img=1, password_wm=1)\nwm_extract = bwm1.extract('output/embedded.png', wm_shape=len_wm, mode='str')\nprint(wm_extract)\n```\nOutput:\n>@guofei9987 开源万岁！\n\n\n### 各种攻击后的效果\n\n|攻击方式|攻击后的图片|提取的水印|\n|--|--|--|\n|旋转攻击45度|![旋转攻击](docs/旋转攻击.jpg)|'@guofei9987 开源万岁！'|\n|随机截图|![截屏攻击](docs/截屏攻击2_还原.jpg)|'@guofei9987 开源万岁！'|\n|多遮挡| ![多遮挡攻击](docs/多遮挡攻击.jpg) |'@guofei9987 开源万岁！'|\n|纵向裁剪|![横向裁剪攻击](docs/横向裁剪攻击_填补.jpg)|'@guofei9987 开源万岁！'|\n|横向裁剪|![纵向裁剪攻击](docs/纵向裁剪攻击_填补.jpg)|'@guofei9987 开源万岁！'|\n|缩放攻击|![缩放攻击](docs/缩放攻击.jpg)|'@guofei9987 开源万岁！'|\n|椒盐攻击|![椒盐攻击](docs/椒盐攻击.jpg)|'@guofei9987 开源万岁！'|\n|亮度攻击|![亮度攻击](docs/亮度攻击.jpg)|'@guofei9987 开源万岁！'|\n\n\n\n### 嵌入图片\n\n参考 [代码](/examples/example_str.py)\n\n\n嵌入：\n```python\nfrom blind_watermark import WaterMark\n\nbwm1 = WaterMark(password_wm=1, password_img=1)\n# read original image\nbwm1.read_img('pic/ori_img.jpg')\n# read watermark\nbwm1.read_wm('pic/watermark.png')\n# embed\nbwm1.embed('output/embedded.png')\n```\n\n提取：\n```python\nbwm1 = WaterMark(password_wm=1, password_img=1)\n# notice that wm_shape is necessary\nbwm1.extract(filename='output/embedded.png', wm_shape=(128, 128), out_wm_name='output/extracted.png', )\n```\n\n|攻击方式|攻击后的图片|提取的水印|\n|--|--|--|\n|旋转攻击45度|![旋转攻击](docs/旋转攻击.jpg)|![](docs/旋转攻击_提取水印.png)|\n|随机截图|![截屏攻击](docs/截屏攻击2_还原.jpg)|![](docs/旋转攻击_提取水印.png)|\n|多遮挡| ![多遮挡攻击](docs/多遮挡攻击.jpg) |![多遮挡_提取水印](docs/多遮挡攻击_提取水印.png)|\n\n\n\n### 隐水印还可以是二进制数据\n\n参考 [代码](/examples/example_bit.py)\n\n\n作为 demo， 如果要嵌入是如下长度为6的二进制数据\n```python\nwm = [True, False, True, True, True, False]\n```\n\n嵌入水印\n\n```python\n# 除了嵌入图片，也可以嵌入比特类数据\nfrom blind_watermark import WaterMark\n\nbwm1 = WaterMark(password_img=1, password_wm=1)\nbwm1.read_ori_img('pic/ori_img.jpg')\nbwm1.read_wm([True, False, True, True, True, False], mode='bit')\nbwm1.embed('output/打上水印的图.png')\n```\n\n解水印：（注意设定水印形状 `wm_shape`）\n```python\nbwm1 = WaterMark(password_img=1, password_wm=1, wm_shape=6)\nwm_extract = bwm1.extract('output/打上水印的图.png', mode='bit')\nprint(wm_extract)\n```\n\n解出的水印是一个0～1之间的实数，方便用户自行卡阈值。如果水印信息量远小于图片可容纳量，偏差极小。\n\n# 并行计算\n\n```python\nWaterMark(..., processes=None)\n```\n- `processes`: 整数，指定线程数。默认为 `None`, 表示使用全部线程。\n\n\n## 相关项目\n\n- text_blind_watermark (文本盲水印，把信息隐秘地打入文本): [https://github.com/guofei9987/text_blind_watermark](https://github.com/guofei9987/text_blind_watermark)  \n- HideInfo（藏物于图、藏物于音、藏图于文）：[https://github.com/guofei9987/HideInfo](https://github.com/guofei9987/HideInfo)\n"
        },
        {
          "name": "blind_watermark",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.048828125,
          "content": "numpy>=1.17.0\nopencv-python\nsetuptools\nPyWavelets\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.1953125,
          "content": "from setuptools import setup, find_packages\nfrom os import path as os_path\nimport blind_watermark\n\nthis_directory = os_path.abspath(os_path.dirname(__file__))\n\n\n# 读取文件内容\ndef read_file(filename):\n    with open(os_path.join(this_directory, filename), encoding='utf-8') as f:\n        long_description = f.read()\n    return long_description\n\n\n# 获取依赖\ndef read_requirements(filename):\n    return [line.strip() for line in read_file(filename).splitlines()\n            if not line.startswith('#')]\n\n\nsetup(name='blind_watermark',\n      python_requires='>=3.5',\n      version=blind_watermark.__version__,\n      description='Blind Watermark in Python',\n      long_description=read_file('docs/en/README.md'),\n      long_description_content_type=\"text/markdown\",\n      url='https://github.com/guofei9987/blind_watermark',\n      author='Guo Fei',\n      author_email='guofei9987@foxmail.com',\n      license='MIT',\n      packages=find_packages(),\n      platforms=['linux', 'windows', 'macos'],\n      install_requires=['numpy', 'opencv-python', 'PyWavelets'],\n      zip_safe=False,\n      entry_points={\n          'console_scripts': [\n              'blind_watermark = blind_watermark.cli_tools:main'\n          ]\n      })\n"
        }
      ]
    }
  ]
}