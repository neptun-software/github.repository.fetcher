{
  "metadata": {
    "timestamp": 1736560906796,
    "page": 632,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-deepmind/alphafold3",
      "stars": 5810,
      "defaultBranch": "main",
      "files": [
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.802734375,
          "content": "# Copyright 2024 DeepMind Technologies Limited\n#\n# AlphaFold 3 source code is licensed under CC BY-NC-SA 4.0. To view a copy of\n# this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n#\n# To request access to the AlphaFold 3 model parameters, follow the process set\n# out at https://github.com/google-deepmind/alphafold3. You may only use these\n# if received directly from Google. Use is subject to terms of use available at\n# https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md\n\ncmake_minimum_required(VERSION 3.28)\nproject(\n  \"${SKBUILD_PROJECT_NAME}\"\n  LANGUAGES CXX\n  VERSION \"${SKBUILD_PROJECT_VERSION}\")\n\ninclude(FetchContent)\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\nset(ABSL_PROPAGATE_CXX_STD ON)\n\n# Remove support for scan deps, which is only useful when using C++ modules.\nunset(CMAKE_CXX_SCANDEP_SOURCE)\n\nFetchContent_Declare(\n  abseil-cpp\n  GIT_REPOSITORY https://github.com/abseil/abseil-cpp\n  GIT_TAG d7aaad83b488fd62bd51c81ecf16cd938532cc0a # 20240116.2\n  EXCLUDE_FROM_ALL)\n\nFetchContent_Declare(\n  pybind11\n  GIT_REPOSITORY https://github.com/pybind/pybind11\n  GIT_TAG 2e0815278cb899b20870a67ca8205996ef47e70f # v2.12.0\n  EXCLUDE_FROM_ALL)\n\nFetchContent_Declare(\n  pybind11_abseil\n  GIT_REPOSITORY https://github.com/pybind/pybind11_abseil\n  GIT_TAG bddf30141f9fec8e577f515313caec45f559d319 # HEAD @ 2024-08-07\n  EXCLUDE_FROM_ALL)\n\nFetchContent_Declare(\n  cifpp\n  GIT_REPOSITORY https://github.com/pdb-redo/libcifpp\n  GIT_TAG ac98531a2fc8daf21131faa0c3d73766efa46180 # v7.0.3\n  # Don't `EXCLUDE_FROM_ALL` as necessary for build_data.\n)\n\nFetchContent_Declare(\n  dssp\n  GIT_REPOSITORY https://github.com/PDB-REDO/dssp\n  GIT_TAG 57560472b4260dc41f457706bc45fc6ef0bc0f10 # v4.4.7\n  EXCLUDE_FROM_ALL)\n\nFetchContent_MakeAvailable(pybind11 abseil-cpp pybind11_abseil cifpp dssp)\n\nfind_package(\n  Python3\n  COMPONENTS Interpreter Development NumPy\n  REQUIRED)\n\ninclude_directories(${PYTHON_INCLUDE_DIRS})\ninclude_directories(src/)\n\nfile(GLOB_RECURSE cpp_srcs src/alphafold3/*.cc)\nlist(FILTER cpp_srcs EXCLUDE REGEX \".*\\(_test\\|_main\\|_benchmark\\).cc$\")\n\nadd_compile_definitions(NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION)\n\npybind11_add_module(cpp ${cpp_srcs})\n\ntarget_link_libraries(\n  cpp\n  PRIVATE absl::check\n          absl::flat_hash_map\n          absl::node_hash_map\n          absl::strings\n          absl::status\n          absl::statusor\n          absl::log\n          pybind11_abseil::absl_casters\n          Python3::NumPy\n          dssp::dssp\n          cifpp::cifpp)\n\ntarget_compile_definitions(cpp PRIVATE VERSION_INFO=${PROJECT_VERSION})\ninstall(TARGETS cpp LIBRARY DESTINATION alphafold3)\ninstall(\n  FILES LICENSE\n        OUTPUT_TERMS_OF_USE.md\n        WEIGHTS_PROHIBITED_USE_POLICY.md\n        WEIGHTS_TERMS_OF_USE.md\n  DESTINATION alphafold3)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 20.3603515625,
          "content": "Attribution-NonCommercial-ShareAlike 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n    wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More considerations\n     for the public:\n    wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International\nPublic License\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International Public License\n(\"Public License\"). To the extent this Public License may be\ninterpreted as a contract, You are granted the Licensed Rights in\nconsideration of Your acceptance of these terms and conditions, and the\nLicensor grants You such rights in consideration of benefits the\nLicensor receives from making the Licensed Material available under\nthese terms and conditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. BY-NC-SA Compatible License means a license listed at\n     creativecommons.org/compatiblelicenses, approved by Creative\n     Commons as essentially the equivalent of this Public License.\n\n  d. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  e. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  f. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  g. License Elements means the license attributes listed in the name\n     of a Creative Commons Public License. The License Elements of this\n     Public License are Attribution, NonCommercial, and ShareAlike.\n\n  h. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  i. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  j. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  k. NonCommercial means not primarily intended for or directed towards\n     commercial advantage or monetary compensation. For purposes of\n     this Public License, the exchange of the Licensed Material for\n     other material subject to Copyright and Similar Rights by digital\n     file-sharing or similar means is NonCommercial provided there is\n     no payment of monetary compensation in connection with the\n     exchange.\n\n  l. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  m. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  n. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part, for NonCommercial purposes only; and\n\n            b. produce, reproduce, and Share Adapted Material for\n               NonCommercial purposes only.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. Additional offer from the Licensor -- Adapted Material.\n               Every recipient of Adapted Material from You\n               automatically receives an offer from the Licensor to\n               exercise the Licensed Rights in the Adapted Material\n               under the conditions of the Adapter's License You apply.\n\n            c. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties, including when\n          the Licensed Material is used other than for NonCommercial\n          purposes.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n  b. ShareAlike.\n\n     In addition to the conditions in Section 3(a), if You Share\n     Adapted Material You produce, the following conditions also apply.\n\n       1. The Adapter's License You apply must be a Creative Commons\n          license with the same License Elements, this version or\n          later, or a BY-NC-SA Compatible License.\n\n       2. You must include the text of, or the URI or hyperlink to, the\n          Adapter's License You apply. You may satisfy this condition\n          in any reasonable manner based on the medium, means, and\n          context in which You Share Adapted Material.\n\n       3. You may not offer or impose any additional or different terms\n          or conditions on, or apply any Effective Technological\n          Measures to, Adapted Material that restrict exercise of the\n          rights granted under the Adapter's License You apply.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database for NonCommercial purposes\n     only;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material,\n     including for purposes of Section 3(b); and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "OUTPUT_TERMS_OF_USE.md",
          "type": "blob",
          "size": 12.73046875,
          "content": "# ALPHAFOLD 3 OUTPUT TERMS OF USE\n\nLast Modified: 2024-11-09\n\nBy using AlphaFold 3 Output (as defined below), without having agreed to\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md),\nyou agree to be bound by these AlphaFold 3 Output Terms of Use between you (or\nyour organization, as applicable) and Google LLC (these \"**Terms**\").\n\nIf you are using Output on behalf of an organization, you confirm you are\nauthorized either explicitly or implicitly to agree to, and are agreeing to,\nthese Terms as an employee on behalf of, or otherwise on behalf of, your\norganization.\n\nIf you have agreed to\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md),\nyour use of Output are governed by those terms. **If you have not agreed to\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md)\nand do not agree to these Terms, do not use Output or permit any third party to\ndo so on your behalf.**\n\nWhen we say \"**you**\", we mean the individual or organization using Output. When\nwe say \"**we**\", \"**us**\" or \"**Google**\", we mean the entities that belong to\nthe Google group of companies, which means Google LLC and its affiliates.\n\n## Key Definitions\n\nAs used in these Terms:\n\n\"**AlphaFold 3**\" means the AlphaFold 3 Code and Model Parameters.\n\n\"**AlphaFold 3 Code**\" means the AlphaFold 3 source code: (a) identified at\n[public GitHub repo](https://github.com/google-deepmind/alphafold3/), or such\nother location in which we may make it available from time to time, regardless\nof the source that it was obtained from; and (b) made available by Google to\norganizations for their use in accordance with the\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md)\n(not these Terms) together with (i) modifications to that code, (ii) works based\non that code, or (iii) other code or machine learning model which incorporates,\nin full or in part, that code.\n\n\"**Model Parameters**\" means the trained model weights and parameters made\navailable by Google to organizations (at its sole discretion) for their use in\naccordance with the\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md)\n(not these Terms), together with (a) modifications to those weights and\nparameters, (b) works based on those weights and parameters, or (c) other code\nor machine learning model which incorporates, in full or in part, those weights\nand parameters.\n\n\"**Output**\" means the structure predictions and all related information\nprovided by AlphaFold 3, together with any visual representations, computational\npredictions, descriptions, modifications, copies, or adaptations that are\nsubstantially derived from Output.\n\n## Use restrictions\n\n[AlphaFold 3](https://blog.google/technology/ai/google-deepmind-isomorphic-alphafold-3-ai-model/)\nbelongs to us. Output are made available free of charge, for non-commercial use\nonly, in accordance with the following use restrictions. You must not use nor\nallow others to use Output:\n\n1.  **On behalf of a commercial organization or in connection with any\n    commercial activities, including research on behalf of commercial\n    organizations.**\n\n    1.  This means that only non-commercial organizations (*i.e.*, universities,\n        non-profit organizations and research institutes, educational,\n        journalism and government bodies) may use Output for their\n        non-commercial activities. Output are not available for use by any other\n        types of organization, even if conducting non-commercial work.\n\n    2.  If you are a researcher affiliated with a non-commercial organization,\n        provided **you are not a commercial organisation or acting on behalf of\n        a commercial organisation**, you can use Output for your non-commercial\n        affiliated research.\n\n    3.  You must not share Output with any commercial organization. The only\n        exception is making Output publicly available (including, indirectly, to\n        commercial organizations) via a scientific publication or open source\n        release or using these to support journalism, each of which are\n        permitted.\n\n2.  **To misinform, misrepresent or mislead**, including:\n\n    1.  providing false or inaccurate information in relation to your access to\n        or use of Output;\n\n    2.  misrepresenting your relationship with Google - including by using\n        Google’s trademarks, trade names, logos or suggesting endorsement by\n        Google without Google’s permission to do so - nothing in these Terms\n        grants such permission;\n\n    3.  misrepresenting the origin of Output;\n\n    4.  distributing misleading claims of expertise or capability, or engaging\n        in the unauthorized or unlicensed practice of any profession,\n        particularly in sensitive areas (*e.g.*, health); or\n\n    5.  making decisions in domains that affect material or individual rights or\n        well-being (*e.g.*, healthcare).\n\n3.  **To perform, promote or facilitate dangerous, illegal or malicious\n    activities**, including:\n\n    1.  promoting or facilitating the sale of, or providing instructions for\n        synthesizing or accessing, illegal substances, goods or services;\n\n    2.  abusing, harming, interfering, or disrupting any services, including\n        generating or distributing content for deceptive or fraudulent\n        activities or malware;\n\n    3.  generating or distributing any content that infringes, misappropriates,\n        or otherwise violates any individual’s or entity’s rights (including,\n        but not limited to rights in copyrighted content); or\n\n    4.  attempting to circumvent these Terms.\n\n4.  **To train or create machine learning models or related technology for\n    biomolecular structure prediction similar to AlphaFold 3 as made available\n    by Google (\"Derived Models\"),** including via distillation or other\n    methods**.** For the avoidance of doubt, the use restrictions set out in\n    these Terms would apply in full to any Derived Models created in breach of\n    these Terms.\n\n5.  **Without providing conspicuous notice that published or distributed Output\n    is provided under and subject to these Terms and of any modifications you\n    make to Output.**\n\n    1.  This means if you remove, or cause to be removed (for example by using\n        third-party software), these Terms, or any notice of these Terms, from\n        Output, you must ensure further distribution or publication is\n        accompanied by a copy of the\n        [AlphaFold 3 Output Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md)\n        and a \"*Legally Binding Terms of Use*\" text file that contains the\n        following notice:\n\n        \"*By using this information, you agree to AlphaFold 3 Output Terms of\n        Use found at\n        https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md.*\n\n        *To request access to the AlphaFold 3 model parameters, follow the\n        process set out at https://github.com/google-deepmind/alphafold3. You\n        may only use these if received directly from Google. Use is subject to\n        terms of use available at\n        https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md.*\"\n\n    2.  You must not include any additional or different terms that conflict\n        with the\n        [AlphaFold 3 Output Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md).\n\n6.  **Distribute Output, or disclose findings arising from using AlphaFold 3\n    without citing our paper:** [Abramson, J et al. Accurate structure\n    prediction of biomolecular interactions with AlphaFold 3. *Nature*\n    (2024)](https://www.nature.com/articles/s41586-024-07487-w). For the\n    avoidance of doubt, this is an additional requirement to the notice\n    requirements set out above.\n\nWe grant you a non-exclusive, royalty-free, revocable, non-transferable and\nnon-sublicensable (except as expressly permitted in these Terms) license to any\nintellectual property rights we have in Output to the extent necessary for these\npurposes. You agree that your right to use and share Output is subject to your\ncompliance with these Terms. If you breach these Terms, Google reserves the\nright to request that you delete and cease use or sharing of Output in your\npossession or control and prohibit you from using the AlphaFold 3 Assets\n(including as made available via\n[AlphaFold Server](https://alphafoldserver.com/about)). You agree to immediately\ncomply with any such request.\n\n## Disclaimers\n\nNothing in these Terms restricts any rights that cannot be restricted under\napplicable law or limits Google’s responsibilities except as allowed by\napplicable law.\n\n**Output are provided on an \"as is\" basis, without warranties or conditions of\nany kind, either express or implied, including any warranties or conditions of\ntitle, non-infringement, merchantability, or fitness for a particular purpose.\nYou are solely responsible for determining the appropriateness of using or\ndistributing any of the Output and assume any and all risks associated with your\nuse or distribution of any Output and your exercise of rights and obligations\nunder these Terms. You and anyone you share Output with are solely responsible\nfor these and their subsequent uses.**\n\n**Output are predictions with varying levels of confidence and should be\ninterpreted carefully. Use discretion before relying on, publishing, downloading\nor otherwise using Output.**\n\n**Output are for theoretical modeling only. These are not intended, validated,\nor approved for clinical use. You should not use these for clinical purposes or\nrely on them for medical or other professional advice. Any content regarding\nthose topics is provided for informational purposes only and is not a substitute\nfor advice from a qualified professional.**\n\n## Liabilities\n\nTo the extent allowed by applicable law, you will indemnify Google and its\ndirectors, officers, employees, and contractors for any third-party legal\nproceedings (including actions by government authorities) arising out of or\nrelating to your unlawful use of Output or violation of these Terms. This\nindemnity covers any liability or expense arising from claims, losses, damages,\njudgments, fines, litigation costs, and legal fees, except to the extent a\nliability or expense is caused by Google's breach, negligence, or willful\nmisconduct. If you are legally exempt from certain responsibilities, including\nindemnification, then those responsibilities don’t apply to you under these\nterms.\n\nIn no circumstances will Google be responsible for any indirect, special,\nincidental, exemplary, consequential, or punitive damages, or lost profits of\nany kind, even if Google has been advised of the possibility of such damages.\nGoogle’s total, aggregate liability for all claims arising out of or in\nconnection with these Terms or Output, including for its own negligence, is\nlimited to $500.\n\n## Governing law and disputes\n\nThese Terms will be governed by the laws of the State of California. The state\nor federal courts of Santa Clara County, California shall have exclusive\njurisdiction of any dispute arising out of these Terms.\n\nGiven the nature of scientific research, it may take some time for any breach of\nthese Terms to become apparent. To the extent allowed by applicable law, any\nlegal claims relating to these Terms or Output can be initiated until the later\nof (a) the cut-off date under applicable law for bringing the legal claim; or\n(b) two years from the date you or Google (as applicable) became aware, or\nshould reasonably have become aware, of the facts giving rise to that claim. You\nwill not argue limitation, time bar, delay, waiver or the like in an attempt to\nbar an action filed within that time period, and neither will we.\n\nAll rights not specifically and expressly granted to you by these Terms are\nreserved to Google. No delay, act or omission by Google in exercising any right\nor remedy will be deemed a waiver of any breach of these Terms and Google\nexpressly reserves any and all rights and remedies available under these Terms\nor at law or in equity or otherwise, including the remedy of injunctive relief\nagainst any threatened or actual breach of these Terms without the necessity of\nproving actual damages.\n\n## Miscellaneous\n\nGoogle may update these Terms (1) to reflect changes in how it does business,\n(2) for legal, regulatory or security reasons, or (3) to prevent abuse or harm.\nThe version of these Terms that were effective on the date the relevant Output\nwas generated will apply to your use of that Output.\n\nIf it turns out that a particular provision of these Terms is not valid or\nenforceable, this will not affect any other provisions.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.51171875,
          "content": "![header](docs/header.jpg)\n\n# AlphaFold 3\n\nThis package provides an implementation of the inference pipeline of AlphaFold\n3. See below for how to access the model parameters. You may only use AlphaFold\n3 model parameters if received directly from Google. Use is subject to these\n[terms of use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md).\n\nAny publication that discloses findings arising from using this source code, the\nmodel parameters or outputs produced by those should [cite](#citing-this-work)\nthe\n[Accurate structure prediction of biomolecular interactions with AlphaFold 3](https://doi.org/10.1038/s41586-024-07487-w)\npaper.\n\nPlease also refer to the Supplementary Information for a detailed description of\nthe method.\n\nAlphaFold 3 is also available at\n[alphafoldserver.com](https://alphafoldserver.com) for non-commercial use,\nthough with a more limited set of ligands and covalent modifications.\n\nIf you have any questions, please contact the AlphaFold team at\n[alphafold@google.com](mailto:alphafold@google.com).\n\n## Obtaining Model Parameters\n\nThis repository contains all necessary code for AlphaFold 3 inference. To\nrequest access to the AlphaFold 3 model parameters, please complete\n[this form](https://forms.gle/svvpY4u2jsHEwWYS6). Access will be granted at\nGoogle DeepMind’s sole discretion. We will aim to respond to requests within 2–3\nbusiness days. You may only use AlphaFold 3 model parameters if received\ndirectly from Google. Use is subject to these\n[terms of use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md).\n\n## Installation and Running Your First Prediction\n\nSee the [installation documentation](docs/installation.md).\n\nOnce you have installed AlphaFold 3, you can test your setup using e.g. the\nfollowing input JSON file named `fold_input.json`:\n\n```json\n{\n  \"name\": \"2PV7\",\n  \"sequences\": [\n    {\n      \"protein\": {\n        \"id\": [\"A\", \"B\"],\n        \"sequence\": \"GMRESYANENQFGFKTINSDIHKIVIVGGYGKLGGLFARYLRASGYPISILDREDWAVAESILANADVVIVSVPINLTLETIERLKPYLTENMLLADLTSVKREPLAKMLEVHTGAVLGLHPMFGADIASMAKQVVVRCDGRFPERYEWLLEQIQIWGAKIYQTNATEHDHNMTYIQALRHFSTFANGLHLSKQPINLANLLALSSPIYRLELAMIGRLFAQDAELYADIIMDKSENLAVIETLKQTYDEALTFFENNDRQGFIDAFHKVRDWFGDYSEQFLKESRQLLQQANDLKQG\"\n      }\n    }\n  ],\n  \"modelSeeds\": [1],\n  \"dialect\": \"alphafold3\",\n  \"version\": 1\n}\n```\n\nYou can then run AlphaFold 3 using the following command:\n\n```\ndocker run -it \\\n    --volume $HOME/af_input:/root/af_input \\\n    --volume $HOME/af_output:/root/af_output \\\n    --volume <MODEL_PARAMETERS_DIR>:/root/models \\\n    --volume <DATABASES_DIR>:/root/public_databases \\\n    --gpus all \\\n    alphafold3 \\\n    python run_alphafold.py \\\n    --json_path=/root/af_input/fold_input.json \\\n    --model_dir=/root/models \\\n    --output_dir=/root/af_output\n```\n\nThere are various flags that you can pass to the `run_alphafold.py` command, to\nlist them all run `python run_alphafold.py --help`. Two fundamental flags that\ncontrol which parts AlphaFold 3 will run are:\n\n*   `--run_data_pipeline` (defaults to `true`): whether to run the data\n    pipeline, i.e. genetic and template search. This part is CPU-only, time\n    consuming and could be run on a machine without a GPU.\n*   `--run_inference` (defaults to `true`): whether to run the inference. This\n    part requires a GPU.\n\n## AlphaFold 3 Input\n\nSee the [input documentation](docs/input.md).\n\n## AlphaFold 3 Output\n\nSee the [output documentation](docs/output.md).\n\n## Performance\n\nSee the [performance documentation](docs/performance.md).\n\n## Known Issues\n\nKnown issues are documented in the\n[known issues documentation](docs/known_issues.md).\n\nPlease\n[create an issue](https://github.com/google-deepmind/alphafold3/issues/new/choose)\nif it is not already listed in [Known Issues](docs/known_issues.md) or in the\n[issues tracker](https://github.com/google-deepmind/alphafold3/issues).\n\n## Citing This Work\n\nAny publication that discloses findings arising from using this source code, the\nmodel parameters or outputs produced by those should cite:\n\n```bibtex\n@article{Abramson2024,\n  author  = {Abramson, Josh and Adler, Jonas and Dunger, Jack and Evans, Richard and Green, Tim and Pritzel, Alexander and Ronneberger, Olaf and Willmore, Lindsay and Ballard, Andrew J. and Bambrick, Joshua and Bodenstein, Sebastian W. and Evans, David A. and Hung, Chia-Chun and O’Neill, Michael and Reiman, David and Tunyasuvunakool, Kathryn and Wu, Zachary and Žemgulytė, Akvilė and Arvaniti, Eirini and Beattie, Charles and Bertolli, Ottavia and Bridgland, Alex and Cherepanov, Alexey and Congreve, Miles and Cowen-Rivers, Alexander I. and Cowie, Andrew and Figurnov, Michael and Fuchs, Fabian B. and Gladman, Hannah and Jain, Rishub and Khan, Yousuf A. and Low, Caroline M. R. and Perlin, Kuba and Potapenko, Anna and Savy, Pascal and Singh, Sukhdeep and Stecula, Adrian and Thillaisundaram, Ashok and Tong, Catherine and Yakneen, Sergei and Zhong, Ellen D. and Zielinski, Michal and Žídek, Augustin and Bapst, Victor and Kohli, Pushmeet and Jaderberg, Max and Hassabis, Demis and Jumper, John M.},\n  journal = {Nature},\n  title   = {Accurate structure prediction of biomolecular interactions with AlphaFold 3},\n  year    = {2024},\n  volume  = {630},\n  number  = {8016},\n  pages   = {493–-500},\n  doi     = {10.1038/s41586-024-07487-w}\n}\n```\n\n## Acknowledgements\n\nAlphaFold 3's release was made possible by the invaluable contributions of the\nfollowing people:\n\nAndrew Cowie, Bella Hansen, Charlie Beattie, Chris Jones, Grace Margand,\nJacob Kelly, James Spencer, Josh Abramson, Kathryn Tunyasuvunakool, Kuba Perlin,\nLindsay Willmore, Max Bileschi, Molly Beck, Oleg Kovalevskiy,\nSebastian Bodenstein, Sukhdeep Singh, Tim Green, Toby Sargeant, Uchechi Okereke,\nYotam Doron, and Augustin Žídek (engineering lead).\n\nWe also extend our gratitude to our collaborators at Google and Isomorphic Labs.\n\nAlphaFold 3 uses the following separate libraries and packages:\n\n*   [abseil-cpp](https://github.com/abseil/abseil-cpp) and\n    [abseil-py](https://github.com/abseil/abseil-py)\n*   [Chex](https://github.com/deepmind/chex)\n*   [Docker](https://www.docker.com)\n*   [DSSP](https://github.com/PDB-REDO/dssp)\n*   [HMMER Suite](https://github.com/EddyRivasLab/hmmer)\n*   [Haiku](https://github.com/deepmind/dm-haiku)\n*   [JAX](https://github.com/jax-ml/jax/)\n*   [jax-triton](https://github.com/jax-ml/jax-triton)\n*   [jaxtyping](https://github.com/patrick-kidger/jaxtyping)\n*   [libcifpp](https://github.com/pdb-redo/libcifpp)\n*   [NumPy](https://github.com/numpy/numpy)\n*   [pybind11](https://github.com/pybind/pybind11) and\n    [pybind11_abseil](https://github.com/pybind/pybind11_abseil)\n*   [RDKit](https://github.com/rdkit/rdkit)\n*   [Tree](https://github.com/deepmind/tree)\n*   [Triton](https://github.com/triton-lang/triton)\n*   [tqdm](https://github.com/tqdm/tqdm)\n\nWe thank all their contributors and maintainers!\n\n## Get in Touch\n\nIf you have any questions not covered in this overview, please contact the\nAlphaFold team at alphafold@google.com.\n\nWe would love to hear your feedback and understand how AlphaFold 3 has been\nuseful in your research. Share your stories with us at\n[alphafold@google.com](mailto:alphafold@google.com).\n\n## Licence and Disclaimer\n\nThis is not an officially supported Google product.\n\nCopyright 2024 DeepMind Technologies Limited.\n\n### AlphaFold 3 Source Code and Model Parameters\n\nThe AlphaFold 3 source code is licensed under the Creative Commons\nAttribution-Non-Commercial ShareAlike International License, Version 4.0\n(CC-BY-NC-SA 4.0) (the \"License\"); you may not use this file except in\ncompliance with the License. You may obtain a copy of the License at\n[https://github.com/google-deepmind/alphafold3/blob/main/LICENSE](https://github.com/google-deepmind/alphafold3/blob/main/LICENSE).\n\nThe AlphaFold 3 model parameters are made available under the\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md)\n(the \"Terms\"); you may not use these except in compliance with the Terms. You\nmay obtain a copy of the Terms at\n[https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md).\n\nUnless required by applicable law, AlphaFold 3 and its output are distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\nor implied. You are solely responsible for determining the appropriateness of\nusing AlphaFold 3, or using or distributing its source code or output, and\nassume any and all risks associated with such use or distribution and your\nexercise of rights and obligations under the relevant terms. Output are\npredictions with varying levels of confidence and should be interpreted\ncarefully. Use discretion before relying on, publishing, downloading or\notherwise using the AlphaFold 3 Assets.\n\nAlphaFold 3 and its output are for theoretical modeling only. They are not\nintended, validated, or approved for clinical use. You should not use the\nAlphaFold 3 or its output for clinical purposes or rely on them for medical or\nother professional advice. Any content regarding those topics is provided for\ninformational purposes only and is not a substitute for advice from a qualified\nprofessional. See the relevant terms for the specific language governing\npermissions and limitations under the terms.\n\n### Third-party Software\n\nUse of the third-party software, libraries or code referred to in the\n[Acknowledgements](#acknowledgements) section above may be governed by separate\nterms and conditions or license provisions. Your use of the third-party\nsoftware, libraries or code is subject to any such terms and you should check\nthat you can comply with any applicable restrictions or terms and conditions\nbefore use.\n\n### Mirrored and Reference Databases\n\nThe following databases have been: (1) mirrored by Google DeepMind; and (2) in\npart, included with the inference code package for testing purposes, and are\navailable with reference to the following:\n\n*   [BFD](https://bfd.mmseqs.com/) (modified), by Steinegger M. and Söding J.,\n    modified by Google DeepMind, available under a\n    [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/deed.en).\n    See the Methods section of the\n    [AlphaFold proteome paper](https://www.nature.com/articles/s41586-021-03828-1)\n    for details.\n*   [PDB](https://wwpdb.org) (unmodified), by H.M. Berman et al., available free\n    of all copyright restrictions and made fully and freely available for both\n    non-commercial and commercial use under\n    [CC0 1.0 Universal (CC0 1.0) Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/).\n*   [MGnify: v2022\\_05](https://ftp.ebi.ac.uk/pub/databases/metagenomics/peptide_database/2022_05/README.txt)\n    (unmodified), by Mitchell AL et al., available free of all copyright\n    restrictions and made fully and freely available for both non-commercial and\n    commercial use under\n    [CC0 1.0 Universal (CC0 1.0) Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/).\n*   [UniProt: 2021\\_04](https://www.uniprot.org/) (unmodified), by The UniProt\n    Consortium, available under a\n    [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/deed.en).\n*   [UniRef90: 2022\\_05](https://www.uniprot.org/) (unmodified) by The UniProt\n    Consortium, available under a\n    [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/deed.en).\n*   [NT: 2023\\_02\\_23](https://www.ncbi.nlm.nih.gov/nucleotide/) (modified) See\n    the Supplementary Information of the\n    [AlphaFold 3 paper](https://nature.com/articles/s41586-024-07487-w) for\n    details.\n*   [RFam: 14\\_4](https://rfam.org/) (modified), by I. Kalvari et al., available\n    free of all copyright restrictions and made fully and freely available for\n    both non-commercial and commercial use under\n    [CC0 1.0 Universal (CC0 1.0) Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/).\n    See the Supplementary Information of the\n    [AlphaFold 3 paper](https://nature.com/articles/s41586-024-07487-w) for\n    details.\n*   [RNACentral: 21\\_0](https://rnacentral.org/) (modified), by The RNAcentral\n    Consortium available free of all copyright restrictions and made fully and\n    freely available for both non-commercial and commercial use under\n    [CC0 1.0 Universal (CC0 1.0) Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/).\n    See the Supplementary Information of the\n    [AlphaFold 3 paper](https://nature.com/articles/s41586-024-07487-w) for\n    details.\n"
        },
        {
          "name": "WEIGHTS_PROHIBITED_USE_POLICY.md",
          "type": "blob",
          "size": 6.9140625,
          "content": "# ALPHAFOLD 3 MODEL PARAMETERS PROHIBITED USE POLICY\n\nLast Modified: 2024-11-09\n\nAlphaFold 3 can help you accelerate scientific research by predicting the 3D\nstructure of biological molecules. Google makes the AlphaFold Assets available\nfree of charge for certain non-commercial uses in accordance with the\nrestrictions set out below. This policy uses the same defined terms as the\n[AlphaFold 3 Model Parameters Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md).\n\n**You must not access or use nor allow others to access or use the AlphaFold 3\nAssets:**\n\n1.  **On behalf of a commercial organization or in connection with any\n    commercial activities, including research on behalf of commercial\n    organizations.**\n\n    1.  This means that only non-commercial organizations (*i.e.*, universities,\n        non-profit organizations and research institutes, educational,\n        journalism and government bodies) may use the AlphaFold 3 Assets for\n        their non-commercial activities. The AlphaFold 3 Assets are not\n        available for any other types of organization, even if conducting\n        non-commercial work.\n\n    2.  If you are a researcher affiliated with a non-commercial organization,\n        provided **you are not a commercial organisation or acting on behalf of\n        a commercial organisation,** you can use the AlphaFold 3 Assets for your\n        non-commercial affiliated research.\n\n    3.  You must not share the AlphaFold 3 Assets with any commercial\n        organization or use the AlphaFold 3 Assets in a manner that will grant a\n        commercial organization any rights in these. The only exception is\n        making Output publicly available (including indirectly to commercial\n        organizations) via a scientific publication or open source release or\n        using it to support journalism, each of which is permitted.\n\n2.  **To misinform, misrepresent or mislead**, including:\n\n    1.  providing false or inaccurate information in relation to your access to\n        or use of AlphaFold 3 or Output, including accessing or using the Model\n        Parameters on behalf of an organization without telling us or submitting\n        a request to access the Model Parameters where Google has prohibited\n        your use of AlphaFold 3 in full or in part (including as made available\n        via [AlphaFold Server](https://alphafoldserver.com/about));\n\n    2.  misrepresenting your relationship with us, including by using Google’s\n        trademarks, trade names, logos or suggesting endorsement by Google\n        without Google’s permission to do so - nothing in the Terms grants such\n        permission;\n\n    3.  misrepresenting the origin of AlphaFold 3 in full or in part;\n\n    4.  distributing misleading claims of expertise or capability, or engaging\n        in the unauthorized or unlicensed practice of any profession,\n        particularly in sensitive areas (*e.g.*, health); or\n\n    5.  to make decisions in domains that affect material or individual rights\n        or well-being (*e.g.*, healthcare).\n\n3.  **To perform, promote or facilitate dangerous, illegal or malicious\n    activities**, including:\n\n    1.  promoting or facilitating the sale of, or providing instructions for\n        synthesizing or accessing, illegal substances, goods or services;\n\n    2.  abusing, harming, interfering, or disrupting any services, including\n        generating or distributing content for deceptive or fraudulent\n        activities or malware;\n\n    3.  generating or distributing any content, including Output, that\n        infringes, misappropriates, or otherwise violates any individual's or\n        entity's rights (including, but not limited to rights in copyrighted\n        content); or\n\n    4.  attempting to circumvent, or intentionally causing (directly or\n        indirectly) AlphaFold 3 to act in a manner that contravenes the Terms.\n\n**You must not nor allow others to:**\n\n1.  **Use Output to train or create machine learning models or related\n    technology for biomolecular structure prediction similar to AlphaFold 3\n    (\"Derived Models\"),** including via distillation or other methods. For the\n    avoidance of doubt, the use restrictions set out in the Terms would apply in\n    full to any Derived Models created in breach of the Terms.\n\n2.  **Distribute Output without providing conspicuous notice that what you\n    Distribute is provided under and subject to the\n    [AlphaFold 3 Output Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md)\n    and of any modifications you make.**\n\n    1.  This means if you remove, or cause to be removed (for example by using\n        third-party software), the notices and terms we provide when you\n        generate Output using AlphaFold 3, you must ensure any further\n        Distribution of Output is accompanied by a copy of the\n        [AlphaFold 3 Output Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md)\n        and a \"Legally Binding Terms of Use\" text file that contains the\n        following notice:\n\n        \"*By using this information, you agree to AlphaFold 3 Output Terms of\n        Use found at\n        https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md.*\n\n        *To request access to the AlphaFold 3 model parameters, follow the\n        process set out at https://github.com/google-deepmind/alphafold3. You\n        may only use these if received directly from Google. Use is subject to\n        terms of use available at\n        https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md.*\"\n\n    2.  You must not include any additional or different terms that conflict\n        with the\n        [AlphaFold 3 Output Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md).\n\n3.  **Distribute Output, or disclose findings arising from using AlphaFold 3\n    without citing our paper:** [Abramson, J et al. Accurate structure\n    prediction of biomolecular interactions with AlphaFold 3. *Nature*\n    (2024)](https://www.nature.com/articles/s41586-024-07487-w). For the\n    avoidance of doubt, this is an additional requirement to the notice\n    requirements set out above.\n\n4.  **Circumvent access restrictions relating to the Model Parameters, including\n    utilising, sharing or making available the Model Parameters when you have\n    not been expressly authorized to do so by Google.** Google will grant access\n    to the Model Parameters to either:\n\n    1.  you for your individual use on behalf of your organization, in which\n        case you cannot share your copy of Model Parameters with anyone else; or\n\n    2.  an authorized representative of your organization, with full legal\n        authority to bind that organization to these Terms in which case you may\n        share that organization’s copy of the Model Parameters with employees,\n        consultants, contractors and agents of the organization as authorized by\n        that representative.\n"
        },
        {
          "name": "WEIGHTS_TERMS_OF_USE.md",
          "type": "blob",
          "size": 15.8291015625,
          "content": "# ALPHAFOLD 3 MODEL PARAMETERS TERMS OF USE\n\nLast Modified: 2024-11-09\n\n[AlphaFold 3](https://blog.google/technology/ai/google-deepmind-isomorphic-alphafold-3-ai-model/)\nis an AI model developed by [Google DeepMind](https://deepmind.google/) and\n[Isomorphic Labs](https://www.isomorphiclabs.com/). It generates 3D structure\npredictions of biological molecules, providing model confidence for the\nstructure predictions. We make the trained model parameters and output generated\nusing those available free of charge for certain non-commercial uses, in\naccordance with these terms of use and the\n[AlphaFold 3 Model Parameters Prohibited Use Policy](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_PROHIBITED_USE_POLICY.md).\n\n**Key things to know when using the AlphaFold 3 model parameters and output**\n\n1.  The AlphaFold 3 model parameters and output are **only** available for\n    non-commercial use by, or on behalf of, non-commercial organizations\n    (*i.e.*, universities, non-profit organizations and research institutes,\n    educational, journalism and government bodies). If you are a researcher\n    affiliated with a non-commercial organization, provided **you are not a\n    commercial organisation or acting on behalf of a commercial organisation,**\n    this means you can use these for your non-commercial affiliated research.\n2.  You **must not** use nor allow others to use:\n    1.  AlphaFold 3 model parameters or output in connection with **any\n        commercial activities, including research** **on behalf of commercial\n        organizations;** or\n    2.  AlphaFold 3 output to **train machine learning models** or related\n        technology for **biomolecular structure prediction** similar to\n        AlphaFold 3.\n3.  You ***must not* publish or share AlphaFold 3 model parameters**, except\n    sharing these within your organization in accordance with these Terms.\n4.  You ***can* publish, share and adapt AlphaFold 3 *output*** in accordance\n    with these Terms, including the requirements to provide clear notice of any\n    modifications you make and that ongoing use of AlphaFold 3 output and\n    derivatives are subject to the\n    [AlphaFold 3 Output Terms of Use](https://github.com/google-deepmind/alphafold3/blob/main/OUTPUT_TERMS_OF_USE.md).\n\nBy using, reproducing, modifying, performing, distributing or displaying any\nportion or element of the Model Parameters (as defined below) or otherwise\naccepting the terms of this agreement, you agree to be bound by (1) these terms\nof use, and (2) the\n[AlphaFold 3 Model Parameters Prohibited Use Policy](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_PROHIBITED_USE_POLICY.md)\nwhich is incorporated herein by reference (together, the \"**Terms**\"), in each\ncase (a) as modified from time to time in accordance with the Terms, and (b)\nbetween you and (i) if you are from a country in the European Economic Area or\nSwitzerland, Google Ireland Limited, or (ii) otherwise, Google LLC.\n\nYou confirm you are authorized either explicitly or implicitly to enter, and are\nentering, into the Terms as an employee on behalf of, or otherwise on behalf of,\nyour organization.\n\nPlease read these Terms carefully. They establish what you can expect from us as\nyou access and use the AlphaFold 3 Assets (as defined below), and what Google\nexpects from you. When we say \"**you**\", we mean the individual or organization\nusing the AlphaFold 3 Assets. When we say \"**we**\", \"**us**\" or \"**Google**\", we\nmean the entities that belong to the Google group of companies, which means\nGoogle LLC and its affiliates.\n\n## 1. Key Definitions\n\nAs used in these Terms:\n\n\"**AlphaFold 3**\" means: (a) the AlphaFold 3 source code made available\n[here](https://github.com/google-deepmind/alphafold3/) and licensed under the\nterms of the Creative Commons Attribution-NonCommercial-Sharealike 4.0\nInternational (CC-BY-NC-SA 4.0) license and any derivative source code, and (b)\nModel Parameters.\n\n\"**AlphaFold 3 Assets**\" means the Model Parameters and Output.\n\n\"**Distribution**\" or \"**Distribute**\" means any transmission, publication, or\nother sharing of Output publicly or to any other person.\n\n\"**Model Parameters**\" means the trained model weights and parameters made\navailable by Google to organizations (at its sole discretion) for their use in\naccordance with these Terms, together with (a) modifications to those weights\nand parameters, (b) works based on those weights and parameters, or (c) other\ncode or machine learning models which incorporate, in full or in part, those\nweights and parameters.\n\n\"**Output**\" means the structure predictions and all ancillary and related\ninformation provided by AlphaFold 3 or using the Model Parameters, together with\nany visual representations, computational predictions, descriptions,\nmodifications, copies, or adaptations that are substantially derived from\nOutput.\n\n\"**Including\"** means \"**including without limitation**\".\n\n## 2. Accessing and using the AlphaFold 3 Assets\n\nSubject to your compliance with the Terms, including the\n[AlphaFold 3 Model Parameters Prohibited Use Policy](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_PROHIBITED_USE_POLICY.md),\nyou may access, use and modify the AlphaFold 3 Assets and Distribute the Output\nas set out in these Terms. We grant you a non-exclusive, royalty-free,\nrevocable, non-transferable and non-sublicensable (except as expressly permitted\nin these Terms) license to any intellectual property rights we have in the\nAlphaFold Assets to the extent necessary for these purposes. In order to verify\nyour access and use of AlphaFold 3, we may from time-to-time ask for additional\ninformation from you, including verification of your name, organization, and\nother identifying information.\n\nBy accessing, using, or modifying the AlphaFold 3 Assets, Distributing Output,\nor requesting to access the Model Parameters, you represent and warrant that (a)\nyou have full power and authority to enter into these Terms (including being of\nsufficient age of consent), (b) Google has never previously terminated your\naccess and right to use AlphaFold 3 (including as made available via\n[AlphaFold Server](https://alphafoldserver.com/about)) due to your breach of\napplicable terms of use, (c) entering into or performing your rights and\nobligations under these Terms will not violate any agreement you have with a\nthird party or any third-party rights, (d) any information provided by you to\nGoogle in relation to AlphaFold 3, including (where applicable) in order to\nrequest access to the Model Parameters, is correct and current, and (e) you are\nnot (i) resident of a embargoed country, (ii) ordinarily resident in a US\nembargoed country, or (iii) otherwise prohibited by applicable export controls\nand sanctions programs from accessing, using, or modifying the AlphaFold 3\nAssets.\n\nIf you choose to give Google feedback, such as suggestions to improve AlphaFold\n3, you undertake any such information is non-confidential and non-proprietary,\nand Google may act on your feedback without obligation to you.\n\n## 3. Use Restrictions\n\nYou must not use any of the AlphaFold 3 Assets:\n\n1.  for the restricted uses set forth in the\n    [AlphaFold 3 Model Parameters Prohibited Use Policy](https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_PROHIBITED_USE_POLICY.md);\n    or\n2.  in violation of applicable laws and regulations.\n\nTo the maximum extent permitted by law and without limiting any of our other\nrights, Google reserves the right to revoke your right to use, and (to the\nextent feasible) restrict usage of any of the AlphaFold 3 Assets that Google\nreasonably believes is in violation of these Terms.\n\n## 4. Generated Output\n\nAlthough you must comply with these Terms when using the AlphaFold 3 Assets, we\nwill not claim ownership in original Output you generate using AlphaFold 3.\nHowever, you acknowledge that AlphaFold 3 may generate the same or similar\nOutput for multiple users, including Google, and we reserve all our rights in\nthis respect.\n\n## 5. Changes to the AlphaFold 3 Assets or these Terms\n\nGoogle may add or remove functionalities or features of the AlphaFold 3 Assets\nat any time and may stop offering access to the AlphaFold 3 Assets altogether.\n\nGoogle may update these Terms and the access mechanism for the Model Parameters\nat any time. We'll post any modifications to the Terms\n[in the AlphaFold 3 GitHub repository](https://github.com/google-deepmind/alphafold3).\nChanges will generally become effective 14 days after they are posted. However,\nchanges addressing functionality or made for legal reasons will be effective\nimmediately.\n\nYou should review the Terms whenever we update them or you use the AlphaFold 3\nAssets. If you do not agree to any modifications to the Terms, you must stop\nusing the AlphaFold 3 Assets immediately.\n\n## 6. Suspending or terminating your right to use the AlphaFold 3 Assets\n\nGoogle may at any time suspend or terminate your right to use and, as applicable\naccess to, the AlphaFold 3 Assets because of, among other reasons, your failure\nto fully comply with the Terms. If Google suspends or terminates your right to\naccess or use the AlphaFold 3 Assets, you must immediately delete and cease use\nand Distribution of all copies of the AlphaFold 3 Assets in your possession or\ncontrol and are prohibited from using the AlphaFold 3 Assets, including by\nsubmitting an application to use the Model Parameters. Google will endeavour to\ngive you reasonable notice prior to any such suspension or termination, but no\nnotice or prior warning will be given if the suspension or termination is for\nyour failure to fully comply with the Terms or other serious grounds.\n\nOf course, you are always free to stop using the AlphaFold 3 Assets. If you do\nstop using these, we would appreciate knowing why (via\n[alphafold@google.com](mailto:alphafold@google.com)) so that we can continue to\nimprove our technologies.\n\n## 7. Confidentiality\n\nYou agree not to disclose or make available Google Confidential Information to\nanyone without our prior written consent. \"**Google Confidential Information**\"\nmeans (a) the AlphaFold 3 Model Parameters and all software, technology and\ndocumentation relating to AlphaFold 3, except for the AlphaFold 3 source code,\nand (b) any other information made available by Google that is marked\nconfidential or would normally be considered confidential under the\ncircumstances in which it is presented. Google Confidential Information does not\ninclude (a) information that you already knew prior to your access to, or use\nof, the AlphaFold 3 Assets (including via\n[AlphaFold Server](https://alphafoldserver.com/about)), (b) that becomes public\nthrough no fault of yours (for example, your breach of the Terms), (c) that was\nindependently developed by you without reference to Google Confidential\nInformation, or (d) that was lawfully given to you by a third party (without\nyour or their breach of the Terms).\n\n## 8. Disclaimers\n\nNothing in the Terms restricts any rights that cannot be restricted under\napplicable law or limits Google's responsibilities except as allowed by\napplicable law.\n\n**AlphaFold 3 and Output are provided on an \"as is\" basis, without warranties or\nconditions of any kind, either express or implied, including any warranties or\nconditions of title, non-infringement, merchantability, or fitness for a\nparticular purpose. You are solely responsible for determining the\nappropriateness of using AlphaFold 3, or using or distributing Output, and\nassume any and all risks associated with such use or distribution and your\nexercise of rights and obligations under these Terms. You and anyone you share\nOutput with are solely responsible for these and their subsequent uses.**\n\n**Output are predictions with varying levels of confidence and should be\ninterpreted carefully. Use discretion before relying on, publishing, downloading\nor otherwise using AlphaFold 3.**\n\n**AlphaFold 3 and Outputs are for theoretical modeling only. They are not\nintended, validated, or approved for clinical use. You should not use AlphaFold\n3 or Output for clinical purposes or rely on them for medical or other\nprofessional advice. Any content regarding those topics is provided for\ninformational purposes only and is not a substitute for advice from a qualified\nprofessional.**\n\n## 9. Liabilities\n\nTo the extent allowed by applicable law, you will indemnify Google and its\ndirectors, officers, employees, and contractors for any third-party legal\nproceedings (including actions by government authorities) arising out of or\nrelating to your unlawful use of the AlphaFold 3 Assets or violation of the\nTerms. This indemnity covers any liability or expense arising from claims,\nlosses, damages, judgments, fines, litigation costs, and legal fees, except to\nthe extent a liability or expense is caused by Google's breach, negligence, or\nwillful misconduct. If you are legally exempt from certain responsibilities,\nincluding indemnification, then those responsibilities do not apply to you under\nthe Terms.\n\nIn no circumstances will Google be responsible for any indirect, special,\nincidental, exemplary, consequential, or punitive damages, or lost profits of\nany kind in connection with the Terms or the AlphaFold 3 Assets, even if Google\nhas been advised of the possibility of such damages. Google's total aggregate\nliability for all claims arising out of or in connection with the Terms or the\nAlphaFold 3 Assets, including for its own negligence, is limited to $500.\n\n## 10. Miscellaneous\n\nBy law, you have certain rights that cannot be limited by a contract like the\nTerms. The Terms are in no way intended to restrict those rights.\n\nThe Terms are our entire agreement relating to your use of the AlphaFold 3\nAssets and supersede any prior or contemporaneous agreements on that subject.\n\nIf it turns out that a particular provision of the Terms is not enforceable, the\nbalance of the Terms will remain in full force and effect.\n\n## 11. Disputes\n\nCalifornia law will govern all disputes arising out of or relating to the Terms\nor in connection to the AlphaFold 3 Assets. These disputes will be resolved\nexclusively in the federal or state courts of Santa Clara County, California,\nUSA and you and Google consent to personal jurisdiction in those courts. To the\nextent that applicable local law prevents certain disputes from being resolved\nin a California court, you and Google can file those disputes in your local\ncourts. If applicable local law prevents your local court from applying\nCalifornia law to resolve these disputes, then these disputes will be governed\nby the applicable local laws of your country, state, or other place of\nresidence. If you are using the AlphaFold 3 Assets on behalf of a government\norganization other than US federal government organizations (where the foregoing\nprovisions shall apply to the extent permitted by federal law), these Terms will\nbe silent regarding governing law and courts.\n\nGiven the nature of scientific research, it may take some time for any breach of\nthe Terms to become apparent. To protect you, Google and the AlphaFold 3 Assets,\nto the extent allowed by applicable law you agree that:\n\n1.  any legal claims relating to the Terms or the AlphaFold 3 Assets can be\n    initiated until the later of:\n    1.  the cut-off date under applicable law for bringing the legal claim; or\n    2.  two years from the date you or Google (as applicable) became aware, or\n        should reasonably have become aware, of the facts giving rise to that\n        claim; and\n2.  you will not argue limitation, time bar, delay, waiver, or the like in an\n    attempt to bar an action filed within that time period, and neither will\n    Google.\n\nAll rights not specifically and expressly granted to you by the Terms are\nreserved to Google. No delay, act or omission by Google in exercising any right\nor remedy will be deemed a waiver of any breach of the Terms and Google\nexpressly reserves any and all rights and remedies available under the Terms or\nat law or in equity or otherwise, including the remedy of injunctive relief\nagainst any threatened or actual breach of the Terms without the necessity of\nproving actual damages.\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 39.18359375,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile --extra=dev --generate-hashes --output-file=dev-requirements.txt pyproject.toml\n#\nabsl-py==2.1.0 \\\n    --hash=sha256:526a04eadab8b4ee719ce68f204172ead1027549089702d99b9059f129ff1308 \\\n    --hash=sha256:7820790efbb316739cde8b4e19357243fc3608a152024288513dd968d7d959ff\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   chex\n    #   dm-haiku\n    #   jax-triton\nchex==0.1.87 \\\n    --hash=sha256:0096d89cc8d898bb521ef4bfbf5c24549022b0e5b301f529ab57238896fe6c5d \\\n    --hash=sha256:ce536475661fd96d21be0c1728ecdbedd03f8ff950c662dfc338c92ea782cb16\n    # via alphafold3 (pyproject.toml)\ndm-haiku==0.0.13 \\\n    --hash=sha256:029bb91b5b1edb0d3fe23304d3bf12a545ea6e485041f7f5d8c8d85ebcf6e17d \\\n    --hash=sha256:ee9562c68a059f146ad07f555ca591cb8c11ef751afecc38353863562bd23f43\n    # via alphafold3 (pyproject.toml)\ndm-tree==0.1.8 \\\n    --hash=sha256:054b461f8176f4bce7a21f7b1870f873a1ced3bdbe1282c816c550bb43c71fa6 \\\n    --hash=sha256:09964470f76a5201aff2e8f9b26842976de7889300676f927930f6285e256760 \\\n    --hash=sha256:0d3172394079a86c3a759179c65f64c48d1a42b89495fcf38976d11cc3bb952c \\\n    --hash=sha256:0e9620ccf06393eb6b613b5e366469304622d4ea96ae6540b28a33840e6c89cf \\\n    --hash=sha256:0fcaabbb14e7980377439e7140bd05552739ca5e515ecb3119f234acee4b9430 \\\n    --hash=sha256:1607ce49aa42f010d1e5e616d92ce899d66835d4d8bea49679582435285515de \\\n    --hash=sha256:181c35521d480d0365f39300542cb6cd7fd2b77351bb43d7acfda15aef63b317 \\\n    --hash=sha256:1d7c26e431fc93cc7e0cba867eb000db6a05f6f2b25af11ac4e9dada88fc5bca \\\n    --hash=sha256:1fe962015b2fe1282892b28ebe962faed53c7f98d942da9a4625cbf27baef913 \\\n    --hash=sha256:250b692fb75f45f02e2f58fbef9ab338904ef334b90557565621fa251df267cf \\\n    --hash=sha256:2869228d9c619074de501a3c10dc7f07c75422f8fab36ecdcb859b6f1b1ec3ef \\\n    --hash=sha256:28c52cbf4f8b3dbd0beaedf44f69fa85eec5e9dede612e08035e06ada6ec9426 \\\n    --hash=sha256:2f7915660f59c09068e428613c480150180df1060561fd0d1470684ae7007bd1 \\\n    --hash=sha256:343a4a4ebaa127451ff971254a4be4084eb4bdc0b2513c32b46f6f728fd03f9e \\\n    --hash=sha256:35cc164a79336bfcfafb47e5f297898359123bbd3330c1967f0c4994f9cf9f60 \\\n    --hash=sha256:378cc8ad93c5fe3590f405a309980721f021c790ca1bdf9b15bb1d59daec57f5 \\\n    --hash=sha256:39070ba268c0491af9fe7a58644d99e8b4f2cde6e5884ba3380bddc84ed43d5f \\\n    --hash=sha256:435227cf3c5dc63f4de054cf3d00183790bd9ead4c3623138c74dde7f67f521b \\\n    --hash=sha256:5483dca4d7eb1a0d65fe86d3b6a53ae717face83c1f17e0887b1a4a64ae5c410 \\\n    --hash=sha256:694c3654cfd2a81552c08ec66bb5c4a3d48fa292b9a181880fb081c36c5b9134 \\\n    --hash=sha256:75c5d528bb992981c20793b6b453e91560784215dffb8a5440ba999753c14ceb \\\n    --hash=sha256:803bfc53b4659f447ac694dbd04235f94a73ef7c1fd1e0df7c84ac41e0bc963b \\\n    --hash=sha256:81fce77f22a302d7a5968aebdf4efafef4def7ce96528719a354e6990dcd49c7 \\\n    --hash=sha256:83b7764de0d855338abefc6e3ee9fe40d301668310aa3baea3f778ff051f4393 \\\n    --hash=sha256:8c60a7eadab64c2278861f56bca320b2720f163dca9d7558103c3b77f2416571 \\\n    --hash=sha256:8ed3564abed97c806db122c2d3e1a2b64c74a63debe9903aad795167cc301368 \\\n    --hash=sha256:94d3f0826311f45ee19b75f5b48c99466e4218a0489e81c0f0167bda50cacf22 \\\n    --hash=sha256:96a548a406a6fb15fe58f6a30a57ff2f2aafbf25f05afab00c8f5e5977b6c715 \\\n    --hash=sha256:a5d819c38c03f0bb5b3b3703c60e4b170355a0fc6b5819325bf3d4ceb3ae7e80 \\\n    --hash=sha256:ad16ceba90a56ec47cf45b21856d14962ac314787975ef786efb5e6e9ca75ec7 \\\n    --hash=sha256:af4b3d372f2477dcd89a6e717e4a575ca35ccc20cc4454a8a4b6f8838a00672d \\\n    --hash=sha256:b095ba4f8ca1ba19350fd53cf1f8f3eb0bd406aa28af64a6dfc86707b32a810a \\\n    --hash=sha256:b9bd9b9ccb59409d33d51d84b7668010c04c2af7d4a371632874c1ca356cff3d \\\n    --hash=sha256:b9f89a454e98806b44fe9d40ec9eee61f848388f7e79ac2371a55679bd5a3ac6 \\\n    --hash=sha256:bb2d109f42190225112da899b9f3d46d0d5f26aef501c61e43529fe9322530b5 \\\n    --hash=sha256:c0a94aba18a35457a1b5cd716fd7b46c5dafdc4cf7869b4bae665b91c4682a8e \\\n    --hash=sha256:c5c8c12e3fda754ef6af94161bacdaeda816d941995fac415d6855c6c386af68 \\\n    --hash=sha256:d1612fcaecd79023dbc6a6ae48d51a80beb5c385d6f3f6d71688e57bc8d07de8 \\\n    --hash=sha256:d16e1f2a073604cfcc09f7131ae8d534674f43c3aef4c25742eae295bc60d04f \\\n    --hash=sha256:d20f2faa3672b52e5013f4077117bfb99c4cfc0b445d3bde1584c34032b57436 \\\n    --hash=sha256:d40fa4106ca6edc66760246a08f500ec0c85ef55c762fb4a363f6ee739ba02ee \\\n    --hash=sha256:de287fabc464b8734be251e46e06aa9aa1001f34198da2b6ce07bd197172b9cb \\\n    --hash=sha256:e4d714371bb08839e4e5e29024fc95832d9affe129825ef38836b143028bd144 \\\n    --hash=sha256:ea9e59e0451e7d29aece402d9f908f2e2a80922bcde2ebfd5dcb07750fcbfee8 \\\n    --hash=sha256:f7ac31b9aecccb2c6e1ab29706f6ded3eba0c2c69c770322c9c685929c3d6afb \\\n    --hash=sha256:fa42a605d099ee7d41ba2b5fb75e21423951fd26e5d50583a00471238fb3021d\n    # via alphafold3 (pyproject.toml)\nfilelock==3.16.1 \\\n    --hash=sha256:2082e5703d51fbf98ea75855d9d5527e33d8ff23099bec374a134febee6946b0 \\\n    --hash=sha256:c249fbfcd5db47e5e2d6d62198e565475ee65e4831e2561c8e313fa7eb961435\n    # via triton\njax[cuda12]==0.4.34 \\\n    --hash=sha256:44196854f40c5f9cea3142824b9f1051f85afc3fcf7593ec5479fc8db01c58db \\\n    --hash=sha256:b957ca1fc91f7343f91a186af9f19c7f342c946f95a8c11c7f1e5cdfe2e58d9e\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   chex\n    #   jax-triton\njax-cuda12-pjrt==0.4.34 \\\n    --hash=sha256:0c7cc98f962cc7fc8e0a5ea6331b42a0cee516f202f1c3019f6aa5cd9530cca0 \\\n    --hash=sha256:6247459827550e7d11480f5707d7d2843cbf57bcda5d833565493456075cd143\n    # via jax-cuda12-plugin\njax-cuda12-plugin[with-cuda]==0.4.34 \\\n    --hash=sha256:15fa8ff678fad34df424e01f1a9151abc966700670d3b22f52b87a2740028602 \\\n    --hash=sha256:1b037a408b9d9de59367c9513a9445b705da526657a0c4d593e84234312261e7 \\\n    --hash=sha256:b2099a4407225122ff76f6dcdc8dbdae47e6f29343bdfd21460ad337dc34a209 \\\n    --hash=sha256:d035ea72bd9b8a65a6ea621bca1affdd33127fa3a52e7bded7692670d360adab \\\n    --hash=sha256:dadb507949b70ba148567219bf0e7752eb63baec551f7ec860f8fcbb4ee48c48 \\\n    --hash=sha256:db988b7ba5063483a936ddbf162f04d1b4412e0d64340f11788c7bbc877e8a43 \\\n    --hash=sha256:e23721d1654b311b47cd6b35768520284bd036f8c7e6b11600143258b4a0409a \\\n    --hash=sha256:fb72bda44ae9f8a1e5ee9c5f82e2d273abe019874b0110b5c2d8395f1fe966b4\n    # via jax\njax-triton==0.2.0 \\\n    --hash=sha256:6db5f6147327f2462c35becab612d415cf9ee70c96e43020c3c7ea873eb8576e \\\n    --hash=sha256:ed564a5ffb9e404557dc8d296e7eb30e501da5a4d7b03408acd0837c1c618c21\n    # via alphafold3 (pyproject.toml)\njaxlib==0.4.34 \\\n    --hash=sha256:096f0ca309d41fa692a9d1f2f9baab1c5c8ca0749876ebb3f748e738a27c7ff4 \\\n    --hash=sha256:133070d4fec5525ffea4dc72956398c1cf647a04dcb37f8a935ee82af78d9965 \\\n    --hash=sha256:1a30771d85fa77f9ab8f18e63240f455ab3a3f87660ed7b8d5eea6ceecbe5c1e \\\n    --hash=sha256:3bcfa639ca3cfaf86c8ceebd5fc0d47300fd98a078014a1d0cc03133e1523d5f \\\n    --hash=sha256:3e60bc826933082e99b19b87c21818a8d26fcdb01f418d47cedff554746fd6cc \\\n    --hash=sha256:45d719a2ce0ebf21255a277b71d756f3609b7b5be70cddc5d88fd58c35219de0 \\\n    --hash=sha256:48272e9034ff868d4328cf0055a07882fd2be93f59dfb6283af7de491f9d1290 \\\n    --hash=sha256:571ef03259835458111596a71a2f4a6fabf4ec34595df4cea555035362ac5bf0 \\\n    --hash=sha256:6b43a974c5d91a19912d138f2658dd8dbb7d30dcdff5c961d896c673e872b611 \\\n    --hash=sha256:72e22e99a5dc890a64443c3fc12f13f20091f578c405a76de077ba42b4c62cd7 \\\n    --hash=sha256:7be673a876ebd1aef440fb7e3ebaf99a91abeb550c9728c644b7d7c7b5d7c108 \\\n    --hash=sha256:87f25a477cd279840e53718403f97092eba0e8a945fcab47bcf435b6f9119dda \\\n    --hash=sha256:8ee3f93836e53c86556ccd9449a4ea43516ee05184d031a71dd692e81259f7d9 \\\n    --hash=sha256:901cb4040ed24eae40071d8114ea8d10dff436277fa74a1a5b9e7206f641151c \\\n    --hash=sha256:b0001c8f0e2b1c7bc99e4f314b524a340d25653505c1a1484d4041a9d3617f6f \\\n    --hash=sha256:b7a212a3cb5c6acc201c32ae4f4b5f5a9ac09457fbb77ba8db5ce7e7d4adc214 \\\n    --hash=sha256:c303f5acaf6c56ce5ff133a923c9b6247bdebedde15bd2c893c24be4d8f71306 \\\n    --hash=sha256:c7b3e724a30426a856070aba0192b5d199e95b4411070e7ad96ad8b196877b10 \\\n    --hash=sha256:c9d3adcae43a33aad4332be9c2aedc5ef751d1e755f917a5afb30c7872eacaa8 \\\n    --hash=sha256:d840e64b85f8865404d6d225b9bb340e158df1457152a361b05680e24792b232\n    # via\n    #   chex\n    #   jax\njaxtyping==0.2.34 \\\n    --hash=sha256:2f81fb6d1586e497a6ea2d28c06dcab37b108a096cbb36ea3fe4fa2e1c1f32e5 \\\n    --hash=sha256:eed9a3458ec8726c84ea5457ebde53c964f65d2c22c0ec40d0555ae3fed5bbaf\n    # via alphafold3 (pyproject.toml)\njmp==0.0.4 \\\n    --hash=sha256:5dfeb0fd7c7a9f72a70fff0aab9d0cbfae32a809c02f4037ff3485ceb33e1730 \\\n    --hash=sha256:6aa7adbddf2bd574b28c7faf6e81a735eb11f53386447896909c6968dc36807d\n    # via dm-haiku\nml-dtypes==0.5.0 \\\n    --hash=sha256:099e09edd54e676903b4538f3815b5ab96f5b119690514602d96bfdb67172cbe \\\n    --hash=sha256:2e7534392682c3098bc7341648c650864207169c654aed83143d7a19c67ae06f \\\n    --hash=sha256:3e7d3a380fe73a63c884f06136f8baa7a5249cc8e9fdec677997dd78549f8128 \\\n    --hash=sha256:54415257f00eb44fbcc807454efac3356f75644f1cbfc2d4e5522a72ae1dacab \\\n    --hash=sha256:5f2b59233a0dbb6a560b3137ed6125433289ccba2f8d9c3695a52423a369ed15 \\\n    --hash=sha256:60275f2b51b56834e840c4809fca840565f9bf8e9a73f6d8c94f5b5935701215 \\\n    --hash=sha256:76942f6aeb5c40766d5ea62386daa4148e6a54322aaf5b53eae9e7553240222f \\\n    --hash=sha256:7ee9c320bb0f9ffdf9f6fa6a696ef2e005d1f66438d6f1c1457338e00a02e8cf \\\n    --hash=sha256:8c32138975797e681eb175996d64356bcfa124bdbb6a70460b9768c2b35a6fa4 \\\n    --hash=sha256:968fede07d1f9b926a63df97d25ac656cac1a57ebd33701734eaf704bc55d8d8 \\\n    --hash=sha256:a03fc861b86cc586728e3d093ba37f0cc05e65330c3ebd7688e7bae8290f8859 \\\n    --hash=sha256:a38df8df61194aeaae1ab7579075779b4ad32cd1cffd012c28be227fa7f2a70a \\\n    --hash=sha256:a988bac6572630e1e9c2edd9b1277b4eefd1c86209e52b0d061b775ac33902ff \\\n    --hash=sha256:ab046f2ff789b1f11b2491909682c5d089934835f9a760fafc180e47dcb676b8 \\\n    --hash=sha256:afa08343069874a30812871d639f9c02b4158ace065601406a493a8511180c02 \\\n    --hash=sha256:c7a9152f5876fef565516aa5dd1dccd6fc298a5891b2467973905103eb5c7856 \\\n    --hash=sha256:cb5cc7b25acabd384f75bbd78892d0c724943f3e2e1986254665a1aa10982e07 \\\n    --hash=sha256:d3b3db9990c3840986a0e70524e122cfa32b91139c3653df76121ba7776e015f \\\n    --hash=sha256:d4b1a70a3e5219790d6b55b9507606fc4e02911d1497d16c18dd721eb7efe7d0 \\\n    --hash=sha256:dc74fd9995513d33eac63d64e436240f5494ec74d522a9f0920194942fc3d2d7 \\\n    --hash=sha256:e04fde367b2fe901b1d47234426fe8819909bd1dd862a5adb630f27789c20599\n    # via\n    #   jax\n    #   jaxlib\nnumpy==2.1.3 \\\n    --hash=sha256:016d0f6f5e77b0f0d45d77387ffa4bb89816b57c835580c3ce8e099ef830befe \\\n    --hash=sha256:02135ade8b8a84011cbb67dc44e07c58f28575cf9ecf8ab304e51c05528c19f0 \\\n    --hash=sha256:08788d27a5fd867a663f6fc753fd7c3ad7e92747efc73c53bca2f19f8bc06f48 \\\n    --hash=sha256:0d30c543f02e84e92c4b1f415b7c6b5326cbe45ee7882b6b77db7195fb971e3a \\\n    --hash=sha256:0fa14563cc46422e99daef53d725d0c326e99e468a9320a240affffe87852564 \\\n    --hash=sha256:13138eadd4f4da03074851a698ffa7e405f41a0845a6b1ad135b81596e4e9958 \\\n    --hash=sha256:14e253bd43fc6b37af4921b10f6add6925878a42a0c5fe83daee390bca80bc17 \\\n    --hash=sha256:15cb89f39fa6d0bdfb600ea24b250e5f1a3df23f901f51c8debaa6a5d122b2f0 \\\n    --hash=sha256:17ee83a1f4fef3c94d16dc1802b998668b5419362c8a4f4e8a491de1b41cc3ee \\\n    --hash=sha256:2312b2aa89e1f43ecea6da6ea9a810d06aae08321609d8dc0d0eda6d946a541b \\\n    --hash=sha256:2564fbdf2b99b3f815f2107c1bbc93e2de8ee655a69c261363a1172a79a257d4 \\\n    --hash=sha256:3522b0dfe983a575e6a9ab3a4a4dfe156c3e428468ff08ce582b9bb6bd1d71d4 \\\n    --hash=sha256:4394bc0dbd074b7f9b52024832d16e019decebf86caf909d94f6b3f77a8ee3b6 \\\n    --hash=sha256:45966d859916ad02b779706bb43b954281db43e185015df6eb3323120188f9e4 \\\n    --hash=sha256:4d1167c53b93f1f5d8a139a742b3c6f4d429b54e74e6b57d0eff40045187b15d \\\n    --hash=sha256:4f2015dfe437dfebbfce7c85c7b53d81ba49e71ba7eadbf1df40c915af75979f \\\n    --hash=sha256:50ca6aba6e163363f132b5c101ba078b8cbd3fa92c7865fd7d4d62d9779ac29f \\\n    --hash=sha256:50d18c4358a0a8a53f12a8ba9d772ab2d460321e6a93d6064fc22443d189853f \\\n    --hash=sha256:5641516794ca9e5f8a4d17bb45446998c6554704d888f86df9b200e66bdcce56 \\\n    --hash=sha256:576a1c1d25e9e02ed7fa5477f30a127fe56debd53b8d2c89d5578f9857d03ca9 \\\n    --hash=sha256:6a4825252fcc430a182ac4dee5a505053d262c807f8a924603d411f6718b88fd \\\n    --hash=sha256:72dcc4a35a8515d83e76b58fdf8113a5c969ccd505c8a946759b24e3182d1f23 \\\n    --hash=sha256:747641635d3d44bcb380d950679462fae44f54b131be347d5ec2bce47d3df9ed \\\n    --hash=sha256:762479be47a4863e261a840e8e01608d124ee1361e48b96916f38b119cfda04a \\\n    --hash=sha256:78574ac2d1a4a02421f25da9559850d59457bac82f2b8d7a44fe83a64f770098 \\\n    --hash=sha256:825656d0743699c529c5943554d223c021ff0494ff1442152ce887ef4f7561a1 \\\n    --hash=sha256:8637dcd2caa676e475503d1f8fdb327bc495554e10838019651b76d17b98e512 \\\n    --hash=sha256:96fe52fcdb9345b7cd82ecd34547fca4321f7656d500eca497eb7ea5a926692f \\\n    --hash=sha256:973faafebaae4c0aaa1a1ca1ce02434554d67e628b8d805e61f874b84e136b09 \\\n    --hash=sha256:996bb9399059c5b82f76b53ff8bb686069c05acc94656bb259b1d63d04a9506f \\\n    --hash=sha256:a38c19106902bb19351b83802531fea19dee18e5b37b36454f27f11ff956f7fc \\\n    --hash=sha256:a6b46587b14b888e95e4a24d7b13ae91fa22386c199ee7b418f449032b2fa3b8 \\\n    --hash=sha256:a9f7f672a3388133335589cfca93ed468509cb7b93ba3105fce780d04a6576a0 \\\n    --hash=sha256:aa08e04e08aaf974d4458def539dece0d28146d866a39da5639596f4921fd761 \\\n    --hash=sha256:b0df3635b9c8ef48bd3be5f862cf71b0a4716fa0e702155c45067c6b711ddcef \\\n    --hash=sha256:b47fbb433d3260adcd51eb54f92a2ffbc90a4595f8970ee00e064c644ac788f5 \\\n    --hash=sha256:baed7e8d7481bfe0874b566850cb0b85243e982388b7b23348c6db2ee2b2ae8e \\\n    --hash=sha256:bc6f24b3d1ecc1eebfbf5d6051faa49af40b03be1aaa781ebdadcbc090b4539b \\\n    --hash=sha256:c006b607a865b07cd981ccb218a04fc86b600411d83d6fc261357f1c0966755d \\\n    --hash=sha256:c181ba05ce8299c7aa3125c27b9c2167bca4a4445b7ce73d5febc411ca692e43 \\\n    --hash=sha256:c7662f0e3673fe4e832fe07b65c50342ea27d989f92c80355658c7f888fcc83c \\\n    --hash=sha256:c80e4a09b3d95b4e1cac08643f1152fa71a0a821a2d4277334c88d54b2219a41 \\\n    --hash=sha256:c894b4305373b9c5576d7a12b473702afdf48ce5369c074ba304cc5ad8730dff \\\n    --hash=sha256:d7aac50327da5d208db2eec22eb11e491e3fe13d22653dce51b0f4109101b408 \\\n    --hash=sha256:d89dd2b6da69c4fff5e39c28a382199ddedc3a5be5390115608345dec660b9e2 \\\n    --hash=sha256:d9beb777a78c331580705326d2367488d5bc473b49a9bc3036c154832520aca9 \\\n    --hash=sha256:dc258a761a16daa791081d026f0ed4399b582712e6fc887a95af09df10c5ca57 \\\n    --hash=sha256:e14e26956e6f1696070788252dcdff11b4aca4c3e8bd166e0df1bb8f315a67cb \\\n    --hash=sha256:e6988e90fcf617da2b5c78902fe8e668361b43b4fe26dbf2d7b0f8034d4cafb9 \\\n    --hash=sha256:e711e02f49e176a01d0349d82cb5f05ba4db7d5e7e0defd026328e5cfb3226d3 \\\n    --hash=sha256:ea4dedd6e394a9c180b33c2c872b92f7ce0f8e7ad93e9585312b0c5a04777a4a \\\n    --hash=sha256:ecc76a9ba2911d8d37ac01de72834d8849e55473457558e12995f4cd53e778e0 \\\n    --hash=sha256:f55ba01150f52b1027829b50d70ef1dafd9821ea82905b63936668403c3b471e \\\n    --hash=sha256:f653490b33e9c3a4c1c01d41bc2aef08f9475af51146e4a7710c450cf9761598 \\\n    --hash=sha256:fa2d1337dc61c8dc417fbccf20f6d1e139896a30721b7f1e832b2bb6ef4eb6c4\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   chex\n    #   dm-haiku\n    #   jax\n    #   jaxlib\n    #   jmp\n    #   ml-dtypes\n    #   rdkit\n    #   scipy\nnvidia-cublas-cu12==12.6.3.3 \\\n    --hash=sha256:e1f70bee38b964eac1907293b336bceb24498a4243e61eaf91a52977c59aebc4 \\\n    --hash=sha256:e531199ca4f1f764fb45bc1dde49a006f6765033f9c89c737e4553b9502ca1f5 \\\n    --hash=sha256:f33fb68e101d99470c82d17f92a0dd9f74de2a21685c217f4716cdd63b1316eb\n    # via\n    #   jax-cuda12-plugin\n    #   nvidia-cudnn-cu12\n    #   nvidia-cusolver-cu12\nnvidia-cuda-cupti-cu12==12.6.80 \\\n    --hash=sha256:358b4a1d35370353d52e12f0a7d1769fc01ff74a191689d3870b2123156184c4 \\\n    --hash=sha256:a3eff6cdfcc6a4c35db968a06fcadb061cbc7d6dde548609a941ff8701b98b73 \\\n    --hash=sha256:bbe6ae76e83ce5251b56e8c8e61a964f757175682bbad058b170b136266ab00a\n    # via jax-cuda12-plugin\nnvidia-cuda-nvcc-cu12==12.6.77 \\\n    --hash=sha256:26e118b4dae4ebd316ab6f5ee3f3c4cb929f8265f717a8e016ba57e254c0b4f1 \\\n    --hash=sha256:9a2aad43b8f4e4be9c237ece04f64450df77871eeebffad5a5a872714a97ca77 \\\n    --hash=sha256:b66bb5dd6b8ae62262586691977d3b4a425e91db61b4b9bc2f6b42bcd4154b96\n    # via jax-cuda12-plugin\nnvidia-cuda-runtime-cu12==12.6.77 \\\n    --hash=sha256:86c58044c824bf3c173c49a2dbc7a6c8b53cb4e4dca50068be0bf64e9dab3f7f \\\n    --hash=sha256:a84d15d5e1da416dd4774cb42edf5e954a3e60cc945698dc1d5be02321c44dc8 \\\n    --hash=sha256:d461264ecb429c84c8879a7153499ddc7b19b5f8d84c204307491989a365588e\n    # via jax-cuda12-plugin\nnvidia-cudnn-cu12==9.5.1.17 \\\n    --hash=sha256:30ac3869f6db17d170e0e556dd6cc5eee02647abc31ca856634d5a40f82c15b2 \\\n    --hash=sha256:9fd4584468533c61873e5fda8ca41bac3a38bcb2d12350830c69b0a96a7e4def \\\n    --hash=sha256:d7af0f8a4f3b4b9dbb3122f2ef553b45694ed9c384d5a75bab197b8eefb79ab8\n    # via jax-cuda12-plugin\nnvidia-cufft-cu12==11.3.0.4 \\\n    --hash=sha256:6048ebddfb90d09d2707efb1fd78d4e3a77cb3ae4dc60e19aab6be0ece2ae464 \\\n    --hash=sha256:768160ac89f6f7b459bee747e8d175dbf53619cfe74b2a5636264163138013ca \\\n    --hash=sha256:8510990de9f96c803a051822618d42bf6cb8f069ff3f48d93a8486efdacb48fb\n    # via jax-cuda12-plugin\nnvidia-cusolver-cu12==11.7.1.2 \\\n    --hash=sha256:0ce237ef60acde1efc457335a2ddadfd7610b892d94efee7b776c64bb1cac9e0 \\\n    --hash=sha256:6813f9d8073f555444a8705f3ab0296d3e1cb37a16d694c5fc8b862a0d8706d7 \\\n    --hash=sha256:6cf28f17f64107a0c4d7802be5ff5537b2130bfc112f25d5a30df227058ca0e6\n    # via jax-cuda12-plugin\nnvidia-cusparse-cu12==12.5.4.2 \\\n    --hash=sha256:23749a6571191a215cb74d1cdbff4a86e7b19f1200c071b3fcf844a5bea23a2f \\\n    --hash=sha256:4acb8c08855a26d737398cba8fb6f8f5045d93f82612b4cfd84645a2332ccf20 \\\n    --hash=sha256:7aa32fa5470cf754f72d1116c7cbc300b4e638d3ae5304cfa4a638a5b87161b1\n    # via\n    #   jax-cuda12-plugin\n    #   nvidia-cusolver-cu12\nnvidia-nccl-cu12==2.23.4 \\\n    --hash=sha256:aa946c8327e22ced28e7cef508a334673abc42064ec85f02d005ba1785ea4cec \\\n    --hash=sha256:b097258d9aab2fa9f686e33c6fe40ae57b27df60cedbd15d139701bb5509e0c1\n    # via jax-cuda12-plugin\nnvidia-nvjitlink-cu12==12.6.77 \\\n    --hash=sha256:3bf10d85bb1801e9c894c6e197e44dd137d2a0a9e43f8450e9ad13f2df0dd52d \\\n    --hash=sha256:410718cd44962bed862a31dd0318620f6f9a8b28a6291967bcfcb446a6516771 \\\n    --hash=sha256:9ae346d16203ae4ea513be416495167a0101d33d2d14935aa9c1829a3fb45142\n    # via\n    #   jax-cuda12-plugin\n    #   nvidia-cufft-cu12\n    #   nvidia-cusolver-cu12\n    #   nvidia-cusparse-cu12\nopt-einsum==3.4.0 \\\n    --hash=sha256:69bb92469f86a1565195ece4ac0323943e83477171b91d24c35afe028a90d7cd \\\n    --hash=sha256:96ca72f1b886d148241348783498194c577fa30a8faac108586b14f1ba4473ac\n    # via jax\npillow==11.0.0 \\\n    --hash=sha256:00177a63030d612148e659b55ba99527803288cea7c75fb05766ab7981a8c1b7 \\\n    --hash=sha256:006bcdd307cc47ba43e924099a038cbf9591062e6c50e570819743f5607404f5 \\\n    --hash=sha256:084a07ef0821cfe4858fe86652fffac8e187b6ae677e9906e192aafcc1b69903 \\\n    --hash=sha256:0ae08bd8ffc41aebf578c2af2f9d8749d91f448b3bfd41d7d9ff573d74f2a6b2 \\\n    --hash=sha256:0e038b0745997c7dcaae350d35859c9715c71e92ffb7e0f4a8e8a16732150f38 \\\n    --hash=sha256:1187739620f2b365de756ce086fdb3604573337cc28a0d3ac4a01ab6b2d2a6d2 \\\n    --hash=sha256:16095692a253047fe3ec028e951fa4221a1f3ed3d80c397e83541a3037ff67c9 \\\n    --hash=sha256:1a61b54f87ab5786b8479f81c4b11f4d61702830354520837f8cc791ebba0f5f \\\n    --hash=sha256:1c1d72714f429a521d8d2d018badc42414c3077eb187a59579f28e4270b4b0fc \\\n    --hash=sha256:1e2688958a840c822279fda0086fec1fdab2f95bf2b717b66871c4ad9859d7e8 \\\n    --hash=sha256:20ec184af98a121fb2da42642dea8a29ec80fc3efbaefb86d8fdd2606619045d \\\n    --hash=sha256:21a0d3b115009ebb8ac3d2ebec5c2982cc693da935f4ab7bb5c8ebe2f47d36f2 \\\n    --hash=sha256:224aaa38177597bb179f3ec87eeefcce8e4f85e608025e9cfac60de237ba6316 \\\n    --hash=sha256:2679d2258b7f1192b378e2893a8a0a0ca472234d4c2c0e6bdd3380e8dfa21b6a \\\n    --hash=sha256:27a7860107500d813fcd203b4ea19b04babe79448268403172782754870dac25 \\\n    --hash=sha256:290f2cc809f9da7d6d622550bbf4c1e57518212da51b6a30fe8e0a270a5b78bd \\\n    --hash=sha256:2e46773dc9f35a1dd28bd6981332fd7f27bec001a918a72a79b4133cf5291dba \\\n    --hash=sha256:3107c66e43bda25359d5ef446f59c497de2b5ed4c7fdba0894f8d6cf3822dafc \\\n    --hash=sha256:375b8dd15a1f5d2feafff536d47e22f69625c1aa92f12b339ec0b2ca40263273 \\\n    --hash=sha256:45c566eb10b8967d71bf1ab8e4a525e5a93519e29ea071459ce517f6b903d7fa \\\n    --hash=sha256:499c3a1b0d6fc8213519e193796eb1a86a1be4b1877d678b30f83fd979811d1a \\\n    --hash=sha256:4ad70c4214f67d7466bea6a08061eba35c01b1b89eaa098040a35272a8efb22b \\\n    --hash=sha256:4b60c9520f7207aaf2e1d94de026682fc227806c6e1f55bba7606d1c94dd623a \\\n    --hash=sha256:5178952973e588b3f1360868847334e9e3bf49d19e169bbbdfaf8398002419ae \\\n    --hash=sha256:52a2d8323a465f84faaba5236567d212c3668f2ab53e1c74c15583cf507a0291 \\\n    --hash=sha256:598b4e238f13276e0008299bd2482003f48158e2b11826862b1eb2ad7c768b97 \\\n    --hash=sha256:5bd2d3bdb846d757055910f0a59792d33b555800813c3b39ada1829c372ccb06 \\\n    --hash=sha256:5c39ed17edea3bc69c743a8dd3e9853b7509625c2462532e62baa0732163a904 \\\n    --hash=sha256:5d203af30149ae339ad1b4f710d9844ed8796e97fda23ffbc4cc472968a47d0b \\\n    --hash=sha256:5ddbfd761ee00c12ee1be86c9c0683ecf5bb14c9772ddbd782085779a63dd55b \\\n    --hash=sha256:607bbe123c74e272e381a8d1957083a9463401f7bd01287f50521ecb05a313f8 \\\n    --hash=sha256:61b887f9ddba63ddf62fd02a3ba7add935d053b6dd7d58998c630e6dbade8527 \\\n    --hash=sha256:6619654954dc4936fcff82db8eb6401d3159ec6be81e33c6000dfd76ae189947 \\\n    --hash=sha256:674629ff60030d144b7bca2b8330225a9b11c482ed408813924619c6f302fdbb \\\n    --hash=sha256:6ec0d5af64f2e3d64a165f490d96368bb5dea8b8f9ad04487f9ab60dc4bb6003 \\\n    --hash=sha256:6f4dba50cfa56f910241eb7f883c20f1e7b1d8f7d91c750cd0b318bad443f4d5 \\\n    --hash=sha256:70fbbdacd1d271b77b7721fe3cdd2d537bbbd75d29e6300c672ec6bb38d9672f \\\n    --hash=sha256:72bacbaf24ac003fea9bff9837d1eedb6088758d41e100c1552930151f677739 \\\n    --hash=sha256:7326a1787e3c7b0429659e0a944725e1b03eeaa10edd945a86dead1913383944 \\\n    --hash=sha256:73853108f56df97baf2bb8b522f3578221e56f646ba345a372c78326710d3830 \\\n    --hash=sha256:73e3a0200cdda995c7e43dd47436c1548f87a30bb27fb871f352a22ab8dcf45f \\\n    --hash=sha256:75acbbeb05b86bc53cbe7b7e6fe00fbcf82ad7c684b3ad82e3d711da9ba287d3 \\\n    --hash=sha256:8069c5179902dcdce0be9bfc8235347fdbac249d23bd90514b7a47a72d9fecf4 \\\n    --hash=sha256:846e193e103b41e984ac921b335df59195356ce3f71dcfd155aa79c603873b84 \\\n    --hash=sha256:8594f42df584e5b4bb9281799698403f7af489fba84c34d53d1c4bfb71b7c4e7 \\\n    --hash=sha256:86510e3f5eca0ab87429dd77fafc04693195eec7fd6a137c389c3eeb4cfb77c6 \\\n    --hash=sha256:8853a3bf12afddfdf15f57c4b02d7ded92c7a75a5d7331d19f4f9572a89c17e6 \\\n    --hash=sha256:88a58d8ac0cc0e7f3a014509f0455248a76629ca9b604eca7dc5927cc593c5e9 \\\n    --hash=sha256:8ba470552b48e5835f1d23ecb936bb7f71d206f9dfeee64245f30c3270b994de \\\n    --hash=sha256:8c676b587da5673d3c75bd67dd2a8cdfeb282ca38a30f37950511766b26858c4 \\\n    --hash=sha256:8ec4a89295cd6cd4d1058a5e6aec6bf51e0eaaf9714774e1bfac7cfc9051db47 \\\n    --hash=sha256:94f3e1780abb45062287b4614a5bc0874519c86a777d4a7ad34978e86428b8dd \\\n    --hash=sha256:9a0f748eaa434a41fccf8e1ee7a3eed68af1b690e75328fd7a60af123c193b50 \\\n    --hash=sha256:a5629742881bcbc1f42e840af185fd4d83a5edeb96475a575f4da50d6ede337c \\\n    --hash=sha256:a65149d8ada1055029fcb665452b2814fe7d7082fcb0c5bed6db851cb69b2086 \\\n    --hash=sha256:b3c5ac4bed7519088103d9450a1107f76308ecf91d6dabc8a33a2fcfb18d0fba \\\n    --hash=sha256:b4fd7bd29610a83a8c9b564d457cf5bd92b4e11e79a4ee4716a63c959699b306 \\\n    --hash=sha256:bcd1fb5bb7b07f64c15618c89efcc2cfa3e95f0e3bcdbaf4642509de1942a699 \\\n    --hash=sha256:c12b5ae868897c7338519c03049a806af85b9b8c237b7d675b8c5e089e4a618e \\\n    --hash=sha256:c26845094b1af3c91852745ae78e3ea47abf3dbcd1cf962f16b9a5fbe3ee8488 \\\n    --hash=sha256:c6a660307ca9d4867caa8d9ca2c2658ab685de83792d1876274991adec7b93fa \\\n    --hash=sha256:c809a70e43c7977c4a42aefd62f0131823ebf7dd73556fa5d5950f5b354087e2 \\\n    --hash=sha256:c8b2351c85d855293a299038e1f89db92a2f35e8d2f783489c6f0b2b5f3fe8a3 \\\n    --hash=sha256:cb929ca942d0ec4fac404cbf520ee6cac37bf35be479b970c4ffadf2b6a1cad9 \\\n    --hash=sha256:d2c0a187a92a1cb5ef2c8ed5412dd8d4334272617f532d4ad4de31e0495bd923 \\\n    --hash=sha256:d69bfd8ec3219ae71bcde1f942b728903cad25fafe3100ba2258b973bd2bc1b2 \\\n    --hash=sha256:daffdf51ee5db69a82dd127eabecce20729e21f7a3680cf7cbb23f0829189790 \\\n    --hash=sha256:e58876c91f97b0952eb766123bfef372792ab3f4e3e1f1a2267834c2ab131734 \\\n    --hash=sha256:eda2616eb2313cbb3eebbe51f19362eb434b18e3bb599466a1ffa76a033fb916 \\\n    --hash=sha256:ee217c198f2e41f184f3869f3e485557296d505b5195c513b2bfe0062dc537f1 \\\n    --hash=sha256:f02541ef64077f22bf4924f225c0fd1248c168f86e4b7abdedd87d6ebaceab0f \\\n    --hash=sha256:f1b82c27e89fffc6da125d5eb0ca6e68017faf5efc078128cfaa42cf5cb38798 \\\n    --hash=sha256:fba162b8872d30fea8c52b258a542c5dfd7b235fb5cb352240c8d63b414013eb \\\n    --hash=sha256:fbbcb7b57dc9c794843e3d1258c0fbf0f48656d46ffe9e09b63bbd6e8cd5d0a2 \\\n    --hash=sha256:fcb4621042ac4b7865c179bb972ed0da0218a076dc1820ffc48b1d74c1e37fe9\n    # via rdkit\nrdkit==2024.3.5 \\\n    --hash=sha256:01fd323f5902a720925293c0ce08a33e630422374cf263d04ef173c106c63c36 \\\n    --hash=sha256:04079aef5f91965bd2a48bf432b32c36ea1bf088e26efb2c9a43b625b6a75d15 \\\n    --hash=sha256:1cb7cdb29956649d4c875790b94142868c08c0735dee4d90b2d70dfd378e9d2e \\\n    --hash=sha256:292141f0ba2359be07d8566d9a39ce697c1d6e7eb406031a2bf0387026503a47 \\\n    --hash=sha256:2affa1b4cf601d27b157bbc44255c640baac9bc04cfdf5fa88f43c34c3f360d5 \\\n    --hash=sha256:316bb5273bff5be76d4e5b0def998455e9b1a20898df44548b0e299f90786cb2 \\\n    --hash=sha256:455d510beff8806e62e48b977d7acbfbc351474fa132124738a07223440c1b9a \\\n    --hash=sha256:53638d0d94f7c511273ff5765abc6a1fe60fe6c8633db13cad03bc527550a7a9 \\\n    --hash=sha256:6af38c62d4af9d669f8996551d3ae809de9ab245570b861be3f7a2b1a536f79f \\\n    --hash=sha256:73fa2fe3a9a2334edf8448a5a3093a6f949ee715de77d3baa685751e2cf9317b \\\n    --hash=sha256:7c91c5ccbf8d51cd3dd894bf770ca99da5fe37714f6e2a66016e8af4f57d2b56 \\\n    --hash=sha256:7d5576bad6672959d0c1939e8d7e2fcd8656f8daf9788ce58e5c313db719b5ec \\\n    --hash=sha256:89f7a72466ffbd45320d845ee1bcde1bddb1a322352836835d26ebb712228a41 \\\n    --hash=sha256:8d4ebafb7e845bdc55eb6e2e188123ec84fb2bf724d3a7eb2da9bcfade7acc65 \\\n    --hash=sha256:90376467f4988ee44f3f47d1e558ffc27646254a99fe65d19a7d9a123e832ef2 \\\n    --hash=sha256:913494a03fcf6121c103e5db43fa33bca0fcc65ebd5a6c46661baa6851f79d91 \\\n    --hash=sha256:98dac94a5e414ed1880b215eacec63e5fd77b0ea351e0a18fc5229acb8e886f5 \\\n    --hash=sha256:a51cc403792ba37d1ee8ad84ad829177a4453547a4e085e1115ae2b237084ddb \\\n    --hash=sha256:a98099cef42c1eb52512b343beb68a8b7cc4da79924a67181f58692a6376d91b \\\n    --hash=sha256:c971eba2a67f8ae301b9b8c66b3431cd62472f648cdec9694e5413d8ebc59720 \\\n    --hash=sha256:cf2747e7c82d6c90a8a631fe063d24d77b31f535e0f8a17ac9dbfbe4ab456886 \\\n    --hash=sha256:d8714c03558086d022649617197c0c45c75c301f6a9fb67205695493a7e5b826 \\\n    --hash=sha256:e5b0dfb28aa0949152ff816fba0a2f6267154f5c25159a9ec84c27cf18f72322 \\\n    --hash=sha256:e69cec14cbb42c5ca912346b594d3f6a7aac572463949c55c7749da257e68123 \\\n    --hash=sha256:f662ed10e14c7874d0e011c1f8260a6cf4a5547100806f9f4540f8550a3f1d36\n    # via alphafold3 (pyproject.toml)\nscipy==1.14.1 \\\n    --hash=sha256:0c2f95de3b04e26f5f3ad5bb05e74ba7f68b837133a4492414b3afd79dfe540e \\\n    --hash=sha256:1729560c906963fc8389f6aac023739ff3983e727b1a4d87696b7bf108316a79 \\\n    --hash=sha256:278266012eb69f4a720827bdd2dc54b2271c97d84255b2faaa8f161a158c3b37 \\\n    --hash=sha256:2843f2d527d9eebec9a43e6b406fb7266f3af25a751aa91d62ff416f54170bc5 \\\n    --hash=sha256:2da0469a4ef0ecd3693761acbdc20f2fdeafb69e6819cc081308cc978153c675 \\\n    --hash=sha256:2ff0a7e01e422c15739ecd64432743cf7aae2b03f3084288f399affcefe5222d \\\n    --hash=sha256:2ff38e22128e6c03ff73b6bb0f85f897d2362f8c052e3b8ad00532198fbdae3f \\\n    --hash=sha256:30ac8812c1d2aab7131a79ba62933a2a76f582d5dbbc695192453dae67ad6310 \\\n    --hash=sha256:3a1b111fac6baec1c1d92f27e76511c9e7218f1695d61b59e05e0fe04dc59617 \\\n    --hash=sha256:4079b90df244709e675cdc8b93bfd8a395d59af40b72e339c2287c91860deb8e \\\n    --hash=sha256:5149e3fd2d686e42144a093b206aef01932a0059c2a33ddfa67f5f035bdfe13e \\\n    --hash=sha256:5a275584e726026a5699459aa72f828a610821006228e841b94275c4a7c08417 \\\n    --hash=sha256:631f07b3734d34aced009aaf6fedfd0eb3498a97e581c3b1e5f14a04164a456d \\\n    --hash=sha256:716e389b694c4bb564b4fc0c51bc84d381735e0d39d3f26ec1af2556ec6aad94 \\\n    --hash=sha256:8426251ad1e4ad903a4514712d2fa8fdd5382c978010d1c6f5f37ef286a713ad \\\n    --hash=sha256:8475230e55549ab3f207bff11ebfc91c805dc3463ef62eda3ccf593254524ce8 \\\n    --hash=sha256:8bddf15838ba768bb5f5083c1ea012d64c9a444e16192762bd858f1e126196d0 \\\n    --hash=sha256:8e32dced201274bf96899e6491d9ba3e9a5f6b336708656466ad0522d8528f69 \\\n    --hash=sha256:8f9ea80f2e65bdaa0b7627fb00cbeb2daf163caa015e59b7516395fe3bd1e066 \\\n    --hash=sha256:97c5dddd5932bd2a1a31c927ba5e1463a53b87ca96b5c9bdf5dfd6096e27efc3 \\\n    --hash=sha256:a49f6ed96f83966f576b33a44257d869756df6cf1ef4934f59dd58b25e0327e5 \\\n    --hash=sha256:af29a935803cc707ab2ed7791c44288a682f9c8107bc00f0eccc4f92c08d6e07 \\\n    --hash=sha256:b05d43735bb2f07d689f56f7b474788a13ed8adc484a85aa65c0fd931cf9ccd2 \\\n    --hash=sha256:b28d2ca4add7ac16ae8bb6632a3c86e4b9e4d52d3e34267f6e1b0c1f8d87e389 \\\n    --hash=sha256:b99722ea48b7ea25e8e015e8341ae74624f72e5f21fc2abd45f3a93266de4c5d \\\n    --hash=sha256:baff393942b550823bfce952bb62270ee17504d02a1801d7fd0719534dfb9c84 \\\n    --hash=sha256:c0ee987efa6737242745f347835da2cc5bb9f1b42996a4d97d5c7ff7928cb6f2 \\\n    --hash=sha256:d0d2821003174de06b69e58cef2316a6622b60ee613121199cb2852a873f8cf3 \\\n    --hash=sha256:e0cf28db0f24a38b2a0ca33a85a54852586e43cf6fd876365c86e0657cfe7d73 \\\n    --hash=sha256:e4f5a7c49323533f9103d4dacf4e4f07078f360743dec7f7596949149efeec06 \\\n    --hash=sha256:eb58ca0abd96911932f688528977858681a59d61a7ce908ffd355957f7025cfc \\\n    --hash=sha256:edaf02b82cd7639db00dbff629995ef185c8df4c3ffa71a5562a595765a06ce1 \\\n    --hash=sha256:fef8c87f8abfb884dac04e97824b61299880c43f4ce675dd2cbeadd3c9b466d2\n    # via\n    #   jax\n    #   jaxlib\ntabulate==0.9.0 \\\n    --hash=sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c \\\n    --hash=sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\n    # via dm-haiku\ntoolz==1.0.0 \\\n    --hash=sha256:292c8f1c4e7516bf9086f8850935c799a874039c8bcf959d47b600e4c44a6236 \\\n    --hash=sha256:2c86e3d9a04798ac556793bced838816296a2f085017664e4995cb40a1047a02\n    # via chex\ntqdm==4.67.0 \\\n    --hash=sha256:0cd8af9d56911acab92182e88d763100d4788bdf421d251616040cc4d44863be \\\n    --hash=sha256:fe5a6f95e6fe0b9755e9469b77b9c3cf850048224ecaa8293d7d2d31f97d869a\n    # via alphafold3 (pyproject.toml)\ntriton==3.1.0 \\\n    --hash=sha256:0f34f6e7885d1bf0eaaf7ba875a5f0ce6f3c13ba98f9503651c1e6dc6757ed5c \\\n    --hash=sha256:6b0dd10a925263abbe9fa37dcde67a5e9b2383fc269fdf59f5657cac38c5d1d8 \\\n    --hash=sha256:6dadaca7fc24de34e180271b5cf864c16755702e9f63a16f62df714a8099126a \\\n    --hash=sha256:aafa9a20cd0d9fee523cd4504aa7131807a864cd77dcf6efe7e981f18b8c6c11 \\\n    --hash=sha256:c8182f42fd8080a7d39d666814fa36c5e30cc00ea7eeeb1a2983dbb4c99a0fdc\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   jax-triton\ntypeguard==2.13.3 \\\n    --hash=sha256:00edaa8da3a133674796cf5ea87d9f4b4c367d77476e185e80251cc13dfbb8c4 \\\n    --hash=sha256:5e3e3be01e887e7eafae5af63d1f36c849aaa94e3a0112097312aabfa16284f1\n    # via jaxtyping\ntyping-extensions==4.12.2 \\\n    --hash=sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d \\\n    --hash=sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\n    # via chex\nzstandard==0.23.0 \\\n    --hash=sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473 \\\n    --hash=sha256:0a7f0804bb3799414af278e9ad51be25edf67f78f916e08afdb983e74161b916 \\\n    --hash=sha256:11e3bf3c924853a2d5835b24f03eeba7fc9b07d8ca499e247e06ff5676461a15 \\\n    --hash=sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072 \\\n    --hash=sha256:1516c8c37d3a053b01c1c15b182f3b5f5eef19ced9b930b684a73bad121addf4 \\\n    --hash=sha256:157e89ceb4054029a289fb504c98c6a9fe8010f1680de0201b3eb5dc20aa6d9e \\\n    --hash=sha256:1bfe8de1da6d104f15a60d4a8a768288f66aa953bbe00d027398b93fb9680b26 \\\n    --hash=sha256:1e172f57cd78c20f13a3415cc8dfe24bf388614324d25539146594c16d78fcc8 \\\n    --hash=sha256:1fd7e0f1cfb70eb2f95a19b472ee7ad6d9a0a992ec0ae53286870c104ca939e5 \\\n    --hash=sha256:203d236f4c94cd8379d1ea61db2fce20730b4c38d7f1c34506a31b34edc87bdd \\\n    --hash=sha256:27d3ef2252d2e62476389ca8f9b0cf2bbafb082a3b6bfe9d90cbcbb5529ecf7c \\\n    --hash=sha256:29a2bc7c1b09b0af938b7a8343174b987ae021705acabcbae560166567f5a8db \\\n    --hash=sha256:2ef230a8fd217a2015bc91b74f6b3b7d6522ba48be29ad4ea0ca3a3775bf7dd5 \\\n    --hash=sha256:2ef3775758346d9ac6214123887d25c7061c92afe1f2b354f9388e9e4d48acfc \\\n    --hash=sha256:2f146f50723defec2975fb7e388ae3a024eb7151542d1599527ec2aa9cacb152 \\\n    --hash=sha256:2fb4535137de7e244c230e24f9d1ec194f61721c86ebea04e1581d9d06ea1269 \\\n    --hash=sha256:32ba3b5ccde2d581b1e6aa952c836a6291e8435d788f656fe5976445865ae045 \\\n    --hash=sha256:34895a41273ad33347b2fc70e1bff4240556de3c46c6ea430a7ed91f9042aa4e \\\n    --hash=sha256:379b378ae694ba78cef921581ebd420c938936a153ded602c4fea612b7eaa90d \\\n    --hash=sha256:38302b78a850ff82656beaddeb0bb989a0322a8bbb1bf1ab10c17506681d772a \\\n    --hash=sha256:3aa014d55c3af933c1315eb4bb06dd0459661cc0b15cd61077afa6489bec63bb \\\n    --hash=sha256:4051e406288b8cdbb993798b9a45c59a4896b6ecee2f875424ec10276a895740 \\\n    --hash=sha256:40b33d93c6eddf02d2c19f5773196068d875c41ca25730e8288e9b672897c105 \\\n    --hash=sha256:43da0f0092281bf501f9c5f6f3b4c975a8a0ea82de49ba3f7100e64d422a1274 \\\n    --hash=sha256:445e4cb5048b04e90ce96a79b4b63140e3f4ab5f662321975679b5f6360b90e2 \\\n    --hash=sha256:48ef6a43b1846f6025dde6ed9fee0c24e1149c1c25f7fb0a0585572b2f3adc58 \\\n    --hash=sha256:50a80baba0285386f97ea36239855f6020ce452456605f262b2d33ac35c7770b \\\n    --hash=sha256:519fbf169dfac1222a76ba8861ef4ac7f0530c35dd79ba5727014613f91613d4 \\\n    --hash=sha256:53dd9d5e3d29f95acd5de6802e909ada8d8d8cfa37a3ac64836f3bc4bc5512db \\\n    --hash=sha256:53ea7cdc96c6eb56e76bb06894bcfb5dfa93b7adcf59d61c6b92674e24e2dd5e \\\n    --hash=sha256:576856e8594e6649aee06ddbfc738fec6a834f7c85bf7cadd1c53d4a58186ef9 \\\n    --hash=sha256:59556bf80a7094d0cfb9f5e50bb2db27fefb75d5138bb16fb052b61b0e0eeeb0 \\\n    --hash=sha256:5d41d5e025f1e0bccae4928981e71b2334c60f580bdc8345f824e7c0a4c2a813 \\\n    --hash=sha256:61062387ad820c654b6a6b5f0b94484fa19515e0c5116faf29f41a6bc91ded6e \\\n    --hash=sha256:61f89436cbfede4bc4e91b4397eaa3e2108ebe96d05e93d6ccc95ab5714be512 \\\n    --hash=sha256:62136da96a973bd2557f06ddd4e8e807f9e13cbb0bfb9cc06cfe6d98ea90dfe0 \\\n    --hash=sha256:64585e1dba664dc67c7cdabd56c1e5685233fbb1fc1966cfba2a340ec0dfff7b \\\n    --hash=sha256:65308f4b4890aa12d9b6ad9f2844b7ee42c7f7a4fd3390425b242ffc57498f48 \\\n    --hash=sha256:66b689c107857eceabf2cf3d3fc699c3c0fe8ccd18df2219d978c0283e4c508a \\\n    --hash=sha256:6a41c120c3dbc0d81a8e8adc73312d668cd34acd7725f036992b1b72d22c1772 \\\n    --hash=sha256:6f77fa49079891a4aab203d0b1744acc85577ed16d767b52fc089d83faf8d8ed \\\n    --hash=sha256:72c68dda124a1a138340fb62fa21b9bf4848437d9ca60bd35db36f2d3345f373 \\\n    --hash=sha256:752bf8a74412b9892f4e5b58f2f890a039f57037f52c89a740757ebd807f33ea \\\n    --hash=sha256:76e79bc28a65f467e0409098fa2c4376931fd3207fbeb6b956c7c476d53746dd \\\n    --hash=sha256:774d45b1fac1461f48698a9d4b5fa19a69d47ece02fa469825b442263f04021f \\\n    --hash=sha256:77da4c6bfa20dd5ea25cbf12c76f181a8e8cd7ea231c673828d0386b1740b8dc \\\n    --hash=sha256:77ea385f7dd5b5676d7fd943292ffa18fbf5c72ba98f7d09fc1fb9e819b34c23 \\\n    --hash=sha256:80080816b4f52a9d886e67f1f96912891074903238fe54f2de8b786f86baded2 \\\n    --hash=sha256:80a539906390591dd39ebb8d773771dc4db82ace6372c4d41e2d293f8e32b8db \\\n    --hash=sha256:82d17e94d735c99621bf8ebf9995f870a6b3e6d14543b99e201ae046dfe7de70 \\\n    --hash=sha256:837bb6764be6919963ef41235fd56a6486b132ea64afe5fafb4cb279ac44f259 \\\n    --hash=sha256:84433dddea68571a6d6bd4fbf8ff398236031149116a7fff6f777ff95cad3df9 \\\n    --hash=sha256:8c24f21fa2af4bb9f2c492a86fe0c34e6d2c63812a839590edaf177b7398f700 \\\n    --hash=sha256:8ed7d27cb56b3e058d3cf684d7200703bcae623e1dcc06ed1e18ecda39fee003 \\\n    --hash=sha256:9206649ec587e6b02bd124fb7799b86cddec350f6f6c14bc82a2b70183e708ba \\\n    --hash=sha256:983b6efd649723474f29ed42e1467f90a35a74793437d0bc64a5bf482bedfa0a \\\n    --hash=sha256:98da17ce9cbf3bfe4617e836d561e433f871129e3a7ac16d6ef4c680f13a839c \\\n    --hash=sha256:9c236e635582742fee16603042553d276cca506e824fa2e6489db04039521e90 \\\n    --hash=sha256:9da6bc32faac9a293ddfdcb9108d4b20416219461e4ec64dfea8383cac186690 \\\n    --hash=sha256:a05e6d6218461eb1b4771d973728f0133b2a4613a6779995df557f70794fd60f \\\n    --hash=sha256:a0817825b900fcd43ac5d05b8b3079937073d2b1ff9cf89427590718b70dd840 \\\n    --hash=sha256:a4ae99c57668ca1e78597d8b06d5af837f377f340f4cce993b551b2d7731778d \\\n    --hash=sha256:a8c86881813a78a6f4508ef9daf9d4995b8ac2d147dcb1a450448941398091c9 \\\n    --hash=sha256:a8fffdbd9d1408006baaf02f1068d7dd1f016c6bcb7538682622c556e7b68e35 \\\n    --hash=sha256:a9b07268d0c3ca5c170a385a0ab9fb7fdd9f5fd866be004c4ea39e44edce47dd \\\n    --hash=sha256:ab19a2d91963ed9e42b4e8d77cd847ae8381576585bad79dbd0a8837a9f6620a \\\n    --hash=sha256:ac184f87ff521f4840e6ea0b10c0ec90c6b1dcd0bad2f1e4a9a1b4fa177982ea \\\n    --hash=sha256:b0e166f698c5a3e914947388c162be2583e0c638a4703fc6a543e23a88dea3c1 \\\n    --hash=sha256:b2170c7e0367dde86a2647ed5b6f57394ea7f53545746104c6b09fc1f4223573 \\\n    --hash=sha256:b2d8c62d08e7255f68f7a740bae85b3c9b8e5466baa9cbf7f57f1cde0ac6bc09 \\\n    --hash=sha256:b4567955a6bc1b20e9c31612e615af6b53733491aeaa19a6b3b37f3b65477094 \\\n    --hash=sha256:b69bb4f51daf461b15e7b3db033160937d3ff88303a7bc808c67bbc1eaf98c78 \\\n    --hash=sha256:b8c0bd73aeac689beacd4e7667d48c299f61b959475cdbb91e7d3d88d27c56b9 \\\n    --hash=sha256:be9b5b8659dff1f913039c2feee1aca499cfbc19e98fa12bc85e037c17ec6ca5 \\\n    --hash=sha256:bf0a05b6059c0528477fba9054d09179beb63744355cab9f38059548fedd46a9 \\\n    --hash=sha256:c16842b846a8d2a145223f520b7e18b57c8f476924bda92aeee3a88d11cfc391 \\\n    --hash=sha256:c363b53e257246a954ebc7c488304b5592b9c53fbe74d03bc1c64dda153fb847 \\\n    --hash=sha256:c7c517d74bea1a6afd39aa612fa025e6b8011982a0897768a2f7c8ab4ebb78a2 \\\n    --hash=sha256:d20fd853fbb5807c8e84c136c278827b6167ded66c72ec6f9a14b863d809211c \\\n    --hash=sha256:d2240ddc86b74966c34554c49d00eaafa8200a18d3a5b6ffbf7da63b11d74ee2 \\\n    --hash=sha256:d477ed829077cd945b01fc3115edd132c47e6540ddcd96ca169facff28173057 \\\n    --hash=sha256:d50d31bfedd53a928fed6707b15a8dbeef011bb6366297cc435accc888b27c20 \\\n    --hash=sha256:dc1d33abb8a0d754ea4763bad944fd965d3d95b5baef6b121c0c9013eaf1907d \\\n    --hash=sha256:dc5d1a49d3f8262be192589a4b72f0d03b72dcf46c51ad5852a4fdc67be7b9e4 \\\n    --hash=sha256:e2d1a054f8f0a191004675755448d12be47fa9bebbcffa3cdf01db19f2d30a54 \\\n    --hash=sha256:e7792606d606c8df5277c32ccb58f29b9b8603bf83b48639b7aedf6df4fe8171 \\\n    --hash=sha256:ed1708dbf4d2e3a1c5c69110ba2b4eb6678262028afd6c6fbcc5a8dac9cda68e \\\n    --hash=sha256:f2d4380bf5f62daabd7b751ea2339c1a21d1c9463f1feb7fc2bdcea2c29c3160 \\\n    --hash=sha256:f3513916e8c645d0610815c257cbfd3242adfd5c4cfa78be514e5a3ebb42a41b \\\n    --hash=sha256:f8346bfa098532bc1fb6c7ef06783e969d87a99dd1d2a5a18a892c1d7a643c58 \\\n    --hash=sha256:f83fa6cae3fff8e98691248c9320356971b59678a17f20656a9e59cd32cee6d8 \\\n    --hash=sha256:fa6ce8b52c5987b3e34d5674b0ab529a4602b632ebab0a93b07bfb4dfc8f8a33 \\\n    --hash=sha256:fb2b1ecfef1e67897d336de3a0e3f52478182d6a47eda86cbd42504c5cbd009a \\\n    --hash=sha256:fc9ca1c9718cb3b06634c7c8dec57d24e9438b2aa9a0f02b8bb36bf478538880 \\\n    --hash=sha256:fd30d9c67d13d891f2360b2a120186729c111238ac63b43dbd37a5a40670b8ca \\\n    --hash=sha256:fd7699e8fd9969f455ef2926221e0233f81a2542921471382e77a9e2f2b57f4b \\\n    --hash=sha256:fe3b385d996ee0822fd46528d9f0443b880d4d05528fd26a9119a54ec3f91c69\n    # via alphafold3 (pyproject.toml)\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fetch_databases.sh",
          "type": "blob",
          "size": 1.673828125,
          "content": "#!/bin/bash\n# Copyright 2024 DeepMind Technologies Limited\n#\n# AlphaFold 3 source code is licensed under CC BY-NC-SA 4.0. To view a copy of\n# this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n#\n# To request access to the AlphaFold 3 model parameters, follow the process set\n# out at https://github.com/google-deepmind/alphafold3. You may only use these\n# if received directly from Google. Use is subject to terms of use available at\n# https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md\n\nset -euo pipefail\n\nreadonly db_dir=${1:-$HOME/public_databases}\n\nfor cmd in wget tar zstd ; do\n  if ! command -v \"${cmd}\" > /dev/null 2>&1; then\n    echo \"${cmd} is not installed. Please install it.\"\n  fi\ndone\n\necho \"Fetching databases to ${db_dir}\"\nmkdir -p \"${db_dir}\"\n\nreadonly SOURCE=https://storage.googleapis.com/alphafold-databases/v3.0\n\necho \"Start Fetching and Untarring 'pdb_2022_09_28_mmcif_files.tar'\"\nwget --quiet --output-document=- \\\n    \"${SOURCE}/pdb_2022_09_28_mmcif_files.tar.zst\" | \\\n    tar --no-same-owner --no-same-permissions \\\n    --use-compress-program=zstd -xf - --directory=\"${db_dir}\" &\n\nfor NAME in mgy_clusters_2022_05.fa \\\n            bfd-first_non_consensus_sequences.fasta \\\n            uniref90_2022_05.fa uniprot_all_2021_04.fa \\\n            pdb_seqres_2022_09_28.fasta \\\n            rnacentral_active_seq_id_90_cov_80_linclust.fasta \\\n            nt_rna_2023_02_23_clust_seq_id_90_cov_80_rep_seq.fasta \\\n            rfam_14_9_clust_seq_id_90_cov_80_rep_seq.fasta ; do\n  echo \"Start Fetching '${NAME}'\"\n  wget --quiet --output-document=- \"${SOURCE}/${NAME}.zst\" | \\\n      zstd --decompress > \"${db_dir}/${NAME}\" &\ndone\n\nwait\necho \"Complete\"\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.009765625,
          "content": "[build-system]\nrequires = [\n    \"scikit_build_core\",\n    \"pybind11\",\n    \"cmake>=3.28\",\n    \"ninja\",\n    \"numpy\",\n]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"alphafold3\"\nversion = \"3.0.0\"\nrequires-python = \">=3.11\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE\"}\ndependencies = [\n    \"absl-py\",\n    \"chex\",\n    \"dm-haiku==0.0.13\",\n    \"dm-tree\",\n    \"jax==0.4.34\",\n    \"jax[cuda12]==0.4.34\",\n    \"jax-triton==0.2.0\",\n    \"jaxtyping==0.2.34\",\n    \"numpy\",\n    \"rdkit==2024.3.5\",\n    \"triton==3.1.0\",\n    \"tqdm\",\n    \"typeguard==2.13.3\",\n    \"zstandard\",\n]\n\n[project.optional-dependencies]\ntest = [\"pytest>=6.0\"]\n\n[tool.scikit-build]\nwheel.exclude = [\n    \"**.pyx\",\n    \"**/CMakeLists.txt\",\n    \"**.cc\",\n    \"**.h\"\n]\nsdist.include = [\n    \"LICENSE\",\n    \"OUTPUT_TERMS_OF_USE.md\",\n    \"WEIGHTS_PROHIBITED_USE_POLICY.md\",\n    \"WEIGHTS_TERMS_OF_USE.md\",\n]\n\n[tool.cibuildwheel]\nbuild = \"cp3*-manylinux_x86_64\"\nmanylinux-x86_64-image = \"manylinux_2_28\"\n\n[project.scripts]\nbuild_data = \"alphafold3.build_data:build_data\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 39.123046875,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile --generate-hashes\n#\nabsl-py==2.1.0 \\\n    --hash=sha256:526a04eadab8b4ee719ce68f204172ead1027549089702d99b9059f129ff1308 \\\n    --hash=sha256:7820790efbb316739cde8b4e19357243fc3608a152024288513dd968d7d959ff\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   chex\n    #   dm-haiku\n    #   jax-triton\nchex==0.1.87 \\\n    --hash=sha256:0096d89cc8d898bb521ef4bfbf5c24549022b0e5b301f529ab57238896fe6c5d \\\n    --hash=sha256:ce536475661fd96d21be0c1728ecdbedd03f8ff950c662dfc338c92ea782cb16\n    # via alphafold3 (pyproject.toml)\ndm-haiku==0.0.13 \\\n    --hash=sha256:029bb91b5b1edb0d3fe23304d3bf12a545ea6e485041f7f5d8c8d85ebcf6e17d \\\n    --hash=sha256:ee9562c68a059f146ad07f555ca591cb8c11ef751afecc38353863562bd23f43\n    # via alphafold3 (pyproject.toml)\ndm-tree==0.1.8 \\\n    --hash=sha256:054b461f8176f4bce7a21f7b1870f873a1ced3bdbe1282c816c550bb43c71fa6 \\\n    --hash=sha256:09964470f76a5201aff2e8f9b26842976de7889300676f927930f6285e256760 \\\n    --hash=sha256:0d3172394079a86c3a759179c65f64c48d1a42b89495fcf38976d11cc3bb952c \\\n    --hash=sha256:0e9620ccf06393eb6b613b5e366469304622d4ea96ae6540b28a33840e6c89cf \\\n    --hash=sha256:0fcaabbb14e7980377439e7140bd05552739ca5e515ecb3119f234acee4b9430 \\\n    --hash=sha256:1607ce49aa42f010d1e5e616d92ce899d66835d4d8bea49679582435285515de \\\n    --hash=sha256:181c35521d480d0365f39300542cb6cd7fd2b77351bb43d7acfda15aef63b317 \\\n    --hash=sha256:1d7c26e431fc93cc7e0cba867eb000db6a05f6f2b25af11ac4e9dada88fc5bca \\\n    --hash=sha256:1fe962015b2fe1282892b28ebe962faed53c7f98d942da9a4625cbf27baef913 \\\n    --hash=sha256:250b692fb75f45f02e2f58fbef9ab338904ef334b90557565621fa251df267cf \\\n    --hash=sha256:2869228d9c619074de501a3c10dc7f07c75422f8fab36ecdcb859b6f1b1ec3ef \\\n    --hash=sha256:28c52cbf4f8b3dbd0beaedf44f69fa85eec5e9dede612e08035e06ada6ec9426 \\\n    --hash=sha256:2f7915660f59c09068e428613c480150180df1060561fd0d1470684ae7007bd1 \\\n    --hash=sha256:343a4a4ebaa127451ff971254a4be4084eb4bdc0b2513c32b46f6f728fd03f9e \\\n    --hash=sha256:35cc164a79336bfcfafb47e5f297898359123bbd3330c1967f0c4994f9cf9f60 \\\n    --hash=sha256:378cc8ad93c5fe3590f405a309980721f021c790ca1bdf9b15bb1d59daec57f5 \\\n    --hash=sha256:39070ba268c0491af9fe7a58644d99e8b4f2cde6e5884ba3380bddc84ed43d5f \\\n    --hash=sha256:435227cf3c5dc63f4de054cf3d00183790bd9ead4c3623138c74dde7f67f521b \\\n    --hash=sha256:5483dca4d7eb1a0d65fe86d3b6a53ae717face83c1f17e0887b1a4a64ae5c410 \\\n    --hash=sha256:694c3654cfd2a81552c08ec66bb5c4a3d48fa292b9a181880fb081c36c5b9134 \\\n    --hash=sha256:75c5d528bb992981c20793b6b453e91560784215dffb8a5440ba999753c14ceb \\\n    --hash=sha256:803bfc53b4659f447ac694dbd04235f94a73ef7c1fd1e0df7c84ac41e0bc963b \\\n    --hash=sha256:81fce77f22a302d7a5968aebdf4efafef4def7ce96528719a354e6990dcd49c7 \\\n    --hash=sha256:83b7764de0d855338abefc6e3ee9fe40d301668310aa3baea3f778ff051f4393 \\\n    --hash=sha256:8c60a7eadab64c2278861f56bca320b2720f163dca9d7558103c3b77f2416571 \\\n    --hash=sha256:8ed3564abed97c806db122c2d3e1a2b64c74a63debe9903aad795167cc301368 \\\n    --hash=sha256:94d3f0826311f45ee19b75f5b48c99466e4218a0489e81c0f0167bda50cacf22 \\\n    --hash=sha256:96a548a406a6fb15fe58f6a30a57ff2f2aafbf25f05afab00c8f5e5977b6c715 \\\n    --hash=sha256:a5d819c38c03f0bb5b3b3703c60e4b170355a0fc6b5819325bf3d4ceb3ae7e80 \\\n    --hash=sha256:ad16ceba90a56ec47cf45b21856d14962ac314787975ef786efb5e6e9ca75ec7 \\\n    --hash=sha256:af4b3d372f2477dcd89a6e717e4a575ca35ccc20cc4454a8a4b6f8838a00672d \\\n    --hash=sha256:b095ba4f8ca1ba19350fd53cf1f8f3eb0bd406aa28af64a6dfc86707b32a810a \\\n    --hash=sha256:b9bd9b9ccb59409d33d51d84b7668010c04c2af7d4a371632874c1ca356cff3d \\\n    --hash=sha256:b9f89a454e98806b44fe9d40ec9eee61f848388f7e79ac2371a55679bd5a3ac6 \\\n    --hash=sha256:bb2d109f42190225112da899b9f3d46d0d5f26aef501c61e43529fe9322530b5 \\\n    --hash=sha256:c0a94aba18a35457a1b5cd716fd7b46c5dafdc4cf7869b4bae665b91c4682a8e \\\n    --hash=sha256:c5c8c12e3fda754ef6af94161bacdaeda816d941995fac415d6855c6c386af68 \\\n    --hash=sha256:d1612fcaecd79023dbc6a6ae48d51a80beb5c385d6f3f6d71688e57bc8d07de8 \\\n    --hash=sha256:d16e1f2a073604cfcc09f7131ae8d534674f43c3aef4c25742eae295bc60d04f \\\n    --hash=sha256:d20f2faa3672b52e5013f4077117bfb99c4cfc0b445d3bde1584c34032b57436 \\\n    --hash=sha256:d40fa4106ca6edc66760246a08f500ec0c85ef55c762fb4a363f6ee739ba02ee \\\n    --hash=sha256:de287fabc464b8734be251e46e06aa9aa1001f34198da2b6ce07bd197172b9cb \\\n    --hash=sha256:e4d714371bb08839e4e5e29024fc95832d9affe129825ef38836b143028bd144 \\\n    --hash=sha256:ea9e59e0451e7d29aece402d9f908f2e2a80922bcde2ebfd5dcb07750fcbfee8 \\\n    --hash=sha256:f7ac31b9aecccb2c6e1ab29706f6ded3eba0c2c69c770322c9c685929c3d6afb \\\n    --hash=sha256:fa42a605d099ee7d41ba2b5fb75e21423951fd26e5d50583a00471238fb3021d\n    # via alphafold3 (pyproject.toml)\nfilelock==3.16.1 \\\n    --hash=sha256:2082e5703d51fbf98ea75855d9d5527e33d8ff23099bec374a134febee6946b0 \\\n    --hash=sha256:c249fbfcd5db47e5e2d6d62198e565475ee65e4831e2561c8e313fa7eb961435\n    # via triton\njax[cuda12]==0.4.34 \\\n    --hash=sha256:44196854f40c5f9cea3142824b9f1051f85afc3fcf7593ec5479fc8db01c58db \\\n    --hash=sha256:b957ca1fc91f7343f91a186af9f19c7f342c946f95a8c11c7f1e5cdfe2e58d9e\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   chex\n    #   jax-triton\njax-cuda12-pjrt==0.4.34 \\\n    --hash=sha256:0c7cc98f962cc7fc8e0a5ea6331b42a0cee516f202f1c3019f6aa5cd9530cca0 \\\n    --hash=sha256:6247459827550e7d11480f5707d7d2843cbf57bcda5d833565493456075cd143\n    # via jax-cuda12-plugin\njax-cuda12-plugin[with-cuda]==0.4.34 \\\n    --hash=sha256:15fa8ff678fad34df424e01f1a9151abc966700670d3b22f52b87a2740028602 \\\n    --hash=sha256:1b037a408b9d9de59367c9513a9445b705da526657a0c4d593e84234312261e7 \\\n    --hash=sha256:b2099a4407225122ff76f6dcdc8dbdae47e6f29343bdfd21460ad337dc34a209 \\\n    --hash=sha256:d035ea72bd9b8a65a6ea621bca1affdd33127fa3a52e7bded7692670d360adab \\\n    --hash=sha256:dadb507949b70ba148567219bf0e7752eb63baec551f7ec860f8fcbb4ee48c48 \\\n    --hash=sha256:db988b7ba5063483a936ddbf162f04d1b4412e0d64340f11788c7bbc877e8a43 \\\n    --hash=sha256:e23721d1654b311b47cd6b35768520284bd036f8c7e6b11600143258b4a0409a \\\n    --hash=sha256:fb72bda44ae9f8a1e5ee9c5f82e2d273abe019874b0110b5c2d8395f1fe966b4\n    # via jax\njax-triton==0.2.0 \\\n    --hash=sha256:6db5f6147327f2462c35becab612d415cf9ee70c96e43020c3c7ea873eb8576e \\\n    --hash=sha256:ed564a5ffb9e404557dc8d296e7eb30e501da5a4d7b03408acd0837c1c618c21\n    # via alphafold3 (pyproject.toml)\njaxlib==0.4.34 \\\n    --hash=sha256:096f0ca309d41fa692a9d1f2f9baab1c5c8ca0749876ebb3f748e738a27c7ff4 \\\n    --hash=sha256:133070d4fec5525ffea4dc72956398c1cf647a04dcb37f8a935ee82af78d9965 \\\n    --hash=sha256:1a30771d85fa77f9ab8f18e63240f455ab3a3f87660ed7b8d5eea6ceecbe5c1e \\\n    --hash=sha256:3bcfa639ca3cfaf86c8ceebd5fc0d47300fd98a078014a1d0cc03133e1523d5f \\\n    --hash=sha256:3e60bc826933082e99b19b87c21818a8d26fcdb01f418d47cedff554746fd6cc \\\n    --hash=sha256:45d719a2ce0ebf21255a277b71d756f3609b7b5be70cddc5d88fd58c35219de0 \\\n    --hash=sha256:48272e9034ff868d4328cf0055a07882fd2be93f59dfb6283af7de491f9d1290 \\\n    --hash=sha256:571ef03259835458111596a71a2f4a6fabf4ec34595df4cea555035362ac5bf0 \\\n    --hash=sha256:6b43a974c5d91a19912d138f2658dd8dbb7d30dcdff5c961d896c673e872b611 \\\n    --hash=sha256:72e22e99a5dc890a64443c3fc12f13f20091f578c405a76de077ba42b4c62cd7 \\\n    --hash=sha256:7be673a876ebd1aef440fb7e3ebaf99a91abeb550c9728c644b7d7c7b5d7c108 \\\n    --hash=sha256:87f25a477cd279840e53718403f97092eba0e8a945fcab47bcf435b6f9119dda \\\n    --hash=sha256:8ee3f93836e53c86556ccd9449a4ea43516ee05184d031a71dd692e81259f7d9 \\\n    --hash=sha256:901cb4040ed24eae40071d8114ea8d10dff436277fa74a1a5b9e7206f641151c \\\n    --hash=sha256:b0001c8f0e2b1c7bc99e4f314b524a340d25653505c1a1484d4041a9d3617f6f \\\n    --hash=sha256:b7a212a3cb5c6acc201c32ae4f4b5f5a9ac09457fbb77ba8db5ce7e7d4adc214 \\\n    --hash=sha256:c303f5acaf6c56ce5ff133a923c9b6247bdebedde15bd2c893c24be4d8f71306 \\\n    --hash=sha256:c7b3e724a30426a856070aba0192b5d199e95b4411070e7ad96ad8b196877b10 \\\n    --hash=sha256:c9d3adcae43a33aad4332be9c2aedc5ef751d1e755f917a5afb30c7872eacaa8 \\\n    --hash=sha256:d840e64b85f8865404d6d225b9bb340e158df1457152a361b05680e24792b232\n    # via\n    #   chex\n    #   jax\njaxtyping==0.2.34 \\\n    --hash=sha256:2f81fb6d1586e497a6ea2d28c06dcab37b108a096cbb36ea3fe4fa2e1c1f32e5 \\\n    --hash=sha256:eed9a3458ec8726c84ea5457ebde53c964f65d2c22c0ec40d0555ae3fed5bbaf\n    # via alphafold3 (pyproject.toml)\njmp==0.0.4 \\\n    --hash=sha256:5dfeb0fd7c7a9f72a70fff0aab9d0cbfae32a809c02f4037ff3485ceb33e1730 \\\n    --hash=sha256:6aa7adbddf2bd574b28c7faf6e81a735eb11f53386447896909c6968dc36807d\n    # via dm-haiku\nml-dtypes==0.5.0 \\\n    --hash=sha256:099e09edd54e676903b4538f3815b5ab96f5b119690514602d96bfdb67172cbe \\\n    --hash=sha256:2e7534392682c3098bc7341648c650864207169c654aed83143d7a19c67ae06f \\\n    --hash=sha256:3e7d3a380fe73a63c884f06136f8baa7a5249cc8e9fdec677997dd78549f8128 \\\n    --hash=sha256:54415257f00eb44fbcc807454efac3356f75644f1cbfc2d4e5522a72ae1dacab \\\n    --hash=sha256:5f2b59233a0dbb6a560b3137ed6125433289ccba2f8d9c3695a52423a369ed15 \\\n    --hash=sha256:60275f2b51b56834e840c4809fca840565f9bf8e9a73f6d8c94f5b5935701215 \\\n    --hash=sha256:76942f6aeb5c40766d5ea62386daa4148e6a54322aaf5b53eae9e7553240222f \\\n    --hash=sha256:7ee9c320bb0f9ffdf9f6fa6a696ef2e005d1f66438d6f1c1457338e00a02e8cf \\\n    --hash=sha256:8c32138975797e681eb175996d64356bcfa124bdbb6a70460b9768c2b35a6fa4 \\\n    --hash=sha256:968fede07d1f9b926a63df97d25ac656cac1a57ebd33701734eaf704bc55d8d8 \\\n    --hash=sha256:a03fc861b86cc586728e3d093ba37f0cc05e65330c3ebd7688e7bae8290f8859 \\\n    --hash=sha256:a38df8df61194aeaae1ab7579075779b4ad32cd1cffd012c28be227fa7f2a70a \\\n    --hash=sha256:a988bac6572630e1e9c2edd9b1277b4eefd1c86209e52b0d061b775ac33902ff \\\n    --hash=sha256:ab046f2ff789b1f11b2491909682c5d089934835f9a760fafc180e47dcb676b8 \\\n    --hash=sha256:afa08343069874a30812871d639f9c02b4158ace065601406a493a8511180c02 \\\n    --hash=sha256:c7a9152f5876fef565516aa5dd1dccd6fc298a5891b2467973905103eb5c7856 \\\n    --hash=sha256:cb5cc7b25acabd384f75bbd78892d0c724943f3e2e1986254665a1aa10982e07 \\\n    --hash=sha256:d3b3db9990c3840986a0e70524e122cfa32b91139c3653df76121ba7776e015f \\\n    --hash=sha256:d4b1a70a3e5219790d6b55b9507606fc4e02911d1497d16c18dd721eb7efe7d0 \\\n    --hash=sha256:dc74fd9995513d33eac63d64e436240f5494ec74d522a9f0920194942fc3d2d7 \\\n    --hash=sha256:e04fde367b2fe901b1d47234426fe8819909bd1dd862a5adb630f27789c20599\n    # via\n    #   jax\n    #   jaxlib\nnumpy==2.1.3 \\\n    --hash=sha256:016d0f6f5e77b0f0d45d77387ffa4bb89816b57c835580c3ce8e099ef830befe \\\n    --hash=sha256:02135ade8b8a84011cbb67dc44e07c58f28575cf9ecf8ab304e51c05528c19f0 \\\n    --hash=sha256:08788d27a5fd867a663f6fc753fd7c3ad7e92747efc73c53bca2f19f8bc06f48 \\\n    --hash=sha256:0d30c543f02e84e92c4b1f415b7c6b5326cbe45ee7882b6b77db7195fb971e3a \\\n    --hash=sha256:0fa14563cc46422e99daef53d725d0c326e99e468a9320a240affffe87852564 \\\n    --hash=sha256:13138eadd4f4da03074851a698ffa7e405f41a0845a6b1ad135b81596e4e9958 \\\n    --hash=sha256:14e253bd43fc6b37af4921b10f6add6925878a42a0c5fe83daee390bca80bc17 \\\n    --hash=sha256:15cb89f39fa6d0bdfb600ea24b250e5f1a3df23f901f51c8debaa6a5d122b2f0 \\\n    --hash=sha256:17ee83a1f4fef3c94d16dc1802b998668b5419362c8a4f4e8a491de1b41cc3ee \\\n    --hash=sha256:2312b2aa89e1f43ecea6da6ea9a810d06aae08321609d8dc0d0eda6d946a541b \\\n    --hash=sha256:2564fbdf2b99b3f815f2107c1bbc93e2de8ee655a69c261363a1172a79a257d4 \\\n    --hash=sha256:3522b0dfe983a575e6a9ab3a4a4dfe156c3e428468ff08ce582b9bb6bd1d71d4 \\\n    --hash=sha256:4394bc0dbd074b7f9b52024832d16e019decebf86caf909d94f6b3f77a8ee3b6 \\\n    --hash=sha256:45966d859916ad02b779706bb43b954281db43e185015df6eb3323120188f9e4 \\\n    --hash=sha256:4d1167c53b93f1f5d8a139a742b3c6f4d429b54e74e6b57d0eff40045187b15d \\\n    --hash=sha256:4f2015dfe437dfebbfce7c85c7b53d81ba49e71ba7eadbf1df40c915af75979f \\\n    --hash=sha256:50ca6aba6e163363f132b5c101ba078b8cbd3fa92c7865fd7d4d62d9779ac29f \\\n    --hash=sha256:50d18c4358a0a8a53f12a8ba9d772ab2d460321e6a93d6064fc22443d189853f \\\n    --hash=sha256:5641516794ca9e5f8a4d17bb45446998c6554704d888f86df9b200e66bdcce56 \\\n    --hash=sha256:576a1c1d25e9e02ed7fa5477f30a127fe56debd53b8d2c89d5578f9857d03ca9 \\\n    --hash=sha256:6a4825252fcc430a182ac4dee5a505053d262c807f8a924603d411f6718b88fd \\\n    --hash=sha256:72dcc4a35a8515d83e76b58fdf8113a5c969ccd505c8a946759b24e3182d1f23 \\\n    --hash=sha256:747641635d3d44bcb380d950679462fae44f54b131be347d5ec2bce47d3df9ed \\\n    --hash=sha256:762479be47a4863e261a840e8e01608d124ee1361e48b96916f38b119cfda04a \\\n    --hash=sha256:78574ac2d1a4a02421f25da9559850d59457bac82f2b8d7a44fe83a64f770098 \\\n    --hash=sha256:825656d0743699c529c5943554d223c021ff0494ff1442152ce887ef4f7561a1 \\\n    --hash=sha256:8637dcd2caa676e475503d1f8fdb327bc495554e10838019651b76d17b98e512 \\\n    --hash=sha256:96fe52fcdb9345b7cd82ecd34547fca4321f7656d500eca497eb7ea5a926692f \\\n    --hash=sha256:973faafebaae4c0aaa1a1ca1ce02434554d67e628b8d805e61f874b84e136b09 \\\n    --hash=sha256:996bb9399059c5b82f76b53ff8bb686069c05acc94656bb259b1d63d04a9506f \\\n    --hash=sha256:a38c19106902bb19351b83802531fea19dee18e5b37b36454f27f11ff956f7fc \\\n    --hash=sha256:a6b46587b14b888e95e4a24d7b13ae91fa22386c199ee7b418f449032b2fa3b8 \\\n    --hash=sha256:a9f7f672a3388133335589cfca93ed468509cb7b93ba3105fce780d04a6576a0 \\\n    --hash=sha256:aa08e04e08aaf974d4458def539dece0d28146d866a39da5639596f4921fd761 \\\n    --hash=sha256:b0df3635b9c8ef48bd3be5f862cf71b0a4716fa0e702155c45067c6b711ddcef \\\n    --hash=sha256:b47fbb433d3260adcd51eb54f92a2ffbc90a4595f8970ee00e064c644ac788f5 \\\n    --hash=sha256:baed7e8d7481bfe0874b566850cb0b85243e982388b7b23348c6db2ee2b2ae8e \\\n    --hash=sha256:bc6f24b3d1ecc1eebfbf5d6051faa49af40b03be1aaa781ebdadcbc090b4539b \\\n    --hash=sha256:c006b607a865b07cd981ccb218a04fc86b600411d83d6fc261357f1c0966755d \\\n    --hash=sha256:c181ba05ce8299c7aa3125c27b9c2167bca4a4445b7ce73d5febc411ca692e43 \\\n    --hash=sha256:c7662f0e3673fe4e832fe07b65c50342ea27d989f92c80355658c7f888fcc83c \\\n    --hash=sha256:c80e4a09b3d95b4e1cac08643f1152fa71a0a821a2d4277334c88d54b2219a41 \\\n    --hash=sha256:c894b4305373b9c5576d7a12b473702afdf48ce5369c074ba304cc5ad8730dff \\\n    --hash=sha256:d7aac50327da5d208db2eec22eb11e491e3fe13d22653dce51b0f4109101b408 \\\n    --hash=sha256:d89dd2b6da69c4fff5e39c28a382199ddedc3a5be5390115608345dec660b9e2 \\\n    --hash=sha256:d9beb777a78c331580705326d2367488d5bc473b49a9bc3036c154832520aca9 \\\n    --hash=sha256:dc258a761a16daa791081d026f0ed4399b582712e6fc887a95af09df10c5ca57 \\\n    --hash=sha256:e14e26956e6f1696070788252dcdff11b4aca4c3e8bd166e0df1bb8f315a67cb \\\n    --hash=sha256:e6988e90fcf617da2b5c78902fe8e668361b43b4fe26dbf2d7b0f8034d4cafb9 \\\n    --hash=sha256:e711e02f49e176a01d0349d82cb5f05ba4db7d5e7e0defd026328e5cfb3226d3 \\\n    --hash=sha256:ea4dedd6e394a9c180b33c2c872b92f7ce0f8e7ad93e9585312b0c5a04777a4a \\\n    --hash=sha256:ecc76a9ba2911d8d37ac01de72834d8849e55473457558e12995f4cd53e778e0 \\\n    --hash=sha256:f55ba01150f52b1027829b50d70ef1dafd9821ea82905b63936668403c3b471e \\\n    --hash=sha256:f653490b33e9c3a4c1c01d41bc2aef08f9475af51146e4a7710c450cf9761598 \\\n    --hash=sha256:fa2d1337dc61c8dc417fbccf20f6d1e139896a30721b7f1e832b2bb6ef4eb6c4\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   chex\n    #   dm-haiku\n    #   jax\n    #   jaxlib\n    #   jmp\n    #   ml-dtypes\n    #   rdkit\n    #   scipy\nnvidia-cublas-cu12==12.6.3.3 \\\n    --hash=sha256:e1f70bee38b964eac1907293b336bceb24498a4243e61eaf91a52977c59aebc4 \\\n    --hash=sha256:e531199ca4f1f764fb45bc1dde49a006f6765033f9c89c737e4553b9502ca1f5 \\\n    --hash=sha256:f33fb68e101d99470c82d17f92a0dd9f74de2a21685c217f4716cdd63b1316eb\n    # via\n    #   jax-cuda12-plugin\n    #   nvidia-cudnn-cu12\n    #   nvidia-cusolver-cu12\nnvidia-cuda-cupti-cu12==12.6.80 \\\n    --hash=sha256:358b4a1d35370353d52e12f0a7d1769fc01ff74a191689d3870b2123156184c4 \\\n    --hash=sha256:a3eff6cdfcc6a4c35db968a06fcadb061cbc7d6dde548609a941ff8701b98b73 \\\n    --hash=sha256:bbe6ae76e83ce5251b56e8c8e61a964f757175682bbad058b170b136266ab00a\n    # via jax-cuda12-plugin\nnvidia-cuda-nvcc-cu12==12.6.77 \\\n    --hash=sha256:26e118b4dae4ebd316ab6f5ee3f3c4cb929f8265f717a8e016ba57e254c0b4f1 \\\n    --hash=sha256:9a2aad43b8f4e4be9c237ece04f64450df77871eeebffad5a5a872714a97ca77 \\\n    --hash=sha256:b66bb5dd6b8ae62262586691977d3b4a425e91db61b4b9bc2f6b42bcd4154b96\n    # via jax-cuda12-plugin\nnvidia-cuda-runtime-cu12==12.6.77 \\\n    --hash=sha256:86c58044c824bf3c173c49a2dbc7a6c8b53cb4e4dca50068be0bf64e9dab3f7f \\\n    --hash=sha256:a84d15d5e1da416dd4774cb42edf5e954a3e60cc945698dc1d5be02321c44dc8 \\\n    --hash=sha256:d461264ecb429c84c8879a7153499ddc7b19b5f8d84c204307491989a365588e\n    # via jax-cuda12-plugin\nnvidia-cudnn-cu12==9.5.1.17 \\\n    --hash=sha256:30ac3869f6db17d170e0e556dd6cc5eee02647abc31ca856634d5a40f82c15b2 \\\n    --hash=sha256:9fd4584468533c61873e5fda8ca41bac3a38bcb2d12350830c69b0a96a7e4def \\\n    --hash=sha256:d7af0f8a4f3b4b9dbb3122f2ef553b45694ed9c384d5a75bab197b8eefb79ab8\n    # via jax-cuda12-plugin\nnvidia-cufft-cu12==11.3.0.4 \\\n    --hash=sha256:6048ebddfb90d09d2707efb1fd78d4e3a77cb3ae4dc60e19aab6be0ece2ae464 \\\n    --hash=sha256:768160ac89f6f7b459bee747e8d175dbf53619cfe74b2a5636264163138013ca \\\n    --hash=sha256:8510990de9f96c803a051822618d42bf6cb8f069ff3f48d93a8486efdacb48fb\n    # via jax-cuda12-plugin\nnvidia-cusolver-cu12==11.7.1.2 \\\n    --hash=sha256:0ce237ef60acde1efc457335a2ddadfd7610b892d94efee7b776c64bb1cac9e0 \\\n    --hash=sha256:6813f9d8073f555444a8705f3ab0296d3e1cb37a16d694c5fc8b862a0d8706d7 \\\n    --hash=sha256:6cf28f17f64107a0c4d7802be5ff5537b2130bfc112f25d5a30df227058ca0e6\n    # via jax-cuda12-plugin\nnvidia-cusparse-cu12==12.5.4.2 \\\n    --hash=sha256:23749a6571191a215cb74d1cdbff4a86e7b19f1200c071b3fcf844a5bea23a2f \\\n    --hash=sha256:4acb8c08855a26d737398cba8fb6f8f5045d93f82612b4cfd84645a2332ccf20 \\\n    --hash=sha256:7aa32fa5470cf754f72d1116c7cbc300b4e638d3ae5304cfa4a638a5b87161b1\n    # via\n    #   jax-cuda12-plugin\n    #   nvidia-cusolver-cu12\nnvidia-nccl-cu12==2.23.4 \\\n    --hash=sha256:aa946c8327e22ced28e7cef508a334673abc42064ec85f02d005ba1785ea4cec \\\n    --hash=sha256:b097258d9aab2fa9f686e33c6fe40ae57b27df60cedbd15d139701bb5509e0c1\n    # via jax-cuda12-plugin\nnvidia-nvjitlink-cu12==12.6.77 \\\n    --hash=sha256:3bf10d85bb1801e9c894c6e197e44dd137d2a0a9e43f8450e9ad13f2df0dd52d \\\n    --hash=sha256:410718cd44962bed862a31dd0318620f6f9a8b28a6291967bcfcb446a6516771 \\\n    --hash=sha256:9ae346d16203ae4ea513be416495167a0101d33d2d14935aa9c1829a3fb45142\n    # via\n    #   jax-cuda12-plugin\n    #   nvidia-cufft-cu12\n    #   nvidia-cusolver-cu12\n    #   nvidia-cusparse-cu12\nopt-einsum==3.4.0 \\\n    --hash=sha256:69bb92469f86a1565195ece4ac0323943e83477171b91d24c35afe028a90d7cd \\\n    --hash=sha256:96ca72f1b886d148241348783498194c577fa30a8faac108586b14f1ba4473ac\n    # via jax\npillow==11.0.0 \\\n    --hash=sha256:00177a63030d612148e659b55ba99527803288cea7c75fb05766ab7981a8c1b7 \\\n    --hash=sha256:006bcdd307cc47ba43e924099a038cbf9591062e6c50e570819743f5607404f5 \\\n    --hash=sha256:084a07ef0821cfe4858fe86652fffac8e187b6ae677e9906e192aafcc1b69903 \\\n    --hash=sha256:0ae08bd8ffc41aebf578c2af2f9d8749d91f448b3bfd41d7d9ff573d74f2a6b2 \\\n    --hash=sha256:0e038b0745997c7dcaae350d35859c9715c71e92ffb7e0f4a8e8a16732150f38 \\\n    --hash=sha256:1187739620f2b365de756ce086fdb3604573337cc28a0d3ac4a01ab6b2d2a6d2 \\\n    --hash=sha256:16095692a253047fe3ec028e951fa4221a1f3ed3d80c397e83541a3037ff67c9 \\\n    --hash=sha256:1a61b54f87ab5786b8479f81c4b11f4d61702830354520837f8cc791ebba0f5f \\\n    --hash=sha256:1c1d72714f429a521d8d2d018badc42414c3077eb187a59579f28e4270b4b0fc \\\n    --hash=sha256:1e2688958a840c822279fda0086fec1fdab2f95bf2b717b66871c4ad9859d7e8 \\\n    --hash=sha256:20ec184af98a121fb2da42642dea8a29ec80fc3efbaefb86d8fdd2606619045d \\\n    --hash=sha256:21a0d3b115009ebb8ac3d2ebec5c2982cc693da935f4ab7bb5c8ebe2f47d36f2 \\\n    --hash=sha256:224aaa38177597bb179f3ec87eeefcce8e4f85e608025e9cfac60de237ba6316 \\\n    --hash=sha256:2679d2258b7f1192b378e2893a8a0a0ca472234d4c2c0e6bdd3380e8dfa21b6a \\\n    --hash=sha256:27a7860107500d813fcd203b4ea19b04babe79448268403172782754870dac25 \\\n    --hash=sha256:290f2cc809f9da7d6d622550bbf4c1e57518212da51b6a30fe8e0a270a5b78bd \\\n    --hash=sha256:2e46773dc9f35a1dd28bd6981332fd7f27bec001a918a72a79b4133cf5291dba \\\n    --hash=sha256:3107c66e43bda25359d5ef446f59c497de2b5ed4c7fdba0894f8d6cf3822dafc \\\n    --hash=sha256:375b8dd15a1f5d2feafff536d47e22f69625c1aa92f12b339ec0b2ca40263273 \\\n    --hash=sha256:45c566eb10b8967d71bf1ab8e4a525e5a93519e29ea071459ce517f6b903d7fa \\\n    --hash=sha256:499c3a1b0d6fc8213519e193796eb1a86a1be4b1877d678b30f83fd979811d1a \\\n    --hash=sha256:4ad70c4214f67d7466bea6a08061eba35c01b1b89eaa098040a35272a8efb22b \\\n    --hash=sha256:4b60c9520f7207aaf2e1d94de026682fc227806c6e1f55bba7606d1c94dd623a \\\n    --hash=sha256:5178952973e588b3f1360868847334e9e3bf49d19e169bbbdfaf8398002419ae \\\n    --hash=sha256:52a2d8323a465f84faaba5236567d212c3668f2ab53e1c74c15583cf507a0291 \\\n    --hash=sha256:598b4e238f13276e0008299bd2482003f48158e2b11826862b1eb2ad7c768b97 \\\n    --hash=sha256:5bd2d3bdb846d757055910f0a59792d33b555800813c3b39ada1829c372ccb06 \\\n    --hash=sha256:5c39ed17edea3bc69c743a8dd3e9853b7509625c2462532e62baa0732163a904 \\\n    --hash=sha256:5d203af30149ae339ad1b4f710d9844ed8796e97fda23ffbc4cc472968a47d0b \\\n    --hash=sha256:5ddbfd761ee00c12ee1be86c9c0683ecf5bb14c9772ddbd782085779a63dd55b \\\n    --hash=sha256:607bbe123c74e272e381a8d1957083a9463401f7bd01287f50521ecb05a313f8 \\\n    --hash=sha256:61b887f9ddba63ddf62fd02a3ba7add935d053b6dd7d58998c630e6dbade8527 \\\n    --hash=sha256:6619654954dc4936fcff82db8eb6401d3159ec6be81e33c6000dfd76ae189947 \\\n    --hash=sha256:674629ff60030d144b7bca2b8330225a9b11c482ed408813924619c6f302fdbb \\\n    --hash=sha256:6ec0d5af64f2e3d64a165f490d96368bb5dea8b8f9ad04487f9ab60dc4bb6003 \\\n    --hash=sha256:6f4dba50cfa56f910241eb7f883c20f1e7b1d8f7d91c750cd0b318bad443f4d5 \\\n    --hash=sha256:70fbbdacd1d271b77b7721fe3cdd2d537bbbd75d29e6300c672ec6bb38d9672f \\\n    --hash=sha256:72bacbaf24ac003fea9bff9837d1eedb6088758d41e100c1552930151f677739 \\\n    --hash=sha256:7326a1787e3c7b0429659e0a944725e1b03eeaa10edd945a86dead1913383944 \\\n    --hash=sha256:73853108f56df97baf2bb8b522f3578221e56f646ba345a372c78326710d3830 \\\n    --hash=sha256:73e3a0200cdda995c7e43dd47436c1548f87a30bb27fb871f352a22ab8dcf45f \\\n    --hash=sha256:75acbbeb05b86bc53cbe7b7e6fe00fbcf82ad7c684b3ad82e3d711da9ba287d3 \\\n    --hash=sha256:8069c5179902dcdce0be9bfc8235347fdbac249d23bd90514b7a47a72d9fecf4 \\\n    --hash=sha256:846e193e103b41e984ac921b335df59195356ce3f71dcfd155aa79c603873b84 \\\n    --hash=sha256:8594f42df584e5b4bb9281799698403f7af489fba84c34d53d1c4bfb71b7c4e7 \\\n    --hash=sha256:86510e3f5eca0ab87429dd77fafc04693195eec7fd6a137c389c3eeb4cfb77c6 \\\n    --hash=sha256:8853a3bf12afddfdf15f57c4b02d7ded92c7a75a5d7331d19f4f9572a89c17e6 \\\n    --hash=sha256:88a58d8ac0cc0e7f3a014509f0455248a76629ca9b604eca7dc5927cc593c5e9 \\\n    --hash=sha256:8ba470552b48e5835f1d23ecb936bb7f71d206f9dfeee64245f30c3270b994de \\\n    --hash=sha256:8c676b587da5673d3c75bd67dd2a8cdfeb282ca38a30f37950511766b26858c4 \\\n    --hash=sha256:8ec4a89295cd6cd4d1058a5e6aec6bf51e0eaaf9714774e1bfac7cfc9051db47 \\\n    --hash=sha256:94f3e1780abb45062287b4614a5bc0874519c86a777d4a7ad34978e86428b8dd \\\n    --hash=sha256:9a0f748eaa434a41fccf8e1ee7a3eed68af1b690e75328fd7a60af123c193b50 \\\n    --hash=sha256:a5629742881bcbc1f42e840af185fd4d83a5edeb96475a575f4da50d6ede337c \\\n    --hash=sha256:a65149d8ada1055029fcb665452b2814fe7d7082fcb0c5bed6db851cb69b2086 \\\n    --hash=sha256:b3c5ac4bed7519088103d9450a1107f76308ecf91d6dabc8a33a2fcfb18d0fba \\\n    --hash=sha256:b4fd7bd29610a83a8c9b564d457cf5bd92b4e11e79a4ee4716a63c959699b306 \\\n    --hash=sha256:bcd1fb5bb7b07f64c15618c89efcc2cfa3e95f0e3bcdbaf4642509de1942a699 \\\n    --hash=sha256:c12b5ae868897c7338519c03049a806af85b9b8c237b7d675b8c5e089e4a618e \\\n    --hash=sha256:c26845094b1af3c91852745ae78e3ea47abf3dbcd1cf962f16b9a5fbe3ee8488 \\\n    --hash=sha256:c6a660307ca9d4867caa8d9ca2c2658ab685de83792d1876274991adec7b93fa \\\n    --hash=sha256:c809a70e43c7977c4a42aefd62f0131823ebf7dd73556fa5d5950f5b354087e2 \\\n    --hash=sha256:c8b2351c85d855293a299038e1f89db92a2f35e8d2f783489c6f0b2b5f3fe8a3 \\\n    --hash=sha256:cb929ca942d0ec4fac404cbf520ee6cac37bf35be479b970c4ffadf2b6a1cad9 \\\n    --hash=sha256:d2c0a187a92a1cb5ef2c8ed5412dd8d4334272617f532d4ad4de31e0495bd923 \\\n    --hash=sha256:d69bfd8ec3219ae71bcde1f942b728903cad25fafe3100ba2258b973bd2bc1b2 \\\n    --hash=sha256:daffdf51ee5db69a82dd127eabecce20729e21f7a3680cf7cbb23f0829189790 \\\n    --hash=sha256:e58876c91f97b0952eb766123bfef372792ab3f4e3e1f1a2267834c2ab131734 \\\n    --hash=sha256:eda2616eb2313cbb3eebbe51f19362eb434b18e3bb599466a1ffa76a033fb916 \\\n    --hash=sha256:ee217c198f2e41f184f3869f3e485557296d505b5195c513b2bfe0062dc537f1 \\\n    --hash=sha256:f02541ef64077f22bf4924f225c0fd1248c168f86e4b7abdedd87d6ebaceab0f \\\n    --hash=sha256:f1b82c27e89fffc6da125d5eb0ca6e68017faf5efc078128cfaa42cf5cb38798 \\\n    --hash=sha256:fba162b8872d30fea8c52b258a542c5dfd7b235fb5cb352240c8d63b414013eb \\\n    --hash=sha256:fbbcb7b57dc9c794843e3d1258c0fbf0f48656d46ffe9e09b63bbd6e8cd5d0a2 \\\n    --hash=sha256:fcb4621042ac4b7865c179bb972ed0da0218a076dc1820ffc48b1d74c1e37fe9\n    # via rdkit\nrdkit==2024.3.5 \\\n    --hash=sha256:01fd323f5902a720925293c0ce08a33e630422374cf263d04ef173c106c63c36 \\\n    --hash=sha256:04079aef5f91965bd2a48bf432b32c36ea1bf088e26efb2c9a43b625b6a75d15 \\\n    --hash=sha256:1cb7cdb29956649d4c875790b94142868c08c0735dee4d90b2d70dfd378e9d2e \\\n    --hash=sha256:292141f0ba2359be07d8566d9a39ce697c1d6e7eb406031a2bf0387026503a47 \\\n    --hash=sha256:2affa1b4cf601d27b157bbc44255c640baac9bc04cfdf5fa88f43c34c3f360d5 \\\n    --hash=sha256:316bb5273bff5be76d4e5b0def998455e9b1a20898df44548b0e299f90786cb2 \\\n    --hash=sha256:455d510beff8806e62e48b977d7acbfbc351474fa132124738a07223440c1b9a \\\n    --hash=sha256:53638d0d94f7c511273ff5765abc6a1fe60fe6c8633db13cad03bc527550a7a9 \\\n    --hash=sha256:6af38c62d4af9d669f8996551d3ae809de9ab245570b861be3f7a2b1a536f79f \\\n    --hash=sha256:73fa2fe3a9a2334edf8448a5a3093a6f949ee715de77d3baa685751e2cf9317b \\\n    --hash=sha256:7c91c5ccbf8d51cd3dd894bf770ca99da5fe37714f6e2a66016e8af4f57d2b56 \\\n    --hash=sha256:7d5576bad6672959d0c1939e8d7e2fcd8656f8daf9788ce58e5c313db719b5ec \\\n    --hash=sha256:89f7a72466ffbd45320d845ee1bcde1bddb1a322352836835d26ebb712228a41 \\\n    --hash=sha256:8d4ebafb7e845bdc55eb6e2e188123ec84fb2bf724d3a7eb2da9bcfade7acc65 \\\n    --hash=sha256:90376467f4988ee44f3f47d1e558ffc27646254a99fe65d19a7d9a123e832ef2 \\\n    --hash=sha256:913494a03fcf6121c103e5db43fa33bca0fcc65ebd5a6c46661baa6851f79d91 \\\n    --hash=sha256:98dac94a5e414ed1880b215eacec63e5fd77b0ea351e0a18fc5229acb8e886f5 \\\n    --hash=sha256:a51cc403792ba37d1ee8ad84ad829177a4453547a4e085e1115ae2b237084ddb \\\n    --hash=sha256:a98099cef42c1eb52512b343beb68a8b7cc4da79924a67181f58692a6376d91b \\\n    --hash=sha256:c971eba2a67f8ae301b9b8c66b3431cd62472f648cdec9694e5413d8ebc59720 \\\n    --hash=sha256:cf2747e7c82d6c90a8a631fe063d24d77b31f535e0f8a17ac9dbfbe4ab456886 \\\n    --hash=sha256:d8714c03558086d022649617197c0c45c75c301f6a9fb67205695493a7e5b826 \\\n    --hash=sha256:e5b0dfb28aa0949152ff816fba0a2f6267154f5c25159a9ec84c27cf18f72322 \\\n    --hash=sha256:e69cec14cbb42c5ca912346b594d3f6a7aac572463949c55c7749da257e68123 \\\n    --hash=sha256:f662ed10e14c7874d0e011c1f8260a6cf4a5547100806f9f4540f8550a3f1d36\n    # via alphafold3 (pyproject.toml)\nscipy==1.14.1 \\\n    --hash=sha256:0c2f95de3b04e26f5f3ad5bb05e74ba7f68b837133a4492414b3afd79dfe540e \\\n    --hash=sha256:1729560c906963fc8389f6aac023739ff3983e727b1a4d87696b7bf108316a79 \\\n    --hash=sha256:278266012eb69f4a720827bdd2dc54b2271c97d84255b2faaa8f161a158c3b37 \\\n    --hash=sha256:2843f2d527d9eebec9a43e6b406fb7266f3af25a751aa91d62ff416f54170bc5 \\\n    --hash=sha256:2da0469a4ef0ecd3693761acbdc20f2fdeafb69e6819cc081308cc978153c675 \\\n    --hash=sha256:2ff0a7e01e422c15739ecd64432743cf7aae2b03f3084288f399affcefe5222d \\\n    --hash=sha256:2ff38e22128e6c03ff73b6bb0f85f897d2362f8c052e3b8ad00532198fbdae3f \\\n    --hash=sha256:30ac8812c1d2aab7131a79ba62933a2a76f582d5dbbc695192453dae67ad6310 \\\n    --hash=sha256:3a1b111fac6baec1c1d92f27e76511c9e7218f1695d61b59e05e0fe04dc59617 \\\n    --hash=sha256:4079b90df244709e675cdc8b93bfd8a395d59af40b72e339c2287c91860deb8e \\\n    --hash=sha256:5149e3fd2d686e42144a093b206aef01932a0059c2a33ddfa67f5f035bdfe13e \\\n    --hash=sha256:5a275584e726026a5699459aa72f828a610821006228e841b94275c4a7c08417 \\\n    --hash=sha256:631f07b3734d34aced009aaf6fedfd0eb3498a97e581c3b1e5f14a04164a456d \\\n    --hash=sha256:716e389b694c4bb564b4fc0c51bc84d381735e0d39d3f26ec1af2556ec6aad94 \\\n    --hash=sha256:8426251ad1e4ad903a4514712d2fa8fdd5382c978010d1c6f5f37ef286a713ad \\\n    --hash=sha256:8475230e55549ab3f207bff11ebfc91c805dc3463ef62eda3ccf593254524ce8 \\\n    --hash=sha256:8bddf15838ba768bb5f5083c1ea012d64c9a444e16192762bd858f1e126196d0 \\\n    --hash=sha256:8e32dced201274bf96899e6491d9ba3e9a5f6b336708656466ad0522d8528f69 \\\n    --hash=sha256:8f9ea80f2e65bdaa0b7627fb00cbeb2daf163caa015e59b7516395fe3bd1e066 \\\n    --hash=sha256:97c5dddd5932bd2a1a31c927ba5e1463a53b87ca96b5c9bdf5dfd6096e27efc3 \\\n    --hash=sha256:a49f6ed96f83966f576b33a44257d869756df6cf1ef4934f59dd58b25e0327e5 \\\n    --hash=sha256:af29a935803cc707ab2ed7791c44288a682f9c8107bc00f0eccc4f92c08d6e07 \\\n    --hash=sha256:b05d43735bb2f07d689f56f7b474788a13ed8adc484a85aa65c0fd931cf9ccd2 \\\n    --hash=sha256:b28d2ca4add7ac16ae8bb6632a3c86e4b9e4d52d3e34267f6e1b0c1f8d87e389 \\\n    --hash=sha256:b99722ea48b7ea25e8e015e8341ae74624f72e5f21fc2abd45f3a93266de4c5d \\\n    --hash=sha256:baff393942b550823bfce952bb62270ee17504d02a1801d7fd0719534dfb9c84 \\\n    --hash=sha256:c0ee987efa6737242745f347835da2cc5bb9f1b42996a4d97d5c7ff7928cb6f2 \\\n    --hash=sha256:d0d2821003174de06b69e58cef2316a6622b60ee613121199cb2852a873f8cf3 \\\n    --hash=sha256:e0cf28db0f24a38b2a0ca33a85a54852586e43cf6fd876365c86e0657cfe7d73 \\\n    --hash=sha256:e4f5a7c49323533f9103d4dacf4e4f07078f360743dec7f7596949149efeec06 \\\n    --hash=sha256:eb58ca0abd96911932f688528977858681a59d61a7ce908ffd355957f7025cfc \\\n    --hash=sha256:edaf02b82cd7639db00dbff629995ef185c8df4c3ffa71a5562a595765a06ce1 \\\n    --hash=sha256:fef8c87f8abfb884dac04e97824b61299880c43f4ce675dd2cbeadd3c9b466d2\n    # via\n    #   jax\n    #   jaxlib\ntabulate==0.9.0 \\\n    --hash=sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c \\\n    --hash=sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\n    # via dm-haiku\ntoolz==1.0.0 \\\n    --hash=sha256:292c8f1c4e7516bf9086f8850935c799a874039c8bcf959d47b600e4c44a6236 \\\n    --hash=sha256:2c86e3d9a04798ac556793bced838816296a2f085017664e4995cb40a1047a02\n    # via chex\ntqdm==4.67.0 \\\n    --hash=sha256:0cd8af9d56911acab92182e88d763100d4788bdf421d251616040cc4d44863be \\\n    --hash=sha256:fe5a6f95e6fe0b9755e9469b77b9c3cf850048224ecaa8293d7d2d31f97d869a\n    # via alphafold3 (pyproject.toml)\ntriton==3.1.0 \\\n    --hash=sha256:0f34f6e7885d1bf0eaaf7ba875a5f0ce6f3c13ba98f9503651c1e6dc6757ed5c \\\n    --hash=sha256:6b0dd10a925263abbe9fa37dcde67a5e9b2383fc269fdf59f5657cac38c5d1d8 \\\n    --hash=sha256:6dadaca7fc24de34e180271b5cf864c16755702e9f63a16f62df714a8099126a \\\n    --hash=sha256:aafa9a20cd0d9fee523cd4504aa7131807a864cd77dcf6efe7e981f18b8c6c11 \\\n    --hash=sha256:c8182f42fd8080a7d39d666814fa36c5e30cc00ea7eeeb1a2983dbb4c99a0fdc\n    # via\n    #   alphafold3 (pyproject.toml)\n    #   jax-triton\ntypeguard==2.13.3 \\\n    --hash=sha256:00edaa8da3a133674796cf5ea87d9f4b4c367d77476e185e80251cc13dfbb8c4 \\\n    --hash=sha256:5e3e3be01e887e7eafae5af63d1f36c849aaa94e3a0112097312aabfa16284f1\n    # via jaxtyping\ntyping-extensions==4.12.2 \\\n    --hash=sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d \\\n    --hash=sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\n    # via chex\nzstandard==0.23.0 \\\n    --hash=sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473 \\\n    --hash=sha256:0a7f0804bb3799414af278e9ad51be25edf67f78f916e08afdb983e74161b916 \\\n    --hash=sha256:11e3bf3c924853a2d5835b24f03eeba7fc9b07d8ca499e247e06ff5676461a15 \\\n    --hash=sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072 \\\n    --hash=sha256:1516c8c37d3a053b01c1c15b182f3b5f5eef19ced9b930b684a73bad121addf4 \\\n    --hash=sha256:157e89ceb4054029a289fb504c98c6a9fe8010f1680de0201b3eb5dc20aa6d9e \\\n    --hash=sha256:1bfe8de1da6d104f15a60d4a8a768288f66aa953bbe00d027398b93fb9680b26 \\\n    --hash=sha256:1e172f57cd78c20f13a3415cc8dfe24bf388614324d25539146594c16d78fcc8 \\\n    --hash=sha256:1fd7e0f1cfb70eb2f95a19b472ee7ad6d9a0a992ec0ae53286870c104ca939e5 \\\n    --hash=sha256:203d236f4c94cd8379d1ea61db2fce20730b4c38d7f1c34506a31b34edc87bdd \\\n    --hash=sha256:27d3ef2252d2e62476389ca8f9b0cf2bbafb082a3b6bfe9d90cbcbb5529ecf7c \\\n    --hash=sha256:29a2bc7c1b09b0af938b7a8343174b987ae021705acabcbae560166567f5a8db \\\n    --hash=sha256:2ef230a8fd217a2015bc91b74f6b3b7d6522ba48be29ad4ea0ca3a3775bf7dd5 \\\n    --hash=sha256:2ef3775758346d9ac6214123887d25c7061c92afe1f2b354f9388e9e4d48acfc \\\n    --hash=sha256:2f146f50723defec2975fb7e388ae3a024eb7151542d1599527ec2aa9cacb152 \\\n    --hash=sha256:2fb4535137de7e244c230e24f9d1ec194f61721c86ebea04e1581d9d06ea1269 \\\n    --hash=sha256:32ba3b5ccde2d581b1e6aa952c836a6291e8435d788f656fe5976445865ae045 \\\n    --hash=sha256:34895a41273ad33347b2fc70e1bff4240556de3c46c6ea430a7ed91f9042aa4e \\\n    --hash=sha256:379b378ae694ba78cef921581ebd420c938936a153ded602c4fea612b7eaa90d \\\n    --hash=sha256:38302b78a850ff82656beaddeb0bb989a0322a8bbb1bf1ab10c17506681d772a \\\n    --hash=sha256:3aa014d55c3af933c1315eb4bb06dd0459661cc0b15cd61077afa6489bec63bb \\\n    --hash=sha256:4051e406288b8cdbb993798b9a45c59a4896b6ecee2f875424ec10276a895740 \\\n    --hash=sha256:40b33d93c6eddf02d2c19f5773196068d875c41ca25730e8288e9b672897c105 \\\n    --hash=sha256:43da0f0092281bf501f9c5f6f3b4c975a8a0ea82de49ba3f7100e64d422a1274 \\\n    --hash=sha256:445e4cb5048b04e90ce96a79b4b63140e3f4ab5f662321975679b5f6360b90e2 \\\n    --hash=sha256:48ef6a43b1846f6025dde6ed9fee0c24e1149c1c25f7fb0a0585572b2f3adc58 \\\n    --hash=sha256:50a80baba0285386f97ea36239855f6020ce452456605f262b2d33ac35c7770b \\\n    --hash=sha256:519fbf169dfac1222a76ba8861ef4ac7f0530c35dd79ba5727014613f91613d4 \\\n    --hash=sha256:53dd9d5e3d29f95acd5de6802e909ada8d8d8cfa37a3ac64836f3bc4bc5512db \\\n    --hash=sha256:53ea7cdc96c6eb56e76bb06894bcfb5dfa93b7adcf59d61c6b92674e24e2dd5e \\\n    --hash=sha256:576856e8594e6649aee06ddbfc738fec6a834f7c85bf7cadd1c53d4a58186ef9 \\\n    --hash=sha256:59556bf80a7094d0cfb9f5e50bb2db27fefb75d5138bb16fb052b61b0e0eeeb0 \\\n    --hash=sha256:5d41d5e025f1e0bccae4928981e71b2334c60f580bdc8345f824e7c0a4c2a813 \\\n    --hash=sha256:61062387ad820c654b6a6b5f0b94484fa19515e0c5116faf29f41a6bc91ded6e \\\n    --hash=sha256:61f89436cbfede4bc4e91b4397eaa3e2108ebe96d05e93d6ccc95ab5714be512 \\\n    --hash=sha256:62136da96a973bd2557f06ddd4e8e807f9e13cbb0bfb9cc06cfe6d98ea90dfe0 \\\n    --hash=sha256:64585e1dba664dc67c7cdabd56c1e5685233fbb1fc1966cfba2a340ec0dfff7b \\\n    --hash=sha256:65308f4b4890aa12d9b6ad9f2844b7ee42c7f7a4fd3390425b242ffc57498f48 \\\n    --hash=sha256:66b689c107857eceabf2cf3d3fc699c3c0fe8ccd18df2219d978c0283e4c508a \\\n    --hash=sha256:6a41c120c3dbc0d81a8e8adc73312d668cd34acd7725f036992b1b72d22c1772 \\\n    --hash=sha256:6f77fa49079891a4aab203d0b1744acc85577ed16d767b52fc089d83faf8d8ed \\\n    --hash=sha256:72c68dda124a1a138340fb62fa21b9bf4848437d9ca60bd35db36f2d3345f373 \\\n    --hash=sha256:752bf8a74412b9892f4e5b58f2f890a039f57037f52c89a740757ebd807f33ea \\\n    --hash=sha256:76e79bc28a65f467e0409098fa2c4376931fd3207fbeb6b956c7c476d53746dd \\\n    --hash=sha256:774d45b1fac1461f48698a9d4b5fa19a69d47ece02fa469825b442263f04021f \\\n    --hash=sha256:77da4c6bfa20dd5ea25cbf12c76f181a8e8cd7ea231c673828d0386b1740b8dc \\\n    --hash=sha256:77ea385f7dd5b5676d7fd943292ffa18fbf5c72ba98f7d09fc1fb9e819b34c23 \\\n    --hash=sha256:80080816b4f52a9d886e67f1f96912891074903238fe54f2de8b786f86baded2 \\\n    --hash=sha256:80a539906390591dd39ebb8d773771dc4db82ace6372c4d41e2d293f8e32b8db \\\n    --hash=sha256:82d17e94d735c99621bf8ebf9995f870a6b3e6d14543b99e201ae046dfe7de70 \\\n    --hash=sha256:837bb6764be6919963ef41235fd56a6486b132ea64afe5fafb4cb279ac44f259 \\\n    --hash=sha256:84433dddea68571a6d6bd4fbf8ff398236031149116a7fff6f777ff95cad3df9 \\\n    --hash=sha256:8c24f21fa2af4bb9f2c492a86fe0c34e6d2c63812a839590edaf177b7398f700 \\\n    --hash=sha256:8ed7d27cb56b3e058d3cf684d7200703bcae623e1dcc06ed1e18ecda39fee003 \\\n    --hash=sha256:9206649ec587e6b02bd124fb7799b86cddec350f6f6c14bc82a2b70183e708ba \\\n    --hash=sha256:983b6efd649723474f29ed42e1467f90a35a74793437d0bc64a5bf482bedfa0a \\\n    --hash=sha256:98da17ce9cbf3bfe4617e836d561e433f871129e3a7ac16d6ef4c680f13a839c \\\n    --hash=sha256:9c236e635582742fee16603042553d276cca506e824fa2e6489db04039521e90 \\\n    --hash=sha256:9da6bc32faac9a293ddfdcb9108d4b20416219461e4ec64dfea8383cac186690 \\\n    --hash=sha256:a05e6d6218461eb1b4771d973728f0133b2a4613a6779995df557f70794fd60f \\\n    --hash=sha256:a0817825b900fcd43ac5d05b8b3079937073d2b1ff9cf89427590718b70dd840 \\\n    --hash=sha256:a4ae99c57668ca1e78597d8b06d5af837f377f340f4cce993b551b2d7731778d \\\n    --hash=sha256:a8c86881813a78a6f4508ef9daf9d4995b8ac2d147dcb1a450448941398091c9 \\\n    --hash=sha256:a8fffdbd9d1408006baaf02f1068d7dd1f016c6bcb7538682622c556e7b68e35 \\\n    --hash=sha256:a9b07268d0c3ca5c170a385a0ab9fb7fdd9f5fd866be004c4ea39e44edce47dd \\\n    --hash=sha256:ab19a2d91963ed9e42b4e8d77cd847ae8381576585bad79dbd0a8837a9f6620a \\\n    --hash=sha256:ac184f87ff521f4840e6ea0b10c0ec90c6b1dcd0bad2f1e4a9a1b4fa177982ea \\\n    --hash=sha256:b0e166f698c5a3e914947388c162be2583e0c638a4703fc6a543e23a88dea3c1 \\\n    --hash=sha256:b2170c7e0367dde86a2647ed5b6f57394ea7f53545746104c6b09fc1f4223573 \\\n    --hash=sha256:b2d8c62d08e7255f68f7a740bae85b3c9b8e5466baa9cbf7f57f1cde0ac6bc09 \\\n    --hash=sha256:b4567955a6bc1b20e9c31612e615af6b53733491aeaa19a6b3b37f3b65477094 \\\n    --hash=sha256:b69bb4f51daf461b15e7b3db033160937d3ff88303a7bc808c67bbc1eaf98c78 \\\n    --hash=sha256:b8c0bd73aeac689beacd4e7667d48c299f61b959475cdbb91e7d3d88d27c56b9 \\\n    --hash=sha256:be9b5b8659dff1f913039c2feee1aca499cfbc19e98fa12bc85e037c17ec6ca5 \\\n    --hash=sha256:bf0a05b6059c0528477fba9054d09179beb63744355cab9f38059548fedd46a9 \\\n    --hash=sha256:c16842b846a8d2a145223f520b7e18b57c8f476924bda92aeee3a88d11cfc391 \\\n    --hash=sha256:c363b53e257246a954ebc7c488304b5592b9c53fbe74d03bc1c64dda153fb847 \\\n    --hash=sha256:c7c517d74bea1a6afd39aa612fa025e6b8011982a0897768a2f7c8ab4ebb78a2 \\\n    --hash=sha256:d20fd853fbb5807c8e84c136c278827b6167ded66c72ec6f9a14b863d809211c \\\n    --hash=sha256:d2240ddc86b74966c34554c49d00eaafa8200a18d3a5b6ffbf7da63b11d74ee2 \\\n    --hash=sha256:d477ed829077cd945b01fc3115edd132c47e6540ddcd96ca169facff28173057 \\\n    --hash=sha256:d50d31bfedd53a928fed6707b15a8dbeef011bb6366297cc435accc888b27c20 \\\n    --hash=sha256:dc1d33abb8a0d754ea4763bad944fd965d3d95b5baef6b121c0c9013eaf1907d \\\n    --hash=sha256:dc5d1a49d3f8262be192589a4b72f0d03b72dcf46c51ad5852a4fdc67be7b9e4 \\\n    --hash=sha256:e2d1a054f8f0a191004675755448d12be47fa9bebbcffa3cdf01db19f2d30a54 \\\n    --hash=sha256:e7792606d606c8df5277c32ccb58f29b9b8603bf83b48639b7aedf6df4fe8171 \\\n    --hash=sha256:ed1708dbf4d2e3a1c5c69110ba2b4eb6678262028afd6c6fbcc5a8dac9cda68e \\\n    --hash=sha256:f2d4380bf5f62daabd7b751ea2339c1a21d1c9463f1feb7fc2bdcea2c29c3160 \\\n    --hash=sha256:f3513916e8c645d0610815c257cbfd3242adfd5c4cfa78be514e5a3ebb42a41b \\\n    --hash=sha256:f8346bfa098532bc1fb6c7ef06783e969d87a99dd1d2a5a18a892c1d7a643c58 \\\n    --hash=sha256:f83fa6cae3fff8e98691248c9320356971b59678a17f20656a9e59cd32cee6d8 \\\n    --hash=sha256:fa6ce8b52c5987b3e34d5674b0ab529a4602b632ebab0a93b07bfb4dfc8f8a33 \\\n    --hash=sha256:fb2b1ecfef1e67897d336de3a0e3f52478182d6a47eda86cbd42504c5cbd009a \\\n    --hash=sha256:fc9ca1c9718cb3b06634c7c8dec57d24e9438b2aa9a0f02b8bb36bf478538880 \\\n    --hash=sha256:fd30d9c67d13d891f2360b2a120186729c111238ac63b43dbd37a5a40670b8ca \\\n    --hash=sha256:fd7699e8fd9969f455ef2926221e0233f81a2542921471382e77a9e2f2b57f4b \\\n    --hash=sha256:fe3b385d996ee0822fd46528d9f0443b880d4d05528fd26a9119a54ec3f91c69\n    # via alphafold3 (pyproject.toml)\n"
        },
        {
          "name": "run_alphafold.py",
          "type": "blob",
          "size": 26.0791015625,
          "content": "# Copyright 2024 DeepMind Technologies Limited\n#\n# AlphaFold 3 source code is licensed under CC BY-NC-SA 4.0. To view a copy of\n# this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n#\n# To request access to the AlphaFold 3 model parameters, follow the process set\n# out at https://github.com/google-deepmind/alphafold3. You may only use these\n# if received directly from Google. Use is subject to terms of use available at\n# https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md\n\n\"\"\"AlphaFold 3 structure prediction script.\n\nAlphaFold 3 source code is licensed under CC BY-NC-SA 4.0. To view a copy of\nthis license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n\nTo request access to the AlphaFold 3 model parameters, follow the process set\nout at https://github.com/google-deepmind/alphafold3. You may only use these\nif received directly from Google. Use is subject to terms of use available at\nhttps://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md\n\"\"\"\n\nfrom collections.abc import Callable, Sequence\nimport csv\nimport dataclasses\nimport datetime\nimport functools\nimport multiprocessing\nimport os\nimport pathlib\nimport shutil\nimport string\nimport textwrap\nimport time\nimport typing\nfrom typing import overload\n\nfrom absl import app\nfrom absl import flags\nfrom alphafold3.common import folding_input\nfrom alphafold3.common import resources\nfrom alphafold3.constants import chemical_components\nimport alphafold3.cpp\nfrom alphafold3.data import featurisation\nfrom alphafold3.data import pipeline\nfrom alphafold3.jax.attention import attention\nfrom alphafold3.model import features\nfrom alphafold3.model import model\nfrom alphafold3.model import params\nfrom alphafold3.model import post_processing\nfrom alphafold3.model.components import utils\nimport haiku as hk\nimport jax\nfrom jax import numpy as jnp\nimport numpy as np\n\n\n_HOME_DIR = pathlib.Path(os.environ.get('HOME'))\n_DEFAULT_MODEL_DIR = _HOME_DIR / 'models'\n_DEFAULT_DB_DIR = _HOME_DIR / 'public_databases'\n\n\n# Input and output paths.\n_JSON_PATH = flags.DEFINE_string(\n    'json_path',\n    None,\n    'Path to the input JSON file.',\n)\n_INPUT_DIR = flags.DEFINE_string(\n    'input_dir',\n    None,\n    'Path to the directory containing input JSON files.',\n)\n_OUTPUT_DIR = flags.DEFINE_string(\n    'output_dir',\n    None,\n    'Path to a directory where the results will be saved.',\n)\nMODEL_DIR = flags.DEFINE_string(\n    'model_dir',\n    _DEFAULT_MODEL_DIR.as_posix(),\n    'Path to the model to use for inference.',\n)\n\n# Control which stages to run.\n_RUN_DATA_PIPELINE = flags.DEFINE_bool(\n    'run_data_pipeline',\n    True,\n    'Whether to run the data pipeline on the fold inputs.',\n)\n_RUN_INFERENCE = flags.DEFINE_bool(\n    'run_inference',\n    True,\n    'Whether to run inference on the fold inputs.',\n)\n\n# Binary paths.\n_JACKHMMER_BINARY_PATH = flags.DEFINE_string(\n    'jackhmmer_binary_path',\n    shutil.which('jackhmmer'),\n    'Path to the Jackhmmer binary.',\n)\n_NHMMER_BINARY_PATH = flags.DEFINE_string(\n    'nhmmer_binary_path',\n    shutil.which('nhmmer'),\n    'Path to the Nhmmer binary.',\n)\n_HMMALIGN_BINARY_PATH = flags.DEFINE_string(\n    'hmmalign_binary_path',\n    shutil.which('hmmalign'),\n    'Path to the Hmmalign binary.',\n)\n_HMMSEARCH_BINARY_PATH = flags.DEFINE_string(\n    'hmmsearch_binary_path',\n    shutil.which('hmmsearch'),\n    'Path to the Hmmsearch binary.',\n)\n_HMMBUILD_BINARY_PATH = flags.DEFINE_string(\n    'hmmbuild_binary_path',\n    shutil.which('hmmbuild'),\n    'Path to the Hmmbuild binary.',\n)\n\n# Database paths.\nDB_DIR = flags.DEFINE_multi_string(\n    'db_dir',\n    (_DEFAULT_DB_DIR.as_posix(),),\n    'Path to the directory containing the databases. Can be specified multiple'\n    ' times to search multiple directories in order.',\n)\n\n_SMALL_BFD_DATABASE_PATH = flags.DEFINE_string(\n    'small_bfd_database_path',\n    '${DB_DIR}/bfd-first_non_consensus_sequences.fasta',\n    'Small BFD database path, used for protein MSA search.',\n)\n_MGNIFY_DATABASE_PATH = flags.DEFINE_string(\n    'mgnify_database_path',\n    '${DB_DIR}/mgy_clusters_2022_05.fa',\n    'Mgnify database path, used for protein MSA search.',\n)\n_UNIPROT_CLUSTER_ANNOT_DATABASE_PATH = flags.DEFINE_string(\n    'uniprot_cluster_annot_database_path',\n    '${DB_DIR}/uniprot_all_2021_04.fa',\n    'UniProt database path, used for protein paired MSA search.',\n)\n_UNIREF90_DATABASE_PATH = flags.DEFINE_string(\n    'uniref90_database_path',\n    '${DB_DIR}/uniref90_2022_05.fa',\n    'UniRef90 database path, used for MSA search. The MSA obtained by '\n    'searching it is used to construct the profile for template search.',\n)\n_NTRNA_DATABASE_PATH = flags.DEFINE_string(\n    'ntrna_database_path',\n    '${DB_DIR}/nt_rna_2023_02_23_clust_seq_id_90_cov_80_rep_seq.fasta',\n    'NT-RNA database path, used for RNA MSA search.',\n)\n_RFAM_DATABASE_PATH = flags.DEFINE_string(\n    'rfam_database_path',\n    '${DB_DIR}/rfam_14_9_clust_seq_id_90_cov_80_rep_seq.fasta',\n    'Rfam database path, used for RNA MSA search.',\n)\n_RNA_CENTRAL_DATABASE_PATH = flags.DEFINE_string(\n    'rna_central_database_path',\n    '${DB_DIR}/rnacentral_active_seq_id_90_cov_80_linclust.fasta',\n    'RNAcentral database path, used for RNA MSA search.',\n)\n_PDB_DATABASE_PATH = flags.DEFINE_string(\n    'pdb_database_path',\n    '${DB_DIR}/mmcif_files',\n    'PDB database directory with mmCIF files path, used for template search.',\n)\n_SEQRES_DATABASE_PATH = flags.DEFINE_string(\n    'seqres_database_path',\n    '${DB_DIR}/pdb_seqres_2022_09_28.fasta',\n    'PDB sequence database path, used for template search.',\n)\n\n# Number of CPUs to use for MSA tools.\n_JACKHMMER_N_CPU = flags.DEFINE_integer(\n    'jackhmmer_n_cpu',\n    min(multiprocessing.cpu_count(), 8),\n    'Number of CPUs to use for Jackhmmer. Default to min(cpu_count, 8). Going'\n    ' beyond 8 CPUs provides very little additional speedup.',\n)\n_NHMMER_N_CPU = flags.DEFINE_integer(\n    'nhmmer_n_cpu',\n    min(multiprocessing.cpu_count(), 8),\n    'Number of CPUs to use for Nhmmer. Default to min(cpu_count, 8). Going'\n    ' beyond 8 CPUs provides very little additional speedup.',\n)\n\n# Template search configuration.\n_MAX_TEMPLATE_DATE = flags.DEFINE_string(\n    'max_template_date',\n    '2021-09-30',  # By default, use the date from the AlphaFold 3 paper.\n    'Maximum template release date to consider. Format: YYYY-MM-DD. All '\n    'templates released after this date will be ignored.',\n)\n\n_CONFORMER_MAX_ITERATIONS = flags.DEFINE_integer(\n    'conformer_max_iterations',\n    None,  # Default to RDKit default parameters value.\n    'Optional override for maximum number of iterations to run for RDKit '\n    'conformer search.',\n)\n\n# JAX inference performance tuning.\n_JAX_COMPILATION_CACHE_DIR = flags.DEFINE_string(\n    'jax_compilation_cache_dir',\n    None,\n    'Path to a directory for the JAX compilation cache.',\n)\n_GPU_DEVICE = flags.DEFINE_integer(\n    'gpu_device',\n    0,\n    'Optional override for the GPU device to use for inference. Defaults to the'\n    ' 1st GPU on the system. Useful on multi-GPU systems to pin each run to a'\n    ' specific GPU.',\n)\n_BUCKETS = flags.DEFINE_list(\n    'buckets',\n    # pyformat: disable\n    ['256', '512', '768', '1024', '1280', '1536', '2048', '2560', '3072',\n     '3584', '4096', '4608', '5120'],\n    # pyformat: enable\n    'Strictly increasing order of token sizes for which to cache compilations.'\n    ' For any input with more tokens than the largest bucket size, a new bucket'\n    ' is created for exactly that number of tokens.',\n)\n_FLASH_ATTENTION_IMPLEMENTATION = flags.DEFINE_enum(\n    'flash_attention_implementation',\n    default='triton',\n    enum_values=['triton', 'cudnn', 'xla'],\n    help=(\n        \"Flash attention implementation to use. 'triton' and 'cudnn' uses a\"\n        ' Triton and cuDNN flash attention implementation, respectively. The'\n        ' Triton kernel is fastest and has been tested more thoroughly. The'\n        \" Triton and cuDNN kernels require Ampere GPUs or later. 'xla' uses an\"\n        ' XLA attention implementation (no flash attention) and is portable'\n        ' across GPU devices.'\n    ),\n)\n_NUM_DIFFUSION_SAMPLES = flags.DEFINE_integer(\n    'num_diffusion_samples',\n    5,\n    'Number of diffusion samples to generate.',\n)\n\n# Output controls.\n_SAVE_EMBEDDINGS = flags.DEFINE_bool(\n    'save_embeddings',\n    False,\n    'Whether to save the final trunk single and pair embeddings in the output.',\n)\n\n\ndef make_model_config(\n    *,\n    flash_attention_implementation: attention.Implementation = 'triton',\n    num_diffusion_samples: int = 5,\n    return_embeddings: bool = False,\n) -> model.Model.Config:\n  \"\"\"Returns a model config with some defaults overridden.\"\"\"\n  config = model.Model.Config()\n  config.global_config.flash_attention_implementation = (\n      flash_attention_implementation\n  )\n  config.heads.diffusion.eval.num_samples = num_diffusion_samples\n  config.return_embeddings = return_embeddings\n  return config\n\n\nclass ModelRunner:\n  \"\"\"Helper class to run structure prediction stages.\"\"\"\n\n  def __init__(\n      self,\n      config: model.Model.Config,\n      device: jax.Device,\n      model_dir: pathlib.Path,\n  ):\n    self._model_config = config\n    self._device = device\n    self._model_dir = model_dir\n\n  @functools.cached_property\n  def model_params(self) -> hk.Params:\n    \"\"\"Loads model parameters from the model directory.\"\"\"\n    return params.get_model_haiku_params(model_dir=self._model_dir)\n\n  @functools.cached_property\n  def _model(\n      self,\n  ) -> Callable[[jnp.ndarray, features.BatchDict], model.ModelResult]:\n    \"\"\"Loads model parameters and returns a jitted model forward pass.\"\"\"\n\n    @hk.transform\n    def forward_fn(batch):\n      return model.Model(self._model_config)(batch)\n\n    return functools.partial(\n        jax.jit(forward_fn.apply, device=self._device), self.model_params\n    )\n\n  def run_inference(\n      self, featurised_example: features.BatchDict, rng_key: jnp.ndarray\n  ) -> model.ModelResult:\n    \"\"\"Computes a forward pass of the model on a featurised example.\"\"\"\n    featurised_example = jax.device_put(\n        jax.tree_util.tree_map(\n            jnp.asarray, utils.remove_invalidly_typed_feats(featurised_example)\n        ),\n        self._device,\n    )\n\n    result = self._model(rng_key, featurised_example)\n    result = jax.tree.map(np.asarray, result)\n    result = jax.tree.map(\n        lambda x: x.astype(jnp.float32) if x.dtype == jnp.bfloat16 else x,\n        result,\n    )\n    result = dict(result)\n    identifier = self.model_params['__meta__']['__identifier__'].tobytes()\n    result['__identifier__'] = identifier\n    return result\n\n  def extract_structures(\n      self,\n      batch: features.BatchDict,\n      result: model.ModelResult,\n      target_name: str,\n  ) -> list[model.InferenceResult]:\n    \"\"\"Generates structures from model outputs.\"\"\"\n    return list(\n        model.Model.get_inference_result(\n            batch=batch, result=result, target_name=target_name\n        )\n    )\n\n  def extract_embeddings(\n      self,\n      result: model.ModelResult,\n  ) -> dict[str, np.ndarray] | None:\n    \"\"\"Extracts embeddings from model outputs.\"\"\"\n    embeddings = {}\n    if 'single_embeddings' in result:\n      embeddings['single_embeddings'] = result['single_embeddings']\n    if 'pair_embeddings' in result:\n      embeddings['pair_embeddings'] = result['pair_embeddings']\n    return embeddings or None\n\n\n@dataclasses.dataclass(frozen=True, slots=True, kw_only=True)\nclass ResultsForSeed:\n  \"\"\"Stores the inference results (diffusion samples) for a single seed.\n\n  Attributes:\n    seed: The seed used to generate the samples.\n    inference_results: The inference results, one per sample.\n    full_fold_input: The fold input that must also include the results of\n      running the data pipeline - MSA and templates.\n    embeddings: The final trunk single and pair embeddings, if requested.\n  \"\"\"\n\n  seed: int\n  inference_results: Sequence[model.InferenceResult]\n  full_fold_input: folding_input.Input\n  embeddings: dict[str, np.ndarray] | None = None\n\n\ndef predict_structure(\n    fold_input: folding_input.Input,\n    model_runner: ModelRunner,\n    buckets: Sequence[int] | None = None,\n    conformer_max_iterations: int | None = None,\n) -> Sequence[ResultsForSeed]:\n  \"\"\"Runs the full inference pipeline to predict structures for each seed.\"\"\"\n\n  print(f'Featurising data for seeds {fold_input.rng_seeds}...')\n  featurisation_start_time = time.time()\n  ccd = chemical_components.cached_ccd(user_ccd=fold_input.user_ccd)\n  featurised_examples = featurisation.featurise_input(\n      fold_input=fold_input,\n      buckets=buckets,\n      ccd=ccd,\n      verbose=True,\n      conformer_max_iterations=conformer_max_iterations,\n  )\n  print(\n      f'Featurising data for seeds {fold_input.rng_seeds} took '\n      f' {time.time() - featurisation_start_time:.2f} seconds.'\n  )\n  all_inference_start_time = time.time()\n  all_inference_results = []\n  for seed, example in zip(fold_input.rng_seeds, featurised_examples):\n    print(f'Running model inference for seed {seed}...')\n    inference_start_time = time.time()\n    rng_key = jax.random.PRNGKey(seed)\n    result = model_runner.run_inference(example, rng_key)\n    print(\n        f'Running model inference for seed {seed} took '\n        f' {time.time() - inference_start_time:.2f} seconds.'\n    )\n    print(f'Extracting output structures (one per sample) for seed {seed}...')\n    extract_structures = time.time()\n    inference_results = model_runner.extract_structures(\n        batch=example, result=result, target_name=fold_input.name\n    )\n    print(\n        f'Extracting output structures (one per sample) for seed {seed} took '\n        f' {time.time() - extract_structures:.2f} seconds.'\n    )\n\n    embeddings = model_runner.extract_embeddings(result)\n\n    all_inference_results.append(\n        ResultsForSeed(\n            seed=seed,\n            inference_results=inference_results,\n            full_fold_input=fold_input,\n            embeddings=embeddings,\n        )\n    )\n    print(\n        'Running model inference and extracting output structures for seed'\n        f' {seed} took {time.time() - inference_start_time:.2f} seconds.'\n    )\n  print(\n      'Running model inference and extracting output structures for seeds'\n      f' {fold_input.rng_seeds} took'\n      f' {time.time() - all_inference_start_time:.2f} seconds.'\n  )\n  return all_inference_results\n\n\ndef write_fold_input_json(\n    fold_input: folding_input.Input,\n    output_dir: os.PathLike[str] | str,\n) -> None:\n  \"\"\"Writes the input JSON to the output directory.\"\"\"\n  os.makedirs(output_dir, exist_ok=True)\n  with open(\n      os.path.join(output_dir, f'{fold_input.sanitised_name()}_data.json'), 'wt'\n  ) as f:\n    f.write(fold_input.to_json())\n\n\ndef write_outputs(\n    all_inference_results: Sequence[ResultsForSeed],\n    output_dir: os.PathLike[str] | str,\n    job_name: str,\n) -> None:\n  \"\"\"Writes outputs to the specified output directory.\"\"\"\n  ranking_scores = []\n  max_ranking_score = None\n  max_ranking_result = None\n\n  output_terms = (\n      pathlib.Path(alphafold3.cpp.__file__).parent / 'OUTPUT_TERMS_OF_USE.md'\n  ).read_text()\n\n  os.makedirs(output_dir, exist_ok=True)\n  for results_for_seed in all_inference_results:\n    seed = results_for_seed.seed\n    for sample_idx, result in enumerate(results_for_seed.inference_results):\n      sample_dir = os.path.join(output_dir, f'seed-{seed}_sample-{sample_idx}')\n      os.makedirs(sample_dir, exist_ok=True)\n      post_processing.write_output(\n          inference_result=result, output_dir=sample_dir\n      )\n      ranking_score = float(result.metadata['ranking_score'])\n      ranking_scores.append((seed, sample_idx, ranking_score))\n      if max_ranking_score is None or ranking_score > max_ranking_score:\n        max_ranking_score = ranking_score\n        max_ranking_result = result\n\n    if embeddings := results_for_seed.embeddings:\n      embeddings_dir = os.path.join(output_dir, f'seed-{seed}_embeddings')\n      os.makedirs(embeddings_dir, exist_ok=True)\n      post_processing.write_embeddings(\n          embeddings=embeddings, output_dir=embeddings_dir\n      )\n\n  if max_ranking_result is not None:  # True iff ranking_scores non-empty.\n    post_processing.write_output(\n        inference_result=max_ranking_result,\n        output_dir=output_dir,\n        # The output terms of use are the same for all seeds/samples.\n        terms_of_use=output_terms,\n        name=job_name,\n    )\n    # Save csv of ranking scores with seeds and sample indices, to allow easier\n    # comparison of ranking scores across different runs.\n    with open(os.path.join(output_dir, 'ranking_scores.csv'), 'wt') as f:\n      writer = csv.writer(f)\n      writer.writerow(['seed', 'sample', 'ranking_score'])\n      writer.writerows(ranking_scores)\n\n\n@overload\ndef process_fold_input(\n    fold_input: folding_input.Input,\n    data_pipeline_config: pipeline.DataPipelineConfig | None,\n    model_runner: None,\n    output_dir: os.PathLike[str] | str,\n    buckets: Sequence[int] | None = None,\n) -> folding_input.Input:\n  ...\n\n\n@overload\ndef process_fold_input(\n    fold_input: folding_input.Input,\n    data_pipeline_config: pipeline.DataPipelineConfig | None,\n    model_runner: ModelRunner,\n    output_dir: os.PathLike[str] | str,\n    buckets: Sequence[int] | None = None,\n) -> Sequence[ResultsForSeed]:\n  ...\n\n\ndef replace_db_dir(path_with_db_dir: str, db_dirs: Sequence[str]) -> str:\n  \"\"\"Replaces the DB_DIR placeholder in a path with the given DB_DIR.\"\"\"\n  template = string.Template(path_with_db_dir)\n  if 'DB_DIR' in template.get_identifiers():\n    for db_dir in db_dirs:\n      path = template.substitute(DB_DIR=db_dir)\n      if os.path.exists(path):\n        return path\n    raise FileNotFoundError(\n        f'{path_with_db_dir} with ${{DB_DIR}} not found in any of {db_dirs}.'\n    )\n  if not os.path.exists(path_with_db_dir):\n    raise FileNotFoundError(f'{path_with_db_dir} does not exist.')\n  return path_with_db_dir\n\n\ndef process_fold_input(\n    fold_input: folding_input.Input,\n    data_pipeline_config: pipeline.DataPipelineConfig | None,\n    model_runner: ModelRunner | None,\n    output_dir: os.PathLike[str] | str,\n    buckets: Sequence[int] | None = None,\n    conformer_max_iterations: int | None = None,\n) -> folding_input.Input | Sequence[ResultsForSeed]:\n  \"\"\"Runs data pipeline and/or inference on a single fold input.\n\n  Args:\n    fold_input: Fold input to process.\n    data_pipeline_config: Data pipeline config to use. If None, skip the data\n      pipeline.\n    model_runner: Model runner to use. If None, skip inference.\n    output_dir: Output directory to write to.\n    buckets: Bucket sizes to pad the data to, to avoid excessive re-compilation\n      of the model. If None, calculate the appropriate bucket size from the\n      number of tokens. If not None, must be a sequence of at least one integer,\n      in strictly increasing order. Will raise an error if the number of tokens\n      is more than the largest bucket size.\n    conformer_max_iterations: Optional override for maximum number of iterations\n      to run for RDKit conformer search.\n\n  Returns:\n    The processed fold input, or the inference results for each seed.\n\n  Raises:\n    ValueError: If the fold input has no chains.\n  \"\"\"\n  print(f'Processing fold input {fold_input.name}')\n\n  if not fold_input.chains:\n    raise ValueError('Fold input has no chains.')\n\n  if os.path.exists(output_dir) and os.listdir(output_dir):\n    new_output_dir = (\n        f'{output_dir}_{datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")}'\n    )\n    print(\n        f'Output directory {output_dir} exists and non-empty, using instead '\n        f' {new_output_dir}.'\n    )\n    output_dir = new_output_dir\n\n  if model_runner is not None:\n    # If we're running inference, check we can load the model parameters before\n    # (possibly) launching the data pipeline.\n    print('Checking we can load the model parameters...')\n    _ = model_runner.model_params\n\n  if data_pipeline_config is None:\n    print('Skipping data pipeline...')\n  else:\n    print('Running data pipeline...')\n    fold_input = pipeline.DataPipeline(data_pipeline_config).process(fold_input)\n\n  print(f'Output directory: {output_dir}')\n  print(f'Writing model input JSON to {output_dir}')\n  write_fold_input_json(fold_input, output_dir)\n  if model_runner is None:\n    print('Skipping inference...')\n    output = fold_input\n  else:\n    print(\n        f'Predicting 3D structure for {fold_input.name} for seed(s)'\n        f' {fold_input.rng_seeds}...'\n    )\n    all_inference_results = predict_structure(\n        fold_input=fold_input,\n        model_runner=model_runner,\n        buckets=buckets,\n        conformer_max_iterations=conformer_max_iterations,\n    )\n    print(\n        f'Writing outputs for {fold_input.name} for seed(s)'\n        f' {fold_input.rng_seeds}...'\n    )\n    write_outputs(\n        all_inference_results=all_inference_results,\n        output_dir=output_dir,\n        job_name=fold_input.sanitised_name(),\n    )\n    output = all_inference_results\n\n  print(f'Done processing fold input {fold_input.name}.')\n  return output\n\n\ndef main(_):\n  if _JAX_COMPILATION_CACHE_DIR.value is not None:\n    jax.config.update(\n        'jax_compilation_cache_dir', _JAX_COMPILATION_CACHE_DIR.value\n    )\n\n  if _JSON_PATH.value is None == _INPUT_DIR.value is None:\n    raise ValueError(\n        'Exactly one of --json_path or --input_dir must be specified.'\n    )\n\n  if not _RUN_INFERENCE.value and not _RUN_DATA_PIPELINE.value:\n    raise ValueError(\n        'At least one of --run_inference or --run_data_pipeline must be'\n        ' set to true.'\n    )\n\n  if _INPUT_DIR.value is not None:\n    fold_inputs = folding_input.load_fold_inputs_from_dir(\n        pathlib.Path(_INPUT_DIR.value)\n    )\n  elif _JSON_PATH.value is not None:\n    fold_inputs = folding_input.load_fold_inputs_from_path(\n        pathlib.Path(_JSON_PATH.value)\n    )\n  else:\n    raise AssertionError(\n        'Exactly one of --json_path or --input_dir must be specified.'\n    )\n\n  # Make sure we can create the output directory before running anything.\n  try:\n    os.makedirs(_OUTPUT_DIR.value, exist_ok=True)\n  except OSError as e:\n    print(f'Failed to create output directory {_OUTPUT_DIR.value}: {e}')\n    raise\n\n  if _RUN_INFERENCE.value:\n    # Fail early on incompatible devices, but only if we're running inference.\n    gpu_devices = jax.local_devices(backend='gpu')\n    if gpu_devices:\n      compute_capability = float(\n          gpu_devices[_GPU_DEVICE.value].compute_capability\n      )\n      if compute_capability < 6.0:\n        raise ValueError(\n            'AlphaFold 3 requires at least GPU compute capability 6.0 (see'\n            ' https://developer.nvidia.com/cuda-gpus).'\n        )\n      elif 7.0 <= compute_capability < 8.0:\n        xla_flags = os.environ.get('XLA_FLAGS')\n        required_flag = '--xla_disable_hlo_passes=custom-kernel-fusion-rewriter'\n        if not xla_flags or required_flag not in xla_flags:\n          raise ValueError(\n              'For devices with GPU compute capability 7.x (see'\n              ' https://developer.nvidia.com/cuda-gpus) the ENV XLA_FLAGS must'\n              f' include \"{required_flag}\".'\n          )\n\n  notice = textwrap.wrap(\n      'Running AlphaFold 3. Please note that standard AlphaFold 3 model'\n      ' parameters are only available under terms of use provided at'\n      ' https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md.'\n      ' If you do not agree to these terms and are using AlphaFold 3 derived'\n      ' model parameters, cancel execution of AlphaFold 3 inference with'\n      ' CTRL-C, and do not use the model parameters.',\n      break_long_words=False,\n      break_on_hyphens=False,\n      width=80,\n  )\n  print('\\n'.join(notice))\n\n  if _RUN_DATA_PIPELINE.value:\n    expand_path = lambda x: replace_db_dir(x, DB_DIR.value)\n    max_template_date = datetime.date.fromisoformat(_MAX_TEMPLATE_DATE.value)\n    data_pipeline_config = pipeline.DataPipelineConfig(\n        jackhmmer_binary_path=_JACKHMMER_BINARY_PATH.value,\n        nhmmer_binary_path=_NHMMER_BINARY_PATH.value,\n        hmmalign_binary_path=_HMMALIGN_BINARY_PATH.value,\n        hmmsearch_binary_path=_HMMSEARCH_BINARY_PATH.value,\n        hmmbuild_binary_path=_HMMBUILD_BINARY_PATH.value,\n        small_bfd_database_path=expand_path(_SMALL_BFD_DATABASE_PATH.value),\n        mgnify_database_path=expand_path(_MGNIFY_DATABASE_PATH.value),\n        uniprot_cluster_annot_database_path=expand_path(\n            _UNIPROT_CLUSTER_ANNOT_DATABASE_PATH.value\n        ),\n        uniref90_database_path=expand_path(_UNIREF90_DATABASE_PATH.value),\n        ntrna_database_path=expand_path(_NTRNA_DATABASE_PATH.value),\n        rfam_database_path=expand_path(_RFAM_DATABASE_PATH.value),\n        rna_central_database_path=expand_path(_RNA_CENTRAL_DATABASE_PATH.value),\n        pdb_database_path=expand_path(_PDB_DATABASE_PATH.value),\n        seqres_database_path=expand_path(_SEQRES_DATABASE_PATH.value),\n        jackhmmer_n_cpu=_JACKHMMER_N_CPU.value,\n        nhmmer_n_cpu=_NHMMER_N_CPU.value,\n        max_template_date=max_template_date,\n    )\n  else:\n    print('Skipping running the data pipeline.')\n    data_pipeline_config = None\n\n  if _RUN_INFERENCE.value:\n    devices = jax.local_devices(backend='gpu')\n    print(\n        f'Found local devices: {devices}, using device {_GPU_DEVICE.value}:'\n        f' {devices[_GPU_DEVICE.value]}'\n    )\n\n    print('Building model from scratch...')\n    model_runner = ModelRunner(\n        config=make_model_config(\n            flash_attention_implementation=typing.cast(\n                attention.Implementation, _FLASH_ATTENTION_IMPLEMENTATION.value\n            ),\n            num_diffusion_samples=_NUM_DIFFUSION_SAMPLES.value,\n            return_embeddings=_SAVE_EMBEDDINGS.value,\n        ),\n        device=devices[_GPU_DEVICE.value],\n        model_dir=pathlib.Path(MODEL_DIR.value),\n    )\n  else:\n    print('Skipping running model inference.')\n    model_runner = None\n\n  print('Processing fold inputs.')\n  num_fold_inputs = 0\n  for fold_input in fold_inputs:\n    print(f'Processing fold input #{num_fold_inputs + 1}')\n    process_fold_input(\n        fold_input=fold_input,\n        data_pipeline_config=data_pipeline_config,\n        model_runner=model_runner,\n        output_dir=os.path.join(_OUTPUT_DIR.value, fold_input.sanitised_name()),\n        buckets=tuple(int(bucket) for bucket in _BUCKETS.value),\n        conformer_max_iterations=_CONFORMER_MAX_ITERATIONS.value,\n    )\n    num_fold_inputs += 1\n\n  print(f'Done processing {num_fold_inputs} fold inputs.')\n\n\nif __name__ == '__main__':\n  flags.mark_flags_as_required([\n      'output_dir',\n  ])\n  app.run(main)\n"
        },
        {
          "name": "run_alphafold_data_test.py",
          "type": "blob",
          "size": 9.3359375,
          "content": "# Copyright 2024 DeepMind Technologies Limited\n#\n# AlphaFold 3 source code is licensed under CC BY-NC-SA 4.0. To view a copy of\n# this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n#\n# To request access to the AlphaFold 3 model parameters, follow the process set\n# out at https://github.com/google-deepmind/alphafold3. You may only use these\n# if received directly from Google. Use is subject to terms of use available at\n# https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md\n\n\"\"\"Tests the AlphaFold 3 data pipeline.\"\"\"\n\nimport contextlib\nimport datetime\nimport difflib\nimport functools\nimport hashlib\nimport json\nimport os\nimport pathlib\nimport pickle\nfrom typing import Any\n\nfrom absl.testing import absltest\nfrom absl.testing import parameterized\nfrom alphafold3 import structure\nfrom alphafold3.common import folding_input\nfrom alphafold3.common import resources\nfrom alphafold3.common.testing import data as testing_data\nfrom alphafold3.constants import chemical_components\nfrom alphafold3.data import featurisation\nfrom alphafold3.data import pipeline\nfrom alphafold3.model.atom_layout import atom_layout\nfrom alphafold3.structure import test_utils\nimport jax\nimport numpy as np\n\nimport run_alphafold\nimport shutil\n\n\n_JACKHMMER_BINARY_PATH = shutil.which('jackhmmer')\n_NHMMER_BINARY_PATH = shutil.which('nhmmer')\n_HMMALIGN_BINARY_PATH = shutil.which('hmmalign')\n_HMMSEARCH_BINARY_PATH = shutil.which('hmmsearch')\n_HMMBUILD_BINARY_PATH = shutil.which('hmmbuild')\n\n\n@contextlib.contextmanager\ndef _output(name: str):\n  with open(result_path := f'{absltest.TEST_TMPDIR.value}/{name}', \"wb\") as f:\n    yield result_path, f\n\n\n@functools.singledispatch\ndef _hash_data(x: Any, /) -> str:\n  if x is None:\n    return '<<None>>'\n  return _hash_data(json.dumps(x).encode('utf-8'))\n\n\n@_hash_data.register\ndef _(x: bytes, /) -> str:\n  return hashlib.sha256(x).hexdigest()\n\n\n@_hash_data.register\ndef _(x: jax.Array) -> str:\n  return _hash_data(jax.device_get(x))\n\n\n@_hash_data.register\ndef _(x: np.ndarray) -> str:\n  if x.dtype == object:\n    return ';'.join(map(_hash_data, x.ravel().tolist()))\n  return _hash_data(x.tobytes())\n\n\n@_hash_data.register\ndef _(_: structure.Structure) -> str:\n  return '<<structure>>'\n\n\n@_hash_data.register\ndef _(_: atom_layout.AtomLayout) -> str:\n  return '<<atom-layout>>'\n\n\ndef _generate_diff(actual: str, expected: str) -> str:\n  return '\\n'.join(\n      difflib.unified_diff(\n          expected.split('\\n'),\n          actual.split('\\n'),\n          fromfile='expected',\n          tofile='actual',\n          lineterm='',\n      )\n  )\n\n\nclass DataPipelineTest(test_utils.StructureTestCase):\n  \"\"\"Test AlphaFold 3 inference.\"\"\"\n\n  def setUp(self):\n    super().setUp()\n    small_bfd_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/bfd-first_non_consensus_sequences__subsampled_1000.fasta'\n    ).path()\n    mgnify_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/mgy_clusters__subsampled_1000.fa'\n    ).path()\n    uniprot_cluster_annot_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/uniprot_all__subsampled_1000.fasta'\n    ).path()\n    uniref90_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/uniref90__subsampled_1000.fasta'\n    ).path()\n    ntrna_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/nt_rna_2023_02_23_clust_seq_id_90_cov_80_rep_seq__subsampled_1000.fasta'\n    ).path()\n    rfam_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/rfam_14_4_clustered_rep_seq__subsampled_1000.fasta'\n    ).path()\n    rna_central_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/rnacentral_active_seq_id_90_cov_80_linclust__subsampled_1000.fasta'\n    ).path()\n    pdb_database_path = testing_data.Data(\n        resources.ROOT / 'test_data/miniature_databases/pdb_mmcif'\n    ).path()\n    seqres_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/pdb_seqres_2022_09_28__subsampled_1000.fasta'\n    ).path()\n\n    self._data_pipeline_config = pipeline.DataPipelineConfig(\n        jackhmmer_binary_path=_JACKHMMER_BINARY_PATH,\n        nhmmer_binary_path=_NHMMER_BINARY_PATH,\n        hmmalign_binary_path=_HMMALIGN_BINARY_PATH,\n        hmmsearch_binary_path=_HMMSEARCH_BINARY_PATH,\n        hmmbuild_binary_path=_HMMBUILD_BINARY_PATH,\n        small_bfd_database_path=small_bfd_database_path,\n        mgnify_database_path=mgnify_database_path,\n        uniprot_cluster_annot_database_path=uniprot_cluster_annot_database_path,\n        uniref90_database_path=uniref90_database_path,\n        ntrna_database_path=ntrna_database_path,\n        rfam_database_path=rfam_database_path,\n        rna_central_database_path=rna_central_database_path,\n        pdb_database_path=pdb_database_path,\n        seqres_database_path=seqres_database_path,\n        max_template_date=datetime.date(2021, 9, 30),\n    )\n    test_input = {\n        'name': '5tgy',\n        'modelSeeds': [1234],\n        'sequences': [\n            {\n                'protein': {\n                    'id': 'A',\n                    'sequence': 'SEFEKLRQTGDELVQAFQRLREIFDKGDDDSLEQVLEEIEELIQKHRQLFDNRQEAADTEAAKQGDQWVQLFQRFREAIDKGDKDSLEQLLEELEQALQKIRELAEKKN',\n                    'modifications': [],\n                    'unpairedMsa': None,\n                    'pairedMsa': None,\n                }\n            },\n            {'ligand': {'id': 'B', 'ccdCodes': ['7BU']}},\n        ],\n        'dialect': folding_input.JSON_DIALECT,\n        'version': folding_input.JSON_VERSION,\n    }\n    self._test_input_json = json.dumps(test_input)\n\n  def compare_golden(self, result_path: str) -> None:\n    filename = os.path.split(result_path)[1]\n    golden_path = testing_data.Data(\n        resources.ROOT / f'test_data/{filename}'\n    ).path()\n    with open(golden_path, 'r') as golden_file:\n      golden_text = golden_file.read()\n    with open(result_path, 'r') as result_file:\n      result_text = result_file.read()\n\n    diff = _generate_diff(result_text, golden_text)\n\n    self.assertEqual(diff, \"\", f\"Result differs from golden:\\n{diff}\")\n\n  def test_config(self):\n    model_config = run_alphafold.make_model_config()\n    model_config_as_str = json.dumps(\n        model_config.as_dict(), sort_keys=True, indent=2\n    )\n    with _output('model_config.json') as (result_path, output):\n      output.write(model_config_as_str.encode('utf-8'))\n    self.compare_golden(result_path)\n\n  def test_featurisation(self):\n    \"\"\"Run featurisation and assert that the output is as expected.\"\"\"\n    fold_input = folding_input.Input.from_json(self._test_input_json)\n    data_pipeline = pipeline.DataPipeline(self._data_pipeline_config)\n    full_fold_input = data_pipeline.process(fold_input)\n    featurised_example = featurisation.featurise_input(\n        full_fold_input,\n        ccd=chemical_components.cached_ccd(),\n        buckets=None,\n    )\n\n    with _output('featurised_example.pkl') as (_, output):\n      output.write(pickle.dumps(featurised_example))\n    featurised_example = jax.tree_util.tree_map(_hash_data, featurised_example)\n    with _output('featurised_example.json') as (result_path, output):\n      output.write(\n          json.dumps(featurised_example, sort_keys=True, indent=2).encode(\n              'utf-8'\n          )\n      )\n    self.compare_golden(result_path)\n\n  def test_write_input_json(self):\n    fold_input = folding_input.Input.from_json(self._test_input_json)\n    output_dir = self.create_tempdir().full_path\n    run_alphafold.write_fold_input_json(fold_input, output_dir)\n    with open(\n        os.path.join(output_dir, f'{fold_input.sanitised_name()}_data.json'),\n        'rt',\n    ) as f:\n      actual_fold_input = folding_input.Input.from_json(f.read())\n\n    self.assertEqual(actual_fold_input, fold_input)\n\n  def test_process_fold_input_runs_only_data_pipeline(self):\n    fold_input = folding_input.Input.from_json(self._test_input_json)\n    output_dir = self.create_tempdir().full_path\n    run_alphafold.process_fold_input(\n        fold_input=fold_input,\n        data_pipeline_config=self._data_pipeline_config,\n        model_runner=None,\n        output_dir=output_dir,\n    )\n    with open(\n        os.path.join(output_dir, f'{fold_input.sanitised_name()}_data.json'),\n        'rt',\n    ) as f:\n      actual_fold_input = folding_input.Input.from_json(f.read())\n\n    featurisation.validate_fold_input(actual_fold_input)\n\n  @parameterized.product(num_db_dirs=tuple(range(1, 3)))\n  def test_replace_db_dir(self, num_db_dirs: int) -> None:\n    \"\"\"Test that the db_dir is replaced correctly.\"\"\"\n    db_dirs = [pathlib.Path(self.create_tempdir()) for _ in range(num_db_dirs)]\n    db_dirs_posix = [db_dir.as_posix() for db_dir in db_dirs]\n\n    for i, db_dir in enumerate(db_dirs):\n      for j in range(i + 1):\n        (db_dir / f'filename{j}.txt').write_text(f'hello world {i}')\n\n    for i in range(num_db_dirs):\n      self.assertEqual(\n          pathlib.Path(\n              run_alphafold.replace_db_dir(\n                  f'${{DB_DIR}}/filename{i}.txt', db_dirs_posix\n              )\n          ).read_text(),\n          f'hello world {i}',\n      )\n    with self.assertRaises(FileNotFoundError):\n      run_alphafold.replace_db_dir(\n          f'${{DB_DIR}}/filename{num_db_dirs}.txt', db_dirs_posix\n      )\n\n\nif __name__ == '__main__':\n  absltest.main()\n"
        },
        {
          "name": "run_alphafold_test.py",
          "type": "blob",
          "size": 13.443359375,
          "content": "# Copyright 2024 DeepMind Technologies Limited\n#\n# AlphaFold 3 source code is licensed under CC BY-NC-SA 4.0. To view a copy of\n# this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n#\n# To request access to the AlphaFold 3 model parameters, follow the process set\n# out at https://github.com/google-deepmind/alphafold3. You may only use these\n# if received directly from Google. Use is subject to terms of use available at\n# https://github.com/google-deepmind/alphafold3/blob/main/WEIGHTS_TERMS_OF_USE.md\n\n\"\"\"Tests end-to-end running of AlphaFold 3.\"\"\"\n\nimport contextlib\nimport csv\nimport datetime\nimport difflib\nimport functools\nimport hashlib\nimport json\nimport os\nimport pathlib\nimport pickle\nfrom typing import Any\n\nfrom absl import logging\nfrom absl.testing import absltest\nfrom absl.testing import parameterized\nfrom alphafold3 import structure\nfrom alphafold3.common import folding_input\nfrom alphafold3.common import resources\nfrom alphafold3.common.testing import data as testing_data\nfrom alphafold3.data import pipeline\nfrom alphafold3.model.atom_layout import atom_layout\nfrom alphafold3.model.scoring import alignment\nfrom alphafold3.structure import test_utils\nimport jax\nimport numpy as np\n\nimport run_alphafold\nimport shutil\n\n\n_JACKHMMER_BINARY_PATH = shutil.which('jackhmmer')\n_NHMMER_BINARY_PATH = shutil.which('nhmmer')\n_HMMALIGN_BINARY_PATH = shutil.which('hmmalign')\n_HMMSEARCH_BINARY_PATH = shutil.which('hmmsearch')\n_HMMBUILD_BINARY_PATH = shutil.which('hmmbuild')\n\n\n@contextlib.contextmanager\ndef _output(name: str):\n  with open(result_path := f'{absltest.TEST_TMPDIR.value}/{name}', \"wb\") as f:\n    yield result_path, f\n\n\njax.config.update('jax_enable_compilation_cache', False)\n\n\ndef _generate_diff(actual: str, expected: str) -> str:\n  return '\\n'.join(\n      difflib.unified_diff(\n          expected.split('\\n'),\n          actual.split('\\n'),\n          fromfile='expected',\n          tofile='actual',\n          lineterm='',\n      )\n  )\n\n\n@functools.singledispatch\ndef _hash_data(x: Any, /) -> str:\n  if x is None:\n    return '<<None>>'\n  return _hash_data(json.dumps(x).encode('utf-8'))\n\n\n@_hash_data.register\ndef _(x: bytes, /) -> str:\n  return hashlib.sha256(x).hexdigest()\n\n\n@_hash_data.register\ndef _(x: jax.Array) -> str:\n  return _hash_data(jax.device_get(x))\n\n\n@_hash_data.register\ndef _(x: np.ndarray) -> str:\n  if x.dtype == object:\n    return ';'.join(map(_hash_data, x.ravel().tolist()))\n  return _hash_data(x.tobytes())\n\n\n@_hash_data.register\ndef _(_: structure.Structure) -> str:\n  return '<<structure>>'\n\n\n@_hash_data.register\ndef _(_: atom_layout.AtomLayout) -> str:\n  return '<<atom-layout>>'\n\n\nclass InferenceTest(test_utils.StructureTestCase):\n  \"\"\"Test AlphaFold 3 inference.\"\"\"\n\n  def setUp(self):\n    super().setUp()\n    small_bfd_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/bfd-first_non_consensus_sequences__subsampled_1000.fasta'\n    ).path()\n    mgnify_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/mgy_clusters__subsampled_1000.fa'\n    ).path()\n    uniprot_cluster_annot_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/uniprot_all__subsampled_1000.fasta'\n    ).path()\n    uniref90_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/uniref90__subsampled_1000.fasta'\n    ).path()\n    ntrna_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/nt_rna_2023_02_23_clust_seq_id_90_cov_80_rep_seq__subsampled_1000.fasta'\n    ).path()\n    rfam_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/rfam_14_4_clustered_rep_seq__subsampled_1000.fasta'\n    ).path()\n    rna_central_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/rnacentral_active_seq_id_90_cov_80_linclust__subsampled_1000.fasta'\n    ).path()\n    pdb_database_path = testing_data.Data(\n        resources.ROOT / 'test_data/miniature_databases/pdb_mmcif'\n    ).path()\n    seqres_database_path = testing_data.Data(\n        resources.ROOT\n        / 'test_data/miniature_databases/pdb_seqres_2022_09_28__subsampled_1000.fasta'\n    ).path()\n\n    self._data_pipeline_config = pipeline.DataPipelineConfig(\n        jackhmmer_binary_path=_JACKHMMER_BINARY_PATH,\n        nhmmer_binary_path=_NHMMER_BINARY_PATH,\n        hmmalign_binary_path=_HMMALIGN_BINARY_PATH,\n        hmmsearch_binary_path=_HMMSEARCH_BINARY_PATH,\n        hmmbuild_binary_path=_HMMBUILD_BINARY_PATH,\n        small_bfd_database_path=small_bfd_database_path,\n        mgnify_database_path=mgnify_database_path,\n        uniprot_cluster_annot_database_path=uniprot_cluster_annot_database_path,\n        uniref90_database_path=uniref90_database_path,\n        ntrna_database_path=ntrna_database_path,\n        rfam_database_path=rfam_database_path,\n        rna_central_database_path=rna_central_database_path,\n        pdb_database_path=pdb_database_path,\n        seqres_database_path=seqres_database_path,\n        max_template_date=datetime.date(2021, 9, 30),\n    )\n    test_input = {\n        'name': '5tgy',\n        'modelSeeds': [1234],\n        'sequences': [\n            {\n                'protein': {\n                    'id': 'A',\n                    'sequence': 'SEFEKLRQTGDELVQAFQRLREIFDKGDDDSLEQVLEEIEELIQKHRQLFDNRQEAADTEAAKQGDQWVQLFQRFREAIDKGDKDSLEQLLEELEQALQKIRELAEKKN',\n                    'modifications': [],\n                    'unpairedMsa': None,\n                    'pairedMsa': None,\n                }\n            },\n            {'ligand': {'id': 'B', 'ccdCodes': ['7BU']}},\n        ],\n        'dialect': folding_input.JSON_DIALECT,\n        'version': folding_input.JSON_VERSION,\n    }\n    self._test_input_json = json.dumps(test_input)\n    self._runner = run_alphafold.ModelRunner(\n        config=run_alphafold.make_model_config(return_embeddings=True),\n        device=jax.local_devices()[0],\n        model_dir=pathlib.Path(run_alphafold.MODEL_DIR.value),\n    )\n\n  def compare_golden(self, result_path: str) -> None:\n    filename = os.path.split(result_path)[1]\n    golden_path = testing_data.Data(\n        resources.ROOT / f'test_data/{filename}'\n    ).path()\n    with open(golden_path, 'r') as golden_file:\n      golden_text = golden_file.read()\n    with open(result_path, 'r') as result_file:\n      result_text = result_file.read()\n\n    diff = _generate_diff(result_text, golden_text)\n\n    self.assertEqual(diff, \"\", f\"Result differs from golden:\\n{diff}\")\n\n  def test_model_inference(self):\n    \"\"\"Run model inference and assert that the output is as expected.\"\"\"\n    featurised_examples = pickle.loads(\n        (resources.ROOT / 'test_data' / 'featurised_example.pkl').read_bytes()\n    )\n\n    self.assertLen(featurised_examples, 1)\n    featurised_example = featurised_examples[0]\n    inference_result = self._runner.run_inference(\n        featurised_example, jax.random.PRNGKey(0)\n    )\n    inference_result = jax.tree_util.tree_map(_hash_data, inference_result)\n    self.assertIsNotNone(inference_result)\n    embeddings = self._runner.extract_embeddings(result=inference_result)\n    self.assertLen(embeddings, 2)\n\n  def test_process_fold_input_runs_only_inference(self):\n    with self.assertRaisesRegex(ValueError, 'missing unpaired MSA.'):\n      run_alphafold.process_fold_input(\n          fold_input=folding_input.Input.from_json(self._test_input_json),\n          # No data pipeline config, so featursation will run first, and fail\n          # since the input is missing MSAs.\n          data_pipeline_config=None,\n          model_runner=self._runner,\n          output_dir=self.create_tempdir().full_path,\n      )\n\n  @parameterized.named_parameters(\n      {\n          'testcase_name': 'default_bucket',\n          'bucket': None,\n          'exp_ranking_scores': [0.69, 0.69, 0.72, 0.75, 0.70],\n      },\n      {\n          'testcase_name': 'bucket_1024',\n          'bucket': 1024,\n          'exp_ranking_scores': [0.69, 0.71, 0.71, 0.69, 0.70],\n      },\n  )\n  def test_inference(self, bucket, exp_ranking_scores):\n    \"\"\"Run AlphaFold 3 inference.\"\"\"\n\n    ### Prepare inputs.\n    fold_input = folding_input.Input.from_json(self._test_input_json)\n\n    output_dir = self.create_tempdir().full_path\n    actual = run_alphafold.process_fold_input(\n        fold_input,\n        self._data_pipeline_config,\n        run_alphafold.ModelRunner(\n            config=run_alphafold.make_model_config(return_embeddings=True),\n            device=jax.local_devices(backend='gpu')[0],\n            model_dir=pathlib.Path(run_alphafold.MODEL_DIR.value),\n        ),\n        output_dir=output_dir,\n        buckets=None if bucket is None else [bucket],\n    )\n    logging.info('finished get_inference_result')\n    expected_model_cif_filename = f'{fold_input.sanitised_name()}_model.cif'\n    expected_summary_confidences_filename = (\n        f'{fold_input.sanitised_name()}_summary_confidences.json'\n    )\n    expected_confidences_filename = (\n        f'{fold_input.sanitised_name()}_confidences.json'\n    )\n    expected_data_json_filename = f'{fold_input.sanitised_name()}_data.json'\n\n    self.assertSameElements(\n        os.listdir(output_dir),\n        [\n            # Subdirectories, one for each sample and one for embeddings.\n            'seed-1234_sample-0',\n            'seed-1234_sample-1',\n            'seed-1234_sample-2',\n            'seed-1234_sample-3',\n            'seed-1234_sample-4',\n            'seed-1234_embeddings',\n            # Top ranking result.\n            expected_confidences_filename,\n            expected_model_cif_filename,\n            expected_summary_confidences_filename,\n            # Ranking scores for all samples.\n            'ranking_scores.csv',\n            # The input JSON defining the job.\n            expected_data_json_filename,\n            # The output terms of use.\n            'TERMS_OF_USE.md',\n        ],\n    )\n    embeddings_dir = os.path.join(output_dir, 'seed-1234_embeddings')\n    self.assertSameElements(os.listdir(embeddings_dir), ['embeddings.npz'])\n\n    with open(os.path.join(embeddings_dir, 'embeddings.npz'), 'rb') as f:\n      embeddings = np.load(f)\n      self.assertSameElements(\n          embeddings.keys(), ['single_embeddings', 'pair_embeddings']\n      )\n      self.assertEqual(embeddings['single_embeddings'].ndim, 2)\n      self.assertEqual(embeddings['single_embeddings'].shape[-1], 384)\n      self.assertEqual(embeddings['pair_embeddings'].ndim, 3)\n      self.assertEqual(embeddings['pair_embeddings'].shape[-1], 128)\n\n    with open(os.path.join(output_dir, expected_data_json_filename), 'rt') as f:\n      actual_input_json = json.load(f)\n\n    self.assertEqual(\n        actual_input_json['sequences'][0]['protein']['sequence'],\n        fold_input.protein_chains[0].sequence,\n    )\n    self.assertSequenceEqual(\n        actual_input_json['sequences'][1]['ligand']['ccdCodes'],\n        fold_input.ligands[0].ccd_ids,\n    )\n    self.assertNotEmpty(\n        actual_input_json['sequences'][0]['protein']['unpairedMsa']\n    )\n    self.assertNotEmpty(\n        actual_input_json['sequences'][0]['protein']['pairedMsa']\n    )\n    self.assertIsNotNone(\n        actual_input_json['sequences'][0]['protein']['templates']\n    )\n\n    with open(os.path.join(output_dir, 'ranking_scores.csv'), 'rt') as f:\n      actual_ranking_scores = list(csv.DictReader(f))\n\n    self.assertLen(actual_ranking_scores, 5)\n    self.assertEqual(\n        [int(s['seed']) for s in actual_ranking_scores], [1234] * 5\n    )\n    self.assertEqual(\n        [int(s['sample']) for s in actual_ranking_scores], [0, 1, 2, 3, 4]\n    )\n    np.testing.assert_array_almost_equal(\n        [float(s['ranking_score']) for s in actual_ranking_scores],\n        exp_ranking_scores,\n        decimal=2,\n    )\n\n    with open(os.path.join(output_dir, 'TERMS_OF_USE.md'), 'rt') as f:\n      actual_terms_of_use = f.read()\n    self.assertStartsWith(\n        actual_terms_of_use, '# ALPHAFOLD 3 OUTPUT TERMS OF USE'\n    )\n\n    bucket_label = 'default' if bucket is None else bucket\n    output_filename = f'run_alphafold_test_output_bucket_{bucket_label}.pkl'\n\n    # Convert to dict to enable simple serialization.\n    actual_dict = [\n        dict(\n            seed=actual_inf.seed,\n            inference_results=actual_inf.inference_results,\n            full_fold_input=actual_inf.full_fold_input,\n        )\n        for actual_inf in actual\n    ]\n    with _output(output_filename) as (_, output):\n      output.write(pickle.dumps(actual_dict))\n\n    logging.info('Comparing inference results with expected values.')\n\n    ### Assert that output is as expected.\n    expected_dict = pickle.loads(\n        (\n            resources.ROOT\n            / 'test_data'\n            / 'alphafold_run_outputs'\n            / output_filename\n        ).read_bytes()\n    )\n    expected = [\n        run_alphafold.ResultsForSeed(**expected_inf)\n        for expected_inf in expected_dict\n    ]\n    for actual_inf, expected_inf in zip(actual, expected, strict=True):\n      for actual_inf, expected_inf in zip(\n          actual_inf.inference_results,\n          expected_inf.inference_results,\n          strict=True,\n      ):\n\n        # Check RMSD is within tolerance.\n        # 5tgy is very stable, NMR samples were all within 3.0 RMSD.\n        actual_rmsd = alignment.rmsd_from_coords(\n            actual_inf.predicted_structure.coords,\n            expected_inf.predicted_structure.coords,\n        )\n        self.assertLess(actual_rmsd, 3.0)\n        np.testing.assert_array_equal(\n            actual_inf.predicted_structure.atom_occupancy,\n            [1.0] * actual_inf.predicted_structure.num_atoms,\n        )\n\n\nif __name__ == '__main__':\n  absltest.main()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}