{
  "metadata": {
    "timestamp": 1736560780249,
    "page": 469,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MycroftAI/mycroft-core",
      "stars": 6550,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.400390625,
          "content": "dev.env\n.dev_opts.json\n.idea\n*.code-workspace\n*.pyc\n*.swp\n*~\nmimic\n/skills\npocketsphinx-python\n*.egg-info/\nbuild\ndist\ntornado.web\ntornado.ioloop\nmycroft/__version__.py\nscripts/logs/*\nlogs/*\n.coverage\n/htmlcov\ntest/audio_accuracy/data\nscripts/*.screen\ndoc/_build/\n.installed\n.mypy_cache\n.vscode\n.theia\n.venv/\n\n# Created by unit tests\ntest/unittests/skills/test_skill/settings.json\ntest_conf.json\n.pytest_cache/\n"
        },
        {
          "name": ".gitmessage",
          "type": "blob",
          "size": 1.3662109375,
          "content": "Commit headline -- not longer than this line (50)\n\nThis is the template for commits to mycroft-core and also an example of\na commit message. To use this template, change the first line (think of\nit as a \"headline\" for the commit) and then edit this message with a\nlonger description of the change.  To be nice, keep lines to 72\ncharacters or less (The first two lines of this template are exactly\nthat length).  Also use imperative writing, e.g. \"Fix broken code\" or\n\"Implement my new feature\", not \"Fixes the broken code\" or\n\"Implemented my new feature\".\n\nSections below can then be filled out and edited as appropriate.\nUnused sections can optionally be removed.\n\nPlease fill this out carefully.  This moment is when the code is\nclearest in the mind of you, the foremost expert in this change.\nPlease pause to think of side effects and impacts.\n\n==== Fixed Issues ====\nNONE - replace with associated issue numbers, e.g. #123, #304\n\n====  Tech Notes ==== \nNONE - explain new algorithms in detail, tool changes, etc.\n\n====  Documentation Notes ==== \nNONE - description of a new feature or notes on behavior changes\n\n==== Localization Notes ==== \nNONE - point to new strings, language specific functions, etc.\n\n==== Environment Notes ==== \nNONE - new package requirements, new files being written to disk, etc.\n\n==== Protocol Notes ====\nNONE - message types added or changed, new signals, APIs, etc.\n"
        },
        {
          "name": ".pep8speaks.yml",
          "type": "blob",
          "size": 0.0654296875,
          "content": "pycodestyle:\n    max-line-length: 79\n\nscanner:\n    diff_only: True\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.4208984375,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: doc/conf.py\n\n# Build all formats\nformats: all\n\n# Set the version of Python and requirements required to build your docs\npython:\n  version: 3.7\n  install:\n    - requirements: doc/requirements.txt\n"
        },
        {
          "name": ".shellcheckrc",
          "type": "blob",
          "size": 0.0546875,
          "content": "# Disable sourcing errors\ndisable=SC1090\ndisable=SC1091\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS.md",
          "type": "blob",
          "size": 0.2294921875,
          "content": "# ACKNOWLEDGEMENTS\n\n - Dana Harris, lotusware@gmail.com  for donating alarm.wav sound in alarm skill. Licensed under Creative Commons.\n - Mark Diangelo, for the use of the block-mark-diangelo.wav sound. Licensed under Attribution 3.0.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at kathy.reid@mycroft.ai. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 17.44140625,
          "content": "pipeline {\n    agent any\n    options {\n        // Running builds concurrently could cause a race condition with\n        // building the Docker image.\n        disableConcurrentBuilds()\n        buildDiscarder(logRotator(numToKeepStr: '5'))\n    }\n    stages {\n        // Run the build in the against the dev branch to check for compile errors\n        stage('Add CLA label to PR') {\n            options {\n                lock(resource: \"lock_${env.JOB_NAME}\")\n            }\n            environment {\n                //spawns GITHUB_USR and GITHUB_PSW environment variables\n                GITHUB=credentials('DevOps-CLA-Checker-Github-Key')\n            }\n            steps {\n                // Using an install of Github repo CLA tagger\n                // (https://github.com/forslund/github-repo-cla)\n                sh '~/github-repo-cla/mycroft-core-cla-check.sh'\n            }\n        }\n\n        stage('Run Integration Tests') {\n            when {\n                anyOf {\n                    branch 'dev'\n                    branch 'master'\n                    changeRequest target: 'dev'\n                }\n            }\n            options {\n                lock(resource: \"lock_${env.JOB_NAME}\")\n            }\n            environment {\n                // Some branches have a \"/\" in their name (e.g. feature/new-and-cool)\n                // Some commands, such as those tha deal with directories, don't\n                // play nice with this naming convention.  Define an alias for the\n                // branch name that can be used in these scenarios.\n                BRANCH_ALIAS = sh(\n                    script: 'echo $BRANCH_NAME | sed -e \"s#/#-#g\"',\n                    returnStdout: true\n                ).trim()\n            }\n            steps {\n                echo 'Building Mark I Voight-Kampff Docker Image'\n                sh 'docker build -f test/Dockerfile \\\n                    --target voight_kampff_builder \\\n                    --build-arg platform=mycroft_mark_1 \\\n                    --label build=${JOB_NAME} \\\n                    -t voight-kampff-mark-1:${BRANCH_ALIAS} .'\n                echo 'Running Mark I Voight-Kampff Test Suite'\n                timeout(time: 90, unit: 'MINUTES')\n                {\n                    sh 'mkdir -p $HOME/core/$BRANCH_ALIAS/allure'\n                    sh 'mkdir -p $HOME/core/$BRANCH_ALIAS/mycroft-logs'\n                    sh 'docker run \\\n                        -v \"$HOME/voight-kampff/identity:/root/.config/mycroft/identity\" \\\n                        -v \"$HOME/core/$BRANCH_ALIAS/allure:/root/allure\" \\\n                        -v \"$HOME/core/$BRANCH_ALIAS/mycroft-logs:/var/log/mycroft\" \\\n                        --label build=${JOB_NAME} \\\n                       voight-kampff-mark-1:${BRANCH_ALIAS} \\\n                        -f allure_behave.formatter:AllureFormatter \\\n                        -o /root/allure/allure-result --tags ~@xfail'\n                }\n            }\n            post {\n                always {\n                    echo 'Report Test Results'\n                    echo 'Changing ownership of Allure results...'\n                    sh 'docker run \\\n                        -v \"$HOME/core/$BRANCH_ALIAS/allure:/root/allure\" \\\n                        --entrypoint=/bin/bash \\\n                        --label build=${JOB_NAME} \\\n                        voight-kampff-mark-1:${BRANCH_ALIAS} \\\n                        -x -c \"chown $(id -u $USER):$(id -g $USER) \\\n                        -R /root/allure/\"'\n                    echo 'Changing ownership of Allure results...'\n                    sh 'docker run \\\n                        -v \"$HOME/core/$BRANCH_ALIAS/mycroft-logs:/var/log/mycroft\" \\\n                        --entrypoint=/bin/bash \\\n                        --label build=${JOB_NAME} \\\n                        voight-kampff-mark-1:${BRANCH_ALIAS} \\\n                        -x -c \"chown $(id -u $USER):$(id -g $USER) \\\n                        -R /var/log/mycroft\"'\n\n                    echo 'Transferring...'\n                    sh 'rm -rf allure-result/*'\n                    sh 'mv $HOME/core/$BRANCH_ALIAS/allure/allure-result allure-result'\n                    // This directory should now be empty, rmdir will intentionally fail if not.\n                    sh 'rmdir $HOME/core/$BRANCH_ALIAS/allure'\n                    script {\n                        allure([\n                            includeProperties: false,\n                            jdk: '',\n                            properties: [],\n                            reportBuildPolicy: 'ALWAYS',\n                            results: [[path: 'allure-result']]\n                        ])\n                    }\n                    unarchive mapping:['allure-report.zip': 'allure-report.zip']\n                    sh 'zip mycroft-logs.zip -r $HOME/core/$BRANCH_ALIAS/mycroft-logs'\n                    sh 'rm -rf $HOME/core/$BRANCH_ALIAS/mycroft-logs'\n                    // This directory should now be empty, rmdir will intentionally fail if not.\n                    sh 'rmdir $HOME/core/$BRANCH_ALIAS'\n                    sh (\n                        label: 'Publish Report to Web Server',\n                        script: '''\n                            ssh root@157.245.127.234 \"mkdir -p ~/allure-reports/core/${BRANCH_ALIAS}\";\n                            scp allure-report.zip root@157.245.127.234:~/allure-reports/core/${BRANCH_ALIAS};\n                            ssh root@157.245.127.234 \"unzip -o ~/allure-reports/core/${BRANCH_ALIAS}/allure-report.zip -d ~/allure-reports/core/${BRANCH_ALIAS}/\";\n                            ssh root@157.245.127.234 \"rm -rf /var/www/voight-kampff/core/${BRANCH_ALIAS}\";\n                            ssh root@157.245.127.234 \"mv ~/allure-reports/core/${BRANCH_ALIAS}/allure-report /var/www/voight-kampff/core/${BRANCH_ALIAS}\"\n                            ssh root@157.245.127.234 \"rm ~/allure-reports/core/${BRANCH_ALIAS}/allure-report.zip\";\n                            ssh root@157.245.127.234 \"rmdir ~/allure-reports/core/${BRANCH_ALIAS}\";\n                            ssh root@157.245.127.234 \"mkdir -p ~/mycroft-logs/core/${BRANCH_ALIAS}\";\n                            scp mycroft-logs.zip root@157.245.127.234:~/mycroft-logs/core/${BRANCH_ALIAS}/;\n                            ssh root@157.245.127.234 \"mkdir -p /var/www/voight-kampff/core/${BRANCH_ALIAS}/logs\"\n                            ssh root@157.245.127.234 \"unzip -oj ~/mycroft-logs/core/${BRANCH_ALIAS}/mycroft-logs.zip -d /var/www/voight-kampff/core/${BRANCH_ALIAS}/logs/\";\n                            ssh root@157.245.127.234 \"rm ~/mycroft-logs/core/${BRANCH_ALIAS}/mycroft-logs.zip\";\n                            ssh root@157.245.127.234 \"rmdir ~/mycroft-logs/core/${BRANCH_ALIAS}\";\n                        '''\n                    )\n                    echo 'Report Published'\n                }\n                failure {\n                    script {\n                        def comment_text = 'Voight Kampff Integration Test Failed ([Results](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + ')). ' +\n                                           '\\nMycroft logs are also available: ' +\n                                           '[skills.log](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + '/logs/skills.log), ' +\n                                           '[audio.log](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + '/logs/audio.log), ' +\n                                           '[voice.log](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + '/logs/voice.log), ' +\n                                           '[bus.log](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + '/logs/bus.log), ' +\n                                           '[enclosure.log](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + '/logs/enclosure.log)'\n\n                        // Create comment for Pull Requests\n                        if (env.CHANGE_ID) {\n                            def found_comment = false\n                            for (comment in pullRequest.comments) {\n                                echo \"Author: ${comment.user}\"\n                                if (comment.user == \"devops-mycroft\" &&\n                                    comment.body.contains(\"Voight Kampff\")) {\n                                    echo \"Updating comment...\"\n                                    found_comment = true\n                                    pullRequest.editComment(\n                                        comment.id,\n                                        comment_text\n                                    )\n                                }\n                            } \n                            if (!found_comment) {\n                                echo 'Sending PR comment'\n                                pullRequest.comment(comment_text)\n                            }\n                        }\n                    }\n                    // Send failure email containing a link to the Jenkins build\n                    // the results report and the console log messages to Mycroft\n                    // developers, the developers of the pull request and the\n                    // developers that caused the build to fail.\n                    echo 'Sending Failure Email'\n                    emailext (\n                        attachLog: true,\n                        subject: \"FAILED - Core Integration Tests - Build ${BRANCH_NAME} #${BUILD_NUMBER}\",\n                        body: \"\"\"\n                            <p>\n                                One or more integration tests failed. Use the\n                                resources below to identify the issue and fix\n                                the failing tests.\n                            </p>\n                            <br>\n                            <p>\n                                <a href='${BUILD_URL}'>\n                                    Jenkins Build Details\n                                </a>\n                                &nbsp(Requires account on Mycroft's Jenkins instance)\n                            </p>\n                            <br>\n                            <p>\n                                <a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}'>\n                                    Report of Test Results\n                                </a>\n                            </p>\n                            <br>\n                            <p>\n                                Mycroft logs are also available:\n                                <ul>\n                                    <li><a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}/logs/skills.log'>skills.log</a></li>\n                                    <li><a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}/logs/audio.log'>audio.log</a></li>\n                                    <li><a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}/logs/voice.log'>voice.log</a></li>\n                                    <li><a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}/logs/bus.log'>bus.log</a></li>\n                                    <li><a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}/logs/enclosure.log'>enclosure.log</a></li>\n                                </ul>\n                            </p>\n                            <br>\n                            <p>Console log is attached.</p>\"\"\",\n                        replyTo: 'devops@mycroft.ai',\n                        to: 'dev@mycroft.ai',\n                        recipientProviders: [\n                            [$class: 'RequesterRecipientProvider'],\n                            [$class:'CulpritsRecipientProvider'],\n                            [$class:'DevelopersRecipientProvider']\n                        ]\n                    )\n                }\n                success {\n                    script {\n                        if (env.CHANGE_ID) {\n                            def comment_text = 'Voight Kampff Integration Test Succeeded  ([Results](https://reports.mycroft.ai/core/' + env.BRANCH_ALIAS + '))'\n                            def found_comment = false\n                            for (comment in pullRequest.comments) {\n                                echo \"Author: ${comment.user}\"\n                                if (comment.user == \"devops-mycroft\" &&\n                                    comment.body.contains(\"Voight Kampff\")) {\n                                    echo \"Updating comment!\"\n                                    found_comment = true\n                                    pullRequest.editComment(\n                                        comment.id,\n                                        comment_text\n                                    )\n                                    break\n                                }\n                            } \n                            if (!found_comment) {\n                                echo 'Sending PR comment'\n                                pullRequest.comment(comment_text)\n                            }\n                        }\n                    }\n                    // Send success email containing a link to the Jenkins build\n                    // and the results report to Mycroft developers, the developers\n                    // of the pull request and the developers that caused the\n                    // last failed build.\n                    echo 'Sending Success Email'\n                    emailext (\n                        subject: \"SUCCESS - Core Integration Tests - Build ${BRANCH_NAME} #${BUILD_NUMBER}\",\n                        body: \"\"\"\n                            <p>\n                                All integration tests passed. No further action required.\n                            </p>\n                            <br>\n                            <p>\n                                <a href='${BUILD_URL}'>\n                                    Jenkins Build Details\n                                </a>\n                                &nbsp(Requires account on Mycroft's Jenkins instance)\n                            </p>\n                            <br>\n                            <p>\n                                <a href='https://reports.mycroft.ai/core/${BRANCH_ALIAS}'>\n                                    Report of Test Results\n                                </a>\n                            </p>\"\"\",\n                        replyTo: 'devops@mycroft.ai',\n                        to: 'dev@mycroft.ai',\n                        recipientProviders: [\n                            [$class: 'RequesterRecipientProvider'],\n                            [$class:'CulpritsRecipientProvider'],\n                            [$class:'DevelopersRecipientProvider']\n                        ]\n                    )\n                }\n            }\n        }\n        // Build snap package for release\n        stage('Build development Snap package') {\n            when {\n                anyOf {\n                    branch 'dev'\n                }\n            }\n            steps {\n                echo \"Launching package build for ${env.BRANCH_NAME}\"\n                build (job: '../Mycroft-snap/dev', wait: false,\n                       parameters: [[$class: 'StringParameterValue',\n                                     name: 'BRANCH', value: env.BRANCH_NAME]])\n            }\n        }\n\n        stage('Build Release Snap package') {\n            when {\n                tag \"release/v*.*.*\"\n            }\n            steps {\n                echo \"Launching package build for ${env.TAG_NAME}\"\n                build (job: '../Mycroft-snap/dev', wait: false,\n                       parameters: [[$class: 'StringParameterValue',\n                                     name: 'BRANCH', value: env.TAG_NAME]])\n            }\n        }\n        // Build a voight_kampff image for major releases.  This will be used\n        // by the mycroft-skills repository to test skill changes.  Skills are\n        // tested against major releases to determine if they play nicely with\n        // the breaking changes included in said release.\n        stage('Build Major Release Image') {\n            when {\n                tag \"release/v*.*.0\"\n            }\n            environment {\n                // Tag name is usually formatted like \"20.2.0\" whereas skill\n                // branch names are usually \"20.02\".  Reformat the tag name\n                // to the skill branch format so this image will be easy to find\n                // in the mycroft-skill repository.\n                SKILL_BRANCH = sh(\n                    script: 'echo $TAG_NAME | sed -e \"s/v//g\" -e \"s/[.]0//g\" -e \"s/[.]/.0/g\"',\n                    returnStdout: true\n                ).trim()\n            }\n            steps {\n                echo 'Building ${TAG_NAME} Docker Image for Skill Testing'\n                sh 'docker build -f test/Dockerfile \\\n                    --target voight_kampff_builder \\\n                    --build-arg platform=mycroft_mark_1 \\\n                    -t voight-kampff-mark-1:${SKILL_BRANCH} .'\n            }\n        }\n    }\n    post {\n        success {\n            // Docker images should remain upon failure for troubleshooting purposes.  However,\n            // if the stage is successful, there is no reason to look back at the Docker image.  In theory\n            // broken builds will eventually be fixed so this step should run eventually for every PR\n            sh(\n                label: 'Delete Docker Image on Success',\n                script: '''\n                    docker image prune --all --force --filter label=build=${JOB_NAME};\n                '''\n            )\n        }\n        cleanup {\n            sh(\n                label: 'Docker Container and Image Cleanup',\n                script: '''\n                    docker container prune --force;\n                    docker image prune --force;\n                '''\n            )\n        }\n    }\n}\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.470703125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n   \n=======================================================================\n\nComponent licenses for mycroft-core:\n\nThe mycroft-core software references various Python Packages (via PIP),\neach of which has a separate license.  All are compatible with the\nApache 2.0 license. See the referenced packages listed in the\n\"requirements/requirements.txt\" file for specific terms and conditions.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2353515625,
          "content": "recursive-include mycroft/client/speech/recognizer/model *\ninclude requirements/requirements.txt\ninclude mycroft/configuration/*.conf\nrecursive-include mycroft/res *\nrecursive-include mycroft/res/snd *\nrecursive-include mycroft/res/text/* *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7099609375,
          "content": "[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE.md) \n[![CLA](https://img.shields.io/badge/CLA%3F-Required-blue.svg)](https://mycroft.ai/cla) \n[![Team](https://img.shields.io/badge/Team-Mycroft_Core-violetblue.svg)](https://github.com/MycroftAI/contributors/blob/master/team/Mycroft%20Core.md) \n![Status](https://img.shields.io/badge/-Production_ready-green.svg)\n\n![Unit Tests](https://github.com/mycroftai/mycroft-core/workflows/Unit%20Tests/badge.svg)\n[![codecov](https://codecov.io/gh/MycroftAI/mycroft-core/branch/dev/graph/badge.svg?token=zQzRlkXxAr)](https://codecov.io/gh/MycroftAI/mycroft-core)\n\n# This project is no longer actively maintained\n\nMycroft core is no longer maintaiend and probably likely not work on your computer anymore. [Open Voice OS](https://openvoiceos.org) and [Neon-core](https://github.com/NeonGeckoCom/NeonCore) are both spiritual successors to Mycroft. (And some of the old code may live on there.)\n\n# Old Readme\n\nMycroft is a hackable open source voice assistant.\n\n## Table of Contents\n\n- [Getting Started](#getting-started)\n- [Running Mycroft](#running-mycroft)\n- [Using Mycroft](#using-mycroft)\n  * [*Home* Device and Account Manager](#home-device-and-account-manager)\n  * [Skills](#skills)\n- [Behind the scenes](#behind-the-scenes)\n  * [Pairing Information](#pairing-information)\n  * [Configuration](#configuration)\n  * [Using Mycroft Without Home](#using-mycroft-without-home)\n  * [API Key Services](#api-key-services)\n  * [Using Mycroft behind a proxy](#using-mycroft-behind-a-proxy)\n    + [Using Mycroft behind a proxy without authentication](#using-mycroft-behind-a-proxy-without-authentication)\n    + [Using Mycroft behind an authenticated proxy](#using-mycroft-behind-an-authenticated-proxy)\n- [Getting Involved](#getting-involved)\n- [Links](#links)\n\n## Getting Started\n\nFirst, get the code on your system!  The simplest method is via git ([git installation instructions](https://gist.github.com/derhuerst/1b15ff4652a867391f03)):\n- `cd ~/`\n- `git clone https://github.com/MycroftAI/mycroft-core.git`\n- `cd mycroft-core`\n- `bash dev_setup.sh`\n\n\nThis script sets up dependencies and a [virtualenv][about-virtualenv].  If running in an environment besides Ubuntu/Debian, Arch or Fedora you may need to manually install packages as instructed by dev_setup.sh.\n\n[about-virtualenv]:https://virtualenv.pypa.io/en/stable/\n\nNOTE: The default branch for this repository is 'dev', which should be considered a work-in-progress. If you want to clone a more stable version, switch over to the 'master' branch.\n\n## Running Mycroft\n\nMycroft provides `start-mycroft.sh` to perform common tasks. This script uses a virtualenv created by `dev_setup.sh`.  Assuming you installed mycroft-core in your home directory run:\n- `cd ~/mycroft-core`\n- `./start-mycroft.sh debug`\n\nThe \"debug\" command will start the background services (microphone listener, skill, messagebus, and audio subsystems) as well as bringing up a text-based Command Line Interface (CLI) you can use to interact with Mycroft and see the contents of the various logs. Alternatively you can run `./start-mycroft.sh all` to begin the services without the command line interface.  Later you can bring up the CLI using `./start-mycroft.sh cli`.\n\nThe background services can be stopped as a group with:\n- `./stop-mycroft.sh`\n\n## Using Mycroft\n\n### *Home* Device and Account Manager\nMycroft AI, Inc. maintains a device and account management system known as Mycroft Home. Developers may sign up at: https://home.mycroft.ai\n\nBy default, mycroft-core  is configured to use Home. By saying \"Hey Mycroft, pair my device\" (or any other request verbal request) you will be informed that your device needs to be paired. Mycroft will speak a 6-digit code which you can enter into the pairing page within the [Mycroft Home site](https://home.mycroft.ai).\n\nOnce paired, your unit will use Mycroft API keys for services such as Speech-to-Text (STT), weather and various other skills.\n\n### Skills\n\nMycroft is nothing without skills.  There are a handful of default skills that are downloaded automatically to your `/opt/mycroft/skills` directory, but most need to be installed explicitly.  See the [Skill Repo](https://github.com/MycroftAI/mycroft-skills#welcome) to discover skills made by others.  Please share your own interesting work!\n\n## Behind the scenes\n\n### Pairing Information\nPairing information generated by registering with Home is stored in:\n`~/.config/mycroft/identity/identity2.json` <b><-- DO NOT SHARE THIS WITH OTHERS!</b>\n\n### Configuration\nMycroft's configuration consists of 4 possible locations:\n- `mycroft-core/mycroft/configuration/mycroft.conf`(Defaults)\n- [Mycroft Home](https://home.mycroft.ai) (Remote)\n- `/etc/mycroft/mycroft.conf` (Machine)\n- `$XDG_CONFIG_DIR/mycroft/mycroft.conf` (which is by default `$HOME/.config/mycroft/mycroft.conf`) (USER)\n\nWhen the configuration loader starts, it looks in these locations in this order, and loads ALL configurations. Keys that exist in multiple configuration files will be overridden by the last file to contain the value. This process results in a minimal amount being written for a specific device and user, without modifying default distribution files.\n\n### Using Mycroft Without Home\n\nIf you do not wish to use the Mycroft Home service, before starting Mycroft for the first time, create `$HOME/.config/mycroft/mycroft.conf` with the following contents:\n\n```\n{\n  \"skills\": {\n    \"blacklisted_skills\": [\n      \"mycroft-configuration.mycroftai\",\n      \"mycroft-pairing.mycroftai\"\n    ]\n  }\n}\n```\n\n### API Key Services\n\nThe Mycroft backend provides access to a range of API keys for specific services. Without pairing with the Mycroft backend, you will need to add your own API keys, install a different Skill or Plugin to perform that function, or not have access to that functionality.\n\nThese are the keys currently used in Mycroft Core through the Mycroft backend:\n\n- [STT API, Google STT, Google Cloud Speech](http://www.chromium.org/developers/how-tos/api-keys)\n  - [A range of STT services](https://mycroft-ai.gitbook.io/docs/using-mycroft-ai/customizations/stt-engine) are available for use with Mycroft.\n- [Weather Skill API, OpenWeatherMap](http://openweathermap.org/api)\n- [Wolfram-Alpha Skill](http://products.wolframalpha.com/api/)\n\n\n### Using Mycroft behind a proxy\n\nMany schools, universities and workplaces run a `proxy` on their network. If you need to type in a username and password to access the external internet, then you are likely behind a `proxy`.\n\nIf you plan to use Mycroft behind a proxy, then you will need to do an additional configuration step.\n\n_NOTE: In order to complete this step, you will need to know the `hostname` and `port` for the proxy server. Your network administrator will be able to provide these details. Your network administrator may want information on what type of traffic Mycroft will be using. We use `https` traffic on port `443`, primarily for accessing ReST-based APIs._\n\n#### Using Mycroft behind a proxy without authentication\n\nIf you are using Mycroft behind a proxy without authentication, add the following environment variables, changing the `proxy_hostname.com` and `proxy_port` for the values for your network. These commands are executed from the Linux command line interface (CLI).\n\n```bash\n$ export http_proxy=http://proxy_hostname.com:proxy_port\n$ export https_port=http://proxy_hostname.com:proxy_port\n$ export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com,0.0.0.0,::1\"\n```\n\n#### Using Mycroft behind an authenticated proxy\n\nIf  you are behind a proxy which requires authentication, add the following environment variables, changing the `proxy_hostname.com` and `proxy_port` for the values for your network. These commands are executed from the Linux command line interface (CLI).\n\n```bash\n$ export http_proxy=http://user:password@proxy_hostname.com:proxy_port\n$ export https_port=http://user:password@proxy_hostname.com:proxy_port\n$ export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com,0.0.0.0,::1\"\n```\n\n## Getting Involved\n\nThis is an open source project. We would love your help. We have prepared a [contributing](.github/CONTRIBUTING.md) guide to help you get started.\n\nIf this is your first PR, or you're not sure where to get started,\nsay hi in [Mycroft Chat](https://chat.mycroft.ai/) and a team member would be happy to mentor you.\nJoin the [Mycroft Forum](https://community.mycroft.ai/) for questions and answers.\n\n## Links\n* [Creating a Skill](https://mycroft-ai.gitbook.io/docs/skill-development/your-first-skill)\n* [Documentation](https://docs.mycroft.ai)\n* [Skill Writer API Docs](https://mycroft-core.readthedocs.io/en/master/)\n* [Release Notes](https://github.com/MycroftAI/mycroft-core/releases)\n* [Mycroft Chat](https://chat.mycroft.ai)\n* [Mycroft Forum](https://community.mycroft.ai)\n* [Mycroft Blog](https://mycroft.ai/blog)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev_setup.sh",
          "type": "blob",
          "size": 22.755859375,
          "content": "#!/usr/bin/env bash\n#\n# Copyright 2017 Mycroft AI Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##########################################################################\n\n# Set a default locale to handle output from commands reliably\nexport LANG=C.UTF-8\nexport LANGUAGE=en\n\n# exit on any error\nset -Ee\n\nROOT_DIRNAME=$(dirname \"$0\")\ncd \"$ROOT_DIRNAME\"\nTOP=$(pwd -L)\n\nfunction clean_mycroft_files() {\n    echo '\nThis will completely remove any files installed by mycroft (including pairing\ninformation). \n\nNOTE: This will not remove Mimic (if you chose to compile it), or other files\ngenerated within the mycroft-core directory.\n\nDo you wish to continue? (y/n)'\n    while true; do\n        read -rN1 -s key\n        case $key in\n        [Yy])\n            sudo rm -rf /var/log/mycroft\n            rm -f /var/tmp/mycroft_web_cache.json\n            rm -rf \"${TMPDIR:-/tmp}/mycroft\"\n            rm -rf \"$HOME/.mycroft\"\n            rm -f \"skills\"  # The Skills directory symlink\n            sudo rm -rf \"/opt/mycroft\"\n            exit 0\n            ;;\n        [Nn])\n            exit 1\n            ;;\n        esac\n    done\n    \n\n}\nfunction show_help() {\n    echo '\nUsage: dev_setup.sh [options]\nPrepare your environment for running the mycroft-core services.\n\nOptions:\n    --clean                 Remove files and folders created by this script\n    -h, --help              Show this message\n    -fm                     Force mimic build\n    -n, --no-error          Do not exit on error (use with caution)\n    -p arg, --python arg    Sets the python version to use\n    -r, --allow-root        Allow to be run as root (e.g. sudo)\n    -sm                     Skip mimic build\n\nNeed more help? Please visit:\nMycroft Chat (https://chat.mycroft.ai/)\nMycroft Forums (https://community.mycroft.ai/)\n'\n}\n\nfunction found_exe() {\n    hash \"$1\" 2>/dev/null\n}\n\n# Parse the command line\nopt_forcemimicbuild=false\nopt_allowroot=false\nopt_skipmimicbuild=false\nopt_python=python3\ndisable_precise_later=false\nparam=''\n\nif found_exe sudo ; then\n    SUDO=sudo\nelif found_exe doas ; then\n    SUDO=doas\nelif [[ $opt_allowroot != true ]]; then\n    echo 'This script requires \"sudo\" to install system packages. Please install it, then re-run this script.'\n    exit 1\nfi\n\n# create and set permissions for logging\nif [[ ! -w /var/log/mycroft/ ]] ; then\n    # Creating and setting permissions\n    echo 'Creating /var/log/mycroft/ directory'\n    if [[ ! -d /var/log/mycroft/ ]] ; then\n        $SUDO mkdir /var/log/mycroft/\n    fi\n    $SUDO chmod 777 /var/log/mycroft/\nfi\n\nfor var in \"$@\" ; do\n    # Check if parameter should be read\n    if [[ $param == 'python' ]] ; then\n        opt_python=$var\n        param=\"\"\n        continue\n    fi\n\n    # Check for options\n    if [[ $var == '-h' || $var == '--help' ]] ; then\n        show_help\n        exit 0\n    fi\n\n    if [[ $var == '--clean' ]] ; then\n        if clean_mycroft_files; then\n            exit 0\n        else\n            exit 1\n        fi\n    fi\n    \n\n    if [[ $var == '-r' || $var == '--allow-root' ]] ; then\n        opt_allowroot=true\n    fi\n\n    if [[ $var == '-fm' ]] ; then\n        opt_forcemimicbuild=true\n    fi\n    if [[ $var == '-n' || $var == '--no-error' ]] ; then\n        # Do NOT exit on errors\n        set +Ee\n    fi\n    if [[ $var == '-sm' ]] ; then\n        opt_skipmimicbuild=true\n    fi\n    if [[ $var == '-p' || $var == '--python' ]] ; then\n        param='python'\n    fi\ndone\n\nif [[ $(id -u) -eq 0 && $opt_allowroot != true ]] ; then\n    echo 'This script should not be run as root or with sudo.' | tee -a /var/log/mycroft/setup.log\n    echo 'If you really need to for this, rerun with --allow-root' | tee -a /var/log/mycroft/setup.log\n    exit 1\nfi\n\nfunction get_YN() {\n    # Loop until the user hits the Y or the N key\n    echo -e -n \"Choice [${CYAN}Y${RESET}/${CYAN}N${RESET}]: \"\n    while true; do\n        read -rN1 -s key\n        case $key in\n        [Yy])\n            return 0\n            ;;\n        [Nn])\n            return 1\n            ;;\n        esac\n    done\n}\n\n# If tput is available and can handle multiple colors\nif found_exe tput ; then\n    if [[ $(tput colors) != \"-1\" && -z $CI ]]; then\n        GREEN=$(tput setaf 2)\n        BLUE=$(tput setaf 4)\n        CYAN=$(tput setaf 6)\n        YELLOW=$(tput setaf 3)\n        RESET=$(tput sgr0)\n        HIGHLIGHT=$YELLOW\n    fi\nfi\n\n# Run a setup wizard the very first time that guides the user through some decisions\nif [[ ! -f .dev_opts.json && -z $CI ]] ; then\n    echo \"\n$CYAN                    Welcome to Mycroft!  $RESET\"\n    sleep 0.5\n    echo '\nThis script is designed to make working with Mycroft easy.  During this\nfirst run of dev_setup we will ask you a few questions to help setup\nyour environment.'\n    sleep 0.5\n    # The AVX instruction set is an x86 construct\n    # ARM has a range of equivalents, unsure which are (un)supported by TF.\n    if ! grep -q avx /proc/cpuinfo && ! [[ $(uname -m) == 'arm'* || $(uname -m) == 'aarch64' ]]; then\n        echo \"\nThe Precise Wake Word Engine requires the AVX instruction set, which is\nnot supported on your CPU. Do you want to fall back to the PocketSphinx\nengine? Advanced users can build the precise engine with an older\nversion of TensorFlow (v1.13) if desired and change use_precise to true\nin mycroft.conf.\n  Y)es, I want to use the PocketSphinx engine or my own.\n  N)o, stop the installation.\"\n        if get_YN ; then\n            if [[ ! -f /etc/mycroft/mycroft.conf ]]; then\n                $SUDO mkdir -p /etc/mycroft\n                $SUDO touch /etc/mycroft/mycroft.conf\n                $SUDO bash -c 'echo \"{ \\\"use_precise\\\": false }\" > /etc/mycroft/mycroft.conf'\n            else\n                # Ensure dependency installed to merge configs\n                disable_precise_later=true\n            fi\n        else\n            echo -e \"$HIGHLIGHT N - quit the installation $RESET\" | tee -a /var/log/mycroft/setup.log\n            exit 1\n        fi\n        echo\n    fi\n    echo \"\nDo you want to run on 'master' or against a dev branch?  Unless you are\na developer modifying mycroft-core itself, you should run on the\n'master' branch.  It is updated bi-weekly with a stable release.\n  Y)es, run on the stable 'master' branch\n  N)o, I want to run unstable branches\"\n    if get_YN ; then\n        echo -e \"$HIGHLIGHT Y - using 'master' branch $RESET\" | tee -a /var/log/mycroft/setup.log\n        branch=master\n        git checkout ${branch}\n    else\n        echo -e \"$HIGHLIGHT N - using an unstable branch $RESET\" | tee -a /var/log/mycroft/setup.log\n        branch=dev\n    fi\n\n    sleep 0.5\n    echo \"\nMycroft is actively developed and constantly evolving.  It is recommended\nthat you update regularly.  Would you like to automatically update\nwhenever launching Mycroft?  This is highly recommended, especially for\nthose running against the 'master' branch.\n  Y)es, automatically check for updates\n  N)o, I will be responsible for keeping Mycroft updated.\"\n    if get_YN ; then\n        echo -e \"$HIGHLIGHT Y - update automatically $RESET\" | tee -a /var/log/mycroft/setup.log\n        autoupdate=true\n    else\n        echo -e \"$HIGHLIGHT N - update manually using 'git pull' $RESET\" | tee -a /var/log/mycroft/setup.log\n        autoupdate=false\n    fi\n\n    #  Pull down mimic source?  Most will be happy with just the package\n    if [[ $opt_forcemimicbuild == false && $opt_skipmimicbuild == false ]] ; then\n        sleep 0.5\n        echo '\nMycroft uses its Mimic technology to speak to you.  Mimic can run both\nlocally and from a server.  The local Mimic is more robotic, but always\navailable regardless of network connectivity.  It will act as a fallback\nif unable to contact the Mimic server.\n\nHowever, building the local Mimic is time consuming -- it can take hours\non slower machines.  This can be skipped, but Mycroft will be unable to\ntalk if you lose network connectivity.  Would you like to build Mimic\nlocally?'\n        if get_YN ; then\n            echo -e \"$HIGHLIGHT Y - Mimic will be built $RESET\" | tee -a /var/log/mycroft/setup.log\n        else\n            echo -e \"$HIGHLIGHT N - skip Mimic build $RESET\" | tee -a /var/log/mycroft/setup.log\n            opt_skipmimicbuild=true\n        fi\n    fi\n\n    echo\n    # Add mycroft-core/bin to the .bashrc PATH?\n    sleep 0.5\n    echo '\nThere are several Mycroft helper commands in the bin folder.  These\ncan be added to your system PATH, making it simpler to use Mycroft.\nWould you like this to be added to your PATH in the .profile?'\n    if get_YN ; then\n        echo -e \"$HIGHLIGHT Y - Adding Mycroft commands to your PATH $RESET\" | tee -a /var/log/mycroft/setup.log\n\n        if [[ ! -f ~/.profile_mycroft ]] ; then\n            # Only add the following to the .profile if .profile_mycroft\n            # doesn't exist, indicating this script has not been run before\n            {\n                echo ''\n                echo '# include Mycroft commands'\n                echo 'source ~/.profile_mycroft'\n            } >> ~/.profile\n        fi\n\n        echo \"\n# WARNING: This file may be replaced in future, do not customize.\n# set path so it includes Mycroft utilities\nif [ -d \\\"${TOP}/bin\\\" ] ; then\n    PATH=\\\"\\$PATH:${TOP}/bin\\\"\nfi\" > ~/.profile_mycroft\n        echo -e \"Type ${CYAN}mycroft-help$RESET to see available commands.\"\n    else\n        echo -e \"$HIGHLIGHT N - PATH left unchanged $RESET\" | tee -a /var/log/mycroft/setup.log\n    fi\n\n    # Create a link to the 'skills' folder.\n    sleep 0.5\n    echo\n    echo 'The standard location for Mycroft skills is under /opt/mycroft/skills.'\n    if [[ ! -d /opt/mycroft/skills ]] ; then\n        echo 'This script will create that folder for you.  This requires sudo'\n        echo 'permission and might ask you for a password...'\n        setup_user=$USER\n        setup_group=$(id -gn \"$USER\")\n        $SUDO mkdir -p /opt/mycroft/skills\n        $SUDO chown -R \"${setup_user}\":\"${setup_group}\" /opt/mycroft\n        echo 'Created!'\n    fi\n    if [[ ! -d skills ]] ; then\n        ln -s /opt/mycroft/skills skills\n        echo \"For convenience, a soft link has been created called 'skills' which leads\"\n        echo 'to /opt/mycroft/skills.'\n    fi\n\n    # Add PEP8 pre-commit hook\n    sleep 0.5\n    echo '\n(Developer) Do you want to automatically check code-style when submitting code.\nIf unsure answer yes.\n'\n    if get_YN ; then\n        echo 'Will install PEP8 pre-commit hook...' | tee -a /var/log/mycroft/setup.log\n        INSTALL_PRECOMMIT_HOOK=true\n    fi\n\n    # Save options\n    echo '{\"use_branch\": \"'$branch'\", \"auto_update\": '$autoupdate'}' > .dev_opts.json\n\n    echo -e '\\nInteractive portion complete, now installing dependencies...\\n' | tee -a /var/log/mycroft/setup.log\n    sleep 5\nfi\n\nfunction os_is() {\n    [[ $(grep \"^ID=\" /etc/os-release | awk -F'=' '/^ID/ {print $2}' | sed 's/\\\"//g') == \"$1\" ]]\n}\n\nfunction os_is_like() {\n    grep \"^ID_LIKE=\" /etc/os-release | awk -F'=' '/^ID_LIKE/ {print $2}' | sed 's/\\\"//g' | grep -q \"\\\\b$1\\\\b\"\n}\n\nfunction redhat_common_install() {\n    $SUDO yum install -y cmake gcc-c++ git python3-devel libtool libffi-devel openssl-devel autoconf automake bison swig portaudio-devel mpg123 flac curl libicu-devel libjpeg-devel fann-devel pulseaudio\n    git clone https://github.com/libfann/fann.git\n    cd fann\n    git checkout b211dc3db3a6a2540a34fbe8995bf2df63fc9939\n    cmake .\n    $SUDO make install\n    cd \"$TOP\"\n    rm -rf fann\n\n}\n\nfunction debian_install() {\n    APT_PACKAGE_LIST=(git python3 python3-dev python3-setuptools libtool \\\n        libffi-dev libssl-dev autoconf automake bison swig libglib2.0-dev \\\n        portaudio19-dev mpg123 screen flac curl libicu-dev pkg-config \\\n        libjpeg-dev libfann-dev build-essential jq pulseaudio \\\n        pulseaudio-utils)\n\n    if dpkg -V libjack-jackd2-0 > /dev/null 2>&1 && [[ -z ${CI} ]] ; then\n        echo \"\nWe have detected that your computer has the libjack-jackd2-0 package installed.\nMycroft requires a conflicting package, and will likely uninstall this package.\nOn some systems, this can cause other programs to be marked for removal.\nPlease review the following package changes carefully.\"\n        read -rp \"Press enter to continue\"\n        $SUDO apt-get install \"${APT_PACKAGE_LIST[@]}\"\n    else\n        $SUDO apt-get install -y \"${APT_PACKAGE_LIST[@]}\"\n    fi\n}\n\n\nfunction open_suse_install() {\n    $SUDO zypper install -y git python3 python3-devel libtool libffi-devel libopenssl-devel autoconf automake bison swig portaudio-devel mpg123 flac curl libicu-devel pkg-config libjpeg-devel libfann-devel python3-curses pulseaudio\n    $SUDO zypper install -y -t pattern devel_C_C++\n}\n\n\nfunction fedora_install() {\n    $SUDO dnf install -y git python3 python3-devel python3-pip python3-setuptools python3-virtualenv pygobject3-devel libtool libffi-devel openssl-devel autoconf bison swig glib2-devel portaudio-devel mpg123 mpg123-plugins-pulseaudio screen curl pkgconfig libicu-devel automake libjpeg-turbo-devel fann-devel gcc-c++ redhat-rpm-config jq make pulseaudio-utils\n}\n\n\nfunction arch_install() {\n    pkgs=( git python python-pip python-setuptools python-virtualenv python-gobject libffi swig portaudio mpg123 screen flac curl icu libjpeg-turbo base-devel jq )\n\n    if ! pacman -Qs pipewire-pulse > /dev/null\n    then\n        pulse_pkgs=( pulseaudio pulseaudio-alsa )\n        pkgs=( \"${pkgs[@]}\" \"${pulse_pkgs[@]}\" )\n    fi\n\n    $SUDO pacman -S --needed --noconfirm \"${pkgs[@]}\"\n\n    pacman -Qs '^fann$' &> /dev/null || (\n        git clone  https://aur.archlinux.org/fann.git\n        cd fann\n        makepkg -srciA --noconfirm\n        cd ..\n        rm -rf fann\n    )\n}\n\n\nfunction centos_install() {\n    $SUDO yum install epel-release\n    redhat_common_install\n}\n\nfunction redhat_install() {\n    $SUDO yum install -y wget\n    wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    $SUDO yum install -y epel-release-latest-7.noarch.rpm\n    rm epel-release-latest-7.noarch.rpm\n    redhat_common_install\n\n}\n\nfunction gentoo_install() {\n    $SUDO emerge --noreplace dev-vcs/git dev-lang/python dev-python/setuptools dev-python/pygobject dev-python/requests sys-devel/libtool dev-libs/libffi virtual/jpeg dev-libs/openssl sys-devel/autoconf sys-devel/bison dev-lang/swig dev-libs/glib media-libs/portaudio media-sound/mpg123 media-libs/flac net-misc/curl sci-mathematics/fann sys-devel/gcc app-misc/jq media-libs/alsa-lib dev-libs/icu\n}\n\nfunction alpine_install() {\n    $SUDO apk add --virtual .makedeps-mycroft-core \\\n\t\talpine-sdk \\\n\t\talsa-lib-dev \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tfann-dev \\\n\t\tgit \\\n\t\tlibjpeg-turbo-dev \\\n\t\tlibtool \\\n\t\tmpg123 \\\n\t\tpcre2-dev \\\n\t\tportaudio-dev \\\n\t\tpulseaudio-utils \\\n\t\tpy3-pip \\\n\t\tpy3-setuptools \\\n\t\tpy3-virtualenv \\\n\t\tpython3 \\\n\t\tpython3-dev \\\n\t\tswig \\\n\t\tvorbis-tools\n}\n\nfunction install_deps() {\n    echo 'Installing packages...'\n    if found_exe zypper ; then\n        # OpenSUSE\n        echo \"$GREEN Installing packages for OpenSUSE...$RESET\" | tee -a /var/log/mycroft/setup.log\n        open_suse_install\n    elif found_exe yum && os_is centos ; then\n        # CentOS\n        echo \"$GREEN Installing packages for Centos...$RESET\" | tee -a /var/log/mycroft/setup.log\n        centos_install\n    elif found_exe yum && os_is rhel ; then\n        # Redhat Enterprise Linux\n        echo \"$GREEN Installing packages for Red Hat...$RESET\" | tee -a /var/log/mycroft/setup.log\n        redhat_install\n    elif os_is_like debian || os_is debian || os_is_like ubuntu || os_is ubuntu || os_is linuxmint; then\n        # Debian / Ubuntu / Mint\n        echo \"$GREEN Installing packages for Debian/Ubuntu/Mint...$RESET\" | tee -a /var/log/mycroft/setup.log\n        debian_install\n    elif os_is_like fedora || os_is fedora; then\n        # Fedora\n        echo \"$GREEN Installing packages for Fedora...$RESET\" | tee -a /var/log/mycroft/setup.log\n        fedora_install\n    elif found_exe pacman && (os_is arch || os_is_like arch); then\n        # Arch Linux\n        echo \"$GREEN Installing packages for Arch...$RESET\" | tee -a /var/log/mycroft/setup.log\n        arch_install\n    elif found_exe emerge && os_is gentoo; then\n        # Gentoo Linux\n        echo \"$GREEN Installing packages for Gentoo Linux ...$RESET\" | tee -a /var/log/mycroft/setup.log\n        gentoo_install\n    elif found_exe apk && os_is alpine; then\n        # Alpine Linux\n        echo \"$GREEN Installing packages for Alpine Linux...$RESET\" | tee -a /var/log/mycroft/setup.log\n        alpine_install\n    else\n        echo\n        echo -e \"${YELLOW}Could not find package manager\n${YELLOW}Make sure to manually install:$BLUE git python3 python-setuptools python-venv pygobject libtool libffi libjpg openssl autoconf bison swig glib2.0 portaudio19 mpg123 flac curl fann g++ jq\\n$RESET\" | tee -a /var/log/mycroft/setup.log\n\n        echo 'Warning: Failed to install all dependencies. Continue? y/N' | tee -a /var/log/mycroft/setup.log\n        read -rn1 continue\n        if [[ $continue != 'y' ]] ; then\n            exit 1\n        fi\n\n    fi\n}\n\nVIRTUALENV_ROOT=${VIRTUALENV_ROOT:-\"${TOP}/.venv\"}\n\nfunction install_venv() {\n    $opt_python -m venv \"${VIRTUALENV_ROOT}/\" --without-pip\n\n    # Check if old script for python 3.6 is needed\n    if \"${VIRTUALENV_ROOT}/bin/${opt_python}\" --version | grep \" 3.6\" > /dev/null; then\n        GET_PIP_URL=\"https://bootstrap.pypa.io/pip/3.6/get-pip.py\"\n    else\n        GET_PIP_URL=\"https://bootstrap.pypa.io/get-pip.py\"\n    fi\n\n    # Force version of pip for reproducability, but there is nothing special\n    # about this version.  Update whenever a new version is released and\n    # verified functional.\n    curl \"${GET_PIP_URL}\" | \"${VIRTUALENV_ROOT}/bin/${opt_python}\" - 'pip==20.0.2'\n    # Function status depending on if pip exists\n    [[ -x ${VIRTUALENV_ROOT}/bin/pip ]]\n}\n\ninstall_deps\n\n# It's later. Update existing config with jq.\nif [[ $disable_precise_later == true ]]; then\n    $SUDO bash -c 'jq \". + { \\\"use_precise\\\": false }\" /etc/mycroft/mycroft.conf > tmp.mycroft.conf' \n                    $SUDO mv -f tmp.mycroft.conf /etc/mycroft/mycroft.conf\nfi\n\n# Configure to use the standard commit template for\n# this repo only.\ngit config commit.template .gitmessage\n\n# Check whether to build mimic (it takes a really long time!)\nbuild_mimic='n'\nif [[ $opt_forcemimicbuild == true ]] ; then\n    build_mimic='y'\nelse\n    # first, look for a build of mimic in the folder\n    has_mimic=''\n    if [[ -f ${TOP}/mimic/bin/mimic ]] ; then\n        has_mimic=$(\"${TOP}\"/mimic/bin/mimic -lv | grep Voice) || true\n    fi\n\n    # in not, check the system path\n    if [[ -z $has_mimic ]] ; then\n        if [[ -x $(command -v mimic) ]] ; then\n            has_mimic=$(mimic -lv | grep Voice) || true\n        fi\n    fi\n\n    if [[ -z $has_mimic ]]; then\n        if [[ $opt_skipmimicbuild == true ]] ; then\n            build_mimic='n'\n        else\n            build_mimic='y'\n        fi\n    fi\nfi\n\nif [[ ! -x ${VIRTUALENV_ROOT}/bin/activate ]] ; then\n    if ! install_venv ; then\n        echo 'Failed to set up virtualenv for mycroft, exiting setup.' | tee -a /var/log/mycroft/setup.log\n        exit 1\n    fi\nfi\n\n# Start the virtual environment\n# shellcheck source=/dev/null\nsource \"${VIRTUALENV_ROOT}/bin/activate\"\ncd \"$TOP\"\n\n# Install pep8 pre-commit hook\nHOOK_FILE='./.git/hooks/pre-commit'\nif [[ -n $INSTALL_PRECOMMIT_HOOK ]] || grep -q 'MYCROFT DEV SETUP' $HOOK_FILE; then\n    if [[ ! -f $HOOK_FILE ]] || grep -q 'MYCROFT DEV SETUP' $HOOK_FILE; then\n        echo 'Installing PEP8 check as precommit-hook' | tee -a /var/log/mycroft/setup.log\n        echo \"#! $(command -v python)\" > $HOOK_FILE\n        echo '# MYCROFT DEV SETUP' >> $HOOK_FILE\n        cat ./scripts/pre-commit >> $HOOK_FILE\n        chmod +x $HOOK_FILE\n    fi\nfi\n\nPYTHON=$(python -c \"import sys;print('python{}.{}'.format(sys.version_info[0], sys.version_info[1]))\")\n\n# Add mycroft-core to the virtualenv path\n# (This is equivalent to typing 'add2virtualenv $TOP', except\n# you can't invoke that shell function from inside a script)\nVENV_PATH_FILE=\"${VIRTUALENV_ROOT}/lib/$PYTHON/site-packages/_virtualenv_path_extensions.pth\"\nif [[ ! -f $VENV_PATH_FILE ]] ; then\n    echo 'import sys; sys.__plen = len(sys.path)' > \"$VENV_PATH_FILE\" || return 1\n    echo \"import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)\" >> \"$VENV_PATH_FILE\" || return 1\nfi\n\nif ! grep -q \"$TOP\" \"$VENV_PATH_FILE\" ; then\n    echo 'Adding mycroft-core to virtualenv path' | tee -a /var/log/mycroft/setup.log\n    sed -i.tmp \"1 a$TOP\" \"$VENV_PATH_FILE\"\nfi\n\n# install required python modules\nif ! pip install -r requirements/requirements.txt ; then\n    echo 'Warning: Failed to install required dependencies. Continue? y/N' | tee -a /var/log/mycroft/setup.log\n    read -rn1 continue\n    if [[ $continue != 'y' ]] ; then\n        exit 1\n    fi\nfi\n\n# install optional python modules\nif [[ ! $(pip install -r requirements/extra-audiobackend.txt) ||\n    ! $(pip install -r requirements/extra-stt.txt) ||\n    ! $(pip install -r requirements/extra-mark1.txt) ]] ; then\n    echo 'Warning: Failed to install some optional dependencies. Continue? y/N' | tee -a /var/log/mycroft/setup.log\n    read -rn1 continue\n    if [[ $continue != 'y' ]] ; then\n        exit 1\n    fi\nfi\n\n\nif ! pip install -r requirements/tests.txt ; then\n    echo \"Warning: Test requirements failed to install. Note: normal operation should still work fine...\" | tee -a /var/log/mycroft/setup.log\nfi\n\nSYSMEM=$(free | awk '/^Mem:/ { print $2 }')\nMAXCORES=$((SYSMEM / 2202010))\nMINCORES=1\nCORES=$(nproc)\n\n# ensure MAXCORES is > 0\nif [[ $MAXCORES -lt 1 ]] ; then\n    MAXCORES=${MINCORES}\nfi\n\n# Be positive!\nif ! [[ $CORES =~ ^[0-9]+$ ]] ; then\n    CORES=$MINCORES\nelif [[ $MAXCORES -lt $CORES ]] ; then\n    CORES=$MAXCORES\nfi\n\necho \"Building with $CORES cores.\" | tee -a /var/log/mycroft/setup.log\n\n#build and install pocketsphinx\n#build and install mimic\n\ncd \"$TOP\"\n\nif [[ $build_mimic == 'y' || $build_mimic == 'Y' ]] ; then\n    echo 'WARNING: The following can take a long time to run!' | tee -a /var/log/mycroft/setup.log\n    \"${TOP}/scripts/install-mimic.sh\" \"$CORES\"\nelse\n    echo 'Skipping mimic build.' | tee -a /var/log/mycroft/setup.log\nfi\n\n# set permissions for common scripts\nchmod +x start-mycroft.sh\nchmod +x stop-mycroft.sh\nchmod +x bin/mycroft-cli-client\nchmod +x bin/mycroft-help\nchmod +x bin/mycroft-mic-test\nchmod +x bin/mycroft-msk\nchmod +x bin/mycroft-msm\nchmod +x bin/mycroft-pip\nchmod +x bin/mycroft-say-to\nchmod +x bin/mycroft-skill-testrunner\nchmod +x bin/mycroft-speak\n\n#Store a fingerprint of setup\nmd5sum requirements/requirements.txt requirements/extra-audiobackend.txt requirements/extra-stt.txt requirements/extra-mark1.txt requirements/tests.txt dev_setup.sh > .installed\n\necho 'Mycroft setup complete! Logs can be found at /var/log/mycroft/setup.log' | tee -a /var/log/mycroft/setup.log\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "mycroft",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.05078125,
          "content": "[pytest]\ntestpaths = test\nnorecursedirs = wake_word\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.0771484375,
          "content": "# Copyright 2017 Mycroft AI Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nfrom setuptools import setup, find_packages\nimport os\nimport os.path\n\nBASEDIR = os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_version():\n    \"\"\" Find the version of mycroft-core\"\"\"\n    version = None\n    version_file = os.path.join(BASEDIR, 'mycroft', 'version', '__init__.py')\n    major, minor, build = (None, None, None)\n    with open(version_file) as f:\n        for line in f:\n            if 'CORE_VERSION_MAJOR' in line:\n                major = line.split('=')[1].strip()\n            elif 'CORE_VERSION_MINOR' in line:\n                minor = line.split('=')[1].strip()\n            elif 'CORE_VERSION_BUILD' in line:\n                build = line.split('=')[1].strip()\n\n            if ((major and minor and build) or\n                    '# END_VERSION_BLOCK' in line):\n                break\n    version = '.'.join([major, minor, build])\n\n    return version\n\n\ndef required(requirements_file):\n    \"\"\" Read requirements file and remove comments and empty lines. \"\"\"\n    with open(os.path.join(BASEDIR, requirements_file), 'r') as f:\n        requirements = f.read().splitlines()\n        if 'MYCROFT_LOOSE_REQUIREMENTS' in os.environ:\n            print('USING LOOSE REQUIREMENTS!')\n            requirements = [r.replace('==', '>=') for r in requirements]\n        return [pkg for pkg in requirements\n                if pkg.strip() and not pkg.startswith(\"#\")]\n\n\nsetup(\n    name='mycroft-core',\n    version=get_version(),\n    license='Apache-2.0',\n    author='Mycroft A.I.',\n    author_email='devs@mycroft.ai',\n    url='https://github.com/MycroftAI/mycroft-core',\n    description='Mycroft Core',\n    install_requires=required('requirements/requirements.txt'),\n    extras_require={\n        'audio-backend': required('requirements/extra-audiobackend.txt'),\n        'mark1': required('requirements/extra-mark1.txt'),\n        'stt': required('requirements/extra-stt.txt')\n    },\n    packages=find_packages(include=['mycroft*']),\n    include_package_data=True,\n\n    entry_points={\n        'console_scripts': [\n            'mycroft-speech-client=mycroft.client.speech.__main__:main',\n            'mycroft-messagebus=mycroft.messagebus.service.__main__:main',\n            'mycroft-skills=mycroft.skills.__main__:main',\n            'mycroft-audio=mycroft.audio.__main__:main',\n            'mycroft-echo-observer=mycroft.messagebus.client.ws:echo',\n            'mycroft-audio-test=mycroft.util.audio_test:main',\n            'mycroft-enclosure-client=mycroft.client.enclosure.__main__:main',\n            'mycroft-cli-client=mycroft.client.text.__main__:main'\n        ]\n    }\n)\n"
        },
        {
          "name": "start-mycroft.sh",
          "type": "blob",
          "size": 7.3837890625,
          "content": "#!/bin/sh\n\n# Copyright 2017 Mycroft AI Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nSOURCE=\"$0\"\n\nscript=${0}\nscript=${script##*/}\ncd -P \"$( dirname \"$SOURCE\" )\" || exit 1 # Enter scripts folder or fail!\nDIR=\"$( pwd )\"\nVIRTUALENV_ROOT=${VIRTUALENV_ROOT:-\"${DIR}/.venv\"}\n\nhelp() {\n    echo \"${script}:  Mycroft command/service launcher\"\n    echo \"usage: ${script} [COMMAND] [restart] [params]\"\n    echo\n    echo \"Services COMMANDs:\"\n    echo \"  all                      runs core services: bus, audio, skills, voice\"\n    echo \"  debug                    runs core services, then starts the CLI\"\n    echo \"  audio                    the audio playback service\"\n    echo \"  bus                      the messagebus service\"\n    echo \"  skills                   the skill service\"\n    echo \"  voice                    voice capture service\"\n    # echo \"  wifi                     wifi setup service\"\n    echo \"  enclosure                mark_1 enclosure service\"\n    echo\n    echo \"Tool COMMANDs:\"\n    echo \"  cli                      the Command Line Interface\"\n    echo \"  unittest                 run mycroft-core unit tests (requires pytest)\"\n    echo \"  skillstest               run the skill autotests for all skills (requires pytest)\"\n    echo \"  vktest                   run the Voight Kampff integration test suite\"\n    echo\n    echo \"Util COMMANDs:\"\n    echo \"  audiotest                attempt simple audio validation\"\n    echo \"  wakewordtest             test selected wakeword engine\"\n    echo \"  sdkdoc                   generate sdk documentation\"\n    echo\n    echo \"Options:\"\n    echo \"  restart                  (optional) Force the service to restart if running\"\n    echo\n    echo \"Examples:\"\n    echo \"  ${script} all\"\n    echo \"  ${script} all restart\"\n    echo \"  ${script} cli\"\n    echo \"  ${script} unittest\"\n\n    exit 1\n}\n\n_module=\"\"\nname_to_script_path() {\n    case ${1} in\n        \"bus\")               _module=\"mycroft.messagebus.service\" ;;\n        \"skills\")            _module=\"mycroft.skills\" ;;\n        \"audio\")             _module=\"mycroft.audio\" ;;\n        \"voice\")             _module=\"mycroft.client.speech\" ;;\n        \"cli\")               _module=\"mycroft.client.text\" ;;\n        \"audiotest\")         _module=\"mycroft.util.audio_test\" ;;\n        \"wakewordtest\")      _module=\"test.wake_word\" ;;\n        \"enclosure\")         _module=\"mycroft.client.enclosure\" ;;\n\n        *)\n            echo \"Error: Unknown name '${1}'\"\n            exit 1\n    esac\n}\n\nsource_venv() {\n    # Enter Python virtual environment, unless under Docker\n    if [ ! -f \"/.dockerenv\" ] ; then\n        . \"${VIRTUALENV_ROOT}/bin/activate\"\n    fi\n}\n\nfirst_time=true\ninit_once() {\n    if ($first_time) ; then\n        echo \"Initializing...\"\n        \"${DIR}/scripts/prepare-msm.sh\"\n        source_venv\n        first_time=false\n    fi\n}\n\nlaunch_process() {\n    init_once\n\n    name_to_script_path \"${1}\"\n\n    # Launch process in foreground\n    echo \"Starting $1\"\n    python3 -m ${_module} \"$@\"\n}\n\nrequire_process() {\n    # Launch process if not found\n    name_to_script_path \"${1}\"\n    if ! pgrep -f \"python3 (.*)-m ${_module}\" > /dev/null ; then\n        # Start required process\n        launch_background \"${1}\"\n    fi\n}\n\nlaunch_background() {\n    init_once\n\n    # Check if given module is running and start (or restart if running)\n    name_to_script_path \"${1}\"\n    if pgrep -f \"python3 (.*)-m ${_module}\" > /dev/null ; then\n        if ($_force_restart) ; then\n            echo \"Restarting: ${1}\"\n            \"${DIR}/stop-mycroft.sh\" \"${1}\"\n        else\n            # Already running, no need to restart\n            return\n        fi\n    else\n        echo \"Starting background service $1\"\n    fi\n\n    # Security warning/reminder for the user\n    if [ \"${1}\" = \"bus\" ] ; then\n        echo \"CAUTION: The Mycroft bus is an open websocket with no built-in security\"\n        echo \"         measures.  You are responsible for protecting the local port\"\n        echo \"         8181 with a firewall as appropriate.\"\n    fi\n\n    # Launch process in background, sending logs to standard location\n    python3 -m ${_module} \"$@\" >> \"/var/log/mycroft/${1}.log\" 2>&1 &\n}\n\nlaunch_all() {\n    echo \"Starting all mycroft-core services\"\n    launch_background bus\n    launch_background skills\n    launch_background audio\n    launch_background voice\n    launch_background enclosure\n}\n\ncheck_dependencies() {\n    if [ -f .dev_opts.json ] ; then\n        auto_update=$( jq -r \".auto_update\" < .dev_opts.json 2> /dev/null)\n    else\n        auto_update=\"false\"\n    fi\n    if [ \"$auto_update\" = \"true\" ] ; then\n        # Check github repo for updates (e.g. a new release)\n        git pull\n    fi\n\n    if [ ! -f .installed ] || ! md5sum -c > /dev/null 2>&1 < .installed ; then\n        # Critical files have changed, dev_setup.sh should be run again\n        if [ \"$auto_update\" = \"true\" ] ; then\n            echo \"Updating dependencies...\"\n            bash dev_setup.sh\n        else\n            echo \"Please update dependencies by running ./dev_setup.sh again.\"\n            if command -v notify-send >/dev/null ; then\n                # Generate a desktop notification (ArchLinux)\n                notify-send \"Mycroft Dependencies Outdated\" \"Run ./dev_setup.sh again\"\n            fi\n            exit 1\n        fi\n    fi\n}\n\n_opt=$1\n_force_restart=false\n\nif [ $# -eq 0 ]; then\n\thelp\n\treturn\nfi\n\nshift\nif [ \"${1}\" = \"restart\" ] || [ \"${_opt}\" = \"restart\" ] ; then\n    _force_restart=true\n    if [ \"${_opt}\" = \"restart\" ] ; then\n        # Support \"start-mycroft.sh restart all\" as well as \"start-mycroft.sh all restart\"\n        _opt=$1\n    fi\n\n    if [ $# -gt 0 ]; then\n\t    shift\n    fi\nfi\n\nif [ ! \"${_opt}\" = \"cli\" ] ; then\n    check_dependencies\nfi\n\ncase ${_opt} in\n    \"all\")\n        launch_all\n        ;;\n\n    \"bus\")\n        launch_background \"${_opt}\"\n        ;;\n    \"audio\")\n        launch_background \"${_opt}\"\n        ;;\n    \"skills\")\n        launch_background \"${_opt}\"\n        ;;\n    \"voice\")\n        launch_background \"${_opt}\"\n        ;;\n\n    \"debug\")\n        launch_all\n        launch_process cli\n        ;;\n\n    \"cli\")\n        require_process bus\n        require_process skills\n        launch_process \"${_opt}\"\n        ;;\n\n    # TODO: Restore support for Wifi Setup on a Picroft, etc.\n    # \"wifi\")\n    #    launch_background ${_opt}\n    #    ;;\n    \"unittest\")\n        source_venv\n        pytest test/unittests/ --cov=mycroft \"$@\"\n        ;;\n    \"singleunittest\")\n        source_venv\n        pytest \"$@\"\n        ;;\n    \"skillstest\")\n        source_venv\n        pytest test/integrationtests/skills/discover_tests.py \"$@\"\n        ;;\n    \"vktest\")\n        \"$DIR/bin/mycroft-skill-testrunner\" vktest \"$@\"\n        ;;\n    \"audiotest\")\n        launch_process \"${_opt}\"\n        ;;\n    \"wakewordtest\")\n        launch_process \"${_opt}\"\n        ;;\n    \"sdkdoc\")\n        source_venv\n        cd doc || exit 1  # Exit if doc directory doesn't exist\n        make \"$@\"\n        cd ..\n        ;;\n    \"enclosure\")\n        launch_background \"${_opt}\"\n        ;;\n\n    *)\n        help\n        ;;\nesac\n"
        },
        {
          "name": "stop-mycroft.sh",
          "type": "blob",
          "size": 3.2568359375,
          "content": "#!/bin/sh\n\n# Copyright 2017 Mycroft AI Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script is never sourced but always directly executed, so this is safe to do\nSOURCE=\"$0\"\n\nscript=${0}\nscript=${script##*/}\ncd -P \"$( dirname \"$SOURCE\" )\" || exit 1 # quit if change of folder fails\n\nhelp() {\n    echo \"${script}:  Mycroft service stopper\"\n    echo \"usage: ${script} [service]\"\n    echo\n    echo \"Service:\"\n    echo \"  all       ends core services: bus, audio, skills, voice\"\n    echo \"  (none)    same as \\\"all\\\"\"\n    echo \"  bus       stop the Mycroft messagebus service\"\n    echo \"  audio     stop the audio playback service\"\n    echo \"  skills    stop the skill service\"\n    echo \"  voice     stop voice capture service\"\n    echo \"  enclosure stop enclosure (hardware/gui interface) service\"\n    echo\n    echo \"Examples:\"\n    echo \"  ${script}\"\n    echo \"  ${script} audio\"\n\n    exit 0\n}\n\nprocess_running() {\n    if [ \"$( pgrep -f \"python3 (.*)-m mycroft.*${1}\" )\" ] ; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nend_process() {\n    if process_running \"$1\" ; then\n        # Find the process by name, only returning the oldest if it has children\n        pid=$( pgrep -o -f \"python3 (.*)-m mycroft.*${1}\" )\n        printf \"Stopping %s (%s)...\" \"$1\" \"${pid}\"\n        kill -s INT \"${pid}\"\n\n        # Wait up to 5 seconds (50 * 0.1) for process to stop\n        c=1\n        while [ $c -le 50 ] ; do\n            if process_running \"$1\" ; then\n                sleep 0.1\n                c=$((c + 1))\n            else\n                c=999   # end loop\n            fi\n        done\n\n        if process_running \"$1\" ; then\n            echo \"failed to stop.\"\n            pid=$( pgrep -o -f \"python3 (.*)-m mycroft.*${1}\" )            \n            printf \"  Killing %s (%s)...\\n\" \"$1\" \"${pid}\"\n            kill -9 \"${pid}\"\n            echo \"killed.\"\n            result=120\n        else\n            echo \"stopped.\"\n            if [ $result -eq 0 ] ; then\n                result=100\n            fi\n        fi\n    fi\n}\n\n\nresult=0  # default, no change\n\n\nOPT=$1\nif [ $# -gt 0 ]; then\n\tshift\nfi\n\ncase ${OPT} in\n    \"\"|\"all\")\n        echo \"Stopping all mycroft-core services\"\n        end_process skills\n        end_process audio\n        end_process speech\n        end_process enclosure\n        end_process messagebus.service\n        ;;\n    \"bus\")\n        end_process messagebus.service\n        ;;\n    \"audio\")\n        end_process audio\n        ;;\n    \"skills\")\n        end_process skills\n        ;;\n    \"voice\")\n        end_process speech\n        ;;\n    \"enclosure\")\n        end_process enclosure\n        ;;\n\n    *)\n        help\n        ;;\nesac\n\n# Exit codes:\n#     0   if nothing changed (e.g. --help or no process was running)\n#     100 at least one process was stopped\n#     120 if any process had to be killed\nexit $result\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "venv-activate.sh",
          "type": "blob",
          "size": 2.470703125,
          "content": "#!/usr/bin/env bash\n#\n# Copyright 2018 Mycroft AI Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# This script places the user in the mycroft-core virtual environment,\n# necessary to run unit tests or to interact directly with mycroft-core\n# via an interactive Python shell.\n\n\n# wrap in function to allow local variables, since this file will be source'd\nfunction main() { \n    local quiet=0\n\n    for arg in \"$@\"\n    do\n        case $arg in\n            \"-q\"|\"--quiet\" )\n               quiet=1\n               ;;\n\n            \"-h\"|\"--help\" )\n               echo \"venv-activate.sh:  Enter the Mycroft virtual environment\"\n               echo \"Usage:\"\n               echo \"   source venv-activate.sh\"\n               echo \"or\"\n               echo \"   . venv-activate.sh\"\n               echo \"\"\n               echo \"Options:\"\n               echo \"   -q | --quiet    Don't show instructions.\"\n               echo \"   -h | --help    Show help.\"\n               return 0\n               ;;\n\n            *)\n               echo \"ERROR:  Unrecognized option: $arg\"\n               return 1\n               ;;\n       esac\n    done\n\n    if [[ \"$0\" == \"${BASH_SOURCE[0]}\" ]] ; then\n        # Prevent running in script then exiting immediately\n        echo \"ERROR: Invoke with 'source venv-activate.sh' or '. venv-activate.sh'\"\n    else\n        local SRC_DIR\n        SRC_DIR=\"$( builtin cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" || exit 1; pwd -P )\"\n        source \"${SRC_DIR}/.venv/bin/activate\"\n        \n        # Provide an easier to find \"mycroft-\" prefixed command.\n        unalias mycroft-venv-activate 2>/dev/null\n        # shellcheck disable=SC2139 # The intention _is_ to resolve the variable at define time\n        alias mycroft-venv-deactivate=\"deactivate && unalias mycroft-venv-deactivate 2>/dev/null && alias mycroft-venv-activate=\\\"source '${SRC_DIR}/venv-activate.sh'\\\"\"\n        if [ $quiet -eq 0 ] ; then\n            echo \"Entering Mycroft virtual environment.  Run 'mycroft-venv-deactivate' to exit\"\n        fi\n    fi\n}\n\nmain \"$@\"\n"
        }
      ]
    }
  ]
}