{
  "metadata": {
    "timestamp": 1736560657920,
    "page": 299,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookresearch/mae",
      "stars": 7488,
      "defaultBranch": "main",
      "files": [
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.4580078125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when there is a\nreasonable belief that an individual's behavior may have a negative impact on\nthe project or its community.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2109375,
          "content": "# Contributing to mae\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to mae, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree."
        },
        {
          "name": "FINETUNE.md",
          "type": "blob",
          "size": 6.859375,
          "content": "## Fine-tuning Pre-trained MAE for Classification\n\n### Evaluation\n\nAs a sanity check, run evaluation using our ImageNet **fine-tuned** models:\n\n<table><tbody>\n<!-- START TABLE -->\n<!-- TABLE HEADER -->\n<th valign=\"bottom\"></th>\n<th valign=\"bottom\">ViT-Base</th>\n<th valign=\"bottom\">ViT-Large</th>\n<th valign=\"bottom\">ViT-Huge</th>\n<!-- TABLE BODY -->\n<tr><td align=\"left\">fine-tuned checkpoint</td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/mae/finetune/mae_finetuned_vit_base.pth\">download</a></td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/mae/finetune/mae_finetuned_vit_large.pth\">download</a></td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/mae/finetune/mae_finetuned_vit_huge.pth\">download</a></td>\n</tr>\n<tr><td align=\"left\">md5</td>\n<td align=\"center\"><tt>1b25e9</tt></td>\n<td align=\"center\"><tt>51f550</tt></td>\n<td align=\"center\"><tt>2541f2</tt></td>\n</tr>\n<tr><td align=\"left\">reference ImageNet accuracy</td>\n<td align=\"center\">83.664</td>\n<td align=\"center\">85.952</td>\n<td align=\"center\">86.928</td>\n</tr>\n</tbody></table>\n\nEvaluate ViT-Base in a single GPU (`${IMAGENET_DIR}` is a directory containing `{train, val}` sets of ImageNet):\n```\npython main_finetune.py --eval --resume mae_finetuned_vit_base.pth --model vit_base_patch16 --batch_size 16 --data_path ${IMAGENET_DIR}\n```\nThis should give:\n```\n* Acc@1 83.664 Acc@5 96.530 loss 0.731\n```\n\nEvaluate ViT-Large:\n```\npython main_finetune.py --eval --resume mae_finetuned_vit_large.pth --model vit_large_patch16 --batch_size 16 --data_path ${IMAGENET_DIR}\n```\nThis should give:\n```\n* Acc@1 85.952 Acc@5 97.570 loss 0.646\n```\n\nEvaluate ViT-Huge:\n```\npython main_finetune.py --eval --resume mae_finetuned_vit_huge.pth --model vit_huge_patch14 --batch_size 16 --data_path ${IMAGENET_DIR}\n```\nThis should give:\n```\n* Acc@1 86.928 Acc@5 98.088 loss 0.584\n```\n\n### Fine-tuning\n\nGet our pre-trained checkpoints from [here](https://github.com/fairinternal/mae/#pre-trained-checkpoints).\n\nTo fine-tune with **multi-node distributed training**, run the following on 4 nodes with 8 GPUs each:\n```\npython submitit_finetune.py \\\n    --job_dir ${JOB_DIR} \\\n    --nodes 4 \\\n    --batch_size 32 \\\n    --model vit_base_patch16 \\\n    --finetune ${PRETRAIN_CHKPT} \\\n    --epochs 100 \\\n    --blr 5e-4 --layer_decay 0.65 \\\n    --weight_decay 0.05 --drop_path 0.1 --reprob 0.25 --mixup 0.8 --cutmix 1.0 \\\n    --dist_eval --data_path ${IMAGENET_DIR}\n```\n- Install submitit (`pip install submitit`) first.\n- Here the effective batch size is 32 (`batch_size` per gpu) * 4 (`nodes`) * 8 (gpus per node) = 1024.\n- `blr` is the base learning rate. The actual `lr` is computed by the [linear scaling rule](https://arxiv.org/abs/1706.02677): `lr` = `blr` * effective batch size / 256.\n- We have run 4 trials with different random seeds. The resutls are 83.63, 83.66, 83.52, 83.46 (mean 83.57 and std 0.08).\n- Training time is ~7h11m in 32 V100 GPUs.\n\nScript for ViT-Large:\n```\npython submitit_finetune.py \\\n    --job_dir ${JOB_DIR} \\\n    --nodes 4 --use_volta32 \\\n    --batch_size 32 \\\n    --model vit_large_patch16 \\\n    --finetune ${PRETRAIN_CHKPT} \\\n    --epochs 50 \\\n    --blr 1e-3 --layer_decay 0.75 \\\n    --weight_decay 0.05 --drop_path 0.2 --reprob 0.25 --mixup 0.8 --cutmix 1.0 \\\n    --dist_eval --data_path ${IMAGENET_DIR}\n```\n- We have run 4 trials with different random seeds. The resutls are 85.95, 85.87, 85.76, 85.88 (mean 85.87 and std 0.07).\n- Training time is ~8h52m in 32 V100 GPUs.\n\nScript for ViT-Huge:\n```\npython submitit_finetune.py \\\n    --job_dir ${JOB_DIR} \\\n    --nodes 8 --use_volta32 \\\n    --batch_size 16 \\\n    --model vit_huge_patch14 \\\n    --finetune ${PRETRAIN_CHKPT} \\\n    --epochs 50 \\\n    --blr 1e-3 --layer_decay 0.75 \\\n    --weight_decay 0.05 --drop_path 0.3 --reprob 0.25 --mixup 0.8 --cutmix 1.0 \\\n    --dist_eval --data_path ${IMAGENET_DIR}\n```\n- Training time is ~13h9m in 64 V100 GPUs.\n\nTo fine-tune our pre-trained ViT-Base with **single-node training**, run the following on 1 node with 8 GPUs:\n```\nOMP_NUM_THREADS=1 python -m torch.distributed.launch --nproc_per_node=8 main_finetune.py \\\n    --accum_iter 4 \\\n    --batch_size 32 \\\n    --model vit_base_patch16 \\\n    --finetune ${PRETRAIN_CHKPT} \\\n    --epochs 100 \\\n    --blr 5e-4 --layer_decay 0.65 \\\n    --weight_decay 0.05 --drop_path 0.1 --mixup 0.8 --cutmix 1.0 --reprob 0.25 \\\n    --dist_eval --data_path ${IMAGENET_DIR}\n```\n- Here the effective batch size is 32 (`batch_size` per gpu) * 4 (`accum_iter`) * 8 (gpus) = 1024. `--accum_iter 4` simulates 4 nodes.\n\n#### Notes\n\n- The [pre-trained models we provide](https://github.com/fairinternal/mae/#pre-trained-checkpoints) are trained with *normalized* pixels `--norm_pix_loss` (1600 epochs, Table 3 in paper). The fine-tuning hyper-parameters are slightly different from the default baseline using *unnormalized* pixels.\n\n- The original MAE implementation was in TensorFlow+TPU with no explicit mixed precision. This re-implementation is in PyTorch+GPU with automatic mixed precision (`torch.cuda.amp`). We have observed different numerical behavior between the two platforms. In this repo, we use `--global_pool` for fine-tuning; using `--cls_token` performs similarly, but there is a chance of producing NaN when fine-tuning ViT-Huge in GPUs. We did not observe this issue in TPUs. Turning off amp could solve this issue, but is slower.\n\n- Here we use RandErase following DeiT: `--reprob 0.25`. Its effect is smaller than random variance.\n\n### Linear Probing\n\nRun the following on 4 nodes with 8 GPUs each:\n```\npython submitit_linprobe.py \\\n    --job_dir ${JOB_DIR} \\\n    --nodes 4 \\\n    --batch_size 512 \\\n    --model vit_base_patch16 --cls_token \\\n    --finetune ${PRETRAIN_CHKPT} \\\n    --epochs 90 \\\n    --blr 0.1 \\\n    --weight_decay 0.0 \\\n    --dist_eval --data_path ${IMAGENET_DIR}\n```\n- Here the effective batch size is 512 (`batch_size` per gpu) * 4 (`nodes`) * 8 (gpus per node) = 16384.\n- `blr` is the base learning rate. The actual `lr` is computed by the [linear scaling rule](https://arxiv.org/abs/1706.02677): `lr` = `blr` * effective batch size / 256.\n- Training time is ~2h20m for 90 epochs in 32 V100 GPUs.\n- To run single-node training, follow the instruction in fine-tuning.\n\nTo train ViT-Large or ViT-Huge, set `--model vit_large_patch16` or `--model vit_huge_patch14`. It is sufficient to train 50 epochs `--epochs 50`.\n\nThis PT/GPU code produces *better* results for ViT-L/H (see the table below). This is likely caused by the system difference between TF and PT.\n\n<table><tbody>\n<!-- START TABLE -->\n<!-- TABLE HEADER -->\n<th valign=\"bottom\"></th>\n<th valign=\"bottom\">ViT-Base</th>\n<th valign=\"bottom\">ViT-Large</th>\n<th valign=\"bottom\">ViT-Huge</th>\n<!-- TABLE BODY -->\n<tr><td align=\"left\">paper (TF/TPU)</td>\n<td align=\"center\">68.0</td>\n<td align=\"center\">75.8</td>\n<td align=\"center\">76.6</td>\n</tr>\n<tr><td align=\"left\">this repo (PT/GPU)</td>\n<td align=\"center\">67.8</td>\n<td align=\"center\">76.0</td>\n<td align=\"center\">77.2</td>\n</tr>\n</tbody></table>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 18.8837890625,
          "content": "\nAttribution-NonCommercial 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n   wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public: \n   wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-NonCommercial 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-NonCommercial 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. NonCommercial means not primarily intended for or directed towards\n     commercial advantage or monetary compensation. For purposes of\n     this Public License, the exchange of the Licensed Material for\n     other material subject to Copyright and Similar Rights by digital\n     file-sharing or similar means is NonCommercial provided there is\n     no payment of monetary compensation in connection with the\n     exchange.\n\n  j. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  k. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  l. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part, for NonCommercial purposes only; and\n\n            b. produce, reproduce, and Share Adapted Material for\n               NonCommercial purposes only.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties, including when\n          the Licensed Material is used other than for NonCommercial\n          purposes.\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database for NonCommercial purposes\n     only;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org."
        },
        {
          "name": "PRETRAIN.md",
          "type": "blob",
          "size": 1.6005859375,
          "content": "## Pre-training MAE\n\nTo pre-train ViT-Large (recommended default) with **multi-node distributed training**, run the following on 8 nodes with 8 GPUs each:\n```\npython submitit_pretrain.py \\\n    --job_dir ${JOB_DIR} \\\n    --nodes 8 \\\n    --use_volta32 \\\n    --batch_size 64 \\\n    --model mae_vit_large_patch16 \\\n    --norm_pix_loss \\\n    --mask_ratio 0.75 \\\n    --epochs 800 \\\n    --warmup_epochs 40 \\\n    --blr 1.5e-4 --weight_decay 0.05 \\\n    --data_path ${IMAGENET_DIR}\n```\n- Here the effective batch size is 64 (`batch_size` per gpu) * 8 (`nodes`) * 8 (gpus per node) = 4096. If memory or # gpus is limited, use `--accum_iter` to maintain the effective batch size, which is `batch_size` (per gpu) * `nodes` * 8 (gpus per node) * `accum_iter`.\n- `blr` is the base learning rate. The actual `lr` is computed by the [linear scaling rule](https://arxiv.org/abs/1706.02677): `lr` = `blr` * effective batch size / 256.\n- Here we use `--norm_pix_loss` as the target for better representation learning. To train a baseline model (e.g., for visualization), use pixel-based construction and turn off `--norm_pix_loss`.\n- The exact same hyper-parameters and configs (initialization, augmentation, etc.) are used as our TF/TPU implementation. In our sanity checks, this PT/GPU re-implementation can reproduce the TF/TPU results within reasonable random variation. We get 85.5% [fine-tuning](FINETUNE.md) accuracy by pre-training ViT-Large for 800 epochs (85.4% in paper Table 1d with TF/TPU).\n- Training time is ~42h in 64 V100 GPUs (800 epochs).\n\nTo train ViT-Base or ViT-Huge, set `--model mae_vit_base_patch16` or `--model mae_vit_huge_patch14`.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.58203125,
          "content": "## Masked Autoencoders: A PyTorch Implementation\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/11435359/146857310-f258c86c-fde6-48e8-9cee-badd2b21bd2c.png\" width=\"480\">\n</p>\n\n\nThis is a PyTorch/GPU re-implementation of the paper [Masked Autoencoders Are Scalable Vision Learners](https://arxiv.org/abs/2111.06377):\n```\n@Article{MaskedAutoencoders2021,\n  author  = {Kaiming He and Xinlei Chen and Saining Xie and Yanghao Li and Piotr Doll{\\'a}r and Ross Girshick},\n  journal = {arXiv:2111.06377},\n  title   = {Masked Autoencoders Are Scalable Vision Learners},\n  year    = {2021},\n}\n```\n\n* The original implementation was in TensorFlow+TPU. This re-implementation is in PyTorch+GPU.\n\n* This repo is a modification on the [DeiT repo](https://github.com/facebookresearch/deit). Installation and preparation follow that repo.\n\n* This repo is based on [`timm==0.3.2`](https://github.com/rwightman/pytorch-image-models), for which a [fix](https://github.com/rwightman/pytorch-image-models/issues/420#issuecomment-776459842) is needed to work with PyTorch 1.8.1+.\n\n### Catalog\n\n- [x] Visualization demo\n- [x] Pre-trained checkpoints + fine-tuning code\n- [x] Pre-training code\n\n### Visualization demo\n\nRun our interactive visualization demo using [Colab notebook](https://colab.research.google.com/github/facebookresearch/mae/blob/main/demo/mae_visualize.ipynb) (no GPU needed):\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/11435359/147859292-77341c70-2ed8-4703-b153-f505dcb6f2f8.png\" width=\"600\">\n</p>\n\n### Fine-tuning with pre-trained checkpoints\n\nThe following table provides the pre-trained checkpoints used in the paper, converted from TF/TPU to PT/GPU:\n<table><tbody>\n<!-- START TABLE -->\n<!-- TABLE HEADER -->\n<th valign=\"bottom\"></th>\n<th valign=\"bottom\">ViT-Base</th>\n<th valign=\"bottom\">ViT-Large</th>\n<th valign=\"bottom\">ViT-Huge</th>\n<!-- TABLE BODY -->\n<tr><td align=\"left\">pre-trained checkpoint</td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/mae/pretrain/mae_pretrain_vit_base.pth\">download</a></td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/mae/pretrain/mae_pretrain_vit_large.pth\">download</a></td>\n<td align=\"center\"><a href=\"https://dl.fbaipublicfiles.com/mae/pretrain/mae_pretrain_vit_huge.pth\">download</a></td>\n</tr>\n<tr><td align=\"left\">md5</td>\n<td align=\"center\"><tt>8cad7c</tt></td>\n<td align=\"center\"><tt>b8b06e</tt></td>\n<td align=\"center\"><tt>9bdbb0</tt></td>\n</tr>\n</tbody></table>\n\nThe fine-tuning instruction is in [FINETUNE.md](FINETUNE.md).\n\nBy fine-tuning these pre-trained models, we rank #1 in these classification tasks (detailed in the paper):\n<table><tbody>\n<!-- START TABLE -->\n<!-- TABLE HEADER -->\n<th valign=\"bottom\"></th>\n<th valign=\"bottom\">ViT-B</th>\n<th valign=\"bottom\">ViT-L</th>\n<th valign=\"bottom\">ViT-H</th>\n<th valign=\"bottom\">ViT-H<sub>448</sub></th>\n<td valign=\"bottom\" style=\"color:#C0C0C0\">prev best</td>\n<!-- TABLE BODY -->\n<tr><td align=\"left\">ImageNet-1K (no external data)</td>\n<td align=\"center\">83.6</td>\n<td align=\"center\">85.9</td>\n<td align=\"center\">86.9</td>\n<td align=\"center\"><b>87.8</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">87.1</td>\n</tr>\n<td colspan=\"5\"><font size=\"1\"><em>following are evaluation of the same model weights (fine-tuned in original ImageNet-1K):</em></font></td>\n<tr>\n</tr>\n<tr><td align=\"left\">ImageNet-Corruption (error rate) </td>\n<td align=\"center\">51.7</td>\n<td align=\"center\">41.8</td>\n<td align=\"center\"><b>33.8</b></td>\n<td align=\"center\">36.8</td>\n<td align=\"center\" style=\"color:#C0C0C0\">42.5</td>\n</tr>\n<tr><td align=\"left\">ImageNet-Adversarial</td>\n<td align=\"center\">35.9</td>\n<td align=\"center\">57.1</td>\n<td align=\"center\">68.2</td>\n<td align=\"center\"><b>76.7</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">35.8</td>\n</tr>\n<tr><td align=\"left\">ImageNet-Rendition</td>\n<td align=\"center\">48.3</td>\n<td align=\"center\">59.9</td>\n<td align=\"center\">64.4</td>\n<td align=\"center\"><b>66.5</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">48.7</td>\n</tr>\n<tr><td align=\"left\">ImageNet-Sketch</td>\n<td align=\"center\">34.5</td>\n<td align=\"center\">45.3</td>\n<td align=\"center\">49.6</td>\n<td align=\"center\"><b>50.9</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">36.0</td>\n</tr>\n<td colspan=\"5\"><font size=\"1\"><em>following are transfer learning by fine-tuning the pre-trained MAE on the target dataset:</em></font></td>\n</tr>\n<tr><td align=\"left\">iNaturalists 2017</td>\n<td align=\"center\">70.5</td>\n<td align=\"center\">75.7</td>\n<td align=\"center\">79.3</td>\n<td align=\"center\"><b>83.4</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">75.4</td>\n</tr>\n<tr><td align=\"left\">iNaturalists 2018</td>\n<td align=\"center\">75.4</td>\n<td align=\"center\">80.1</td>\n<td align=\"center\">83.0</td>\n<td align=\"center\"><b>86.8</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">81.2</td>\n</tr>\n<tr><td align=\"left\">iNaturalists 2019</td>\n<td align=\"center\">80.5</td>\n<td align=\"center\">83.4</td>\n<td align=\"center\">85.7</td>\n<td align=\"center\"><b>88.3</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">84.1</td>\n</tr>\n<tr><td align=\"left\">Places205</td>\n<td align=\"center\">63.9</td>\n<td align=\"center\">65.8</td>\n<td align=\"center\">65.9</td>\n<td align=\"center\"><b>66.8</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">66.0</td>\n</tr>\n<tr><td align=\"left\">Places365</td>\n<td align=\"center\">57.9</td>\n<td align=\"center\">59.4</td>\n<td align=\"center\">59.8</td>\n<td align=\"center\"><b>60.3</b></td>\n<td align=\"center\" style=\"color:#C0C0C0\">58.0</td>\n</tr>\n</tbody></table>\n\n### Pre-training\n\nThe pre-training instruction is in [PRETRAIN.md](PRETRAIN.md).\n\n### License\n\nThis project is under the CC-BY-NC 4.0 license. See [LICENSE](LICENSE) for details.\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine_finetune.py",
          "type": "blob",
          "size": 4.666015625,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# DeiT: https://github.com/facebookresearch/deit\n# BEiT: https://github.com/microsoft/unilm/tree/master/beit\n# --------------------------------------------------------\n\nimport math\nimport sys\nfrom typing import Iterable, Optional\n\nimport torch\n\nfrom timm.data import Mixup\nfrom timm.utils import accuracy\n\nimport util.misc as misc\nimport util.lr_sched as lr_sched\n\n\ndef train_one_epoch(model: torch.nn.Module, criterion: torch.nn.Module,\n                    data_loader: Iterable, optimizer: torch.optim.Optimizer,\n                    device: torch.device, epoch: int, loss_scaler, max_norm: float = 0,\n                    mixup_fn: Optional[Mixup] = None, log_writer=None,\n                    args=None):\n    model.train(True)\n    metric_logger = misc.MetricLogger(delimiter=\"  \")\n    metric_logger.add_meter('lr', misc.SmoothedValue(window_size=1, fmt='{value:.6f}'))\n    header = 'Epoch: [{}]'.format(epoch)\n    print_freq = 20\n\n    accum_iter = args.accum_iter\n\n    optimizer.zero_grad()\n\n    if log_writer is not None:\n        print('log_dir: {}'.format(log_writer.log_dir))\n\n    for data_iter_step, (samples, targets) in enumerate(metric_logger.log_every(data_loader, print_freq, header)):\n\n        # we use a per iteration (instead of per epoch) lr scheduler\n        if data_iter_step % accum_iter == 0:\n            lr_sched.adjust_learning_rate(optimizer, data_iter_step / len(data_loader) + epoch, args)\n\n        samples = samples.to(device, non_blocking=True)\n        targets = targets.to(device, non_blocking=True)\n\n        if mixup_fn is not None:\n            samples, targets = mixup_fn(samples, targets)\n\n        with torch.cuda.amp.autocast():\n            outputs = model(samples)\n            loss = criterion(outputs, targets)\n\n        loss_value = loss.item()\n\n        if not math.isfinite(loss_value):\n            print(\"Loss is {}, stopping training\".format(loss_value))\n            sys.exit(1)\n\n        loss /= accum_iter\n        loss_scaler(loss, optimizer, clip_grad=max_norm,\n                    parameters=model.parameters(), create_graph=False,\n                    update_grad=(data_iter_step + 1) % accum_iter == 0)\n        if (data_iter_step + 1) % accum_iter == 0:\n            optimizer.zero_grad()\n\n        torch.cuda.synchronize()\n\n        metric_logger.update(loss=loss_value)\n        min_lr = 10.\n        max_lr = 0.\n        for group in optimizer.param_groups:\n            min_lr = min(min_lr, group[\"lr\"])\n            max_lr = max(max_lr, group[\"lr\"])\n\n        metric_logger.update(lr=max_lr)\n\n        loss_value_reduce = misc.all_reduce_mean(loss_value)\n        if log_writer is not None and (data_iter_step + 1) % accum_iter == 0:\n            \"\"\" We use epoch_1000x as the x-axis in tensorboard.\n            This calibrates different curves when batch size changes.\n            \"\"\"\n            epoch_1000x = int((data_iter_step / len(data_loader) + epoch) * 1000)\n            log_writer.add_scalar('loss', loss_value_reduce, epoch_1000x)\n            log_writer.add_scalar('lr', max_lr, epoch_1000x)\n\n    # gather the stats from all processes\n    metric_logger.synchronize_between_processes()\n    print(\"Averaged stats:\", metric_logger)\n    return {k: meter.global_avg for k, meter in metric_logger.meters.items()}\n\n\n@torch.no_grad()\ndef evaluate(data_loader, model, device):\n    criterion = torch.nn.CrossEntropyLoss()\n\n    metric_logger = misc.MetricLogger(delimiter=\"  \")\n    header = 'Test:'\n\n    # switch to evaluation mode\n    model.eval()\n\n    for batch in metric_logger.log_every(data_loader, 10, header):\n        images = batch[0]\n        target = batch[-1]\n        images = images.to(device, non_blocking=True)\n        target = target.to(device, non_blocking=True)\n\n        # compute output\n        with torch.cuda.amp.autocast():\n            output = model(images)\n            loss = criterion(output, target)\n\n        acc1, acc5 = accuracy(output, target, topk=(1, 5))\n\n        batch_size = images.shape[0]\n        metric_logger.update(loss=loss.item())\n        metric_logger.meters['acc1'].update(acc1.item(), n=batch_size)\n        metric_logger.meters['acc5'].update(acc5.item(), n=batch_size)\n    # gather the stats from all processes\n    metric_logger.synchronize_between_processes()\n    print('* Acc@1 {top1.global_avg:.3f} Acc@5 {top5.global_avg:.3f} loss {losses.global_avg:.3f}'\n          .format(top1=metric_logger.acc1, top5=metric_logger.acc5, losses=metric_logger.loss))\n\n    return {k: meter.global_avg for k, meter in metric_logger.meters.items()}"
        },
        {
          "name": "engine_pretrain.py",
          "type": "blob",
          "size": 2.9296875,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# DeiT: https://github.com/facebookresearch/deit\n# BEiT: https://github.com/microsoft/unilm/tree/master/beit\n# --------------------------------------------------------\nimport math\nimport sys\nfrom typing import Iterable\n\nimport torch\n\nimport util.misc as misc\nimport util.lr_sched as lr_sched\n\n\ndef train_one_epoch(model: torch.nn.Module,\n                    data_loader: Iterable, optimizer: torch.optim.Optimizer,\n                    device: torch.device, epoch: int, loss_scaler,\n                    log_writer=None,\n                    args=None):\n    model.train(True)\n    metric_logger = misc.MetricLogger(delimiter=\"  \")\n    metric_logger.add_meter('lr', misc.SmoothedValue(window_size=1, fmt='{value:.6f}'))\n    header = 'Epoch: [{}]'.format(epoch)\n    print_freq = 20\n\n    accum_iter = args.accum_iter\n\n    optimizer.zero_grad()\n\n    if log_writer is not None:\n        print('log_dir: {}'.format(log_writer.log_dir))\n\n    for data_iter_step, (samples, _) in enumerate(metric_logger.log_every(data_loader, print_freq, header)):\n\n        # we use a per iteration (instead of per epoch) lr scheduler\n        if data_iter_step % accum_iter == 0:\n            lr_sched.adjust_learning_rate(optimizer, data_iter_step / len(data_loader) + epoch, args)\n\n        samples = samples.to(device, non_blocking=True)\n\n        with torch.cuda.amp.autocast():\n            loss, _, _ = model(samples, mask_ratio=args.mask_ratio)\n\n        loss_value = loss.item()\n\n        if not math.isfinite(loss_value):\n            print(\"Loss is {}, stopping training\".format(loss_value))\n            sys.exit(1)\n\n        loss /= accum_iter\n        loss_scaler(loss, optimizer, parameters=model.parameters(),\n                    update_grad=(data_iter_step + 1) % accum_iter == 0)\n        if (data_iter_step + 1) % accum_iter == 0:\n            optimizer.zero_grad()\n\n        torch.cuda.synchronize()\n\n        metric_logger.update(loss=loss_value)\n\n        lr = optimizer.param_groups[0][\"lr\"]\n        metric_logger.update(lr=lr)\n\n        loss_value_reduce = misc.all_reduce_mean(loss_value)\n        if log_writer is not None and (data_iter_step + 1) % accum_iter == 0:\n            \"\"\" We use epoch_1000x as the x-axis in tensorboard.\n            This calibrates different curves when batch size changes.\n            \"\"\"\n            epoch_1000x = int((data_iter_step / len(data_loader) + epoch) * 1000)\n            log_writer.add_scalar('train_loss', loss_value_reduce, epoch_1000x)\n            log_writer.add_scalar('lr', lr, epoch_1000x)\n\n\n    # gather the stats from all processes\n    metric_logger.synchronize_between_processes()\n    print(\"Averaged stats:\", metric_logger)\n    return {k: meter.global_avg for k, meter in metric_logger.meters.items()}"
        },
        {
          "name": "main_finetune.py",
          "type": "blob",
          "size": 15.2666015625,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# DeiT: https://github.com/facebookresearch/deit\n# BEiT: https://github.com/microsoft/unilm/tree/master/beit\n# --------------------------------------------------------\n\nimport argparse\nimport datetime\nimport json\nimport numpy as np\nimport os\nimport time\nfrom pathlib import Path\n\nimport torch\nimport torch.backends.cudnn as cudnn\nfrom torch.utils.tensorboard import SummaryWriter\n\nimport timm\n\nassert timm.__version__ == \"0.3.2\" # version check\nfrom timm.models.layers import trunc_normal_\nfrom timm.data.mixup import Mixup\nfrom timm.loss import LabelSmoothingCrossEntropy, SoftTargetCrossEntropy\n\nimport util.lr_decay as lrd\nimport util.misc as misc\nfrom util.datasets import build_dataset\nfrom util.pos_embed import interpolate_pos_embed\nfrom util.misc import NativeScalerWithGradNormCount as NativeScaler\n\nimport models_vit\n\nfrom engine_finetune import train_one_epoch, evaluate\n\n\ndef get_args_parser():\n    parser = argparse.ArgumentParser('MAE fine-tuning for image classification', add_help=False)\n    parser.add_argument('--batch_size', default=64, type=int,\n                        help='Batch size per GPU (effective batch size is batch_size * accum_iter * # gpus')\n    parser.add_argument('--epochs', default=50, type=int)\n    parser.add_argument('--accum_iter', default=1, type=int,\n                        help='Accumulate gradient iterations (for increasing the effective batch size under memory constraints)')\n\n    # Model parameters\n    parser.add_argument('--model', default='vit_large_patch16', type=str, metavar='MODEL',\n                        help='Name of model to train')\n\n    parser.add_argument('--input_size', default=224, type=int,\n                        help='images input size')\n\n    parser.add_argument('--drop_path', type=float, default=0.1, metavar='PCT',\n                        help='Drop path rate (default: 0.1)')\n\n    # Optimizer parameters\n    parser.add_argument('--clip_grad', type=float, default=None, metavar='NORM',\n                        help='Clip gradient norm (default: None, no clipping)')\n    parser.add_argument('--weight_decay', type=float, default=0.05,\n                        help='weight decay (default: 0.05)')\n\n    parser.add_argument('--lr', type=float, default=None, metavar='LR',\n                        help='learning rate (absolute lr)')\n    parser.add_argument('--blr', type=float, default=1e-3, metavar='LR',\n                        help='base learning rate: absolute_lr = base_lr * total_batch_size / 256')\n    parser.add_argument('--layer_decay', type=float, default=0.75,\n                        help='layer-wise lr decay from ELECTRA/BEiT')\n\n    parser.add_argument('--min_lr', type=float, default=1e-6, metavar='LR',\n                        help='lower lr bound for cyclic schedulers that hit 0')\n\n    parser.add_argument('--warmup_epochs', type=int, default=5, metavar='N',\n                        help='epochs to warmup LR')\n\n    # Augmentation parameters\n    parser.add_argument('--color_jitter', type=float, default=None, metavar='PCT',\n                        help='Color jitter factor (enabled only when not using Auto/RandAug)')\n    parser.add_argument('--aa', type=str, default='rand-m9-mstd0.5-inc1', metavar='NAME',\n                        help='Use AutoAugment policy. \"v0\" or \"original\". \" + \"(default: rand-m9-mstd0.5-inc1)'),\n    parser.add_argument('--smoothing', type=float, default=0.1,\n                        help='Label smoothing (default: 0.1)')\n\n    # * Random Erase params\n    parser.add_argument('--reprob', type=float, default=0.25, metavar='PCT',\n                        help='Random erase prob (default: 0.25)')\n    parser.add_argument('--remode', type=str, default='pixel',\n                        help='Random erase mode (default: \"pixel\")')\n    parser.add_argument('--recount', type=int, default=1,\n                        help='Random erase count (default: 1)')\n    parser.add_argument('--resplit', action='store_true', default=False,\n                        help='Do not random erase first (clean) augmentation split')\n\n    # * Mixup params\n    parser.add_argument('--mixup', type=float, default=0,\n                        help='mixup alpha, mixup enabled if > 0.')\n    parser.add_argument('--cutmix', type=float, default=0,\n                        help='cutmix alpha, cutmix enabled if > 0.')\n    parser.add_argument('--cutmix_minmax', type=float, nargs='+', default=None,\n                        help='cutmix min/max ratio, overrides alpha and enables cutmix if set (default: None)')\n    parser.add_argument('--mixup_prob', type=float, default=1.0,\n                        help='Probability of performing mixup or cutmix when either/both is enabled')\n    parser.add_argument('--mixup_switch_prob', type=float, default=0.5,\n                        help='Probability of switching to cutmix when both mixup and cutmix enabled')\n    parser.add_argument('--mixup_mode', type=str, default='batch',\n                        help='How to apply mixup/cutmix params. Per \"batch\", \"pair\", or \"elem\"')\n\n    # * Finetuning params\n    parser.add_argument('--finetune', default='',\n                        help='finetune from checkpoint')\n    parser.add_argument('--global_pool', action='store_true')\n    parser.set_defaults(global_pool=True)\n    parser.add_argument('--cls_token', action='store_false', dest='global_pool',\n                        help='Use class token instead of global pool for classification')\n\n    # Dataset parameters\n    parser.add_argument('--data_path', default='/datasets01/imagenet_full_size/061417/', type=str,\n                        help='dataset path')\n    parser.add_argument('--nb_classes', default=1000, type=int,\n                        help='number of the classification types')\n\n    parser.add_argument('--output_dir', default='./output_dir',\n                        help='path where to save, empty for no saving')\n    parser.add_argument('--log_dir', default='./output_dir',\n                        help='path where to tensorboard log')\n    parser.add_argument('--device', default='cuda',\n                        help='device to use for training / testing')\n    parser.add_argument('--seed', default=0, type=int)\n    parser.add_argument('--resume', default='',\n                        help='resume from checkpoint')\n\n    parser.add_argument('--start_epoch', default=0, type=int, metavar='N',\n                        help='start epoch')\n    parser.add_argument('--eval', action='store_true',\n                        help='Perform evaluation only')\n    parser.add_argument('--dist_eval', action='store_true', default=False,\n                        help='Enabling distributed evaluation (recommended during training for faster monitor')\n    parser.add_argument('--num_workers', default=10, type=int)\n    parser.add_argument('--pin_mem', action='store_true',\n                        help='Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.')\n    parser.add_argument('--no_pin_mem', action='store_false', dest='pin_mem')\n    parser.set_defaults(pin_mem=True)\n\n    # distributed training parameters\n    parser.add_argument('--world_size', default=1, type=int,\n                        help='number of distributed processes')\n    parser.add_argument('--local_rank', default=-1, type=int)\n    parser.add_argument('--dist_on_itp', action='store_true')\n    parser.add_argument('--dist_url', default='env://',\n                        help='url used to set up distributed training')\n\n    return parser\n\n\ndef main(args):\n    misc.init_distributed_mode(args)\n\n    print('job dir: {}'.format(os.path.dirname(os.path.realpath(__file__))))\n    print(\"{}\".format(args).replace(', ', ',\\n'))\n\n    device = torch.device(args.device)\n\n    # fix the seed for reproducibility\n    seed = args.seed + misc.get_rank()\n    torch.manual_seed(seed)\n    np.random.seed(seed)\n\n    cudnn.benchmark = True\n\n    dataset_train = build_dataset(is_train=True, args=args)\n    dataset_val = build_dataset(is_train=False, args=args)\n\n    if True:  # args.distributed:\n        num_tasks = misc.get_world_size()\n        global_rank = misc.get_rank()\n        sampler_train = torch.utils.data.DistributedSampler(\n            dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True\n        )\n        print(\"Sampler_train = %s\" % str(sampler_train))\n        if args.dist_eval:\n            if len(dataset_val) % num_tasks != 0:\n                print('Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '\n                      'This will slightly alter validation results as extra duplicate entries are added to achieve '\n                      'equal num of samples per-process.')\n            sampler_val = torch.utils.data.DistributedSampler(\n                dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=True)  # shuffle=True to reduce monitor bias\n        else:\n            sampler_val = torch.utils.data.SequentialSampler(dataset_val)\n    else:\n        sampler_train = torch.utils.data.RandomSampler(dataset_train)\n        sampler_val = torch.utils.data.SequentialSampler(dataset_val)\n\n    if global_rank == 0 and args.log_dir is not None and not args.eval:\n        os.makedirs(args.log_dir, exist_ok=True)\n        log_writer = SummaryWriter(log_dir=args.log_dir)\n    else:\n        log_writer = None\n\n    data_loader_train = torch.utils.data.DataLoader(\n        dataset_train, sampler=sampler_train,\n        batch_size=args.batch_size,\n        num_workers=args.num_workers,\n        pin_memory=args.pin_mem,\n        drop_last=True,\n    )\n\n    data_loader_val = torch.utils.data.DataLoader(\n        dataset_val, sampler=sampler_val,\n        batch_size=args.batch_size,\n        num_workers=args.num_workers,\n        pin_memory=args.pin_mem,\n        drop_last=False\n    )\n\n    mixup_fn = None\n    mixup_active = args.mixup > 0 or args.cutmix > 0. or args.cutmix_minmax is not None\n    if mixup_active:\n        print(\"Mixup is activated!\")\n        mixup_fn = Mixup(\n            mixup_alpha=args.mixup, cutmix_alpha=args.cutmix, cutmix_minmax=args.cutmix_minmax,\n            prob=args.mixup_prob, switch_prob=args.mixup_switch_prob, mode=args.mixup_mode,\n            label_smoothing=args.smoothing, num_classes=args.nb_classes)\n    \n    model = models_vit.__dict__[args.model](\n        num_classes=args.nb_classes,\n        drop_path_rate=args.drop_path,\n        global_pool=args.global_pool,\n    )\n\n    if args.finetune and not args.eval:\n        checkpoint = torch.load(args.finetune, map_location='cpu')\n\n        print(\"Load pre-trained checkpoint from: %s\" % args.finetune)\n        checkpoint_model = checkpoint['model']\n        state_dict = model.state_dict()\n        for k in ['head.weight', 'head.bias']:\n            if k in checkpoint_model and checkpoint_model[k].shape != state_dict[k].shape:\n                print(f\"Removing key {k} from pretrained checkpoint\")\n                del checkpoint_model[k]\n\n        # interpolate position embedding\n        interpolate_pos_embed(model, checkpoint_model)\n\n        # load pre-trained model\n        msg = model.load_state_dict(checkpoint_model, strict=False)\n        print(msg)\n\n        if args.global_pool:\n            assert set(msg.missing_keys) == {'head.weight', 'head.bias', 'fc_norm.weight', 'fc_norm.bias'}\n        else:\n            assert set(msg.missing_keys) == {'head.weight', 'head.bias'}\n\n        # manually initialize fc layer\n        trunc_normal_(model.head.weight, std=2e-5)\n\n    model.to(device)\n\n    model_without_ddp = model\n    n_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n\n    print(\"Model = %s\" % str(model_without_ddp))\n    print('number of params (M): %.2f' % (n_parameters / 1.e6))\n\n    eff_batch_size = args.batch_size * args.accum_iter * misc.get_world_size()\n    \n    if args.lr is None:  # only base_lr is specified\n        args.lr = args.blr * eff_batch_size / 256\n\n    print(\"base lr: %.2e\" % (args.lr * 256 / eff_batch_size))\n    print(\"actual lr: %.2e\" % args.lr)\n\n    print(\"accumulate grad iterations: %d\" % args.accum_iter)\n    print(\"effective batch size: %d\" % eff_batch_size)\n\n    if args.distributed:\n        model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])\n        model_without_ddp = model.module\n\n    # build optimizer with layer-wise lr decay (lrd)\n    param_groups = lrd.param_groups_lrd(model_without_ddp, args.weight_decay,\n        no_weight_decay_list=model_without_ddp.no_weight_decay(),\n        layer_decay=args.layer_decay\n    )\n    optimizer = torch.optim.AdamW(param_groups, lr=args.lr)\n    loss_scaler = NativeScaler()\n\n    if mixup_fn is not None:\n        # smoothing is handled with mixup label transform\n        criterion = SoftTargetCrossEntropy()\n    elif args.smoothing > 0.:\n        criterion = LabelSmoothingCrossEntropy(smoothing=args.smoothing)\n    else:\n        criterion = torch.nn.CrossEntropyLoss()\n\n    print(\"criterion = %s\" % str(criterion))\n\n    misc.load_model(args=args, model_without_ddp=model_without_ddp, optimizer=optimizer, loss_scaler=loss_scaler)\n\n    if args.eval:\n        test_stats = evaluate(data_loader_val, model, device)\n        print(f\"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%\")\n        exit(0)\n\n    print(f\"Start training for {args.epochs} epochs\")\n    start_time = time.time()\n    max_accuracy = 0.0\n    for epoch in range(args.start_epoch, args.epochs):\n        if args.distributed:\n            data_loader_train.sampler.set_epoch(epoch)\n        train_stats = train_one_epoch(\n            model, criterion, data_loader_train,\n            optimizer, device, epoch, loss_scaler,\n            args.clip_grad, mixup_fn,\n            log_writer=log_writer,\n            args=args\n        )\n        if args.output_dir:\n            misc.save_model(\n                args=args, model=model, model_without_ddp=model_without_ddp, optimizer=optimizer,\n                loss_scaler=loss_scaler, epoch=epoch)\n\n        test_stats = evaluate(data_loader_val, model, device)\n        print(f\"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%\")\n        max_accuracy = max(max_accuracy, test_stats[\"acc1\"])\n        print(f'Max accuracy: {max_accuracy:.2f}%')\n\n        if log_writer is not None:\n            log_writer.add_scalar('perf/test_acc1', test_stats['acc1'], epoch)\n            log_writer.add_scalar('perf/test_acc5', test_stats['acc5'], epoch)\n            log_writer.add_scalar('perf/test_loss', test_stats['loss'], epoch)\n\n        log_stats = {**{f'train_{k}': v for k, v in train_stats.items()},\n                        **{f'test_{k}': v for k, v in test_stats.items()},\n                        'epoch': epoch,\n                        'n_parameters': n_parameters}\n\n        if args.output_dir and misc.is_main_process():\n            if log_writer is not None:\n                log_writer.flush()\n            with open(os.path.join(args.output_dir, \"log.txt\"), mode=\"a\", encoding=\"utf-8\") as f:\n                f.write(json.dumps(log_stats) + \"\\n\")\n\n    total_time = time.time() - start_time\n    total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n    print('Training time {}'.format(total_time_str))\n\n\nif __name__ == '__main__':\n    args = get_args_parser()\n    args = args.parse_args()\n    if args.output_dir:\n        Path(args.output_dir).mkdir(parents=True, exist_ok=True)\n    main(args)\n"
        },
        {
          "name": "main_linprobe.py",
          "type": "blob",
          "size": 12.833984375,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# DeiT: https://github.com/facebookresearch/deit\n# MoCo v3: https://github.com/facebookresearch/moco-v3\n# --------------------------------------------------------\n\nimport argparse\nimport datetime\nimport json\nimport numpy as np\nimport os\nimport time\nfrom pathlib import Path\n\nimport torch\nimport torch.backends.cudnn as cudnn\nfrom torch.utils.tensorboard import SummaryWriter\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\n\nimport timm\n\nassert timm.__version__ == \"0.3.2\" # version check\nfrom timm.models.layers import trunc_normal_\n\nimport util.misc as misc\nfrom util.pos_embed import interpolate_pos_embed\nfrom util.misc import NativeScalerWithGradNormCount as NativeScaler\nfrom util.lars import LARS\nfrom util.crop import RandomResizedCrop\n\nimport models_vit\n\nfrom engine_finetune import train_one_epoch, evaluate\n\n\ndef get_args_parser():\n    parser = argparse.ArgumentParser('MAE linear probing for image classification', add_help=False)\n    parser.add_argument('--batch_size', default=512, type=int,\n                        help='Batch size per GPU (effective batch size is batch_size * accum_iter * # gpus')\n    parser.add_argument('--epochs', default=90, type=int)\n    parser.add_argument('--accum_iter', default=1, type=int,\n                        help='Accumulate gradient iterations (for increasing the effective batch size under memory constraints)')\n\n    # Model parameters\n    parser.add_argument('--model', default='vit_large_patch16', type=str, metavar='MODEL',\n                        help='Name of model to train')\n\n    # Optimizer parameters\n    parser.add_argument('--weight_decay', type=float, default=0,\n                        help='weight decay (default: 0 for linear probe following MoCo v1)')\n\n    parser.add_argument('--lr', type=float, default=None, metavar='LR',\n                        help='learning rate (absolute lr)')\n    parser.add_argument('--blr', type=float, default=0.1, metavar='LR',\n                        help='base learning rate: absolute_lr = base_lr * total_batch_size / 256')\n\n    parser.add_argument('--min_lr', type=float, default=0., metavar='LR',\n                        help='lower lr bound for cyclic schedulers that hit 0')\n\n    parser.add_argument('--warmup_epochs', type=int, default=10, metavar='N',\n                        help='epochs to warmup LR')\n\n    # * Finetuning params\n    parser.add_argument('--finetune', default='',\n                        help='finetune from checkpoint')\n    parser.add_argument('--global_pool', action='store_true')\n    parser.set_defaults(global_pool=False)\n    parser.add_argument('--cls_token', action='store_false', dest='global_pool',\n                        help='Use class token instead of global pool for classification')\n\n    # Dataset parameters\n    parser.add_argument('--data_path', default='/datasets01/imagenet_full_size/061417/', type=str,\n                        help='dataset path')\n    parser.add_argument('--nb_classes', default=1000, type=int,\n                        help='number of the classification types')\n\n    parser.add_argument('--output_dir', default='./output_dir',\n                        help='path where to save, empty for no saving')\n    parser.add_argument('--log_dir', default='./output_dir',\n                        help='path where to tensorboard log')\n    parser.add_argument('--device', default='cuda',\n                        help='device to use for training / testing')\n    parser.add_argument('--seed', default=0, type=int)\n    parser.add_argument('--resume', default='',\n                        help='resume from checkpoint')\n\n    parser.add_argument('--start_epoch', default=0, type=int, metavar='N',\n                        help='start epoch')\n    parser.add_argument('--eval', action='store_true',\n                        help='Perform evaluation only')\n    parser.add_argument('--dist_eval', action='store_true', default=False,\n                        help='Enabling distributed evaluation (recommended during training for faster monitor')\n    parser.add_argument('--num_workers', default=10, type=int)\n    parser.add_argument('--pin_mem', action='store_true',\n                        help='Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.')\n    parser.add_argument('--no_pin_mem', action='store_false', dest='pin_mem')\n    parser.set_defaults(pin_mem=True)\n\n    # distributed training parameters\n    parser.add_argument('--world_size', default=1, type=int,\n                        help='number of distributed processes')\n    parser.add_argument('--local_rank', default=-1, type=int)\n    parser.add_argument('--dist_on_itp', action='store_true')\n    parser.add_argument('--dist_url', default='env://',\n                        help='url used to set up distributed training')\n\n    return parser\n\n\ndef main(args):\n    misc.init_distributed_mode(args)\n\n    print('job dir: {}'.format(os.path.dirname(os.path.realpath(__file__))))\n    print(\"{}\".format(args).replace(', ', ',\\n'))\n\n    device = torch.device(args.device)\n\n    # fix the seed for reproducibility\n    seed = args.seed + misc.get_rank()\n    torch.manual_seed(seed)\n    np.random.seed(seed)\n\n    cudnn.benchmark = True\n\n    # linear probe: weak augmentation\n    transform_train = transforms.Compose([\n            RandomResizedCrop(224, interpolation=3),\n            transforms.RandomHorizontalFlip(),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])\n    transform_val = transforms.Compose([\n            transforms.Resize(256, interpolation=3),\n            transforms.CenterCrop(224),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])\n    dataset_train = datasets.ImageFolder(os.path.join(args.data_path, 'train'), transform=transform_train)\n    dataset_val = datasets.ImageFolder(os.path.join(args.data_path, 'val'), transform=transform_val)\n    print(dataset_train)\n    print(dataset_val)\n\n    if True:  # args.distributed:\n        num_tasks = misc.get_world_size()\n        global_rank = misc.get_rank()\n        sampler_train = torch.utils.data.DistributedSampler(\n            dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True\n        )\n        print(\"Sampler_train = %s\" % str(sampler_train))\n        if args.dist_eval:\n            if len(dataset_val) % num_tasks != 0:\n                print('Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '\n                      'This will slightly alter validation results as extra duplicate entries are added to achieve '\n                      'equal num of samples per-process.')\n            sampler_val = torch.utils.data.DistributedSampler(\n                dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=True)  # shuffle=True to reduce monitor bias\n        else:\n            sampler_val = torch.utils.data.SequentialSampler(dataset_val)\n    else:\n        sampler_train = torch.utils.data.RandomSampler(dataset_train)\n        sampler_val = torch.utils.data.SequentialSampler(dataset_val)\n\n    if global_rank == 0 and args.log_dir is not None and not args.eval:\n        os.makedirs(args.log_dir, exist_ok=True)\n        log_writer = SummaryWriter(log_dir=args.log_dir)\n    else:\n        log_writer = None\n\n    data_loader_train = torch.utils.data.DataLoader(\n        dataset_train, sampler=sampler_train,\n        batch_size=args.batch_size,\n        num_workers=args.num_workers,\n        pin_memory=args.pin_mem,\n        drop_last=True,\n    )\n\n    data_loader_val = torch.utils.data.DataLoader(\n        dataset_val, sampler=sampler_val,\n        batch_size=args.batch_size,\n        num_workers=args.num_workers,\n        pin_memory=args.pin_mem,\n        drop_last=False\n    )\n\n    model = models_vit.__dict__[args.model](\n        num_classes=args.nb_classes,\n        global_pool=args.global_pool,\n    )\n\n    if args.finetune and not args.eval:\n        checkpoint = torch.load(args.finetune, map_location='cpu')\n\n        print(\"Load pre-trained checkpoint from: %s\" % args.finetune)\n        checkpoint_model = checkpoint['model']\n        state_dict = model.state_dict()\n        for k in ['head.weight', 'head.bias']:\n            if k in checkpoint_model and checkpoint_model[k].shape != state_dict[k].shape:\n                print(f\"Removing key {k} from pretrained checkpoint\")\n                del checkpoint_model[k]\n\n        # interpolate position embedding\n        interpolate_pos_embed(model, checkpoint_model)\n\n        # load pre-trained model\n        msg = model.load_state_dict(checkpoint_model, strict=False)\n        print(msg)\n\n        if args.global_pool:\n            assert set(msg.missing_keys) == {'head.weight', 'head.bias', 'fc_norm.weight', 'fc_norm.bias'}\n        else:\n            assert set(msg.missing_keys) == {'head.weight', 'head.bias'}\n\n        # manually initialize fc layer: following MoCo v3\n        trunc_normal_(model.head.weight, std=0.01)\n\n    # for linear prob only\n    # hack: revise model's head with BN\n    model.head = torch.nn.Sequential(torch.nn.BatchNorm1d(model.head.in_features, affine=False, eps=1e-6), model.head)\n    # freeze all but the head\n    for _, p in model.named_parameters():\n        p.requires_grad = False\n    for _, p in model.head.named_parameters():\n        p.requires_grad = True\n\n    model.to(device)\n\n    model_without_ddp = model\n    n_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n\n    print(\"Model = %s\" % str(model_without_ddp))\n    print('number of params (M): %.2f' % (n_parameters / 1.e6))\n\n    eff_batch_size = args.batch_size * args.accum_iter * misc.get_world_size()\n    \n    if args.lr is None:  # only base_lr is specified\n        args.lr = args.blr * eff_batch_size / 256\n\n    print(\"base lr: %.2e\" % (args.lr * 256 / eff_batch_size))\n    print(\"actual lr: %.2e\" % args.lr)\n\n    print(\"accumulate grad iterations: %d\" % args.accum_iter)\n    print(\"effective batch size: %d\" % eff_batch_size)\n\n    if args.distributed:\n        model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])\n        model_without_ddp = model.module\n\n    optimizer = LARS(model_without_ddp.head.parameters(), lr=args.lr, weight_decay=args.weight_decay)\n    print(optimizer)\n    loss_scaler = NativeScaler()\n\n    criterion = torch.nn.CrossEntropyLoss()\n\n    print(\"criterion = %s\" % str(criterion))\n\n    misc.load_model(args=args, model_without_ddp=model_without_ddp, optimizer=optimizer, loss_scaler=loss_scaler)\n\n    if args.eval:\n        test_stats = evaluate(data_loader_val, model, device)\n        print(f\"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%\")\n        exit(0)\n\n    print(f\"Start training for {args.epochs} epochs\")\n    start_time = time.time()\n    max_accuracy = 0.0\n    for epoch in range(args.start_epoch, args.epochs):\n        if args.distributed:\n            data_loader_train.sampler.set_epoch(epoch)\n        train_stats = train_one_epoch(\n            model, criterion, data_loader_train,\n            optimizer, device, epoch, loss_scaler,\n            max_norm=None,\n            log_writer=log_writer,\n            args=args\n        )\n        if args.output_dir:\n            misc.save_model(\n                args=args, model=model, model_without_ddp=model_without_ddp, optimizer=optimizer,\n                loss_scaler=loss_scaler, epoch=epoch)\n\n        test_stats = evaluate(data_loader_val, model, device)\n        print(f\"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%\")\n        max_accuracy = max(max_accuracy, test_stats[\"acc1\"])\n        print(f'Max accuracy: {max_accuracy:.2f}%')\n\n        if log_writer is not None:\n            log_writer.add_scalar('perf/test_acc1', test_stats['acc1'], epoch)\n            log_writer.add_scalar('perf/test_acc5', test_stats['acc5'], epoch)\n            log_writer.add_scalar('perf/test_loss', test_stats['loss'], epoch)\n\n        log_stats = {**{f'train_{k}': v for k, v in train_stats.items()},\n                        **{f'test_{k}': v for k, v in test_stats.items()},\n                        'epoch': epoch,\n                        'n_parameters': n_parameters}\n\n        if args.output_dir and misc.is_main_process():\n            if log_writer is not None:\n                log_writer.flush()\n            with open(os.path.join(args.output_dir, \"log.txt\"), mode=\"a\", encoding=\"utf-8\") as f:\n                f.write(json.dumps(log_stats) + \"\\n\")\n\n    total_time = time.time() - start_time\n    total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n    print('Training time {}'.format(total_time_str))\n\n\nif __name__ == '__main__':\n    args = get_args_parser()\n    args = args.parse_args()\n    if args.output_dir:\n        Path(args.output_dir).mkdir(parents=True, exist_ok=True)\n    main(args)\n"
        },
        {
          "name": "main_pretrain.py",
          "type": "blob",
          "size": 8.65234375,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# DeiT: https://github.com/facebookresearch/deit\n# BEiT: https://github.com/microsoft/unilm/tree/master/beit\n# --------------------------------------------------------\nimport argparse\nimport datetime\nimport json\nimport numpy as np\nimport os\nimport time\nfrom pathlib import Path\n\nimport torch\nimport torch.backends.cudnn as cudnn\nfrom torch.utils.tensorboard import SummaryWriter\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\n\nimport timm\n\nassert timm.__version__ == \"0.3.2\"  # version check\nimport timm.optim.optim_factory as optim_factory\n\nimport util.misc as misc\nfrom util.misc import NativeScalerWithGradNormCount as NativeScaler\n\nimport models_mae\n\nfrom engine_pretrain import train_one_epoch\n\n\ndef get_args_parser():\n    parser = argparse.ArgumentParser('MAE pre-training', add_help=False)\n    parser.add_argument('--batch_size', default=64, type=int,\n                        help='Batch size per GPU (effective batch size is batch_size * accum_iter * # gpus')\n    parser.add_argument('--epochs', default=400, type=int)\n    parser.add_argument('--accum_iter', default=1, type=int,\n                        help='Accumulate gradient iterations (for increasing the effective batch size under memory constraints)')\n\n    # Model parameters\n    parser.add_argument('--model', default='mae_vit_large_patch16', type=str, metavar='MODEL',\n                        help='Name of model to train')\n\n    parser.add_argument('--input_size', default=224, type=int,\n                        help='images input size')\n\n    parser.add_argument('--mask_ratio', default=0.75, type=float,\n                        help='Masking ratio (percentage of removed patches).')\n\n    parser.add_argument('--norm_pix_loss', action='store_true',\n                        help='Use (per-patch) normalized pixels as targets for computing loss')\n    parser.set_defaults(norm_pix_loss=False)\n\n    # Optimizer parameters\n    parser.add_argument('--weight_decay', type=float, default=0.05,\n                        help='weight decay (default: 0.05)')\n\n    parser.add_argument('--lr', type=float, default=None, metavar='LR',\n                        help='learning rate (absolute lr)')\n    parser.add_argument('--blr', type=float, default=1e-3, metavar='LR',\n                        help='base learning rate: absolute_lr = base_lr * total_batch_size / 256')\n    parser.add_argument('--min_lr', type=float, default=0., metavar='LR',\n                        help='lower lr bound for cyclic schedulers that hit 0')\n\n    parser.add_argument('--warmup_epochs', type=int, default=40, metavar='N',\n                        help='epochs to warmup LR')\n\n    # Dataset parameters\n    parser.add_argument('--data_path', default='/datasets01/imagenet_full_size/061417/', type=str,\n                        help='dataset path')\n\n    parser.add_argument('--output_dir', default='./output_dir',\n                        help='path where to save, empty for no saving')\n    parser.add_argument('--log_dir', default='./output_dir',\n                        help='path where to tensorboard log')\n    parser.add_argument('--device', default='cuda',\n                        help='device to use for training / testing')\n    parser.add_argument('--seed', default=0, type=int)\n    parser.add_argument('--resume', default='',\n                        help='resume from checkpoint')\n\n    parser.add_argument('--start_epoch', default=0, type=int, metavar='N',\n                        help='start epoch')\n    parser.add_argument('--num_workers', default=10, type=int)\n    parser.add_argument('--pin_mem', action='store_true',\n                        help='Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.')\n    parser.add_argument('--no_pin_mem', action='store_false', dest='pin_mem')\n    parser.set_defaults(pin_mem=True)\n\n    # distributed training parameters\n    parser.add_argument('--world_size', default=1, type=int,\n                        help='number of distributed processes')\n    parser.add_argument('--local_rank', default=-1, type=int)\n    parser.add_argument('--dist_on_itp', action='store_true')\n    parser.add_argument('--dist_url', default='env://',\n                        help='url used to set up distributed training')\n\n    return parser\n\n\ndef main(args):\n    misc.init_distributed_mode(args)\n\n    print('job dir: {}'.format(os.path.dirname(os.path.realpath(__file__))))\n    print(\"{}\".format(args).replace(', ', ',\\n'))\n\n    device = torch.device(args.device)\n\n    # fix the seed for reproducibility\n    seed = args.seed + misc.get_rank()\n    torch.manual_seed(seed)\n    np.random.seed(seed)\n\n    cudnn.benchmark = True\n\n    # simple augmentation\n    transform_train = transforms.Compose([\n            transforms.RandomResizedCrop(args.input_size, scale=(0.2, 1.0), interpolation=3),  # 3 is bicubic\n            transforms.RandomHorizontalFlip(),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])\n    dataset_train = datasets.ImageFolder(os.path.join(args.data_path, 'train'), transform=transform_train)\n    print(dataset_train)\n\n    if True:  # args.distributed:\n        num_tasks = misc.get_world_size()\n        global_rank = misc.get_rank()\n        sampler_train = torch.utils.data.DistributedSampler(\n            dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True\n        )\n        print(\"Sampler_train = %s\" % str(sampler_train))\n    else:\n        sampler_train = torch.utils.data.RandomSampler(dataset_train)\n\n    if global_rank == 0 and args.log_dir is not None:\n        os.makedirs(args.log_dir, exist_ok=True)\n        log_writer = SummaryWriter(log_dir=args.log_dir)\n    else:\n        log_writer = None\n\n    data_loader_train = torch.utils.data.DataLoader(\n        dataset_train, sampler=sampler_train,\n        batch_size=args.batch_size,\n        num_workers=args.num_workers,\n        pin_memory=args.pin_mem,\n        drop_last=True,\n    )\n    \n    # define the model\n    model = models_mae.__dict__[args.model](norm_pix_loss=args.norm_pix_loss)\n\n    model.to(device)\n\n    model_without_ddp = model\n    print(\"Model = %s\" % str(model_without_ddp))\n\n    eff_batch_size = args.batch_size * args.accum_iter * misc.get_world_size()\n    \n    if args.lr is None:  # only base_lr is specified\n        args.lr = args.blr * eff_batch_size / 256\n\n    print(\"base lr: %.2e\" % (args.lr * 256 / eff_batch_size))\n    print(\"actual lr: %.2e\" % args.lr)\n\n    print(\"accumulate grad iterations: %d\" % args.accum_iter)\n    print(\"effective batch size: %d\" % eff_batch_size)\n\n    if args.distributed:\n        model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)\n        model_without_ddp = model.module\n    \n    # following timm: set wd as 0 for bias and norm layers\n    param_groups = optim_factory.add_weight_decay(model_without_ddp, args.weight_decay)\n    optimizer = torch.optim.AdamW(param_groups, lr=args.lr, betas=(0.9, 0.95))\n    print(optimizer)\n    loss_scaler = NativeScaler()\n\n    misc.load_model(args=args, model_without_ddp=model_without_ddp, optimizer=optimizer, loss_scaler=loss_scaler)\n\n    print(f\"Start training for {args.epochs} epochs\")\n    start_time = time.time()\n    for epoch in range(args.start_epoch, args.epochs):\n        if args.distributed:\n            data_loader_train.sampler.set_epoch(epoch)\n        train_stats = train_one_epoch(\n            model, data_loader_train,\n            optimizer, device, epoch, loss_scaler,\n            log_writer=log_writer,\n            args=args\n        )\n        if args.output_dir and (epoch % 20 == 0 or epoch + 1 == args.epochs):\n            misc.save_model(\n                args=args, model=model, model_without_ddp=model_without_ddp, optimizer=optimizer,\n                loss_scaler=loss_scaler, epoch=epoch)\n\n        log_stats = {**{f'train_{k}': v for k, v in train_stats.items()},\n                        'epoch': epoch,}\n\n        if args.output_dir and misc.is_main_process():\n            if log_writer is not None:\n                log_writer.flush()\n            with open(os.path.join(args.output_dir, \"log.txt\"), mode=\"a\", encoding=\"utf-8\") as f:\n                f.write(json.dumps(log_stats) + \"\\n\")\n\n    total_time = time.time() - start_time\n    total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n    print('Training time {}'.format(total_time_str))\n\n\nif __name__ == '__main__':\n    args = get_args_parser()\n    args = args.parse_args()\n    if args.output_dir:\n        Path(args.output_dir).mkdir(parents=True, exist_ok=True)\n    main(args)\n"
        },
        {
          "name": "models_mae.py",
          "type": "blob",
          "size": 9.513671875,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# timm: https://github.com/rwightman/pytorch-image-models/tree/master/timm\n# DeiT: https://github.com/facebookresearch/deit\n# --------------------------------------------------------\n\nfrom functools import partial\n\nimport torch\nimport torch.nn as nn\n\nfrom timm.models.vision_transformer import PatchEmbed, Block\n\nfrom util.pos_embed import get_2d_sincos_pos_embed\n\n\nclass MaskedAutoencoderViT(nn.Module):\n    \"\"\" Masked Autoencoder with VisionTransformer backbone\n    \"\"\"\n    def __init__(self, img_size=224, patch_size=16, in_chans=3,\n                 embed_dim=1024, depth=24, num_heads=16,\n                 decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,\n                 mlp_ratio=4., norm_layer=nn.LayerNorm, norm_pix_loss=False):\n        super().__init__()\n\n        # --------------------------------------------------------------------------\n        # MAE encoder specifics\n        self.patch_embed = PatchEmbed(img_size, patch_size, in_chans, embed_dim)\n        num_patches = self.patch_embed.num_patches\n\n        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))\n        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim), requires_grad=False)  # fixed sin-cos embedding\n\n        self.blocks = nn.ModuleList([\n            Block(embed_dim, num_heads, mlp_ratio, qkv_bias=True, qk_scale=None, norm_layer=norm_layer)\n            for i in range(depth)])\n        self.norm = norm_layer(embed_dim)\n        # --------------------------------------------------------------------------\n\n        # --------------------------------------------------------------------------\n        # MAE decoder specifics\n        self.decoder_embed = nn.Linear(embed_dim, decoder_embed_dim, bias=True)\n\n        self.mask_token = nn.Parameter(torch.zeros(1, 1, decoder_embed_dim))\n\n        self.decoder_pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, decoder_embed_dim), requires_grad=False)  # fixed sin-cos embedding\n\n        self.decoder_blocks = nn.ModuleList([\n            Block(decoder_embed_dim, decoder_num_heads, mlp_ratio, qkv_bias=True, qk_scale=None, norm_layer=norm_layer)\n            for i in range(decoder_depth)])\n\n        self.decoder_norm = norm_layer(decoder_embed_dim)\n        self.decoder_pred = nn.Linear(decoder_embed_dim, patch_size**2 * in_chans, bias=True) # decoder to patch\n        # --------------------------------------------------------------------------\n\n        self.norm_pix_loss = norm_pix_loss\n\n        self.initialize_weights()\n\n    def initialize_weights(self):\n        # initialization\n        # initialize (and freeze) pos_embed by sin-cos embedding\n        pos_embed = get_2d_sincos_pos_embed(self.pos_embed.shape[-1], int(self.patch_embed.num_patches**.5), cls_token=True)\n        self.pos_embed.data.copy_(torch.from_numpy(pos_embed).float().unsqueeze(0))\n\n        decoder_pos_embed = get_2d_sincos_pos_embed(self.decoder_pos_embed.shape[-1], int(self.patch_embed.num_patches**.5), cls_token=True)\n        self.decoder_pos_embed.data.copy_(torch.from_numpy(decoder_pos_embed).float().unsqueeze(0))\n\n        # initialize patch_embed like nn.Linear (instead of nn.Conv2d)\n        w = self.patch_embed.proj.weight.data\n        torch.nn.init.xavier_uniform_(w.view([w.shape[0], -1]))\n\n        # timm's trunc_normal_(std=.02) is effectively normal_(std=0.02) as cutoff is too big (2.)\n        torch.nn.init.normal_(self.cls_token, std=.02)\n        torch.nn.init.normal_(self.mask_token, std=.02)\n\n        # initialize nn.Linear and nn.LayerNorm\n        self.apply(self._init_weights)\n\n    def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            # we use xavier_uniform following official JAX ViT:\n            torch.nn.init.xavier_uniform_(m.weight)\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n\n    def patchify(self, imgs):\n        \"\"\"\n        imgs: (N, 3, H, W)\n        x: (N, L, patch_size**2 *3)\n        \"\"\"\n        p = self.patch_embed.patch_size[0]\n        assert imgs.shape[2] == imgs.shape[3] and imgs.shape[2] % p == 0\n\n        h = w = imgs.shape[2] // p\n        x = imgs.reshape(shape=(imgs.shape[0], 3, h, p, w, p))\n        x = torch.einsum('nchpwq->nhwpqc', x)\n        x = x.reshape(shape=(imgs.shape[0], h * w, p**2 * 3))\n        return x\n\n    def unpatchify(self, x):\n        \"\"\"\n        x: (N, L, patch_size**2 *3)\n        imgs: (N, 3, H, W)\n        \"\"\"\n        p = self.patch_embed.patch_size[0]\n        h = w = int(x.shape[1]**.5)\n        assert h * w == x.shape[1]\n        \n        x = x.reshape(shape=(x.shape[0], h, w, p, p, 3))\n        x = torch.einsum('nhwpqc->nchpwq', x)\n        imgs = x.reshape(shape=(x.shape[0], 3, h * p, h * p))\n        return imgs\n\n    def random_masking(self, x, mask_ratio):\n        \"\"\"\n        Perform per-sample random masking by per-sample shuffling.\n        Per-sample shuffling is done by argsort random noise.\n        x: [N, L, D], sequence\n        \"\"\"\n        N, L, D = x.shape  # batch, length, dim\n        len_keep = int(L * (1 - mask_ratio))\n        \n        noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]\n        \n        # sort noise for each sample\n        ids_shuffle = torch.argsort(noise, dim=1)  # ascend: small is keep, large is remove\n        ids_restore = torch.argsort(ids_shuffle, dim=1)\n\n        # keep the first subset\n        ids_keep = ids_shuffle[:, :len_keep]\n        x_masked = torch.gather(x, dim=1, index=ids_keep.unsqueeze(-1).repeat(1, 1, D))\n\n        # generate the binary mask: 0 is keep, 1 is remove\n        mask = torch.ones([N, L], device=x.device)\n        mask[:, :len_keep] = 0\n        # unshuffle to get the binary mask\n        mask = torch.gather(mask, dim=1, index=ids_restore)\n\n        return x_masked, mask, ids_restore\n\n    def forward_encoder(self, x, mask_ratio):\n        # embed patches\n        x = self.patch_embed(x)\n\n        # add pos embed w/o cls token\n        x = x + self.pos_embed[:, 1:, :]\n\n        # masking: length -> length * mask_ratio\n        x, mask, ids_restore = self.random_masking(x, mask_ratio)\n\n        # append cls token\n        cls_token = self.cls_token + self.pos_embed[:, :1, :]\n        cls_tokens = cls_token.expand(x.shape[0], -1, -1)\n        x = torch.cat((cls_tokens, x), dim=1)\n\n        # apply Transformer blocks\n        for blk in self.blocks:\n            x = blk(x)\n        x = self.norm(x)\n\n        return x, mask, ids_restore\n\n    def forward_decoder(self, x, ids_restore):\n        # embed tokens\n        x = self.decoder_embed(x)\n\n        # append mask tokens to sequence\n        mask_tokens = self.mask_token.repeat(x.shape[0], ids_restore.shape[1] + 1 - x.shape[1], 1)\n        x_ = torch.cat([x[:, 1:, :], mask_tokens], dim=1)  # no cls token\n        x_ = torch.gather(x_, dim=1, index=ids_restore.unsqueeze(-1).repeat(1, 1, x.shape[2]))  # unshuffle\n        x = torch.cat([x[:, :1, :], x_], dim=1)  # append cls token\n\n        # add pos embed\n        x = x + self.decoder_pos_embed\n\n        # apply Transformer blocks\n        for blk in self.decoder_blocks:\n            x = blk(x)\n        x = self.decoder_norm(x)\n\n        # predictor projection\n        x = self.decoder_pred(x)\n\n        # remove cls token\n        x = x[:, 1:, :]\n\n        return x\n\n    def forward_loss(self, imgs, pred, mask):\n        \"\"\"\n        imgs: [N, 3, H, W]\n        pred: [N, L, p*p*3]\n        mask: [N, L], 0 is keep, 1 is remove, \n        \"\"\"\n        target = self.patchify(imgs)\n        if self.norm_pix_loss:\n            mean = target.mean(dim=-1, keepdim=True)\n            var = target.var(dim=-1, keepdim=True)\n            target = (target - mean) / (var + 1.e-6)**.5\n\n        loss = (pred - target) ** 2\n        loss = loss.mean(dim=-1)  # [N, L], mean loss per patch\n\n        loss = (loss * mask).sum() / mask.sum()  # mean loss on removed patches\n        return loss\n\n    def forward(self, imgs, mask_ratio=0.75):\n        latent, mask, ids_restore = self.forward_encoder(imgs, mask_ratio)\n        pred = self.forward_decoder(latent, ids_restore)  # [N, L, p*p*3]\n        loss = self.forward_loss(imgs, pred, mask)\n        return loss, pred, mask\n\n\ndef mae_vit_base_patch16_dec512d8b(**kwargs):\n    model = MaskedAutoencoderViT(\n        patch_size=16, embed_dim=768, depth=12, num_heads=12,\n        decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,\n        mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n    return model\n\n\ndef mae_vit_large_patch16_dec512d8b(**kwargs):\n    model = MaskedAutoencoderViT(\n        patch_size=16, embed_dim=1024, depth=24, num_heads=16,\n        decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,\n        mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n    return model\n\n\ndef mae_vit_huge_patch14_dec512d8b(**kwargs):\n    model = MaskedAutoencoderViT(\n        patch_size=14, embed_dim=1280, depth=32, num_heads=16,\n        decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,\n        mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n    return model\n\n\n# set recommended archs\nmae_vit_base_patch16 = mae_vit_base_patch16_dec512d8b  # decoder: 512 dim, 8 blocks\nmae_vit_large_patch16 = mae_vit_large_patch16_dec512d8b  # decoder: 512 dim, 8 blocks\nmae_vit_huge_patch14 = mae_vit_huge_patch14_dec512d8b  # decoder: 512 dim, 8 blocks\n"
        },
        {
          "name": "models_vit.py",
          "type": "blob",
          "size": 2.3271484375,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# References:\n# timm: https://github.com/rwightman/pytorch-image-models/tree/master/timm\n# DeiT: https://github.com/facebookresearch/deit\n# --------------------------------------------------------\n\nfrom functools import partial\n\nimport torch\nimport torch.nn as nn\n\nimport timm.models.vision_transformer\n\n\nclass VisionTransformer(timm.models.vision_transformer.VisionTransformer):\n    \"\"\" Vision Transformer with support for global average pooling\n    \"\"\"\n    def __init__(self, global_pool=False, **kwargs):\n        super(VisionTransformer, self).__init__(**kwargs)\n\n        self.global_pool = global_pool\n        if self.global_pool:\n            norm_layer = kwargs['norm_layer']\n            embed_dim = kwargs['embed_dim']\n            self.fc_norm = norm_layer(embed_dim)\n\n            del self.norm  # remove the original norm\n\n    def forward_features(self, x):\n        B = x.shape[0]\n        x = self.patch_embed(x)\n\n        cls_tokens = self.cls_token.expand(B, -1, -1)  # stole cls_tokens impl from Phil Wang, thanks\n        x = torch.cat((cls_tokens, x), dim=1)\n        x = x + self.pos_embed\n        x = self.pos_drop(x)\n\n        for blk in self.blocks:\n            x = blk(x)\n\n        if self.global_pool:\n            x = x[:, 1:, :].mean(dim=1)  # global pool without cls token\n            outcome = self.fc_norm(x)\n        else:\n            x = self.norm(x)\n            outcome = x[:, 0]\n\n        return outcome\n\n\ndef vit_base_patch16(**kwargs):\n    model = VisionTransformer(\n        patch_size=16, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4, qkv_bias=True,\n        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n    return model\n\n\ndef vit_large_patch16(**kwargs):\n    model = VisionTransformer(\n        patch_size=16, embed_dim=1024, depth=24, num_heads=16, mlp_ratio=4, qkv_bias=True,\n        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n    return model\n\n\ndef vit_huge_patch14(**kwargs):\n    model = VisionTransformer(\n        patch_size=14, embed_dim=1280, depth=32, num_heads=16, mlp_ratio=4, qkv_bias=True,\n        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n    return model"
        },
        {
          "name": "submitit_finetune.py",
          "type": "blob",
          "size": 4.248046875,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# A script to run multinode training with submitit.\n# --------------------------------------------------------\n\nimport argparse\nimport os\nimport uuid\nfrom pathlib import Path\n\nimport main_finetune as classification\nimport submitit\n\n\ndef parse_args():\n    classification_parser = classification.get_args_parser()\n    parser = argparse.ArgumentParser(\"Submitit for MAE finetune\", parents=[classification_parser])\n    parser.add_argument(\"--ngpus\", default=8, type=int, help=\"Number of gpus to request on each node\")\n    parser.add_argument(\"--nodes\", default=2, type=int, help=\"Number of nodes to request\")\n    parser.add_argument(\"--timeout\", default=4320, type=int, help=\"Duration of the job\")\n    parser.add_argument(\"--job_dir\", default=\"\", type=str, help=\"Job dir. Leave empty for automatic.\")\n\n    parser.add_argument(\"--partition\", default=\"learnfair\", type=str, help=\"Partition where to submit\")\n    parser.add_argument(\"--use_volta32\", action='store_true', help=\"Request 32G V100 GPUs\")\n    parser.add_argument('--comment', default=\"\", type=str, help=\"Comment to pass to scheduler\")\n    return parser.parse_args()\n\n\ndef get_shared_folder() -> Path:\n    user = os.getenv(\"USER\")\n    if Path(\"/checkpoint/\").is_dir():\n        p = Path(f\"/checkpoint/{user}/experiments\")\n        p.mkdir(exist_ok=True)\n        return p\n    raise RuntimeError(\"No shared folder available\")\n\n\ndef get_init_file():\n    # Init file must not exist, but it's parent dir must exist.\n    os.makedirs(str(get_shared_folder()), exist_ok=True)\n    init_file = get_shared_folder() / f\"{uuid.uuid4().hex}_init\"\n    if init_file.exists():\n        os.remove(str(init_file))\n    return init_file\n\n\nclass Trainer(object):\n    def __init__(self, args):\n        self.args = args\n\n    def __call__(self):\n        import main_finetune as classification\n\n        self._setup_gpu_args()\n        classification.main(self.args)\n\n    def checkpoint(self):\n        import os\n        import submitit\n\n        self.args.dist_url = get_init_file().as_uri()\n        checkpoint_file = os.path.join(self.args.output_dir, \"checkpoint.pth\")\n        if os.path.exists(checkpoint_file):\n            self.args.resume = checkpoint_file\n        print(\"Requeuing \", self.args)\n        empty_trainer = type(self)(self.args)\n        return submitit.helpers.DelayedSubmission(empty_trainer)\n\n    def _setup_gpu_args(self):\n        import submitit\n        from pathlib import Path\n\n        job_env = submitit.JobEnvironment()\n        self.args.output_dir = Path(str(self.args.output_dir).replace(\"%j\", str(job_env.job_id)))\n        self.args.log_dir = self.args.output_dir\n        self.args.gpu = job_env.local_rank\n        self.args.rank = job_env.global_rank\n        self.args.world_size = job_env.num_tasks\n        print(f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\")\n\n\ndef main():\n    args = parse_args()\n    if args.job_dir == \"\":\n        args.job_dir = get_shared_folder() / \"%j\"\n\n    # Note that the folder will depend on the job_id, to easily track experiments\n    executor = submitit.AutoExecutor(folder=args.job_dir, slurm_max_num_timeout=30)\n\n    num_gpus_per_node = args.ngpus\n    nodes = args.nodes\n    timeout_min = args.timeout\n\n    partition = args.partition\n    kwargs = {}\n    if args.use_volta32:\n        kwargs['slurm_constraint'] = 'volta32gb'\n    if args.comment:\n        kwargs['slurm_comment'] = args.comment\n\n    executor.update_parameters(\n        mem_gb=40 * num_gpus_per_node,\n        gpus_per_node=num_gpus_per_node,\n        tasks_per_node=num_gpus_per_node, # one task per GPU\n        cpus_per_task=10,\n        nodes=nodes,\n        timeout_min=timeout_min,\n        # Below are cluster dependent parameters\n        slurm_partition=partition,\n        slurm_signal_delay_s=120,\n        **kwargs\n    )\n\n    executor.update_parameters(name=\"mae\")\n\n    args.dist_url = get_init_file().as_uri()\n    args.output_dir = args.job_dir\n\n    trainer = Trainer(args)\n    job = executor.submit(trainer)\n\n    # print(\"Submitted job_id:\", job.job_id)\n    print(job.job_id)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "submitit_linprobe.py",
          "type": "blob",
          "size": 4.251953125,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# A script to run multinode training with submitit.\n# --------------------------------------------------------\n\nimport argparse\nimport os\nimport uuid\nfrom pathlib import Path\n\nimport main_linprobe as classification\nimport submitit\n\n\ndef parse_args():\n    classification_parser = classification.get_args_parser()\n    parser = argparse.ArgumentParser(\"Submitit for MAE linear probe\", parents=[classification_parser])\n    parser.add_argument(\"--ngpus\", default=8, type=int, help=\"Number of gpus to request on each node\")\n    parser.add_argument(\"--nodes\", default=2, type=int, help=\"Number of nodes to request\")\n    parser.add_argument(\"--timeout\", default=4320, type=int, help=\"Duration of the job\")\n    parser.add_argument(\"--job_dir\", default=\"\", type=str, help=\"Job dir. Leave empty for automatic.\")\n\n    parser.add_argument(\"--partition\", default=\"learnfair\", type=str, help=\"Partition where to submit\")\n    parser.add_argument(\"--use_volta32\", action='store_true', help=\"Request 32G V100 GPUs\")\n    parser.add_argument('--comment', default=\"\", type=str, help=\"Comment to pass to scheduler\")\n    return parser.parse_args()\n\n\ndef get_shared_folder() -> Path:\n    user = os.getenv(\"USER\")\n    if Path(\"/checkpoint/\").is_dir():\n        p = Path(f\"/checkpoint/{user}/experiments\")\n        p.mkdir(exist_ok=True)\n        return p\n    raise RuntimeError(\"No shared folder available\")\n\n\ndef get_init_file():\n    # Init file must not exist, but it's parent dir must exist.\n    os.makedirs(str(get_shared_folder()), exist_ok=True)\n    init_file = get_shared_folder() / f\"{uuid.uuid4().hex}_init\"\n    if init_file.exists():\n        os.remove(str(init_file))\n    return init_file\n\n\nclass Trainer(object):\n    def __init__(self, args):\n        self.args = args\n\n    def __call__(self):\n        import main_linprobe as classification\n\n        self._setup_gpu_args()\n        classification.main(self.args)\n\n    def checkpoint(self):\n        import os\n        import submitit\n\n        self.args.dist_url = get_init_file().as_uri()\n        checkpoint_file = os.path.join(self.args.output_dir, \"checkpoint.pth\")\n        if os.path.exists(checkpoint_file):\n            self.args.resume = checkpoint_file\n        print(\"Requeuing \", self.args)\n        empty_trainer = type(self)(self.args)\n        return submitit.helpers.DelayedSubmission(empty_trainer)\n\n    def _setup_gpu_args(self):\n        import submitit\n        from pathlib import Path\n\n        job_env = submitit.JobEnvironment()\n        self.args.output_dir = Path(str(self.args.output_dir).replace(\"%j\", str(job_env.job_id)))\n        self.args.log_dir = self.args.output_dir\n        self.args.gpu = job_env.local_rank\n        self.args.rank = job_env.global_rank\n        self.args.world_size = job_env.num_tasks\n        print(f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\")\n\n\ndef main():\n    args = parse_args()\n    if args.job_dir == \"\":\n        args.job_dir = get_shared_folder() / \"%j\"\n\n    # Note that the folder will depend on the job_id, to easily track experiments\n    executor = submitit.AutoExecutor(folder=args.job_dir, slurm_max_num_timeout=30)\n\n    num_gpus_per_node = args.ngpus\n    nodes = args.nodes\n    timeout_min = args.timeout\n\n    partition = args.partition\n    kwargs = {}\n    if args.use_volta32:\n        kwargs['slurm_constraint'] = 'volta32gb'\n    if args.comment:\n        kwargs['slurm_comment'] = args.comment\n\n    executor.update_parameters(\n        mem_gb=40 * num_gpus_per_node,\n        gpus_per_node=num_gpus_per_node,\n        tasks_per_node=num_gpus_per_node, # one task per GPU\n        cpus_per_task=10,\n        nodes=nodes,\n        timeout_min=timeout_min,\n        # Below are cluster dependent parameters\n        slurm_partition=partition,\n        slurm_signal_delay_s=120,\n        **kwargs\n    )\n\n    executor.update_parameters(name=\"mae\")\n\n    args.dist_url = get_init_file().as_uri()\n    args.output_dir = args.job_dir\n\n    trainer = Trainer(args)\n    job = executor.submit(trainer)\n\n    # print(\"Submitted job_id:\", job.job_id)\n    print(job.job_id)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "submitit_pretrain.py",
          "type": "blob",
          "size": 4.2255859375,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n# --------------------------------------------------------\n# A script to run multinode training with submitit.\n# --------------------------------------------------------\n\nimport argparse\nimport os\nimport uuid\nfrom pathlib import Path\n\nimport main_pretrain as trainer\nimport submitit\n\n\ndef parse_args():\n    trainer_parser = trainer.get_args_parser()\n    parser = argparse.ArgumentParser(\"Submitit for MAE pretrain\", parents=[trainer_parser])\n    parser.add_argument(\"--ngpus\", default=8, type=int, help=\"Number of gpus to request on each node\")\n    parser.add_argument(\"--nodes\", default=2, type=int, help=\"Number of nodes to request\")\n    parser.add_argument(\"--timeout\", default=4320, type=int, help=\"Duration of the job\")\n    parser.add_argument(\"--job_dir\", default=\"\", type=str, help=\"Job dir. Leave empty for automatic.\")\n\n    parser.add_argument(\"--partition\", default=\"learnfair\", type=str, help=\"Partition where to submit\")\n    parser.add_argument(\"--use_volta32\", action='store_true', help=\"Request 32G V100 GPUs\")\n    parser.add_argument('--comment', default=\"\", type=str, help=\"Comment to pass to scheduler\")\n    return parser.parse_args()\n\n\ndef get_shared_folder() -> Path:\n    user = os.getenv(\"USER\")\n    if Path(\"/checkpoint/\").is_dir():\n        p = Path(f\"/checkpoint/{user}/experiments\")\n        p.mkdir(exist_ok=True)\n        return p\n    raise RuntimeError(\"No shared folder available\")\n\n\ndef get_init_file():\n    # Init file must not exist, but it's parent dir must exist.\n    os.makedirs(str(get_shared_folder()), exist_ok=True)\n    init_file = get_shared_folder() / f\"{uuid.uuid4().hex}_init\"\n    if init_file.exists():\n        os.remove(str(init_file))\n    return init_file\n\n\nclass Trainer(object):\n    def __init__(self, args):\n        self.args = args\n\n    def __call__(self):\n        import main_pretrain as trainer\n\n        self._setup_gpu_args()\n        trainer.main(self.args)\n\n    def checkpoint(self):\n        import os\n        import submitit\n\n        self.args.dist_url = get_init_file().as_uri()\n        checkpoint_file = os.path.join(self.args.output_dir, \"checkpoint.pth\")\n        if os.path.exists(checkpoint_file):\n            self.args.resume = checkpoint_file\n        print(\"Requeuing \", self.args)\n        empty_trainer = type(self)(self.args)\n        return submitit.helpers.DelayedSubmission(empty_trainer)\n\n    def _setup_gpu_args(self):\n        import submitit\n        from pathlib import Path\n\n        job_env = submitit.JobEnvironment()\n        self.args.output_dir = Path(str(self.args.output_dir).replace(\"%j\", str(job_env.job_id)))\n        self.args.log_dir = self.args.output_dir\n        self.args.gpu = job_env.local_rank\n        self.args.rank = job_env.global_rank\n        self.args.world_size = job_env.num_tasks\n        print(f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\")\n\n\ndef main():\n    args = parse_args()\n    if args.job_dir == \"\":\n        args.job_dir = get_shared_folder() / \"%j\"\n\n    # Note that the folder will depend on the job_id, to easily track experiments\n    executor = submitit.AutoExecutor(folder=args.job_dir, slurm_max_num_timeout=30)\n\n    num_gpus_per_node = args.ngpus\n    nodes = args.nodes\n    timeout_min = args.timeout\n\n    partition = args.partition\n    kwargs = {}\n    if args.use_volta32:\n        kwargs['slurm_constraint'] = 'volta32gb'\n    if args.comment:\n        kwargs['slurm_comment'] = args.comment\n\n    executor.update_parameters(\n        mem_gb=40 * num_gpus_per_node,\n        gpus_per_node=num_gpus_per_node,\n        tasks_per_node=num_gpus_per_node,  # one task per GPU\n        cpus_per_task=10,\n        nodes=nodes,\n        timeout_min=timeout_min,  # max is 60 * 72\n        # Below are cluster dependent parameters\n        slurm_partition=partition,\n        slurm_signal_delay_s=120,\n        **kwargs\n    )\n\n    executor.update_parameters(name=\"mae\")\n\n    args.dist_url = get_init_file().as_uri()\n    args.output_dir = args.job_dir\n\n    trainer = Trainer(args)\n    job = executor.submit(trainer)\n\n    # print(\"Submitted job_id:\", job.job_id)\n    print(job.job_id)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}