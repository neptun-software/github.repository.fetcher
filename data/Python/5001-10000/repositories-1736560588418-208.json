{
  "metadata": {
    "timestamp": 1736560588418,
    "page": 208,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jzhang38/TinyLlama",
      "stars": 8098,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.140625,
          "content": "__pycache__\n.idea\n.DS_Store\n*.egg-info\nbuild\n.venv\n.vscode\n\n# data\ndata\ncheckpoints\nout\nwandb\n\ntests/original_falcon_40b.py\nsft/output\nsft/wandb"
        },
        {
          "name": "EVAL.md",
          "type": "blob",
          "size": 4.705078125,
          "content": "## Evaluate TinyLlama\n\n### GPT4All Benchmarks\n\nWe evaluate TinyLlama's commonsense reasoning ability following the [GPT4All](https://gpt4all.io/index.html) evaluation suite. We include Pythia as our baseline. We report the acc_norm by default. \n\nBase models:\n\n| Model                                     | Pretrain Tokens | HellaSwag | Obqa | WinoGrande | ARC_c | ARC_e | boolq | piqa | avg |\n|-------------------------------------------|-----------------|-----------|------|------------|-------|-------|-------|------|-----|\n| Pythia-1.0B                               |        300B     | 47.16     | 31.40| 53.43      | 27.05 | 48.99 | 60.83 | 69.21 | 48.30 |\n| TinyLlama-1.1B-intermediate-step-50K-104b |        103B     | 43.50     | 29.80| 53.28      | 24.32 | 44.91 | 59.66 | 67.30 | 46.11|\n| TinyLlama-1.1B-intermediate-step-240k-503b|        503B     | 49.56     |31.40 |55.80       |26.54  |48.32  |56.91  |69.42  | 48.28 |\n| TinyLlama-1.1B-intermediate-step-480k-1007B |     1007B     | 52.54     | 33.40 | 55.96      | 27.82 | 52.36 | 59.54 | 69.91 | 50.22 |\n| TinyLlama-1.1B-intermediate-step-715k-1.5T |     1.5T     | 53.68     | 35.20 | 58.33      | 29.18 | 51.89 | 59.08 | 71.65 | 51.29 |\n| TinyLlama-1.1B-intermediate-step-955k-2T |     2T     | 54.63     | 33.40 | 56.83      | 28.07 | 54.67 | 63.21 | 70.67 | 51.64 |\n| TinyLlama-1.1B-intermediate-step-1195k-2.5T  |     2.5T     | 58.96     | 34.40 | 58.72      | 31.91 | 56.78 | 63.21 | 73.07 | 53.86|\n| TinyLlama-1.1B-intermediate-step-1431k-3T  |     3T     | 59.20     | 36.00 | 59.12      | 30.12 | 55.25 | 57.83 | 73.29 | 52.99|\n\n\nChat models:\n| Model                                     | Pretrain Tokens | HellaSwag | Obqa | WinoGrande | ARC_c | ARC_e | boolq | piqa | avg |\n|-------------------------------------------|-----------------|-----------|------|------------|-------|-------|-------|------|-----|\n| [TinyLlama-1.1B-Chat-v0.1](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.1)                 |   503B     | 53.81     |32.20 | 55.01  | 28.67 |49.62  | 58.04 | 69.64 | 49.57 |\n| [TinyLlama-1.1B-Chat-v0.2](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.2)                 |   503B     | 53.63     |32.80 | 54.85  | 28.75 |49.16  | 55.72 | 69.48 | 49.20 |\n| [TinyLlama-1.1B-Chat-v0.3](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.3)                 |   1T       | 56.81     |34.20 | 55.80  | 30.03 |53.20  | 59.57 | 69.91 | 51.36 |\n| [TinyLlama-1.1B-Chat-v0.4](https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v0.4)             |   1.5T     | 58.59     |35.40 | 58.80  | 30.80 |54.04  | 57.31 | 71.16 | 52.30 |\n\n\nWe observed huge improvements once we finetuned the model. We attribute this phenomenon to: 1. the base model has not undergone lr cool-down and FT helps to cool down the lr. 2. the SFT stage better elicits the model's internal knowledge.\n\nYou can obtain the above scores by running [lm-eval-harness](https://github.com/EleutherAI/lm-evaluation-harness):\n```bash\npython main.py \\\n    --model hf-causal \\\n    --model_args pretrained=PY007/TinyLlama-1.1B-Chat-v0.1,dtype=\"float\" \\\n    --tasks hellaswag,openbookqa,winogrande,arc_easy,arc_challenge,boolq,piqa\\\n    --device cuda:0 --batch_size 32\n```\n\n\n\n### Instruct-Eval Benchmarks\nWe evaluate TinyLlama's ability in problem-solving on the [Instruct-Eval](https://github.com/declare-lab/instruct-eval) evaluation suite. \n\n\n| Model                                             | MMLU  | BBH   | HumanEval | DROP  |\n| ------------------------------------------------- | ----- | ----- | --------- | ----- |\n| Pythia-1.0B                                       | 25.70 | 28.19 | 1.83      | 4.25  |\n| TinyLlama-1.1B-intermediate-step-50K-104b         | 26.45 | 28.82 | 5.49      | 11.42 |\n| TinyLlama-1.1B-intermediate-step-240k-503b        | 26.16 | 28.83 | 4.88      | 12.43 |\n| TinyLlama-1.1B-intermediate-step-480K-1T          | 24.65 | 29.21 | 6.1       | 13.03 |\n| TinyLlama-1.1B-intermediate-step-715k-1.5T        | 24.85 | 28.2  | 7.93      | 14.43 |\n| TinyLlama-1.1B-intermediate-step-955k-2T          | 25.97 | 29.07 | 6.71      | 13.14 |\n| TinyLlama-1.1B-intermediate-step-1195k-token-2.5T | 25.92 | 29.32 | 9.15      | 15.45 |\n\nYou can obtain above scores by running [instruct-eval](https://github.com/declare-lab/instruct-eval):\n```bash\nCUDA_VISIBLE_DEVICES=0 python main.py mmlu --model_name llama --model_path PY007/TinyLlama-1.1B-intermediate-step-480K-1T\nCUDA_VISIBLE_DEVICES=1 python main.py bbh --model_name llama --model_path PY007/TinyLlama-1.1B-intermediate-step-480K-1T\nCUDA_VISIBLE_DEVICES=2 python main.py drop --model_name llama --model_path PY007/TinyLlama-1.1B-intermediate-step-480K-1T\nCUDA_VISIBLE_DEVICES=3 python main.py humaneval  --model_name llama  --n_sample 1 --model_path PY007/TinyLlama-1.1B-intermediate-step-480K-1T\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2023] Lightning AI\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "PRETRAIN.md",
          "type": "blob",
          "size": 2.90625,
          "content": "## Pretrain TinyLlama\n\n### Installation\nWe expect you have CUDA 11.8 installed.\n#### Install Pytorch Nightly.\n```bash\npip install --index-url https://download.pytorch.org/whl/nightly/cu118 --pre 'torch>=2.1.0dev'\n```\n#### Build XFormers from Source\nNote: as of 2023/09/02, xformers does not provide pre-built binaries for torch 2.1. You have to build it from source.\n```bash\npip uninstall ninja -y && pip install ninja -U\npip install -v -U git+https://github.com/facebookresearch/xformers.git@main#egg=xformers\n```\n\n\n#### Install Flash-Attention 2 and other fused operators:\n```bash\ngit clone https://github.com/Dao-AILab/flash-attention\ncd flash-attention\npython setup.py install\ncd csrc/rotary && pip install .\ncd ../layer_norm && pip install .\ncd ../xentropy && pip install .\ncd ../.. && rm -rf flash-attention\n```\n#### Install Remaining Dependencies\n```\npip install -r requirements.txt tokenizers sentencepiece\n```\nto install other dependencies.\nIt may take >= 5 minutes to build xformers/flash-attention. Do not worry if the process seemly stagnant or the terminal print out many warnings.\n\nThen you are ready to go 🎉!\n\n### Data Preparation\n\n#### Download Datasets\nDownload the Slimpajama and Starcoderdata datasets to your chosen directory.\n```bash\ncd /path/to/dataset\ngit lfs install\ngit clone https://huggingface.co/datasets/cerebras/SlimPajama-627B\ngit clone https://huggingface.co/datasets/bigcode/starcoderdata\n```\nThe SlimPajama dataset eats 893GB diskspace and the starcoderdata takes 290GB.\n\n#### Tokenize data\nUse the provided scripts to tokenize the datasets and divide them into chunks.\n```bash\npython scripts/prepare_starcoder.py --source_path /path/to/starcoderdata/ --tokenizer_path data/llama --destination_path data/slim_star_combined --split train --percentage 1.0\npython scripts/prepare_slimpajama.py --source_path /path/to/SlimPajama --tokenizer_path data/llama  --destination_path data/slim_star_combined --split validation --percentage 1.0\npython scripts/prepare_slimpajama.py --source_path /path/to/SlimPajama --tokenizer_path data/llama  --destination_path data/slim_star_combined --split train --percentage 1.0\n```\nThe processed data will take 1.8T storage.\n\n### Pretraining\nIf your setup comprises two nodes, each with 8 GPUs, you can initiate pretraining with the following commands:\n\nOn node 1:\n```\nlightning run model \\\n    --node-rank=0  \\\n    --main-address=172.16.101.5 \\\n    --accelerator=cuda \\\n    --devices=8 \\\n    --num-nodes=2 \\\n    pretrain/tinyllama.py --devices 8 --train_data_dir data/slim_star  --val_data_dir data/slim_star\n```\nOn node 2:\n```\nlightning run model \\\n    --node-rank=1  \\\n    --main-address=172.16.101.5 \\\n    --accelerator=cuda \\\n    --devices=8 \\\n    --num-nodes=2 \\\n    pretrain/tinyllama.py --devices 8 --train_data_dir data/slim_star   --val_data_dir data/slim_star\n```\nYou can follow [these instructions](https://lightning.ai/docs/fabric/stable/guide/multi_node/slurm.html) if you have a slurm cluster.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.7822265625,
          "content": "<div align=\"center\">\n\n# TinyLlama-1.1B\nEnglish | [中文](README_zh-CN.md)\n\n[Chat Demo](https://huggingface.co/spaces/TinyLlama/tinyllama-chat) | [Discord](https://discord.gg/74Wcx4j5Nb)\n</div>\n\nThe TinyLlama project aims to **pretrain** a **1.1B Llama model on 3 trillion tokens**. With some proper optimization, we can achieve this within a span of \"just\" 90 days using 16 A100-40G GPUs 🚀🚀. The training has started on 2023-09-01. \n\n<div align=\"center\">\n  <img src=\".github/TinyLlama_logo.png\" width=\"300\"/>\n</div>\n\nWe adopted exactly the same architecture and tokenizer as Llama 2. This means TinyLlama can be plugged and played in many open-source projects built upon Llama. Besides, TinyLlama is compact with only 1.1B parameters. This compactness allows it to cater to a multitude of applications demanding a restricted computation and memory footprint.\n\n#### News\n- 2023-12-18： Add two notes [1](https://whimsical-aphid-86d.notion.site/Release-of-TinyLlama-1-5T-Checkpoints-Postponed-01b266998c1c47f78f5ae1520196d194?pvs=4), [2](https://whimsical-aphid-86d.notion.site/Latest-Updates-from-TinyLlama-Team-7d30c01fff794da28ccc952f327c8d4f?pvs=4) explaining the changes of training curves, project schedules, and bug fixes.\n- 2023-10-03: Add examples in speculative decoding with llama.cpp. Do check out the [speculative_decoding/README.md](speculative_decoding/README.md).\n- 2023-10-02: 1. 1T-token checkpoint just dropped. 2. We document **all** intermediate checkpoints [here](https://huggingface.co/TinyLlama/tinyLlama-intermediate-checkpoints/tree/step-480k-token-1007B).\n- 2023-09-28: Add a discord server.\n- 2023-09-18: 1. We added a [chat demo](https://huggingface.co/spaces/PY007/TinyLlama-Chat) so that you can play with TinyLlama-Chat-V0.1 right away. \n- 2023-09-16: 1. We released the intermediate checkpoint trained on 503B tokens. 2. We released a chat model finetuned on OpenAssisant and simple [finetuning](sft) scripts is added. 3. More eval benchmarks are added and documented in [EVAL.md](EVAL.md). \n\n#### Evaluation\nYou can find the evaluation results of TinyLlama in [EVAL.md](EVAL.md).\n\n#### Releases Schedule\nWe will be rolling out intermediate checkpoints following the below schedule. \n\nBase models:\n\n| Date       | HF Checkpoint                                   | Tokens | Step | Commonsense Avg |\n|------------|-------------------------------------------------|--------|------| --------------- |\n| 2023-09-01 | Pythia-1.0B                                     | 300B   | 143k   | 48.30 |\n| 2023-09-04 | [TinyLlama-1.1B-intermediate-step-50k-105b](https://huggingface.co/PY007/TinyLlama-1.1B-step-50K-105b) | 105B   | 50k   | 46.11|\n| 2023-09-16 | [TinyLlama-1.1B-intermediate-step-240k-503b](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-240k-503b)                                            | 503B   | 240K    | 48.28 |\n| 2023-10-01 | [TinyLlama-1.1B-intermediate-step-480k-1T](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-480k-1T) | 1T     | 480k | 50.22 |\n| 2023-11-04 | [TinyLlama-1.1B-intermediate-step-715k-1.5T](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-715k-1.5T)                                            | 1.5T     |715k    |51.28 |\n| 2023-11-20 | [TinyLlama-1.1B-intermediate-step-955k-2T](https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-955k-token-2T)                                            | 2T     |955k    |51.64 |\n| 2023-12-11 | [TinyLlama-1.1B-intermediate-step-1195k-2.5T](https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1195k-token-2.5T)              | 2.5T     | 1195k    |53.86 |\n| 2023-12-28 | [TinyLlama-1.1B-intermediate-step-1431k-3T](https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T)              | 3T   | 1431k  | 52.99 |\n\nWe are crafting a note offering possible explaination on why there is a significant improvement from 2T to 2.5T checkpoint (It is related to [bos_id issue](https://github.com/jzhang38/TinyLlama/issues/83))\n\nChat models:\n\n| Date       | HF Checkpoint                                   | Tokens | Step | Commonsense Avg |\n|------------|-------------------------------------------------|--------|------| --------------- |\n| 2023-09-16 | [TinyLlama-1.1B-Chat-V0.1](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.1)                                            | 503B   | 240K    |  49.57 |\n| 2023-10-1 | [TinyLlama-1.1B-Chat-V0.3](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.3)                                            | 1T   | 480K    |  51.36 |\n| 2023-11-04 | [TinyLlama-1.1B-Chat-V0.4](https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v0.4)                                            | 1.5T   | 715K    |  52.30 |\n\nNote that the learning rate of the base model has not cooled down yet so we recommend you to also use the finetuned chat model.\n\nMeanwhile, you can track the live cross entropy loss [here](https://wandb.ai/lance777/lightning_logs/reports/metric-train_loss-23-09-04-23-38-15---Vmlldzo1MzA4MzIw?accessToken=5eu2sndit2mo6eqls8h38sklcgfwt660ek1f2czlgtqjv2c6tida47qm1oty8ik9).\n\n## Potential Usecase\nTiny but strong language models are useful for many applications. Here are some potential usecases:\n- Assisting speculative decoding of larger models. (See this [tutorial](https://twitter.com/karpathy/status/1697318534555336961) by Andrej Karpathy)\n- Deployment on edge devices with restricted memory and computational capacities, for functionalities like real-time machine translation without an internet connection (the 4bit-quantized TinyLlama-1.1B's weight only takes up 637 MB).\n- Enabling real-time dialogue generation in video games.\n\nMoreover, our code can be a **reference for enthusiasts keen on pretraining language models under 5 billion parameters** without diving too early into [Megatron-LM](https://github.com/NVIDIA/Megatron-LM).\n\n## Training Details\nBelow are some details of our training setup:\n\n| Setting                         | Description                                                    |\n|---------------------------------|----------------------------------------------------------------|\n| Parameters                      | 1.1B                                                           |\n| Attention Variant               | Grouped Query Attention                                        |\n| Model Size                      | Layers: 22, Heads: 32, Query Groups: 4, Embedding Size: 2048, Intermediate Size (Swiglu): 5632|\n| Sequence Length                 | 2048                                                           |\n| Batch Size                      | 2 million tokens (2048 * 1024)                                             |\n| Learning Rate                   | 4e-4                                                           |\n| Learning Rate Schedule          | Cosine with 2000 warmup steps. See [Issue 27](https://github.com/jzhang38/TinyLlama/issues/27) for a minor bug     |\n| Training Data                   | [Slimpajama](https://huggingface.co/datasets/cerebras/slimpajama-627b) & [Starcoderdata](https://huggingface.co/datasets/bigcode/starcoderdata) |\n| Data Preprocessing              | Excluded GitHub subset of Slimpajama; Sampled all code from Starcoderdata |\n| Combined Dataset Size           | Around 950B tokens                                              |\n| Total Tokens During Training    | 3 trillion (slightly more than 3 epochs/1430k steps)                                          |\n| Natural Language to Code Ratio  | 7:3                                                            |\n| Hardware                        | 16 A100-40G GPUs                                               |\n\n\n\n\n\n\n## Blazingly Fast\nOur codebase supports the following features:\n- multi-gpu and multi-node distributed training with FSDP.\n- flash attention 2.\n- fused layernorm.\n- fused swiglu.\n- fused cross entropy loss .\n- fused rotary positional embedding.\n\nCredit: flash attention 2, fused layernorm, fused cross entropy loss, and fused\nrotary positional embedding are from the [FlashAttention repo](https://github.com/Dao-AILab/flash-attention/). Fused swiglu is from [xformers](https://github.com/facebookresearch/xformers).\n\nThanks to those optimizations, we achieve a throughput of **24k** tokens per second per A100-40G GPU, which translates to **56% model flops utilization** without activation checkpointing (We expect the MFU to be even higher on A100-80G). It means you can train a chinchilla-optimal TinyLlama (1.1B param, 22B tokens) in **32 hours with 8 A100**. Those optimizations also greatly reduce the memory footprint, allowing us to stuff our 1.1B model into 40GB GPU RAM and train with a per-gpu batch size of 16k tokens. **You can also pretrain TinyLlama on 3090/4090 GPUs with a smaller per-gpu batch size**.\nBelow is a comparison of the training speed of our codebase with that of Pythia and MPT.\n\n\n| Model                             | A100 GPU hours taken on 300B tokens| \n|-----------------------------------|------------------------------------|\n|TinyLlama-1.1B                     | 3456                               |    \n|[Pythia-1.0B](https://huggingface.co/EleutherAI/pythia-1b)                        | 4830                               |\n|[MPT-1.3B](https://huggingface.co/mosaicml/mpt-1b-redpajama-200b)                           | 7920                               |  \n\n<small> The Pythia number comes from their [paper](https://arxiv.org/abs/2304.01373). The MPT number comes from [here](https://huggingface.co/mosaicml/mpt-1b-redpajama-200b), in which they say MPT-1.3B \" was trained on 440 A100-40GBs for about half a day\" on 200B tokens. </small>\n\nThe fact that TinyLlama is a relatively small model with grouped query attention means it is also fast during inference. Below are some throughputs that we measure:\n\n| Framework | Device | Settings | Throughput (tokens/sec) |\n|-----------|--------------|-----|-----------|\n|[Llama.cpp](https://github.com/ggerganov/llama.cpp) | Mac M2 16GB RAM         |  batch_size=1; 4-bit inference|    71.8     | \n|[vLLM](https://github.com/vllm-project/vllm)       | A40 GPU  | batch_size=100, n=10 |   7094.5         |\n\n\n## Pretrain\nPlease refer to [PRETRAIN.md](PRETRAIN.md) for instructions on how to pretrain TinyLlama.\n\n## Finetune\nWe include a simple full-parameter finetuning & inference script in [sft](sft). Our V0.1 chat model is finetuned using this script. The FT dataset we use is [openassistant-guanaco](https://huggingface.co/datasets/timdettmers/openassistant-guanaco). \nFor finetuning with less than 4GB RAM, we refer you to the [Qlora](https://github.com/artidoro/qlora) and [bitsandbytes](https://github.com/TimDettmers/bitsandbytes) repos.\nWe did not undergo extensive hyperparameter tuning nor choose more performant FT datasets. We hope the community can explore on finetuning TinyLlama and come up with better chat models. I will include community-finetuned models in this repo.\n\n## TODO\nThis project is still under active development. We are a really small team. Community feedback and contributions are highly appreciated. Here are some things we plan to work on:\n - [ ] Add scripts for pretraining on other datasets.\n - [ ] Sequence length extrapolation.\n - [ ] Test out speculative decoding for Llama-2-7B.\n - [ ] Test the throughput on RTX 3090/4090. \n - [ ] Add fine-tuning scripts.\n - [ ] Properly evaluate the model on downstream tasks.\n - [ ] A demo running on mobile phones. \n - [ ] Explore retrieval-augmentation.\n\n\n\n## Acknowledgements\nThis repository is built upon [lit-gpt](https://github.com/Lightning-AI/lit-gpt) and [flash-attention](https://github.com/Dao-AILab/flash-attention). Be sure to explore this fantastic open-source project if it's new to you!\n```\n@online{lit-gpt,\n  author    = {Lightning AI},\n  title     = {Lit-GPT},\n  url       = {https://github.com/Lightning-AI/lit-gpt},\n  year      = {2023},\n}\n@article{dao2023flashattention2,\n  title     ={Flash{A}ttention-2: Faster Attention with Better Parallelism and Work Partitioning},\n  author    ={Dao, Tri},\n  year      ={2023}\n}\n```\n\n## Citation\nThis project is currently contributed by [Peiyuan Zhang](https://veiled-texture-20c.notion.site/Peiyuan-Zhang-ab24b48621c9491db767a76df860873a?pvs=4) *, [Guangtao Zeng](https://github.com/ChaosCodes) *, [Tianduo Wang](https://github.com/TianduoWang) and [Wei Lu](https://istd.sutd.edu.sg/people/faculty/lu-wei/) from the StatNLP Research Group of Singapore University of Technology and Design. \n\nIf you find our work valuable, please cite:\n\n```\n@misc{zhang2024tinyllama,\n      title={TinyLlama: An Open-Source Small Language Model}, \n      author={Peiyuan Zhang and Guangtao Zeng and Tianduo Wang and Wei Lu},\n      year={2024},\n      eprint={2401.02385},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n\n## Frequently Asked Questions\n\n#### 1. Why would pretraining a 1.1B model for so long make sense? Doesn't it contradict the Chinchilla Scaling Law?\n\n<img src=\".github/llama2-training.png\" alt=\"The training loss curve of Llama 2\" width=\"500\"/>\n\nAbove is the training loss curve taken from the Llama 2 paper. Here I quote from that paper: \"We observe that after pretraining on 2T Tokens, the models still did not show any sign of saturation\". That is why we believe pretraining a 1.1B model for 3T tokens is a reasonable thing to do. Even if the loss curve does not go down eventually, we can still study the phenomenon of saturation and learn something from it.\n\n#### 2. What does \"saturation\" mean?\n<img src=\".github/Pythia_saturation.png\" alt=\"Figure 10 of the Pythia paper\" width=\"500\"/>\n\nThe figure from the Pythia paper displays the LAMBADA accuracy plotted against the total training tokens (300B). The term \"saturation\" pertains specifically to the 70M and 160M models. Notably, even the 410M model does not saturate with 300B tokens, as it continues to show an increasing trend, similar to the trend of larger models. \n\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=jzhang38/TinyLlama&type=Date)](https://star-history.com/#jzhang38/TinyLlama&Date)\n\n"
        },
        {
          "name": "README_zh-CN.md",
          "type": "blob",
          "size": 12.5966796875,
          "content": "<div align=\"center\">\n\n# TinyLlama-1.1B\n[English](README.md) | 中文\n\n[Chat Demo](https://huggingface.co/spaces/TinyLlama/tinyllama-chat)\n</div>\n\nTinyLlama项目旨在在3万亿tokens上进行预训练，构建一个拥有11亿参数的Llama模型。经过精心优化，我们\"仅\"需16块A100-40G的GPU，便可在90天内完成这个任务🚀🚀。训练已于2023-09-01开始。\n\n\n<div align=\"center\">\n  <img src=\".github/TinyLlama_logo.png\" width=\"300\"/>\n</div>\n我们采用了与Llama 2完全相同的架构和分词器。这意味着TinyLlama可以在许多基于Llama的开源项目中即插即用。此外，TinyLlama只有1.1B的参数，体积小巧，适用于需要限制计算和内存占用的多种应用。\n\n#### 新闻\n\n* 2023-12-18：\n  * 添加两个文档 [1](https://whimsical-aphid-86d.notion.site/Release-of-TinyLlama-1-5T-Checkpoints-Postponed-01b266998c1c47f78f5ae1520196d194?pvs=4), [2](https://whimsical-aphid-86d.notion.site/Latest-Updates-from-TinyLlama-Team-7d30c01fff794da28ccc952f327c8d4f?pvs=4) 说明训练曲线、项目时间表和错误修复的变化。\n* 2023-10-03: \n  * 在speculative decoding中添加llama.cpp的代码示例。具体请查看 [speculative_decoding/README.md](speculative_decoding/README.md)。\n  * 2023-10-02: 1. 1T-token检查点刚发布。2. 我们在[huggingface](https://huggingface.co/TinyLlama/tinyLlama-intermediate-checkpoints/tree/step-480k-token-1007B)上记录了**所有**中间检查点。\n  * 2023-09-28: 启用[Discord](https://discord.gg/74Wcx4j5Nb)服务器。\n* 2023-09-18: \n  * 发布了一个 [chat demo](https://huggingface.co/spaces/TinyLlama/tinyllama-chat)，欢迎点击链接来尝试我们的模型。\n* 2023-09-16: \n  * 发布了目前已经训练了 5.03 亿个 token 的 [checkpoints 模型](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-240k-503b)。 \n  * 基于 5.03 亿 token 的 [checkpoints 模型](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-240k-503b) 在 OpenAssistant 数据集上微调并开源了聊天模型 [TinyLlama-Chat-V0.1](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.1) ，并添加了我们的 [微调脚本](sft) 。\n  * 添加了更多的评测数据集，您可以通过 [EVAL.md](EVAL.md) 文件来查看我们各模型的结果。\n\n\n\n\n#### 发布时间表\n\n我们会根据以下计划逐步发布中间checkpoint。我们也列了一些基线模型进行比较。\n\n基座模型:\n\n| Date       | 模型权重                                              | Tokens | Step | Commonsense Avg |\n| ---------- | ------------------------------------------------------------ | ------ | ---- | --------------- |\n| 2023-09-01 | Pythia-1.0B                                                  | 300B   | 143k | 48.30           |\n| 2023-09-04 | [TinyLlama-1.1B-intermediate-step-50k-105b](https://huggingface.co/PY007/TinyLlama-1.1B-step-50K-105b) ([ModelScope](https://www.modelscope.cn/models/chaoscodes/TinyLlama-1.1B-step-50K-105b/files)) | 105B   | 50k  | 46.11           |\n| 2023-09-16 | [TinyLlama-1.1B-intermediate-step-240k-503b](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-240k-503b) ([ModelScope](https://www.modelscope.cn/models/chaoscodes/TinyLlama-1.1B-intermediate-step-240k-503b/files)) | 503B   | 240K | 48.28           |\n| 2023-10-01 | [TinyLlama-1.1B-intermediate-step-480k-1T](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-480k-1T) | 1T     | 480k | 50.22 |\n| 2023-11-04 | [TinyLlama-1.1B-intermediate-step-715k-1.5T](https://huggingface.co/PY007/TinyLlama-1.1B-intermediate-step-715k-1.5T)                                            | 1.5T     |715k    |51.28 |\n| 2023-11-20 | [TinyLlama-1.1B-intermediate-step-955k-2T](https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-955k-token-2T)                                            | 2T     |955k    |51.64 |\n| 2023-12-11 | [TinyLlama-1.1B-intermediate-step-1195k-2.5T](https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1195k-token-2.5T)              | 2.5T     | 1195k    |53.86 |\n| 2023-12-28 | [TinyLlama-1.1B-intermediate-step-1431k-3T](https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T)              | 3T   | 1431k  | 52.99 |\n\n对话模型:\n\n| Date       | 模型权重                                  | Tokens | Step | Commonsense Avg |\n|------------|-------------------------------------------------|--------|------| --------------- |\n| 2023-09-16 | [TinyLlama-1.1B-Chat-V0.1](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.1) ([ModelScope](https://www.modelscope.cn/models/chaoscodes/TinyLlama-1.1B-Chat-v0.1/files))                                         | 503B   | 240K    |  49.57 |\n| 2023-10-1 | [TinyLlama-1.1B-Chat-V0.3](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.3)                                            | 1T   | 480K    |  51.36 |\n| 2023-11-04 | [TinyLlama-1.1B-Chat-V0.4](https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v0.4)                                            | 1.5T   | 715K    |  52.30 |\n\n需要注意的是，由于我们的现在模型还处于训练初期，学习率并没有完全稳定下来，为了更好的体验我们的模型，您可以下载我们 [聊天模型](https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0) 或者通过 [chat demo](https://huggingface.co/spaces/TinyLlama/tinyllama-chat) 来尝试我们的模型。\n\n\n你们也可以在[这里](https://api.wandb.ai/links/lance777/pgvhrsny)实时跟踪TinyLlama的训练损失。\n\n## 潜在场景\n小型但强大的语言模型对许多应用都很有用。以下是一些潜在的场景：\n- 帮助对大型模型进行speculative decoding。\n- 在边缘装置上运行，比如离线的实时机器翻译 (TinyLlama的4比特量化版本的模型权重只需要550MB的内存)。\n- 在游戏中实现实时对话生成(因为还得给游戏本身留显存所以模型要小)。\n\n此外，我们的代码可以给初学者做一个**入门预训练的简洁参考**。如果你要训练50亿以下参数的语言模型, 你其实不需要Megatron-LM。\n\n## 训练细节\n以下是我们训练设置的一些细节：\n\n| Setting                         | Description                                                    |\n|---------------------------------|----------------------------------------------------------------|\n| Parameters                      | 1.1B                                                           |\n| Attention Variant               | Grouped Query Attention                                        |\n| Model Size                      | Layers: 22, Heads: 32, Query Groups: 4, Embedding Size: 2048, Intermediate Size (Swiglu): 5632|\n| Sequence Length                 | 2048                                                           |\n| Batch Size                      | 2 million tokens (2048 * 1024)                                             |\n| Learning Rate                   | 4e-4                                                           |\n| Learning Rate Schedule          | Cosine with 2000 warmup steps                                  |\n| Training Data                   | [Slimpajama](https://huggingface.co/datasets/cerebras/slimpajama-627b) & [Starcoderdata](https://huggingface.co/datasets/bigcode/starcoderdata) |\n| Data Preprocessing              | Excluded GitHub subset of Slimpajama; Sampled all code from Starcoderdata |\n| Combined Dataset Size           | Around 950B tokens                                              |\n| Total Tokens During Training    | 3 trillion (slightly more than 3 epochs/143k steps)                                          |\n| Natural Language to Code Ratio  | 7:3                                                            |\n| Hardware                        | 16 A100-40G GPUs                                               |\n\n\n\n\n\n\n## 速度极快\n我们的代码库支持以下特性：\n- 使用FSDP进行多GPU和多节点分布式训练\n- flash attention 2\n- 融合层归一化 (fused layernorm)\n- 融合swiglu (fused swiglu)\n- 融合交叉熵损失 (fused cross entropy loss)\n- 融合旋转位置嵌入 (fused rotary positional embedding)\n\n致谢：flash attention 2、融合层归一化、融合交叉熵损失和融合旋转位置嵌入来自于[FlashAttention](https://github.com/Dao-AILab/flash-attention/)仓库；融合swiglu来自于[xformers](https://github.com/facebookresearch/xformers)。\n\n有了这些优化, 我们可以达到**24k tokens/秒/A100**的训练速度，也就是56%的MFU（在A100-80G上的MFU会更高）。这个速度可以让你可以在**8个A100上用32小时训练一个chinchilla-optimial的模型**(11亿参数，220亿token)。这些优化也大大减少了显存占用, 我们可以把11亿参数的模型塞入40GB的GPU里面还能同时维持16k tokens的per-gpu batch size。只需要把batch size改小一点， 你就可以在**RTX 3090/4090**上面训练TinyLlama。\n下面是我们的代码库与Pythia和MPT的训练速度的比较。\n\n\n| Model                             | A100 GPU hours taken on 300B tokens| \n|-----------------------------------|------------------------------------|\n|TinyLlama-1.1B                     | 3456                               |    \n|[Pythia-1.0B](https://huggingface.co/EleutherAI/pythia-1b)                        | 4830                               |\n|[MPT-1.3B](https://huggingface.co/mosaicml/mpt-1b-redpajama-200b)                           | 7920                               |  \n\n<small> Pythia的数字来自他们的论文。MPT的数字来自[这里](https://huggingface.co/mosaicml/mpt-1b-redpajama-200b)，作者说MPT-1.3B\"was trained on 440 A100-40GBs for about half a day\" on 200B tokens。</small>\n\nTinyLlama是一个相对较小的模型, 同时我们用了GQA, 这意味着它在推理期间也很快。以下是我们测量的一些推理速度：\n\n| Framework | Device | Settings | Throughput (tokens/sec) |\n|-----------|--------------|-----|-----------|\n|[Llama.cpp](https://github.com/ggerganov/llama.cpp) | Mac M2 16GB RAM         |  batch_size=1; 4-bit inference|    71.8     | \n|[vLLM](https://github.com/vllm-project/vllm)       | A40 GPU  | batch_size=100, n=10 |   7094.5         |\n\n\n## 开始预训练\n请参考[PRETRAIN.md](PRETRAIN.md)。\n\n\n\n## 微调\n\n* 我们在 [sft](sft) 中添加了我们进行微调和推理的代码。并且基于这个代码我们在[openassistant-guanaco](https://huggingface.co/datasets/timdettmers/openassistant-guanaco) 数据集上进行了微调，得到了我们的第一版[聊天模型](https://huggingface.co/PY007/TinyLlama-1.1B-Chat-v0.1)。\n* 如果您希望在 RAM 小于 4GB 的 GPU 上对用我们的模型进行微调，可以参考并使用 [Qlora](https://github.com/artidoro/qlora) 和 [bitsandbytes](https://github.com/TimDettmers/bitsandbytes) 项目。\n* 目前微调的时候我们并没有广泛对超参进行搜索，也没有选择潜在更优的 instruction 数据集。我们希望促进 NLP 社区对于我们的TinyLlama模型的开放研究，并开源更好的微调聊天模型。我们也会把这些模型放在这个项目中。\n\n\n\n## TODO\n该项目仍在积极开发中。我们团队很小，非常欢迎社区的反馈和贡献。以下是我们计划进行的一些工作：\n - [ ] Add scripts for pretraining on other datasets.\n - [ ] Sequence length extrapolation.\n - [ ] Test out speculative decoding for Llama-2-7B.\n - [ ] Test the throughput on RTX 3090/4090. \n - [ ] Add fine-tuning scripts.\n - [ ] Properly evaluate the model on downstream tasks.\n - [ ] A demo running on mobile phones. \n - [ ] Explore retrieval-augmentation.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=jzhang38/TinyLlama&type=Date)](https://star-history.com/#jzhang38/TinyLlama&Date)\n\n\n## Acknowledgements\n这个仓库基于出色的开源项目[lit-gpt](https://github.com/Lightning-AI/lit-gpt)和[flash-attention](https://github.com/Dao-AILab/flash-attention)构建. \n```\n@online{lit-gpt,\n  author    = {Lightning AI},\n  title     = {Lit-GPT},\n  url       = {https://github.com/Lightning-AI/lit-gpt},\n  year      = {2023},\n}\n@article{dao2023flashattention2,\n  title     ={Flash{A}ttention-2: Faster Attention with Better Parallelism and Work Partitioning},\n  author    ={Dao, Tri},\n  year      ={2023}\n}\n```\n\n## Citation\n此项目目前由[Peiyuan Zhang](https://github.com/jzhang38)，[Guangtao Zeng](https://github.com/ChaosCodes)，[Tianduo Wang](https://github.com/TianduoWang)和[Wei Lu](https://istd.sutd.edu.sg/people/faculty/lu-wei/)贡献。 \n\n如果您觉得我们的工作有价值， 可以引用:\n\n```\n@misc{zhang2024tinyllama,\n      title={TinyLlama: An Open-Source Small Language Model}, \n      author={Peiyuan Zhang and Guangtao Zeng and Tianduo Wang and Wei Lu},\n      year={2024},\n      eprint={2401.02385},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n\n"
        },
        {
          "name": "chat_gradio",
          "type": "tree",
          "content": null
        },
        {
          "name": "lit_gpt",
          "type": "tree",
          "content": null
        },
        {
          "name": "pretrain",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.6943359375,
          "content": "torch>=2.1.0dev\nlightning==2.1.2\nlightning[app]\njsonargparse[signatures]  # CLI\npandas\npyarrow\ntokenizers\nsentencepiece\nwandb\nzstd\n\n# for finetuning\nbitsandbytes==0.40.0\ntransformers==4.31.0\npeft==0.4.0\naccelerate==0.21.0\neinops==0.6.1\nevaluate==0.4.0\nscikit-learn==1.2.2\nsentencepiece==0.1.99\nwandb==0.15.3\n# other optional dependencies are\n# sentencepiece  # pythia, falcon, redpajama\n# tokenizers  #  llama-based models\n# bitsandbytes>=0.41.1  # quantize/bnb.py\n# scipy  # TODO: remove when https://github.com/TimDettmers/bitsandbytes/pull/525 is released\n# datasets  # quantize/gptq.py\n# zstandard  # scripts/prepare_redpajama.py\n# git+https://github.com/EleutherAI/lm-evaluation-harness.git@master  # eval\n"
        },
        {
          "name": "script.sh",
          "type": "blob",
          "size": 0.818359375,
          "content": "python scripts/convert_hf_checkpoint.py --checkpoint_dir  out/TinyLlama-1.1B-900B --model_name tiny_LLaMA_1b\n\npython test_weight.py --checkpoint_dir out/TinyLlama-1.1B-intermediate-900B\n\n\npython pretrain/tinyllama_code.py --devices 8 --train_data_dir data/code_specialist_python_java_javascript_c_go_8192\n\n\n\npython scripts/prepare_starcoder.py --source_path data/starcoderdata/ --tokenizer_path data/llama --destination_path data/code_specialist_python_java_javascript_c_go_8192 --split train --percentage 1.0 --filenames_subset [\"python\",\"cpp\",\"go\",\"java\",\"javascript\"] --chunk_size 4194816\n\n\n\n\n/data/TinyLlama/out/code_tiny_LLaMA_1b_python_java_go_cpp_javascript/iter-032000-ckpt.pth\n\npython scripts/convert_lit_checkpoint.py --out_dir /data/TinyLlama/out/tiny_LLaMA_1b/ --checkpoint_name iter-100000-ckpt.pth --model_name tiny_LLaMA_1b"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sft",
          "type": "tree",
          "content": null
        },
        {
          "name": "speculative_decoding",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}