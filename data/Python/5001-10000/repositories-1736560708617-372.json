{
  "metadata": {
    "timestamp": 1736560708617,
    "page": 372,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marshmallow-code/marshmallow",
      "stars": 7076,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6650390625,
          "content": "*.py[cod]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\npip-wheel-metadata\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\nhtmlcov\n.tox\nnosetests.xml\n.cache\n.pytest_cache\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n\n# IDE\n.project\n.pydevproject\n.idea\n\n# Coverage\ncover\n.coveragerc\n\n# Sphinx\ndocs/_build\nREADME.html\n\n*.ipynb\n.ipynb_checkpoints\n\nVagrantfile\n.vagrant\n\n*.db\n*.ai\n.konchrc\n_sandbox\npylintrc\n\n# Virtualenvs\nenv\nvenv\n\n# pyenv\n.python-version\n\n# pytest\n.pytest_cache\n\n# Other\n.directory\n*.pprof\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# ruff\n.ruff_cache\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7578125,
          "content": "ci:\n  autoupdate_schedule: monthly\nrepos:\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.8.6\n  hooks:\n    - id: ruff\n    - id: ruff-format\n- repo: https://github.com/python-jsonschema/check-jsonschema\n  rev: 0.30.0\n  hooks:\n    - id: check-github-workflows\n    - id: check-readthedocs\n# TODO: Remove blacken-docs when https://github.com/astral-sh/ruff/issues/8237 is implemented\n- repo: https://github.com/asottile/blacken-docs\n  rev: 1.19.1\n  hooks:\n  - id: blacken-docs\n    additional_dependencies: [black==24.10.0]\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.14.1\n  hooks:\n  - id: mypy\n    additional_dependencies: [types-simplejson, packaging]\n    # these files are checked under `tox -e mypy-test`\n    exclude: ^tests/mypy_test_cases/.*$\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "version: 2\nsphinx:\n  configuration: docs/conf.py\nformats:\n  - pdf\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.13\"\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 9.7177734375,
          "content": "*******\nAuthors\n*******\n\nLeads\n=====\n\n- Steven Loria `@sloria <https://github.com/sloria>`_\n- Jérôme Lafréchoux  `@lafrech <https://github.com/lafrech>`_\n- Jared Deckard `@deckar01 <https://github.com/deckar01>`_\n\nContributors (chronological)\n============================\n\n- Sebastian Vetter `@elbaschid <https://github.com/elbaschid>`_\n- Eduard Carreras `@ecarreras <https://github.com/ecarreras>`_\n- Joakim Ekberg `@kalasjocke <https://github.com/kalasjocke>`_\n- Mark Grey `@DeaconDesperado <https://github.com/DeaconDesperado>`_\n- Anders Steinlein `@asteinlein <https://github.com/asteinlein>`_\n- Cyril Thomas `@Ketouem <https://github.com/Ketouem>`_\n- Austin Macdonald `@asmacdo <https://github.com/asmacdo>`_\n- Josh Carp `@jmcarp <https://github.com/jmcarp>`_\n- `@amikholap <https://github.com/amikholap>`_\n- Sven-Hendrik Haase `@svenstaro <https://github.com/svenstaro>`_\n- Eric Wang `@ewang <https://github.com/ewang>`_\n- `@philtay <https://github.com/philtay>`_\n- `@malexer <https://github.com/malexer>`_\n- Andriy Yurchuk `@Ch00k <https://github.com/Ch00k>`_\n- Vesa Uimonen `@vesauimonen <https://github.com/vesauimonen>`_\n- David Lord `@davidism <https://github.com/davidism>`_\n- Daniel Castro `@0xDCA <https://github.com/0xDCA>`_\n- Ben Jones `@RealSalmon <https://github.com/RealSalmon>`_\n- Patrick Woods `@hakjoon <https://github.com/hakjoon>`_\n- Lukas Heiniger `@3rdcycle <https://github.com/3rdcycle>`_\n- Ryan Lowe `@ryanlowe0 <https://github.com/ryanlowe0>`_\n- Jimmy Jia `@taion <https://github.com/taion>`_\n- `@lustdante <https://github.com/lustdante>`_\n- Sergey Aganezov, Jr. `@sergey-aganezov-jr <https://github.com/sergey-aganezov-jr>`_\n- Kevin Stone `@kevinastone <https://github.com/kevinastone>`_\n- Alex Morken `@alexmorken <https://github.com/alexmorken>`_\n- Sergey Polzunov `@traut <https://github.com/traut>`_\n- Kelvin Hammond `@kelvinhammond <https://github.com/kelvinhammond>`_\n- Matt Stobo `@mwstobo <https://github.com/mwstobo>`_\n- Max Orhai `@max-orhai <https://github.com/max-orhai>`_\n- Praveen `@praveen-p <https://github.com/praveen-p>`_\n- Stas Sușcov `@stas <https://github.com/stas>`_\n- Florian `@floqqi <https://github.com/floqqi>`_\n- Evgeny Sureev `@evgeny-sureev <https://github.com/evgeny-sureev>`_\n- Matt Bachmann `@Bachmann1234 <https://github.com/Bachmann1234>`_\n- Daniel Imhoff `@dwieeb <https://github.com/dwieeb>`_\n- Juan Rossi `@juanrossi <https://github.com/juanrossi>`_\n- Andrew Haigh `@nelfin <https://github.com/nelfin>`_\n- `@Mise <https://github.com/Mise>`_\n- Taylor Edmiston `@tedmiston <https://github.com/tedmiston>`_\n- Francisco Demartino `@franciscod <https://github.com/franciscod>`_\n- Eric Wang `@ewang <https://github.com/ewang>`_\n- Eugene Prikazchikov `@eprikazc <https://github.com/eprikazc>`_\n- Damian Heard `@DamianHeard <https://github.com/DamianHeard>`_\n- Alec Reiter `@justanr <https://github.com/justanr>`_\n- Dan Sutherland `@d-sutherland <https://github.com/d-sutherland>`_\n- Jeff Widman `@jeffwidman <https://github.com/jeffwidman>`_\n- Simeon Visser `@svisser <https://github.com/svisser>`_\n- Taylan Develioglu `@tdevelioglu <https://github.com/tdevelioglu>`_\n- Danilo Akamine `@daniloakamine <https://github.com/daniloakamine>`_\n- Maxim Kulkin `@maximkulkin <https://github.com/maximkulkin>`_\n- `@immerrr <https://github.com/immerrr>`_\n- Mike Yumatov `@yumike <https://github.com/yumike>`_\n- Tim Mundt `@Tim-Erwin <https://github.com/Tim-Erwin>`_\n- Russell Davies `@russelldavies <https://github.com/russelldavies>`_\n- Jared Deckard `@deckar01 <https://github.com/deckar01>`_\n- David Thornton `@davidthornton <https://github.com/davidthornton>`_\n- Vuong Hoang `@vuonghv <https://github.com/vuonghv>`_\n- David Bertouille `@dbertouille <https://github.com/dbertouille>`_\n- Alexandre Bonnetain `@Shir0kamii <https://github.com/Shir0kamii>`_\n- Tuukka Mustonen `@tuukkamustonen <https://github.com/tuukkamustonen>`_\n- Tero Vuotila `@tvuotila <https://github.com/tvuotila>`_\n- Paul Zumbrun `@pauljz <https://github.com/pauljz>`_\n- Gary Wilson Jr. `@gdub <https://github.com/gdub>`_\n- Sabine Maennel `@sabinem <https://github.com/sabinem>`_\n- Victor Varvaryuk `@mindojo-victor <https://github.com/mindojo-victor>`_\n- Jāzeps Baško `@jbasko <https://github.com/jbasko>`_\n- `@podhmo <https://github.com/podhmo>`_\n- Dmitry Orlov `@mosquito <https://github.com/mosquito>`_\n- Yuri Heupa `@YuriHeupa <https://github.com/YuriHeupa>`_\n- Roy Williams `@rowillia <https://github.com/rowillia>`_\n- Vlad Frolov `@frol <https://github.com/frol>`_\n- Erling Børresen `@erlingbo <https://github.com/erlingbo>`_\n- Jérôme Lafréchoux  `@lafrech <https://github.com/lafrech>`_\n- Roy Williams `@rowillia <https://github.com/rowillia>`_\n- `@dradetsky <https://github.com/dradetsky>`_\n- Michal Kononenko `@MichalKononenko <https://github.com/MichalKononenko>`_\n- Yoichi NAKAYAMA `@yoichi <https://github.com/yoichi>`_\n- Bernhard M. Wiedemann `@bmwiedemann <https://github.com/bmwiedemann>`_\n- Scott Werner `@scottwernervt <https://github.com/scottwernervt>`_\n- Leonardo Fedalto `@Fedalto <https://github.com/Fedalto>`_\n- `@sduthil <https://github.com/sduthil>`_\n- Steven Sklar `@sklarsa <https://github.com/sklarsa>`_\n- Alisson Silveira `@4lissonsilveira <https://github.com/4lissonsilveira>`_\n- Harlov Nikita `@harlov <https://github.com/harlov>`_\n- `@stj <https://github.com/stj>`_\n- Tomasz Magulski `@magul <https://github.com/magul>`_\n- Suren Khorenyan `@mahenzon <https://github.com/mahenzon>`_\n- Jeffrey Berger `@JeffBerger <https://github.com/JeffBerger>`_\n- Felix Yan `@felixonmars <https://github.com/felixonmars>`_\n- Prasanjit Prakash `@ikilledthecat <https://github.com/ikilledthecat>`_\n- Guillaume Gelin `@ramnes <https://github.com/ramnes>`_\n- Maxim Novikov `@m-novikov <https://github.com/m-novikov>`_\n- James Remeika `@remeika <https://github.com/remeika>`_\n- Karandeep Singh Nagra `@knagra <https://github.com/knagra>`_\n- Dushyant Rijhwani `@dushr <https://github.com/dushr>`_\n- Viktor Kerkez `@alefnula <https://github.com/alefnula>`_\n- Victor Gavro `@vgavro <https://github.com/vgavro>`_\n- Kamil Gałuszka `@galuszkak <https://github.com/galuszkak>`_\n- David Watson `@arbor-dwatson <https://github.com/arbor-dwatson>`_\n- Jan Margeta `@jmargeta <https://github.com/jmargeta>`_\n- AlexV `@asmodehn <https://github.com/asmodehn>`_\n- `@toffan <https://github.com/toffan>`_\n- Hampus Dunström `@Dunstrom <https://github.com/Dunstrom>`_\n- Robert Jensen `@r1b <https://github.com/r1b>`_\n- Arijit Basu `@sayanarijit <https://github.com/sayanarijit>`_\n- Sanjay P `@snjypl <https://github.com/snjypl>`_\n- Víctor Zabalza `@zblz <https://github.com/zblz>`_\n- Riley Gibbs `@rileyjohngibbs <https://github.com/rileyjohngibbs>`_\n- Henry Doupe `@hdoupe <https://github.com/hdoupe>`_\n- `@miniscruff <https://github.com/miniscruff>`_\n- `@maxalbert <https://github.com/maxalbert>`_\n- Kim Gustyr `@khvn26 <https://github.com/khvn26>`_\n- Bryce Drennan `@brycedrennan <https://github.com/brycedrennan>`_\n- Tim Shaffer `@timster <https://github.com/timster>`_\n- Hugo van Kemenade `@hugovk <https://github.com/hugovk>`_\n- Maciej Urbański `@rooterkyberian <https://github.com/rooterkyberian>`_\n- Kostas Konstantopoulos `@kdop <https://github.com/kdop>`_\n- Stephen J. Fuhry `@fuhrysteve <https://github.com/fuhrysteve>`_\n- `@dursk <https://github.com/dursk>`_\n- Ezra MacDonald `@macdonaldezra <https://github.com/macdonaldezra>`_\n- Stanislav Rogovskiy `@atmo <https://github.com/atmo>`_\n- Cristi Scoarta `@cristi23 <https://github.com/cristi23>`_\n- Anthony Sottile `@asottile <https://github.com/asottile>`_\n- Charles-Axel Dein `@charlax <https://github.com/charlax>`_\n- `@phrfpeixoto <https://github.com/phrfpeixoto>`_\n- `@jceresini <https://github.com/jceresini>`_\n- Nikolay Shebanov `@killthekitten <https://github.com/killthekitten>`_\n- Taneli Hukkinen `@hukkinj1 <https://github.com/hukkinj1>`_\n- `@Reskov <https://github.com/Reskov>`_\n- Albert Tugushev `@atugushev <https://github.com/atugushev>`_\n- `@dfirst <https://github.com/dfirst>`_\n- Tim Gates `@timgates42 <https://github.com/timgates42>`_\n- Nathan `@nbanmp <https://github.com/nbanmp>`_\n- Ronan Murphy `@Resinderate <https://github.com/Resinderate>`_\n- Laurie Opperman `@EpicWink <https://github.com/EpicWink>`_\n- Ram Rachum `@cool-RR <https://github.com/cool-RR>`_\n- `@weeix <https://github.com/weeix>`_\n- Juan Norris `@juannorris <https://github.com/juannorris>`_\n- 장준영 `@jun0jang <https://github.com/jun0jang>`_\n- `@ebargtuo <https://github.com/ebargtuo>`_\n- Michał Getka `@mgetka <https://github.com/mgetka>`_\n- Nadège Michel `@nadege <https://github.com/nadege>`_\n- Tamara `@infinityxxx <https://github.com/infinityxxx>`_\n- Stephen Rosen `@sirosen <https://github.com/sirosen>`_\n- Vladimir Mikhaylov `@vemikhaylov <https://github.com/vemikhaylov>`_\n- Stephen Eaton `@madeinoz67 <https://github.com/madeinoz67>`_\n- Antonio Lassandro `@lassandroan <https://github.com/lassandroan>`_\n- Javier Fernández `@jfernandz <https://github.com/jfernandz>`_\n- Michael Dimchuk  `@michaeldimchuk <https://github.com/michaeldimchuk>`_\n- Jochen Kupperschmidt  `@homeworkprod <https://github.com/homeworkprod>`_\n- `@yourun-proger <https://github.com/yourun-proger>`_\n- Ryan Morehart `@traherom <https://github.com/traherom>`_\n- Ben Windsor `@bwindsor <https://github.com/bwindsor>`_\n- Kevin Kirsche `@kkirsche <https://github.com/kkirsche>`_\n- Isira Seneviratne `@Isira-Seneviratne <https://github.com/Isira-Seneviratne>`_\n- Karthikeyan Singaravelan `@tirkarthi  <https://github.com/tirkarthi>`_\n- Marco Satti `@marcosatti  <https://github.com/marcosatti>`_\n- Ivo Reumkens `@vanHoi <https://github.com/vanHoi>`_\n- Aditya Tewary `@aditkumar72 <https://github.com/aditkumar72>`_\n- Sebastien Lovergne `@TheBigRoomXXL <https://github.com/TheBigRoomXXL>`_\n- Peter C `@somethingnew2-0 <https://github.com/somethingnew2-0>`_\n- Marcel Jackwerth `@mrcljx` <https://github.com/mrcljx>`_\n- Fares Abubaker `@Fares-Abubaker <https://github.com/Fares-Abubaker>`_\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 87.994140625,
          "content": "Changelog\n---------\n\n4.0.0 (unreleased)\n******************\n\nSee :ref:`upgrading_4_0` for a guide on updating your code.\n\nFeatures:\n\n- Typing: Add types to all `Field <marshmallow.fields.Field>` subclass kwargs (:issue:`2285`).\n  Thanks :user:`navignaw` for the suggestion.\n- `DateTime <marshmallow.fields.DateTime>`, `Date <marshmallow.fields.Date>`, `Time <marshmallow.fields.Time>`,\n  `TimeDelta <marshmallow.fields.TimeDelta>`, and `Enum <marshmallow.fields.Enum>`\n  accept their internal value types as valid input (:issue:`1415`).\n  Thanks :user:`bitdancer` for the suggestion.\n\nOther changes:\n\n- Typing: `Field <marshmallow.fields.Field>` is now a generic type with a type argument for the internal value type.\n  Therefore, it is no longer usable as a field in a schema. Use a subclass of `Field <marshmallow.fields.Field>` instead.\n- `marshmallow.fields.UUID` no longer subclasses `marshmallow.fields.String`.\n- *Backwards-incompatible*: `marshmallow.fields.Number` is no longer usable as a field in a schema.\n  Use `marshmallow.fields.Integer`, `marshmallow.fields.Float`, or `marshmallow.fields.Decimal` instead.\n- *Backwards-incompatible*: `marshmallow.fields.Mapping` is no longer usable as a field in a schema.\n  Use `marshmallow.fields.Dict` instead.\n- *Backwards-incompatible*: Use `datetime.date.fromisoformat`, `datetime.time.fromisoformat`, and `datetime.datetime.fromisoformat` from the standard library to deserialize dates, times and datetimes (:pr:`2078`).\n- *Backwards-incompatible*: `marshmallow.fields.Boolean` no longer serializes non-boolean values.\n\nAs a consequence of this change:\n  - Time with time offsets are now supported.\n  - YYYY-MM-DD is now accepted as a datetime and deserialized as naive 00:00 AM.\n  - `from_iso_date`, `from_iso_time` and `from_iso_datetime` are removed from `marshmallow.utils`.\n\n- *Backwards-incompatible*: Custom validators must raise a `ValidationError <marshmallow.exceptions.ValidationError>` for invalid values.\n  Returning `False` is no longer supported (:issue:`1775`).\n- *Backwards-incompatible*: Rename ``schema`` parameter to ``parent`` in `marshmallow.fields.Field._bind_to_schema` (:issue:`1360`).\n- *Backwards-incompatible*: Rename ``pass_many`` parameter to ``pass_collection`` in pre/post processing methods (:issue:`1369`).\n- *Backwards-incompatible*: `marshmallow.fields.TimeDelta` no longer truncates float values when\n  deserializing (:pr:`2654`). This allows microseconds to be preserved, e.g.\n\n.. code-block:: python\n\n    from marshmallow import fields\n\n    field = fields.TimeDelta()\n\n    # Before\n    field.deserialize(12.9)\n    datetime.timedelta(seconds=12)\n    # datetime.timedelta(seconds=12)\n\n    # After\n    field.deserialize(12.9)\n    # datetime.timedelta(seconds=12, microseconds=900000)\n\n- Improve performance and minimize float precision loss of `marshmallow.fields.TimeDelta` serialization (:pr:`2654`).\n- *Backwards-incompatible*: Remove ``serialization_type`` parameter from\n  `marshmallow.fields.TimeDelta` (:pr:`2654`).\n\nThanks :user:`ddelange` for the PR.\n\n- *Backwards-incompatible*: Remove `Schema <marshmallow.schema.Schema>`'s ``context`` attribute. Passing a context\n  should be done using `contextvars.ContextVar` (:issue:`1826`).\n  marshmallow 4 provides an experimental `Context <marshmallow.experimental.context.Context>`\n  manager class that can be used to both set and retrieve context.\n\n.. code-block:: python\n\n    import typing\n\n    from marshmallow import Schema, fields\n    from marshmallow.experimental.context import Context\n\n\n    class UserContext(typing.TypedDict):\n        suffix: str\n\n\n    class UserSchema(Schema):\n        name_suffixed = fields.Function(\n            lambda obj: obj[\"name\"] + Context[UserContext].get()[\"suffix\"]\n        )\n\n\n    with Context[UserContext]({\"suffix\": \"bar\"}):\n        UserSchema().dump({\"name\": \"foo\"})\n        # {'name_suffixed': 'foobar'}\n\nDeprecations/Removals:\n\n- *Backwards-incompatible*: Remove implicit field creation, i.e. using the ``fields`` or ``additional`` class Meta options with undeclared fields (:issue:`1356`).\n- The `ordered` class Meta option is removed  (:issue:`2146`). Field order is already preserved by default.\n  Set `Schema.dict_class` to `OrderedDict` to maintain the previous behavior.\n- The `marshmallow.base` module is removed (:pr:`2722`).\n\nPreviously-deprecated API have been removed, including:\n\n- `default` and `missing` parameters, which were replaced by `dump_default` and `load_default` in 3.13.0 (:pr:`1742`, :pr:`2700`).\n- Passing field metadata via keyword arguments (deprecated in 3.10.0). Use the explicit ``metadata=...``\n  argument instead (:issue:`1350`).\n- ``Field.fail``, which was replaced by ``Field.make_error`` in 3.0.0.\n- Passing `\"self\"` to `fields.Nested` (deprecated in 3.3.0). Use a callable instead.\n- `json_module` class Meta option (deprecated in 3.0.0b3). Use `render_module` instead.\n- `marshmallow.utils.pprint` (deprecated in 3.7.0). Use `pprint.pprint` instead.\n- Remove ``__version__``, ``__parsed_version__``, and ``__version_info__`` attributes which were deprecated in 3.21.0.\n\n3.25.0 (2025-01-09)\n*******************\n\nFeatures:\n\n- Typing: Improve type annotations for ``SchemaMeta.get_declared_fields`` (:pr:`2742`).\n\nBug fixes:\n\n- Typing: Relax type annotation for ``Schema.opts`` to allow subclasses to define their own\n  options classes (:pr:`2744`).\n\nOther changes:\n\n- Restore ``marshmallow.base.SchemaABC`` for backwards-compatibility (:issue:`2743`).\n  Note that this class is deprecated and will be removed in marshmallow 4.\n  Use `marshmallow.schema.Schema` as a base class for type-checking instead.\n\n3.24.2 (2025-01-08)\n*******************\n\nChanges:\n\n- Don't override ``__new__`` to avoid breaking usages of `inspect.signature` with\n  `Field <marshmallow.fields.Field>` classes.\n  This allows marshmallow-sqlalchemy users to upgrade marshmallow without\n  upgrading to marshmallow-sqlalchemy>=1.1.1.\n\nDocumentation:\n\n- Add top-level API back to docs (:issue:`2739`).\n  Thanks :user:`llucax` for reporting.\n\n3.24.1 (2025-01-06)\n*******************\n\nBug fixes:\n\n- Typing: Fix typing for `class_registry.get_class <marshmallow.class_registry.get_class>` (:pr:`2735`).\n\n3.24.0 (2025-01-06)\n*******************\n\nFeatures:\n\n- Typing: Improve typings in `marshmallow.fields` (:pr:`2723`).\n- Typing: Replace type comments with inline typings (:pr:`2718`).\n\nBug fixes:\n\n- Typing: Fix type hint for ``nested`` parameter of `Nested <marshmallow.fields.Nested>` (:pr:`2721`).\n\nDeprecations:\n\n- Custom validators should raise a `ValidationError <marshmallow.exceptions.ValidationError>` for invalid values.\n  Returning `False`` is no longer supported .\n- Deprecate ``context`` parameter of `Schema <marshmallow.schema.Schema>` (:issue:`1826`).\n  Use `contextVars.ContextVar` to pass context data instead.\n- `Field <marshmallow.fields.Field>`, `Mapping <marshmallow.fields.Mapping>`,\n  and `Number <marshmallow.fields.Number>` should no longer be used as fields within schemas.\n  Use their subclasses instead.\n\n\n3.23.3 (2025-01-03)\n*******************\n\nBug fixes:\n\n- Typing: Fix typing for `Schema.from_dict <marshmallow.schema.Schema.from_dict>` (:issue:`1653`).\n  Thanks :user:`SteadBytes` for reporting.\n\nSupport:\n\n- Documentation: Various documentation cleanups, including more concise docs in the `marshmallow.fields` API reference (:issue:`2307`).\n  Thanks :user:`AbdealiLoKo` for reporting.\n\n3.23.2 (2024-12-18)\n*******************\n\nBug fixes:\n\n- Improve type hint formatting for ``Field``, ``Nested``, and ``Function`` fields\n  to resolve PyCharm warnings (:issue:`2268`).\n  Thanks :user:`Fares-Abubaker` for reporting and fixing.\n\n\n3.23.1 (2024-11-01)\n*******************\n\nSupport:\n\n- Document ``absolute`` parameter of ``URL`` field (:pr:`2327`).\n- Documentation: Remove (outdated) minimum Python 3 minor version in\n  documentation and README (:pr:`2323`).\n\n3.23.0 (2024-10-17)\n*******************\n\nFeatures:\n\n- Typing: replace \"type\" with specific metaclass for ``Schema`` and ``Field``.\n\nOther changes:\n\n- Officially support Python 3.13 (:pr:`2319`).\n- Drop support for Python 3.8 (:pr:`2318`).\n\n3.22.0 (2024-08-20)\n*******************\n\nFeatures:\n\n- Add ``many`` Meta option to ``Schema`` so it expects a collection by default (:issue:`2270`).\n  Thanks :user:`himalczyk` for reporting and :user:`deckar01` for the PR.\n- Refactor hooks (:pr:`2279`).\n  Thanks :user:`deckar01` for the PR.\n\n3.21.3 (2024-06-05)\n*******************\n\nBug fixes:\n\n- Fix memory leak that prevented schema instances from getting GC'd (:pr:`2277`).\n  Thanks :user:`mrcljx` for the PR.\n\n3.21.2 (2024-05-01)\n*******************\n\nBug fixes:\n\n- Allow timestamp 0 in ``fields.DateTime`` (:issue:`2133`).\n  Thanks :user:`flydzen` for reporting.\n\n3.21.1 (2024-03-04)\n*******************\n\nBug fixes:\n\n- Fix error message when field is declared as a class and not an instance (:issue:`2245`).\n  Thanks :user:`travnick` for reporting.\n\n3.21.0 (2024-02-26)\n*******************\n\nBug fixes:\n\n- Fix validation of ``URL`` fields to allow missing user field,\n  per NWG RFC 3986 (:issue:`2232`). Thanks :user:`ddennerline3` for reporting\n  and :user:`deckar01` for the PR.\n\nOther changes:\n\n- *Backwards-incompatible*: ``__version__``, ``__parsed_version__``, and ``__version_info__``\n  attributes are deprecated (:issue:`2227`). Use feature detection or\n  ``importlib.metadata.version(\"marshmallow\")`` instead.\n\n3.20.2 (2024-01-09)\n*******************\n\nBug fixes:\n\n- Fix ``Nested`` field type hint for lambda ``Schema`` types (:pr:`2164`).\n  Thanks :user:`somethingnew2-0` for the PR.\n\nOther changes:\n\n- Officially support Python 3.12 (:pr:`2188`).\n  Thanks :user:`hugovk` for the PR.\n\n3.20.1 (2023-07-20)\n*******************\n\nBug fixes:\n\n- Fix call to ``get_declared_fields``: pass ``dict_cls`` again (:issue:`2152`).\n  Thanks :user:`Cheaterman` for reporting.\n\n3.20.0 (2023-07-20)\n*******************\n\nFeatures:\n\n- Add ``absolute`` parameter to ``URL`` validator and ``Url`` field (:pr:`2123`).\n  Thanks :user:`sirosen` for the PR.\n- Use Abstract Base Classes to define ``FieldABC`` and ``SchemaABC``\n  (:issue:`1449`). Thanks :user:`aditkumar72` for the PR.\n- Use `OrderedSet` as default `set_class`. Schemas are now ordered by default.\n  (:issue:`1744`)\n\nBug fixes:\n\n- Handle ``OSError`` and ``OverflowError`` in ``utils.from_timestamp`` (:pr:`2102`).\n  Thanks :user:`TheBigRoomXXL` for the PR.\n- Fix the default inheritance of nested partial schemas (:issue:`2149`).\n  Thanks :user:`matejsp` for reporting.\n\nOther changes:\n\n- Officially support Python 3.11 (:pr:`2067`).\n- Drop support for Python 3.7 (:pr:`2135`).\n\n3.19.0 (2022-11-11)\n*******************\n\nFeatures:\n\n- Add ``timestamp`` and ``timestamp_ms`` formats to ``fields.DateTime``\n  (:issue:`612`).\n  Thanks :user:`vgavro` for the suggestion and thanks :user:`vanHoi` for\n  the PR.\n\n3.18.0 (2022-09-15)\n*******************\n\nFeatures:\n\n- Add ``Enum`` field (:pr:`2017`) and (:pr:`2044`).\n\nBug fixes:\n\n- Fix typing in ``Field._serialize`` signature (:pr:`2046`).\n\n3.17.1 (2022-08-22)\n*******************\n\nBug fixes:\n\n- Add return type to ``fields.Email.__init__`` (:pr:`2018`).\n  Thanks :user:`kkirsche` for the PR.\n- Add missing type hint to IPInterface __init__ (:pr:`2036`).\n\n3.17.0 (2022-06-26)\n*******************\n\nFeatures:\n\n- Support serialization as float in ``TimeDelta`` field (:pr:`1998`).\n  Thanks :user:`marcosatti` for the PR.\n- Add ``messages_dict`` property to ``ValidationError`` to facilitate type checking\n  (:pr:`1976`).\n  Thanks :user:`sirosen` for the PR.\n\n3.16.0 (2022-05-29)\n*******************\n\nFeatures:\n\n- Raise ``ValueError`` if an invalid value is passed to the ``unknown``\n  argument (:issue:`1721`, :issue:`1732`).\n  Thanks :user:`sirosen` for the PR.\n\nOther changes:\n\n- Set lower bound for ``packaging`` requirement (:issue:`1957`).\n  Thanks :user:`MatthewNicolTR` for reporting and thanks :user:`sirosen` for the PR.\n- Improve warning messages by passing ``stacklevel`` (:pr:`1986`).\n  Thanks :user:`tirkarthi` for the PR.\n\n3.15.0 (2022-03-12)\n*******************\n\nFeatures:\n\n- Allow passing a ``dict`` to ``fields.Nested`` (:pr:`1935`).\n  Thanks :user:`sirosen` for the PR.\n\nOther changes:\n\n- Address distutils deprecation warning in Python 3.10 (:pr:`1903`).\n  Thanks :user:`kkirsche` for the PR.\n- Add py310 to black target-version (:pr:`1921`).\n- Drop support for Python 3.6 (:pr:`1923`).\n- Use postponed evaluation of annotations (:pr:`1932`).\n  Thanks :user:`Isira-Seneviratne` for the PR.\n\n3.14.1 (2021-11-13)\n*******************\n\nBug fixes:\n\n- Fix publishing type hints per `PEP-561 <https://www.python.org/dev/peps/pep-0561/>`_\n  (:pr:`1905`). Thanks :user:`bwindsor` for the catch and patch.\n\n3.14.0 (2021-10-17)\n*******************\n\nBug fixes:\n\n- Fix ``fields.TimeDelta`` serialization precision (:issue:`1865`).\n  Thanks :user:`yarsanich` for reporting.\n\nOther changes:\n\n- Fix type-hints for ``data`` arg in ``Schema.validate`` to accept\n  list of dictionaries (:issue:`1790`, :pr:`1868`).\n  Thanks  :user:`yourun-proger` for PR.\n- Improve warning when passing metadata as keyword arguments (:pr:`1882`).\n  Thanks :user:`traherom` for the PR.\n- Don't build universal wheels. We don't support Python 2 anymore.\n  (:issue:`1860`) Thanks :user:`YKdvd` for reporting.\n- Make the build reproducible (:pr:`1862`).\n- Drop support for Python 3.5 (:pr:`1863`).\n- Test against Python 3.10 (:pr:`1888`).\n\n3.13.0 (2021-07-21)\n*******************\n\nFeatures:\n\n- Replace ``missing``/``default`` field parameters with\n  ``load_default``/``dump_default`` (:pr:`1742`).\n  Thanks :user:`sirosen` for the PR.\n\nDeprecations:\n\n- The use of ``missing``/``default`` field parameters is deprecated and will be\n  removed in marshmallow 4. ``load_default``/``dump_default`` should be used\n  instead.\n\n3.12.2 (2021-07-06)\n*******************\n\nBug fixes:\n\n- Don't expose ``Field``\\s as ``Schema`` attributes. This reverts a change\n  introduced in 3.12.0 that causes issues when field names conflict with\n  ``Schema`` attributes or methods. ``Fields``\\s are still accessible on a\n  ``Schema`` instance through the ``fields`` attribute. (:pr:`1843`)\n\n3.12.1 (2021-05-10)\n*******************\n\nBug fixes:\n\n- Fix bug that raised an ``AttributeError`` when instantiating a\n  ``Schema`` with a field named ``parent`` (:issue:`1808`).\n  Thanks :user:`flying-sheep` for reporting and helping with the fix.\n\n3.12.0 (2021-05-09)\n*******************\n\nFeatures:\n\n- Add ``validate.And`` (:issue:`1768`).\n  Thanks :user:`rugleb` for the suggestion.\n- Add type annotations to ``marshmallow.decorators`` (:issue:`1788`, :pr:`1789`).\n  Thanks :user:`michaeldimchuk` for the PR.\n- Let ``Field``\\s be accessed by name as ``Schema`` attributes (:pr:`1631`).\n\nOther changes:\n\n- Improve types in ``marshmallow.validate`` (:pr:`1786`).\n- Make ``marshmallow.validate.Validator`` an abstract base class (:pr:`1786`).\n- Remove unnecessary list cast (:pr:`1785`).\n\n3.11.1 (2021-03-29)\n*******************\n\nBug fixes:\n\n- Fix treatment of dotted keys when ``unknown=INCLUDE`` (:issue:`1506`).\n  Thanks :user:`rbu` for reporting and thanks :user:`sirosen` for the fix (:pr:`1745`).\n\n3.11.0 (2021-03-28)\n*******************\n\nFeatures:\n\n- Add ``fields.IPInterface``, ``fields.IPv4Interface``, and\n  ``IPv6Interface`` (:issue:`1733`). Thanks :user:`madeinoz67`\n  for the suggestion and the PR.\n- Raise ``AttributeError`` for missing methods when using ``fields.Method`` (:pr:`1675`).\n  Thanks :user:`lassandroan`.\n\nOther changes:\n\n- Remove unnecessary ``hasattr`` and ``getattr`` checks in ``Field`` (:pr:`1770`).\n\n3.10.0 (2020-12-19)\n*******************\n\nDeprecations:\n\n- Passing field metadata via keyword arguments is deprecated and will be\n  removed in marshmallow 4 (:issue:`1350`). Use the explicit ``metadata=...``\n  argument instead. Thanks :user:`sirosen`.\n\n3.9.1 (2020-11-07)\n******************\n\nBug fixes:\n\n- Cast to mapping type in ``Mapping.serialize`` and ``Mapping.deserialize``\n  (:pr:`1685`).\n- Fix bug letting ``Dict`` pass invalid dict on deserialization when no key or\n  value ``Field`` is specified (:pr:`1685`).\n\n3.9.0 (2020-10-31)\n******************\n\nFeatures:\n\n- Add ``format`` argument to ``fields.Time`` and ``timeformat`` ``class Meta`` option (:issue:`686`).\n  Thanks :user:`BennyAlex` for the suggestion and thanks :user:`infinityxxx` for the PR.\n\nOther changes:\n\n- Remove usage of implicit ``typing.Optional`` (:issue:`1663`).\n  Thanks :user:`nadega` for the PR.\n\n3.8.0 (2020-09-16)\n******************\n\nFeatures:\n\n- Add ``fields.IP``, ``fields.IPv4`` and ``fields.IPv6`` (:pr:`1485`). Thanks\n  :user:`mgetka` for the PR.\n\nBug fixes:\n\n- Fix typing in ``AwareDateTime`` (:pr:`1658`). Thanks :user:`adithyabsk` for\n  reporting.\n\n3.7.1 (2020-07-20)\n******************\n\nBug fixes:\n\n- ``fields.Boolean`` correctly serializes non-hashable types (:pr:`1633`).\n  Thanks :user:`jun0jang` for the PR.\n\n3.7.0 (2020-07-08)\n******************\n\nDeprecations:\n\n- ``marshmallow.pprint`` is deprecated and will be removed in marshmallow 4 (:issue:`1588`).\n\nSupport:\n\n- Document ``default_error_messages`` on field classes (:pr:`1619`). Thanks :user:`weeix`.\n\nBug fixes:\n\n- Fix passing ``only`` and ``exclude`` to ``Nested`` with an ordered ``Schema`` (:pr:`1627`).\n  Thanks :user:`juannorris` for the PR.\n\n3.6.1 (2020-06-02)\n******************\n\nNo code changes--only docs and contributor-facing updates in this release.\n\nSupport:\n\n- Documentation: improve custom fields example (:issue:`1538`).\n  Thanks :user:`pablospizzamiglio` for reporting the problem with the\n  old example and thanks :user:`Resinderate` for the PR.\n- Documentation: Split up API reference into multiple pages and\n  add summary tables (:pr:`1587`). Thanks :user:`EpicWink` for the PR.\n\n3.6.0 (2020-05-08)\n******************\n\nFeatures:\n\n- Add ``validate.ContainsNoneOf`` (:issue:`1528`).\n  Thanks :user:`Resinderate` for the suggestion and the PR.\n\n\n3.5.2 (2020-04-30)\n******************\n\nBug fixes:\n\n- Fix typing in ``class_registry`` (:pr:`1574`). Thanks :user:`mahenzon`.\n\n3.5.1 (2020-03-05)\n******************\n\nBug fixes:\n\n- Includes bug fix from 2.21.0.\n\n3.5.0 (2020-02-19)\n******************\n\nBug fixes:\n\n- Fix list of nullable nested fields ``List(Nested(Field, allow_none=True)``\n  (:issue:`1497`). Because this fix reverts an optimization introduced to\n  speed-up serialization and deserialization of lists of nested fields, a\n  negative impact on performance in this specific case is expected.\n\n3.4.0 (2020-02-02)\n******************\n\nFeatures:\n\n- Improve type coverage (:issue:`1479`). Thanks :user:`Reskov`.\n\nBug fixes:\n\n- Fix typing for ``data`` param of ``Schema.load`` and ``ValidationError`` (:issue:`1492`).\n  Thanks :user:`mehdigmira` for reporting and thanks :user:`dfirst` for the PR.\n\nOther changes:\n\n- Remove unnecessary typecasts (:pr:`1500`). Thanks :user:`hukkinj1`.\n- Remove useless ``_serialize`` override in ``UUID`` field (:pr:`1489`).\n\n3.3.0 (2019-12-05)\n******************\n\nFeatures:\n\n- ``fields.Nested`` may take a callable that returns a schema instance.\n  Use this to resolve order-of-declaration issues when schemas nest each other (:issue:`1146`).\n\n.. code-block:: python\n\n    # <3.3\n    class AlbumSchema(Schema):\n        title = fields.Str()\n        artist = fields.Nested(\"ArtistSchema\", only=(\"name\",))\n\n\n    class ArtistSchema(Schema):\n        name = fields.Str()\n        albums = fields.List(fields.Nested(AlbumSchema))\n\n\n    # >=3.3\n    class AlbumSchema(Schema):\n        title = fields.Str()\n        artist = fields.Nested(lambda: ArtistSchema(only=(\"name\",)))\n\n\n    class ArtistSchema(Schema):\n        name = fields.Str()\n        albums = fields.List(fields.Nested(AlbumSchema))\n\nDeprecations:\n\n- Passing the string ``\"self\"`` to ``fields.Nested`` is deprecated.\n  Use a callable instead.\n\n.. code-block:: python\n\n    from marshmallow import Schema, fields\n\n\n    # <3.3\n    class PersonSchema(Schema):\n        partner = fields.Nested(\"self\", exclude=(\"partner\",))\n        friends = fields.List(fields.Nested(\"self\"))\n\n\n    # >=3.3\n    class PersonSchema(Schema):\n        partner = fields.Nested(lambda: PersonSchema(exclude=(\"partner\")))\n        friends = fields.List(fields.Nested(lambda: PersonSchema()))\n\nOther changes:\n\n- Fix typing for ``Number._format_num`` (:pr:`1466`). Thanks :user:`hukkinj1`.\n- Make mypy stricter and remove dead code (:pr:`1467`). Thanks again, :user:`hukkinj1`.\n\n3.2.2 (2019-11-04)\n******************\n\nBug fixes:\n\n- Don't load fields for which ``load_only`` and ``dump_only`` are both ``True`` (:pr:`1448`).\n- Fix types in ``marshmallow.validate`` (:pr:`1446`).\n\nSupport:\n\n- Test against Python 3.8 (:pr:`1431`).\n\n3.2.1 (2019-09-30)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix typing for ``Schema.dump[s]`` (:pr:`1416`).\n\n3.2.0 (2019-09-17)\n++++++++++++++++++\n\nFeatures:\n\n- Add type annotations to ``marshmallow.schema`` and ``marshmallow.validate`` (:pr:`1407`, :issue:`663`).\n\nBug fixes:\n\n- Fix compatibility with Python < 3.5.3 (:issue:`1409`). Thanks :user:`lukaszdudek-silvair` for reporting.\n\nRefactoring:\n\n- Remove unnecessary ``BaseSchema`` superclass (:pr:`1406`).\n\n3.1.1 (2019-09-16)\n++++++++++++++++++\n\nBug fixes:\n\n- Restore inheritance hierarchy of ``Number`` fields (:pr:`1403`).\n  ``fields.Integer`` and ``fields.Decimal`` inherit from ``fields.Number``.\n- Fix bug that raised an uncaught error when a nested schema instance had an unpickleable object in its context (:issue:`1404`).\n  Thanks :user:`metheoryt` for reporting.\n\n3.1.0 (2019-09-15)\n++++++++++++++++++\n\nFeatures:\n\n- Add more type annotations (:issue:`663`).\n  Type information is distributed per `PEP 561 <https://www.python.org/dev/peps/pep-0561/>`_ .\n  Thanks :user:`fuhrysteve` for helping with this.\n\nBug fixes:\n\n- Includes bug fix from 2.20.5.\n\n3.0.5 (2019-09-12)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix bug that raised an uncaught error when passing both a schema instance and ``only`` to ``Nested`` (:pr:`1395`).\n  This bug also affected passing a schema instance to ``fields.Pluck``.\n\n\n3.0.4 (2019-09-11)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix propagating dot-delimited ``only`` and ``exclude`` parameters to nested schema instances (:issue:`1384`).\n- Includes bug fix from 2.20.4 (:issue:`1160`).\n\n3.0.3 (2019-09-04)\n++++++++++++++++++\n\nBug fixes:\n\n- Handle when ``data_key`` is an empty string (:issue:`1378`).\n  Thanks :user:`jtrakk` for reporting.\n\n3.0.2 (2019-09-04)\n++++++++++++++++++\n\nBug fixes:\n\n- Includes bug fix from 2.20.3 (:pr:`1376`).\n- Fix incorrect ``super()`` call in ``SchemaMeta.__init__`` (:pr:`1362`).\n\n3.0.1 (2019-08-21)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix bug when nesting ``fields.DateTime`` within ``fields.List`` or ``fields.Tuple`` (:issue:`1357`).\n  This bug was introduced in 3.0.0rc9. Thanks :user:`zblz` for reporting.\n\n3.0.0 (2019-08-18)\n++++++++++++++++++\n\nFeatures:\n\n- Optimize ``List(Nested(...))`` (:issue:`779`).\n- Minor performance improvements and cleanup (:pr:`1328`).\n- Add ``Schema.from_dict`` (:issue:`1312`).\n\nDeprecations/Removals:\n\n- ``Field.fail`` is deprecated. Use ``Field.make_error`` instead.\n- Remove UUID validation from ``fields.UUID``, for consistency with other fields (:issue:`1132`).\n\nSupport:\n\n- Various docs improvements (:pr:`1329`).\n\n3.0.0rc9 (2019-07-31)\n+++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: Validation does not occur on serialization (:issue:`1132`).\n  This significantly improves serialization performance.\n- *Backwards-incompatible*: ``DateTime`` does not affect timezone information\n  on serialization and deserialization (:issue:`1234`, :pr:`1278`).\n- Add ``NaiveDateTime`` and ``AwareDateTime`` to enforce timezone awareness\n  (:issue:`1234`, :pr:`1287`).\n- *Backwards-incompatible*: ``List`` does not wrap single values in a list on\n  serialization (:pr:`1307`).\n- *Backwards-incompatible*: ``Schema.handle_error`` receives ``many`` and ``partial`` as keyword arguments (:pr:`1321`).\n- Use ``raise from`` more uniformly to improve stack traces (:pr:`1313`).\n- Rename ``Nested.__schema`` to ``Nested._schema`` to prevent name mangling (:issue:`1289`).\n- Performance improvements (:pr:`1309`).\n\nDeprecations/Removals:\n\n- ``LocalDateTime`` is removed (:issue:`1234`).\n- ``marshmallow.utils.utc`` is removed. Use ``datetime.timezone.utc`` instead.\n\nBug fixes:\n\n- Fix behavior of ``List(Nested(\"self\"))`` (`#779 (comment) <https://github.com/marshmallow-code/marshmallow/issues/779#issuecomment-396354987>`_).\n\nSupport:\n\n- Document usage of ``validate.Regexp``'s usage ``re.search`` (:issue:`1285`). Thanks :user:`macdonaldezra`.\n\n3.0.0rc8 (2019-07-04)\n+++++++++++++++++++++\n\nFeatures:\n\n- Propagate ``only`` and ``exclude`` parameters to ``Nested`` fields\n  within ``List`` and ``Dict`` (:issue:`779`, :issue:`946`).\n- Use ``email.utils.parsedate_to_datetime`` instead of conditionally\n  using dateutil for parsing RFC dates (:pr:`1246`).\n- Use internal util functions instead of conditionally using dateutil\n  for parsing  ISO 8601 datetimes, dates and times. Timezone info is now\n  correctly deserialized whether or not dateutil is installed. (:pr:`1265`)\n- Improve error messages for ``validate.Range``.\n- Use ``raise from error`` for better stack traces (:pr:`1254`). Thanks\n  :user:`fuhrysteve`.\n- python-dateutil is no longer used. This resolves the inconsistent behavior\n  based on the presence of python-dateutil (:issue:`497`, :issue:`1234`).\n\nBug fixes:\n\n- Fix method resolution for ``__init__`` method of ``fields.Email`` and\n  ``fields.URL`` (:issue:`1268`). Thanks :user:`dursk` for the catch and patch.\n- Includes bug fixes from 2.19.4 and 2.19.5.\n\nOther changes:\n\n- *Backwards-incompatible*: Rename ``fields.List.container`` to ``fields.List.inner``,\n  ``fields.Dict.key_container`` to ``fields.Dict.key_field``, and\n  ``fields.Dict.value_container`` to ``fields.Dict.value_field``.\n- Switch to Azure Pipelines for CI (:issue:`1261`).\n\n3.0.0rc7 (2019-06-15)\n+++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: ``many`` is passed as a keyword argument to methods decorated with\n  ``pre_load``, ``post_load``, ``pre_dump``, ``post_dump``,\n  and ``validates_schema``. ``partial`` is passed as a keyword argument to\n  methods decorated with ``pre_load``, ``post_load`` and ``validates_schema``.\n  ``**kwargs`` should be added to all decorated methods.\n- Add ``min_inclusive`` and ``max_exclusive`` parameters to\n  ``validate.Range`` (:issue:`1221`). Thanks :user:`kdop` for the PR.\n\nBug fixes:\n\n- Fix propagation of ``partial`` to ``Nested`` containers (part of :issue:`779`).\n- Includes bug fix from 2.19.3.\n\nOther changes:\n\n- *Backwards-incompatible*: Use keyword-only arguments (:issue:`1216`).\n\n3.0.0rc6 (2019-05-05)\n+++++++++++++++++++++\n\nSupport:\n\n- *Backwards-incompatible*: Remove support for Python 2 (:issue:`1120`).\n  Only Python>=3.5 is supported.\n  Thank you :user:`rooterkyberian` for the suggestion and the PR.\n- *Backwards-incompatible*: Remove special-casing in ``fields.List`` and\n  ``fields.Tuple`` for accessing nested attributes (:pr:`1188`).\n  Use ``fields.List(fields.Pluck(...))`` instead.\n- Add ``python_requires`` to ``setup.py`` (:pr:`1194`).\n  Thanks :user:`hugovk`.\n- Upgrade syntax with ``pyupgrade`` in pre-commit (:pr:`1195`). Thanks\n  again :user:`hugovk`.\n\n3.0.0rc5 (2019-03-30)\n+++++++++++++++++++++\n\nFeatures:\n\n- Allow input value to be included in error messages\n  for a number of fields (:pr:`1129`). Thanks :user:`hdoupe` for the PR.\n- Improve default error messages for ``OneOf`` and ``ContainsOnly``\n  (:issue:`885`). Thanks :user:`mcgfeller` for the suggestion\n  and :user:`maxalbert` for the PR.\n\nDeprecations/Removals:\n\n- Remove ``fields.FormattedString`` (:issue:`1141`). Use\n  ``fields.Function`` or ``fields.Method`` instead.\n\nBug fixes:\n\n- Includes bug fix from 2.19.2.\n\n3.0.0rc4 (2019-02-08)\n+++++++++++++++++++++\n\nFeatures:\n\n- Add ``fields.Tuple`` (:issue:`1103`) Thanks :user:`zblz` for the PR.\n- Add ``fields.Mapping``, which makes it easier to support other\n  mapping types (e.g. ``OrderedDict``)  (:issue:`1092`).\n  Thank :user:`sayanarijit` for the suggestion and the PR.\n\n3.0.0rc3 (2019-01-13)\n+++++++++++++++++++++\n\nFeatures:\n\n- Make the error messages for \"unknown fields\" and \"invalid data type\"\n  configurable (:issue:`852`). Thanks :user:`Dunstrom` for the PR.\n- ``fields.Boolean`` parses ``\"yes\"``/``\"no\"`` values (:pr:`1081`).\n  Thanks :user:`r1b`.\n\nOther changes:\n\n- *Backwards-incompatible with previous 3.x versions*: Change ordering\n  of ``keys`` and ``values`` arguments to ``fields.Dict``.\n- Remove unused code in ``marshmallow.utils``: ``is_indexable_but_not_string``,\n  ``float_to_decimal``, ``decimal_to_fixed``, ``from_iso`` (:pr:`1088`).\n- Remove unused ``marshmallow.compat.string_types``.\n\nBug fixes:\n\n- Includes bug fix from 2.18.0.\n\n3.0.0rc2 (2019-01-03)\n+++++++++++++++++++++\n\nFeatures:\n\n- Add ``register`` *class Meta* option to allow bypassing marshmallow's\n  internal class registry when memory usage is critical (:issue:`660`).\n\nBug fixes:\n\n- Fix serializing dict-like objects with properties (:issue:`1060`).\n  Thanks :user:`taion` for the fix.\n- Fix populating ``ValidationError.valid_data`` for ``List`` and\n  ``Dict`` fields (:issue:`766`).\n\nOther changes:\n\n- Add ``marshmallow.__version_info__`` (:pr:`1074`).\n- Remove the ``marshmallow.marshalling`` internal module (:pr:`1070`).\n- A ``ValueError`` is raised when the ``missing`` parameter is passed\n  for required fields (:issue:`1040`).\n- Extra keyword arguments passed to ``ValidationError`` in validators\n  are no longer passed to the final ``ValidationError`` raised upon\n  validation completion (:issue:`996`).\n\n3.0.0rc1 (2018-11-29)\n+++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: Rework ``ValidationError`` API.\n  It now expects a single field name, and error structures are merged\n  in the final ``ValidationError`` raised when validation completes.\n  This allows schema-level validators to raise errors for individual\n  fields (:issue:`441`). Thanks :user:`maximkulkin` for\n  writing the original ``merge_errors`` implementation in :pr:`442` and thanks\n  :user:`lafrech` for completing the implementation in :pr:`1026`.\n\nBug fixes:\n\n- Fix ``TypeError`` when serializing ``None`` with ``Pluck`` (:pr:`1049`).\n  Thanks :user:`toffan` for the catch and patch.\n\n3.0.0b20 (2018-11-01)\n+++++++++++++++++++++\n\nBug fixes:\n\n- Includes bug fixes from 2.16.2 and 2.16.3.\n\n3.0.0b19 (2018-10-24)\n+++++++++++++++++++++\n\nFeatures:\n\n- Support partial loading of nested fields (:pr:`438`). Thanks\n  :user:`arbor-dwatson` for the PR. *Note*: Subclasses of ``fields.Nested``\n  now take an additional ``partial`` parameter in the ``_deserialize``\n  method.\n\nBug fixes:\n\n- Restore ``Schema.TYPE_MAPPING``, which was removed in 3.0.0b17 (:issue:`1012`).\n\nOther changes:\n\n- *Backwards-incompatible*: ``_serialize`` and ``_deserialize`` methods of\n  all ``fields.Field`` subclasses must accept ``**kwargs`` (:pr:`1007`).\n\n\n3.0.0b18 (2018-10-15)\n+++++++++++++++++++++\n\nBug fixes:\n\n- Fix ``Date`` deserialization when using custom format (:issue:`1001`). Thanks\n  :user:`Ondkloss` for reporting.\n\nDeprecations/Removals:\n\n- ``prefix`` parameter or ``Schema`` class is removed (:issue:`991`). The same\n  can be achieved using a ``@post_dump`` method.\n\n\n3.0.0b17 (2018-10-13)\n+++++++++++++++++++++\n\nFeatures:\n\n- Add ``format`` option to ``Date`` field (:pr:`869`).\n- *Backwards-incompatible*: Rename ``DateTime``'s ``dateformat`` Meta option\n  to ``datetimeformat``. ``dateformat`` now applies to ``Date`` (:pr:`869`).\n  Thanks :user:`knagra` for implementing these changes.\n- Enforce ISO 8601 when deserializing date and time (:issue:`899`).\n  Thanks :user:`dushr` for the report and the work on the PR.\n- *Backwards-incompatible*: Raise ``ValueError`` on ``Schema`` instantiation in\n  case of ``attribute`` or ``data_key`` collision (:pr:`992`).\n\nBug fixes:\n\n- Fix inconsistencies in field inference by refactoring the inference feature\n  into a dedicated field (:issue:`809`). Thanks :user:`taion` for the PR.\n- When ``unknown`` is not passed to ``Nested``, default to nested ``Schema``\n  ``unknown`` meta option rather than ``RAISE`` (:pr:`963`).\n  Thanks :user:`vgavro` for the PR.\n- Fix loading behavior of ``fields.Pluck`` (:pr:`990`).\n- Includes bug fix from 2.16.0.\n\n3.0.0b16 (2018-09-20)\n+++++++++++++++++++++\n\nBug fixes:\n\n- Fix ``root`` attribute for nested container fields\n  on inheriting schemas (:issue:`956`). Thanks :user:`bmcbu`\n  for reporting.\n\n3.0.0b15 (2018-09-18)\n+++++++++++++++++++++\n\nBug fixes:\n\n- Raise ``ValidationError`` instead of ``TypeError`` when non-iterable types are\n  validated with ``many=True`` (:issue:`851`).\n- ``many=True`` no longer iterates over ``str`` and ``collections.abc.Mapping`` objects and instead\n  raises a ``ValidationError`` with ``{'_schema': ['Invalid input type.']}`` (:issue:`930`).\n- Return ``[]`` as ``ValidationError.valid_data`` instead of ``{}`` when\n  ``many=True`` (:issue:`907`).\n\nThanks :user:`tuukkamustonen` for implementing these changes.\n\n3.0.0b14 (2018-09-15)\n+++++++++++++++++++++\n\nFeatures:\n\n- Add ``fields.Pluck`` for serializing a single field from a nested object\n  (:issue:`800`). Thanks :user:`timc13` for the feedback and :user:`deckar01`\n  for the implementation.\n- *Backwards-incompatible*: Passing a string argument as ``only`` to\n  ``fields.Nested`` is no longer supported. Use ``fields.Pluck`` instead\n  (:issue:`800`).\n- Raise a ``StringNotCollectionError`` if ``only`` or ``exclude`` is\n  passed as a string to ``fields.Nested`` (:pr:`931`).\n- *Backwards-incompatible*: ``Float`` takes an ``allow_nan`` parameter to\n  explicitly allow serializing and deserializing special values (``nan``,\n  ``inf`` and ``-inf``). ``allow_nan`` defaults to ``False``.\n\nOther changes:\n\n- *Backwards-incompatible*: ``Nested`` field now defaults to ``unknown=RAISE``\n  instead of ``EXCLUDE``. This harmonizes behavior with ``Schema`` that\n  already defaults to ``RAISE`` (:issue:`908`). Thanks :user:`tuukkamustonen`.\n- Tested against Python 3.7.\n\n3.0.0b13 (2018-08-04)\n+++++++++++++++++++++\n\nBug fixes:\n\n- Errors reported by a schema-level validator for a field in a ``Nested`` field\n  are stored under corresponding field name, not ``_schema`` key (:pr:`862`).\n- Includes bug fix from 2.15.4.\n\nOther changes:\n\n- *Backwards-incompatible*: The ``unknown`` option now defaults to ``RAISE``\n  (`#524 (comment) <https://github.com/marshmallow-code/marshmallow/issues/524#issuecomment-397165731>`_,\n  :issue:`851`).\n- *Backwards-incompatible*: When a schema error is raised with a ``dict`` as\n  payload, the ``dict`` overwrites any existing error list. Before this change,\n  it would be appended to the list.\n- Raise a `StringNotCollectionError` if ``only`` or ``exclude`` is\n  passed as a string (:issue:`316`). Thanks :user:`paulocheque` for\n  reporting.\n\n3.0.0b12 (2018-07-04)\n+++++++++++++++++++++\n\nFeatures:\n\n- The behavior to apply when encountering unknown fields while deserializing\n  can be controlled with the ``unknown`` option (:issue:`524`,\n  :issue:`747`, :issue:`127`).\n  It makes it possible to either \"include\", \"exclude\", or \"raise\".\n  Thanks :user:`tuukkamustonen` for the suggestion and thanks\n  :user:`ramnes` for the PR.\n\n.. warning::\n\n  The default for ``unknown`` will be changed to ``RAISE`` in the\n  next release.\n\nOther changes:\n\n- *Backwards-incompatible*: Pre/Post-processors MUST return modified data.\n  Returning ``None`` does not imply data were mutated (:issue:`347`). Thanks\n  :user:`tdevelioglu` for reporting.\n- *Backwards-incompatible*: ``only`` and ``exclude`` are bound by\n  declared and additional fields. A ``ValueError`` is raised if invalid\n  fields are passed (:issue:`636`). Thanks :user:`jan-23` for reporting.\n  Thanks :user:`ikilledthecat` and :user:`deckar01` for the PRs.\n- Format code using pre-commit (:pr:`855`).\n\nDeprecations/Removals:\n\n- ``ValidationError.fields`` is removed (:issue:`840`). Access field\n  instances from ``Schema.fields``.\n\n3.0.0b11 (2018-05-20)\n+++++++++++++++++++++\n\nFeatures:\n\n- Clean up code for schema hooks (:pr:`814`). Thanks :user:`taion`.\n- Minor performance improvement from simplifying ``utils.get_value`` (:pr:`811`). Thanks again :user:`taion`.\n- Add ``require_tld`` argument to ``fields.URL`` (:issue:`749`). Thanks\n  :user:`DenerKup` for reporting and thanks :user:`surik00` for the PR.\n- ``fields.UUID`` deserializes ``bytes`` strings using ``UUID(bytes=b'...')`` (:pr:`625`).\n  Thanks :user:`JeffBerger` for the suggestion and the PR.\n\nBug fixes:\n\n- Fields nested within ``Dict`` correctly inherit context from their\n  parent schema (:issue:`820`). Thanks :user:`RosanneZe` for reporting\n  and :user:`deckar01` for the PR.\n- Includes bug fix from 2.15.3.\n\n\n3.0.0b10 (2018-05-10)\n+++++++++++++++++++++\n\nBug fixes:\n\n- Includes bugfixes from 2.15.2.\n\n3.0.0b9 (2018-04-25)\n++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: ``missing`` and ``default`` values are\n  passed in deserialized form (:issue:`378`). Thanks :user:`chadrik` for\n  the suggestion and thanks :user:`lafrech` for the PR.\n\nBug fixes:\n\n- Includes the bugfix from 2.15.1.\n\n3.0.0b8 (2018-03-24)\n++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: Add ``data_key`` parameter to fields for\n  specifying the key in the input and output data dict. This\n  parameter replaces both ``load_from`` and ``dump_to`` (:issue:`717`).\n  Thanks :user:`lafrech`.\n- *Backwards-incompatible*: When ``pass_original=True`` is passed to one\n  of the decorators and a collection is being (de)serialized, the\n  ``original_data`` argument will be a single object unless\n  ``pass_many=True`` is also passed to the decorator (:issue:`315`,\n  :issue:`743`). Thanks :user:`stj` for the PR.\n- *Backwards-incompatible*: Don't recursively check nested required\n  fields when the ``Nested`` field's key is missing (:issue:`319`). This\n  reverts :pr:`235`. Thanks :user:`chekunkov` reporting and thanks\n  :user:`lafrech` for the PR.\n- *Backwards-incompatible*: Change error message collection for ``Dict`` field (:issue:`730`). Note:\n  this is backwards-incompatible with previous 3.0.0bX versions.\n  Thanks :user:`shabble` for the report and thanks :user:`lafrech` for the PR.\n\n3.0.0b7 (2018-02-03)\n++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: Schemas are always strict (:issue:`377`).\n  The ``strict`` parameter is removed.\n- *Backwards-incompatible*: ``Schema().load`` and ``Schema().dump`` return ``data`` instead of a\n  ``(data, errors)`` tuple (:issue:`598`).\n- *Backwards-incompatible*: ``Schema().load(None)`` raises a\n  ``ValidationError`` (:issue:`511`).\n\nSee :ref:`upgrading_3_0` for a guide on updating your code.\n\nThanks :user:`lafrech` for implementing these changes.\nSpecial thanks to :user:`MichalKononenko`, :user:`douglas-treadwell`, and\n:user:`maximkulkin` for the discussions on these changes.\n\n\nOther changes:\n\n- *Backwards-incompatible*: Field name is not checked when ``load_from``\n  is specified (:pr:`714`). Thanks :user:`lafrech`.\n\nSupport:\n\n- Add `Code of Conduct <https://marshmallow.readthedocs.io/en/dev/code_of_conduct.html>`_.\n\n\n3.0.0b6 (2018-01-02)\n++++++++++++++++++++\n\nBug fixes:\n\n- Fixes ``ValidationError.valid_data`` when a nested field contains errors\n  (:issue:`710`). This bug was introduced in 3.0.0b3. Thanks\n  :user:`lafrech`.\n\nOther changes:\n\n- *Backwards-incompatible*: ``Email`` and ``URL`` fields don't validate\n  on serialization (:issue:`608`). This makes them more consistent with the other\n  fields and improves serialization performance. Thanks again :user:`lafrech`.\n- ``validate.URL`` requires square brackets around IPv6 URLs (:issue:`707`). Thanks :user:`harlov`.\n\n3.0.0b5 (2017-12-30)\n++++++++++++++++++++\n\nFeatures:\n\n- Add support for structured dictionaries by providing values and keys arguments to the\n  ``Dict`` field's constructor. This mirrors the ``List``\n  field's ability to validate its items (:issue:`483`). Thanks :user:`deckar01`.\n\nOther changes:\n\n- *Backwards-incompatible*: ``utils.from_iso`` is deprecated in favor of\n  ``utils.from_iso_datetime`` (:issue:`694`). Thanks :user:`sklarsa`.\n\n3.0.0b4 (2017-10-23)\n++++++++++++++++++++\n\nFeatures:\n\n- Add support for millisecond, minute, hour, and week precisions to\n  ``fields.TimeDelta`` (:issue:`537`). Thanks :user:`Fedalto` for the\n  suggestion and the PR.\n- Includes features from release 2.14.0.\n\n\nSupport:\n\n- Copyright year in docs uses ``CHANGELOG.rst``'s modified date for\n  reproducible builds (:issue:`679`). Thanks :user:`bmwiedemann`.\n- Test against Python 3.6 in tox. Thanks :user:`Fedalto`.\n- Fix typo in exception message (:issue:`659`). Thanks :user:`wonderbeyond`\n  for reporting and thanks :user:`yoichi` for the PR.\n\n3.0.0b3 (2017-08-20)\n++++++++++++++++++++\n\nFeatures:\n\n- Add ``valid_data`` attribute to ``ValidationError``.\n- Add ``strict`` parameter to ``Integer`` (:issue:`667`). Thanks\n  :user:`yoichi`.\n\nDeprecations/Removals:\n\n- Deprecate ``json_module`` option in favor of ``render_module`` (:issue:`364`, :issue:`130`). Thanks :user:`justanr` for the suggestion.\n\nBug fixes:\n\n- Includes bug fixes from releases 2.13.5 and 2.13.6.\n- *Backwards-incompatible*: ``Number`` fields don't accept booleans as valid input (:issue:`623`). Thanks :user:`tuukkamustonen` for the suggestion and thanks :user:`rowillia` for the PR.\n\nSupport:\n\n- Add benchmark script. Thanks :user:`rowillia`.\n\n3.0.0b2 (2017-03-19)\n++++++++++++++++++++\n\nFeatures:\n\n- Add ``truthy`` and ``falsy`` params to ``fields.Boolean`` (:issue:`580`). Thanks :user:`zwack` for the PR. Note: This is potentially a breaking change if your code passes the `default` parameter positionally. Pass `default` as a keyword argument instead, e.g. ``fields.Boolean(default=True)``.\n\nOther changes:\n\n- *Backwards-incompatible*: ``validate.ContainsOnly`` allows empty and duplicate values (:issue:`516`, :issue:`603`). Thanks :user:`maximkulkin` for the suggestion and thanks :user:`lafrech` for the PR.\n\nBug fixes:\n\n- Includes bug fixes from release 2.13.4.\n\n3.0.0b1 (2017-03-10)\n++++++++++++++++++++\n\nFeatures:\n\n- ``fields.Nested`` respects ``only='field'`` when deserializing (:issue:`307`). Thanks :user:`erlingbo` for the suggestion and the PR.\n- ``fields.Boolean`` parses ``\"on\"``/``\"off\"`` (:issue:`580`). Thanks :user:`marcellarius` for the suggestion.\n\n\nOther changes:\n\n- Includes changes from release 2.13.2.\n- *Backwards-incompatible*: ``skip_on_field_errors`` defaults to ``True`` for ``validates_schema`` (:issue:`352`).\n\n3.0.0a1 (2017-02-26)\n++++++++++++++++++++\n\nFeatures:\n\n- ``dump_only`` and ``load_only`` for ``Function`` and ``Method`` are set based on ``serialize`` and ``deserialize`` arguments (:issue:`328`).\n\nOther changes:\n\n- *Backwards-incompatible*: ``fields.Method`` and ``fields.Function`` no longer swallow ``AttributeErrors`` (:issue:`395`). Thanks :user:`bereal` for the suggestion.\n- *Backwards-incompatible*: ``validators.Length`` is no longer a subclass of ``validators.Range`` (:issue:`458`). Thanks :user:`deckar01` for the catch and patch.\n- *Backwards-incompatible*: ``utils.get_func_args`` no longer returns bound arguments. This is consistent with the behavior of ``inspect.signature``. This change prevents a DeprecationWarning on Python 3.5 (:issue:`415`, :issue:`479`). Thanks :user:`deckar01` for the PR.\n- *Backwards-incompatible*: Change the signature of ``utils.get_value`` and ``Schema.get_attribute`` for consistency with Python builtins (e.g. ``getattr``) (:issue:`341`). Thanks :user:`stas` for reporting and thanks :user:`deckar01` for the PR.\n- *Backwards-incompatible*: Don't unconditionally call callable attributes (:issue:`430`, reverts :issue:`242`). Thanks :user:`mirko` for the suggestion.\n- Drop support for Python 2.6 and 3.3.\n\nDeprecation/Removals:\n\n- Remove ``__error_handler__``, ``__accessor__``, ``@Schema.error_handler``, and ``@Schema.accessor``. Override ``Schema.handle_error`` and ``Schema.get_attribute`` instead.\n- Remove ``func`` parameter of ``fields.Function``. Remove ``method_name`` parameter of ``fields.Method`` (issue:`325`). Use the ``serialize`` parameter instead.\n- Remove ``extra`` parameter from ``Schema``. Use a ``@post_dump`` method to add additional data.\n\n2.21.0 (2020-03-05)\n+++++++++++++++++++\n\nBug fixes:\n\n- Don't match string-ending newlines in ``URL`` and ``Email`` fields\n  (:issue:`1522`). Thanks :user:`nbanmp` for the PR.\n\nOther changes:\n\n- Drop support for Python 3.4 (:pr:`1525`).\n\n2.20.5 (2019-09-15)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix behavior when a non-list collection is passed to the ``validate`` argument of ``fields.Email`` and ``fields.URL`` (:issue:`1400`).\n\n2.20.4 (2019-09-11)\n+++++++++++++++++++\n\nBug fixes:\n\n- Respect the ``many`` value on ``Schema`` instances passed to ``Nested`` (:issue:`1160`).\n  Thanks :user:`Kamforka` for reporting.\n\n2.20.3 (2019-09-04)\n+++++++++++++++++++\n\nBug fixes:\n\n- Don't swallow ``TypeError`` exceptions raised by ``Field._bind_to_schema`` or ``Schema.on_bind_field`` (:pr:`1376`).\n\n2.20.2 (2019-08-20)\n+++++++++++++++++++\n\nBug fixes:\n\n- Prevent warning about importing from ``collections`` on Python 3.7\n  (:pr:`1354`). Thanks :user:`nicktimko` for the PR.\n\n2.20.1 (2019-08-13)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix bug that raised ``TypeError`` when invalid data type is\n  passed to a nested schema with ``@validates`` (:issue:`1342`).\n\n2.20.0 (2019-08-10)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix deprecated functions' compatibility with Python 2 (:issue:`1337`).\n  Thanks :user:`airstandley` for the catch and patch.\n- Fix error message consistency for invalid input types on nested fields (:issue:`1303`).\n  This is a backport of the fix in :pr:`857`. Thanks :user:`cristi23` for the\n  thorough bug report and the PR.\n\nDeprecation/Removals:\n\n- Python 2.6 is no longer officially supported (:issue:`1274`).\n\n2.19.5 (2019-06-18)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix deserializing ISO8601-formatted datetimes with less than 6-digit\n  miroseconds (:issue:`1251`). Thanks :user:`diego-plan9` for reporting.\n\n2.19.4 (2019-06-16)\n+++++++++++++++++++\n\nBug fixes:\n\n- Microseconds no longer gets lost when deserializing datetimes without dateutil\n  installed (:issue:`1147`).\n\n2.19.3 (2019-06-15)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix bug where nested fields in ``Meta.exclude`` would not work on\n  multiple instantiations (:issue:`1212`). Thanks :user:`MHannila` for\n  reporting.\n\n2.19.2 (2019-03-30)\n+++++++++++++++++++\n\nBug fixes:\n\n- Handle ``OverflowError`` when (de)serializing large integers with\n  ``fields.Float`` (:pr:`1177`). Thanks :user:`brycedrennan` for the PR.\n\n2.19.1 (2019-03-16)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix bug where ``Nested(many=True)`` would skip first element when\n  serializing a generator (:issue:`1163`). Thanks :user:`khvn26` for the\n  catch and patch.\n\n2.19.0 (2019-03-07)\n+++++++++++++++++++\n\nDeprecation/Removal:\n\n- A ``RemovedInMarshmallow3`` warning is raised when using\n  ``fields.FormattedString``. Use ``fields.Method`` or ``fields.Function``\n  instead (:issue:`1141`).\n\n2.18.1 (2019-02-15)\n+++++++++++++++++++\n\nBug fixes:\n\n- A ``ChangedInMarshmallow3Warning`` is no longer raised when\n  ``strict=False`` (:issue:`1108`). Thanks :user:`Aegdesil` for\n  reporting.\n\n2.18.0 (2019-01-13)\n+++++++++++++++++++\n\nFeatures:\n\n- Add warnings for functions in ``marshmallow.utils`` that are removed in\n  marshmallow 3.\n\nBug fixes:\n\n- Copying ``missing`` with ``copy.copy`` or ``copy.deepcopy`` will not\n  duplicate it (:pr:`1099`).\n\n2.17.0 (2018-12-26)\n+++++++++++++++++++\n\nFeatures:\n\n- Add ``marshmallow.__version_info__`` (:pr:`1074`).\n- Add warnings for API that is deprecated or changed to help users\n  prepare for marshmallow 3 (:pr:`1075`).\n\n2.16.3 (2018-11-01)\n+++++++++++++++++++\n\nBug fixes:\n\n- Prevent memory leak when dynamically creating classes with ``type()``\n  (:issue:`732`). Thanks :user:`asmodehn` for writing the tests to\n  reproduce this issue.\n\n2.16.2 (2018-10-30)\n+++++++++++++++++++\n\nBug fixes:\n\n- Prevent warning about importing from ``collections`` on Python 3.7\n  (:issue:`1027`). Thanks :user:`nkonin` for reporting and\n  :user:`jmargeta` for the PR.\n\n2.16.1 (2018-10-17)\n+++++++++++++++++++\n\nBug fixes:\n\n- Remove spurious warning about implicit collection handling\n  (:issue:`998`). Thanks :user:`lalvarezguillen` for reporting.\n\n2.16.0 (2018-10-10)\n+++++++++++++++++++\n\nBug fixes:\n\n- Allow username without password in basic auth part of the url in\n  ``fields.Url`` (:pr:`982`). Thanks user:`alefnula` for the PR.\n\nOther changes:\n\n- Drop support for Python 3.3 (:pr:`987`).\n\n2.15.6 (2018-09-20)\n+++++++++++++++++++\n\nBug fixes:\n\n- Prevent ``TypeError`` when a non-collection is passed to a ``Schema`` with ``many=True``.\n  Instead, raise ``ValidationError`` with ``{'_schema': ['Invalid input type.']}`` (:issue:`906`).\n- Fix ``root`` attribute for nested container fields on list\n  on inheriting schemas (:issue:`956`). Thanks :user:`bmcbu`\n  for reporting.\n\nThese fixes were backported from 3.0.0b15 and 3.0.0b16.\n\n\n2.15.5 (2018-09-15)\n+++++++++++++++++++\n\nBug fixes:\n\n- Handle empty SQLAlchemy lazy lists gracefully when dumping (:issue:`948`).\n  Thanks :user:`vke-code` for the catch and :user:`YuriHeupa` for the patch.\n\n2.15.4 (2018-08-04)\n+++++++++++++++++++\n\nBug fixes:\n\n- Respect ``load_from`` when reporting errors for ``@validates('field_name')``\n  (:issue:`748`). Thanks :user:`m-novikov` for the catch and patch.\n\n2.15.3 (2018-05-20)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix passing ``only`` as a string to ``nested`` when the passed field\n  defines ``dump_to`` (:issue:`800`, :issue:`822`). Thanks\n  :user:`deckar01` for the catch and patch.\n\n2.15.2 (2018-05-10)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix a race condition in validation when concurrent threads use the\n  same ``Schema`` instance (:issue:`783`). Thanks :user:`yupeng0921` and\n  :user:`lafrech` for the fix.\n- Fix serialization behavior of\n  ``fields.List(fields.Integer(as_string=True))`` (:issue:`788`). Thanks\n  :user:`cactus` for reporting and :user:`lafrech` for the fix.\n- Fix behavior of ``exclude`` parameter when passed from parent to\n  nested schemas (:issue:`728`). Thanks :user:`timc13` for reporting and\n  :user:`deckar01` for the fix.\n\n2.15.1 (2018-04-25)\n+++++++++++++++++++\n\nBug fixes:\n\n- :cve:`CVE-2018-17175`: Fix behavior when an empty list is passed as the ``only`` argument\n  (:issue:`772`). Thanks :user:`deckar01` for reporting and thanks\n  :user:`lafrech` for the fix.\n\n2.15.0 (2017-12-02)\n+++++++++++++++++++\n\nBug fixes:\n\n- Handle ``UnicodeDecodeError`` when deserializing ``bytes`` with a\n  ``String`` field (:issue:`650`). Thanks :user:`dan-blanchard` for the\n  suggestion and thanks :user:`4lissonsilveira` for the PR.\n\n2.14.0 (2017-10-23)\n+++++++++++++++++++\n\nFeatures:\n\n- Add ``require_tld`` parameter to ``validate.URL`` (:issue:`664`).\n  Thanks :user:`sduthil` for the suggestion and the PR.\n\n2.13.6 (2017-08-16)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix serialization of types that implement `__getitem__`\n  (:issue:`669`). Thanks :user:`MichalKononenko`.\n\n2.13.5 (2017-04-12)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix validation of iso8601-formatted dates (:issue:`556`). Thanks :user:`lafrech` for reporting.\n\n2.13.4 (2017-03-19)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix symmetry of serialization and deserialization behavior when passing a dot-delimited path to the ``attribute`` parameter of fields (:issue:`450`). Thanks :user:`itajaja` for reporting.\n\n2.13.3 (2017-03-11)\n+++++++++++++++++++\n\nBug fixes:\n\n- Restore backwards-compatibility of ``SchemaOpts`` constructor (:issue:`597`). Thanks :user:`Wesmania` for reporting and thanks :user:`frol` for the fix.\n\n2.13.2 (2017-03-10)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix inheritance of ``ordered`` option when ``Schema`` subclasses define ``class Meta`` (:issue:`593`). Thanks :user:`frol`.\n\nSupport:\n\n- Update contributing docs.\n\n2.13.1 (2017-03-04)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix sorting on Schema subclasses when ``ordered=True`` (:issue:`592`). Thanks :user:`frol`.\n\n2.13.0 (2017-02-18)\n+++++++++++++++++++\n\nFeatures:\n\n- Minor optimizations (:issue:`577`). Thanks :user:`rowillia` for the PR.\n\n2.12.2 (2017-01-30)\n+++++++++++++++++++\n\nBug fixes:\n\n- Unbound fields return `None` rather returning the field itself. This fixes a corner case introduced in :issue:`572`. Thanks :user:`touilleMan` for reporting and :user:`YuriHeupa` for the fix.\n\n2.12.1 (2017-01-23)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix behavior when a ``Nested`` field is composed within a ``List`` field (:issue:`572`). Thanks :user:`avish` for reporting and :user:`YuriHeupa` for the PR.\n\n2.12.0 (2017-01-22)\n+++++++++++++++++++\n\nFeatures:\n\n- Allow passing nested attributes (e.g. ``'child.field'``) to the ``dump_only`` and ``load_only`` parameters of ``Schema`` (:issue:`572`). Thanks :user:`YuriHeupa` for the PR.\n- Add ``schemes`` parameter to ``fields.URL`` (:issue:`574`). Thanks :user:`mosquito` for the PR.\n\n2.11.1 (2017-01-08)\n+++++++++++++++++++\n\nBug fixes:\n\n- Allow ``strict`` class Meta option to be overridden by constructor (:issue:`550`). Thanks :user:`douglas-treadwell` for reporting and thanks :user:`podhmo` for the PR.\n\n2.11.0 (2017-01-08)\n+++++++++++++++++++\n\nFeatures:\n\n- Import ``marshmallow.fields`` in ``marshmallow/__init__.py`` to save an import when importing the ``marshmallow`` module (:issue:`557`). Thanks :user:`mindojo-victor`.\n\nSupport:\n\n- Documentation: Improve example in \"Validating Original Input Data\" (:issue:`558`). Thanks :user:`altaurog`.\n- Test against Python 3.6.\n\n2.10.5 (2016-12-19)\n+++++++++++++++++++\n\nBug fixes:\n\n- Reset user-defined kwargs passed to ``ValidationError`` on each ``Schema.load`` call (:issue:`565`). Thanks :user:`jbasko` for the catch and patch.\n\nSupport:\n\n- Tests: Fix redefinition of ``test_utils.test_get_value()`` (:issue:`562`). Thanks :user:`nelfin`.\n\n2.10.4 (2016-11-18)\n+++++++++++++++++++\n\nBug fixes:\n\n- `Function` field works with callables that use Python 3 type annotations (:issue:`540`). Thanks :user:`martinstein` for reporting and thanks :user:`sabinem`, :user:`lafrech`, and :user:`maximkulkin` for the work on the PR.\n\n2.10.3 (2016-10-02)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix behavior for serializing missing data with ``Number`` fields when ``as_string=True`` is passed (:issue:`538`). Thanks :user:`jessemyers` for reporting.\n\n2.10.2 (2016-09-25)\n+++++++++++++++++++\n\nBug fixes:\n\n- Use fixed-point notation rather than engineering notation when serializing with ``Decimal`` (:issue:`534`). Thanks :user:`gdub`.\n- Fix UUID validation on serialization and deserialization of ``uuid.UUID`` objects (:issue:`532`). Thanks :user:`pauljz`.\n\n2.10.1 (2016-09-14)\n+++++++++++++++++++\n\nBug fixes:\n\n- Fix behavior when using ``validate.Equal(False)`` (:issue:`484`). Thanks :user:`pktangyue` for reporting and thanks :user:`tuukkamustonen` for the fix.\n- Fix ``strict`` behavior when errors are raised in ``pre_dump``/``post_dump`` processors (:issue:`521`). Thanks :user:`tvuotila` for the catch and patch.\n- Fix validation of nested fields on dumping (:issue:`528`). Thanks again :user:`tvuotila`.\n\n2.10.0 (2016-09-05)\n+++++++++++++++++++\n\nFeatures:\n\n- Errors raised by pre/post-load/dump methods will be added to a schema's errors dictionary (:issue:`472`). Thanks :user:`dbertouille` for the suggestion and for the PR.\n\n2.9.1 (2016-07-21)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix serialization of ``datetime.time`` objects with microseconds (:issue:`464`). Thanks :user:`Tim-Erwin` for reporting and thanks :user:`vuonghv` for the fix.\n- Make ``@validates`` consistent with field validator behavior: if validation fails, the field will not be included in the deserialized output (:issue:`391`). Thanks :user:`martinstein` for reporting and thanks :user:`vuonghv` for the fix.\n\n2.9.0 (2016-07-06)\n++++++++++++++++++\n\n- ``Decimal`` field coerces input values to a string before deserializing to a `decimal.Decimal` object in order to avoid transformation of float values under 12 significant digits (:issue:`434`, :issue:`435`). Thanks :user:`davidthornton` for the PR.\n\n2.8.0 (2016-06-23)\n++++++++++++++++++\n\nFeatures:\n\n- Allow ``only`` and ``exclude`` parameters to take nested fields, using dot-delimited syntax (e.g. ``only=['blog.author.email']``) (:issue:`402`). Thanks :user:`Tim-Erwin` and :user:`deckar01` for the discussion and implementation.\n\nSupport:\n\n- Update tasks.py for compatibility with invoke>=0.13.0. Thanks :user:`deckar01`.\n\n2.7.3 (2016-05-05)\n++++++++++++++++++\n\n- Make ``field.parent`` and ``field.name`` accessible to ``on_bind_field`` (:issue:`449`). Thanks :user:`immerrr`.\n\n2.7.2 (2016-04-27)\n++++++++++++++++++\n\nNo code changes in this release. This is a reupload in order to distribute an sdist for the last hotfix release. See :issue:`443`.\n\nSupport:\n\n- Update license entry in setup.py to fix RPM distributions (:issue:`433`). Thanks :user:`rrajaravi` for reporting.\n\n2.7.1 (2016-04-08)\n++++++++++++++++++\n\nBug fixes:\n\n- Only add Schemas to class registry if a class name is provided. This allows Schemas to be\n  constructed dynamically using the ``type`` constructor without getting added to the class registry (which is useful for saving memory).\n\n2.7.0 (2016-04-04)\n++++++++++++++++++\n\nFeatures:\n\n- Make context available to ``Nested`` field's ``on_bind_field`` method (:issue:`408`). Thanks :user:`immerrr` for the PR.\n- Pass through user ``ValidationError`` kwargs (:issue:`418`). Thanks :user:`russelldavies` for helping implement this.\n\nOther changes:\n\n- Remove unused attributes ``root``, ``parent``, and ``name`` from ``SchemaABC`` (:issue:`410`). Thanks :user:`Tim-Erwin` for the PR.\n\n2.6.1 (2016-03-17)\n++++++++++++++++++\n\nBug fixes:\n\n- Respect ``load_from`` when reporting errors for nested required fields (:issue:`414`). Thanks :user:`yumike`.\n\n2.6.0 (2016-02-01)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``partial`` argument to ``Schema.validate`` (:issue:`379`). Thanks :user:`tdevelioglu` for the PR.\n- Add ``equal`` argument to ``validate.Length``. Thanks :user:`daniloakamine`.\n- Collect all validation errors for each item deserialized by a ``List`` field (:issue:`345`). Thanks :user:`maximkulkin` for the report and the PR.\n\n2.5.0 (2016-01-16)\n++++++++++++++++++\n\nFeatures:\n\n- Allow a tuple of field names to be passed as the ``partial`` argument to ``Schema.load`` (:issue:`369`). Thanks :user:`tdevelioglu` for the PR.\n- Add ``schemes`` argument to ``validate.URL`` (:issue:`356`).\n\n2.4.2 (2015-12-08)\n++++++++++++++++++\n\nBug fixes:\n\n- Prevent duplicate error messages when validating nested collections (:issue:`360`). Thanks :user:`alexmorken` for the catch and patch.\n\n2.4.1 (2015-12-07)\n++++++++++++++++++\n\nBug fixes:\n\n- Serializing an iterator will not drop the first item (:issue:`343`, :issue:`353`). Thanks :user:`jmcarp` for the patch. Thanks :user:`edgarallang` and :user:`jmcarp` for reporting.\n\n2.4.0 (2015-12-06)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``skip_on_field_errors`` parameter to ``validates_schema`` (:issue:`323`). Thanks :user:`jjvattamattom` for the suggestion and :user:`d-sutherland` for the PR.\n\nBug fixes:\n\n- Fix ``FormattedString`` serialization (:issue:`348`). Thanks :user:`acaird` for reporting.\n- Fix ``@validates`` behavior when used when ``attribute`` is specified and ``strict=True`` (:issue:`350`). Thanks :user:`density` for reporting.\n\n2.3.0 (2015-11-22)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``dump_to`` parameter to fields (:issue:`310`). Thanks :user:`ShayanArmanPercolate` for the suggestion. Thanks :user:`franciscod` and :user:`ewang` for the PRs.\n- The ``deserialize`` function passed to ``fields.Function`` can optionally receive a ``context`` argument (:issue:`324`). Thanks :user:`DamianHeard`.\n- The ``serialize`` function passed to ``fields.Function`` is optional (:issue:`325`). Thanks again :user:`DamianHeard`.\n- The ``serialize`` function passed to ``fields.Method`` is optional (:issue:`329`). Thanks :user:`justanr`.\n\nDeprecation/Removal:\n\n- The ``func`` argument of ``fields.Function`` has been renamed to ``serialize``.\n- The ``method_name`` argument of ``fields.Method`` has been renamed to ``serialize``.\n\n``func`` and ``method_name`` are still present for backwards-compatibility, but they will both be removed in marshmallow 3.0.\n\n2.2.1 (2015-11-11)\n++++++++++++++++++\n\nBug fixes:\n\n- Skip field validators for fields that aren't included in ``only`` (:issue:`320`). Thanks :user:`carlos-alberto` for reporting and :user:`eprikazc` for the PR.\n\n2.2.0 (2015-10-26)\n++++++++++++++++++\n\nFeatures:\n\n- Add support for partial deserialization with the ``partial`` argument to ``Schema`` and ``Schema.load`` (:issue:`290`). Thanks :user:`taion`.\n\nDeprecation/Removals:\n\n- ``Query`` and ``QuerySelect`` fields are removed.\n- Passing of strings to ``required`` and ``allow_none`` is removed. Pass the ``error_messages`` argument instead.\n\nSupport:\n\n- Add example of Schema inheritance in docs (:issue:`225`). Thanks :user:`martinstein` for the suggestion and :user:`juanrossi` for the PR.\n- Add \"Customizing Error Messages\" section to custom fields docs.\n\n2.1.3 (2015-10-18)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix serialization of collections for which ``iter`` will modify position, e.g. Pymongo cursors (:issue:`303`). Thanks :user:`Mise` for the catch and patch.\n\n2.1.2 (2015-10-14)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix passing data to schema validator when using ``@validates_schema(many=True)`` (:issue:`297`). Thanks :user:`d-sutherland` for reporting.\n- Fix usage of ``@validates`` with a nested field when ``many=True`` (:issue:`298`). Thanks :user:`nelfin` for the catch and patch.\n\n2.1.1 (2015-10-07)\n++++++++++++++++++\n\nBug fixes:\n\n- ``Constant`` field deserializes to its value regardless of whether its field name is present in input data (:issue:`291`). Thanks :user:`fayazkhan` for reporting.\n\n2.1.0 (2015-09-30)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``Dict`` field for arbitrary mapping data (:issue:`251`). Thanks :user:`dwieeb` for adding this and :user:`Dowwie` for the suggestion.\n- Add ``Field.root`` property, which references the field's Schema.\n\nDeprecation/Removals:\n\n- The ``extra`` param of ``Schema`` is deprecated. Add extra data in a ``post_load`` method instead.\n- ``UnmarshallingError`` and ``MarshallingError`` are removed.\n\nBug fixes:\n\n- Fix storing multiple schema-level validation errors (:issue:`287`). Thanks :user:`evgeny-sureev` for the patch.\n- If ``missing=None`` on a field, ``allow_none`` will be set to ``True``.\n\nOther changes:\n\n- A ``List's`` inner field will have the list field set as its parent. Use ``root`` to access the ``Schema``.\n\n2.0.0 (2015-09-25)\n++++++++++++++++++\n\nFeatures:\n\n- Make error messages configurable at the class level and instance level (``Field.default_error_messages`` attribute and ``error_messages`` parameter, respectively).\n\nDeprecation/Removals:\n\n- Remove ``make_object``. Use a ``post_load`` method instead (:issue:`277`).\n- Remove the ``error`` parameter and attribute of ``Field``.\n- Passing string arguments to ``required`` and ``allow_none`` is deprecated. Pass the ``error_messages`` argument instead. **This API will be removed in version 2.2**.\n- Remove ``Arbitrary``, ``Fixed``, and ``Price`` fields (:issue:`86`). Use ``Decimal`` instead.\n- Remove ``Select`` / ``Enum`` fields (:issue:`135`). Use the ``OneOf`` validator instead.\n\nBug fixes:\n\n- Fix error format for ``Nested`` fields when ``many=True``. Thanks :user:`alexmorken`.\n- ``pre_dump`` methods are invoked before implicit field creation. Thanks :user:`makmanalp` for reporting.\n- Return correct \"required\" error message for ``Nested`` field.\n- The ``only`` argument passed to a ``Schema`` is bounded by the ``fields`` option (:issue:`183`). Thanks :user:`lustdante` for the suggestion.\n\nChanges from 2.0.0rc2:\n\n- ``error_handler`` and ``accessor`` options are replaced with the ``handle_error`` and ``get_attribute`` methods :issue:`284`.\n- Remove ``marshmallow.compat.plain_function`` since it is no longer used.\n- Non-collection values are invalid input for ``List`` field (:issue:`231`). Thanks :user:`density` for reporting.\n- Bug fix: Prevent infinite loop when validating a required, self-nested field. Thanks :user:`Bachmann1234` for the fix.\n\n2.0.0rc2 (2015-09-16)\n+++++++++++++++++++++\n\nDeprecation/Removals:\n\n- ``make_object`` is deprecated. Use a ``post_load`` method instead (:issue:`277`). **This method will be removed in the final 2.0 release**.\n- ``Schema.accessor`` and ``Schema.error_handler`` decorators are deprecated. Define the ``accessor`` and ``error_handler`` class Meta options instead.\n\nBug fixes:\n\n- Allow non-field names to be passed to ``ValidationError`` (:issue:`273`). Thanks :user:`evgeny-sureev` for the catch and patch.\n\nChanges from 2.0.0rc1:\n\n- The ``raw`` parameter of the ``pre_*``, ``post_*``, ``validates_schema`` decorators was renamed to ``pass_many`` (:issue:`276`).\n- Add ``pass_original`` parameter to ``post_load`` and ``post_dump`` (:issue:`216`).\n- Methods decorated with the ``pre_*``, ``post_*``, and ``validates_*`` decorators must be instance methods. Class methods and instance methods are not supported at this time.\n\n2.0.0rc1 (2015-09-13)\n+++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: ``fields.Field._deserialize`` now takes ``attr`` and ``data`` as arguments (:issue:`172`). Thanks :user:`alexmic` and :user:`kevinastone` for the suggestion.\n- Allow a ``Field's`` ``attribute`` to be modified during deserialization (:issue:`266`). Thanks :user:`floqqi`.\n- Allow partially-valid data to be returned for ``Nested`` fields (:issue:`269`). Thanks :user:`jomag` for the suggestion.\n- Add ``Schema.on_bind_field`` hook which allows a ``Schema`` to modify its fields when they are bound.\n- Stricter validation of string, boolean, and number fields (:issue:`231`). Thanks :user:`touilleMan` for the suggestion.\n- Improve consistency of error messages.\n\nDeprecation/Removals:\n\n- ``Schema.validator``, ``Schema.preprocessor``, and ``Schema.data_handler`` are removed. Use ``validates_schema``, ``pre_load``, and ``post_dump`` instead.\n- ``QuerySelect``  and ``QuerySelectList`` are deprecated (:issue:`227`). **These fields will be removed in version 2.1.**\n- ``utils.get_callable_name`` is removed.\n\nBug fixes:\n\n- If a date format string is passed to a ``DateTime`` field, it is always used for deserialization (:issue:`248`). Thanks :user:`bartaelterman` and :user:`praveen-p`.\n\nSupport:\n\n- Documentation: Add \"Using Context\" section to \"Extending Schemas\" page (:issue:`224`).\n- Include tests and docs in release tarballs (:issue:`201`).\n- Test against Python 3.5.\n\n2.0.0b5 (2015-08-23)\n++++++++++++++++++++\n\nFeatures:\n\n- If a field corresponds to a callable attribute, it will be called upon serialization. Thanks :user:`alexmorken`.\n- Add ``load_only`` and ``dump_only`` ``class Meta`` options. Thanks :user:`kelvinhammond`.\n- If a ``Nested`` field is required, recursively validate any required fields in the nested schema (:issue:`235`). Thanks :user:`max-orhai`.\n- Improve error message if a list of dicts is not passed to a ``Nested`` field for which ``many=True``. Thanks again :user:`max-orhai`.\n\nBug fixes:\n\n- ``make_object`` is only called after all validators and postprocessors have finished (:issue:`253`). Thanks :user:`sunsongxp` for reporting.\n- If an invalid type is passed to ``Schema`` and ``strict=False``, store a ``_schema`` error in the errors dict rather than raise an exception (:issue:`261`). Thanks :user:`density` for reporting.\n\nOther changes:\n\n- ``make_object`` is only called when input data are completely valid (:issue:`243`). Thanks :user:`kissgyorgy` for reporting.\n- Change default error messages for ``URL`` and ``Email`` validators so that they don't include user input (:issue:`255`).\n- ``Email`` validator permits email addresses with non-ASCII characters, as per RFC 6530 (:issue:`221`). Thanks :user:`lextoumbourou` for reporting and :user:`mwstobo` for sending the patch.\n\n2.0.0b4 (2015-07-07)\n++++++++++++++++++++\n\nFeatures:\n\n- ``List`` field respects the ``attribute`` argument of the inner field. Thanks :user:`jmcarp`.\n- The ``container`` field ``List`` field has access to its parent ``Schema`` via its ``parent`` attribute. Thanks again :user:`jmcarp`.\n\nDeprecation/Removals:\n\n- Legacy validator functions have been removed (:issue:`73`). Use the class-based validators in ``marshmallow.validate`` instead.\n\nBug fixes:\n\n- ``fields.Nested`` correctly serializes nested ``sets`` (:issue:`233`). Thanks :user:`traut`.\n\nChanges from 2.0.0b3:\n\n- If ``load_from`` is used on deserialization, the value of ``load_from`` is used as the key in the errors dict (:issue:`232`). Thanks :user:`alexmorken`.\n\n2.0.0b3 (2015-06-14)\n+++++++++++++++++++++\n\nFeatures:\n\n- Add ``marshmallow.validates_schema`` decorator for defining schema-level validators (:issue:`116`).\n- Add ``marshmallow.validates`` decorator for defining field validators as Schema methods (:issue:`116`). Thanks :user:`philtay`.\n- Performance improvements.\n- Defining ``__marshallable__`` on complex objects is no longer necessary.\n- Add ``fields.Constant``. Thanks :user:`kevinastone`.\n\nDeprecation/Removals:\n\n- Remove ``skip_missing`` class Meta option. By default, missing inputs are excluded from serialized output (:issue:`211`).\n- Remove optional ``context`` parameter that gets passed to methods for ``Method`` fields.\n- ``Schema.validator`` is deprecated. Use ``marshmallow.validates_schema`` instead.\n- ``utils.get_func_name`` is removed. Use ``utils.get_callable_name`` instead.\n\nBug fixes:\n\n- Fix serializing values from keyed tuple types (regression of :issue:`28`). Thanks :user:`makmanalp` for reporting.\n\nOther changes:\n\n- Remove unnecessary call to ``utils.get_value`` for ``Function`` and ``Method`` fields (:issue:`208`). Thanks :user:`jmcarp`.\n- Serializing a collection without passing ``many=True`` will not result in an error. Be very careful to pass the ``many`` argument when necessary.\n\nSupport:\n\n- Documentation: Update Flask and Peewee examples. Update Quickstart.\n\nChanges from 2.0.0b2:\n\n- ``Boolean`` field serializes ``None`` to ``None``, for consistency with other fields (:issue:`213`). Thanks :user:`cmanallen` for reporting.\n- Bug fix: ``load_only`` fields do not get validated during serialization.\n- Implicit passing of original, raw data to Schema validators is removed. Use ``@marshmallow.validates_schema(pass_original=True)`` instead.\n\n2.0.0b2 (2015-05-03)\n++++++++++++++++++++\n\nFeatures:\n\n- Add useful ``__repr__`` methods to validators (:issue:`204`). Thanks :user:`philtay`.\n- *Backwards-incompatible*: By default, ``NaN``, ``Infinity``, and ``-Infinity`` are invalid values for ``fields.Decimal``. Pass ``allow_nan=True`` to allow these values. Thanks :user:`philtay`.\n\nChanges from 2.0.0b1:\n\n- Fix serialization of ``None`` for ``Time``, ``TimeDelta``, and ``Date`` fields (a regression introduced in 2.0.0a1).\n\nIncludes bug fixes from 1.2.6.\n\n2.0.0b1 (2015-04-26)\n++++++++++++++++++++\n\nFeatures:\n\n- Errored fields will not appear in (de)serialized output dictionaries (:issue:`153`, :issue:`202`).\n- Instantiate ``OPTIONS_CLASS`` in ``SchemaMeta``. This makes ``Schema.opts`` available in metaclass methods. It also causes validation to occur earlier (upon ``Schema`` class declaration rather than instantiation).\n- Add ``SchemaMeta.get_declared_fields`` class method to support adding additional declared fields.\n\nDeprecation/Removals:\n\n- Remove ``allow_null`` parameter of ``fields.Nested`` (:issue:`203`).\n\nChanges from 2.0.0a1:\n\n- Fix serialization of `None` for ``fields.Email``.\n\n2.0.0a1 (2015-04-25)\n++++++++++++++++++++\n\nFeatures:\n\n- *Backwards-incompatible*: When ``many=True``, the errors dictionary returned by ``dump`` and ``load`` will be keyed on the indices of invalid items in the (de)serialized collection (:issue:`75`). Add ``index_errors=False`` on a Schema's ``class Meta`` options to disable this behavior.\n- *Backwards-incompatible*: By default, fields will raise a ValidationError if the input is ``None``. The ``allow_none`` parameter can override this behavior.\n- *Backwards-incompatible*: A ``Field's`` ``default`` parameter is only used if explicitly set and the field's value is missing in the input to `Schema.dump`. If not set, the key will not be present in the serialized output for missing values . This is the behavior for *all* fields. ``fields.Str`` no longer defaults to ``''``, ``fields.Int`` no longer defaults to ``0``, etc. (:issue:`199`). Thanks :user:`jmcarp` for the feedback.\n- In ``strict`` mode, a ``ValidationError`` is raised. Error messages are accessed via the ``ValidationError's`` ``messages`` attribute (:issue:`128`).\n- Add ``allow_none`` parameter to ``fields.Field``. If ``False`` (the default), validation fails when the field's value is ``None`` (:issue:`76`, :issue:`111`). If ``allow_none`` is ``True``, ``None`` is considered valid and will deserialize to ``None``.\n- Schema-level validators can store error messages for multiple fields (:issue:`118`). Thanks :user:`ksesong` for the suggestion.\n- Add ``pre_load``, ``post_load``, ``pre_dump``, and ``post_dump`` Schema method decorators for defining pre- and post- processing routines (:issue:`153`, :issue:`179`). Thanks :user:`davidism`, :user:`taion`, and :user:`jmcarp` for the suggestions and feedback. Thanks :user:`taion` for the implementation.\n- Error message for ``required`` validation is configurable. (:issue:`78`). Thanks :user:`svenstaro` for the suggestion. Thanks :user:`0xDCA` for the implementation.\n- Add ``load_from`` parameter to fields (:issue:`125`). Thanks :user:`hakjoon`.\n- Add ``load_only`` and ``dump_only`` parameters to fields (:issue:`61`, :issue:`87`). Thanks :user:`philtay`.\n- Add `missing` parameter to fields (:issue:`115`). Thanks :user:`philtay`.\n- Schema validators can take an optional ``raw_data`` argument which contains raw input data, incl. data not specified in the schema (:issue:`127`). Thanks :user:`ryanlowe0`.\n- Add ``validate.OneOf`` (:issue:`135`) and ``validate.ContainsOnly`` (:issue:`149`) validators. Thanks :user:`philtay`.\n- Error messages for validators can be interpolated with `{input}` and other values (depending on the validator).\n- ``fields.TimeDelta`` always serializes to an integer value in order to avoid rounding errors (:issue:`105`). Thanks :user:`philtay`.\n- Add ``include`` class Meta option to support field names which are Python keywords (:issue:`139`). Thanks :user:`nickretallack` for the suggestion.\n- ``exclude`` parameter is respected when used together with ``only`` parameter (:issue:`165`). Thanks :user:`lustdante` for the catch and patch.\n- ``fields.List`` works as expected with generators and sets (:issue:`185`). Thanks :user:`sergey-aganezov-jr`.\n\nDeprecation/Removals:\n\n- ``MarshallingError`` and ``UnmarshallingError`` error are deprecated in favor of a single ``ValidationError`` (:issue:`160`).\n- ``context`` argument passed to Method fields is deprecated. Use ``self.context`` instead (:issue:`184`).\n- Remove ``ForcedError``.\n- Remove support for generator functions that yield validators (:issue:`74`). Plain generators of validators are still supported.\n- The ``Select/Enum`` field is deprecated in favor of using ``validate.OneOf`` validator (:issue:`135`).\n- Remove legacy, pre-1.0 API (``Schema.data`` and ``Schema.errors`` properties) (:issue:`73`).\n- Remove ``null`` value.\n\nOther changes:\n\n- ``Marshaller``, ``Unmarshaller`` were moved to ``marshmallow.marshalling``. These should be considered private API (:issue:`129`).\n- Make ``allow_null=True`` the default for ``Nested`` fields. This will make ``None`` serialize to ``None`` rather than a dictionary with empty values (:issue:`132`). Thanks :user:`nickrellack` for the suggestion.\n\n1.2.6 (2015-05-03)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix validation error message for ``fields.Decimal``.\n- Allow error message for ``fields.Boolean`` to be customized with the ``error`` parameter (like other fields).\n\n1.2.5 (2015-04-25)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix validation of invalid types passed to a ``Nested`` field when ``many=True`` (:issue:`188`). Thanks :user:`juanrossi` for reporting.\n\nSupport:\n\n- Fix pep8 dev dependency for flake8. Thanks :user:`taion`.\n\n1.2.4 (2015-03-22)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix behavior of ``as_string`` on ``fields.Integer`` (:issue:`173`). Thanks :user:`taion` for the catch and patch.\n\nOther changes:\n\n- Remove dead code from ``fields.Field``. Thanks :user:`taion`.\n\nSupport:\n\n- Correction to ``_postprocess`` method in docs. Thanks again :user:`taion`.\n\n1.2.3 (2015-03-15)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix inheritance of ``ordered`` class Meta option (:issue:`162`). Thanks :user:`stephenfin` for reporting.\n\n1.2.2 (2015-02-23)\n++++++++++++++++++\n\nBug fixes:\n\n- Fix behavior of ``skip_missing`` and ``accessor`` options when ``many=True`` (:issue:`137`). Thanks :user:`3rdcycle`.\n- Fix bug that could cause an ``AttributeError`` when nesting schemas with schema-level validators (:issue:`144`). Thanks :user:`vovanbo` for reporting.\n\n1.2.1 (2015-01-11)\n++++++++++++++++++\n\nBug fixes:\n\n- A ``Schema's`` ``error_handler``--if defined--will execute if ``Schema.validate`` returns validation errors (:issue:`121`).\n- Deserializing `None` returns `None` rather than raising an ``AttributeError`` (:issue:`123`). Thanks :user:`RealSalmon` for the catch and patch.\n\n1.2.0 (2014-12-22)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``QuerySelect`` and ``QuerySelectList`` fields (:issue:`84`).\n- Convert validators in ``marshmallow.validate`` into class-based callables to make them easier to use when declaring fields (:issue:`85`).\n- Add ``Decimal`` field which is safe to use when dealing with precise numbers (:issue:`86`).\n\nThanks :user:`philtay` for these contributions.\n\nBug fixes:\n\n- ``Date`` fields correctly deserializes to a ``datetime.date`` object when ``python-dateutil`` is not installed (:issue:`79`). Thanks :user:`malexer` for the catch and patch.\n- Fix bug that raised an ``AttributeError`` when using a class-based validator.\n- Fix ``as_string`` behavior of Number fields when serializing to default value.\n- Deserializing ``None`` or the empty string with either a ``DateTime``, ``Date``, ``Time`` or ``TimeDelta`` results in the correct unmarshalling errors (:issue:`96`). Thanks :user:`svenstaro` for reporting and helping with this.\n- Fix error handling when deserializing invalid UUIDs (:issue:`106`). Thanks :user:`vesauimonen` for the catch and patch.\n- ``Schema.loads`` correctly defaults to use the value of ``self.many`` rather than defaulting to ``False`` (:issue:`108`). Thanks :user:`davidism` for the catch and patch.\n- Validators, data handlers, and preprocessors are no longer shared between schema subclasses (:issue:`88`). Thanks :user:`amikholap` for reporting.\n- Fix error handling when passing a ``dict`` or ``list`` to a ``ValidationError`` (:issue:`110`). Thanks :user:`ksesong` for reporting.\n\nDeprecation:\n\n- The validator functions in the ``validate`` module are deprecated in favor of the class-based validators (:issue:`85`).\n- The ``Arbitrary``, ``Price``, and ``Fixed`` fields are deprecated in favor of the ``Decimal`` field (:issue:`86`).\n\nSupport:\n\n- Update docs theme.\n- Update contributing docs (:issue:`77`).\n- Fix namespacing example in \"Extending Schema\" docs. Thanks :user:`Ch00k`.\n- Exclude virtualenv directories from syntax checking (:issue:`99`). Thanks :user:`svenstaro`.\n\n\n1.1.0 (2014-12-02)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``Schema.validate`` method which validates input data against a schema. Similar to ``Schema.load``, but does not call ``make_object`` and only returns the errors dictionary.\n- Add several validation functions to the ``validate`` module. Thanks :user:`philtay`.\n- Store field name and instance on exceptions raised in ``strict`` mode.\n\nBug fixes:\n\n- Fix serializing dictionaries when field names are methods of ``dict`` (e.g. ``\"items\"``). Thanks :user:`rozenm` for reporting.\n- If a Nested field is passed ``many=True``, ``None`` serializes to an empty list. Thanks :user:`nickretallack` for reporting.\n- Fix behavior of ``many`` argument passed to ``dump`` and ``load``. Thanks :user:`svenstaro` for reporting and helping with this.\n- Fix ``skip_missing`` behavior for ``String`` and ``List`` fields. Thanks :user:`malexer` for reporting.\n- Fix compatibility with python-dateutil 2.3.\n- More consistent error messages across ``DateTime``, ``TimeDelta``, ``Date``, and ``Time`` fields.\n\nSupport:\n\n- Update Flask and Peewee examples.\n\n1.0.1 (2014-11-18)\n++++++++++++++++++\n\nHotfix release.\n\n- Ensure that errors dictionary is correctly cleared on each call to ``Schema.dump`` and ``Schema.load``.\n\n1.0.0 (2014-11-16)\n++++++++++++++++++\n\nAdds new features, speed improvements, better error handling, and updated documentation.\n\n- Add ``skip_missing`` ``class Meta`` option.\n- A field's ``default`` may be a callable.\n- Allow accessor function to be configured via the ``Schema.accessor`` decorator or the ``__accessor__`` class member.\n- ``URL`` and ``Email`` fields are validated upon serialization.\n- ``dump`` and ``load`` can receive the ``many`` argument.\n- Move a number of utility functions from fields.py to utils.py.\n- More useful ``repr`` for ``Field`` classes.\n- If a field's default is ``fields.missing`` and its serialized value is ``None``, it will not be included in the final serialized result.\n- Schema.dumps no longer coerces its result to a binary string on Python 3.\n- *Backwards-incompatible*: Schema output is no longer an ``OrderedDict`` by default. If you want ordered field output, you must explicitly set the ``ordered`` option to ``True``.\n- *Backwards-incompatible*: ``error`` parameter of the ``Field`` constructor is deprecated. Raise a ``ValidationError`` instead.\n- Expanded test coverage.\n- Updated docs.\n\n1.0.0-a (2014-10-19)\n++++++++++++++++++++\n\nMajor reworking and simplification of the public API, centered around support for deserialization, improved validation, and a less stateful ``Schema`` class.\n\n* Rename ``Serializer`` to ``Schema``.\n* Support for deserialization.\n* Use the ``Schema.dump`` and ``Schema.load`` methods for serializing and deserializing, respectively.\n* *Backwards-incompatible*: Remove ``Serializer.json`` and ``Serializer.to_json``. Use ``Schema.dumps`` instead.\n* Reworked fields interface.\n* *Backwards-incompatible*: ``Field`` classes implement ``_serialize`` and ``_deserialize`` methods. ``serialize`` and ``deserialize`` comprise the public API for a ``Field``. ``Field.format`` and ``Field.output`` have been removed.\n* Add ``exceptions.ForcedError`` which allows errors to be raised during serialization (instead of storing errors in the ``errors`` dict).\n* *Backwards-incompatible*: ``DateTime`` field serializes to ISO8601 format by default (instead of RFC822).\n* *Backwards-incompatible*: Remove ``Serializer.factory`` method. It is no longer necessary with the ``dump`` method.\n* *Backwards-incompatible*: Allow nesting a serializer within itself recursively. Use ``exclude`` or ``only`` to prevent infinite recursion.\n* *Backwards-incompatible*: Multiple errors can be stored for a single field. The errors dictionary returned by ``load`` and ``dump`` have lists of error messages keyed by field name.\n* Remove ``validated`` decorator. Validation occurs within ``Field`` methods.\n* ``Function`` field raises a ``ValueError`` if an uncallable object is passed to its constructor.\n* ``Nested`` fields inherit context from their parent.\n* Add ``Schema.preprocessor`` and ``Schema.validator`` decorators for registering preprocessing and schema-level validation functions respectively.\n* Custom error messages can be specified by raising a ``ValidationError`` within a validation function.\n* Extra keyword arguments passed to a Field are stored as metadata.\n* Fix ordering of field output.\n* Fix behavior of the ``required`` parameter on ``Nested`` fields.\n* Fix serializing keyed tuple types (e.g. ``namedtuple``) with ``class Meta`` options.\n* Fix default value for ``Fixed`` and ``Price`` fields.\n* Fix serialization of binary strings.\n* ``Schemas`` can inherit fields from non-``Schema`` base classes (e.g. mixins). Also, fields are inherited according to the MRO (rather than recursing over base classes). Thanks :user:`jmcarp`.\n* Add ``Str``, ``Bool``, and ``Int`` field class aliases.\n\n0.7.0 (2014-06-22)\n++++++++++++++++++\n\n* Add ``Serializer.error_handler`` decorator that registers a custom error handler.\n* Add ``Serializer.data_handler`` decorator that registers data post-processing callbacks.\n* *Backwards-incompatible*: ``process_data`` method is deprecated. Use the ``data_handler`` decorator instead.\n* Fix bug that raised error when passing ``extra`` data together with ``many=True``. Thanks :user:`buttsicles` for reporting.\n* If ``required=True`` validation is violated for a given ``Field``, it will raise an error message that is different from the message specified by the ``error`` argument. Thanks :user:`asteinlein`.\n* More generic error message raised when required field is missing.\n* ``validated`` decorator should only wrap a ``Field`` class's ``output`` method.\n\n0.6.0 (2014-06-03)\n++++++++++++++++++\n\n* Fix bug in serializing keyed tuple types, e.g. ``namedtuple`` and ``KeyedTuple``.\n* Nested field can load a serializer by its class name as a string. This makes it easier to implement 2-way nesting.\n* Make ``Serializer.data`` override-able.\n\n0.5.5 (2014-05-02)\n++++++++++++++++++\n\n* Add ``Serializer.factory`` for creating a factory function that returns a Serializer instance.\n* ``MarshallingError`` stores its underlying exception as an instance variable. This is useful for inspecting errors.\n* ``fields.Select`` is aliased to ``fields.Enum``.\n* Add ``fields.__all__`` and ``marshmallow.__all__`` so that the modules can be more easily extended.\n* Expose ``Serializer.OPTIONS_CLASS`` as a class variable so that options defaults can be overridden.\n* Add ``Serializer.process_data`` hook that allows subclasses to manipulate the final output data.\n\n0.5.4 (2014-04-17)\n++++++++++++++++++\n\n* Add ``json_module`` class Meta option.\n* Add ``required`` option to fields . Thanks :user:`DeaconDesperado`.\n* Tested on Python 3.4 and PyPy.\n\n0.5.3 (2014-03-02)\n++++++++++++++++++\n\n* Fix ``Integer`` field default. It is now ``0`` instead of ``0.0``. Thanks :user:`kalasjocke`.\n* Add ``context`` param to ``Serializer``. Allows accessing arbitrary objects in ``Function`` and ``Method`` fields.\n* ``Function`` and ``Method`` fields raise ``MarshallingError`` if their argument is uncallable.\n\n\n0.5.2 (2014-02-10)\n++++++++++++++++++\n\n* Enable custom field validation via the ``validate`` parameter.\n* Add ``utils.from_rfc`` for parsing RFC datestring to Python datetime object.\n\n0.5.1 (2014-02-02)\n++++++++++++++++++\n\n* Avoid unnecessary attribute access in ``utils.to_marshallable_type`` for improved performance.\n* Fix RFC822 formatting for localized datetimes.\n\n0.5.0 (2013-12-29)\n++++++++++++++++++\n\n* Can customize validation error messages by passing the ``error`` parameter to a field.\n* *Backwards-incompatible*: Rename ``fields.NumberField`` -> ``fields.Number``.\n* Add ``fields.Select``. Thanks :user:`ecarreras`.\n* Support nesting a Serializer within itself by passing ``\"self\"`` into ``fields.Nested`` (only up to depth=1).\n* *Backwards-incompatible*: No implicit serializing of collections. Must set ``many=True`` if serializing to a list. This ensures that marshmallow handles singular objects correctly, even if they are iterable.\n* If Nested field ``only`` parameter is a field name, only return a single value for the nested object (instead of a dict) or a flat list of values.\n* Improved performance and stability.\n\n0.4.1 (2013-12-01)\n++++++++++++++++++\n\n* An object's ``__marshallable__`` method, if defined, takes precedence over ``__getitem__``.\n* Generator expressions can be passed to a serializer.\n* Better support for serializing list-like collections (e.g. ORM querysets).\n* Other minor bugfixes.\n\n0.4.0 (2013-11-24)\n++++++++++++++++++\n\n* Add ``additional`` `class Meta` option.\n* Add ``dateformat`` `class Meta` option.\n* Support for serializing UUID, date, time, and timedelta objects.\n* Remove ``Serializer.to_data`` method. Just use ``Serialize.data`` property.\n* String field defaults to empty string instead of ``None``.\n* *Backwards-incompatible*: ``isoformat`` and ``rfcformat`` functions moved to utils.py.\n* *Backwards-incompatible*: Validation functions moved to validate.py.\n* *Backwards-incompatible*: Remove types.py.\n* Reorder parameters to ``DateTime`` field (first parameter is dateformat).\n* Ensure that ``to_json`` returns bytestrings.\n* Fix bug with including an object property in ``fields`` Meta option.\n* Fix bug with passing ``None`` to a serializer.\n\n0.3.1 (2013-11-16)\n++++++++++++++++++\n\n* Fix bug with serializing dictionaries.\n* Fix error raised when serializing empty list.\n* Add ``only`` and ``exclude`` parameters to Serializer constructor.\n* Add ``strict`` parameter and option: causes Serializer to raise an error if invalid data are passed in, rather than storing errors.\n* Updated Flask + SQLA example in docs.\n\n0.3.0 (2013-11-14)\n++++++++++++++++++\n\n* Declaring Serializers just got easier. The ``class Meta`` paradigm allows you to specify fields more concisely. Can specify ``fields`` and ``exclude`` options.\n* Allow date formats to be changed by passing ``format`` parameter to ``DateTime`` field constructor. Can either be ``\"rfc\"`` (default), ``\"iso\"``, or a date format string.\n* More useful error message when declaring fields as classes (instead of an instance, which is the correct usage).\n* Rename ``MarshallingException`` -> ``MarshallingError``.\n* Rename ``marshmallow.core`` -> ``marshmallow.serializer``.\n\n0.2.1 (2013-11-12)\n++++++++++++++++++\n\n* Allow prefixing field names.\n* Fix storing errors on Nested Serializers.\n* Python 2.6 support.\n\n0.2.0 (2013-11-11)\n++++++++++++++++++\n\n* Field-level validation.\n* Add ``fields.Method``.\n* Add ``fields.Function``.\n* Allow binding of extra data to a serialized object by passing the ``extra`` param when initializing a ``Serializer``.\n* Add ``relative`` parameter to ``fields.Url`` that allows for relative URLs.\n\n0.1.0 (2013-11-10)\n++++++++++++++++++\n\n* First release.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1044921875,
          "content": "For the marshmallow code of conduct, see https://marshmallow.readthedocs.io/en/latest/code_of_conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 5.19921875,
          "content": "Contributing guidelines\n=======================\n\nSo you're interested in contributing to marshmallow or `one of our associated\nprojects <https://github.com/marshmallow-code>`__? That's awesome! We\nwelcome contributions from anyone willing to work in good faith with\nother contributors and the community (see also our\n:doc:`code_of_conduct`).\n\nSecurity contact information\n----------------------------\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\nQuestions, feature requests, bug reports, and feedback…\n-------------------------------------------------------\n\n…should all be reported on the `Github Issue Tracker`_ .\n\n.. _`Github Issue Tracker`: https://github.com/marshmallow-code/marshmallow/issues?state=open\n\nWays to contribute\n------------------\n\n- Comment on some of marshmallow's `open issues <https://github.com/marshmallow-code/marshmallow/issues>`_ (especially those `labeled \"feedback welcome\" <https://github.com/marshmallow-code/marshmallow/issues?q=is%3Aopen+is%3Aissue+label%3A%22feedback+welcome%22>`_). Share a solution or workaround. Make a suggestion for how a feature can be made better. Opinions are welcome!\n- Improve `the docs <https://marshmallow.readthedocs.io>`_.\n  For straightforward edits,\n  click the ReadTheDocs menu button in the bottom-right corner of the page and click \"Edit\".\n  See the :ref:`Documentation <contributing_documentation>` section of this page if you want to build the docs locally.\n- If you think you've found a bug, `open an issue <https://github.com/marshmallow-code/marshmallow/issues>`_.\n- Contribute an :ref:`example usage <contributing_examples>` of marshmallow.\n- Send a PR for an open issue (especially one `labeled \"help wanted\" <https://github.com/marshmallow-code/marshmallow/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22>`_). The next section details how to contribute code.\n\n\nContributing code\n-----------------\n\nSetting up for local development\n++++++++++++++++++++++++++++++++\n\n1. Fork marshmallow_ on Github.\n\n::\n\n    $ git clone https://github.com/marshmallow-code/marshmallow.git\n    $ cd marshmallow\n\n2. Install development requirements. **It is highly recommended that you use a virtualenv.**\n   Use the following command to install an editable version of\n   marshmallow along with its development requirements.\n\n::\n\n    # After activating your virtualenv\n    $ pip install -e '.[dev]'\n\n3. Install the pre-commit hooks, which will format and lint your git staged files.\n\n::\n\n    # The pre-commit CLI was installed above\n    $ pre-commit install --allow-missing-config\n\nGit branch structure\n++++++++++++++++++++\n\nmarshmallow abides by the following branching model:\n\n``dev``\n    Current development branch. **New features should branch off here**.\n\n``X.Y-line``\n    Maintenance branch for release ``X.Y``. **Bug fixes should be sent to the most recent release branch.** A maintainer will forward-port the fix to ``dev``. Note: exceptions may be made for bug fixes that introduce large code changes.\n\n**Always make a new branch for your work**, no matter how small. Also, **do not put unrelated changes in the same branch or pull request**. This makes it more difficult to merge your changes.\n\nPull requests\n++++++++++++++\n\n1. Create a new local branch.\n\n::\n\n    # For a new feature\n    $ git checkout -b name-of-feature dev\n\n    # For a bugfix\n    $ git checkout -b fix-something 2.x-line\n\n2. Commit your changes. Write `good commit messages <https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`_.\n\n::\n\n    $ git commit -m \"Detailed commit message\"\n    $ git push origin name-of-feature\n\n3. Before submitting a pull request, check the following:\n\n- If the pull request adds functionality, it is tested and the docs are updated.\n- You've added yourself to ``AUTHORS.rst``.\n\n4. Submit a pull request to ``marshmallow-code:dev`` or the appropriate maintenance branch. The `CI <https://dev.azure.com/sloria1/sloria/_build/latest?definitionId=5&branchName=dev>`_ build must be passing before your pull request is merged.\n\nRunning tests\n+++++++++++++\n\nTo run all tests: ::\n\n    $ pytest\n\nTo run formatting and syntax checks: ::\n\n    $ tox -e lint\n\n(Optional) To run tests in all supported Python versions in their own virtual environments (must have each interpreter installed): ::\n\n    $ tox\n\n.. _contributing_documentation:\n\nDocumentation\n+++++++++++++\n\nContributions to the documentation are welcome. Documentation is written in `reStructuredText`_ (rST). A quick rST reference can be found `here <https://docutils.sourceforge.io/docs/user/rst/quickref.html>`_. Builds are powered by Sphinx_.\n\nTo build the docs in \"watch\" mode: ::\n\n   $ tox -e watch-docs\n\nChanges in the `docs/` directory will automatically trigger a rebuild.\n\n\n.. _contributing_examples:\n\nContributing examples\n+++++++++++++++++++++\n\nHave a usage example you'd like to share? A custom `Field` that others might find useful? Feel free to add it to the `examples <https://github.com/marshmallow-code/marshmallow/tree/dev/examples>`_ directory and send a pull request.\n\n\n.. _Sphinx: https://www.sphinx-doc.org/\n.. _`reStructuredText`: https://docutils.sourceforge.io/rst.html\n.. _marshmallow: https://github.com/marshmallow-code/marshmallow\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "Copyright Steven Loria and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.5927734375,
          "content": "marshmallow includes code adapted from Django.\n\nDjango License\n==============\n\nCopyright (c) Django Software Foundation and individual contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of Django nor the names of its contributors may be used\n       to endorse or promote products derived from this software without\n       specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.173828125,
          "content": "********************************************\nmarshmallow: simplified object serialization\n********************************************\n\n|pypi| |build-status| |pre-commit| |docs|\n\n.. |pypi| image:: https://badgen.net/pypi/v/marshmallow\n    :target: https://pypi.org/project/marshmallow/\n    :alt: Latest version\n\n.. |build-status| image:: https://github.com/marshmallow-code/marshmallow/actions/workflows/build-release.yml/badge.svg\n    :target: https://github.com/marshmallow-code/marshmallow/actions/workflows/build-release.yml\n    :alt: Build status\n\n.. |pre-commit| image:: https://results.pre-commit.ci/badge/github/marshmallow-code/marshmallow/dev.svg\n   :target: https://results.pre-commit.ci/latest/github/marshmallow-code/marshmallow/dev\n   :alt: pre-commit.ci status\n\n.. |docs| image:: https://readthedocs.org/projects/marshmallow/badge/\n   :target: https://marshmallow.readthedocs.io/\n   :alt: Documentation\n\n**marshmallow** is an ORM/ODM/framework-agnostic library for converting complex datatypes, such as objects, to and from native Python datatypes.\n\n.. code-block:: python\n\n    from datetime import date\n    from pprint import pprint\n\n    from marshmallow import Schema, fields\n\n\n    class ArtistSchema(Schema):\n        name = fields.Str()\n\n\n    class AlbumSchema(Schema):\n        title = fields.Str()\n        release_date = fields.Date()\n        artist = fields.Nested(ArtistSchema())\n\n\n    bowie = dict(name=\"David Bowie\")\n    album = dict(artist=bowie, title=\"Hunky Dory\", release_date=date(1971, 12, 17))\n\n    schema = AlbumSchema()\n    result = schema.dump(album)\n    pprint(result, indent=2)\n    # { 'artist': {'name': 'David Bowie'},\n    #   'release_date': '1971-12-17',\n    #   'title': 'Hunky Dory'}\n\n\nIn short, marshmallow schemas can be used to:\n\n- **Validate** input data.\n- **Deserialize** input data to app-level objects.\n- **Serialize** app-level objects to primitive Python types. The serialized objects can then be rendered to standard formats such as JSON for use in an HTTP API.\n\nGet It Now\n==========\n\n::\n\n    $ pip install -U marshmallow\n\nDocumentation\n=============\n\nFull documentation is available at https://marshmallow.readthedocs.io/ .\n\nEcosystem\n=========\n\nA list of marshmallow-related libraries can be found at the GitHub wiki here:\n\nhttps://github.com/marshmallow-code/marshmallow/wiki/Ecosystem\n\nCredits\n=======\n\nContributors\n------------\n\nThis project exists thanks to all the people who contribute.\n\n**You're highly encouraged to participate in marshmallow's development.**\nCheck out the `Contributing Guidelines <https://marshmallow.readthedocs.io/en/latest/contributing.html>`_ to see how you can help.\n\nThank you to all who have already contributed to marshmallow!\n\n.. image:: https://opencollective.com/marshmallow/contributors.svg?width=890&button=false\n    :target: https://marshmallow.readthedocs.io/en/latest/authors.html\n    :alt: Contributors\n\nBackers\n-------\n\nIf you find marshmallow useful, please consider supporting the team with\na donation. Your donation helps move marshmallow forward.\n\nThank you to all our backers! [`Become a backer`_]\n\n.. _`Become a backer`: https://opencollective.com/marshmallow#backer\n\n.. image:: https://opencollective.com/marshmallow/backers.svg?width=890\n    :target: https://opencollective.com/marshmallow#backers\n    :alt: Backers\n\nSponsors\n--------\n\nmarshmallow is sponsored by `Route4Me <https://route4me.com>`_.\n\n.. image:: https://github.com/user-attachments/assets/018c2e23-032e-4a11-98da-8b6dc25b9054\n    :target: https://route4me.com\n    :alt: Routing Planner\n\nSupport this project by becoming a sponsor (or ask your company to support this project by becoming a sponsor).\nYour logo will be displayed here with a link to your website. [`Become a sponsor`_]\n\n.. _`Become a sponsor`: https://opencollective.com/marshmallow#sponsor\n\nProfessional Support\n====================\n\nProfessionally-supported marshmallow is now available through the\n`Tidelift Subscription <https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&utm_medium=readme>`_.\n\nTidelift gives software development teams a single source for purchasing and maintaining their software,\nwith professional-grade assurances from the experts who know it best,\nwhile seamlessly integrating with existing tools. [`Get professional support`_]\n\n.. _`Get professional support`: https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=marshmallow&utm_medium=referral&utm_campaign=github\n\n.. image:: https://user-images.githubusercontent.com/2379650/45126032-50b69880-b13f-11e8-9c2c-abd16c433495.png\n    :target: https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&utm_medium=readme\n    :alt: Get supported marshmallow with Tidelift\n\n\nProject Links\n=============\n\n- Docs: https://marshmallow.readthedocs.io/\n- Changelog: https://marshmallow.readthedocs.io/en/latest/changelog.html\n- Contributing Guidelines: https://marshmallow.readthedocs.io/en/latest/contributing.html\n- PyPI: https://pypi.org/project/marshmallow/\n- Issues: https://github.com/marshmallow-code/marshmallow/issues\n- Donate: https://opencollective.com/marshmallow\n\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE <https://github.com/marshmallow-code/marshmallow/blob/dev/LICENSE>`_ file for more details.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.2685546875,
          "content": "# Releasing\n\n1. Bump version in `pyproject.toml` and update the changelog\n   with today's date.\n2. Commit: `git commit -m \"Bump version and update changelog\"`\n3. Tag the commit: `git tag x.y.z`\n4. Push: `git push --tags origin dev`. CI will take care of the\n   PyPI release.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1875,
          "content": "# Security Contact Information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "performance",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.517578125,
          "content": "[project]\nname = \"marshmallow\"\nversion = \"4.0.0.dev0\"\ndescription = \"A lightweight library for converting complex datatypes to and from native Python datatypes.\"\nreadme = \"README.rst\"\nlicense = { file = \"LICENSE\" }\nauthors = [{ name = \"Steven Loria\", email = \"sloria1@gmail.com\" }]\nmaintainers = [\n  { name = \"Steven Loria\", email = \"sloria1@gmail.com\" },\n  { name = \"Jérôme Lafréchoux\", email = \"jerome@jolimont.fr\" },\n  { name = \"Jared Deckard\", email = \"jared@shademaps.com\" },\n]\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n]\nrequires-python = \">=3.9\"\ndependencies = [\n  \"backports-datetime-fromisoformat; python_version < '3.11'\",\n  \"typing-extensions; python_version < '3.11'\",\n]\n\n[project.urls]\nChangelog = \"https://marshmallow.readthedocs.io/en/latest/changelog.html\"\nFunding = \"https://opencollective.com/marshmallow\"\nIssues = \"https://github.com/marshmallow-code/marshmallow/issues\"\nSource = \"https://github.com/marshmallow-code/marshmallow\"\nTidelift = \"https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&utm_medium=pypi\"\n\n[project.optional-dependencies]\ndocs = [\n  \"sphinx==8.1.3\",\n  \"sphinx-issues==5.0.0\",\n  \"alabaster==1.0.0\",\n  \"autodocsumm==0.2.14\",\n]\ntests = [\"pytest\", \"simplejson\"]\ndev = [\"marshmallow[tests]\", \"tox\", \"pre-commit>=3.5,<5.0\"]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.sdist]\ninclude = [\n  \"docs/\",\n  \"tests/\",\n  \"CHANGELOG.rst\",\n  \"CONTRIBUTING.rst\",\n  \"SECURITY.md\",\n  \"NOTICE\",\n  \"tox.ini\",\n]\nexclude = [\"docs/_build/\"]\n\n[tool.ruff]\nsrc = [\"src\"]\nfix = true\nshow-fixes = true\noutput-format = \"full\"\n\n[tool.ruff.format]\ndocstring-code-format = true\n\n[tool.ruff.lint]\nignore = [\"E203\", \"E266\", \"E501\", \"E731\"]\nselect = [\n  \"B\",  # flake8-bugbear\n  \"E\",  # pycodestyle error\n  \"F\",  # pyflakes\n  \"I\",  # isort\n  \"UP\", # pyupgrade\n  \"W\",  # pycodestyle warning\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"tests/*\" = [\"E721\"]\n\n[tool.mypy]\nignore_missing_imports = true\nwarn_unreachable = true\nwarn_unused_ignores = true\nwarn_redundant_casts = true\nno_implicit_optional = true\n\n[tool.pytest.ini_options]\nnorecursedirs = \".git .ropeproject .tox docs env venv tests/mypy_test_cases\"\naddopts = \"-v --tb=short\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.8076171875,
          "content": "[tox]\nenvlist = lint,mypy-test,py{39,310,311,312,313},docs\n\n[testenv]\nextras = tests\ncommands = pytest {posargs}\n\n[testenv:lint]\ndeps = pre-commit~=3.5\nskip_install = true\ncommands = pre-commit run --all-files\n\n[testenv:mypy-test]\ndeps = mypy\ncommands = mypy --show-error-codes --warn-unused-ignores tests/mypy_test_cases/\n\n[testenv:docs]\nextras = docs\ncommands = sphinx-build docs/ docs/_build {posargs}\n\n; Below tasks are for development only (not run in CI)\n\n[testenv:watch-docs]\ndeps = sphinx-autobuild\nextras = docs\ncommands = sphinx-autobuild --open-browser docs/ docs/_build {posargs} --watch src/marshmallow --delay 2\n\n[testenv:watch-readme]\ndeps = restview\nskip_install = true\ncommands = restview README.rst\n\n[testenv:benchmark]\nusedevelop = true\ncommands = python performance/benchmark.py --iterations=100 --repeat=3\n"
        }
      ]
    }
  ]
}