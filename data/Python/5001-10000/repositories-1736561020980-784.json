{
  "metadata": {
    "timestamp": 1736561020980,
    "page": 784,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Netflix/dispatch",
      "stars": 5253,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.4423828125,
          "content": "[run]\nomit =\n    */__init__.py\n    */views.py\n    */scheduled.py\n    src/dispatch/rate_limiter.py\n    src/dispatch/plugins/dispatch_test/*\n    src/dispatch/api.py\n    src/dispatch/extensions.py\n    src/dispatch/scheduler.py\n\n[report]\nomit =\n    */__init__.py\n    */views.py\n    */scheduled.py\n    src/dispatch/rate_limiter.py\n    src/dispatch/plugins/dispatch_test/*\n    src/dispatch/api.py\n    src/dispatch/extensions.py\n    src/dispatch/scheduler.py\n\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.349609375,
          "content": "__pycache__\n.git\n.dockerignore\n.gitignore\n\n.cache/\n.coverage\n.storybook-out/\n.DS_Store\n.venv\n*.egg-info\n*.pyc\n*.log\n*.egg\n*.db\n*.pid\nMANIFEST\ntest.conf\npip-log.txt\npackage.json\n/.artifacts\n/coverage/\n/cover\n/build\n/env\n/tmp\nnode_modules\n/wheelhouse\n/test_cli/\n.idea/\n*.iml\n.pytest_cache/\n.vscode/tags\ncoverage.xml\njunit.xml\n*.codestyle.xml\npackage-lock.json\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.7041015625,
          "content": "root=true\n\n[*]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=false\nindent_style=space\nindent_size=2\ntrim_trailing_whitespace=true\n\n[*.py]\nindent_size=4\n\n[{*.ng,*.sht,*.html,*.shtm,*.shtml,*.htm}]\nindent_style=space\nindent_size=2\n\n[{*.jhm,*.xslt,*.xul,*.rng,*.xsl,*.xsd,*.ant,*.tld,*.fxml,*.jrxml,*.xml,*.jnlp,*.wsdl}]\nindent_style=space\nindent_size=2\n\n[{.babelrc,.stylelintrc,jest.config,.eslintrc,.prettierrc,*.json,*.jsb3,*.jsb2,*.bowerrc}]\nindent_style=space\nindent_size=2\n\n[*.svg]\nindent_style=space\nindent_size=2\n\n[*.js.map]\nindent_style=space\nindent_size=2\n\n[*.less]\nindent_style=space\nindent_size=2\n\n[*.vue]\nindent_style=space\nindent_size=2\n\n[{.analysis_options,*.yml,*.yaml}]\nindent_style=space\nindent_size=2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.390625,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n#*.c text\n\n# Declare files that will always have CRLF line endings on checkout.\n#*.sln text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n"
        },
        {
          "name": ".gitbook.yaml",
          "type": "blob",
          "size": 0.013671875,
          "content": "root: ./docs/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.3349609375,
          "content": "# File created using '.gitignore Generator' for Visual Studio Code: https://bit.ly/vscode-gig\n\n# Created by https://www.gitignore.io/api/macos,visualstudiocode,python\n# Edit at https://www.gitignore.io/?templates=macos,visualstudiocode,python\n\n### macOS ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\n.cache\n*.cover\n.coverage\n.coverage.*\ncoverage.xml\nhtmlcov/\n.hypothesis/\nnosetests.xml\n.nox/\n.pytest_cache/\n.tox/\nsrc/dispatch/static/test/unit/coverage/\nsrc/dispatch/static/test/e2e/reports/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Scrapy stuff:\n.scrapy\n\n# PyCharm\n.idea\n\n# Sphinx documentation\ndocs/.docusaurus\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that donâ€™t work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n!data/.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n.vscode/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n\n### Vuejs ###\n# Recommended template: Node.gitignore\n\nassets.json\nnode_modules*\nnode_modules/\nnpm-debug.log*\nrelease\nselenium-debug.log\nyarn-debug.log*\nyarn-error.log*\nyarn.lock\n\n# End of https://www.gitignore.io/api/macos,visualstudiocode,python\n\n# Custom rules (everything added below won't be overridden by 'Generate .gitignore File' if you use 'Update' option)\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Persistent undo\n[._]*.un~\n\n# Ignore exuberant ctags, and other tags files\ntags\n\n# exclude docker env files\ndocker/.env\n\n# exclude data dump files\n*.dump\n\n.gitconfig\n\n# Playwright\n/test-results/\n/playwright-report/\n/playwright/.cache/\n/tests/static/e2e/artifacts/*\nsrc/dispatch/static/dispatch/tests/__snapshots__\nsrc/dispatch/static/dispatch/coverage\n\n# Typescript\ncomponents.d.ts\n\n# Pyright\npyrightconfig.json\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0078125,
          "content": "20.18.0\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.08203125,
          "content": "# Quick Start:\n#\n# pip install pre-commit\n# pre-commit install && pre-commit install -t pre-push\n# pre-commit run --all-files\n#\n# To Skip Checks:\n#\n# git commit --no-verify\nfail_fast: false\n\ndefault_language_version:\n  python: python3.11.2\n\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # ruff version.\n    rev: v0.7.0\n    hooks:\n      # Run the linter.\n      #\n      # When running with --fix, Ruff's lint hook should be placed before Ruff's formatter hook,\n      # and before Black, isort, and other formatting tools, as Ruff's fix behavior can output code changes that require reformatting.\n      - id: ruff\n        args: [--fix]\n      # Run the formatter.\n      - id: ruff-format\n\n  # Typos\n  - repo: https://github.com/crate-ci/typos\n    rev: v1.26.1\n    hooks:\n      - id: typos\n        exclude: ^(data/dispatch-sample-data.dump|src/dispatch/static/dispatch/src/|src/dispatch/database/revisions/)\n\n  # Pytest\n  - repo: local\n    hooks:\n      - id: tests\n        name: run tests\n        entry: pytest -v tests/\n        language: system\n        types: [python]\n        stages: [push]\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.1220703125,
          "content": "{\n  \"endOfLine\": \"auto\",\n  \"printWidth\": 100,\n  \"semi\": false,\n  \"singleQuote\": false,\n  \"tabWidth\": 2,\n  \"useTabs\": false\n}\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.0166015625,
          "content": "docker/Dockerfile"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0771484375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2020 Netflix, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1279296875,
          "content": "include setup.py README.md MANIFEST.in LICENSE AUTHORS\nrecursive-include ./ requirements*.txt\ngraft src/dispatch\nglobal-exclude *~\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3828125,
          "content": "# About\n\n### What's Dispatch?\n\nPut simply, Dispatch is:\n\n> All of the ad-hoc things youâ€™re doing to manage incidents today, done for you, and a bunch of other things you should've been doing, but have not had the time!\n\nDispatch helps us effectively manage security incidents by deeply integrating with existing tools used throughout an organization \\(Slack, GSuite, Jira, etc.,\\) Dispatch is able to leverage the existing familiarity of these tools to provide orchestration instead of introducing another tool.\n\nThis means you can let Dispatch focus on creating resources, assembling participants, sending out notifications, tracking tasks, and assisting with post-incident reviews; allowing you to focus on actually fixing the issue!\n\n![](https://github.com/Netflix/dispatch/raw/main/docs/images/screenshots/thumb-1.png) ![](https://github.com/Netflix/dispatch/raw/main/docs/images/screenshots/thumb-2.png) ![](https://github.com/Netflix/dispatch/raw/main/docs/images/screenshots/thumb-3.png) ![](https://github.com/Netflix/dispatch/raw/main/docs/images/screenshots/thumb-4.png)\n\n## Project resources\n\n- [Dispatch Blog Post](https://medium.com/@NetflixTechBlog/introducing-dispatch-da4b8a2a8072)\n- [Source Code](https://github.com/netflix/dispatch)\n- [Docs](https://netflix.github.io/dispatch/)\n- [Issue tracker](https://github.com/netflix/dispatch/issues)\n- [Docker](https://github.com/Netflix/dispatch-docker)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "playwright.config.ts",
          "type": "blob",
          "size": 1.98828125,
          "content": "import type { PlaywrightTestConfig } from \"@playwright/test\"\nimport { devices } from \"@playwright/test\"\n\n/**\n * @see https://playwright.dev/docs/test-configuration\n */\nconst config: PlaywrightTestConfig = {\n  testDir: \"./tests/static/e2e\",\n  outputDir: \"./tests/static/e2e/artifacts/test-failures\",\n  use: {\n    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */\n    actionTimeout: 0,\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: \"http://localhost:8080/\",\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: \"on\",\n    video: \"on\",\n    screenshot: \"on\",\n  },\n  /* Maximum time one test can run for. */\n  timeout: 200 * 1000,\n  expect: {\n    /**\n     * Maximum time expect() should wait for the condition to be met.\n     * For example in `await expect(locator).toHaveText();`\n     */\n    timeout: 20000,\n  },\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: \"html\",\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: \"chromium\",\n      use: {\n        ...devices[\"Desktop Chrome\"],\n      },\n    },\n\n    {\n      name: \"firefox\",\n      use: {\n        ...devices[\"Desktop Firefox\"],\n      },\n    },\n\n    {\n      name: \"webkit\",\n      use: {\n        ...devices[\"Desktop Safari\"],\n      },\n    },\n  ],\n  /* Folder for test artifacts such as screenshots, videos, traces, etc. */\n  // outputDir: 'test-results/',\n\n  /* Run your local dev server before starting the tests */\n  webServer: {\n    command: \"dispatch server develop\",\n    url: \"http://localhost:8080/\",\n    reuseExistingServer: !process.env.CI,\n  },\n}\n\nexport default config\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.3271484375,
          "content": "[tool.black]\nline-length = 100\ntarget_version = ['py311']\ninclude = '\\.pyi?$'\n\n[tool.ruff]\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    # \"I\",  # isort\n    \"C\",  # flake8-comprehensions\n    \"B\",  # flake8-bugbear\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # complexity\n]\n\n# Allow autofix for all enabled rules (when `--fix`) is provided.\nfixable = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nunfixable = []\n\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".hg\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"venv\",\n]\n\n# Same as Black.\nline-length = 100\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n# Assume Python 3.11\ntarget-version = \"py311\"\n\n[tool.ruff.mccabe]\n# Unlike Flake8, default to a complexity level of 10.\nmax-complexity = 10\n\n[tool.ruff.isort]\nknown-third-party = [\"fastapi\", \"pydantic\", \"starlette\"]\n\n[tool.ruff.per-file-ignores]\n\"tests/conftest.py\" = [\"E402\"]\n\"src/dispatch/entity/service.py\" = [\"W605\"]\n"
        },
        {
          "name": "requirements-base.in",
          "type": "blob",
          "size": 0.7763671875,
          "content": "aiocache\naiofiles\naiohttp\nalembic\natlassian-python-api==3.32.0\nattrs==22.1.0\nbcrypt\nblockkit\nboto3\ncachetools\nchardet\nclick\ncryptography<40,>=38.0.0\nduo-client\nemail-validator\nemails\nfastapi\ngoogle-api-python-client\ngoogle-auth-oauthlib\nh11\nhttpx\njinja2\njira==2.0.0\njoblib\njsonpath_ng\nlxml==5.3.0\nmarkdown\nmsal\nnumpy\noauth2client\nopenai\npandas\npdpyras\nprotobuf<4.24.0,>=3.6.1\npsycopg2-binary\npyarrow\npydantic==1.*\npyparsing\npython-dateutil\npython-jose\npython-multipart\npython-slugify\npytz\nrequests\nschedule\nschemathesis\nsentry-asgi\nsentry-sdk==1.45.0\nsh\nslack_sdk\nslack-bolt\nslowapi\nspacy\nsqlalchemy-filters\nsqlalchemy-utils\nsqlalchemy<1.4  # NOTE temporarily until https://github.com/kvesteri/sqlalchemy-utils/issues/505 is fixed\nstatsmodels\ntabulate\ntenacity\nuvicorn\nuvloop\nvalidators==0.18.2\n"
        },
        {
          "name": "requirements-base.txt",
          "type": "blob",
          "size": 10.1181640625,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile requirements-base.in\n#\naiocache==0.12.3\n    # via -r requirements-base.in\naiofiles==24.1.0\n    # via -r requirements-base.in\naiohappyeyeballs==2.4.3\n    # via aiohttp\naiohttp==3.11.11\n    # via -r requirements-base.in\naiosignal==1.3.1\n    # via aiohttp\nalembic==1.14.0\n    # via -r requirements-base.in\nanyio==4.6.2.post1\n    # via\n    #   httpx\n    #   openai\n    #   starlette\natlassian-python-api==3.32.0\n    # via -r requirements-base.in\nattrs==22.1.0\n    # via\n    #   -r requirements-base.in\n    #   aiohttp\n    #   hypothesis\n    #   jsonschema\nbackoff==2.2.1\n    # via schemathesis\nbcrypt==4.2.1\n    # via -r requirements-base.in\nblis==1.0.1\n    # via thinc\nblockkit==1.5.2\n    # via -r requirements-base.in\nboto3==1.35.56\n    # via -r requirements-base.in\nbotocore==1.35.56\n    # via\n    #   boto3\n    #   s3transfer\ncachetools==5.5.0\n    # via\n    #   -r requirements-base.in\n    #   google-auth\n    #   premailer\ncatalogue==2.0.10\n    # via\n    #   spacy\n    #   srsly\n    #   thinc\ncertifi==2024.8.30\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\n    #   sentry-sdk\ncffi==1.17.1\n    # via cryptography\nchardet==5.2.0\n    # via\n    #   -r requirements-base.in\n    #   emails\ncharset-normalizer==3.4.0\n    # via requests\nclick==8.1.8\n    # via\n    #   -r requirements-base.in\n    #   schemathesis\n    #   typer\n    #   uvicorn\ncloudpathlib==0.20.0\n    # via weasel\ncolorama==0.4.6\n    # via schemathesis\nconfection==0.1.5\n    # via\n    #   thinc\n    #   weasel\ncryptography==39.0.2\n    # via\n    #   -r requirements-base.in\n    #   msal\n    #   oauthlib\n    #   pyjwt\ncssselect==1.2.0\n    # via premailer\ncssutils==2.11.1\n    # via\n    #   emails\n    #   premailer\ncymem==2.0.8\n    # via\n    #   preshed\n    #   spacy\n    #   thinc\ndecorator==5.1.1\n    # via validators\ndefusedxml==0.7.1\n    # via jira\ndeprecated==1.2.14\n    # via\n    #   atlassian-python-api\n    #   limits\ndistro==1.9.0\n    # via openai\ndnspython==2.7.0\n    # via email-validator\nduo-client==5.3.0\n    # via -r requirements-base.in\necdsa==0.19.0\n    # via python-jose\nemail-validator==2.2.0\n    # via -r requirements-base.in\nemails==0.6\n    # via -r requirements-base.in\nfastapi==0.115.6\n    # via -r requirements-base.in\nfrozenlist==1.5.0\n    # via\n    #   aiohttp\n    #   aiosignal\ngoogle-api-core==2.22.0\n    # via google-api-python-client\ngoogle-api-python-client==2.158.0\n    # via -r requirements-base.in\ngoogle-auth==2.36.0\n    # via\n    #   google-api-core\n    #   google-api-python-client\n    #   google-auth-httplib2\n    #   google-auth-oauthlib\ngoogle-auth-httplib2==0.2.0\n    # via google-api-python-client\ngoogle-auth-oauthlib==1.2.1\n    # via -r requirements-base.in\ngoogleapis-common-protos==1.65.0\n    # via google-api-core\ngraphql-core==3.2.5\n    # via hypothesis-graphql\nh11==0.14.0\n    # via\n    #   -r requirements-base.in\n    #   httpcore\n    #   uvicorn\nhttpcore==1.0.6\n    # via httpx\nhttplib2==0.22.0\n    # via\n    #   google-api-python-client\n    #   google-auth-httplib2\n    #   oauth2client\nhttpx==0.28.1\n    # via\n    #   -r requirements-base.in\n    #   openai\n    #   schemathesis\nhypothesis==6.91.0\n    # via\n    #   hypothesis-graphql\n    #   hypothesis-jsonschema\n    #   schemathesis\nhypothesis-graphql==0.11.1\n    # via schemathesis\nhypothesis-jsonschema==0.22.1\n    # via schemathesis\nidna==3.10\n    # via\n    #   anyio\n    #   email-validator\n    #   httpx\n    #   requests\n    #   yarl\nimportlib-resources==6.4.5\n    # via limits\niniconfig==2.0.0\n    # via pytest\njinja2==3.1.5\n    # via\n    #   -r requirements-base.in\n    #   spacy\njira==2.0.0\n    # via -r requirements-base.in\njiter==0.7.0\n    # via openai\njmespath==1.0.1\n    # via\n    #   boto3\n    #   botocore\njoblib==1.4.2\n    # via -r requirements-base.in\njsonpath-ng==1.7.0\n    # via -r requirements-base.in\njsonschema==4.17.3\n    # via\n    #   hypothesis-jsonschema\n    #   schemathesis\njunit-xml==1.9\n    # via schemathesis\nlangcodes==3.4.1\n    # via spacy\nlanguage-data==1.2.0\n    # via langcodes\nlimits==3.13.0\n    # via slowapi\nlxml==5.3.0\n    # via\n    #   -r requirements-base.in\n    #   emails\n    #   premailer\nmako==1.3.6\n    # via alembic\nmarisa-trie==1.2.1\n    # via language-data\nmarkdown==3.7\n    # via -r requirements-base.in\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==3.0.2\n    # via\n    #   jinja2\n    #   mako\n    #   werkzeug\nmdurl==0.1.2\n    # via markdown-it-py\nmore-itertools==10.5.0\n    # via cssutils\nmsal==1.31.1\n    # via -r requirements-base.in\nmultidict==6.1.0\n    # via\n    #   aiohttp\n    #   yarl\nmurmurhash==1.0.10\n    # via\n    #   preshed\n    #   spacy\n    #   thinc\nnumpy==2.0.2\n    # via\n    #   -r requirements-base.in\n    #   blis\n    #   pandas\n    #   patsy\n    #   scipy\n    #   spacy\n    #   statsmodels\n    #   thinc\noauth2client==4.1.3\n    # via -r requirements-base.in\noauthlib[signedtoken]==3.2.2\n    # via\n    #   atlassian-python-api\n    #   jira\n    #   requests-oauthlib\nopenai==1.59.6\n    # via -r requirements-base.in\npackaging==24.2\n    # via\n    #   limits\n    #   pytest\n    #   spacy\n    #   statsmodels\n    #   thinc\n    #   weasel\npandas==2.2.3\n    # via\n    #   -r requirements-base.in\n    #   statsmodels\npatsy==0.5.6\n    # via statsmodels\npbr==6.1.0\n    # via jira\npdpyras==5.4.0\n    # via -r requirements-base.in\npluggy==1.5.0\n    # via pytest\nply==3.11\n    # via jsonpath-ng\npremailer==3.10.0\n    # via emails\npreshed==3.0.9\n    # via\n    #   spacy\n    #   thinc\npropcache==0.2.0\n    # via\n    #   aiohttp\n    #   yarl\nproto-plus==1.25.0\n    # via google-api-core\nprotobuf==4.23.4\n    # via\n    #   -r requirements-base.in\n    #   google-api-core\n    #   googleapis-common-protos\n    #   proto-plus\npsycopg2-binary==2.9.10\n    # via -r requirements-base.in\npyarrow==18.1.0\n    # via -r requirements-base.in\npyasn1==0.6.1\n    # via\n    #   oauth2client\n    #   pyasn1-modules\n    #   python-jose\n    #   rsa\npyasn1-modules==0.4.1\n    # via\n    #   google-auth\n    #   oauth2client\npycparser==2.22\n    # via cffi\npydantic==1.10.20\n    # via\n    #   -r requirements-base.in\n    #   blockkit\n    #   confection\n    #   fastapi\n    #   openai\n    #   spacy\n    #   thinc\n    #   weasel\npygments==2.18.0\n    # via rich\npyjwt[crypto]==2.9.0\n    # via\n    #   msal\n    #   oauthlib\n    #   pyjwt\npyparsing==3.2.1\n    # via\n    #   -r requirements-base.in\n    #   httplib2\npyrate-limiter==2.10.0\n    # via schemathesis\npyrsistent==0.20.0\n    # via jsonschema\npytest==7.4.4\n    # via\n    #   pytest-subtests\n    #   schemathesis\npytest-subtests==0.7.0\n    # via schemathesis\npython-dateutil==2.9.0.post0\n    # via\n    #   -r requirements-base.in\n    #   botocore\n    #   emails\n    #   pandas\npython-jose==3.3.0\n    # via -r requirements-base.in\npython-multipart==0.0.20\n    # via -r requirements-base.in\npython-slugify==8.0.4\n    # via -r requirements-base.in\npytz==2024.2\n    # via\n    #   -r requirements-base.in\n    #   pandas\npyyaml==6.0.2\n    # via schemathesis\nrequests==2.32.3\n    # via\n    #   -r requirements-base.in\n    #   atlassian-python-api\n    #   emails\n    #   google-api-core\n    #   jira\n    #   msal\n    #   pdpyras\n    #   premailer\n    #   requests-oauthlib\n    #   requests-toolbelt\n    #   schemathesis\n    #   spacy\n    #   starlette-testclient\n    #   weasel\nrequests-oauthlib==2.0.0\n    # via\n    #   atlassian-python-api\n    #   google-auth-oauthlib\n    #   jira\nrequests-toolbelt==1.0.0\n    # via jira\nrich==13.9.4\n    # via typer\nrsa==4.9\n    # via\n    #   google-auth\n    #   oauth2client\n    #   python-jose\ns3transfer==0.10.3\n    # via boto3\nschedule==1.2.2\n    # via -r requirements-base.in\nschemathesis==3.21.2\n    # via -r requirements-base.in\nscipy==1.14.1\n    # via statsmodels\nsentry-asgi==0.2.0\n    # via -r requirements-base.in\nsentry-sdk==1.45.0\n    # via\n    #   -r requirements-base.in\n    #   sentry-asgi\nsh==2.1.0\n    # via -r requirements-base.in\nshellingham==1.5.4\n    # via typer\nsix==1.16.0\n    # via\n    #   atlassian-python-api\n    #   duo-client\n    #   ecdsa\n    #   jira\n    #   junit-xml\n    #   oauth2client\n    #   patsy\n    #   python-dateutil\n    #   sqlalchemy-filters\n    #   validators\nslack-bolt==1.22.0\n    # via -r requirements-base.in\nslack-sdk==3.34.0\n    # via\n    #   -r requirements-base.in\n    #   slack-bolt\nslowapi==0.1.9\n    # via -r requirements-base.in\nsmart-open==7.0.5\n    # via weasel\nsniffio==1.3.1\n    # via\n    #   anyio\n    #   openai\nsortedcontainers==2.4.0\n    # via hypothesis\nspacy==3.8.3\n    # via -r requirements-base.in\nspacy-legacy==3.0.12\n    # via spacy\nspacy-loggers==1.0.5\n    # via spacy\nsqlalchemy==1.3.24\n    # via\n    #   -r requirements-base.in\n    #   alembic\n    #   sqlalchemy-filters\n    #   sqlalchemy-utils\nsqlalchemy-filters==0.13.0\n    # via -r requirements-base.in\nsqlalchemy-utils==0.41.2\n    # via -r requirements-base.in\nsrsly==2.4.8\n    # via\n    #   confection\n    #   spacy\n    #   thinc\n    #   weasel\nstarlette==0.41.2\n    # via\n    #   fastapi\n    #   schemathesis\n    #   starlette-testclient\nstarlette-testclient==0.2.0\n    # via schemathesis\nstatsmodels==0.14.4\n    # via -r requirements-base.in\ntabulate==0.9.0\n    # via -r requirements-base.in\ntenacity==9.0.0\n    # via -r requirements-base.in\ntext-unidecode==1.3\n    # via python-slugify\nthinc==8.3.2\n    # via spacy\ntomli==2.0.2\n    # via schemathesis\ntomli-w==1.1.0\n    # via schemathesis\ntqdm==4.67.0\n    # via\n    #   openai\n    #   spacy\ntyper==0.13.0\n    # via\n    #   spacy\n    #   weasel\ntyping-extensions==4.12.2\n    # via\n    #   alembic\n    #   fastapi\n    #   limits\n    #   openai\n    #   pydantic\n    #   schemathesis\n    #   typer\ntzdata==2024.2\n    # via pandas\nuritemplate==4.1.1\n    # via google-api-python-client\nurllib3==2.2.3\n    # via\n    #   botocore\n    #   pdpyras\n    #   requests\n    #   sentry-sdk\nuvicorn==0.34.0\n    # via -r requirements-base.in\nuvloop==0.21.0\n    # via -r requirements-base.in\nvalidators==0.18.2\n    # via -r requirements-base.in\nwasabi==1.1.3\n    # via\n    #   spacy\n    #   thinc\n    #   weasel\nweasel==0.4.1\n    # via spacy\nwerkzeug==3.1.3\n    # via schemathesis\nwrapt==1.16.0\n    # via\n    #   deprecated\n    #   smart-open\nyarl==1.17.1\n    # via\n    #   aiohttp\n    #   schemathesis\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n"
        },
        {
          "name": "requirements-dev.in",
          "type": "blob",
          "size": 0.1259765625,
          "content": "attrs==22.1.0\nblack\nclick\ncoverage\ndevtools\neasydict\nfactory-boy\nfaker\nipython\npre-commit\npytest==7.4.4\npytest-mock\nruff\nvulture\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 2.142578125,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile requirements-dev.in\n#\nasttokens==2.4.1\n    # via\n    #   devtools\n    #   stack-data\nattrs==22.1.0\n    # via -r requirements-dev.in\nblack==24.10.0\n    # via -r requirements-dev.in\ncfgv==3.4.0\n    # via pre-commit\nclick==8.1.8\n    # via\n    #   -r requirements-dev.in\n    #   black\ncoverage==7.6.10\n    # via -r requirements-dev.in\ndecorator==5.1.1\n    # via ipython\ndevtools==0.12.2\n    # via -r requirements-dev.in\ndistlib==0.3.9\n    # via virtualenv\neasydict==1.13\n    # via -r requirements-dev.in\nexecuting==2.1.0\n    # via\n    #   devtools\n    #   stack-data\nfactory-boy==3.3.1\n    # via -r requirements-dev.in\nfaker==33.3.0\n    # via\n    #   -r requirements-dev.in\n    #   factory-boy\nfilelock==3.16.1\n    # via virtualenv\nidentify==2.6.1\n    # via pre-commit\niniconfig==2.0.0\n    # via pytest\nipython==8.31.0\n    # via -r requirements-dev.in\njedi==0.19.1\n    # via ipython\nmatplotlib-inline==0.1.7\n    # via ipython\nmypy-extensions==1.0.0\n    # via black\nnodeenv==1.9.1\n    # via pre-commit\npackaging==24.2\n    # via\n    #   black\n    #   pytest\nparso==0.8.4\n    # via jedi\npathspec==0.12.1\n    # via black\npexpect==4.9.0\n    # via ipython\nplatformdirs==4.3.6\n    # via\n    #   black\n    #   virtualenv\npluggy==1.5.0\n    # via pytest\npre-commit==4.0.1\n    # via -r requirements-dev.in\nprompt-toolkit==3.0.48\n    # via ipython\nptyprocess==0.7.0\n    # via pexpect\npure-eval==0.2.3\n    # via stack-data\npygments==2.18.0\n    # via\n    #   devtools\n    #   ipython\npytest==7.4.4\n    # via\n    #   -r requirements-dev.in\n    #   pytest-mock\npytest-mock==3.14.0\n    # via -r requirements-dev.in\npython-dateutil==2.9.0.post0\n    # via faker\npyyaml==6.0.2\n    # via pre-commit\nruff==0.8.6\n    # via -r requirements-dev.in\nsix==1.16.0\n    # via\n    #   asttokens\n    #   python-dateutil\nstack-data==0.6.3\n    # via ipython\ntraitlets==5.14.3\n    # via\n    #   ipython\n    #   matplotlib-inline\ntyping-extensions==4.12.2\n    # via\n    #   faker\n    #   ipython\nvirtualenv==20.27.1\n    # via pre-commit\nvulture==2.14\n    # via -r requirements-dev.in\nwcwidth==0.2.13\n    # via prompt-toolkit\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3359375,
          "content": "[tool:pytest]\npython_files = test*.py\naddopts = --tb=native -p no:doctest -p no:warnings\nnorecursedirs = bin dist docs htmlcov script hooks node_modules .* {args}\nlooponfailroots = src tests\nselenium_driver = chrome\nself-contained-html = true\n\n[coverage:run]\nomit =\n    dispatch/migrations/*\nsource =\n    src\n    tests\n\n[black]\nline_length=100\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 16.90234375,
          "content": "#!/usr/bin/env python\nimport datetime\nimport json\nimport os\nimport os.path\nimport shutil\nimport sys\nimport traceback\nfrom distutils import log\nfrom distutils.command.build import build as BuildCommand\nfrom distutils.core import Command\nfrom subprocess import check_output\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.develop import develop as DevelopCommand\nfrom setuptools.command.sdist import sdist as SDistCommand\n\nROOT_PATH = os.path.abspath(os.path.dirname(__file__))\n\n\n# modified from:\n# https://raw.githubusercontent.com/getsentry/sentry/055cfe74bb88bbb2083f37f5df21b91d0ef4f9a7/src/sentry/utils/distutils/commands/base.py\nclass BaseBuildCommand(Command):\n    user_options = [\n        (\"work-path=\", \"w\", \"The working directory for source files. Defaults to .\"),\n        (\"build-lib=\", \"b\", \"directory for script runtime modules\"),\n        (\n            \"inplace\",\n            \"i\",\n            \"ignore build-lib and put compiled javascript files into the source \"\n            + \"directory alongside your pure Python modules\",\n        ),\n        (\n            \"force\",\n            \"f\",\n            \"Force rebuilding of static content. Defaults to rebuilding on version \"\n            \"change detection.\",\n        ),\n    ]\n\n    boolean_options = [\"force\"]\n\n    def initialize_options(self):\n        self.build_lib = None\n        self.force = None\n        self.work_path = os.path.join(ROOT_PATH, \"src/dispatch/static/dispatch\")\n        self.inplace = None\n\n    def get_root_path(self):\n        return os.path.abspath(os.path.dirname(sys.modules[\"__main__\"].__file__))\n\n    def get_dist_paths(self):\n        return []\n\n    def get_manifest_additions(self):\n        return []\n\n    def finalize_options(self):\n        # This requires some explanation.  Basically what we want to do\n        # here is to control if we want to build in-place or into the\n        # build-lib folder.  Traditionally this is set by the `inplace`\n        # command line flag for build_ext.  However as we are a subcommand\n        # we need to grab this information from elsewhere.\n        #\n        # An in-place build puts the files generated into the source\n        # folder, a regular build puts the files into the build-lib\n        # folder.\n        #\n        # The following situations we need to cover:\n        #\n        #   command                         default in-place\n        #   setup.py build_js               0\n        #   setup.py build_ext              value of in-place for build_ext\n        #   setup.py build_ext --inplace    1\n        #   pip install --editable .        1\n        #   setup.py install                0\n        #   setup.py sdist                  0\n        #   setup.py bdist_wheel            0\n        #\n        # The way this is achieved is that build_js is invoked by two\n        # subcommands: bdist_ext (which is in our case always executed\n        # due to a custom distribution) or sdist.\n        #\n        # Note: at one point install was an in-place build but it's not\n        # quite sure why.  In case a version of install breaks again:\n        # installations via pip from git URLs definitely require the\n        # in-place flag to be disabled.  So we might need to detect\n        # that separately.\n        #\n        # To find the default value of the inplace flag we inspect the\n        # sdist and build_ext commands.\n        sdist = self.distribution.get_command_obj(\"sdist\")\n        build_ext = self.get_finalized_command(\"build_ext\")\n\n        # If we are not decided on in-place we are inplace if either\n        # build_ext is inplace or we are invoked through the install\n        # command (easiest check is to see if it's finalized).\n        if self.inplace is None:\n            self.inplace = (build_ext.inplace or sdist.finalized) and 1 or 0\n\n        # If we're coming from sdist, clear the hell out of the dist\n        # folder first.\n        if sdist.finalized:\n            for path in self.get_dist_paths():\n                try:\n                    shutil.rmtree(path)\n                except (OSError, IOError):\n                    pass\n\n        # In place means build_lib is src.  We also log this.\n        if self.inplace:\n            log.debug(\"in-place js building enabled\")\n            self.build_lib = \"src\"\n        # Otherwise we fetch build_lib from the build command.\n        else:\n            self.set_undefined_options(\"build\", (\"build_lib\", \"build_lib\"))\n            log.debug(\"regular js build: build path is %s\" % self.build_lib)\n\n        if self.work_path is None:\n            self.work_path = self.get_root_path()\n\n    def _needs_built(self):\n        for path in self.get_dist_paths():\n            if not os.path.isdir(path):\n                return True\n        return False\n\n    def _setup_git(self):\n        work_path = self.work_path\n\n        if os.path.exists(os.path.join(work_path, \".git\")):\n            log.info(\"initializing git submodules\")\n            self._run_command([\"git\", \"submodule\", \"init\"])\n            self._run_command([\"git\", \"submodule\", \"update\"])\n\n    def _setup_js_deps(self):\n        node_version = None\n        try:\n            node_version = self._run_command([\"node\", \"--version\"]).decode(\"utf-8\").rstrip()\n        except OSError:\n            log.fatal(\"Cannot find node executable. Please install node\" \" and try again.\")\n            sys.exit(1)\n\n        if node_version[2] is not None:\n            log.info(\"using node ({0})\".format(node_version))\n            self._run_npm_command([\"install\"])\n            self._run_npm_command([\"run\", \"build\", \"--quiet\"])\n\n    def _run_command(self, cmd, env=None):\n        cmd_str = \" \".join(cmd)\n        log.debug(f\"running [{cmd_str}]\")\n        try:\n            return check_output(cmd, cwd=self.work_path, env=env)\n        except Exception:\n            log.error(f\"command failed [{cmd_str}] via [{self.work_path}]\")\n            raise\n\n    def _run_npm_command(self, cmd, env=None):\n        self._run_command([\"npm\"] + cmd, env=env)\n\n    def update_manifests(self):\n        # if we were invoked from sdist, we need to inform sdist about\n        # which files we just generated.  Otherwise they will be missing\n        # in the manifest.  This adds the files for what webpack generates\n        # plus our own assets.json file.\n        sdist = self.distribution.get_command_obj(\"sdist\")\n        if not sdist.finalized:\n            return\n\n        # The path down from here only works for sdist:\n\n        # Use the underlying file list so that we skip the file-exists\n        # check which we do not want here.\n        files = sdist.filelist.files\n        base = os.path.abspath(\".\")\n\n        # We need to split off the local parts of the files relative to\n        # the current folder.  This will chop off the right path for the\n        # manifest.\n        for path in self.get_dist_paths():\n            for dirname, _, filenames in os.walk(os.path.abspath(path)):\n                for filename in filenames:\n                    filename = os.path.join(dirname, filename)\n                    files.append(filename[len(base) :].lstrip(os.path.sep))\n\n        for file in self.get_manifest_additions():\n            files.append(file)\n\n    def run(self):\n        if self.force or self._needs_built():\n            self._setup_git()\n            self._setup_js_deps()\n            self._build()\n            self.update_manifests()\n\n\nclass BuildAssetsCommand(BaseBuildCommand):\n    user_options = BaseBuildCommand.user_options + [\n        (\n            \"asset-json-path=\",\n            None,\n            \"Relative path for JSON manifest. Defaults to {dist_name}/assets.json\",\n        ),\n        (\n            \"inplace\",\n            \"i\",\n            \"ignore build-lib and put compiled javascript files into the source \"\n            + \"directory alongside your pure Python modules\",\n        ),\n        (\n            \"force\",\n            \"f\",\n            \"Force rebuilding of static content. Defaults to rebuilding on version \"\n            \"change detection.\",\n        ),\n    ]\n\n    description = \"build static media assets\"\n\n    def initialize_options(self):\n        self.work_path = os.path.join(ROOT_PATH, \"src/dispatch/static/dispatch\")\n        self.asset_json_path = os.path.join(self.work_path, \"assets.json\")\n        BaseBuildCommand.initialize_options(self)\n\n    def get_dist_paths(self):\n        return [os.path.join(self.work_path, \"/dist\")]\n\n    def get_manifest_additions(self):\n        return (self.asset_json_path,)\n\n    def _get_package_version(self):\n        \"\"\"\n        Attempt to get the most correct current version of Dispatch.\n        \"\"\"\n        pkg_path = os.path.join(ROOT_PATH, \"src\")\n\n        sys.path.insert(0, pkg_path)\n        try:\n            import dispatch\n        except Exception:\n            version = None\n            build = None\n        else:\n            log.info(f\"pulled version information from 'dispatch' module. {dispatch.__file__}\")\n            version = self.distribution.get_version()\n            build = dispatch.__build__\n        finally:\n            sys.path.pop(0)\n\n        if not (version and build):\n            json_path = self.get_asset_json_path()\n            try:\n                with open(json_path) as fp:\n                    data = json.loads(fp.read())\n            except Exception:\n                pass\n            else:\n                log.info(\"pulled version information from '{}'\".format(json_path))\n                version, build = data[\"version\"], data[\"build\"]\n\n        return {\"version\": version, \"build\": build}\n\n    def _needs_static(self, version_info):\n        json_path = self.get_asset_json_path()\n        if not os.path.exists(json_path):\n            return True\n\n        with open(json_path) as fp:\n            data = json.load(fp)\n        if data.get(\"version\") != version_info.get(\"version\"):\n            return True\n        if data.get(\"build\") != version_info.get(\"build\"):\n            return True\n        return False\n\n    def _needs_built(self):\n        if BaseBuildCommand._needs_built(self):\n            return True\n        version_info = self._get_package_version()\n        return self._needs_static(version_info)\n\n    def _build(self):\n        version_info = self._get_package_version()\n        log.info(\n            \"building assets for {} v{} (build {})\".format(\n                self.distribution.get_name(),\n                version_info[\"version\"] or \"UNKNOWN\",\n                version_info[\"build\"] or \"UNKNOWN\",\n            )\n        )\n        if not version_info[\"version\"] or not version_info[\"build\"]:\n            log.fatal(\"Could not determine dispatch version or build\")\n            sys.exit(1)\n\n        try:\n            self._build_static()\n        except Exception:\n            traceback.print_exc()\n            log.fatal(\"unable to build Dispatch's static assets!\")\n            sys.exit(1)\n\n        log.info(\"writing version manifest\")\n        manifest = self._write_version_file(version_info)\n        log.info(\"recorded manifest\\n{}\".format(json.dumps(manifest, indent=2)))\n\n    def _build_static(self):\n        # By setting NODE_ENV=production, a few things happen\n        #   * Vue optimizes out certain code paths\n        #   * Webpack will add version strings to built/referenced assets\n        env = dict(os.environ)\n        env[\"DISPATCH_STATIC_DIST_PATH\"] = self.dispatch_static_dist_path\n        env[\"NODE_ENV\"] = \"production\"\n        # TODO: Our JS builds should not require 4GB heap space\n        env[\"NODE_OPTIONS\"] = (env.get(\"NODE_OPTIONS\", \"\") + \" --max-old-space-size=4096\").lstrip()\n        # self._run_npm_command([\"webpack\", \"--bail\"], env=env)\n\n    def _write_version_file(self, version_info):\n        manifest = {\n            \"createdAt\": datetime.datetime.utcnow().isoformat() + \"Z\",\n            \"version\": version_info[\"version\"],\n            \"build\": version_info[\"build\"],\n        }\n        with open(self.get_asset_json_path(), \"w\") as fp:\n            json.dump(manifest, fp)\n        return manifest\n\n    @property\n    def dispatch_static_dist_path(self):\n        return os.path.abspath(os.path.join(self.build_lib, \"src/static/dispatch/dist\"))\n\n    def get_asset_json_path(self):\n        return os.path.abspath(os.path.join(self.build_lib, self.asset_json_path))\n\n\nVERSION = \"0.1.0.dev0\"\nIS_LIGHT_BUILD = os.environ.get(\"DISPATCH_LIGHT_BUILD\") == \"1\"\n\n\ndef get_requirements(env):\n    with open(\"requirements-{}.txt\".format(env)) as fp:\n        return [\n            x.strip()\n            for x in fp.read().split(\"\\n\")\n            if not x.strip().startswith(\"#\")\n            and not x.strip().startswith(\"--\")\n            and not x.strip() == \"\"\n        ]\n\n\ninstall_requires = get_requirements(\"base\")\ndev_requires = get_requirements(\"dev\")\n\n\nclass DispatchSDistCommand(SDistCommand):\n    # If we are not a light build we want to also execute build_assets as\n    # part of our source build pipeline.\n    if not IS_LIGHT_BUILD:\n        sub_commands = SDistCommand.sub_commands + [(\"build_assets\", None)]\n\n\nclass DispatchBuildCommand(BuildCommand):\n    def run(self):\n        if not IS_LIGHT_BUILD:\n            self.run_command(\"build_assets\")\n        BuildCommand.run(self)\n\n\nclass DispatchDevelopCommand(DevelopCommand):\n    def run(self):\n        DevelopCommand.run(self)\n        if not IS_LIGHT_BUILD:\n            self.run_command(\"build_assets\")\n\n\ncmdclass = {\n    \"sdist\": DispatchSDistCommand,\n    \"develop\": DispatchDevelopCommand,\n    \"build\": DispatchBuildCommand,\n    \"build_assets\": BuildAssetsCommand,\n}\n\n# Get the long description from the README file\nwith open(os.path.join(ROOT_PATH, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"dispatch\",\n    version=VERSION,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Netflix, Inc.\",\n    classifiers=[  # Optional\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache\",\n        \"Programming Language :: Python :: 3.11.2\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=find_packages(\"src\"),\n    python_requires=\">=3.11\",\n    install_requires=install_requires,\n    extras_require={\"dev\": dev_requires},\n    cmdclass=cmdclass,\n    zip_safe=False,\n    include_package_data=True,\n    entry_points={\n        \"console_scripts\": [\"dispatch = dispatch.cli:entrypoint\"],\n        \"dispatch.plugins\": [\n            \"dispatch_atlassian_confluence = dispatch.plugins.dispatch_atlassian_confluence.plugin:ConfluencePagePlugin\",\n            \"dispatch_atlassian_confluence_document = dispatch.plugins.dispatch_atlassian_confluence.docs.plugin:ConfluencePageDocPlugin\",\n            \"dispatch_aws_sqs = dispatch.plugins.dispatch_aws.plugin:AWSSQSSignalConsumerPlugin\",\n            \"dispatch_aws_alb_auth = dispatch.plugins.dispatch_core.plugin:AwsAlbAuthProviderPlugin\",\n            \"dispatch_auth_mfa = dispatch.plugins.dispatch_core.plugin:DispatchMfaPlugin\",\n            \"dispatch_basic_auth = dispatch.plugins.dispatch_core.plugin:BasicAuthProviderPlugin\",\n            \"dispatch_contact = dispatch.plugins.dispatch_core.plugin:DispatchContactPlugin\",\n            \"dispatch_header_auth = dispatch.plugins.dispatch_core.plugin:HeaderAuthProviderPlugin\",\n            \"dispatch_participant_resolver = dispatch.plugins.dispatch_core.plugin:DispatchParticipantResolverPlugin\",\n            \"dispatch_pkce_auth = dispatch.plugins.dispatch_core.plugin:PKCEAuthProviderPlugin\",\n            \"dispatch_ticket = dispatch.plugins.dispatch_core.plugin:DispatchTicketPlugin\",\n            \"duo_auth_mfa = dispatch.plugins.dispatch_duo.plugin:DuoMfaPlugin\",\n            \"generic_workflow = dispatch.plugins.generic_workflow.plugin:GenericWorkflowPlugin\",\n            \"github_monitor = dispatch.plugins.dispatch_github.plugin:GithubMonitorPlugin\",\n            \"google_calendar_conference = dispatch.plugins.dispatch_google.calendar.plugin:GoogleCalendarConferencePlugin\",\n            \"google_docs_document = dispatch.plugins.dispatch_google.docs.plugin:GoogleDocsDocumentPlugin\",\n            \"google_drive_storage = dispatch.plugins.dispatch_google.drive.plugin:GoogleDriveStoragePlugin\",\n            \"google_drive_task = dispatch.plugins.dispatch_google.drive.plugin:GoogleDriveTaskPlugin\",\n            \"google_gmail_email = dispatch.plugins.dispatch_google.gmail.plugin:GoogleGmailEmailPlugin\",\n            \"google_groups_participants = dispatch.plugins.dispatch_google.groups.plugin:GoogleGroupParticipantGroupPlugin\",\n            \"jira_ticket = dispatch.plugins.dispatch_jira.plugin:JiraTicketPlugin\",\n            \"openai_artificial_intelligence = dispatch.plugins.dispatch_openai.plugin:OpenAIPlugin\",\n            \"opsgenie_oncall = dispatch.plugins.dispatch_opsgenie.plugin:OpsGenieOncallPlugin\",\n            \"pagerduty_oncall = dispatch.plugins.dispatch_pagerduty.plugin:PagerDutyOncallPlugin\",\n            \"slack_contact = dispatch.plugins.dispatch_slack.plugin:SlackContactPlugin\",\n            \"slack_conversation = dispatch.plugins.dispatch_slack.plugin:SlackConversationPlugin\",\n            \"zoom_conference = dispatch.plugins.dispatch_zoom.plugin:ZoomConferencePlugin\",\n            \"microsoft_teams_conference = dispatch.plugins.dispatch_microsoft_teams.conference.plugin:MicrosoftTeamsConferencePlugin\",\n        ],\n    },\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.083984375,
          "content": "[tox]\nenvlist = py311\n\n[testenv]\ndeps =\n    pytest\n    coverage\ncommands =\n    pytest\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}