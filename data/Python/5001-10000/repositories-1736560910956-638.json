{
  "metadata": {
    "timestamp": 1736560910956,
    "page": 638,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Upsonic/gpt-computer-assistant",
      "stars": 5789,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.087890625,
          "content": "version = 1\n\n[[analyzers]]\nname = \"python\"\n\n  [analyzers.meta]\n  runtime_version = \"3.x.x\""
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1591796875,
          "content": "KOT-*\n\n.DS_Store\n\n*.mp3\n*.wav\n*.wav*\ngpt_computer_assistant/utils/artifacts/*.png\n*.db\n*.db-shm\n*.db-wal\ntest.py\ntest_backup.py\ntest_logo.png\n\noutput/\ndist/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.0400390625,
          "content": "We are open to any contribution as well.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.091796875,
          "content": "MIT License\n\nCopyright (c) 2024 Onur Atakan ULUSOY\nCopyright (c) 2024 Upsonic Teknoloji A.≈û.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0673828125,
          "content": "include gpt_computer_assistant/utils/media/*\ninclude requirements.txt"
        },
        {
          "name": "README.TR.md",
          "type": "blob",
          "size": 10.2802734375,
          "content": "<p align=\"center\">\n\n<p align=\"center\">\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/deeeb463-c161-4fc6-8407-71c3d8b7defe\" alt=\"Logo\"  >\n  </a>\n  <br>\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/36714716-6990-40b0-84d5-cd7432811bcb\" alt=\"Logo\"  >\n  </a>\n\n  <h3 align=\"center\">GPT Computer Assistant</h3>\n  <p align=\"center\">\n    <a href=\"https://discord.gg/qApFmWMt8x\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Discord-Join?style=social&logo=discord\" width=150></a>\n  </p>\n\n  <p align=\"center\">\n    gpt-4o for windows, macos and ubuntu\n    <br />\n   <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\"><strong>D√∂k√ºmantasyon</strong></a>\n   .\n    <a href=\"https://github.com/onuratakan/gpt-computer-assistant/#Capabilities\"><strong>Yeteneklerini Ke≈üfet ¬ª</strong></a>\n    <br />\n    </p>\n    <br>\n    <p align=\"center\">\n     <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&logo=windows&logoColor=white\" alt=\"windows\">\n   </a>\n   <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/mac%20os-000000?style=for-the-badge&logo=apple&logoColor=white\" alt=\"macos\">\n   </a>\n    <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&logo=linux&logoColor=black\" alt=\"linux\">\n   </a>\n  <br> \n\n    \n  <p align=\"center\">\n  <a href=\"https://www.python.org/\">\n  <img src=\"https://img.shields.io/badge/Made%20with-Python-1f425f.svg\" alt=\"Made_with_python\">\n  </a>\n  .\n  <img src=\"https://static.pepy.tech/personalized-badge/gpt-computer-assistant?period=total&units=international_system&left_color=grey&right_color=blue&left_text=PyPI%20Downloads\" alt=\"pypi_downloads\">\n  </p>\n\n  <p align=\"center\">\n   <a href=\"https://x.com/GPTCompAsst\"><img alt=\"Static Badge\" src=\"https://img.shields.io/twitter/follow/GPTCompAsst?style=social\" width=160></a>\n</p>\n<br>\n\n\n|[ENGLISH](README.md)|[ÁÆÄ‰Ωì‰∏≠Êñá](README.zh_CN.md)|[Ê≠£È´î‰∏≠Êñá](README.zh_TW.md)|T√úRK√áE|\n\n# GPT Bilgisayar Asistanƒ±\n\nMerhaba, bu ChatGPT MacOS uygulamasƒ±nƒ±n Windows ve Linux i√ßin alternatif bir √ßalƒ±≈ümasƒ±dƒ±r. Bu ≈üekilde, taze ve stabil bir √ßalƒ±≈üma sunuyoruz. Python k√ºt√ºphanesi olarak kurulumu olduk√ßa kolaydƒ±r, ancak ilerleyen zamanlarda .exe formatƒ±nda doƒürudan kurulum betikleri saƒülayacak bir i≈ü akƒ±≈üƒ± hazƒ±rlayacaƒüƒ±z.\n\nPowered by [**Upsonic Tiger üêÖ**](https://github.com/Upsonic/Tiger) - LLM ajanlarƒ± i√ßin bir i≈ülev merkezi.\n\n## Kurulum ve √áalƒ±≈ütƒ±rma\n\nPython 3.9 veya √ºst√º gereklidir.\n\n```console\npip3 install 'gpt-computer-assistant[base]'\n```\n\n```console\ncomputerassistant\n```\n\n### Uyandƒ±rma Komutu(Wake Word) | YENƒ∞\n\n<details>\n\nPvporcupine entegrasyonunu ekledik. Bu √∂zelliƒüi kullanmak i√ßin ek bir k√ºt√ºphane kurmanƒ±z gerekiyor:\n\n```console\npip3 install 'gpt-computer-assistant[wakeword]'\n```\n\nSonrasƒ±nda, l√ºtfen [Pvporcupine](https://picovoice.ai/) API anahtarƒ±nƒ±zƒ± girin ve uyandƒ±rma komutu √∂zelliƒüini etkinle≈ütirin.\n\n</details>\n\n<p align=\"center\">\n<br>\n  <br>\n  <br>\n\n</p>\n\n<p align=\"center\">\n<a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/5c6b7063-3d9b-4ea6-befa-ce15d69fcd43\" alt=\"Logo\"  >\n  </a>\n</p>\n\n### Ajan Altyapƒ±sƒ±\n\nBu ≈üekilde `crewai` ajanlarƒ± olu≈üturabilir ve onlarƒ± gpt-computer-assistant aray√ºz√º ve ara√ßlarƒ± i√ßinde kullanabilirsiniz.\n\n```console\npip3 install 'gpt-computer-assistant[base]'\npip3 install 'gpt-computer-assistant[agentic]'\n```\n\n```python\nfrom gpt_computer_assistant import Agent, start\n\nmanager = Agent(\n  role='Proje Y√∂neticisi',\n  goal='proje ihtiya√ßlarƒ±nƒ± anlar ve kodlayƒ±cƒ±ya yardƒ±mcƒ± olur',\n  backstory=\"\"\"B√ºy√ºk bir ≈üirkette bir y√∂neticisiniz.\"\"\",\n)\n\ncoder = Agent(\n  role='Kƒ±demli Python Geli≈ütirici',\n  goal='Python scriptleri yazmak ve panoya kopyalamak',\n  backstory=\"\"\"B√ºy√ºk bir ≈üirkette bir Python geli≈ütiricisisiniz.\"\"\",\n)\n\n\nstart()\n```\n\n\n\n<p align=\"center\">\n<a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/c78f3460-6660-4da6-8941-a8ac5cfc1191\" alt=\"Logo\"  >\n  </a>\n</p>\n\n### √ñzel Ara√ßlar Ekleme\n\nArtƒ±k agentic altyapƒ± ve asistan i≈ülemlerinde √ßalƒ±≈üan √∂zel ara√ßlar ekleyebilirsiniz.\n\n\n```python\nfrom gpt_computer_assistant import Tool, start\n\n@Tool\ndef toplam_aracƒ±(ilk_sayƒ±: int, ikinci_sayƒ±: int) -> str:\n    \"\"\"ƒ∞ki sayƒ±yƒ± toplamanƒ±z gerektiƒüinde kullanƒ±≈ülƒ±dƒ±r.\"\"\"\n    return ilk_sayƒ± + ikinci_sayƒ±\n\n\nstart()\n```\n\n\n\n\n\n\n<p align=\"center\">\n<a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/65b5fe7c-c0e1-40e9-9447-f41cd4f369a3\" alt=\"Logo\"  >\n  </a>\n</p>\n\n\n### API | YENƒ∞\n\nArtƒ±k GPT Bilgisayar Asistanƒ±nƒ±zƒ± uzaktan kullanabilirsiniz! GUI hala aktif, bunun i√ßin birka√ß adƒ±m bulunmaktadƒ±r:\n\n```console\npip3 install 'gpt-computer-assistant[base]'\npip3 install 'gpt-computer-assistant[api]'\n```\n\n```console\ncomputerassistant --api\n```\n\n\n```python\nfrom gpt_computer_assistant.remote import remote\n\noutput = remote.input(\"Merhaba, bug√ºn nasƒ±lsƒ±n?\", screen=False, talk=False)\nprint(output)\n\nremote.just_screenshot()\n\nremote.talk(\"TTS test\")\n\n# Other Functionalities\nremote.reset_memory()\nremote.profile(\"default\")\n\nremote.enable_predefined_agents()\nremote.disable_predefined_agents()\n\nremote.enable_online_tools()\nremote.disable_online_tools()\n```\n\n\n\n\n\n\n<p align=\"center\">\n<br>\n  <br>\n  <br>\n  <br>\n  <br>\n</p>\n\n<p align=\"center\">\n<br>\n  <br>\n  <br>\n</p>\n\n\nhttps://github.com/onuratakan/gpt-computer-assistant/assets/41792982/26ae3624-e619-44d6-9b04-f39cf1ac1f8f\n\n\n## Kullanƒ±m\n![options](https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/37d34745-ae4b-4b37-9bfa-aec070c97897)\n\n\n\n### Kullanƒ±m Alanlarƒ±\n\n<table>\n  <tr>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/b4a4f11e-5588-4656-b5d7-b612a9a2855b\" alt=\"Take Meeting Notes\" width=\"500\"/></td>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/49eeac70-b33a-4ec4-8125-64127621ed62\" alt=\"Daily Assistant\" width=\"500\"/></td>\n  </tr>\n  <tr>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/10b69a18-033c-4d81-8ac9-f4e3c65b59c3\" alt=\"Read Docs\" width=\"500\"/></td>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/0f483bae-ffaf-4311-8653-c0dc64fb5ebe\" alt=\"Coding Assistant\" width=\"500\"/></td>   \n\n  </tr>\n</table>\n\n\n\n\n\n\n## Yol Haritasƒ± \n| √ñzellik                            | Durum        | Hedef √áeyrek    |\n|------------------------------------|--------------|----------------|\n| Sohbet Ge√ßmi≈üini Temizle            | Tamamlandƒ±   | 2024 Q2        |\n| Uzun Ses Desteƒüi (20mb B√∂lme)       | Tamamlandƒ±   | 2024 Q2        |\n| Metin Giri≈üleri                     | Tamamlandƒ±   | 2024 Q2        |\n| Sadece Metin Modu (Konu≈ümayƒ± Sustur) | Tamamlandƒ±  | 2024 Q2        |\n| Profil Ekleme (Farklƒ± Sohbetler)    | Tamamlandƒ±   | 2024 Q2        |\n| Asistan Durumu Hakkƒ±nda Daha Fazla Geri Bildirim | Tamamlandƒ± | 2024 Q2        |\n| Yerel Model G√∂r√ºnt√º ve Metin (Ollama ve g√∂r√ºnt√º modelleri ile) | Tamamlandƒ± | 2024 Q2        |\n| **√ñzelle≈ütirilebilir Ajan Altyapƒ±sƒ±** | Tamamlandƒ±   | 2024 Q2        |\n| Groq Modellerini Destekleme         | Tamamlandƒ±   | 2024 Q2        |\n| **√ñzel Ara√ßlar Ekleme**             | Tamamlandƒ±   | 2024 Q2        |\n| Ekrandaki bir ≈üeye tƒ±klama (metin ve simge) | Tamamlandƒ± | 2024 Q2        |\n| Yeni Kullanƒ±cƒ± Aray√ºz√º              | Tamamlandƒ±   | 2024 Q2        |\n| Yerel Uygulamalar, exe, dmg         | Ba≈üarƒ±sƒ±z (Agentic Altyapƒ± k√ºt√ºphaneleri ≈üu anda desteklenmiyor) | 2024 Q2        |\n| **Uzun yanƒ±tlarda i≈übirlik√ßi konu≈üan farklƒ± ses modelleri.** | Tamamlandƒ± | 2024 Q2        |\n| **Konu≈ümayƒ± Tamamladƒ±ƒüƒ±nƒ±zda Otomatik Kaydƒ± Durdurma** | Tamamlandƒ± | 2024 Q2        |\n| **Uyanma Komutu**                   | Tamamlandƒ±   | 2024 Q2        |\n| **S√ºrekli Konu≈ümalar**              | Tamamlandƒ±   | 2024 Q2        |\n| **Cihazda daha fazla yetenek ekleme** | Planlanƒ±yor | 2024 Q2        |\n| DeepFace Entegrasyonu (Y√ºz Tanƒ±ma)  | Planlanƒ±yor  | 2024 Q2        |\n\n\n\n\n\n\n\n\n## Yetenekler\n≈ûu anda bir√ßok altyapƒ± √∂ƒüemiz var. ChatGPT uygulamasƒ±nda zaten bulunan t√ºm √∂ƒüeleri saƒülamayƒ± hedefliyoruz.\n\n| Yetenek                              | Durum   |\n|--------------------------------------|---------|\n| **Ekran Okuma**                      | OK      |\n| **Ekrandaki Metin veya Simgeye Tƒ±klama** | OK      |\n| **Ekrandaki Metin veya Simgeye Ta≈üƒ±ma** | OK      |\n| **Bir ≈ûeyler Yazma**                 | OK      |\n| **Herhangi Bir Tu≈üa Basma**          | OK      |\n| **Kaydƒ±rma**                         | OK      |\n| **Mikrofon**                         | OK      |\n| **Sistem Sesleri**                   | OK      |\n| **Bellek**                           | OK      |\n| **Uygulama A√ßma ve Kapatma**         | OK      |\n| **Bir URL A√ßma**                     | OK      |\n| **Pano**                             | OK      |\n| **Arama Motorlarƒ±**                  | OK      |\n| **Python Yazma ve √áalƒ±≈ütƒ±rma**       | OK      |\n| **SH (Shell) Yazma ve √áalƒ±≈ütƒ±rma**   | OK      |\n| **Telegram Hesabƒ±nƒ±zƒ± Kullanma**     | OK      |\n| **Bilgi Y√∂netimi**                   | OK      |\n| **[Daha fazla ara√ß ekle](https://github.com/onuratakan/gpt-computer-assistant/blob/master/gpt_computer_assistant/standard_tools.py)** | ?       |\n\n### √ñnceden Tanƒ±mlƒ± Ajanlar\nEƒüer etkinle≈ütirirseniz asistanƒ±nƒ±z bu ekiplerle √ßalƒ±≈üabilir:\n\n| Takƒ±m Adƒ±                               | Durum   |\n|-----------------------------------------|---------|\n| **search_on_internet_and_report_team**   | OK      |\n| **generate_code_with_aim_team_**         | OK      |\n| **[Kendi ekleyin](https://github.com/onuratakan/gpt-computer-assistant/blob/master/gpt_computer_assistant/teams.py)** | ?       |\n\n\n\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/ba590bf8-6059-4cb6-8c4e-6d105ce4edd2\" alt=\"Logo\"  >\n  </a>\n\n\n\n\n## Katkƒ±da Bulunanlar\n\n<a href=\"https://github.com/onuratakan/gpt-computer-assistant/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=onuratakan/gpt-computer-assistant\" />\n</a>\n\n\n\n</p>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.234375,
          "content": "\n  <a href=\"#\">\n    <img src=\"https://github.com/user-attachments/assets/27778034-29f5-4a71-b696-4e3f70760b26\" >\n  </a>\n</p>\n\n## What is GCA?\n\nHi, this is an open source framework to build vertical AI agent. We just support many llms and new technologies like mcp. You can build your own vertical ai agent army in few commands with the stucturized API.\n\n\n<p>\n\n\n\n  <p >\n    <a href=\"https://www.producthunt.com/posts/gpt-computer-assistant?embed=true&utm_source=badge-top-post-badge&utm_medium=badge&utm_souce=badge-gpt&#0045;computer&#0045;assistant\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/top-post-badge.svg?post_id=465468&theme=dark&period=daily\" alt=\"GPT&#0032;Computer&#0032;Assistant - Create&#0032;intelligence&#0032;for&#0032;your&#0032;products | Product Hunt\" width=\"200\"  /></a>\n    .\n    <a href=\"https://discord.gg/qApFmWMt8x\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Discord-Join?style=social&logo=discord\" width=120></a>\n    .\n    <a href=\"https://x.com/GPTCompAsst\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/X_App-Join?style=social&logo=x\" width=100></a>\n  </p>\n\n\n\n\n  <p>\n  <a href=\"https://www.python.org/\">\n  <img src=\"https://img.shields.io/badge/Made%20with-Python-1f425f.svg\" alt=\"Made_with_python\">\n  </a>\n  .\n  <img src=\"https://static.pepy.tech/personalized-badge/gpt-computer-assistant?period=total&units=international_system&left_color=grey&right_color=blue&left_text=PyPI%20Downloads\" alt=\"pypi_downloads\">\n  </p>\n\n\n\n\n\n<p align=\"center\">\n<br>\n\n  <br>\n</p>\n\n\n# Playground of GCA | NEW\n\nWith [playground.gca.dev](https://playground.gca.dev/) you are ready to test and create your own strategies for creating an Vertical AI Agent.\n\n- Playground sessions limited to <b>10 minute</b>.\n\n<a href=\"https://playground.gca.dev/\">\n  <img src=\"https://github.com/user-attachments/assets/125a1a15-0fee-4c7e-bfc5-1a23ef83c92d\" alt=\"Playground\"  width=1000>\n</a>\n\n<p align=\"center\">\n<br>\n  <br>\n\n</p>\n\n# GPT Computer Assistant(GCA)\nGCA is an AI agent framework designed to make computer use across Windows, macOS, and Ubuntu. GCA enables you to replace repetitive, small-logic-based tasks worker to an AI. There is an really important potential that we believe. Whether you‚Äôre a developer, analyst, or IT professional, GCA can empower you to accomplish more in less time.\n\n\nImagine this:\n\n\n\n- <b>Extract the tech stacks of xxx Company</b>             | Sales Development Representer\n- <b>Identify Relevant tables for Analysis for xxx</b>      | Data Analytics\n- <b>Check the logs to find core cause of this incident</b> | Technical Support Engineer\n- <b>Making CloudFlare Security Settings</b>                | Security Specialist\n\n\nThese examples shows how GCA is realize the concept of <b>Vertical AI Agents</b> solutions that not only replicate human tasks, GCA also in the beyond of human speed at same cases.\n\n\n<p align=\"center\">\n<br>\n  <br>\n\n</p>\n\n\n## How GCA Works?\n\n\nGCA is a Python-based project that runs on multiple operating systems, including Windows, macOS, and Ubuntu. It integrates external concepts, like the Model Context Protocol (MCP), along with its own modules, to interact with and control a computer efficiently. The system performs both routine and advanced tasks by mimicking human-like actions and applying computational precision.\n\n\n\n### 1.\tHuman-like Actions:\nGCA can replicate common user actions, such as:\n-\t<b>Clicking</b>: Interact with buttons or other UI elements.\n-\t<b>Reading</b>: Recognize and interpret text on the screen.\n-\t<b>Scrolling</b>: Navigate through documents or web pages.\n-\t<b>Typing</b>: Enter text into forms or other input fields.\n### 2.\tAdvanced Capabilities:\nThrough MCP and GCA‚Äôs own modules, it achieves tasks that go beyond standard human interaction, such as:\n\n-\t<b>Updating dependencies</b> of a project in seconds.\n-\t<b>Analyzing entire database</b> tables to locate specific data almost instantly.\n- <b>Automating cloud security</b> configurations with minimal input.\n\n\n\n\n<p align=\"center\">\n<br>\n  <br>\n  <br>\n\n</p>\n\n\n## Prequisites\n- Python 3.10\n\n<p align=\"center\">\n<br>\n  <br>\n\n</p>\n\n## Using GCA.dev Cloud\n\n<b>Installation</b>\n```console\npip install gpt-computer-assistant\n```\n\nSingle Instance:\n```python\nfrom gpt_computer_assistant import Cloud, Task, TypeVerifier\n\n# Starting instance\nagent = Cloud.agent()\n\n\n# Run task\nstar_number = agent.run(\n    Task(\n        \"Extract the github star number of https://github.com/Upsonic/gpt-computer-assistant\", \n        TypeVerifier(\"integer\")\n    )\n)\nprint(star_number)\n\n\nagent.close()\n```\n\n<img src=\"https://github.com/user-attachments/assets/3fd70530-6b86-43b4-9025-dce7853e4a38\" alt=\"Cloud\"  width=1000>\n\n\n\n\n<p align=\"center\">\n<br>\n<br>\n<br>\n</p>\n\n\n## Self-Hosted GCA Server\n\n### Docker\n\n**Pulling Image**\n\n* If you are using ARM computer like M Chipset macbooks you should use *ARM64* at the end.\n\n```console\ndocker pull upsonic/gca_docker_ubuntu:dev0-AMD64\n```\n\n**Starting container**\n\n```console\ndocker run -d -p 5901:5901 -p 7541:7541 upsonic/gca_docker_ubuntu:dev0-AMD64\n```\n\n**LLM Settings&Using**\n\n```python\nfrom gpt_computer_assistant import docker\n\n# Starting instance\nagent = docker.agent(\"http://localhost:7541/\")\n\n# Connecting to OpenAI and Anthropic\nagent.client.save_model(\"gpt-4o\")\nagent.client.save_openai_api_key(\"sk-**\")\nagent.client.save_anthropic_api_key(\"sk-**\")\n\n# Asking and getting result\nresult = agent.request(\"Extract the tech stacks of gpt-computer-assitant Company\", \"i want a list\")\nprint(result)\n\nagent.close()\n```\n\n\n<p align=\"center\">\n<br>\n<br>\n</p>\n\n\n### Local\n<b>Installation</b>\n```console\npip install 'gpt-computer-assistant[base]'\npip install 'gpt-computer-assistant[api]'\n```\n\n<b>LLM Settings&Using</b>\n\n```python\nfrom gpt_computer_assistant import local\n\n# Starting agent\nagent = local.agent()\n\n# Connecting to OpenAI and Anthropic\nagent.client.save_model(\"gpt-4o\")\nagent.client.save_openai_api_key(\"sk-**\")\nagent.client.save_anthropic_api_key(\"sk-**\")\n\n# Asking and getting result\nresult = agent.request(\"Extract the tech stacks of gpt-computer-assitant Company\", \"i want a list\")\nprint(result)\n\nagent.close()\n```\n\n\n<img width=\"1000\" src=\"https://github.com/user-attachments/assets/327cdceb-49e7-4a8a-a724-e386553f43d8\">\n\n\n<p align=\"center\">\n<br>\n  <br>\n  <br>\n</p>\n\n\n\n## Adding Custom MCP Server to GCA\n\n```python\ninstance.client.add_mcp_server(\"websearch\", \"npx\", [\"-y\", \"@mzxrai/mcp-webresearch\"])\n```\n\n\n\n\n## Roadmap\n| Feature                         | Status       | Target Release |\n|---------------------------------|--------------|----------------|\n| Clear Chat History         | Completed    | Q2 2024        |\n| Long Audios Support (Split 20mb)      | Completed    | Q2 2024        |\n| Text Inputs               | Completed      | Q2 2024        |\n| Just Text Mode (Mute Speech)           | Completed  | Q2 2024        |\n| Added profiles (Different Chats)          | Completed    | Q2 2024        |\n| More Feedback About Assistant Status                  | Completed    | Q2 2024        |\n| Local Model Vision and Text (With Ollama, and vision models)  | Completed  | Q2 2024        |\n| **Our Customizable Agent Infrastructure**              | Completed      | Q2 2024        |\n| Supporting Groq Models  | Completed  | Q2 2024        |\n| **Adding Custom Tools**  | Completed  | Q2 2024        |\n| Click on something on the screen (text and icon)              | Completed      | Q2 2024        |\n| New UI              | Completed      | Q2 2024        |\n| Native Applications, exe, dmg              | Completed     | Q3 2024        |\n| **Collaborated Speaking Different Voice Models on long responses.**              | Completed     | Q2 2024        |\n| **Auto Stop Recording, when you complate talking**              | Completed     | Q2 2024        |\n| **Wakeup Word**              | Completed     | Q2 2024        |\n| **Continuously Conversations**              | Completed     | Q2 2024        |\n| **Adding more capability on device**              | Completed     | Q2 2024        |\n| **Local TTS**              | Completed     | Q3 2024        |\n| **Local STT**              | Completed     | Q3 2024        |\n| Tray Menu              | Completed     | Q3 2024        |\n| New Line (Shift + Enter)              | Completed     | Q4 2024        |\n| Copy Pasting Text Compatibility            | Completed     | Q4 2024        |\n| **Global Hotkey**              | On the way     | Q3 2024        |\n| DeepFace Integration (Facial Recognition)                    | Planned  | Q3 2024        |\n\n\n\n\n\n\n\n## Capabilities\nAt this time we have many infrastructure elements. We just aim to provide whole things that already in ChatGPT app.\n\n| Capability                         | Status                      |\n|------------------------------------|----------------------------------|\n| **Local LLM with Vision (Ollama)**                    |            OK                    |\n| Local text-to-speech                    |            OK                    |\n| Local speech-to-text                    |            OK                    |\n| **Screen Read**                    |            OK                    |\n| **Click to and Text or Icon in the screen**                    |            OK                    |\n| **Move to and Text or Icon in the screen**                    |            OK                    |\n| **Typing Something**                    |            OK                    |\n| **Pressing to Any Key**                    |            OK                    |\n| **Scrolling**                    |            OK                    |\n| **Microphone**                     |            OK                    |\n| **System Audio**                  |            OK                    |\n| **Memory**                         |            OK                    |\n| **Open and Close App**             |            OK                    |\n| **Open a URL**                     |            OK                    |\n| **Clipboard**                       |            OK                    |\n| **Search Engines**                 |            OK                    |\n| **Writing and running Python**     |            OK                    |\n| **Writing and running SH**    |            OK                    |\n| **Using your Telegram Account**    |            OK                    |\n| **Knowledge Management**           |            OK                    |\n| **[Add more tool](https://github.com/onuratakan/gpt-computer-assistant/blob/master/gpt_computer_assistant/standard_tools.py)**           |            ?                    |\n\n### Predefined Agents\nIf you enable it your assistant will work with these teams:\n\n| Team Name                         | Status                      |\n|------------------------------------|----------------------------------|\n| **search_on_internet_and_report_team**                    |            OK                    |\n| **generate_code_with_aim_team_**                    |            OK                    |\n| **[Add your own one](https://github.com/onuratakan/gpt-computer-assistant/blob/master/gpt_computer_assistant/teams.py)**                    |            ?                    |\n\n\n\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/ba590bf8-6059-4cb6-8c4e-6d105ce4edd2\" alt=\"Logo\"  >\n  </a>\n\n\n\n\n## Contributors\n\n<a href=\"https://github.com/upsonic/gpt-computer-assistant/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=upsonic/gpt-computer-assistant\" />\n</a>\n"
        },
        {
          "name": "README.zh_CN.md",
          "type": "blob",
          "size": 6.283203125,
          "content": "<p align=\"center\">\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/176c8ddb-219e-444e-8782-1f8c37a92678\" alt=\"Logo\" width=\"250\" >\n  </a>\n\n  <h3 align=\"center\">GPT ËÆ°ÁÆóÊú∫Âä©Êâã</h3>\n\n  <p align=\"center\">\n    ÈÄÇÁî®‰∫é Windows„ÄÅMacOS Âíå Ubuntu ÁöÑ gpt-4o\n    <br />\n   <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\"><strong>ÊñáÊ°£</strong></a>\n   .\n    <a href=\"https://github.com/onuratakan/gpt-computer-assistant/#Capabilities\"><strong>Êé¢Á¥¢ÂäüËÉΩ ¬ª</strong></a>\n    <br />\n    </p>\n    <br>\n    <p align=\"center\">\n     <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&logo=windows&logoColor=white\" alt=\"windows\">\n   </a>\n   <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/mac%20os-000000?style=for-the-badge&logo=apple&logoColor=white\" alt=\"macos\">\n   </a>\n    <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&logo=linux&logoColor=black\" alt=\"linux\">\n   </a>\n  <br> \n\n  </p>\n  <p align=\"center\">\n  <a href=\"https://www.python.org/\">\n  <img src=\"https://img.shields.io/badge/Made%20with-Python-1f425f.svg\" alt=\"Made_with_python\">\n  </a>\n  .\n  <img src=\"https://static.pepy.tech/personalized-badge/gpt-computer-assistant?period=total&units=international_system&left_color=grey&right_color=blue&left_text=PyPI%20Downloads\" alt=\"pypi_downloads\">\n  </p>\n\n\n  <p align=\"center\">\n   <a href=\"https://discord.gg/qApFmWMt8x\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Discord-Join?style=social&logo=discord\" width=150></a>\n   <a href=\"https://x.com/GPTCompAsst\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/X-Join?style=social&logo=x\" width=100></a>\n\n  </p>\n\n|[ENGLISH](README.md)|ÁÆÄ‰Ωì‰∏≠Êñá|[Ê≠£È´î‰∏≠Êñá](README.zh_TW.md)|[T√úRK√áE](README.TR.md)\n\n# GPT ËÆ°ÁÆóÊú∫Âä©Êâã\n‰Ω†Â•ΩÔºåËøôÊòØ‰∏Ä‰∏™Â∞Ü ChatGPT MacOS Â∫îÁî®Á®ãÂ∫èÊèê‰æõÁªô Windows Âíå Linux ÁöÑÊõø‰ª£Â∑•‰Ωú„ÄÇÂõ†Ê≠§ÔºåËøôÊòØ‰∏Ä‰∏™ÂÖ®Êñ∞‰∏îÁ®≥ÂÆöÁöÑÈ°πÁõÆ„ÄÇÊ≠§Êó∂ÔºåÊÇ®ÂèØ‰ª•ËΩªÊùæÂú∞Â∞ÜÂÖ∂‰Ωú‰∏∫ Python Â∫ìÂÆâË£ÖÔºå‰ΩÜÊàë‰ª¨Â∞ÜÂáÜÂ§á‰∏Ä‰∏™ÊµÅÊ∞¥Á∫øÊù•Êèê‰æõÊú¨Êú∫ÂÆâË£ÖËÑöÊú¨ (.exe)„ÄÇ\n\nÁî± <a href=\"https://github.com/Upsonic/Tiger\"><strong>Upsonic Tiger üêÖ</strong></a> Êèê‰æõÊîØÊåÅÁöÑÂäüËÉΩÈõÜÊàê‰∏≠ÂøÉ„ÄÇ\n\n## ÂÆâË£Ö && ËøêË°å\nÈúÄË¶Å >= Python 3.9\n```console\npip3 install 'gpt-computer-assistant[default]'\n```\n\n```console\ncomputerassistant\n```\n\n\n\n### ÊºîÁ§∫ËßÜÈ¢ëÔºà1 ÂàÜÈíüÔºâ\n\nhttps://github.com/onuratakan/gpt-computer-assistant/assets/41792982/26ae3624-e619-44d6-9b04-f39cf1ac1f8f\n\n\n\n## ‰ΩøÁî®Ê°à‰æã\n\n<table>\n  <tr>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/b4a4f11e-5588-4656-b5d7-b612a9a2855b\" alt=\"Take Meeting Notes\" width=\"500\"/></td>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/49eeac70-b33a-4ec4-8125-64127621ed62\" alt=\"Daily Assistant\" width=\"500\"/></td>\n  </tr>\n  <tr>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/10b69a18-033c-4d81-8ac9-f4e3c65b59c3\" alt=\"Read Docs\" width=\"500\"/></td>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/0f483bae-ffaf-4311-8653-c0dc64fb5ebe\" alt=\"Coding Assistant\" width=\"500\"/></td>   \n\n  </tr>\n</table>\n\n\n\n## Ë∑ØÁ∫øÂõæ\n\n| ÂäüËÉΩ                             | Áä∂ÊÄÅ         | ÁõÆÊ†áÂèëÂ∏É      |\n|---------------------------------|--------------|--------------|\n| Ê∏ÖÈô§ËÅäÂ§©ËÆ∞ÂΩï                     | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| ÈïøÈü≥È¢ëÊîØÊåÅÔºàÊãÜÂàÜ 20mbÔºâ          | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| ÊñáÊú¨ËæìÂÖ•                          | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| ‰ªÖÊñáÊú¨Ê®°ÂºèÔºàÈùôÈü≥Ôºâ                | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| Ê∑ªÂä†ÈÖçÁΩÆÊñá‰ª∂Ôºà‰∏çÂêåËÅäÂ§©Ôºâ           | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| Êõ¥Â§öÂÖ≥‰∫éÂä©ÊâãÁä∂ÊÄÅÁöÑÂèçÈ¶à             | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êñ∞ UI**                        | ËÆ°Âàí‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êàë‰ª¨ÁöÑËá™ÂÆö‰πâ‰ª£ÁêÜÂü∫Á°ÄËÆæÊñΩ**        | ËÆ°Âàí‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êú¨Êú∫Â∫îÁî®Á®ãÂ∫èÔºåexeÔºådmgÔºåappimage** | ËÆ°Âàí‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **DeepFace ÈõÜÊàêÔºàÈù¢ÈÉ®ËØÜÂà´Ôºâ**      | ËÆ°Âàí‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êú¨Âú∞Ê®°ÂºèÔºà‰ΩøÁî® OllamaÔºåËØ≠Èü≥ÂíåËßÜËßâÊ®°ÂûãÔºâ** | ËÆ°Âàí‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n\n\n#### ‰ª£ÁêÜÂü∫Á°ÄËÆæÊñΩ | Âç≥Â∞ÜÊé®Âá∫\n\n```python\nfrom gpt-comptuer-assistant import crew, agent\n\ncoder = agent(\"‰Ω†ÊòØ‰∏ÄÂêçÈ´òÁ∫ß Python ÂºÄÂèëËÄÖ\")\n\nmanager = agent(\"‰Ω†ÊòØ‰∏ÄÂêçÈ´òÁ∫ßÈ°πÁõÆÁªèÁêÜ\")\n\nassistant = crew(\n [coder, manager]\n)\n\nassistant.gui()\n```\n\n\n\n\n## ÂäüËÉΩ\nÊ≠§Êó∂Êàë‰ª¨Êã•ÊúâËÆ∏Â§öÂü∫Á°ÄËÆæÊñΩÂÖÉÁ¥†„ÄÇÊàë‰ª¨Âè™ÊòØÂ∏åÊúõÊèê‰æõ ChatGPT Â∫îÁî®‰∏≠Â∑≤ÁªèÂ≠òÂú®ÁöÑÊâÄÊúâÂäüËÉΩ„ÄÇ\n\n| ÂäüËÉΩ                              | ÊèèËø∞                          |\n|-----------------------------------|-------------------------------|\n| **Â±èÂπïËØªÂèñ**                      |            OK                 |\n| **È∫¶ÂÖãÈ£é**                        |            OK                 |\n| **Á≥ªÁªüÈü≥È¢ë**                      |            OK                 |\n| **ÂÜÖÂ≠ò**                          |            OK                 |\n| **ÊâìÂºÄÂíåÂÖ≥Èó≠Â∫îÁî®Á®ãÂ∫è**              |            OK                 |\n| **ÊâìÂºÄ‰∏Ä‰∏™ URL**                  |            OK                 |\n| **Ââ™Ë¥¥Êùø**                        |            OK                 |\n| **ÊêúÁ¥¢ÂºïÊìé**                      |            OK                 |\n| **ÁºñÂÜôÂíåËøêË°å Python**            |            OK                 |\n| **ÁºñÂÜôÂíåËøêË°å SH**                |            OK                 |\n| **‰ΩøÁî®‰Ω†ÁöÑ Telegram Ë¥¶Êà∑**        |            OK                 |\n| **Áü•ËØÜÁÆ°ÁêÜ**                      |            OK                 |\n\n\n\n\n\n\n\n## Áî®Ê≥ï\n\n![options](https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/20972b1e-6d4f-4314-8470-f2fcf79b6e6d)\n\n\n\n** Á¨¨‰∏ÄÊ¨°ÂçïÂáªÂåÖÂê´È∫¶ÂÖãÈ£éÊàñÁ≥ªÁªüÈü≥È¢ëÁöÑÈÄâÈ°πÂêéÔºåÈúÄË¶ÅÂÜçÊ¨°ÂçïÂáªÁõ∏ÂêåÈÄâÈ°π‰ª•ÂÅúÊ≠¢„ÄÇ\n\n\n\n## Ë¥°ÁåÆËÄÖ\n\n<a href=\"https://github.com/onuratakan/gpt-computer-assistant/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=onuratakan/gpt-computer-assistant\" />\n</a>"
        },
        {
          "name": "README.zh_TW.md",
          "type": "blob",
          "size": 7.447265625,
          "content": "\n\n<p align=\"center\">\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/176c8ddb-219e-444e-8782-1f8c37a92678\" alt=\"Logo\" width=\"250\" >\n  </a>\n\n  <h3 align=\"center\">GPT ÈõªËÖ¶Âä©Êâã</h3>\n  <p align=\"center\">\n  <a href=\"https://discord.gg/qApFmWMt8x\"><img alt=\"Static Badge\" src=\"https://img.shields.io/discord/1148697961639968859.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2\" width=100></a>\n  </p>\n\n  <p align=\"center\">\n    ÈÅ©Áî®Êñº Windows„ÄÅMacOS Âíå Ubuntu ÁöÑ gpt-4o\n    <br />\n   <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\"><strong>Êñá‰ª∂</strong></a>\n   .\n    <a href=\"https://github.com/onuratakan/gpt-computer-assistant/#Capabilities\"><strong>Êé¢Á¥¢ÂäüËÉΩ ¬ª</strong></a>\n    <br />\n    </p>\n    <br>\n    <p align=\"center\">\n     <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&logo=windows&logoColor=white\" alt=\"windows\">\n   </a>\n   <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/mac%20os-000000?style=for-the-badge&logo=apple&logoColor=white\" alt=\"macos\">\n   </a>\n    <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki\">\n   <img src=\"https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&logo=linux&logoColor=black\" alt=\"linux\">\n   </a>\n  <br> \n\n  </p>\n  <p align=\"center\">\n  <a href=\"https://www.python.org/\">\n  <img src=\"https://img.shields.io/badge/Made%20with-Python-1f425f.svg\" alt=\"Made_with_python\">\n  </a>\n  .\n  <img src=\"https://static.pepy.tech/personalized-badge/gpt-computer-assistant?period=total&units=international_system&left_color=grey&right_color=blue&left_text=PyPI%20Downloads\" alt=\"pypi_downloads\">\n  </p>\n\n\n  <p align=\"center\">\n   <a href=\"https://x.com/GPTCompAsst\"><img alt=\"Static Badge\" src=\"https://img.shields.io/twitter/follow/GPTCompAsst?style=social\" width=160></a>\n</p>\n\n|[ENGLISH](README.md)|[Á∞°È´î‰∏≠Êñá](README.zh_CN.md)|Ê≠£È´î‰∏≠Êñá|[T√úRK√áE](README.TR.md)\n\n# GPT ÈõªËÖ¶Âä©Êâã\nÂó®ÔºåÈÄôÊòØÁÇ∫‰∫ÜÂ∞á ChatGPT MacOS ÊáâÁî®Á®ãÂºèÊèê‰æõÁµ¶ Windows Âíå Linux ÁöÑÊõø‰ª£ÊñπÊ°à„ÄÇÈÄôÊ®£ÂÅöÂèØ‰ª•Êèê‰æõ‰∏ÄÂÄãÊñ∞ÈÆÆ‰∏îÁ©©ÂÆöÁöÑËß£Ê±∫ÊñπÊ°à„ÄÇÈÄôÊ¨°ÊÇ®ÂèØ‰ª•ËºïÈ¨ÜÂú∞ÂÆâË£ùÁÇ∫ Python Â∫´Ôºå‰ΩÜÊàëÂÄëÂ∞áÊ∫ñÂÇô‰∏ÄÂÄãÊµÅÁ®ãÔºåÊèê‰æõÊú¨Ê©üÂÆâË£ùËÖ≥Êú¨Ôºà.exeÔºâ„ÄÇ\n\nÁî± <a href=\"https://github.com/Upsonic/Tiger\"><strong>Upsonic Tiger üêÖ</strong></a> Êèê‰æõÊîØÊåÅÁöÑÂäüËÉΩÈõÜÊàê‰∏≠ÂøÉ„ÄÇ\n\n <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki/Usage\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Local_Models-Available-blue\" width=150></a>\n <br>\n <a href=\"https://github.com/onuratakan/gpt-computer-assistant/wiki/Usage\"><img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Groq-Available-blue\" width=100></a>\n\n\n\n## ÂÆâË£ù && ÈÅãË°å\nÈúÄË¶Å >= Python 3.9\n```console\npip3 install 'gpt-computer-assistant[default]'\n```\n\n```console\ncomputerassistant\n```\n\n### ‰ª£ÁêÜÂü∫Á§éË®≠ÊñΩ\n\nÈÄôÊ®£‰∏Ä‰æÜÔºåÊÇ®ÂèØ‰ª•ÂâµÂª∫ `crewai` ‰ª£ÁêÜÔºå‰∏¶Â∞áÂÖ∂Áî®Êñº gpt-computer-assistant ÂúñÂΩ¢Áî®Êà∂ÁïåÈù¢ÂíåÂ∑•ÂÖ∑‰∏≠„ÄÇ\n\n\n```console\npip3 install 'gpt-computer-assistant[agentic]'\n```\n\n```python\nfrom gpt_computer_assistant import Agent, start\n\nmanager = Agent(\n  role='Project Manager',\n  goal='understands project needs and assist coder',\n  backstory=\"\"\"You're a manager at a large company.\"\"\",\n)\n\ncoder = Agent(\n  role='Senior Python Coder',\n  goal='writing python scripts and copying to clipboard',\n  backstory=\"\"\"You're a python developer at a large company.\"\"\",\n)\n\n\nstart()\n```\n\n\n### Êñ∞Â¢ûËá™Ë®ÇÂ∑•ÂÖ∑\n\nÁèæÂú®ÊÇ®ÂèØ‰ª•Ê∑ªÂä†Âú®‰ª£ÁêÜÂü∫Á§éË®≠ÊñΩÂíåÂä©ÁêÜÈÄ≤Á®ã‰∏≠ÈÅãË°åÁöÑËá™Ë®ÇÂ∑•ÂÖ∑„ÄÇ\n\n\n```python\nfrom gpt_computer_assistant import Tool, start\n\n@Tool\ndef sum_tool(first_number: int, second_number: int) -> str:\n    \"\"\"Useful for when you need to sum two numbers together.\"\"\"\n    return first_number + second_number\n\nstart()\n```\n\n\nhttps://github.com/onuratakan/gpt-computer-assistant/assets/41792982/26ae3624-e619-44d6-9b04-f39cf1ac1f8f\n\n<p align=\"center\">\n  <a href=\"#\">\n    <img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/94ac619c-1f29-4fe6-b3cb-85a03932646b\" alt=\"Logo\"  >\n  </a>\n</p>\n\n\n\n\n\n\n\n## ‰ΩøÁî®ÊñπÂºè\n![ÈÅ∏È†Ö](https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/54b39347-98e0-4ee4-a715-9128c40dbcd4)\n\n\n## ‰ΩøÁî®Ê°à‰æã\n\n<table>\n  <tr>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/b4a4f11e-5588-4656-b5d7-b612a9a2855b\" alt=\"Take Meeting Notes\" width=\"500\"/></td>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/49eeac70-b33a-4ec4-8125-64127621ed62\" alt=\"Daily Assistant\" width=\"500\"/></td>\n  </tr>\n  <tr>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/10b69a18-033c-4d81-8ac9-f4e3c65b59c3\" alt=\"Read Docs\" width=\"500\"/></td>\n    <td><img src=\"https://github.com/onuratakan/gpt-computer-assistant/assets/41792982/0f483bae-ffaf-4311-8653-c0dc64fb5ebe\" alt=\"Coding Assistant\" width=\"500\"/></td>   \n\n  </tr>\n</table>\n\n\n\n\n\n\n## Ë∑ØÁ∑öÂúñ\n\n| ÂäüËÉΩ                             | ÁãÄÊÖã         | ÁõÆÊ®ôÁôºÂ∏É      |\n|---------------------------------|--------------|--------------|\n| Ê∏ÖÈô§ËÅäÂ§©Ë®òÈåÑ                     | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| Èï∑Èü≥Ë®äÊîØÊåÅÔºàÊãÜÂàÜ 20mbÔºâ          | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| ÊñáÊú¨Ëº∏ÂÖ•                          | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| ÂÉÖÊñáÊú¨Ê®°ÂºèÔºàÈùúÈü≥Ôºâ                | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| Ê∑ªÂä†ÈÖçÁΩÆÊñá‰ª∂Ôºà‰∏çÂêåËÅäÂ§©Ôºâ           | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| Êõ¥Â§öÈóúÊñºÂä©ÊâãÁãÄÊÖãÁöÑÂõûÈ•ã             | Â∑≤ÂÆåÊàê       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êñ∞ UI**                        | Ë®àÂäÉ‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **ÊàëÂÄëÁöÑËá™Ë®Ç‰ª£ÁêÜÂü∫Á§éË®≠ÊñΩ**        | Ë®àÂäÉ‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êú¨Ê©üÊáâÁî®Á®ãÂºèÔºåexeÔºådmgÔºåappimage** | Ë®àÂäÉ‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **DeepFace ÈõÜÊàêÔºàËáâÈÉ®Ë≠òÂà•Ôºâ**      | Ë®àÂäÉ‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n| **Êú¨Âú∞Ê®°ÂºèÔºà‰ΩøÁî® OllamaÔºåË™ûÈü≥ÂíåË¶ñË¶∫Ê®°ÂûãÔºâ** | Ë®àÂäÉ‰∏≠       | 2024 Âπ¥Á¨¨‰∫åÂ≠£Â∫¶|\n\n\n\n\n\n\n\n\n## ÂäüËÉΩ\nÊ≠§ÊôÇÊàëÂÄëÊìÅÊúâË®±Â§öÂü∫Á§éË®≠ÊñΩÂÖÉÁ¥†„ÄÇÊàëÂÄëÂè™ÊòØÂ∏åÊúõÊèê‰æõ ChatGPT ÊáâÁî®‰∏≠Â∑≤Á∂ìÂ≠òÂú®ÁöÑÊâÄÊúâÂäüËÉΩ„ÄÇ\n\n| ÂäüËÉΩ                              | ÊèèËø∞                          |\n|-----------------------------------|-------------------------------|\n| **Ëû¢ÂπïËÆÄÂèñ**                      |            OK                 |\n| **È∫•ÂÖãÈ¢®**                        |            OK                 |\n| **Á≥ªÁµ±Èü≥Ë®ä**                      |            OK                 |\n| **Ë®òÊÜ∂È´î**                          |            OK                 |\n| **ÊâìÈñãÂíåÈóúÈñâÊáâÁî®Á®ãÂºè**              |            OK                 |\n| **ÊâìÈñã‰∏ÄÂÄã URL**                  |            OK                 |\n| **Ââ™Ë≤ºÁ∞ø**                        |            OK                 |\n| **ÊêúÂ∞ãÂºïÊìé**                      |            OK                 |\n| **Á∑®ÂØ´ÂíåÈÅãË°å Python**            |            OK                 |\n| **Á∑®ÂØ´ÂíåÈÅãË°å SH**                |            OK                 |\n| **‰ΩøÁî®‰Ω†ÁöÑ Telegram Â∏≥Êà∂**        |            OK                 |\n| **Áü•Ë≠òÁÆ°ÁêÜ**                      |            OK                 |\n\n\n\n\n\n\n\n\n\n\n## Ë≤¢ÁçªËÄÖ\n\n<a href=\"https://github.com/onuratakan/gpt-computer-assistant/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=onuratakan/gpt-computer-assistant\" />\n</a>\n"
        },
        {
          "name": "build_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "bump.py",
          "type": "blob",
          "size": 3.62109375,
          "content": "\"\"\"Module for managing the version updates of a python package.\"\"\"\n\nimport os\nimport sys\nimport re\nimport logging\nimport shlex\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef read_version():\n    \"\"\"\n    Gets and extracts the version number from the '__init__.py' file of\n    a Python package.\n\n    Returns:\n        str or None: The version number of the package if found, otherwise None.\n    \"\"\"\n    with open(\"gpt_computer_assistant/__init__.py\", \"r\") as file:\n        for line in file:\n            match = re.search(r\"__version__ = '(.*)'\", line)\n            if match:\n                return match.group(1)\n\n\ndef increment_version(part, version):\n    \"\"\"\n    Simple function that increments the version number based on the given part\n    i.e., ('major', 'minor', or 'patch').\n\n    Notes:\n        Splits the version string into major, minor, and patch components, then\n        increments the specified part by one\n\n    Args:\n        part (str): The part of the version number to increment\n            ('major', 'minor', or 'patch').\n        version (str): The current version number in 'major.minor.patch' format.\n\n    Returns:\n        str: String containing new changes made to the version.\n    \"\"\"\n    major, minor, patch = map(int, version.split(\".\"))\n    if part == \"major\":\n        major += 1\n        minor = 0\n        patch = 0\n    elif part == \"minor\":\n        minor += 1\n        patch = 0\n    elif part == \"patch\":\n        patch += 1\n    return f\"{major}.{minor}.{patch}\"\n\n\ndef write_version(version):\n    \"\"\"\n    Updates the `__version__` variable in the `__init__.py` file of the\n    `gpt_computer_assistant` package.\n\n    Args:\n        version (str): The new version number to replace the existing one.\n    \"\"\"\n    with open(\"gpt_computer_assistant/__init__.py\", \"r+\") as file:\n        content = file.read()\n        content = re.sub(r\"__version__ = '.*'\", f\"__version__ = '{version}'\", content)  # fmt: off\n        file.seek(0)\n        file.write(content)\n\n\ndef update_version(version):\n    \"\"\"\n    Updates the version number found in a list of files.\n\n    Args:\n        version (str): The new version number to replace the existing one.\n    \"\"\"\n    files = [\"setup.py\"]\n    for file in files:\n        with open(file, \"r+\") as f:\n            content = f.read()\n            content = re.sub(r'    version=\".*\"', f'    version=\"{version}\"', content)  # fmt: off\n            f.seek(0)\n            f.write(content)\n\n\ndef create_tag(version):\n    \"\"\"\n    Uses the `os.system()` to create a `Git tag` for a specified version.\n\n    Args:\n        version (str): The version number for the git tag.\n    \"\"\"\n    os.system(f\"git tag v{shlex.quote(version)}\")\n\n\ndef create_commit(version):\n    \"\"\"\n    Uses `os.system()` to add and commit the changed version number\n    to the Git repository.\n\n    Args:\n        version (str): Version number included in the commit message.\n    \"\"\"\n    os.system(\"git add .\")\n    os.system(f\"git commit -m 'Changed version number with v{shlex.quote(version)}'\")\n\n\ndef push():\n    \"\"\"Pushes changes and tags to the repository.\"\"\"\n    os.system(\"git push\")\n    os.system(\"git push --tag\")\n\n\ndef main():\n    \"\"\"The main function for managing version updates.\"\"\"\n    valid_parts = [\"major\", \"minor\", \"patch\"]\n    if len(sys.argv) != 2 or sys.argv[1] not in valid_parts:\n        logger.error(f\"Usage: python version.py <{'|'.join(valid_parts)}>\")\n        sys.exit(1)\n\n    part = sys.argv[1]\n    version = read_version()\n    new_version = increment_version(part, version)\n    write_version(new_version)\n    update_version(new_version)\n    create_commit(new_version)\n    create_tag(new_version)\n    push()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "example_use_cases",
          "type": "tree",
          "content": null
        },
        {
          "name": "gca_setup_generator.py",
          "type": "blob",
          "size": 0.33984375,
          "content": "# Read the contents of setup.py\nwith open(\"setup.py\", \"r\") as file:\n    setup_content = file.read()\n\n# Replace the project name\nsetup_content = setup_content.replace(\n    \"\"\"name=\"gpt_computer_assistant\",\"\"\", \"\"\"name=\"gcadev\",\"\"\"\n)\n\n# Write the modified content to gca_setup.py\nwith open(\"gca_setup.py\", \"w\") as file:\n    file.write(setup_content)\n"
        },
        {
          "name": "gpt_computer_assistant",
          "type": "tree",
          "content": null
        },
        {
          "name": "project.toml",
          "type": "blob",
          "size": 0.0498046875,
          "content": "[tool.black]\nline-length = 120\n\ninclude = '\\.pyi?$'"
        },
        {
          "name": "refactor.py",
          "type": "blob",
          "size": 0.4111328125,
          "content": "import os\n\n\ndef install_refactor_tool():\n    os.system(\"pip install ruff==0.6.0\")\n\n\ndef refactor():\n    os.system(\"ruff check --fix\")\n    os.system(\"ruff format\")\n\n\ndef create_commit():\n    os.system(\"git add .\")\n    os.system(\"git commit -m 'refactor: Scheduled refactoring'\")\n\n\ndef push():\n    os.system(\"git push\")\n\n\nif __name__ == \"__main__\":\n    install_refactor_tool()\n    refactor()\n    create_commit()\n    push()\n"
        },
        {
          "name": "requirements.in",
          "type": "blob",
          "size": 0.9443359375,
          "content": "langgraph==0.2.56\r\n#pyqt5==5.15.10\r\npyqt5==5.15.*\r\nscipy==1.13.1\r\npygame==2.5.2\r\nsoundcard==0.4.3\r\nopenai==1.57.0\r\nlangchain-google-genai==2.0.6\r\npython-dotenv==1.0.0\r\nupsonic==0.28.4\r\npyautogui==0.9.54\r\nsounddevice==0.4.6\r\nsoundfile==0.12.1\r\npydub==0.25.1\r\npyscreeze==0.1.30\r\npyperclip==1.8.2\r\npydantic==2.10.3\r\npillow==10.3.0\r\nlangchainhub==0.1.18\r\nlangchain-experimental==0.3.3\r\nopentelemetry-sdk==1.24.0\r\nopentelemetry-exporter-otlp==1.24.0\r\nlangchain-groq==0.2.1\r\nlangchain-openai==0.2.11\r\nlangchain==0.3.10\r\nlangchain-community==0.3.10\r\nlangchain-core==0.3.22\r\n\r\n# custom tools\r\npyperclip==1.8.2\r\ngoogle==3.0.0\r\nduckduckgo-search==5.3.0\r\nbeautifulsoup4==4.12.3\r\n\r\npytesseract==0.3.10\r\npywifi-controls==0.7\r\n\r\npynput==1.7.7\r\n\r\nkot==0.1.2\r\n\r\n\r\nscreeninfo==0.8.1\r\n\r\nanthropic==0.40.0\r\nlangchain-anthropic==0.3.0\r\n\r\n\r\n\r\nStrEnum==0.4.15\r\n\r\n\r\nlangchain-mcp==0.1.0a1\r\n\r\n\r\nwaitress==3.0.2\r\n\r\nlangchain-aws==0.2.9\r\n\r\nrich\r\n\r\nsentry-sdk==2.19.2\r\nsentry-sdk[opentelemetry]"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.87890625,
          "content": "langgraph==0.2.56\n#pyqt5==5.15.10\npyqt5==5.15.*\nscipy==1.13.1\npygame==2.5.2\nsoundcard==0.4.3\nopenai==1.57.0\nlangchain-google-genai==2.0.6\npython-dotenv==1.0.0\nupsonic==0.28.4\npyautogui==0.9.54\nsounddevice==0.4.6\nsoundfile==0.12.1\npydub==0.25.1\npyscreeze==0.1.30\npyperclip==1.8.2\npydantic==2.10.3\npillow==10.3.0\nlangchainhub==0.1.18\nlangchain-experimental==0.3.3\nopentelemetry-sdk==1.24.0\nopentelemetry-exporter-otlp==1.24.0\nlangchain-groq==0.2.1\nlangchain-openai==0.2.11\nlangchain==0.3.10\nlangchain-community==0.3.10\nlangchain-core==0.3.22\n\n# custom tools\npyperclip==1.8.2\ngoogle==3.0.0\nduckduckgo-search==5.3.0\nbeautifulsoup4==4.12.3\n\npytesseract==0.3.10\npywifi-controls==0.7\n\npynput==1.7.7\n\nkot==0.1.2\n\n\nscreeninfo==0.8.1\n\nanthropic==0.40.0\nlangchain-anthropic==0.3.0\n\nStrEnum==0.4.15\n\nlangchain-mcp==0.1.0a1\n\nwaitress==3.0.2\n\nlangchain-aws==0.2.9\nrich\n\nsentry-sdk==2.19.2\nsentry-sdk[opentelemetry]"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 0.0498046875,
          "content": "from gpt_computer_assistant import start\n\n\nstart()\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1494140625,
          "content": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup\nimport platform\n\n\n# Read the requirements from the requirements.txt file\nwith open(\"requirements.txt\") as fp:\n    install_requires = fp.read().splitlines()\n\nif platform.system() in [\"Windows\"]:\n    install_requires.append(\"AppOpener==1.7\")\n\nelif platform.system() == \"Darwin\":  # Darwin is the system name for macOS\n    install_requires.append(\n        \"MacAppOpener==0.0.5\"\n    )  # Replace with actual macOS specific package\n\n\nsetup(\n    name=\"gpt_computer_assistant\",\n    version=\"0.28.3\",\n    description=\"\"\"GPT\"\"\",\n    long_description=\"\".join(open(\"README.md\", encoding=\"utf-8\").readlines()),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/onuratakan/gpt-computer-assistant\",\n    author=\"Upsonic\",\n    author_email=\"onur@upsonic.co\",\n    license=\"MIT\",\n    packages=[\n        \"gpt_computer_assistant\",\n        \"gpt_computer_assistant.agent\",\n        \"gpt_computer_assistant.cu\",\n        \"gpt_computer_assistant.mcp\",\n        \"gpt_computer_assistant.gui\",\n        \"gpt_computer_assistant.screen\",\n        \"gpt_computer_assistant.utils\",\n        \"gpt_computer_assistant.audio\",\n        \"gpt_computer_assistant.audio.tts_providers\",\n        \"gpt_computer_assistant.audio.stt_providers\",\n    ],\n    include_package_data=True,\n    install_requires=[\"requests==2.32.3\", \"matplotlib==3.9.0\", \"sentry-sdk==2.19.2\", \"sentry-sdk[opentelemetry]\"],\n    entry_points={\n        \"console_scripts\": [\"computerassistant=gpt_computer_assistant.start:start\"],\n    },\n    python_requires=\">= 3.9\",\n    zip_safe=False,\n    extras_require={\n        \"base\": install_requires,\n        \"default\": install_requires,\n        \"agentic\": [\"crewai==0.30.11\"],\n        \"wakeword\": [\"pvporcupine\", \"pyaudio\"],\n        \"api\": [\n            \"flask==3.0.3\",\n        ],\n        \"display\": [\n\n            \"opencv-python\",\n        ],\n        \"local_tts\": [\n            \"tensorflow==2.17.0\",\n            \"datasets[audio]==2.20.0\",\n            \"sentencepiece==0.2.0\",\n            \"torch==2.4.0\",\n            \"transformers==4.43.3\",\n        ],\n        \"local_stt\": [\n            \"openai-whisper==20231117\",\n        ],\n    },\n)\n\n\n\n\n"
        }
      ]
    }
  ]
}