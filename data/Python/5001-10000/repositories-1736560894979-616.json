{
  "metadata": {
    "timestamp": 1736560894979,
    "page": 616,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DrewThomasson/ebook2audiobook",
      "stars": 5875,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0849609375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nemail.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.4150390625,
          "content": "# Read the doc: https://huggingface.co/docs/hub/spaces-sdks-docker\r\n# you will also find guides on how best to write your Dockerfile\r\n\r\n# Build with the command: \r\n# docker build --platform linux/amd64 -t ebook2audiobook . \r\n\r\nFROM python:3.12\r\n\r\n# Create and switch to a non-root user\r\nRUN useradd -m -u 1000 user\r\nUSER user\r\nENV PATH=\"/home/user/.local/bin:$PATH\"\r\n\r\n# Set a working directory for temporary operations\r\nWORKDIR /app\r\n\r\n# Install system packages\r\nUSER root\r\nRUN apt-get update && \\\r\n    apt-get install -y wget git calibre ffmpeg libmecab-dev mecab mecab-ipadic && \\\r\n    apt-get clean && \\\r\n    rm -rf /var/lib/apt/lists/*\r\n\r\n# Clone the GitHub repository and set it as the working directory\r\nUSER root\r\nRUN apt-get update && apt-get install -y git && apt-get clean && rm -rf /var/lib/apt/lists/*\r\nUSER user\r\nRUN git clone https://github.com/DrewThomasson/ebook2audiobook.git /home/user/app\r\n\r\n# Set the cloned repository as the base working directory\r\nWORKDIR /home/user/app\r\n\r\n#Install Python dependences from the ebook2audiobook repo\r\nRUN pip install --no-cache-dir --upgrade -r requirements.txt\r\n\r\n# Do a test run to make sure that the base models are pre-downloaded and baked into the image\r\n# RUN echo \"This is a test sentence.\" > test.txt \r\n# RUN python app.py --headless --ebook test.txt\r\n# RUN rm test.txt\r\n\r\n# Expose the required port\r\nEXPOSE 7860\r\n\r\n# Start the Gradio app from the repository\r\nCMD [\"python\", \"app.py\"]\r\n"
        },
        {
          "name": "DockerfileUtils",
          "type": "blob",
          "size": 1.2998046875,
          "content": "# Use a minimal Debian-based image with GNU libc 2.35 or later\r\nFROM debian:bookworm-slim\r\n\r\n# Set environment variables\r\nENV DEBIAN_FRONTEND=noninteractive\r\nENV LC_ALL=C.UTF-8\r\nENV LANG=C.UTF-8\r\nENV LANGUAGE=C.UTF-8\r\nENV QTWEBENGINE_CHROMIUM_FLAGS=\"--no-sandbox\"\r\n\r\n# Install required dependencies\r\nRUN apt-get update && \\\r\n    apt-get install -y --no-install-recommends \\\r\n    wget \\\r\n    xz-utils \\\r\n    python3 \\\r\n    python3-pip \\\r\n    ffmpeg \\\r\n    libegl1 \\\r\n    libopengl0 \\\r\n    libgl1-mesa-glx \\\r\n    libxcb-cursor0 \\\r\n    libxkbcommon0 \\\r\n    libxkbfile1 \\\r\n    libnss3 \\\r\n    libx11-6 \\\r\n    libxext6 \\\r\n    libxrender1 \\\r\n    libxtst6 \\\r\n    libxrandr2 \\\r\n    libxcomposite1 \\\r\n    qtbase5-dev \\\r\n    libqt5webenginecore5 \\\r\n    libqt5webenginewidgets5 \\\r\n    libqt5webchannel5 \\\r\n    libqt5websockets5 && \\\r\n    rm -rf /var/lib/apt/lists/*\r\n\r\n# Install Calibre (specifically for CLI use like ebook-convert)\r\nRUN wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin\r\n\r\n# Add Calibre's CLI tools to PATH\r\nENV PATH=\"/opt/calibre:${PATH}\"\r\n\r\n# Default working directory\r\nWORKDIR /app\r\n\r\n# Modified ENTRYPOINT to print the command and its arguments\r\nENTRYPOINT [\"/bin/sh\", \"-c\", \"echo 'Running command: $0 $@'; exec \\\"$0\\\" \\\"$@\\\"\"]\r\n\r\n# CMD to pass arguments dynamically\r\nCMD [\"sh\", \"-c\"]\r\n\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.287109375,
          "content": "                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n"
        },
        {
          "name": "Mac Ebook2Audiobook Launcher.command",
          "type": "blob",
          "size": 0.1416015625,
          "content": "#!/bin/bash\n# Change directory to the location of the launcher\ncd \"$(dirname \"$0\")\"\n# Execute the ebook2audiobook.sh script\n./ebook2audiobook.sh\n"
        },
        {
          "name": "Notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.53515625,
          "content": "# 📚 ebook2audiobook\n\nCPU/GPU Converter from eBooks to audiobooks with chapters and metadata<br/>\nusing Calibre, ffmpeg, XTTSv2, Fairseq and more. Supports voice cloning and 1124 languages!\n> [!IMPORTANT]\n**This tool is intended for use with non-DRM, legally acquired eBooks only.** <br>\nThe authors are not responsible for any misuse of this software or any resulting legal consequences. <br>\nUse this tool responsibly and in accordance with all applicable laws.\n\n\n[![Discord](https://dcbadge.limes.pink/api/server/https://discord.gg/bg5Kx43c6w)](https://discord.gg/bg5Kx43c6w)\n\nThanks to support ebook2audiobook developers!<br>\n[![Ko-Fi](https://img.shields.io/badge/Ko--fi-F16061?style=for-the-badge&logo=ko-fi&logoColor=white)](https://ko-fi.com/athomasson2) \n\n\n#### New v2.0 Web GUI Interface!\n![demo_web_gui](assets/demo_web_gui.gif)\n\n<details>\n  <summary>Click to see images of Web GUI</summary>\n  <img width=\"1728\" alt=\"GUI Screen 1\" src=\"assets/gui_1.png\">\n  <img width=\"1728\" alt=\"GUI Screen 2\" src=\"assets/gui_2.png\">\n  <img width=\"1728\" alt=\"GUI Screen 3\" src=\"assets/gui_3.png\">\n</details>\n\n\n## README.md\n- ara [العربية (Arabic)](./readme/README_AR.md)\n- zho [中文 (Chinese)](./readme/README_CN.md)\n- eng [English](README.md)\n- swe [Svenska (Swedish)](./readme/README_SWE.md)\n\n## Table of Contents\n\n- [ebook2audiobook](#ebook2audiobook)\n- [Features](#features)\n- [New v2.0 Web GUI Interface](#new-v20-web-gui-interface)\n- [Huggingface Space Demo](#huggingface-space-demo)\n- [Free Google Colab](#free-google-colab)\n- [Pre-made Audio Demos](#demos)\n- [Supported Languages](#supported-languages)\n- [Requirements](#requirements)\n- [Installation Instructions](#installation-instructions)\n- [Usage](#usage)\n  - [Launching Gradio Web Interface](#launching-gradio-web-interface)\n  - [Basic Headless Usage](#basic-headless-usage)\n  - [Headless Custom XTTS Model Usage](#headless-custom-xtts-model-usage)\n  - [Renting a GPU](#renting-a-gpu)\n  - [Help command output](#help-command-output)\n- [Fine Tuned TTS models](#fine-tuned-tts-models)\n  - [For Collection of Fine-Tuned TTS Models](#fine-tuned-tts-collection)\n- [Using Docker](#using-docker)\n  - [Docker Run](#running-the-docker-container)\n  - [Docker Build](#building-the-docker-container)\n  - [Docker Compose](#docker-compose)\n  - [Docker headless guide](#docker-headless-guide)\n  - [Docker container file locations](#docker-container-file-locations)\n  - [Common Docker issues](#common-docker-issues)\n- [Supported eBook Formats](#supported-ebook-formats)\n- [Output](#output)\n- [Common Issues](#common-issues)\n- [Special Thanks](#special-thanks)\n- [Join Our Discord Server!](#join-our-discord-server)\n- [Legacy](#legacy-v10)\n- [Glossary of Sections](#glossary-of-sections)\n\n## Features\n\n- 📖 Converts eBooks to text format with Calibre.\n- 📚 Splits eBook into chapters for organized audio.\n- 🎙️ High-quality text-to-speech with [Coqui XTTSv2](https://huggingface.co/coqui/XTTS-v2) and [Fairseq](https://github.com/facebookresearch/fairseq/tree/main/examples/mms).\n- 🗣️ Optional voice cloning with your own voice file.\n- 🌍 Supports 1107 languages (English by default). [List of Supported languages](https://dl.fbaipublicfiles.com/mms/tts/all-tts-languages.html)\n- 🖥️ Designed to run on 4GB RAM.\n\n## [Huggingface space demo](https://huggingface.co/spaces/drewThomasson/ebook2audiobook)\n[![Hugging Face](https://img.shields.io/badge/Hugging%20Face-Spaces-yellow?style=for-the-badge&logo=huggingface)](https://huggingface.co/spaces/drewThomasson/ebook2audiobook)\n\n- Huggingface space is running on free cpu tier so expect very slow or timeout lol, just don't give it giant files is all\n- Best to duplicate space or run locally.\n\n## Free Google Colab \n[![Free Google Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DrewThomasson/ebook2audiobook/blob/main/Notebooks/colab_ebook2audiobook.ipynb)\n\n## Supported Languages\n\n- **Arabic (ara)**\n- **Chinese (zho)**\n- **Czech (ces)**\n- **Dutch (nld)**\n- **English (eng)**\n- **French (fra)**\n- **German (deu)**\n- **Hindi (hin)**\n- **Hungarian (hun)**\n- **Italian (ita)**\n- **Japanese (jpn)**\n- **Korean (kor)**\n- **Polish (pol)**\n- **Portuguese (por)**\n- **Russian (rus)**\n- **Spanish (spa)**\n- **Turkish (tur)**\n- **Vietnamese (vie)**\n- [** + 1107 languages via Fairseq**](https://dl.fbaipublicfiles.com/mms/tts/all-tts-languages.html)\n\n\n##  Requirements\n\n- 4gb ram\n- Virtualization enabled if running on windows (Docker only)\n\n> [!IMPORTANT]\n**Before to post an install or bug issue search carefully to the opened and closed issues TAB<br>\nto be sure your issue does not exist already.**\n\n### Installation Instructions\n\n1. **Clone repo**\n```bash\ngit clone https://github.com/DrewThomasson/ebook2audiobook.git\n```\n\nSpecify the language code when running the script in  mode.\n\n\n### Launching Gradio Web Interface\n\n1. **Run ebook2audiobook**:\n   - **Linux/MacOS**:\n     ```bash\n     ./ebook2audiobook.sh  # Run Launch script\n     ```\n   - **Windows**\n     ```bash\n     .\\ebook2audiobook.cmd  # Run launch script or double click on it\n     ```\n2. **Open the Web App**: Click the URL provided in the terminal to access the web app and convert eBooks.\n3. **For Public Link**: Add `--share` to the end of it like this: `python app.py --share`\n- **[For More Parameters]**: use the `--help` parameter like this `python app.py --help`\n\n### Basic  Usage\n   - **Linux/MacOS**:\n     ```bash\n     ./ebook2audiobook.sh  -- --ebook <path_to_ebook_file> --voice [path_to_voice_file] --language [language_code]\n     ```\n   - **Windows**\n     ```bash\n     .\\ebook2audiobook.cmd  -- --ebook <path_to_ebook_file> --voice [path_to_voice_file] --language [language_code]\n     ```\n\n- **<path_to_ebook_file>**: Path to your eBook file.\n- **[path_to_voice_file]**: Optional for voice cloning.\n- **[language_code]**: Optional to specify ISO-639-3 3+ letters language code (default is eng). ISO-639-1 2 letters code is also supported\n- **[For More Parameters]**: use the `--help` parameter like this `python app.py --help`\n\n###  Custom XTTS Model Usage\n   - **Linux/MacOS**:\n     ```bash\n     ./ebook2audiobook.sh  -- --ebook <ebook_file_path> --voice <target_voice_file_path> --language <language> --custom_model <custom_model_path> --custom_config <custom_config_path> --custom_vocab <custom_vocab_path>\n     ```\n   - **Windows**\n     ```bash\n     .\\ebook2audiobook.cmd  -- --ebook <ebook_file_path> --voice <target_voice_file_path> --language <language> --custom_model <custom_model_path> --custom_config <custom_config_path> --custom_vocab <custom_vocab_path>\n     ```\n\n- **<ebook_file_path>**: Path to your eBook file.\n- **<target_voice_file_path>**: Optional for voice cloning.\n- **<language>**: Optional to specify language.\n- **<custom_model_path>**: Path to `model.pth`.\n- **<custom_config_path>**: Path to `config.json`.\n- **<custom_vocab_path>**: Path to `vocab.json`.\n- **[For More Parameters]**: use the `--help` parameter like this `python app.py --help`\n\n### For Detailed Guide with list of all Parameters to use\n   - **Linux/MacOS**:\n     ```bash\n     ./ebook2audiobook.sh  --help\n     ```\n   - **Windows**\n     ```bash\n     .\\ebook2audiobook.cmd  --help\n     ```\n<a id=\"help-command-output\"></a>\n- This will output the following:\n```bash\nusage: app.py [-h] [--script_mode SCRIPT_MODE] [--share] [-- []]\n              [--session SESSION] [--ebook EBOOK] [--ebooks_dir [EBOOKS_DIR]]\n              [--voice VOICE] [--language LANGUAGE] [--device {cpu,gpu}]\n              [--custom_model CUSTOM_MODEL] [--temperature TEMPERATURE]\n              [--length_penalty LENGTH_PENALTY]\n              [--repetition_penalty REPETITION_PENALTY] [--top_k TOP_K] [--top_p TOP_P]\n              [--speed SPEED] [--enable_text_splitting] [--fine_tuned FINE_TUNED]\n              [--version]\n\nConvert eBooks to Audiobooks using a Text-to-Speech model. You can either launch the Gradio interface or run the script in  mode for direct conversion.\n\noptions:\n  -h, --help            show this help message and exit\n  --script_mode SCRIPT_MODE\n                        Force the script to run in NATIVE or DOCKER_UTILS\n  --share               Enable a public shareable Gradio link. Default to False.\n  -- []\n                        Run in  mode. Default to True if the flag is present without a value, False otherwise.\n  --session SESSION     Session to reconnect in case of interruption ( mode only)\n  --ebook EBOOK         Path to the ebook file for conversion. Required in  mode.\n  --ebooks_dir [EBOOKS_DIR]\n                        Path to the directory containing ebooks for batch conversion. Default to \"ebooks\" if \"default\" is provided.\n  --voice VOICE         Path to the target voice file for TTS. Optional, must be 24khz for XTTS and 16khz for fairseq models, uses a default voice if not provided.\n  --language LANGUAGE   Language for the audiobook conversion. Options: eng, zho, spa, fra, por, rus, ind, hin, ben, yor, ara, jav, jpn, kor, deu, ita, fas, tam, tel, tur, pol, hun, nld, zzzz, abi, ace, aca, acn, acr, ach, acu, guq, ade, adj, agd, agx, agn, aha, aka, knj, ake, aeu, ahk, bss, alj, sqi, alt, alp, alz, kab, amk, mmg, amh, ami, azg, agg, boj, cko, any, arl, atq, luc, hyw, apr, aia, msy, cni, cjo, cpu, cpb, asm, asa, teo, ati, djk, ava, avn, avu, awb, kwi, awa, agr, agu, ayr, ayo, abp, blx, sgb, azj-script_cyrillic, azj-script_latin, azb, bba, bhz, bvc, bfy, bgq, bdq, bdh, bqi, bjw, blz, ban, bcc-script_latin, bcc-script_arabic, bam, ptu, bcw, bqj, bno, bbb, bfa, bjz, bak, eus, bsq, akb, btd, btx, bts, bbc, bvz, bjv, bep, bkv, bzj, bem, bng, bom, btt, bha, bgw, bht, beh, sne, ubl, bcl, bim, bkd, bjr, bfo, biv, bib, bis, bzi, bqp, bpr, bps, bwq, bdv, bqc, bus, bnp, bmq, bdg, boa, ksr, bor, bru, box, bzh, bgt, sab, bul, bwu, bmv, mya, tte, cjp, cbv, kaq, cot, cbc, car, cat, ceb, cme, cbi, ceg, cly, cya, che, hne, nya, dig, dug, bgr, cek, cfm, cnh, hlt, mwq, ctd, tcz, zyp, cco, cnl, cle, chz, cpa, cso, cnt, cuc, hak, nan, xnj, cap, cax, ctg, ctu, chf, cce, crt, crq, cac-dialect_sansebastiáncoatán, cac-dialect_sanmateoixtatán, ckt, ncu, cdj, chv, caa, asg, con, crn, cok, crk-script_latin, crk-script_syllabics, crh, hrv, cui, ces, dan, dsh, dbq, dga, dgi, dgk, dnj-dialect_gweetaawueast, dnj-dialect_blowowest, daa, dnt, dnw, dar, tcc, dwr, ded, mzw, ntr, ddn, des, dso, nfa, dhi, gud, did, mhu, dip, dik, tbz, dts, dos, dgo, mvp, jen, dzo, idd, eka, cto, emp, enx, sja, myv, mcq, ese, evn, eza, ewe, fal, fao, far, fij, fin, fon, frd, ful, flr, gau, gbk, gag-script_cyrillic, gag-script_latin, gbi, gmv, lug, pwg, gbm, cab, grt, krs, gso, nlg, gej, gri, kik, acd, glk, gof-script_latin, gog, gkn, wsg, gjn, gqr, gor, gux, gbo, ell, grc, guh, gub, grn, gyr, guo, gde, guj, gvl, guk, rub, dah, gwr, gwi, hat, hlb, amf, hag, hnn, bgc, had, hau, hwc, hvn, hay, xed, heb, heh, hil, hif, hns, hoc, hoy, hus-dialect_westernpotosino, hus-dialect_centralveracruz, huv, hui, hap, iba, isl, dbj, ifa, ifb, ifu, ifk, ife, ign, ikk, iqw, ilb, ilo, imo, inb, ipi, irk, icr, itv, itl, atg, ixl-dialect_sanjuancotzal, ixl-dialect_sangasparchajul, ixl-dialect_santamarianebaj, nca, izr, izz, jac, jam, jvn, kac, dyo, csk, adh, jun, jbu, dyu, bex, juy, gna, urb, kbp, cwa, dtp, kbr, cgc, kki, kzf, lew, cbr, kkj, keo, kqe, kak, kyb, knb, kmd, kml, ify, xal, kbq, kay, ktb, hig, gam, cbu, xnr, kmu, kne, kan, kby, pam, cak-dialect_santamaríadejesús, cak-dialect_southcentral, cak-dialect_yepocapa, cak-dialect_western, cak-dialect_santodomingoxenacoj, cak-dialect_central, xrb, krc, kaa, krl, pww, xsm, cbs, pss, kxf, kyz, kyu, txu, kaz, ndp, kbo, kyq, ken, ker, xte, kyg, kjh, kca, khm, kxm, kjg, nyf, kij, kia, kqr, kqp, krj, zga, kin, pkb, geb, gil, kje, kss, thk, klu, kyo, kog, kfb, kpv, bbo, xon, kma, kno, kxc, ozm, kqy, coe, kpq, kpy, kyf, kff-script_telugu, kri, rop, ktj, ted, krr, kdt, kez, cul, kle, kdi, kue, kum, kvn, cuk, kdn, xuo, key, kpz, knk, kmr-script_latin, kmr-script_arabic, kmr-script_cyrillic, xua, kru, kus, kub, kdc, kxv, blh, cwt, kwd, tnk, kwf, cwe, kyc, tye, kir, quc-dialect_north, quc-dialect_east, quc-dialect_central, lac, lsi, lbj, lhu, las, lam, lns, ljp, laj, lao, lat, lav, law, lcp, lzz, lln, lef, acf, lww, mhx, eip, lia, lif, onb, lis, loq, lob, yaz, lok, llg, ycl, lom, ngl, lon, lex, lgg, ruf, dop, lnd, ndy, lwo, lee, mev, mfz, jmc, myy, mbc, mda, mad, mag, ayz, mai, mca, mcp, mak, vmw, mgh, kde, mlg, zlm, pse, mkn, xmm, mal, xdy, div, mdy, mup, mam-dialect_central, mam-dialect_northern, mam-dialect_southern, mam-dialect_western, mqj, mcu, mzk, maw, mjl, mnk, mge, mbh, knf, mjv, mbt, obo, mbb, mzj, sjm, mrw, mar, mpg, mhr, enb, mah, myx, klv, mfh, met, mcb, mop, yua, mfy, maz, vmy, maq, mzi, maj, maa-dialect_sanantonio, maa-dialect_sanjerónimo, mhy, mhi, zmz, myb, gai, mqb, mbu, med, men, mee, mwv, meq, zim, mgo, mej, mpp, min, gum, mpx, mco, mxq, pxm, mto, mim, xta, mbz, mip, mib, miy, mih, miz, xtd, mxt, xtm, mxv, xtn, mie, mil, mio, mdv, mza, mit, mxb, mpm, soy, cmo-script_latin, cmo-script_khmer, mfq, old, mfk, mif, mkl, mox, myl, mqf, mnw, mon, mog, mfe, mor, mqn, mgd, mtj, cmr, mtd, bmr, moz, mzm, mnb, mnf, unr, fmu, mur, tih, muv, muy, sur, moa, wmw, tnr, miq, mos, muh, nas, mbj, nfr, kfw, nst, nag, nch, nhe, ngu, azz, nhx, ncl, nhy, ncj, nsu, npl, nuz, nhw, nhi, nlc, nab, gld, nnb, npy, pbb, ntm, nmz, naw, nxq, ndj, ndz, ndv, new, nij, sba, gng, nga, nnq, ngp, gym, kdj, nia, nim, nin, nko, nog, lem, not, nhu, nob, bud, nus, yas, nnw, nwb, nyy, nyn, rim, lid, nuj, nyo, nzi, ann, ory, ojb-script_latin, ojb-script_syllabics, oku, bsc, bdu, orm, ury, oss, ote, otq, stn, sig, kfx, bfz, sey, pao, pau, pce, plw, pmf, pag, pap, prf, pab, pbi, pbc, pad, ata, pez, peg, pcm, pis, pny, pir, pjt, poy, pps, pls, poi, poh-dialect_eastern, poh-dialect_western, prt, pui, pan, tsz, suv, lme, quy, qvc, quz, qve, qub, qvh, qwh, qvw, quf, qvm, qul, qvn, qxn, qxh, qvs, quh, qxo, qxr, qvo, qvz, qxl, quw, kjb, kek, rah, rjs, rai, lje, rnl, rkt, rap, yea, raw, rej, rel, ril, iri, rgu, rhg, rmc-script_latin, rmc-script_cyrillic, rmo, rmy-script_latin, rmy-script_cyrillic, ron, rol, cla, rng, rug, run, lsm, spy, sck, saj, sch, sml, xsb, sbl, saq, sbd, smo, rav, sxn, sag, sbp, xsu, srm, sas, apb, sgw, tvw, lip, slu, snw, sea, sza, seh, crs, ksb, shn, sho, mcd, cbt, xsr, shk, shp, sna, cjs, jiv, snp, sya, sid, snn, sri, srx, sil, sld, akp, xog, som, bmu, khq, ses, mnx, srn, sxb, suc, tgo, suk, sun, suz, sgj, sus, swh, swe, syl, dyi, myk, spp, tap, tby, tna, shi, klw, tgl, tbk, tgj, blt, tbg, omw, tgk, tdj, tbc, tlj, tly, ttq-script_tifinagh, taj, taq, tpm, tgp, tnn, tac, rif-script_latin, rif-script_arabic, tat, tav, twb, tbl, kps, twe, ttc, kdh, tes, tex, tee, tpp, tpt, stp, tfr, twu, ter, tew, tha, nod, thl, tem, adx, bod, khg, tca, tir, txq, tik, dgr, tob, tmf, tng, tlb, ood, tpi, jic, lbw, txa, tom, toh, tnt, sda, tcs, toc, tos, neb, trn, trs, trc, tri, cof, tkr, kdl, cas, tso, tuo, iou, tmc, tuf, tuk-script_latin, tuk-script_arabic, bov, tue, kcg, tzh-dialect_bachajón, tzh-dialect_tenejapa, tzo-dialect_chenalhó, tzo-dialect_chamula, tzj-dialect_western, tzj-dialect_eastern, aoz, udm, udu, ukr, ppk, ubu, urk, ura, urt, urd-script_devanagari, urd-script_arabic, urd-script_latin, upv, usp, uig-script_arabic, uig-script_cyrillic, uzb-script_cyrillic, vag, bav, vid, vie, vif, vun, vut, prk, wwa, rro, bao, waw, lgl, wlx, cou, hub, gvc, mfi, wap, wba, war, way, guc, cym, kvw, tnp, hto, huu, wal-script_latin, wal-script_ethiopic, wlo, noa, wob, kao, xer, yad, yka, sah, yba, yli, nlk, yal, yam, yat, jmd, tao, yaa, ame, guu, yao, yre, yva, ybb, pib, byr, pil, ycn, ess, yuz, atb, zne, zaq, zpo, zad, zpc, zca, zpg, zai, zpl, zam, zaw, zpm, zac, zao, ztq, zar, zpt, zpi, zas, zaa, zpz, zab, zpu, zae, zty, zav, zza, zyb, ziw, zos, gnd. Default to English (eng).\n  --device {cpu,gpu}    Type of processor unit for the audiobook conversion. If not specified: check first if gpu available, if not cpu is selected.\n  --custom_model CUSTOM_MODEL\n                        Path to the custom model (.zip file containing ['config.json', 'vocab.json', 'model.pth', 'ref.wav']). Required if using a custom model.\n  --temperature TEMPERATURE\n                        Temperature for the model. Default to 0.65. Higher temperatures lead to more creative outputs.\n  --length_penalty LENGTH_PENALTY\n                        A length penalty applied to the autoregressive decoder. Default to 1.0. Not applied to custom models.\n  --repetition_penalty REPETITION_PENALTY\n                        A penalty that prevents the autoregressive decoder from repeating itself. Default to 2.5\n  --top_k TOP_K         Top-k sampling. Lower values mean more likely outputs and increased audio generation speed. Default to 50\n  --top_p TOP_P         Top-p sampling. Lower values mean more likely outputs and increased audio generation speed. Default to 0.8\n  --speed SPEED         Speed factor for the speech generation. Default to 1.0\n  --enable_text_splitting\n                        Enable splitting text into sentences. Default to False.\n  --fine_tuned FINE_TUNED\n                        Name of the fine tuned model. Optional, uses the standard model according to the TTS engine and language.\n  --version             Show the version of the script and exit\n\nExample usage:    \nWindows:\n    :\n    ebook2audiobook.cmd -- --ebook 'path_to_ebook'\n    Graphic Interface:\n    ebook2audiobook.cmd\nLinux/Mac:\n    :\n    ./ebook2audiobook.sh -- --ebook 'path_to_ebook'\n    Graphic Interface:\n    ./ebook2audiobook.sh\n\n\n```\n\n### Using Docker\n\nYou can also use Docker to run the eBook to Audiobook converter. This method ensures consistency across different environments and simplifies setup.\n\n#### Running the Docker Container\n\nTo run the Docker container and start the Gradio interface, use the following command:\n\n -Run with CPU only\n```powershell\ndocker run -it --rm -p 7860:7860 --platform=linux/amd64 athomasson2/ebook2audiobook python app.py\n```\n -Run with GPU Speedup (Nvida graphics cards only)\n```powershell\ndocker run -it --rm --gpus all -p 7860:7860 --platform=linux/amd64 athomasson2/ebook2audiobook python app.py\n```\n\n#### Building the Docker Container\n\n- You can build the docker image with the command:\n'''powershell\ndocker build --platform linux/amd64 -t athomasson2/ebook2audiobook .\n'''\n\nThis command will start the Gradio interface on port 7860.(localhost:7860)\n- For more options like running the docker in  mode or making the gradio link public add the `--help` parameter after the `app.py` in the docker launch command\n\n## Docker container file locations\nAll ebook2audiobooks will have the base dir of `/home/user/app/`\nFor example:\n`tmp` = `/home/user/app/tmp`\n`audiobooks` = `/home/user/app/audiobooks`\n\n   \n## Docker headless guide\n\nfirst for a docker pull of the latest with\n```bash \ndocker pull athomasson2/ebook2audiobook\n```\n\n- Before you do run this you need to create a dir named \"input-folder\" in your current dir which will be linked, This is where you can put your input files for the docker image to see\n```bash\nmkdir input-folder && mkdir Audiobooks\n```\n\n- In the command below swap out **YOUR_INPUT_FILE.TXT** with the name of your input file \n\n```bash\ndocker run -it --rm \\\n    -v $(pwd)/input-folder:/home/user/app/input_folder \\\n    -v $(pwd)/audiobooks:/home/user/app/audiobooks \\\n    --platform linux/amd64 \\\n    athomasson2/ebook2audiobook \\\n    python app.py --headless --ebook /input_folder/YOUR_INPUT_FILE.TXT\n```\n\n- And that should be it! \n\n- The output Audiobooks will be found in the Audiobook folder which will also be located in your local dir you ran this docker command in\n\n\n## To get the help command for the other parameters this program has you can run this \n\n```bash\ndocker run -it --rm \\\n    --platform linux/amd64 \\\n    athomasson2/ebook2audiobook \\\n    python app.py --help\n\n```\n\n\nand that will output this \n\n[Help command output](#help-command-output)\n\n### Docker Compose\n\nThis project uses Docker Compose to run locally. You can enable or disable GPU support by setting either `*gpu-enabled` or `*gpu-disabled` in `docker-compose.yml`\n\n#### Steps to Run\n\n1. **Clone the Repository** (if you haven't already):\n   ```bash\n   git clone https://github.com/DrewThomasson/ebook2audiobook.git\n   cd ebook2audiobook\n   ```\n\n2. **Set GPU Support (disabled by default)**\n  To enable GPU support, modify `docker-compose.yml` and change `*gpu-disabled` to `*gpu-enabled`\n\n3. **Start the service:**\n    ```bash\n    docker-compose up -d\n    ```\n\n4. **Access the service:**\n  The service will be available at http://localhost:7860.\n\n#### New v2.0 Docker Web GUI Interface!\n![demo_web_gui](assets/demo_web_gui.gif)\n\n<details>\n  <summary>Click to see images of Web GUI</summary>\n  <img width=\"1728\" alt=\"GUI Screen 1\" src=\"assets/gui_1.png\">\n  <img width=\"1728\" alt=\"GUI Screen 2\" src=\"assets/gui_2.png\">\n  <img width=\"1728\" alt=\"GUI Screen 3\" src=\"assets/gui_3.png\">\n</details>\n\n## Renting a GPU\nDon't have the hardware to run it or you want to rent a GPU?\n#### You can duplicate the hugginface space and rent a gpu for around $0.40 an hour\n[Huggingface Space Demo](#huggingface-space-demo)\n\n#### Or you can try using the google colab for free!\n(Be aware it will time out after a bit of your not messing with the google colab)\n[Free Google Colab](#free-google-colab)\n\n## Common Docker Issues\n- Docker gets stuck downloading Fine-Tuned models. (This does not happen for every computer but some appear to run into this issue)\nDisabling the progress bar appears to fix the issue, as discussed [here in #191](https://github.com/DrewThomasson/ebook2audiobook/issues/191)\nExample of adding this fix in the `docker run` command\n```Dockerfile\ndocker run -it --rm --gpus all -e HF_HUB_DISABLE_PROGRESS_BARS=1 -e HF_HUB_ENABLE_HF_TRANSFER=0 -p 7860:7860 --platform=linux/amd64 athomasson2/ebook2audiobook python app.py\n```\n\n\n\n\n\n## Fine Tuned TTS models\n\nYou can fine-tune your own xtts model easily with this repo\n[xtts-finetune-webui](https://github.com/daswer123/xtts-finetune-webui)\n\nIf you want to rent a GPU easily you can also duplicate this huggingface\n[xtts-finetune-webui-space](https://huggingface.co/spaces/drewThomasson/xtts-finetune-webui-gpu)\n\nA space you can use to de-noise the training data easily also\n[denoise-huggingface-space](https://huggingface.co/spaces/drewThomasson/DeepFilterNet2_no_limit)\n\n### Fine Tuned TTS Collection\n\nTo find our collection of already fine-tuned TTS models, visit [this Hugging Face link](https://huggingface.co/drewThomasson/fineTunedTTSModels/tree/main)\nFor an XTTS custom model a ref audio clip of the voice will also be needed:\n\n## Demos\n\nRainy day voice\n\nhttps://github.com/user-attachments/assets/8486603c-38b1-43ce-9639-73757dfb1031\n\nDavid Attenborough voice\n\nhttps://github.com/user-attachments/assets/47c846a7-9e51-4eb9-844a-7460402a20a8\n\n\n## Supported eBook Formats\n\n- `.epub`, `.pdf`, `.mobi`, `.txt`, `.html`, `.rtf`, `.chm`, `.lit`, `.pdb`, `.fb2`, `.odt`, `.cbr`, `.cbz`, `.prc`, `.lrf`, `.pml`, `.snb`, `.cbc`, `.rb`, `.tcr`\n- **Best results**: `.epub` or `.mobi` for automatic chapter detection\n\n## Output\n\n- Creates an `.m4b` file with metadata and chapters.\n- **Example Output**: ![Example](https://github.com/DrewThomasson/VoxNovel/blob/dc5197dff97252fa44c391dc0596902d71278a88/readme_files/example_in_app.jpeg)\n\n## Common Issues:\n- \"It's slow!\" - On CPU only this is very slow, and you can only get speedups though a NVIDIA GPU. [Discussion about this](https://github.com/DrewThomasson/ebook2audiobook/discussions/19#discussioncomment-10879846) For faster multilingual generation I would suggest my other [project that uses piper-tts](https://github.com/DrewThomasson/ebook2audiobookpiper-tts) instead(It doesn't have zero-shot voice cloning though, and is siri quality voices, but it is much faster on cpu.)\n- \"I'm having dependency issues\" - Just use the docker, its fully self contained and has a headless mode, add `-h` parameter after the `app.py` in the docker run command for more information.\n- \"Im getting a truncated audio issue!\" - PLEASE MAKE AN ISSUE OF THIS, I don't speak every language and I need advise from each person to fine tune my sentense splitting function on any other languages.😊\n\n## What I need help with! 🙌 \n## [Full list of things can be found here](https://github.com/DrewThomasson/ebook2audiobook/issues/32)\n- Any help from people speaking any of the supported languages to help with proper sentence splitting methods\n- Potentially creating readme Guides for Multiple languages(Becuase the only language I know is English 😔)\n\n## Special Thanks\n\n- **Coqui TTS**: [Coqui TTS GitHub](https://github.com/idiap/coqui-ai-TTS)\n- **Calibre**: [Calibre Website](https://calibre-ebook.com)\n- **FFmpeg**: [FFmpeg Website](https://ffmpeg.org)\n\n- [@shakenbake15 for better chapter saving method](https://github.com/DrewThomasson/ebook2audiobook/issues/8) \n\n### [Legacy V1.0](legacy/v1.0)\n\nYou can view the code [here](legacy/v1.0).\n\n## Join Our Discord Server!\n\n[![Discord](https://dcbadge.limes.pink/api/server/https://discord.gg/bg5Kx43c6w)](https://discord.gg/bg5Kx43c6w)\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 11.10546875,
          "content": "import argparse\nimport os\nimport regex as re\nimport socket\nimport subprocess\nimport sys\nimport unidic\n\nfrom lib.conf import *\nfrom lib.lang import language_mapping, default_language_code\n\ndef check_python_version():\n    current_version = sys.version_info[:2]  # (major, minor)\n    if current_version < min_python_version or current_version > max_python_version:\n        error = f'''********** Error: Your OS Python version is not compatible! (current: {current_version[0]}.{current_version[1]})\n        Please create a virtual python environment verrsion {min_python_version[0]}.{min_python_version[1]} or {max_python_version[0]}.{max_python_version[1]} \n        with conda or python -v venv **********'''\n        print(error)\n        return False\n    else:\n        return True\n        \ndef check_and_install_requirements(file_path):\n    if not os.path.exists(file_path):\n        print(f'Warning: File {file_path} not found. Skipping package check.')\n    try:\n        from importlib.metadata import version, PackageNotFoundError\n        with open(file_path, 'r') as f:\n            contents = f.read().replace('\\r', '\\n')\n            packages = [pkg.strip() for pkg in contents.splitlines() if pkg.strip()]\n\n        missing_packages = []\n        for package in packages:\n            # Extract package name without version specifier\n            pkg_name = re.split(r'[<>=]', package)[0].strip()\n            try:\n                installed_version = version(pkg_name)\n            except PackageNotFoundError:\n                print(f'{package} is missing.')\n                missing_packages.append(package)\n                pass\n\n        if missing_packages:\n            print('\\nInstalling missing packages...')\n            try:\n                subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'] + missing_packages)\n            except subprocess.CalledProcessError as e:\n                print(f'Failed to install packages: {e}')\n                return False\n\n        return True\n    except Exception as e:\n        raise(f'An error occurred: {e}')  \n        \ndef check_dictionary():\n    unidic_path = unidic.DICDIR\n    dicrc = os.path.join(unidic_path, 'dicrc')\n    if not os.path.exists(dicrc) or os.path.getsize(dicrc) == 0:\n        try:\n            print('UniDic dictionary not found or incomplete. Downloading now...')\n            subprocess.run(['python', '-m', 'unidic', 'download'], check=True)\n        except subprocess.CalledProcessError as e:\n            print(f'Failed to download UniDic dictionary. Error: {e}')\n            raise SystemExit('Unable to continue without UniDic. Exiting...')\n    return True\n\ndef is_port_in_use(port):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        return s.connect_ex(('0.0.0.0', port)) == 0\n\ndef main():\n    global is_gui_process\n\n    # Convert the list of languages to a string to display in the help text\n    lang_list_str = ', '.join(list(language_mapping.keys()))\n\n    # Argument parser to handle optional parameters with descriptions\n    parser = argparse.ArgumentParser(\n        description='Convert eBooks to Audiobooks using a Text-to-Speech model. You can either launch the Gradio interface or run the script in headless mode for direct conversion.',\n        epilog='''\nExample usage:    \nWindows:\n    headless:\n    ebook2audiobook.cmd --headless --ebook 'path_to_ebook'\n    Graphic Interface:\n    ebook2audiobook.cmd\nLinux/Mac:\n    headless:\n    ./ebook2audiobook.sh --headless --ebook 'path_to_ebook'\n    Graphic Interface:\n    ./ebook2audiobook.sh\n        ''',\n        formatter_class=argparse.RawTextHelpFormatter\n    )\n    options = [\n        '--script_mode', '--share', '--headless', \n        '--session', '--ebook', '--ebooks_dir',\n        '--voice', '--language', '--device', '--custom_model',\n        '--temperature', '--length_penalty', '--repetition_penalty', \n        '--top_k', '--top_p', '--speed',\n        '--enable_text_splitting', '--fine_tuned',\n        '--version', '--help'\n    ]\n    parser.add_argument(options[0], type=str,\n                        help='Force the script to run in NATIVE or DOCKER_UTILS')\n    parser.add_argument(options[1], action='store_true',\n                        help='Enable a public shareable Gradio link. Default to False.')\n    parser.add_argument(options[2], nargs='?', const=True, default=False,\n                        help='Run in headless mode. Default to True if the flag is present without a value, False otherwise.')\n    parser.add_argument(options[3], type=str,\n                        help='Session to reconnect in case of interruption (headless mode only)')\n    parser.add_argument(options[4], type=str,\n                        help='Path to the ebook file for conversion. Required in headless mode.')\n    parser.add_argument(options[5], nargs='?', const='default', type=str,\n                        help=f'Path to the directory containing ebooks for batch conversion. Default to \"{os.path.basename(ebooks_dir)}\" if \"default\" is provided.')\n    parser.add_argument(options[6], type=str, default=None,\n                        help='Path to the target voice file for TTS. Optional, must be 24khz for XTTS and 16khz for fairseq models, uses a default voice if not provided.')\n    parser.add_argument(options[7], type=str, default=default_language_code,\n                        help=f'Language for the audiobook conversion. Options: {lang_list_str}. Default to English (eng).')\n    parser.add_argument(options[8], type=str, default='cpu', choices=['cpu', 'gpu'],\n                        help=f'Type of processor unit for the audiobook conversion. If not specified: check first if gpu available, if not cpu is selected.')\n    parser.add_argument(options[9], type=str,\n                        help=f'Path to the custom model (.zip file containing {default_model_files}). Required if using a custom model.')\n    parser.add_argument(options[10], type=float, default=0.65,\n                        help='Temperature for the model. Default to 0.65. Higher temperatures lead to more creative outputs.')\n    parser.add_argument(options[11], type=float, default=1.0,\n                        help='A length penalty applied to the autoregressive decoder. Default to 1.0. Not applied to custom models.')\n    parser.add_argument(options[12], type=float, default=2.5,\n                        help='A penalty that prevents the autoregressive decoder from repeating itself. Default to 2.5')\n    parser.add_argument(options[13], type=int, default=50,\n                        help='Top-k sampling. Lower values mean more likely outputs and increased audio generation speed. Default to 50')\n    parser.add_argument(options[14], type=float, default=0.8,\n                        help='Top-p sampling. Lower values mean more likely outputs and increased audio generation speed. Default to 0.8')\n    parser.add_argument(options[15], type=float, default=1.0,\n                        help='Speed factor for the speech generation. Default to 1.0')\n    parser.add_argument(options[16], action='store_true',\n                        help='Enable splitting text into sentences. Default to False.')                     \n    parser.add_argument(options[17], type=str, default=default_fine_tuned,\n                        help='Name of the fine tuned model. Optional, uses the standard model according to the TTS engine and language.')\n    parser.add_argument(options[18], action='version',version=f'ebook2audiobook version {version}',\n                        help='Show the version of the script and exit')\n\n    for arg in sys.argv:\n        if arg.startswith('--') and arg not in options:\n            print(f'Error: Unrecognized option \"{arg}\"')\n            sys.exit(1)\n\n    args = vars(parser.parse_args())\n\n    # Check if the port is already in use to prevent multiple launches\n    if not args['headless'] and is_port_in_use(interface_port):\n        print(f'Error: Port {interface_port} is already in use. The web interface may already be running.')\n        sys.exit(1)\n\n    args['script_mode'] = args['script_mode'] if args['script_mode'] else NATIVE\n    args['share'] =  args['share'] if args['share'] else False\n\n    if args['script_mode'] == NATIVE:\n        check_pkg = check_and_install_requirements(requirements_file)\n        if check_pkg:\n            if not check_dictionary():\n                sys.exit(1)\n        else:\n            print('Some packages could not be installed')\n            sys.exit(1)\n    \n    from lib.functions import web_interface, convert_ebook\n\n    # Conditions based on the --headless flag\n    if args['headless']:\n        args['is_gui_process'] = False\n        args['audiobooks_dir'] = audiobooks_cli_dir\n\n        # Condition to stop if both --ebook and --ebooks_dir are provided\n        if args['ebook'] and args['ebooks_dir']:\n            print('Error: You cannot specify both --ebook and --ebooks_dir in headless mode.')\n            sys.exit(1)\n\n        # Condition 1: If --ebooks_dir exists, check value and set 'ebooks_dir'\n        if args['ebooks_dir']:\n            new_ebooks_dir = None\n            if args['ebooks_dir'] == 'default':\n                print(f'Using the default ebooks_dir: {ebooks_dir}')\n                new_ebooks_dir =  os.path.abspath(ebooks_dir)\n            else:\n                # Check if the directory exists\n                if os.path.exists(args['ebooks_dir']):\n                    new_ebooks_dir = os.path.abspath(args['ebooks_dir'])\n                else:\n                    print(f'Error: The provided --ebooks_dir \"{args[\"ebooks_dir\"]}\" does not exist.')\n                    sys.exit(1)\n                    \n            if os.path.exists(new_ebooks_dir):\n                for file in os.listdir(new_ebooks_dir):\n                    # Process files with supported ebook formats\n                    if any(file.endswith(ext) for ext in ebook_formats):\n                        full_path = os.path.join(new_ebooks_dir, file)\n                        print(f'Processing eBook file: {full_path}')\n                        args['ebook'] = full_path\n                        progress_status, audiobook_file = convert_ebook(args)\n                        if audiobook_file is None:\n                            print(f'Conversion failed: {progress_status}')\n                            sys.exit(1)\n            else:\n                print(f'Error: The directory {new_ebooks_dir} does not exist.')\n                sys.exit(1)\n\n        elif args['ebook']:\n            progress_status, audiobook_file = convert_ebook(args)\n            if audiobook_file is None:\n                print(f'Conversion failed: {progress_status}')\n                sys.exit(1)\n\n        else:\n            print('Error: In headless mode, you must specify either an ebook file using --ebook or an ebook directory using --ebooks_dir.')\n            sys.exit(1)       \n    else:\n        args['is_gui_process'] = True\n        passed_arguments = sys.argv[1:]\n        allowed_arguments = {'--share', '--script_mode'}\n        passed_args_set = {arg for arg in passed_arguments if arg.startswith('--')}\n        if passed_args_set.issubset(allowed_arguments):\n             web_interface(args)\n        else:\n            print('Error: In non-headless mode, no option or only --share can be passed')\n            sys.exit(1)\n\nif __name__ == '__main__':\n    if not check_python_version():\n        sys.exit(1)\n    else:\n        main()\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "audiobooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.7763671875,
          "content": "x-gpu-enabled: &gpu-enabled\n  devices:\n    - driver: nvidia\n      count: all\n      capabilities:\n        - gpu # Enables GPU access for the container.\n\nx-gpu-disabled: &gpu-disabled\n  devices: [] # Disables GPU access (default for systems without an NVIDIA GPU).\n\nservices:\n  ebook2audiobookxtts:\n    image: athomasson2/ebook2audiobook\n    platform: linux/amd64\n    tty: true\n    stdin_open: true\n    ports:\n      - 7860:7860 # Maps container's port 7860 to the host's port 7860.\n    command: python app.py\n    deploy:\n      resources:\n        reservations:\n          <<: *gpu-disabled # Use *gpu-enabled if you have an NVIDIA GPU.\n          # --- CPU Memory (RAM) Reservation ---\n          # memory: 4g   # Uncomment to reserve 4GB of system RAM (minimum required by the container).\n          # --- GPU VRAM (Indirect Control) ---\n          # devices:     # Uncomment and configure to limit GPU VRAM (requires GPU-enabled above).\n          #   - driver: nvidia\n          #     count: 1 # Use fractional GPU count (e.g., 0.5) to indirectly limit VRAM.\n          #     capabilities:\n          #       - gpu\n        limits:\n          # --- CPU Memory (RAM) Limit ---\n          # memory: 4g   # Uncomment to set a 4GB upper limit on system RAM usage by the container.\n    volumes: []\n    # - ./:/home/user/app  # Uncomment to map the local directory to the container.\n\n# Additional Notes:\n# - \"CPU Memory (RAM)\" refers to the system RAM used by the container.\n# - \"GPU VRAM\" refers to the graphics memory allocated to the container's GPU tasks.\n# - To enable GPU VRAM limits, ensure the NVIDIA Docker runtime is installed and active.\n# - The `memory` options (RAM) use units like 'm' (megabytes) or 'g' (gigabytes).\n# - The `count` parameter for GPU limits controls how much of the GPU (and indirectly VRAM) is accessible."
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "ebook2audiobook.cmd",
          "type": "blob",
          "size": 7.9208984375,
          "content": "@echo off\r\nsetlocal enabledelayedexpansion\r\n\r\n:: Capture all arguments into ARGS\r\nset \"ARGS=%*\"\r\n\r\nset \"NATIVE=native\"\r\nset \"DOCKER_UTILS=docker_utils\"\r\nset \"FULL_DOCKER=full_docker\"\r\n\r\nset \"SCRIPT_MODE=%NATIVE%\"\r\nset \"SCRIPT_DIR=%~dp0\"\r\n\r\nset \"PYTHON_VERSION=3.12\"\r\nset \"DOCKER_UTILS_IMG=utils\"\r\nset \"PYTHON_ENV=python_env\"\r\nset \"CURRENT_ENV=\"\r\nset \"PROGRAMS_LIST=calibre ffmpeg\"\r\n\r\nset \"CONDA_URL=https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe\"\r\nset \"CONDA_INSTALLER=%TEMP%\\Miniconda3-latest-Windows-x86_64.exe\"\r\nset \"CONDA_INSTALL_DIR=%USERPROFILE%\\miniconda3\"\r\nset \"CONDA_PATH=%USERPROFILE%\\miniconda3\\bin\"\r\nset \"PATH=%CONDA_PATH%;%PATH%\"\r\n\r\nset \"PROGRAMS_CHECK=0\"\r\nset \"CONDA_CHECK_STATUS=0\"\r\nset \"CONDA_RUN_INIT=0\"\r\nset \"DOCKER_CHECK_STATUS=0\"\r\nset \"DOCKER_BUILD_STATUS=0\"\r\n\r\nset \"CALIBRE_TEMP_DIR=C:\\Windows\\Temp\\Calibre\"\r\n\r\nif not exist \"%CALIBRE_TEMP_DIR%\" (\r\n    mkdir \"%CALIBRE_TEMP_DIR%\"\r\n)\r\n\r\nicacls \"%CALIBRE_TEMP_DIR%\" /grant Users:(OI)(CI)F /T\r\n\r\nfor %%A in (%ARGS%) do (\r\n\tif \"%%A\"==\"%DOCKER_UTILS%\" (\r\n\t\tset \"SCRIPT_MODE=%DOCKER_UTILS%\"\r\n\t\tbreak\r\n\t)\r\n)\r\n\r\ncd /d \"%SCRIPT_DIR%\"\r\n\r\n:: Check if running inside Docker\r\nif defined CONTAINER (\r\n\techo Running in %FULL_DOCKER% mode\r\n\tset \"SCRIPT_MODE=%FULL_DOCKER%\"\r\n\tgoto main\r\n)\r\n\r\necho Running in %SCRIPT_MODE% mode\r\n\r\n:: Check if running in a Conda environment\r\nif defined CONDA_DEFAULT_ENV (\r\n\tset \"CURRENT_ENV=%CONDA_PREFIX%\"\r\n)\r\n\r\n:: Check if running in a Python virtual environment\r\nif defined VIRTUAL_ENV (\r\n    set \"CURRENT_ENV=%VIRTUAL_ENV%\"\r\n)\r\n\r\nfor /f \"delims=\" %%i in ('where python') do (\r\n    if defined CONDA_PREFIX (\r\n        if /i \"%%i\"==\"%CONDA_PREFIX%\\Scripts\\python.exe\" (\r\n            set \"CURRENT_ENV=%CONDA_PREFIX%\"\r\n\t\t\tbreak\r\n        )\r\n    ) else if defined VIRTUAL_ENV (\r\n        if /i \"%%i\"==\"%VIRTUAL_ENV%\\Scripts\\python.exe\" (\r\n            set \"CURRENT_ENV=%VIRTUAL_ENV%\"\r\n\t\t\tbreak\r\n        )\r\n    )\r\n)\r\n\r\nif not \"%CURRENT_ENV%\"==\"\" (\r\n\techo Current python virtual environment detected: %CURRENT_ENV%. \r\n\techo This script runs with its own virtual env and must be out of any other virtual environment when it's launched.\r\n\tgoto failed\r\n)\r\n\r\ngoto conda_check\r\n\r\n:conda_check\r\nwhere conda >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    set \"CONDA_CHECK_STATUS=1\"\r\n) else (\r\n    if \"%SCRIPT_MODE%\"==\"%DOCKER_UTILS%\" (\r\n        goto docker_check\r\n\t\texit /b\r\n    ) else (\r\n        call :programs_check\r\n    )\r\n)\r\ngoto dispatch\r\nexit /b\r\n\r\n:programs_check\r\nset \"missing_prog_array=\"\r\nfor %%p in (%PROGRAMS_LIST%) do (\r\n    set \"FOUND=\"\r\n    for /f \"delims=\" %%i in ('where %%p 2^>nul') do (\r\n        set \"FOUND=%%i\"\r\n    )\r\n    if not defined FOUND (\r\n        echo %%p is not installed.\r\n        set \"missing_prog_array=!missing_prog_array! %%p\"\r\n    )\r\n)\r\nif not \"%missing_prog_array%\"==\"\" (\r\n\tset \"PROGRAMS_CHECK=1\"\r\n)\r\nexit /b\r\n\r\n:docker_check\r\ndocker --version >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n\tset \"DOCKER_CHECK_STATUS=1\"\r\n) else (\r\n\t:: Verify Docker is running\r\n\tcall docker info >nul 2>&1\r\n\tif %errorlevel% neq 0 (\r\n\t\tset \"DOCKER_CHECK_STATUS=1\"\r\n\t) else (\r\n\t\t:: Check if the Docker socket is running\r\n\t\tset \"docker_socket=\"\r\n\t\tif exist \\\\.\\pipe\\docker_engine (\r\n\t\t\tset \"docker_socket=Windows\"\r\n\t\t)\r\n\t\tif not defined docker_socket (\r\n\t\t\techo Cannot connect to docker socket. Check if the docker socket is running.\r\n\t\t\tgoto failed\r\n\t\t\texit /b\r\n\t\t) else (\r\n\t\t\t:: Check if the Docker image is available\r\n\t\t\tcall docker images -q %DOCKER_UTILS_IMG% >nul 2>&1\r\n\t\t\tif %errorlevel% neq 0 (\r\n\t\t\t\techo Docker image '%DOCKER_UTILS_IMG%' not found. Installing it now...\r\n\t\t\t\tset \"DOCKER_BUILD_STATUS=1\"\r\n\t\t\t) else (\r\n\t\t\t\tgoto dispatch\r\n\t\t\t\texit /b\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n)\r\ngoto install_components\r\nexit /b\r\n\r\n:install_components\r\n:: Check if running as administrator\r\nnet session >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n\techo This script needs to be run as administrator.\r\n\techo Attempting to restart with administrator privileges...\r\n\tif defined ARGS (\r\n\t\t call powershell -ExecutionPolicy Bypass -Command \"Start-Process '%~f0' -ArgumentList '%ARGS%' -WorkingDirectory '%SCRIPT_DIR%' -Verb RunAs\"\r\n\t) else (\r\n\t\t call powershell -ExecutionPolicy Bypass -Command \"Start-Process '%~f0' -WorkingDirectory '%SCRIPT_DIR%' -Verb RunAs\"\r\n\t)\r\n\texit /b\r\n)\r\n:: Install Chocolatey if not already installed\r\nchoco -v >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n\techo Chocolatey is not installed. Installing Chocolatey...\r\n\tcall powershell -ExecutionPolicy Bypass -Command \"Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\"\r\n)\r\n:: Install Python if not already installed\r\npython --version >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n\techo Python is not installed. Installing Python...\r\n\tcall choco install python -y\r\n)\r\n:: Install missing packages if any\r\nif not \"%PROGRAMS_CHECK%\"==\"0\" (\r\n\tcall choco install %missing_prog_array% -y --force\r\n\tsetx CALIBRE_TEMP_DIR \"%CALIBRE_TEMP_DIR%\" /M\r\n\tset \"PROGRAMS_CHECK=0\"\r\n\tset \"missing_prog_array=\"\r\n)\r\n:: Install Conda if not already installed\r\nif not \"%CONDA_CHECK_STATUS%\"==\"0\" (\t\r\n\techo Installing Conda...\r\n\tcall powershell -Command \"[System.Environment]::SetEnvironmentVariable('Path', [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User'),'Process')\"\r\n\techo Downloading Conda installer...\r\n\tcall bitsadmin /transfer \"MinicondaDownload\" %CONDA_URL% \"%CONDA_INSTALLER%\"\r\n\t\"%CONDA_INSTALLER%\" /InstallationType=JustMe /RegisterPython=0 /AddToPath=1 /S /D=%CONDA_INSTALL_DIR%\r\n\tif exist \"%CONDA_INSTALL_DIR%\\condabin\\conda.bat\" (\r\n\t\techo Conda installed successfully.\r\n\t\tset \"CONDA_RUN_INIT=1\"\r\n\t\tset \"CONDA_CHECK_STATUS=0\"\r\n\t\tset \"PATH=%CONDA_INSTALL_DIR%\\condabin;%PATH%\"\r\n\t)\r\n)\r\n:: Install Docker if not already installed\r\nif not \"%DOCKER_CHECK_STATUS%\"==\"0\" (\r\n\techo Docker is not installed. Installing it now...\r\n\tcall choco install docker-cli docker-engine -y\r\n\tcall docker --version >nul 2>&1\r\n\tif %errorlevel% equ 0 (\r\n\t\techo Starting Docker Engine...\r\n\t\tnet start com.docker.service >nul 2>&1\r\n\t\tif %errorlevel% equ 0 (\r\n\t\t\techo Docker installed and started successfully.\r\n\t\t\tset \"DOCKER_CHECK_STATUS=0\"\r\n\t\t) \r\n\t)\r\n)\r\n:: Build Docker image if required\r\nif not \"%DOCKER_BUILD_STATUS%\"==\"0\" (\r\n\tcall conda activate \"%SCRIPT_DIR%\\%PYTHON_ENV%\"\r\n\tcall python -m pip install -e .\r\n\tcall docker build -f DockerfileUtils -t utils .\r\n\tcall conda deactivate\r\n\tcall docker images -q %DOCKER_UTILS_IMG% >nul 2>&1\r\n\tif %errorlevel% equ 0 (\r\n\t\tset \"DOCKER_BUILD_STATUS=0\"\r\n\t)\r\n)\r\nnet session >nul 2>&1\r\nif %errorlevel% equ 0 (\r\n    echo Restarting in user mode...\r\n    start \"\" /b cmd /c \"%~f0\" %ARGS%\r\n    exit /b\r\n)\r\ngoto dispatch\r\nexit /b\r\n\r\n:dispatch\r\nif \"%PROGRAMS_CHECK%\"==\"0\" (\r\n    if \"%CONDA_CHECK_STATUS%\"==\"0\" (\r\n        if \"%DOCKER_CHECK_STATUS%\"==\"0\" (\r\n\t\t\tif \"%DOCKER_BUILD_STATUS%\"==\"0\" (\r\n\t\t\t\tgoto main\r\n\t\t\t\texit /b\r\n\t\t\t)\r\n\t\t) else (\r\n\t\t\tgoto failed\r\n\t\t\texit /b\r\n\t\t)\r\n    )\r\n)\r\necho PROGRAMS_CHECK: %PROGRAMS_CHECK%\r\necho CONDA_CHECK_STATUS: %CONDA_CHECK_STATUS%\r\necho DOCKER_CHECK_STATUS: %DOCKER_CHECK_STATUS%\r\necho DOCKER_BUILD_STATUS: %DOCKER_BUILD_STATUS%\r\ntimeout /t 5 /nobreak >nul\r\ngoto install_components\r\nexit /b\r\n\r\n:main\r\nif \"%SCRIPT_MODE%\"==\"%FULL_DOCKER%\" (\r\n    python %SCRIPT_DIR%\\app.py --script_mode %FULL_DOCKER% %ARGS%\r\n) else (\r\n\tif \"%CONDA_RUN_INIT%\"==\"1\" (\r\n\t\tcall conda init\r\n\t\tset \"CONDA_RUN_INIT=0\"\r\n\t)\r\n\tif not exist \"%SCRIPT_DIR%\\%PYTHON_ENV%\" (\r\n\t\tcall conda create --prefix %SCRIPT_DIR%\\%PYTHON_ENV% python=%PYTHON_VERSION% -y\r\n\t\tcall conda activate %SCRIPT_DIR%\\%PYTHON_ENV%\r\n\t\tcall python -m pip install --upgrade pip\r\n\t\tcall python -m pip install --upgrade -r requirements.txt --progress-bar=on\r\n\t) else (\r\n\t\tcall conda activate %SCRIPT_DIR%\\%PYTHON_ENV%\r\n\t)\r\n\tpython %SCRIPT_DIR%\\app.py --script_mode %SCRIPT_MODE% %ARGS%\r\n\tcall conda deactivate\r\n)\r\nexit /b\r\n\r\n:failed\r\necho ebook2audiobook is not correctly installed or run.\r\nexit /b\r\n\r\nendlocal\r\npause"
        },
        {
          "name": "ebook2audiobook.sh",
          "type": "blob",
          "size": 9.703125,
          "content": "#!/usr/bin/env bash\n\nPYTHON_VERSION=\"3.12\"\nexport TTS_CACHE=\"./models\"\n\nARGS=\"$@\"\n\n# Declare an associative array\ndeclare -A arguments\n\n# Parse arguments\nwhile [[ \"$#\" -gt 0 ]]; do\n    case \"$1\" in\n        --*)\n            key=\"${1/--/}\" # Remove leading '--'\n            if [[ -n \"$2\" && ! \"$2\" =~ ^-- ]]; then\n                # If the next argument is a value (not another option)\n                arguments[$key]=\"$2\"\n                shift # Move past the value\n            else\n                # Set to true for flags without values\n                arguments[$key]=true\n            fi\n            ;;\n        *)\n            echo \"Unknown option: $1\"\n            exit 1\n            ;;\n    esac\n    shift # Move to the next argument\ndone\n\nNATIVE=\"native\"\nDOCKER_UTILS=\"docker_utils\"\nFULL_DOCKER=\"full_docker\"\n\nSCRIPT_MODE=\"$NATIVE\"\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nWGET=$(which wget 2>/dev/null)\nREQUIRED_PROGRAMS=(\"calibre\" \"ffmpeg\")\nDOCKER_UTILS_IMG=\"utils\"\nPYTHON_ENV=\"python_env\"\nCURRENT_ENV=\"\"\n\nif [[ \"$OSTYPE\" != \"linux\"* && \"$OSTYPE\" != \"darwin\"* ]]; then\n\techo \"Error: OS $OSTYPE unsupported.\"\n\texit 1;\nfi\n\nARCH=$(arch)\n\nif [[ \"$OSTYPE\" == \"linux\"* ]]; then\n\tif [[ \"$ARCH\" == \"x86_64\" ]]; then\n\t\tCONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"\n\telif [[ \"$ARCH\" == \"aarch64\" ]]; then\n\t\tCONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh\"\n\telse\n\t\techo \"Error: Unsupported architecture for Linux: $ARCH.\"\n\t\texit 1\n\tfi\nelif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n\tif [[ \"$ARCH\" == \"x86_64\" ]]; then\n\t\tCONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\"\n\telif [[ \"$ARCH\" == \"arm64\" ]]; then\n\t\tCONDA_URL=\"https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\"\n\telse\n\t\techo \"Error: Unsupported architecture for MacOS: $ARCH. Are you possibly using Rosetta?\"\n\t\texit 1\n\tfi\nfi\n\nCONDA_INSTALLER=/tmp/Miniconda3-latest.sh\nCONDA_INSTALL_DIR=$HOME/miniconda3\nCONDA_PATH=$HOME/miniconda3/bin\nCONDA_ENV=~/miniconda3/etc/profile.d/conda.sh\nCONFIG_FILE=\"$HOME/.bashrc\"\nPATH=\"$CONDA_PATH:$PATH\"\n\ndeclare -a programs_missing\n\n# Check if the current script is run inside a docker container\nif [[ -n \"$container\" || -f /.dockerenv ]]; then\n\tSCRIPT_MODE=\"$FULL_DOCKER\"\nelse\n\tif [[ -n \"${arguments['script_mode']+exists}\" ]]; then\n\t\tif [ \"${arguments['script_mode']}\" = \"$NATIVE\" ] || [ \"${arguments['script_mode']}\" = \"$DOCKER_UTILS\" ]; then\n\t\t\tSCRIPT_MODE=\"${arguments['script_mode']}\"\n\t\tfi\n\tfi\nfi\n\n# Check if running in a Conda or Python virtual environment\nif [[ -n \"$CONDA_DEFAULT_ENV\" ]]; then\n    CURRENT_ENV=\"$CONDA_PREFIX\"\nelif [[ -n \"$VIRTUAL_ENV\" ]]; then\n    CURRENT_ENV=\"$VIRTUAL_ENV\"\nfi\n\n# If neither environment variable is set, check Python path\nif [[ -z \"$CURRENT_ENV\" ]]; then\n    PYTHON_PATH=$(which python 2>/dev/null)\n    if [[ ( -n \"$CONDA_PREFIX\" && \"$PYTHON_PATH\" == \"$CONDA_PREFIX/bin/python\" ) || ( -n \"$VIRTUAL_ENV\" && \"$PYTHON_PATH\" == \"$VIRTUAL_ENV/bin/python\" ) ]]; then\n        CURRENT_ENV=\"${CONDA_PREFIX:-$VIRTUAL_ENV}\"\n    fi\nfi\n\n# Output result if a virtual environment is detected\nif [[ -n \"$CURRENT_ENV\" ]]; then\n    echo -e \"Current python virtual environment detected: $CURRENT_ENV.\"\n    echo -e \"This script runs with its own virtual env and must be out of any other virtual environment when it's launched.\"\n    echo -e \"If you are using miniconda then you would type in:\"\n    echo -e \"conda deactivate\"\n    exit 1\nfi\n\nfunction required_programs_check {\n\tlocal programs=(\"$@\")\n\tfor program in \"${programs[@]}\"; do\n\t\tif ! command -v \"$program\" >/dev/null 2>&1; then\n\t\t\techo -e \"\\e[33m$program is not installed.\\e[0m\"\n\t\t\tprograms_missing+=($program)\n\t\tfi\n\tdone\n\tlocal count=${#programs_missing[@]}\n\tif [[ $count -eq 0 ]]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\n\nfunction install_programs {\n\techo -e \"\\e[33mInstalling required programs. NOTE: you must have 'sudo' priviliges or it will fail.\\e[0m\"\n\tif [[ \"$OSTYPE\" = \"darwin\"* ]]; then\n\t\tPACK_MGR=\"brew install\"\n\t\t\tif ! command -v brew &> /dev/null; then\n\t\t\t\techo -e \"\\e[33mHomebrew is not installed. Installing Homebrew...\\e[0m\"\n\t\t\t\t/usr/bin/env bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\t\t\t\techo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zprofile\n\t\t\t\teval \"$(/opt/homebrew/bin/brew shellenv)\"\n\t\t\tfi\n\telse\n\t\tif command -v emerge &> /dev/null; then\n\t\t\tPACK_MGR=\"sudo emerge\"\n\t\telif command -v dnf &> /dev/null; then\n\t\t\tPACK_MGR=\"sudo dnf install\"\n\t\t\tPACK_MGR_OPTIONS=\"-y\"\n\t\telif command -v yum &> /dev/null; then\n\t\t\tPACK_MGR=\"sudo yum install\"\n\t\t\tPACK_MGR_OPTIONS=\"-y\"\n\t\telif command -v zypper &> /dev/null; then\n\t\t\tPACK_MGR=\"sudo zypper install\"\n\t\t\tPACK_MGR_OPTIONS=\"-y\"\n\t\telif command -v pacman &> /dev/null; then\n\t\t\tPACK_MGR=\"sudo pacman -Sy\"\n\t\telif command -v apt-get &> /dev/null; then\n\t\t\tsudo apt-get update\n\t\t\tPACK_MGR=\"sudo apt-get install\"\n\t\t\tPACK_MGR_OPTIONS=\"-y\"\n\t\telif command -v apk &> /dev/null; then\n\t\t\tPACK_MGR=\"sudo apk add\"\n\t\telse\n\t\t\techo \"Cannot recognize your applications package manager. Please install the required applications manually.\"\n\t\t\treturn 1\n\t\tfi\n\t\t\n\tfi\n\tif [ -z \"$WGET\" ]; then\n\t\techo -e \"\\e[33m wget is missing! trying to install it... \\e[0m\"\n\t\tresult=$(eval \"$PACK_MGR wget $PACK_MGR_OPTIONS\" 2>&1)\n\t\tresult_code=$?\n\t\tif [ $result_code -eq 0 ]; then\n\t\t\tWGET=$(which wget 2>/dev/null)\n\t\telse\n\t\t\techo \"Cannot 'wget'. Please install 'wget'  manually.\"\n\t\t\treturn 1\n\t\tfi\n\tfi\n\tfor program in \"${programs_missing[@]}\"; do\n\t\tif [ \"$program\" = \"calibre\" ];then\t\t\t\t\n\t\t\t# avoid conflict with calibre builtin lxml\n\t\t\tpip uninstall lxml -y 2>/dev/null\n\t\t\techo -e \"\\e[33mInstalling Calibre...\\e[0m\"\n\t\t\tif [[ \"$OSTYPE\" = \"darwin\"* ]]; then\n\t\t\t\teval \"$PACK_MGR --cask calibre\"\n\t\t\telse\n\t\t\t\t$WGET -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin\n\t\t\tfi\n\t\t\tif command -v calibre >/dev/null 2>&1; then\n\t\t\t\techo -e \"\\e[32m===============>>> Calibre is installed! <<===============\\e[0m\"\n\t\t\telse\n\t\t\t\techo \"Calibre installation failed.\"\n\t\t\tfi\n\t\telse\n\t\t\teval \"$PACK_MGR $program $PKG_MGR_OPTIONS\"\t\t\t\t\n\t\t\tif command -v $program >/dev/null 2>&1; then\n\t\t\t\techo -e \"\\e[32m===============>>> $program is installed! <<===============\\e[0m\"\n\t\t\telse\n\t\t\t\techo \"$program installation failed.\"\n\t\t\tfi\n\t\tfi\n\tdone\n\tif required_programs_check \"${REQUIRED_PROGRAMS[@]}\"; then\n\t\treturn 0\n\telse\n\t\techo -e \"\\e[33mYou can run 'ebook2audiobook.sh --script_mode docker_utils' to avoid to install $REQUIRED_PROGRAMS natively.\\e[0m\"\n\t\treturn 1\n\tfi\n}\n\nfunction conda_check {\n\tif ! command -v conda &> /dev/null; then\n\t\techo -e \"\\e[33mconda is not installed!\\e[0m\"\n\t\techo -e \"\\e[33mDownloading conda installer...\\e[0m\"\n\t\twget -O \"$CONDA_INSTALLER\" \"$CONDA_URL\"\n\t\tif [[ -f \"$CONDA_INSTALLER\" ]]; then\n\t\t\techo -e \"\\e[33mInstalling Miniconda...\\e[0m\"\n\t\t\tbash \"$CONDA_INSTALLER\" -u -b -p \"$CONDA_INSTALL_DIR\"\n\t\t\trm -f \"$CONDA_INSTALLER\"\n\t\t\tif [[ -f \"$CONDA_INSTALL_DIR/bin/conda\" ]]; then\n\t\t\t\tconda init\n\t\t\t\techo -e \"\\e[32m===============>>> conda is installed! <<===============\\e[0m\"\n\t\t\telse\n\t\t\t\techo -e \"\\e[31mconda installation failed.\\e[0m\"\t\t\n\t\t\t\treturn 1\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"\\e[31mFailed to download Miniconda installer.\\e[0m\"\n\t\t\techo -e \"\\e[33mI'ts better to use the install.sh to install everything needed.\\e[0m\"\n\t\t\treturn 1\n\t\tfi\n\tfi\n\tif [[ ! -d $SCRIPT_DIR/$PYTHON_ENV ]]; then\n\t\t# Use this condition to chmod writable folders once\n\t\tchmod -R 777 ./audiobooks ./tmp ./models\n\t\tconda create --prefix $SCRIPT_DIR/$PYTHON_ENV python=$PYTHON_VERSION -y\n\t\tsource $CONDA_ENV\n\t\tconda activate $SCRIPT_DIR/$PYTHON_ENV\n\t\tpython -m pip install --upgrade pip\n\t\tpython -m pip install --upgrade -r requirements.txt --progress-bar=on\n\t\tconda deactivate\n\tfi\n\treturn 0\n}\n\nfunction docker_check {\n\tif ! command -v docker &> /dev/null; then\n\t\techo -e \"\\e[33m docker is missing! trying to install it... \\e[0m\"\n\t\tif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n\t\t\techo \"Installing Docker using Homebrew...\"\n\t\t\t$PACK_MGR --cask docker $PACK_MGR_OPTIONS\n\t\telse\n\t\t\t$WGET -qO get-docker.sh https://get.docker.com && \\\n\t\t\tsudo sh get-docker.sh\n\t\t\tsudo systemctl start docker\n\t\t\tsudo systemctl enable docker\n\t\t\tdocker run hello-world\n\t\t\trm -f get-docker.sh\n\t\tfi\n\t\techo -e \"\\e[32m===============>>> docker is installed! <<===============\\e[0m\"\n\t\tdocker_build\n\telse\n\t\t# Check if Docker service is running\n\t\tif docker info >/dev/null 2>&1; then\n\t\t\tif [[ \"$(docker images -q $DOCKER_UTILS_IMG 2> /dev/null)\" = \"\" ]]; then\n\t\t\t\tdocker_build\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"\\e[33mDocker is not running\\e[0m\"\n\t\t\treturn 1\n\t\tfi\n\tfi\n\treturn 0\n}\n\nfunction docker_build {\n# Check if the Docker socket is accessible\n\tif [[ -e /var/run/docker.sock || -e /run/docker.sock ]]; then\n\t\techo -e \"\\e[33mDocker image '$DOCKER_UTILS_IMG' not found. Trying to build it...\\e[0m\"\n\t\tdocker build -f DockerfileUtils -t utils .\n\telse\n\t\techo -e \"\\e[33mcannot connect to docker socket. Check if the docker socket is running.\\e[0m\"\n\tfi\n}\n\nif [ \"$SCRIPT_MODE\" = \"$FULL_DOCKER\" ]; then\n\techo -e \"\\e[33mRunning in $FULL_DOCKER mode\\e[0m\"\n\tpython app.py --script_mode $SCRIPT_MODE $ARGS\nelif [[ \"$SCRIPT_MODE\" == \"$NATIVE\" || \"$SCRIPT_MODE\" = \"$DOCKER_UTILS\" ]]; then\n\tpass=true\n\tif [ \"$SCRIPT_MODE\" == \"$NATIVE\" ]; then\n\t\techo -e \"\\e[33mRunning in $NATIVE mode\\e[0m\"\n\t\tif ! required_programs_check \"${REQUIRED_PROGRAMS[@]}\"; then\n\t\t\tif ! install_programs; then\n\t\t\t\tpass=false\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo -e \"\\e[33mRunning in $DOCKER_UTILS mode\\e[0m\"\n\t\tif conda_check; then\n\t\t\tif docker_check; then\n\t\t\t\tsource $CONDA_ENV\n\t\t\t\tconda activate $SCRIPT_DIR/$PYTHON_ENV\n\t\t\t\tpython app.py --script_mode $DOCKER_UTILS $ARGS\n\t\t\t\tconda deactivate\n\t\t\tfi\n\t\tfi\n\tfi\n\tif [ $pass = true ]; then\n\t\tif conda_check; then\n\t\t\tsource $CONDA_ENV\n\t\t\tconda activate $SCRIPT_DIR/$PYTHON_ENV\n\t\t\tpython app.py --script_mode $SCRIPT_MODE $ARGS\n\t\t\tconda deactivate\n\t\tfi\n\tfi\nelse\n\techo -e \"\\e[33mebook2audiobook is not correctly installed or run.\\e[0m\"\nfi\n\nexit 0\n"
        },
        {
          "name": "ebook2audiobookXTTS.egg-info",
          "type": "tree",
          "content": null
        },
        {
          "name": "ebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0146484375,
          "content": "[build-system]\r\nname = \"ebook2audiobook\"\r\nversion = \"2.0.0\"\r\nrequires = [\"setuptools >= 64\"]\r\nbuild-backend = \"setuptools.build_meta\"\r\n\r\n[project]\r\nname = \"ebook2audiobook\"\r\nversion = \"2.0.0\"\r\ndescription = \"Convert eBooks to audiobooks with chapters and metadata\"\r\nauthors = [\r\n    { name = \"Drew Thomasson\" }\r\n]\r\ndependencies = [\r\n    \"beautifulsoup4\",\r\n    \"coqui-tts\",\r\n    \"cutlet\",\r\n\t\"deep_translator\",\r\n    \"docker\",\r\n    \"ebooklib\",\r\n    \"gensim\",\r\n    \"gradio>=4.44\",\r\n    \"hangul-romanize\",\r\n    \"indic-nlp-library\",\r\n\t\"iso-639\",\r\n    \"jieba\",\r\n\t\"m4b-util\",\r\n\t\"mecab\",\r\n\t\"mecab-python3\",\r\n    \"pydub\",\r\n    \"pypinyin\",\r\n\t\"ray\",\r\n\t\"transformers\",\r\n    \"translate\",\r\n    \"tqdm\",\r\n\t\"unidic\"\r\n]\r\nreadme = \"README.md\"\r\nrequires-python = \">=3.10,<3.13\"\r\nclassifiers = [\r\n    \"Programming Language :: Python :: 3\",\r\n    \"License :: OSI Approved :: MIT License\",\r\n    \"Operating System :: OS Independent\",\r\n]\r\nscripts = { \"ebook2audiobook\" = \"app:main\" }\r\n\r\n[project.urls]\r\n\"Homepage\" = \"https://github.com/DrewThomasson/ebook2audiobook\""
        },
        {
          "name": "readme",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2294921875,
          "content": "beautifulsoup4\r\ncoqui-tts\r\ncutlet\r\ndeep_translator\r\ndocker\r\nebooklib\r\ngensim\r\ngradio>=4.44\r\nhangul-romanize\r\nindic-nlp-library\r\niso-639\r\njieba\r\nm4b-util\r\nmecab\r\nmecab-python3\r\npydub\r\npypinyin\r\nray\r\ntransformers\r\ntranslate\r\ntqdm\r\nunidic"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.533203125,
          "content": "import subprocess\r\nimport sys\r\nfrom setuptools import setup, find_packages\r\nfrom setuptools.command.develop import develop\r\nfrom setuptools.command.install import install\r\nimport os\r\n\r\ncwd = os.path.dirname(os.path.abspath(__file__))\r\n\r\nwith open(\"README.md\", \"r\", encoding='utf-8') as fh:\r\n    long_description = fh.read()\r\n\r\nwith open('requirements.txt') as f:\r\n    requirements = f.read().splitlines()\r\n\r\nclass PostInstallCommand(install):\r\n    def run(self):\r\n        install.run(self)\r\n        try:\r\n            subprocess.run([sys.executable, 'python -m', 'unidic', 'download'], check=True)\r\n        except Exception:\r\n            print(\"unidic download failed during installation, but it will be re-attempted a diffrent way when the app itself runs.\")\r\n\r\n\r\nsetup(\r\n    name='ebook2audiobook',\r\n    version='2.0.0',\r\n    python_requires=\">=3.10,<3.13\",\r\n    author=\"Drew Thomasson\",\r\n    description=\"Convert eBooks to audiobooks with chapters and metadata\",\r\n    long_description=long_description,\r\n    long_description_content_type=\"text/markdown\",\r\n    url=\"https://github.com/DrewThomasson/ebook2audiobook\",\r\n    packages=find_packages(),\r\n    install_requires=requirements,\r\n    classifiers=[\r\n        \"Programming Language :: Python :: 3\",\r\n        \"License :: OSI Approved :: MIT License\",\r\n        \"Operating System :: OS Independent\",\r\n    ],\r\n    include_package_data=True,\r\n    entry_points={\r\n        \"console_scripts\": [\r\n            \"ebook2audiobook = app:main\",\r\n        ],\r\n    },\r\n    cmdclass={\r\n        'install': PostInstallCommand,\r\n    }\r\n)\r\n"
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "voices",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}