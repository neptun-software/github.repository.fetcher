{
  "metadata": {
    "timestamp": 1736561069690,
    "page": 860,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andrewyng/translation-agent",
      "stars": 5022,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.sample",
          "type": "blob",
          "size": 0.080078125,
          "content": "OPENAI_API_KEY=\"sk-xxxxx\"    # replace \"sk-xxxxx\" with your secret OpenAI API key\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.080078125,
          "content": "cache_dir\n.env\n.venv\n__pycache__\npoetry.lock\nfloresp-v2.0-rc.3\n*cache\nwmt\noutputs\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.65234375,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: trailing-whitespace\n        exclude: tests\n      - id: end-of-file-fixer\n      - id: check-merge-conflict\n      - id: check-case-conflict\n      - id: check-json\n      - id: check-toml\n        exclude: tests/fixtures/invalid_lock/poetry\\.lock\n      - id: check-yaml\n      - id: pretty-format-json\n        args: [--autofix, --no-ensure-ascii, --no-sort-keys]\n      - id: check-ast\n      - id: debug-statements\n      - id: check-docstring-first\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.3.5\n    hooks:\n      - id: ruff\n      - id: ruff-format\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.970703125,
          "content": "<!-- omit in toc -->\n# Contributing to translation-agent\n\nFirst off, thanks for taking the time to contribute!\n\nAll types of contributions are encouraged and valued. See the [Table of Contents](#table-of-contents) for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions.\n\n> And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:\n> - Star the project\n> - Tweet about it\n> - Refer this project in your project's readme\n> - Mention the project at local meetups and tell your friends/colleagues\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [I Have a Question](#i-have-a-question)\n- [I Want To Contribute](#i-want-to-contribute)\n  - [Reporting Bugs](#reporting-bugs)\n  - [Suggesting Enhancements](#suggesting-enhancements)\n  - [Your First Code Contribution](#your-first-code-contribution)\n  - [Improving The Documentation](#improving-the-documentation)\n- [Styleguides](#styleguides)\n  - [Commit Messages](#commit-messages)\n\n\n\n\n## I Have a Question\n\n> If you want to ask a question, we assume that you have read the available [Documentation](https://github.com/andrewyng/translation-agent/blob/main/README.md).\n\nBefore you ask a question, it is best to search for existing [Issues](https://github.com/andrewyng/translation-agent/issues) that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.\n\nIf you then still feel the need to ask a question and need clarification, we recommend the following:\n\n- Open an [Issue](https://github.com/andrewyng/translation-agent/issues/new).\n- Provide as much context as you can about what you're running into.\n- Provide project and platform versions (python, OS, etc.), depending on what seems relevant.\n\nWe (or someone in the community) will then take care of the issue as soon as possible.\n\n<!--\nYou might want to create a separate issue tag for questions and include it in this description. People should then tag their issues accordingly.\n\n-->\n\n## I Want To Contribute\n\n> ### Legal Notice <!-- omit in toc -->\n> When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.\n\n### Reporting Bugs\n\n<!-- omit in toc -->\n#### Before Submitting a Bug Report\n\nA good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.\n\n- Make sure that you are using the latest version.\n- Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the [documentation](https://github.com/andrewyng/translation-agent/blob/main/README.md). If you are looking for support, you might want to check [this section](#i-have-a-question)).\n- To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the [bug tracker](https://github.com/andrewyng/translation-agentissues?q=label%3Abug).\n- Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.\n- Collect information about the bug:\n  - Stack trace (Traceback)\n  - OS, Platform and Version (Windows, Linux, macOS, x86, ARM)\n  - Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.\n  - Possibly your input and the output\n  - Can you reliably reproduce the issue? And can you also reproduce it with older versions?\n\n<!-- omit in toc -->\n#### How Do I Submit a Good Bug Report?\n\n> You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to <joaquin.dominguez@proton.me>.\n<!-- You may add a PGP key to allow the messages to be sent encrypted as well. -->\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\n- Open an [Issue](https://github.com/andrewyng/translation-agent/issues/new). (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)\n- Explain the behavior you would expect and the actual behavior.\n- Please provide as much context as possible and describe the *reproduction steps* that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.\n- Provide the information you collected in the previous section.\n\nOnce it's filed:\n\n- The project team will label the issue accordingly.\n- A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as `needs-repro`. Bugs with the `needs-repro` tag will not be addressed until they are reproduced.\n- If the team is able to reproduce the issue, it will be marked `needs-fix`, as well as possibly other tags (such as `critical`), and the issue will be left to be [implemented by someone](#your-first-code-contribution).\n\nPlease use the issue templates provided.\n\n<!-- You might want to create an issue template for bugs and errors that can be used as a guide and that defines the structure of the information to be included. If you do so, reference it here in the description. -->\n\n\n### Suggesting Enhancements\n\nThis section guides you through submitting an enhancement suggestion for translation-agent, **including completely new features and minor improvements to existing functionality**. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.\n\n<!-- omit in toc -->\n#### Before Submitting an Enhancement\n\n- Make sure that you are using the latest version.\n- Read the [documentation](https://github.com/andrewyng/translation-agent/blob/main/README.md) carefully and find out if the functionality is already covered, maybe by an individual configuration.\n- Perform a [search](https://github.com/andrewyng/translation-agent/issues) to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.\n- Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.\n\n<!-- omit in toc -->\n#### How Do I Submit a Good Enhancement Suggestion?\n\nEnhancement suggestions are tracked as [GitHub issues](https://github.com/andrewyng/translation-agent/issues).\n\n- Use a **clear and descriptive title** for the issue to identify the suggestion.\n- Provide a **step-by-step description of the suggested enhancement** in as many details as possible.\n- **Describe the current behavior** and **explain which behavior you expected to see instead** and why. At this point you can also tell which alternatives do not work for you.\n- You may want to **include screenshots and animated GIFs** which help you demonstrate the steps or point out the part which the suggestion is related to. You can use [this tool](https://www.cockos.com/licecap/) to record GIFs on macOS and Windows, and [this tool](https://github.com/colinkeenan/silentcast) or [this tool](https://github.com/GNOME/byzanz) on Linux. <!-- this should only be included if the project has a GUI -->\n- **Explain why this enhancement would be useful** to most translation-agent users. You may also want to point out the other projects that solved it better and which could serve as inspiration.\n\n<!-- You might want to create an issue template for enhancement suggestions that can be used as a guide and that defines the structure of the information to be included. If you do so, reference it here in the description. -->\n\n### Your First Code Contribution\n\n#### Pre-requisites\n\nYou should first [fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) the `translation-agent` repository and then clone your forked repository:\n\n```bash\ngit clone https://github.com/<YOUR_GITHUB_USER>/translation-agent.git\n```\n\n\n\nOnce in the cloned repository directory, make a branch on the forked repository with your username and description of PR:\n```bash\ngit checkout -B <username>/<description>\n```\n\nPlease install the development and test dependencies:\n```bash\npoetry install --with dev,test\n```\n\n`translation-agent` uses pre-commit to ensure the formatting is consistent:\n```bash\npre-commit install\n```\n\n**Make suggested changes**\n\nAfterwards, our suite of formatting tests will run automatically before each `git commit`. You can also run these manually:\n```bash\npre-commit run --all-files\n```\n\nIf a formatting test fails, it will fix the modified code in place and abort the `git commit`. After looking over the changes, you can `git add <modified files>` and then repeat the previous git commit command.\n\n**Note**: a github workflow will check the files with the same formatter and reject the PR if it doesn't pass, so please make sure it passes locally.\n\n\n#### Testing\n`translation-agent` tracks unit tests. Pytest is used to execute said unit tests in `tests/`:\n\n```bash\npytest tests\n```\n\nIf your code changes implement a new function, please make a corresponding unit test to the `test/*` files.\n\n#### Contributing Workflow\nWe actively welcome your pull requests.\n\n1. Create your new branch from main in your forked repo, with your username and a name describing the work you're completing e.g. user-123/add-feature-x.\n2. If you've added code that should be tested, add tests. Ensure all tests pass. See the testing section for more information.\n3. If you've changed APIs, update the documentation.\n4. Make sure your code lints.\n\n\n\n### Improving The Documentation\nWe welcome valuable contributions in the form of new documentation or revised documentation that provide further clarity or accuracy. Each function should be clearly documented. Well-documented code is easier to review and understand/extend.\n\n## Styleguides\nFor code documentation, please follow the [Google styleguide](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2024 Andrew Ng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6796875,
          "content": "# Translation Agent: Agentic translation using reflection workflow\n\nThis is a Python demonstration of a reflection agentic workflow for machine translation. The main steps are:\n1. Prompt an LLM to translate a text from `source_language` to `target_language`;\n2. Have the LLM reflect on the translation to come up with constructive suggestions for improving it;\n3. Use the suggestions to improve the translation.\n\n## Customizability\n\nBy using an LLM as the heart of the translation engine, this system is highly steerable. For example, by changing the prompts, it is easier using this workflow than a traditional machine translation (MT) system to:\n- Modify the output's style, such as formal/informal.\n- Specify how to handle idioms and special terms like names, technical terms, and acronyms. For example, including a glossary in the prompt lets you make sure particular terms (such as open source, H100 or GPU) are translated consistently.\n- Specify specific regional use of the language, or specific dialects, to serve a target audience. For example, Spanish spoken in Latin America is different from Spanish spoken in Spain; French spoken in Canada is different from how it is spoken in France.\n\n**This is not mature software**, and is the result of Andrew playing around with translations on weekends the past few months, plus collaborators (Joaquin Dominguez, Nedelina Teneva, John Santerre) helping refactor the code.\n\nAccording to our evaluations using BLEU score on traditional translation datasets, this workflow is sometimes competitive with, but also sometimes worse than, leading commercial offerings. However, we’ve also occasionally gotten fantastic results (superior to commercial offerings) with this approach. We think this is just a starting point for agentic translations, and that this is a promising direction for translation, with significant headroom for further improvement, which is why we’re releasing this demonstration to encourage more discussion, experimentation, research and open-source contributions.\n\nIf agentic translations can generate better results than traditional architectures (such as an end-to-end transformer that inputs a text and directly outputs a translation) -- which are often faster/cheaper to run than our approach here -- this also provides a mechanism to automatically generate training data (parallel text corpora) that can be used to further train and improve traditional algorithms. (See also [this article in The Batch](https://www.deeplearning.ai/the-batch/building-models-that-learn-from-themselves/) on using LLMs to generate training data.)\n\nComments and suggestions for how to improve this are very welcome!\n\n\n## Getting Started\n\nTo get started with `translation-agent`, follow these steps:\n\n### Installation:\n- The Poetry package manager is required for installation. [Poetry Installation](https://python-poetry.org/docs/#installation) Depending on your environment, this might work:\n\n```bash\npip install poetry\n```\n\n- A .env file with a OPENAI_API_KEY is required to run the workflow. See the .env.sample file as an example.\n```bash\ngit clone https://github.com/andrewyng/translation-agent.git\ncd translation-agent\npoetry install\npoetry shell # activates virtual environment\n```\n### Usage:\n\n```python\nimport translation_agent as ta\nsource_lang, target_lang, country = \"English\", \"Spanish\", \"Mexico\"\ntranslation = ta.translate(source_lang, target_lang, source_text, country)\n```\nSee examples/example_script.py for an example script to try out.\n\n## License\n\nTranslation Agent is released under the **MIT License**. You are free to use, modify, and distribute the code\nfor both commercial and non-commercial purposes.\n\n## Ideas for extensions\n\nHere are ideas we haven’t had time to experiment with but that we hope the open-source community will:\n- **Try other LLMs.** We prototyped this primarily using gpt-4-turbo. We would love for others to experiment with other LLMs as well as other hyperparameter choices and see if some do better than others for particular language pairs.\n- **Glossary Creation.** What’s the best way to efficiently build a glossary -- perhaps using an LLM -- of the most important terms that we want translated consistently? For example, many businesses use specialized terms that are not widely used on the internet and that LLMs thus don’t know about, and there are also many terms that can be translated in multiple ways. For example, ”open source” in Spanish can be “Código abierto” or “Fuente abierta”; both are fine, but it’d better to pick one and stick with it for a single document.\n- **Glossary Usage and Implementation.** Given a glossary, what’s the best way to include it in the prompt?\n- **Evaluations on different languages.** How does its performance vary in different languages? Are there changes that make it work better for particular source or target languages? (Note that for very high levels of performance, which MT systems are approaching, we’re not sure if BLEU is a great metric.) Also, its performance on lower resource languages needs further study.\n- **Error analysis.** We’ve found that specifying a language and a country/region (e.g., “Spanish as colloquially spoken in Mexico”) does a pretty good job for our applications. Where does the current approach fall short? We’re also particularly interested in understanding its performance on specialized topics (like law, medicine) or special types of text (like movie subtitles) to understand its limitations.\n- **Better evals.** Finally, we think better evaluations (evals) is a huge and important research topic. As with other LLM applications that generate free text, current evaluation metrics appear to fall short. For example, we found that even on documents where our agentic workflow captures context and terminology better, resulting in translations that our human raters prefer over current commercial offerings, evaluation at the sentence level (using the [FLORES](https://github.com/facebookresearch/flores) dataset) resulted in the agentic system scoring lower on BLEU. Can we design better metrics (perhaps using an LLM to evaluate translations?) that capture translation quality at a document level that correlates better with human preferences?\n\n## Related work\n\nA few academic research groups are also starting to look at LLM-based and agentic translation. We think it’s early days for this field!\n- *ChatGPT MT: Competitive for High- (but not Low-) Resource Languages*, Robinson et al. (2023), https://arxiv.org/pdf/2309.07423\n- *How to Design Translation Prompts for ChatGPT: An Empirical Study*, Gao et al. (2023), https://arxiv.org/pdf/2304.02182v2\n- *Beyond Human Translation: Harnessing Multi-Agent Collaboration for Translating Ultra-Long Literary Texts*, Wu et al. (2024),  https://arxiv.org/pdf/2405.11804\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.9150390625,
          "content": "[tool.poetry]\nname = \"translation-agent\"\nversion = \"0.1.0\"\ndescription = \"Agentic workflow for machine translation using LLMs\"\nauthors = [\"Andrew Ng <ng@deeplearning.ai>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\npackage-mode = true\npackages = [{ include = \"translation_agent\", from = \"src\" }]\nrepository = \"https://github.com/andrewyng/translation-agent\"\nkeywords = [\"translation\", \"agents\", \"LLM\", \"machine translation\"]\n\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\nopenai = \"^1.28.1\"\ntiktoken = \"^0.6.0\"\njoblib = \"^1.4.2\"\npysrt = \"^1.1.2\"\nicecream = \"^2.1.3\"\nlangchain-text-splitters = \"^0.0.1\"\npython-dotenv = \"^1.0.1\"\n\n[tool.poetry.group.app]\noptional = true\n\n[tool.poetry.group.app.dependencies]\nsimplemma = \"^1.0.0\"\ngradio = \"4.37.2\"\npython-docx = \"^1.1.2\"\nPyMuPDF = \"^1.24.7\"\n\n[tool.poetry.group.dev]\noptional = true\n\n[tool.poetry.group.dev.dependencies]\nblack = \"^24.4.2\"\nflake8 = \"^7.0.0\"\npyright = \"^1.1.362\"\npre-commit = \"^3.7.1\"\nruff = \"^0.4.4\"\n\n[tool.poetry.group.test]\noptional = true\n\n[tool.poetry.group.test.dependencies]\npytest = \"^8.2.0\"\nmypy = \"^1.10.0\"\npytest-mock = \"^3.14.0\"\n\n[tool.poetry.group.eval]\noptional = true\n\n[tool.poetry.group.eval.dependencies]\nnltk = \"^3.8.1\"\nsacrebleu = \"^2.4.2\"\ngoogle-cloud-translate = \"^3.15.3\"\ndeepl = \"^1.18.0\"\nnumpy = \"^1.26.4\"\nscipy = \"^1.13.0\"\ngradio = \"^4.31.5\"\nrequests = \"^2.32.3\"\nbeautifulsoup4 = \"^4.12.3\"\nsentencepiece = \"^0.2.0\"\n\n\n[[tool.poetry.source]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/nightly/rocm6.0\"\npriority = \"supplemental\"\n\n[tool.ruff]\n# Set the maximum line length to 79.\nline-length = 79\nindent-width = 4\nexclude = [\".venv\", \".env\", \".git\", \"tests\", \"eval\", \".jj\"]\n\n[tool.ruff.lint]\n# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that\n# overlap with the use of a formatter, like Black, but we can override this behavior by\n# explicitly adding the rule.\nextend-select = [\n    \"B\",   # flake8-bugbear\n    \"C4\",  # flake8-comprehensions\n    \"ERA\", # flake8-eradicate/eradicate\n    \"I\",   # isort\n    \"N\",   # pep8-naming\n    \"PIE\", # flake8-pie\n    \"PGH\", # pygrep\n    \"RUF\", # ruff checks\n    \"SIM\", # flake8-simplify\n    # \"T20\", # flake8-print\n    \"TCH\", # flake8-type-checking\n    \"TID\", # flake8-tidy-imports\n    \"UP\",  # pyupgrade\n]\nfixable = [\"ALL\"]\nignore = [\"SIM117\"]\n\n[tool.ruff.lint.isort]\nforce-single-line = false\nlines-after-imports = 2\nknown-first-party = [\"translation-agent\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"**/__init__.py\" = [\"E402\", \"F401\"]\n\"**/{tests,docs,tools}/*\" = [\"E402\"]\n\n\n[tool.mypy]\nfiles = \"src, tests\"\nmypy_path = \"src\"\nnamespace_packages = true\nexplicit_package_bases = true\nshow_error_codes = true\nstrict = true\nenable_error_code = [\"ignore-without-code\", \"redundant-expr\", \"truthy-bool\"]\nexclude = [\"tests\"]\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\nskip-magic-trailing-comma = false\nline-ending = \"auto\"\n\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}