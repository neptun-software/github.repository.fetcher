{
  "metadata": {
    "timestamp": 1736560476956,
    "page": 63,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FMInference/FlexLLMGen",
      "stars": 9256,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5966796875,
          "content": "# Mac system files\n.DS_store\n\n# built binaries\nbenchmark/third_party/pagecache-mangagement/trunk/fadv\nbenchmark/third_party/pagecache-mangagement/trunk/*.so\nbenchmark/third_party/pagecache-mangagement/trunk/sfr\nbenchmark/third_party/pagecache-mangagement/trunk/Makefile\ndist\n\n# vscode & VIM & JetBrain\n.vscode/\n.idea\n*.swp\n\n# cache\n*__pycache__\n*.egg-info\nflexllmgen/apps/data\nflexllmgen/apps/runs\nflexllmgen/apps/benchmark_output\nflexllmgen/apps/data_wrangle/data\nflexllmgen/apps/data_wrangle/outputs\nflexllmgen/apps/data_wrangle/core\n\n# pickle\n*.pkl\n\n# log files\n*.tsv\n*.log\n*.raw\n\n# tmp scripts\ntoday_job.sh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.150390625,
          "content": "Copyright 2023 - The FlexLLMGen team. All rights reserved.\n\n                                  Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.369140625,
          "content": "# FlexLLMGen: High-throughput Generative Inference of Large Language Models with a Single GPU [[paper](https://arxiv.org/abs/2303.06865)]\n\nFlexLLMGen is a high-throughput generation engine for running large language models with limited GPU memory. FlexLLMGen allows **high-throughput** generation by IO-efficient offloading, compression, and **large effective batch sizes**.\n\n## Motivation\n\nIn recent years, large language models (LLMs) have shown great performance across a \nwide range of tasks. Increasingly, LLMs have been applied not only to interactive \napplications (such as chat), but also to many \"back-of-house\" tasks.\nThese tasks include benchmarking, information extraction, data wrangling, and form processing.\n\nOne key characteristic of these applications is that they are **throughput-oriented**: they require\nrunning LLM inferences over millions of tokens in batches, e.g., all the private documents in a company's\ncorpus, or all the tasks in the [HELM](https://crfm.stanford.edu/helm/latest/) benchmark.\nThese workloads are less sensitive to latency - the user starts up a job and lets it run overnight -\nbut increasing throughput is critical for reducing costs.\nThroughput is a measure of tokens processed per second over the job's entire runtime (which can be hours).\nThroughput-oriented workloads provide opportunities to trade off latency for higher throughput, which\nmakes it easier to take advantage of low-cost commodity GPUs. \n\nThe goal of FlexLLMGen is to create a high-throughput system to enable new and exciting applications of \nfoundation models to throughput-oriented tasks on low-cost hardware, such as a single commodity GPU\ninstead of expensive systems.\n\nCheck out the [examples](#examples) of what you can run on a single commodity GPU with FlexLLMGen, including benchmarking and data wrangling.\n\n❌ **Limitation**. As an offloading-based system running on weak GPUs, FlexLLMGen also has its limitations.\nFlexLLMGen can be significantly slower than the case when you have enough powerful GPUs to hold the whole model, especially for small-batch cases.\nFlexLLMGen is mostly optimized for throughput-oriented batch processing settings (e.g., classifying or extracting information from many documents in batches), on single GPUs.\n\n----------\n\nThis project was made possible thanks to a collaboration with\n\n<a href=\"https://cs.stanford.edu/\"><img src=\"https://identity.stanford.edu/wp-content/uploads/sites/3/2020/06/wordmark-nospace-red.png\" height=\"20\"></a> &nbsp;&nbsp;&nbsp;\n<a href=\"https://sky.cs.berkeley.edu/\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/University_of_California%2C_Berkeley_logo.svg/1280px-University_of_California%2C_Berkeley_logo.svg.png\" height=\"22\"></a> &nbsp;&nbsp;&nbsp;\n<a href=\"https://www.andrew.cmu.edu/user/beidic/\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/9/9b/Carnegie_Mellon_wordmark.svg\" height=\"20\"></a> &nbsp;&nbsp;&nbsp;\n<a href=\"https://www.together.xyz/\"><img src=\"https://images.squarespace-cdn.com/content/v1/6358bea282189a0adf57fe16/eef09191-631f-40d9-9bfd-f875b25bcf0b/together-logo-black-transparent2.png\" height=\"20\"></a> &nbsp;&nbsp;&nbsp;\n<a href=\"https://research.yandex.com/\"><img src=\"https://storage.yandexcloud.net/yandex-research/assets/yandex_research.png\" height=\"20\"></a> &nbsp;&nbsp;&nbsp;\n<a href=\"https://ds3lab.inf.ethz.ch/\"><img src=\"https://user-images.githubusercontent.com/1608867/220273382-c09669b3-42fd-47c2-b88c-7ed55cb43820.png\" height=\"20\"></a>\n\n----------\n\n## Content\n- [Installation](#installation)\n- [Usage and Examples](#usage-and-examples)\n  - [Get Started with a Single GPU](#get-started-with-a-single-gpu)\n  - [Run HELM Benchmark with FlexLLMGen](#run-helm-benchmark-with-flexllmgen)\n  - [Run Data Wrangling Tasks with FlexLLMGen](#run-data-wrangling-tasks-with-flexllmgen)\n  - [Scaling to Distributed GPUs](#scaling-to-distributed-gpus)\n  - [API Example](#api-example)\n  - [Frequently Asked Questions](#frequently-asked-questions)\n- [Performance Results](#performance-results)\n- [How It Works](#how-it-works)\n- [Roadmap](#roadmap)\n\n## Installation\nRequirements:  \n - PyTorch >= 1.12 [(Help)](https://pytorch.org/get-started/locally/)\n\n### Method 1: With pip\n```\npip install flexllmgen\n```\n\n### Method 2: From source\n```\ngit clone https://github.com/FMInference/FlexLLMGen.git\ncd FlexLLMGen\npip install -e .\n```\n\n## Usage and Examples\n\n### Get Started with a Single GPU\n\n#### OPT-1.3B\nTo get started, you can try a small model like OPT-1.3B first. It fits into a single GPU so no offloading is required.\nFlexLLMGen will automatically download weights from Hugging Face.\n```\npython3 -m flexllmgen.flex_opt --model facebook/opt-1.3b\n```\n\nYou should see some text generated by OPT-1.3B and the benchmark results.\n\n#### OPT-30B\nTo run large models like OPT-30B, you will need to use CPU offloading. You can try commands below.\nThe `--percent` argument specifies the offloading strategy for parameters, attention cache and hidden states separately.\nThe exact meaning of this argument can be found [here](https://github.com/FMInference/FlexLLMGen/blob/9d092d848f106cd9eaf305c12ef3590f7bcb0277/flexllmgen/flex_opt.py#L1271-L1279).\n```\npython3 -m flexllmgen.flex_opt --model facebook/opt-30b --percent 0 100 100 0 100 0\n```\n\n#### OPT-175B\nTo run OPT-175B, you need to download the weights from [metaseq](https://github.com/facebookresearch/metaseq/tree/main/projects/OPT) and convert the weights into Alpa [format](https://alpa.ai/tutorials/opt_serving.html#convert-opt-175b-weights-into-alpa-formats).\nYou can then try to offloading all weights to disk by\n```\npython3 -m flexllmgen.flex_opt --model facebook/opt-175b --percent 0 0 100 0 100 0 --offload-dir YOUR_SSD_FOLDER\n```\n\n### Run HELM Benchmark with FlexLLMGen\nFlexLLMGen can be integrated into [HELM](https://crfm.stanford.edu/helm), a language model benchmark framework, as its execution backend.\nYou can use the commands below to run a Massive Multitask Language Understanding (MMLU) [scenario](https://crfm.stanford.edu/helm/latest/?group=mmlu) with a single T4 (16GB) GPU and 200GB of DRAM.\n```\npip install crfm-helm\npython3 -m flexllmgen.apps.helm_run --description mmlu:model=text,subject=abstract_algebra,data_augmentation=canonical --pad-to-seq-len 512 --model facebook/opt-30b --percent 20 80 0 100 0 100 --gpu-batch-size 48 --num-gpu-batches 3 --max-eval-instance 100\n```\nNote that only a subset of HELM scenarios is tested. See more tested scenarios [here](flexllmgen/apps/helm_passed_30b.sh).\n\n### Run Data Wrangling Tasks with FlexLLMGen\nYou can run the examples in this paper, ['Can Foundation Models Wrangle Your Data?'](https://arxiv.org/abs/2205.09911), by following the instructions [here](flexllmgen/apps/data_wrangle).\n\n### Scaling to Distributed GPUs\nIf you have multiple machines with GPUs, FlexLLMGen can combine offloading with pipeline parallelism to allow scaling.\nFor example, if you have 2 GPUs but the aggregated GPU memory is less than the model size, you still need offloading. FlexLLMGen allow you to do pipeline parallelism with these 2 GPUs to accelerate the generation.\nBut to have scaled performance, you should have GPUs on distributed machines.\nSee examples [here](https://github.com/FMInference/FlexLLMGen/tree/main/benchmark/flexllmgen#distributed-gpus).\n\n### API Example\nWe demonstrate the usage of FlexLLMGen API in [completion.py](flexllmgen/apps/completion.py).\nThis example shows how to run generation for two sentences.\nTo get the best throughput out of FlexLLMGen, you typically need to batch more sentences.\n\n#### Generation API\nFlexLLMGen has a generation API following the style of Hugging Face's transformers.\n```python\noutput_ids = model.generate(\n\tinput_ids,\n\tdo_sample=True,\n\ttemperature=0.7,\n\tmax_new_tokens=32,\n\tstop=stop)\n```\n\n#### Example Commands\nYou can use the example commands below.\nIf you do not have enough GPU/CPU memory, see the [Handle Out-Of-Memory](#handle-out-of-memory) section.\n\n```\n# Complete with OPT-6.7B. You need at least 15GB of GPU memory.\npython3 -m flexllmgen.apps.completion --model facebook/opt-6.7b\n```\n\n```\n# Complete with OPT-30B. You need about 90GB of CPU memory.\npython3 -m flexllmgen.apps.completion --model facebook/opt-30b --percent 0 100 100 0 100 0\n```\n\n```\n# Complete with instruction-tuned OPT-IML-MAX-30B. You need about 90GB of CPU memory.\npython3 -m flexllmgen.apps.completion --model facebook/opt-iml-max-30b --percent 0 100 100 0 100 0\n```\n\n### Frequently Asked Questions\n\n#### How to set the offloading strategy and `--percent`?\nWe will release an automatic policy optimizer later, but now you have to manually try a few strategies.\nThe idea of high-throughput generation is to offload parameters and attention cache as much as possible to the CPU and disk if necessary.\nYou can see the reference strategies in our benchmark [here](https://github.com/FMInference/FlexLLMGen/blob/9d092d848f106cd9eaf305c12ef3590f7bcb0277/benchmark/flexllmgen/bench_suite.py#L39-L79).\nTo avoid out-of-memory, you can tune the `--percent` to offload more tensors to the CPU and disk.\n\n\n#### How to handle out-of-memory?\nIf you do not have enough GPU/CPU memory, here are a few things you can try.\nThey save more memory but run slower.\n\n- Do not pin weights by adding `--pin-weight 0`. This can reduce the weight memory usage on CPU by around 20% or more.\n- Enable weight compression by adding `--compress-weight`. This can reduce the weight memory usage by around 70%.\n- Offload all weights to disk by using `--percent 0 0 100 0 100 0`. This requires very little CPU and GPU memory.\n\n## Performance Results\n### Generation Throughput (token/s)\nThe corresponding effective batch sizes and lowest offloading devices are in parentheses. Please see [here](benchmark/batch_size_table.md) for more details.\n| System | OPT-6.7B | OPT-30B | OPT-175B |\n| ------ | -------- | ------- | -------- |\n| Hugging Face Accelerate  | 25.12 (2 on GPU)  | 0.62 (8 on CPU) | 0.01 (2 on disk) |\n| DeepSpeed ZeRO-Inference | 9.28 (16 on CPU)  | 0.60 (4 on CPU) | 0.01 (1 on disk) |\n| Petals                 | 8.25 (2 on GPU) | 2.84 (2 on GPU) | 0.08 (2 on GPU) |\n| FlexLLMGen                  | 25.26 (2 on GPU) | 7.32 (144 on CPU) | 0.69 (256 on disk) |\n| FlexLLMGen with Compression | **29.12** (72 on GPU) | **8.38** (512 on CPU) | **1.12** (144 on CPU) |\n\n- Hardware: an NVIDIA T4 (16GB) instance on GCP with 208GB of DRAM and 1.5TB of SSD.  \n- Workload: input sequence length = 512, output sequence length = 32. The batch size is tuned to **a large value** that maximizes the generation throughput for each system.\n- Metric: generation throughput (token/s) = number of the generated tokens / (time for processing prompts + time for generation).  \n\nHow to [reproduce](benchmark/flexllmgen).\n\n### Latency-Throughput Trade-Off\nThe figure below shows the latency and throughput trade-off of three offloading-based systems on OPT-175B (left) and OPT-30B (right).\nFlexLLMGen achieves a new Pareto-optimal frontier with significantly higher maximum throughput for both models.\nOther systems cannot further increase throughput due to out-of-memory.\n\"FlexLLMGen(c)\" is FlexLLMGen with compression.\n\n<img src=\"https://github.com/FMInference/FlexLLMGen/blob/main/docs/throughput_vs_latency.jpg\" alt=\"image\" width=\"500\"></img>\n\n## How It Works\nFlexLLMGen can be flexibly configured under various hardware resource constraints by aggregating memory and computation from the GPU, CPU, and disk. Through a linear programming optimizer, it searches for the best pattern to store and access the tensors, including weights, activations, and attention key/value (KV) cache. FlexLLMGen further compresses both weights and KV cache to 4 bits with negligible accuracy loss.\n\nOne key idea of FlexLLMGen is to play the latency-throughput trade-off. Achieving low latency is inherently challenging for offloading methods,\nbut the I/O efficiency of offloading can be greatly boosted for throughput-oriented scenarios (see the figure above).\nFlexLLMGen utilizes a block schedule to reuse weight and overlap I/O with computation, as shown in figure (b) below, while other baseline systems use an inefficient row-by-row schedule, as shown in figure (a) below.\n\n<img src=\"https://github.com/FMInference/FlexLLMGen/raw/main/docs/block_schedule.jpg\" alt=\"image\" width=\"500\"></img>\n\nMore technical details see our [paper](https://arxiv.org/abs/2303.06865).\n\n## Roadmap\nWe plan to work on the following features.\n\n- [ ] Optimize the performance for multiple GPUs on the same machine\n- [ ] Support more models (BLOOM, CodeGen, GLM)\n- [X] Release the cost model and policy optimizer\n- [ ] Macbook Support (M1 and M2)\n- [ ] AMD Support\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "flexllmgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.826171875,
          "content": "[build-system]\nrequires = [\"setuptools>=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"flexllmgen\"\nversion = \"0.1.7\"\ndescription = \"Running large language models like OPT-175B/GPT-3 on a single GPU. Focusing on high-throughput large-batch generation.\"\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: Apache Software License\",\n]\ndependencies = [\n    \"torch>=1.12\", \"transformers>=4.24\",\n    \"numpy\", \"tqdm\", \"pulp\", \"attrs\",\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/FMInference/FlexLLMGen\"\n\"Bug Tracker\" = \"https://github.com/FMInference/FlexLLMGen/issues\"\n\n[tool.setuptools.packages.find]\nexclude = [\"benchmark*\", \"dist*\", \"playground*\", \"scripts*\"]\n\n[tool.wheel]\nexclude = [\"benchmark*\", \"dist*\", \"playground*\", \"scripts*\"]\n\n\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}