{
  "metadata": {
    "timestamp": 1736560776481,
    "page": 465,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "joeyespo/grip",
      "stars": 6556,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.056640625,
          "content": "[flake8]\nexclude = .git,__pycache__,.research,grip/vendor\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0458984375,
          "content": "/tests/output/*/*.html linguist-generated=true\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# Deployment files\n*.egg-info\ndist\n\n# Environment files\nsite-packages\ninstance\nbuild\nenv\n.venv\n.cache\n*.py[cod]\nsettings_local.py\n\n# Test files\n.pytest_cache\n\n# OS-specific files\n.DS_Store\nDesktop.ini\nThumbs.db\n\n# IDE-specific files\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1640625,
          "content": "dist: xenial\nlanguage: python\npython:\n  - 3.7\n  - 3.8\n  - 3.9\n  - 3.10\n  - pypy3\ninstall:\n  - pip install -e .[tests]\nscript:\n  - flake8\n  - pytest -m \"not assumption\"\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 2.3466796875,
          "content": "Authors\n=======\n\n[Grip][home] is written and maintained by Joe Esposito,\nalong with the following contributors:\n\n- Vlad Wing ([@vladwing](https://github.com/vladwing))\n- Ismail Badawi ([@isbadawi](https://github.com/isbadawi))\n- Joe Littlejohn ([@joelittlejohn](https://github.com/joelittlejohn))\n- Brian Cappello ([@briancappello](https://github.com/briancappello))\n- John Gallagher ([@jgallagher](https://github.com/jgallagher))\n- Ilya Rumyantsev ([@iliggio](https://github.com/iliggio))\n- Jon Chen ([@fly](https://github.com/fly))\n- Silas Snider ([@swsnider](https://github.com/swsnider))\n- Dave James Miller ([@davejamesmiller](https://github.com/davejamesmiller))\n- Alexandre Magno ([@alexandre-mbm](https://github.com/alexandre-mbm))\n- [@madflow](https://github.com/madflow)\n- Zhiming Wang ([@zmwangx](https://github.com/zmwangx))\n- Dan Davison ([@dandavison](https://github.com/dandavison))\n- Sriram Sundarraj ([@ssundarraj](https://github.com/ssundarraj))\n- Jose Honorato ([@jlhonora](https://github.com/jlhonora))\n- Aka.Why ([@akawhy](https://github.com/akawhy))\n- Mark Thomas ([@markbt](https://github.com/markbt))\n- Gastón N. Charkiewicz ([@mekoda](https://github.com/mekoda))\n- Erik Hummel ([@ErikMHummel](https://github.com/ErikMHummel))\n- Matthew R. Tanudjaja ([@mrexmelle](https://github.com/mrexmelle))\n- Tom Dunlap ([@motevets](https://github.com/motevets))\n- Konstantin Baierer ([@kba](https://github.com/kba))\n- Jakub Wilk ([@jwilk](https://github.com/jwilk))\n- Devin Chen ([@xxd3vin](https://github.com/xxd3vin))\n- Jamie Davis ([@davisjam](https://github.com/davisjam))\n- JasonThomasData ([@JasonThomasData](https://github.com/JasonThomasData))\n- Andrej ([@4ndrej](https://github.com/4ndrej))\n- Karl Goffin ([@kagof](https://github.com/kagof))\n- Gideon Richter ([@Godron629](https://github.com/Godron629))\n- Tom Dupré la Tour ([@TomDLT](https://github.com/TomDLT))\n- Joshua Adelman ([@synapticarbors](https://github.com/synapticarbors))\n- Simeon Visser ([@svisser](https://github.com/svisser))\n- Jace Browning ([@jacebrowning](https://github.com/jacebrowning))\n- Daniel Shannon ([@phyllisstein](https://github.com/phyllisstein))\n- Aaron Sikes ([@courajs](https://github.com/courajs))\n- Winsley ([@wvspee](https://github.com/wvspee))\n- Methacrylon ([@Methacrylon](https://github.com/Methacrylon))\n- Bryce Carson ([@Methacrylon](https://github.com/bryce-carson))\n\n\n[home]: README.md\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 21.8193359375,
          "content": "Grip Changelog\n--------------\n\n\n#### Version 4.6.2 (2023-10-12)\n\n##### Bugs fixed\n\n- Support Werkzeug 3 by using a default encoding of UTF-8 ([#377](https://github.com/joeyespo/grip/ issues/377) - thanks, [@daniel-eichinger-bl][]!)\n\n\n#### Version 4.6.1 (2022-03-30)\n\n##### Bugs fixed\n\n- Fix \"ImportError: cannot import name 'safe_join' from 'flask'\" when using Flask 2.1.0+ ([#360](https://github.com/joeyespo/grip/pull/360) - thanks, [@bryce-carson][]!)\n\n\n#### Version 4.6.0 (2022-02-01)\n\n##### Notable changes\n\n- Update output and **fix style issues**\n- Add support for **Python 3.7, 3.8, 3.9, 3.10**\n- Improve handling of PDFs and other binary files\n- Fix deprecation warnings from newer dependency versions\n\n##### Deprecations\n\n- End-of-life [Python versions](https://devguide.python.org/#status-of-python-branches) no longer intentionally supported\n  - Python 2.6, 2.7 (Python 2 compatibility will be removed entirely in the next major release)\n  - Python 3.0, 3.1, 3.2, 3.3 ([#275](https://github.com/joeyespo/grip/pull/275) - thanks, [@svisser][]!), 3.4, 3.5, 3.6\n- Current [dependency versions](requirements.txt) (more recent versions will be required in the next major release)\n\n##### Bugs fixed\n\n- Fix typo in error message ([#266](https://github.com/joeyespo/grip/pull/266) - thanks, [@Godron629][]!)\n- Update HTML/CSS scaffold to match GitHub ([#297](https://github.com/joeyespo/grip/pull/297) - thanks, [@phyllisstein][]!)\n- Fix tests by adding a missing `USER_CONTEXT` argument to one of the `GitHubRenderer` calls\n- Serve non-`text/` MIME types as raw files for better handling of, e.g. PDF files ([#234](https://github.com/joeyespo/grip/pull/234) - thanks, [@wvspee][]!)\n- Fix style parsing, which caused some styles to be missing ([#347](https://github.com/joeyespo/grip/issues/347))\n\n##### Other changes\n\n- Readme: Update to correct `--no-inline` option ([#267](https://github.com/joeyespo/grip/issues/267) - thanks, [@TomDLT][]!)\n- Readme: Fix links to Grip class ([#276](https://github.com/joeyespo/grip/issues/276) - thanks, [@jacebrowning][]!)\n- Readme: Clarify that this sends your markdown to GitHub ([#251](https://github.com/joeyespo/grip/issues/251) - thanks, [@courajs][]!)\n- Update `pytest` usages (see [pytest 3.0.0 changelog](https://github.com/pytest-dev/pytest/blob/master/CHANGELOG.rst#300-2016-08-18))\n- Add `.pytest_cache` to `.gitignore` ([#287](https://github.com/joeyespo/grip/pull/287) - thanks, [@svisser][]!)\n- Add `.venv` and `.idea` to `.gitignore` and clean up\n- Add `flake8` test dependency and fix linting errors ([#299](https://github.com/joeyespo/grip/pull/299))\n- Add `pytest` test dependency ([#294](https://github.com/joeyespo/grip/pull/294) - thanks, [@Methacrylon][]!)\n- License: Distribute LICENSE file ([#274](https://github.com/joeyespo/grip/pull/274) - thanks, [@synapticarbors][]!)\n- License: Update year\n\n\n###### Version 4.5.2 (2018-03-18)\n\n- Enhancement: Show more helpful error message on TLSV1_ALERT_PROTOCOL_VERSION to help people through ([#262](https://github.com/joeyespo/grip/pull/262))\n- Docs: Use smaller header for patch version titles in CHANGES.md\n\n\n###### Version 4.5.1 (2018-03-18)\n\n- Bugfix: Don't print \"Downloading\" from `--export` when using `--quiet`\n- Cleanup: Move `quiet` kwarg of `export()` to the end like the other API methods\n- Readme: Document `quiet` kwarg of `export()`\n- Readme: Document `quiet` kwarg of `render_page()`\n\n\n#### Version 4.5.0 (2018-03-18)\n\n- Enhancement: Show warning if no styles are collected ([#265](https://github.com/joeyespo/grip/pull/265))\n- Bugfix: Don't print \"Exporting\" from `--export` when using `--quiet` ([#247](https://github.com/joeyespo/grip/pull/247) - thanks, [@kagof][]!)\n- Bugfix: Fix style parsing ([#265](https://github.com/joeyespo/grip/pull/265))\n- Bugfix: Loosen up the style URLs matching ([#265](https://github.com/joeyespo/grip/pull/265))\n- Internals: Fix `_strip_url_params` method name typo ([#254](https://github.com/joeyespo/grip/pull/254) - thanks, [@jwilk][]!)\n- Readme: Fix syntax highlighting in README ([#264](https://github.com/joeyespo/grip/pull/264) - thanks, [@jwilk][]!)\n- Readme: Remove Gratipay :frowning_face: ([Article](https://gratipay.news/the-end-cbfba8f50981))\n- Readme: Tweak Contributing copy\n- Tests: Wrap map() with list() for multiple iteration for Python 3 support\n- Tests: Call `Popen.communicate()` only once\n- Tests: Regenerate render output\n- Cleanup: PEP8\n- Thanks: [@jwilk][] for getting the GitHub repo to finally show the right Language stats :smiley: ([#263](https://github.com/joeyespo/grip/pull/263))\n\n\n#### Version 4.4.0 (2017-09-24)\n\n- Patch: Work around a GitHub API header bug ([#245](https://github.com/joeyespo/grip/pull/245))\n- Bugfix: Fail cleanly when server address is already in use ([#216](https://github.com/joeyespo/grip/pull/216) - thanks, [@davisjam][]!)\n- Bugfix: Fix `--browser` when running on a random port (port 0) ([#219](https://github.com/joeyespo/grip/pull/219))\n- Bugfix: Add defaults to USERNAME and PASSWORD in case just one is provided ([#222](https://github.com/joeyespo/grip/pull/222))\n- Internals: Fix deprecation warning in Python 3.6 by using triple-quoted raw strings in regexp constants ([#223](https://github.com/joeyespo/grip/pull/223) - thanks, [@jwilk][]!)\n- Internals: Decouple patchers from renderers\n- Docs: Fix typo in API docs ([#224](https://github.com/joeyespo/grip/pull/224) - thanks, [@jwilk][]!)\n- Readme: Add Homebrew installation instructions ([#201](https://github.com/joeyespo/grip/issues/201) - thanks, [@zmwangx][]!)\n- Readme: Use `pwd` instead of `PWD` in bash shell example ([#207](https://github.com/joeyespo/grip/pull/207) - thanks, [@xxd3vin][]!)\n- Readme: Use 'index.html' in --export example for searchability\n- Readme: Fix link to `offline-renderer` branch ([#230](https://github.com/joeyespo/grip/pull/230) - thanks, [@4ndrej][]!)\n- Readme: Add Configuration troubleshooting tip and example\n- Readme: Add [Say Thanks](http://saythanks.io/) badge :smiley:\n- Thanks: [@JasonThomasData][] for investigating and working with GitHub Support to fix a heading bug ([#235](https://github.com/joeyespo/grip/pull/235))\n\n\n#### Version 4.3.2 (2016-07-21)\n\n- Bugfix: Fix `setup.py install` ([#199](https://github.com/joeyespo/grip/issues/199))\n\n\n###### Version 4.3.1 (2016-07-21)\n\n- Bugfix: Allow port 0 ([#197](https://github.com/joeyespo/grip/pull/197))\n- Bugfix: Fix setup.py build and include octicon files in the build asset ([#198](https://github.com/joeyespo/grip/issues/198))\n\n\n#### Version 4.3.0 (2016-07-19)\n\n- Bugfix: Fix `--export` deadlock ([#184](https://github.com/joeyespo/grip/issues/184))\n- Bugfix: Make `--quiet` truly quiet ([#188](https://github.com/joeyespo/grip/pull/188) - thanks, [@kba][]!)\n- Bugfix: Allow `--clear` to work without a README file present ([#189](https://github.com/joeyespo/grip/issues/189))\n- Bugfix: Fix tests by patching sys.exc_clear to have Flask 0.11 work on pypy3 ([#190](https://github.com/joeyespo/grip/issues/190))\n- Bugfix: Fix minor version check during patch_svg ([#191](https://github.com/joeyespo/grip/issues/191))\n- Bugfix: Add Octicon font until the Readme API inlines SVGs ([#192](https://github.com/joeyespo/grip/issues/192))\n- Bugfix: Show '- Grip' in `<title>` only, not in page header ([#193](https://github.com/joeyespo/grip/issues/193))\n- Readme: Remove duplicated words ([#177](https://github.com/joeyespo/grip/pull/177) - thanks, [@jwilk][]!)\n- Readme: Remove download count badge since it's broken ([#194](https://github.com/joeyespo/grip/pull/194))\n\n\n#### Version 4.2.0 (2016-04-12)\n\n- Enhancement: Expose `render_inline` through `--no-inline` CLI option ([#165](https://github.com/joeyespo/grip/pull/165) - thanks, [@mrexmelle][]!)\n- Bugfix: Update Readme width to match latest GitHub changes ([#167](https://github.com/joeyespo/grip/pull/167) - thanks, [@motevets][]!)\n- Bugfix: Update Octicons to match latest GitHub changes ([#167](https://github.com/joeyespo/grip/pull/167) - thanks, [@motevets][]!)\n- Bugfix: Enable SVG support for Python 2.6 and below ([#157](https://github.com/joeyespo/grip/issues/157))\n- Readme: Fix Mac OS name ([#162](https://github.com/joeyespo/grip/pull/162) - thanks, [@ErikMHummel][]!)\n- Readme: Add tip for generating docs from Readme files ([#168](https://github.com/joeyespo/grip/pull/168) - thanks, [@mrexmelle][]!)\n- License: Update year\n\n\n#### Version 4.1.0 (2015-12-11)\n\n- Enhancement: Prompt for password when `--user` is provided without a `--pass` ([#154](https://github.com/joeyespo/grip/pull/154) - thanks, [@mekoda][]!)\n- Bugfix: Default to UTF-8 when reading from stdin and there's no encoding ([#152](https://github.com/joeyespo/grip/issues/152))\n- Readme: Document `-b`\n- Readme: Add [link to Grip Release Letter](http://joeyespo.us2.list-manage.com/subscribe?u=255dd49194fa8078258d9a735&id=d76534e979&group[14285][1]=true) for getting notified about future releases\n- Readme: Remove Known Issues section since they are now working\n\n\n### Version 4.0.0 (2015-11-18)\n\n##### Notable changes\n\n- Content is now refreshed when the file changes ([#135](https://github.com/joeyespo/grip/pull/135) - thanks, [@markbt][]!)\n- Rename `--gfm` to `--user-content` to reduce confusion ([#139](https://github.com/joeyespo/grip/pull/139))\n- Fix general Readme [Task Lists](https://github.com/blog/1825-task-lists-in-all-markdown-documents) ([#149](https://github.com/joeyespo/grip/issues/149))\n- Rearchitect the internals\n- Add tests\n\n##### Breaking changes (API)\n\n- Reorder API function arguments for consistency\n- Remove `STATIC_URL_PATH` from settings (use `Grip` constructor or the ENV variable instead)\n- Remove `STYLE_URLS_SOURCE` and `STYLE_ASSET_` settings (they're now constants)\n- Remove `CACHE_URL` setting (the cache URL is now `{}/cache.format(GRIPURL)`)\n- Remove `github_renderer.render_content` (use `GitHubRenderer` instead)\n- Remove `offline_renderer.render_content` (use `OfflineRenderer` instead)\n- Remove `read_binary` and `read_text` functions (use `io.open` directly)\n- Remove `resolve_readme` (use `DirectoryReader(path, force).filename_for(None)` instead)\n- Remove `text.read` call in `TextReader.read(text)`\n- Route Grip assets through `/__/grip` by default instead of `/`\n- Raise `ReadmeNotFoundError` when a Readme is not found instead of `ValueError`\n- Require a Unicode string when rendering Markdown\n- Set `DEBUG` to `False` by default in settings\n- Use UPPERCASE for constants\n\n##### Assumptions fixed\n\n- Update URL of GitHub assets\n\n##### Bugs fixed\n\n- Stop `--browser` from consuming all the sockets ([#136](https://github.com/joeyespo/grip/pull/136) - thanks, [@markbt][]!)\n- Fix `--browser` to stop waiting when the server is terminated before it listens\n- Fix `--browser` when listening on `0.0.0.0`\n- Fix Python 2.6\n- Fix Python 3.x with `python -m grip`\n- Allow caching of assets that include query parameters\n- Take the `route` argument into account in `Grip.render` (this was broken in the old `render_app`)\n- Fix rendering Readme containing Unicode by manually decoding UTF-8 from the GitHub response\n\n##### Other changes\n\n- Add `Home.md` as a supported default file title for GitHub Wikis\n- Add `AlreadyRunningError` for calling `Grip.run` while the server is already running\n- Add `ReadmeNotFoundError` for cross-Python-version file-not-found errors\n- Add `Grip`, a subclass of `Flask`\n- Add `ReadmeAssetManager` and `GitHubAssetManager`\n- Add `ReadmeReader`, `DirectoryReader`, `StdinReader`, and `TextReader`\n- Add `ReadmeRenderer`, `GitHubRenderer`, and `OfflineRenderer`\n- Add `grip.command.version` for printing version information (similar to `grip.command.usage`)\n- Print version with `-V`\n- Make `port` and `cancel_event` optional arguments in `wait_and_start_browser`\n- Add `start_browser_when_ready` to wait and start the browser in a background thread\n- Add the `--quiet` CLI option\n- The `GRIPHOME` ENV variable now expands the user directory (`~`), e.g. `~/.config/grip`\n- Add `DEFAULT_API_URL` constant as a fallback for when `api_url` is not specified in `render_content` or `GitHubRenderer`\n- Add `grip_url` and its fallback constant `DEFAULT_GRIPURL` for specifying a route to serve Grip assets from\n- Remove implicit dependencies in `requirements.txt`\n- Readme: Add [Tips section](https://github.com/joeyespo/grip#tips)\n\n\n#### Version 3.3.0 (2015-06-28)\n\n- Enhancement: Add `GRIPHOME` environment variable for alternative `settings.py` locations ([#117](https://github.com/joeyespo/grip/pull/117) - thanks, [@zmwangx][]!)\n- Enhancement: Allow alternative github API URL ([#119](https://github.com/joeyespo/grip/pull/119) - thanks, [@dandavison][]!)\n- Enhancement: Change the default port to `6419` to avoid conflicts ([#124](https://github.com/joeyespo/grip/pull/124))\n- Enhancement: Automatically open grip in a new tab in browser ([122](https://github.com/joeyespo/grip/pull/122) - thanks, [@ssundarraj][]!)\n- Enhancement: Only cache styles and assets if all downloads are successful\n- Enhancement: Add `--title` option to manually set the title on the rendered page ([#125](https://github.com/joeyespo/grip/pull/125) - thanks, [@jlhonora][]!)\n- Enhancement: Render tables and lists in `render_offline` mode ([#133](https://github.com/joeyespo/grip/pull/133) - thanks, [@akawhy][]!)\n- Bugfix: Don't print info messages to `STDOUT` for when exporting to `STDOUT` ([#101](https://github.com/joeyespo/grip/issues/101))\n- Bugfix: Don't swallow system exceptions\n- Bugfix: Use list builder notation instead of `map` to get `default_filenames` to evaluate it to non-empty on Python 3\n- Bugfix: Fix asset retrieval on both Python 2 and 3\n- Bugfix: Fix `InsecureRequestWarning` problems ([#111](https://github.com/joeyespo/grip/issues/111), [#128](https://github.com/joeyespo/grip/issues/128))\n- Bugfix: Fix missing Octicons by properly downloading assets as binary files ([#127](https://github.com/joeyespo/grip/issues/127))\n- Bugfix: Add trailing slashes to directories and remove them for files so relative links are correct ([#131](https://github.com/joeyespo/grip/issues/131))\n- CLI: Add \"Omit this to render as a normal GitHub README file.\" to help avoid confusion of `--gfm`\n- Readme: Add note about `^D` and `^Z` on Windows ([#105](https://github.com/joeyespo/grip/issues/105))\n- Cleanup: PEP8\n\n\n#### Version 3.2.0 (2015-02-24)\n\n- Bugfix: Encode to UTF-8 before sending text off to GitHub to support non-`latin-1` characters ([#99](https://github.com/joeyespo/grip/issues/99))\n\n\n#### Version 3.1.0 (2015-02-08)\n\n- Bugfix: Support non-ascii languages ([#86](https://github.com/joeyespo/grip/issues/86))\n- Bugfix: Fix links to header anchors ([#94](https://github.com/joeyespo/grip/issues/94))\n- Bugfix: Unpin dependencies so there's no conflict with other globally-installed packages\n- Bugfix: Fix missing octicons ([#95](https://github.com/joeyespo/grip/pull/95) - thanks, [@madflow][]!)\n- Bugfix: Fix \"Could not retrieve styles\" error on Windows ([#90](https://github.com/joeyespo/grip/pull/90) - thanks, [@alexandre-mbm][]!)\n- Cleanup\n\n\n### Version 3.0.0 (2014-08-08)\n\n- Enhancement: Add `{version}` format argument to `CACHE_DIRECTORY` so upgrades can start fresh and also drive cache clearing\n- Enhancement: Allow exporting to stdout ([#73](https://github.com/joeyespo/grip/issues/73))\n- Enhancement: Allow reading from stdin ([#72](https://github.com/joeyespo/grip/issues/72))\n- Enhancement: Allow `:<port>` pattern in CLI\n- Enhancement: Add a favicon ![favicon](artwork/favicon.ico) ([#60](https://github.com/joeyespo/grip/issues/60))\n- Enhancement: Add \"GitHub rate limit\" page to replace the generic 403 error ([#48](https://github.com/joeyespo/grip/issues/48))\n- Enhancement: Add option to clear the cache ([#68](https://github.com/joeyespo/grip/issues/68))\n- Enhancement: Allow storing credentials in config file ([#61](https://github.com/joeyespo/grip/issues/61))\n- Enhancement: Read user settings from `~/.grip`\n- Enhancement: Add `__main__.py` for allowing grip to be run as a module with `python -m grip`\n- Enhancement: Add `--wide` option to render as the old GitHub size (to opt out of [#47](https://github.com/joeyespo/grip/issues/47))\n- Enhancement: Add title to rendered page to look more like GitHub\n- Bugfix: Allow using [personal auth tokens](https://github.com/settings/tokens/new?scopes=) without a username\n- Bugfix: Show images from their canonical source instead of using GitHub's cache ([#50](https://github.com/joeyespo/grip/issues/50))\n- Bugfix: Inline assets into the exported file ([#69](https://github.com/joeyespo/grip/issues/69))\n- Bugfix: Cache the assets of the styles, ([#56](https://github.com/joeyespo/grip/issues/56))\n- Bugfix: Allow cross-platform newlines in config ([#67](https://github.com/joeyespo/grip/pull/67))\n- Bugfix: Fix running from another directory ([#36](https://github.com/joeyespo/grip/issues/36))\n- Bugfix: Move `instance_path` to `~/.grip` to cache to a non-privileged directory ([#39](https://github.com/joeyespo/grip/pull/39) - thanks, [@swsnider][]!)\n- Bugfix: Change the default width to match GitHub's new README style ([#47](https://github.com/joeyespo/grip/issues/47))\n- Readme: Mention personal access tokens and link to the appropriate GitHub page ([#74](https://github.com/joeyespo/grip/pull/74) - thanks, [@davejamesmiller][]!)\n- Readme: Add badges, more usage example, and support and contact information\n- Readme: Specify that HTTPS is always used to access the GitHub API\n- Readme: Document credentials and rate limit ([#46](https://github.com/joeyespo/grip/issues/46))\n- Readme: Document configuration options\n- Readme: Clarify command line arguments and `--gfm`\n- Readme: Add Known Issues section\n- Infrastructure and code cleanup\n\n\n###### Version 2.0.1 (2014-06-14)\n\n- Enhancement: Add ability to export to a specific file using the CLI ([#33](https://github.com/joeyespo/grip/issues/33))\n- Enhancement: Python 3 compatibility ([#54](https://github.com/joeyespo/grip/pull/54) - thanks, [@fly][]!)\n- Bugfix: Fix issue styles weren't being downloaded properly (thanks, [@fly][]!)\n- Bugfix: Support anchoring to section headers like GitHub ([#58](https://github.com/joeyespo/grip/issues/58))\n- Readme: Document rate limits and --user / --pass\n- Readme: Refer to the \"offline rendering\" work\n- Readme: Fix 'GitHub' spelling\n- Extract and expose constants\n- Update requirements\n\n\n### Version 2.0.0 (2013-09-26)\n\n- Feature: Styles are now cached (from the not-yet-released offline rendering) (thanks, [@isbadawi][]!)\n- Feature: Add user/pass options for GitHub auth (thanks, [@joelittlejohn][]!)\n- Feature: Add export to single HTML file (thanks, [@iliggio][]!)\n- Enhancement: Better HTML titles by normalizing the path, always providing a title\n- Enhancement: Allow styles to be overridden, with examples in static directory\n- Enhancement: Relay GitHub API HTTP errors to browser for debuggability\n- Enhancement: Extract render_app and add create_app in API\n- Bugfix: Fix manual installs using setup.py (thanks, [@briancappello][]!)\n- Bugfix: Fix rendering local images (thanks, [@jgallagher][]!)\n- Bugfix: Handle File Not Found errors as 404 when given a directory\n- Rename and re-arrange the configuration files\n- Update README.md with new features\n- Update AUTHORS.md format\n- Upgrade requirements\n- Simplify code\n\n\n#### Version 1.2.0 (2013-03-17)\n\n- Add AUTHORS.md for attributing credit\n- Feature: Can now click hyperlinks to render other files without re-running (thanks, [@vladwing][]!)\n- Update GitHub CSS regular expression\n\n\n###### Version 1.1.1 (2013-01-05)\n\n- Upgrade path-and-address\n- Use exact versions in requirements\n\n\n#### Version 1.1 (2013-01-04)\n\n- Readme: Clarify and add examples\n- Bugfix: Typo in requirements\n- Clean up setup.py\n\n\n### Version 1.0 (2012-12-08)\n\n- CLI: now accepts an address, not just a port\n- CLI: now accepts --gfm and --context=<repo> arguments for rendering GitHub Flavored Markdown\n- API: `serve` function now accepts `None` for its arguments to indicate 'use default'\n- API: `serve` function now accepts a 'host'\n- API: `serve` now resolves the default file when given a path\n- Now using docopt for more advanced argument processing\n- Now using path-and-address for humanistic path / address handling\n\n\n#### Version 0.2.1 (2012-12-02)\n\n- Issue #5: Fixed the installer to work in the case where the requirements are not already installed\n\n\n#### Version 0.2 (2012-12-01)\n\n- GitHub styles are now retrieved dynamically when run, instead of using the outdated styles from the config\n\n\n#### Version 0.1.1 (2012-11-20)\n\n- Added the port command-line argument\n\n\n#### Version 0.1 (2012-11-19)\n\n- First public preview release\n\n\n[@vladwing]: https://github.com/vladwing\n[@isbadawi]: https://github.com/isbadawi\n[@joelittlejohn]: https://github.com/joelittlejohn\n[@briancappello]: https://github.com/briancappello\n[@jgallagher]: https://github.com/jgallagher\n[@iliggio]: https://github.com/iliggio\n[@fly]: https://github.com/fly\n[@swsnider]: https://github.com/swsnider\n[@davejamesmiller]: https://github.com/davejamesmiller\n[@alexandre-mbm]: https://github.com/alexandre-mbm\n[@madflow]: https://github.com/madflow\n[@zmwangx]: https://github.com/zmwangx\n[@dandavison]: https://github.com/dandavison\n[@ssundarraj]: https://github.com/ssundarraj\n[@jlhonora]: https://github.com/jlhonora\n[@akawhy]: https://github.com/akawhy\n[@markbt]: https://github.com/markbt\n[@mekoda]: https://github.com/mekoda\n[@ErikMHummel]: https://github.com/ErikMHummel\n[@mrexmelle]: https://github.com/mrexmelle\n[@motevets]: https://github.com/motevets\n[@kba]: https://github.com/kba\n[@jwilk]: https://github.com/jwilk\n[@xxd3vin]: https://github.com/xxd3vin\n[@davisjam]: https://github.com/davisjam\n[@JasonThomasData]: https://github.com/JasonThomasData\n[@4ndrej]: https://github.com/4ndrej\n[@erikrtn]: https://github.com/erikrtn\n[@kagof]: https://github.com/kagof\n[@Godron629]: https://github.com/Godron629\n[@TomDLT]: https://github.com/TomDLT\n[@synapticarbors]: https://github.com/synapticarbors\n[@svisser]: https://github.com/svisser\n[@jacebrowning]: https://github.com/jacebrowning\n[@phyllisstein]: https://github.com/phyllisstein\n[@courajs]: https://github.com/courajs\n[@wvspee]: https://github.com/wvspee\n[@Methacrylon]: https://github.com/Methacrylon\n[@bryce-carson]: https://github.com/bryce-carson\n[@daniel-eichinger-bl]: https://github.com/daniel-eichinger-bl\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "Copyright (c) 2014-2022 Joe Esposito <joe@joeyespo.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.09765625,
          "content": "include LICENSE\ninclude *.txt\ninclude *.md\nrecursive-include static *\nrecursive-include templates *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.556640625,
          "content": "Grip -- GitHub Readme Instant Preview\n=====================================\n\n[![Current version on PyPI](http://img.shields.io/pypi/v/grip.svg)][pypi]\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/joeyespo)\n\nRender local readme files before sending off to GitHub.\n\nGrip is a command-line server application written in Python that uses the\n[GitHub markdown API][markdown] to render a local readme file. The styles\nand rendering come directly from GitHub, so you'll know exactly how it will appear.\nChanges you make to the Readme will be instantly reflected in the browser without\nrequiring a page refresh.\n\n\nMotivation\n----------\n\nSometimes you just want to see the exact readme\nresult before committing and pushing to GitHub.\n\nEspecially when doing [Readme-driven development][rdd].\n\n\nInstallation\n------------\n\nTo install grip, simply:\n\n```console\n$ pip install grip\n```\n\nOn OS X, you can also install with Homebrew:\n\n```console\n$ brew install grip\n```\n\n\nUsage\n-----\n\nTo render the readme of a repository:\n\n```console\n$ cd myrepo\n$ grip\n * Running on http://localhost:6419/\n```\n\nNow open a browser and visit [http://localhost:6419](http://localhost:6419/).\nOr run with `-b` and Grip will open a new browser tab for you.\n\nYou can also specify a port:\n\n```console\n$ grip 80\n * Running on http://localhost:80/\n```\n\nOr an explicit file:\n\n```console\n$ grip AUTHORS.md\n * Running on http://localhost:6419/\n```\n\nAlternatively, you could just run `grip` and visit [localhost:6419/AUTHORS.md][AUTHORS.md]\nsince grip supports relative URLs.\n\nYou can combine the previous examples. Or specify a hostname instead of a port. Or provide both.\n\n```console\n$ grip AUTHORS.md 80\n * Running on http://localhost:80/\n```\n\n```console\n$ grip CHANGES.md 0.0.0.0\n * Running on http://0.0.0.0:6419/\n```\n\n```console\n$ grip . 0.0.0.0:80\n * Running on http://0.0.0.0:80/\n```\n\nYou can even bypass the server and **export** to a single HTML file, with all the styles and assets inlined:\n\n```console\n$ grip --export\nExporting to README.html\n```\n\nControl the output name with the second argument:\n\n```console\n$ grip README.md --export index.html\nExporting to index.html\n```\n\nIf you're exporting a bunch of files, you can prevent styles from being inlining to save space with `--no-inline`:\n\n```console\n$ grip README.md --export --no-inline introduction.html\nExporting to introduction.html\n```\n\nReading and writing from **stdin** and **stdout** is also supported, allowing you to use Grip with other programs:\n\n```console\n$ cat README.md | grip -\n * Running on http://localhost:6419/\n```\n\n```console\n$ grip AUTHORS.md --export - | bcat\n```\n\n```console\n$ cat README.md | grip --export - | less\n```\n\nThis allows you to quickly test how things look by entering Markdown directly in your terminal:\n\n```console\n$ grip -\nHello **world**!\n^D\n * Running on http://localhost:6419/\n```\n\n*Note: `^D` means `Ctrl+D`, which works on Linux and OS X. On Windows you'll have to use `Ctrl+Z`.*\n\nRendering as user-content like **comments** and **issues** is also supported, with an optional repository context for linking to issues:\n\n```console\n$ grip --user-content --context=joeyespo/grip\n * Running on http://localhost:6419/\n```\n\nFor more details and additional options, see the help:\n\n```console\n$ grip -h\n```\n\n\nAccess\n------\n\nGrip strives to be as close to GitHub as possible. To accomplish this, grip\nuses [GitHub's Markdown API][markdown] so that changes to their rendering\nengine are reflected immediately without requiring you to upgrade grip.\nHowever, because of this you may hit the API's hourly rate limit. If this\nhappens, grip offers a way to access the API using your credentials\nto unlock a much higher rate limit.\n\n```console\n$ grip --user <your-username> --pass <your-password>\n```\n\nOr use a [personal access token][] with an empty scope (note that a token is\n*required* if your GitHub account is set up with two-factor authentication):\n\n```console\n$ grip --pass <token>\n```\n\nYou can persist these options [in your local configuration](#configuration).\nFor security purposes, it's highly recommended that you **use an access token\nover a password**. (You could also keep your password safe by configuring\nGrip to [grab your password from a password manager][keychain-access].)\n\nThere's also a [work-in-progress branch][offline-renderer] to provide\n**offline rendering**. Once this resembles GitHub more precisely, it'll\nbe exposed in the CLI, and will ultimately be used as a seamless fallback\nengine for when the API can't be accessed.\n\nGrip always accesses GitHub over HTTPS,\nso your README and credentials are protected.\n\n\nTips\n----\n\nHere's how others from the community are using Grip.\n\nWant to share your own? [Say hello @joeyespo][twitter] or [submit a pull request](#contributing).\n\n\n#### Create a local mirror of a Github Wiki\n\n```console\n$ git clone https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.wiki.git\n$ cd YOUR_REPOSITORY.wiki\n$ grip\n```\n\n*By [Joshua Gourneau](https://twitter.com/gourneau/status/636329126643658753).*\n\n\n#### Generate HTML documentation from a collection of linked README files\n\n1. Enter the directory:\n\n   ```console\n   $ cd YOUR_DIR\n   $ export GRIPURL=$(pwd)\n   ```\n\n2. Include all assets by setting the `CACHE_DIRECTORY` [config variable](#configuration):\n\n   ```console\n   $ echo \"CACHE_DIRECTORY = '$(pwd)/assets'\" >> ~/.grip/settings.py\n   ```\n\n3. Export all your Markdown files with Grip and replace absolute asset paths with relative paths:\n\n   ```console\n   $ for f in *.md; do grip --export $f --no-inline; done\n   $ for f in *.html; do sed -i '' \"s?$GRIPURL/??g\" $f; done\n   ```\n\nYou can optionally compress the set of HTML files to `docs.tgz` with:\n\n   ```console\n   $ tar -czvf docs.tgz `ls | grep [\\.]html$` assets\n   ```\n\nLooking for a cross platform solution? Here's an equivalent [Python script](https://gist.github.com/mrexmelle/659abc02ae1295d60647).\n\n*By [Matthew R. Tanudjaja](https://github.com/mrexmelle).*\n\n\nConfiguration\n-------------\n\nTo customize Grip, create `~/.grip/settings.py`, then add one or more of the following variables:\n\n- `HOST`: The host to use when not provided as a CLI argument, `localhost` by default\n- `PORT`: The port to use when not provided as a CLI argument, `6419` by default\n- `DEBUG`: Whether to use Flask's debugger when an error happens, `False` by default\n- `DEBUG_GRIP`: Prints extended information when an error happens, `False` by default\n- `API_URL`: Base URL for the github API, for example that of a Github Enterprise instance. `https://api.github.com` by default\n- `CACHE_DIRECTORY`: The directory, relative to `~/.grip`, to place cached assets (this gets run through the following filter: `CACHE_DIRECTORY.format(version=__version__)`), `'cache-{version}'` by default\n- `AUTOREFRESH`: Whether to automatically refresh the Readme content when the file changes, `True` by default\n- `QUIET`: Do not print extended information, `False` by default\n- `STYLE_URLS`: Additional URLs that will be added to the rendered page, `[]` by default\n- `USERNAME`: The username to use when not provided as a CLI argument, `None` by default\n- `PASSWORD`: The password or [personal access token][] to use when not provided as a CLI argument (*Please don't save your passwords here.* Instead, use an access token or drop in this code [grab your password from a password manager][keychain-access]), `None` by default\n\nNote that this is a Python file. If you see `'X' is not defined` errors, you\nmay have overlooked some quotes. For example:\n\n```py\nUSERNAME = 'your-username'\nPASSWORD = 'your-personal-access-token'\n```\n\n\n#### Environment variables\n\n- `GRIPHOME`: Specify an alternative `settings.py` location, `~/.grip` by default\n- `GRIPURL`: The URL of the Grip server, `/__/grip` by default\n\n#### Advanced\n\nThis file is a normal Python script, so you can add more advanced configuration.\n\nFor example, to read a setting from the environment and provide a default value\nwhen it's not set:\n\n```python\nPORT = os.environ.get('GRIP_PORT', 8080)\n```\n\n\nAPI\n---\n\nYou can access the API directly with Python, using it in your own projects:\n\n```python\nfrom grip import serve\n\nserve(port=8080)\n * Running on http://localhost:8080/\n```\n\nRun main directly:\n\n```python\nfrom grip import main\n\nmain(argv=['-b', '8080'])\n * Running on http://localhost:8080/\n```\n\nOr access the underlying Flask application for even more flexibility:\n\n```python\nfrom grip import create_app\n\ngrip_app = create_app(user_content=True)\n# Use in your own app\n```\n\n\n### Documentation\n\n#### serve\n\nRuns a local server and renders the Readme file located\nat `path` when visited in the browser.\n\n```python\nserve(path=None, host=None, port=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=False, api_url=None, title=None, autorefresh=True, browser=False, grip_class=None)\n```\n\n- `path`: The filename to render, or the directory containing your Readme file, defaulting to the current working directory\n- `host`: The host to listen on, defaulting to the HOST configuration variable\n- `port`: The port to listen on, defaulting to the PORT configuration variable\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `autorefresh`: Automatically update the rendered content when the Readme file changes, `True` by default\n- `browser`: Open a tab in the browser after the server starts., `False` by default\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### export\n\nWrites the specified Readme file to an HTML file with styles and assets inlined.\n\n```python\nexport(path=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=True, out_filename=None, api_url=None, title=None, quiet=None, theme='light', grip_class=None)\n```\n\n- `path`: The filename to render, or the directory containing your Readme file, defaulting to the current working directory\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file (Note: unlike the other API functions, this defaults to `True`)\n- `out_filename`: The filename to write to, `<in_filename>.html` by default\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `quiet`: Do not print to the terminal\n- `theme`: Theme to view markdown file (light mode or dark mode). Valid options (\"light\", \"dark\"). Default: \"light\".\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### create_app\n\nCreates a Flask application you can use to render and serve the Readme files.\nThis is the same app used by `serve` and `export` and initializes the cache,\nusing the cached styles when available.\n\n```python\ncreate_app(path=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=False, api_url=None, title=None, text=None, grip_class=None)\n```\n\n- `path`: The filename to render, or the directory containing your Readme file, defaulting to the current working directory\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `text`: A string or stream of Markdown text to render instead of being loaded from `path` (Note: `path` can be used to set the page title)\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### render_app\n\nRenders the application created by `create_app` and returns the HTML that would\nnormally appear when visiting that route.\n\n```python\nrender_app(app, route='/')\n```\n\n- `app`: The Flask application to render\n- `route`: The route to render, '/' by default\n\n\n#### render_content\n\nRenders the specified markdown text without caching.\n\n```python\nrender_content(text, user_content=False, context=None, username=None, password=None, render_offline=False, api_url=None, title=None)\n```\n\n- `text`: The Markdown text to render\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. This is required when not using the offline renderer.\n- `title`: The page title, derived from `path` by default\n\n\n#### render_page\n\nRenders the markdown from the specified path or text, without caching,\nand returns an HTML page that resembles the GitHub Readme view.\n\n```python\nrender_page(path=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=False, api_url=None, title=None, text=None, quiet=None, theme='light', grip_class=None)\n```\n\n- `path`: The path to use for the page title, rendering `'README.md'` if None\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render offline using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `text`: A string or stream of Markdown text to render instead of being loaded from `path` (Note: `path` can be used to set the page title)\n- `quiet`: Do not print to the terminal\n- `theme`: Theme to view markdown file (light mode or dark mode). Valid options (\"light\", \"dark\"). Default: \"light\".\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### clear_cache\n\nClears the cached styles and assets.\n\n```python\nclear_cache(grip_class=None)\n```\n\n#### main\n\nRuns Grip with the specified arguments.\n\n```python\nmain(argv=None, force_utf8=True)\n```\n\n- `argv`: The arguments to run with, `sys.argv[1:]` by default\n- `force_utf8`: Sets the default encoding to `utf-8` in the current Python instance. This has no effect on Python 3 since Unicode is handled by default\n\n\n### Classes\n\n#### class Grip(Flask)\n\nA Flask application that can serve a file or directory containing a README.\n\n```python\nGrip(source=None, auth=None, renderer=None, assets=None, render_wide=None, render_inline=None, title=None, autorefresh=None, quiet=None, theme='light', grip_url=None, static_url_path=None, instance_path=None, **kwargs)\n```\n\n##### default_renderer\n\nReturns the default renderer using the current config. This is only used if\nrenderer is set to None in the constructor.\n\n```python\nGrip.default_renderer()\n```\n\n##### default_asset_manager\n\nReturns the default asset manager using the current config. This is only used\nif asset_manager is set to None in the constructor.\n\n```python\nGrip.default_asset_manager()\n```\n\n##### add_content_types\n\nAdds the application/x-font-woff and application/octet-stream content types if\nthey are missing. Override to add additional content types on initialization.\n\n```python\nGrip.add_content_types()\n```\n\n##### clear_cache\n\nClears the downloaded assets.\n\n```python\nGrip.clear_cache()\n```\n\n##### render\n\nRenders the application and returns the HTML unicode that would normally appear\nwhen visiting in the browser.\n\n```python\nGrip.render(route=None)\n```\n\n- `route`: The route to render, `/` by default\n\n##### run\n\nStarts a server to render the README. This calls [Flask.run][] internally.\n\n```python\nGrip.run(host=None, port=None, debug=None, use_reloader=None, open_browser=False)\n```\n\n- `host`: The hostname to listen on. Set this to `'0.0.0.0'` to have the server\n          available externally as well, `'localhost'` by default\n- `port`: The port of the webserver. Defaults to `6419`\n- `debug`: If given, enable or disable debug mode. See [Flask.debug][].\n- `use_reloader`: Should the server automatically restart the python process\n                  if modules were changed? `False` by default unless the\n                  `DEBUG_GRIP` setting is specified.\n- `open_browser`: Opens the browser to the address when the server starts\n\n\n#### class AlreadyRunningError(RuntimeError)\n\nRaised when `Grip.run` is called while the server is already running.\n\n```python\nAlreadyRunningError()\n```\n\n\n#### class ReadmeNotFoundError(NotFoundError or IOError)\n\nRaised when the specified Readme could not be found.\n\n```python\nReadmeNotFoundError(path=None, message=None)\n```\n\n\n#### class ReadmeAssetManager(object)\n\nManages the style and font assets rendered with Readme pages. This is an\nabstract base class.\n\n```python\nReadmeAssetManager(cache_path, style_urls=None)\n```\n\n\n#### class GitHubAssetManager(ReadmeAssetManager)\n\nManages the style and font assets rendered with Readme pages. Set cache_path to\nNone to disable caching.\n\n\n#### class ReadmeReader(object)\n\nReads Readme content from a URL subpath. This is an abstract base class.\n\n```python\nReadmeReader()\n```\n\n\n#### class DirectoryReader(ReadmeReader)\n\nReads Readme files from URL subpaths.\n\n```python\nDirectoryReader(path=None, silent=False)\n```\n\n\n#### class TextReader(ReadmeReader)\n\nReads Readme content from the provided unicode string.\n\n```python\nTextReader(text, display_filename=None)\n```\n\n\n#### class StdinReader(TextReader)\n\nReads Readme text from STDIN.\n\n```python\nStdinReader(display_filename=None)\n```\n\n\n#### class ReadmeRenderer(object)\n\nRenders the Readme. This is an abstract base class.\n\n```python\nReadmeRenderer(user_content=None, context=None)\n```\n\n\n#### class GitHubRenderer(ReadmeRenderer)\n\nRenders the specified Readme using the GitHub Markdown API.\n\n```python\nGitHubRenderer(user_content=None, context=None, api_url=None, raw=None)\n```\n\n\n#### class OfflineRenderer(ReadmeRenderer)\n\nRenders the specified Readme locally using pure Python. Note: This is currently\nan incomplete feature.\n\n```python\nOfflineRenderer(user_content=None, context=None)\n```\n\n\n### Constants\n\n\n#### SUPPORTED_TITLES\n\nThe common Markdown file titles on GitHub.\n\n```python\nSUPPORTED_TITLES = ['README', 'Home']\n```\n\n- `filename`: The UTF-8 file to read.\n\n\n#### SUPPORTED_EXTENSIONS\n\nThe supported extensions, as defined by [GitHub][markdown].\n\n```python\nSUPPORTED_EXTENSIONS = ['.md', '.markdown']\n```\n\n\n#### DEFAULT_FILENAMES\n\nThis constant contains the names Grip looks for when no file is provided.\n\n```python\nDEFAULT_FILENAMES = [title + ext\n                     for title in SUPPORTED_TITLES\n                     for ext in SUPPORTED_EXTENSIONS]\n```\n\n\n#### DEFAULT_FILENAME\n\nThis constant contains the default Readme filename, namely:\n\n```python\nDEFAULT_FILENAME = DEFAULT_FILENAMES[0]  # README.md\n```\n\n\n#### DEFAULT_GRIPHOME\n\nThis constant points to the default value if the `GRIPHOME`\n[environment variable](#environment-variables) is not specified.\n\n```python\nDEFAULT_GRIPHOME = '~/.grip'\n```\n\n\n#### DEFAULT_GRIPURL\n\nThe default URL of the Grip server and all its assets:\n\n```python\nDEFAULT_GRIPURL = '/__/grip'\n```\n\n\n#### DEFAULT_API_URL\n\nThe default app_url value:\n\n```python\nDEFAULT_API_URL = 'https://api.github.com'\n```\n\n\nTesting\n-------\n\nInstall the package and test requirements:\n\n```console\n$ pip install -e .[tests]\n```\n\nRun tests with [pytest][]:\n\n```console\n$ pytest\n```\n\nOr to re-run tests as you make changes, use [pytest-watch][]:\n\n```console\n$ ptw\n```\n\n\n#### External assumption tests\n\nIf you're experiencing a problem with Grip, it's likely that an assumption made\nabout the GitHub API has been broken. To verify this, run:\n\n```console\n$ pytest -m assumption\n```\n\nSince the external assumptions rely on an internet connection, you may want to skip\nthem when developing locally. Tighten the cycle even further by stopping on the\nfirst failure with `-x`:\n\n```console\n$ pytest -xm \"not assumption\"\n```\n\nOr with [pytest-watch][]:\n\n```console\n$ ptw -- -xm \"not assumption\"\n```\n\n\nContributing\n------------\n\n1. Check the open issues or open a new issue to start a discussion around\n   your feature idea or the bug you found\n2. Fork the repository and make your changes\n3. Open a new pull request\n\nIf your PR has been waiting a while, feel free to [ping me on Twitter][twitter].\n\nUse this software often? <a href=\"https://saythanks.io/to/joeyespo\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\" align=\"center\" alt=\"Say Thanks!\"></a>\n:smiley:\n\n\n[pypi]: http://pypi.python.org/pypi/grip/\n[markdown]: http://developer.github.com/v3/markdown\n[rdd]: http://tom.preston-werner.com/2010/08/23/readme-driven-development.html\n[authors.md]: AUTHORS.md\n[offline-renderer]: http://github.com/joeyespo/grip/tree/offline-renderer\n[personal access token]: https://github.com/settings/tokens/new?scopes=\n[keychain-access]: https://gist.github.com/klmr/3840aa3c12f947e4064c\n[task-lists]: https://github.com/blog/1825-task-lists-in-all-markdown-documents\n[user-content]: http://github.github.com/github-flavored-markdown\n[python-markdown]: http://github.com/waylan/Python-Markdown\n[flask.run]: http://flask.pocoo.org/docs/0.10/api/#flask.Flask.run\n[flask.debug]: http://flask.pocoo.org/docs/0.10/api/#flask.Flask.debug\n[pytest]: http://pytest.org/\n[pytest-watch]: https://github.com/joeyespo/pytest-watch\n[twitter]: http://twitter.com/joeyespo\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "grip",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.1162109375,
          "content": "[pytest]\nnorecursedirs = venv site-packages .research\nmarkers =\n    assumption: mark a test as an external assumption.\n"
        },
        {
          "name": "requirements-test.txt",
          "type": "blob",
          "size": 0.0439453125,
          "content": "responses>=0.5.0\nflake8>=3.0.0\npytest>=4.4.1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.109375,
          "content": "docopt>=0.4.0\nFlask>=0.10.1\nMarkdown>=2.5.1\npath-and-address>=2.0.1\nPygments>=1.6\nrequests>=2.4.1\nWerkzeug>=0.7\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.015625,
          "content": "\"\"\"\nGrip\n----\n\nRender local readme files before sending off to GitHub.\n\n\nGrip is easy to set up\n``````````````````````\n\n::\n\n    $ pip install grip\n    $ cd myproject\n    $ grip\n\n\nLinks\n`````\n\n* `Website <http://github.com/joeyespo/grip>`_\n\n\"\"\"\n\nimport os\nfrom setuptools import setup, find_packages\n\n\ndef read(filename):\n    with open(os.path.join(os.path.dirname(__file__), filename)) as f:\n        return f.read()\n\n\nsetup(\n    name='grip',\n    version='4.6.2',\n    description='Render local readme files before sending off to GitHub.',\n    long_description=__doc__,\n    author='Joe Esposito',\n    author_email='joe@joeyespo.com',\n    url='http://github.com/joeyespo/grip',\n    license='MIT',\n    platforms='any',\n    packages=find_packages(),\n    package_data={'grip': ['static/*.*', 'static/octicons/*', 'templates/*']},\n    install_requires=read('requirements.txt').splitlines(),\n    extras_require={'tests': read('requirements-test.txt').splitlines()},\n    zip_safe=False,\n    entry_points={'console_scripts': ['grip = grip:main']},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}