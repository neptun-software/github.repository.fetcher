{
  "metadata": {
    "timestamp": 1736560501745,
    "page": 95,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookresearch/hydra",
      "stars": 8946,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bandit",
          "type": "blob",
          "size": 0.025390625,
          "content": "[bandit]\nskips: B701,B608\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.31640625,
          "content": "[run]\nomit = \n    ${COVERAGE_HOME}/.nox/*\n    ${COVERAGE_HOME}/*tests*\n    ${COVERAGE_HOME}/plugins/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    # Don't complain if tests don't hit defensive assertion code:\n    raise AssertionError\n    raise NotImplementedError\n    raise TypeError\n    @deprecated\n    assert False\n\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.669921875,
          "content": "[flake8]\nexclude = \n    .git\n    ,.nox,build\n    ,hydra/grammar/gen\n    ,dist\n    ,tools/configen/example/gen\n    ,tools/configen/tests/test_modules/expected\n    ,temp\n    ,build\n    ,contrib\n\n    # flake8-copyright does not support unicode, savoirfairelinux/flake8-copyright#15\n    ,examples/plugins/example_configsource_plugin/hydra_plugins/example_configsource_plugin/example_configsource_plugin.py\n    ,hydra/test_utils/config_source_common_tests.py\n    ,tests/test_apps/config_source_test/structured.py\n\nmax-line-length = 119\ncopyright-check = True\nselect = E,F,W,C\ncopyright-regexp=Copyright \\(c\\) Facebook, Inc. and its affiliates. All Rights Reserved\nignore=W503,E203,E701,E704\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4296875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n* text eol=lf\n\n# Don't do anything with binaries\n*.png binary\n*.jpg binary\n*.svg binary\n*.jpeg binary\n*.gif binary\n*.ico binary\n*.mov binary\n*.mp4 binary\n*.mp3 binary\n*.flv binary\n*.fla binary\n*.swf binary\n*.gz binary\n*.zip binary\n*.7z binary\n*.ttf binary\n*.eot binary\n*.woff binary\n*.pyc binary\n*.pdf binary\n*.ez binary\n*.bz2 binary\n*.swp binary\n*.webp binary\n*.jar binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.19140625,
          "content": ".benchmarks\n/.idea\n/temp\noutputs\nmultirun\ndist\nbuild\n__pycache__\n*.pyc\n*.egg-info\n/.nox\n/report.json\n/.coverage\n/temp\n.mypy_cache\npip-wheel-metadata\n.ipynb_checkpoints\n/.dmypy.json\nTODO.txt\n/venv\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.5087890625,
          "content": "[settings]\nmulti_line_output=3\ninclude_trailing_comma=true\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\nensure_newline_before_comments=true\nknown_libs=pkg_resources,setuptools\nsections=\n    FUTURE\n    STDLIB\n    LIBS\n    THIRDPARTY\n    FIRSTPARTY\n    LOCALFOLDER\ndefault_section=THIRDPARTY\nknown_first_party=hydra,hydra_app\nskip=\n    plugins\n    ,contrib\n    ,tools\n    ,.nox\n    ,.build\n    ,hydra/grammar/gen\n    ,tools/configen/example/gen\n    ,tools/configen/tests/test_modules/expected\n    ,temp\n    ,build\n"
        },
        {
          "name": ".mypy.ini",
          "type": "blob",
          "size": 0.2822265625,
          "content": "[mypy]\nmypy_path=.stubs\nexclude = (?x)(\n    build/\n    | contrib/\n  )\n\n[mypy-antlr4.*]\nignore_missing_imports = True\n\n[mypy-hydra.grammar.gen.*]\nignore_missing_imports = True\nignore_errors = True\n\n[mypy-nevergrad.*]\nignore_missing_imports = True\n\n[mypy-rq.*]\nignore_missing_imports = True\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5126953125,
          "content": "repos:\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        files: 'hydra/.*'\n      - id: isort\n        files: 'plugins/.*'\n      - id: isort\n        files: 'tools/.*'\n\n  - repo: https://github.com/psf/black\n    rev: 24.2.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/adrienverge/yamllint.git\n    rev: v1.35.1\n    hooks:\n      - id: yamllint\n        args: [-c=.yamllint, --strict]\n"
        },
        {
          "name": ".stubs",
          "type": "tree",
          "content": null
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.9765625,
          "content": "yaml-files:\n  - '*.yaml'\n  - '*.yml'\n  - '.yamllint'\n\nrules:\n  braces: enable\n  brackets: enable\n  colons: enable\n  commas: enable\n  comments:\n    level: warning\n  comments-indentation:\n    level: warning\n  document-end: disable\n  document-start: disable\n  empty-lines: enable\n  empty-values: disable\n  hyphens: enable\n  indentation: enable\n  key-duplicates: enable\n  key-ordering: disable\n  line-length: disable\n  new-line-at-end-of-file: enable\n  new-lines: enable\n  octal-values: disable\n  quoted-strings: disable\n  trailing-spaces: enable\n  truthy:\n    level: warning\n\nignore: |\n  build\n  contrib\n  website\n  **/.hydra/*.yaml\n  **/multirun.yaml\n  .*\n  .nox\n  temp\n  # yamllint does not support unicode\n  # https://github.com/adrienverge/yamllint/issues/238\n  tests/standalone_apps/namespace_pkg_config_source_test/some_namespace/namespace_test/dir/config_with_unicode.yaml\n  tests/test_apps/config_source_test/dir/config_with_unicode.yaml\n  tests/test_apps/app_with_unicode_in_config/config.yaml\n"
        },
        {
          "name": "ATTRIBUTION",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.056640625,
          "content": "Please see [NEWS.md](/NEWS.md) for an updated change log.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.2353515625,
          "content": "# Code of Conduct\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please [read the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.271484375,
          "content": "# Contributing to hydra\nWe want to make contributing to this project as easy and transparent as\npossible.\n\nPlease see the [developer guide](https://hydra.cc/docs/development/overview/) on the website.\n\n## Pull Requests\nWe welcome your pull requests.\n\n1. Fork the repo and create your feature branch from `main`.\n2. If you've added code add suitable tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite and lint pass.\n5. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to hydra, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "MIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.17578125,
          "content": "include hydra/py.typed\ninclude requirements/requirements.txt\nglobal-exclude *.pyc\nglobal-exclude __pycache__\nrecursive-include hydra/* *\nrecursive-include build_helpers *.py *.jar\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 44.2451171875,
          "content": "1.3.2 (2023-02-22)\n==================\n\n### Features\n\n- Add a `hydra.utils.get_object` function that gives users access to Hydra's dotpath-lookup machinery. ([#2139](https://github.com/facebookresearch/hydra/issues/2139))\n- Allow config_path to specify a non-relative module path, by starting with `pkg://` ([#2564](https://github.com/facebookresearch/hydra/issues/2564))\n\n### Maintenance Changes\n\n- Drop support for python3.6 ([#2304](https://github.com/facebookresearch/hydra/issues/2304))\n\n\n1.3.1 (2022-12-20)\n==================\n\n### Bug Fixes\n\n- Relax OmegaConf pin allowing OmegaConf 2.3 to be installed ([#2510](https://github.com/facebookresearch/hydra/issues/2510))\n\n\n1.3.0 (2022-12-08)\n==================\n\n### Features\n\n- Implement `_convert_=\"object\"` option for `instantiate`, enabling conversion of non-`_target_` structured configs to instances of the backing dataclass / attr class. ([#1719](https://github.com/facebookresearch/hydra/issues/1719))\n- Enable layering of the `@hydra.main` decorator on top of other decorators produced using `functools.wraps`. ([#2303](https://github.com/facebookresearch/hydra/issues/2303))\n- Allow for non-leading dashes in override keys ([#2363](https://github.com/facebookresearch/hydra/issues/2363))\n- support specifying an absolute path with `--config-path` ([#2368](https://github.com/facebookresearch/hydra/issues/2368))\n- Support python3.11 ([#2443](https://github.com/facebookresearch/hydra/issues/2443))\n\n### Bug Fixes\n\n- Fix an issue where Hydra's exception-handling logic could raise an `AssertionError` ([#2342](https://github.com/facebookresearch/hydra/issues/2342))\n\n\n1.2.0 (2022-05-17)\n==================\n\n### Bug fixes\n\n- `hydra.runtime.choices` is now updated correctly during multi-run ([#1882](https://github.com/facebookresearch/hydra/issues/1882))\n- `hydra.verbose=True` now works with multirun. ([#1897](https://github.com/facebookresearch/hydra/issues/1897))\n- Fix a resolution error occurring when a nested class is passed as a `_target_` keyword argument to `instantiate` ([#1914](https://github.com/facebookresearch/hydra/issues/1914))\n- It is now possible to pass other callable objects (besides functions) to `hydra.main`. ([#2042](https://github.com/facebookresearch/hydra/issues/2042))\n\n### New features\n\n- Add support to Hydra's instantiation API for creation of `functools.partial` instances via a `_partial_` keyword. ([#1283](https://github.com/facebookresearch/hydra/issues/1283))\n- Support defining basic sweeping in input config. ([#1376](https://github.com/facebookresearch/hydra/issues/1376))\n- Improve error message with more context when an omegaconf exception occurs during the config merge step. ([#1697](https://github.com/facebookresearch/hydra/issues/1697))\n- Add `--experimental-rerun` command-line option to reproduce pickled single runs ([#1805](https://github.com/facebookresearch/hydra/issues/1805))\n- Add experimental Callback for pickling job info. ([#2092](https://github.com/facebookresearch/hydra/issues/2092))\n- Implement tab completions for appending to the defaults list (+group=option) and deleting from the defaults list (~group). ([#1841](https://github.com/facebookresearch/hydra/issues/1841))\n- Enable the use of the pipe symbol `|` in unquoted strings when parsing command-line overrides. ([#1850](https://github.com/facebookresearch/hydra/issues/1850))\n- Support for Python 3.10 ([#1856](https://github.com/facebookresearch/hydra/issues/1856))\n- Improve clarity of error messages when `hydra.utils.instantiate` encounters a `_target_` that cannot be located ([#1863](https://github.com/facebookresearch/hydra/issues/1863))\n- The `instantiate` API now accepts `ListConfig`/`list`-type config as top-level input. ([#1950](https://github.com/facebookresearch/hydra/issues/1950))\n- Improve error messages raised in case of instantiation failure. ([#2099](https://github.com/facebookresearch/hydra/issues/2099))\n- Add callback for logging JobReturn. ([#2100](https://github.com/facebookresearch/hydra/issues/2100))\n- Support disable changing working directory at runtime. ([#910](https://github.com/facebookresearch/hydra/issues/910))\n- Support setting hydra.mode through config. ([#394](https://github.com/facebookresearch/hydra/issues/394))\n\n### Behavior changes\n\n- The antlr version requirement is updated from 4.8 to 4.9, to align better with current antlr versions\n- If user code raises an exception when called by `instantiate`, raise an `InstantiateError` exception instead of an instance of the same exception class that was raised by the user code. ([#1911](https://github.com/facebookresearch/hydra/issues/1911))\n- Remove support for deprecated arg `config_loader` to Plugin.setup, and update signature of `run_job` to require `hydra_context`. ([#1953](https://github.com/facebookresearch/hydra/issues/1953))\n\nThe remaining changes are protected by the new [version_base](https://hydra.cc/docs/upgrades/version_base/) support,\nwhich allows one to either configure Hydra to support older setups / config, or configure Hydra to use the following more modern defaults:\n\n- Remove deprecated \"old optional\" defaults list syntax ([#1952](https://github.com/facebookresearch/hydra/issues/1952))\n- Remove support for the legacy hydra override syntax (see [deprecation notice](https://hydra.cc/docs/upgrades/1.0_to_1.1/defaults_list_override/)). ([#2056](https://github.com/facebookresearch/hydra/issues/2056))\n- Remove support for old hydra.experimental.{compose,initialize} interface\n- Remove support for `_name_` and `_group_` from package header (see [deprecation notice](https://hydra.cc/docs/upgrades/1.0_to_1.1/changes_to_package_header))\n- Remove support for legacy default list interpolation format (see [deprecation notice](http://hydra.cc/docs/upgrades/1.0_to_1.1/defaults_list_interpolation))\n- Remove support for TargetConf class\n- Remove support for strict flag from compose API (see [deprecation notice](https://hydra.cc/docs/upgrades/0.11_to_1.0/strict_mode_flag_deprecated))\n- Remove support for \"*.yml\" extensions, requiring \"*.yaml\" instead.\n- Default to not changing the working directory at runtime. Use `hydra.job.chdir=True` to reinstate old behavior.\n- Default to not adding any directory to the config path. (see [`config_path` options](https://hydra.cc/docs/upgrades/1.0_to_1.1/changes_to_hydra_main_config_path))\n\n\n1.1.1 (2021-08-19)\n==================\n\n### Features\n\n- Allow range() in override grammar to have only one argument (the stop value), e.g. range(3) ([#1664](https://github.com/facebookresearch/hydra/issues/1664))\n- Add support for a HYDRA_DEPRECATION_WARNINGS_AS_ERRORS envorinment variable. When it is set, using deprecated features causes an exception instead of a warning. ([#1689](https://github.com/facebookresearch/hydra/issues/1689))\n- To make migration from Hydra 1.0 to 1.1 easier, Hydra will now issue a warning if the primary config defines config values and Defaults List if the Defaults List does not specify `_self_` ([#1755](https://github.com/facebookresearch/hydra/issues/1755))\n\n### API Change (Renames, deprecations and removals)\n\n- Re-introduced a deprecated strict flag in the Compose API ([#1694](https://github.com/facebookresearch/hydra/issues/1694))\n- Relax handling of legacy hydra overrides in the defaults list to make migration from Hydra 1.0 to 1.1 easier ([#1748](https://github.com/facebookresearch/hydra/issues/1748))\n\n### Bug Fixes\n\n- Allow Defaults List interpolation in nested configs and document that the interpolation keys must be absolute ([#1668](https://github.com/facebookresearch/hydra/issues/1668))\n- instantiate API now supports `target` as a parameter name ([#1669](https://github.com/facebookresearch/hydra/issues/1669))\n- Fix `--cfg=job --resolve` and `--help --resolve` so that the ${hydra:...} resolver now prints properly ([#1681](https://github.com/facebookresearch/hydra/issues/1681))\n- Fix unexpected changes to defaults list in some cases when appending an experiment (+experiment=test) ([#1706](https://github.com/facebookresearch/hydra/issues/1706))\n- Fixed composition where top level of a config composed from a config group is a list ([#1724](https://github.com/facebookresearch/hydra/issues/1724))\n- Fix bug where overriding hydra config groups more than once without using the override keyword resulted in an error instead of deprecation warnings ([#1730](https://github.com/facebookresearch/hydra/issues/1730))\n- Fix failure when sanitizing stack traces resulting from job exceptions ([#1739](https://github.com/facebookresearch/hydra/issues/1739))\n\n\n1.1.0 (2021-06-09)\n==================\nThis is the biggest Hydra release yet.  \n#### Highlights\n- OmegaConf 2.1 supports relative interpolations, nested interpolations, more powerful resolvers and better compatibility with plain Python dict and list.\n- Recursive defaults list: Every config can now have a Defaults List.  \n- Recursive instantiation: When instantiating objects using the `instantiate` API, nested defined objects are instantiated automatically.\n\nThere have also been many bug fixes and performance improvements, as well of as some breaking changes - both in Hydra and in OmegaConf.\nPlease check the API changes and deprecation sections in these release notes and in the OmegaConf release notes.\n\n### Features\n#### General enhancements\n- Upgrade to OmegaConf 2.1. Please check the [release notes](https://github.com/omry/omegaconf/releases/tag/v2.1.0.rc1) for it ([#1426](https://github.com/facebookresearch/hydra/issues/1426))\n- Support for Python 3.9. ([#1062](https://github.com/facebookresearch/hydra/issues/1062))\n- Improve performance of config composition in a benchmark by 64% ([#1328](https://github.com/facebookresearch/hydra/issues/1328))\n- Allow `@`, `$` and `?` symbols in unquoted values in overrides ([#1074](https://github.com/facebookresearch/hydra/issues/1074), [#1437](https://github.com/facebookresearch/hydra/issues/1437), [#1597](https://github.com/facebookresearch/hydra/issues/1597))\n- Add a --resolve flag that can be used with the --cfg and --help flags to resolve interpolations before the config is printed. ([#1585](https://github.com/facebookresearch/hydra/issues/1585),[#1482](https://github.com/facebookresearch/hydra/issues/1482))\n- It is now possible to disable Hydra's logging configuration ([#1130](https://github.com/facebookresearch/hydra/issues/1130))\n- Support for Zsh tab completion ([#347](https://github.com/facebookresearch/hydra/issues/347))\n- Support for force-add of config values via `++key=value` (force-add overrides if the value exists and adds it otherwise) ([#1049](https://github.com/facebookresearch/hydra/issues/1049))\n- New experimental Callback API ([#1402](https://github.com/facebookresearch/hydra/issues/1402))\n\n#### Config composition enhancements\n- Support for Defaults List in any config (Recursive relative defaults) ([#1170](https://github.com/facebookresearch/hydra/issues/1170))\n- Composition order of a config with a Defaults List can be specified with the `_self_` keyword. ([#326](https://github.com/facebookresearch/hydra/issues/326))\n- Support for configuring the config search path from the primary config ([#274](https://github.com/facebookresearch/hydra/issues/274))\n- Add support for selecting multiple configs from the same Config Group ([#499](https://github.com/facebookresearch/hydra/issues/499))  \n- Final choices of defaults list are retained in the dictionary hydra.runtime.choices ([#956](https://github.com/facebookresearch/hydra/issues/956))\n\n#### Object Instantiation enhancements\n- Support for recursive instantiation with `hydra.utils.instantiate()` ([#566](https://github.com/facebookresearch/hydra/issues/566))\n- Instantiate now fully supports positional arguments ([#1432](https://github.com/facebookresearch/hydra/issues/1432))\n- Support for converting parameters to primitive containers during instantiation ([#1015](https://github.com/facebookresearch/hydra/issues/1015))\n- It is now possible to override the `_target_` of instantiation with a Python type or a string ([#1017](https://github.com/facebookresearch/hydra/issues/1017))\n\n### API Change (Renames, deprecations and removals)\n#### General changes\n- Default composition order change, see [this](https://hydra.cc/docs/upgrades/1.0_to_1.1/default_composition_order) for details ([#1217](https://github.com/facebookresearch/hydra/issues/1217))\n- Remove deprecated strict flag from `@hydra.main` and the `Compose API` ([#1010](https://github.com/facebookresearch/hydra/issues/1010))\n- Passing a config name as config_path to `@hydra.main` is now an error ([#1010](https://github.com/facebookresearch/hydra/issues/1010))\n- Promote `hydra.experimental.{compose,initialize,initialize_config_dir,initialize_config_module}` out from the `hydra.experimental` module to the hydra module. ([#1030](https://github.com/facebookresearch/hydra/issues/1030))\n- The override grammar now requires that, in quoted strings, any sequence of \\ preceding a quote (either an escaped quote, or the closing quote) must be escaped ([#1600](https://github.com/facebookresearch/hydra/issues/1600))\n- Support partial failures in MULTIRUN mode ([#1377](https://github.com/facebookresearch/hydra/issues/1377))\n- Add `HydraContext` to `run_job` and Launcher/Sweeper's `setup` ([#1498](https://github.com/facebookresearch/hydra/issues/1498))\n#### Instantiate changes\n- Instantiate is now recursive by default, use `_recursive_=False` to disable recursive instantiation. ([#566](https://github.com/facebookresearch/hydra/issues/566))\n- Deprecated TargetConf, you should no longer be extending or annotating with it ([#1010](https://github.com/facebookresearch/hydra/issues/1010))\n- Remove ObjectConf and deprecated params support that was deprecated in Hydra 1.0 ([#1010](https://github.com/facebookresearch/hydra/issues/1010))\n#### Plugins API changes\n- HydraContext required in run_job, Launcher and Sweeper's setup methods, see issue for details ([#1498](https://github.com/facebookresearch/hydra/issues/1498))\n- ConfigSourcePlugins needs to be modified to support recursive defaults, see link for details ([#1080](https://github.com/facebookresearch/hydra/issues/1080))\n\n### Bug Fixes\n\n- Hydra no longer erroneously changes the USER environment variable in pytest unit tests once installed ([#1059](https://github.com/facebookresearch/hydra/issues/1059))\n- Fix a bug where Structured Config has a field like `list : Optional[List[int]] = None` ([#1117](https://github.com/facebookresearch/hydra/issues/1117))\n- No longer modifies exception stack trace when running under a debugger ([#1237](https://github.com/facebookresearch/hydra/issues/1237))\n- `hydra.job.{id,num}` are now properly passed to jobs in multirun ([#1270](https://github.com/facebookresearch/hydra/issues/1270))\n- Add support for `%f` directive (microseconds) to the `${now:PATTERN}` resolver ([#1287](https://github.com/facebookresearch/hydra/issues/1287))\n- Fixed a bug where tab completion did not work if the Defaults List had a missing (???) item. ([#1381](https://github.com/facebookresearch/hydra/issues/1381))\n- Fix `+` overrides to properly insert new values into Structured Configs. ([#1515](https://github.com/facebookresearch/hydra/issues/1515))\n- Fix edge cases where using the command line to set a key to a value containing a string ending with a backslash could crash ([#1600](https://github.com/facebookresearch/hydra/issues/1600))\n- `--cfg=hydra` now works for read-only config ([#1461](https://github.com/facebookresearch/hydra/issues/1461))\n- Change hydra.job_logging and hydra.hydra_logging to be non-optional ([#1656](https://github.com/facebookresearch/hydra/issues/1656))\n- Configs with unicode characters are now working on Windows ([#1659](https://github.com/facebookresearch/hydra/issues/1659))\n\n### Plugins\n\n- Add [Optuna](https://optuna.org/) Sweeper plugin\n\n### Improved Documentation\n\n- New Defaults List [page](https://hydra.cc/docs/advanced/defaults_list) ([#1170](https://github.com/facebookresearch/hydra/issues/1170))\n- New [Extending Configs](https://hydra.cc/docs/patterns/extending_configs/) pattern ([#1170](https://github.com/facebookresearch/hydra/issues/1170))\n- Major updates to the [Packages](https://hydra.cc/docs/advanced/overriding_packages) page ([#1170](https://github.com/facebookresearch/hydra/issues/1170))\n- New [Configuring Experiments](https://hydra.cc/docs/patterns/configuring_experiments/) pattern ([#1170](https://github.com/facebookresearch/hydra/issues/1170))\n- Documentation updates for configuring search path ([#1449](https://github.com/facebookresearch/hydra/issues/1449))\n- Documentation for `hydra.callbacks` ([#1526](https://github.com/facebookresearch/hydra/issues/1526))\n- Document how to configure Hydra plugins ([#1582](https://github.com/facebookresearch/hydra/issues/1582))\n\n\n1.0.7 (2021-07-14)\n==================\nThis release contains a few small changes to make Hydra 1.0 a bit more compatible with OmegaConf 2.1 and Hydra 1.1 to enable easier migration.\nThere is no risk in using it if you are using 1.0.6 now as it just makes the migration a bit smoother in some scenarios:\n1. If you are upgrading OmegaConf to 2.1 before upgrading Hydra to 1.1.\n2. It enables some configs to be compatible with both versions in some rare cases related to the change in the default composition order in Hydra 1.1.\n\n### Maintenance Changes\n\n- Enables Hydra 1.0 to work with OmegaConf 2.1 (Manual installation of OmegaConf 2.1 is required) ([#1634](https://github.com/facebookresearch/hydra/issues/1634))\n- Hydra 1.0 ignores `_self_` in Defaults List for partial future compatibility with Hydra 1.1 ([#1712](https://github.com/facebookresearch/hydra/issues/1712))\n\n\n1.0.6 (2021-01-29)\n==================\n\n### Bug Fixes\n\n- Fix interpolation in Hydra config node ([#1335](https://github.com/facebookresearch/hydra/issues/1335))\n\n### Maintenance Changes\n\n- Remove `Plugins` from `Singleton.get_state()` ([#1330](https://github.com/facebookresearch/hydra/issues/1330))\n\n\n1.0.5 (2021-01-07)\n==================\n\n### Features\n\n- Support Python 3.9 . ([#1062](https://github.com/facebookresearch/hydra/issues/1062))\n\n### API Change (Renames, deprecations and removals)\n\n- Deprecate support for renaming packages via the command line. ([#1140](https://github.com/facebookresearch/hydra/issues/1140))\n\n### Bug Fixes\n\n- Fixed hydra.job.id and hydra.job.num not getting passed to jobs in multirun ([#1270](https://github.com/facebookresearch/hydra/issues/1270))\n\n### Plugins\n\n- Support `additional_parameters` as an optional param in the Submitit launcher plugin.\n- Add [Optuna](https://optuna.org/) Sweeper plugin\n\n### Maintenance Changes\n\n- Limit OmegaConf dependency to 2.0 versions ([#1253](https://github.com/facebookresearch/hydra/issues/1253))\n\n\n\n1.0.4 (2020-11-17)\n==================\n\n### Bug Fixes\n\n- Hydra no longer errorenously changes the USER environment variable in pytest unit tests once installed ([#1059](https://github.com/facebookresearch/hydra/issues/1059))\n- Allow @ symbol in unquoted values in overrides ([#1074](https://github.com/facebookresearch/hydra/issues/1074))\n- Fix a bug where Structured Config has a field like 'list : Optional[List[int]] = None` ([#1117](https://github.com/facebookresearch/hydra/issues/1117))\n### Plugins\n- Switch Ax Sweeper plugin to use new Hydra command line syntax\n- Switch Nevergrad Sweeper plugin to use new Hydra command line syntax\n- Revert the use of \"_\" to separate the path element in keys for the Ax sweeper plugin.\n\n\n1.0.3 (2020-09-22)\n==================\n\n### Bug Fixes\n\n- Fixed interaction between interpolation and instantiate ([#1001](https://github.com/facebookresearch/hydra/issues/1001))\n- Fix float parsing for values where the exponent starts with 0 (e.g 1e-05) ([#999](https://github.com/facebookresearch/hydra/issues/999))\n\n\n1.0.2 (2020-09-20)\n==================\nThis is a small update improving support for config dataclasses generated by configen\n\n### Features\n\n- Overridden parameters annotated as Any in the config are not type checked by instantiate() ([#982](https://github.com/facebookresearch/hydra/issues/982))\n\n\n1.0.1 (2020-09-15)\n==================\n\n### Features\n\n- Add ability to escape special characters in unquoted command line values ([#954](https://github.com/facebookresearch/hydra/issues/954))\n\n### Bug Fixes\n\n- Add support for merging dicts and lists specified in the commend line ([#939](https://github.com/facebookresearch/hydra/issues/939))\n- Fix appending dict values with new fields to config with + ([#946](https://github.com/facebookresearch/hydra/issues/946))\n- Fix for Override Grammar integer parsing: Integers are now compatible with Python integers ('+' prefix, correct handling of '_') ([#954](https://github.com/facebookresearch/hydra/issues/954))\n\n### Maintenance Changes\n\n- Upgrade to OmegaConf 2.0.2 ([#755](https://github.com/facebookresearch/hydra/issues/755))\n\n\n1.0.0 (2020-09-03)\n==================\nHydra 1.0 is out!\nSee [blog post](https://hydra.cc/blog/2020/09/03/Hydra_1.0) for high level details.\n\nMajor new features in Hydra 1.0\n* Config type safety via Structured Configs\n* More powerful command line\n* New plugins enabling remote launching and hyper parameter optimization\n* Improved error reporting\n* Reduce nesting levels with config packages\n\nThese release notes are covering the changes since 1.0.0rc4.\n\nTo see the complete release notes for 1.0 take a look at the release notes of:\n- [1.0.0rc1](https://github.com/facebookresearch/hydra/releases/tag/v1.0.0rc1)\n- [1.0.0rc2](https://github.com/facebookresearch/hydra/releases/tag/v1.0.0rc2)\n- [1.0.0rc3](https://github.com/facebookresearch/hydra/releases/tag/v1.0.0rc3)\n- [1.0.0rc4](https://github.com/facebookresearch/hydra/releases/tag/v1.0.0rc4)\n- 1.0.0 (just below this line)\n\n### Features\n\n- Add support for casting interval to ints and floats ([#915](https://github.com/facebookresearch/hydra/issues/915))\n\n### Bug Fixes\n\n- Fix to flush logging instead of shutting it down at job end ([#833](https://github.com/facebookresearch/hydra/issues/833))\n- compose() no longer initialized logging subsystem ([#833](https://github.com/facebookresearch/hydra/issues/833))\n- Fix overriding of hydra.job.env_set from the command line ([#854](https://github.com/facebookresearch/hydra/issues/854))\n- Fix tab completion to not output errors in some cases when using --multirun ([#856](https://github.com/facebookresearch/hydra/issues/856))\n- Fix OmegaConf custom resolvers not being propagated to Sweepers properly ([#861](https://github.com/facebookresearch/hydra/issues/861))\n- Interpolation accepts any char between ${ and } ([#891](https://github.com/facebookresearch/hydra/issues/891))\n- Update the signature of hydra.utils.instantiate() allow input configs of Any type ([#896](https://github.com/facebookresearch/hydra/issues/896))\n- Fix instantiate to work correctly when parameters are interpolations into a parent node ([#904](https://github.com/facebookresearch/hydra/issues/904))\n- Apps will now raise underlying exception if env HYDRA_FULL_ERROR=1 ([#926](https://github.com/facebookresearch/hydra/issues/926))\n\n### Plugins\n\n- Fix integer/float choice from spec in the Nevergrad plugin\n\n### Improved Documentation\n\n- New page in Structured Configs tutorial: Static schema with many configs ([#918](https://github.com/facebookresearch/hydra/issues/918))\n- New page in Structured Configs tutorial: Dynamic schema with many configs ([#918](https://github.com/facebookresearch/hydra/issues/918))\n\n\n1.0.0rc4 (2020-08-18)\n=====================\nBe aware that `cfg.pretty()` is now deprecated and you should use `OmegaConf.to_yaml(cfg)` instead.\n\n### Features\n\n- Upgrade to OmegaConf 2.0.1rc12 ([#889](https://github.com/facebookresearch/hydra/issues/889))\n\n### Bug Fixes\n\n- Fix bug with bash autocompletion for the users who has `.` in their PATH environment variable ([#868](https://github.com/facebookresearch/hydra/issues/868))\n- Fix instantiate to return None when None config is passed ([#887](https://github.com/facebookresearch/hydra/issues/887))\n\n\n1.0.0rc3 (2020-08-17)\n=====================\n\n### Features\n\n- Extended Override grammar supports range(),glob(),type casts,shuffle, sort and more. ([#752](https://github.com/facebookresearch/hydra/issues/752))\n- Add support for specifying an additional config dir in the command line ([#874](https://github.com/facebookresearch/hydra/issues/874))\n- Allow overriding of the `defaults` and `hydra` nodes in primary Structured Configs that does not mentioned `defaults` and `hydra`. ([#877](https://github.com/facebookresearch/hydra/issues/877))\n\n### API Change (Renames, deprecations and removals)\n\n- ObjectConf is deprecated for TargetConf. See [upgrade page](https://hydra.cc/docs/upgrades/0.11_to_1.0/object_instantiation_changes). ([#882](https://github.com/facebookresearch/hydra/issues/882))\n- All plugins updated to use TargetConf. Be sure to update all your Hydra plugins ([#882](https://github.com/facebookresearch/hydra/issues/882))\n- Instantiated objects no longer have a params node in the conf. keys like hydra.launcher.params.foo are changed to hydra.launcher.foo. Update your configs and overrides if you were overriding such parameters. ([#882](https://github.com/facebookresearch/hydra/issues/882))\n\n### Bug Fixes\n\n- Fixed parsing of two nested lists with whitespace between them: [[a], [b]] ([#836](https://github.com/facebookresearch/hydra/issues/836))\n\n### Improved Documentation\n\n- New Extended command line syntax page ([#752](https://github.com/facebookresearch/hydra/issues/752))\n\n\n1.0.0rc2 (2020-07-18)\n=====================\n\n### Features\n\n- Introducing a DSL for the command line override syntax ([#797](https://github.com/facebookresearch/hydra/issues/797))\n- Sanitize exception messages by default, showing only interesting stack frames ([#646](https://github.com/facebookresearch/hydra/issues/646))\n- Add a new --info flag to show Hydra debug information without running the user function. ([#662](https://github.com/facebookresearch/hydra/issues/662))\n- Add --package flag, can be used with --cfg to print a specific config package ([#674](https://github.com/facebookresearch/hydra/issues/674))\n- Improve the Compose API initialization methods ([#702](https://github.com/facebookresearch/hydra/issues/702))\n- Switch internal package resource loader from pkg_resources to importlb_resources ([#719](https://github.com/facebookresearch/hydra/issues/719))\n- Allow interpolation in the Hydra config node to access the application config ([#771](https://github.com/facebookresearch/hydra/issues/771))\n- Hydra provides pytest fixtures (hydra_sweep_runner, hydra_task_runner, hydra_restore_singletons) ([#687](https://github.com/facebookresearch/hydra/issues/687))\n- Added contexts to help initialize Hydra in a localized context (Mostly for Unit Tests and Jupyter Notebooks) ([#687](https://github.com/facebookresearch/hydra/issues/687))\n- Prints error when command line override looks like a sweep but --multirun is not specified ([#712](https://github.com/facebookresearch/hydra/issues/712))\n- Frozen Structured Configs are respected during composition command line overrides ([#724](https://github.com/facebookresearch/hydra/issues/724))\n\n## API Change (Renames, deprecations and removals)\n\n- Hydra argparse flags are now consistently using dash-style. ([#661](https://github.com/facebookresearch/hydra/issues/661))\n- Restructure the configuration of the Submitit launcher ([#682](https://github.com/facebookresearch/hydra/issues/682))\n- Deprecated cls in favor of target in hydra.utils.{instantiate()/call{}} ([#721](https://github.com/facebookresearch/hydra/issues/721))\n\n### Bug Fixes\n\n- Add hydra/py.typed to pip package to enable type checking in downstream projects ([#657](https://github.com/facebookresearch/hydra/issues/657))\n- Fix initialization of Hydra in a module imported from a Jupyter Notebook ([#695](https://github.com/facebookresearch/hydra/issues/695))\n- Fix handling of main module override via HYDRA_MAIN_MODULE ([#717](https://github.com/facebookresearch/hydra/issues/717))\n- Fix interpolations in overrides to evaluate lazily ([#725](https://github.com/facebookresearch/hydra/issues/725))\n- Fixed handling of multirun when target config node is introduced by composition ([#726](https://github.com/facebookresearch/hydra/issues/726))\n- Sweepers are now validating config composition before launching ([#775](https://github.com/facebookresearch/hydra/issues/775))\n- Save `.hydra/*.yaml` before task execution ([#678](https://github.com/facebookresearch/hydra/issues/678))\n\n### Plugins\n\n- Add [Redis Queue](https://python-rq.org/) Launcher plugin ([Jan-Matthis](https://github.com/jan-matthis))\n- Upgrade ax-platform used by Ax sweeper plugin to 0.1.13 or newer\n\n### Improved Documentation\n\n- Add a unit testing example in the [Hydra example application](https://github.com/facebookresearch/hydra/blob/master/examples/advanced/hydra_app_example/tests/test_example.py) ([#687](https://github.com/facebookresearch/hydra/issues/687))\n- New [Terminology](https://hydra.cc/docs/terminology) page ([#795](https://github.com/facebookresearch/hydra/issues/795))\n- New [Advanced/Hydra in Jupyter Notebooks](https://hydra.cc/docs/advanced/jupyter_notebooks) page ([#795](https://github.com/facebookresearch/hydra/issues/795))\n- New [Advanced/Hydra in Unit Tests](https://hydra.cc/docs/advanced/unit_testing) page ([#795](https://github.com/facebookresearch/hydra/issues/795))\n- New [Advanced/Override Grammar/Basic](https://hydra.cc/docs/advanced/override_grammar/basic) page ([#795](https://github.com/facebookresearch/hydra/issues/795))\n\n### Maintenance Changes\n\n- Integrate [yamllint](https://yamllint.readthedocs.io/) ([#693](https://github.com/facebookresearch/hydra/issues/693))\n- Upgrade to OmegaConf 2.0.1rc11 which solves multiple bugs ([#755](https://github.com/facebookresearch/hydra/issues/755))\n\n\n1.0.0-rc1 (2020-05-31)\n======================\nHydra 1.0 is a major release introducing many new features and breaking some compatibility.\n\n### Features\n- Upgrade to OmegaConf 2.0 ([Release notes](https://github.com/omry/omegaconf/releases/tag/2.0.0)) (#630)\n- Optional config type safety via Structured Configs (#629)\n- Improve command line and config composition error reporting (#349)\n- Hydra config can now be accessed through interpolation using ${hydra:key}, for example ${hydra:job.name} ([#325](https://github.com/facebookresearch/hydra/issues/325))\n- Support for setting environment variable of running job ([#7](https://github.com/facebookresearch/hydra/issues/7))\n- Changes command line processing (requiring + and ~ prefixes for appending and removing items) ([#598](https://github.com/facebookresearch/hydra/issues/598))\n- Introducing `@package` header for config files ([#586](https://github.com/facebookresearch/hydra/issues/586))\n- Add command line override flags for `config_path` and `config_name` ([#386](https://github.com/facebookresearch/hydra/issues/386))\n- hydra.main() now take an optional cfg object to passthrough to the function ([#575](https://github.com/facebookresearch/hydra/issues/575))\n- Add hydra.experimental.{initialize_with_file, initialize_with_module} ([#574](https://github.com/facebookresearch/hydra/issues/574))\n- Support for disabling the creation of the `.hydra` subdirectory by overriding \"hydra.output_subdir\" to \"null\" ([#324](https://github.com/facebookresearch/hydra/issues/324))\n- Add `hydra.utils.call()` to call methods and functions as well as instantiate objects.  Search module paths more generically. ([#498](https://github.com/facebookresearch/hydra/issues/498))\n- Add support for overriding package from command line and defaults list ([#235](https://github.com/facebookresearch/hydra/issues/235))\n- Config source is now abstracted, allowing additional config sources to be used ([#257](https://github.com/facebookresearch/hydra/issues/257))\n- New ConfigSource plugin API allowing configs to be provided by external plugins ([#367](https://github.com/facebookresearch/hydra/issues/367))\n- Add isort to ensure imports are always sorted ([#340](https://github.com/facebookresearch/hydra/issues/340))\n- Codebase is now passing mypy --strict type checking ([#342](https://github.com/facebookresearch/hydra/issues/342))\n- Improve performance of plugin discovery and instantiation ([#489](https://github.com/facebookresearch/hydra/issues/489))\n- Modules whose name starts with \"\\_\" are skipped during plugin discovery ([#494](https://github.com/facebookresearch/hydra/issues/494))\n\n### Plugins\n- Add [Ax](https://ax.dev) Sweeper plugin ([Shagun Sodhani](https://shagunsodhani.com/))\n- Add [Nevergrad](https://github.com/facebookresearch/nevergrad) Sweeper plugin ([Jérémy Rapin](https://github.com/jrapin))\n- Add [Joblib](https://joblib.readthedocs.io/en/latest/) Launcher plugin ([Jan-Matthis](https://github.com/jan-matthis))\n- Add [Submitit](https://github.com/facebookincubator/submitit) Launcher plugin to launch jobs to SLURM clusters\n- Add [Fish](https://fishshell.com/) shell Tab Completion plugin ([Binsheng Liu](https://binshengliu.github.io/)) ([#549](https://github.com/facebookresearch/hydra/issues/549))\n\n### API Change (Renames, deprecations and removals)\n- Drop support Python 2.7 and 3.5 ([#313](https://github.com/facebookresearch/hydra/issues/313))\n- hydra.main() now takes an additional optional config_name and composite-style config_path is deprecated ([#395](https://github.com/facebookresearch/hydra/issues/395))\n- Launcher API launch method now takes an additional initial_job_idx indicating the id of the first job in the batch ([#284](https://github.com/facebookresearch/hydra/issues/284))\n- Singleton metaclass is now exposed at hydra.core.Singleton ([#371](https://github.com/facebookresearch/hydra/issues/371))\n- Moved HydraConfig from hydra.plugins.common.utils to hydra.core ([#371](https://github.com/facebookresearch/hydra/issues/371))\n- Move several formerly internal APIs to hydra/core to ensure plugins does not need to use internal APIs ([#371](https://github.com/facebookresearch/hydra/issues/371))\n- Plugin import now requires explicit name (from hydra.plugins.launcher import Launcher) ([#371](https://github.com/facebookresearch/hydra/issues/371))\n- Object Config \"class\" field is deprecated in favor of \"cls\" and will be removed in a future version. ([#389](https://github.com/facebookresearch/hydra/issues/389))\n- Experimental compose API config_file changed to config_name ([#395](https://github.com/facebookresearch/hydra/issues/395))\n- User plugins should be modified to not import twice during plugin discovery. see issue for details. ([#482](https://github.com/facebookresearch/hydra/issues/482))\n- Change hydra.core.plugins.Plugins class to a Singleton. access should be changed to the pattern Plugins.instance().foo() ([#489](https://github.com/facebookresearch/hydra/issues/489))\n- Plugins should now include test fixtures (sweep_runner, task_runner) via a standardized conftest.py ([#521](https://github.com/facebookresearch/hydra/issues/521))\n- Switch Python 3 native namespace packages for plugins (See task for details) ([#534](https://github.com/facebookresearch/hydra/issues/534))\n- Packaged configuration directories now requires an `__init__.py` at their top level ([#536](https://github.com/facebookresearch/hydra/issues/536))\n- Appending config groups to the defaults list via the command line now requires a + prefix ([#598](https://github.com/facebookresearch/hydra/issues/598))\n- Removing an item from the defaults list by assigning null (db=null) is deprecated, use ~db instead ([#598](https://github.com/facebookresearch/hydra/issues/598))\n- Installed Hydra applications no longer need have an additional `entry()` function on the stack ([#92](https://github.com/facebookresearch/hydra/issues/92))\n\n### Bug Fixes\n\n- Fix a bug causing sys.exit() error code to not be propagated ([#351](https://github.com/facebookresearch/hydra/issues/351))\n- Shutdown logging subsystem aftter job finishes to ensure log files are flushed and closed ([#378](https://github.com/facebookresearch/hydra/issues/378))\n- Fix a bug with utils.instantiate() failing if params contains interpolated values. ([#388](https://github.com/facebookresearch/hydra/issues/388))\n- Allow hydra.utils.instantiate() to accept non primitive objects for passthrough by name ([#400](https://github.com/facebookresearch/hydra/issues/400))\n- Fix to work when an Hydra app is executed in Jupyter notebook using the %run command ([#481](https://github.com/facebookresearch/hydra/issues/481))\n- Plugins are no longer imported twice during plugin discovery ([#482](https://github.com/facebookresearch/hydra/issues/482))\n- to_absolute_dir(path) now converts relative path to be relative to os.cwd() when used outside of Hydra ([#496](https://github.com/facebookresearch/hydra/issues/496))\n\n### Improved Documentation\n\n- Working examples are provided for all Hydra plugins in [plugins/examples](https://github.com/facebookresearch/hydra/tree/master/plugins/examples) ([#253](https://github.com/facebookresearch/hydra/issues/253))\n- The basic tutorial was rewritten to reflect many changes ([#602](https://github.com/facebookresearch/hydra/issues/602))\n- Add a new tutorial covering Structured Configs ([#628](https://github.com/facebookresearch/hydra/issues/628))\n\n\n0.11.3 (2019-12-29)\n===================\n\n### Bug Fixes\n\n- Pin Hydra 0.11 to OmegaConf 1.4 to avoid breaking compatibility when OmegaConf 2.0 is released ([#334](https://github.com/facebookresearch/hydra/issues/334))\n\n### Improved Documentation\n\n- Document a simple Ray example ([#317](https://github.com/facebookresearch/hydra/issues/317))\n\n\n0.11.2 (2019-12-04)\n===================\n\n### Features\n\n- Change website from cli.dev to hydra.cc (#314)\n\n### Bug Fixes\n\n- Fixes --cfg command line flag not working (#305)\n\n\n0.11.0 (2019-11-19)\n===================\n\n### Features\n\n- Add hydra.experimental API for composing configuration on demand (hydra.experimental.compose) (#219)\n- Add hydra.utils.get_original_cwd() to access original working directory and hydra.utils.to_absolute_path() to convert a path to absolute path (#251)\n- Change hydra logging format pattern, example: \"[2019-10-22 16:13:10,769][HYDRA] Installed Hydra Plugins\" (#254)\n- Change --cfg to require config type (one of 'job', 'hydra' or 'all') (#270)\n- Upgrade to OmegaConf 1.4.0, see full change log [here](https://github.com/omry/omegaconf/releases/tag/1.4.0) (#280)\n- Experimental support for Jupyter notebooks via compose API (#281)\n- Allow configuring override_dirname via hydra.job.config.override_dirname to exclude specific keys or change separator characters (#95)\n\n### Bug Fixes\n\n- Fix a bug that caused out of order composition when mixing config-groups with non-config-group in the defaults block (#261)\n- Allow '=' to be used in the value of an override, eg. foo=bar=10 (key foo, value bar=10). (#266)\n- Allow composing config files with dot in their name (foo.bar.yaml) (#271)\n\n### Plugins\n\n- hydra-colorlog plugin adds colored log output.\n\n### Improved Documentation\n\n- Document utils.get_original_cwd() and utils.to_absolute_path(\"foo\") (#251)\n\n\n0.10.0 (2019-10-19)\n===================\n\n### Configuration structure changes\n\n- Change the default sweep subdir from ${hydra.job.num}_${hydra.job.id} to ${hydra.job.num} (#150)\n\n### Features\n\n- App help now contains config groups and generated config\n  App help can now be customized\n  Hydra help is now available via --hydra-help (#1)\n- Simplify install and uninstall commands for tab completion (#200)\n- hydra.runtime.cwd now contains the original working directory the app was launched from (#244)\n\n### Bug Fixes\n\n- Fix an error with tab completion that occurred when a TAB was pressed after two spaces (#203)\n- Fix a bug when sweeping over groups that are used in an interpolation in defaults (#206)\n- Fix tab completion for cases where app name looks like foo.par (#213)\n\n### Improved Documentation\n\n- Describe news fragment types in more details in development/contributing (#150)\n- Examples dir now mirrors the structure of the website docs (#209)\n\n\n0.9.0 (2019-10-01)\n==================\n\n### Deprecations and Removals\n\n- Old demos directory was removed and a new tutorial directory as added (#167)\n\n### Features\n\n- Make strict mode the default when a config file is specified directly (#150)\n- Replace --verbose with a standard override (hydra.verbose) (#161)\n- Add IntegrationTestSuite to test_utils for testing Launcher plugins (#168)\n- Add support for specifying which config to print in -c, options are job (default), hydra or all. (#176)\n- Hydra is now hosted on https://cli.dev! (#75)\n- Move all Hydra configuration files to a subfolder (.hydra by default) under the output folder (#77)\n\n### Bug Fixes\n\n- Fix a bug in tab completion of missing mandatory values. (#145)\n- Fix a bug with multirun overriding free config groups (not in defaults) when strict mode is enabled (#181)\n- Fix a bug that prevented sweeping over an unspecified ('???') default group (#187)\n\n### Improved Documentation\n\n- Updated the primary tutorial on the web site and added a brand new tutorial directory (#58)\n- Documented debugging methods in website (#6)\n\n\n0.1.5 (2019-09-22)\n==================\n\n### Deprecations and Removals\n\n- Move FAIRTask, Submititit and FAIR-cluster-defaults plugins to fairinternal/hydra-fair-plugins repository (#138)\n- Remove Fairtask and Submitit example configs from demos as they are no longer needed (#146)\n\n### Features\n\n- Created hydra-core pip package, Hydra can now installed with 'pip install hydra-core' (#143)\n- Finalized submitit support (#18)\n\n### Plugins\n\n- Add default launcher config for Fairtask and Submitit launcher plugins\n\n\n0.1.4 (2019-09-18)\n==================\n\n### Features\n\n- hydra.utils.instantiate() can now take an additional optional kwargs dictionary to pass to constructor of the instantiated object (#142)\n- Initial support for bash completion, see documentation for details (#8)\n\n### Bug Fixes\n\n- Fixed Town Crier to generate correct links to issues in generated news file. (#122)\n- Fixed bug with overriding hydra defaults from user config file. (#123)\n- Fixed Singletons not getting serialized to remote jobs. (#128)\n- Fixed a bug that prevented using submitit in strict mode (#129)\n- Fixed example submitit config to set the job name (#133)\n\n\n0.1.3 (2019-09-02)\n==================\n\n### Configuration structure changes\n\n- Changed Hydra core defaults to be more appropriate for open source use. To get the FAIR cluster defaults install the fair_cluster plugin (#103)\n- Changed output directories default to group by day (output/DAY/TIME instead of output/DAY_TIME) (#121)\n\n### Features\n\n- Added the ability to prevent a default from being merged it by assigning null to it (hydra/launcher=null) (#106)\n- Implemented Plugin discovery mechanism, this can be used to find all installed plugins that implement a specific interface (#119)\n- Implemented an API to for manipulating the config search path (#120)\n\n### Bug Fixes\n\n- Fixed config loading to properly support the use case in demos/8_specializing_config (#104)\n- Fixed error message when the user config contains defaults that is a mapping and not a list (#107)\n- Fixed config loading order to allow properly overriding Hydra config groups from user config (#115)\n\n### Plugins\n\n- New plugin: fair_cluster\n  Change Hydra defaults to be appropriate for the FAIR cluster\n\n### Improved Documentation\n\n- Initial search path and plugins documentation (#103)\n\n\n0.1.2 (2019-08-26)\n==================\n\n### Deprecations and Removals\n\n- Hydra config groups were moved to the hydra/namespace (#101)\n- Removed support for .hydra directory, Hydra can be configured directly from the job config. (#91)\n\n### Bug Fixes\n\n- Config loading rewrite fixed #88 (#88)\n\n\n0.1.1 (2019-08-22)\n==================\n\n### Deprecations and Removals\n\n- Move non-public APIs into hydra._internal:\n    - Moved non-API code into hydra._interanl to flag it as private.\n    - Moved plugin interfaces into hydra.plugins.\n    - Moved code meant to be used by plugins to hydra.plugins.common. (#78)\n\n### Features\n\n- Integrated towncrier to bring you this news! (#45)\n- Hydra is now compatible with Windows (#63)\n- Hydra apps can now be packaged and installed along with their configuration files. (#87)\n\n### Bug Fixes\n\n- It is now possible to use ${override_dirname} in the output directory of a local job (#31)\n- Override_dirname separator changed from : to =, for example: foo/a:10,b:10 => foo/a=10,b=10 (#63)\n- Fixed automatic detection of missing copyright headers (#72)\n- fixed a bug that caused an empty config to be returned if specified config file did not have a .yaml extension. (#80)\n- Multi change diff:\n    - Logging config search path in verbose logging to assist debugging of config load issues\n    - Saving hydra.yaml into the job dir to assist debugging hydra issues\n    - Fixed a bug caused by fairtask logging change\n    - Improved integration-tests debuggability by switching hydra to debug logging in them\n    - Added selective plugin testing to nox using env, for example PLUGINS=fairtask would only test fairtask. (#87)\n\n### Improved Documentation\n\n- Improved the contributing docs (#45)\n- Documented Hydra app packaging under Deployment/Application packaging (#87)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9951171875,
          "content": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/facebookresearch/hydra/main/website/static/img/Hydra-Readme-logo2.svg\" alt=\"logo\" width=\"70%\" /></p>\n\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/hydra-core/\">\n    <img src=\"https://img.shields.io/pypi/v/hydra-core\" alt=\"PyPI\" />\n  </a>\n  <a href=\"https://circleci.com/gh/facebookresearch/hydra\">\n    <img src=\"https://img.shields.io/circleci/build/github/facebookresearch/hydra?token=af199cd2deca9e70e53776f9ded96284b10687e9\" alt=\"CircleCI\" />\n  </a>\n  <a href=\"#\">\n    <img src=\"https://img.shields.io/pypi/l/hydra-core\" alt=\"PyPI - License\" />\n  </a>\n  <a href=\"#\">\n    <img src=\"https://img.shields.io/pypi/pyversions/hydra-core\" alt=\"PyPI - Python Version\" />\n  </a>\n  <a href=\"https://www.pepy.tech/projects/hydra-core?versions=0.11.*&versions=1.0.*&versions=1.1.*&versions=1.2.*&versions=1.3.*&versions=1.4.*\">\n    <img src=\"https://pepy.tech/badge/hydra-core/month\" alt=\"Downloads\" />\n  </a>\n  <a href=\"https://github.com/psf/black\">\n    <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\" />\n  </a>\n  <p align=\"center\">\n    <i>A framework for elegantly configuring complex applications.</i>\n  </p>\n  <p align=\"center\">\n    <i>Check the <a href=\"https://hydra.cc/\">website</a> for more information,<br>\n    or click the thumbnail below for a one-minute video introduction to Hydra.</i>\n  </p>\n  <p align=\"center\">\n   <a href=\"http://www.youtube.com/watch?feature=player_embedded&v=Slc3gRQpnBI\" target=\"_blank\">\n     <img src=\"http://img.youtube.com/vi/Slc3gRQpnBI/hqdefault.jpg\" alt=\"1 minute overview\" width=\"240\" height=\"180\" border=\"10\" />\n   </a>\n  </p>\n</p>\n\n----------------------\n\n\n### Releases\n\n#### Stable\n\n**Hydra 1.3** is the stable version of Hydra.\n- [Documentation](https://hydra.cc/docs/1.3/intro/)\n- Installation : `pip install hydra-core --upgrade`\n\nSee the [NEWS.md](NEWS.md) file for a summary of recent changes to Hydra.\n\n### License\nHydra is licensed under [MIT License](LICENSE).\n\n## Hydra Ecosystem\n\n#### Check out these third-party libraries that build on Hydra's functionality:\n* [hydra-zen](https://github.com/mit-ll-responsible-ai/hydra-zen): Pythonic utilities for working with Hydra. Dynamic config generation capabilities, enhanced config store features, a Python API for launching Hydra jobs, and more.\n* [lightning-hydra-template](https://github.com/ashleve/lightning-hydra-template): user-friendly template combining Hydra with [Pytorch-Lightning](https://github.com/Lightning-AI/lightning) for ML experimentation.\n* [hydra-torch](https://github.com/pytorch/hydra-torch): [configen](https://github.com/facebookresearch/hydra/tree/main/tools/configen)-generated configuration classes enabling type-safe PyTorch configuration for Hydra apps.\n* NVIDIA's DeepLearningExamples repository contains a Hydra Launcher plugin, the [distributed_launcher](https://github.com/NVIDIA/DeepLearningExamples/tree/9c34e35c218514b8607d7cf381d8a982a01175e9/Tools/PyTorch/TimeSeriesPredictionPlatform/distributed_launcher), which makes use of the pytorch [distributed.launch](https://pytorch.org/docs/stable/distributed.html#launch-utility) API.\n\n#### Ask questions in Github Discussions or StackOverflow (Use the tag #fb-hydra or #omegaconf):\n* [Github Discussions](https://github.com/facebookresearch/hydra/discussions)\n* [StackOverflow](https://stackexchange.com/filters/391828/hydra-questions)\n* [Twitter](https://twitter.com/Hydra_Framework)\n\nCheck out the Meta AI [blog post](https://ai.facebook.com/blog/reengineering-facebook-ais-deep-learning-platforms-for-interoperability/) to learn about how Hydra fits into Meta's efforts to reengineer deep learning platforms for interoperability.\n\n### Citing Hydra\nIf you use Hydra in your research please use the following BibTeX entry:\n```BibTeX\n@Misc{Yadan2019Hydra,\n  author =       {Omry Yadan},\n  title =        {Hydra - A framework for elegantly configuring complex applications},\n  howpublished = {Github},\n  year =         {2019},\n  url =          {https://github.com/facebookresearch/hydra}\n}\n```\n\n"
        },
        {
          "name": "apt.txt",
          "type": "blob",
          "size": 0.01171875,
          "content": "default-jre\n"
        },
        {
          "name": "build_helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hydra",
          "type": "tree",
          "content": null
        },
        {
          "name": "lgtm.yml",
          "type": "blob",
          "size": 0.0419921875,
          "content": "queries:\n  - exclude: py/import-own-module\n"
        },
        {
          "name": "news",
          "type": "tree",
          "content": null
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 20.8623046875,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\nimport copy\nimport functools\nimport os\nimport platform\nimport subprocess\nimport sys\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Iterator, List, Optional, Tuple, Union\n\nimport nox\nfrom nox import Session\nfrom nox.logger import logger\n\nBASE = os.path.abspath(os.path.dirname(__file__))\n\nDEFAULT_PYTHON_VERSIONS = [\"3.8\", \"3.9\", \"3.10\", \"3.11\"]\nDEFAULT_OS_NAMES = [\"Linux\", \"MacOS\", \"Windows\"]\n\nPYTHON_VERSIONS = os.environ.get(\n    \"NOX_PYTHON_VERSIONS\", \",\".join(DEFAULT_PYTHON_VERSIONS)\n).split(\",\")\n\nINSTALL_EDITABLE_MODE = os.environ.get(\"INSTALL_EDITABLE_MODE\", 0)\n\nINSTALL_COMMAND = (\n    [\"pip\", \"install\", \"-e\"] if INSTALL_EDITABLE_MODE else [\"pip\", \"install\"]\n)\n\n# Allow limiting testing to specific plugins\n# The list ['ALL'] indicates all plugins\nPLUGINS = os.environ.get(\"PLUGINS\", \"ALL\").split(\",\")\nSKIP_PLUGINS = os.environ.get(\"SKIP_PLUGINS\", \"\")\n\nSKIP_CORE_TESTS = os.environ.get(\"SKIP_CORE_TESTS\", \"0\") != \"0\"\nUSE_OMEGACONF_DEV_VERSION = os.environ.get(\"USE_OMEGACONF_DEV_VERSION\", \"0\") != \"0\"\nFIX = os.environ.get(\"FIX\", \"0\") == \"1\"\nVERBOSE = os.environ.get(\"VERBOSE\", \"0\")\nSILENT = VERBOSE == \"0\"\n\nnox.options.error_on_missing_interpreters = True\n\n\n@dataclass\nclass Plugin:\n    name: str\n    abspath: str\n    module: str\n    source_dir: str\n    dir_name: str\n    setup_py: str\n    classifiers: List[str]\n\n\ndef get_current_os() -> str:\n    current_os = platform.system()\n    if current_os == \"Darwin\":\n        current_os = \"MacOS\"\n    return current_os\n\n\nprint(f\"Operating system\\t:\\t{get_current_os()}\")\nprint(f\"NOX_PYTHON_VERSIONS\\t:\\t{PYTHON_VERSIONS}\")\nprint(f\"PLUGINS\\t\\t\\t:\\t{PLUGINS}\")\nprint(f\"SKIP_PLUGINS\\t\\t\\t:\\t{SKIP_PLUGINS}\")\nprint(f\"SKIP_CORE_TESTS\\t\\t:\\t{SKIP_CORE_TESTS}\")\nprint(f\"FIX\\t\\t\\t:\\t{FIX}\")\nprint(f\"VERBOSE\\t\\t\\t:\\t{VERBOSE}\")\nprint(f\"INSTALL_EDITABLE_MODE\\t:\\t{INSTALL_EDITABLE_MODE}\")\nprint(f\"USE_OMEGACONF_DEV_VERSION\\t:\\t{USE_OMEGACONF_DEV_VERSION}\")\n\n\ndef _upgrade_basic(session: Session) -> None:\n    session.install(\"--upgrade\", \"pip\", silent=SILENT)\n    session.install(\"--upgrade\", \"setuptools\", silent=SILENT)\n\n\ndef find_dirs(path: str) -> Iterator[str]:\n    for file in os.listdir(path):\n        fullname = os.path.join(path, file)\n        if os.path.isdir(fullname):\n            yield fullname\n\n\ndef print_installed_package_version(session: Session, package_name: str) -> None:\n    pip_list: str = session.run(\"pip\", \"list\", silent=True)\n    for line in pip_list.split(\"\\n\"):\n        if package_name in line:\n            print(f\"Installed {package_name} version: {line}\")\n\n\ndef install_hydra(session: Session, cmd: List[str]) -> None:\n    # needed for build\n    session.install(\"read-version\", silent=SILENT)\n    # clean install hydra\n    session.chdir(BASE)\n    if USE_OMEGACONF_DEV_VERSION:\n        session.install(\"--pre\", \"omegaconf\", silent=SILENT)\n    session.run(*cmd, \".\", silent=SILENT)\n    print_installed_package_version(session, \"omegaconf\")\n    if not SILENT:\n        session.install(\"pipdeptree\", silent=SILENT)\n        session.run(\"pipdeptree\", \"-p\", \"hydra-core\")\n\n\ndef install_selected_plugins(\n    session: Session,\n    install_cmd: List[str],\n    selected_plugins: List[Plugin],\n) -> None:\n    for plugin in selected_plugins:\n        install_plugin(session, install_cmd, plugin)\n    # Test that we can import Hydra\n    session.run(\"python\", \"-c\", \"from hydra import main\", silent=SILENT)\n\n\ndef install_plugin(session: Session, install_cmd: List[str], plugin: Plugin) -> None:\n    maybe_install_torch(session, plugin)\n    cmd = install_cmd + [plugin.abspath]\n    session.run(*cmd, silent=SILENT)\n    if not SILENT:\n        session.run(\"pipdeptree\", \"-p\", plugin.name)\n    # Test that we can import all installed plugins\n    session.run(\"python\", \"-c\", f\"import {plugin.module}\")\n\n\ndef maybe_install_torch(session: Session, plugin: Plugin) -> None:\n    if plugin_requires_torch(plugin):\n        install_cpu_torch(session)\n        print_installed_package_version(session, \"torch\")\n\n\ndef plugin_requires_torch(plugin: Plugin) -> bool:\n    \"\"\"Determine whether the given plugin depends on pytorch as a requirement\"\"\"\n    return '\"torch\"' in Path(plugin.setup_py).read_text()\n\n\ndef install_cpu_torch(session: Session) -> None:\n    \"\"\"\n    Install the CPU version of pytorch.\n    This is a much smaller download size than the normal version `torch` package hosted on pypi.\n    The smaller download prevents our CI jobs from timing out.\n    \"\"\"\n    session.install(\n        \"torch\", \"--extra-index-url\", \"https://download.pytorch.org/whl/cpu\"\n    )\n\n\ndef pytest_args(*args: str) -> List[str]:\n    ret = [\"pytest\"]\n    ret.extend(args)\n    return ret\n\n\ndef run_pytest(session: Session, directory: str = \".\", *args: str) -> None:\n    pytest_cmd = pytest_args(directory, *args)\n    # silent=False to enable some output on CI\n    # (otherwise we risk no-output timeout)\n    session.run(*pytest_cmd, silent=False)\n\n\ndef get_setup_python_versions(classifiers: List[str]) -> List[str]:\n    pythons = filter(lambda line: \"Programming Language :: Python\" in line, classifiers)\n    return [p[len(\"Programming Language :: Python :: \") :] for p in pythons]\n\n\ndef session_python_as_tuple(session: Session) -> Tuple[int, int]:\n    major_str, minor_str = session.python.split(\".\")\n    major, minor = int(major_str), int(minor_str)\n    return major, minor\n\n\ndef get_plugin_os_names(classifiers: List[str]) -> List[str]:\n    oses = list(filter(lambda line: \"Operating System\" in line, classifiers))\n    if len(oses) == 0:\n        # No Os is specified so all oses are supported\n        return DEFAULT_OS_NAMES\n    if len(oses) == 1 and oses[0] == \"Operating System :: OS Independent\":\n        # All oses are supported\n        return DEFAULT_OS_NAMES\n    else:\n        return [p.split(\"::\")[-1].strip() for p in oses]\n\n\n@functools.lru_cache()\ndef list_plugins(directory: str) -> List[Plugin]:\n    blacklist = [\".isort.cfg\", \"examples\"]\n    _plugin_directories = [\n        x\n        for x in sorted(os.listdir(os.path.join(BASE, directory)))\n        if x not in blacklist\n    ]\n\n    # Install bootstrap deps in base python environment\n    subprocess.check_output(\n        [\n            sys.executable,\n            \"-m\",\n            \"pip\",\n            \"install\",\n            \"read-version\",  # needed to read data from setup.py\n            \"toml\",  # so read-version can read pyproject.toml\n        ],\n    )\n\n    plugins: List[Plugin] = []\n    for dir_name in _plugin_directories:\n        abspath = os.path.join(BASE, directory, dir_name)\n        setup_py = os.path.join(abspath, \"setup.py\")\n        name_and_classifiers: List[str] = subprocess.check_output(\n            [sys.executable, setup_py, \"--name\", \"--classifiers\"],\n            text=True,\n        ).splitlines()\n        name, classifiers = name_and_classifiers[0], name_and_classifiers[1:]\n\n        if \"hydra_plugins\" in os.listdir(abspath):\n            module = \"hydra_plugins.\" + dir_name\n            source_dir = \"hydra_plugins\"\n        else:\n            module = dir_name\n            source_dir = dir_name\n\n        plugins.append(\n            Plugin(\n                name=name,\n                abspath=abspath,\n                source_dir=source_dir,\n                module=module,\n                dir_name=dir_name,\n                setup_py=setup_py,\n                classifiers=classifiers,\n            )\n        )\n    return plugins\n\n\ndef select_plugins_under_directory(session: Session, directory: str) -> List[Plugin]:\n    \"\"\"\n    Select all plugins under the current directory that should be tested in this session.\n    \"\"\"\n    plugins_under_directory: List[Plugin] = list_plugins(directory)\n    selected_plugins = [\n        plugin\n        for plugin in plugins_under_directory\n        if is_plugin_compatible(session, plugin)\n    ]\n\n    if len(selected_plugins) == 0:\n        logger.warn(\"No plugins selected\")\n\n    return selected_plugins\n\n\ndef is_plugin_compatible(session: Session, plugin: Plugin) -> bool:\n    \"\"\"\n    Considers the current Python version and operating systems against the supported ones,\n    as well as the user plugins selection (via the PLUGINS and SKIP_PLUGINS environment variables).\n    \"\"\"\n    assert session.python is not None, \"Session python version is not specified\"\n\n    if (\n        not (plugin.dir_name in PLUGINS or PLUGINS == [\"ALL\"])\n        or plugin.dir_name in SKIP_PLUGINS\n    ):\n        logger.warn(f\"Deselecting {plugin.dir_name}: User request\")\n        return False\n\n    plugin_python_versions = get_setup_python_versions(plugin.classifiers)\n    python_supported = session.python in plugin_python_versions\n\n    plugin_os_names = get_plugin_os_names(plugin.classifiers)\n    os_supported = get_current_os() in plugin_os_names\n\n    if not python_supported:\n        py_str = \", \".join(plugin_python_versions)\n        logger.warn(\n            f\"Deselecting {plugin.dir_name} : Incompatible Python {session.python}. Supports [{py_str}]\"\n        )\n        return False\n\n    # Verify this plugin supports the OS we are testing on, skip otherwise\n    if not os_supported:\n        os_str = \", \".join(plugin_os_names)\n        logger.warn(\n            f\"Deselecting {plugin.dir_name}: Incompatible OS {get_current_os()}. Supports [{os_str}]\"\n        )\n        return False\n\n    return True\n\n\ndef install_dev_deps(session: Session) -> None:\n    session.run(\"pip\", \"install\", \"-r\", \"requirements/dev.txt\", silent=SILENT)\n\n\ndef _black_cmd() -> List[str]:\n    black = [\"black\", \".\"]\n    if not FIX:\n        black += [\"--check\"]\n    return black\n\n\ndef _isort_cmd() -> List[str]:\n    isort = [\"isort\", \".\"]\n    if not FIX:\n        isort += [\"--check\", \"--diff\"]\n    return isort\n\n\ndef _mypy_cmd(strict: bool, python_version: Optional[str] = \"3.8\") -> List[str]:\n    mypy = [\n        \"mypy\",\n        \"--install-types\",\n        \"--non-interactive\",\n        \"--config-file\",\n        f\"{BASE}/.mypy.ini\",\n    ]\n    if strict:\n        mypy.append(\"--strict\")\n    if python_version is not None:\n        mypy.append(f\"--python-version={python_version}\")\n    return mypy\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\ndef lint(session: Session) -> None:\n    _upgrade_basic(session)\n    install_dev_deps(session)\n    install_hydra(session, [\"pip\", \"install\", \"-e\"])\n\n    apps = _get_standalone_apps_dirs()\n    session.log(\"Installing standalone apps\")\n    for subdir in apps:\n        session.chdir(str(subdir))\n        session.run(*_black_cmd(), silent=SILENT)\n        session.run(*_isort_cmd(), silent=SILENT)\n        session.chdir(BASE)\n\n    session.run(*_black_cmd(), silent=SILENT)\n\n    skiplist = apps + [\n        \".git\",\n        \"website\",\n        \"plugins\",\n        \"tools\",\n        \".nox\",\n        \"hydra/grammar/gen\",\n        \"tools/configen/example/gen\",\n        \"tools/configen/tests/test_modules/expected\",\n        \"temp\",\n        \"build\",\n        \"contrib\",\n    ]\n    isort = _isort_cmd() + [f\"--skip={skip}\" for skip in skiplist]\n\n    session.run(*isort, silent=SILENT)\n\n    session.run(\n        *_mypy_cmd(strict=True),\n        \".\",\n        \"--exclude=^examples/\",\n        \"--exclude=^tests/standalone_apps/\",\n        \"--exclude=^tests/test_apps/\",\n        \"--exclude=^tools/\",\n        \"--exclude=^plugins/\",\n        silent=SILENT,\n    )\n    session.run(\"flake8\", \"--config\", \".flake8\")\n    session.run(\"yamllint\", \"--strict\", \".\")\n\n    mypy_check_subdirs = [\n        \"examples/advanced\",\n        \"examples/configure_hydra\",\n        \"examples/patterns\",\n        \"examples/instantiate\",\n        \"examples/tutorials/basic/your_first_hydra_app\",\n        \"examples/tutorials/basic/running_your_hydra_app\",\n        \"examples/tutorials/structured_configs\",\n        \"tests/standalone_apps\",\n        \"tests/test_apps\",\n    ]\n    for sdir in mypy_check_subdirs:\n        dirs = find_dirs(path=sdir)\n        for d in dirs:\n            session.run(\n                *_mypy_cmd(strict=True),\n                d,\n                silent=SILENT,\n            )\n\n    for sdir in [\"tools\"]:\n        dirs = find_dirs(path=sdir)\n        for d in dirs:\n            session.run(\n                *_mypy_cmd(strict=False),  # no --strict flag for tools\n                d,\n                silent=SILENT,\n            )\n\n    # lint example plugins\n    lint_plugins_in_dir(session=session, directory=\"examples/plugins\")\n\n    # bandit static security analysis\n    session.run(\"bandit\", \"--exclude\", \"./.nox/**\", \"-ll\", \"-r\", \".\", silent=SILENT)\n\n\ndef lint_plugins_in_dir(session: Session, directory: str) -> None:\n    plugins = select_plugins_under_directory(session, directory)\n    for plugin in plugins:\n        lint_plugin(session, plugin)\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\n@nox.parametrize(\"plugin\", list_plugins(\"plugins\"), ids=[p.name for p in list_plugins(\"plugins\")])  # type: ignore\ndef lint_plugins(session: Session, plugin: Plugin) -> None:\n    if not is_plugin_compatible(session, plugin):\n        session.skip(f\"Skipping session {session.name}\")\n    _upgrade_basic(session)\n    lint_plugin(session, plugin)\n\n\ndef lint_plugin(session: Session, plugin: Plugin) -> None:\n    install_cmd = [\"pip\", \"install\"]\n    install_hydra(session, install_cmd)\n\n    # plugin linting requires the plugin and its dependencies to be installed\n    install_plugin(session=session, install_cmd=install_cmd, plugin=plugin)\n\n    install_dev_deps(session)\n\n    session.run(\"flake8\", \"--config\", \".flake8\", plugin.abspath)\n    path = plugin.abspath\n    source_dir = plugin.source_dir\n    session.chdir(path)\n    session.run(*_black_cmd(), silent=SILENT)\n    session.run(*_isort_cmd(), silent=SILENT)\n    session.chdir(BASE)\n\n    files = []\n    for file in [\"tests\", \"example\"]:\n        abs = os.path.join(path, file)\n        if os.path.exists(abs):\n            files.append(abs)\n\n    # Mypy for plugin\n    session.run(\n        *_mypy_cmd(\n            strict=True,\n            # Don't pass --python-version flag when linting plugins, as mypy may\n            # report syntax errors if the passed --python-version is different\n            # from the python version that was used to install the plugin's\n            # dependencies.\n            python_version=None,\n        ),\n        \"--follow-imports=silent\",\n        f\"{path}/{source_dir}\",\n        *files,\n        silent=SILENT,\n    )\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\ndef test_tools(session: Session) -> None:\n    _upgrade_basic(session)\n    install_cmd = [\"pip\", \"install\"]\n    session.install(\"pytest\")\n    install_hydra(session, install_cmd)\n\n    tools = [\n        x\n        for x in sorted(os.listdir(os.path.join(BASE, \"tools\")))\n        if not os.path.isfile(x)\n    ]\n\n    for tool in tools:\n        tool_path = os.path.join(\"tools\", tool)\n        session.chdir(BASE)\n        if (Path(tool_path) / \"setup.py\").exists():\n            cmd = list(install_cmd) + [\"-e\", tool_path]\n            session.run(*cmd, silent=SILENT)\n            session.run(\"pytest\", tool_path)\n\n    session.chdir(BASE)\n\n\ndef _get_standalone_apps_dirs() -> List[Union[str, Path]]:\n    standalone_apps_dir = Path(f\"{BASE}/tests/standalone_apps\")\n    apps: List[Union[str, Path]] = [\n        standalone_apps_dir / subdir for subdir in os.listdir(standalone_apps_dir)\n    ]\n    apps.append(f\"{BASE}/examples/advanced/hydra_app_example\")\n    return apps\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\ndef test_core(session: Session) -> None:\n    _upgrade_basic(session)\n    install_hydra(session, INSTALL_COMMAND)\n    session.install(\"pytest\")\n\n    if not SKIP_CORE_TESTS:\n        run_pytest(\n            session,\n            \"build_helpers\",\n            \"tests\",\n            \"-W ignore:pkg_resources is deprecated as an API:DeprecationWarning\",\n            *session.posargs,\n        )\n    else:\n        session.log(\"Skipping Hydra core tests\")\n\n    apps = _get_standalone_apps_dirs()\n    session.log(\"Testing standalone apps\")\n    for subdir in apps:\n        session.chdir(subdir)\n        session.run(*INSTALL_COMMAND, \".\", silent=SILENT)\n        run_pytest(session, \".\")\n\n    session.chdir(BASE)\n\n    selected_plugins = select_plugins_under_directory(session, \"examples/plugins\")\n    install_selected_plugins(\n        session=session, install_cmd=INSTALL_COMMAND, selected_plugins=selected_plugins\n    )\n    test_selected_plugins(\n        session,\n        selected_plugins=selected_plugins,\n    )\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\ndef test_plugins_vs_core(session: Session) -> None:\n    _upgrade_basic(session)\n    session.install(\"pytest\")\n    install_hydra(session, INSTALL_COMMAND)\n\n    # install all plugins compatible with the current Python version\n    selected_plugins = select_plugins_under_directory(session, \"plugins\")\n    install_selected_plugins(\n        session=session, install_cmd=INSTALL_COMMAND, selected_plugins=selected_plugins\n    )\n\n    # Run Hydra tests to verify installed plugins did not break anything\n    if not SKIP_CORE_TESTS:\n        # exclude test_completion for plugins tests.\n        # 1. It's tested during normal core tests.\n        # 2. it's somewhat fragile and tend to timeout in mac.\n        # 3. it's expensive and it's not worth the cost to run it for plugins as well.\n        run_pytest(session, \"tests\", \"--ignore=tests/test_completion.py\")\n    else:\n        session.log(\"Skipping Hydra core tests\")\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\n@nox.parametrize(\"plugin\", list_plugins(\"plugins\"), ids=[p.name for p in list_plugins(\"plugins\")])  # type: ignore\ndef test_plugins(session: Session, plugin: Plugin) -> None:\n    _upgrade_basic(session)\n    session.install(\"pytest\")\n    install_hydra(session, INSTALL_COMMAND)\n    if not is_plugin_compatible(session, plugin):\n        session.skip(f\"Skipping session {session.name}\")\n    else:\n        install_selected_plugins(\n            session=session, install_cmd=INSTALL_COMMAND, selected_plugins=[plugin]\n        )\n        test_selected_plugins(\n            session=session,\n            selected_plugins=[plugin],\n        )\n\n\ndef test_selected_plugins(session: Session, selected_plugins: List[Plugin]) -> None:\n    # Run tests for all installed plugins\n    for plugin in selected_plugins:\n        session.chdir(plugin.abspath)\n        run_pytest(session)\n\n\n@nox.session(python=\"3.8\")  # type: ignore\ndef coverage(session: Session) -> None:\n    _upgrade_basic(session)\n    coverage_env = {\n        \"COVERAGE_HOME\": BASE,\n        \"COVERAGE_FILE\": f\"{BASE}/.coverage\",\n        \"COVERAGE_RCFILE\": f\"{BASE}/.coveragerc\",\n    }\n\n    session.install(\"coverage\", \"pytest\")\n    install_hydra(session, [\"pip\", \"install\", \"-e\"])\n    session.run(\"coverage\", \"erase\", env=coverage_env)\n\n    for directory in [\"plugins\", \"examples/plugins\"]:\n        selected_plugins = select_plugins_under_directory(session, directory)\n        for plugin in selected_plugins:\n            session.run(\n                \"pip\",\n                \"install\",\n                \"-e\",\n                plugin.abspath,\n                silent=SILENT,\n            )\n\n        # run plugin coverage\n        for plugin in selected_plugins:\n            session.chdir(plugin.abspath)\n            cov_args = [\"coverage\", \"run\", \"--append\", \"-m\"]\n            cov_args.extend(pytest_args())\n            session.run(*cov_args, silent=SILENT, env=coverage_env)\n            session.chdir(BASE)\n\n    # run hydra-core coverage\n    session.run(\n        \"coverage\",\n        \"run\",\n        \"--append\",\n        \"-m\",\n        silent=SILENT,\n        env=coverage_env,\n        *pytest_args(),\n    )\n\n    # Increase the fail_under as coverage improves\n    session.run(\"coverage\", \"report\", \"--fail-under=80\", env=coverage_env)\n    session.run(\"coverage\", \"erase\", env=coverage_env)\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\ndef test_jupyter_notebooks(session: Session) -> None:\n    _upgrade_basic(session)\n    versions = copy.copy(DEFAULT_PYTHON_VERSIONS)\n    if session.python not in versions:\n        session.skip(\n            f\"Not testing Jupyter notebook on Python {session.python}, supports [{','.join(versions)}]\"\n        )\n\n    session.install(\"jupyter\", \"nbval\", \"pyzmq\", \"pytest\")\n    if platform.system() == \"Windows\":\n        session.install(\"pywin32\")\n\n    install_hydra(session, [\"pip\", \"install\", \"-e\"])\n    args = pytest_args(\n        \"--nbval\",\n        \"-W ignore::DeprecationWarning\",\n        \"-W ignore::ResourceWarning\",\n        \"-W ignore::pytest.PytestAssertRewriteWarning\",\n        \"examples/jupyter_notebooks/compose_configs_in_notebook.ipynb\",\n    )\n    session.run(*args, silent=SILENT)\n\n    notebooks_dir = Path(\"tests/jupyter\")\n    for notebook in [\n        file for file in notebooks_dir.iterdir() if str(file).endswith(\".ipynb\")\n    ]:\n        args = pytest_args(\n            \"--nbval\",\n            \"-W ignore::DeprecationWarning\",\n            \"-W ignore::ResourceWarning\",\n            \"-W ignore::pytest.PytestAssertRewriteWarning\",\n            str(notebook),\n        )\n        args = [x for x in args if x != \"-Werror\"]\n        session.run(*args, silent=SILENT)\n\n\n@nox.session(python=PYTHON_VERSIONS)  # type: ignore\ndef benchmark(session: Session) -> None:\n    _upgrade_basic(session)\n    install_dev_deps(session)\n    install_hydra(session, INSTALL_COMMAND)\n    session.install(\"pytest\")\n    run_pytest(session, \"build_helpers\", \"tests/benchmark.py\", *session.posargs)\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.41796875,
          "content": "[tool.towncrier]\n    package = \"hydra\"\n    package_dir = \"\"\n    filename = \"NEWS.md\"\n    directory = \"news/\"\n    title_format = \"{version} ({project_date})\"\n    template = \"news/_template.rst\"\n    issue_format = \"[#{issue}](https://github.com/facebookresearch/hydra/issues/{issue})\"\n    start_string = \"<!-- TOWNCRIER -->\\n\"\n\n  [[tool.towncrier.type]]\n  directory = \"feature\"\n  name = \"Features\"\n  showcontent = true\n\n  [[tool.towncrier.type]]\n  directory = \"api_change\"\n  name = \"API Change (Renames, deprecations and removals)\"\n  showcontent = true\n\n  [[tool.towncrier.type]]\n  directory = \"bugfix\"\n  name = \"Bug Fixes\"\n  showcontent = true\n\n  [[tool.towncrier.type]]\n  directory = \"plugin\"\n  name = \"Plugins\"\n  showcontent = true\n\n  [[tool.towncrier.type]]\n  directory = \"config\"\n  name = \"Configuration structure changes\"\n  showcontent = true\n\n  [[tool.towncrier.type]]\n  directory = \"docs\"\n  name = \"Improved Documentation\"\n  showcontent = true\n\n  [[tool.towncrier.type]]\n  directory = \"maintenance\"\n  name = \"Maintenance Changes\"\n  showcontent = true\n\n[tool.black]\nline-length = 88\ntarget-version = ['py38']\ninclude = '\\.pyi?$'\nexclude = '''\n(\n  /(\n      .eggs         # exclude a few common directories in the\n    | .git          # root of the project\n    | .hg\n    | .mypy_cache\n    | hydra/grammar/gen\n    | tools/configen/example/gen\n    | .tox\n    | .nox\n    | website\n    | .venv\n    | _build\n    | dist\n    | build\n    | contrib\n  )\n)\n'''\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.8955078125,
          "content": "[pytest]\nnorecursedirs = \n  .nox                  # generated virtualenvs\n  build                 # generated build directory\n  contrib               # contributed plugins\n  website               # No python code\n  plugins               # tested separately under nox\n  examples/plugins      # tested separately under nox\n  examples              # tested separately under nox\n  tests/standalone_apps # tested separately under nox\n  tools                 # tools are tested individually\n\nfilterwarnings =\n  error\n  ; Remove when default changes\n  ignore:.*Future Hydra versions will no longer change working directory at job runtime by default.*:UserWarning\n  ; Jupyter notebook test on Windows yield warnings\n  ignore:.*Proactor event loop does not implement add_reader family of methods required for zmq.*:RuntimeWarning\n  ; Ignore deprecation warning related to pkg_resources\n  ignore:.*pkg_resources is deprecated*\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.0634765625,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\n# type: ignore\nimport pathlib\n\nimport pkg_resources\nfrom setuptools import find_namespace_packages, setup\n\nfrom build_helpers.build_helpers import (\n    ANTLRCommand,\n    BuildPyCommand,\n    CleanCommand,\n    Develop,\n    SDistCommand,\n    find_version,\n)\n\nwith pathlib.Path(\"requirements/requirements.txt\").open() as requirements_txt:\n    install_requires = [\n        str(requirement)\n        for requirement in pkg_resources.parse_requirements(requirements_txt)\n    ]\n\n\nwith open(\"README.md\") as fh:\n    LONG_DESC = fh.read()\n    setup(\n        cmdclass={\n            \"antlr\": ANTLRCommand,\n            \"clean\": CleanCommand,\n            \"sdist\": SDistCommand,\n            \"build_py\": BuildPyCommand,\n            \"develop\": Develop,\n        },\n        name=\"hydra-core\",\n        version=find_version(\"hydra\", \"__init__.py\"),\n        author=\"Omry Yadan\",\n        author_email=\"omry@fb.com\",\n        description=\"A framework for elegantly configuring complex applications\",\n        license=\"MIT\",\n        long_description=LONG_DESC,\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/facebookresearch/hydra\",\n        keywords=\"command-line configuration yaml tab-completion\",\n        packages=find_namespace_packages(include=[\"hydra\", \"hydra.*\"]),\n        include_package_data=True,\n        classifiers=[\n            \"License :: OSI Approved :: MIT License\",\n            \"Development Status :: 4 - Beta\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: 3.11\",\n            \"Operating System :: POSIX :: Linux\",\n            \"Operating System :: MacOS\",\n            \"Operating System :: Microsoft :: Windows\",\n        ],\n        install_requires=install_requires,\n        entry_points={\"pytest11\": [\"hydra_pytest = hydra.extra.pytest_plugin\"]},\n        # Install development dependencies with\n        # pip install -r requirements/dev.txt -e .\n    )\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}