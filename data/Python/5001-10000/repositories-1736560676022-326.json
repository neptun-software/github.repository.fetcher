{
  "metadata": {
    "timestamp": 1736560676022,
    "page": 326,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lllyasviel/IC-Light",
      "stars": 7300,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.01953125,
          "content": "*.safetensors\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.185546875,
          "content": "# IC-Light\n\nIC-Light is a project to manipulate the illumination of images.\n\nThe name \"IC-Light\" stands for **\"Imposing Consistent Light\"** (we will briefly describe this at the end of this page).\n\nCurrently, we release two types of models: text-conditioned relighting model and background-conditioned model. Both types take foreground images as inputs.\n\n**Note that \"iclightai dot com\" is a scam website. They have no relationship with us. Do not give scam websites money! This GitHub repo is the only official IC-Light.**\n\n# News\n\n[Alternative model](https://github.com/lllyasviel/IC-Light/discussions/109) for stronger illumination modifications.\n\nSome news about flux is [here](https://github.com/lllyasviel/IC-Light/discussions/98). (A fix [update](https://github.com/lllyasviel/IC-Light/discussions/98#discussioncomment-11370266) is added at Nov 25, more demos will be uploaded soon.)\n\n# Get Started\n\nBelow script will run the text-conditioned relighting model:\n\n    git clone https://github.com/lllyasviel/IC-Light.git\n    cd IC-Light\n    conda create -n iclight python=3.10\n    conda activate iclight\n    pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121\n    pip install -r requirements.txt\n    python gradio_demo.py\n\nOr, to use background-conditioned demo:\n\n    python gradio_demo_bg.py\n\nModel downloading is automatic.\n\nNote that the \"gradio_demo.py\" has an official [huggingFace Space here](https://huggingface.co/spaces/lllyasviel/IC-Light).\n\n# Screenshot\n\n### Text-Conditioned Model\n\n(Note that the \"Lighting Preference\" are just initial latents - eg., if the Lighting Preference is \"Left\" then initial latent is left white right black.)\n\n---\n\n**Prompt: beautiful woman, detailed face, warm atmosphere, at home, bedroom**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/87265483-aa26-4d2e-897d-b58892f5fdd7)\n\n---\n\n**Prompt: beautiful woman, detailed face, sunshine from window**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/148c4a6d-82e7-4e3a-bf44-5c9a24538afc)\n\n---\n\n**beautiful woman, detailed face, neon, Wong Kar-wai, warm**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/f53c9de2-534a-42f4-8272-6d16a021fc01)\n\n---\n\n**Prompt: beautiful woman, detailed face, sunshine, outdoor, warm atmosphere**\n\nLighting Preference: Right\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/25d6ea24-a736-4a0b-b42d-700fe8b2101e)\n\n---\n\n**Prompt: beautiful woman, detailed face, sunshine, outdoor, warm atmosphere**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/dd30387b-0490-46ee-b688-2191fb752e68)\n\n---\n\n**Prompt: beautiful woman, detailed face, sunshine from window**\n\nLighting Preference: Right\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/6c9511ca-f97f-401a-85f3-92b4442000e3)\n\n---\n\n**Prompt: beautiful woman, detailed face, shadow from window**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/e73701d5-890e-4b15-91ee-97f16ea3c450)\n\n---\n\n**Prompt: beautiful woman, detailed face, sunset over sea**\n\nLighting Preference: Right\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/ff26ac3d-1b12-4447-b51f-73f7a5122a05)\n\n---\n\n**Prompt: handsome boy, detailed face, neon light, city**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/d7795e02-46f7-444f-93e7-4d6460840437)\n\n---\n\n**Prompt: beautiful woman, detailed face, light and shadow**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/706f70a8-d1a0-4e0b-b3ac-804e8e231c0f)\n\n(beautiful woman, detailed face, soft studio lighting)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/fe0a72df-69d4-4e11-b661-fb8b84d0274d)\n\n---\n\n**Prompt: Buddha, detailed face, sci-fi RGB glowing, cyberpunk**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/68d60c68-ce23-4902-939e-11629ccaf39a)\n\n---\n\n**Prompt: Buddha, detailed face, natural lighting**\n\nLighting Preference: Left\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/1841d23d-0a0d-420b-a5ab-302da9c47c17)\n\n---\n\n**Prompt: toy, detailed face, shadow from window**\n\nLighting Preference: Bottom\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/dcb97439-ea6b-483e-8e68-cf5d320368c7)\n\n---\n\n**Prompt: toy, detailed face, sunset over sea**\n\nLighting Preference: Right\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/4f78b897-621d-4527-afa7-78d62c576100)\n\n---\n\n**Prompt: dog, magic lit, sci-fi RGB glowing, studio lighting**\n\nLighting Preference: Bottom\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/1db9cac9-8d3f-4f40-82e2-e3b0cafd8613)\n\n---\n\n**Prompt: mysteriou human, warm atmosphere, warm atmosphere, at home, bedroom**\n\nLighting Preference: Right\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/5d5aa7e5-8cbd-4e1f-9f27-2ecc3c30563a)\n\n---\n\n### Background-Conditioned Model\n\nThe background conditioned model does not require careful prompting. One can just use simple prompts like \"handsome man, cinematic lighting\".\n\n---\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/0b2a889f-682b-4393-b1ec-2cabaa182010)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/477ca348-bd47-46ff-81e6-0ffc3d05feb2)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/5bc9d8d9-02cd-442e-a75c-193f115f2ad8)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/a35e4c57-e199-40e2-893b-cb1c549612a9)\n\n---\n\nA more structured visualization:\n\n![r1](https://github.com/lllyasviel/IC-Light/assets/19834515/c1daafb5-ac8b-461c-bff2-899e4c671ba3)\n\n# Imposing Consistent Light\n\nIn HDR space, illumination has a property that all light transports are independent. \n\nAs a result, the blending of appearances of different light sources is equivalent to the appearance with mixed light sources:\n\n![cons](https://github.com/lllyasviel/IC-Light/assets/19834515/27c67787-998e-469f-862f-047344e100cd)\n\nUsing the above [light stage](https://www.pauldebevec.com/Research/LS/) as an example, the two images from the \"appearance mixture\" and \"light source mixture\" are consistent (mathematically equivalent in HDR space, ideally).\n\nWe imposed such consistency (using MLPs in latent space) when training the relighting models.\n\nAs a result, the model is able to produce highly consistent relight - **so** consistent that different relightings can even be merged as normal maps! Despite the fact that the models are latent diffusion.\n\n![r2](https://github.com/lllyasviel/IC-Light/assets/19834515/25068f6a-f945-4929-a3d6-e8a152472223)\n\nFrom left to right are inputs, model outputs relighting, devided shadow image, and merged normal maps. Note that the model is not trained with any normal map data. This normal estimation comes from the consistency of relighting.\n\nYou can reproduce this experiment using this button (it is 4x slower because it relight image 4 times)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/d9c37bf7-2136-446c-a9a5-5a341e4906de)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/fcf5dd55-0309-4e8e-9721-d55931ea77f0)\n\nBelow are bigger images (feel free to try yourself to get more results!)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/12335218-186b-4c61-b43a-79aea9df8b21)\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/2daab276-fdfa-4b0c-abcb-e591f575598a)\n\nFor reference, [geowizard](https://fuxiao0719.github.io/projects/geowizard/) (geowizard is a really great work!):\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/4ba1a96d-e218-42ab-83ae-a7918d56ee5f)\n\nAnd, [switchlight](https://arxiv.org/pdf/2402.18848) (switchlight is another great work!):\n\n![image](https://github.com/lllyasviel/IC-Light/assets/19834515/fbdd961f-0b26-45d2-802e-ffd734affab8)\n\n# Model Notes\n\n* **iclight_sd15_fc.safetensors** - The default relighting model, conditioned on text and foreground. You can use initial latent to influence the relighting.\n\n* **iclight_sd15_fcon.safetensors** - Same as \"iclight_sd15_fc.safetensors\" but trained with offset noise. Note that the default \"iclight_sd15_fc.safetensors\" outperform this model slightly in a user study. And this is the reason why the default model is the model without offset noise.\n\n* **iclight_sd15_fbc.safetensors** - Relighting model conditioned with text, foreground, and background.\n\nAlso, note that the original [BRIA RMBG 1.4](https://huggingface.co/briaai/RMBG-1.4) is for non-commercial use. If you use IC-Light in commercial projects, replace it with other background replacer like [BiRefNet](https://github.com/ZhengPeng7/BiRefNet).\n\n# Cite\n\n    @Misc{iclight,\n      author = {Lvmin Zhang and Anyi Rao and Maneesh Agrawala},\n      title  = {IC-Light GitHub Page},\n      year   = {2024},\n    }\n\n# Related Work\n\nAlso read ...\n\n[Total Relighting: Learning to Relight Portraits for Background Replacement](https://augmentedperception.github.io/total_relighting/)\n\n[Relightful Harmonization: Lighting-aware Portrait Background Replacement](https://arxiv.org/abs/2312.06886)\n\n[SwitchLight: Co-design of Physics-driven Architecture and Pre-training Framework for Human Portrait Relighting](https://arxiv.org/pdf/2402.18848)\n"
        },
        {
          "name": "briarmbg.py",
          "type": "blob",
          "size": 13.1171875,
          "content": "# RMBG1.4 (diffusers implementation)\n# Found on huggingface space of several projects\n# Not sure which project is the source of this file\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom huggingface_hub import PyTorchModelHubMixin\n\n\nclass REBNCONV(nn.Module):\n    def __init__(self, in_ch=3, out_ch=3, dirate=1, stride=1):\n        super(REBNCONV, self).__init__()\n\n        self.conv_s1 = nn.Conv2d(\n            in_ch, out_ch, 3, padding=1 * dirate, dilation=1 * dirate, stride=stride\n        )\n        self.bn_s1 = nn.BatchNorm2d(out_ch)\n        self.relu_s1 = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        hx = x\n        xout = self.relu_s1(self.bn_s1(self.conv_s1(hx)))\n\n        return xout\n\n\ndef _upsample_like(src, tar):\n    src = F.interpolate(src, size=tar.shape[2:], mode=\"bilinear\")\n    return src\n\n\n### RSU-7 ###\nclass RSU7(nn.Module):\n    def __init__(self, in_ch=3, mid_ch=12, out_ch=3, img_size=512):\n        super(RSU7, self).__init__()\n\n        self.in_ch = in_ch\n        self.mid_ch = mid_ch\n        self.out_ch = out_ch\n\n        self.rebnconvin = REBNCONV(in_ch, out_ch, dirate=1)  ## 1 -> 1/2\n\n        self.rebnconv1 = REBNCONV(out_ch, mid_ch, dirate=1)\n        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv2 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv3 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv4 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool4 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv5 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool5 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv6 = REBNCONV(mid_ch, mid_ch, dirate=1)\n\n        self.rebnconv7 = REBNCONV(mid_ch, mid_ch, dirate=2)\n\n        self.rebnconv6d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv5d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv4d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv3d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv2d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv1d = REBNCONV(mid_ch * 2, out_ch, dirate=1)\n\n    def forward(self, x):\n        b, c, h, w = x.shape\n\n        hx = x\n        hxin = self.rebnconvin(hx)\n\n        hx1 = self.rebnconv1(hxin)\n        hx = self.pool1(hx1)\n\n        hx2 = self.rebnconv2(hx)\n        hx = self.pool2(hx2)\n\n        hx3 = self.rebnconv3(hx)\n        hx = self.pool3(hx3)\n\n        hx4 = self.rebnconv4(hx)\n        hx = self.pool4(hx4)\n\n        hx5 = self.rebnconv5(hx)\n        hx = self.pool5(hx5)\n\n        hx6 = self.rebnconv6(hx)\n\n        hx7 = self.rebnconv7(hx6)\n\n        hx6d = self.rebnconv6d(torch.cat((hx7, hx6), 1))\n        hx6dup = _upsample_like(hx6d, hx5)\n\n        hx5d = self.rebnconv5d(torch.cat((hx6dup, hx5), 1))\n        hx5dup = _upsample_like(hx5d, hx4)\n\n        hx4d = self.rebnconv4d(torch.cat((hx5dup, hx4), 1))\n        hx4dup = _upsample_like(hx4d, hx3)\n\n        hx3d = self.rebnconv3d(torch.cat((hx4dup, hx3), 1))\n        hx3dup = _upsample_like(hx3d, hx2)\n\n        hx2d = self.rebnconv2d(torch.cat((hx3dup, hx2), 1))\n        hx2dup = _upsample_like(hx2d, hx1)\n\n        hx1d = self.rebnconv1d(torch.cat((hx2dup, hx1), 1))\n\n        return hx1d + hxin\n\n\n### RSU-6 ###\nclass RSU6(nn.Module):\n    def __init__(self, in_ch=3, mid_ch=12, out_ch=3):\n        super(RSU6, self).__init__()\n\n        self.rebnconvin = REBNCONV(in_ch, out_ch, dirate=1)\n\n        self.rebnconv1 = REBNCONV(out_ch, mid_ch, dirate=1)\n        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv2 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv3 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv4 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool4 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv5 = REBNCONV(mid_ch, mid_ch, dirate=1)\n\n        self.rebnconv6 = REBNCONV(mid_ch, mid_ch, dirate=2)\n\n        self.rebnconv5d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv4d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv3d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv2d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv1d = REBNCONV(mid_ch * 2, out_ch, dirate=1)\n\n    def forward(self, x):\n        hx = x\n\n        hxin = self.rebnconvin(hx)\n\n        hx1 = self.rebnconv1(hxin)\n        hx = self.pool1(hx1)\n\n        hx2 = self.rebnconv2(hx)\n        hx = self.pool2(hx2)\n\n        hx3 = self.rebnconv3(hx)\n        hx = self.pool3(hx3)\n\n        hx4 = self.rebnconv4(hx)\n        hx = self.pool4(hx4)\n\n        hx5 = self.rebnconv5(hx)\n\n        hx6 = self.rebnconv6(hx5)\n\n        hx5d = self.rebnconv5d(torch.cat((hx6, hx5), 1))\n        hx5dup = _upsample_like(hx5d, hx4)\n\n        hx4d = self.rebnconv4d(torch.cat((hx5dup, hx4), 1))\n        hx4dup = _upsample_like(hx4d, hx3)\n\n        hx3d = self.rebnconv3d(torch.cat((hx4dup, hx3), 1))\n        hx3dup = _upsample_like(hx3d, hx2)\n\n        hx2d = self.rebnconv2d(torch.cat((hx3dup, hx2), 1))\n        hx2dup = _upsample_like(hx2d, hx1)\n\n        hx1d = self.rebnconv1d(torch.cat((hx2dup, hx1), 1))\n\n        return hx1d + hxin\n\n\n### RSU-5 ###\nclass RSU5(nn.Module):\n    def __init__(self, in_ch=3, mid_ch=12, out_ch=3):\n        super(RSU5, self).__init__()\n\n        self.rebnconvin = REBNCONV(in_ch, out_ch, dirate=1)\n\n        self.rebnconv1 = REBNCONV(out_ch, mid_ch, dirate=1)\n        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv2 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv3 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv4 = REBNCONV(mid_ch, mid_ch, dirate=1)\n\n        self.rebnconv5 = REBNCONV(mid_ch, mid_ch, dirate=2)\n\n        self.rebnconv4d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv3d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv2d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv1d = REBNCONV(mid_ch * 2, out_ch, dirate=1)\n\n    def forward(self, x):\n        hx = x\n\n        hxin = self.rebnconvin(hx)\n\n        hx1 = self.rebnconv1(hxin)\n        hx = self.pool1(hx1)\n\n        hx2 = self.rebnconv2(hx)\n        hx = self.pool2(hx2)\n\n        hx3 = self.rebnconv3(hx)\n        hx = self.pool3(hx3)\n\n        hx4 = self.rebnconv4(hx)\n\n        hx5 = self.rebnconv5(hx4)\n\n        hx4d = self.rebnconv4d(torch.cat((hx5, hx4), 1))\n        hx4dup = _upsample_like(hx4d, hx3)\n\n        hx3d = self.rebnconv3d(torch.cat((hx4dup, hx3), 1))\n        hx3dup = _upsample_like(hx3d, hx2)\n\n        hx2d = self.rebnconv2d(torch.cat((hx3dup, hx2), 1))\n        hx2dup = _upsample_like(hx2d, hx1)\n\n        hx1d = self.rebnconv1d(torch.cat((hx2dup, hx1), 1))\n\n        return hx1d + hxin\n\n\n### RSU-4 ###\nclass RSU4(nn.Module):\n    def __init__(self, in_ch=3, mid_ch=12, out_ch=3):\n        super(RSU4, self).__init__()\n\n        self.rebnconvin = REBNCONV(in_ch, out_ch, dirate=1)\n\n        self.rebnconv1 = REBNCONV(out_ch, mid_ch, dirate=1)\n        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv2 = REBNCONV(mid_ch, mid_ch, dirate=1)\n        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.rebnconv3 = REBNCONV(mid_ch, mid_ch, dirate=1)\n\n        self.rebnconv4 = REBNCONV(mid_ch, mid_ch, dirate=2)\n\n        self.rebnconv3d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv2d = REBNCONV(mid_ch * 2, mid_ch, dirate=1)\n        self.rebnconv1d = REBNCONV(mid_ch * 2, out_ch, dirate=1)\n\n    def forward(self, x):\n        hx = x\n\n        hxin = self.rebnconvin(hx)\n\n        hx1 = self.rebnconv1(hxin)\n        hx = self.pool1(hx1)\n\n        hx2 = self.rebnconv2(hx)\n        hx = self.pool2(hx2)\n\n        hx3 = self.rebnconv3(hx)\n\n        hx4 = self.rebnconv4(hx3)\n\n        hx3d = self.rebnconv3d(torch.cat((hx4, hx3), 1))\n        hx3dup = _upsample_like(hx3d, hx2)\n\n        hx2d = self.rebnconv2d(torch.cat((hx3dup, hx2), 1))\n        hx2dup = _upsample_like(hx2d, hx1)\n\n        hx1d = self.rebnconv1d(torch.cat((hx2dup, hx1), 1))\n\n        return hx1d + hxin\n\n\n### RSU-4F ###\nclass RSU4F(nn.Module):\n    def __init__(self, in_ch=3, mid_ch=12, out_ch=3):\n        super(RSU4F, self).__init__()\n\n        self.rebnconvin = REBNCONV(in_ch, out_ch, dirate=1)\n\n        self.rebnconv1 = REBNCONV(out_ch, mid_ch, dirate=1)\n        self.rebnconv2 = REBNCONV(mid_ch, mid_ch, dirate=2)\n        self.rebnconv3 = REBNCONV(mid_ch, mid_ch, dirate=4)\n\n        self.rebnconv4 = REBNCONV(mid_ch, mid_ch, dirate=8)\n\n        self.rebnconv3d = REBNCONV(mid_ch * 2, mid_ch, dirate=4)\n        self.rebnconv2d = REBNCONV(mid_ch * 2, mid_ch, dirate=2)\n        self.rebnconv1d = REBNCONV(mid_ch * 2, out_ch, dirate=1)\n\n    def forward(self, x):\n        hx = x\n\n        hxin = self.rebnconvin(hx)\n\n        hx1 = self.rebnconv1(hxin)\n        hx2 = self.rebnconv2(hx1)\n        hx3 = self.rebnconv3(hx2)\n\n        hx4 = self.rebnconv4(hx3)\n\n        hx3d = self.rebnconv3d(torch.cat((hx4, hx3), 1))\n        hx2d = self.rebnconv2d(torch.cat((hx3d, hx2), 1))\n        hx1d = self.rebnconv1d(torch.cat((hx2d, hx1), 1))\n\n        return hx1d + hxin\n\n\nclass myrebnconv(nn.Module):\n    def __init__(\n        self,\n        in_ch=3,\n        out_ch=1,\n        kernel_size=3,\n        stride=1,\n        padding=1,\n        dilation=1,\n        groups=1,\n    ):\n        super(myrebnconv, self).__init__()\n\n        self.conv = nn.Conv2d(\n            in_ch,\n            out_ch,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n            dilation=dilation,\n            groups=groups,\n        )\n        self.bn = nn.BatchNorm2d(out_ch)\n        self.rl = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        return self.rl(self.bn(self.conv(x)))\n\n\nclass BriaRMBG(nn.Module, PyTorchModelHubMixin):\n    def __init__(self, config: dict = {\"in_ch\": 3, \"out_ch\": 1}):\n        super(BriaRMBG, self).__init__()\n        in_ch = config[\"in_ch\"]\n        out_ch = config[\"out_ch\"]\n        self.conv_in = nn.Conv2d(in_ch, 64, 3, stride=2, padding=1)\n        self.pool_in = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.stage1 = RSU7(64, 32, 64)\n        self.pool12 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.stage2 = RSU6(64, 32, 128)\n        self.pool23 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.stage3 = RSU5(128, 64, 256)\n        self.pool34 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.stage4 = RSU4(256, 128, 512)\n        self.pool45 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.stage5 = RSU4F(512, 256, 512)\n        self.pool56 = nn.MaxPool2d(2, stride=2, ceil_mode=True)\n\n        self.stage6 = RSU4F(512, 256, 512)\n\n        # decoder\n        self.stage5d = RSU4F(1024, 256, 512)\n        self.stage4d = RSU4(1024, 128, 256)\n        self.stage3d = RSU5(512, 64, 128)\n        self.stage2d = RSU6(256, 32, 64)\n        self.stage1d = RSU7(128, 16, 64)\n\n        self.side1 = nn.Conv2d(64, out_ch, 3, padding=1)\n        self.side2 = nn.Conv2d(64, out_ch, 3, padding=1)\n        self.side3 = nn.Conv2d(128, out_ch, 3, padding=1)\n        self.side4 = nn.Conv2d(256, out_ch, 3, padding=1)\n        self.side5 = nn.Conv2d(512, out_ch, 3, padding=1)\n        self.side6 = nn.Conv2d(512, out_ch, 3, padding=1)\n\n        # self.outconv = nn.Conv2d(6*out_ch,out_ch,1)\n\n    def forward(self, x):\n        hx = x\n\n        hxin = self.conv_in(hx)\n        # hx = self.pool_in(hxin)\n\n        # stage 1\n        hx1 = self.stage1(hxin)\n        hx = self.pool12(hx1)\n\n        # stage 2\n        hx2 = self.stage2(hx)\n        hx = self.pool23(hx2)\n\n        # stage 3\n        hx3 = self.stage3(hx)\n        hx = self.pool34(hx3)\n\n        # stage 4\n        hx4 = self.stage4(hx)\n        hx = self.pool45(hx4)\n\n        # stage 5\n        hx5 = self.stage5(hx)\n        hx = self.pool56(hx5)\n\n        # stage 6\n        hx6 = self.stage6(hx)\n        hx6up = _upsample_like(hx6, hx5)\n\n        # -------------------- decoder --------------------\n        hx5d = self.stage5d(torch.cat((hx6up, hx5), 1))\n        hx5dup = _upsample_like(hx5d, hx4)\n\n        hx4d = self.stage4d(torch.cat((hx5dup, hx4), 1))\n        hx4dup = _upsample_like(hx4d, hx3)\n\n        hx3d = self.stage3d(torch.cat((hx4dup, hx3), 1))\n        hx3dup = _upsample_like(hx3d, hx2)\n\n        hx2d = self.stage2d(torch.cat((hx3dup, hx2), 1))\n        hx2dup = _upsample_like(hx2d, hx1)\n\n        hx1d = self.stage1d(torch.cat((hx2dup, hx1), 1))\n\n        # side output\n        d1 = self.side1(hx1d)\n        d1 = _upsample_like(d1, x)\n\n        d2 = self.side2(hx2d)\n        d2 = _upsample_like(d2, x)\n\n        d3 = self.side3(hx3d)\n        d3 = _upsample_like(d3, x)\n\n        d4 = self.side4(hx4d)\n        d4 = _upsample_like(d4, x)\n\n        d5 = self.side5(hx5d)\n        d5 = _upsample_like(d5, x)\n\n        d6 = self.side6(hx6)\n        d6 = _upsample_like(d6, x)\n\n        return [\n            F.sigmoid(d1),\n            F.sigmoid(d2),\n            F.sigmoid(d3),\n            F.sigmoid(d4),\n            F.sigmoid(d5),\n            F.sigmoid(d6),\n        ], [hx1d, hx2d, hx3d, hx4d, hx5d, hx6]\n"
        },
        {
          "name": "db_examples.py",
          "type": "blob",
          "size": 4.4150390625,
          "content": "foreground_conditioned_examples = [\n    [\n        \"imgs/i1.webp\",\n        \"beautiful woman, detailed face, sunshine, outdoor, warm atmosphere\",\n        \"Right Light\",\n        512,\n        960,\n        12345,\n        \"imgs/o1.png\",\n    ],\n    [\n        \"imgs/i1.webp\",\n        \"beautiful woman, detailed face, sunshine, outdoor, warm atmosphere\",\n        \"Left Light\",\n        512,\n        960,\n        50,\n        \"imgs/o2.png\",\n    ],\n    [\n        \"imgs/i3.png\",\n        \"beautiful woman, detailed face, neon, Wong Kar-wai, warm\",\n        \"Left Light\",\n        512,\n        768,\n        12345,\n        \"imgs/o3.png\",\n    ],\n    [\n        \"imgs/i3.png\",\n        \"beautiful woman, detailed face, sunshine from window\",\n        \"Left Light\",\n        512,\n        768,\n        12345,\n        \"imgs/o4.png\",\n    ],\n    [\n        \"imgs/i5.png\",\n        \"beautiful woman, detailed face, warm atmosphere, at home, bedroom\",\n        \"Left Light\",\n        512,\n        768,\n        123,\n        \"imgs/o5.png\",\n    ],\n    [\n        \"imgs/i6.jpg\",\n        \"beautiful woman, detailed face, sunshine from window\",\n        \"Right Light\",\n        512,\n        768,\n        42,\n        \"imgs/o6.png\",\n    ],\n    [\n        \"imgs/i7.jpg\",\n        \"beautiful woman, detailed face, shadow from window\",\n        \"Left Light\",\n        512,\n        768,\n        8888,\n        \"imgs/o7.png\",\n    ],\n    [\n        \"imgs/i8.webp\",\n        \"beautiful woman, detailed face, sunset over sea\",\n        \"Right Light\",\n        512,\n        640,\n        42,\n        \"imgs/o8.png\",\n    ],\n    [\n        \"imgs/i9.png\",\n        \"handsome boy, detailed face, neon light, city\",\n        \"Left Light\",\n        512,\n        640,\n        12345,\n        \"imgs/o9.png\",\n    ],\n    [\n        \"imgs/i10.png\",\n        \"beautiful woman, detailed face, light and shadow\",\n        \"Left Light\",\n        512,\n        960,\n        8888,\n        \"imgs/o10.png\",\n    ],\n    [\n        \"imgs/i11.png\",\n        \"Buddha, detailed face, sci-fi RGB glowing, cyberpunk\",\n        \"Left Light\",\n        512,\n        768,\n        8888,\n        \"imgs/o11.png\",\n    ],\n    [\n        \"imgs/i11.png\",\n        \"Buddha, detailed face, natural lighting\",\n        \"Left Light\",\n        512,\n        768,\n        12345,\n        \"imgs/o12.png\",\n    ],\n    [\n        \"imgs/i13.png\",\n        \"toy, detailed face, shadow from window\",\n        \"Bottom Light\",\n        512,\n        704,\n        12345,\n        \"imgs/o13.png\",\n    ],\n    [\n        \"imgs/i14.png\",\n        \"toy, detailed face, sunset over sea\",\n        \"Right Light\",\n        512,\n        704,\n        100,\n        \"imgs/o14.png\",\n    ],\n    [\n        \"imgs/i15.png\",\n        \"dog, magic lit, sci-fi RGB glowing, studio lighting\",\n        \"Bottom Light\",\n        512,\n        768,\n        12345,\n        \"imgs/o15.png\",\n    ],\n    [\n        \"imgs/i16.png\",\n        \"mysteriou human, warm atmosphere, warm atmosphere, at home, bedroom\",\n        \"Right Light\",\n        512,\n        768,\n        100,\n        \"imgs/o16.png\",\n    ],\n]\n\nbg_samples = [\n    'imgs/bgs/1.webp',\n    'imgs/bgs/2.webp',\n    'imgs/bgs/3.webp',\n    'imgs/bgs/4.webp',\n    'imgs/bgs/5.webp',\n    'imgs/bgs/6.webp',\n    'imgs/bgs/7.webp',\n    'imgs/bgs/8.webp',\n    'imgs/bgs/9.webp',\n    'imgs/bgs/10.webp',\n    'imgs/bgs/11.png',\n    'imgs/bgs/12.png',\n    'imgs/bgs/13.png',\n    'imgs/bgs/14.png',\n    'imgs/bgs/15.png',\n]\n\nbackground_conditioned_examples = [\n    [\n        \"imgs/alter/i3.png\",\n        \"imgs/bgs/7.webp\",\n        \"beautiful woman, cinematic lighting\",\n        \"Use Background Image\",\n        512,\n        768,\n        12345,\n        \"imgs/alter/o1.png\",\n    ],\n    [\n        \"imgs/alter/i2.png\",\n        \"imgs/bgs/11.png\",\n        \"statue of an angel, natural lighting\",\n        \"Use Flipped Background Image\",\n        512,\n        768,\n        12345,\n        \"imgs/alter/o2.png\",\n    ],\n    [\n        \"imgs/alter/i1.jpeg\",\n        \"imgs/bgs/2.webp\",\n        \"beautiful woman, cinematic lighting\",\n        \"Use Background Image\",\n        512,\n        768,\n        12345,\n        \"imgs/alter/o3.png\",\n    ],\n    [\n        \"imgs/alter/i1.jpeg\",\n        \"imgs/bgs/3.webp\",\n        \"beautiful woman, cinematic lighting\",\n        \"Use Background Image\",\n        512,\n        768,\n        12345,\n        \"imgs/alter/o4.png\",\n    ],\n    [\n        \"imgs/alter/i6.webp\",\n        \"imgs/bgs/15.png\",\n        \"handsome man, cinematic lighting\",\n        \"Use Background Image\",\n        512,\n        768,\n        12345,\n        \"imgs/alter/o5.png\",\n    ],\n]\n"
        },
        {
          "name": "gradio_demo.py",
          "type": "blob",
          "size": 16.2021484375,
          "content": "import os\nimport math\nimport gradio as gr\nimport numpy as np\nimport torch\nimport safetensors.torch as sf\nimport db_examples\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, StableDiffusionImg2ImgPipeline\nfrom diffusers import AutoencoderKL, UNet2DConditionModel, DDIMScheduler, EulerAncestralDiscreteScheduler, DPMSolverMultistepScheduler\nfrom diffusers.models.attention_processor import AttnProcessor2_0\nfrom transformers import CLIPTextModel, CLIPTokenizer\nfrom briarmbg import BriaRMBG\nfrom enum import Enum\nfrom torch.hub import download_url_to_file\n\n\n# 'stablediffusionapi/realistic-vision-v51'\n# 'runwayml/stable-diffusion-v1-5'\nsd15_name = 'stablediffusionapi/realistic-vision-v51'\ntokenizer = CLIPTokenizer.from_pretrained(sd15_name, subfolder=\"tokenizer\")\ntext_encoder = CLIPTextModel.from_pretrained(sd15_name, subfolder=\"text_encoder\")\nvae = AutoencoderKL.from_pretrained(sd15_name, subfolder=\"vae\")\nunet = UNet2DConditionModel.from_pretrained(sd15_name, subfolder=\"unet\")\nrmbg = BriaRMBG.from_pretrained(\"briaai/RMBG-1.4\")\n\n# Change UNet\n\nwith torch.no_grad():\n    new_conv_in = torch.nn.Conv2d(8, unet.conv_in.out_channels, unet.conv_in.kernel_size, unet.conv_in.stride, unet.conv_in.padding)\n    new_conv_in.weight.zero_()\n    new_conv_in.weight[:, :4, :, :].copy_(unet.conv_in.weight)\n    new_conv_in.bias = unet.conv_in.bias\n    unet.conv_in = new_conv_in\n\nunet_original_forward = unet.forward\n\n\ndef hooked_unet_forward(sample, timestep, encoder_hidden_states, **kwargs):\n    c_concat = kwargs['cross_attention_kwargs']['concat_conds'].to(sample)\n    c_concat = torch.cat([c_concat] * (sample.shape[0] // c_concat.shape[0]), dim=0)\n    new_sample = torch.cat([sample, c_concat], dim=1)\n    kwargs['cross_attention_kwargs'] = {}\n    return unet_original_forward(new_sample, timestep, encoder_hidden_states, **kwargs)\n\n\nunet.forward = hooked_unet_forward\n\n# Load\n\nmodel_path = './models/iclight_sd15_fc.safetensors'\n\nif not os.path.exists(model_path):\n    download_url_to_file(url='https://huggingface.co/lllyasviel/ic-light/resolve/main/iclight_sd15_fc.safetensors', dst=model_path)\n\nsd_offset = sf.load_file(model_path)\nsd_origin = unet.state_dict()\nkeys = sd_origin.keys()\nsd_merged = {k: sd_origin[k] + sd_offset[k] for k in sd_origin.keys()}\nunet.load_state_dict(sd_merged, strict=True)\ndel sd_offset, sd_origin, sd_merged, keys\n\n# Device\n\ndevice = torch.device('cuda')\ntext_encoder = text_encoder.to(device=device, dtype=torch.float16)\nvae = vae.to(device=device, dtype=torch.bfloat16)\nunet = unet.to(device=device, dtype=torch.float16)\nrmbg = rmbg.to(device=device, dtype=torch.float32)\n\n# SDP\n\nunet.set_attn_processor(AttnProcessor2_0())\nvae.set_attn_processor(AttnProcessor2_0())\n\n# Samplers\n\nddim_scheduler = DDIMScheduler(\n    num_train_timesteps=1000,\n    beta_start=0.00085,\n    beta_end=0.012,\n    beta_schedule=\"scaled_linear\",\n    clip_sample=False,\n    set_alpha_to_one=False,\n    steps_offset=1,\n)\n\neuler_a_scheduler = EulerAncestralDiscreteScheduler(\n    num_train_timesteps=1000,\n    beta_start=0.00085,\n    beta_end=0.012,\n    steps_offset=1\n)\n\ndpmpp_2m_sde_karras_scheduler = DPMSolverMultistepScheduler(\n    num_train_timesteps=1000,\n    beta_start=0.00085,\n    beta_end=0.012,\n    algorithm_type=\"sde-dpmsolver++\",\n    use_karras_sigmas=True,\n    steps_offset=1\n)\n\n# Pipelines\n\nt2i_pipe = StableDiffusionPipeline(\n    vae=vae,\n    text_encoder=text_encoder,\n    tokenizer=tokenizer,\n    unet=unet,\n    scheduler=dpmpp_2m_sde_karras_scheduler,\n    safety_checker=None,\n    requires_safety_checker=False,\n    feature_extractor=None,\n    image_encoder=None\n)\n\ni2i_pipe = StableDiffusionImg2ImgPipeline(\n    vae=vae,\n    text_encoder=text_encoder,\n    tokenizer=tokenizer,\n    unet=unet,\n    scheduler=dpmpp_2m_sde_karras_scheduler,\n    safety_checker=None,\n    requires_safety_checker=False,\n    feature_extractor=None,\n    image_encoder=None\n)\n\n\n@torch.inference_mode()\ndef encode_prompt_inner(txt: str):\n    max_length = tokenizer.model_max_length\n    chunk_length = tokenizer.model_max_length - 2\n    id_start = tokenizer.bos_token_id\n    id_end = tokenizer.eos_token_id\n    id_pad = id_end\n\n    def pad(x, p, i):\n        return x[:i] if len(x) >= i else x + [p] * (i - len(x))\n\n    tokens = tokenizer(txt, truncation=False, add_special_tokens=False)[\"input_ids\"]\n    chunks = [[id_start] + tokens[i: i + chunk_length] + [id_end] for i in range(0, len(tokens), chunk_length)]\n    chunks = [pad(ck, id_pad, max_length) for ck in chunks]\n\n    token_ids = torch.tensor(chunks).to(device=device, dtype=torch.int64)\n    conds = text_encoder(token_ids).last_hidden_state\n\n    return conds\n\n\n@torch.inference_mode()\ndef encode_prompt_pair(positive_prompt, negative_prompt):\n    c = encode_prompt_inner(positive_prompt)\n    uc = encode_prompt_inner(negative_prompt)\n\n    c_len = float(len(c))\n    uc_len = float(len(uc))\n    max_count = max(c_len, uc_len)\n    c_repeat = int(math.ceil(max_count / c_len))\n    uc_repeat = int(math.ceil(max_count / uc_len))\n    max_chunk = max(len(c), len(uc))\n\n    c = torch.cat([c] * c_repeat, dim=0)[:max_chunk]\n    uc = torch.cat([uc] * uc_repeat, dim=0)[:max_chunk]\n\n    c = torch.cat([p[None, ...] for p in c], dim=1)\n    uc = torch.cat([p[None, ...] for p in uc], dim=1)\n\n    return c, uc\n\n\n@torch.inference_mode()\ndef pytorch2numpy(imgs, quant=True):\n    results = []\n    for x in imgs:\n        y = x.movedim(0, -1)\n\n        if quant:\n            y = y * 127.5 + 127.5\n            y = y.detach().float().cpu().numpy().clip(0, 255).astype(np.uint8)\n        else:\n            y = y * 0.5 + 0.5\n            y = y.detach().float().cpu().numpy().clip(0, 1).astype(np.float32)\n\n        results.append(y)\n    return results\n\n\n@torch.inference_mode()\ndef numpy2pytorch(imgs):\n    h = torch.from_numpy(np.stack(imgs, axis=0)).float() / 127.0 - 1.0  # so that 127 must be strictly 0.0\n    h = h.movedim(-1, 1)\n    return h\n\n\ndef resize_and_center_crop(image, target_width, target_height):\n    pil_image = Image.fromarray(image)\n    original_width, original_height = pil_image.size\n    scale_factor = max(target_width / original_width, target_height / original_height)\n    resized_width = int(round(original_width * scale_factor))\n    resized_height = int(round(original_height * scale_factor))\n    resized_image = pil_image.resize((resized_width, resized_height), Image.LANCZOS)\n    left = (resized_width - target_width) / 2\n    top = (resized_height - target_height) / 2\n    right = (resized_width + target_width) / 2\n    bottom = (resized_height + target_height) / 2\n    cropped_image = resized_image.crop((left, top, right, bottom))\n    return np.array(cropped_image)\n\n\ndef resize_without_crop(image, target_width, target_height):\n    pil_image = Image.fromarray(image)\n    resized_image = pil_image.resize((target_width, target_height), Image.LANCZOS)\n    return np.array(resized_image)\n\n\n@torch.inference_mode()\ndef run_rmbg(img, sigma=0.0):\n    H, W, C = img.shape\n    assert C == 3\n    k = (256.0 / float(H * W)) ** 0.5\n    feed = resize_without_crop(img, int(64 * round(W * k)), int(64 * round(H * k)))\n    feed = numpy2pytorch([feed]).to(device=device, dtype=torch.float32)\n    alpha = rmbg(feed)[0][0]\n    alpha = torch.nn.functional.interpolate(alpha, size=(H, W), mode=\"bilinear\")\n    alpha = alpha.movedim(1, -1)[0]\n    alpha = alpha.detach().float().cpu().numpy().clip(0, 1)\n    result = 127 + (img.astype(np.float32) - 127 + sigma) * alpha\n    return result.clip(0, 255).astype(np.uint8), alpha\n\n\n@torch.inference_mode()\ndef process(input_fg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, lowres_denoise, bg_source):\n    bg_source = BGSource(bg_source)\n    input_bg = None\n\n    if bg_source == BGSource.NONE:\n        pass\n    elif bg_source == BGSource.LEFT:\n        gradient = np.linspace(255, 0, image_width)\n        image = np.tile(gradient, (image_height, 1))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    elif bg_source == BGSource.RIGHT:\n        gradient = np.linspace(0, 255, image_width)\n        image = np.tile(gradient, (image_height, 1))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    elif bg_source == BGSource.TOP:\n        gradient = np.linspace(255, 0, image_height)[:, None]\n        image = np.tile(gradient, (1, image_width))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    elif bg_source == BGSource.BOTTOM:\n        gradient = np.linspace(0, 255, image_height)[:, None]\n        image = np.tile(gradient, (1, image_width))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    else:\n        raise 'Wrong initial latent!'\n\n    rng = torch.Generator(device=device).manual_seed(int(seed))\n\n    fg = resize_and_center_crop(input_fg, image_width, image_height)\n\n    concat_conds = numpy2pytorch([fg]).to(device=vae.device, dtype=vae.dtype)\n    concat_conds = vae.encode(concat_conds).latent_dist.mode() * vae.config.scaling_factor\n\n    conds, unconds = encode_prompt_pair(positive_prompt=prompt + ', ' + a_prompt, negative_prompt=n_prompt)\n\n    if input_bg is None:\n        latents = t2i_pipe(\n            prompt_embeds=conds,\n            negative_prompt_embeds=unconds,\n            width=image_width,\n            height=image_height,\n            num_inference_steps=steps,\n            num_images_per_prompt=num_samples,\n            generator=rng,\n            output_type='latent',\n            guidance_scale=cfg,\n            cross_attention_kwargs={'concat_conds': concat_conds},\n        ).images.to(vae.dtype) / vae.config.scaling_factor\n    else:\n        bg = resize_and_center_crop(input_bg, image_width, image_height)\n        bg_latent = numpy2pytorch([bg]).to(device=vae.device, dtype=vae.dtype)\n        bg_latent = vae.encode(bg_latent).latent_dist.mode() * vae.config.scaling_factor\n        latents = i2i_pipe(\n            image=bg_latent,\n            strength=lowres_denoise,\n            prompt_embeds=conds,\n            negative_prompt_embeds=unconds,\n            width=image_width,\n            height=image_height,\n            num_inference_steps=int(round(steps / lowres_denoise)),\n            num_images_per_prompt=num_samples,\n            generator=rng,\n            output_type='latent',\n            guidance_scale=cfg,\n            cross_attention_kwargs={'concat_conds': concat_conds},\n        ).images.to(vae.dtype) / vae.config.scaling_factor\n\n    pixels = vae.decode(latents).sample\n    pixels = pytorch2numpy(pixels)\n    pixels = [resize_without_crop(\n        image=p,\n        target_width=int(round(image_width * highres_scale / 64.0) * 64),\n        target_height=int(round(image_height * highres_scale / 64.0) * 64))\n    for p in pixels]\n\n    pixels = numpy2pytorch(pixels).to(device=vae.device, dtype=vae.dtype)\n    latents = vae.encode(pixels).latent_dist.mode() * vae.config.scaling_factor\n    latents = latents.to(device=unet.device, dtype=unet.dtype)\n\n    image_height, image_width = latents.shape[2] * 8, latents.shape[3] * 8\n\n    fg = resize_and_center_crop(input_fg, image_width, image_height)\n    concat_conds = numpy2pytorch([fg]).to(device=vae.device, dtype=vae.dtype)\n    concat_conds = vae.encode(concat_conds).latent_dist.mode() * vae.config.scaling_factor\n\n    latents = i2i_pipe(\n        image=latents,\n        strength=highres_denoise,\n        prompt_embeds=conds,\n        negative_prompt_embeds=unconds,\n        width=image_width,\n        height=image_height,\n        num_inference_steps=int(round(steps / highres_denoise)),\n        num_images_per_prompt=num_samples,\n        generator=rng,\n        output_type='latent',\n        guidance_scale=cfg,\n        cross_attention_kwargs={'concat_conds': concat_conds},\n    ).images.to(vae.dtype) / vae.config.scaling_factor\n\n    pixels = vae.decode(latents).sample\n\n    return pytorch2numpy(pixels)\n\n\n@torch.inference_mode()\ndef process_relight(input_fg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, lowres_denoise, bg_source):\n    input_fg, matting = run_rmbg(input_fg)\n    results = process(input_fg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, lowres_denoise, bg_source)\n    return input_fg, results\n\n\nquick_prompts = [\n    'sunshine from window',\n    'neon light, city',\n    'sunset over sea',\n    'golden time',\n    'sci-fi RGB glowing, cyberpunk',\n    'natural lighting',\n    'warm atmosphere, at home, bedroom',\n    'magic lit',\n    'evil, gothic, Yharnam',\n    'light and shadow',\n    'shadow from window',\n    'soft studio lighting',\n    'home atmosphere, cozy bedroom illumination',\n    'neon, Wong Kar-wai, warm'\n]\nquick_prompts = [[x] for x in quick_prompts]\n\n\nquick_subjects = [\n    'beautiful woman, detailed face',\n    'handsome man, detailed face',\n]\nquick_subjects = [[x] for x in quick_subjects]\n\n\nclass BGSource(Enum):\n    NONE = \"None\"\n    LEFT = \"Left Light\"\n    RIGHT = \"Right Light\"\n    TOP = \"Top Light\"\n    BOTTOM = \"Bottom Light\"\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## IC-Light (Relighting with Foreground Condition)\")\n    with gr.Row():\n        with gr.Column():\n            with gr.Row():\n                input_fg = gr.Image(source='upload', type=\"numpy\", label=\"Image\", height=480)\n                output_bg = gr.Image(type=\"numpy\", label=\"Preprocessed Foreground\", height=480)\n            prompt = gr.Textbox(label=\"Prompt\")\n            bg_source = gr.Radio(choices=[e.value for e in BGSource],\n                                 value=BGSource.NONE.value,\n                                 label=\"Lighting Preference (Initial Latent)\", type='value')\n            example_quick_subjects = gr.Dataset(samples=quick_subjects, label='Subject Quick List', samples_per_page=1000, components=[prompt])\n            example_quick_prompts = gr.Dataset(samples=quick_prompts, label='Lighting Quick List', samples_per_page=1000, components=[prompt])\n            relight_button = gr.Button(value=\"Relight\")\n\n            with gr.Group():\n                with gr.Row():\n                    num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                    seed = gr.Number(label=\"Seed\", value=12345, precision=0)\n\n                with gr.Row():\n                    image_width = gr.Slider(label=\"Image Width\", minimum=256, maximum=1024, value=512, step=64)\n                    image_height = gr.Slider(label=\"Image Height\", minimum=256, maximum=1024, value=640, step=64)\n\n            with gr.Accordion(\"Advanced options\", open=False):\n                steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=25, step=1)\n                cfg = gr.Slider(label=\"CFG Scale\", minimum=1.0, maximum=32.0, value=2, step=0.01)\n                lowres_denoise = gr.Slider(label=\"Lowres Denoise (for initial latent)\", minimum=0.1, maximum=1.0, value=0.9, step=0.01)\n                highres_scale = gr.Slider(label=\"Highres Scale\", minimum=1.0, maximum=3.0, value=1.5, step=0.01)\n                highres_denoise = gr.Slider(label=\"Highres Denoise\", minimum=0.1, maximum=1.0, value=0.5, step=0.01)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\", value='lowres, bad anatomy, bad hands, cropped, worst quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(height=832, object_fit='contain', label='Outputs')\n    with gr.Row():\n        dummy_image_for_outputs = gr.Image(visible=False, label='Result')\n        gr.Examples(\n            fn=lambda *args: ([args[-1]], None),\n            examples=db_examples.foreground_conditioned_examples,\n            inputs=[\n                input_fg, prompt, bg_source, image_width, image_height, seed, dummy_image_for_outputs\n            ],\n            outputs=[result_gallery, output_bg],\n            run_on_click=True, examples_per_page=1024\n        )\n    ips = [input_fg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, lowres_denoise, bg_source]\n    relight_button.click(fn=process_relight, inputs=ips, outputs=[output_bg, result_gallery])\n    example_quick_prompts.click(lambda x, y: ', '.join(y.split(', ')[:2] + [x[0]]), inputs=[example_quick_prompts, prompt], outputs=prompt, show_progress=False, queue=False)\n    example_quick_subjects.click(lambda x: x[0], inputs=example_quick_subjects, outputs=prompt, show_progress=False, queue=False)\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_demo_bg.py",
          "type": "blob",
          "size": 17.91796875,
          "content": "import os\nimport math\nimport gradio as gr\nimport numpy as np\nimport torch\nimport safetensors.torch as sf\nimport db_examples\n\nfrom PIL import Image\nfrom diffusers import StableDiffusionPipeline, StableDiffusionImg2ImgPipeline\nfrom diffusers import AutoencoderKL, UNet2DConditionModel, DDIMScheduler, EulerAncestralDiscreteScheduler, DPMSolverMultistepScheduler\nfrom diffusers.models.attention_processor import AttnProcessor2_0\nfrom transformers import CLIPTextModel, CLIPTokenizer\nfrom briarmbg import BriaRMBG\nfrom enum import Enum\nfrom torch.hub import download_url_to_file\n\n\n# 'stablediffusionapi/realistic-vision-v51'\n# 'runwayml/stable-diffusion-v1-5'\nsd15_name = 'stablediffusionapi/realistic-vision-v51'\ntokenizer = CLIPTokenizer.from_pretrained(sd15_name, subfolder=\"tokenizer\")\ntext_encoder = CLIPTextModel.from_pretrained(sd15_name, subfolder=\"text_encoder\")\nvae = AutoencoderKL.from_pretrained(sd15_name, subfolder=\"vae\")\nunet = UNet2DConditionModel.from_pretrained(sd15_name, subfolder=\"unet\")\nrmbg = BriaRMBG.from_pretrained(\"briaai/RMBG-1.4\")\n\n# Change UNet\n\nwith torch.no_grad():\n    new_conv_in = torch.nn.Conv2d(12, unet.conv_in.out_channels, unet.conv_in.kernel_size, unet.conv_in.stride, unet.conv_in.padding)\n    new_conv_in.weight.zero_()\n    new_conv_in.weight[:, :4, :, :].copy_(unet.conv_in.weight)\n    new_conv_in.bias = unet.conv_in.bias\n    unet.conv_in = new_conv_in\n\nunet_original_forward = unet.forward\n\n\ndef hooked_unet_forward(sample, timestep, encoder_hidden_states, **kwargs):\n    c_concat = kwargs['cross_attention_kwargs']['concat_conds'].to(sample)\n    c_concat = torch.cat([c_concat] * (sample.shape[0] // c_concat.shape[0]), dim=0)\n    new_sample = torch.cat([sample, c_concat], dim=1)\n    kwargs['cross_attention_kwargs'] = {}\n    return unet_original_forward(new_sample, timestep, encoder_hidden_states, **kwargs)\n\n\nunet.forward = hooked_unet_forward\n\n# Load\n\nmodel_path = './models/iclight_sd15_fbc.safetensors'\n\nif not os.path.exists(model_path):\n    download_url_to_file(url='https://huggingface.co/lllyasviel/ic-light/resolve/main/iclight_sd15_fbc.safetensors', dst=model_path)\n\nsd_offset = sf.load_file(model_path)\nsd_origin = unet.state_dict()\nkeys = sd_origin.keys()\nsd_merged = {k: sd_origin[k] + sd_offset[k] for k in sd_origin.keys()}\nunet.load_state_dict(sd_merged, strict=True)\ndel sd_offset, sd_origin, sd_merged, keys\n\n# Device\n\ndevice = torch.device('cuda')\ntext_encoder = text_encoder.to(device=device, dtype=torch.float16)\nvae = vae.to(device=device, dtype=torch.bfloat16)\nunet = unet.to(device=device, dtype=torch.float16)\nrmbg = rmbg.to(device=device, dtype=torch.float32)\n\n# SDP\n\nunet.set_attn_processor(AttnProcessor2_0())\nvae.set_attn_processor(AttnProcessor2_0())\n\n# Samplers\n\nddim_scheduler = DDIMScheduler(\n    num_train_timesteps=1000,\n    beta_start=0.00085,\n    beta_end=0.012,\n    beta_schedule=\"scaled_linear\",\n    clip_sample=False,\n    set_alpha_to_one=False,\n    steps_offset=1,\n)\n\neuler_a_scheduler = EulerAncestralDiscreteScheduler(\n    num_train_timesteps=1000,\n    beta_start=0.00085,\n    beta_end=0.012,\n    steps_offset=1\n)\n\ndpmpp_2m_sde_karras_scheduler = DPMSolverMultistepScheduler(\n    num_train_timesteps=1000,\n    beta_start=0.00085,\n    beta_end=0.012,\n    algorithm_type=\"sde-dpmsolver++\",\n    use_karras_sigmas=True,\n    steps_offset=1\n)\n\n# Pipelines\n\nt2i_pipe = StableDiffusionPipeline(\n    vae=vae,\n    text_encoder=text_encoder,\n    tokenizer=tokenizer,\n    unet=unet,\n    scheduler=dpmpp_2m_sde_karras_scheduler,\n    safety_checker=None,\n    requires_safety_checker=False,\n    feature_extractor=None,\n    image_encoder=None\n)\n\ni2i_pipe = StableDiffusionImg2ImgPipeline(\n    vae=vae,\n    text_encoder=text_encoder,\n    tokenizer=tokenizer,\n    unet=unet,\n    scheduler=dpmpp_2m_sde_karras_scheduler,\n    safety_checker=None,\n    requires_safety_checker=False,\n    feature_extractor=None,\n    image_encoder=None\n)\n\n\n@torch.inference_mode()\ndef encode_prompt_inner(txt: str):\n    max_length = tokenizer.model_max_length\n    chunk_length = tokenizer.model_max_length - 2\n    id_start = tokenizer.bos_token_id\n    id_end = tokenizer.eos_token_id\n    id_pad = id_end\n\n    def pad(x, p, i):\n        return x[:i] if len(x) >= i else x + [p] * (i - len(x))\n\n    tokens = tokenizer(txt, truncation=False, add_special_tokens=False)[\"input_ids\"]\n    chunks = [[id_start] + tokens[i: i + chunk_length] + [id_end] for i in range(0, len(tokens), chunk_length)]\n    chunks = [pad(ck, id_pad, max_length) for ck in chunks]\n\n    token_ids = torch.tensor(chunks).to(device=device, dtype=torch.int64)\n    conds = text_encoder(token_ids).last_hidden_state\n\n    return conds\n\n\n@torch.inference_mode()\ndef encode_prompt_pair(positive_prompt, negative_prompt):\n    c = encode_prompt_inner(positive_prompt)\n    uc = encode_prompt_inner(negative_prompt)\n\n    c_len = float(len(c))\n    uc_len = float(len(uc))\n    max_count = max(c_len, uc_len)\n    c_repeat = int(math.ceil(max_count / c_len))\n    uc_repeat = int(math.ceil(max_count / uc_len))\n    max_chunk = max(len(c), len(uc))\n\n    c = torch.cat([c] * c_repeat, dim=0)[:max_chunk]\n    uc = torch.cat([uc] * uc_repeat, dim=0)[:max_chunk]\n\n    c = torch.cat([p[None, ...] for p in c], dim=1)\n    uc = torch.cat([p[None, ...] for p in uc], dim=1)\n\n    return c, uc\n\n\n@torch.inference_mode()\ndef pytorch2numpy(imgs, quant=True):\n    results = []\n    for x in imgs:\n        y = x.movedim(0, -1)\n\n        if quant:\n            y = y * 127.5 + 127.5\n            y = y.detach().float().cpu().numpy().clip(0, 255).astype(np.uint8)\n        else:\n            y = y * 0.5 + 0.5\n            y = y.detach().float().cpu().numpy().clip(0, 1).astype(np.float32)\n\n        results.append(y)\n    return results\n\n\n@torch.inference_mode()\ndef numpy2pytorch(imgs):\n    h = torch.from_numpy(np.stack(imgs, axis=0)).float() / 127.0 - 1.0  # so that 127 must be strictly 0.0\n    h = h.movedim(-1, 1)\n    return h\n\n\ndef resize_and_center_crop(image, target_width, target_height):\n    pil_image = Image.fromarray(image)\n    original_width, original_height = pil_image.size\n    scale_factor = max(target_width / original_width, target_height / original_height)\n    resized_width = int(round(original_width * scale_factor))\n    resized_height = int(round(original_height * scale_factor))\n    resized_image = pil_image.resize((resized_width, resized_height), Image.LANCZOS)\n    left = (resized_width - target_width) / 2\n    top = (resized_height - target_height) / 2\n    right = (resized_width + target_width) / 2\n    bottom = (resized_height + target_height) / 2\n    cropped_image = resized_image.crop((left, top, right, bottom))\n    return np.array(cropped_image)\n\n\ndef resize_without_crop(image, target_width, target_height):\n    pil_image = Image.fromarray(image)\n    resized_image = pil_image.resize((target_width, target_height), Image.LANCZOS)\n    return np.array(resized_image)\n\n\n@torch.inference_mode()\ndef run_rmbg(img, sigma=0.0):\n    H, W, C = img.shape\n    assert C == 3\n    k = (256.0 / float(H * W)) ** 0.5\n    feed = resize_without_crop(img, int(64 * round(W * k)), int(64 * round(H * k)))\n    feed = numpy2pytorch([feed]).to(device=device, dtype=torch.float32)\n    alpha = rmbg(feed)[0][0]\n    alpha = torch.nn.functional.interpolate(alpha, size=(H, W), mode=\"bilinear\")\n    alpha = alpha.movedim(1, -1)[0]\n    alpha = alpha.detach().float().cpu().numpy().clip(0, 1)\n    result = 127 + (img.astype(np.float32) - 127 + sigma) * alpha\n    return result.clip(0, 255).astype(np.uint8), alpha\n\n\n@torch.inference_mode()\ndef process(input_fg, input_bg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, bg_source):\n    bg_source = BGSource(bg_source)\n\n    if bg_source == BGSource.UPLOAD:\n        pass\n    elif bg_source == BGSource.UPLOAD_FLIP:\n        input_bg = np.fliplr(input_bg)\n    elif bg_source == BGSource.GREY:\n        input_bg = np.zeros(shape=(image_height, image_width, 3), dtype=np.uint8) + 64\n    elif bg_source == BGSource.LEFT:\n        gradient = np.linspace(224, 32, image_width)\n        image = np.tile(gradient, (image_height, 1))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    elif bg_source == BGSource.RIGHT:\n        gradient = np.linspace(32, 224, image_width)\n        image = np.tile(gradient, (image_height, 1))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    elif bg_source == BGSource.TOP:\n        gradient = np.linspace(224, 32, image_height)[:, None]\n        image = np.tile(gradient, (1, image_width))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    elif bg_source == BGSource.BOTTOM:\n        gradient = np.linspace(32, 224, image_height)[:, None]\n        image = np.tile(gradient, (1, image_width))\n        input_bg = np.stack((image,) * 3, axis=-1).astype(np.uint8)\n    else:\n        raise 'Wrong background source!'\n\n    rng = torch.Generator(device=device).manual_seed(seed)\n\n    fg = resize_and_center_crop(input_fg, image_width, image_height)\n    bg = resize_and_center_crop(input_bg, image_width, image_height)\n    concat_conds = numpy2pytorch([fg, bg]).to(device=vae.device, dtype=vae.dtype)\n    concat_conds = vae.encode(concat_conds).latent_dist.mode() * vae.config.scaling_factor\n    concat_conds = torch.cat([c[None, ...] for c in concat_conds], dim=1)\n\n    conds, unconds = encode_prompt_pair(positive_prompt=prompt + ', ' + a_prompt, negative_prompt=n_prompt)\n\n    latents = t2i_pipe(\n        prompt_embeds=conds,\n        negative_prompt_embeds=unconds,\n        width=image_width,\n        height=image_height,\n        num_inference_steps=steps,\n        num_images_per_prompt=num_samples,\n        generator=rng,\n        output_type='latent',\n        guidance_scale=cfg,\n        cross_attention_kwargs={'concat_conds': concat_conds},\n    ).images.to(vae.dtype) / vae.config.scaling_factor\n\n    pixels = vae.decode(latents).sample\n    pixels = pytorch2numpy(pixels)\n    pixels = [resize_without_crop(\n        image=p,\n        target_width=int(round(image_width * highres_scale / 64.0) * 64),\n        target_height=int(round(image_height * highres_scale / 64.0) * 64))\n    for p in pixels]\n\n    pixels = numpy2pytorch(pixels).to(device=vae.device, dtype=vae.dtype)\n    latents = vae.encode(pixels).latent_dist.mode() * vae.config.scaling_factor\n    latents = latents.to(device=unet.device, dtype=unet.dtype)\n\n    image_height, image_width = latents.shape[2] * 8, latents.shape[3] * 8\n    fg = resize_and_center_crop(input_fg, image_width, image_height)\n    bg = resize_and_center_crop(input_bg, image_width, image_height)\n    concat_conds = numpy2pytorch([fg, bg]).to(device=vae.device, dtype=vae.dtype)\n    concat_conds = vae.encode(concat_conds).latent_dist.mode() * vae.config.scaling_factor\n    concat_conds = torch.cat([c[None, ...] for c in concat_conds], dim=1)\n\n    latents = i2i_pipe(\n        image=latents,\n        strength=highres_denoise,\n        prompt_embeds=conds,\n        negative_prompt_embeds=unconds,\n        width=image_width,\n        height=image_height,\n        num_inference_steps=int(round(steps / highres_denoise)),\n        num_images_per_prompt=num_samples,\n        generator=rng,\n        output_type='latent',\n        guidance_scale=cfg,\n        cross_attention_kwargs={'concat_conds': concat_conds},\n    ).images.to(vae.dtype) / vae.config.scaling_factor\n\n    pixels = vae.decode(latents).sample\n    pixels = pytorch2numpy(pixels, quant=False)\n\n    return pixels, [fg, bg]\n\n\n@torch.inference_mode()\ndef process_relight(input_fg, input_bg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, bg_source):\n    input_fg, matting = run_rmbg(input_fg)\n    results, extra_images = process(input_fg, input_bg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, bg_source)\n    results = [(x * 255.0).clip(0, 255).astype(np.uint8) for x in results]\n    return results + extra_images\n\n\n@torch.inference_mode()\ndef process_normal(input_fg, input_bg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, bg_source):\n    input_fg, matting = run_rmbg(input_fg, sigma=16)\n\n    print('left ...')\n    left = process(input_fg, input_bg, prompt, image_width, image_height, 1, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, BGSource.LEFT.value)[0][0]\n\n    print('right ...')\n    right = process(input_fg, input_bg, prompt, image_width, image_height, 1, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, BGSource.RIGHT.value)[0][0]\n\n    print('bottom ...')\n    bottom = process(input_fg, input_bg, prompt, image_width, image_height, 1, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, BGSource.BOTTOM.value)[0][0]\n\n    print('top ...')\n    top = process(input_fg, input_bg, prompt, image_width, image_height, 1, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, BGSource.TOP.value)[0][0]\n\n    inner_results = [left * 2.0 - 1.0, right * 2.0 - 1.0, bottom * 2.0 - 1.0, top * 2.0 - 1.0]\n\n    ambient = (left + right + bottom + top) / 4.0\n    h, w, _ = ambient.shape\n    matting = resize_and_center_crop((matting[..., 0] * 255.0).clip(0, 255).astype(np.uint8), w, h).astype(np.float32)[..., None] / 255.0\n\n    def safa_divide(a, b):\n        e = 1e-5\n        return ((a + e) / (b + e)) - 1.0\n\n    left = safa_divide(left, ambient)\n    right = safa_divide(right, ambient)\n    bottom = safa_divide(bottom, ambient)\n    top = safa_divide(top, ambient)\n\n    u = (right - left) * 0.5\n    v = (top - bottom) * 0.5\n\n    sigma = 10.0\n    u = np.mean(u, axis=2)\n    v = np.mean(v, axis=2)\n    h = (1.0 - u ** 2.0 - v ** 2.0).clip(0, 1e5) ** (0.5 * sigma)\n    z = np.zeros_like(h)\n\n    normal = np.stack([u, v, h], axis=2)\n    normal /= np.sum(normal ** 2.0, axis=2, keepdims=True) ** 0.5\n    normal = normal * matting + np.stack([z, z, 1 - z], axis=2) * (1 - matting)\n\n    results = [normal, left, right, bottom, top] + inner_results\n    results = [(x * 127.5 + 127.5).clip(0, 255).astype(np.uint8) for x in results]\n    return results\n\n\nquick_prompts = [\n    'beautiful woman',\n    'handsome man',\n    'beautiful woman, cinematic lighting',\n    'handsome man, cinematic lighting',\n    'beautiful woman, natural lighting',\n    'handsome man, natural lighting',\n    'beautiful woman, neo punk lighting, cyberpunk',\n    'handsome man, neo punk lighting, cyberpunk',\n]\nquick_prompts = [[x] for x in quick_prompts]\n\n\nclass BGSource(Enum):\n    UPLOAD = \"Use Background Image\"\n    UPLOAD_FLIP = \"Use Flipped Background Image\"\n    LEFT = \"Left Light\"\n    RIGHT = \"Right Light\"\n    TOP = \"Top Light\"\n    BOTTOM = \"Bottom Light\"\n    GREY = \"Ambient\"\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## IC-Light (Relighting with Foreground and Background Condition)\")\n    with gr.Row():\n        with gr.Column():\n            with gr.Row():\n                input_fg = gr.Image(source='upload', type=\"numpy\", label=\"Foreground\", height=480)\n                input_bg = gr.Image(source='upload', type=\"numpy\", label=\"Background\", height=480)\n            prompt = gr.Textbox(label=\"Prompt\")\n            bg_source = gr.Radio(choices=[e.value for e in BGSource],\n                                 value=BGSource.UPLOAD.value,\n                                 label=\"Background Source\", type='value')\n\n            example_prompts = gr.Dataset(samples=quick_prompts, label='Prompt Quick List', components=[prompt])\n            bg_gallery = gr.Gallery(height=450, object_fit='contain', label='Background Quick List', value=db_examples.bg_samples, columns=5, allow_preview=False)\n            relight_button = gr.Button(value=\"Relight\")\n\n            with gr.Group():\n                with gr.Row():\n                    num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                    seed = gr.Number(label=\"Seed\", value=12345, precision=0)\n                with gr.Row():\n                    image_width = gr.Slider(label=\"Image Width\", minimum=256, maximum=1024, value=512, step=64)\n                    image_height = gr.Slider(label=\"Image Height\", minimum=256, maximum=1024, value=640, step=64)\n\n            with gr.Accordion(\"Advanced options\", open=False):\n                steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                cfg = gr.Slider(label=\"CFG Scale\", minimum=1.0, maximum=32.0, value=7.0, step=0.01)\n                highres_scale = gr.Slider(label=\"Highres Scale\", minimum=1.0, maximum=3.0, value=1.5, step=0.01)\n                highres_denoise = gr.Slider(label=\"Highres Denoise\", minimum=0.1, maximum=0.9, value=0.5, step=0.01)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='lowres, bad anatomy, bad hands, cropped, worst quality')\n                normal_button = gr.Button(value=\"Compute Normal (4x Slower)\")\n        with gr.Column():\n            result_gallery = gr.Gallery(height=832, object_fit='contain', label='Outputs')\n    with gr.Row():\n        dummy_image_for_outputs = gr.Image(visible=False, label='Result')\n        gr.Examples(\n            fn=lambda *args: [args[-1]],\n            examples=db_examples.background_conditioned_examples,\n            inputs=[\n                input_fg, input_bg, prompt, bg_source, image_width, image_height, seed, dummy_image_for_outputs\n            ],\n            outputs=[result_gallery],\n            run_on_click=True, examples_per_page=1024\n        )\n    ips = [input_fg, input_bg, prompt, image_width, image_height, num_samples, seed, steps, a_prompt, n_prompt, cfg, highres_scale, highres_denoise, bg_source]\n    relight_button.click(fn=process_relight, inputs=ips, outputs=[result_gallery])\n    normal_button.click(fn=process_normal, inputs=ips, outputs=[result_gallery])\n    example_prompts.click(lambda x: x[0], inputs=example_prompts, outputs=prompt, show_progress=False, queue=False)\n\n    def bg_gallery_selected(gal, evt: gr.SelectData):\n        return gal[evt.index]['name']\n\n    bg_gallery.select(bg_gallery_selected, inputs=bg_gallery, outputs=input_bg)\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.125,
          "content": "diffusers==0.27.2\ntransformers==4.36.2\nopencv-python\nsafetensors\npillow==10.2.0\neinops\ntorch\npeft\ngradio==3.41.2\nprotobuf==3.20\n"
        }
      ]
    }
  ]
}