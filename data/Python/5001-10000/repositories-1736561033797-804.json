{
  "metadata": {
    "timestamp": 1736561033797,
    "page": 804,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tychxn/jd-assistant",
      "stars": 5183,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "__pycache__/\n.idea/\ncookies/\n\n*.log\n*.png\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2018 Tychxn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9814453125,
          "content": "# JD-Assistant\n\n[![version](https://img.shields.io/badge/python-3.4+-blue.svg)](https://www.python.org/download/releases/3.4.0/) \n[![status](https://img.shields.io/badge/status-stable-green.svg)](https://github.com/tychxn/jd-assistant)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![star, issue](https://img.shields.io/badge/star%2C%20issue-welcome-brightgreen.svg)](https://github.com/tychxn/jd-assistant)\n\n京东抢购助手（短期内不再更新）\n\n## 主要功能\n\n- 登陆京东商城（[www.jd.com](http://www.jd.com/)）\n  - 手机扫码登录\n  - 保存/加载登录cookies (可验证cookies是否过期)\n- 商品查询操作\n  - 提供完整的[`地址⇔ID`](./area_id/)对应关系\n  - 根据商品ID和地址ID查询库存\n  - 根据商品ID查询价格\n- 购物车操作\n  - 清空/添加购物车 (无货商品也可以加入购物车，预约商品无法加入)\n  - 获取购物车商品详情\n- 订单操作\n  - 获取订单结算页面信息 (商品详情, 应付总额, 收货地址, 收货人等)\n  - 提交订单（使用默认地址）\n    - 直接提交\n    - 有货提交\n    - 定时提交\n  - 查询订单 (可选择只显示未付款订单)\n- 其他\n  - 商品预约\n  - 用户信息查询\n\n## 运行环境\n\n- [Python 3](https://www.python.org/)\n\n## 第三方库\n\n- [Requests](http://docs.python-requests.org/en/master/)\n- [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n- [PyCryptodome](https://github.com/Legrandin/pycryptodome)\n\n安装：\n```sh\npip install -r requirements.txt\n```\n\n## 使用教程\n\n程序主入口在 `main.py`\n\n👉 [使用教程请参看Wiki](https://github.com/tychxn/jd-assistant/wiki/1.-%E4%BA%AC%E4%B8%9C%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8B%E7%94%A8%E6%B3%95)\n\n\n## 更新记录\n\n- 【2020.03.10】修复了一些小问题。\n- 【2020.02.08】修复了查询库存接口响应数据结构变化导致的问题。\n- 【2020.02.06】添加下单成功消息推送功能；新增配置参数以减少各种异常情况。\n- 【2020.02.03】查询商品库存方法添加超时，避免少数情况下的卡死问题；对部分代码进行了优化。\n- 【2020.02.02】重写了监控库存提交订单功能：监控多商品时可以下单任一有库存商品，具体使用方式请参考wiki。\n- 【2020.01.29】修复了自定义商品数量时的bug。\n- 【2020.01.28】完善了监控库存提交订单功能的代码，具体使用方式请参考wiki。\n- 【2020.01.24】修复了查询单个商品库存接口需要添加额外参数的问题。\n- 【2020.01.15】提升了部分代码质量。\n- 【2019.12.14】解决查询单个商品库存接口变动的问题。\n- 【2019.11.10】临时增加预约商品抢购功能。\n- 【2019.02.16】更新了普通商品的抢购代码，在Wiki中写了一份使用教程。\n- 【2018.11.29】京东更新了抢购商品的下单接口，代码已更新，支持定时抢购。\n- 【2018.09.26】京东已下线`字符验证码`接口，`账号密码登录`功能失效，请使用扫码登录`asst.login_by_QRcode()`。\n- 【2018.07.28】京东已采用`滑动验证码`替换登录时出现的`字符验证码`，但还没有下线`字符验证码`接口，`账号密码登录`功能依旧可用。等待后续更新滑动验证方式，推荐使用`扫码登录`。\n\n## 备注\n\n- 🌟强烈建议大家在部署代码前使用有货的商品测试下单流程，并且：在京东购物车结算页面设置发票为`电子普通发票-个人`，设置支付方式为`在线支付`，否则可能出现各种未知的下单失败问题。🌟\n- 京东商城的登陆/下单机制经常改动，当前测试时间`2020.02.08`。如果失效，欢迎提issue，我会来更新。\n- 代码在`macOS`中编写，如果在其他平台上运行出行问题，欢迎提issue。\n\n## 待完成的功能\n\n- [ ] Keep session alive\n- [ ] 抢优惠券\n\n## 不考虑的功能\n\n- ✖️ 支付功能\n- ✖️ 多账号抢购\n\n## Sponsor\n\n[![JetBrains](./docs/jetbrains.svg)](https://www.jetbrains.com/?from=jd-assistant)\n"
        },
        {
          "name": "area_id",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.ini",
          "type": "blob",
          "size": 1.0166015625,
          "content": "[account]\n# 支付密码\n# 如果你的账户中有可用的京券（注意不是东券）或 在上次购买订单中使用了京豆，\n# 那么京东可能会在下单时自动选择京券支付 或 自动勾选京豆支付。\n# 此时下单会要求输入六位数字的支付密码。请在下方配置你的支付密码，如 123456 。\n# 如果没有上述情况，下方请留空。\npayment_pwd =\n\n[config]\n# eid, fp, track_id, risk_control 四个参数必须填写，具体请参考 wiki-常见问题\n# 随意填写可能导致订单无法提交等问题\neid =\nfp =\ntrack_id =\nrisk_control =\n\n# 查询库存请求超时(秒)，可选配置，默认10秒\ntimeout =\n\n# 是否使用随机 useragent，默认为 false\nrandom_useragent = false\n\n[messenger]\n# 使用了Server酱的推送服务\n# 如果想开启下单成功后消息推送，则将 enable 设置为 true，默认为 false 不开启推送\n# 开启消息推送必须填入 sckey，如何获取请参考 http://sc.ftqq.com/3.version。感谢Server酱～\nenable = false\nsckey ="
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 0.755859375,
          "content": "# -*- coding: utf-8 -*-\nimport os\n\nimport configparser\n\n\nclass Config(object):\n\n    def __init__(self, config_file='config.ini'):\n        self._path = os.path.join(os.getcwd(), config_file)\n        if not os.path.exists(self._path):\n            raise FileNotFoundError(\"No such file: config.ini\")\n        self._config = configparser.ConfigParser()\n        self._config.read(self._path, encoding='utf-8')\n\n    def get(self, section, name, strip_blank=True, strip_quote=True):\n        s = self._config.get(section, name)\n        if strip_blank:\n            s = s.strip()\n        if strip_quote:\n            s = s.strip('\"').strip(\"'\")\n\n        return s\n\n    def getboolean(self, section, name):\n        return self._config.getboolean(section, name)\n\n\nglobal_config = Config()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "exception.py",
          "type": "blob",
          "size": 0.1962890625,
          "content": "#!/usr/bin/env python\n# -*- encoding=utf8 -*-\nfrom log import logger\n\n\nclass AsstException(Exception):\n\n    def __init__(self, message):\n        super().__init__(message)\n        logger.error(message)\n"
        },
        {
          "name": "get_eid_fp.html",
          "type": "blob",
          "size": 0.72265625,
          "content": "<html>\n    <head></head>\n    <body>\n        <div id=\"info\">获取中……</div>\n        <hr>\n        <div id=\"eid\"></div>\n        <div id=\"fp\"></div>\n    </body>\n</html>\n\n<script src=\"https://gias.jd.com/js/td.js\"></script>\n\n<script>\n    setTimeout(function () {\n        try {\n            getJdEid(function (eid, fp, udfp) {\n                document.getElementById('info').innerText = '请把下面的内容复制到配置文件 config.ini 中的对应位置';\n                document.getElementById('eid').innerText = 'eid = ' + eid;\n                document.getElementById('fp').innerText = 'fp = ' + fp;\n            });\n        } catch (e) {\n            document.getElementById('info').innerText = e;\n        }\n    }, 1000);\n</script>\n"
        },
        {
          "name": "jd_assistant.py",
          "type": "blob",
          "size": 62.6376953125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport json\nimport os\nimport pickle\nimport re\nimport random\nimport time\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nfrom config import global_config\nfrom exception import AsstException\nfrom log import logger\nfrom messenger import Messenger\nfrom timer import Timer\nfrom util import (\n    DEFAULT_TIMEOUT,\n    DEFAULT_USER_AGENT,\n    check_login,\n    deprecated,\n    encrypt_pwd,\n    encrypt_payment_pwd,\n    get_tag_value,\n    get_random_useragent,\n    open_image,\n    parse_area_id,\n    parse_json,\n    parse_sku_id,\n    parse_items_dict,\n    response_status,\n    save_image,\n    split_area_id\n)\n\n\nclass Assistant(object):\n\n    def __init__(self):\n        use_random_ua = global_config.getboolean('config', 'random_useragent')\n        self.user_agent = DEFAULT_USER_AGENT if not use_random_ua else get_random_useragent()\n        self.headers = {'User-Agent': self.user_agent}\n        self.eid = global_config.get('config', 'eid')\n        self.fp = global_config.get('config', 'fp')\n        self.track_id = global_config.get('config', 'track_id')\n        self.risk_control = global_config.get('config', 'risk_control')\n        if not self.eid or not self.fp or not self.track_id or not self.risk_control:\n            raise AsstException('请在 config.ini 中配置 eid, fp, track_id, risk_control 参数，具体请参考 wiki-常见问题')\n\n        self.timeout = float(global_config.get('config', 'timeout') or DEFAULT_TIMEOUT)\n        self.send_message = global_config.getboolean('messenger', 'enable')\n        self.messenger = Messenger(global_config.get('messenger', 'sckey')) if self.send_message else None\n\n        self.item_cat = dict()\n        self.item_vender_ids = dict()  # 记录商家id\n\n        self.seckill_init_info = dict()\n        self.seckill_order_data = dict()\n        self.seckill_url = dict()\n\n        self.username = ''\n        self.nick_name = ''\n        self.is_login = False\n        self.sess = requests.session()\n        try:\n            self._load_cookies()\n        except Exception:\n            pass\n\n    def _load_cookies(self):\n        cookies_file = ''\n        for name in os.listdir('./cookies'):\n            if name.endswith('.cookies'):\n                cookies_file = './cookies/{0}'.format(name)\n                break\n        with open(cookies_file, 'rb') as f:\n            local_cookies = pickle.load(f)\n        self.sess.cookies.update(local_cookies)\n        self.is_login = self._validate_cookies()\n\n    def _save_cookies(self):\n        cookies_file = './cookies/{0}.cookies'.format(self.nick_name)\n        directory = os.path.dirname(cookies_file)\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n        with open(cookies_file, 'wb') as f:\n            pickle.dump(self.sess.cookies, f)\n\n    def _validate_cookies(self):\n        \"\"\"验证cookies是否有效（是否登陆）\n        通过访问用户订单列表页进行判断：若未登录，将会重定向到登陆页面。\n        :return: cookies是否有效 True/False\n        \"\"\"\n        url = 'https://order.jd.com/center/list.action'\n        payload = {\n            'rid': str(int(time.time() * 1000)),\n        }\n        try:\n            resp = self.sess.get(url=url, params=payload, allow_redirects=False)\n            if resp.status_code == requests.codes.OK:\n                return True\n        except Exception as e:\n            logger.error(e)\n\n        self.sess = requests.session()\n        return False\n\n    @deprecated\n    def _need_auth_code(self, username):\n        url = 'https://passport.jd.com/uc/showAuthCode'\n        data = {\n            'loginName': username,\n        }\n        payload = {\n            'version': 2015,\n            'r': random.random(),\n        }\n        resp = self.sess.post(url, params=payload, data=data, headers=self.headers)\n        if not response_status(resp):\n            logger.error('获取是否需要验证码失败')\n            return False\n\n        resp_json = json.loads(resp.text[1:-1])  # ({\"verifycode\":true})\n        return resp_json['verifycode']\n\n    @deprecated\n    def _get_auth_code(self, uuid):\n        image_file = os.path.join(os.getcwd(), 'jd_authcode.jpg')\n\n        url = 'https://authcode.jd.com/verify/image'\n        payload = {\n            'a': 1,\n            'acid': uuid,\n            'uid': uuid,\n            'yys': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://passport.jd.com/uc/login',\n        }\n        resp = self.sess.get(url, params=payload, headers=headers)\n\n        if not response_status(resp):\n            logger.error('获取验证码失败')\n            return ''\n\n        save_image(resp, image_file)\n        open_image(image_file)\n        return input('验证码:')\n\n    def _get_login_page(self):\n        url = \"https://passport.jd.com/new/login.aspx\"\n        page = self.sess.get(url, headers=self.headers)\n        return page\n\n    @deprecated\n    def _get_login_data(self):\n        page = self._get_login_page()\n        soup = BeautifulSoup(page.text, \"html.parser\")\n        input_list = soup.select('.form input')\n\n        # eid & fp are generated by local javascript code according to browser environment\n        return {\n            'sa_token': input_list[0]['value'],\n            'uuid': input_list[1]['value'],\n            '_t': input_list[4]['value'],\n            'loginType': input_list[5]['value'],\n            'pubKey': input_list[7]['value'],\n            'eid': self.eid,\n            'fp': self.fp,\n        }\n\n    @deprecated\n    def login_by_username(self):\n        if self.is_login:\n            logger.info('登录成功')\n            return True\n\n        username = input('账号:')\n        password = input('密码:')\n        if (not username) or (not password):\n            logger.error('用户名或密码不能为空')\n            return False\n        self.username = username\n\n        data = self._get_login_data()\n        uuid = data['uuid']\n\n        auth_code = ''\n        if self._need_auth_code(username):\n            logger.info('本次登录需要验证码')\n            auth_code = self._get_auth_code(uuid)\n        else:\n            logger.info('本次登录不需要验证码')\n\n        login_url = \"https://passport.jd.com/uc/loginService\"\n        payload = {\n            'uuid': uuid,\n            'version': 2015,\n            'r': random.random(),\n        }\n        data['authcode'] = auth_code\n        data['loginname'] = username\n        data['nloginpwd'] = encrypt_pwd(password)\n        headers = {\n            'User-Agent': self.user_agent,\n            'Origin': 'https://passport.jd.com',\n        }\n        resp = self.sess.post(url=login_url, data=data, headers=headers, params=payload)\n\n        if not response_status(resp):\n            logger.error('登录失败')\n            return False\n\n        if not self._get_login_result(resp):\n            return False\n\n        # login success\n        logger.info('登录成功')\n        self.nick_name = self.get_user_info()\n        self._save_cookies()\n        self.is_login = True\n        return True\n\n    @deprecated\n    def _get_login_result(self, resp):\n        resp_json = parse_json(resp.text)\n        error_msg = ''\n        if 'success' in resp_json:\n            # {\"success\":\"http://www.jd.com\"}\n            return True\n        elif 'emptyAuthcode' in resp_json:\n            # {'_t': '_t', 'emptyAuthcode': '请输入验证码'}\n            # {'_t': '_t', 'emptyAuthcode': '验证码不正确或验证码已过期'}\n            error_msg = resp_json['emptyAuthcode']\n        elif 'username' in resp_json:\n            # {'_t': '_t', 'username': '账户名不存在，请重新输入'}\n            # {'username': '服务器繁忙，请稍后再试', 'venture': 'xxxx', 'p': 'xxxx', 'ventureRet': 'http://www.jd.com/', '_t': '_t'}\n            if resp_json['username'] == '服务器繁忙，请稍后再试':\n                error_msg = resp_json['username'] + '(预计账户存在风险，需短信激活)'\n            else:\n                error_msg = resp_json['username']\n        elif 'pwd' in resp_json:\n            # {'pwd': '账户名与密码不匹配，请重新输入', '_t': '_t'}\n            error_msg = resp_json['pwd']\n        else:\n            error_msg = resp_json\n        logger.error(error_msg)\n        return False\n\n    def _get_QRcode(self):\n        url = 'https://qr.m.jd.com/show'\n        payload = {\n            'appid': 133,\n            'size': 147,\n            't': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://passport.jd.com/new/login.aspx',\n        }\n        resp = self.sess.get(url=url, headers=headers, params=payload)\n\n        if not response_status(resp):\n            logger.info('获取二维码失败')\n            return False\n\n        QRCode_file = 'QRcode.png'\n        save_image(resp, QRCode_file)\n        logger.info('二维码获取成功，请打开京东APP扫描')\n        open_image(QRCode_file)\n        return True\n\n    def _get_QRcode_ticket(self):\n        url = 'https://qr.m.jd.com/check'\n        payload = {\n            'appid': '133',\n            'callback': 'jQuery{}'.format(random.randint(1000000, 9999999)),\n            'token': self.sess.cookies.get('wlfstk_smdl'),\n            '_': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://passport.jd.com/new/login.aspx',\n        }\n        resp = self.sess.get(url=url, headers=headers, params=payload)\n\n        if not response_status(resp):\n            logger.error('获取二维码扫描结果异常')\n            return False\n\n        resp_json = parse_json(resp.text)\n        if resp_json['code'] != 200:\n            logger.info('Code: %s, Message: %s', resp_json['code'], resp_json['msg'])\n            return None\n        else:\n            logger.info('已完成手机客户端确认')\n            return resp_json['ticket']\n\n    def _validate_QRcode_ticket(self, ticket):\n        url = 'https://passport.jd.com/uc/qrCodeTicketValidation'\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://passport.jd.com/uc/login?ltype=logout',\n        }\n        resp = self.sess.get(url=url, headers=headers, params={'t': ticket})\n\n        if not response_status(resp):\n            return False\n\n        resp_json = json.loads(resp.text)\n        if resp_json['returnCode'] == 0:\n            return True\n        else:\n            logger.info(resp_json)\n            return False\n\n    def login_by_QRcode(self):\n        \"\"\"二维码登陆\n        :return:\n        \"\"\"\n        if self.is_login:\n            logger.info('登录成功')\n            return\n\n        self._get_login_page()\n\n        # download QR code\n        if not self._get_QRcode():\n            raise AsstException('二维码下载失败')\n\n        # get QR code ticket\n        ticket = None\n        retry_times = 85\n        for _ in range(retry_times):\n            ticket = self._get_QRcode_ticket()\n            if ticket:\n                break\n            time.sleep(2)\n        else:\n            raise AsstException('二维码过期，请重新获取扫描')\n\n        # validate QR code ticket\n        if not self._validate_QRcode_ticket(ticket):\n            raise AsstException('二维码信息校验失败')\n\n        logger.info('二维码登录成功')\n        self.is_login = True\n        self.nick_name = self.get_user_info()\n        self._save_cookies()\n\n    def _get_reserve_url(self, sku_id):\n        url = 'https://yushou.jd.com/youshouinfo.action'\n        payload = {\n            'callback': 'fetchJSON',\n            'sku': sku_id,\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://item.jd.com/{}.html'.format(sku_id),\n        }\n        resp = self.sess.get(url=url, params=payload, headers=headers)\n        resp_json = parse_json(resp.text)\n        # {\"type\":\"1\",\"hasAddress\":false,\"riskCheck\":\"0\",\"flag\":false,\"num\":941723,\"stime\":\"2018-10-12 12:40:00\",\"plusEtime\":\"\",\"qiangEtime\":\"\",\"showPromoPrice\":\"0\",\"qiangStime\":\"\",\"state\":2,\"sku\":100000287121,\"info\":\"\\u9884\\u7ea6\\u8fdb\\u884c\\u4e2d\",\"isJ\":0,\"address\":\"\",\"d\":48824,\"hidePrice\":\"0\",\"yueEtime\":\"2018-10-19 15:01:00\",\"plusStime\":\"\",\"isBefore\":0,\"url\":\"//yushou.jd.com/toYuyue.action?sku=100000287121&key=237af0174f1cffffd227a2f98481a338\",\"etime\":\"2018-10-19 15:01:00\",\"plusD\":48824,\"category\":\"4\",\"plusType\":0,\"yueStime\":\"2018-10-12 12:40:00\"};\n        reserve_url = resp_json.get('url')\n        return 'https:' + reserve_url if reserve_url else None\n\n    @check_login\n    def make_reserve(self, sku_id):\n        \"\"\"商品预约\n        :param sku_id: 商品id\n        :return:\n        \"\"\"\n        reserve_url = self._get_reserve_url(sku_id)\n        if not reserve_url:\n            logger.error('%s 非预约商品', sku_id)\n            return\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://item.jd.com/{}.html'.format(sku_id),\n        }\n        resp = self.sess.get(url=reserve_url, headers=headers)\n        soup = BeautifulSoup(resp.text, \"html.parser\")\n        reserve_result = soup.find('p', {'class': 'bd-right-result'}).text.strip(' \\t\\r\\n')\n        # 预约成功，已获得抢购资格 / 您已成功预约过了，无需重复预约\n        logger.info(reserve_result)\n\n    @check_login\n    def get_user_info(self):\n        \"\"\"获取用户信息\n        :return: 用户名\n        \"\"\"\n        url = 'https://passport.jd.com/user/petName/getUserInfoForMiniJd.action'\n        payload = {\n            'callback': 'jQuery{}'.format(random.randint(1000000, 9999999)),\n            '_': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://order.jd.com/center/list.action',\n        }\n        try:\n            resp = self.sess.get(url=url, params=payload, headers=headers)\n            resp_json = parse_json(resp.text)\n            # many user info are included in response, now return nick name in it\n            # jQuery2381773({\"imgUrl\":\"//storage.360buyimg.com/i.imageUpload/xxx.jpg\",\"lastLoginTime\":\"\",\"nickName\":\"xxx\",\"plusStatus\":\"0\",\"realName\":\"xxx\",\"userLevel\":x,\"userScoreVO\":{\"accountScore\":xx,\"activityScore\":xx,\"consumptionScore\":xxxxx,\"default\":false,\"financeScore\":xxx,\"pin\":\"xxx\",\"riskScore\":x,\"totalScore\":xxxxx}})\n            return resp_json.get('nickName') or 'jd'\n        except Exception:\n            return 'jd'\n\n    def _get_item_detail_page(self, sku_id):\n        \"\"\"访问商品详情页\n        :param sku_id: 商品id\n        :return: 响应\n        \"\"\"\n        url = 'https://item.jd.com/{}.html'.format(sku_id)\n        page = requests.get(url=url, headers=self.headers)\n        return page\n\n    def get_single_item_stock(self, sku_id, num, area):\n        \"\"\"获取单个商品库存状态\n        :param sku_id: 商品id\n        :param num: 商品数量\n        :param area: 地区id\n        :return: 商品是否有货 True/False\n        \"\"\"\n        area_id = parse_area_id(area)\n\n        cat = self.item_cat.get(sku_id)\n        vender_id = self.item_vender_ids.get(sku_id)\n        if not cat:\n            page = self._get_item_detail_page(sku_id)\n            match = re.search(r'cat: \\[(.*?)\\]', page.text)\n            cat = match.group(1)\n            self.item_cat[sku_id] = cat\n\n            match = re.search(r'venderId:(\\d*?),', page.text)\n            vender_id = match.group(1)\n            self.item_vender_ids[sku_id] = vender_id\n\n        url = 'https://c0.3.cn/stock'\n        payload = {\n            'skuId': sku_id,\n            'buyNum': num,\n            'area': area_id,\n            'ch': 1,\n            '_': str(int(time.time() * 1000)),\n            'callback': 'jQuery{}'.format(random.randint(1000000, 9999999)),\n            'extraParam': '{\"originid\":\"1\"}',  # get error stock state without this param\n            'cat': cat,  # get 403 Forbidden without this param (obtained from the detail page)\n            'venderId': vender_id  # return seller information with this param (can't be ignored)\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://item.jd.com/{}.html'.format(sku_id),\n        }\n\n        resp_text = ''\n        try:\n            resp_text = requests.get(url=url, params=payload, headers=headers, timeout=self.timeout).text\n            resp_json = parse_json(resp_text)\n            stock_info = resp_json.get('stock')\n            sku_state = stock_info.get('skuState')  # 商品是否上架\n            stock_state = stock_info.get('StockState')  # 商品库存状态：33 -- 现货  0,34 -- 无货  36 -- 采购中  40 -- 可配货\n            return sku_state == 1 and stock_state in (33, 40)\n        except requests.exceptions.Timeout:\n            logger.error('查询 %s 库存信息超时(%ss)', sku_id, self.timeout)\n            return False\n        except requests.exceptions.RequestException as request_exception:\n            logger.error('查询 %s 库存信息发生网络请求异常：%s', sku_id, request_exception)\n            return False\n        except Exception as e:\n            logger.error('查询 %s 库存信息发生异常, resp: %s, exception: %s', sku_id, resp_text, e)\n            return False\n\n    @check_login\n    def get_multi_item_stock(self, sku_ids, area):\n        \"\"\"获取多个商品库存状态（旧）\n\n        该方法需要登陆才能调用，用于同时查询多个商品的库存。\n        京东查询接口返回每种商品的状态：有货/无货。当所有商品都有货，返回True；否则，返回False。\n\n        :param sku_ids: 多个商品的id。可以传入中间用英文逗号的分割字符串，如\"123,456\"\n        :param area: 地区id\n        :return: 多个商品是否同时有货 True/False\n        \"\"\"\n        items_dict = parse_sku_id(sku_ids=sku_ids)\n        area_id_list = split_area_id(area)\n\n        url = 'https://trade.jd.com/api/v1/batch/stock'\n        headers = {\n            'User-Agent': self.user_agent,\n            'Origin': 'https://trade.jd.com',\n            'Content-Type': 'application/json; charset=UTF-8',\n            'Referer': 'https://trade.jd.com/shopping/order/getOrderInfo.action?rid=' + str(int(time.time() * 1000)),\n        }\n        data = {\n            \"areaRequest\": {\n                \"provinceId\": area_id_list[0],\n                \"cityId\": area_id_list[1],\n                \"countyId\": area_id_list[2],\n                \"townId\": area_id_list[3]\n            },\n            \"skuNumList\": []\n        }\n        for sku_id, count in items_dict.items():\n            data['skuNumList'].append({\n                \"skuId\": sku_id,\n                \"num\": count\n            })\n        # convert to string\n        data = json.dumps(data)\n\n        try:\n            resp = self.sess.post(url=url, headers=headers, data=data, timeout=self.timeout)\n        except requests.exceptions.Timeout:\n            logger.error('查询 %s 库存信息超时(%ss)', list(items_dict.keys()), self.timeout)\n            return False\n        except requests.exceptions.RequestException as e:\n            raise AsstException('查询 %s 库存信息异常：%s' % (list(items_dict.keys()), e))\n\n        resp_json = parse_json(resp.text)\n        result = resp_json.get('result')\n\n        stock = True\n        for sku_id in result:\n            status = result.get(sku_id).get('status')\n            if '无货' in status:\n                stock = False\n                break\n\n        return stock\n\n    def get_multi_item_stock_new(self, sku_ids, area):\n        \"\"\"获取多个商品库存状态（新）\n\n        当所有商品都有货，返回True；否则，返回False。\n\n        :param sku_ids: 多个商品的id。可以传入中间用英文逗号的分割字符串，如\"123,456\"\n        :param area: 地区id\n        :return: 多个商品是否同时有货 True/False\n        \"\"\"\n        items_dict = parse_sku_id(sku_ids=sku_ids)\n        area_id = parse_area_id(area=area)\n\n        url = 'https://c0.3.cn/stocks'\n        payload = {\n            'callback': 'jQuery{}'.format(random.randint(1000000, 9999999)),\n            'type': 'getstocks',\n            'skuIds': ','.join(items_dict.keys()),\n            'area': area_id,\n            '_': str(int(time.time() * 1000))\n        }\n        headers = {\n            'User-Agent': self.user_agent\n        }\n\n        resp_text = ''\n        try:\n            resp_text = requests.get(url=url, params=payload, headers=headers, timeout=self.timeout).text\n            stock = True\n            for sku_id, info in parse_json(resp_text).items():\n                sku_state = info.get('skuState')  # 商品是否上架\n                stock_state = info.get('StockState')  # 商品库存状态\n                if sku_state == 1 and stock_state in (33, 40):\n                    continue\n                else:\n                    stock = False\n                    break\n            return stock\n        except requests.exceptions.Timeout:\n            logger.error('查询 %s 库存信息超时(%ss)', list(items_dict.keys()), self.timeout)\n            return False\n        except requests.exceptions.RequestException as request_exception:\n            logger.error('查询 %s 库存信息发生网络请求异常：%s', list(items_dict.keys()), request_exception)\n            return False\n        except Exception as e:\n            logger.error('查询 %s 库存信息发生异常, resp: %s, exception: %s', list(items_dict.keys()), resp_text, e)\n            return False\n\n    def _if_item_removed(self, sku_id):\n        \"\"\"判断商品是否下架\n        :param sku_id: 商品id\n        :return: 商品是否下架 True/False\n        \"\"\"\n        detail_page = self._get_item_detail_page(sku_id=sku_id)\n        return '该商品已下柜' in detail_page.text\n\n    @check_login\n    def if_item_can_be_ordered(self, sku_ids, area):\n        \"\"\"判断商品是否能下单\n        :param sku_ids: 商品id，多个商品id中间使用英文逗号进行分割\n        :param area: 地址id\n        :return: 商品是否能下单 True/False\n        \"\"\"\n        items_dict = parse_sku_id(sku_ids=sku_ids)\n        area_id = parse_area_id(area)\n\n        # 判断商品是否能下单\n        if len(items_dict) > 1:\n            return self.get_multi_item_stock_new(sku_ids=items_dict, area=area_id)\n\n        sku_id, count = list(items_dict.items())[0]\n        return self.get_single_item_stock(sku_id=sku_id, num=count, area=area_id)\n\n    def get_item_price(self, sku_id):\n        \"\"\"获取商品价格\n        :param sku_id: 商品id\n        :return: 价格\n        \"\"\"\n        url = 'http://p.3.cn/prices/mgets'\n        payload = {\n            'type': 1,\n            'pduid': int(time.time() * 1000),\n            'skuIds': 'J_' + sku_id,\n        }\n        resp = self.sess.get(url=url, params=payload)\n        return parse_json(resp.text).get('p')\n\n    @check_login\n    def add_item_to_cart(self, sku_ids):\n        \"\"\"添加商品到购物车\n\n        重要：\n        1.商品添加到购物车后将会自动被勾选✓中。\n        2.在提交订单时会对勾选的商品进行结算。\n        3.部分商品（如预售、下架等）无法添加到购物车\n\n        京东购物车可容纳的最大商品种数约为118-120种，超过数量会加入购物车失败。\n\n        :param sku_ids: 商品id，格式：\"123\" 或 \"123,456\" 或 \"123:1,456:2\"。若不配置数量，默认为1个。\n        :return:\n        \"\"\"\n        url = 'https://cart.jd.com/gate.action'\n        headers = {\n            'User-Agent': self.user_agent,\n        }\n\n        for sku_id, count in parse_sku_id(sku_ids=sku_ids).items():\n            payload = {\n                'pid': sku_id,\n                'pcount': count,\n                'ptype': 1,\n            }\n            resp = self.sess.get(url=url, params=payload, headers=headers)\n            if 'https://cart.jd.com/cart.action' in resp.url:  # 套装商品加入购物车后直接跳转到购物车页面\n                result = True\n            else:  # 普通商品成功加入购物车后会跳转到提示 \"商品已成功加入购物车！\" 页面\n                soup = BeautifulSoup(resp.text, \"html.parser\")\n                result = bool(soup.select('h3.ftx-02'))  # [<h3 class=\"ftx-02\">商品已成功加入购物车！</h3>]\n\n            if result:\n                logger.info('%s x %s 已成功加入购物车', sku_id, count)\n            else:\n                logger.error('%s 添加到购物车失败', sku_id)\n\n    @check_login\n    def clear_cart(self):\n        \"\"\"清空购物车\n\n        包括两个请求：\n        1.选中购物车中所有的商品\n        2.批量删除\n\n        :return: 清空购物车结果 True/False\n        \"\"\"\n        # 1.select all items  2.batch remove items\n        select_url = 'https://cart.jd.com/selectAllItem.action'\n        remove_url = 'https://cart.jd.com/batchRemoveSkusFromCart.action'\n        data = {\n            't': 0,\n            'outSkus': '',\n            'random': random.random(),\n        }\n        try:\n            select_resp = self.sess.post(url=select_url, data=data)\n            remove_resp = self.sess.post(url=remove_url, data=data)\n            if (not response_status(select_resp)) or (not response_status(remove_resp)):\n                logger.error('购物车清空失败')\n                return False\n            logger.info('购物车清空成功')\n            return True\n        except Exception as e:\n            logger.error(e)\n            return False\n\n    @check_login\n    def get_cart_detail(self):\n        \"\"\"获取购物车商品详情\n        :return: 购物车商品信息 dict\n        \"\"\"\n        url = 'https://cart.jd.com/cart.action'\n        resp = self.sess.get(url)\n        soup = BeautifulSoup(resp.text, \"html.parser\")\n\n        cart_detail = dict()\n        for item in soup.find_all(class_='item-item'):\n            try:\n                sku_id = item['skuid']  # 商品id\n                # 例如：['increment', '8888', '100001071956', '1', '13', '0', '50067652554']\n                # ['increment', '8888', '100002404322', '2', '1', '0']\n                item_attr_list = item.find(class_='increment')['id'].split('_')\n                p_type = item_attr_list[4]\n                promo_id = target_id = item_attr_list[-1] if len(item_attr_list) == 7 else 0\n\n                cart_detail[sku_id] = {\n                    'name': get_tag_value(item.select('div.p-name a')),  # 商品名称\n                    'verder_id': item['venderid'],  # 商家id\n                    'count': int(item['num']),  # 数量\n                    'unit_price': get_tag_value(item.select('div.p-price strong'))[1:],  # 单价\n                    'total_price': get_tag_value(item.select('div.p-sum strong'))[1:],  # 总价\n                    'is_selected': 'item-selected' in item['class'],  # 商品是否被勾选\n                    'p_type': p_type,\n                    'target_id': target_id,\n                    'promo_id': promo_id\n                }\n            except Exception as e:\n                logger.error(\"某商品在购物车中的信息无法解析，报错信息: %s，该商品自动忽略。 %s\", e, item)\n\n        logger.info('购物车信息：%s', cart_detail)\n        return cart_detail\n\n    def _cancel_select_all_cart_item(self):\n        \"\"\"取消勾选购物车中的所有商品\n        :return: 取消勾选结果 True/False\n        \"\"\"\n        url = \"https://cart.jd.com/cancelAllItem.action\"\n        data = {\n            't': 0,\n            'outSkus': '',\n            'random': random.random()\n            # 'locationId' can be ignored\n        }\n        resp = self.sess.post(url, data=data)\n        return response_status(resp)\n\n    def _change_item_num_in_cart(self, sku_id, vender_id, num, p_type, target_id, promo_id):\n        \"\"\"修改购物车商品的数量\n        修改购物车中商品数量后，该商品将会被自动勾选上。\n\n        :param sku_id: 商品id\n        :param vender_id: 商家id\n        :param num: 目标数量\n        :param p_type: 商品类型(可能)\n        :param target_id: 参数用途未知，可能是用户判断优惠\n        :param promo_id: 参数用途未知，可能是用户判断优惠\n        :return: 商品数量修改结果 True/False\n        \"\"\"\n        url = \"https://cart.jd.com/changeNum.action\"\n        data = {\n            't': 0,\n            'venderId': vender_id,\n            'pid': sku_id,\n            'pcount': num,\n            'ptype': p_type,\n            'targetId': target_id,\n            'promoID': promo_id,\n            'outSkus': '',\n            'random': random.random(),\n            # 'locationId'\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://cart.jd.com/cart',\n        }\n        resp = self.sess.post(url, data=data, headers=headers)\n        return json.loads(resp.text)['sortedWebCartResult']['achieveSevenState'] == 2\n\n    def _add_or_change_cart_item(self, cart, sku_id, count):\n        \"\"\"添加商品到购物车，或修改购物车中商品数量\n\n        如果购物车中存在该商品，会修改该商品的数量并勾选；否则，会添加该商品到购物车中并勾选。\n\n        :param cart: 购物车信息 dict\n        :param sku_id: 商品id\n        :param count: 商品数量\n        :return: 运行结果 True/False\n        \"\"\"\n        if sku_id in cart:\n            logger.info('%s 已在购物车中，调整数量为 %s', sku_id, count)\n            cart_item = cart.get(sku_id)\n            return self._change_item_num_in_cart(\n                sku_id=sku_id,\n                vender_id=cart_item.get('vender_id'),\n                num=count,\n                p_type=cart_item.get('p_type'),\n                target_id=cart_item.get('target_id'),\n                promo_id=cart_item.get('promo_id')\n            )\n        else:\n            logger.info('%s 不在购物车中，开始加入购物车，数量 %s', sku_id, count)\n            return self.add_item_to_cart(sku_ids={sku_id: count})\n\n    @check_login\n    def get_checkout_page_detail(self):\n        \"\"\"获取订单结算页面信息\n\n        该方法会返回订单结算页面的详细信息：商品名称、价格、数量、库存状态等。\n\n        :return: 结算信息 dict\n        \"\"\"\n        url = 'http://trade.jd.com/shopping/order/getOrderInfo.action'\n        # url = 'https://cart.jd.com/gotoOrder.action'\n        payload = {\n            'rid': str(int(time.time() * 1000)),\n        }\n        try:\n            resp = self.sess.get(url=url, params=payload)\n            if not response_status(resp):\n                logger.error('获取订单结算页信息失败')\n                return\n\n            soup = BeautifulSoup(resp.text, \"html.parser\")\n            self.risk_control = get_tag_value(soup.select('input#riskControl'), 'value')\n\n            order_detail = {\n                'address': soup.find('span', id='sendAddr').text[5:],  # remove '寄送至： ' from the begin\n                'receiver': soup.find('span', id='sendMobile').text[4:],  # remove '收件人:' from the begin\n                'total_price': soup.find('span', id='sumPayPriceId').text[1:],  # remove '￥' from the begin\n                'items': []\n            }\n            # TODO: 这里可能会产生解析问题，待修复\n            # for item in soup.select('div.goods-list div.goods-items'):\n            #     div_tag = item.select('div.p-price')[0]\n            #     order_detail.get('items').append({\n            #         'name': get_tag_value(item.select('div.p-name a')),\n            #         'price': get_tag_value(div_tag.select('strong.jd-price'))[2:],  # remove '￥ ' from the begin\n            #         'num': get_tag_value(div_tag.select('span.p-num'))[1:],  # remove 'x' from the begin\n            #         'state': get_tag_value(div_tag.select('span.p-state'))  # in stock or out of stock\n            #     })\n\n            logger.info(\"下单信息：%s\", order_detail)\n            return order_detail\n        except Exception as e:\n            logger.error('订单结算页面数据解析异常（可以忽略），报错信息：%s', e)\n\n    def _save_invoice(self):\n        \"\"\"下单第三方商品时如果未设置发票，将从电子发票切换为普通发票\n\n        http://jos.jd.com/api/complexTemplate.htm?webPamer=invoice&groupName=%E5%BC%80%E6%99%AE%E5%8B%92%E5%85%A5%E9%A9%BB%E6%A8%A1%E5%BC%8FAPI&id=566&restName=jd.kepler.trade.submit&isMulti=true\n\n        :return:\n        \"\"\"\n        url = 'https://trade.jd.com/shopping/dynamic/invoice/saveInvoice.action'\n        data = {\n            \"invoiceParam.selectedInvoiceType\": 1,\n            \"invoiceParam.companyName\": \"个人\",\n            \"invoiceParam.invoicePutType\": 0,\n            \"invoiceParam.selectInvoiceTitle\": 4,\n            \"invoiceParam.selectBookInvoiceContent\": \"\",\n            \"invoiceParam.selectNormalInvoiceContent\": 1,\n            \"invoiceParam.vatCompanyName\": \"\",\n            \"invoiceParam.code\": \"\",\n            \"invoiceParam.regAddr\": \"\",\n            \"invoiceParam.regPhone\": \"\",\n            \"invoiceParam.regBank\": \"\",\n            \"invoiceParam.regBankAccount\": \"\",\n            \"invoiceParam.hasCommon\": \"true\",\n            \"invoiceParam.hasBook\": \"false\",\n            \"invoiceParam.consigneeName\": \"\",\n            \"invoiceParam.consigneePhone\": \"\",\n            \"invoiceParam.consigneeAddress\": \"\",\n            \"invoiceParam.consigneeProvince\": \"请选择：\",\n            \"invoiceParam.consigneeProvinceId\": \"NaN\",\n            \"invoiceParam.consigneeCity\": \"请选择\",\n            \"invoiceParam.consigneeCityId\": \"NaN\",\n            \"invoiceParam.consigneeCounty\": \"请选择\",\n            \"invoiceParam.consigneeCountyId\": \"NaN\",\n            \"invoiceParam.consigneeTown\": \"请选择\",\n            \"invoiceParam.consigneeTownId\": 0,\n            \"invoiceParam.sendSeparate\": \"false\",\n            \"invoiceParam.usualInvoiceId\": \"\",\n            \"invoiceParam.selectElectroTitle\": 4,\n            \"invoiceParam.electroCompanyName\": \"undefined\",\n            \"invoiceParam.electroInvoiceEmail\": \"\",\n            \"invoiceParam.electroInvoicePhone\": \"\",\n            \"invokeInvoiceBasicService\": \"true\",\n            \"invoice_ceshi1\": \"\",\n            \"invoiceParam.showInvoiceSeparate\": \"false\",\n            \"invoiceParam.invoiceSeparateSwitch\": 1,\n            \"invoiceParam.invoiceCode\": \"\",\n            \"invoiceParam.saveInvoiceFlag\": 1\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://trade.jd.com/shopping/dynamic/invoice/saveInvoice.action',\n        }\n        self.sess.post(url=url, data=data, headers=headers)\n\n    @check_login\n    def submit_order(self):\n        \"\"\"提交订单\n\n        重要：\n        1.该方法只适用于普通商品的提交订单（即可以加入购物车，然后结算提交订单的商品）\n        2.提交订单时，会对购物车中勾选✓的商品进行结算（如果勾选了多个商品，将会提交成一个订单）\n\n        :return: True/False 订单提交结果\n        \"\"\"\n        url = 'https://trade.jd.com/shopping/order/submitOrder.action'\n        # js function of submit order is included in https://trade.jd.com/shopping/misc/js/order.js?r=2018070403091\n\n        data = {\n            'overseaPurchaseCookies': '',\n            'vendorRemarks': '[]',\n            'submitOrderParam.sopNotPutInvoice': 'false',\n            'submitOrderParam.trackID': 'TestTrackId',\n            'submitOrderParam.ignorePriceChange': '0',\n            'submitOrderParam.btSupport': '0',\n            'riskControl': self.risk_control,\n            'submitOrderParam.isBestCoupon': 1,\n            'submitOrderParam.jxj': 1,\n            'submitOrderParam.trackId': self.track_id,  # Todo: need to get trackId\n            'submitOrderParam.eid': self.eid,\n            'submitOrderParam.fp': self.fp,\n            'submitOrderParam.needCheck': 1,\n        }\n\n        # add payment password when necessary\n        payment_pwd = global_config.get('account', 'payment_pwd')\n        if payment_pwd:\n            data['submitOrderParam.payPassword'] = encrypt_payment_pwd(payment_pwd)\n\n        headers = {\n            'User-Agent': self.user_agent,\n            'Host': 'trade.jd.com',\n            'Referer': 'http://trade.jd.com/shopping/order/getOrderInfo.action',\n        }\n\n        try:\n            resp = self.sess.post(url=url, data=data, headers=headers)\n            resp_json = json.loads(resp.text)\n\n            # 返回信息示例：\n            # 下单失败\n            # {'overSea': False, 'orderXml': None, 'cartXml': None, 'noStockSkuIds': '', 'reqInfo': None, 'hasJxj': False, 'addedServiceList': None, 'sign': None, 'pin': 'xxx', 'needCheckCode': False, 'success': False, 'resultCode': 60123, 'orderId': 0, 'submitSkuNum': 0, 'deductMoneyFlag': 0, 'goJumpOrderCenter': False, 'payInfo': None, 'scaleSkuInfoListVO': None, 'purchaseSkuInfoListVO': None, 'noSupportHomeServiceSkuList': None, 'msgMobile': None, 'addressVO': None, 'msgUuid': None, 'message': '请输入支付密码！'}\n            # {'overSea': False, 'cartXml': None, 'noStockSkuIds': '', 'reqInfo': None, 'hasJxj': False, 'addedServiceList': None, 'orderXml': None, 'sign': None, 'pin': 'xxx', 'needCheckCode': False, 'success': False, 'resultCode': 60017, 'orderId': 0, 'submitSkuNum': 0, 'deductMoneyFlag': 0, 'goJumpOrderCenter': False, 'payInfo': None, 'scaleSkuInfoListVO': None, 'purchaseSkuInfoListVO': None, 'noSupportHomeServiceSkuList': None, 'msgMobile': None, 'addressVO': None, 'msgUuid': None, 'message': '您多次提交过快，请稍后再试'}\n            # {'overSea': False, 'orderXml': None, 'cartXml': None, 'noStockSkuIds': '', 'reqInfo': None, 'hasJxj': False, 'addedServiceList': None, 'sign': None, 'pin': 'xxx', 'needCheckCode': False, 'success': False, 'resultCode': 60077, 'orderId': 0, 'submitSkuNum': 0, 'deductMoneyFlag': 0, 'goJumpOrderCenter': False, 'payInfo': None, 'scaleSkuInfoListVO': None, 'purchaseSkuInfoListVO': None, 'noSupportHomeServiceSkuList': None, 'msgMobile': None, 'addressVO': None, 'msgUuid': None, 'message': '获取用户订单信息失败'}\n            # {\"cartXml\":null,\"noStockSkuIds\":\"xxx\",\"reqInfo\":null,\"hasJxj\":false,\"addedServiceList\":null,\"overSea\":false,\"orderXml\":null,\"sign\":null,\"pin\":\"xxx\",\"needCheckCode\":false,\"success\":false,\"resultCode\":600157,\"orderId\":0,\"submitSkuNum\":0,\"deductMoneyFlag\":0,\"goJumpOrderCenter\":false,\"payInfo\":null,\"scaleSkuInfoListVO\":null,\"purchaseSkuInfoListVO\":null,\"noSupportHomeServiceSkuList\":null,\"msgMobile\":null,\"addressVO\":{\"pin\":\"xxx\",\"areaName\":\"\",\"provinceId\":xx,\"cityId\":xx,\"countyId\":xx,\"townId\":xx,\"paymentId\":0,\"selected\":false,\"addressDetail\":\"xx\",\"mobile\":\"xx\",\"idCard\":\"\",\"phone\":null,\"email\":null,\"selfPickMobile\":null,\"selfPickPhone\":null,\"provinceName\":null,\"cityName\":null,\"countyName\":null,\"townName\":null,\"giftSenderConsigneeName\":null,\"giftSenderConsigneeMobile\":null,\"gcLat\":0.0,\"gcLng\":0.0,\"coord_type\":0,\"longitude\":0.0,\"latitude\":0.0,\"selfPickOptimize\":0,\"consigneeId\":0,\"selectedAddressType\":0,\"siteType\":0,\"helpMessage\":null,\"tipInfo\":null,\"cabinetAvailable\":true,\"limitKeyword\":0,\"specialRemark\":null,\"siteProvinceId\":0,\"siteCityId\":0,\"siteCountyId\":0,\"siteTownId\":0,\"skuSupported\":false,\"addressSupported\":0,\"isCod\":0,\"consigneeName\":null,\"pickVOname\":null,\"shipmentType\":0,\"retTag\":0,\"tagSource\":0,\"userDefinedTag\":null,\"newProvinceId\":0,\"newCityId\":0,\"newCountyId\":0,\"newTownId\":0,\"newProvinceName\":null,\"newCityName\":null,\"newCountyName\":null,\"newTownName\":null,\"checkLevel\":0,\"optimizePickID\":0,\"pickType\":0,\"dataSign\":0,\"overseas\":0,\"areaCode\":null,\"nameCode\":null,\"appSelfPickAddress\":0,\"associatePickId\":0,\"associateAddressId\":0,\"appId\":null,\"encryptText\":null,\"certNum\":null,\"used\":false,\"oldAddress\":false,\"mapping\":false,\"addressType\":0,\"fullAddress\":\"xxxx\",\"postCode\":null,\"addressDefault\":false,\"addressName\":null,\"selfPickAddressShuntFlag\":0,\"pickId\":0,\"pickName\":null,\"pickVOselected\":false,\"mapUrl\":null,\"branchId\":0,\"canSelected\":false,\"address\":null,\"name\":\"xxx\",\"message\":null,\"id\":0},\"msgUuid\":null,\"message\":\"xxxxxx商品无货\"}\n            # {'orderXml': None, 'overSea': False, 'noStockSkuIds': 'xxx', 'reqInfo': None, 'hasJxj': False, 'addedServiceList': None, 'cartXml': None, 'sign': None, 'pin': 'xxx', 'needCheckCode': False, 'success': False, 'resultCode': 600158, 'orderId': 0, 'submitSkuNum': 0, 'deductMoneyFlag': 0, 'goJumpOrderCenter': False, 'payInfo': None, 'scaleSkuInfoListVO': None, 'purchaseSkuInfoListVO': None, 'noSupportHomeServiceSkuList': None, 'msgMobile': None, 'addressVO': {'oldAddress': False, 'mapping': False, 'pin': 'xxx', 'areaName': '', 'provinceId': xx, 'cityId': xx, 'countyId': xx, 'townId': xx, 'paymentId': 0, 'selected': False, 'addressDetail': 'xxxx', 'mobile': 'xxxx', 'idCard': '', 'phone': None, 'email': None, 'selfPickMobile': None, 'selfPickPhone': None, 'provinceName': None, 'cityName': None, 'countyName': None, 'townName': None, 'giftSenderConsigneeName': None, 'giftSenderConsigneeMobile': None, 'gcLat': 0.0, 'gcLng': 0.0, 'coord_type': 0, 'longitude': 0.0, 'latitude': 0.0, 'selfPickOptimize': 0, 'consigneeId': 0, 'selectedAddressType': 0, 'newCityName': None, 'newCountyName': None, 'newTownName': None, 'checkLevel': 0, 'optimizePickID': 0, 'pickType': 0, 'dataSign': 0, 'overseas': 0, 'areaCode': None, 'nameCode': None, 'appSelfPickAddress': 0, 'associatePickId': 0, 'associateAddressId': 0, 'appId': None, 'encryptText': None, 'certNum': None, 'addressType': 0, 'fullAddress': 'xxxx', 'postCode': None, 'addressDefault': False, 'addressName': None, 'selfPickAddressShuntFlag': 0, 'pickId': 0, 'pickName': None, 'pickVOselected': False, 'mapUrl': None, 'branchId': 0, 'canSelected': False, 'siteType': 0, 'helpMessage': None, 'tipInfo': None, 'cabinetAvailable': True, 'limitKeyword': 0, 'specialRemark': None, 'siteProvinceId': 0, 'siteCityId': 0, 'siteCountyId': 0, 'siteTownId': 0, 'skuSupported': False, 'addressSupported': 0, 'isCod': 0, 'consigneeName': None, 'pickVOname': None, 'shipmentType': 0, 'retTag': 0, 'tagSource': 0, 'userDefinedTag': None, 'newProvinceId': 0, 'newCityId': 0, 'newCountyId': 0, 'newTownId': 0, 'newProvinceName': None, 'used': False, 'address': None, 'name': 'xx', 'message': None, 'id': 0}, 'msgUuid': None, 'message': 'xxxxxx商品无货'}\n            # 下单成功\n            # {'overSea': False, 'orderXml': None, 'cartXml': None, 'noStockSkuIds': '', 'reqInfo': None, 'hasJxj': False, 'addedServiceList': None, 'sign': None, 'pin': 'xxx', 'needCheckCode': False, 'success': True, 'resultCode': 0, 'orderId': 8740xxxxx, 'submitSkuNum': 1, 'deductMoneyFlag': 0, 'goJumpOrderCenter': False, 'payInfo': None, 'scaleSkuInfoListVO': None, 'purchaseSkuInfoListVO': None, 'noSupportHomeServiceSkuList': None, 'msgMobile': None, 'addressVO': None, 'msgUuid': None, 'message': None}\n\n            if resp_json.get('success'):\n                order_id = resp_json.get('orderId')\n                logger.info('订单提交成功! 订单号：%s', order_id)\n                if self.send_message:\n                    self.messenger.send(text='jd-assistant 订单提交成功', desp='订单号：%s' % order_id)\n                return True\n            else:\n                message, result_code = resp_json.get('message'), resp_json.get('resultCode')\n                if result_code == 0:\n                    self._save_invoice()\n                    message = message + '(下单商品可能为第三方商品，将切换为普通发票进行尝试)'\n                elif result_code == 60077:\n                    message = message + '(可能是购物车为空 或 未勾选购物车中商品)'\n                elif result_code == 60123:\n                    message = message + '(需要在config.ini文件中配置支付密码)'\n                logger.info('订单提交失败, 错误码：%s, 返回信息：%s', result_code, message)\n                logger.info(resp_json)\n                return False\n        except Exception as e:\n            logger.error(e)\n            return False\n\n    @check_login\n    def submit_order_with_retry(self, retry=3, interval=4):\n        \"\"\"提交订单，并且带有重试功能\n        :param retry: 重试次数\n        :param interval: 重试间隔\n        :return: 订单提交结果 True/False\n        \"\"\"\n        for i in range(1, retry + 1):\n            logger.info('第[%s/%s]次尝试提交订单', i, retry)\n            self.get_checkout_page_detail()\n            if self.submit_order():\n                logger.info('第%s次提交订单成功', i)\n                return True\n            else:\n                if i < retry:\n                    logger.info('第%s次提交失败，%ss后重试', i, interval)\n                    time.sleep(interval)\n        else:\n            logger.info('重试提交%s次结束', retry)\n            return False\n\n    @check_login\n    def submit_order_by_time(self, buy_time, retry=4, interval=5):\n        \"\"\"定时提交商品订单\n\n        重要：该方法只适用于普通商品的提交订单，事先需要先将商品加入购物车并勾选✓。\n\n        :param buy_time: 下单时间，例如：'2018-09-28 22:45:50.000'\n        :param retry: 下单重复执行次数，可选参数，默认4次\n        :param interval: 下单执行间隔，可选参数，默认5秒\n        :return:\n        \"\"\"\n        t = Timer(buy_time=buy_time)\n        t.start()\n\n        for count in range(1, retry + 1):\n            logger.info('第[%s/%s]次尝试提交订单', count, retry)\n            if self.submit_order():\n                break\n            logger.info('休息%ss', interval)\n            time.sleep(interval)\n        else:\n            logger.info('执行结束，提交订单失败！')\n\n    @check_login\n    def get_order_info(self, unpaid=True):\n        \"\"\"查询订单信息\n        :param unpaid: 只显示未付款订单，可选参数，默认为True\n        :return:\n        \"\"\"\n        url = 'https://order.jd.com/center/list.action'\n        payload = {\n            'search': 0,\n            'd': 1,\n            's': 4096,\n        }  # Orders for nearly three months\n        headers = {\n            'User-Agent': self.user_agent,\n            'Referer': 'https://passport.jd.com/uc/login?ltype=logout',\n        }\n\n        try:\n            resp = self.sess.get(url=url, params=payload, headers=headers)\n            if not response_status(resp):\n                logger.error('获取订单页信息失败')\n                return\n            soup = BeautifulSoup(resp.text, \"html.parser\")\n\n            logger.info('************************订单列表页查询************************')\n            order_table = soup.find('table', {'class': 'order-tb'})\n            table_bodies = order_table.select('tbody')\n            exist_order = False\n            for table_body in table_bodies:\n                # get order status\n                order_status = get_tag_value(table_body.select('span.order-status')).replace(\"订单状态：\", \"\")\n\n                # check if order is waiting for payment\n                # wait_payment = bool(table_body.select('a.btn-pay'))\n                wait_payment = \"等待付款\" in order_status\n\n                # only show unpaid orders if unpaid=True\n                if unpaid and (not wait_payment):\n                    continue\n\n                exist_order = True\n\n                # get order_time, order_id\n                tr_th = table_body.select('tr.tr-th')[0]\n                order_time = get_tag_value(tr_th.select('span.dealtime'))\n                order_id = get_tag_value(tr_th.select('span.number a'))\n\n                # get sum_price, pay_method\n                sum_price = ''\n                pay_method = ''\n                amount_div = table_body.find('div', {'class': 'amount'})\n                if amount_div:\n                    spans = amount_div.select('span')\n                    pay_method = get_tag_value(spans, index=1)\n                    # if the order is waiting for payment, the price after the discount is shown.\n                    sum_price = get_tag_value(amount_div.select('strong'), index=1)[1:] if wait_payment \\\n                        else get_tag_value(spans, index=0)[4:]\n\n                # get name and quantity of items in order\n                items_dict = dict()  # {'item_id_1': quantity_1, 'item_id_2': quantity_2, ...}\n                tr_bds = table_body.select('tr.tr-bd')\n                for tr_bd in tr_bds:\n                    item = tr_bd.find('div', {'class': 'goods-item'})\n                    if not item:\n                        break\n                    item_id = item.get('class')[1][2:]\n                    quantity = get_tag_value(tr_bd.select('div.goods-number'))[1:]\n                    items_dict[item_id] = quantity\n\n                order_info_format = '下单时间:{0}----订单号:{1}----商品列表:{2}----订单状态:{3}----总金额:{4}元----付款方式:{5}'\n                logger.info(order_info_format.format(order_time, order_id, parse_items_dict(items_dict), order_status,\n                                                     sum_price, pay_method))\n\n            if not exist_order:\n                logger.info('订单查询为空')\n        except Exception as e:\n            logger.error(e)\n\n    @deprecated\n    def _get_seckill_url(self, sku_id):\n        \"\"\"获取商品的抢购链接\n\n        点击\"抢购\"按钮后，会有两次302跳转，最后到达订单结算页面\n        这里返回第一次跳转后的页面url，作为商品的抢购链接\n\n        :param sku_id: 商品id\n        :return: 商品的抢购链接\n        \"\"\"\n        url = 'https://itemko.jd.com/itemShowBtn'\n        payload = {\n            'callback': 'jQuery{}'.format(random.randint(1000000, 9999999)),\n            'skuId': sku_id,\n            'from': 'pc',\n            '_': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Host': 'itemko.jd.com',\n            'Referer': 'https://item.jd.com/{}.html'.format(sku_id),\n        }\n        retry_interval = 0.5\n\n        while True:\n            resp = self.sess.get(url=url, headers=headers, params=payload)\n            resp_json = parse_json(resp.text)\n            if resp_json.get('url'):\n                # https://divide.jd.com/user_routing?skuId=8654289&sn=c3f4ececd8461f0e4d7267e96a91e0e0&from=pc\n                router_url = 'https:' + resp_json.get('url')\n                # https://marathon.jd.com/captcha.html?skuId=8654289&sn=c3f4ececd8461f0e4d7267e96a91e0e0&from=pc\n                seckill_url = router_url.replace('divide', 'marathon').replace('user_routing', 'captcha.html')\n                logger.info(\"抢购链接获取成功: %s\", seckill_url)\n                return seckill_url\n            else:\n                logger.info(\"抢购链接获取失败，%s不是抢购商品或抢购页面暂未刷新，%s秒后重试\", sku_id, retry_interval)\n                time.sleep(retry_interval)\n\n    @deprecated\n    def request_seckill_url(self, sku_id):\n        \"\"\"访问商品的抢购链接（用于设置cookie等）\n        :param sku_id: 商品id\n        :return:\n        \"\"\"\n        if not self.seckill_url.get(sku_id):\n            self.seckill_url[sku_id] = self._get_seckill_url(sku_id)\n        headers = {\n            'User-Agent': self.user_agent,\n            'Host': 'marathon.jd.com',\n            'Referer': 'https://item.jd.com/{}.html'.format(sku_id),\n        }\n        self.sess.get(url=self.seckill_url.get(sku_id), headers=headers, allow_redirects=False)\n\n    @deprecated\n    def request_seckill_checkout_page(self, sku_id, num=1):\n        \"\"\"访问抢购订单结算页面\n        :param sku_id: 商品id\n        :param num: 购买数量，可选参数，默认1个\n        :return:\n        \"\"\"\n        url = 'https://marathon.jd.com/seckill/seckill.action'\n        payload = {\n            'skuId': sku_id,\n            'num': num,\n            'rid': int(time.time())\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Host': 'marathon.jd.com',\n            'Referer': 'https://item.jd.com/{}.html'.format(sku_id),\n        }\n        self.sess.get(url=url, params=payload, headers=headers)\n\n    @deprecated\n    def _get_seckill_init_info(self, sku_id, num=1):\n        \"\"\"获取秒杀初始化信息（包括：地址，发票，token）\n        :param sku_id:\n        :param num: 购买数量，可选参数，默认1个\n        :return: 初始化信息组成的dict\n        \"\"\"\n        url = 'https://marathon.jd.com/seckillnew/orderService/pc/init.action'\n        data = {\n            'sku': sku_id,\n            'num': num,\n            'isModifyAddress': 'false',\n        }\n        headers = {\n            'User-Agent': self.user_agent,\n            'Host': 'marathon.jd.com',\n        }\n        resp = self.sess.post(url=url, data=data, headers=headers)\n        return parse_json(resp.text)\n\n    @deprecated\n    def _gen_seckill_order_data(self, sku_id, num=1):\n        \"\"\"生成提交抢购订单所需的请求体参数\n        :param sku_id: 商品id\n        :param num: 购买数量，可选参数，默认1个\n        :return: 请求体参数组成的dict\n        \"\"\"\n\n        # 获取用户秒杀初始化信息\n        if not self.seckill_init_info.get(sku_id):\n            self.seckill_init_info[sku_id] = self._get_seckill_init_info(sku_id)\n\n        init_info = self.seckill_init_info.get(sku_id)\n        default_address = init_info['addressList'][0]  # 默认地址dict\n        invoice_info = init_info.get('invoiceInfo', {})  # 默认发票信息dict, 有可能不返回\n        token = init_info['token']\n\n        data = {\n            'skuId': sku_id,\n            'num': num,\n            'addressId': default_address['id'],\n            'yuShou': str(bool(int(init_info['seckillSkuVO']['extMap'].get('YuShou', '0')))).lower(),\n            'isModifyAddress': 'false',\n            'name': default_address['name'],\n            'provinceId': default_address['provinceId'],\n            'cityId': default_address['cityId'],\n            'countyId': default_address['countyId'],\n            'townId': default_address['townId'],\n            'addressDetail': default_address['addressDetail'],\n            'mobile': default_address['mobile'],\n            'mobileKey': default_address['mobileKey'],\n            'email': default_address.get('email', ''),\n            'postCode': '',\n            'invoiceTitle': invoice_info.get('invoiceTitle', -1),\n            'invoiceCompanyName': '',\n            'invoiceContent': invoice_info.get('invoiceContentType', 1),\n            'invoiceTaxpayerNO': '',\n            'invoiceEmail': '',\n            'invoicePhone': invoice_info.get('invoicePhone', ''),\n            'invoicePhoneKey': invoice_info.get('invoicePhoneKey', ''),\n            'invoice': 'true' if invoice_info else 'false',\n            'password': global_config.get('account', 'payment_pwd'),\n            'codTimeType': 3,\n            'paymentType': 4,\n            'areaCode': '',\n            'overseas': 0,\n            'phone': '',\n            'eid': self.eid,\n            'fp': self.fp,\n            'token': token,\n            'pru': ''\n        }\n        return data\n\n    @deprecated\n    def submit_seckill_order(self, sku_id, num=1):\n        \"\"\"提交抢购（秒杀）订单\n        :param sku_id: 商品id\n        :param num: 购买数量，可选参数，默认1个\n        :return: 抢购结果 True/False\n        \"\"\"\n        url = 'https://marathon.jd.com/seckillnew/orderService/pc/submitOrder.action'\n        payload = {\n            'skuId': sku_id,\n        }\n        if not self.seckill_order_data.get(sku_id):\n            self.seckill_order_data[sku_id] = self._gen_seckill_order_data(sku_id, num)\n\n        headers = {\n            'User-Agent': self.user_agent,\n            'Host': 'marathon.jd.com',\n            'Referer': 'https://marathon.jd.com/seckill/seckill.action?skuId={0}&num={1}&rid={2}'.format(\n                sku_id, num, int(time.time())),\n        }\n\n        resp_json = None\n        try:\n            resp = self.sess.post(url=url, headers=headers, params=payload,\n                                  data=self.seckill_order_data.get(sku_id), timeout=5)\n            logger.info(resp.text)\n            resp_json = parse_json(resp.text)\n        except Exception as e:\n            logger.error('秒杀请求出错：%s', str(e))\n            return False\n        # 返回信息\n        # 抢购失败：\n        # {'errorMessage': '很遗憾没有抢到，再接再厉哦。', 'orderId': 0, 'resultCode': 60074, 'skuId': 0, 'success': False}\n        # {'errorMessage': '抱歉，您提交过快，请稍后再提交订单！', 'orderId': 0, 'resultCode': 60017, 'skuId': 0, 'success': False}\n        # {'errorMessage': '系统正在开小差，请重试~~', 'orderId': 0, 'resultCode': 90013, 'skuId': 0, 'success': False}\n        # 抢购成功：\n        # {\"appUrl\":\"xxxxx\",\"orderId\":820227xxxxx,\"pcUrl\":\"xxxxx\",\"resultCode\":0,\"skuId\":0,\"success\":true,\"totalMoney\":\"xxxxx\"}\n\n        if resp_json.get('success'):\n            order_id = resp_json.get('orderId')\n            total_money = resp_json.get('totalMoney')\n            pay_url = 'https:' + resp_json.get('pcUrl')\n            logger.info('抢购成功，订单号: %s, 总价: %s, 电脑端付款链接: %s', order_id, total_money, pay_url)\n            return True\n        else:\n            logger.info('抢购失败，返回信息: %s', resp_json)\n            return False\n\n    @deprecated\n    def exec_seckill(self, sku_id, retry=4, interval=4, num=1, fast_mode=True):\n        \"\"\"立即抢购\n\n        抢购商品的下单流程与普通商品不同，不支持加入购物车，可能需要提前预约，主要执行流程如下：\n        1. 访问商品的抢购链接\n        2. 访问抢购订单结算页面（好像可以省略这步，待测试）\n        3. 提交抢购（秒杀）订单\n\n        :param sku_id: 商品id\n        :param retry: 抢购重复执行次数，可选参数，默认4次\n        :param interval: 抢购执行间隔，可选参数，默认4秒\n        :param num: 购买数量，可选参数，默认1个\n        :param fast_mode: 快速模式：略过访问抢购订单结算页面这一步骤，默认为 True\n        :return: 抢购结果 True/False\n        \"\"\"\n        for count in range(1, retry + 1):\n            logger.info('第[%s/%s]次尝试抢购商品:%s', count, retry, sku_id)\n\n            self.request_seckill_url(sku_id)\n            if not fast_mode:\n                self.request_seckill_checkout_page(sku_id, num)\n\n            if self.submit_seckill_order(sku_id, num):\n                return True\n            else:\n                logger.info('休息%ss', interval)\n                time.sleep(interval)\n        else:\n            logger.info('执行结束，抢购%s失败！', sku_id)\n            return False\n\n    @deprecated\n    def exec_seckill_by_time(self, sku_ids, buy_time, retry=4, interval=4, num=1, fast_mode=True):\n        \"\"\"定时抢购\n        :param sku_ids: 商品id，多个商品id用逗号进行分割，如\"123,456,789\"\n        :param buy_time: 下单时间，例如：'2018-09-28 22:45:50.000'\n        :param retry: 抢购重复执行次数，可选参数，默认4次\n        :param interval: 抢购执行间隔，可选参数，默认4秒\n        :param num: 购买数量，可选参数，默认1个\n        :param fast_mode: 快速模式：略过访问抢购订单结算页面这一步骤，默认为 True\n        :return:\n        \"\"\"\n        items_dict = parse_sku_id(sku_ids=sku_ids)\n        logger.info('准备抢购商品:%s', list(items_dict.keys()))\n\n        t = Timer(buy_time=buy_time)\n        t.start()\n\n        for sku_id in items_dict:\n            logger.info('开始抢购商品:%s', sku_id)\n            self.exec_seckill(sku_id, retry, interval, num, fast_mode)\n\n    @check_login\n    def exec_reserve_seckill_by_time(self, sku_id, buy_time, retry=4, interval=4, num=1):\n        \"\"\"定时抢购`预约抢购商品`\n\n        预约抢购商品特点：\n            1.需要提前点击预约\n            2.大部分此类商品在预约后自动加入购物车，在购物车中可见但无法勾选✓，也无法进入到结算页面（重要特征）\n            3.到了抢购的时间点后，才能勾选并结算下单\n\n        注意：\n            1.请在抢购开始前手动清空购物车中此类无法勾选的商品！（因为脚本在执行清空购物车操作时，无法清空不能勾选的商品）\n\n        :param sku_id: 商品id\n        :param buy_time: 下单时间，例如：'2018-09-28 22:45:50.000'\n        :param retry: 抢购重复执行次数，可选参数，默认4次\n        :param interval: 抢购执行间隔，可选参数，默认4秒\n        :param num: 购买数量，可选参数，默认1个\n        :return:\n        \"\"\"\n\n        t = Timer(buy_time=buy_time)\n        t.start()\n\n        self.add_item_to_cart(sku_ids={sku_id: num})\n\n        for count in range(1, retry + 1):\n            logger.info('第[%s/%s]次尝试提交订单', count, retry)\n            if self.submit_order():\n                break\n            logger.info('休息%ss', interval)\n            time.sleep(interval)\n        else:\n            logger.info('执行结束，提交订单失败！')\n\n    @check_login\n    def buy_item_in_stock(self, sku_ids, area, wait_all=False, stock_interval=3, submit_retry=3, submit_interval=5):\n        \"\"\"根据库存自动下单商品\n        :param sku_ids: 商品id。可以设置多个商品，也可以带数量，如：'1234' 或 '1234,5678' 或 '1234:2' 或 '1234:2,5678:3'\n        :param area: 地区id\n        :param wait_all: 是否等所有商品都有货才一起下单，可选参数，默认False\n        :param stock_interval: 查询库存时间间隔，可选参数，默认3秒\n        :param submit_retry: 提交订单失败后重试次数，可选参数，默认3次\n        :param submit_interval: 提交订单失败后重试时间间隔，可选参数，默认5秒\n        :return:\n        \"\"\"\n        items_dict = parse_sku_id(sku_ids)\n        items_list = list(items_dict.keys())\n        area_id = parse_area_id(area=area)\n\n        if not wait_all:\n            logger.info('下单模式：%s 任一商品有货并且未下架均会尝试下单', items_list)\n            while True:\n                for (sku_id, count) in items_dict.items():\n                    if not self.if_item_can_be_ordered(sku_ids={sku_id: count}, area=area_id):\n                        logger.info('%s 不满足下单条件，%ss后进行下一次查询', sku_id, stock_interval)\n                    else:\n                        logger.info('%s 满足下单条件，开始执行', sku_id)\n                        self._cancel_select_all_cart_item()\n                        self._add_or_change_cart_item(self.get_cart_detail(), sku_id, count)\n                        if self.submit_order_with_retry(submit_retry, submit_interval):\n                            return\n\n                    time.sleep(stock_interval)\n        else:\n            logger.info('下单模式：%s 所有都商品同时有货并且未下架才会尝试下单', items_list)\n            while True:\n                if not self.if_item_can_be_ordered(sku_ids=sku_ids, area=area_id):\n                    logger.info('%s 不满足下单条件，%ss后进行下一次查询', items_list, stock_interval)\n                else:\n                    logger.info('%s 满足下单条件，开始执行', items_list)\n                    self._cancel_select_all_cart_item()\n                    shopping_cart = self.get_cart_detail()\n                    for (sku_id, count) in items_dict.items():\n                        self._add_or_change_cart_item(shopping_cart, sku_id, count)\n\n                    if self.submit_order_with_retry(submit_retry, submit_interval):\n                        return\n\n                time.sleep(stock_interval)\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "log.py",
          "type": "blob",
          "size": 0.619140625,
          "content": "#!/usr/bin/env python\n# -*- encoding=utf8 -*-\nimport logging\nimport logging.handlers\n\nLOG_FILENAME = 'jd-assistant.log'\n\nlogger = logging.getLogger()\n\n\ndef set_logger():\n    logger.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')\n\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)\n\n    file_handler = logging.handlers.RotatingFileHandler(\n        LOG_FILENAME, maxBytes=10485760, backupCount=5, encoding=\"utf-8\")\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n\nset_logger()\n"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 1.1181640625,
          "content": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nfrom jd_assistant import Assistant\n\nif __name__ == '__main__':\n    \"\"\"\n    重要提示：此处为示例代码之一，请移步下面的链接查看使用教程👇\n    https://github.com/tychxn/jd-assistant/wiki/1.-%E4%BA%AC%E4%B8%9C%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8B%E7%94%A8%E6%B3%95\n    \"\"\"\n\n    sku_ids = '100001324422'  # 商品id\n    area = '1_72_4211'  # 区域id\n    asst = Assistant()  # 初始化\n    asst.login_by_QRcode()  # 扫码登陆\n    asst.buy_item_in_stock(sku_ids=sku_ids, area=area, wait_all=False, stock_interval=5)  # 根据商品是否有货自动下单\n    # 6个参数：\n    # sku_ids: 商品id。可以设置多个商品，也可以带数量，如：'1234' 或 '1234,5678' 或 '1234:2' 或 '1234:2,5678:3'\n    # area: 地区id\n    # wait_all: 是否等所有商品都有货才一起下单，可选参数，默认False\n    # stock_interval: 查询库存时间间隔，可选参数，默认3秒\n    # submit_retry: 提交订单失败后重试次数，可选参数，默认3次\n    # submit_interval: 提交订单失败后重试时间间隔，可选参数，默认5秒\n"
        },
        {
          "name": "messenger.py",
          "type": "blob",
          "size": 1.26953125,
          "content": "#!/usr/bin/env python\n# -*- encoding=utf8 -*-\nimport datetime\nimport json\n\nimport requests\n\nfrom exception import AsstException\nfrom log import logger\n\n\nclass Messenger(object):\n    \"\"\"消息推送类\"\"\"\n\n    def __init__(self, sc_key):\n        if not sc_key:\n            raise AsstException('sc_key can not be empty')\n\n        self.sc_key = sc_key\n\n    def send(self, text, desp=''):\n        if not text.strip():\n            logger.error('Text of message is empty!')\n            return\n\n        now_time = str(datetime.datetime.now())\n        desp = '[{0}]'.format(now_time) if not desp else '{0} [{1}]'.format(desp, now_time)\n\n        try:\n            resp = requests.get(\n                'https://sc.ftqq.com/{}.send?text={}&desp={}'.format(self.sc_key, text, desp)\n            )\n            resp_json = json.loads(resp.text)\n            if resp_json.get('errno') == 0:\n                logger.info('Message sent successfully [text: %s, desp: %s]', text, desp)\n            else:\n                logger.error('Fail to send message, reason: %s', resp.text)\n        except requests.exceptions.RequestException as req_error:\n            logger.error('Request error: %s', req_error)\n        except Exception as e:\n            logger.error('Fail to send message [text: %s, desp: %s]: %s', text, desp, e)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.046875,
          "content": "bs4==0.0.1\nrequests>=2.20.0\npycryptodome==3.6.6\n"
        },
        {
          "name": "timer.py",
          "type": "blob",
          "size": 0.6533203125,
          "content": "# -*- coding:utf-8 -*-\nimport time\nfrom datetime import datetime\n\nfrom log import logger\n\n\nclass Timer(object):\n\n    def __init__(self, buy_time, sleep_interval=0.5):\n\n        # '2018-09-28 22:45:50.000'\n        self.buy_time = datetime.strptime(buy_time, \"%Y-%m-%d %H:%M:%S.%f\")\n        self.sleep_interval = sleep_interval\n\n    def start(self):\n        logger.info('正在等待到达设定时间:%s' % self.buy_time)\n        now_time = datetime.now\n        while True:\n            if now_time() >= self.buy_time:\n                logger.info('时间到达，开始执行……')\n                break\n            else:\n                time.sleep(self.sleep_interval)\n"
        },
        {
          "name": "util.py",
          "type": "blob",
          "size": 10.9912109375,
          "content": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport functools\nimport json\nimport os\nimport random\nimport re\nimport warnings\nfrom base64 import b64encode\n\nimport requests\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5\n\nfrom log import logger\n\nRSA_PUBLIC_KEY = \"\"\"-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDC7kw8r6tq43pwApYvkJ5lalja\nN9BZb21TAIfT/vexbobzH7Q8SUdP5uDPXEBKzOjx2L28y7Xs1d9v3tdPfKI2LR7P\nAzWBmDMn8riHrDDNpUpJnlAGUqJG9ooPn8j7YNpcxCa1iybOlc2kEhmJn5uwoanQ\nq+CA6agNkqly2H4j6wIDAQAB\n-----END PUBLIC KEY-----\"\"\"\n\nDEFAULT_TIMEOUT = 10\n\nDEFAULT_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'\n\nUSER_AGENTS = [\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.4; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2224.3 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 4.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36\",\n    \"Mozilla/5.0 (X11; OpenBSD i386) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.3319.102 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2117.157 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/4E423F\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36 Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.517 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1664.3 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1664.3 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1623.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.17 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36\",\n    \"Mozilla/5.0 (X11; CrOS i686 4319.74.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.2 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1468.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1464.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1500.55 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.90 Safari/537.36\",\n    \"Mozilla/5.0 (X11; NetBSD) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36\",\n    \"Mozilla/5.0 (X11; CrOS i686 3912.101.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.60 Safari/537.17\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1309.0 Safari/537.17\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.14 (KHTML, like Gecko) Chrome/24.0.1292.0 Safari/537.14\"\n]\n\n\ndef encrypt_pwd(password, public_key=RSA_PUBLIC_KEY):\n    rsa_key = RSA.importKey(public_key)\n    encryptor = Cipher_pkcs1_v1_5.new(rsa_key)\n    cipher = b64encode(encryptor.encrypt(password.encode('utf-8')))\n    return cipher.decode('utf-8')\n\n\ndef encrypt_payment_pwd(payment_pwd):\n    return ''.join(['u3' + x for x in payment_pwd])\n\n\ndef response_status(resp):\n    if resp.status_code != requests.codes.OK:\n        print('Status: %u, Url: %s' % (resp.status_code, resp.url))\n        return False\n    return True\n\n\ndef open_image(image_file):\n    if os.name == \"nt\":\n        os.system('start ' + image_file)  # for Windows\n    else:\n        if os.uname()[0] == \"Linux\":\n            if \"deepin\" in os.uname()[2]:\n                os.system(\"deepin-image-viewer \" + image_file)  # for deepin\n            else:\n                os.system(\"eog \" + image_file)  # for Linux\n        else:\n            os.system(\"open \" + image_file)  # for Mac\n\n\ndef save_image(resp, image_file):\n    with open(image_file, 'wb') as f:\n        for chunk in resp.iter_content(chunk_size=1024):\n            f.write(chunk)\n\n\ndef parse_json(s):\n    begin = s.find('{')\n    end = s.rfind('}') + 1\n    return json.loads(s[begin:end])\n\n\ndef get_tag_value(tag, key='', index=0):\n    if key:\n        value = tag[index].get(key)\n    else:\n        value = tag[index].text\n    return value.strip(' \\t\\r\\n')\n\n\ndef parse_items_dict(d):\n    result = ''\n    for index, key in enumerate(d):\n        if index < len(d) - 1:\n            result = result + '{0} x {1}, '.format(key, d[key])\n        else:\n            result = result + '{0} x {1}'.format(key, d[key])\n    return result\n\n\ndef parse_sku_id(sku_ids):\n    \"\"\"将商品id字符串解析为字典\n\n    商品id字符串采用英文逗号进行分割。\n    可以在每个id后面用冒号加上数字，代表该商品的数量，如果不加数量则默认为1。\n\n    例如：\n    输入  -->  解析结果\n    '123456' --> {'123456': '1'}\n    '123456,123789' --> {'123456': '1', '123789': '1'}\n    '123456:1,123789:3' --> {'123456': '1', '123789': '3'}\n    '123456:2,123789' --> {'123456': '2', '123789': '1'}\n\n    :param sku_ids: 商品id字符串\n    :return: dict\n    \"\"\"\n    if isinstance(sku_ids, dict):  # 防止重复解析\n        return sku_ids\n\n    sku_id_list = list(filter(bool, map(lambda x: x.strip(), sku_ids.split(','))))\n    result = dict()\n    for item in sku_id_list:\n        if ':' in item:\n            sku_id, count = map(lambda x: x.strip(), item.split(':'))\n            result[sku_id] = count\n        else:\n            result[item] = '1'\n    return result\n\n\ndef parse_area_id(area):\n    \"\"\"解析地区id字符串：将分隔符替换为下划线 _\n    :param area: 地区id字符串（使用 _ 或 - 进行分割），如 12_904_3375 或 12-904-3375\n    :return: 解析后字符串\n    \"\"\"\n    area_id_list = list(map(lambda x: x.strip(), re.split('_|-', area)))\n    area_id_list.extend((4 - len(area_id_list)) * ['0'])\n    return '_'.join(area_id_list)\n\n\ndef split_area_id(area):\n    \"\"\"将地区id字符串按照下划线进行切割，构成数组。数组长度不满4位则用'0'进行填充。\n    :param area: 地区id字符串（使用 _ 或 - 进行分割），如 12_904_3375 或 12-904-3375\n    :return: list\n    \"\"\"\n    area_id_list = list(map(lambda x: x.strip(), re.split('_|-', area)))\n    area_id_list.extend((4 - len(area_id_list)) * ['0'])\n    return area_id_list\n\n\ndef deprecated(func):\n    \"\"\"This decorator is used to mark functions as deprecated.\n    It will result in a warning being emitted when the function is used.\n    \"\"\"\n\n    @functools.wraps(func)\n    def new_func(*args, **kwargs):\n        warnings.simplefilter('always', DeprecationWarning)  # turn off filter\n        warnings.warn(\n            \"Call to deprecated function {}.\".format(func.__name__),\n            category=DeprecationWarning,\n            stacklevel=2\n        )\n        warnings.simplefilter('default', DeprecationWarning)  # reset filter\n        return func(*args, **kwargs)\n\n    return new_func\n\n\ndef check_login(func):\n    \"\"\"用户登陆态校验装饰器。若用户未登陆，则调用扫码登陆\"\"\"\n\n    @functools.wraps(func)\n    def new_func(self, *args, **kwargs):\n        if not self.is_login:\n            logger.info(\"{0} 需登陆后调用，开始扫码登陆\".format(func.__name__))\n            self.login_by_QRcode()\n        return func(self, *args, **kwargs)\n\n    return new_func\n\n\ndef get_random_useragent():\n    \"\"\"生成随机的UserAgent\n    :return: UserAgent字符串\n    \"\"\"\n    return random.choice(USER_AGENTS)\n"
        }
      ]
    }
  ]
}