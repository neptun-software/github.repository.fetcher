{
  "metadata": {
    "timestamp": 1736560536973,
    "page": 141,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "n1nj4sec/pupy",
      "stars": 8530,
      "defaultBranch": "unstable",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.818359375,
          "content": "# Temporary files\n*.pyc\n*.pyo\n.#*\n\n# Generated sources\nclient/sources/import-tab.c\nclient/sources/import-tab.h\nclient/sources/revision.h\nclient/sources-linux/revision.h\nclient/sources-linux/ld_hooks_64.c\nclient/sources-linux/ld_hooks_64d.c\nclient/android_sources/buildozer.spec\n\n# Compiled files\nclient/sources/*.obj\nclient/sources/*.obj\nclient/sources/_pupy*\nclient/sources/resources\n\nclient/sources-linux/*.o\nclient/sources-linux/*.lin\nclient/sources-linux/*.so\nclient/sources-linux/resources\n\npupy/payload_templates/*.toc\npupy/payload_templates/*.dll\npupy/payload_templates/*.exp\npupy/payload_templates/*.lib\npupy/payload_templates/*.zip\npupy/payload_templates/*.exe\npupy/payload_templates/*.lin\npupy/payload_templates/*.lin.so\npupy/payload_templates/*.pyr\n\n# pupy\npupy/.pupy_history\npupy/config\npupy/crypto\npupy/data\npupy/proxy/proxy\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.5078125,
          "content": "[submodule \"pupy/external/LaZagne\"]\n\tpath = pupy/external/LaZagne\n\turl = https://github.com/AlessandroZ/LaZagne\n[submodule \"pupy/external/linux-exploit-suggester\"]\n\tpath = pupy/external/linux-exploit-suggester\n\turl = https://github.com/mzet-/linux-exploit-suggester\n[submodule \"pupy/external/pywerview\"]\n\tpath = pupy/external/pywerview\n\turl = https://github.com/the-useless-one/pywerview.git\n[submodule \"pupy/external/winpty\"]\n\tpath = pupy/external/winpty\n\turl = https://github.com/alxchk/winpty\n[submodule \"pupy/memorpy\"]\n\tpath = pupy/external/memorpy\n\turl = https://github.com/alxchk/memorpy\n[submodule \"pupy/external/mimipy\"]\n\tpath = pupy/external/mimipy\n\turl = https://github.com/n1nj4sec/mimipy.git\n[submodule \"client/android_sources/python-for-android\"]\n\tpath = client/android_sources/python-for-android\n\turl = https://github.com/alxchk/python-for-android.git\n[submodule \"pupy/external/Inveigh\"]\n\tpath = pupy/external/Inveigh\n\turl = https://github.com/Kevin-Robertson/Inveigh.git\n[submodule \"pupy/pupy/external/BeRoot\"]\n\tpath = pupy/external/BeRoot\n\turl = https://github.com/AlessandroZ/BeRoot\n[submodule \"pupy/external/pyopus\"]\n\tpath = pupy/external/pyopus\n\turl = https://github.com/alxchk/pyopus\n[submodule \"pupy/external/WinPwnage\"]\n\tpath = pupy/external/WinPwnage\n\turl = https://github.com/rootm0s/WinPwnage\n[submodule \"pupy/external/wesng\"]\n\tpath = pupy/external/wesng\n\turl = https://github.com/bitsadmin/wesng\n[submodule \"client/sources-linux/injector\"]\n\tpath = client/sources-linux/injector\n\turl = https://github.com/kubo/injector\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.7998046875,
          "content": "language: generic\nservices:\n- docker\nos:\n- linux\nbefore_script:\n  - sudo pip2 install flake8 flake8-per-file-ignores\n  - sudo apt-get install swig libssl-dev python-all-dev\n  - cd $TRAVIS_BUILD_DIR/pupy && python2 -m flake8 .\n  - |\n    docker pull alxchk/tc-windows & docker pull alxchk/tc-linux32 &\n    docker pull alxchk/tc-linux64 & docker pull alxchk/tc-android\nscript:\n  - export TAG=`if [ \"$TRAVIS_BRANCH\" == \"master\" ]; then echo \"latest\"; else echo $TRAVIS_BRANCH; fi`\n  - cd $TRAVIS_BUILD_DIR && ./build-docker-images.sh\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx64*.lin\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx64*.so\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx64*.dll\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx64*.exe\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx86*.lin\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx86*.so\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx86*.dll\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupyx86*.exe\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/pupy.apk\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/windows-amd64.zip\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/windows-x86.zip\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/linux-amd64.zip\n  - ls -l $TRAVIS_BUILD_DIR/pupy/payload_templates/linux-x86.zip\nafter_success:\n- export TAG=`if [ \"$TRAVIS_BRANCH\" == \"master\" ]; then echo \"latest\"; else echo $TRAVIS_BRANCH; fi`\n- |\n  if [ \"$TRAVIS_REPO_SLUG\" = \"alxchk/pupy\" ] && [ -z \"$TRAVIS_PULL_REQUEST_SLUG\" ]; then\n  docker login -u $DOCKER_USER -p $DOCKER_PASS &&\n  cd $TRAVIS_BUILD_DIR/pupy &&\n  docker push alxchk/pupy:$TAG >/dev/null;\n  docker push alxchk/pupy:base-$TAG >/dev/null;\n  fi\nenv:\n  global:\n  - COMMIT=${TRAVIS_COMMIT::8}\n  - secure: gKv5C4ZTnnzOcQiGrbwEgJhE8SPJLCSIYsdDLpDIHk7OjNu+hGp+frygU25w2NlHyV7cReu7glvyphVwmrQ+FyBRtrKysk+HbU59QiVVOD6x8uyDEZ5qG0NeEOoD9ChdgSy2CSl39Pf8IIcCgZIcyNDukxZbGaUr4LpOSRu8E5H1YT9qxpsDHidQkkcYbZLNlVmhBNZ2LlFXZAu7LwSx111dMTPPVY+zRR1VmaXLuqn90p/L5Cn04xcJHMSc9fhIA3ty463KgDMuM4IXYQS1xCxyZwCpYGbHtuZYDvjmrVhQpEidj5ibcnb+ll+9XNr4JYi6ldVRDmv7J/1DOVd9Iw77LJ0SAGvTDGzTMHRz74Er82xa6zu5NkzW98oti6tCYM9QeAGp4QSJnO0WqgG87y3JW0Ponv3suMG60zPAeLYcuiyhmmOy/v3w0Xq1FHsyqSayN4koJDpUJ7DQQDbSv1Nc0MaG9XZaNVAMab0sWaqbgCMkteNN6w72lAVTck6b/NDV2taONOiNJFJIhiOpO4EZ8g4t7j/ZXpBnP9O+//APQ5WeREEcsbS32y2/R6YiHkKlnPDomfm1fJWZh3KUzRur3PbXvpJkc9D+68UYh02oYlodfi9zoDpCn5OymFPYYI9fibmbuZ1aBwlGPsYnYliAXtlEd/W3XMKT1pWdvbI=\n  - secure: HOQ7k4Sf9p3CyNy02lBMH5Ff2OeOXQWElLad9vFg0LTkxfnfkGeWP9K+fAR9Lp3nAAd5QRX/2MaJxJTomVHJSCGqjuqrqkBHBLCs7Fgt+bKx2F3QujoqJY4orZHKxpN7YFwAGF4rRzR5Q24xfvIgrnJNWgAoiEKV9yPEFa8k5pJ37MaTFRmOtkrfsN2bdpRc1uD5jbbccVFHPeTDIUa80JRuMBEVDMjJ+CeQq5il3OJUAEdiK03zPDeoCibQCl7UGQxvaWFpYlCUKw1r7d/roJcwlNnYrM0OnImAx0gAGg68vXfZFh/XHE75J3QA7eD/pQ3VdVH1OIgg2Ke3nqO4XMtl6nJGYjC+3fAzq+BOgqvHcwpNzVf6GIXwUl77Bfe1Hlx4uRrCmjbD769bIQLJeUtwKnp9fTjGC8iHEfxW5LsD3PH31vAWfADTB04puGzUAJaBVNwNlnw+dG15lH/LHvjxhJBze2Sj5Mgd2TyNDS+c6dDcIXBnLaajmxs32t87vWNjXjF0wMvBo9G1WMBH3N8UbIV/TPqaT5nINi9ntmY8wFDstNd6g1C3gtfVNsmA7cqb+AbeL8ezETMxwvTrUpPVAu2VcjomgE0zld4kBFvWVs9RQiBfmkChKEZZ3/5u9F9tRbaEcnQukw7+ULsrBqNbZwC4iHtMo3PYCHE0lk8=\n  - secure: Ro35F3YR2e1vOnDSBTHe9HdUxC7N0CEk9cxNaiOrF34qm8EhS4SJT5pv6rmNWPw8eKctS35NFtHPkkPI1WSsomFxDSd36cq2e2vfO4vrfqojXEvPqeoJMneLV1/cmNUlX8kz3NDxOCyRBaPzF1fhem7QAmdWPZ005JzaZzPysQVXe0eTH5M1JKlLWBKkMgIDb/T0pI/zPq/kJc5V81ci9D7IVe8hlNR6SdSIZ4xOvBfZcPGMRZHew9yMIvI9a81uSplBy1LkX557Udj9n3A/4K5OsY+mrsJRd7Yk1AHB4SPLc2fW9GXiUCTVFCViQFX3YwdcPdbLnHVZbsVE6TfSrgN4GndG2OIkcVNXMgnNYk9bFjRcrXa+i+Oa2nnOQ0eYdvXuW5kGPoeoyJQZZWa9c3fWgt71Ze7eP/6SWIQ4mEyzpbWVHqL8m7aNGvI8/mfqlSk138ZiDYY1Va/IlcWwrBerkQaUz7a/j6sohB2zpua05LNrxW8ZPDhMo0Kq+U+e/x6Qqgc35MnnfhJR8AvA2CRccaxptWBcfzFlJ1CHhLKhdwSA8zfa58vRDnGphwqYO+FF44Tmr1NwRMT3ytHB5GtTSlUjzy0Evmyf81hhI0S+5L2Oeuv1n0sQEf/qS9Tfppuc36gAQClRgmHFgmM5WkIOQy/lyRKDUkM7/JUsE50=\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.3076171875,
          "content": "Copyright (c) 2015, Nicolas VERDIER (contact@n1nj4.eu)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\n\nPupy also uses some code source/libraries from other projects under different licenses. Among these project, you may find :\n\t-For the client part:\n\t\tcf the file client/sources/LICENSES.txt\n\t-For the packages located in pupy/packages/:\n\t\t-VideoCapture by Markus Gritsch (m.gritsch@gmail.com) under the LGPL license.\n\t\t\thttp://videocapture.sourceforge.net/\n\t\t-psutil by Giampaolo Rodola under the BSD license\n\t\t\thttps://github.com/giampaolo/psutil\n\t-For the external libraries in pupy/external/\n\t\t-creddump software is under GPLv3 license, you can see the full license terms in pupy/external/creddump7/COPYING.orig\n\t-For the transports :\n\t\t-obfsproxy software is under the 3-Clause BSD License. Copyright 2013 George Kadianakis\n\t-For the launchers :\n\t\t-SocksiPy - Python SOCKS module. 3-Clause BSD License. Copyright 2006 Dan-Haim. (cf pupy/network/socks.py)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2568359375,
          "content": "# Pupy\n\n[![Build Status](https://api.travis-ci.org/n1nj4sec/pupy.svg?branch=unstable)](https://travis-ci.org/n1nj4sec/pupy)\n\n## Installation\n\nInstallation instructions are on the wiki, in addition to all other documentation. For maximum compatibility, it is recommended to use Docker Compose.\n\n[Refer to the wiki](https://github.com/n1nj4sec/pupy/wiki/Installation)\n\n## Description\n\nPupy is a cross-platform, multi function RAT and post-exploitation tool mainly written in python. It features an all-in-memory execution guideline and leaves a very low footprint. Pupy can communicate using multiple transports, migrate into processes using reflective injection, and load remote python code, python packages and python C-extensions from memory.\n\n## Features\n\n- Windows payload can load the entire Python interpreter from memory using a reflective DLL.\n\t- Pupy does not touch the disk.\n\n- Can be packed into a single .py file and run without any dependencies other than the python standard library on all OSes.\n\t- PyCrypto gets replaced by pure Python AES & RSA implementations when unavailable.\n\n- Reflectively migrate into other processes.\n- Remotely import pure python packages (.py, .pyc) and compiled python C extensions (.pyd, .so) from memory.\n\t- Imported python modules do not touch the disk.\n\n- Easily extensible, modules are simple to write and are sorted by os and category.\n\n- Modules can directly access python objects on the remote client using [rpyc](https://github.com/tomerfiliba/rpyc).\n\n- Access remote objects interactively from the pupy shell and get auto-completion of remote attributes.\n\n- Communication transports are modular and stackable. Exfiltrate data using HTTP over HTTP over AES over XOR, or any combination of the available transports.\n\n- Communicate using obfsproxy [pluggable transports.](https://www.torproject.org/docs/pluggable-transports.html.en)\n\n- Execute noninteractive commands on multiple hosts at once.\n\n- Commands and scripts running on remote hosts are interruptible.\n\n- Auto-completion for commands and arguments.\n\n- Custom config can be defined: command aliases, modules. automatically run at connection, etc.\n\n- Open interactive python shells with auto-completion on the all-in-memory remote python interpreter.\n\n- Interactive shells (cmd.exe, /bin/bash, etc) can be opened remotely.\n\t- Remote shells on Unix & Windows clients have a real tty with all keyboard signals working just like an SSH shell.\n\n- Execute PE executable remotely and from memory.\n\n- Generate payloads in various formats:\n\n| Format | Architecture | Short Name |\n|---|---|---|\nAndroid Package | x86 & ARMv7 | apk\nLinux Binary | x86 | lin_x86\nLinux Binary | x64 | lin_x64\nLinux Shared Object | x86 | so_x86\nLinux Shared Object | x64 | so_x64\nWindows PE Executable | x86 | exe_x86\nWindows PE Executable | x64 | exe_x64\nWindows DLL | x86 | dll_x86\nWindows DLL | x64 | dll_x64\nPython Script | x86 & x64 | py\nPyInstaller | x86 & x64 | pyinst\nPython Oneliner | x86 & x64 | py_oneliner\nPowershell | x86 & x64 | ps1\nPowershell Oneliner | x86 & x64 | ps1_oneliner\nDucky Script | N/A | rubber_ducky\n\n- Deploy in memory from a single command line using python or powershell one-liners.\n\n- Embed \"scriptlets\" in generated payloads to perform some tasks \"offline\" without needing network connectivity (ex: start keylogger, add persistence, execute custom python script, check_vm, etc.)\n\n- Multiple Target Platforms:\n\n| Platform | Support Status |\n|---|---|\nWindows XP | Supported\nWindows 7 | Supported\nWindows 8 | Supported\nWindows 10 | Supported\nLinux | Supported\nMac OSX | Limited Support\nAndroid | Limited Support\n\n## Documentation\n\nAll documentation can be found on the wiki.\n\n[Refer to the wiki](https://github.com/n1nj4sec/pupy/wiki)\n\n## FAQ\n\n> Does the server work on windows?\n\nPupy has not been tested on Windows. Theoretically, it should work on any platform that supports Docker and Docker Compose. However, you will need to adapt the Docker Compose installation instructions for the Windows platform.\n\n> I can't install Pupy. The installation fails.\n\n1. Please refer to the wiki. It is possible that your answer is there.\n2. Search the Github issues and see if your issue was already solved.\n3. If you issue was not solved, open a new issue following the [issue guidelines](https://github.com/n1nj4sec/pupy/wiki/Issue-Guidelines).\n\nIf you do not follow these steps, you issue will be closed.\n\n> Android and/or Mac OSX payloads and modules don't work.\n\nPupy has _limited_ support for Android and OSX. These platforms may not be well maintained and may break intermittently. Some modules (i.e. keylogger) may be missing for these platforms.\n\n## Development\n\nIf some of you want to participate to pupy development, don't hesitate! All help is greatly appreciated and all pull requests will be reviewed.\n\nAlso there is small [note](https://github.com/n1nj4sec/pupy/wiki/Development) about development. Please run flake8 before doing any commits. File with config is [here](pupy/tox.ini).\n\n## Contact\n\n| Platform | Contact Info |\n|---|---|\nEmail | contact@n1nj4.eu\nTwitter | https://twitter.com/n1nj4sec\n\nThis project is a [personal development](https://en.wikipedia.org/wiki/Personal_development), please respect its philosophy and don't use it for evil purposes!\n\n## Special thanks\n\nSpecial thanks to all contributors that help improve pupy and make it a better tool! :)\n"
        },
        {
          "name": "build-docker-images.sh",
          "type": "blob",
          "size": 0.7724609375,
          "content": "#!/bin/bash\n\nSELF=`readlink -f \"$0\"`\nPUPY=`dirname \"$SELF\"`\nPUPY=`readlink -f \"$PUPY\"`\nTAG=${TAG:-\"latest\"}\n\nset -e\n\nDOCKER_REPO=${DOCKER_REPO:-\"alxchk\"}\nDOCKER_COMMAND=${DOCKER_COMMAND:-docker}\n\nif [ ! -z \"$REPO\" ]; then\n    if [ \"$REPO\" == \"local\" ]; then\n        REPO=\"pupy\"\n    else\n        REPO=\"$REPO/pupy\"\n    fi\nelse\n    REPO=\"${DOCKER_REPO}/pupy\"\nfi\n\n\necho \"[+] Build clients\"\n${PUPY}/client/build-docker.sh\necho\n\necho \"[+] Build pupysh full image (${REPO}:${TAG})\"\ncd ${PUPY}/pupy && \\\n    ${DOCKER_COMMAND} build \\\n        -f ${PUPY}/pupy/conf/Dockerfile.default -t ${REPO}:${TAG} .\necho\n\necho \"[+] Build pupysh environment (pupy-python2-env:${TAG})\"\ncd ${PUPY}/pupy && \\\n    ${DOCKER_COMMAND} build \\\n        -f ${PUPY}/pupy/conf/Dockerfile.env -t pupy-python2-env:${TAG} .\necho\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "create-workspace.py",
          "type": "blob",
          "size": 17.5517578125,
          "content": "#!/usr/bin/env python\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport subprocess\nimport os\nimport sys\nimport errno\nimport hashlib\nimport shutil\nimport resource\n\nENV_IMAGE = 'pupy-python2-env'\nENV_CONTAINER = 'pupy-'\n\nTEMPLATES = {\n    'linux32': 'sources-linux',\n    'linux64': 'sources-linux',\n    'linux-armhf': 'sources-linux',\n    'android': 'android_sources',\n    'windows': 'sources'\n}\n\ndefault_local_bin_location = os.path.expanduser('~/.local/bin/')\nROOT = os.path.abspath(os.path.dirname(__file__))\n\nparser = argparse.ArgumentParser(prog=\"create-workspace.py\")\nparser.add_argument(\n    '-G', '--pupy-git-folder',\n    default=ROOT, help='Path to pupy git'\n)\n\ntemplates_args = parser.add_mutually_exclusive_group()\ntemplates_args.add_argument(\n    '-NC', '--do-not-compile-templates',\n    action='store_true', default=False,\n    help='Do not compile payload templates'\n)\n\ntemplates_args.add_argument(\n    '-C', '--compile-templates',\n    default='linux32,linux64,windows',\n    help='Compile specified templates (default: linux32,linux64,windows)'\n)\n\nparser.add_argument(\n    '-E', '--environment', choices=['virtualenv', 'docker', 'podman'],\n    default='virtualenv', help='The way to organize workspace bottle'\n)\n\nparser.add_argument(\n    '-N', '--network', default='host',\n    help='Network type for docker/podman. Default is host'\n)\n\nparser.add_argument(\n    '-P', '--persistent', default=False, action='store_true',\n    help='Do not remove docker/podman build image'\n)\n\nparser.add_argument(\n    '-S', '--squash', default=False, action='store_true',\n    help='Use --squash feature (podman/docker)'\n)\n\nparser.add_argument(\n    '-R', '--images-repo', default='alxchk',\n    help='Use non-default toolchains repo (Use \"local\" to '\n    'build all the things on your PC'\n)\n\nparser.add_argument(\n    '-T', '--image-tag', default='latest', help='Image tag'\n)\n\nparser.add_argument(\n    '-B', '--bin-path', default=default_local_bin_location,\n    help='Store pupy launch wrapper to this folder (default={})'.format(\n        default_local_bin_location)\n)\n\nparser.add_argument('workdir', help='Location of workdir')\n\n_REQUIRED_PROGRAMS = {\n    'podman': (\n        ['podman', 'info'],\n        'Podman either is is not installed or not configured.\\n'\n        'Installation: https://podman.io/getting-started/installation'\n    ),\n    'docker': (\n        ['docker', 'info'],\n        'Docker either is not installed or not configured.\\n'\n        'Installation: https://docs.docker.com/install/'\n    ),\n    'git': (\n        ['git', '--help'],\n        'Install git (example: sudo apt-get install git)'\n    )\n}\n\n_ESCAPE = (\n    '\"', '$', '`', '\\\\'\n)\n\n\ndef shstr(string):\n    if not any(esc in string for esc in _ESCAPE):\n        return string\n\n    result = ['\"']\n\n    for char in string:\n        if char in _ESCAPE:\n            result.append('\\\\')\n        result.append(char)\n\n    result.append('\"')\n    return ''.join(result)\n\n\ndef shjoin(args):\n    return ' '.join(shstr(string) for string in args)\n\n\ndef get_place_digest(*args):\n    return hashlib.sha1(\n        b'\\0'.join(\n            arg.encode('ascii') for arg in args\n        )\n    ).hexdigest()[:4]\n\n\ndef check_programs(programs, available=False):\n    messages = []\n    ok = []\n\n    for program in programs:\n        args, message = _REQUIRED_PROGRAMS[program]\n\n        try:\n            with open(os.devnull, 'w') as devnull:\n                subprocess.check_call(args, stdout=devnull)\n\n            ok.append(program)\n        except (OSError, subprocess.CalledProcessError):\n            messages.append(message)\n\n    if available:\n        return ok\n    else:\n        return messages\n\n\ndef check_modules(modules):\n    messages = []\n\n    for module in modules:\n        try:\n            __import__(module)\n        except ImportError:\n            messages.append(\n                'Missing python module: {}'.format(module)\n            )\n\n    return messages\n\n\ndef get_repo_origin(git_folder):\n    return subprocess.check_output([\n        'git', 'remote', 'get-url', 'origin'\n    ], cwd=git_folder)\n\n\ndef update_repo(git_folder):\n    return subprocess.check_output([\n        'git', 'submodule', 'update', '--init', '--recursive'\n    ], cwd=git_folder)\n\n\ndef get_rev(git_folder):\n    return subprocess.check_output([\n        'git', 'rev-parse', 'HEAD'\n    ], cwd=git_folder)\n\n\ndef get_changed_files(git_folder, prev_ref, current_ref='HEAD'):\n    return subprocess.check_output([\n        'git', 'diff', '--name-only', prev_ref, current_ref\n    ], cwd=git_folder).split()\n\n\ndef build_templates(\n        git_folder, docker_repo, orchestrator, templates, tag, persistent):\n    print(\"[+] Compile templates: {}\".format(templates))\n\n    if docker_repo.lower().strip() == 'local':\n        docker_repo = ''\n\n    repo = ''\n\n    if docker_repo:\n        repo = docker_repo + '/'\n    elif orchestrator == 'podman':\n        repo = 'localhost' + '/'\n\n    update_commands = []\n\n    for template in templates:\n        container_name = 'build-pupy-' + template + '-' + get_place_digest(\n            git_folder\n        )\n\n        create_template = False\n\n        try:\n            with open(os.devnull, 'w') as devnull:\n                subprocess.check_call([\n                    orchestrator, 'inspect', container_name\n                ], stdout=devnull, stderr=devnull)\n        except subprocess.CalledProcessError:\n            create_template = True\n\n        if create_template:\n            print(\"[+] Build {} using {} (create)\".format(\n                template, container_name))\n\n            args = [\n                orchestrator, 'run'\n            ]\n\n            if not persistent:\n                args.append('--rm')\n\n            args.extend([\n                '--name=' + container_name,\n                '--ulimit', 'nofile=65535:65535',\n                '--security-opt', 'label=disable',\n                '--mount', 'type=bind,src=' + git_folder +\n                ',target=/build/workspace/project',\n                repo + 'tc-' + template + ':' + tag,\n                'client/' + TEMPLATES[template] + '/build-docker.sh'\n            ])\n\n            try:\n                subprocess.check_call(args, stderr=subprocess.STDOUT)\n            except subprocess.CalledProcessError as e:\n                if e.returncode == 139 and template == 'linux64':\n                    print(\"[!] Likely you must to enable vsyscall=emulate\")\n\n                raise\n\n            if persistent:\n                update_commands.append(\n                    orchestrator + ' start -a ' + shstr(container_name)\n                )\n            else:\n                update_commands.append(shjoin(args))\n\n        else:\n            print(\"[+] Build {} using {} (existing)\".format(\n                template, container_name))\n\n            try:\n                subprocess.check_call([\n                    orchestrator, 'start', '-a', container_name\n                ], stderr=subprocess.STDOUT)\n            except subprocess.CalledProcessError as e:\n                if e.returncode == 139 and template == 'linux64':\n                    print(\"[!] Likely you must to enable vsyscall=emulate\")\n\n                raise\n\n            update_commands.append(\n                orchestrator + ' start -a ' + shstr(container_name)\n            )\n\n    return update_commands\n\n\ndef make_pupysh_wrapper(workdir, git_folder, orchestrator):\n    pass\n\n\ndef makedirs_p(dirpath):\n    try:\n        os.makedirs(dirpath)\n    except OSError as e:\n        if e.errno == errno.EEXIST:\n            pass\n        else:\n            raise\n\n\ndef initialize_workdir(workdir, gitdir):\n    for dirname in ('crypto', 'data', 'bin', 'config'):\n        makedirs_p(os.path.join(workdir, dirname))\n\n    shutil.copy(\n        os.path.join(\n            gitdir, 'pupy', 'conf', 'pupy.conf.docker'\n        ),\n        os.path.join(\n            workdir, 'config', 'pupy.conf'\n        )\n    )\n\n\ndef create_virtualenv(workdir, git_path, orchestrator=None, templates=[]):\n    import virtualenv\n\n    if hasattr(virtualenv, 'create_environment'):\n        virtualenv.create_environment(workdir)\n    else:\n        virtualenv.cli_run([workdir])\n\n    print(\"[+] Update pip version ...\")\n    subprocess.check_call([\n        os.path.join(workdir, 'bin', 'pip'),\n        'install',\n        '--upgrade', 'pip'\n    ], cwd=workdir, stderr=subprocess.STDOUT)\n\n    print(\"[+] Install dependencies\")\n    subprocess.check_call([\n        os.path.join(workdir, 'bin', 'pip'),\n        'install', '--no-use-pep517',\n        '-r', 'requirements.txt'\n    ], cwd=os.path.join(git_path, 'pupy'), stderr=subprocess.STDOUT)\n\n    shell_commands = [\n        'exec {1}/bin/python -OB {0}/pupy/pupysh.py --workdir {1} \"$@\"'.format(\n            shstr(git_path), shstr(workdir)\n        )\n    ]\n\n    update_commands = [\n        'cd {}'.format(git_path),\n        'prev_ref=`git rev-parse HEAD`',\n        'git pull --recurse-submodules=yes --autostash --rebase',\n        'if (git diff --name-only $prev_ref HEAD | grep client/ >/dev/null)'\n        'then',\n    ]\n\n    if orchestrator and templates:\n        for target in templates:\n            update_commands.extend([\n                'echo \"[+] Rebuilding templates for {}\"'.format(target),\n                '{} start -a build-pupy-{}-{}'.format(\n                    orchestrator, target,\n                    get_place_digest(git_path)\n                )\n            ])\n    else:\n        update_commands.extend([\n            'echo \"[-] You must update templates manually\"'\n        ])\n\n    update_commands.extend([\n        'fi'\n    ])\n\n    return shell_commands, update_commands\n\n\ndef create_container_env(\n        workdir, git_path, orchestrator, network, templates=[], squash=False):\n\n    print(\"[+] Build {} image ({})\".format(orchestrator, ENV_IMAGE))\n\n    build_command = [\n        orchestrator, 'build'\n    ]\n\n    if squash:\n        build_command.append('--squash')\n\n    build_command.extend([\n        '-t', ENV_IMAGE,\n        '-f', os.path.join(git_path, 'pupy', 'conf', 'Dockerfile.env'),\n        os.path.join(git_path, 'pupy')\n    ])\n\n    try:\n        with open(os.devnull, 'w') as devnull:\n            subprocess.check_call([\n                orchestrator, 'inspect', ENV_IMAGE\n            ], stdout=devnull, stderr=devnull)\n    except subprocess.CalledProcessError:\n        print(\"[+] Create pupysh environment image {}\".format(\n            ENV_IMAGE\n        ))\n\n        subprocess.check_call(build_command, stderr=subprocess.STDOUT)\n\n    container_name = ENV_CONTAINER + get_place_digest(\n        workdir, git_path\n    )\n\n    print(\"[+] Create podman container ({})\".format(container_name))\n\n    create_command = [\n        orchestrator, 'create',\n        '--security-opt', 'label=disable',\n        '--hostname=pupy', '--network=' + network,\n        '--name='+container_name,\n        '--interactive', '--tty',\n        '--mount', 'type=bind,src=' + os.path.join(\n                git_path, 'pupy') + ',target=/pupy',\n        '--mount', 'type=bind,src=' + workdir + ',target=/project',\n        ENV_IMAGE\n    ]\n\n    subprocess.check_call(create_command, stderr=subprocess.STDOUT)\n\n    shell_commands = [\n        'exec {} start -ai {}'.format(orchestrator, container_name)\n    ]\n\n    update_commands = [\n        'cd {}'.format(git_path),\n        'prev_ref=`git rev-parse HEAD`',\n        'git pull --recurse-submodules=yes --autostash --rebase',\n        'echo \"[+] Update {} environment\"'.format(orchestrator),\n        shjoin(build_command),\n        orchestrator + ' kill ' + container_name + ' || true',\n        orchestrator + ' rm ' + container_name,\n        shjoin(create_command),\n        'if (git diff --name-only $prev_ref HEAD | grep client/ >/dev/null)',\n        'then',\n    ]\n\n    if templates:\n        for target in templates:\n            update_commands.extend([\n                'echo \"[+] Rebuilding templates for {}\"'.format(target),\n                '{} start -a build-pupy-{}-{}'.format(\n                    orchestrator, target, get_place_digest(git_path)\n                )\n            ])\n    else:\n        update_commands.extend([\n            'echo \"[-] You must update templates manually\"'\n        ])\n\n    update_commands.extend([\n        'fi'\n    ])\n\n    return shell_commands, update_commands\n\n\ndef main():\n    args = parser.parse_args()\n    default_orchestrator = 'docker'\n\n    # Check some programs in advance\n    if args.environment == 'virtualenv' and not args.do_not_compile_templates:\n        available = check_programs([\n            'podman', 'docker'\n        ], available=True)\n\n        for orchestrator in ('podman', 'docker'):\n            if orchestrator in available:\n                default_orchestrator = orchestrator\n                break\n    else:\n        if args.environment != \"virtualenv\":\n            default_orchestrator = args.environment\n\n    required_programs = {'git'}\n    required_modules = set()\n    required_abis = set()\n\n    if sys.version_info.major == 3 and args.environment == 'virtualenv':\n        sys.exit(\n            \"Python 3 is not supported. If your can't or don't want\"\n            \" to install python 2 to the system, \"\n            \"use -E option to select podman or docker to build bottle.\\n\"\n        )\n\n    if not args.do_not_compile_templates and default_orchestrator == 'podman' \\\n            and args.persistent:\n        print(\n            'Warning! You have chosen persistent images. '\n            'This known to have problems with podman + fuse-overlayfs'\n        )\n    \n    if not args.do_not_compile_templates:\n        if args.environment == 'virtualenv':\n            required_programs.add(default_orchestrator)\n        else:\n            required_programs.add(args.environment)\n\n        required_abis.add('vsyscall32')\n        required_programs.add(default_orchestrator)\n\n    workdir = os.path.abspath(args.workdir)\n\n    if not os.path.isfile(\n            os.path.join(args.pupy_git_folder, 'create-workspace.py')):\n        sys.exit('{} is not pupy project folder'.format(\n            args.pupy_git_folder))\n\n    if os.path.isdir(workdir) and os.listdir(workdir):\n        sys.exit('{} is not empty'.format(workdir))\n\n    git_folder = os.path.abspath(args.pupy_git_folder)\n\n    print(\"[+] Git repo at {}\".format(git_folder))\n\n    messages = []\n\n    messages.extend(\n        check_programs(required_programs)\n    )\n\n    messages.extend(\n        check_modules(required_modules)\n    )\n\n    if not args.do_not_compile_templates and default_orchestrator == 'podman':\n        _, nofile_limit = resource.getrlimit(resource.RLIMIT_NOFILE)\n        if nofile_limit < 65535:\n            messages.append(\n                'To build templates using podman RLIMIT_NOFILE (ulimit -n) '\n                'must be >= 65535.\\n'\n                'Read documentation for your linux distribution to find '\n                'how to change them.'\n            )\n\n    if messages:\n        sys.exit('\\n'.join(messages))\n\n    update_repo(git_folder)\n\n    templates = []\n\n    update_commands = [\n        'set -xe'\n    ]\n\n    if not args.do_not_compile_templates:\n        templates.extend(\n            set(\n                template.lower().strip() for template in\n                args.compile_templates.split(',')\n            )\n        )\n\n        update_commands.extend(\n            build_templates(\n                git_folder, args.images_repo,\n                default_orchestrator,\n                templates, args.image_tag, args.persistent\n            )\n        )\n\n    print(\"[+] Create workdir\")\n    makedirs_p(workdir)\n\n    shell_cmds = []\n\n    if args.environment in ('podman', 'docker'):\n        shell_cmds, update_cmds = create_container_env(\n            workdir, git_folder, default_orchestrator,\n            args.network, templates, args.squash\n        )\n\n        update_commands.extend(update_cmds)\n\n    else:\n        shell_cmds, update_cmds = create_virtualenv(\n            workdir, git_folder, 'docker', templates\n        )\n\n        update_commands.extend(update_cmds)\n\n    print(\"[+] Initialize workdir\")\n    initialize_workdir(workdir, git_folder)\n\n    wrappers = (\"pupysh\", \"pupygen\")\n\n    print(\"[+] Create {} wrappers\".format(','.join(wrappers)))\n\n    pupysh_update_path = os.path.join(workdir, 'bin', 'pupysh-update')\n    pupysh_path = os.path.join(workdir, 'bin', 'pupysh')\n\n    with open(pupysh_path, 'w') as pupysh:\n        pupysh.write(\n            '\\n'.join([\n                '#!/bin/sh',\n            ] + shell_cmds) + '\\n'\n        )\n\n        os.chmod(pupysh_path, 0o755)\n\n    with open(pupysh_update_path, 'w') as pupysh:\n        pupysh.write(\n            '\\n'.join([\n                '#!/bin/sh',\n            ] + update_commands) + '\\n'\n        )\n\n        os.chmod(pupysh_update_path, 0o755)\n\n    if args.bin_path:\n        bin_path = os.path.abspath(args.bin_path)\n        print(\"[+] Store symlink to pupysh to {}\".format(bin_path))\n\n        if not os.path.isdir(bin_path):\n            os.makedirs(bin_path)\n\n        for src, sympath in (\n            (\n                pupysh_path, 'pupysh'\n            ), (\n                pupysh_update_path, 'pupysh-update'\n            )\n        ):\n            sympath = os.path.join(bin_path, sympath)\n\n            if os.path.islink(sympath):\n                os.unlink(sympath)\n\n            elif os.path.exists(sympath):\n                sys.exit(\n                    \"[-] File at {} already exists and not symlink\".format(\n                        sympath))\n\n            os.symlink(src, sympath)\n\n        if bin_path not in os.environ['PATH']:\n            print(\"[-] {} is not in your PATH!\".format(bin_path))\n        else:\n            print(\"[I] To execute pupysh:\")\n            print(\"~ > pupysh\")\n            print(\"[I] To update:\")\n            print(\"~ > pupysh-update\")\n\n    else:\n        print(\"[I] To execute pupysh:\")\n        print(\"~ > {}\".format(pupysh_path))\n        print(\"[I] To update:\")\n        print(\"~ > {}\".format(pupysh_update_path))\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.97265625,
          "content": "#!/bin/bash\n\n# Check to make sure script is not initially run as root\nif [ \"$EUID\" == 0 ]\n  then echo \"Please do not run as root. Script will prompt for sudo password.\"\n  exit\nfi\n\n# Get username for regular user.\nusername=$(whoami)\n\n# Start root section\nsudo su root <<'EOF'\n\n# Apt update and installs\napt update\napt install python-pip curl -y\n\n# Install Docker\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\n\nif [ -f /etc/apt/sources.list.d/docker.list ]; then\n    echo \"Apt source entry exists, skipping.\"\nelse\n    echo 'deb https://download.docker.com/linux/debian stretch stable' > /etc/apt/sources.list.d/docker.list\nfi\n\napt update\napt-get install docker-ce -y\nsystemctl start docker\nsystemctl enable docker\n\n# Add user to docker group\nusermod -aG docker $username\n\n# End of root section\nEOF\n\nPYTHON=python\n\n$PYTHON --help >/dev/null\nif [ ! $? -eq 0 ]; then\n  PYTHON=python3\nfi\n\n# Create workspace at ~/pupyws\n${PYTHON} create-workspace.py -E docker -P $HOME/pupyws\n"
        },
        {
          "name": "pupy",
          "type": "tree",
          "content": null
        },
        {
          "name": "services",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}