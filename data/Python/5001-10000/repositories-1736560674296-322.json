{
  "metadata": {
    "timestamp": 1736560674296,
    "page": 322,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alteryx/featuretools",
      "stars": 7330,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0458984375,
          "content": "codecov:\n    notify:\n        after_n_builds: 5\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8857421875,
          "content": "#\ndocs/source/generated/\ndocs/source/getting_started/graphs\nvenv/\ndata/\ninstalled/\noutput.csv\nhtmlcov/\n.idea/\nfeaturetools/tests/integration_data/*.csv\nfeaturetools/tests/integration_data/*.gzip\nfeaturetools/tests/integration_data/customers.gzip\nfeaturetools/tests/integration_data/log-0.gzip\nfeaturetools/tests/integration_data/log-1.gzip\nfeaturetools/tests/integration_data/log.gzip\nfeaturetools/tests/integration_data/products.gzip\nfeaturetools/tests/integration_data/regions.gzip\nfeaturetools/tests/integration_data/sessions.gzip\nfeaturetools/tests/integration_data/stores.gzip\n**/dask-worker-space/*\n*.dirlock\n*.~lock*\nunpacked_sdist/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n**/.DS_Store\n.DS_Store\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# pickle files\n*.p\n*.pickle\n\n.pytest_cache\n\n#IDE\n.vscode\n.devcontainer\n\n*.stats\nDockerfile.arm\n.dockerignore\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.03515625,
          "content": "exclude: |\n  (?x)\n  .html$|.csv$|.svg$|.md$|.txt$|.json$|.xml$|.pickle$|^.github/|\n  (LICENSE.*|README.*)\nrepos:\n  - repo: https://github.com/kynan/nbstripout\n    rev: 0.5.0\n    hooks:\n      - id: nbstripout\n        entry: nbstripout\n        language: python\n        types: [jupyter]\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.3.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/MarcoGorelli/absolufy-imports\n    rev: v0.3.1\n    hooks:\n      - id: absolufy-imports\n        files: ^featuretools/\n  - repo: https://github.com/asottile/add-trailing-comma\n    rev: v2.2.3\n    hooks:\n      - id: add-trailing-comma\n        name: Add trailing comma\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: 'v0.3.3'\n    hooks:\n      - id: ruff\n        types_or: [ python, pyi, jupyter ]\n        args:\n          - --fix\n          - --config=./pyproject.toml\n      - id: ruff-format\n        types_or: [ python, pyi, jupyter ]\n        args:\n          - --config=./pyproject.toml\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.623046875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: []\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.9\"\n  apt_packages:\n    - graphviz\n    - openjdk-11-jre-headless\n  jobs:\n    post_build:\n      - export JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\"\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.482421875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2017, Feature Labs, Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.599609375,
          "content": ".PHONY: clean\nclean:\n\tfind . -name '*.pyo' -delete\n\tfind . -name '*.pyc' -delete\n\tfind . -name __pycache__ -delete\n\tfind . -name '*~' -delete\n\tfind . -name '.coverage.*' -delete\n\n.PHONY: lint\nlint:\n\tpython docs/notebook_version_standardizer.py check-execution\n\truff check . --config=./pyproject.toml\n\truff format . --check --config=./pyproject.toml\n\n.PHONY: lint-fix\nlint-fix:\n\tpython docs/notebook_version_standardizer.py standardize\n\truff check . --fix --config=./pyproject.toml\n\truff format . --config=./pyproject.toml\n\n.PHONY: test\ntest:\n\tpython -m pytest featuretools/ -n auto\n\n.PHONY: testcoverage\ntestcoverage:\n\tpython -m pytest featuretools/ --cov=featuretools -n auto\n\n.PHONY: installdeps\ninstalldeps: upgradepip\n\tpip install -e .\n\n.PHONY: installdeps-dev\ninstalldeps-dev: upgradepip\n\tpip install -e \".[dev]\"\n\tpre-commit install\n\n.PHONY: installdeps-test\ninstalldeps-test: upgradepip\n\tpip install -e \".[test]\"\n\n.PHONY: checkdeps\ncheckdeps:\n\t$(eval allow_list='holidays|scipy|numpy|pandas|tqdm|cloudpickle|distributed|dask|psutil|woodwork')\n\tpip freeze | grep -v \"alteryx/featuretools.git\" | grep -E $(allow_list) > $(OUTPUT_PATH)\n\n.PHONY: upgradepip\nupgradepip:\n\tpython -m pip install --upgrade pip\n\n.PHONY: upgradebuild\nupgradebuild:\n\tpython -m pip install --upgrade build\n\n.PHONY: upgradesetuptools\nupgradesetuptools:\n\tpython -m pip install --upgrade setuptools\n\n.PHONY: package\npackage: upgradepip upgradebuild upgradesetuptools\n\tpython -m build\n\t$(eval PACKAGE=$(shell python -c 'import setuptools; setuptools.setup()' --version))\n\ttar -zxvf \"dist/featuretools-${PACKAGE}.tar.gz\"\n\tmv \"featuretools-${PACKAGE}\" unpacked_sdist\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.9013671875,
          "content": "<p align=\"center\">\n<img width=50% src=\"https://www.featuretools.com/wp-content/uploads/2017/12/FeatureLabs-Logo-Tangerine-800.png\" alt=\"Featuretools\" />\n</p>\n<p align=\"center\">\n<i>\"One of the holy grails of machine learning is to automate more and more of the feature engineering process.\"</i> â€• Pedro Domingos, <a href=\"https://bit.ly/things_to_know_ml\">A Few Useful Things to Know about Machine Learning</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/alteryx/featuretools/actions/workflows/tests_with_latest_deps.yaml\" alt=\"Tests\" target=\"_blank\">\n        <img src=\"https://github.com/alteryx/featuretools/actions/workflows/tests_with_latest_deps.yaml/badge.svg?branch=main\" alt=\"Tests\" />\n    </a>\n    <a href=\"https://codecov.io/gh/alteryx/featuretools\">\n        <img src=\"https://codecov.io/gh/alteryx/featuretools/branch/main/graph/badge.svg\"/>\n    </a>\n    <a href='https://featuretools.alteryx.com/en/stable/?badge=stable'>\n        <img src='https://readthedocs.com/projects/feature-labs-inc-featuretools/badge/?version=stable' alt='Documentation Status' />\n    </a>\n    <a href=\"https://badge.fury.io/py/featuretools\" target=\"_blank\">\n        <img src=\"https://badge.fury.io/py/featuretools.svg?maxAge=2592000\" alt=\"PyPI Version\" />\n    </a>\n    <a href=\"https://anaconda.org/conda-forge/featuretools\" target=\"_blank\">\n        <img src=\"https://anaconda.org/conda-forge/featuretools/badges/version.svg\" alt=\"Anaconda Version\" />\n    </a>\n    <a href=\"https://stackoverflow.com/questions/tagged/featuretools\" target=\"_blank\">\n        <img src=\"http://img.shields.io/badge/questions-on_stackoverflow-blue.svg\" alt=\"StackOverflow\" />\n    </a>\n    <a href=\"https://pepy.tech/project/featuretools\" target=\"_blank\">\n        <img src=\"https://static.pepy.tech/badge/featuretools/month\" alt=\"PyPI Downloads\" />\n    </a>\n</p>\n<hr>\n\n[Featuretools](https://www.featuretools.com) is a python library for automated feature engineering. See the [documentation](https://docs.featuretools.com) for more information.\n\n## Installation\nInstall with pip\n\n```\npython -m pip install featuretools\n```\n\nor from the Conda-forge channel on [conda](https://anaconda.org/conda-forge/featuretools):\n\n```\nconda install -c conda-forge featuretools\n```\n\n### Add-ons\n\nYou can install add-ons individually or all at once by running:\n\n```\npython -m pip install \"featuretools[complete]\"\n```\n\n**Premium Primitives** - Use Premium Primitives from the premium-primitives repo\n\n```\npython -m pip install \"featuretools[premium]\"\n```\n\n**NLP Primitives** - Use Natural Language Primitives from the nlp-primitives repo\n\n```\npython -m pip install \"featuretools[nlp]\"\n```\n\n**Dask Support** - Use Dask to run DFS with njobs > 1\n\n```\npython -m pip install \"featuretools[dask]\"\n```\n\n## Example\nBelow is an example of using Deep Feature Synthesis (DFS) to perform automated feature engineering. In this example, we apply DFS to a multi-table dataset consisting of timestamped customer transactions.\n\n```python\n>> import featuretools as ft\n>> es = ft.demo.load_mock_customer(return_entityset=True)\n>> es.plot()\n```\n\n<img src=\"https://github.com/alteryx/featuretools/blob/main/docs/source/_static/images/entity_set.png?raw=true\" width=\"350\">\n\nFeaturetools can automatically create a single table of features for any \"target dataframe\"\n```python\n>> feature_matrix, features_defs = ft.dfs(entityset=es, target_dataframe_name=\"customers\")\n>> feature_matrix.head(5)\n```\n\n```\n            zip_code  COUNT(transactions)  COUNT(sessions)  SUM(transactions.amount) MODE(sessions.device)  MIN(transactions.amount)  MAX(transactions.amount)  YEAR(join_date)  SKEW(transactions.amount)  DAY(join_date)                   ...                     SUM(sessions.MIN(transactions.amount))  MAX(sessions.SKEW(transactions.amount))  MAX(sessions.MIN(transactions.amount))  SUM(sessions.MEAN(transactions.amount))  STD(sessions.SUM(transactions.amount))  STD(sessions.MEAN(transactions.amount))  SKEW(sessions.MEAN(transactions.amount))  STD(sessions.MAX(transactions.amount))  NUM_UNIQUE(sessions.DAY(session_start))  MIN(sessions.SKEW(transactions.amount))\ncustomer_id                                                                                                                                                                                                                                  ...\n1              60091                  131               10                  10236.77               desktop                      5.60                    149.95             2008                   0.070041               1                   ...                                                     169.77                                 0.610052                                   41.95                               791.976505                              175.939423                                 9.299023                                 -0.377150                                5.857976                                        1                                -0.395358\n2              02139                  122                8                   9118.81                mobile                      5.81                    149.15             2008                   0.028647              20                   ...                                                     114.85                                 0.492531                                   42.96                               596.243506                              230.333502                                10.925037                                  0.962350                                7.420480                                        1                                -0.470007\n3              02139                   78                5                   5758.24               desktop                      6.78                    147.73             2008                   0.070814              10                   ...                                                      64.98                                 0.645728                                   21.77                               369.770121                              471.048551                                 9.819148                                 -0.244976                               12.537259                                        1                                -0.630425\n4              60091                  111                8                   8205.28               desktop                      5.73                    149.56             2008                   0.087986              30                   ...                                                      83.53                                 0.516262                                   17.27                               584.673126                              322.883448                                13.065436                                 -0.548969                               12.738488                                        1                                -0.497169\n5              02139                   58                4                   4571.37                tablet                      5.91                    148.17             2008                   0.085883              19                   ...                                                      73.09                                 0.830112                                   27.46                               313.448942                              198.522508                                 8.950528                                  0.098885                                5.599228                                        1                                -0.396571\n\n[5 rows x 69 columns]\n```\nWe now have a feature vector for each customer that can be used for machine learning. See the [documentation on Deep Feature Synthesis](https://featuretools.alteryx.com/en/stable/getting_started/afe.html) for more examples.\n\nFeaturetools contains many different types of built-in primitives for creating features. If the primitive you need is not included, Featuretools also allows you to [define your own custom primitives](https://featuretools.alteryx.com/en/stable/getting_started/primitives.html#defining-custom-primitives).\n\n## Demos\n**Predict Next Purchase**\n\n[Repository](https://github.com/alteryx/open_source_demos/blob/main/predict-next-purchase/) | [Notebook](https://github.com/alteryx/open_source_demos/blob/main/predict-next-purchase/Tutorial.ipynb)\n\nIn this demonstration, we use a multi-table dataset of 3 million online grocery orders from Instacart to predict what a customer will buy next. We show how to generate features with automated feature engineering and build an accurate machine learning pipeline using Featuretools, which can be reused for multiple prediction problems. For more advanced users, we show how to scale that pipeline to a large dataset using Dask.\n\nFor more examples of how to use Featuretools, check out our [demos](https://www.featuretools.com/demos) page.\n\n## Testing & Development\n\nThe Featuretools community welcomes pull requests. Instructions for testing and development are available [here.](https://featuretools.alteryx.com/en/stable/install.html#development)\n\n## Support\nThe Featuretools community is happy to provide support to users of Featuretools. Project support can be found in four places depending on the type of question:\n\n1. For usage questions, use [Stack Overflow](https://stackoverflow.com/questions/tagged/featuretools) with the `featuretools` tag.\n2. For bugs, issues, or feature requests start a [Github issue](https://github.com/alteryx/featuretools/issues).\n3. For discussion regarding development on the core library, use [Slack](https://join.slack.com/t/alteryx-oss/shared_invite/zt-182tyvuxv-NzIn6eiCEf8TBziuKp0bNA).\n4. For everything else, the core developers can be reached by email at open_source_support@alteryx.com\n\n## Citing Featuretools\n\nIf you use Featuretools, please consider citing the following paper:\n\nJames Max Kanter, Kalyan Veeramachaneni. [Deep feature synthesis: Towards automating data science endeavors.](https://dai.lids.mit.edu/wp-content/uploads/2017/10/DSAA_DSM_2015.pdf) *IEEE DSAA 2015*.\n\nBibTeX entry:\n\n```bibtex\n@inproceedings{kanter2015deep,\n  author    = {James Max Kanter and Kalyan Veeramachaneni},\n  title     = {Deep feature synthesis: Towards automating data science endeavors},\n  booktitle = {2015 {IEEE} International Conference on Data Science and Advanced Analytics, DSAA 2015, Paris, France, October 19-21, 2015},\n  pages     = {1--10},\n  year      = {2015},\n  organization={IEEE}\n}\n```\n\n## Built at Alteryx\n\n**Featuretools** is an open source project maintained by [Alteryx](https://www.alteryx.com). To see the other open source projects weâ€™re working on visit [Alteryx Open Source](https://www.alteryx.com/open-source). If building impactful data science pipelines is important to you or your business, please get in touch.\n\n<p align=\"center\">\n  <a href=\"https://www.alteryx.com/open-source\">\n    <img src=\"https://alteryx-oss-web-images.s3.amazonaws.com/OpenSource_Logo-01.png\" alt=\"Alteryx Open Source\" width=\"800\"/>\n  </a>\n</p>\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 6.296875,
          "content": "# Contributing to Featuretools\n\n:+1::tada: First off, thank you for taking the time to contribute! :tada::+1:\n\nWhether you are a novice or experienced software developer, all contributions and suggestions are welcome!\n\nThere are many ways to contribute to Featuretools, with the most common ones being contribution of code or documentation to the project.\n\n**To contribute, you can:**\n1. Help users on our [Slack channel](https://join.slack.com/t/alteryx-oss/shared_invite/zt-182tyvuxv-NzIn6eiCEf8TBziuKp0bNA). Answer questions under the featuretools tag on [Stack Overflow](https://stackoverflow.com/questions/tagged/featuretools)\n\n2. Submit a pull request for one of [Good First Issues](https://github.com/alteryx/featuretools/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22)\n\n3. Make changes to the codebase, see [Contributing to the codebase](#Contributing-to-the-Codebase).\n\n4. Improve our documentation, which can be found under the [docs](docs/) directory or at https://docs.featuretools.com\n\n5. [Report issues](#Report-issues) you're facing, and give a \"thumbs up\" on issues that others reported and that are relevant to you. Issues should be used for bugs, and feature requests only.\n\n6. Spread the word: reference Featuretools from your blog and articles, link to it from your website, or simply star it in GitHub to say \"I use it\".\n    * If you would like to be featured on [ecosystem page](https://featuretools.alteryx.com/en/stable/resources/ecosystem.html), you can submit a [pull request](https://github.com/alteryx/featuretools).\n\n## Contributing to the Codebase\n\nBefore starting major work, you should touch base with the maintainers of Featuretools by filing an issue on GitHub or posting a message in the [#development channel on Slack](https://join.slack.com/t/alteryx-oss/shared_invite/zt-182tyvuxv-NzIn6eiCEf8TBziuKp0bNA). This will increase the likelihood your pull request will eventually get merged in.\n\n#### 1. Fork and clone repo\n* The code is hosted on GitHub, so you will need to use Git to fork the project and make changes to the codebase. To start, go to the [Featuretools GitHub page](https://github.com/alteryx/featuretools) and click the `Fork` button.\n* After you have created the fork, you will want to clone the fork to your machine and connect your version of the project to the upstream Featuretools repo.\n  ```bash\n  git clone https://github.com/your-user-name/featuretools.git\n  cd featuretools\n  git remote add upstream https://github.com/alteryx/featuretools\n  ```\n* Once you have obtained a copy of the code, you should create a development environment that is separate from your existing Python environment so that you can make and test changes without compromising your own work environment. You can run the following steps to create a separate virtual environment, and install Featuretools in editable mode.\n  ```bash\n  python -m venv venv\n  source venv/bin/activate\n  make installdeps\n  git checkout -b issue####-branch_name\n  ```\n\n* You will need to install GraphViz, and Pandoc to run all unit tests & build docs:\n\n  > Pandoc is only needed to build the documentation locally.\n\n     **macOS (Intel)** (use [Homebrew](https://brew.sh/)):\n     ```console\n     brew install graphviz pandoc\n     ```\n\n     **macOS (M1)** (use [Homebrew](https://brew.sh/)):\n     ```console\n     brew install graphviz pandoc\n     ```\n\n     **Ubuntu**:\n     ```console\n     sudo apt install graphviz pandoc -y\n     ```\n\n#### 2. Implement your Pull Request\n\n* Implement your pull request. If needed, add new tests or update the documentation.\n* Before submitting to GitHub, verify the tests run and the code lints properly\n  ```bash\n  # runs linting\n  make lint\n\n  # will fix some common linting issues automatically\n  make lint-fix\n\n  # runs test\n  make test\n  ```\n* If you made changes to the documentation, build the documentation locally.\n  ```bash\n  # go to docs and build\n  cd docs\n  make html\n\n  # view docs locally\n  open build/html/index.html\n  ```\n* Before you commit, a few lint fixing hooks will run. You can also manually run these.\n  ```bash\n  # run linting hooks only on changed files\n  pre-commit run\n\n  # run linting hooks on all files\n  pre-commit run --all-files\n  ```\n\n#### 3. Submit your Pull Request\n\n* Once your changes are ready to be submitted, make sure to push your changes to GitHub before creating a pull request.\n* If you need to update your code with the latest changes from the main Featuretools repo, you can do that by running the commands below, which will merge the latest changes from the Featuretools `main` branch into your current local branch. You may need to resolve merge conflicts if there are conflicts between your changes and the upstream changes. After the merge, you will need to push the updates to your forked repo after running these commands.\n  ```bash\n  git fetch upstream\n  git merge upstream/main\n  ```\n* Create a pull request to merge the changes from your forked repo branch into the Featuretools `main` branch. Creating the pull request will automatically run our continuous integration.\n* If this is your first contribution, you will need to sign the Contributor License Agreement as directed.\n* Update the \"Future Release\" section of the release notes (`docs/source/release_notes.rst`) to include your pull request and add your github username to the list of contributors.  Add a description of your PR to the subsection that most closely matches your contribution:\n    * Enhancements: new features or additions to Featuretools.\n    * Fixes: things like bugfixes or adding more descriptive error messages.\n    * Changes: modifications to an existing part of Featuretools.\n    * Documentation Changes\n    * Testing Changes\n\n   Documentation or testing changes rarely warrant an individual release notes entry; the PR number can be added to their respective \"Miscellaneous changes\" entries.\n* We will review your changes, and you will most likely be asked to make additional changes before it is finally ready to merge. However, once it's reviewed by a maintainer of Featuretools, passes continuous integration, we will merge it, and you will have successfully contributed to Featuretools!\n\n## Report issues\nWhen reporting issues please include as much detail as possible about your operating system, Featuretools version and python version. Whenever possible, please also include a brief, self-contained code example that demonstrates the problem.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "featuretools",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.59765625,
          "content": "[project]\nname = \"featuretools\"\nreadme = \"README.md\"\ndescription = \"a framework for automated feature engineering\"\ndynamic = [\"version\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: Developers\",\n    \"Topic :: Software Development\",\n    \"Topic :: Scientific/Engineering\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX\",\n    \"Operating System :: Unix\",\n    \"Operating System :: MacOS\",\n]\nauthors = [\n    {name=\"Alteryx, Inc.\", email=\"open_source_support@alteryx.com\"}\n]\nmaintainers = [\n    {name=\"Alteryx, Inc.\", email=\"open_source_support@alteryx.com\"}\n]\nkeywords = [\"feature engineering\", \"data science\", \"machine learning\"]\nlicense = {text = \"BSD 3-clause\"}\nrequires-python = \">=3.9,<4\"\ndependencies = [\n    \"cloudpickle >= 1.5.0\",\n    \"holidays >= 0.17\",\n    \"numpy >= 1.25.0, < 2.0.0\",\n    \"packaging >= 20.0\",\n    \"pandas >= 2.0.0\",\n    \"psutil >= 5.7.0\",\n    \"scipy >= 1.10.0\",\n    \"tqdm >= 4.66.3\",\n    \"woodwork >= 0.28.0\",\n]\n\n[project.urls]\n\"Documentation\" = \"https://featuretools.alteryx.com\"\n\"Source Code\"= \"https://github.com/alteryx/featuretools/\"\n\"Changes\" = \"https://featuretools.alteryx.com/en/latest/release_notes.html\"\n\"Issue Tracker\" = \"https://github.com/alteryx/featuretools/issues\"\n\"Twitter\" = \"https://twitter.com/alteryxoss\"\n\"Chat\" = \"https://join.slack.com/t/alteryx-oss/shared_invite/zt-182tyvuxv-NzIn6eiCEf8TBziuKp0bNA\"\n\n[project.optional-dependencies]\ntest = [\n    \"boto3 >= 1.34.32\",\n    \"composeml >= 0.8.0\",\n    \"graphviz >= 0.8.4\",\n    \"moto[all] >= 5.0.0\",\n    \"pip >= 23.3.0\",\n    \"pyarrow >= 14.0.1\",\n    \"pympler >= 0.8\",\n    \"pytest >= 7.1.2\",\n    \"pytest-cov >= 3.0.0\",\n    \"pytest-xdist >= 2.5.0\",\n    \"smart-open >= 5.0.0\",\n    \"urllib3 >= 1.26.18\",\n    \"pytest-timeout >= 2.1.0\",\n]\ndask = [\n    \"dask[dataframe] >= 2023.2.0\",\n    \"distributed >= 2023.2.0\",\n]\ntsfresh = [\n    \"featuretools-tsfresh-primitives >= 1.0.0\",\n]\nautonormalize = [\n    \"autonormalize >= 2.0.1\",\n]\nsql = [\n    \"featuretools_sql >= 0.0.1\",\n    \"psycopg2-binary >= 2.9.3\",\n]\nsklearn = [\n    \"featuretools-sklearn-transformer >= 1.0.0\",\n]\npremium = [\n    \"premium-primitives >= 0.0.3\",\n]\nnlp = [\n    \"nlp-primitives >= 2.12.0\",\n]\ndocs = [\n    \"ipython == 8.4.0\",\n    \"jupyter == 1.0.0\",\n    \"jupyter-client >= 8.0.2\",\n    \"matplotlib == 3.7.2\",\n    \"Sphinx == 5.1.1\",\n    \"nbsphinx == 0.8.9\",\n    \"nbconvert == 6.5.0\",\n    \"pydata-sphinx-theme == 0.9.0\",\n    \"sphinx-inline-tabs == 2022.1.2b11\",\n    \"sphinx-copybutton == 0.5.0\",\n    \"myst-parser == 0.18.0\",\n    \"autonormalize >= 2.0.1\",\n    \"click >= 7.0.0\",\n    \"featuretools[dask,test]\",\n]\ndev = [\n    \"ruff >= 0.1.6\",\n    \"black[jupyter] >= 23.1.0\",\n    \"pre-commit >= 2.20.0\",\n    \"featuretools[docs,dask,test]\",\n]\ncomplete = [\n    \"featuretools[premium,nlp,dask]\",\n]\n\n[tool.setuptools]\ninclude-package-data = true\nlicense-files = [\n    \"LICENSE\",\n    \"featuretools/primitives/data/free_email_provider_domains_license\"\n]\n\n[tool.setuptools.packages.find]\nnamespaces = true\n\n[tool.setuptools.package-data]\n\"*\" = [\n    \"*.txt\",\n    \"README.md\",\n]\n\"featuretools\" = [\n    \"primitives/data/*.csv\",\n    \"primitives/data/*.txt\",\n]\n\n[tool.setuptools.exclude-package-data]\n\"*\" = [\n    \"* __pycache__\",\n    \"*.py[co]\",\n    \"docs/*\"\n]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"featuretools.version.__version__\"}\n\n[tool.pytest.ini_options]\naddopts = \"--doctest-modules --ignore=featuretools/tests/entry_point_tests/add-ons\"\ntestpaths = [\n    \"featuretools/tests/*\"\n]\nfilterwarnings = [\n    \"ignore::DeprecationWarning\",\n    \"ignore::PendingDeprecationWarning\"\n]\n\n[tool.ruff]\nline-length = 88\ntarget-version = \"py311\"\nlint.ignore = [\"E501\"]\nlint.select = [\n    # Pyflakes\n    \"F\",\n    # Pycodestyle\n    \"E\",\n    \"W\",\n    # isort\n    \"I001\"\n]\nsrc = [\"featuretools\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"E402\", \"F401\", \"I001\", \"E501\"]\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"featuretools\"]\n\n[tool.coverage.run]\nsource = [\"featuretools\"]\nomit = [\n    \"*/add-ons/**/*\"\n]\n\n[tool.coverage.report]\nexclude_lines =[\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"if self._verbose:\",\n    \"if verbose:\",\n    \"if profile:\",\n    \"pytest.skip\"\n]\n[build-system]\nrequires = [\n    \"setuptools >= 61.0.0\",\n    \"wheel\"\n]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "release.md",
          "type": "blob",
          "size": 9.7421875,
          "content": "# Release Process\n\n## 0. Pre-Release Checklist\n\nBefore starting the release process, verify the following:\n\n- All work required for this release has been completed and the team is ready to release.\n- [All Github Actions Tests are green on main](https://github.com/alteryx/featuretools/actions?query=branch%3Amain).\n- EvalML Tests are green with Featuretools main\n  - [![Unit Tests - EvalML with Featuretools main branch](https://github.com/alteryx/evalml/actions/workflows/unit_tests_with_featuretools_main_branch.yaml/badge.svg?branch=main)](https://github.com/alteryx/evalml/actions/workflows/unit_tests_with_featuretools_main_branch.yaml)\n- Looking Glass performance tests runs should not show any significant performance regressions when comparing the last commit on `main` with the previous release of Featuretools. See Step 1 below for instructions on manually launching the performance tests runs.\n- The [ReadtheDocs build](https://readthedocs.com/projects/feature-labs-inc-featuretools/) for \"latest\" is marked as passed. To avoid mysterious errors, best practice is to empty your browser cache when reading new versions of the docs!\n- The [public documentation for the \"latest\" branch](https://featuretools.alteryx.com/en/latest/) looks correct, and the [release notes](https://featuretools.alteryx.com/en/latest/release_notes.html) includes the last change which was made on `main`.\n- Get agreement on the version number to use for the release.\n\n#### Version Numbering\n\nFeaturetools uses [semantic versioning](https://semver.org/). Every release has a major, minor and patch version number, and are displayed like so: `<majorVersion>.<minorVersion>.<patchVersion>`.\n\nIn certain instances, it may be necessary to create a backport release. This is when commits from a newer version of a library are ported to an older version of the software and then released. This occurs when anything but the latest commit on main is used as the target for release, but can go so far as to add a further patch release, such as 0.11.2, to be released after a 0.12.0 version had already been released. If a backport release is being performed, please see the [Backport Release Guide](docs/backport_release.md) for instructions on how to proceed, as some steps from this guide should be performed differently.\n\nIf you'd like to create a development release, which won't be deployed to pypi and conda and marked as a generally-available production release, please add a \"dev\" prefix to the patch version, i.e. `X.X.devX`. Note this claims the patch number--if the previous release was `0.12.0`, a subsequent dev release would be `0.12.dev1`, and the following release would be `0.12.2`, _not_ `0.12.1`. Development releases deploy to [test.pypi.org](https://test.pypi.org/project/featuretools/) instead of to [pypi.org](https://pypi.org/project/featuretools).\n\n## 1. Evaluate Performance Test Results\n\nBefore releasing Featuretools, the person performing the release should launch a performance test run and evaluate the results to make sure no significant performance regressions will be introduced by the release. This can be done by launching a Looking Glass performance test run, which will then post results to Slack. \n\nTo manually launch a Looking Glass performance test run, follow these steps:\n1. Navigate to the [Looking Glass performance tests](https://github.com/alteryx/featuretools/actions/workflows/looking_glass_performance_tests.yaml) GitHub action\n2. Click on the Run workflow dropdown to set up the run\n3. Make sure that the \"use workflow from\" dropdown is set to `main` to use the workflow version in Featuretools `main`\n4. Enter the hash of the most recent commit to `main` in the \"new commit to evaluate\" field. For example: `cee9607`\n5. Enter the version tag of the last release of Featuretools in the \"previous commit to evaluate\" field. For example, if the last release of Featuretools was version 1.20.0, you would enter `v1.20.0` here.\n6. Click the \"Run workflow\" button to launch the jobs\n\nOnce the job has been completed, the results summaries will be posted to Slack automatically. Review the results and make sure the performance has not degraded. If any significant performance issues are noted, discuss with the development team before proceeding.\n\nNote: The procedure above can also be used to launch performance tests runs at any time, even outside of the release process. When launching a test run, the commit fields can take any commit hash, GitHub branch or tag as input to specify the new and previous commits to compare.\n\n## 2. Create Featuretools release on Github\n\n#### Create Release Branch\n\n1. Branch off of featuretools main. For the branch name, please use \"release_vX.Y.Z\" as the naming scheme (e.g. \"release_v0.13.3\"). Doing so will bypass our release notes checkin test which requires all other PRs to add a release note entry.\n\n#### Bump Version Number\n\n1. Bump `__version__` in `featuretools/version.py`, and `featuretools/tests/test_version.py`.\n\n#### Update Release Notes\n\n1. Replace \"Future Release\" in `docs/source/release_notes.rst` with the current date\n\n   ```\n   v0.13.3 Sep 28, 2020\n   ====================\n   ```\n\n2. Remove any unused Release Notes sections for this release (e.g. Fixes, Testing Changes)\n3. Add yourself to the list of contributors to this release and **put the contributors in alphabetical order**\n4. The release PR does not need to be mentioned in the list of changes\n5. Add a commented out \"Future Release\" section with all of the Release Notes sections above the current section\n\n   ```\n   .. Future Release\n     ==============\n       * Enhancements\n       * Fixes\n       * Changes\n       * Documentation Changes\n       * Testing Changes\n\n   .. Thanks to the following people for contributing to this release:\n   ```\n\n#### Create Release PR\n\nA [release pr](https://github.com/alteryx/featuretools/pull/856) should have **the version number as the title** and the release notes for that release as the PR body text. The contributors list is not necessary. The special sphinx docs syntax (:pr:\\`547\\`) needs to be changed to github link syntax (#547).\n\nChecklist before merging:\n\n- The title of the PR is the version number.\n- All tests are currently green on checkin and on `main`.\n- The ReadtheDocs build for the release PR branch has passed, and the resulting docs contain the expected release notes.\n- PR has been reviewed and approved.\n- Confirm with the team that `main` will be frozen until step 3 (Github Release) is complete.\n\nAfter merging, verify again that ReadtheDocs \"latest\" is correct.\n\n## 3. Create Github Release\n\nAfter the release pull request has been merged into the `main` branch, it is time draft the github release. [Example release](https://github.com/alteryx/featuretools/releases/tag/v0.13.3)\n\n- The target should be the `main` branch\n- The tag should be the version number with a v prefix (e.g. v0.13.3)\n- Release title is the same as the tag\n- Release description should be the full Release Notes updates for the release, including the line thanking contributors. Contributors should also have their links changed from the docs syntax (:user:\\`gsheni\\`) to github syntax (@gsheni)\n- This is not a pre-release\n- Publishing the release will automatically upload the package to PyPI\n\n## 4. Release on conda-forge\n\nIn order to release on conda-forge, you can either wait for a bot to create a pull request, or use a GitHub Actions workflow\n\n### Option a: Use a GitHub Action workflow\n\n1. After the package has been uploaded on PyPI, the **Create Feedstock Pull Request** workflow should automatically kickoff a job. \n    * If it does not, go [here](https://github.com/alteryx/featuretools/actions/workflows/create_feedstock_pr.yaml)\n    * Click **Run workflow** and input the letter `v` followed by the release version (e.g. `v0.13.3`)\n    * Kickoff the GitHub Action, and monitor the Job Summary.\n2. Once the job has been completed, you will see summary output, with a URL. \n    * Visit that URL and create a pull request.\n    * Alternatively, create the pull request by clicking the branch name (e.g. - `v0.13.3`): \n      - https://github.com/alteryx/featuretools-feedstock/branches\n3. Verify that the PR has the following: \n    * The `build['number']` is 0 (in __recipe/meta.yml__).\n    * The `requirements['run']` (in __recipe/meta.yml__) matches the `[project]['dependencies']` in __featuretools/pyproject.toml__.\n    * The `test['requires']` (in __recipe/meta.yml__) matches the `[project.optional-dependencies]['test']` in __featuretools/pyproject.toml__\n    > There will be 2 entries for graphviz: `graphviz` and `python-graphviz`. \n    > Make sure `python-graphviz` (in __recipe/meta.yml__) matches `graphviz` in `[project.optional-dependencies]['test']` in __featuretools/pyproject.toml__.\n4. Satisfy the conditions in pull request description and **merge it if the CI passes**. \n\n### Option b: Waiting for bot to create new PR\n\n1. A bot should automatically create a new PR in [conda-forge/featuretools-feedstock](https://github.com/conda-forge/featuretools-feedstock/pulls) - note, the PR may take up to a few hours to be created\n2. Update requirements changes in `recipe/meta.yaml` (bot should have handled version and source links on its own)\n3. After tests pass, a maintainer will merge the PR in\n\n# Miscellaneous\n## Add new maintainers to featuretools-feedstock\n\nPer the instructions [here](https://conda-forge.org/docs/maintainer/updating_pkgs.html#updating-the-maintainer-list):\n1. Ask an existing maintainer to create an issue on the [repo](https://github.com/conda-forge/featuretools-feedstock).\n  a. Select *Bot commands* and put the following title (change `username`):\n\n  ```text\n  @conda-forge-admin, please add user @username\n  ```\n\n2. A PR will be auto-created on the repo, and will need to be merged by an existing maintainer.\n3. The new user will need to **check their email for an invite link to click**, which should be https://github.com/conda-forge\n"
        }
      ]
    }
  ]
}