{
  "metadata": {
    "timestamp": 1736560517637,
    "page": 112,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xuebinqin/U-2-Net",
      "stars": 8779,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.427734375,
          "content": "<p align=\"center\">\n  <img width=\"320\" height=\"320\" src=\"figures/U2Net_Logo.png\">\n  \n  <h1 align=\"center\">U<sup>2</sup>-Net: U Square Net</h1>\n    \n</p>\n\nThis is the official repo for our paper **U<sup>2</sup>-Net(U square net)** published in Pattern Recognition 2020:\n\n## [U<sup>2</sup>-Net: Going Deeper with Nested U-Structure for Salient Object Detection](https://arxiv.org/pdf/2005.09007.pdf)\n[Xuebin Qin](https://xuebinqin.github.io/), [Zichen Zhang](https://webdocs.cs.ualberta.ca/~zichen2/), [Chenyang Huang](https://chenyangh.com/), [Masood Dehghan](https://sites.google.com/view/masooddehghan), [Osmar R. Zaiane](http://webdocs.cs.ualberta.ca/~zaiane/) and [Martin Jagersand](https://webdocs.cs.ualberta.ca/~jag/)\n\n\n__Contact__: xuebin[at]ualberta[dot]ca\n\n## Updates !!!\n\n** (2022-Aug.-24) ** We are glad to announce that our U<sup>2</sup>-Net published in Pattern Recognition has been awarded the 2020 Pattern Recognition BEST PAPER AWARD !!!\n![u2net-best-paper](figures/u2net-best-paper.jpg)\n\n** (2022-Aug.-17) **\nOur U<sup>2</sup>-Net models are now available on [PlayTorch](https://playtorch.dev/), where you can build your own demo and run it on your Android/iOS phone. Try out this demo on [![PlayTorch Demo](https://github.com/facebookresearch/playtorch/blob/main/website/static/assets/playtorch_badge.svg)](https://playtorch.dev/snack/@playtorch/u2net/) and bring your ideas about U<sup>2</sup>-Net to truth in minutes!\n\n** (2022-Jul.-5)** Our new work **Highly Accurate Dichotomous Image Segmentation (DIS) [**Project Page**](https://xuebinqin.github.io/dis/index.html), [**Github**](https://github.com/xuebinqin/DIS) is accepted by ECCV 2022. Our code and dataset will be released before July 17th, 2022. Please be aware of our updates. \n![ship-demo](figures/ship-demo.gif)\n![bg-removal](figures/bg-removal.gif)\n![view-move](figures/view-move.gif)\n![motor-demo](figures/motor-demo.gif)\n\n** (2022-Jun.-3)** Thank [**Adir Kol**](https://github.com/adirkol) for sharing the iOS App [**3D Photo Creator**](https://apps.apple.com/us/app/3d-photo-creator/id1619676262) based on our U<sup>2</sup>-Net.\n![portrait-ios-app](figures/3d-photo-re.jpg)\n\n** (2022-Mar.-31)** Thank [**Hikaru Tsuyumine**] for implementing the iOS App [**Portrait Drawing**](https://apps.apple.com/us/app/portrait-drawing/id1623269600) based on our U<sup>2</sup>-Net portrait generation model.\n![portrait-ios-app](figures/portrait-ios-app.jpg)\n\n** (2022-Apr.-12)** Thank [**Kevin Shah**](https://github.com/ioskevinshah) for providing us a great iOS App [**Lensto**](https://apps.apple.com/in/app/lensto-background-changer/id1574844033), ([**Demo Video**](https://www.youtube.com/shorts/jWwUiKZjfok)), based on U<sup>2</sup>-Net.\n![lensto](figures/lensto.png)\n\n** (2022-Mar.-31)** Our U<sup>2</sup>-Net model is also integrated by [**Hotpot.ai**](https://hotpot.ai/) for art design.\n![hotpot](figures/hotpot.png)\n\n** (2022-Mar-19)** Thank [**Kikedao**](https://github.com/Kikedao) for providing a fantastic webapp [**Silueta**](https://silueta.me/) based on U<sup>2</sup>-Net. More details can be found at [**https://github.com/xuebinqin/U-2-Net/issues/295**](https://github.com/xuebinqin/U-2-Net/issues/295).\n![silueta](figures/silueta.png) \n\n** (2022-Mar-17)** Thank [**Ezaldeen Sahb**](https://github.com/Ezaldeen99/BackgroundRemoval) for implementing the iOS library for image background removal based on U<sup>2</sup>-Net, which will greatly facilitate the developing of mobile apps.\n![close-seg](figures/swift-u2net.jpeg) \n\n<!-- ** (2022-Mar-10)** Thank [**Doron Adler**](https://github.com/Norod/U-2-Net-StyleTransfer) for training the awesome style transfer U<sup>2</sup>-Net.\n![style-trans](figures/style-trans.JPG)  -->\n\n** (2022-Mar-8)** Thank [**Levin Dabhi**](https://github.com/levindabhi/cloth-segmentation) for training the amazing clothes segmentation U<sup>2</sup>-Net.\n![close-seg](figures/close-seg.jpg) \n\n** (2022-Mar-3)** Thank [**Renato Violin**](https://github.com/renatoviolin/bg-remove-augment) for providing an awesome webapp for image background removal and replacement based on our U<sup>2</sup>-Net.\n![bg-rm-aug](figures/bg-rm-aug.gif) \n\n**(2021-Dec-21)** This [**blog**](https://rockyshikoku.medium.com/u2net-to-coreml-machine-learning-segmentation-on-iphone-eac0c721d67b) clearly describes the way of converting U<sup>2</sup>-Net to [**CoreML**](https://github.com/john-rocky/CoreML-Models) and running it on iphone. \n\n**(2021-Nov-28)** Interesting Sky Segmentation models developed by [**xiongzhu**](https://github.com/xiongzhu666/Sky-Segmentation-and-Post-processing) using U<sup>2</sup>-Net. \n\n![im_sky_segmentation](figures/sky-seg.png)\n\n**(2021-Nov-28)** Awesome image editing app [**Pixelmator pro**](https://www.pixelmator.com/pro/) uses U<sup>2</sup>-Net as one of its background removal models. \n\n![im_sky_segmentation](figures/pixelmator.jpg)\n\n**(2021-Aug-24)** We played a bit more about fusing the orignal image and the generated portraits to composite different styles. You can <br/> \n(1) Download this repo by\n```\ngit clone https://github.com/NathanUA/U-2-Net.git\n```\n(2) Download the u2net_portrait.pth from [**GoogleDrive**](https://drive.google.com/file/d/1IG3HdpcRiDoWNookbncQjeaPN28t90yW/view?usp=sharing) or [**Baidu Pan(提取码：chgd)**](https://pan.baidu.com/s/1BYT5Ts6BxwpB8_l2sAyCkw)model and put it into the directory: ```./saved_models/u2net_portrait/```, <br/>\n(3) run the code by command \n```\npython u2net_portrait_composite.py -s 20 -a 0.5\n```\n,where ``-s`` indicates the sigma of gaussian function for blurring the orignal image and ``-a`` denotes the alpha weights of the orignal image when fusing them. <br/>\n\n![im_portrait_composite](figures/im_composite.jpg)\n\n**(2021-July-16)** A new [background removal webapp](https://remove-background.net/) developed by Изатоп Василий. \n\n![rm_bg](figures/rm_bg.JPG)\n\n**(2021-May-26)** Thank [**Dang Quoc Quy**](https://github.com/quyvsquy) for his [**Art Transfer APP**](https://play.google.com/store/apps/details?id=com.quyvsquy.arttransfer) built upon U<sup>2</sup>-Net.\n\n<!---![art_transfer](figures/art_transfer.JPG)--->\n\n**(2021-May-5)** Thank [**AK391**](https://github.com/AK391) for sharing his [**Gradio Web Demo of U<sup>2</sup>-Net**](https://gradio.app/hub/AK391/U-2-Net).\n\n![gradio_web_demo](figures/gradio_web_demo.jpg)\n\n\n**(2021-Apr-29)** Thanks [**Jonathan Benavides Vallejo**](https://www.linkedin.com/in/jonathanbv/) for releasing his App [**LensOCR: Extract Text & Image**](https://apps.apple.com/ch/app/lensocr-extract-text-image/id1549961729?l=en&mt=12), which uses U<sup>2</sup>-Net for extracting the image foreground.\n\n![LensOCR APP](figures/LensOCR.jpg)\n\n**(2021-Apr-18)** Thanks [**Andrea Scuderi**](https://www.linkedin.com/in/andreascuderi/) for releasing his App [**Clipping Camera**](https://apps.apple.com/us/app/clipping-camera/id1548192169?ign-mpt=uo%3D2), which is an U<sup>2</sup>-Net driven realtime camera app and \"is able to detect relevant object from the scene and clip them to apply fancy filters\". \n\n![Clipping Camera APP](figures/clipping_camera.jpg)\n\n**(2021-Mar-17)** [**Dennis Bappert**](https://github.com/dennisbappert) re-trained the U<sup>2</sup>-Net model for [**human portrait matting**](https://github.com/dennisbappert/u-2-net-portrait). The results look very promising and he also provided the details of the training process and data generation(and augmentation) strategy, which are inspiring.\n\n**(2021-Mar-11)** Dr. Tim developed a [**video version rembg**](https://github.com/ecsplendid/rembg-greenscreen) for removing video backgrounds using U<sup>2</sup>-Net. The awesome demo results can be found on [**YouTube**](https://www.youtube.com/watch?v=4NjqR2vCV_k).\n\n**(2021-Mar-02)** We found some other interesting applications of our U<sup>2</sup>-Net including [**MOJO CUT**](https://play.google.com/store/apps/details?id=com.innoria.magicut&hl=en_CA&gl=US), [**Real-Time Background Removal on Iphone**](https://www.linkedin.com/feed/update/urn:li:activity:6752303661705170944/?updateEntityUrn=urn%3Ali%3Afs_feedUpdate%3A%28V2%2Curn%3Ali%3Aactivity%3A6752303661705170944%29), [**Video Background Removal**](https://nisargkapkar.hashnode.dev/image-and-video-background-removal-using-deep-learning), [**Another Online Portrait Generation Demo on AWS**](http://s3-website-hosting-u2net.s3-website-eu-west-1.amazonaws.com/), [**AI Scissor**](https://qooba.net/2020/09/11/ai-scissors-sharp-cut-with-neural-networks/).\n\n**(2021-Feb-15)** We just released an online demo [**http://profu.ai**](http://profu.ai) for the portrait generation. Please feel free to give it a try and provide any suggestions or comments. <br/>\n![Profuai](figures/profuai.png) <br/>\n\n**(2021-Feb-06)** Recently, some people asked the problem of using U<sup>2</sup>-Net for human segmentation, so we trained another example model for human segemntation based on [**Supervisely Person Dataset**](https://supervise.ly/explore/projects/supervisely-person-dataset-23304/datasets). <br/>\n\n(1) To run the human segmentation model, please first downlowd the [**u2net_human_seg.pth**](https://drive.google.com/file/d/1m_Kgs91b21gayc2XLW0ou8yugAIadWVP/view?usp=sharing) model weights into ``` ./saved_models/u2net_human_seg/```. <br/>\n(2) Prepare the to-be-segmented images into the corresponding directory, e.g. ```./test_data/test_human_images/```. <br/>\n(3) Run the inference by command: ```python u2net_human_seg_test.py``` and the results will be output into the corresponding dirctory, e.g. ```./test_data/u2net_test_human_images_results/```<br/>\n[**Notes: Due to the labeling accuracy of the Supervisely Person Dataset, the human segmentation model (u2net_human_seg.pth) here won't give you hair-level accuracy. But it should be more robust than u2net trained with DUTS-TR dataset on general human segmentation task. It can be used for human portrait segmentation, human body segmentation, etc.**](https://github.com/NathanUA/U-2-Net)<br/>\n\n![Human Image Segmentation](figures/human_seg.png) <br/>\n![Human Video](figures/human_seg_video.gif)\n![Human Video Results](figures/human_seg_results.gif)\n\n**(2020-Dec-28)** Some interesting applications and useful tools based on U<sup>2</sup>-Net: <br/>\n(1) [**Xiaolong Liu**](https://github.com/LiuXiaolong19920720) developed several very interesting applications based on U<sup>2</sup>-Net including [**Human Portrait Drawing**](https://www.cvpy.net/studio/cv/func/DeepLearning/sketch/sketch/page/)(As far as I know, Xiaolong is the first one who uses U<sup>2</sup>-Net for portrait generation), [**image matting**](https://www.cvpy.net/studio/cv/func/DeepLearning/matting/matting/page/) and [**so on**](https://www.cvpy.net/). <br/>\n(2) [**Vladimir Seregin**](https://github.com/peko/nn-lineart) developed an interesting tool, [**NN based lineart**](https://peko.github.io/nn-lineart/), for comparing the portrait results of U<sup>2</sup>-Net and that of another popular model, [**ArtLine**](https://github.com/vijishmadhavan/ArtLine), developed by [**Vijish Madhavan**](https://github.com/vijishmadhavan). <br/>\n(3) [**Daniel Gatis**](https://github.com/danielgatis/rembg) built a python tool, [**Rembg**](https://pypi.org/project/rembg/), for image backgrounds removal based on U<sup>2</sup>-Net. I think this tool will greatly facilitate the application of U<sup>2</sup>-Net in different fields. <br/>\n![REMBG](figures/rembg.png)\n\n**(2020-Nov-21)** Recently, we found an interesting application of U<sup>2</sup>-Net for [**human portrait drawing**](https://www.pythonf.cn/read/141098). Therefore, we trained another model for this task based on the [**APDrawingGAN dataset**](https://github.com/yiranran/APDrawingGAN).\n\n![Sample Results: Kids](figures/portrait_kids.png)\n\n![Sample Results: Ladies](figures/portrait_ladies.png)\n\n![Sample Results: Men](figures/portrait_men.png)\n\n### Usage for portrait generation\n1. Clone this repo to local\n```\ngit clone https://github.com/NathanUA/U-2-Net.git\n```\n\n2. Download the u2net_portrait.pth from [**GoogleDrive**](https://drive.google.com/file/d/1IG3HdpcRiDoWNookbncQjeaPN28t90yW/view?usp=sharing) or [**Baidu Pan(提取码：chgd)**](https://pan.baidu.com/s/1BYT5Ts6BxwpB8_l2sAyCkw)model and put it into the directory: ```./saved_models/u2net_portrait/```.\n\n3. Run on the testing set. <br/>\n(1) Download the train and test set from [**APDrawingGAN**](https://github.com/yiranran/APDrawingGAN). These images and their ground truth are stitched side-by-side (512x1024). You need to split each of these images into two 512x512 images and put them into ```./test_data/test_portrait_images/portrait_im/```. You can also download the split testing set on [GoogleDrive](https://drive.google.com/file/d/1NkTsDDN8VO-JVik6VxXyV-3l2eo29KCk/view?usp=sharing). <br/>\n(2) Running the inference with command ```python u2net_portrait_test.py``` will ouptut the results into ```./test_data/test_portrait_images/portrait_results```. <br/>\n\n4. Run on your own dataset. <br/>\n(1) Prepare your images and put them into ```./test_data/test_portrait_images/your_portrait_im/```. [**To obtain enough details of the protrait, human head region in the input image should be close to or larger than 512x512. The head background should be relatively clear.**](https://github.com/NathanUA/U-2-Net) <br/>\n(2) Run the prediction by command ```python u2net_portrait_demo.py``` will outputs the results to ```./test_data/test_portrait_images/your_portrait_results/```. <br/>\n(3) The difference between ```python u2net_portrait_demo.py``` and ```python u2net_portrait_test.py``` is that we added a simple [**face detection**](https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html) step before the portrait generation in ```u2net_portrait_demo.py```.  Because the testing set of APDrawingGAN are normalized and cropped to 512x512 for including only heads of humans, while our own dataset may varies with different resolutions and contents. Therefore, the code ```python u2net_portrait_demo.py``` will detect the biggest face from the given image and then crop, pad and resize the ROI to 512x512 for feeding to the network. The following figure shows how to take your own photos for generating high quality portraits.\n\n**(2020-Sep-13)** Our U<sup>2</sup>-Net based model is the **6th** in [**MICCAI 2020 Thyroid Nodule Segmentation Challenge**](https://tn-scui2020.grand-challenge.org/Resultannouncement/).\n\n**(2020-May-18)** The official paper of our **U<sup>2</sup>-Net (U square net)** ([**PDF in elsevier**(free until July 5 2020)](https://www.sciencedirect.com/science/article/pii/S0031320320302077?dgcid=author), [**PDF in arxiv**](http://arxiv.org/abs/2005.09007)) is now available. If you are not able to access that, please feel free to drop me an email.\n\n**(2020-May-16)** We fixed the upsampling issue of the network. Now, the model should be able to handle **arbitrary input size**. (Tips: This modification is to facilitate the retraining of U<sup>2</sup>-Net on your own datasets. When using our pre-trained model on SOD datasets, please keep the input size as 320x320 to guarantee the performance.)\n\n**(2020-May-16)** We highly appreciate **Cyril Diagne** for building this fantastic AR project: [**AR Copy and Paste**](https://github.com/cyrildiagne/ar-cutpaste) using our **U<sup>2</sup>-Net** (Qin *et al*, PR 2020) and [**BASNet**](https://github.com/NathanUA/BASNet)(Qin *et al*, CVPR 2019). The [**demo video**](https://twitter.com/cyrildiagne/status/1256916982764646402) in twitter has achieved over **5M** views, which is phenomenal and shows us more application possibilities of SOD.\n\n## U<sup>2</sup>-Net Results (176.3 MB)\n\n![U<sup>2</sup>-Net Results](figures/u2netqual.png)\n\n\n## Our previous work: [BASNet (CVPR 2019)](https://github.com/NathanUA/BASNet)\n\n## Required libraries\n\nPython 3.6  \nnumpy 1.15.2  \nscikit-image 0.14.0  \npython-opencv\nPIL 5.2.0  \nPyTorch 0.4.0  \ntorchvision 0.2.1  \nglob  \n\n## Usage for salient object detection\n1. Clone this repo\n```\ngit clone https://github.com/NathanUA/U-2-Net.git\n```\n2. Download the pre-trained model u2net.pth (176.3 MB) from [**GoogleDrive**](https://drive.google.com/file/d/1ao1ovG1Qtx4b7EoskHXmi2E9rp5CHLcZ/view?usp=sharing) or [**Baidu Pan 提取码: pf9k**](https://pan.baidu.com/s/1WjwyEwDiaUjBbx_QxcXBwQ) or u2netp.pth (4.7 MB) from [**GoogleDrive**](https://drive.google.com/file/d/1rbSTGKAE-MTxBYHd-51l2hMOQPT_7EPy/view?usp=sharing) or [**Baidu Pan 提取码: 8xsi**](https://pan.baidu.com/s/10tW12OlecRpE696z8FxdNQ) and put it into the dirctory './saved_models/u2net/' and './saved_models/u2netp/'\n\n3.  Cd to the directory 'U-2-Net', run the train or inference process by command: ```python u2net_train.py```\nor ```python u2net_test.py``` respectively. The 'model_name' in both files can be changed to 'u2net' or 'u2netp' for using different models.  \n\n We also provide the predicted saliency maps ([u2net results](https://drive.google.com/file/d/1mZFWlS4WygWh1eVI8vK2Ad9LrPq4Hp5v/view?usp=sharing),[u2netp results](https://drive.google.com/file/d/1j2pU7vyhOO30C2S_FJuRdmAmMt3-xmjD/view?usp=sharing)) for datasets SOD, ECSSD, DUT-OMRON, PASCAL-S, HKU-IS and DUTS-TE.\n\n\n## U<sup>2</sup>-Net Architecture\n\n![U<sup>2</sup>-Net architecture](figures/U2NETPR.png)\n\n\n## Quantitative Comparison\n\n![Quantitative Comparison](figures/quan_1.png)\n\n![Quantitative Comparison](figures/quan_2.png)\n\n\n## Qualitative Comparison\n\n![Qualitative Comparison](figures/qual.png?raw=true)\n\n## Citation\n```\n@InProceedings{Qin_2020_PR,\ntitle = {U2-Net: Going Deeper with Nested U-Structure for Salient Object Detection},\nauthor = {Qin, Xuebin and Zhang, Zichen and Huang, Chenyang and Dehghan, Masood and Zaiane, Osmar and Jagersand, Martin},\njournal = {Pattern Recognition},\nvolume = {106},\npages = {107404},\nyear = {2020}\n}\n```\n"
        },
        {
          "name": "__pycache__",
          "type": "tree",
          "content": null
        },
        {
          "name": "clipping_camera.jpg",
          "type": "blob",
          "size": 201.392578125,
          "content": null
        },
        {
          "name": "data_loader.py",
          "type": "blob",
          "size": 8.56640625,
          "content": "# data loader\nfrom __future__ import print_function, division\nimport glob\nimport torch\nfrom skimage import io, transform, color\nimport numpy as np\nimport random\nimport math\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, utils\nfrom PIL import Image\n\n#==========================dataset load==========================\nclass RescaleT(object):\n\n\tdef __init__(self,output_size):\n\t\tassert isinstance(output_size,(int,tuple))\n\t\tself.output_size = output_size\n\n\tdef __call__(self,sample):\n\t\timidx, image, label = sample['imidx'], sample['image'],sample['label']\n\n\t\th, w = image.shape[:2]\n\n\t\tif isinstance(self.output_size,int):\n\t\t\tif h > w:\n\t\t\t\tnew_h, new_w = self.output_size*h/w,self.output_size\n\t\t\telse:\n\t\t\t\tnew_h, new_w = self.output_size,self.output_size*w/h\n\t\telse:\n\t\t\tnew_h, new_w = self.output_size\n\n\t\tnew_h, new_w = int(new_h), int(new_w)\n\n\t\t# #resize the image to new_h x new_w and convert image from range [0,255] to [0,1]\n\t\t# img = transform.resize(image,(new_h,new_w),mode='constant')\n\t\t# lbl = transform.resize(label,(new_h,new_w),mode='constant', order=0, preserve_range=True)\n\n\t\timg = transform.resize(image,(self.output_size,self.output_size),mode='constant')\n\t\tlbl = transform.resize(label,(self.output_size,self.output_size),mode='constant', order=0, preserve_range=True)\n\n\t\treturn {'imidx':imidx, 'image':img,'label':lbl}\n\nclass Rescale(object):\n\n\tdef __init__(self,output_size):\n\t\tassert isinstance(output_size,(int,tuple))\n\t\tself.output_size = output_size\n\n\tdef __call__(self,sample):\n\t\timidx, image, label = sample['imidx'], sample['image'],sample['label']\n\n\t\tif random.random() >= 0.5:\n\t\t\timage = image[::-1]\n\t\t\tlabel = label[::-1]\n\n\t\th, w = image.shape[:2]\n\n\t\tif isinstance(self.output_size,int):\n\t\t\tif h > w:\n\t\t\t\tnew_h, new_w = self.output_size*h/w,self.output_size\n\t\t\telse:\n\t\t\t\tnew_h, new_w = self.output_size,self.output_size*w/h\n\t\telse:\n\t\t\tnew_h, new_w = self.output_size\n\n\t\tnew_h, new_w = int(new_h), int(new_w)\n\n\t\t# #resize the image to new_h x new_w and convert image from range [0,255] to [0,1]\n\t\timg = transform.resize(image,(new_h,new_w),mode='constant')\n\t\tlbl = transform.resize(label,(new_h,new_w),mode='constant', order=0, preserve_range=True)\n\n\t\treturn {'imidx':imidx, 'image':img,'label':lbl}\n\nclass RandomCrop(object):\n\n\tdef __init__(self,output_size):\n\t\tassert isinstance(output_size, (int, tuple))\n\t\tif isinstance(output_size, int):\n\t\t\tself.output_size = (output_size, output_size)\n\t\telse:\n\t\t\tassert len(output_size) == 2\n\t\t\tself.output_size = output_size\n\tdef __call__(self,sample):\n\t\timidx, image, label = sample['imidx'], sample['image'], sample['label']\n\n\t\tif random.random() >= 0.5:\n\t\t\timage = image[::-1]\n\t\t\tlabel = label[::-1]\n\n\t\th, w = image.shape[:2]\n\t\tnew_h, new_w = self.output_size\n\n\t\ttop = np.random.randint(0, h - new_h)\n\t\tleft = np.random.randint(0, w - new_w)\n\n\t\timage = image[top: top + new_h, left: left + new_w]\n\t\tlabel = label[top: top + new_h, left: left + new_w]\n\n\t\treturn {'imidx':imidx,'image':image, 'label':label}\n\nclass ToTensor(object):\n\t\"\"\"Convert ndarrays in sample to Tensors.\"\"\"\n\n\tdef __call__(self, sample):\n\n\t\timidx, image, label = sample['imidx'], sample['image'], sample['label']\n\n\t\ttmpImg = np.zeros((image.shape[0],image.shape[1],3))\n\t\ttmpLbl = np.zeros(label.shape)\n\n\t\timage = image/np.max(image)\n\t\tif(np.max(label)<1e-6):\n\t\t\tlabel = label\n\t\telse:\n\t\t\tlabel = label/np.max(label)\n\n\t\tif image.shape[2]==1:\n\t\t\ttmpImg[:,:,0] = (image[:,:,0]-0.485)/0.229\n\t\t\ttmpImg[:,:,1] = (image[:,:,0]-0.485)/0.229\n\t\t\ttmpImg[:,:,2] = (image[:,:,0]-0.485)/0.229\n\t\telse:\n\t\t\ttmpImg[:,:,0] = (image[:,:,0]-0.485)/0.229\n\t\t\ttmpImg[:,:,1] = (image[:,:,1]-0.456)/0.224\n\t\t\ttmpImg[:,:,2] = (image[:,:,2]-0.406)/0.225\n\n\t\ttmpLbl[:,:,0] = label[:,:,0]\n\n\n\t\ttmpImg = tmpImg.transpose((2, 0, 1))\n\t\ttmpLbl = label.transpose((2, 0, 1))\n\n\t\treturn {'imidx':torch.from_numpy(imidx), 'image': torch.from_numpy(tmpImg), 'label': torch.from_numpy(tmpLbl)}\n\nclass ToTensorLab(object):\n\t\"\"\"Convert ndarrays in sample to Tensors.\"\"\"\n\tdef __init__(self,flag=0):\n\t\tself.flag = flag\n\n\tdef __call__(self, sample):\n\n\t\timidx, image, label =sample['imidx'], sample['image'], sample['label']\n\n\t\ttmpLbl = np.zeros(label.shape)\n\n\t\tif(np.max(label)<1e-6):\n\t\t\tlabel = label\n\t\telse:\n\t\t\tlabel = label/np.max(label)\n\n\t\t# change the color space\n\t\tif self.flag == 2: # with rgb and Lab colors\n\t\t\ttmpImg = np.zeros((image.shape[0],image.shape[1],6))\n\t\t\ttmpImgt = np.zeros((image.shape[0],image.shape[1],3))\n\t\t\tif image.shape[2]==1:\n\t\t\t\ttmpImgt[:,:,0] = image[:,:,0]\n\t\t\t\ttmpImgt[:,:,1] = image[:,:,0]\n\t\t\t\ttmpImgt[:,:,2] = image[:,:,0]\n\t\t\telse:\n\t\t\t\ttmpImgt = image\n\t\t\ttmpImgtl = color.rgb2lab(tmpImgt)\n\n\t\t\t# nomalize image to range [0,1]\n\t\t\ttmpImg[:,:,0] = (tmpImgt[:,:,0]-np.min(tmpImgt[:,:,0]))/(np.max(tmpImgt[:,:,0])-np.min(tmpImgt[:,:,0]))\n\t\t\ttmpImg[:,:,1] = (tmpImgt[:,:,1]-np.min(tmpImgt[:,:,1]))/(np.max(tmpImgt[:,:,1])-np.min(tmpImgt[:,:,1]))\n\t\t\ttmpImg[:,:,2] = (tmpImgt[:,:,2]-np.min(tmpImgt[:,:,2]))/(np.max(tmpImgt[:,:,2])-np.min(tmpImgt[:,:,2]))\n\t\t\ttmpImg[:,:,3] = (tmpImgtl[:,:,0]-np.min(tmpImgtl[:,:,0]))/(np.max(tmpImgtl[:,:,0])-np.min(tmpImgtl[:,:,0]))\n\t\t\ttmpImg[:,:,4] = (tmpImgtl[:,:,1]-np.min(tmpImgtl[:,:,1]))/(np.max(tmpImgtl[:,:,1])-np.min(tmpImgtl[:,:,1]))\n\t\t\ttmpImg[:,:,5] = (tmpImgtl[:,:,2]-np.min(tmpImgtl[:,:,2]))/(np.max(tmpImgtl[:,:,2])-np.min(tmpImgtl[:,:,2]))\n\n\t\t\t# tmpImg = tmpImg/(np.max(tmpImg)-np.min(tmpImg))\n\n\t\t\ttmpImg[:,:,0] = (tmpImg[:,:,0]-np.mean(tmpImg[:,:,0]))/np.std(tmpImg[:,:,0])\n\t\t\ttmpImg[:,:,1] = (tmpImg[:,:,1]-np.mean(tmpImg[:,:,1]))/np.std(tmpImg[:,:,1])\n\t\t\ttmpImg[:,:,2] = (tmpImg[:,:,2]-np.mean(tmpImg[:,:,2]))/np.std(tmpImg[:,:,2])\n\t\t\ttmpImg[:,:,3] = (tmpImg[:,:,3]-np.mean(tmpImg[:,:,3]))/np.std(tmpImg[:,:,3])\n\t\t\ttmpImg[:,:,4] = (tmpImg[:,:,4]-np.mean(tmpImg[:,:,4]))/np.std(tmpImg[:,:,4])\n\t\t\ttmpImg[:,:,5] = (tmpImg[:,:,5]-np.mean(tmpImg[:,:,5]))/np.std(tmpImg[:,:,5])\n\n\t\telif self.flag == 1: #with Lab color\n\t\t\ttmpImg = np.zeros((image.shape[0],image.shape[1],3))\n\n\t\t\tif image.shape[2]==1:\n\t\t\t\ttmpImg[:,:,0] = image[:,:,0]\n\t\t\t\ttmpImg[:,:,1] = image[:,:,0]\n\t\t\t\ttmpImg[:,:,2] = image[:,:,0]\n\t\t\telse:\n\t\t\t\ttmpImg = image\n\n\t\t\ttmpImg = color.rgb2lab(tmpImg)\n\n\t\t\t# tmpImg = tmpImg/(np.max(tmpImg)-np.min(tmpImg))\n\n\t\t\ttmpImg[:,:,0] = (tmpImg[:,:,0]-np.min(tmpImg[:,:,0]))/(np.max(tmpImg[:,:,0])-np.min(tmpImg[:,:,0]))\n\t\t\ttmpImg[:,:,1] = (tmpImg[:,:,1]-np.min(tmpImg[:,:,1]))/(np.max(tmpImg[:,:,1])-np.min(tmpImg[:,:,1]))\n\t\t\ttmpImg[:,:,2] = (tmpImg[:,:,2]-np.min(tmpImg[:,:,2]))/(np.max(tmpImg[:,:,2])-np.min(tmpImg[:,:,2]))\n\n\t\t\ttmpImg[:,:,0] = (tmpImg[:,:,0]-np.mean(tmpImg[:,:,0]))/np.std(tmpImg[:,:,0])\n\t\t\ttmpImg[:,:,1] = (tmpImg[:,:,1]-np.mean(tmpImg[:,:,1]))/np.std(tmpImg[:,:,1])\n\t\t\ttmpImg[:,:,2] = (tmpImg[:,:,2]-np.mean(tmpImg[:,:,2]))/np.std(tmpImg[:,:,2])\n\n\t\telse: # with rgb color\n\t\t\ttmpImg = np.zeros((image.shape[0],image.shape[1],3))\n\t\t\timage = image/np.max(image)\n\t\t\tif image.shape[2]==1:\n\t\t\t\ttmpImg[:,:,0] = (image[:,:,0]-0.485)/0.229\n\t\t\t\ttmpImg[:,:,1] = (image[:,:,0]-0.485)/0.229\n\t\t\t\ttmpImg[:,:,2] = (image[:,:,0]-0.485)/0.229\n\t\t\telse:\n\t\t\t\ttmpImg[:,:,0] = (image[:,:,0]-0.485)/0.229\n\t\t\t\ttmpImg[:,:,1] = (image[:,:,1]-0.456)/0.224\n\t\t\t\ttmpImg[:,:,2] = (image[:,:,2]-0.406)/0.225\n\n\t\ttmpLbl[:,:,0] = label[:,:,0]\n\n\n\t\ttmpImg = tmpImg.transpose((2, 0, 1))\n\t\ttmpLbl = label.transpose((2, 0, 1))\n\n\t\treturn {'imidx':torch.from_numpy(imidx), 'image': torch.from_numpy(tmpImg), 'label': torch.from_numpy(tmpLbl)}\n\nclass SalObjDataset(Dataset):\n\tdef __init__(self,img_name_list,lbl_name_list,transform=None):\n\t\t# self.root_dir = root_dir\n\t\t# self.image_name_list = glob.glob(image_dir+'*.png')\n\t\t# self.label_name_list = glob.glob(label_dir+'*.png')\n\t\tself.image_name_list = img_name_list\n\t\tself.label_name_list = lbl_name_list\n\t\tself.transform = transform\n\n\tdef __len__(self):\n\t\treturn len(self.image_name_list)\n\n\tdef __getitem__(self,idx):\n\n\t\t# image = Image.open(self.image_name_list[idx])#io.imread(self.image_name_list[idx])\n\t\t# label = Image.open(self.label_name_list[idx])#io.imread(self.label_name_list[idx])\n\n\t\timage = io.imread(self.image_name_list[idx])\n\t\timname = self.image_name_list[idx]\n\t\timidx = np.array([idx])\n\n\t\tif(0==len(self.label_name_list)):\n\t\t\tlabel_3 = np.zeros(image.shape)\n\t\telse:\n\t\t\tlabel_3 = io.imread(self.label_name_list[idx])\n\n\t\tlabel = np.zeros(label_3.shape[0:2])\n\t\tif(3==len(label_3.shape)):\n\t\t\tlabel = label_3[:,:,0]\n\t\telif(2==len(label_3.shape)):\n\t\t\tlabel = label_3\n\n\t\tif(3==len(image.shape) and 2==len(label.shape)):\n\t\t\tlabel = label[:,:,np.newaxis]\n\t\telif(2==len(image.shape) and 2==len(label.shape)):\n\t\t\timage = image[:,:,np.newaxis]\n\t\t\tlabel = label[:,:,np.newaxis]\n\n\t\tsample = {'imidx':imidx, 'image':image, 'label':label}\n\n\t\tif self.transform:\n\t\t\tsample = self.transform(sample)\n\n\t\treturn sample\n"
        },
        {
          "name": "figures",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradio",
          "type": "tree",
          "content": null
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1083984375,
          "content": "numpy==1.15.2\nscikit-image==0.14.0\ntorch\ntorchvision\npillow==8.1.1\nopencv-python\npaddlepaddle\npaddlehub\ngradio\n"
        },
        {
          "name": "saved_models",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup_model_weights.py",
          "type": "blob",
          "size": 0.4208984375,
          "content": "import os\nimport gdown\n\nos.makedirs('./saved_models/u2net', exist_ok=True)\nos.makedirs('./saved_models/u2net_portrait', exist_ok=True)\n\ngdown.download('https://drive.google.com/uc?id=1ao1ovG1Qtx4b7EoskHXmi2E9rp5CHLcZ',\n    './saved_models/u2net/u2net.pth',\n    quiet=False)\n\ngdown.download('https://drive.google.com/uc?id=1IG3HdpcRiDoWNookbncQjeaPN28t90yW',\n    './saved_models/u2net_portrait/u2net_portrait.pth',\n    quiet=False)\n"
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        },
        {
          "name": "u2net_human_seg_test.py",
          "type": "blob",
          "size": 3.4541015625,
          "content": "import os\nfrom skimage import io, transform\nimport torch\nimport torchvision\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms#, utils\n# import torch.optim as optim\n\nimport numpy as np\nfrom PIL import Image\nimport glob\n\nfrom data_loader import RescaleT\nfrom data_loader import ToTensor\nfrom data_loader import ToTensorLab\nfrom data_loader import SalObjDataset\n\nfrom model import U2NET # full size version 173.6 MB\n\n# normalize the predicted SOD probability map\ndef normPRED(d):\n    ma = torch.max(d)\n    mi = torch.min(d)\n\n    dn = (d-mi)/(ma-mi)\n\n    return dn\n\ndef save_output(image_name,pred,d_dir):\n\n    predict = pred\n    predict = predict.squeeze()\n    predict_np = predict.cpu().data.numpy()\n\n    im = Image.fromarray(predict_np*255).convert('RGB')\n    img_name = image_name.split(os.sep)[-1]\n    image = io.imread(image_name)\n    imo = im.resize((image.shape[1],image.shape[0]),resample=Image.BILINEAR)\n\n    pb_np = np.array(imo)\n\n    aaa = img_name.split(\".\")\n    bbb = aaa[0:-1]\n    imidx = bbb[0]\n    for i in range(1,len(bbb)):\n        imidx = imidx + \".\" + bbb[i]\n\n    imo.save(d_dir+imidx+'.png')\n\ndef main():\n\n    # --------- 1. get image path and name ---------\n    model_name='u2net'\n\n\n    image_dir = os.path.join(os.getcwd(), 'test_data', 'test_human_images')\n    prediction_dir = os.path.join(os.getcwd(), 'test_data', 'test_human_images' + '_results' + os.sep)\n    model_dir = os.path.join(os.getcwd(), 'saved_models', model_name+'_human_seg', model_name + '_human_seg.pth')\n\n    img_name_list = glob.glob(image_dir + os.sep + '*')\n    print(img_name_list)\n\n    # --------- 2. dataloader ---------\n    #1. dataloader\n    test_salobj_dataset = SalObjDataset(img_name_list = img_name_list,\n                                        lbl_name_list = [],\n                                        transform=transforms.Compose([RescaleT(320),\n                                                                      ToTensorLab(flag=0)])\n                                        )\n    test_salobj_dataloader = DataLoader(test_salobj_dataset,\n                                        batch_size=1,\n                                        shuffle=False,\n                                        num_workers=1)\n\n    # --------- 3. model define ---------\n    if(model_name=='u2net'):\n        print(\"...load U2NET---173.6 MB\")\n        net = U2NET(3,1)\n\n    if torch.cuda.is_available():\n        net.load_state_dict(torch.load(model_dir))\n        net.cuda()\n    else:\n        net.load_state_dict(torch.load(model_dir, map_location='cpu'))\n    net.eval()\n\n    # --------- 4. inference for each image ---------\n    for i_test, data_test in enumerate(test_salobj_dataloader):\n\n        print(\"inferencing:\",img_name_list[i_test].split(os.sep)[-1])\n\n        inputs_test = data_test['image']\n        inputs_test = inputs_test.type(torch.FloatTensor)\n\n        if torch.cuda.is_available():\n            inputs_test = Variable(inputs_test.cuda())\n        else:\n            inputs_test = Variable(inputs_test)\n\n        d1,d2,d3,d4,d5,d6,d7= net(inputs_test)\n\n        # normalization\n        pred = d1[:,0,:,:]\n        pred = normPRED(pred)\n\n        # save results to test_results folder\n        if not os.path.exists(prediction_dir):\n            os.makedirs(prediction_dir, exist_ok=True)\n        save_output(img_name_list[i_test],pred,prediction_dir)\n\n        del d1,d2,d3,d4,d5,d6,d7\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "u2net_portrait_composite.py",
          "type": "blob",
          "size": 4.1943359375,
          "content": "import os\nfrom skimage import io, transform\nfrom skimage.filters import gaussian\nimport torch\nimport torchvision\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms#, utils\n# import torch.optim as optim\n\nimport numpy as np\nfrom PIL import Image\nimport glob\n\nfrom data_loader import RescaleT\nfrom data_loader import ToTensor\nfrom data_loader import ToTensorLab\nfrom data_loader import SalObjDataset\n\nfrom model import U2NET # full size version 173.6 MB\nfrom model import U2NETP # small version u2net 4.7 MB\n\nimport argparse\n\n# normalize the predicted SOD probability map\ndef normPRED(d):\n    ma = torch.max(d)\n    mi = torch.min(d)\n\n    dn = (d-mi)/(ma-mi)\n\n    return dn\n\ndef save_output(image_name,pred,d_dir,sigma=2,alpha=0.5):\n\n    predict = pred\n    predict = predict.squeeze()\n    predict_np = predict.cpu().data.numpy()\n\n    image = io.imread(image_name)\n    pd = transform.resize(predict_np,image.shape[0:2],order=2)\n    pd = pd/(np.amax(pd)+1e-8)*255\n    pd = pd[:,:,np.newaxis]\n\n    print(image.shape)\n    print(pd.shape)\n\n    ## fuse the orignal portrait image and the portraits into one composite image\n    ## 1. use gaussian filter to blur the orginal image\n    sigma=sigma\n    image = gaussian(image, sigma=sigma, preserve_range=True)\n\n    ## 2. fuse these orignal image and the portrait with certain weight: alpha\n    alpha = alpha\n    im_comp = image*alpha+pd*(1-alpha)\n\n    print(im_comp.shape)\n\n\n    img_name = image_name.split(os.sep)[-1]\n    aaa = img_name.split(\".\")\n    bbb = aaa[0:-1]\n    imidx = bbb[0]\n    for i in range(1,len(bbb)):\n        imidx = imidx + \".\" + bbb[i]\n    io.imsave(d_dir+'/'+imidx+'_sigma_' + str(sigma) + '_alpha_' + str(alpha) + '_composite.png',im_comp)\n\ndef main():\n\n    parser = argparse.ArgumentParser(description=\"image and portrait composite\")\n    parser.add_argument('-s',action='store',dest='sigma')\n    parser.add_argument('-a',action='store',dest='alpha')\n    args = parser.parse_args()\n    print(args.sigma)\n    print(args.alpha)\n    print(\"--------------------\")\n\n    # --------- 1. get image path and name ---------\n    model_name='u2net_portrait'#u2netp\n\n\n    image_dir = './test_data/test_portrait_images/your_portrait_im'\n    prediction_dir = './test_data/test_portrait_images/your_portrait_results'\n    if(not os.path.exists(prediction_dir)):\n        os.mkdir(prediction_dir)\n\n    model_dir = './saved_models/u2net_portrait/u2net_portrait.pth'\n\n    img_name_list = glob.glob(image_dir+'/*')\n    print(\"Number of images: \", len(img_name_list))\n\n    # --------- 2. dataloader ---------\n    #1. dataloader\n    test_salobj_dataset = SalObjDataset(img_name_list = img_name_list,\n                                        lbl_name_list = [],\n                                        transform=transforms.Compose([RescaleT(512),\n                                                                      ToTensorLab(flag=0)])\n                                        )\n    test_salobj_dataloader = DataLoader(test_salobj_dataset,\n                                        batch_size=1,\n                                        shuffle=False,\n                                        num_workers=1)\n\n    # --------- 3. model define ---------\n\n    print(\"...load U2NET---173.6 MB\")\n    net = U2NET(3,1)\n\n    net.load_state_dict(torch.load(model_dir))\n    if torch.cuda.is_available():\n        net.cuda()\n    net.eval()\n\n    # --------- 4. inference for each image ---------\n    for i_test, data_test in enumerate(test_salobj_dataloader):\n\n        print(\"inferencing:\",img_name_list[i_test].split(os.sep)[-1])\n\n        inputs_test = data_test['image']\n        inputs_test = inputs_test.type(torch.FloatTensor)\n\n        if torch.cuda.is_available():\n            inputs_test = Variable(inputs_test.cuda())\n        else:\n            inputs_test = Variable(inputs_test)\n\n        d1,d2,d3,d4,d5,d6,d7= net(inputs_test)\n\n        # normalization\n        pred = 1.0 - d1[:,0,:,:]\n        pred = normPRED(pred)\n\n        # save results to test_results folder\n        save_output(img_name_list[i_test],pred,prediction_dir,sigma=float(args.sigma),alpha=float(args.alpha))\n\n        del d1,d2,d3,d4,d5,d6,d7\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "u2net_portrait_demo.py",
          "type": "blob",
          "size": 4.63671875,
          "content": "import cv2\nimport torch\nfrom model import U2NET\nfrom torch.autograd import Variable\nimport numpy as np\nfrom glob import glob\nimport os\n\ndef detect_single_face(face_cascade,img):\n    # Convert into grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # Detect faces\n    faces = face_cascade.detectMultiScale(gray, 1.1, 4)\n    if(len(faces)==0):\n        print(\"Warming: no face detection, the portrait u2net will run on the whole image!\")\n        return None\n\n    # filter to keep the largest face\n    wh = 0\n    idx = 0\n    for i in range(0,len(faces)):\n        (x,y,w,h) = faces[i]\n        if(wh<w*h):\n            idx = i\n            wh = w*h\n\n    return faces[idx]\n\n# crop, pad and resize face region to 512x512 resolution\ndef crop_face(img, face):\n\n    # no face detected, return the whole image and the inference will run on the whole image\n    if(face is None):\n        return img\n    (x, y, w, h) = face\n\n    height,width = img.shape[0:2]\n\n    # crop the face with a bigger bbox\n    hmw = h - w\n    # hpad = int(h/2)+1\n    # wpad = int(w/2)+1\n\n    l,r,t,b = 0,0,0,0\n    lpad = int(float(w)*0.4)\n    left = x-lpad\n    if(left<0):\n        l = lpad-x\n        left = 0\n\n    rpad = int(float(w)*0.4)\n    right = x+w+rpad\n    if(right>width):\n        r = right-width\n        right = width\n\n    tpad = int(float(h)*0.6)\n    top = y - tpad\n    if(top<0):\n        t = tpad-y\n        top = 0\n\n    bpad  = int(float(h)*0.2)\n    bottom = y+h+bpad\n    if(bottom>height):\n        b = bottom-height\n        bottom = height\n\n\n    im_face = img[top:bottom,left:right]\n    if(len(im_face.shape)==2):\n        im_face = np.repeat(im_face[:,:,np.newaxis],(1,1,3))\n\n    im_face = np.pad(im_face,((t,b),(l,r),(0,0)),mode='constant',constant_values=((255,255),(255,255),(255,255)))\n\n    # pad to achieve image with square shape for avoding face deformation after resizing\n    hf,wf = im_face.shape[0:2]\n    if(hf-2>wf):\n        wfp = int((hf-wf)/2)\n        im_face = np.pad(im_face,((0,0),(wfp,wfp),(0,0)),mode='constant',constant_values=((255,255),(255,255),(255,255)))\n    elif(wf-2>hf):\n        hfp = int((wf-hf)/2)\n        im_face = np.pad(im_face,((hfp,hfp),(0,0),(0,0)),mode='constant',constant_values=((255,255),(255,255),(255,255)))\n\n    # resize to have 512x512 resolution\n    im_face = cv2.resize(im_face, (512,512), interpolation = cv2.INTER_AREA)\n\n    return im_face\n\ndef normPRED(d):\n    ma = torch.max(d)\n    mi = torch.min(d)\n\n    dn = (d-mi)/(ma-mi)\n\n    return dn\n\ndef inference(net,input):\n\n    # normalize the input\n    tmpImg = np.zeros((input.shape[0],input.shape[1],3))\n    input = input/np.max(input)\n\n    tmpImg[:,:,0] = (input[:,:,2]-0.406)/0.225\n    tmpImg[:,:,1] = (input[:,:,1]-0.456)/0.224\n    tmpImg[:,:,2] = (input[:,:,0]-0.485)/0.229\n\n    # convert BGR to RGB\n    tmpImg = tmpImg.transpose((2, 0, 1))\n    tmpImg = tmpImg[np.newaxis,:,:,:]\n    tmpImg = torch.from_numpy(tmpImg)\n\n    # convert numpy array to torch tensor\n    tmpImg = tmpImg.type(torch.FloatTensor)\n\n    if torch.cuda.is_available():\n        tmpImg = Variable(tmpImg.cuda())\n    else:\n        tmpImg = Variable(tmpImg)\n\n    # inference\n    d1,d2,d3,d4,d5,d6,d7= net(tmpImg)\n\n    # normalization\n    pred = 1.0 - d1[:,0,:,:]\n    pred = normPRED(pred)\n\n    # convert torch tensor to numpy array\n    pred = pred.squeeze()\n    pred = pred.cpu().data.numpy()\n\n    del d1,d2,d3,d4,d5,d6,d7\n\n    return pred\n\ndef main():\n\n    # get the image path list for inference\n    im_list = glob('./test_data/test_portrait_images/your_portrait_im/*')\n    print(\"Number of images: \",len(im_list))\n    # indicate the output directory\n    out_dir = './test_data/test_portrait_images/your_portrait_results'\n    if(not os.path.exists(out_dir)):\n        os.mkdir(out_dir)\n\n    # Load the cascade face detection model\n    face_cascade = cv2.CascadeClassifier('./saved_models/face_detection_cv2/haarcascade_frontalface_default.xml')\n    # u2net_portrait path\n    model_dir = './saved_models/u2net_portrait/u2net_portrait.pth'\n\n    # load u2net_portrait model\n    net = U2NET(3,1)\n    net.load_state_dict(torch.load(model_dir))\n    if torch.cuda.is_available():\n        net.cuda()\n    net.eval()\n\n    # do the inference one-by-one\n    for i in range(0,len(im_list)):\n        print(\"--------------------------\")\n        print(\"inferencing \", i, \"/\", len(im_list), im_list[i])\n\n        # load each image\n        img = cv2.imread(im_list[i])\n        height,width = img.shape[0:2]\n        face = detect_single_face(face_cascade,img)\n        im_face = crop_face(img, face)\n        im_portrait = inference(net,im_face)\n\n        # save the output\n        cv2.imwrite(out_dir+\"/\"+im_list[i].split('/')[-1][0:-4]+'.png',(im_portrait*255).astype(np.uint8))\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "u2net_portrait_test.py",
          "type": "blob",
          "size": 3.3193359375,
          "content": "import os\nfrom skimage import io, transform\nimport torch\nimport torchvision\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms#, utils\n# import torch.optim as optim\n\nimport numpy as np\nfrom PIL import Image\nimport glob\n\nfrom data_loader import RescaleT\nfrom data_loader import ToTensor\nfrom data_loader import ToTensorLab\nfrom data_loader import SalObjDataset\n\nfrom model import U2NET # full size version 173.6 MB\nfrom model import U2NETP # small version u2net 4.7 MB\n\n# normalize the predicted SOD probability map\ndef normPRED(d):\n    ma = torch.max(d)\n    mi = torch.min(d)\n\n    dn = (d-mi)/(ma-mi)\n\n    return dn\n\ndef save_output(image_name,pred,d_dir):\n\n    predict = pred\n    predict = predict.squeeze()\n    predict_np = predict.cpu().data.numpy()\n\n    im = Image.fromarray(predict_np*255).convert('RGB')\n    img_name = image_name.split(os.sep)[-1]\n    image = io.imread(image_name)\n    imo = im.resize((image.shape[1],image.shape[0]),resample=Image.BILINEAR)\n\n    pb_np = np.array(imo)\n\n    aaa = img_name.split(\".\")\n    bbb = aaa[0:-1]\n    imidx = bbb[0]\n    for i in range(1,len(bbb)):\n        imidx = imidx + \".\" + bbb[i]\n\n    imo.save(d_dir+'/'+imidx+'.png')\n\ndef main():\n\n    # --------- 1. get image path and name ---------\n    model_name='u2net_portrait'#u2netp\n\n\n    image_dir = './test_data/test_portrait_images/portrait_im'\n    prediction_dir = './test_data/test_portrait_images/portrait_results'\n    if(not os.path.exists(prediction_dir)):\n        os.mkdir(prediction_dir)\n\n    model_dir = './saved_models/u2net_portrait/u2net_portrait.pth'\n\n    img_name_list = glob.glob(image_dir+'/*')\n    print(\"Number of images: \", len(img_name_list))\n\n    # --------- 2. dataloader ---------\n    #1. dataloader\n    test_salobj_dataset = SalObjDataset(img_name_list = img_name_list,\n                                        lbl_name_list = [],\n                                        transform=transforms.Compose([RescaleT(512),\n                                                                      ToTensorLab(flag=0)])\n                                        )\n    test_salobj_dataloader = DataLoader(test_salobj_dataset,\n                                        batch_size=1,\n                                        shuffle=False,\n                                        num_workers=1)\n\n    # --------- 3. model define ---------\n\n    print(\"...load U2NET---173.6 MB\")\n    net = U2NET(3,1)\n\n    net.load_state_dict(torch.load(model_dir))\n    if torch.cuda.is_available():\n        net.cuda()\n    net.eval()\n\n    # --------- 4. inference for each image ---------\n    for i_test, data_test in enumerate(test_salobj_dataloader):\n\n        print(\"inferencing:\",img_name_list[i_test].split(os.sep)[-1])\n\n        inputs_test = data_test['image']\n        inputs_test = inputs_test.type(torch.FloatTensor)\n\n        if torch.cuda.is_available():\n            inputs_test = Variable(inputs_test.cuda())\n        else:\n            inputs_test = Variable(inputs_test)\n\n        d1,d2,d3,d4,d5,d6,d7= net(inputs_test)\n\n        # normalization\n        pred = 1.0 - d1[:,0,:,:]\n        pred = normPRED(pred)\n\n        # save results to test_results folder\n        save_output(img_name_list[i_test],pred,prediction_dir)\n\n        del d1,d2,d3,d4,d5,d6,d7\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "u2net_test.py",
          "type": "blob",
          "size": 3.5732421875,
          "content": "import os\nfrom skimage import io, transform\nimport torch\nimport torchvision\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms#, utils\n# import torch.optim as optim\n\nimport numpy as np\nfrom PIL import Image\nimport glob\n\nfrom data_loader import RescaleT\nfrom data_loader import ToTensor\nfrom data_loader import ToTensorLab\nfrom data_loader import SalObjDataset\n\nfrom model import U2NET # full size version 173.6 MB\nfrom model import U2NETP # small version u2net 4.7 MB\n\n# normalize the predicted SOD probability map\ndef normPRED(d):\n    ma = torch.max(d)\n    mi = torch.min(d)\n\n    dn = (d-mi)/(ma-mi)\n\n    return dn\n\ndef save_output(image_name,pred,d_dir):\n\n    predict = pred\n    predict = predict.squeeze()\n    predict_np = predict.cpu().data.numpy()\n\n    im = Image.fromarray(predict_np*255).convert('RGB')\n    img_name = image_name.split(os.sep)[-1]\n    image = io.imread(image_name)\n    imo = im.resize((image.shape[1],image.shape[0]),resample=Image.BILINEAR)\n\n    pb_np = np.array(imo)\n\n    aaa = img_name.split(\".\")\n    bbb = aaa[0:-1]\n    imidx = bbb[0]\n    for i in range(1,len(bbb)):\n        imidx = imidx + \".\" + bbb[i]\n\n    imo.save(d_dir+imidx+'.png')\n\ndef main():\n\n    # --------- 1. get image path and name ---------\n    model_name='u2net'#u2netp\n\n\n\n    image_dir = os.path.join(os.getcwd(), 'test_data', 'test_images')\n    prediction_dir = os.path.join(os.getcwd(), 'test_data', model_name + '_results' + os.sep)\n    model_dir = os.path.join(os.getcwd(), 'saved_models', model_name, model_name + '.pth')\n\n    img_name_list = glob.glob(image_dir + os.sep + '*')\n    print(img_name_list)\n\n    # --------- 2. dataloader ---------\n    #1. dataloader\n    test_salobj_dataset = SalObjDataset(img_name_list = img_name_list,\n                                        lbl_name_list = [],\n                                        transform=transforms.Compose([RescaleT(320),\n                                                                      ToTensorLab(flag=0)])\n                                        )\n    test_salobj_dataloader = DataLoader(test_salobj_dataset,\n                                        batch_size=1,\n                                        shuffle=False,\n                                        num_workers=1)\n\n    # --------- 3. model define ---------\n    if(model_name=='u2net'):\n        print(\"...load U2NET---173.6 MB\")\n        net = U2NET(3,1)\n    elif(model_name=='u2netp'):\n        print(\"...load U2NEP---4.7 MB\")\n        net = U2NETP(3,1)\n\n    if torch.cuda.is_available():\n        net.load_state_dict(torch.load(model_dir))\n        net.cuda()\n    else:\n        net.load_state_dict(torch.load(model_dir, map_location='cpu'))\n    net.eval()\n\n    # --------- 4. inference for each image ---------\n    for i_test, data_test in enumerate(test_salobj_dataloader):\n\n        print(\"inferencing:\",img_name_list[i_test].split(os.sep)[-1])\n\n        inputs_test = data_test['image']\n        inputs_test = inputs_test.type(torch.FloatTensor)\n\n        if torch.cuda.is_available():\n            inputs_test = Variable(inputs_test.cuda())\n        else:\n            inputs_test = Variable(inputs_test)\n\n        d1,d2,d3,d4,d5,d6,d7= net(inputs_test)\n\n        # normalization\n        pred = d1[:,0,:,:]\n        pred = normPRED(pred)\n\n        # save results to test_results folder\n        if not os.path.exists(prediction_dir):\n            os.makedirs(prediction_dir, exist_ok=True)\n        save_output(img_name_list[i_test],pred,prediction_dir)\n\n        del d1,d2,d3,d4,d5,d6,d7\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "u2net_train.py",
          "type": "blob",
          "size": 4.8779296875,
          "content": "import os\nimport torch\nimport torchvision\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, utils\nimport torch.optim as optim\nimport torchvision.transforms as standard_transforms\n\nimport numpy as np\nimport glob\nimport os\n\nfrom data_loader import Rescale\nfrom data_loader import RescaleT\nfrom data_loader import RandomCrop\nfrom data_loader import ToTensor\nfrom data_loader import ToTensorLab\nfrom data_loader import SalObjDataset\n\nfrom model import U2NET\nfrom model import U2NETP\n\n# ------- 1. define loss function --------\n\nbce_loss = nn.BCELoss(size_average=True)\n\ndef muti_bce_loss_fusion(d0, d1, d2, d3, d4, d5, d6, labels_v):\n\n\tloss0 = bce_loss(d0,labels_v)\n\tloss1 = bce_loss(d1,labels_v)\n\tloss2 = bce_loss(d2,labels_v)\n\tloss3 = bce_loss(d3,labels_v)\n\tloss4 = bce_loss(d4,labels_v)\n\tloss5 = bce_loss(d5,labels_v)\n\tloss6 = bce_loss(d6,labels_v)\n\n\tloss = loss0 + loss1 + loss2 + loss3 + loss4 + loss5 + loss6\n\tprint(\"l0: %3f, l1: %3f, l2: %3f, l3: %3f, l4: %3f, l5: %3f, l6: %3f\\n\"%(loss0.data.item(),loss1.data.item(),loss2.data.item(),loss3.data.item(),loss4.data.item(),loss5.data.item(),loss6.data.item()))\n\n\treturn loss0, loss\n\n\n# ------- 2. set the directory of training dataset --------\n\nmodel_name = 'u2net' #'u2netp'\n\ndata_dir = os.path.join(os.getcwd(), 'train_data' + os.sep)\ntra_image_dir = os.path.join('DUTS', 'DUTS-TR', 'DUTS-TR', 'im_aug' + os.sep)\ntra_label_dir = os.path.join('DUTS', 'DUTS-TR', 'DUTS-TR', 'gt_aug' + os.sep)\n\nimage_ext = '.jpg'\nlabel_ext = '.png'\n\nmodel_dir = os.path.join(os.getcwd(), 'saved_models', model_name + os.sep)\n\nepoch_num = 100000\nbatch_size_train = 12\nbatch_size_val = 1\ntrain_num = 0\nval_num = 0\n\ntra_img_name_list = glob.glob(data_dir + tra_image_dir + '*' + image_ext)\n\ntra_lbl_name_list = []\nfor img_path in tra_img_name_list:\n\timg_name = img_path.split(os.sep)[-1]\n\n\taaa = img_name.split(\".\")\n\tbbb = aaa[0:-1]\n\timidx = bbb[0]\n\tfor i in range(1,len(bbb)):\n\t\timidx = imidx + \".\" + bbb[i]\n\n\ttra_lbl_name_list.append(data_dir + tra_label_dir + imidx + label_ext)\n\nprint(\"---\")\nprint(\"train images: \", len(tra_img_name_list))\nprint(\"train labels: \", len(tra_lbl_name_list))\nprint(\"---\")\n\ntrain_num = len(tra_img_name_list)\n\nsalobj_dataset = SalObjDataset(\n    img_name_list=tra_img_name_list,\n    lbl_name_list=tra_lbl_name_list,\n    transform=transforms.Compose([\n        RescaleT(320),\n        RandomCrop(288),\n        ToTensorLab(flag=0)]))\nsalobj_dataloader = DataLoader(salobj_dataset, batch_size=batch_size_train, shuffle=True, num_workers=1)\n\n# ------- 3. define model --------\n# define the net\nif(model_name=='u2net'):\n    net = U2NET(3, 1)\nelif(model_name=='u2netp'):\n    net = U2NETP(3,1)\n\nif torch.cuda.is_available():\n    net.cuda()\n\n# ------- 4. define optimizer --------\nprint(\"---define optimizer...\")\noptimizer = optim.Adam(net.parameters(), lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0)\n\n# ------- 5. training process --------\nprint(\"---start training...\")\nite_num = 0\nrunning_loss = 0.0\nrunning_tar_loss = 0.0\nite_num4val = 0\nsave_frq = 2000 # save the model every 2000 iterations\n\nfor epoch in range(0, epoch_num):\n    net.train()\n\n    for i, data in enumerate(salobj_dataloader):\n        ite_num = ite_num + 1\n        ite_num4val = ite_num4val + 1\n\n        inputs, labels = data['image'], data['label']\n\n        inputs = inputs.type(torch.FloatTensor)\n        labels = labels.type(torch.FloatTensor)\n\n        # wrap them in Variable\n        if torch.cuda.is_available():\n            inputs_v, labels_v = Variable(inputs.cuda(), requires_grad=False), Variable(labels.cuda(),\n                                                                                        requires_grad=False)\n        else:\n            inputs_v, labels_v = Variable(inputs, requires_grad=False), Variable(labels, requires_grad=False)\n\n        # y zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        d0, d1, d2, d3, d4, d5, d6 = net(inputs_v)\n        loss2, loss = muti_bce_loss_fusion(d0, d1, d2, d3, d4, d5, d6, labels_v)\n\n        loss.backward()\n        optimizer.step()\n\n        # # print statistics\n        running_loss += loss.data.item()\n        running_tar_loss += loss2.data.item()\n\n        # del temporary outputs and loss\n        del d0, d1, d2, d3, d4, d5, d6, loss2, loss\n\n        print(\"[epoch: %3d/%3d, batch: %5d/%5d, ite: %d] train loss: %3f, tar: %3f \" % (\n        epoch + 1, epoch_num, (i + 1) * batch_size_train, train_num, ite_num, running_loss / ite_num4val, running_tar_loss / ite_num4val))\n\n        if ite_num % save_frq == 0:\n\n            torch.save(net.state_dict(), model_dir + model_name+\"_bce_itr_%d_train_%3f_tar_%3f.pth\" % (ite_num, running_loss / ite_num4val, running_tar_loss / ite_num4val))\n            running_loss = 0.0\n            running_tar_loss = 0.0\n            net.train()  # resume train\n            ite_num4val = 0\n\n"
        }
      ]
    }
  ]
}