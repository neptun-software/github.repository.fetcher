{
  "metadata": {
    "timestamp": 1736560768700,
    "page": 453,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PyCQA/bandit",
      "stars": 6627,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1708984375,
          "content": "env*\nvenv*\n.python-version\n*.pyc\n.DS_Store\n*.egg\n*.egg-info\n.eggs/\n.idea/\n.vscode/\n.tox\n.stestr\nbuild/*\ncover/*\n.coverage*\ndoc/build/*\nChangeLog\ndoc/source/api\n.*.sw?\nAUTHORS\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8583984375,
          "content": "exclude: ^(examples|tools|doc)\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v5.0.0\n  hooks:\n  - id: check-yaml\n  - id: debug-statements\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n- repo: https://github.com/asottile/reorder-python-imports\n  rev: v3.14.0\n  hooks:\n  - id: reorder-python-imports\n    args: [--application-directories, '.:src', --py38-plus]\n- repo: https://github.com/psf/black-pre-commit-mirror\n  rev: 24.10.0\n  hooks:\n  - id: black\n    args: [--line-length=79, --target-version=py38]\n- repo: https://github.com/asottile/pyupgrade\n  rev: v3.19.1\n  hooks:\n  - id: pyupgrade\n    args: [--py38-plus]\n- repo: https://github.com/jorisroovers/gitlint\n  rev: v0.19.1\n  hooks:\n  - id: gitlint\n#-   repo: https://github.com/pre-commit/mirrors-mypy\n#    rev: v0.910-1\n#    hooks:\n#    -   id: mypy\n#        exclude: ^(docs/|example-plugin/)\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.2265625,
          "content": "-   id: bandit\n    name: bandit\n    description: 'Bandit is a tool for finding common security issues in Python code'\n    entry: bandit\n    language: python\n    language_version: python3\n    types: [python]\n    require_serial: true\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.275390625,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.9\"\n\nsphinx:\n  configuration: doc/source/conf.py\n\npython:\n  install:\n    - requirements: requirements.txt\n    - requirements: doc/requirements.txt\n    - method: pip\n      path: .\n      extra_requirements:\n        - sarif\n"
        },
        {
          "name": ".stestr.conf",
          "type": "blob",
          "size": 0.0576171875,
          "content": "[DEFAULT]\ntest_path=./tests\ntop_dir=./\nparallel_class=True\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.2001953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at Ian\nStapleton Cordasco <graffatcolmingov@gmail.com>, Ian Lee <IanLee1521@gmail.com>\nor Florian Bruhin <me@the-compiler.org>. All complaints will be reviewed and\ninvestigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.599609375,
          "content": "# Contributing to Bandit\nThanks for considering to take part in the improvement of the Bandit project. Contributions are always welcome!\nHere are guidelines and rules that can be helpful if you plan to want to get involved in the project.\n\n#### Table Of Contents\n[Code of Conduct](#code-of-conduct)\n\n[How Can I Contribute?](#how-can-i-contribute)\n  * [Reporting Bugs](#reporting-bugs)\n  * [Suggesting Enhancements](#suggesting-enhancements)\n  * [Your First Code Contribution](#your-first-code-contribution)\n  * [Pull Requests](#pull-requests)\n    * [Commit Message Guidelines](#commit-message-guidelines)\n    * [Squash Commits](#squash-commits)\n  * [Things You Should Know Before Getting Started](#things-you-should-know-before-getting-started)\n    * [Vulnerability Tests](#vulnerability-tests)\n    * [Writing Tests](#writing-tests)\n    * [Extending Bandit](#extending-bandit)\n\n## Code of Conduct\nEveryone who participates in this project is governed by the PyCQA [Code of Conduct](https://github.com/PyCQA/bandit/blob/main/CODE_OF_CONDUCT.md#contributor-covenant-code-of-conduct).\n\n## Reporting Bugs\nIf you encounter a bug, please let us know about it. See the guide here [GitHub issues](https://guides.github.com/features/issues/).\n\n**Before submitting a new issue** you might want to check for an [existing issue](https://github.com/PyCQA/bandit/issues) to know if there is already a reported issue. If an issue is already open please feel free\nto add a comment to the existing issue instead of creating a new one.\n\n### Submitting your first issue\nWe encourage using the issue template to improve quality of reported issues.\nNavigate to the issues tab and select `New issue`, then select the **Bug report** template and fill out the form.\nTo submit a good bug report keep in mind to:\n* Use a descriptive title so other people can understand what the issue is about.\n* Be specific about the details, for example, what command did you use, what version of Bandit did you use, and in what environment you observed the bug (CI or development).\n\n## Suggesting Enhancements\nIf you want to suggest an enhancement, open a new issue and use the **Feature request** template.\n\n**Before submitting an enhancement** please check for existing [feature requests](https://github.com/PyCQA/bandit/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement).\n\nUseful things to point out in your feature request:\n* Explain your feature request in a way that everyone can understand\n* Please try to explain how this feature will improve the Bandit project\n\n## Your First Code Contribution\nYou can start contributing to Bandit project by picking [bug issues](https://github.com/PyCQA/bandit/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\nThese issues can be easier to resolve rather than a feature request and can get you up and running with the code base.\n\n## Pull Requests\nThe best way to get started with Bandit is to grab the source:\n\nFork the repository into one with your username\n```shell script\ngit clone https://github.com/<your username>/bandit.git\n```\n\nCreate you own branch to start writing code:\n```shell script\ngit checkout -b mybranch\ngit push origin mybranch\n```\nYou can test any changes with tox:\n\n```shell script\npip install tox\ntox run -e pep8\ntox run -e py37\ntox run -e docs\ntox run -e cover\n```\nIf everything is done, proceed with [opening a new pull request](https://help.github.com/en/desktop/contributing-to-projects/creating-a-pull-request)\n\n### Commit Message Guidelines\n\nWe follow the commit formatting recommendations found on [Chris Beams' How to Write a Git Commit Message article](https://chris.beams.io/posts/git-commit/).\n\nWell formed commit messages not only help reviewers understand the nature of\nthe Pull Request, but also assists the release process where commit messages\nare used to generate release notes.\n\nA good example of a commit message would be as follows:\n\n```\nSummarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n```\n\nNote the `Resolves #123` tag, this references the issue raised and allows us to\nensure issues are associated and closed when a pull request is merged.\n\nPlease refer to [the github help page on message types](https://help.github.com/articles/closing-issues-using-keywords/)\nfor a complete list of issue references.\n\n### Squash Commits\n\nShould your pull request consist of more than one commit (perhaps due to\na change being requested during the review cycle), please perform a git squash\nonce a reviewer has approved your pull request.\n\nA squash can be performed as follows. Let's say you have the following commits:\n\n    initial commit\n    second commit\n    final commit\n\nRun the command below with the number set to the total commits you wish to\nsquash (in our case 3 commits):\n\n    git rebase -i HEAD~3\n\nYou default text editor will then open up and you will see the following::\n\n    pick eb36612 initial commit\n    pick 9ac8968 second commit\n    pick a760569 final commit\n\n    # Rebase eb1429f..a760569 onto eb1429f (3 commands)\n\nWe want to rebase on top of our first commit, so we change the other two commits\nto `squash`:\n\n    pick eb36612 initial commit\n    squash 9ac8968 second commit\n    squash a760569 final commit\n\nAfter this, should you wish to update your commit message to better summarise\nall of your pull request, run:\n\n    git commit --amend\n\nYou will then need to force push (assuming your initial commit(s) were posted\nto github):\n\n    git push origin your-branch --force\n\n## Things You Should Know Before Getting Started\n\n### Vulnerability Tests\nVulnerability tests or \"plugins\" are defined in files in the plugins directory.\n\nTests are written in Python and are autodiscovered from the plugins directory.\nEach test can examine one or more type of Python statements. Tests are marked\nwith the types of Python statements they examine (for example: function call,\nstring, import, etc).\n\nTests are executed by the ``BanditNodeVisitor`` object as it visits each node\nin the AST.\n\nTest results are managed in the ``Manager`` and aggregated for\noutput at the completion of a test run through the method `output_result` from ``Manager`` instance.\n\n### Writing Tests\nTo write a test:\n - Identify a vulnerability to build a test for, and create a new file in\n   examples/ that contains one or more cases of that vulnerability.\n - Consider the vulnerability you're testing for, mark the function with one\n   or more of the appropriate decorators:\n   - @checks('Call')\n   - @checks('Import', 'ImportFrom')\n   - @checks('Str')\n - Create a new Python source file to contain your test, you can reference\n   existing tests for examples.\n - The function that you create should take a parameter \"context\" which is\n   an instance of the context class you can query for information about the\n   current element being examined.  You can also get the raw AST node for\n   more advanced use cases.  Please see the context.py file for more.\n - Extend your Bandit configuration file as needed to support your new test.\n - Execute Bandit against the test file you defined in examples/ and ensure\n   that it detects the vulnerability.  Consider variations on how this\n   vulnerability might present itself and extend the example file and the test\n   function accordingly.\n\n\n### Extending Bandit\n\nBandit allows users to write and register extensions for checks and formatters.\nBandit will load plugins from two entry-points:\n\n- `bandit.formatters`\n- `bandit.plugins`\n\nFormatters need to accept 5 things:\n\n- `manager`: an instance of `bandit manager`\n- `fileobj`: the output file object, which may be sys.stdout\n- `sev_level` : Filtering severity level\n- `conf_level`: Filtering confidence level\n- `lines=-1`: number of lines to report\n\nPlugins tend to take advantage of the `bandit.checks` decorator which allows\nthe author to register a check for a particular type of AST node. For example\n\n::\n\n    @bandit.checks('Call')\n    def prohibit_unsafe_deserialization(context):\n        if 'unsafe_load' in context.call_function_name_qual:\n            return bandit.Issue(\n                severity=bandit.HIGH,\n                confidence=bandit.HIGH,\n                text=\"Unsafe deserialization detected.\"\n            )\n\nTo register your plugin, you have two options:\n\n1. If you're using setuptools directly, add something like the following to\n   your ``setup`` call::\n\n        # If you have an imaginary bson formatter in the bandit_bson module\n        # and a function called `formatter`.\n        entry_points={'bandit.formatters': ['bson = bandit_bson:formatter']}\n        # Or a check for using mako templates in bandit_mako that\n        entry_points={'bandit.plugins': ['mako = bandit_mako']}\n\n2. If you're using pbr, add something like the following to your `setup.cfg`\n   file::\n\n        [entry_points]\n        bandit.formatters =\n            bson = bandit_bson:formatter\n        bandit.plugins =\n            mako = bandit_mako\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.904296875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.4140625,
          "content": ".. image:: https://raw.githubusercontent.com/pycqa/bandit/main/logo/logotype-sm.png\n    :alt: Bandit\n\n======\n\n.. image:: https://github.com/PyCQA/bandit/actions/workflows/pythonpackage.yml/badge.svg?branch=main\n    :target: https://github.com/PyCQA/bandit/actions?query=workflow%3A%22Build+and+Test+Bandit%22+branch%3Amain\n    :alt: Build Status\n\n.. image:: https://readthedocs.org/projects/bandit/badge/?version=latest\n    :target: https://readthedocs.org/projects/bandit/\n    :alt: Docs Status\n\n.. image:: https://img.shields.io/pypi/v/bandit.svg\n    :target: https://pypi.org/project/bandit/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/bandit.svg\n    :target: https://pypi.org/project/bandit/\n    :alt: Python Versions\n\n.. image:: https://img.shields.io/pypi/format/bandit.svg\n    :target: https://pypi.org/project/bandit/\n    :alt: Format\n\n.. image:: https://img.shields.io/badge/license-Apache%202-blue.svg\n    :target: https://github.com/PyCQA/bandit/blob/main/LICENSE\n    :alt: License\n\n.. image:: https://img.shields.io/discord/825463413634891776.svg\n    :target: https://discord.gg/qYxpadCgkx\n    :alt: Discord\n\nA security linter from PyCQA\n\n* Free software: Apache license\n* Documentation: https://bandit.readthedocs.io/en/latest/\n* Source: https://github.com/PyCQA/bandit\n* Bugs: https://github.com/PyCQA/bandit/issues\n* Contributing: https://github.com/PyCQA/bandit/blob/main/CONTRIBUTING.md\n\nOverview\n--------\n\nBandit is a tool designed to find common security issues in Python code. To do\nthis Bandit processes each file, builds an AST from it, and runs appropriate\nplugins against the AST nodes. Once Bandit has finished scanning all the files\nit generates a report.\n\nBandit was originally developed within the OpenStack Security Project and\nlater rehomed to PyCQA.\n\n.. image:: https://raw.githubusercontent.com/pycqa/bandit/main/bandit-terminal.png\n    :alt: Bandit Example Screen Shot\n\nShow Your Style\n---------------\n\n.. image:: https://img.shields.io/badge/security-bandit-yellow.svg\n    :target: https://github.com/PyCQA/bandit\n    :alt: Security Status\n\nUse our badge in your project's README!\n\nusing Markdown::\n\n    [![security: bandit](https://img.shields.io/badge/security-bandit-yellow.svg)](https://github.com/PyCQA/bandit)\n\nusing RST::\n\n    .. image:: https://img.shields.io/badge/security-bandit-yellow.svg\n        :target: https://github.com/PyCQA/bandit\n        :alt: Security Status\n\nReferences\n----------\n\nPython AST module documentation: https://docs.python.org/3/library/ast.html\n\nGreen Tree Snakes - the missing Python AST docs:\nhttps://greentreesnakes.readthedocs.org/en/latest/\n\nDocumentation of the various types of AST nodes that Bandit currently covers\nor could be extended to cover:\nhttps://greentreesnakes.readthedocs.org/en/latest/nodes.html\n\nContainer Images\n----------------\n\nBandit is available as a container image, built within the bandit repository\nusing GitHub Actions. The image is available on ghcr.io:\n\n.. code-block:: console\n\n    docker pull ghcr.io/pycqa/bandit/bandit\n\nThe image is built for the following architectures:\n\n* amd64\n* arm64\n* armv7\n* armv8\n\nTo pull a specific architecture, use the following format:\n\n.. code-block:: console\n\n    docker pull --platform=<architecture> ghcr.io/pycqa/bandit/bandit:latest\n\nEvery image is signed with sigstore cosign and it is possible to verify the\nsource of origin using the following cosign command:\n\n.. code-block:: console\n\n    cosign verify ghcr.io/pycqa/bandit/bandit:latest \\\n      --certificate-identity https://github.com/pycqa/bandit/.github/workflows/build-publish-image.yml@refs/tags/<version> \\\n      --certificate-oidc-issuer https://token.actions.githubusercontent.com\n\nWhere `<version>` is the release version of Bandit.\n\nSponsors\n--------\n\nThe development of Bandit is made possible by the following sponsors:\n\n.. list-table::\n   :width: 100%\n   :class: borderless\n\n   * - .. image:: https://avatars.githubusercontent.com/u/34240465?s=200&v=4\n          :target: https://opensource.mercedes-benz.com/\n          :alt: Mercedes-Benz\n          :width: 88\n\n     - .. image:: https://github.githubassets.com/assets/tidelift-8cea37dea8fc.svg\n          :target: https://tidelift.com/lifter/search/pypi/bandit\n          :alt: Tidelift\n          :width: 88\n\n     - .. image:: https://avatars.githubusercontent.com/u/110237746?s=200&v=4\n          :target: https://stacklok.com/\n          :alt: Stacklok\n          :width: 88\n\nIf you also ❤️ Bandit, please consider sponsoring.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5947265625,
          "content": "# Security Policy\n\nBandit is a tool designed to find security issues, so every effort is made that Bandit itself is also\nfree of those issues. However, if you believe you have found a security vulnerability in this repository\nplease open it privately via the [Report a security vulnerability](https://github.com/PyCQA/bandit/security/advisories/new) link in the Issues tab.\n\n**Please do not report security vulnerabilities through public issues, discussions, or pull requests.**\n\nPlease also inform the [Tidelift security](https://tidelift.com/security). Tidelift will help coordinate the fix and disclosure.\n"
        },
        {
          "name": "bandit-terminal.png",
          "type": "blob",
          "size": 1440.3486328125,
          "content": null
        },
        {
          "name": "bandit",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "funding.json",
          "type": "blob",
          "size": 2.5078125,
          "content": "{\n    \"version\": \"v1.0.0\",\n    \"entity\": {\n        \"type\": \"individual\",\n        \"role\": \"maintainer\",\n        \"name\": \"Eric Brown\",\n        \"email\": \"eric_wade_brown@yahoo.com\",\n        \"phone\": \"\",\n        \"description\": \"I’m passionate about developing tools that empower engineers to produce secure, hardened code, reducing vulnerabilities and strengthening software integrity. With a focus on security automation, I aim to make secure coding practices more accessible and integrated into development workflows.\",\n        \"webpageUrl\": {\n            \"url\": \"https://github.com\"\n        }\n    },\n    \"projects\": [{\n        \"guid\": \"bandit\",\n        \"name\": \"Bandit\",\n        \"description\": \" Bandit is a tool designed to find common security issues in Python code.\",\n        \"webpageUrl\": {\n            \"url\": \"https://github.com/PyCQA/bandit\"\n        },\n        \"repositoryUrl\": {\n            \"url\": \"https://github.com/PyCQA/bandit\"\n        },\n        \"licenses\": [\"spdx:Apache-2.0\"],\n        \"tags\": [\"python\", \"static-code-analysis\", \"security\", \"security-tools\"]\n    }],\n    \"funding\": {\n        \"channels\": [\n            {\n                \"guid\": \"github\",\n                \"type\": \"payment-provider\",\n                \"address\": \"https://github.com/sponsors/ericwb\",\n                \"description\": \"Pay with your credit card through this gateway and setup recurring subscriptions.\"\n            },\n            {\n                \"guid\": \"psf\",\n                \"type\": \"payment-provider\",\n                \"address\": \"https://psfmember.org/civicrm/contribute/transact/?reset=1&id=42\",\n                \"description\": \"Pay with your credit card through this gateway and setup recurring subscriptions.\"\n            }\n        ],\n        \"plans\": [\n            {\n                \"guid\": \"developer-time\",\n                \"status\": \"active\",\n                \"name\": \"Developer compensation\",\n                \"description\": \"This will cover the cost of one developer working part-time on the projects.\",\n                \"amount\": 1000,\n                \"currency\": \"USD\",\n                \"frequency\": \"monthly\",\n                \"channels\": [\"github\", \"psf\"]\n            },\n            {\n                \"guid\": \"angel-plan\",\n                \"status\": \"active\",\n                \"name\": \"Goodwill plan\",\n                \"description\": \"Pay anything you wish to show your goodwill for the project.\",\n                \"amount\": 0,\n                \"currency\": \"USD\",\n                \"frequency\": \"one-time\",\n                \"channels\": [\"psf\"]\n            }\n        ]\n    }\n}\n"
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 3.3623046875,
          "content": "# The format of this file isn't really documented; just use --generate-rcfile\n\n[Messages Control]\n# C0111: Don't require docstrings on every method\n# C0301: Handled by pep8\n# C0325: Parens are required on print in py3x\n# F0401: Imports are check by other linters\n# W0511: TODOs in code comments are fine.\n# W0622: Redefining id is fine.\n\n# TODO(browne): fix these in the future\n# C0103: invalid-name\n# C0114: Missing module docstring\n# C0115: Missing class docstring\n# C0116: Missing function or method docstring\n# C0201: consider-iterating-dictionary\n# C0206: Consider iterating with .items()\n# C0209: Foramtting a regular string which could be an f-string\n# C0413: wrong-import-position\n# C0415: Import outside toplevel\n# C1802: Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty\n# E0611: No name in module\n# E1101: no-member\n# R0801: Similar lines in 2 files\n# R0902: too-many-instance-attributes\n# R0912: too-many-branches\n# R0913: too-many-arguments\n# R0914: too-many-locals\n# R0915: too-many-statements\n# R1702: too-many-nested-blocks\n# R1705: no-else-return\n# R1710: inconsistent-return-statements\n# R1714: Consider merging these comparisons with 'in'\n# R1721: Unnecessary use of a comprehension\n# R1732: Consider using 'with' for resource-allocating operations\n# R1734: Consider using [] instead of list()\n# R1735: use-dict-literal\n# W0105: String statement has no effect\n# W0201: attribute-defined-outside-init\n# W0212: protected-access\n# W0246: Useless parent or super() delegation\n# W0603: global-statement\n# W0612: Unused variable\n# W0613: unused-argument\n# W0621: redefined-outer-name\n# W0707: Consider explicitly re-raising\n# W0718: Catching too general exception Exception\n# W1201: logging-not-lazy\n# W1203: Use lazy % or % formatting in logging functions\n# W1404: Implicit string concatenation found in call\n# W1514: Using open without explicitly specifying an encoding\ndisable=C0103,C0114,C0115,C0116,C0201,C0206,C0209,C0301,C0413,C0415,C1802,F0401,W0511,W0622,E0611,E1101,R0801,R0902,R0912,R0913,R0914,R0915,R1702,R1705,R1710,R1714,R1721,R1732,R1734,R1735,W0105,W0201,W0212,W0246,W0603,W0612,W0613,W0621,W0707,W0718,W1201,W1203,W1404,W1514\n\n[Basic]\n# Variable names can be 1 to 31 characters long, with lowercase and underscores\nvariable-rgx=[a-z_][a-z0-9_]{0,30}$\n\n# Argument names can be 2 to 31 characters long, with lowercase and underscores\nargument-rgx=[a-z_][a-z0-9_]{1,30}$\n\n# Method names should be at least 3 characters long\n# and be lowecased with underscores\nmethod-rgx=([a-z_][a-z0-9_]{2,50}|setUp|tearDown)$\n\n# Module names matching manila-* are ok (files in bin/)\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+)|(manila-[a-z0-9_-]+))$\n\n# Don't require docstrings on tests.\nno-docstring-rgx=((__.*__)|([tT]est.*)|setUp|tearDown)$\n\n[Design]\nmax-public-methods=100\nmin-public-methods=0\nmax-args=6\n\n[Variables]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\n# _ is used by our localization\nadditional-builtins=_\n\n[Similarities]\n# Minimum lines number of a similarity.\nmin-similarity-lines=10\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# We don't need to do pylint on the examples, too many false positives\nignore-paths=examples\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=yes\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.33203125,
          "content": "# The order of packages is significant, because pip processes them in the order\n# of appearance. Changing the order has an impact on the overall integration\n# process, which may cause wedges in the gate later.\nPyYAML>=5.3.1 # MIT\nstevedore>=1.20.0 # Apache-2.0\ncolorama>=0.3.9;platform_system==\"Windows\" # BSD License (3 clause)\nrich # MIT\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 6.974609375,
          "content": "[metadata]\nname = bandit\nsummary = Security oriented static analyser for python code.\ndescription_file =\n    README.rst\nauthor = PyCQA\nauthor_email = code-quality@python.org\nhome_page = https://bandit.readthedocs.io/\nlicense = Apache-2.0 license\nclassifier =\n    Development Status :: 5 - Production/Stable\n    Environment :: Console\n    Intended Audience :: Information Technology\n    Intended Audience :: System Administrators\n    Intended Audience :: Developers\n    License :: OSI Approved :: Apache Software License\n    Operating System :: POSIX :: Linux\n    Operating System :: MacOS :: MacOS X\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: 3.13\n    Programming Language :: Python :: 3 :: Only\n    Topic :: Security\nproject_urls =\n    Documentation = https://bandit.readthedocs.io/\n    Release Notes = https://github.com/PyCQA/bandit/releases\n    Source Code = https://github.com/PyCQA/bandit\n    Issue Tracker = https://github.com/PyCQA/bandit/issues\n    Discord = https://discord.gg/qYxpadCgkx\n    Sponsor = https://psfmember.org/civicrm/contribute/transact/?reset=1&id=42\n\n[extras]\nyaml =\n    PyYAML\ntoml =\n    tomli>=1.1.0; python_version < \"3.11\"\nbaseline =\n    GitPython>=3.1.30\nsarif =\n    sarif-om>=1.0.4\n    jschema-to-python>=1.2.3\n\n[entry_points]\nconsole_scripts =\n    bandit = bandit.cli.main:main\n    bandit-config-generator = bandit.cli.config_generator:main\n    bandit-baseline = bandit.cli.baseline:main\nbandit.blacklists =\n    calls = bandit.blacklists.calls:gen_blacklist\n    imports = bandit.blacklists.imports:gen_blacklist\nbandit.formatters =\n    csv = bandit.formatters.csv:report\n    json = bandit.formatters.json:report\n    txt = bandit.formatters.text:report\n    xml = bandit.formatters.xml:report\n    html = bandit.formatters.html:report\n    sarif = bandit.formatters.sarif:report\n    screen = bandit.formatters.screen:report\n    yaml = bandit.formatters.yaml:report\n    custom = bandit.formatters.custom:report\nbandit.plugins =\n    # bandit/plugins/app_debug.py\n    flask_debug_true = bandit.plugins.app_debug:flask_debug_true\n\n    # bandit/plugins/asserts.py\n    assert_used = bandit.plugins.asserts:assert_used\n\n    # bandit/plugins/crypto_request_no_cert_validation.py\n    request_with_no_cert_validation = bandit.plugins.crypto_request_no_cert_validation:request_with_no_cert_validation\n\n    # bandit/plugins/request_without_timeout.py\n    request_without_timeout = bandit.plugins.request_without_timeout:request_without_timeout\n\n    # bandit/plugins/exec.py\n    exec_used = bandit.plugins.exec:exec_used\n\n    # bandit/plugins/general_bad_File_permissions.py\n    set_bad_file_permissions = bandit.plugins.general_bad_file_permissions:set_bad_file_permissions\n\n    # bandit/plugins/general_bind_all_interfaces.py\n    hardcoded_bind_all_interfaces = bandit.plugins.general_bind_all_interfaces:hardcoded_bind_all_interfaces\n\n    # bandit/plugins/general_hardcoded_password.py\n    hardcoded_password_string = bandit.plugins.general_hardcoded_password:hardcoded_password_string\n    hardcoded_password_funcarg = bandit.plugins.general_hardcoded_password:hardcoded_password_funcarg\n    hardcoded_password_default = bandit.plugins.general_hardcoded_password:hardcoded_password_default\n\n    # bandit/plugins/general_hardcoded_tmp.py\n    hardcoded_tmp_directory = bandit.plugins.general_hardcoded_tmp:hardcoded_tmp_directory\n\n    # bandit/plugins/injection_paramiko.py\n    paramiko_calls = bandit.plugins.injection_paramiko:paramiko_calls\n\n    # bandit/plugins/injection_shell.py\n    subprocess_popen_with_shell_equals_true = bandit.plugins.injection_shell:subprocess_popen_with_shell_equals_true\n    subprocess_without_shell_equals_true = bandit.plugins.injection_shell:subprocess_without_shell_equals_true\n    any_other_function_with_shell_equals_true = bandit.plugins.injection_shell:any_other_function_with_shell_equals_true\n    start_process_with_a_shell = bandit.plugins.injection_shell:start_process_with_a_shell\n    start_process_with_no_shell = bandit.plugins.injection_shell:start_process_with_no_shell\n    start_process_with_partial_path = bandit.plugins.injection_shell:start_process_with_partial_path\n\n    # bandit/plugins/injection_sql.py\n    hardcoded_sql_expressions = bandit.plugins.injection_sql:hardcoded_sql_expressions\n\n    # bandit/plugins/hashlib_insecure_functions.py\n    hashlib_insecure_functions = bandit.plugins.hashlib_insecure_functions:hashlib\n\n    # bandit/plugins/injection_wildcard.py\n    linux_commands_wildcard_injection = bandit.plugins.injection_wildcard:linux_commands_wildcard_injection\n\n    # bandit/plugins/django_sql_injection.py\n    django_extra_used = bandit.plugins.django_sql_injection:django_extra_used\n    django_rawsql_used = bandit.plugins.django_sql_injection:django_rawsql_used\n\n    # bandit/plugins/insecure_ssl_tls.py\n    ssl_with_bad_version = bandit.plugins.insecure_ssl_tls:ssl_with_bad_version\n    ssl_with_bad_defaults = bandit.plugins.insecure_ssl_tls:ssl_with_bad_defaults\n    ssl_with_no_version = bandit.plugins.insecure_ssl_tls:ssl_with_no_version\n\n    # bandit/plugins/jinja2_templates.py\n    jinja2_autoescape_false = bandit.plugins.jinja2_templates:jinja2_autoescape_false\n\n    # bandit/plugins/mako_templates.py\n    use_of_mako_templates = bandit.plugins.mako_templates:use_of_mako_templates\n\n    # bandit/plugins/django_xss.py\n    django_mark_safe = bandit.plugins.django_xss:django_mark_safe\n\n    # bandit/plugins/try_except_continue.py\n    try_except_continue = bandit.plugins.try_except_continue:try_except_continue\n\n    # bandit/plugins/try_except_pass.py\n    try_except_pass = bandit.plugins.try_except_pass:try_except_pass\n\n    # bandit/plugins/weak_cryptographic_key.py\n    weak_cryptographic_key = bandit.plugins.weak_cryptographic_key:weak_cryptographic_key\n\n    # bandit/plugins/yaml_load.py\n    yaml_load = bandit.plugins.yaml_load:yaml_load\n\n    # bandit/plugins/ssh_no_host_key_verification.py\n    ssh_no_host_key_verification = bandit.plugins.ssh_no_host_key_verification:ssh_no_host_key_verification\n\n    # bandit/plugins/snmp_security_check.py\n    snmp_insecure_version = bandit.plugins.snmp_security_check:snmp_insecure_version_check\n    snmp_weak_cryptography = bandit.plugins.snmp_security_check:snmp_crypto_check\n\n    # bandit/plugins/logging_config_insecure_listen.py\n    logging_config_insecure_listen = bandit.plugins.logging_config_insecure_listen:logging_config_insecure_listen\n\n    #bandit/plugins/tarfile_unsafe_members.py\n    tarfile_unsafe_members = bandit.plugins.tarfile_unsafe_members:tarfile_unsafe_members\n\n    #bandit/plugins/pytorch_load_save.py\n    pytorch_load_save = bandit.plugins.pytorch_load_save:pytorch_load_save\n\n    # bandit/plugins/trojansource.py\n    trojansource = bandit.plugins.trojansource:trojansource\n\n[build_sphinx]\nall_files = 1\nbuild-dir = doc/build\nsource-dir = doc/source\n\n[pbr]\nautodoc_tree_index_modules = True\nautodoc_tree_excludes =\n  examples*\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.2060546875,
          "content": "# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.\n#\n# SPDX-License-Identifier: Apache-2.0\nimport setuptools\n\nsetuptools.setup(\n    python_requires=\">=3.9\", setup_requires=[\"pbr>=2.0.0\"], pbr=True\n)\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.4267578125,
          "content": "# The order of packages is significant, because pip processes them in the order\n# of appearance. Changing the order has an impact on the overall integration\n# process, which may cause wedges in the gate later.\ncoverage>=4.5.4 # Apache-2.0\nfixtures>=3.0.0 # Apache-2.0/BSD\nflake8>=4.0.0 # Apache-2.0\nstestr>=2.5.0 # Apache-2.0\ntestscenarios>=0.5.0 # Apache-2.0/BSD\ntesttools>=2.3.0 # MIT\nbeautifulsoup4>=4.8.0 # MIT\npylint==1.9.4 # GPLv2\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.73046875,
          "content": "[tox]\nminversion = 3.2.0\nenvlist = py39,pep8\n\n[testenv]\nusedevelop = True\ninstall_command = pip install {opts} {packages}\nsetenv =\n    VIRTUAL_ENV={envdir}\ndeps =\n       -r{toxinidir}/requirements.txt\n       -r{toxinidir}/test-requirements.txt\nextras =\n    yaml\n    toml\n    baseline\n    sarif\ncommands =\n    find bandit -type f -name \"*.pyc\" -delete\n    stestr run {posargs}\nallowlist_externals =\n    find\npassenv =\n    http_proxy\n    HTTP_PROXY\n    https_proxy\n    HTTPS_PROXY\n    no_proxy\n    NO_PROXY\n\n[testenv:linters]\ndeps = {[testenv:pep8]deps}\nusedevelop = False\ncommands = flake8 {posargs} bandit\n           flake8 {posargs} tests\n           bandit-baseline -r bandit -ll -ii\n\n[testenv:pep8]\nignore_errors = true\ndeps = {[testenv]deps}\n       .\nusedevelop = False\ncommands = flake8 {posargs} bandit\n           flake8 {posargs} tests\n           -{[testenv:pylint]commands}\n           bandit-baseline -r bandit -ll -ii\n\n[testenv:venv]\ncommands = {posargs}\n\n[testenv:codesec]\ndeps = {[testenv]deps}\n       .\nusedevelop = False\ncommands = bandit-baseline -r bandit -ll -ii\n\n[testenv:cover]\nsetenv =\n    {[testenv]setenv}\n    PYTHON=coverage run --source bandit --parallel-mode\ncommands =\n    coverage erase\n    stestr run '{posargs}'\n    coverage report\n\n[testenv:docs]\ndeps = -r{toxinidir}/doc/requirements.txt\ncommands=\n    sphinx-build doc/source doc/build\n\n[flake8]\n# [H106] Don't put vim configuration in source files.\n# [H203] Use assertIs(Not)None to check for None.\nshow-source = True\nexclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build\nenable-extensions = H106,H203\n\n[testenv:pylint]\ncommands = -pylint --rcfile=pylintrc bandit\n\n[testenv:format]\nskip_install = true\ndeps =\n    pre-commit\ncommands =\n    pre-commit run --all-files --show-diff-on-failure\n"
        }
      ]
    }
  ]
}