{
  "metadata": {
    "timestamp": 1736560944646,
    "page": 688,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "encode/apistar",
      "stars": 5570,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1279296875,
          "content": "coverage:\n  precision: 2\n  round: down\n  range: \"80...100\"\n\n  status:\n    project: yes\n    patch: no\n    changes: no\n\ncomment: off\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.181640625,
          "content": "[report]\nexclude_lines =\n    # Have to re-enable the standard pragma\n    pragma: nocover\n\n    # Don't complain if tests don't hit defensive assertion code:\n    raise NotImplementedError\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[flake8]\nmax-line-length = 120\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "*.pyc\n.cache\n.coverage\n.git\n.mypy_cache\n.pytest_cache\n__pycache__\n/*.egg-info\n/htmlcov\n/venv\n/build\n/dist\ncoverage.xml\ntest.db\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.140625,
          "content": "[settings]\natomic=true\nmulti_line_output=5\nnot_skip=__init__.py\nknown_standard_library=types\nknown_third_party=pytest\nknown_first_party=apistar\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2353515625,
          "content": "sudo: required\ndist: xenial\nlanguage: python\n\ncache: pip\n\npython:\n    - \"3.6\"\n    - \"3.7\"\n    - \"3.8\"\n    - \"3.9\"\n\ninstall:\n    - pip install -U -r requirements.txt\n\nscript:\n    - scripts/lint\n    - scripts/test\n\nafter_script:\n    - codecov\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.4892578125,
          "content": "Copyright Â© 2017-present, [Encode OSS Ltd](http://www.encode.io/).\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3193359375,
          "content": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/encode/apistar/master/docs/img/logo-200-square-light.png\" alt=\"API Star\" />\n</p>\n<p align=\"center\">\n    ðŸ›  <em>The Web API toolkit.</em> ðŸ› \n</p>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/encode/apistar\">\n    <img src=\"https://travis-ci.org/encode/apistar.svg?branch=master\" alt=\"Build Status\">\n</a>\n<a href=\"https://codecov.io/gh/encode/apistar\">\n    <img src=\"https://codecov.io/gh/encode/apistar/branch/master/graph/badge.svg\" alt=\"codecov\">\n</a>\n<a href=\"https://pypi.python.org/pypi/apistar\">\n    <img src=\"https://badge.fury.io/py/apistar.svg\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Community:** https://discuss.apistar.org ðŸ¤” ðŸ’­ ðŸ¤“ ðŸ’¬ ðŸ˜Ž\n\n**Documentation:** https://docs.apistar.com ðŸ“˜\n\n**Requirements:** Python 3.6+\n\n---\n\nAPI Star is a toolkit for working with OpenAPI or Swagger schemas. It allows you to:\n\n* Build API documentation, with a selection of available themes.\n* Validate API schema documents, and provide contextual errors.\n* Make API requests using the dynamic client library.\n\nYou can use it to build static documentation, integrate it within a Web framework,\nor use it as the client library for interacting with other APIs.\n\n## Quickstart\n\nInstall API Star:\n\n```bash\n$ pip3 install apistar\n```\n\nLet's take a look at some of the functionality the toolkit provides...\n\nWe'll start by creating an OpenAPI schema, `schema.yaml`:\n\n```yaml\nopenapi: 3.0.0\ninfo:\n  title: Widget API\n  version: '1.0'\n  description: An example API for widgets\nservers:\n  - url: https://www.example.org/\npaths:\n  /widgets:\n    get:\n      summary: List all the widgets.\n      operationId: listWidgets\n      parameters:\n      - in: query\n        name: search\n        description: Filter widgets by this search term.\n        schema:\n          type: string\n```\n\nLet's also create a configuration file `apistar.yml`:\n\n```yaml\nschema:\n  path: schema.yaml\n  format: openapi\n```\n\nWe're now ready to start using the `apistar` command line tool.\n\nWe can validate our OpenAPI schema:\n\n```\n$ apistar validate\nâœ“ Valid OpenAPI schema.\n```\n\nOr build developer documentation for our API:\n\n```\n$ apistar docs --serve\nâœ“ Documentation available at \"http://127.0.0.1:8000/\" (Ctrl+C to quit)\n```\n\nWe can also make API requests to the server referenced in the schema:\n\n```\n$ apistar request listWidgets search=cogwheel\n```\n\n## Where did the server go?\n\nWith version 0.6 onwards the API Star project is being focused as a\nframework-agnostic suite of API tooling. The plan is to build out this\nfunctionality in a way that makes it appropriate for use either as a stand-alone\ntool, or together with a large range of frameworks.\n\nThe 0.5 branch remains available on GitHub, and can be installed from PyPI\nwith `pip install apistar==0.5.41`. Any further development of the API Star\nserver would likely need to be against a fork of that, under a new maintainer.\n\nIf you're looking for a high-performance Python-based async framework, then\nI would instead recommend [Starlette](https://www.starlette.io/).\n\n---\n\n<p align=\"center\"><i>API Star is <a href=\"https://github.com/tomchristie/apistar/blob/master/LICENSE.md\">BSD licensed</a> code.<br/>Designed & built in Brighton, England.</i>\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/encode/apistar/master/docs/img/ident-44-square-light.png\" alt=\"API Star\" />\n</p>\n"
        },
        {
          "name": "apistar",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs-theme",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.33203125,
          "content": "site_name: API Star\ntheme:\n    name: null\n    custom_dir: 'docs-theme'\npages:\n    - Home: index.md\n    - Tools:\n        - Schema Validation: schema-validation.md\n        - API Documentation: api-documentation.md\n        - Making API Requests: making-api-requests.md\n    - Client Library: client-library.md\n    - Type System: type-system.md\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.142578125,
          "content": "# Core requirements\nclick\njinja2\nrequests\npyyaml\ntypesystem>=0.2.0\n\n# Testing requirements\nblack\ncodecov\nflake8\nisort\npytest\npytest-cov\nstarlette\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.5654296875,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\n\n\ndef get_version(package):\n    \"\"\"\n    Return package version as listed in `__version__` in `init.py`.\n    \"\"\"\n    init_py = open(os.path.join(package, \"__init__.py\")).read()\n    return re.search(\"__version__ = ['\\\"]([^'\\\"]+)['\\\"]\", init_py).group(1)\n\n\ndef get_packages(package):\n    \"\"\"\n    Return root package and all sub-packages.\n    \"\"\"\n    return [\n        dirpath\n        for dirpath, dirnames, filenames in os.walk(package)\n        if os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n\ndef get_package_data(package):\n    \"\"\"\n    Return all files under the root package, that are not in a\n    package themselves.\n    \"\"\"\n    walk = [\n        (dirpath.replace(package + os.sep, \"\", 1), filenames)\n        for dirpath, dirnames, filenames in os.walk(package)\n        if not os.path.exists(os.path.join(dirpath, \"__init__.py\"))\n    ]\n\n    filepaths = []\n    for base, filenames in walk:\n        filepaths.extend([os.path.join(base, filename) for filename in filenames])\n    return {package: filepaths}\n\n\ndef get_long_description(long_description_file):\n    \"\"\"\n    Read long description from file.\n    \"\"\"\n    with open(long_description_file, encoding=\"utf-8\") as f:\n        long_description = f.read()\n\n    return long_description\n\n\nversion = get_version(\"apistar\")\n\n\nsetup(\n    name=\"apistar\",\n    version=version,\n    url=\"https://docs.apistar.com/\",\n    license=\"BSD\",\n    description=\"API documentation, validation, mocking, and clients.\",\n    long_description=get_long_description(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    author=\"Tom Christie\",\n    author_email=\"tom@tomchristie.com\",\n    packages=get_packages(\"apistar\"),\n    package_data=get_package_data(\"apistar\"),\n    install_requires=[\"click\", \"jinja2\", \"requests\", \"pyyaml\", \"typesystem\"],\n    python_requires=\">=3.6\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    entry_points={\"console_scripts\": [\"apistar=apistar:cli\"]},\n)\n"
        },
        {
          "name": "testcases",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}