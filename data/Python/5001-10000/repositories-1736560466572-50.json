{
  "metadata": {
    "timestamp": 1736560466572,
    "page": 50,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gruns/icecream",
      "stars": 9414,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "*~\n.#*\n\\#*\n.tox\ndist/\n.eggs/\nbuild/\n*.pyc\n*.pyo\n*.egg\n*.egg-info\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.029296875,
          "content": "Copyright 2018 Ansgar Grunseid\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.029296875,
          "content": "include LICENSE.txt README.md\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.76953125,
          "content": "<h1 align=\"center\">\n  <img src=\"logo.svg\" width=\"220px\" height=\"370px\" alt=\"IceCream\">\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/icecream\"><img src=\"https://badge.fury.io/py/icecream.svg\"></a>\n  <a href=\"https://github.com/gruns/icecream/actions/workflows/ci.yml\"><img src=\"https://github.com/gruns/icecream/actions/workflows/ci.yml/badge.svg\"></a>\n  <a href=\"http://unlicense.org/\"><img src=\"https://img.shields.io/pypi/l/icecream.svg\"></a>\n  <a href=\"https://pypi.python.org/pypi/icecream\"><img src=\"https://img.shields.io/pypi/pyversions/icecream.svg\"></a>\n</p>\n\n\n### IceCream â€” Never use print() to debug again\n\nDo you ever use `print()` or `log()` to debug your code? Of course you\ndo. IceCream, or `ic` for short, makes print debugging a little sweeter.\n\n`ic()` is like `print()`, but better:\n\n  1. It prints both variables and expressions along with their values.\n  2. It's 60% faster to type.\n  3. Data structures are formatted and pretty printed.\n  4. Output is syntax highlighted.\n  5. It optionally includes program context: filename, line number, and\n     parent function.\n\nIceCream is well tested, [permissively licensed](LICENSE.txt), and supports Python 3 and PyPy3.\n\nðŸ‘¥ IceCream is looking for a lead contributor + maintainer. Would you\nlove to lead IceCream and improve debugging for everyone in Python?\nPlease [reach out](mailto:grunseid+icecream@gmail.com) and let me know! ðŸ™Œ\n\n\n### Inspect Variables\n\nHave you ever printed variables or expressions to debug your program? If\nyou've ever typed something like\n\n```python\nprint(foo('123'))\n```\n\nor the more thorough\n\n```python\nprint(\"foo('123')\", foo('123'))\n```\n\nthen `ic()` will put a smile on your face. With arguments, `ic()`\ninspects itself and prints both its own arguments and the values of\nthose arguments.\n\n```python\nfrom icecream import ic\n\ndef foo(i):\n    return i + 333\n\nic(foo(123))\n```\n\nPrints\n\n```\nic| foo(123): 456\n```\n\nSimilarly,\n\n```python\nd = {'key': {1: 'one'}}\nic(d['key'][1])\n\nclass klass():\n    attr = 'yep'\nic(klass.attr)\n```\n\nPrints\n\n```\nic| d['key'][1]: 'one'\nic| klass.attr: 'yep'\n```\n\nJust give `ic()` a variable or expression and you're done. Easy.\n\n\n### Inspect Execution\n\nHave you ever used `print()` to determine which parts of your program are\nexecuted, and in which order they're executed? For example, if you've ever added\nprint statements to debug code like\n\n```python\ndef foo():\n    print(0)\n    first()\n\n    if expression:\n        print(1)\n        second()\n    else:\n        print(2)\n        third()\n```\n\nthen `ic()` helps here, too. Without arguments, `ic()` inspects itself and\nprints the calling filename, line number, and parent function.\n\n```python\nfrom icecream import ic\n\ndef foo():\n    ic()\n    first()\n\n    if expression:\n        ic()\n        second()\n    else:\n        ic()\n        third()\n```\n\nPrints\n\n```\nic| example.py:4 in foo()\nic| example.py:11 in foo()\n```\n\nJust call `ic()` and you're done. Simple.\n\n\n### Return Value\n\n`ic()` returns its argument(s), so `ic()` can easily be inserted into\npre-existing code.\n\n```pycon\n>>> a = 6\n>>> def half(i):\n>>>     return i / 2\n>>> b = half(ic(a))\nic| a: 6\n>>> ic(b)\nic| b: 3\n```\n\n\n### Miscellaneous\n\n`ic.format(*args)` is like `ic()` but the output is returned as a string instead\nof written to stderr.\n\n```pycon\n>>> from icecream import ic\n>>> s = 'sup'\n>>> out = ic.format(s)\n>>> print(out)\nic| s: 'sup'\n```\n\nAdditionally, `ic()`'s output can be entirely disabled, and later re-enabled, with\n`ic.disable()` and `ic.enable()` respectively.\n\n```python\nfrom icecream import ic\n\nic(1)\n\nic.disable()\nic(2)\n\nic.enable()\nic(3)\n```\n\nPrints\n\n```\nic| 1: 1\nic| 3: 3\n```\n\n`ic()` continues to return its arguments when disabled, of course; no existing\ncode with `ic()` breaks.\n\n\n### Import Tricks\n\nTo make `ic()` available in every file without needing to be imported in\nevery file, you can `install()` it. For example, in a root `A.py`:\n\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom icecream import install\ninstall()\n\nfrom B import foo\nfoo()\n```\n\nand then in `B.py`, which is imported by `A.py`, just call `ic()`:\n\n```python\n# -*- coding: utf-8 -*-\n\ndef foo():\n    x = 3\n    ic(x)\n```\n\n`install()` adds `ic()` to the\n[builtins](https://docs.python.org/3.8/library/builtins.html) module,\nwhich is shared amongst all files imported by the interpreter.\nSimilarly, `ic()` can later be `uninstall()`ed, too.\n\n`ic()` can also be imported in a manner that fails gracefully if\nIceCream isn't installed, like in production environments (i.e. not\ndevelopment). To that end, this fallback import snippet may prove\nuseful:\n\n```python\ntry:\n    from icecream import ic\nexcept ImportError:  # Graceful fallback if IceCream isn't installed.\n    ic = lambda *a: None if not a else (a[0] if len(a) == 1 else a)  # noqa\n```\n\n\n### Configuration\n\n`ic.configureOutput(prefix, outputFunction, argToStringFunction,\nincludeContext, contextAbsPath)` controls `ic()`'s output.\n\n`prefix`, if provided, adopts a custom output prefix. `prefix` can be a\nstring, like\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(prefix='hello -> ')\n>>> ic('world')\nhello -> 'world'\n```\n\nor a function.\n\n```pycon\n>>> import time\n>>> from icecream import ic\n>>>  \n>>> def unixTimestamp():\n>>>     return '%i |> ' % int(time.time())\n>>>\n>>> ic.configureOutput(prefix=unixTimestamp)\n>>> ic('world')\n1519185860 |> 'world': 'world'\n```\n\n`prefix`'s default value is `ic| `.\n\n`outputFunction`, if provided, is called once for every `ic()` call with\n`ic()`'s output, as a string, instead of that string being written to\nstderr (the default).\n\n```pycon\n>>> import logging\n>>> from icecream import ic\n>>>\n>>> def warn(s):\n>>>     logging.warning(s)\n>>>\n>>> ic.configureOutput(outputFunction=warn)\n>>> ic('eep')\nWARNING:root:ic| 'eep': 'eep'\n```\n\n`argToStringFunction`, if provided, is called with argument values to be\nserialized to displayable strings. The default is PrettyPrint's\n[pprint.pformat()](https://docs.python.org/3/library/pprint.html#pprint.pformat),\nbut this can be changed to, for example, handle non-standard datatypes\nin a custom fashion.\n\n```pycon\n>>> from icecream import ic\n>>>\n>>> def toString(obj):\n>>>    if isinstance(obj, str):\n>>>        return '[!string %r with length %i!]' % (obj, len(obj))\n>>>    return repr(obj)\n>>>\n>>> ic.configureOutput(argToStringFunction=toString)\n>>> ic(7, 'hello')\nic| 7: 7, 'hello': [!string 'hello' with length 5!]\n```\n\nThe default `argToStringFunction` is `icecream.argumentToString`, and\nhas methods to `register` and `unregister` functions to be dispatched\nfor specific classes using `functools.singledispatch`. It also has a\n`registry` property to view registered functions.\n\n```pycon\n>>> from icecream import ic, argumentToString\n>>> import numpy as np\n>>>\n>>> # Register a function to summarize numpy array\n>>> @argumentToString.register(np.ndarray)\n>>> def _(obj):\n>>>     return f\"ndarray, shape={obj.shape}, dtype={obj.dtype}\"\n>>>\n>>> x = np.zeros((1, 2))\n>>> ic(x)\nic| x: ndarray, shape=(1, 2), dtype=float64\n>>>\n>>> # View registered functions\n>>> argumentToString.registry\nmappingproxy({object: <function icecream.icecream.argumentToString(obj)>,\n              numpy.ndarray: <function __main__._(obj)>})\n>>>\n>>> # Unregister a function and fallback to the default behavior\n>>> argumentToString.unregister(np.ndarray)\n>>> ic(x)\nic| x: array([[0., 0.]])\n```\n\n`includeContext`, if provided and True, adds the `ic()` call's filename,\nline number, and parent function to `ic()`'s output.\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(includeContext=True)\n>>>\n>>> def foo():\n>>>   i = 3\n>>>   ic(i)\n>>> foo()\nic| example.py:12 in foo()- i: 3\n```\n\n`includeContext` is False by default.\n\n`contextAbsPath`, if provided and True, outputs absolute filepaths, like\n`/path/to/foo.py`, over just filenames, like `foo.py`, when `ic()` is\ncalled with `includeContext == True`. This is useful when debugging\nmultiple files that share the same filename(s). Moreover, some editors,\nlike VSCode, turn absolute filepaths into clickable links that open the\nfile where `ic()` was called.\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(includeContext=True, contextAbsPath=True)\n>>>\n>>> i = 3\n>>>\n>>> def foo():\n>>>   ic(i)\n>>> foo()\nic| /absolute/path/to/example.py:12 in foo()- i: 3\n>>>\n>>> ic.configureOutput(includeContext=True, contextAbsPath=False)\n>>>\n>>> def foo():\n>>>   ic(i)\n>>> foo()\nic| example.py:18 in foo()- i: 3\n```\n\n`contextAbsPath` is False by default.\n\n### Installation\n\nInstalling IceCream with pip is easy.\n\n```\n$ pip install icecream\n```\n\n\n### Related Python libraries\n\n`ic()` uses [**`executing`**](https://github.com/alexmojaki/executing)\nby [**@alexmojaki**](https://github.com/alexmojaki) to reliably locate\n`ic()` calls in Python source. It's magic.\n\n\n### IceCream in Other Languages\n\nDelicious IceCream should be enjoyed in every language.\n\n- Dart: [icecream](https://github.com/HallerPatrick/icecream)\n- Rust: [icecream-rs](https://github.com/ericchang00/icecream-rs)\n- Node.js: [node-icecream](https://github.com/jmerle/node-icecream)\n- C++: [IceCream-Cpp](https://github.com/renatoGarcia/icecream-cpp)\n- C99: [icecream-c](https://github.com/chunqian/icecream-c)\n- PHP: [icecream-php](https://github.com/ntzm/icecream-php)\n- Go: [icecream-go](https://github.com/WAY29/icecream-go)\n- Ruby: [Ricecream](https://github.com/nodai2hITC/ricecream)\n- Java: [icecream-java](https://github.com/Akshay-Thakare/icecream-java)\n- R: [icecream](https://github.com/lewinfox/icecream)\n- Lua: [icecream-lua](https://github.com/wlingze/icecream-lua)\n- Clojure(Script): [icecream-cljc](https://github.com/Eigenbahn/icecream-cljc)\n- Bash: [IceCream-Bash](https://github.com/jtplaarj/IceCream-Bash)\n- SystemVerilog: [icecream_sv](https://github.com/xver/icecream_sv)\n\nIf you'd like a similar `ic()` function in your favorite language, please open a\npull request! IceCream's goal is to sweeten print debugging with a handy-dandy\n`ic()` function in every language.\n"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 3.9609375,
          "content": "================================================================================\n v2.1.4\n================================================================================\nChanged: Drop support for all Python versions prior to Python 3.8, now\n  long past EOL. Notably, Python 2 is no longer supported.\nChanged: Update the 'executing' dependency to >= v2.1.0 to improve\n  source code analysis and support Python 3.13.\n\n\n================================================================================\n v2.1.3\n================================================================================\nAdded: The contextAbsPath= parameter to ic.configureOutput() which, when\n  True, outputs absolute paths, like /path/to/foo.py, instead of just\n  filenames, like foo.py. See https://github.com/gruns/icecream/pull/122.\n  Huge thank you to @HelinXu!\nChanged: Raise TypeError if no arguments are provided to\n  ic.configureOutput().\n\n\n================================================================================\n v2.1.2\n================================================================================\nAdded: Ability to register and unregister singledispatch argumentToString\n  functions. See https://github.com/gruns/icecream/pull/115. Huge thank you\n  to @atusy!\n\n\n================================================================================\n v2.1.1\n================================================================================\nAdded: Support for Python 3.9.\nChanged: Use timestamps in the local timezone instead of less helpful\n  UTC timestamps.\n\n\n================================================================================\n v2.1.0\n================================================================================\nAdded: install() and uninstall() functions that add or remove ic() from\n  the builtins module.\nChanged: Switch to ast.literal_eval() to determine if an argument and\n  value are the same, and thus only the value should be output. Huge\n  thank you to Ed Cardinal and Alex Hall.\n\n\n================================================================================\n v2.0.0\n================================================================================\nAdded: Support for Python 3.8.\nRemoved: Support for Python 3.4.\nChanged: Switched core AST parsing engine to Alex Hall's executing\n  (https://github.com/alexmojaki/executing). Huge thank you to Alex Hall.\nChanged: Whitespace in arguments is no longer collapsed. Indentation in\n  multiline arguments is now preserved.\n\n\n================================================================================\n v1.5.0\n================================================================================\nFixed: Support multiline container arguments. e.g.\n  ic([a,\n        b])\nFixed: Include LICENSE.txt in source distributions.\nChanged: Collapse argument whitespace, e.g. ic([ a,  b ]) -> ic| [a, b].\n\n\n================================================================================\n v1.4.0\n================================================================================\nAdded: Colorize output with pygments.\nAdded: Test Python style with pycodestyle.\nFixed: Parse and print tuple arguments correctly, e.g. ic((a, b)).\nFixed: Fail gracefully when the underlying source code changes during execution.\nChanged: Print values (e.g. 1, 'foo', etc) by themselves, nonredundantly. For\n  example, ic(3) now prints 'ic| 3' instead of 'ic| 3: 3'.\n\n\n================================================================================\n v1.3.1\n================================================================================\nRemoved: Support for Python 3.3, which reached EOL on 2017-09-29.\nFixed: ic() invocations that fail to find or access source code (e.g. eval(),\n  exec(), python -i, etc) now print an error message instead of throwing an\n  IOError (Python 2) or OSError (Python 3).\n\n\n================================================================================\n v1.3\n================================================================================\nFirst release.\n\n\nThis changelog wasn't maintained prior to v1.3.\n"
        },
        {
          "name": "failures-to-investigate",
          "type": "tree",
          "content": null
        },
        {
          "name": "icecream",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 12.5009765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"91.579399mm\"\n   height=\"154.09212mm\"\n   viewBox=\"0 0 324.49393 545.99569\"\n   id=\"svg4308\"\n   version=\"1.1\"\n   inkscape:version=\"0.91 r13725\"\n   sodipodi:docname=\"icon.svg\">\n  <defs\n     id=\"defs4310\">\n    <clipPath\n       clipPathUnits=\"userSpaceOnUse\"\n       id=\"clipPath26\">\n      <path\n         d=\"m 37.5391,6923.42 931.0389,-2407.4 891.132,2407.4 -1822.1709,0 z\"\n         id=\"path28\"\n         inkscape:connector-curvature=\"0\" />\n    </clipPath>\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.70710678\"\n     inkscape:cx=\"-63.592231\"\n     inkscape:cy=\"248.03944\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     showgrid=\"false\"\n     showguides=\"false\"\n     inkscape:window-width=\"1613\"\n     inkscape:window-height=\"1110\"\n     inkscape:window-x=\"2041\"\n     inkscape:window-y=\"115\"\n     inkscape:window-maximized=\"0\"\n     fit-margin-top=\"0\"\n     fit-margin-left=\"0\"\n     fit-margin-right=\"0\"\n     fit-margin-bottom=\"0\">\n    <inkscape:grid\n       type=\"xygrid\"\n       id=\"grid5207\"\n       originx=\"-211.61018\"\n       originy=\"-363.82332\" />\n  </sodipodi:namedview>\n  <metadata\n     id=\"metadata4313\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(-211.61018,-142.54319)\">\n    <g\n       transform=\"matrix(0.125,0,0,-0.125,261.42193,1253.0414)\"\n       id=\"g22\">\n      <g\n         id=\"g24\"\n         clip-path=\"url(#clipPath26)\">\n        <path\n           d=\"m 37.5391,6923.42 931.0389,-2407.4 891.132,2407.4 -1822.1709,0\"\n           style=\"fill:#f8a43a;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path30\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 1243.63,4384.11 78.8594,0 0,2418.33 -78.8594,0 0,-2418.33 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path32\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 939.18,4430.95 78.8594,0 0,2418.33 -78.8594,0 0,-2418.33 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path34\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 247.551,4384.11 78.8555,0 0,2418.33 -78.8555,0 0,-2418.33 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path36\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 580.063,4384.11 78.8594,0 0,2418.33 -78.8594,0 0,-2418.33 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path38\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 1602.27,4384.11 78.8594,0 0,2418.33 -78.8594,0 0,-2418.33 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path40\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 168.723,5984.74 1622.67,0 0,78.8594 -1622.67,0 0,-78.8594 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path42\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 137.297,5680.29 1622.66,0 0,78.8516 -1622.66,0 0,-78.8516 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path44\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 168.723,4988.66 1622.67,0 0,78.8594 -1622.67,0 0,-78.8594 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path46\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 168.723,5321.17 1622.67,0 0,78.8594 -1622.67,0 0,-78.8594 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path48\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 168.723,6343.38 1622.67,0 0,78.8594 -1622.67,0 0,-78.8594 z\"\n           style=\"fill:#f6ca95;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n           id=\"path50\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n    </g>\n    <path\n       d=\"m 397.53268,321.21997 c 0,51.34125 -41.62,92.96125 -92.96125,92.96125 -51.34125,0 -92.96125,-41.62 -92.96125,-92.96125 0,-51.34125 41.62,-92.9625 92.96125,-92.9625 51.34125,0 92.96125,41.62125 92.96125,92.9625\"\n       style=\"fill:#f9a7a8;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n       id=\"path108\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       d=\"m 536.10411,336.21997 c 0,51.34125 -41.62,92.96125 -92.96125,92.96125 -51.34125,0 -92.96125,-41.62 -92.96125,-92.96125 0,-51.34125 41.62,-92.9625 92.96125,-92.9625 51.34125,0 92.96125,41.62125 92.96125,92.9625\"\n       style=\"fill:#f9a7a8;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n       id=\"path108-3\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       d=\"m 476.81839,235.50569 c 0,51.34125 -41.62,92.96125 -92.96125,92.96125 -51.34125,0 -92.96125,-41.62 -92.96125,-92.96125 0,-51.34125 41.62,-92.9625 92.96125,-92.9625 51.34125,0 92.96125,41.62125 92.96125,92.9625\"\n       style=\"fill:#f9a7a8;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n       id=\"path108-6\"\n       inkscape:connector-curvature=\"0\" />\n    <g\n       id=\"g123\"\n       transform=\"matrix(1.3689688,0,0,1.3689688,-407.29924,-67.160687)\">\n      <g\n         id=\"g125\">\n        <circle\n           cx=\"523.48499\"\n           cy=\"257.439\"\n           r=\"10.439\"\n           id=\"circle127\" />\n        <circle\n           cx=\"625.48499\"\n           cy=\"257.439\"\n           r=\"10.439\"\n           id=\"circle129\" />\n      </g>\n      <g\n         id=\"g131\">\n        <path\n           d=\"m 527,290 c 0,6.075 -4.925,11 -11,11 l -6,0 c -6.075,0 -11,-4.925 -11,-11 l 0,0 c 0,-6.075 4.925,-11 11,-11 l 6,0 c 6.075,0 11,4.925 11,11 l 0,0 z\"\n           id=\"path133\"\n           inkscape:connector-curvature=\"0\"\n           style=\"fill:#fa7472\" />\n        <path\n           d=\"m 650,290 c 0,6.075 -4.925,11 -11,11 l -6,0 c -6.075,0 -11,-4.925 -11,-11 l 0,0 c 0,-6.075 4.925,-11 11,-11 l 6,0 c 6.075,0 11,4.925 11,11 l 0,0 z\"\n           id=\"path135\"\n           inkscape:connector-curvature=\"0\"\n           style=\"fill:#fa7472\" />\n      </g>\n      <g\n         id=\"g137\">\n        <path\n           d=\"m 542,275 0,0.629 c 0.008,-0.211 0.02,-0.422 0.044,-0.629 L 542,275 Z\"\n           id=\"path139\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 565.494,290 -15.58,0 c -4.221,0 -7.67,-13.066 -7.914,-14.013 l 0,3.513 c 0,8.898 3.58,16.959 9.373,22.828 3.027,-5.651 8.047,-10.074 14.121,-12.328 z\"\n           id=\"path141\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 607,275 -0.074,0 c 0.035,0.305 0.059,0.614 0.059,0.929 0,0 -3.549,14.071 -7.928,14.071 l -15.181,0 c 5.985,2.221 10.948,6.547 13.987,12.08 5.652,-5.848 9.137,-13.805 9.137,-22.58 l 0,-4.5 z\"\n           id=\"path143\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 541.984,275.929 c 0,0 0.006,0.023 0.016,0.059 l 0,-0.358 c -0.004,0.099 -0.016,0.198 -0.016,0.299 z\"\n           id=\"path145\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 599.057,268 -49.143,0 c -4.064,0 -7.41,3.06 -7.87,7 l 64.882,0 c -0.461,-3.94 -3.806,-7 -7.869,-7 z\"\n           id=\"path147\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 549.914,290 15.58,0 c 2.863,-1.063 5.959,-1.645 9.191,-1.645 3.232,0 6.328,0.582 9.19,1.645 l 15.181,0 c 4.379,0 7.928,-14.071 7.928,-14.071 0,-0.314 -0.023,-0.624 -0.059,-0.929 l -64.882,0 c -0.024,0.207 -0.036,0.418 -0.044,0.629 l 0,0.358 c 0.245,0.947 3.694,14.013 7.915,14.013 z\"\n           id=\"path149\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           d=\"m 583.876,290 -18.382,0 c -6.074,2.254 -11.094,6.677 -14.121,12.328 5.894,5.97 14.076,9.672 23.127,9.672 9.174,0 17.453,-3.807 23.363,-9.92 -3.039,-5.533 -8.002,-9.859 -13.987,-12.08 z\"\n           id=\"path151\"\n           inkscape:connector-curvature=\"0\"\n           style=\"fill:#fa7472\" />\n        <path\n           d=\"m 565.494,290 18.382,0 c -2.862,-1.063 -5.958,-1.645 -9.19,-1.645 -3.232,0 -6.329,0.583 -9.192,1.645 z\"\n           id=\"path153\"\n           inkscape:connector-curvature=\"0\"\n           style=\"fill:#fa7472\" />\n      </g>\n    </g>\n    <ellipse\n       style=\"opacity:1;fill:#f9a7a8;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"path5297\"\n       cx=\"307.61176\"\n       cy=\"285.13104\"\n       rx=\"18.687822\"\n       ry=\"16.667517\" />\n    <ellipse\n       style=\"opacity:1;fill:#f9a7a8;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"path5299\"\n       cx=\"451.5585\"\n       cy=\"287.65643\"\n       rx=\"21.213203\"\n       ry=\"19.192898\" />\n    <circle\n       style=\"opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"path5301\"\n       cx=\"317.1879\"\n       cy=\"268.44321\"\n       r=\"15.152288\" />\n    <circle\n       style=\"opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"path5301-7\"\n       cx=\"441.47726\"\n       cy=\"268.46353\"\n       r=\"15.152288\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 364.68537,329.70402 c -6.71374,-0.37605 -14.35233,-0.41908 -21.08693,-0.12627 -4.49886,-4.278 -8.62646,-12.48068 -7.95495,-20.20305 l 87.25193,0.12627 0,4.41942\"\n       id=\"path5353\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 422.89542,313.92039 c -6.14311,16.87018 -9.1488,16.53875 -29.4207,15.65736\"\n       id=\"path5355\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 418.22346,325.41087 c -1.94431,2.85956 -3.0075,4.17038 -7.32361,4.54569\"\n       id=\"path5357\"\n       inkscape:connector-curvature=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"rect5361\"\n       width=\"2.3517613\"\n       height=\"0.41037446\"\n       x=\"364.44861\"\n       y=\"329.57776\"\n       rx=\"6.0738301\"\n       ry=\"0.20476501\" />\n    <rect\n       style=\"opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"rect5363\"\n       width=\"2.0518723\"\n       height=\"0.44194174\"\n       x=\"392.11734\"\n       y=\"329.54617\"\n       rx=\"6.0738301\"\n       ry=\"0.20476501\" />\n    <rect\n       style=\"opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"rect5369\"\n       width=\"18.940361\"\n       height=\"5.8083773\"\n       x=\"342.20947\"\n       y=\"325.28461\"\n       rx=\"6.0738301\"\n       ry=\"0.20476501\" />\n    <path\n       style=\"opacity:1;fill:#fa7472;fill-opacity:1;fill-rule:nonzero;stroke:#ff0000;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"path6135\"\n       sodipodi:type=\"arc\"\n       sodipodi:cx=\"367.77679\"\n       sodipodi:cy=\"338.33542\"\n       sodipodi:rx=\"2.1875\"\n       sodipodi:ry=\"2.3214285\"\n       sodipodi:start=\"0\"\n       sodipodi:end=\"0.092166824\"\n       sodipodi:open=\"true\"\n       d=\"m 369.96429,338.33542 a 2.1875,2.3214285 0 0 1 -0.009,0.21365\" />\n    <rect\n       style=\"opacity:1;fill:#fa7472;fill-opacity:1;fill-rule:nonzero;stroke:#ff0000;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none\"\n       id=\"rect6143\"\n       width=\"14.931318\"\n       height=\"0.18940784\"\n       x=\"377.12289\"\n       y=\"329.79874\"\n       rx=\"3.5776339\"\n       ry=\"0.046650078\" />\n  </g>\n</svg>\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0654296875,
          "content": "[bdist_wheel]\nuniversal = 1\n\n[metadata]\nlicense_file = LICENSE.txt\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.1416015625,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# IceCream - Never use print() to debug again\n#\n# Ansgar Grunseid\n# grunseid.com\n# grunseid@gmail.com\n#\n# License: MIT\n#\n\nimport os\nimport sys\nfrom os.path import dirname, join as pjoin\nfrom setuptools import setup, find_packages, Command\nfrom setuptools.command.test import test as TestCommand\n\n\nmeta = {}\nwith open(pjoin('icecream', '__version__.py')) as f:\n    exec(f.read(), meta)\n\n\nclass Publish(Command):\n    \"\"\"Publish to PyPI with twine.\"\"\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        os.system('python setup.py sdist bdist_wheel')\n\n        sdist = 'dist/icecream-%s.tar.gz' % meta['__version__']\n        wheel = 'dist/icecream-%s-py3-none-any.whl' % meta['__version__']\n        rc = os.system('twine upload \"%s\" \"%s\"' % (sdist, wheel))\n\n        sys.exit(rc)\n\n\nclass RunTests(TestCommand):\n    \"\"\"\n    Run the unit tests.\n\n    By default, `python setup.py test` fails if tests/ isn't a Python\n    module (that is, if the tests/ directory doesn't contain an\n    __init__.py file). But the tests/ directory shouldn't contain an\n    __init__.py file and tests/ shouldn't be a Python module. See\n\n      http://doc.pytest.org/en/latest/goodpractices.html\n\n    Running the unit tests manually here enables `python setup.py test`\n    without tests/ being a Python module.\n    \"\"\"\n    def run_tests(self):\n        from unittest import TestLoader, TextTestRunner\n        tests_dir = pjoin(dirname(__file__), 'tests')\n        suite = TestLoader().discover(tests_dir)\n        result = TextTestRunner().run(suite)\n        sys.exit(0 if result.wasSuccessful() else -1)\n\n\nsetup(\n    name=meta['__title__'],\n    license=meta['__license__'],\n    version=meta['__version__'],\n    author=meta['__author__'],\n    author_email=meta['__contact__'],\n    url=meta['__url__'],\n    description=meta['__description__'],\n    long_description=(\n        'Information and documentation can be found at '\n        'https://github.com/gruns/icecream.'),\n    platforms=['any'],\n    packages=find_packages(),\n    include_package_data=True,\n    classifiers=[\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Libraries',\n        'Development Status :: 5 - Production/Stable',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: 3.13',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Programming Language :: Python :: Implementation :: CPython',\n    ],\n    tests_require=[\n        'tox>=4',\n    ],\n    install_requires=[\n        'colorama>=0.3.9',\n        'pygments>=2.2.0',\n        'executing>=2.1.0',\n        'asttokens>=2.0.1',\n    ],\n    cmdclass={\n        'test': RunTests,\n        'publish': Publish,\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.134765625,
          "content": "[tox]\nenvlist = py38, py39, py310, py311, py312, py313, pypy3\n\n[testenv]\ndescription =\n    run unittest\ncommands =\n    python -m unittest\n"
        }
      ]
    }
  ]
}