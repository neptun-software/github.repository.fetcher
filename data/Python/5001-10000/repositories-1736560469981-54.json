{
  "metadata": {
    "timestamp": 1736560469981,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aws/serverless-application-model",
      "stars": 9384,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".cfnlintrc.yaml",
          "type": "blob",
          "size": 11.31640625,
          "content": "templates:\n  - tests/translator/output/**/*.json\nignore_templates:\n  - tests/translator/output/**/error_*.json # Fail by design\n  - tests/translator/output/**/api_http_paths_with_if_condition.json\n  - tests/translator/output/**/api_http_paths_with_if_condition_no_value_else_case.json\n  - tests/translator/output/**/api_http_paths_with_if_condition_no_value_then_case.json\n  - tests/translator/output/**/api_http_with_default_iam_authorizer.json\n  - tests/translator/output/**/api_rest_paths_with_if_condition_openapi.json\n  - tests/translator/output/**/api_rest_paths_with_if_condition_openapi_no_value_else_case.json\n  - tests/translator/output/**/api_rest_paths_with_if_condition_openapi_no_value_then_case.json\n  - tests/translator/output/**/api_rest_paths_with_if_condition_swagger.json\n  - tests/translator/output/**/api_rest_paths_with_if_condition_swagger_no_value_else_case.json\n  - tests/translator/output/**/api_rest_paths_with_if_condition_swagger_no_value_then_case.json\n  - tests/translator/output/**/api_with_any_method_in_swagger.json\n  - tests/translator/output/**/api_with_auth_and_conditions_all_max.json\n  - tests/translator/output/**/api_with_basic_custom_domain.json\n  - tests/translator/output/**/api_with_basic_custom_domain_http.json\n  - tests/translator/output/**/api_with_basic_custom_domain_intrinsics.json\n  - tests/translator/output/**/api_with_basic_custom_domain_intrinsics_http.json\n  - tests/translator/output/**/api_with_binary_media_types.json\n  - tests/translator/output/**/api_with_binary_media_types_definition_body.json\n  - tests/translator/output/**/api_with_canary_setting.json\n  - tests/translator/output/**/api_with_cors_and_conditions_no_definitionbody.json\n  - tests/translator/output/**/api_with_custom_base_path.json\n  - tests/translator/output/**/api_with_custom_domain_route53.json\n  - tests/translator/output/**/api_with_custom_domain_route53_hosted_zone_name.json\n  - tests/translator/output/**/api_with_custom_domain_route53_hosted_zone_name_http.json\n  - tests/translator/output/**/api_with_custom_domain_route53_http.json\n  - tests/translator/output/**/api_with_custom_domain_route53_multiple_intrinsic_hostedzoneid.json\n  - tests/translator/output/**/api_with_identity_intrinsic.json\n  - tests/translator/output/**/api_with_if_conditional_with_resource_policy.json\n  - tests/translator/output/**/api_with_resource_policy_global.json\n  - tests/translator/output/**/api_with_security_definition_and_none_components.json\n  - tests/translator/output/**/api_with_source_vpc_whitelist.json\n  - tests/translator/output/**/api_with_usageplans.json\n  - tests/translator/output/**/api_with_usageplans_intrinsics.json\n  - tests/translator/output/**/api_with_usageplans_shared_attributes_three.json\n  - tests/translator/output/**/api_with_usageplans_shared_attributes_two.json\n  - tests/translator/output/**/api_with_usageplans_shared_no_side_effect_1.json\n  - tests/translator/output/**/api_with_usageplans_shared_no_side_effect_2.json\n  - tests/translator/output/**/application_with_intrinsics.json\n  - tests/translator/output/**/basic_function_withimageuri.json\n  - tests/translator/output/**/basic_layer.json\n  - tests/translator/output/**/cloudwatchevent_intrinsics.json\n  - tests/translator/output/**/congito_userpool_with_sms_configuration.json\n  - tests/translator/output/**/connector_bucket_to_function.json\n  - tests/translator/output/**/connector_dependson_replace.json\n  - tests/translator/output/**/connector_esm_dependson.json\n  - tests/translator/output/**/connector_function_to_sqs.json\n  - tests/translator/output/**/connector_function_to_table.json\n  - tests/translator/output/**/connector_hardcoded_lambda_arn.json\n  - tests/translator/output/**/connector_hardcoded_props.json\n  - tests/translator/output/**/connector_rule_to_eventbus.json\n  - tests/translator/output/**/connector_rule_to_sfn.json\n  - tests/translator/output/**/connector_rule_to_sns.json\n  - tests/translator/output/**/connector_sfn_to_function.json\n  - tests/translator/output/**/connector_sns_to_function.json\n  - tests/translator/output/**/connector_table_to_function.json\n  - tests/translator/output/**/documentdb_with_intrinsics.json  # TODO: remove once DocumentDDB is available\n  - tests/translator/output/**/eventbridgerule_with_dlq.json\n  - tests/translator/output/**/function_event_conditions.json\n  - tests/translator/output/**/function_with_alias_and_code_sha256.json\n  - tests/translator/output/**/function_with_alias_intrinsics.json\n  - tests/translator/output/**/function_with_condition.json\n  - tests/translator/output/**/function_with_conditional_managed_policy.json\n  - tests/translator/output/**/function_with_conditional_managed_policy_and_ref_no_value.json\n  - tests/translator/output/**/function_with_conditional_policy_template.json\n  - tests/translator/output/**/function_with_conditional_policy_template_and_ref_no_value.json\n  - tests/translator/output/**/function_with_custom_codedeploy_deployment_preference.json\n  - tests/translator/output/**/function_with_deployment_no_service_role_with_passthrough.json\n  - tests/translator/output/**/function_with_deployment_no_service_role_without_passthrough.json\n  - tests/translator/output/**/function_with_deployment_preference.json\n  - tests/translator/output/**/function_with_deployment_preference_condition_with_passthrough.json\n  - tests/translator/output/**/function_with_deployment_preference_condition_without_passthrough.json\n  - tests/translator/output/**/function_with_deployment_preference_from_parameters.json\n  - tests/translator/output/**/function_with_deployment_preference_multiple_combinations_conditions_with_passthrough.json\n  - tests/translator/output/**/function_with_deployment_preference_multiple_combinations_conditions_without_passthrough.json\n  - tests/translator/output/**/function_with_deployment_preference_passthrough_condition_with_supported_intrinsics.json\n  - tests/translator/output/**/function_with_dlq.json\n  - tests/translator/output/**/function_with_documentdb_with_kms.json  # TODO: remove once DocumentDDB is available\n  - tests/translator/output/**/function_with_documentdb.json  # TODO: remove once DocumentDDB is available\n  - tests/translator/output/**/function_with_event_dest.json\n  - tests/translator/output/**/function_with_event_dest_basic.json\n  - tests/translator/output/**/function_with_event_dest_conditional.json\n  - tests/translator/output/**/function_with_event_schedule_state.json\n  - tests/translator/output/**/function_with_file_system_config.json\n  - tests/translator/output/**/function_with_event_filtering.json  # TODO: remove once Event's KmsKeyArn is available\n  - tests/translator/output/**/function_with_function_url_config_conditions.json\n  - tests/translator/output/**/function_with_globals_role_path.json\n  - tests/translator/output/**/function_with_intrinsic_architecture.json\n  - tests/translator/output/**/function_with_kmskeyarn.json\n  - tests/translator/output/**/function_with_resource_refs.json\n  - tests/translator/output/**/function_with_role_and_role_path.json\n  - tests/translator/output/**/function_with_role_path.json\n  - tests/translator/output/**/http_api_custom_iam_auth.json\n  - tests/translator/output/**/http_api_existing_openapi.json\n  - tests/translator/output/**/http_api_existing_openapi_conditions.json\n  - tests/translator/output/**/http_api_explicit_stage.json\n  - tests/translator/output/**/http_api_global_iam_auth_enabled.json\n  - tests/translator/output/**/http_api_local_iam_auth_enabled.json\n  - tests/translator/output/**/http_api_with_cors.json\n  - tests/translator/output/**/implicit_and_explicit_api_with_conditions.json\n  - tests/translator/output/**/implicit_api_with_auth_and_conditions_max.json\n  - tests/translator/output/**/implicit_api_with_many_conditions.json\n  - tests/translator/output/**/implicit_http_api_with_many_conditions.json\n  - tests/translator/output/**/intrinsic_functions.json\n  - tests/translator/output/**/kinesis_intrinsics.json\n  - tests/translator/output/**/layers_all_properties.json\n  - tests/translator/output/**/layers_with_intrinsics.json\n  - tests/translator/output/**/s3_create_remove.json\n  - tests/translator/output/**/s3_intrinsics.json\n  - tests/translator/output/**/schema_validation_1.json\n  - tests/translator/output/**/self_managed_kafka_with_intrinsics.json\n  - tests/translator/output/**/sqs_with_scaling_config.json  # Invalid Property Resources/SQSFunctionMySqsQueue/Properties/ScalingConfig\n  - tests/translator/output/**/state_machine_with_condition.json\n  - tests/translator/output/**/state_machine_with_condition_and_events.json\n  - tests/translator/output/**/state_machine_with_eb_dlq_target_id.json\n  - tests/translator/output/**/state_machine_with_event_schedule_state.json\n  - tests/translator/output/**/state_machine_with_schedule.json\n  - tests/translator/output/**/state_machine_with_schedule_dlq_retry_policy.json\n  - tests/translator/output/**/state_machine_with_auto_publish_alias.json\n  - tests/translator/output/**/state_machine_with_deployment_preference_all_at_once.json\n  - tests/translator/output/**/state_machine_with_deployment_preference_canary.json\n  - tests/translator/output/**/state_machine_with_deployment_preference_linear.json\n  - tests/translator/output/**/state_machine_with_deletion_policy.json\n  - tests/translator/output/**/state_machine_with_update_replace_policy.json\n  - tests/translator/output/**/globals_for_function.json  # RuntimeManagementConfig\n  - tests/translator/output/**/function_with_runtime_config.json  # RuntimeManagementConfig\n  - tests/translator/output/**/managed_policies_minimal.json  # Intentionally has non-existent managed policy name\n  - tests/translator/output/**/function_with_mq.json  # Property \"EventSourceArn\" can Fn::GetAtt to a resource of types [AWS::DynamoDB::GlobalTable, AWS::DynamoDB::Table, AWS::Kinesis::Stream, AWS::Kinesis::StreamConsumer, AWS::SQS::Queue]\n  - tests/translator/output/**/function_with_mq_using_autogen_role.json  # Property \"EventSourceArn\" can Fn::GetAtt to a resource of types [AWS::DynamoDB::GlobalTable, AWS::DynamoDB::Table, AWS::Kinesis::Stream, AWS::Kinesis::StreamConsumer, AWS::SQS::Queue]\n  - tests/translator/output/**/function_with_recursive_loop.json  # Invalid Property Resources/RecursiveLoopParameterFunction/Properties/RecursiveLoop\n  - tests/translator/output/**/function_with_sourcekmskeyarn.json  # Invalid Property Resources/SourceKMSKeyArnParameterFunction/Properties/SourceKMSKeyArn\n  - tests/translator/output/**/function_with_tracing.json # Obsolete DependsOn on resource\n  - tests/translator/output/**/api_with_propagate_tags.json # TODO: Intentional error transform tests. Will be updated.\n  - tests/translator/output/**/function_with_intrinsics_resource_attribute.json # CFN now supports intrinsics in DeletionPolicy\n  - tests/translator/output/**/function_with_snapstart.json # Snapstart intentionally not attached to a lambda version which causes lint issues\n  - tests/translator/output/**/managed_policies_everything.json # intentionally contains wrong arns\n  - tests/translator/output/**/function_with_provisioned_poller_config.json\n  - tests/translator/output/**/function_with_metrics_config.json\n\nignore_checks:\n  - E2531 # Deprecated runtime; not relevant for transform tests\n  - E2533 # Another deprecated runtime; not relevant for transform tests\n  - W2531 # EOL runtime; not relevant for transform tests\n  - E3001 # Invalid or unsupported Type; common in transform tests since they focus on SAM resources\n  - W2001 # Parameter not used\n  - E3006 # Resource type check; we have some Foo Bar resources\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1796875,
          "content": "[run]\nbranch = True\nomit =\n    # Schema tested by `make check-black`\n    samtranslator/schema/*\n    samtranslator/internal/schema_source/*\n[report]\nexclude_lines =\n    pragma: no cover"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.05859375,
          "content": "[flake8]\nmax-line-length = 120\nignore = E126 F821 W504 W605\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3662109375,
          "content": ".DS_Store\nnode_modules\ndocs/website/_build\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n.static_storage/\n.media/\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n.pypirc\n.venv_cfn_lint\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# VSCode\n.vscode\n\n# PyCharm\n.idea\n\n# Companion stack config\nintegration/config/file_to_s3_map_modified.json\n\n.tmp\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "tasks:\n  - init: make init\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1728515625,
          "content": "# https://pre-commit.com/#repository-local-hooks\nrepos:\n- repo: local\n  hooks:\n    - id: black\n      name: black\n      entry: black\n      language: system\n      types: [python]\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.15625,
          "content": " # https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners\n\n* @aws/sae-enterprise\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3037109375,
          "content": "## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct). \nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact \nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.5087890625,
          "content": "# Contributing Guidelines\n\nInterested in contributing to the AWS Serverless Application Model (AWS SAM)?\nAwesome! Read this document to understand how to report issues, contribute\nfeatures and participate in the development process. We want to create a\ntransparent and open process for evolving AWS SAM.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.\n\n## Integrating AWS SAM into your tool\n\nWe encourage you to modify SAM to integrate it with other frameworks and deployment providers from the community for building serverless applications. If you're building a new tool that will use AWS SAM, let us know how we can help!\n\n## Submitting feature requests\n\nWe love features that help developers build serverless applications faster and further simplify development of serverless applications. If you have ideas for new event sources, new resource types, and new parameters within SAM, follow these steps to submit your feature request:\n\n1. Scan through the list\n   of\n   [feature requests](https://github.com/aws/serverless-application-model/discussions/categories/ideas).\n   If you find your feature there, mark it +1. This is a good indication of\n   interest from the community.\n2. If you don't find your feature in our backlog, [create a new discussion](https://github.com/aws/serverless-application-model/discussions/new?category=ideas) for it.\n\nKeep in mind that features should be driven by real use cases. Answer the\nfollowing questions in the issue that you create:\n\n- Does this feature simplify creating and deploying some aspect of a serverless application?\n- Is this feature solving a problem faced by other serverless application developers?\n- How do developers work around this problem today?\n- How is the proposed feature better than the work around?\n\n## Adding features to AWS SAM\n\nWe welcome pull requests to add new features to AWS SAM. Take a look at the\nbacklog of [Feature Requests](https://github.com/awslabs/serverless-application-specification/labels/feature-request) and pick an item that you find interesting. If the requirements have been well-scoped, feel free to make the change and send a pull request.\n\nIf you don't find an item tracking what you have in mind, start a conversation with your plan for implementing\nthe feature. When defining your feature, keep in mind that one of the core\ntenets of AWS SAM is to keep it easy to use while allowing customers access to\nuse more advanced components, should they so choose.\n\nThis repository contains the SAM specification, the code that translates SAM templates into AWS CloudFormation stacks, general information about the model, and examples of common applications. Make enhancements to all of SAM: if you make a change to the specification, please also make the corresponding change to the implementation.\n\nHere are some questions that you should answer in your plan:\n\n- **What is the problem you are solving?**\n\n    Example: Creating API endpoints require 24 steps, most of which are boilerplate and repetitive.\n\n- **Describe persona of someone who is facing this problem? This will give you\n    an understanding of how big of a problem it actually is.**\n\n    Example: John just finished coding bootcamp and wants to create a Serverless app. He has\n    basic coding skills and will be comfortable understanding infrastructure\n    concepts, but probably be intimidated by the 24 steps required to create an\n    API endpoint.\n\n- **How do developers work around this problem today?**\n\n    Example: Manually click through every step on the website while referring to\n    \"How To\" resources on the internet.\n\n- **Describe your proposed solution?**\n\n    Example: We are creating a new AWS SAM resource called \"API\". Here is how it\n    will look:\n\n    ```yaml\n    Type: 'AWS::Serverless::Api'\n    Properties:\n        # Name of API endpoint\n        Name: <string>\n        # Path to their endpoint. Example: /hello\n        Path: <string>\n        # HTTP Method for their endpoint. Example: GET, POST etc\n        Method: <string>\n    ```\n\n- **How is the proposed feature better than what the work around?**\n\n    Example: Developers can write a simple AWS SAM resource which will handle\n    generating the boilerplate for them.\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/serverless-application-model/issues), or [recently closed](https://github.com/awslabs/serverless-application-model/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n- A reproducible test case or series of steps\n- The version of our code being used\n- Any modifications you've made relevant to the bug\n- Anything unusual about your environment or deployment\n\n## Contributing via Pull Requests\n\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *develop* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n4. You propose complete changes - if you make a change to the specification, please also make the corresponding change to the implementation.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and [creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n## Finding contributions to work on\n\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/PRIVATE-aws-sam-development/labels/help%20wanted) issues is a great place to start.\n\n## Code of Conduct\n\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct). For more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact opensource-codeofconduct@amazon.com with any additional questions or comments.\n\n## Security issue notifications\n\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public GitHub issue.\n\n## Licensing\n\nSee the [LICENSE](https://github.com/awslabs/PRIVATE-aws-sam-development/blob/master/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n\nWe may ask you to sign a [Contributor License Agreement (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) for larger changes.\n"
        },
        {
          "name": "DESIGN.md",
          "type": "blob",
          "size": 1.2587890625,
          "content": "# Overview\n\nSAM is called by the CloudFormation Service. CloudFormation recognises the `Transform: AWS::Serverless-2016-10-31` header and invokes the SAM translator. This will then take your SAM template and expand it\ninto a full fledged CloudFormation Template. The CloudFormation Template that is produced from SAM is the template that is executed by CloudFormation to create/update/delete AWS resources.\n\nThe entry point for SAM starts in the Translator class [here](https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/translator/translator.py#L29), where SAM iterates through the\ntemplate and acts on `AWS::Serverless::*` Type Resources.\n\n# Design decisions\n\nDocument design decisions here.\n\n## CloudWatchLogs Event Source\n\n### LogGroupName\n\nFor now we have decided `LogGroupName` should be a required property for simplicity. A future enhancement could make this optional and create a new CloudWatch Log Group when not provided. Users could `Ref` the resource if we exposed/documented the resource naming convention.\n\n### FilterPattern\n\nDecided `FilterPattern` should be a required property so as not to provide a footgun to users. If this were to default to `\"\"`, noisy logs could invoke hundreds/thousands of Lambda functions in short periods of time."
        },
        {
          "name": "DEVELOPMENT_GUIDE.md",
          "type": "blob",
          "size": 14.162109375,
          "content": "Development Guide\n=================\n\n**Welcome hacker!**\n\nThis document will make your life easier by helping you setup a\ndevelopment environment, IDEs, tests, coding practices, or anything that\nwill help you be more productive. If you found something is missing or\ninaccurate, update this guide and send a Pull Request.\n\n**Note**: `pyenv` currently only supports macOS and Linux. If you are a\nWindows users, consider using [pipenv](https://docs.pipenv.org/).\n\n1-click ready-to-hack IDE\n-------------------------\nFor setting up a local development environment, we recommend using Gitpod - a service that allows you to spin up an in-browser Visual Studio Code-compatible editor, with everything set up and ready to go for development on this project. Just click the button below to create your private workspace:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/aws/serverless-application-model.git)\n\nThis will start a new Gitpod workspace, and immediately kick off a build of the code. Once it's done, you can start working.\n\nGitpod is free for 50 hours per month - make sure to stop your workspace when you're done (you can always resume it later, and it won't need to run the build again).\n\n\nEnvironment setup\n-----------------\n### 1. Install Python versions\n\nOur officially supported Python versions are 3.8, 3.9 and 3.10. \nOur CI/CD pipeline is setup to run unit tests against Python 3 versions. Make sure you test it before sending a Pull Request.\nSee [Unit testing with multiple Python versions](#unit-testing-with-multiple-python-versions).\n\n[pyenv](https://github.com/pyenv/pyenv) is a great tool to\neasily setup multiple Python versions. For \n\n> Note: For Windows, type\n> `export PATH=\"/c/Users/<user>/.pyenv/libexec:$PATH\"` to add pyenv to\n> your path.\n\n1.  Install PyEnv -\n    `curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash`\n1. Restart shell so the path changes take effect - `exec $SHELL`\n1.  `pyenv install 3.8.16`\n1.  `pyenv install 3.9.16`\n1.  `pyenv install 3.10.9`\n3.  Make Python versions available in the project:\n    `pyenv local 3.8.16 3.9.16 3.10.9`\n\nNote: also make sure the following lines were written into your `.bashrc` (or `.zshrc`, depending on which shell you are using):\n```\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n\n### 2. Install additional tooling\n#### Black\nWe format our code using [Black](https://github.com/python/black) and verify the source code is black compliant\nduring PR checks. Black will be installed automatically with `make init`.\n\nAfter installing, you can run our formatting through our Makefile by `make format` or integrating Black directly in your favorite IDE (instructions\ncan be found [here](https://black.readthedocs.io/en/stable/integrations/editors.html))\n \n##### (Workaround) Integrating Black directly in your favorite IDE\nSince black is installed in virtualenv, when you follow [this instruction](https://black.readthedocs.io/en/stable/integrations/editors.html), `which black` might give you this\n\n```bash\n(sam38) $ where black\n/Users/<username>/.pyenv/shims/black\n```\n\nHowever, IDEs such PyChaim (using FileWatcher) will have a hard time invoking `/Users/<username>/.pyenv/shims/black` \nand this will happen:\n\n```\npyenv: black: command not found\n\nThe `black' command exists in these Python versions:\n  3.8.16/envs/sam38\n  sam38\n``` \n\nA simple workaround is to use `/Users/<username>/.pyenv/versions/sam38/bin/black` \ninstead of `/Users/<username>/.pyenv/shims/black`.\n\n#### Pre-commit\nIf you don't wish to manually run black on each pr or install black manually, we have integrated black into git hooks through [pre-commit](https://pre-commit.com/).\nAfter installing pre-commit, run `pre-commit install` in the root of the project. This will install black for you and run the black formatting on\ncommit.\n\n### 3. Activate virtualenv\n\nVirtualenv allows you to install required libraries outside of the\nPython installation. A good practice is to setup a different virtualenv\nfor each project. [pyenv](https://github.com/pyenv/pyenv) comes with a\nhandy plugin that can create virtualenv.\n\nDepending on the python version, the following commands would change to\nbe the appropriate python version.\n\n1.  Create Virtualenv `sam38` for Python3.8: `pyenv virtualenv 3.8.16 sam38`\n1.  Activate Virtualenv: `pyenv activate sam38`\n\n### 4. Install dev version of SAM transform\n\nWe will install a development version of SAM transform from source into the\nvirtualenv.\n\n1.  Activate Virtualenv: `pyenv activate sam38`\n1.  Install dev version of SAM transform: `make init`\n\nRunning tests\n-------------\n\n### Unit testing with one Python version\n\nIf you're trying to do a quick run, it's ok to use the current python version.\nRun `make test` or `make test-fast`. Once all tests pass make sure to run\n`make pr` before sending out your PR.\n\n### Unit testing with multiple Python versions\n\nCurrently, our officially supported Python versions are 3.8, 3.9 and 3.10. For the most\npart, code that works in Python3.8 will work in Pythons 3.9 and 3.10. You only run into problems if you are\ntrying to use features released in a higher version (for example features introduced into Python3.10\nwill not work in Python3.9). If you want to test in many versions, you can create a virtualenv for\neach version and flip between them (sourcing the activate script). Typically, we run all tests in\none python version locally and then have our ci (appveyor) run all supported versions.\n\n### Transform tests\n\n#### Successful transforms\n\nTransform tests ensure a SAM template transforms into the expected CloudFormation template.\n\nWe provide a script to help generate the transform test input\nand output files in the correct directory given a SAM template. For example:\n\n```bash\npython3 bin/add_transform_test.py --template-file template.yaml\n```\n\n> **Warning**\n>\n> Always check the generated output is as expected. This tool does not guarantee correct output.\n\n#### Transform failures\n\nTo test a SAM template results in a specific transform error, add the SAM template under [`tests/translator/input`](https://github.com/aws/serverless-application-model/tree/develop/tests/translator/input), and a JSON file with the expected `errorMessage` as a top-level value under [`tests/translator/output`](https://github.com/aws/serverless-application-model/tree/develop/tests/translator/output). Both files must have the same basename and be prefixed with `error_` (e.g. `error_my_cool_template.yaml` for input, and `error_my_cool_template.json` for the expected error).\n\nSee https://github.com/aws/serverless-application-model/pull/2993 for an example.\n\n### Integration tests\n\nIntegration tests are covered in detail in the [INTEGRATION_TESTS.md file](INTEGRATION_TESTS.md) of this repository.\n\n## Development guidelines\n\n1. **Do not resolve [intrinsic functions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html).** Adding [`AWS::LanguageExtensions`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-languageextension-transform.html) before the `AWS::Serverless-2016-10-31` transform resolves most of them (see https://github.com/aws/serverless-application-model/issues/2533).\n2. **Do not break backward compatibility.** A specific SAM template should always transform into the same CloudFormation template. A template that has previously deployed successfully should continue to do so. Do not change logical IDs. Add opt-in properties for breaking changes. There are some exceptions, such as changes that do not impact resources (e.g. [`Metadata`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html)) or abstractions that can by design change over time.\n3. **Stick as close as possible to the underlying CloudFormation properties.** This includes both property names and values. This ensures we can pass values to CloudFormation and let it handle any intrinsic functions. In some cases, it also allows us to pass all properties as-is to a resource, which means customers can always use the newest properties, and we don’t spend effort maintaining a duplicate set of properties.\n4. **Only validate what’s necessary.** Do not validate properties if they’re passed directly to the underlying CloudFormation resource.\n5. **Add [type hints](https://peps.python.org/pep-0484/) to new code.** Strict typing was enabled in https://github.com/aws/serverless-application-model/pull/2558 by sprinkling [`# type: ignore`](https://peps.python.org/pep-0484/#compatibility-with-other-uses-of-function-annotations) across the existing code. Don't do that for new code. Avoid `# type: ignore`s at all cost. Instead, add types to new functions, and ideally add types to existing code it uses as well.\n6. **Do not use [`PropertyType`](https://github.com/aws/serverless-application-model/blob/c39c2807bbf327255de8abed8b8150b18c60f053/samtranslator/model/__init__.py#L13-L33) for new [`Resource`](https://github.com/aws/serverless-application-model/blob/13604cd2d9671cd6e774e5bfd610a03d82a08d76/samtranslator/model/__init__.py#L68) properties.**\n\n   For new properties of SAM resources, use [`Property`](https://github.com/aws/serverless-application-model/blob/c5830b63857f52e540fec13b29f029458edc539a/samtranslator/model/__init__.py#L36-L45) or [`PassThroughProperty`](https://github.com/aws/serverless-application-model/blob/dd79f535500158baa8e367f081d6a12113497e45/samtranslator/model/__init__.py#L48-L56) instead of [`PropertyType`](https://github.com/aws/serverless-application-model/blob/c39c2807bbf327255de8abed8b8150b18c60f053/samtranslator/model/__init__.py#L13-L33). This avoids [sneaky bugs](https://github.com/aws/serverless-application-model/pull/2495#discussion_r976715242) and ensures valid templates do not cause transform failures.\n\n   For new properties of CloudFormation resources, use [`GeneratedProperty`](https://github.com/aws/serverless-application-model/blob/79452f69bc1fcf918b8625c2f9005c74ab874801/samtranslator/model/__init__.py#L74-L82). It performs no runtime validation, reducing the risk of valid values causing transform failures.\n7. **Write all new code under [`samtranslator/internal`](https://github.com/aws/serverless-application-model/tree/develop/samtranslator/internal) if possible.**  This ensures we don't increase our \"public\" library interface and cause unnecessary breakages to consumers. While Python doesn't have private access modifiers, we assume anything [by convention private](https://peps.python.org/pep-0008/#descriptive-naming-styles) or under `internal` to be internal code, not bound by typical expectations of backward compatibility.\n\nCode conventions\n----------------\n\nPlease follow these code conventions when making your changes. This will\nalign your code to the same conventions used in rest of the package and\nmake it easier for others to read/understand your code. Some of these\nconventions are best practices that we have learnt over time.\n\n-   Don\\'t write any code in `__init__.py` file unless there is a really strong reason.\n-   Module-level logger variable must be named as `LOG`\n-   If your method wants to report a failure, it *must* raise a custom\n    exception. Built-in Python exceptions like `TypeError`, `KeyError`\n    are raised by Python interpreter and usually signify a bug in your\n    code. Your method must not explicitly raise these exceptions because\n    the caller has no way of knowing whether it came from a bug or not.\n    Custom exceptions convey are must better at conveying the intent and\n    can be handled appropriately by the caller. In HTTP lingo, custom\n    exceptions are equivalent to 4xx (user\\'s fault) and built-in\n    exceptions are equivalent to 5xx (Service Fault)\n-   Don't use `*args` or `**kwargs` unless there is a really strong\n    reason to do so. You must explain the reason in great detail in\n    docstrings if you were to use them.\n-   Do not catch the broader `Exception`, unless you have a really\n    strong reason to do. You must explain the reason in great detail in\n    comments.\n\n## Making schema changes\n\nThe AWS SAM specification includes a JSON schema (see https://github.com/aws/serverless-application-model/discussions/2645). All test templates must validate against it.\n\nTo add new properties, do the following:\n\n1. Add the property to the relevant resource schema under [`samtranslator/internal/schema_source`](https://github.com/aws/serverless-application-model/tree/develop/samtranslator/internal/schema_source) (e.g. [`samtranslator/internal/schema_source/aws_serverless_function.py`](https://github.com/aws/serverless-application-model/blob/develop/samtranslator/internal/schema_source/aws_serverless_function.py) for `AWS::Serverless::Function`).\n2. You can leave out the assignement part; it adds documentation to the schema properties. The team will take care of documentation updates once code changes are merged. Typically we update documentation by running `make update-schema-data`.\n3. Run `make schema`.\n\nProfiling\n---------\n\nInstall snakeviz: `pip install snakeviz`\n\n```bash\npython -m cProfile -o sam_profile_results bin/sam-translate.py translate --template-file=tests/translator/input/alexa_skill.yaml --output-template=cfn-template.json\nsnakeviz sam_profile_results\n```\n\nVerifying transforms\n--------------------\n\nIf you make changes to the transformer and want to verify the resulting CloudFormation template works as expected, you can transform your SAM template into a CloudFormation template using the following process:\n\n```bash\n# Optional: You only need to run the package command in certain cases; e.g. when your CodeUri specifies a local path\n# Replace MY_TEMPLATE_PATH with the path to your template and MY_S3_BUCKET with an existing S3 bucket\naws cloudformation package --template-file MY_TEMPLATE_PATH/template.yaml --output-template-file output-template.yaml --s3-bucket MY_S3_BUCKET\n\n# Transform your SAM template into a CloudFormation template\n# Replace \"output-template.yaml\" if you didn't run the package command above or specified a different path for --output-template-file\nbin/sam-translate.py --template-file=output-template.yaml\n\n# Deploy your transformed CloudFormation template\n# Replace MY_STACK_NAME with a unique name each time you deploy\naws cloudformation deploy --template-file cfn-template.json --capabilities CAPABILITY_NAMED_IAM --stack-name MY_STACK_NAME\n```\n"
        },
        {
          "name": "HOWTO.md",
          "type": "blob",
          "size": 6.72265625,
          "content": "# How to create serverless applications using AWS SAM\nThe AWS Serverless Application Model (AWS SAM) allows you to easily create and \nmanage resources used in your serverless application using AWS CloudFormation. \nYou can define your serverless application as a SAM template - a JSON or YAML \nconfiguration file that describes Lambda function, API endpoints and\nother resources in your application. Using a variety of [nifty commands](https://github.com/awslabs/aws-sam-cli#usage), you upload this \ntemplate to CloudFormation, which in turn creates all the individual resources and\ngroups them into a *CloudFormation Stack* for ease of management. \nWhen you update your SAM template, you will re-deploy the changes to \nthis stack. AWS CloudFormation will take care of updating the individual\nresources for you.\n\n\nThe remainder of this document explains how to write SAM templates and \ndeploy them via AWS CloudFormation. \n\n## Getting started with the SAM Template\nCheck out the [latest specification](versions/2016-10-31.md) for details on how to write a SAM template\n\n\nYou could also use the [aws-sam-cli](https://github.com/awslabs/aws-sam-cli) to get started \n\n```shell\n$ sam init --runtime python3.8\n```\n## Packing Artifacts\nBefore you can deploy a SAM template, you should first upload your Lambda \nfunction code zip and API's OpenAPI File to S3. Set the `CodeUri` and \n`DefinitionUri` properties to the S3 URI of uploaded files. You\ncan choose to do this manually or use `aws cloudformation package` [CLI command](http://docs.aws.amazon.com/cli/latest/reference/cloudformation/package.html) to automate the task of uploading local artifacts to S3 bucket. The command returns a copy of your template, replacing references to local artifacts with S3 location where the command uploaded your artifacts. \n\nTo use this command, set `CodeUri` property to be the path to your \nsource code folder/zip/jar and `DefinitionUri` property to be a path to \nyour OpenAPI file, as shown in the example below \n\n```YAML\nMyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n        CodeUri: ./code\n        ...\n\nMyApi:\n    Type: AWS::Serverless::Api\n    Properties:\n        DefinitionUri: ./specs/swagger.yaml\n        ...\n```\n\nRun the following command to upload your artifacts to S3 and output a \npackaged template that can be readily deployed to CloudFormation.\n```bash\n$ aws cloudformation package \\\n    --template-file /path_to_template/template.yaml \\\n    --s3-bucket bucket-name \\\n    --s3-prefix appname/branchname/version \\\n    --output-template-file packaged-template.yaml\n```\n\nOr using the aws-sam-cli\n\n```bash\n$ sam package \\\n    --template-file /path_to_template/template.yaml \\\n    --s3-bucket bucket-name \\\n    --s3-prefix appname/branchname/version \\\n    --output-template-file packaged-template.yaml\n```\n\n\n\nThe packaged template will look something like this:\n```YAML\nMyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n        CodeUri: s3://<mybucket>/<my-zipfile-path>\n        ...\n\nMyApi:\n    Type: AWS::Serverless::Api\n    Properties:\n        DefinitionUri: s3://<mybucket>/<my-openapi-file-path>\n        ...\n```\n\n\n## Deploying to AWS CloudFormation\nSAM template is deployed to AWS CloudFormation by [creating a changeset](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets-create.html)\nusing the SAM template followed by [executing the changeset](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets-execute.html). \nThink of a ChangeSet as a diff between your current stack template and the new template that you are deploying. After you create a ChangeSet, you have the opportunity to examine the diff before executing it. Both the AWS Console and AWS CLI provide commands to create and execute a changeset. \n\nAlternatively, you can use `aws cloudformation deploy` CLI command to deploy the SAM template. Under the hood it creates and executes a changeset and waits until the deployment completes. It also prints debugging hints when the deployment fails. Run the following command to deploy the packaged template to a stack called `my-new-stack`:\n\n```bash\n$ aws cloudformation deploy \\\n    --template-file /path_to_template/packaged-template.yaml \\\n    --stack-name my-new-stack \\\n    --capabilities CAPABILITY_IAM\n```\n\nOr using aws-sam-cli \n\n```bash\n$ sam deploy \\\n    --template-file /path_to_template/packaged-template.yaml \\\n    --stack-name my-new-stack \\\n    --capabilities CAPABILITY_IAM\n```\n\nRefer to the [cloudformation documentation](http://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy/index.html) and [samcli](https://github.com/awslabs/aws-sam-cli) for more details.\n\n## Using Intrinsic Functions\nCloudFormation provides handy functions that you can use to generate values at runtime. These are called [Intrinsic Functions](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html). Since SAM is deployed using CloudFormation, you can use these intrinsic functions within SAM as well. Here are some examples:\n\n#### Dynamically set S3 location of Lambda function code zip\n```YAML\nTransform: 'AWS::Serverless-2016-10-31'\n\n# Parameters are CloudFormation features to pass input\n# to your template when you create a stack\nParameters:\n    BucketName:\n        Type: String\n    CodeKey:\n        Type: String\n\nResources:\n    MyFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            Handler: index.handler\n            Runtime: nodejs12.x\n            CodeUri:\n                # !Ref function allows you to fetch value \n                # of parameters and other resources at runtime\n                Bucket: !Ref BucketName\n                Key: !Ref CodeKey\n```\n\n#### Generate a different function name for each stack\n\n```YAML\nTransform: 'AWS::Serverless-2016-10-31'\n\n# Parameters are CloudFormation features to pass input\n# to your template when you create a stack\nParameters:\n    FunctionNameSuffix:\n        Type: String\n    \nResources:\n    MyFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n\n            # !Sub performs string substitution\n            FunctionName: !Sub \"mylambda-${FunctionNameSuffix}\"\n\n            Handler: index.handler\n            Runtime: nodejs12.x\n            CodeUri: s3://bucket/key\n```\n\n### Caveats:\n#### ImportValue is partially supported\n[`ImportValue`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html) allows one stack to refer to the value of properties from another stack. ImportValue is supported on most properties, except the very few that SAM needs to parse. The following properties are *not* supported:\n\n- `RestApiId` of `AWS::Serverless::Function`\n- `Policies` of `AWS::Serverless::Function`\n- `StageName` of `AWS::Serverless::Api`\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "INTEGRATION_TESTS.md",
          "type": "blob",
          "size": 4.5048828125,
          "content": "# AWS SAM integration tests\n\nThese tests run SAM against AWS services by translating SAM templates, deploying them to Cloud Formation and verifying the resulting objects.\n\nThey must run successfully under Python 3.\n\n## Run the tests\n\n### Prerequisites\n\n#### User and rights\n\nAn Internet connection and an active AWS account are required to run the tests as they will interact with AWS services (most notably Cloud Formation) to create and update objects (Stacks, APIs, ...).\n\nAWS credentials must be configured either through a [credentials file](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html) or [environment variables](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html)\n\nThe user running the tests must have the following roles:\n\n```\nAmazonSQSFullAccess\nAmazonSNSFullAccess\nAmazonAPIGatewayAdministrator\nAWSKeyManagementServiceFullAccess\nAWSStepFunctionsFullAccess\n```\n\nIf you plan on running the full tests suite, ensure that the user credentials you are running the tests with have a timeout of at least 30 minutes as the full suite can take more than 20 minutes to execute.\n\n#### Initialize the development environment\n\nIf you haven't done so already, run the following command in a terminal at the root of the repository to initialize the development environment:\n\n```\nmake init\n```\n\n### Setting up a companion stack\n\nTo run the tests, a companion stack first needs to be created. This stack houses some resources that are required by the tests, such as an S3 bucket.\n\n```\nmake prepare-companion-stack\n```\n\n### Running all the tests\n\nFrom the root of the repository, run:\n\n```\nmake integ-test\n```\n\n### Running a specific test file\n\nFrom the command line, run:\n\n```\npytest --no-cov path/to/the/test_file.py\n```\n\nFor example, from the root of the project:\n\n```sh\npytest --no-cov integration/single/test_basic_api.py\n```\n\n### Running a specific test\n\nFrom the command line, run:\n\n```\npytest --no-cov path/to/the/test_file.py::test_class::test_method\n```\n\nFor example, from the root of the project:\n\n```sh\npytest --no-cov integration/single/test_basic_api.py::TestBasicApi::test_basic_api\n```\n\n*We don't measure coverage for integration tests.*\n\n## Write a test\n\n1. Add your test templates to the `integration/resources/templates` single or combination folder.\n2. Write an expected json file for all the expected resources and add it to the `integration/resources/expected`.\n3. (Optional) Add the resource files (zip, json, etc.) to `integration/resources/code` and update the dictionaries in `integration/helpers/file_resources.py`.\n4. Write and add your python test code to the `integration` single or combination folder.\n5. Run it!\n\n## Skip tests for a specific service in a region\n\n1. Add the service you want to skip to the `integration/config/region_service_exclusion.yaml` under the region\n2. Add the @skipIf decorator to the test with the service name, take 'XRay' for example:\n```@skipIf(current_region_does_not_support('XRay'), 'XRay is not supported in this testing region')```\n\n## Directory structure\n\n### Helpers\n\nCommon classes and tools used by tests.\n\n```\n+-- helpers/\n|   +-- deployer           Tools to deploy to Cloud Formation\n|   +-- base_test.py       Common class from which all test classes inherit\n|   +-- file_resources.py  Files to upload to S3\n|   +-- resource.py        Helper functions to manipulate resources\n|   +-- template.py        Helper functions to translate the template\n```\n\n`base_test.py` contains `setUpClass` and `tearDownClass` methods to respectively upload and clean the `file_resources.py` resources (upload the files to a new S3 bucket, empty and delete this bucket).\n\n### Resources\n\nFile resources used by tests.\n\n```\n+-- resources\n|   +-- code               Files to upload to S3\n|   +-- expected           Files describing the expected created resources\n|   +-- templates          Source SAM templates to translate and deploy\n```\n\nThe matching *expected* and *template* files should have the same name.\n\nFor example, the `test_basic_api` test in the class `tests_integ/single/test_basic_api.py` takes `templates/single/basic_api.yaml` SAM template as input and verifies its result against `expected/single/basic_api.json`.\n\n### Single\n\nBasic tests which interact with only one service should be put here.\n\n### Combination\n\nTests which interact with multiple services should be put there.\n\n### Tmp\n\nThis directory is created on the first run and contains temporary and intermediary files used by the tests: sam templates with substituted variable values, translated temporary cloud formation templates, ...\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.119140625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.6201171875,
          "content": "# https://packaging.python.org/en/latest/guides/using-manifest-in/\n# Only include files that are required in pypi source distribution.\n\ninclude LICENSE\ninclude requirements/base.txt\ninclude requirements/dev.txt\nrecursive-include samtranslator/validator/sam_schema *.json\ninclude samtranslator/policy_templates_data/policy_templates.json\ninclude samtranslator/policy_templates_data/schema.json\ninclude samtranslator/model/connector_profiles/profiles.json\ninclude samtranslator/internal/data/aws_managed_policies.json\ninclude samtranslator/internal/schema_source/sam-docs.json\ninclude README.md\ninclude THIRD_PARTY_LICENSES\n\nprune tests\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.9482421875,
          "content": "target:\n\t$(info ${HELP_MESSAGE})\n\t@exit 0\n\ninit:\n\tpip install -e '.[dev]'\n\ntest:\n\tAWS_DEFAULT_REGION=us-east-1 pytest --cov samtranslator --cov-report term-missing --cov-fail-under 95 -n auto tests/\n\ntest-fast:\n\tpytest -x --cov samtranslator --cov-report term-missing --cov-fail-under 95 -n auto tests/\n\ntest-cov-report:\n\tpytest --cov samtranslator --cov-report term-missing --cov-report html --cov-fail-under 95 -n auto tests/\n\topen htmlcov/index.html &> /dev/null || true\n\ninteg-test:\n\tpytest --no-cov integration/\n\nformat:\n\tblack setup.py samtranslator tests integration bin schema_source\n\tbin/transform-test-error-json-format.py --write tests/translator/output/error_*.json\n\tbin/json-format.py --write tests integration samtranslator/policy_templates_data\n\tbin/yaml-format.py --write tests\n\tbin/yaml-format.py --write integration --add-test-metadata\n\nblack:\n\t$(warning `make black` is deprecated, please use `make format`)\n\t# sleep for 5 seconds so the message can be seen.\n\tsleep 5\n\tmake format\n\nformat-check:\n\t# Checking latest schema was generated (run `make schema` if this fails)\n\tmkdir -p .tmp\n\tpython -m samtranslator.internal.schema_source.schema --sam-schema .tmp/sam.schema.json --cfn-schema schema_source/cloudformation.schema.json --unified-schema .tmp/schema.json\n\tdiff -u schema_source/sam.schema.json .tmp/sam.schema.json\n\tdiff -u samtranslator/schema/schema.json .tmp/schema.json\n\tblack --check setup.py samtranslator tests integration bin schema_source\n\tbin/transform-test-error-json-format.py --check tests/translator/output/error_*.json\n\tbin/json-format.py --check tests integration samtranslator/policy_templates_data\n\tbin/yaml-format.py --check tests\n\tbin/yaml-format.py --check integration --add-test-metadata\n\nblack-check:\n\t$(warning `make black-check` is deprecated, please use `make format-check`)\n\t# sleep for 5 seconds so the message can be seen.\n\tsleep 5\n\tmake format-check\n\nlint:\n\truff check samtranslator bin schema_source integration tests\n\t# mypy performs type check\n\tmypy --strict samtranslator bin schema_source\n\t# cfn-lint to make sure generated CloudFormation makes sense\n\tbin/run_cfn_lint.sh\n\nlint-fix:\n\truff check --fix samtranslator bin schema_source integration tests\n\nprepare-companion-stack:\n\tpytest -v --no-cov integration/setup -m setup\n\nfetch-schema-data:\n\tmkdir -p .tmp\n\n\t# aws-cdk updated where they store the cfn doc json files. See https://github.com/aws/aws-cdk/blob/main/packages/%40aws-cdk/cfnspec/README.md\n\tbin/git_lfs_download.sh \"https://raw.githubusercontent.com/cdklabs/awscdk-service-spec/main/sources/CloudFormationDocumentation/CloudFormationDocumentation.json\"\n\n\tcurl -o .tmp/cloudformation.schema.json https://raw.githubusercontent.com/awslabs/goformation/master/schema/cloudformation.schema.json\n\nupdate-schema-data:\n\t# Parse docs\n\tbin/parse_cdk_cfn_docs.py < .tmp/cfn-docs.json > schema_source/cloudformation-docs.json\n\n\t# Add CloudFormation docs to CloudFormation schema\n\tpython bin/add_docs_cfn_schema.py --schema .tmp/cloudformation.schema.json --docs schema_source/cloudformation-docs.json > schema_source/cloudformation.schema.json\n\nschema:\n\tpython -m samtranslator.internal.schema_source.schema --sam-schema schema_source/sam.schema.json --cfn-schema schema_source/cloudformation.schema.json --unified-schema samtranslator/schema/schema.json\n\n# Update all schema data and schemas\nschema-all: fetch-schema-data update-schema-data schema\n\n# Command to run everytime you make changes to verify everything works\ndev: test\n\n# Verifications to run before sending a pull request\npr: format-check lint init dev\n\nclean:\n\trm -rf .tmp\n\ndefine HELP_MESSAGE\n\nUsage: $ make [TARGETS]\n\nTARGETS\n\tinit        Initialize and install the requirements and dev-requirements for this project.\n\ttest        Run the Unit tests.\n\tinteg-test  Run the Integration tests.\n\tdev         Run all development tests after a change.\n\tpr          Perform all checks before submitting a Pull Request.\n\tprepare-companion-stack    Create or update the companion stack for running integration tests.\n\nendef\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.099609375,
          "content": "serverless-application-model\nCopyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7392578125,
          "content": "# AWS SAM transform\n\n[![Tests](https://github.com/aws/serverless-application-model/actions/workflows/build.yml/badge.svg)](https://github.com/aws/serverless-application-model/actions/workflows/build.yml)\n[![Update schema](https://github.com/aws/serverless-application-model/actions/workflows/schema.yml/badge.svg)](https://github.com/aws/serverless-application-model/actions/workflows/schema.yml)\n[![PyPI](https://img.shields.io/pypi/v/aws-sam-translator?label=PyPI)](https://pypi.org/project/aws-sam-translator/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aws-sam-translator?label=Python)](https://pypi.org/project/aws-sam-translator/)\n[![Contribute with Gitpod](https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod)](https://gitpod.io/#https://github.com/aws/serverless-application-model.git)\n\nThe [AWS Serverless Application Model](https://aws.amazon.com/serverless/sam/) (AWS SAM) transform is a [AWS CloudFormation macro](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html) that transforms [SAM templates](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy.html) into [CloudFormation templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html).\n\nTo use the SAM transform, add `AWS::Serverless-2016-10-31` to the [`Transform` section](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html) of your CloudFormation template.\n\nBenefits of using the SAM transform include:\n\n- Built-in best practices and sane defaults.\n- Local testing and debugging with the [AWS SAM CLI](https://github.com/aws/aws-sam-cli).\n- Extension of the CloudFormation template syntax.\n\n## Getting started\n\nSave the following as `template.yaml`:\n\n```yaml\nTransform: AWS::Serverless-2016-10-31\nResources:\n  MyFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: nodejs18.x\n      Handler: index.handler\n      InlineCode: |\n        exports.handler = async (event) => {\n          console.log(event);\n        }\n```\n\nAnd deploy it with the [SAM CLI](https://github.com/aws/aws-sam-cli):\n\n```bash\nsam sync --stack-name sam-app\n```\n\nThe [`AWS::Serverless::Function`](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html) resource will create a [AWS Lambda](https://aws.amazon.com/lambda/) function that logs [events](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-concepts.html#gettingstarted-concepts-event) it receives.\n\nUnder the hood, the template is transformed into the JSON equivalent of the following CloudFormation template:\n\n```yaml\nResources:\n  MyFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        ZipFile: |\n          exports.handler = async (event) => {\n            console.log(event);\n          }\n      Handler: index.handler\n      Role: !GetAtt MyFunctionRole.Arn\n      Runtime: nodejs18.x\n      Tags:\n        - Key: lambda:createdBy\n          Value: SAM\n  MyFunctionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Tags:\n        - Key: lambda:createdBy\n          Value: SAM\n```\n\nFor a more thorough introduction, see the [this tutorial](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started-hello-world.html) in the [Developer Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html).\n\n## Contributing\n\n### Setting up development environment\n\nYou'll need to have Python 3.8+ installed.\n\nCreate a [virtual environment](https://docs.python.org/3/library/venv.html):\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\nSet up dependencies:\n\n```bash\nmake init\n```\n\nRun tests:\n\n```bash\nmake pr\n ```\n \nSee [`DEVELOPMENT_GUIDE.md`](DEVELOPMENT_GUIDE.md) for further development instructions, and [`CONTRIBUTING.md`](CONTRIBUTING.md) for the contributing guidelines.\n\n## Getting help\n\nThe best way to interact with the team is through GitHub. You can either [create an issue](https://github.com/aws/serverless-application-model/issues/new/choose) or [start a discussion](https://github.com/aws/serverless-application-model/discussions).\n\nYou can also join the [`#samdev` channel](https://join.slack.com/t/awsdevelopers/shared_invite/zt-yryddays-C9fkWrmguDv0h2EEDzCqvw) on Slack.\n\n## Learn more\n\n### Workshops and tutorials\n\n- [The Complete AWS SAM Workshop](https://catalog.workshops.aws/complete-aws-sam)\n- [AWS Serverless Developer Experience Workshop](https://catalog.us-east-1.prod.workshops.aws/workshops/9a27e484-7336-4ed0-8f90-f2747e4ac65c/en-US)\n- [Deploying a \"Hello, World!\" application](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started-hello-world.html)\n- [Testing in the cloud using the SAM CLI](https://aws.amazon.com/blogs/compute/accelerating-serverless-development-with-aws-sam-accelerate/)\n\n### Documentation\n\n- [SAM Developer Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html)\n- [SAM template specification](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification.html)\n- [SAM connectors](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/managing-permissions-connectors.html)\n- [SAM policy templates](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html)\n"
        },
        {
          "name": "THIRD_PARTY_LICENSES",
          "type": "blob",
          "size": 1.19921875,
          "content": "The AWS Serverless Application Model includes the following third-party software/licensing:\n\n** py27hash; version 1.0.2 -- https://pypi.org/project/py27hash/\nCopyright (c) 2020 NeuML LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n----------------\n"
        },
        {
          "name": "aws_sam_introduction.png",
          "type": "blob",
          "size": 125.6640625,
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.283203125,
          "content": "\n# https://mypy.readthedocs.io/en/stable/config_file.html#config-file-format\n\n[mypy]\nwarn_return_any=True\nwarn_unused_configs=True\nno_implicit_optional=True\nwarn_redundant_casts=True\nwarn_unused_ignores=True\nwarn_unreachable=True\n\n[mypy-jsonschema,jsonschema.*]\nignore_missing_imports=True\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.2939453125,
          "content": "[tool.black]\nline-length = 120\ntarget_version = ['py38', 'py39', 'py310']\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.tox\n    | \\.venv\n    | build\n    | dist\n    | pip-wheel-metadata\n    | examples\n  )/\n)\n'''\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 1.146484375,
          "content": "[pytest]\n# Fail if coverage falls below 95%\n# NOTE: If debug breakpoints aren't working, comment out the code coverage line below\naddopts = --cov samtranslator --cov-report term-missing --cov-fail-under 95 --reruns 1\ntestpaths = tests\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    setup: setup companion stack\n    teardown: teardown companion stack\nlog_cli = 1\nlog_cli_level = INFO\nfilterwarnings =\n    error\n    # From our own tests\n    ignore:__init__ is deprecated and will be removed in a future release:DeprecationWarning\n    ignore:deprecated_function is deprecated and will be removed in a future release, please use replacement_function:DeprecationWarning\n    # https://github.com/pytest-dev/pytest-xdist/issues/825#issuecomment-1292450429\n    ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning\n    # Pytest warnings\n    ignore::pytest.PytestUnraisableExceptionWarning\n    # https://github.com/urllib3/urllib3/blob/main/src/urllib3/poolmanager.py#L313\n    ignore::DeprecationWarning:urllib3.*:\n    # https://github.com/boto/boto3/issues/3889\n    ignore:datetime.datetime.utcnow\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 1.5498046875,
          "content": "# black formatter takes care of the line length\nline-length = 999\n\n# Mininal python version we support is 3.8\ntarget-version = \"py38\"\n\nlint.select = [\n    \"E\",  # pycodestyle\n    \"W\",  # pycodestyle\n    \"F\",  # Pyflakes\n    \"PL\", # pylint\n    \"I\", # isort\n    \"B\", # flake8-bugbear\n    \"A\", # flake8-builtins\n    \"S\", # flake8-bandit\n    \"ISC\", # flake8-implicit-str-concat\n    \"ICN\", # flake8-import-conventions\n    \"PIE\", # flake8-pie\n    \"Q\", # flake8-quotes\n    \"RET\", # flake8-return\n    \"SIM\", # flake8-simplify\n    \"TID\", # flake8-tidy-imports\n    \"RUF\", # Ruff-specific rules\n    \"YTT\", # flake8-2020\n    \"UP\", # pyupgrade\n    \"C4\", # flake8-comprehensions\n    \"PTH\", # flake8-use-pathlib\n    \"G\", # flake8-logging-format\n    \"INP\", # flake8-no-pep420\n    \"T20\", # flake8-print\n]\n\nlint.ignore = [\n    \"UP006\", # https://github.com/charliermarsh/ruff/pull/4427\n    \"UP007\", # https://github.com/charliermarsh/ruff/pull/4427\n    # Mutable class attributes should be annotated with `typing.ClassVar`\n    # Too many violations\n    \"RUF012\",\n    # Logging statement uses f-string\n    \"G004\",\n]\n\n[lint.per-file-ignores]\n# python scripts in bin/ needs some python path configurations before import\n\"bin/*.py\" = [\n    # E402: module-import-not-at-top-of-file\n    \"E402\",\n    # S603: `subprocess` call: check for execution of untrusted input\n    # these are dev tools and do not have risks of malicious inputs.\n    \"S603\",\n    # T201 `print` found\n    # print() is allowed in bin/ as they are dev tools.\n    \"T201\",\n]\n\n[lint.pylint]\nmax-args = 6  # We have many functions reaching 6 args\n"
        },
        {
          "name": "samtranslator",
          "type": "tree",
          "content": null
        },
        {
          "name": "schema_source",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.103515625,
          "content": "[metadata]\ndescription_file = README.md\nlicense_files =\n    LICENSE*\n    NOTICE*\n    THIRD_PARTY_LICENSES\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.2744140625,
          "content": "# -*- coding: utf-8 -*-\n#\n# setup.py\n#\n# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n\"\"\"\nAWS SAM Serverless Application Model\n\"\"\"\nimport io\nimport os\nimport re\n\nfrom setuptools import setup, find_packages\n\n\ndef read(*filenames, **kwargs):\n    encoding = kwargs.get(\"encoding\", \"utf-8\")\n    sep = kwargs.get(\"sep\", os.linesep)\n    buf = []\n    for filename in filenames:\n        with io.open(filename, encoding=encoding) as f:\n            buf.append(f.read())\n    return sep.join(buf)\n\n\ndef read_version():\n    content = read(os.path.join(os.path.dirname(__file__), \"samtranslator\", \"__init__.py\"))\n    return re.search(r\"__version__ = \\\"([^']+)\\\"\", content).group(1)\n\n\ndef read_requirements(req=\"base.txt\"):\n    content = read(os.path.join(\"requirements\", req))\n    return [line for line in content.split(os.linesep) if not line.strip().startswith(\"#\")]\n\n\nsetup(\n    name=\"aws-sam-translator\",\n    version=read_version(),\n    description=\"AWS SAM Translator is a library that transform SAM templates into AWS CloudFormation templates\",\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    author=\"Amazon Web Services\",\n    author_email=\"aws-sam-developers@amazon.com\",\n    url=\"https://github.com/awslabs/serverless-application-model\",\n    license=\"Apache License 2.0\",\n    # Exclude all but the code folders\n    packages=find_packages(\n        exclude=(\n            \"bin\",\n            \"bin.*\",\n            \"docs\",\n            \"examples\",\n            \"integration\",\n            \"integration.*\",\n            \"schema_source\",\n            \"schema_source.*\",\n            \"tests\",\n            \"tests.*\",\n            \"versions\",\n        )\n    ),\n    license_files=(\n        \"LICENSE\",\n        \"NOTICE\",\n        \"THIRD_PARTY_LICENSES\",\n    ),\n    python_requires=\">=3.8, <=4.0, !=4.0\",\n    install_requires=read_requirements(\"base.txt\"),\n    include_package_data=True,\n    extras_require={\"dev\": read_requirements(\"dev.txt\")},\n    keywords=\"AWS SAM Serverless Application Model\",\n    classifiers=[\n        # https://pypi.org/classifiers/\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Environment :: Other Environment\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"Topic :: Utilities\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}