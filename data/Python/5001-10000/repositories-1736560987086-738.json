{
  "metadata": {
    "timestamp": 1736560987086,
    "page": 738,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PrefectHQ/marvin",
      "stars": 5410,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.9921875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# All node modules in any directory\nnode_modules/\n_docs/\n\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n/sandbox/*\n!/sandbox/pyproject.toml\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n.pytest_cache/*\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n.DS_Store\n\n# ruff\n.ruff_cache/**/*\n\n# VS Code\n.vscode/\n\nlocal_examples/\n\n# Chroma\n.chroma/\n\n# Marvin\nsrc/marvin/_version.py\n\n# Prefect\n.prefect/\n.prefect/*.json\n.prefectignore\n\n# uv\nuv.lock\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1708984375,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.8\n    hooks:\n      - id: ruff-format\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2568359375,
          "content": "# Things to always exclude\nglobal-exclude .git*\nglobal-exclude .ipynb_checkpoints\nglobal-exclude *.py[co]\nglobal-exclude __pycache__/**\n\n# Top-level Config\ninclude LICENSE\ninclude MANIFEST.in\n\n# Prompt templates\ngraft src/marvin/programs\ngraft src/marvin/prompts\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.0458984375,
          "content": "<p align=\"center\">\n  <img src=\"docs/assets/images/heroes/it_hates_me_hero.png\" style=\"width: 95%; height: auto;\"/>\n</p>\n\n[![PyPI version](https://badge.fury.io/py/marvin.svg)](https://badge.fury.io/py/marvin)\n[![Docs](https://img.shields.io/badge/docs-askmarvin.ai-blue)](https://www.askmarvin.ai)\n[![Twitter Follow](https://img.shields.io/twitter/follow/ControlFlowAI?style=social)](https://twitter.com/ControlFlowAI)\n[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20Marvin%20Guru-006BFF)](https://gurubase.io/g/marvin)\n\n# Marvin\n\n### The AI engineering toolkit\n\nMarvin is a lightweight AI toolkit for building natural language interfaces that are reliable, scalable, and easy to trust.\n\nEach of Marvin's tools is simple and self-documenting, using AI to solve common but complex challenges like entity extraction, classification, and generating synthetic data. Each tool is independent and incrementally adoptable, so you can use them on their own or in combination with any other library. Marvin is also multi-modal, supporting both image and audio generation as well as using images as inputs for extraction and classification.\n\nMarvin is for developers who care more about _using_ AI than _building_ AI, and we are focused on creating an exceptional developer experience. Marvin users should feel empowered to bring tightly-scoped \"AI magic\" into any traditional software project with just a few extra lines of code.\n\nMarvin aims to merge the best practices for building dependable, observable software with the best practices for building with generative AI into a single, easy-to-use library. It's a serious tool, but we hope you have fun with it.\n\nMarvin is open-source, free to use, and made with 💙 by the team at [Prefect](https://www.prefect.io/).\n\n## Installation\n\nInstall the latest version with `pip`:\n\n```bash\npip install marvin -U\n```\n\nTo verify your installation, run `marvin version` in your terminal.\n\n## Tools\n\nMarvin consists of a variety of useful tools, all designed to be used independently. Each one represents a common LLM use case, and packages that power into a simple, self-documenting interface.\n\n### General\n\n🦾 [Write custom AI-powered functions](https://askmarvin.ai/docs/text/functions) without source code\n\n### Text\n\n🏷️ [Classify text](https://askmarvin.ai/docs/text/classification) into categories\n\n🔍 [Extract structured entities](https://askmarvin.ai/docs/text/extraction) from text\n\n🪄 [Transform text](https://askmarvin.ai/docs/text/transformation) into structured data\n\n✨ [Generate synthetic data](https://askmarvin.ai/docs/text/generation) from a schema\n\n### Images\n\n🖼️ [Create images](https://askmarvin.ai/docs/images/generation) from text or functions\n\n📝 [Describe images](https://askmarvin.ai/docs/vision/captioning) with natural language\n\n🏷️ [Classify images](https://askmarvin.ai/docs/vision/classification) into categories\n\n🔍 [Extract structured entities](https://askmarvin.ai/docs/vision/extraction) from images\n\n🪄 [Transform images](https://askmarvin.ai/docs/vision/transformation) into structured data\n\n### Audio\n\n💬 [Generate speech](https://askmarvin.ai/docs/audio/speech) from text or functions\n\n✍️ [Transcribe speech](https://askmarvin.ai/docs/audio/transcription) from recorded audio\n\n🎙️ [Record users](https://askmarvin.ai/docs/audio/recording) continuously or as individual phrases\n\n### Video\n\n🎙️ [Record video](https://askmarvin.ai/docs/video/recording) continuously\n\n### Interaction\n\n🤖 [Chat with assistants](https://askmarvin.ai/docs/interactive/assistants) and use custom tools\n\n🧭 [Build applications](https://askmarvin.ai/docs/interactive/applications) that manage persistent state\n\n# Quickstart\n\nHere's a whirlwind tour of a few of Marvin's main features. For more information, [check the docs](https://askmarvin.ai/welcome/what_is_marvin/)!\n\n## 🏷️ Classify text\n\nMarvin can `classify` text using a set of labels:\n\n```python\nimport marvin\n\nmarvin.classify(\n    \"Marvin is so easy to use!\",\n    labels=[\"positive\", \"negative\"],\n)\n\n#  \"positive\"\n```\n\nLearn more about classification [here](https://askmarvin.ai/docs/text/classification).\n\n## 🔍 Extract structured entities\n\nMarvin can `extract` structured entities from text:\n\n```python\nimport pydantic\nimport marvin\n\nclass Location(pydantic.BaseModel):\n    city: str\n    state: str\n\n\nmarvin.extract(\"I moved from NY to CHI\", target=Location)\n\n# [\n#     Location(city=\"New York\", state=\"New York\"),\n#     Location(city=\"Chicago\", state=\"Illinois\")\n# ]\n```\n\nAlmost all Marvin functions can be given `instructions` for more control. Here we extract only monetary values:\n\n```python\nmarvin.extract(\n    \"I paid $10 for 3 tacos and got a dollar and 25 cents back.\",\n    target=float,\n    instructions=\"Only extract money\"\n)\n\n#  [10.0, 1.25]\n```\n\nLearn more about entity extraction [here](https://askmarvin.ai/docs/text/extraction).\n\n\n## ✨ Generate data\n\nMarvin can `generate` synthetic data for you, following instructions and an optional schema:\n\n```python\nclass Location(pydantic.BaseModel):\n    city: str\n    state: str\n\n\nmarvin.generate(\n    n=4,\n    target=Location,\n    instructions=\"cities in the United States named after presidents\"\n)\n\n# [\n#     Location(city='Washington', state='District of Columbia'),\n#     Location(city='Jackson', state='Mississippi'),\n#     Location(city='Cleveland', state='Ohio'),\n#     Location(city='Lincoln', state='Nebraska'),\n# ]\n```\n\nLearn more about data generation [here](https://askmarvin.ai/docs/text/generation).\n\n## 🪄 Standardize text by casting to types\n\nMarvin can `cast` arbitrary text to any Python type:\n\n```python\nmarvin.cast(\"one two three\", list[int])\n\n#  [1, 2, 3]\n```\n\nThis is useful for standardizing text inputs or matching natural language to a schema:\n\n```python\nclass Location(pydantic.BaseModel):\n    city: str\n    state: str\n\n\nmarvin.cast(\"The Big Apple\", Location)\n\n# Location(city=\"New York\", state=\"New York\")\n```\n\nFor a class-based approach, Marvin's `@model` decorator can be applied to any Pydantic model to let it be instantiated from text:\n\n```python\n@marvin.model\nclass Location(pydantic.BaseModel):\n    city: str\n    state: str\n\n\nLocation(\"The Big Apple\")\n\n# Location(city=\"New York\", state=\"New York\")\n```\n\nLearn more about casting to types [here](https://askmarvin.ai/docs/text/transformation).\n\n## 🦾 Build AI-powered functions\n\nMarvin functions let you combine any inputs, instructions, and output types to create custom AI-powered behaviors... without source code. These functions can go well beyond the capabilities of `extract` or `classify` and are ideal for complex natural language processing or mapping combinations of inputs to outputs.\n\n```python\n@marvin.fn\ndef sentiment(text: str) -> float:\n    \"\"\"\n    Returns a sentiment score for `text`\n    between -1 (negative) and 1 (positive).\n    \"\"\"\n\nsentiment(\"I love working with Marvin!\") # 0.8\nsentiment(\"These examples could use some work...\") # -0.2\n```\n\nMarvin functions look exactly like regular Python functions, except that you don't have to write any source code. When these functions are called, an AI interprets their description and inputs and generates the output.\n\nNote that Marvin does NOT work by generating or executing source code, which would be unsafe for most use cases. Instead, it uses the LLM itself as a \"runtime\" to predict function outputs. That's actually the source of its power: Marvin functions can handle complex use cases that would be difficult or impossible to express as code.\n\nYou can learn more about functions [here](https://www.askmarvin.ai/docs/text/functions/).\n\n## 🖼️ Generate images from text\n\nMarvin can `paint` images from text:\n\n```python\nmarvin.paint(\"a simple cup of coffee, still warm\")\n```\n\n<p align=\"center\">\n  <img src=\"docs/assets/images/docs/images/coffee.png\" style=\"width: 50%; height: auto;\"/>\n</p>\n\nLearn more about image generation [here](https://askmarvin.ai/docs/images/generation).\n\n## 🔍 Converting images to data\n\nIn addition to text, Marvin has support for captioning, classifying, transforming, and extracting entities from images using the GPT-4 vision model:\n\n```python\nmarvin.classify(\n    marvin.Image.from_path(\"docs/images/coffee.png\"),\n    labels=[\"drink\", \"food\"],\n)\n\n# \"drink\"\n```\n\n## Record the user, modify the content, and play it back\n\nMarvin can transcribe speech and generate audio out-of-the-box, but the optional `audio` extra provides utilities for recording and playing audio.\n\n```python\nimport marvin\nimport marvin.audio\n\n# record the user\nuser_audio = marvin.audio.record_phrase()\n\n# transcribe the text\nuser_text = marvin.transcribe(user_audio)\n\n# cast the language to a more formal style\nai_text = marvin.cast(user_text, instructions='Make the language ridiculously formal')\n\n# generate AI speech\nai_audio = marvin.speak(ai_text)\n\n# play the result\nai_audio.play()\n```\n\n# Get in touch!\n\n💡 **Feature idea?** share it in the `#development` channel in [our Discord](https://discord.com/invite/Kgw4HpcuYG).\n\n🐛 **Found a bug?** feel free to [open an issue](https://github.com/PrefectHQ/marvin/issues/new/choose).\n\n👷 **Feedback?** Marvin is under active development, and we'd love to [hear it](https://github.com/PrefectHQ/marvin/discussions).\n"
        },
        {
          "name": "cookbook",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.insiders.yml",
          "type": "blob",
          "size": 0.0498046875,
          "content": "INHERIT: mkdocs.yml\nplugins:\n    meta:\n    typeset:"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 6.568359375,
          "content": "site_name: Marvin\nsite_description: \"The AI Engineering Toolkit\"\nsite_url: https://askmarvin.ai\ndocs_dir: docs\nrepo_url: https://github.com/prefecthq/marvin\n\nnav:\n  - Docs:\n      - welcome/what_is_marvin.md\n\n      - Getting started:\n          - Installation: welcome/installation.md\n          - Tutorial: welcome/tutorial.md\n        # - help/legacy_docs.md\n\n      # - Overview: welcome/overview.md\n\n      - Text:\n          - Transforming to data: docs/text/transformation.md\n          - Extracting entities: docs/text/extraction.md\n          - Classification: docs/text/classification.md\n          - Generating synthetic data: docs/text/generation.md\n          - AI functions: docs/text/functions.md\n\n      - Images:\n          - Creating images: docs/images/generation.md\n          - Generating captions: docs/vision/captioning.md\n          - Transforming to data: docs/vision/transformation.md\n          - Extracting entities: docs/vision/extraction.md\n          - Classification: docs/vision/classification.md\n\n      - Audio:\n          - Generating speech: docs/audio/speech.md\n          - Transcribing speech: docs/audio/transcription.md\n          - Recording audio: docs/audio/recording.md\n\n      - Video:\n          - Recording video: docs/video/recording.md\n\n      - Interactive Tools:\n          - Assistants: docs/interactive/assistants.md\n          - CLI: docs/interactive/cli.md\n          - Applications: docs/interactive/applications.md\n\n      - Configuration:\n          - Settings: docs/configuration/settings.md\n\n  - API reference:\n      - marvin: api_reference/marvin.md\n      - AI modules:\n          - marvin.ai.text: api_reference/ai/text.md\n          - marvin.ai.images: api_reference/ai/images.md\n          - marvin.ai.audio: api_reference/ai/audio.md\n      - Beta AI modules:\n          - marvin.beta.assistants:\n              - marvin.beta.assistants: api_reference/beta/assistants/index.md\n              - marvin.beta.assistants.assistants: api_reference/beta/assistants/assistants.md\n              - marvin.beta.assistants.threads: api_reference/beta/assistants/threads.md\n              - marvin.beta.assistants.runs: api_reference/beta/assistants/runs.md\n              - marvin.beta.assistants.formatting: api_reference/beta/assistants/formatting.md\n          - marvin.beta.applications: api_reference/beta/applications.md\n      - Object schemas:\n          - marvin.types: api_reference/types.md\n      - Settings:\n          - marvin.settings: api_reference/settings.md\n      - Utilities:\n          - marvin.utilities.asyncio: api_reference/utilities/asyncio.md\n          - marvin.utilities.context: api_reference/utilities/context.md\n          - marvin.utilities.images: api_reference/utilities/images.md\n          - marvin.utilities.jinja: api_reference/utilities/jinja.md\n          - marvin.utilities.logging: api_reference/utilities/logging.md\n          - marvin.utilities.openai: api_reference/utilities/openai.md\n          - marvin.utilities.pydantic: api_reference/utilities/pydantic.md\n          - marvin.utilities.python: api_reference/utilities/python.md\n          - marvin.utilities.strings: api_reference/utilities/strings.md\n          - marvin.utilities.testing: api_reference/utilities/testing.md\n          - marvin.utilities.tools: api_reference/utilities/tools.md\n\n  - Cookbook:\n      - Entity deduplication: examples/deduplication.md\n      # - GitHub Activity Digest: examples/github_digest.md\n      - Slackbot: examples/slackbot.md\n      - Python augmented prompts: examples/python_augmented_prompts.md\n      - Being specific about types: examples/being_specific_about_types.md\n      - Examples:\n          - examples/audio_modification.md\n          - examples/xkcd_bird.md\n          - examples/michael_scott_business/michael_scott_business.md\n          - examples/hogwarts_sorting_hat/hogwarts_sorting_hat.md\n          - examples/call_routing.md\n\n  - Community:\n      - community/index.md\n      - Feedback 💙: community/feedback.md\n      - Contributing: community/development_guide.md\n\ntheme:\n  features:\n    - navigation.tabs\n    - navigation.tabs.sticky\n    - navigation.sections\n    - navigation.expand\n    - navigation.path\n    - navigation.indexes\n    - toc.follow\n    - content.code.copy\n    - content.code.select\n    - content.code.annotate\n  palette:\n    primary: blue\n    accent: teal\n  name: material\n  custom_dir: docs/overrides\n  logo: assets/images/logos/askmarvin_mascot.jpeg\n  favicon: assets/images/logos/askmarvin_mascot.jpeg\n\nplugins:\n  - search\n  - markdownextradata\n  - social:\n      cards: !ENV [MKDOCS_SOCIAL_CARDS, false]\n      cards_layout_options:\n        font_family: Inter\n        # background_color: \"#2d6df6\"\n        background_color: \"#181544\" # marvin blue\n  - awesome-pages\n  - autolinks\n  - mkdocstrings:\n      handlers:\n        python:\n          paths: [src]\n          options:\n            show_source: false\n            show_root_heading: false\n            show_root_toc_entry: false\n            show_object_full_path: false\n            show_category_heading: false\n            show_bases: false\n            show_submodules: false\n            show_symbol_type_heading: true\n            show_symbol_type_toc: true\n            show_if_no_docstring: false\n            show_signature: false\n            heading_level: 2\n            filters: [\"!^_\"]\n          import:\n            - https://docs.python-requests.org/en/master/objects.inv\nwatch:\n  - src\n  - docs\n  - mkdocs.yml\n\nhooks:\n  - docs/hooks.py\n\nmarkdown_extensions:\n  - attr_list\n  - md_in_html\n  - pymdownx.superfences\n  - admonition\n  - pymdownx.details\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - tables\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - toc:\n      permalink: true\n      title: On this page\n\nextra:\n  get_started: welcome/what_is_marvin\n  hero:\n    title: \"The AI Engineering Toolkit\"\n    description: \"Marvin is a lightweight toolkit for building natural language interfaces that are reliable, scalable, and easy to trust.\"\n  announcement:\n    title: \"Marvin 2.0 is here!\"\n    url: https://github.com/PrefectHQ/marvin/releases/tag/v2.0.0\n  analytics:\n    provider: google\n    property: G-2MWKMDJ9CM\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/prefecthq/marvin\n    - icon: fontawesome/brands/discord\n      link: https://discord.gg/Kgw4HpcuYG\n\nextra_css:\n  - /static/css/global.css\n  - /static/css/badges.css\n  - /static/css/custom.css\n  - /static/css/mkdocstrings.css\n"
        },
        {
          "name": "prefect.yaml",
          "type": "blob",
          "size": 1.3388671875,
          "content": "name: marvin\nprefect-version: 2.14.15\n\nbuild: null\n\npush: null\n\npull:\n- prefect.deployments.steps.git_clone:\n    repository: https://github.com/PrefectHQ/marvin.git\n- prefect.deployments.steps.run_shell_script:\n    script: pip install git+https://github.com/PrefectHQ/marvin.git prefect-gcp\n\ndeployments:\n- name: github-repo-digest\n  tags: ['internal-tools', 'LLM']\n  description: Summarize a repo's activity over a given time period\n  schedule:\n    cron: '0 18 * * 1-5'\n    timezone: America/Chicago\n  entrypoint: cookbook/flows/github_digest/repo_activity.py:daily_github_digest\n  parameters:\n    post_story_to_slack: true\n  work_pool:\n    name: kubernetes-prd-internal-tools\n    job_variables:\n      env:\n        OPENAI_API_KEY: '{{ prefect.blocks.secret.openai-api-key }}'\n\n- name: label-issues\n  tags: ['internal-tools', 'LLM']\n  description: Label issues based on their content\n  triggers:\n    - enabled: true\n      expect:\n        - marvin.issue.opened\n        - marvin.issue.reopened\n      parameters:\n        event_body_json: \"{{ event.payload.body }}\"\n  entrypoint: cookbook/flows/label_issues.py:label_issues\n  work_pool:\n    name: kubernetes-prd-internal-tools\n    job_variables:\n      env:\n        OPENAI_API_KEY: '{{ prefect.blocks.secret.openai-api-key }}'\n        GH_UTIL_TOKEN: '{{ prefect.blocks.secret.gh-token }}'\n        EXTRA_PIP_PACKAGES: 'gh-util'"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.3681640625,
          "content": "[project]\nname = \"marvin\"\ndynamic = [\"version\"]\ndescription = \"A lightweight AI engineering toolkit for building natural language interfaces that are reliable, scalable, and easy to trust.\"\nreadme = \"README.md\"\nlicense = { file = \"LICENSE\" }\nclassifiers = [\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\nkeywords = [\"ai\", \"chatbot\", \"llm\", \"NLP\", \"natural language processing\"]\nrequires-python = \">=3.9\"\ndependencies = [\n    \"cachetools>=5\",\n    \"fastapi\",\n    \"httpx>=0.24.1\",\n    \"jinja2>=3.1.2\",\n    \"jsonpatch>=1.33\",\n    \"openai>=1.21.0\",\n    \"prompt-toolkit>=3.0.33\",\n    \"pydantic>=2.4.2\",\n    \"pydantic_settings\",\n    \"rich>=12\",\n    \"tiktoken>=0.4.0\",\n    \"typer>=0.9.0\",\n    \"typing_extensions>=4.0.0\",\n    \"tzdata>=2023.3\",           # need for windows\n    \"uvicorn>=0.22.0\",\n    \"partialjson>=0.0.5\",\n]\n\n[project.optional-dependencies]\ngenerator = [\"datamodel-code-generator>=0.20.0\"]\nchromadb = [\"chromadb\"]\nprefect = [\"prefect\"]\ndev = [\n    \"marvin[tests]\",\n    \"black[jupyter]\",\n    \"ipython\",\n    \"mkdocs-autolinks-plugin~=0.7\",\n    \"mkdocs-awesome-pages-plugin~=2.8\",\n    \"mkdocs-markdownextradata-plugin~=0.2\",\n    \"mkdocs-jupyter>=0.24.1\",\n    \"mkdocs-material[imaging]>=9.1.17\",\n    \"mkdocstrings[python]~=0.22\",\n    \"pdbpp~=0.10\",\n    \"pre-commit>=2.21,<4.0\",\n    \"ruff\",\n]\ntests = [\n    \"pytest-asyncio>=0.18.2,!=0.22.0,<0.23.0\",\n    \"pytest-env>=0.8,<2.0\",\n    \"pytest-rerunfailures>=10,<14\",\n    \"pytest-sugar>=0.9,<2.0\",\n    \"pytest~=7.3.1\",\n    \"pytest-timeout\",\n    \"pytest-xdist\",\n]\naudio = [\n    \"SpeechRecognition>=3.10\",\n    \"PyAudio>=0.2.11\",\n    \"pydub>=0.25\",\n    \"simpleaudio>=1.0\",\n]\nvideo = [\"opencv-python >= 4.5\"]\n\nslackbot = [\n    \"pydantic-ai[anthropic]@git+https://github.com/pydantic/pydantic-ai.git@main\",\n    \"prefect\",\n    \"numpy\",\n    \"raggy\",\n    \"turbopuffer==0.1.23\",\n]\n\n[project.urls]\nCode = \"https://github.com/prefecthq/marvin\"\nDocumentation = \"https://www.askmarvin.ai\"\n\n[project.scripts]\nmarvin = \"marvin.cli:app\"\n\n[build-system]\nrequires = [\"setuptools>=45\", \"setuptools_scm[toml]>=6.2\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools_scm]\nwrite_to = \"src/marvin/_version.py\"\n\n# pytest configuration\n[tool.pytest.ini_options]\nmarkers = [\n    \"llm: indicates that a test calls an LLM (may be slow).\",\n    \"no_llm: indicates that a test does not require an LLM.\",\n]\ntimeout = 20\ntestpaths = [\"tests\"]\n\nnorecursedirs = [\n    \"*.egg-info\",\n    \".git\",\n    \".mypy_cache\",\n    \".pytest_cache\",\n    \".ruff_cache\",\n    \".vscode\",\n    \"node_modules\",\n]\n\nasyncio_mode = 'auto'\n\nfilterwarnings = [\n    \"ignore:'crypt' is deprecated and slated for removal in Python 3.13:DeprecationWarning\",\n]\nenv = [\n    \"MARVIN_TEST_MODE=1\",\n    # use 3.5 for tests by default\n    'D:MARVIN_CHAT_COMPLETIONS_MODEL=gpt-3.5-turbo',\n    'D:MARVIN_CHAT_COMPLETIONS_TEMPERATURE=0.0',\n    'D:MARVIN_LOG_VERBOSE=1',\n    'D:MARVIN_LOG_LEVEL=DEBUG',\n    'PYTEST_TIMEOUT=20',\n]\n\n# black configuration\n[tool.black]\npreview = true\n\n# ruff configuration\n[tool.ruff]\ntarget-version = \"py39\"\nlint.extend-select = [\"I\"]\nlint.dummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\" # default, but here in case we want to change it\n\n[tool.ruff.format]\nquote-style = \"double\"\nskip-magic-trailing-comma = false\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = ['I', 'F401', 'E402']\n\"conftest.py\" = [\"F401\", \"F403\"]\n'tests/fixtures/*.py' = ['F403']\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tailwind.config.js",
          "type": "blob",
          "size": 0.2021484375,
          "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./docs/**/*.{html,js}\"],\n  theme: {\n    extend: {\n      colors: {\n        'marvin-blue': 'rgba(24, 21, 68)',\n      },\n    },\n  },\n}"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}