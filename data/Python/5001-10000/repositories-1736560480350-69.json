{
  "metadata": {
    "timestamp": 1736560480350,
    "page": 69,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sloria/TextBlob",
      "stars": 9209,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4892578125,
          "content": "*.py[cod]\n\n# virtualenv\n.venv/\nvenv/\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# pip\npip-log.txt\npip-wheel-metadata\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\ntest-output/\n.pytest_cache\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Complexity\noutput/*.html\noutput/*/index.html\n\n# Sphinx\ndocs/_build\nREADME.html\n\n# mypy\n\n.mypy_cache\n\n!tests/.env\n\n# ruff\n.ruff_cache\n"
        },
        {
          "name": ".konchrc",
          "type": "blob",
          "size": 0.3037109375,
          "content": "# -*- coding: utf-8 -*-\n# vi: set ft=python :\nimport konch\nfrom textblob import TextBlob, Blobber, Word, Sentence\n\nkonch.config({\n    'context': {\n        'tb': TextBlob,\n        'Blobber': Blobber,\n        'Word': Word,\n        'Sentence': Sentence,\n    },\n    'prompt': '>>> ',\n    'ipy_autoreload': True,\n})\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.3681640625,
          "content": "repos:\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.5.6\n  hooks:\n    - id: ruff\n    - id: ruff-format\n- repo: https://github.com/python-jsonschema/check-jsonschema\n  rev: 0.29.1\n  hooks:\n    - id: check-github-workflows\n- repo: https://github.com/asottile/blacken-docs\n  rev: 1.18.0\n  hooks:\n  - id: blacken-docs\n    additional_dependencies: [black==23.12.1]\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "version: 2\nsphinx:\n  configuration: docs/conf.py\nformats:\n  - pdf\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 1.58984375,
          "content": "*******\nAuthors\n*******\n\nDevelopment Lead\n================\n\n- Steven Loria <sloria1@gmail.com> `@sloria <https://github.com/sloria>`_\n\nContributors (chronological)\n============================\n\n- Pete Keen `@peterkeen <https://github.com/peterkeen>`_\n- Matthew Honnibal `@syllog1sm <https://github.com/syllog1sm>`_\n- Roman Yankovsky `@RomanYankovsky <https://github.com/RomanYankovsky>`_\n- David Karesh `@davidnk <https://github.com/davidnk>`_\n- Evan Dempsey `@evandempsey <https://github.com/evandempsey>`_\n- Wesley Childs `@mrchilds <https://github.com/mrchilds>`_\n- Jeff Schnurr `@jschnurr <https://github.com/jschnurr>`_\n- Adel Qalieh `@adelq <https://github.com/adelq>`_\n- Lage Ragnarsson `@lragnarsson <https://github.com/lragnarsson>`_\n- Jonathon Coe `@jonmcoe <https://github.com/jonmcoe>`_\n- Adrián López Calvo `@AdrianLC <https://github.com/AdrianLC>`_\n- Nitish Kulshrestha `@nitkul <https://github.com/nitkul>`_\n- Jhon Eslava `@EpicJhon <https://github.com/EpicJhon>`_\n- `@jcalbert <https://github.com/jcalbert>`_\n- Tyler James Harden `@tylerjharden <https://github.com/tylerjharden>`_\n- `@pavelmalai <https://github.com/pavelmalai>`_\n- Jeff Kolb `@jeffakolb <https://github.com/jeffakolb>`_\n- Daniel Ong `@danong <https://github.com/danong>`_\n- Jamie Moschella `@jammmo <https://github.com/jammmo>`_\n- Roman Korolev `@roman-y-korolev <https://github.com/roman-y-korolev>`_\n- Ram Rachum `@cool-RR <https://github.com/cool-RR>`_\n- Romain Casati `@casatir <https://github.com/casatir>`_\n- Evgeny Kemerov `@sudoguy <https://github.com/sudoguy>`_\n- Karthikeyan Singaravelan `@tirkarthi <https://github.com/tirkarthi>`_\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 14.5068359375,
          "content": "Changelog\n=========\n\n0.19.0 (unreleased)\n___________________\n\nOther changes:\n\n- Remove vendorized ``unicodecsv`` module, as it's no longer used.\n\n0.18.0 (2024-02-15)\n-------------------\n\nBug fixes:\n\n- Remove usage of deprecated cElementTree (:issue:`339`).\n  Thanks :user:`tirkarthi` for reporting and for the PR.\n- Address ``SyntaxWarning`` on Python 3.12 (:pr:`418`).\n  Thanks :user:`smontanaro` for the PR.\n\nRemovals:\n\n- ``TextBlob.translate()`` and ``TextBlob.detect_language``, and ``textblob.translate`` \n  are removed. Use the official Google Translate API instead (:issue:`215`).\n- Remove ``textblob.compat``.\n\nSupport:\n\n- Support Python 3.8-3.12. Older versions are no longer supported.\n- Support nltk>=3.8.\n\n0.17.1 (2021-10-21)\n-------------------\n\nBug fixes:\n\n- Fix translation and language detection (:issue:`395`).\n  Thanks :user:`sudoguy` for the patch.\n\n0.17.0 (2021-02-17)\n-------------------\n\nFeatures:\n\n- Performance improvement: Use ``chain.from_iterable`` in ``_text.py``\n  to improve runtime and memory usage (:pr:`333`). Thanks :user:`cool-RR` for the PR.\n\nOther changes:\n\n- Remove usage of `ctypes` (:pr:`354`). Thanks :user:`casatir`.\n\n0.16.0 (2020-04-26)\n-------------------\n\nDeprecations:\n\n- ``TextBlob.translate()`` and ``TextBlob.detect_language`` are deprecated. Use the official Google Translate API instead (:issue:`215`).\n\nOther changes:\n\n- *Backwards-incompatible*: Drop support for Python 3.4.\n- Test against Python 3.7 and Python 3.8.\n- Pin NLTK to ``nltk<3.5`` on Python 2 (:issue:`315`).\n\n0.15.3 (2019-02-24)\n-------------------\n\nBug fixes:\n\n- Fix bug when ``Word`` string type after pos_tags is not a ``str``\n  (:pr:`255`). Thanks :user:`roman-y-korolev` for the patch.\n\n0.15.2 (2018-11-21)\n-------------------\n\nBug fixes:\n\n- Fix bug that raised a ``RuntimeError`` when executing methods that\n  delegate to ``pattern.en`` (:issue:`230`). Thanks :user:`vvaezian`\n  for the report and thanks :user:`danong` for the fix.\n- Fix methods of ``WordList`` that modified the list in-place by\n  removing the internal `_collection` variable (:pr:`235`). Thanks\n  :user:`jammmo` for the PR.\n\n0.15.1 (2018-01-20)\n-------------------\n\nBug fixes:\n\n- Convert POS tags from treebank to wordnet when calling ``lemmatize``\n  to prevent ``MissingCorpusError`` (:issue:`160`). Thanks\n  :user:`jschnurr`.\n\n0.15.0 (2017-12-02)\n-------------------\n\nFeatures:\n\n- Add `TextBlob.sentiment_assessments` property which exposes pattern's\n  sentiment assessments (:issue:`170`). Thanks :user:`jeffakolb`.\n\n0.14.0 (2017-11-20)\n-------------------\n\nFeatures:\n\n- Use specified tokenizer when tagging (:issue:`167`). Thanks\n  :user:`jschnurr` for the PR.\n\n0.13.1 (2017-11-11)\n-------------------\n\nBug fixes:\n\n- Avoid AttributeError when using pattern's sentiment analyzer\n  (:issue:`178`). Thanks :user:`tylerjharden` for the catch and patch.\n- Correctly pass ``format`` argument to ``NLTKClassifier.accuracy``\n  (:issue:`177`). Thanks :user:`pavelmalai` for the catch and patch.\n\n0.13.0 (2017-08-15)\n-------------------\n\nFeatures:\n\n- Performance improvements to `NaiveBayesClassifier` (:issue:`63`, :issue:`77`,\n  :issue:`123`). Thanks :user:`jcalbert` for the PR.\n\n0.12.0 (2017-02-27)\n-------------------\n\nFeatures:\n\n- Add `Word.stem` and `WordList.stem` methods (:issue:`145`). Thanks :user:`nitkul`.\n\nBug fixes:\n\n- Fix translation and language detection (:issue:`137`). Thanks :user:`EpicJhon` for the fix.\n\nChanges:\n\n- *Backwards-incompatible*: Remove Python 2.6 and 3.3 support.\n\n0.11.1 (2016-02-17)\n-------------------\n\nBug fixes:\n\n- Fix translation and language detection (:issue:`115`, :issue:`117`, :issue:`119`). Thanks :user:`AdrianLC` and :user:`jschnurr` for the fix. Thanks :user:`AdrianLC`, :user:`edgaralts`, and :user:`pouya-cognitiv` for reporting.\n\n0.11.0 (2015-11-01)\n-------------------\n\nChanges:\n\n- Compatible with nltk>=3.1. NLTK versions < 3.1 are no longer supported.\n- Change default tagger to NLTKTagger (uses NLTK's averaged perceptron tagger).\n- Tested on Python 3.5.\n\nBug fixes:\n\n- Fix singularization of a number of words. Thanks :user:`jonmcoe`.\n- Fix spelling correction when nltk>=3.1 is installed (:issue:`99`). Thanks :user:`shubham12101` for reporting.\n\n0.10.0 (2015-10-04)\n-------------------\n\nChanges:\n\n- Unchanged text is now considered a translation error. Raises ``NotTranslated`` (:issue:`76`). Thanks :user:`jschnurr`.\n\nBug fixes:\n\n- ``Translator.translate`` will detect language of input text by default (:issue:`85`). Thanks again :user:`jschnurr`.\n- Fix matching of tagged phrases with CFG in ``ConllExtractor``. Thanks :user:`lragnarsson`.\n- Fix inflection of a few irregular English nouns. Thanks :user:`jonmcoe`.\n\n0.9.1 (2015-06-10)\n------------------\n\nBug fixes:\n\n- Fix ``DecisionTreeClassifier.pprint`` for compatibility with nltk>=3.0.2.\n- Translation no longer adds erroneous whitespace around punctuation characters (:issue:`83`). Thanks :user:`AdrianLC` for reporting and thanks :user:`jschnurr` for the patch.\n\n0.9.0 (2014-09-15)\n------------------\n\n- TextBlob now depends on NLTK 3. The vendorized version of NLTK has been removed.\n- Fix bug that raised a `SyntaxError` when translating text with non-ascii characters on Python 3.\n- Fix bug that showed \"double-escaped\" unicode characters in translator output (issue #56). Thanks Evan Dempsey.\n- *Backwards-incompatible*: Completely remove ``import text.blob``. You should ``import textblob`` instead.\n- *Backwards-incompatible*: Completely remove ``PerceptronTagger``. Install ``textblob-aptagger`` instead.\n- *Backwards-incompatible*: Rename ``TextBlobException`` to ``TextBlobError`` and ``MissingCorpusException`` to ``MissingCorpusError``.\n- *Backwards-incompatible*: ``Format`` classes are passed a file object rather than a file path.\n- *Backwards-incompatible*: If training a classifier with data from a file, you must pass a file object (rather than a file path).\n- Updated English sentiment corpus.\n- Add ``feature_extractor`` parameter to ``NaiveBayesAnalyzer``.\n- Add ``textblob.formats.get_registry()`` and ``textblob.formats.register()`` which allows users to register custom data source formats.\n- Change ``BaseClassifier.detect`` from a ``staticmethod`` to a ``classmethod``.\n- Improved docs.\n- Tested on Python 3.4.\n\n\n0.8.4 (2014-02-02)\n------------------\n- Fix display (``__repr__``) of WordList slices on Python 3.\n- Add download_corpora module. Corpora must now be downloaded using ``python -m textblob.download_corpora``.\n\n0.8.3 (2013-12-29)\n------------------\n- Sentiment analyzers return namedtuples, e.g. ``Sentiment(polarity=0.12, subjectivity=0.34)``.\n- Memory usage improvements to NaiveBayesAnalyzer and basic_extractor (default feature extractor for classifiers module).\n- Add ``textblob.tokenizers.sent_tokenize`` and ``textblob.tokenizers.word_tokenize`` convenience functions.\n- Add ``textblob.classifiers.MaxEntClassifer``.\n- Improved NLTKTagger.\n\n0.8.2 (2013-12-21)\n------------------\n- Fix bug in spelling correction that stripped some punctuation (Issue #48).\n- Various improvements to spelling correction: preserves whitespace characters (Issue #12); handle contractions and punctuation between words. Thanks @davidnk.\n- Make ``TextBlob.words`` more memory-efficient.\n- Translator now sends POST instead of GET requests. This allows for larger bodies of text to be translated (Issue #49).\n- Update pattern tagger for better accuracy.\n\n0.8.1 (2013-11-16)\n------------------\n- Fix bug that caused ``ValueError`` upon sentence tokenization. This removes modifications made to the NLTK sentence tokenizer.\n- Add ``Word.lemmatize()`` method that allows passing in a part-of-speech argument.\n- ``Word.lemma`` returns correct part of speech for Word objects that have their ``pos`` attribute set. Thanks @RomanYankovsky.\n\n\n0.8.0 (2013-10-23)\n------------------\n- *Backwards-incompatible*: Renamed package to ``textblob``. This avoids clashes with other namespaces called `text`. TextBlob should now be imported with ``from textblob import TextBlob``.\n- Update pattern resources for improved parser accuracy.\n- Update NLTK.\n- Allow Translator to connect to proxy server.\n- PerceptronTagger completely deprecated. Install the ``textblob-aptagger`` extension instead.\n\n0.7.1 (2013-09-30)\n------------------\n- Bugfix updates.\n- Fix bug in feature extraction for ``NaiveBayesClassifier``.\n- ``basic_extractor`` is now case-sensitive, e.g. contains(I) != contains(i)\n- Fix ``repr`` output when a TextBlob contains non-ascii characters.\n- Fix part-of-speech tagging with ``PatternTagger`` on Windows.\n- Suppress warning about not having scikit-learn installed.\n\n0.7.0 (2013-09-25)\n------------------\n- Wordnet integration. ``Word`` objects have ``synsets`` and ``definitions`` properties. The ``text.wordnet`` module allows you to create ``Synset`` and ``Lemma`` objects directly.\n- Move all English-specific code to its own module, ``text.en``.\n- Basic extensions framework in place. TextBlob has been refactored to make it easier to develop extensions.\n- Add ``text.classifiers.PositiveNaiveBayesClassifier``.\n- Update NLTK.\n- ``NLTKTagger`` now working on Python 3.\n- Fix ``__str__`` behavior. ``print(blob)`` should now print non-ascii text correctly in both Python 2 and 3.\n- *Backwards-incompatible*: All abstract base classes have been moved to the ``text.base`` module.\n- *Backwards-incompatible*: ``PerceptronTagger`` will now be maintained as an extension, ``textblob-aptagger``. Instantiating a ``text.taggers.PerceptronTagger()`` will raise a ``DeprecationWarning``.\n\n0.6.3 (2013-09-15)\n------------------\n- Word tokenization fix: Words that stem from a contraction will still have an apostrophe, e.g. ``\"Let's\" => [\"Let\", \"'s\"]``.\n- Fix bug with comparing blobs to strings.\n- Add ``text.taggers.PerceptronTagger``, a fast and accurate POS tagger. Thanks `@syllog1sm <http://github.com/syllog1sm>`_.\n- Note for Python 3 users: You may need to update your corpora, since NLTK master has reorganized its corpus system. Just run ``curl https://raw.github.com/sloria/TextBlob/master/download_corpora.py | python`` again.\n- Add ``download_corpora_lite.py`` script for getting the minimum corpora requirements for TextBlob's basic features.\n\n0.6.2 (2013-09-05)\n------------------\n- Fix bug that resulted in a ``UnicodeEncodeError`` when tagging text with non-ascii characters.\n- Add ``DecisionTreeClassifier``.\n- Add ``labels()`` and ``train()`` methods to classifiers.\n\n0.6.1 (2013-09-01)\n------------------\n- Classifiers can be trained and tested on CSV, JSON, or TSV data.\n- Add basic WordNet lemmatization via the ``Word.lemma`` property.\n- ``WordList.pluralize()`` and ``WordList.singularize()`` methods return ``WordList`` objects.\n\n0.6.0 (2013-08-25)\n------------------\n- Add Naive Bayes classification. New ``text.classifiers`` module, ``TextBlob.classify()``, and ``Sentence.classify()`` methods.\n- Add parsing functionality via the ``TextBlob.parse()`` method. The ``text.parsers`` module currently has one implementation (``PatternParser``).\n- Add spelling correction. This includes the ``TextBlob.correct()`` and ``Word.spellcheck()`` methods.\n- Update NLTK.\n- Backwards incompatible: ``clean_html`` has been deprecated, just as it has in NLTK. Use Beautiful Soup's ``soup.get_text()`` method for HTML-cleaning instead.\n- Slight API change to language translation: if ``from_lang`` isn't specified, attempts to detect the language.\n- Add ``itokenize()`` method to tokenizers that returns a generator instead of a list of tokens.\n\n0.5.3 (2013-08-21)\n------------------\n- Unicode fixes: This fixes a bug that sometimes raised a ``UnicodeEncodeError`` upon creating accessing ``sentences`` for TextBlobs with non-ascii characters.\n- Update NLTK\n\n0.5.2 (2013-08-14)\n------------------\n- `Important patch update for NLTK users`: Fix bug with importing TextBlob if local NLTK is installed.\n- Fix bug with computing start and end indices of sentences.\n\n\n0.5.1 (2013-08-13)\n------------------\n- Fix bug that disallowed display of non-ascii characters in the Python REPL.\n- Backwards incompatible: Restore ``blob.json`` property for backwards compatibility with textblob<=0.3.10. Add a ``to_json()`` method that takes the same arguments as ``json.dumps``.\n- Add ``WordList.append`` and ``WordList.extend`` methods that append Word objects.\n\n0.5.0 (2013-08-10)\n------------------\n- Language translation and detection API!\n- Add ``text.sentiments`` module. Contains the ``PatternAnalyzer`` (default implementation) as well as a ``NaiveBayesAnalyzer``.\n- Part-of-speech tags can be accessed via ``TextBlob.tags`` or ``TextBlob.pos_tags``.\n- Add ``polarity`` and ``subjectivity`` helper properties.\n\n0.4.0 (2013-08-05)\n------------------\n- New ``text.tokenizers`` module with ``WordTokenizer`` and ``SentenceTokenizer``. Tokenizer instances (from either textblob itself or NLTK) can be passed to TextBlob's constructor. Tokens are accessed through the new ``tokens`` property.\n- New ``Blobber`` class for creating TextBlobs that share the same tagger, tokenizer, and np_extractor.\n- Add ``ngrams`` method.\n- `Backwards-incompatible`: ``TextBlob.json()`` is now a method, not a property. This allows you to pass arguments (the same that you would pass to ``json.dumps()``).\n- New home for documentation: https://textblob.readthedocs.io/\n- Add parameter for cleaning HTML markup from text.\n- Minor improvement to word tokenization.\n- Updated NLTK.\n- Fix bug with adding blobs to bytestrings.\n\n0.3.10 (2013-08-02)\n-------------------\n- Bundled NLTK no longer overrides local installation.\n- Fix sentiment analysis of text with non-ascii characters.\n\n0.3.9 (2013-07-31)\n------------------\n- Updated nltk.\n- ConllExtractor is now Python 3-compatible.\n- Improved sentiment analysis.\n- Blobs are equal (with `==`) to their string counterparts.\n- Added instructions to install textblob without nltk bundled.\n- Dropping official 3.1 and 3.2 support.\n\n0.3.8 (2013-07-30)\n------------------\n- Importing TextBlob is now **much faster**. This is because the noun phrase parsers are trained only on the first call to ``noun_phrases`` (instead of training them every time you import TextBlob).\n- Add text.taggers module which allows user to change which POS tagger implementation to use. Currently supports PatternTagger and NLTKTagger (NLTKTagger only works with Python 2).\n- NPExtractor and Tagger objects can be passed to TextBlob's constructor.\n- Fix bug with POS-tagger not tagging one-letter words.\n- Rename text/np_extractor.py -> text/np_extractors.py\n- Add run_tests.py script.\n\n0.3.7 (2013-07-28)\n------------------\n\n- Every word in a ``Blob`` or ``Sentence`` is a ``Word`` instance which has methods for inflection, e.g ``word.pluralize()`` and ``word.singularize()``.\n\n- Updated the ``np_extractor`` module. Now has an new implementation, ``ConllExtractor`` that uses the Conll2000 chunking corpus. Only works on Py2.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 4.06640625,
          "content": "Contributing guidelines\n=======================\n\nIn General\n----------\n\n- `PEP 8`_, when sensible.\n- Conventions *and* configuration.\n- TextBlob wraps functionality in NLTK and pattern.en. Anything outside of that should be written as an extension.\n- Test ruthlessly. Write docs for new features.\n- Even more important than Test-Driven Development--*Human-Driven Development*.\n- These guidelines may--and probably will--change.\n\n.. _`PEP 8`: http://www.python.org/dev/peps/pep-0008/\n\n\nIn Particular\n-------------\n\nQuestions, Feature Requests, Bug Reports, and Feedback. . .\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n. . .should all be reported on the `Github Issue Tracker`_ .\n\n.. _`Github Issue Tracker`: https://github.com/sloria/TextBlob/issues?state=open\n\nSetting Up for Local Development\n++++++++++++++++++++++++++++++++\n\n1. Fork TextBlob_ on Github. ::\n\n    $ git clone https://github.com/sloria/TextBlob.git\n    $ cd TextBlob\n\n2. Install development requirements. It is highly recommended that you use a virtualenv. ::\n\n    # After activating your virtualenv\n    $ pip install -r dev-requirements.txt\n\n3. Install TextBlob in develop mode. ::\n\n   $ python setup.py develop\n\n.. _extension-development:\n\nDeveloping Extensions\n+++++++++++++++++++++\n\nExtensions are packages with the name ``textblob-something``, where \"something\" is the name of your extension. Extensions should be imported with ``import textblob_something``.\n\nModel Extensions\n++++++++++++++++\n\nTo create a new extension for a part-of-speech tagger, sentiment analyzer, noun phrase extractor, classifier, tokenizer, or parser, simply create a module that has a class that implements the correct interface from ``textblob.base``. For example, a tagger might look like this:\n\n.. code-block:: python\n\n    from textblob.base import BaseTagger\n\n\n    class MyTagger(BaseTagger):\n        def tag(self, text):\n            pass\n            # Your implementation goes here\n\nLanguage Extensions\n+++++++++++++++++++\n\nThe process for developing language extensions is the same as developing model extensions. Create your part-of-speech taggers, tokenizers, parsers, etc. in the language of your choice. Packages should be named ``textblob-xx`` where \"xx\" is the two- or three-letter language code (`Language code reference`_).\n\n.. _Language code reference: http://www.loc.gov/standards/iso639-2/php/code_list.php\n\nTo see examples of existing extensions, visit the :ref:`Extensions <extensions>` page.\n\nCheck out the :ref:`API reference <api_base_classes>` for more info on the model interfaces.\n\n\nGit Branch Structure\n++++++++++++++++++++\n\nTextBlob loosely follows Vincent Driessen's `Successful Git Branching Model <http://http://nvie.com/posts/a-successful-git-branching-model/>`_ . In practice, the following branch conventions are used:\n\n``dev``\n    The next release branch.\n\n``master``\n    Current production release on PyPI.\n\nPull Requests\n++++++++++++++\n\n1. Create a new local branch.\n::\n\n    $ git checkout -b name-of-feature\n\n2. Commit your changes. Write `good commit messages <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`_.\n::\n\n    $ git commit -m \"Detailed commit message\"\n    $ git push origin name-of-feature\n\n3. Before submitting a pull request, check the following:\n\n- If the pull request adds functionality, it is tested and the docs are updated.\n- If you've developed an extension, it is on the :ref:`Extensions List <extensions>`.\n- You've added yourself to ``AUTHORS.rst``.\n\n4. Submit a pull request to the ``sloria:dev`` branch.\n\nRunning tests\n+++++++++++++\n\nTo run all the tests: ::\n\n    $ pytest\n\nTo skip slow tests: ::\n\n    $ pytest -m 'not slow'\n\nDocumentation\n+++++++++++++\n\nContributions to the documentation are welcome. Documentation is written in `reStructuredText`_ (rST). A quick rST reference can be found `here <https://docutils.sourceforge.io/docs/user/rst/quickref.html>`_. Builds are powered by Sphinx_.\n\nTo build docs and run in watch mode: ::\n\n    $ tox -e watch-docs\n\n.. _Sphinx: http://sphinx.pocoo.org/\n\n.. _`reStructuredText`: https://docutils.sourceforge.io/rst.html\n\n.. _TextBlob: https://github.com/sloria/TextBlob\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "Copyright Steven Loria and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 12.724609375,
          "content": "TextBlob includes some vendorized python libraries, including nltk and\nparts of pattern.\n\n\nNLTK License\n============\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\nPattern License\n===============\n\nCopyright (c) 2011-2013 University of Antwerp, Belgium\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the\n    distribution.\n  * Neither the name of Pattern nor the names of its\n    contributors may be used to endorse or promote products\n    derived from this software without specific prior written\n    permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.947265625,
          "content": "\nTextBlob: Simplified Text Processing\n====================================\n\n.. image:: https://badgen.net/pypi/v/TextBlob\n    :target: https://pypi.org/project/textblob/\n    :alt: Latest version\n\n.. image:: https://github.com/sloria/TextBlob/actions/workflows/build-release.yml/badge.svg\n    :target: https://github.com/sloria/TextBlob/actions/workflows/build-release.yml\n    :alt: Build status\n\n\nHomepage: `https://textblob.readthedocs.io/ <https://textblob.readthedocs.io/>`_\n\n`TextBlob` is a Python library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, and more.\n\n\n.. code-block:: python\n\n    from textblob import TextBlob\n\n    text = \"\"\"\n    The titular threat of The Blob has always struck me as the ultimate movie\n    monster: an insatiably hungry, amoeba-like mass able to penetrate\n    virtually any safeguard, capable of--as a doomed doctor chillingly\n    describes it--\"assimilating flesh on contact.\n    Snide comparisons to gelatin be damned, it's a concept with the most\n    devastating of potential consequences, not unlike the grey goo scenario\n    proposed by technological theorists fearful of\n    artificial intelligence run rampant.\n    \"\"\"\n\n    blob = TextBlob(text)\n    blob.tags  # [('The', 'DT'), ('titular', 'JJ'),\n    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\n    blob.noun_phrases  # WordList(['titular threat', 'blob',\n    #            'ultimate movie monster',\n    #            'amoeba-like mass', ...])\n\n    for sentence in blob.sentences:\n        print(sentence.sentiment.polarity)\n    # 0.060\n    # -0.341\n\n\nTextBlob stands on the giant shoulders of `NLTK`_ and `pattern`_, and plays nicely with both.\n\nFeatures\n--------\n\n- Noun phrase extraction\n- Part-of-speech tagging\n- Sentiment analysis\n- Classification (Naive Bayes, Decision Tree)\n- Tokenization (splitting text into words and sentences)\n- Word and phrase frequencies\n- Parsing\n- `n`-grams\n- Word inflection (pluralization and singularization) and lemmatization\n- Spelling correction\n- Add new models or languages through extensions\n- WordNet integration\n\nGet it now\n----------\n::\n\n    $ pip install -U textblob\n    $ python -m textblob.download_corpora\n\nExamples\n--------\n\nSee more examples at the `Quickstart guide`_.\n\n.. _`Quickstart guide`: https://textblob.readthedocs.io/en/latest/quickstart.html#quickstart\n\n\nDocumentation\n-------------\n\nFull documentation is available at https://textblob.readthedocs.io/.\n\nProject Links\n-------------\n\n- Docs: https://textblob.readthedocs.io/\n- Changelog: https://textblob.readthedocs.io/en/latest/changelog.html\n- PyPI: https://pypi.python.org/pypi/TextBlob\n- Issues: https://github.com/sloria/TextBlob/issues\n\nLicense\n-------\n\nMIT licensed. See the bundled `LICENSE <https://github.com/sloria/TextBlob/blob/master/LICENSE>`_ file for more details.\n\n.. _pattern: https://github.com/clips/pattern/\n.. _NLTK: http://nltk.org/\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.2685546875,
          "content": "# Releasing\n\n1. Bump version in `pyproject.toml` and update the changelog\n   with today's date.\n2. Commit: `git commit -m \"Bump version and update changelog\"`\n3. Tag the commit: `git tag x.y.z`\n4. Push: `git push --tags origin dev`. CI will take care of the\n   PyPI release.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1875,
          "content": "# Security Contact Information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.265625,
          "content": "[project]\nname = \"textblob\"\nversion = \"0.18.0.post0\"\ndescription = \"Simple, Pythonic text processing. Sentiment analysis, part-of-speech tagging, noun phrase parsing, and more.\"\nreadme = \"README.rst\"\nlicense = { file = \"LICENSE\" }\nauthors = [{ name = \"Steven Loria\", email = \"sloria1@gmail.com\" }]\nclassifiers = [\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Topic :: Text Processing :: Linguistic\",\n]\nkeywords = [\"textblob\", \"nlp\", 'linguistics', 'nltk', 'pattern']\nrequires-python = \">=3.8\"\ndependencies = [\"nltk>=3.8\"]\n\n[project.urls]\nChangelog = \"https://textblob.readthedocs.io/en/latest/changelog.html\"\nIssues = \"https://github.com/sloria/TextBlob/issues\"\nSource = \"https://github.com/sloria/TextBlob\"\n\n[project.optional-dependencies]\ndocs = [\"sphinx==8.0.2\", \"sphinx-issues==4.1.0\", \"PyYAML==6.0.2\"]\ntests = [\"pytest\", \"numpy\"]\ndev = [\"textblob[tests]\", \"tox\", \"pre-commit~=3.5\"]\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.sdist]\ninclude = [\"tests/\", \"CHANGELOG.rst\", \"CONTRIBUTING.rst\", \"tox.ini\"]\n\n[tool.ruff]\nsrc = [\"src\"]\nfix = true\nshow-fixes = true\nunsafe-fixes = true\nexclude = [\n  # Default excludes from ruff\n  \".bzr\",\n  \".direnv\",\n  \".eggs\",\n  \".git\",\n  \".git-rewrite\",\n  \".hg\",\n  \".ipynb_checkpoints\",\n  \".mypy_cache\",\n  \".nox\",\n  \".pants.d\",\n  \".pyenv\",\n  \".pytest_cache\",\n  \".pytype\",\n  \".ruff_cache\",\n  \".svn\",\n  \".tox\",\n  \".venv\",\n  \".vscode\",\n  \"__pypackages__\",\n  \"_build\",\n  \"buck-out\",\n  \"build\",\n  \"dist\",\n  \"node_modules\",\n  \"site-packages\",\n  \"venv\",\n  # Vendorized code\n  \"src/textblob/en\",\n  \"src/textblob/_text.py\",\n]\n\n[tool.ruff.format]\ndocstring-code-format = true\n\n[tool.ruff.lint]\nselect = [\n  \"B\",  # flake8-bugbear\n  \"E\",  # pycodestyle error\n  \"F\",  # pyflakes\n  \"I\",  # isort\n  \"UP\", # pyupgrade\n  \"W\",  # pycodestyle warning\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"tests/*\" = [\"E721\"]\n\n[tool.pytest.ini_options]\nmarkers = [\n  \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n  \"numpy: marks tests that require numpy\",\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.6318359375,
          "content": "[tox]\nenvlist =\n    lint\n    py{38,39,310,311,312}\n    py38-lowest\n\n[testenv]\nextras = tests\ndeps =\n    lowest: nltk==3.8\ncommands = pytest {posargs}\n\n    \n[testenv:lint]\ndeps = pre-commit~=3.5\nskip_install = true\ncommands =\n    pre-commit run --all-files\n\n[testenv:docs]\nextras = docs\ncommands = sphinx-build docs/ docs/_build {posargs}\n\n; Below tasks are for development only (not run in CI)\n\n[testenv:watch-docs]\ndeps = sphinx-autobuild\nextras = docs\ncommands = sphinx-autobuild --open-browser docs/ docs/_build {posargs} --watch src/textblob --delay 2\n\n[testenv:watch-readme]\ndeps = restview\nskip_install = true\ncommands = restview README.rst\n"
        }
      ]
    }
  ]
}