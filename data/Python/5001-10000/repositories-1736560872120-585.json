{
  "metadata": {
    "timestamp": 1736560872120,
    "page": 585,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "princeton-vl/infinigen",
      "stars": 6002,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0390625,
          "content": "BasedOnStyle: Microsoft\nColumnLimit: 100"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.326171875,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{Makefile,*.mak}]\nindent_size = 1\nindent_style = tab\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[{Makefile,*.sh,*.yml}]\nindent_size = 2"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2958984375,
          "content": "* text=auto eol=lf whitespace=tab-in-indent,blank-at-eol,tabwidth=4\nMakefile text whitespace=-tab-in-indent,blank-at-eol,tabwidth=4\n*.eot binary\n*.gif binary\n*.jpeg binary\n*.jpg binary\n*.pdf binary\n*.png binary\n*.svg binary\n*.ttf binary\n*.woff binary\n*.woff2 binary\n*.zip binary\n*.tgz binary\n*.gz binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6337890625,
          "content": "Python-*\nPython-*.tgz\nblender\nblender.tar.xz\nBlender.app\n\n.nfs*\n\n*.c\n\n.coverage\ncoverage.xml\n\n*/rclone.zip\n*/miniconda.sh\n\n.vscode\n*/wandb\n.vscode\n\nslurm-*.out\n__pycache__\n*.blend\n*.blend1\n*.obj\n*.DS_Store\n**._.DS_Store\n**.swp\n\n.idea\nBlender.app/\nblender.dmg\nscreenlog.*\n\ndev_install.sh\n\ndev.py\n\ncache\nBlender-FLIP-Fluids\n*.mp4\n\n*.npz\n*.obj\n*.blend\n*.blend1\n*.out\nprofiles_*.npz\noutputs\noutputs_scratch\nsnippets\nresources\ntimes.txt\nwandb\nscreenlog.0\npolycounts.txt\nSTART_*\nFINISH_*\n*_times.txt\n_start.txt\nconfig/custom.gin\n*.so\n*pyx.cpp\nblends\ngenerated_surface_script.py\nbuild\n*egg-info\ndist\nbuild\nblends\n*.ipynb_checkpoints\n\nprocess_mesh\nworldgen\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.3017578125,
          "content": "[submodule \"infinigen/infinigen_gpl\"]\n\tpath = infinigen/infinigen_gpl\n\turl = https://github.com/princeton-vl/infinigen_gpl.git\n[submodule \"infinigen/datagen/customgt/dependencies/eigen\"]\n\tpath = infinigen/datagen/customgt/dependencies/eigen\n\turl = https://gitlab.com/libeigen/eigen.git\n[submodule \"infinigen/datagen/customgt/dependencies/argparse\"]\n\tpath = infinigen/datagen/customgt/dependencies/argparse\n\turl = https://github.com/p-ranav/argparse.git\n[submodule \"infinigen/datagen/customgt/dependencies/cnpy\"]\n\tpath = infinigen/datagen/customgt/dependencies/cnpy\n\turl = https://github.com/rogersce/cnpy.git\n[submodule \"infinigen/datagen/customgt/dependencies/glm\"]\n\tpath = infinigen/datagen/customgt/dependencies/glm\n\turl = https://github.com/g-truc/glm.git\n[submodule \"infinigen/datagen/customgt/dependencies/json\"]\n\tpath = infinigen/datagen/customgt/dependencies/json\n\turl = https://github.com/nlohmann/json.git\n[submodule \"infinigen/datagen/customgt/dependencies/stb\"]\n\tpath = infinigen/datagen/customgt/dependencies/stb\n\turl = https://github.com/nothings/stb.git\n[submodule \"infinigen/datagen/customgt/dependencies/glfw\"]\n\tpath = infinigen/datagen/customgt/dependencies/glfw\n\turl = https://github.com/glfw/glfw.git\n[submodule \"infinigen/OcMesher\"]\n\tpath = infinigen/OcMesher\n\turl = https://github.com/princeton-vl/OcMesher.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.24609375,
          "content": "repos:\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # Ruff version.\n  rev: v0.4.9\n  hooks:\n    # Run the linter.\n    - id: ruff\n    # Sort imports\n    - id: ruff\n      args: [--select, I, --fix]\n    # Run the formatter.\n    - id: ruff-format\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0927734375,
          "content": "ARG APP_IMAGE=continuumio/miniconda3\nFROM ${APP_IMAGE}\nARG APP_IMAGE\nENV PATH=\"/root/miniconda3/bin:${PATH}\"\nRUN if [ \"$APP_IMAGE\" = \"nvidia/cuda:12.0.0-devel-ubuntu22.04\" ]; then \\\n    echo \"Using CUDA image\" && \\\n    apt-get update && \\\n    apt-get install -y unzip sudo git g++ libglm-dev libglew-dev libglfw3-dev libgles2-mesa-dev zlib1g-dev wget cmake vim libxi6 libgconf-2-4 && \\\n    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    mkdir /root/.conda && \\\n    bash Miniconda3-latest-Linux-x86_64.sh -b && \\\n    rm -f Miniconda3-latest-Linux-x86_64.sh && \\\n    apt-get install -y libxkbcommon-x11-0; \\\nelse \\\n    echo \"Using Conda image\" && \\\n    apt-get update -yq && \\\n    apt-get install -yq cmake g++ libgconf-2-4 libgles2-mesa-dev libglew-dev libglfw3-dev libglm-dev libxi6 sudo unzip vim zlib1g-dev && \\\n    apt-get install -y libxkbcommon-x11-0; \\\nfi\n\nRUN mkdir /opt/infinigen\nWORKDIR /opt/infinigen\nCOPY . .\nRUN conda init bash && \\\n    . ~/.bashrc && \\\n    conda create --name infinigen python=3.11 -y && \\\n    conda activate infinigen && \\\n    pip install -e \".[dev]\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.470703125,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2023, Princeton University\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.5,
          "content": "# Inspired by https://github.com/pytorch/pytorch/blob/main/MANIFEST.in\n\n# Explanation: files denoted here are excluded from `python setup.py sdist`,\n#     but some are still explicitly included in the .whl via\n\ninclude .gitmodules\n\nrecursive-include infinigen *.*\nrecursive-include tests *.*\nrecursive-include docs *.*\nrecursive-include infinigen_examples *.*\n\nprune */__pycache__\nprune infinigen/datagen/customgt/build/*\nprune infinigen/datagen/customgt/dependencies/*\n\nglobal-exclude *.o *.so *.pyc .git  *.png"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.8798828125,
          "content": "cleanpip:\n\trm -rf *.egg-info\n\trm -rf build\n\nclean_terrain:\n\trm -rf infinigen/terrain/*.egg-info\n\trm -rf infinigen/terrain/__pycache__\n\trm -rf infinigen/terrain/build\n\nterrain: clean_terrain\n\tbash scripts/install/compile_terrain.sh\n\ncustomgt:\n\tbash scripts/install/compile_opengl.sh\n\nflip_fluids:\n\tbash scripts/install/compile_flip_fluids.sh\n\nDOCKER_BUILD_PROGRESS ?= auto\nDOCKER_TAG ?= infinigen_docker_img\n\nPWD = $(shell pwd)\n\nXSOCK=/tmp/.X11-unix\nXAUTH=/tmp/.docker.xauth\n\ndefault:\n\ndocker-build:\n\tdocker build \\\n\t\t--tag $(DOCKER_TAG) \\\n\t\t--progress $(DOCKER_BUILD_PROGRESS) .\n\ndocker-build-cuda:\n\tdocker build \\\n\t\t--tag $(DOCKER_TAG) \\\n\t\t--progress $(DOCKER_BUILD_PROGRESS) \\\n\t\t--build-arg APP_IMAGE=nvidia/cuda:12.0.0-devel-ubuntu22.04 .\n\ndocker-clean:\n\techo \"Removing infinigen docker image if already exists...\"\n\t-docker rmi -f $(DOCKER_TAG)\n\ndocker-setup:\n\tsudo apt-get install x11-xserver-utils \\\n\t\t&& touch ~/.Xauthority \\\n\t\t&& xauth add $(HOST):0 . $(shell xxd -l 16 -p /dev/urandom) \\\n\t\t&& touch \"$(XAUTH)\" \\\n\t\t&& xauth nlist \"$(DISPLAY)\" | sed -e 's/^..../ffff/' | xauth -f \"$(XAUTH)\" nmerge - \\\n\t\t&& xhost +local:docker\n\ndocker-run:\n\tdocker run -td --privileged --net=host --ipc=host \\\n\t\t--name=\"infinigen\" \\\n\t\t--gpus=all \\\n\t\t--env NVIDIA_DISABLE_REQUIRE=1 \\\n\t\t-e \"DISPLAY=$(DISPLAY)\" \\\n\t\t-e \"QT_X11_NO_MITSHM=1\" \\\n\t\t-v \"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\\n\t\t-v $(PWD)/outputs:/opt/infinigen/outputs \\\n\t\t-e \"XAUTHORITY=$(XAUTH)\" \\\n\t\t-e ROS_IP=127.0.0.1 \\\n\t\t--cap-add=SYS_PTRACE \\\n\t\t-v /etc/group:/etc/group:ro \\\n\t\t\"$(DOCKER_TAG)\" /bin/bash \\\n\t|| docker run -td --privileged --net=host --ipc=host \\\n\t\t--name=\"infinigen\" \\\n\t\t--device /dev/dri \\\n\t\t-e \"DISPLAY=$(DISPLAY)\" \\\n\t\t-e \"QT_X11_NO_MITSHM=1\" \\\n\t\t-v \"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\\n\t\t-v $(PWD)/outputs:/opt/infinigen/outputs \\\n\t\t-e \"XAUTHORITY=$(XAUTH)\" \\\n\t\t-e ROS_IP=127.0.0.1 \\\n\t\t--cap-add=SYS_PTRACE \\\n\t\t-v /etc/group:/etc/group:ro \\\n\t\t\"$(DOCKER_TAG)\" bash\n\n\ndocker-run-no-opengl:\n\techo \"Launching Docker image without OpenGL ground truth\"\n\tdocker run -td --rm --privileged --net=host --ipc=host \\\n\t\t--name=\"infinigen\" \\\n\t\t--gpus=all \\\n\t\t--env NVIDIA_DISABLE_REQUIRE=1 \\\n\t\t-v $(PWD)/outputs:/opt/infinigen/outputs \\\n\t\t\"$(DOCKER_TAG)\" /bin/bash\n\ndocker-run-no-gpu:\n\techo \"Launching Docker image without GPU passthrough\"\n\tdocker run -td --privileged --net=host --ipc=host \\\n\t\t--name=\"infinigen\" \\\n\t\t-e \"DISPLAY=$(DISPLAY)\" \\\n\t\t-e \"QT_X11_NO_MITSHM=1\" \\\n\t\t-v \"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\\n\t\t-v $(PWD)/outputs:/opt/infinigen/outputs \\\n\t\t-e \"XAUTHORITY=$(XAUTH)\" \\\n\t\t-e ROS_IP=127.0.0.1 \\\n\t\t--cap-add=SYS_PTRACE \\\n\t\t-v /etc/group:/etc/group:ro \\\n\t\t\"$(DOCKER_TAG)\" /bin/bash \\\n]\n\ndocker-run-no-gpu-opengl:\n\techo \"Launching Docker image without GPU passthrough or OpenGL\"\n\tdocker run -td --rm --privileged --net=host --ipc=host \\\n\t\t--name=\"infinigen\" \\\n\t\t-e \"BLENDER=/opt/infinigen/blender/blender\" \\\n\t\t-v $(PWD)/outputs:/opt/infinigen/outputs \\\n\t\t\"$(DOCKER_TAG)\" /bin/bash\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4892578125,
          "content": "\n<div align=\"center\">\n<img src=\"docs/images/infinigen.png\" width=\"300\"></img>\n</div>\n\n# [Infinigen: Infinite Photorealistic Worlds Using Procedural Generation](https://infinigen.org)\n\n[**Getting Started**](#getting-started)\n| [**Website**](https://infinigen.org/)\n| [**Intro Video**](https://www.youtube.com/watch?v=6tgspeI-GHY)\n| [**Papers**](#papers)\n| [**Documentation**](#documentation)\n| [**Contributing**](#contributing)\n\n<div align=\"center\">\n<a href=\"https://youtu.be/6tgspeI-GHY\"> <img src=\"docs/images/video_thumbnail.png\" width=\"500\"></a>\n</div>\n\n## Getting Started\n\nFirst, follow our [Installation Instructions](docs/Installation.md).\n\n### Hello Room: Getting Started with Infinigen Indoors\n\n<p align=\"center\">\n  <img src=\"docs/images/hello_room/dining_blender.png\" width=\"300\" />\n  <img src=\"docs/images/hello_room/dining.png\" width=\"300\" />\n  <img src=\"docs/images/hello_room/dining_depth.png\" width=\"300\" />\n  <img src=\"docs/images/hello_room/dining_obj.png\" width=\"300\" />\n</p>\n\nSee instructions & example commands for Infinigen-Indoors in [HelloRoom.md](docs/HelloRoom.md)\n\n### Hello World: Getting Started with Infinigen Nature\n\n<p align=\"center\">\n  <img src=\"docs/images/hello_world/Image0048_00_00.png\" width=\"300\" />\n  <img src=\"docs/images/hello_world/Depth0048_00_00.png\" width=\"300\" />\n  <img src=\"docs/images/hello_world/SurfaceNormal_0001_00_00.png\" width=\"300\" />\n  <img src=\"docs/images/hello_world/InstanceSegmentation_0001_00_00.png\" width=\"300\" />\n</p>\n\nSee instructions & example commands for Infinigen-Nature in [HelloWorld.md](docs/HelloWorld.md)\n\n## Papers\n\nIf you use Infinigen in your work, please cite our academic papers:\n\n<h3 align=\"center\"><a href=\"https://arxiv.org/pdf/2306.09310\">Infinite Photorealistic Worlds using Procedural Generation</a></h3>\n<p align=\"center\">\n<a href=\"http://araistrick.com/\">Alexander Raistrick</a>*, \n<a href=\"https://www.lahavlipson.com/\">Lahav Lipson</a>*, \n<a href=\"https://mazeyu.github.io/\">Zeyu Ma</a>* (*equal contribution, alphabetical order) <br>\n<a href=\"https://www.cs.princeton.edu/~lm5483/\">Lingjie Mei</a>, \n<a href=\"https://www.cs.princeton.edu/~mingzhew\">Mingzhe Wang</a>, \n<a href=\"https://zuoym15.github.io/\">Yiming Zuo</a>, \n<a href=\"https://kkayan.com/\">Karhan Kayan</a>, \n<a href=\"https://hermera.github.io/\">Hongyu Wen</a>, \n<a href=\"https://pvl.cs.princeton.edu/people.html\">Beining Han</a>, <br>\n<a href=\"https://pvl.cs.princeton.edu/people.html\">Yihan Wang</a>, \n<a href=\"http://www-personal.umich.edu/~alnewell/index.html\">Alejandro Newell</a>, \n<a href=\"https://heilaw.github.io/\">Hei Law</a>, \n<a href=\"https://imankgoyal.github.io/\">Ankit Goyal</a>, \n<a href=\"https://yangky11.github.io/\">Kaiyu Yang</a>, \n<a href=\"http://www.cs.princeton.edu/~jiadeng\">Jia Deng</a><br>\nConference on Computer Vision and Pattern Recognition (CVPR) 2023\n</p>\n\n```\n@inproceedings{infinigen2023infinite,\n  title={Infinite Photorealistic Worlds Using Procedural Generation},\n  author={Raistrick, Alexander and Lipson, Lahav and Ma, Zeyu and Mei, Lingjie and Wang, Mingzhe and Zuo, Yiming and Kayan, Karhan and Wen, Hongyu and Han, Beining and Wang, Yihan and Newell, Alejandro and Law, Hei and Goyal, Ankit and Yang, Kaiyu and Deng, Jia},\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  pages={12630--12641},\n  year={2023}\n}\n```\n\n<h3 align=\"center\"><a href=\"https://arxiv.org/abs/2406.11824\">Infinigen Indoors: Photorealistic Indoor Scenes using Procedural Generation</a></h3>\n<p align=\"center\">\n<a href=\"http://araistrick.com/\">Alexander Raistrick</a>*, \n<a href=\"https://www.cs.princeton.edu/~lm5483/\">Lingjie Mei</a>*, \n<a href=\"https://kkayan.com/\">Karhan Kayan</a>*, (*equal contribution, random order) <br>\n<a href=\"https://david-yan1.github.io/\">David Yan</a>, \n<a href=\"https://zuoym15.github.io/\">Yiming Zuo</a>, \n<a href=\"https://pvl.cs.princeton.edu/people.html\">Beining Han</a>, \n<a href=\"https://hermera.github.io/\">Hongyu Wen</a>, \n<a href=\"https://scholar.google.com/citations?user=q38OfTQAAAAJ&hl=en\">Meenal Parakh</a>, <br>\n<a href=\"https://stamatisalex.github.io/\">Stamatis Alexandropoulos</a>, \n<a href=\"https://www.lahavlipson.com/\">Lahav Lipson</a>, \n<a href=\"https://mazeyu.github.io/\">Zeyu Ma</a>,\n<a href=\"http://www.cs.princeton.edu/~jiadeng\">Jia Deng</a><br>\nConference on Computer Vision and Pattern Recognition (CVPR) 2024\n</p>\n\n```\n@inproceedings{infinigen2024indoors,\n    author    = {Raistrick, Alexander and Mei, Lingjie and Kayan, Karhan and Yan, David and Zuo, Yiming and Han, Beining and Wen, Hongyu and Parakh, Meenal and Alexandropoulos, Stamatis and Lipson, Lahav and Ma, Zeyu and Deng, Jia},\n    title     = {Infinigen Indoors: Photorealistic Indoor Scenes using Procedural Generation},\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    month     = {June},\n    year      = {2024},\n    pages     = {21783-21794}\n}\n```\n\n## Documentation\n\n- [Installation Guide](docs/Installation.md)\n- [\"Hello World\": Generate your first Infinigen-Nature scene](docs/HelloWorld.md)\n- [\"Hello Room\": Generate your first Infinigen-Indoors scene](docs/HelloRoom.md)\n- [Configuring Infinigen](docs/ConfiguringInfinigen.md)\n- [Configuring Cameras](docs/ConfiguringCameras.md)\n- [Downloading pre-generated data](docs/PreGeneratedData.md)\n- [Generating individual assets](docs/GeneratingIndividualAssets.md)\n- [Exporting to external fileformats (OBJ, OpenUSD, etc)](docs/ExportingToExternalFileFormats.md)\n- [Add external assets to indoor scenes](docs/StaticAssets.md)\n- [Extended ground-truth](docs/GroundTruthAnnotations.md)\n- [Implementing new materials & assets](docs/ImplementingAssets.md)\n- [Generating fluid simulations](docs/GeneratingFluidSimulations.md)\n\nPlease see our [project roadmap](https://infinigen.org/roadmap) and follow us at [https://twitter.com/PrincetonVL](https://twitter.com/PrincetonVL) for updates. \n\n## Contributing\n\nWe welcome contributions! You can contribute in many ways:\n- **Contribute code to this repository** - We welcome code contributions. More guidelines coming soon.\n- **Contribute procedural generators** - `infinigen/nodes/node_transpiler/dev_script.py` provides tools to convert artist-friendly [Blender Nodes](https://docs.blender.org/manual/en/2.79/render/blender_render/materials/nodes/introduction.html) into python code. Tutorials and guidelines coming soon.\n- **Contribute pre-generated data** - Anyone can contribute their computing power to create data and share it with the community. Please stay tuned for a repository of pre-generated data.\n\n### Getting Help\n\nPlease post this repository's Github Issues page for help. Please run your command with `--debug`, and let us know:\n- What is your computing setup, including OS version, CPU, RAM, GPU(s) and any drivers?\n- What version of the code are you using (link a commit hash), and what if any modifications have you made (new configs, code edits)\n- What exact command did you run?\n- What were the output logs of the command you ran? \n    - If using `manage_jobs`, look in `outputs/MYJOB/MYSEED/logs/` to find the right one.\n    - What was the exact python error and stacktrace, if applicable?\n\n### Acknowledgements\n\nInfinigen wouldn't be possible without the fantastic work of the [Blender Foundation](https://www.blender.org/) and it's open-source contributors. Infinigen uses many open source projects, with special thanks to [Land-Lab](https://github.com/landlab/landlab), [BlenderProc](https://github.com/DLR-RM/BlenderProc) [Blender-FLIP-Fluids](https://github.com/rlguy/Blender-FLIP-Fluids) and [Blender-Differential-Growth](https://github.com/inca/blender-differential-growth).\n\nWe thank [Thomas Kole](https://blenderartists.org/u/ThomasKole) for providing procedural clouds.\n\nWe learned tremendously from online tutorials of \n[Andrew Price](https://www.youtube.com/channel/UCOKHwx1VCdgnxwbjyb9Iu1g),\n[Artisans of Vaul](https://www.youtube.com/@ArtisansofVaul),\n[Bad Normals](https://www.youtube.com/@BadNormals),\n[Blender Tutorial Channel](https://www.youtube.com/@BlenderTutorialChannel),\n[blenderbitesize](https://www.youtube.com/@blenderbitesize),\n[Blendini](http://www.youtube.com/watch?v=sHr8LjfX09c),\n[Bradley Animation](https://www.youtube.com/@bradleyanimation120),\n[CGCookie](https://www.youtube.com/watch?v=lPAYX8z9i8M),\n[CGRogue](https://www.youtube.com/@PixelicaCG),\n[Creative Shrimp](https://www.youtube.com/@CreativeShrimp),\n[CrowdRender](https://www.youtube.com/@Crowdrender),\n[Dr. Blender](https://www.youtube.com/@DrBlender),\n[HEY Pictures](https://www.youtube.com/channel/UCo5rv1z-PPrCh-C7OvO2VAA),\n[Ian Hubert](https://www.youtube.com/@IanHubert2),\n[Kev Binge](https://www.youtube.com/@KevBinge),\n[Lance Phan](https://www.youtube.com/@LancePhan),\n[MaxEdge](https://www.youtube.com/@MaxEdge420),\n[Mr. Cheebs](https://www.youtube.com/@MrCheebs),\n[PixelicaCG](https://www.youtube.com/@PixelicaCG),\n[Polyfjord](https://www.youtube.com/@Polyfjord),\n[Robbie Tilton](https://www.youtube.com/@RobbieTilton),\n[Ryan King Art](https://www.youtube.com/@RyanKingArt),\n[Sam Bowman](https://www.youtube.com/@snow_mamba) and\n[yogigraphics](https://www.youtube.com/@yojigraphics).\nThese tutorials provided procedural generators for our early experimentation and served as inspiration for our own implementations in the official release of Infinigen. They are acknowledged in file header comments where applicable. \n\nInfinigen has evolved significantly since the version described in our CVPR paper. It now features some procedural code obtained from the internet under CC-0 licenses, which are marked with code comments where applicable - no such code was present in the system for the CVPR version.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "infinigen",
          "type": "tree",
          "content": null
        },
        {
          "name": "infinigen_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.189453125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"numpy\", \"Cython\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"infinigen\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE\"}\ndynamic = [\"version\"]\n\ndescription = \"Infinite Photorealistic Worlds using Procedural Generation\"\nkeywords = [\n    \"computer vision\",\n    \"data generation\",\n    \"procedural\"\n]\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n]\n\nrequires-python = \"==3.11.*\"\ndependencies = [\n    \"bpy==4.2.0\",\n    \"gin_config>=0.5.0\",\n    \"imageio\",\n    \"matplotlib\",\n    \"networkx\",\n    \"numpy<2\",\n    \"opencv-python\",\n    \"pandas\",\n    \"psutil\",\n    \"scikit-image\",\n    \"scikit-learn\",\n    \"scipy\",\n    \"shapely\",\n    \"tqdm\",\n    \"trimesh\",\n    \"OpenEXR\",\n\n    \"submitit\", # can be removed so long as you dont use slurm.gin or --slurm args\n\n    \"geomdl\", # can be removed so long as you do not generate any creatures\n\n    # used by trimesh, we could specify \"trimesh[easy]\" but this brings more packages\n    \"python-fcl\",\n    \"rtree\",\n]\n\n[project.optional-dependencies]\nterrain = [\n    \"landlab==2.6.0\",\n    \"pyrender\",\n    # landlab depends on `setuptools` but doesn't explicitly list it as a\n    # dependency; We include it to avoid problems with newer Python versions.\n    \"setuptools\"\n]\nvis = [\n    \"einops\",\n    \"flow_vis\",\n    \"numba\", # for ground truth visuals\n    \"pyglet<2\" # for trimesh_scene.show()\n]\ndev = [\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-xdist\",\n    \"pytest-timeout\",\n    \"pytype\",\n    \"ruff\",\n    \"isort\",\n    \"tabulate\",\n    \"rapidfuzz\",\n    \"pre-commit\"\n]\n\nwandb = [\n    \"wandb\"\n]\n\n[tool.setuptools]\n# include-package-data is terribly named. package-data is still included if false,\n# just not the package-data setuptools would otherwise autogenerate from MANIFEST.in or version control\ninclude-package-data = false\n\n[tool.setuptools.packages.find]\ninclude = [\"infinigen*\"]\n\n# must be specified as module paths with ., using classic filepaths with / will silently not do anything\nexclude = [\n    \"infinigen.datagen.customgt.dependencies*\",\n    \"infinigen.datagen.customgt.build*\",\n]\n\n[tool.setuptools.package-data]\n\n\"*\" = [\"*.gin\", \"*.txt\", \"*.json\"]\n\n# Must be specified as paths relative to infinigen/\n\"infinigen\" = [\n    \"terrain/**/*.soil\", # extra files for SoilMachine\n    \"terrain/lib/**/*.so\", # created by terrain compilation\n    \"terrain/lib/**/*.o\", # created by terrain compilation\n    \"datagen/customgt/build/customgt\", # created during opengl compilation\n    \"assets/objects/creatures/parts/nurbs_data/*.npy\", # stores creature nurbs centroids data, ideally will be deprecated\n]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"infinigen.__version__\"}\n\n[tool.pytest.ini_options]\ntestpaths = \"tests\"\njunit_family = \"xunit2\"\nmarkers = [\"nature\", \"indoors\", \"skip_for_ci\"]\ntimeout = 480\n\nfilterwarnings = [\n\n    \"ignore:The value of the smallest subnormal for <class 'numpy.float:UserWarning\",\n\n    # ignore warnings from landlab, not our problem\n    \"ignore:pkg_resources is deprecated as an API:DeprecationWarning\",\n    \"ignore:Importing from numpy.matlib is deprecated since 1.19.0:PendingDeprecationWarning\",\n    \"ignore:Please import `label` from the `scipy.ndimage` namespace; the `scipy.ndimage.measurements` namespace is deprecated and will be removed in SciPy 2.0.0:DeprecationWarning\"\n\n]\n\n[tool.cibuildwheel]\ntest-extras = [\"dev\"]\ntest-command = \"pytest tests\"\n\n[tool.ruff]\ntarget-version = \"py310\"\n\nexclude = [\n\n    \"*.ipynb\",\n\n    # exclude known submodules\n    \"infinigen/datagen/customgt/dependencies/\",\n    \"infinigen/OcMesher\",\n    \"infinigen/infinigen_gpl\",\n\n    # exclude copied-in external code\n    \"infinigen/terrain/mesh_to_sdf\",\n    \"infinigen/terrain/mesher/_marching_cubes_lewiner*\"\n]\n\n[tool.ruff.lint]\n\nselect = [\n    \"E\",\n    \"I\",\n    \"F\",\n    \"S102\", # no exec(),\n    \"TID252\", # relative imports only allowed for siblings\n\n]\nignore = [\n    \"E501\", # over-length lines, formatter should handle it\n    \"E741\", # ambigous variable name\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"**/__init__.py\" = [\n    \"F401\",\n    \"CPY001\", # runs during PRs, but no need for copyright on boilerplate/often-empty __init__.py\n]\n\"infinigen/assets/*\" = [\"F841\"] #transpiler currently creates lots of unused variables\n\n[tool.pytype]\ninputs = ['infinigen', 'infinigen_examples']\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.65625,
          "content": "# Copyright (C) 2023, Princeton University.\n# This source code is licensed under the BSD 3-Clause license found in the LICENSE file in the root directory\n# of this source tree.\n\n# Authors: Alexander Raistrick\n\n# Acknowledgement: This file draws inspiration from https://github.com/pytorch/pytorch/blob/main/setup.py\n\n\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nimport numpy\nfrom Cython.Build import cythonize\nfrom setuptools import Extension, setup\n\ncwd = Path(__file__).parent\n\nstr_true = \"True\"\nMINIMAL_INSTALL = os.environ.get(\"INFINIGEN_MINIMAL_INSTALL\") == str_true\nBUILD_TERRAIN = os.environ.get(\"INFINIGEN_INSTALL_TERRAIN\", str_true) == str_true\nBUILD_OPENGL = os.environ.get(\"INFINIGEN_INSTALL_CUSTOMGT\", \"False\") == str_true\nBUILD_BNURBS = os.environ.get(\"INFINIGEN_INSTALL_BNURBS\", \"False\") == str_true\n\ndont_build_steps = [\"clean\", \"egg_info\", \"dist_info\", \"sdist\", \"--help\"]\nis_build_step = not any(x in sys.argv[1] for x in dont_build_steps)\n\n\ndef ensure_submodules():\n    # Inspired by https://github.com/pytorch/pytorch/blob/main/setup.py\n\n    with (cwd / \".gitmodules\").open() as f:\n        submodule_folders = [\n            cwd / line.split(\"=\", 1)[1].strip()\n            for line in f.readlines()\n            if line.strip().startswith(\"path\")\n        ]\n\n    if any(not p.exists() or not any(p.iterdir()) for p in submodule_folders):\n        subprocess.run(\n            [\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\"], cwd=cwd, check=True\n        )\n\n\nif not MINIMAL_INSTALL:\n    ensure_submodules()\n\n# inspired by https://github.com/pytorch/pytorch/blob/161ea463e690dcb91a30faacbf7d100b98524b6b/setup.py#L290\n# theirs seems to not exclude dist_info but this causes duplicate compiling in my tests\nif is_build_step and not MINIMAL_INSTALL:\n    if BUILD_TERRAIN:\n        subprocess.run([\"make\", \"terrain\"], cwd=cwd, check=True)\n    if BUILD_OPENGL:\n        subprocess.run([\"make\", \"customgt\"], cwd=cwd, check=True)\n\ncython_extensions = []\n\nif not MINIMAL_INSTALL:\n    if BUILD_BNURBS:\n        cython_extensions.append(\n            Extension(\n                name=\"bnurbs\",\n                sources=[\"infinigen/assets/utils/geometry/cpp_utils/bnurbs.pyx\"],\n                include_dirs=[numpy.get_include()],\n            )\n        )\n    if BUILD_TERRAIN:\n        cython_extensions.append(\n            Extension(\n                name=\"infinigen.terrain.marching_cubes\",\n                sources=[\n                    \"infinigen/terrain/marching_cubes/_marching_cubes_lewiner_cy.pyx\"\n                ],\n                include_dirs=[numpy.get_include()],\n            )\n        )\n\nsetup(\n    ext_modules=[*cythonize(cython_extensions)]\n    # other opts come from pyproject.toml\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}