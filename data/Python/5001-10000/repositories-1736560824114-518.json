{
  "metadata": {
    "timestamp": 1736560824114,
    "page": 518,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ufoym/deepo",
      "stars": 6317,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7685546875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# pyenv python configuration file\n.python-version\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2017 Ming\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.3232421875,
          "content": "![deepo](https://user-images.githubusercontent.com/2270240/32102393-aecf573c-bb4e-11e7-811c-dc673cae7b9c.png)\n\n![workflows](https://github.com/ufoym/deepo/workflows/deepo%20CI/badge.svg)\n[![docker](https://img.shields.io/docker/pulls/ufoym/deepo.svg)](https://hub.docker.com/r/ufoym/deepo)\n![build](https://img.shields.io/docker/automated/ufoym/deepo.svg)\n![license](https://img.shields.io/github/license/ufoym/deepo.svg)\n\n\n***PLEASE NOTE, THE DEEP LEARNING FRAMEWORK WAR IS OVER, THIS PROJECT IS NO LONGER BEING MAINTAINED.***\n\n---\n\n***Deepo*** is an open framework to assemble specialized [*docker*](http://www.docker.com/) images for deep learning research without pain. It provides a “lego set” of dozens of standard components for preparing deep learning tools and a framework for assembling them into custom docker images. \n\nAt the core of Deepo is a Dockerfile generator that\n- allows you to [customize your deep learning environment](#Build) with Lego-like modules\n  - define your environment in a single command line,\n  - then deepo will generate Dockerfiles with best practices\n  - and do all the configuration for you\n- automatically resolves the dependencies for you\n  - deepo knows which combos (CUDA/cuDNN/Python/PyTorch/Tensorflow, ..., tons of dependancies) are compatible\n  - and will pick the right versions for you\n  - and arrange sequence of installation procedures using [topological sorting](https://en.wikipedia.org/wiki/Topological_sorting)\n\nWe also prepare a series of pre-built docker images that\n- allows you to instantly set up common deep learning research environment\n- supports almost all [commonly used deep learning frameworks](#Available-tags)\n- supports [GPU acceleration](#GPU) (CUDA and cuDNN included), also works in [CPU-only mode](#CPU)\n- works on Linux ([CPU version](#CPU)/[GPU version](#GPU)), Windows ([CPU version](#CPU)) and OS X ([CPU version](#CPU))\n\n---\n\n# Table of contents\n- [Quick Start](#Quick-Start)\n  - [GPU Version](#GPU)\n    - [Installation](#Installation)\n    - [Usage](#Usage)\n  - [CPU Version](#CPU)\n    - [Installation](#Installation-cpu)\n    - [Usage](#Usage-cpu)\n- [Customization](#Customization)\n  - [Unhappy with all-in-one solution?](#One)\n  - [Jupyter support](#Jupyter)\n  - [Build your own customized image](#Build)\n- [Comparison to Alternatives](#Comparison)\n- [Tags](#Tags)\n  - [Available Tags](#Available-tags)\n  - [Deprecated Tags](#Deprecated-tags)\n- [Citation](#Citation)\n- [Contributing](#Contributing)\n- [Licensing](#Licensing)\n\n---\n\n<a name=\"Quick-Start\"/>\n\n# Quick Start\n\n\n<a name=\"GPU\"/>\n\n## GPU Version\n\n<a name=\"Installation\"/>\n\n### Installation\n\n#### Step 1. Install [Docker](https://docs.docker.com/engine/installation/) and [nvidia-docker](https://github.com/NVIDIA/nvidia-docker).\n\n#### Step 2. Obtain the all-in-one image from [Docker Hub](https://hub.docker.com/r/ufoym/deepo)\n\n```bash\ndocker pull ufoym/deepo\n```\n\nFor users in China who may suffer from slow speeds when pulling the image from the public Docker registry, you can pull `deepo` images from the China registry mirror by specifying the full path, including the registry, in your docker pull command, for example:\n\n```bash\ndocker pull registry.docker-cn.com/ufoym/deepo\n```\n\n<a name=\"Usage\"/>\n\n### Usage\n\nNow you can try this command:\n```bash\ndocker run --gpus all --rm ufoym/deepo nvidia-smi\n```\nThis should work and enables Deepo to use the GPU from inside a docker container.\nIf this does not work, search [the issues section on the nvidia-docker GitHub](https://github.com/NVIDIA/nvidia-docker/issues) -- many solutions are already documented. To get an interactive shell to a container that will not be automatically deleted after you exit do\n\n```bash\ndocker run --gpus all -it ufoym/deepo bash\n```\n\nIf you want to share your data and configurations between the host (your machine or VM) and the container in which you are using Deepo, use the -v option, e.g.\n```bash\ndocker run --gpus all -it -v /host/data:/data -v /host/config:/config ufoym/deepo bash\n```\nThis will make `/host/data` from the host visible as `/data` in the container, and `/host/config` as `/config`. Such isolation reduces the chances of your containerized experiments overwriting or using wrong data.\n\nPlease note that some frameworks (e.g. PyTorch) use shared memory to share data between processes, so if multiprocessing is used the default shared memory segment size that container runs with is not enough, and you should increase shared memory size either with `--ipc=host` or `--shm-size` command line options to `docker run`.\n```bash\ndocker run --gpus all -it --ipc=host ufoym/deepo bash\n```\n\n\n<a name=\"CPU\"/>\n\n## CPU Version\n\n<a name=\"Installation-cpu\"/>\n\n### Installation\n\n#### Step 1. Install [Docker](https://docs.docker.com/engine/installation/).\n\n#### Step 2. Obtain the all-in-one image from [Docker Hub](https://hub.docker.com/r/ufoym/deepo)\n\n```bash\ndocker pull ufoym/deepo:cpu\n```\n\n<a name=\"Usage-cpu\"/>\n\n### Usage\n\nNow you can try this command:\n```bash\ndocker run -it ufoym/deepo:cpu bash\n```\n\nIf you want to share your data and configurations between the host (your machine or VM) and the container in which you are using Deepo, use the -v option, e.g.\n```bash\ndocker run -it -v /host/data:/data -v /host/config:/config ufoym/deepo:cpu bash\n```\nThis will make `/host/data` from the host visible as `/data` in the container, and `/host/config` as `/config`. Such isolation reduces the chances of your containerized experiments overwriting or using wrong data.\n\nPlease note that some frameworks (e.g. PyTorch) use shared memory to share data between processes, so if multiprocessing is used the default shared memory segment size that container runs with is not enough, and you should increase shared memory size either with `--ipc=host` or `--shm-size` command line options to `docker run`.\n```bash\ndocker run -it --ipc=host ufoym/deepo:cpu bash\n```\n\n\n_You are now ready to begin your journey._\n\n\n```$ python```\n```python\n>>> import tensorflow\n>>> import sonnet\n>>> import torch\n>>> import keras\n>>> import mxnet\n>>> import cntk\n>>> import chainer\n>>> import theano\n>>> import lasagne\n>>> import caffe\n>>> import paddle\n```\n\n```$ caffe --version```\n```\ncaffe version 1.0.0\n```\n\n```$ darknet```\n```\nusage: darknet <function>\n```\n\n<a name=\"Customization\"/>\n\n# Customization\n\nNote that `docker pull ufoym/deepo` mentioned in [Quick Start](#Quick-Start) will give you a standard image containing all available deep learning frameworks. You can customize your own environment as well.\n\n<a name=\"One\"/>\n\n## Unhappy with all-in-one solution?\n\nIf you prefer a specific framework rather than an all-in-one image, just append a tag with the name of the framework.\nTake tensorflow for example:\n```bash\ndocker pull ufoym/deepo:tensorflow\n```\n\n<a name=\"Jupyter\"/>\n\n## Jupyter support\n\n#### Step 1. pull the all-in-one image\n\n```bash\ndocker pull ufoym/deepo\n```\n\n#### Step 2. run the image\n```bash\ndocker run --gpus all -it -p 8888:8888 -v /home/u:/root --ipc=host ufoym/deepo jupyter lab --no-browser --ip=0.0.0.0 --allow-root --LabApp.allow_origin='*' --LabApp.root_dir='/root'\n```\n\n\n<a name=\"Build\"/>\n\n## Build your own customized image with Lego-like modules\n\n#### Step 1. prepare generator\n\n```bash\ngit clone https://github.com/ufoym/deepo.git\ncd deepo/generator\n```\n\n#### Step 2. generate your customized Dockerfile\n\nFor example, if you like `pytorch` and `lasagne`, then\n```bash\npython generate.py Dockerfile pytorch lasagne\n```\nor with CUDA 11.1 and CUDNN 8\n```bash\npython generate.py Dockerfile pytorch lasagne --cuda-ver 11.1 --cudnn-ver 8\n```\n\nThis should generate a Dockerfile that contains everything for building `pytorch` and `lasagne`. Note that the generator can handle automatic dependency processing and topologically sort the lists. So you don't need to worry about missing dependencies and the list order.\n\nYou can also specify the version of Python:\n```bash\npython generate.py Dockerfile pytorch lasagne python==3.6\n```\n\n#### Step 3. build your Dockerfile\n\n```bash\ndocker build -t my/deepo .\n```\n\nThis may take several minutes as it compiles a few libraries from scratch.\n\n\n<a name=\"Comparison\"/>\n\n# Comparison to alternatives\n\n\n.                                                  | modern-deep-learning | dl-docker          | jupyter-deeplearning | Deepo\n:------------------------------------------------: | :------------------: | :----------------: | :------------------: | :----------------:\n [ubuntu](https://www.ubuntu.com)                  | 16.04                | 14.04              | 14.04                | 18.04\n [cuda](https://developer.nvidia.com/cuda-zone)    | X                    | 8.0                | 6.5-8.0              | 8.0-10.2/None\n [cudnn](https://developer.nvidia.com/cudnn)       | X                    | v5                 | v2-5                 | v7\n [onnx](https://onnx.ai)                           | X                    | X                  | X                    | O\n [theano](http://deeplearning.net/software/theano) | X                    | O                  | O                    | O\n [tensorflow](http://www.tensorflow.org)           | O                    | O                  | O                    | O\n [sonnet](https://github.com/deepmind/sonnet)      | X                    | X                  | X                    | O\n [pytorch](http://pytorch.org)                     | X                    | X                  | X                    | O\n [keras](https://keras.io)                         | O                    | O                  | O                    | O\n [lasagne](http://lasagne.readthedocs.io)          | X                    | O                  | O                    | O\n [mxnet](http://mxnet.incubator.apache.org)        | X                    | X                  | X                    | O\n [cntk](http://cntk.ai)                            | X                    | X                  | X                    | O\n [chainer](https://chainer.org)                    | X                    | X                  | X                    | O\n [caffe](http://caffe.berkeleyvision.org)          | O                    | O                  | O                    | O\n [caffe2](https://caffe2.ai)                       | X                    | X                  | X                    | O\n [torch](http://torch.ch/)                         | X                    | O                  | O                    | O\n [darknet](https://pjreddie.com/darknet/)          | X                    | X                  | X                    | O\n [paddlepaddle](https://www.paddlepaddle.org.cn/)  | X                    | X                  | X                    | O\n\n\n\n<a name=\"Tags\"/>\n\n# Tags\n\n\n<a name=\"Available-tags\"/>\n\n## Available Tags\n\n\n.                                                  | CUDA 11.3 / Python 3.8                                    | CPU-only / Python 3.8\n:------------------------------------------------: | :-------------------------------------------------------: | :-----------------------------------------:\n all-in-one                                        | `latest` `all` `all-py38` `py38-cu113` `all-py38-cu113`   | `all-py38-cpu` `all-cpu` `py38-cpu` `cpu`\n [TensorFlow](http://www.tensorflow.org)           | `tensorflow-py38-cu113` `tensorflow-py38` `tensorflow`    | `tensorflow-py38-cpu` `tensorflow-cpu`\n [PyTorch](http://pytorch.org)                     | `pytorch-py38-cu113` `pytorch-py38` `pytorch`             | `pytorch-py38-cpu` `pytorch-cpu`\n [Keras](https://keras.io)                         | `keras-py38-cu113` `keras-py38` `keras`                   | `keras-py38-cpu` `keras-cpu`\n [MXNet](http://mxnet.incubator.apache.org)        | `mxnet-py38-cu113` `mxnet-py38` `mxnet`                   | `mxnet-py38-cpu` `mxnet-cpu`\n [Chainer](https://chainer.org)                    | `chainer-py38-cu113` `chainer-py38` `chainer`             | `chainer-py38-cpu` `chainer-cpu`\n [Darknet](https://pjreddie.com/darknet/)          | `darknet-cu113` `darknet`                                 | `darknet-cpu`\n [paddlepaddle](https://www.paddlepaddle.org.cn/)  | `paddle-cu113` `paddle`                                   | `paddle-cpu`\n\n\n<a name=\"Deprecated-tags\"/>\n\n## Deprecated Tags\n\n.                                                  | CUDA 11.3 / Python 3.6         | CUDA 11.1 / Python 3.6         | CUDA 10.1 / Python 3.6         | CUDA 10.0 / Python 3.6         | CUDA 9.0 / Python 3.6                        | CUDA 9.0 / Python 2.7                    | CPU-only / Python 3.6                       | CPU-only / Python 2.7\n:------------------------------------------------: | :----------------------------: | :----------------------------: | :----------------------------: | :----------------------------: | :------------------------------------------: | :--------------------------------:       | :-----------------------------------------: | :----------------------------------------:\n all-in-one                                        | `py36-cu113` `all-py36-cu113`  | `py36-cu111` `all-py36-cu111`  | `py36-cu101` `all-py36-cu101`  | `py36-cu100` `all-py36-cu100`  | `py36-cu90` `all-py36-cu90`                  | `all-py27-cu90` `all-py27` `py27-cu90`   |                                             | `all-py27-cpu` `py27-cpu`\n all-in-one with jupyter                           |                                |                                |                                |                                | `all-jupyter-py36-cu90`                      | `all-py27-jupyter` `py27-jupyter`        |                                             | `all-py27-jupyter-cpu` `py27-jupyter-cpu`\n [Theano](http://deeplearning.net/software/theano) | `theano-py36-cu113`            | `theano-py36-cu111`            | `theano-py36-cu101`            | `theano-py36-cu100`            | `theano-py36-cu90`                           | `theano-py27-cu90` `theano-py27`         |                                             | `theano-py27-cpu`\n [TensorFlow](http://www.tensorflow.org)           | `tensorflow-py36-cu113`        | `tensorflow-py36-cu111`        | `tensorflow-py36-cu101`        | `tensorflow-py36-cu100`        | `tensorflow-py36-cu90`                       | `tensorflow-py27-cu90` `tensorflow-py27` |                                             | `tensorflow-py27-cpu`\n [Sonnet](https://github.com/deepmind/sonnet)      | `sonnet-py36-cu113`            | `sonnet-py36-cu111`            | `sonnet-py36-cu101`            | `sonnet-py36-cu100`            | `sonnet-py36-cu90`                           | `sonnet-py27-cu90` `sonnet-py27`         |                                             | `sonnet-py27-cpu`\n [PyTorch](http://pytorch.org)                     | `pytorch-py36-cu113`           | `pytorch-py36-cu111`           | `pytorch-py36-cu101`           | `pytorch-py36-cu100`           | `pytorch-py36-cu90`                          | `pytorch-py27-cu90` `pytorch-py27`       |                                             | `pytorch-py27-cpu`\n [Keras](https://keras.io)                         | `keras-py36-cu113`             | `keras-py36-cu111`             | `keras-py36-cu101`             | `keras-py36-cu100`             | `keras-py36-cu90`                            | `keras-py27-cu90` `keras-py27`           |                                             | `keras-py27-cpu`\n [Lasagne](http://lasagne.readthedocs.io)          | `lasagne-py36-cu113`           | `lasagne-py36-cu111`           | `lasagne-py36-cu101`           | `lasagne-py36-cu100`           | `lasagne-py36-cu90`                          | `lasagne-py27-cu90` `lasagne-py27`       |                                             | `lasagne-py27-cpu`\n [MXNet](http://mxnet.incubator.apache.org)        | `mxnet-py36-cu113`             | `mxnet-py36-cu111`             | `mxnet-py36-cu101`             | `mxnet-py36-cu100`             | `mxnet-py36-cu90`                            | `mxnet-py27-cu90` `mxnet-py27`           |                                             | `mxnet-py27-cpu`\n [CNTK](http://cntk.ai)                            | `cntk-py36-cu113`              | `cntk-py36-cu111`              | `cntk-py36-cu101`              | `cntk-py36-cu100`              | `cntk-py36-cu90`                             | `cntk-py27-cu90` `cntk-py27`             |                                             | `cntk-py27-cpu`\n [Chainer](https://chainer.org)                    | `chainer-py36-cu113`           | `chainer-py36-cu111`           | `chainer-py36-cu101`           | `chainer-py36-cu100`           | `chainer-py36-cu90`                          | `chainer-py27-cu90` `chainer-py27`       |                                             | `chainer-py27-cpu`\n [Caffe](http://caffe.berkeleyvision.org)          | `caffe-py36-cu113`             | `caffe-py36-cu111`             | `caffe-py36-cu101`             | `caffe-py36-cu100`             | `caffe-py36-cu90`                            | `caffe-py27-cu90` `caffe-py27`           |                                             | `caffe-py27-cpu`\n [Caffe2](https://caffe2.ai)                       |                                |                                |                                |                                | `caffe2-py36-cu90` `caffe2-py36` `caffe2`    | `caffe2-py27-cu90` `caffe2-py27`         | `caffe2-py36-cpu` `caffe2-cpu`              | `caffe2-py27-cpu`\n [Torch](http://torch.ch/)                         | `torch-cu113`                  | `torch-cu111`                  | `torch-cu101`                  | `torch-cu100`                  | `torch-cu90`                                 | `torch-cu90` `torch`                     |                                             | `torch-cpu`\n [Darknet](https://pjreddie.com/darknet/)          | `darknet-cu113`                | `darknet-cu111`                | `darknet-cu101`                | `darknet-cu100`                | `darknet-cu90`                               | `darknet-cu90` `darknet`                 |                                             | `darknet-cpu`\n\n\n<a name=\"Citation\"/>\n\n# Citation\n```\n@misc{ming2017deepo,\n    author = {Ming Yang},\n    title = {Deepo: set up deep learning environment in a single command line.},\n    year = {2017},\n    publisher = {GitHub},\n    journal = {GitHub repository},\n    howpublished = {\\url{https://github.com/ufoym/deepo}}\n}\n```\n<a name=\"Contributing\"/>\n\n# Contributing\n\nWe appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion. If you plan to contribute new features, utility functions or extensions, please first open an issue and discuss the feature with us.\n\n<a name=\"Licensing\"/>\n\n# Licensing\n\nDeepo is [MIT licensed](https://github.com/ufoym/deepo/blob/master/LICENSE).\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "theme: jekyll-theme-modernist"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}