{
  "metadata": {
    "timestamp": 1736560652325,
    "page": 292,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GreyDGL/PentestGPT",
      "stars": 7550,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.1201171875,
          "content": "version = 1\n\n[[analyzers]]\nname = \"python\"\n\n  [analyzers.meta]\n  runtime_version = \"3.x.x\"\n\n[[transformers]]\nname = \"black\""
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1142578125,
          "content": ".DS_Store\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\nconfig/chatgpt_config.py\noutputs/\n.idea\nlogs/\nutils/logs/\narchive/\ntest_history/\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\npoetry.lock\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n.aider*\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2023 Grey_D\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2158203125,
          "content": ".PHONY: build install clean format lint unittest test\n\nbuild: # force build\n\tpoetry build\n\ninstall:\n\tpoetry install\n\nformat: updatesetup\n\tisort pentestgpt\n\tblack pentestgpt\n\nupdatesetup:\n\tbash pentestgpt/scripts/update.sh"
        },
        {
          "name": "PentestGPT_design.md",
          "type": "blob",
          "size": 4.4228515625,
          "content": "## Design Documentation for PentestGPT\nThe current design is mainly for web penetration testing\n\n### General Design\nPentestGPT provides a unified terminal input handler, and backed by three main components:\n- A test generation module which generates the exact penetration testing commands or operations for the users to execute.\n- A test reasoning module which conducts the reasoning of the test, guiding the penetration testers on what to do next.\n- A parsing module which parses the output of the penetration tools and the contents on the webUI.\n\n### Function Design\nThe handler is the main entry point of the penetration testing tool. It allows pentesters to perform the following operations:\n1. (initialize itself with some pre-designed prompts.)\n2. Start a new penetration testing session by providing the target information.\n3. Ask for todo-list, and acquire the next step to perform.\n4. After completing the operation, pass the information to PentestGPT.\n   1. Pass a tool output.\n   2. Pass a webpage content.\n   3. Pass a human description.\n5. The generation module can also start a continuous mode, which helps the user to dig into a specific task.\n\n#### Logic Flow Design\n1. User initializes all the sessions. (**prompt**)\n2. User initializes the task by\n   1. **User** provides the target information to the **ReasoningSession**. \n   2. The **ReasoningSession** generates a *task-tree* based on the target information. \n   3. The **ReasoningSession** decides the first todo, and passes the information to the **GenerationSession**. \n   4. The **GenerationSession** generates the exact command for the user to execute, and passes it to the **User**. \n3. Go into the main loop. The **User** can pick to:\n   1. Provide todo execution results to PentestGPT.\n      1. The **User** provides the output of the tool to the **ParsingSession**. \n      2. The **ParsingSession** parses the output, and passes the information to the **ReasoningSession**.\n      3. The **ReasoningSession** updates the *task-tree* based on the information.\n      4. Do step 3.2.1-3.2.3\n   2. Ask for todos.\n      1. The **ReasoningSession** analyzes the *task-tree*. It decides the next todo, including (1) a natural language description, and (2) the exact command to execute.\n      2. The **ReasoningSession** passes the information to the **GenerationSession** for further verification.\n      3. The **GenerationSession** generates the exact command for the user to execute, and passes it to the **User**.\n   3. Discuss with PentestGPT by providing arbitrary information.\n      1. The **User** provides the information to the **ParsingSession**.\n      2. The **ParsingSession** parses the information:\n         - If it is too long, summarize it.\n         - Otherwise, just rephrase it.\n      3. The **ReasoningSession** analyzes the information, and updates the *task-tree*.\n\n   - Exit the program.\n\n\nA flow-chart is shown below:\n```mermaid\nsequenceDiagram\n    participant User\n    participant ReasoningSession\n    participant GenerationSession\n    participant ParsingSession\n\n    User->>+ReasoningSession: 1.1 Provides target information\n    ReasoningSession->>+ReasoningSession: 2.1 Generates task-tree\n    ReasoningSession->>+GenerationSession: 2.2 Decides first todo\n    GenerationSession->>+User: 2.3 Generates command\n    loop Main Loop\n        User->>+ParsingSession: 3.1 Provides todo execution results or arbitrary information\n        alt Provides todo execution results\n            ParsingSession->>+ReasoningSession: 3.2 Parses output\n            ReasoningSession->>+ReasoningSession: 3.3 Updates task-tree\n            ReasoningSession->>+GenerationSession: 3.4 Analyzes task-tree for next todo\n            GenerationSession->>+User: 3.5 Generates command\n        else Asks for todos\n            ReasoningSession->>+ReasoningSession: 3.2 Analyzes task-tree\n            ReasoningSession->>+GenerationSession: 3.3 Decides next todo\n            GenerationSession->>+User: 3.4 Generates command\n        else Discusses with PentestGPT\n            ParsingSession->>+ReasoningSession: 3.2 Parses information\n            opt Information is too long\n                ParsingSession->>+ParsingSession: 3.2.1 Summarizes information\n            end\n            ReasoningSession->>+ReasoningSession: 3.3 Analyzes information\n        end\n        User->>-ParsingSession: 3.1 Provides todo execution results or arbitrary information\n    end\n    User->>-PentestGPT: 4. Exit\n\n```\n\n#### Prompts\nThe prompts are stored in the `prompts/prompt_class.py`. \n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.0458984375,
          "content": "<!-- Improved compatibility of back to top link: See: https://github.com/othneildrew/Best-README-Template/pull/73 -->\n<a name=\"readme-top\"></a>\n\n<!-- PROJECT SHIELDS -->\n<!--\n*** I'm using markdown \"reference style\" links for readability.\n*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).\n*** See the bottom of this document for the declaration of the reference variables\n*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.\n*** https://www.markdownguide.org/basic-syntax/#reference-style-links\n-->\n[![Contributors][contributors-shield]][contributors-url]\n[![Forks][forks-shield]][forks-url]\n[![Stargazers][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n[![MIT License][license-shield]][license-url]\n[![Discord][discord-shield]][discord-url]\n\n\n\n<!-- PROJECT LOGO -->\n<br />\n<div align=\"center\">\n  <a href=\"https://github.com/GreyDGL/PentestGPT\">\n  </a>\n\n<h3 align=\"center\">PentestGPT</h3>\n\n  <p align=\"center\">\n    A GPT-empowered penetration testing tool. \n    <br />\n    <a href=\"https://github.com/GreyDGL/PentestGPT\"><strong>Explore the docs »</strong></a>\n    <br />\n    <br />\n    <a href=\"https://github.com/GreyDGL/PentestGPT/blob/main/PentestGPT_design.md\">Design Details</a>\n    ·\n    <a href=\"https://www.youtube.com/watch?v=lAjLIj1JT3c\">View Demo</a>\n    ·\n    <a href=\"https://github.com/GreyDGL/PentestGPT/issues\">Report Bug or Request Feature</a>\n    </p>\n</div>\n\n\n\n\n\n<!-- ABOUT THE PROJECT -->\n<a href=\"https://trendshift.io/repositories/3770\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/3770\" alt=\"GreyDGL%2FPentestGPT | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n## General Updates\n- [Update on 25/10/2024] We're completing the refactoring of PentestGPT and will release v1.0 soon!\n- [Update on 12/08/2024] The research paper on PentestGPT is published at [USENIX Security 2024](https://www.usenix.org/conference/usenixsecurity24/presentation/deng)\n- [Update on 25/03/2024] We're working on the next version of PentestGPT, with online searching, RAGs and more powerful prompting. Stay tuned!\n- [Update on 17/11/2023] GPTs for PentestGPT is out! Check this: https://chat.openai.com/g/g-4MHbTepWO-pentestgpt\n- [Update on 07/11/2023] GPT-4-turbo is out! Update the default API usage to GPT-4-turbo. \n- Available videos:\n  - The latest installation video is [here](https://youtu.be/tGC5z14dE24).\n  - **PentestGPT for OSCP-like machine: [HTB-Jarvis](https://youtu.be/lAjLIj1JT3c)**. This is the first part only, and I'll complete the rest when I have time.\n  - **PentestGPT on [HTB-Lame](https://youtu.be/Vs9DFtAkODM)**. This is an easy machine, but it shows you how PentestGPT skipped the rabbit hole and worked on other potential vulnerabilities.\n- **We're testing PentestGPT on HackTheBox**. You may follow [this link](https://www.hackthebox.com/home/users/profile/1489431). More details will be released soon.\n- Feel free to join the [Discord Channel](https://discord.gg/eC34CEfEkK) for more updates and share your ideas!\n\n\n<!-- Quick Start -->\n## Quick Start\n1. Create a virtual environment if necessary. (`virtualenv -p python3 venv`, `source venv/bin/activate`)\n2. Install the project with `pip3 install git+https://github.com/GreyDGL/PentestGPT`\n3. **Ensure that you have link a payment method to your OpenAI account.** Export your API key with `export OPENAI_API_KEY='<your key here>'`,export API base with `export OPENAI_BASEURL='https://api.xxxx.xxx/v1'`if you need.\n4. Test the connection with `pentestgpt-connection`\n5. For Kali Users: use `tmux` as terminal environment. You can do so by simply run `tmux` in the native terminal.\n6. To start: `pentestgpt --logging`\n\n\n<!-- GETTING STARTED -->\n## Getting Started\n- **PentestGPT** is a penetration testing tool empowered by **ChatGPT**. \n- It is designed to automate the penetration testing process. It is built on top of ChatGPT and operate in an interactive mode to guide penetration testers in both overall progress and specific operations.\n- **PentestGPT** is able to solve easy to medium HackTheBox machines, and other CTF challenges. You can check [this](./resources/README.md) example in `resources` where we use it to solve HackTheBox challenge **TEMPLATED** (web challenge). \n- A sample testing process of **PentestGPT** on a target VulnHub machine (Hackable II) is available at [here](./resources/PentestGPT_Hackable2.pdf).\n- A sample usage video is below: (or available here: [Demo](https://youtu.be/h0k6kWWaCEU))\n\n<!-- Common Questions -->\n## Common Questions\n- **Q**: What is PentestGPT?\n  - **A**: PentestGPT is a penetration testing tool empowered by Large Language Models (LLMs). It is designed to automate the penetration testing process. It is built on top of ChatGPT API and operate in an interactive mode to guide penetration testers in both overall progress and specific operations.\n- **Q**: Do I need to pay to use PentestGPT?\n  - **A**: Yes in order to achieve the best performance. In general, you can use any LLMs you want, but you're recommended to use GPT-4 API, for which you have to [link a payment method to OpenAI](https://help.openai.com/en/collections/3943089-billing?q=API). \n- **Q**: Why GPT-4?\n  - **A**: After empirical evaluation, we find that GPT-4 performs better than GPT-3.5 and other LLMs in terms of penetration testing reasoning. In fact, GPT-3.5 leads to failed test in simple tasks.\n- **Q**: Why not just use GPT-4 directly?\n  - **A**: We found that GPT-4 suffers from losses of context as test goes deeper. It is essential to maintain a \"test status awareness\" in this process. You may check the [PentestGPT Arxiv Paper](https://arxiv.org/abs/2308.06782) for details.\n- **Q**: Can I use local GPT models?\n  - **A**: Yes. We support local LLMs with custom parser. Look at examples [here](./pentestgpt/utils/APIs/gpt4all_api.py).\n\n\n## Installation\nPentestGPT is tested under `Python 3.10`. Other Python3 versions should work but are not tested.\n### Install with pip\n**PentestGPT** relies on **OpenAI API** to achieve high-quality reasoning. You may refer to the installation video [here](https://youtu.be/tGC5z14dE24).\n1. Install the latest version with `pip3 install git+https://github.com/GreyDGL/PentestGPT`\n   - You may also clone the project to local environment and install for better customization and development\n     - `git clone https://github.com/GreyDGL/PentestGPT`\n     - `cd PentestGPT`\n     - `pip3 install -e .`\n2. To use OpenAI API\n   - **Ensure that you have link a payment method to your OpenAI account.**\n   - export your API key with `export OPENAI_API_KEY='<your key here>'`\n   - export API base with `export OPENAI_BASEURL='https://api.xxxx.xxx/v1'`if you need.\n   - Test the connection with `pentestgpt-connection`\n3. To verify that the connection is configured properly, you may run `pentestgpt-connection`. After a while, you should see some sample conversation with ChatGPT.\n   - A sample output is below\n   ```\n   You're testing the connection for PentestGPT v 0.11.0\n   #### Test connection for OpenAI api (GPT-4)\n   1. You're connected with OpenAI API. You have GPT-4 access. To start PentestGPT, please use <pentestgpt --reasoning_model=gpt-4>\n   \n   #### Test connection for OpenAI api (GPT-3.5)\n   2. You're connected with OpenAI API. You have GPT-3.5 access. To start PentestGPT, please use <pentestgpt --reasoning_model=gpt-3.5-turbo-16k>\n   ```\n   - notice: if you have not linked a payment method to your OpenAI account, you will see error messages.\n4. The ChatGPT cookie solution is deprecated and not recommended. You may still use it by running `pentestgpt --reasoning_model=gpt-4 --useAPI=False`. \n\n\n### Build from Source\n1. Clone the repository to your local environment.\n2. Ensure that `poetry` is installed. If not, please refer to the [poetry installation guide](https://python-poetry.org/docs/).\n3. \n\n<!-- USAGE EXAMPLES -->\n\n## Usage\n1. **You are recommended to run**:\n   - (recommended) - `pentestgpt --reasoning_model=gpt-4-turbo` to use the latest GPT-4-turbo API.\n   - `pentestgpt --reasoning_model=gpt-4` if you have access to GPT-4 API.\n   - `pentestgpt --reasoning_model=gpt-3.5-turbo-16k` if you only have access to GPT-3.5 API.\n   \n2. To start, run `pentestgpt --args`.\n    - `--help` show the help message\n    - `--reasoning_model` is the reasoning model you want to use. \n    - `--parsing_model` is the parsing model you want to use. \n    - `--useAPI` is whether you want to use OpenAI API. By default it is set to `True`.\n    - `--log_dir` is the customized log output directory. The location is a relative directory.\n    - `--logging` defines if you would like to share the logs with us. By default it is set to `False`.\n3. The tool works similar to *msfconsole*. Follow the guidance to perform penetration testing. \n4. In general, PentestGPT intakes commands similar to chatGPT. There are several basic commands.\n   1. The commands are: \n      - `help`: show the help message.\n      - `next`: key in the test execution result and get the next step.\n      - `more`: let **PentestGPT** to explain more details of the current step. Also, a new sub-task solver will be created to guide the tester.\n      - `todo`: show the todo list.\n      - `discuss`: discuss with the **PentestGPT**.\n      - `google`: search on Google. This function is still under development.\n      - `quit`: exit the tool and save the output as log file (see the **reporting** section below).\n   2. You can use <SHIFT + right arrow> to end your input (and <ENTER> is for next line).\n   3. You may always use `TAB` to autocomplete the commands.\n   4. When you're given a drop-down selection list, you can use cursor or arrow key to navigate the list. Press `ENTER` to select the item. Similarly, use <SHIFT + right arrow> to confirm selection.\\\n      The user can submit info about:\n        * **tool**: output of the security test tool used\n        * **web**: relevant content of a web page\n        * **default**: whatever you want, the tool will handle it\n        * **user-comments**: user comments about PentestGPT operations\n5. In the sub-task handler initiated by `more`, users can execute more commands to investigate into a specific problem:\n   1. The commands are:\n        - `help`: show the help message.\n        - `brainstorm`: let PentestGPT brainstorm on the local task for all the possible solutions.\n        - `discuss`: discuss with PentestGPT about this local task.\n        - `google`: search on Google. This function is still under development.\n        - `continue`: exit the subtask and continue the main testing session.\n\n### Report and Logging\n1. [Update] If you would like us to collect the logs to improve the tool, please run `pentestgpt --logging`. We will only collect the LLM usage, without any information related to your OpenAI key.\n2. After finishing the penetration testing, a report will be automatically generated in `logs` folder (if you quit with `quit` command).\n3. The report can be printed in a human-readable format by running `python3 utils/report_generator.py <log file>`. A sample report `sample_pentestGPT_log.txt` is also uploaded.\n\n## Custom Model Endpoints and Local LLMs\nPentestGPT now support local LLMs, but the prompts are only optimized for GPT-4.\n- To use local GPT4ALL model, you may run `pentestgpt --reasoning_model=gpt4all --parsing_model=gpt4all`.\n- To select the particular model you want to use with GPT4ALL, you may update the `module_mapping` class in `pentestgpt/utils/APIs/module_import.py`.\n- You can also follow the examples of `module_import.py`, `gpt4all.py` and `chatgpt_api.py` to create API support for your own model.\n\n## Citation\nPlease cite our paper at:\n```\n@inproceedings {299699,\nauthor = {Gelei Deng and Yi Liu and V{\\'\\i}ctor Mayoral-Vilches and Peng Liu and Yuekang Li and Yuan Xu and Tianwei Zhang and Yang Liu and Martin Pinzger and Stefan Rass},\ntitle = {{PentestGPT}: Evaluating and Harnessing Large Language Models for Automated Penetration Testing},\nbooktitle = {33rd USENIX Security Symposium (USENIX Security 24)},\nyear = {2024},\nisbn = {978-1-939133-44-1},\naddress = {Philadelphia, PA},\npages = {847--864},\nurl = {https://www.usenix.org/conference/usenixsecurity24/presentation/deng},\npublisher = {USENIX Association},\nmonth = aug\n}\n```\n\n<!-- LICENSE -->\n## License\n\nDistributed under the MIT License. See `LICENSE.txt` for more information.\nThe tool is for educational purpose only and the author does not condone any illegal use. Use as your own risk.\n\n\n\n<!-- CONTACT -->\n## Contact the Contributors!\n\n- Gelei Deng - [![LinkedIn][linkedin-shield]][linkedin-url] - gelei.deng@ntu.edu.sg\n- Víctor Mayoral Vilches - [![LinkedIn][linkedin-shield]][linkedin-url2] - v.mayoralv@gmail.com\n- Yi Liu - yi009@e.ntu.edu.sg\n- Peng Liu - liu_peng@i2r.a-star.edu.sg\n- Yuekang Li - yuekang.li@unsw.edu.au\n\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n\n\n\n<!-- MARKDOWN LINKS & IMAGES -->\n<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->\n[contributors-shield]: https://img.shields.io/github/contributors/GreyDGL/PentestGPT.svg?style=for-the-badge\n[contributors-url]: https://github.com/GreyDGL/PentestGPT/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/GreyDGL/PentestGPT.svg?style=for-the-badge\n[forks-url]: https://github.com/GreyDGL/PentestGPT/network/members\n[stars-shield]: https://img.shields.io/github/stars/GreyDGL/PentestGPT.svg?style=for-the-badge\n[stars-url]: https://github.com/GreyDGL/PentestGPT/stargazers\n[issues-shield]: https://img.shields.io/github/issues/GreyDGL/PentestGPT.svg?style=for-the-badge\n[issues-url]: https://github.com/GreyDGL/PentestGPT/issues\n[license-shield]: https://img.shields.io/github/license/GreyDGL/PentestGPT.svg?style=for-the-badge\n[license-url]: https://github.com/GreyDGL/PentestGPT/blob/master/LICENSE.txt\n[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555\n[linkedin-url]: https://www.linkedin.com/in/gelei-deng-225a10112/\n[linkedin-url2]: https://www.linkedin.com/in/vmayoral/\n[discord-shield]: https://dcbadge.vercel.app/api/server/eC34CEfEkK\n[discord-url]: https://discord.gg/eC34CEfEkK\n[product-screenshot]: images/screenshot.png\n[Next.js]: https://img.shields.io/badge/next.js-000000?style=for-the-badge&logo=nextdotjs&logoColor=white\n[Next-url]: https://nextjs.org/\n[React.js]: https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB\n[React-url]: https://reactjs.org/\n[Vue.js]: https://img.shields.io/badge/Vue.js-35495E?style=for-the-badge&logo=vuedotjs&logoColor=4FC08D\n[Vue-url]: https://vuejs.org/\n[Angular.io]: https://img.shields.io/badge/Angular-DD0031?style=for-the-badge&logo=angular&logoColor=white\n[Angular-url]: https://angular.io/\n[Svelte.dev]: https://img.shields.io/badge/Svelte-4A4A55?style=for-the-badge&logo=svelte&logoColor=FF3E00\n[Svelte-url]: https://svelte.dev/\n[Laravel.com]: https://img.shields.io/badge/Laravel-FF2D20?style=for-the-badge&logo=laravel&logoColor=white\n[Laravel-url]: https://laravel.com\n[Bootstrap.com]: https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&logo=bootstrap&logoColor=white\n[Bootstrap-url]: https://getbootstrap.com\n[JQuery.com]: https://img.shields.io/badge/jQuery-0769AD?style=for-the-badge&logo=jquery&logoColor=white\n[JQuery-url]: https://jquery.com\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pentestgpt",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.958984375,
          "content": "[tool.poetry]\nname = \"pentestgpt\"\nversion = \"0.14.0\"\ndescription = \"PentestGPT is an LLM-powered penetration testing tool.\"\nauthors = [\"Gelei Deng <GELEI.DENG@ntu.edu.sg>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \">=3.10,<4.0\"\nrequests = \"^2.31.0\"\npyyaml = \"^6.0.1\"\nsqlmap = \"^1.8.3\"\nblack = \"^24.3.0\"\nloguru = \"^0.7.2\"\nbeautifulsoup4 = \">=4.11.2,<4.12.0\"\ncolorama = \"^0.4.6\"\nrich = \"^13.7.1\"\nprompt-toolkit = \"^3.0.43\"\ngoogle = \"^3.0.0\"\npytest = \"^8.1.1\"\nopenai = \"^1.29.0\"\nlangchain = \"^0.1.13\"\ntiktoken = \"^0.6.0\"\npycookiecheat = \"^0.6.0\"\ntenacity = \"^8.2.3\"\ngpt4all = \"^2.3.0\"\npinecone-client = \"^3.2.0\"\nlangfuse = \"1.9.2\"\nnewspaper3k = \"^0.2.8\"\ngoogle-generativeai= \"^0.5.2\" \ntoml = \"^0.10.2\"\n\n[tool.poetry.scripts]\npentestgpt=\"pentestgpt.main:main\"\npentestgpt-connection=\"pentestgpt.test_connection:main\"\npentestgpt-cookie=\"pentestgpt.extract_cookie:main\"\n\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 9.0146484375,
          "content": "aiohappyeyeballs==2.4.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\naiohttp==3.10.10 ; python_version >= \"3.10\" and python_version < \"4.0\"\naiosignal==1.3.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nannotated-types==0.7.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nanyio==4.6.2.post1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nasync-timeout==4.0.3 ; python_version >= \"3.10\" and python_version < \"3.11\"\nattrs==24.2.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nbackoff==2.2.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nbeautifulsoup4==4.11.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nblack==24.10.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncachetools==5.5.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncertifi==2024.8.30 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncffi==1.17.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncharset-normalizer==3.4.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nclick==8.1.7 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncolorama==0.4.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncryptography==41.0.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\ncssselect==1.2.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ndataclasses-json==0.6.7 ; python_version >= \"3.10\" and python_version < \"4.0\"\ndistro==1.9.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nexceptiongroup==1.2.2 ; python_version >= \"3.10\" and python_version < \"3.11\"\nfeedfinder2==0.0.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\nfeedparser==6.0.11 ; python_version >= \"3.10\" and python_version < \"4.0\"\nfilelock==3.16.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nfrozenlist==1.5.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-ai-generativelanguage==0.6.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-api-core==2.22.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-api-core[grpc]==2.22.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-api-python-client==2.151.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-auth-httplib2==0.2.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-auth==2.35.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle-generativeai==0.5.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogle==3.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngoogleapis-common-protos==1.65.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngpt4all==2.8.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngreenlet==3.1.1 ; python_version < \"3.13\" and (platform_machine == \"aarch64\" or platform_machine == \"ppc64le\" or platform_machine == \"x86_64\" or platform_machine == \"amd64\" or platform_machine == \"AMD64\" or platform_machine == \"win32\" or platform_machine == \"WIN32\") and python_version >= \"3.10\"\ngrpcio-status==1.62.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\ngrpcio==1.67.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nh11==0.14.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nhttpcore==1.0.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\nhttplib2==0.22.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nhttpx==0.25.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nidna==3.10 ; python_version >= \"3.10\" and python_version < \"4.0\"\nimportlib-metadata==8.5.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\niniconfig==2.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\njeepney==0.8.0 ; python_version >= \"3.10\" and python_version < \"4.0\" and sys_platform == \"linux\"\njieba3k==0.35.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\njiter==0.7.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\njoblib==1.4.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\njsonpatch==1.33 ; python_version >= \"3.10\" and python_version < \"4.0\"\njsonpointer==3.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nkeyring==23.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlangchain-community==0.0.38 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlangchain-core==0.1.52 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlangchain-text-splitters==0.0.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlangchain==0.1.20 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlangfuse==1.9.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlangsmith==0.1.139 ; python_version >= \"3.10\" and python_version < \"4.0\"\nloguru==0.7.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nlxml==5.3.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nmarkdown-it-py==3.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nmarshmallow==3.23.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nmdurl==0.1.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nmonotonic==1.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\nmultidict==6.1.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nmypy-extensions==1.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nnewspaper3k==0.2.8 ; python_version >= \"3.10\" and python_version < \"4.0\"\nnltk==3.9.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nnumpy==1.26.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\nopenai==1.53.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\norjson==3.10.10 ; python_version >= \"3.10\" and python_version < \"4.0\"\npackaging==23.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\npathspec==0.12.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\npillow==11.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npinecone-client==3.2.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nplatformdirs==4.3.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\npluggy==1.5.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nprompt-toolkit==3.0.48 ; python_version >= \"3.10\" and python_version < \"4.0\"\npropcache==0.2.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nproto-plus==1.25.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nprotobuf==4.25.5 ; python_version >= \"3.10\" and python_version < \"4.0\"\npyasn1-modules==0.4.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\npyasn1==0.6.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\npycookiecheat==0.6.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npycparser==2.22 ; python_version >= \"3.10\" and python_version < \"4.0\"\npydantic-core==2.23.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\npydantic==2.9.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\npygments==2.18.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npyparsing==3.2.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npytest==8.3.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\npython-dateutil==2.9.0.post0 ; python_version >= \"3.10\" and python_version < \"4.0\"\npytz==2023.4 ; python_version >= \"3.10\" and python_version < \"4.0\"\npywin32-ctypes==0.2.3 ; python_version >= \"3.10\" and python_version < \"4.0\" and sys_platform == \"win32\"\npyyaml==6.0.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\nregex==2024.9.11 ; python_version >= \"3.10\" and python_version < \"4.0\"\nrequests-file==2.1.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nrequests-toolbelt==1.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nrequests==2.32.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\nrich==13.9.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\nrsa==4.9 ; python_version >= \"3.10\" and python_version < \"4\"\nsecretstorage==3.3.3 ; python_version >= \"3.10\" and python_version < \"4.0\" and sys_platform == \"linux\"\nsgmllib3k==1.0.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsix==1.16.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsniffio==1.3.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsoupsieve==2.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsqlalchemy==2.0.36 ; python_version >= \"3.10\" and python_version < \"4.0\"\nsqlmap==1.8.10 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntenacity==8.5.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntiktoken==0.6.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntinysegmenter==0.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntldextract==5.1.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntoml==0.10.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntomli==2.0.2 ; python_version >= \"3.10\" and python_version < \"3.11\"\ntqdm==4.66.6 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntyping-extensions==4.12.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\ntyping-inspect==0.9.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nuritemplate==4.1.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nurllib3==2.2.3 ; python_version >= \"3.10\" and python_version < \"4.0\"\nwcwidth==0.2.13 ; python_version >= \"3.10\" and python_version < \"4.0\"\nwin32-setctime==1.1.0 ; python_version >= \"3.10\" and python_version < \"4.0\" and sys_platform == \"win32\"\nwrapt==1.14.0 ; python_version >= \"3.10\" and python_version < \"4.0\"\nyarl==1.17.1 ; python_version >= \"3.10\" and python_version < \"4.0\"\nzipp==3.20.2 ; python_version >= \"3.10\" and python_version < \"4.0\"\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.4580078125,
          "content": "import os\nfrom collections import OrderedDict\nfrom setuptools import find_packages, setup\n\nwith open(os.path.join(os.path.dirname(__file__), \"requirements.txt\")) as f:\n    dependencies = f.read().strip().split(\"\\n\")\n\nsetup(\n    name=\"pentestgpt\",\n    version=\"0.14.0\",\n    description=\"PentestGPT, a GPT-empowered penetration testing tool\",\n    long_description=\"\"\"\n    PentestGPT is a penetration testing tool empowered by ChatGPT.\n    It is designed to automate the penetration testing process. It\n    is prototyped initially on top of ChatGPT and operate in an\n    interactive mode to guide penetration testers in both overall\n    progress and specific operations.\n    \"\"\",\n    author=\"Gelei Deng\",\n    author_email=\"gelei.deng@ntu.edu.sg\",\n    maintainer=\"Gelei Deng\",\n    maintainer_email=\"gelei.deng@ntu.edu.sg\",\n    url=\"https://github.com/GreyDGL/PentestGPT\",\n    project_urls=OrderedDict(\n        (\n            (\"Code\", \"https://github.com/GreyDGL/PentestGPT\"),\n            (\"Issue tracker\", \"https://github.com/GreyDGL/PentestGPT/issues\"),\n        )\n    ),\n    license=\"MIT License\",\n    packages=[\"pentestgpt\"] + find_packages(),\n    # packages=find_packages(),\n    # scripts=['pentestgpt/main.py'],\n    install_requires=dependencies,\n    entry_points={\n        \"console_scripts\": [\n            \"pentestgpt=pentestgpt.main:main\",\n            \"pentestgpt-cookie=pentestgpt.extract_cookie:main\",\n            \"pentestgpt-connection=pentestgpt.test_connection:main\",\n        ]\n    },\n)\n"
        },
        {
          "name": "tasks",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_history",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}