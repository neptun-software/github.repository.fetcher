{
  "metadata": {
    "timestamp": 1736560610704,
    "page": 239,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "carson-katri/dream-textures",
      "stars": 7891,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.041015625,
          "content": ".DS_Store\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.python_dependencies.zip\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n"
        },
        {
          "name": ".python_dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.193359375,
          "content": "![Dream Textures, subtitle: Stable Diffusion built-in to Blender](docs/assets/banner.png)\n\n[![Latest Release](https://flat.badgen.net/github/release/carson-katri/dream-textures)](https://github.com/carson-katri/dream-textures/releases/latest)\n[![Join the Discord](https://flat.badgen.net/badge/icon/discord?icon=discord&label)](https://discord.gg/EmDJ8CaWZ7)\n[![Total Downloads](https://img.shields.io/github/downloads/carson-katri/dream-textures/total?style=flat-square)](https://github.com/carson-katri/dream-textures/releases/latest)\n[![Buy on Blender Market](https://flat.badgen.net/badge/buy/blender%20market/orange)](https://www.blendermarket.com/products/dream-textures)\n\n* Create textures, concept art, background assets, and more with a simple text prompt\n* Use the 'Seamless' option to create textures that tile perfectly with no visible seam\n* Texture entire scenes with 'Project Dream Texture' and depth to image\n* Re-style animations with the Cycles render pass\n* Run the models on your machine to iterate without slowdowns from a service\n\n# Installation\nDownload the [latest release](https://github.com/carson-katri/dream-textures/releases/latest) and follow the instructions there to get up and running.\n\n> On macOS, it is possible you will run into a quarantine issue with the dependencies. To work around this, run the following command in the app `Terminal`: `xattr -r -d com.apple.quarantine ~/Library/Application\\ Support/Blender/3.3/scripts/addons/dream_textures/.python_dependencies`. This will allow the PyTorch `.dylib`s and `.so`s to load without having to manually allow each one in System Preferences.\n\nIf you want a visual guide to installation, see this video tutorial from Ashlee Martino-Tarr: https://youtu.be/kEcr8cNmqZk\n> Ensure you always install the [latest version](https://github.com/carson-katri/dream-textures/releases/latest) of the add-on if any guides become out of date.\n\n# Usage\n\nHere's a few quick guides:\n\n## [Setting Up](https://github.com/carson-katri/dream-textures/wiki/Setup)\nSetup instructions for various platforms and configurations.\n\n## [Image Generation](https://github.com/carson-katri/dream-textures/wiki/Image-Generation)\nCreate textures, concept art, and more with text prompts. Learn how to use the various configuration options to get exactly what you're looking for.\n\n![A graphic showing each step of the image generation process](docs/assets/image_generation.png)\n\n## [Texture Projection](https://github.com/carson-katri/dream-textures/wiki/Texture-Projection)\nTexture entire models and scenes with depth to image.\n\n![A graphic showing each step of the texture projection process](docs/assets/texture_projection.png)\n\n## [Inpaint/Outpaint](https://github.com/carson-katri/dream-textures/wiki/Inpaint-and-Outpaint)\nInpaint to fix up images and convert existing textures into seamless ones automatically.\n\nOutpaint to increase the size of an image by extending it in any direction.\n\n![A graphic showing each step of the outpainting process](docs/assets/inpaint_outpaint.png)\n\n## [Render Engine](https://github.com/carson-katri/dream-textures/wiki/Render-Engine)\nUse the Dream Textures node system to create complex effects.\n\n![A graphic showing each frame of a render, split with the scene and generated result](docs/assets/render_pass.png)\n\n## [AI Upscaling](https://github.com/carson-katri/dream-textures/wiki/AI-Upscaling)\nUpscale your low-res generations 4x.\n\n![A graphic showing each step of the upscaling process](docs/assets/upscale.png)\n\n## [History](https://github.com/carson-katri/dream-textures/wiki/History)\nRecall, export, and import history entries for later use.\n\n# Compatibility\nDream Textures has been tested with CUDA and Apple Silicon GPUs. Over 4GB of VRAM is recommended.\n\nIf you have an issue with a supported GPU, please create an issue.\n\n### Cloud Processing\nIf your hardware is unsupported, you can use DreamStudio to process in the cloud. Follow the instructions in the release notes to setup with DreamStudio.\n\n# Contributing\nFor detailed instructions on installing from source, see the guide on [setting up a development environment](https://github.com/carson-katri/dream-textures/wiki/Setting-Up-a-Development-Environment).\n\n# Troubleshooting\n\nIf you are experiencing trouble getting Dream Textures running, check Blender's system console (in the top left under the \"Window\" dropdown next to \"File\" and \"Edit\") for any error messages. Then [search in the issues list](https://github.com/carson-katri/dream-textures/issues?q=is%3Aissue) with your error message and symptoms.\n\n> **Note** On macOS there is no option to open the system console. Instead, you can get logs by opening the app *Terminal*, entering the command `/Applications/Blender.app/Contents/MacOS/Blender` and pressing the Enter key. This will launch Blender and any error messages will show up in the Terminal app.\n\n![A screenshot of the \"Window\" > \"Toggle System Console\" menu action in Blender](docs/assets/readme-toggle-console.png)\n\nFeatures and feedback are also accepted on the issues page. If you have any issues that aren't listed, feel free to add them there!\n\nThe [Dream Textures Discord server](https://discord.gg/EmDJ8CaWZ7) also has a common issues list and strong community of helpful people, so feel free to come by for some help there as well.\n\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 7.71484375,
          "content": "# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nbl_info = {\n    \"name\": \"Dream Textures\",\n    \"author\": \"Dream Textures contributors\",\n    \"description\": \"Use Stable Diffusion to generate unique textures straight from the shader editor.\",\n    \"blender\": (3, 1, 0),\n    \"version\": (0, 4, 1),\n    \"location\": \"Image Editor -> Sidebar -> Dream\",\n    \"category\": \"Paint\"\n}\n\nfrom multiprocessing import current_process\n\nif current_process().name != \"__actor__\":\n    import bpy\n    from bpy.props import IntProperty, PointerProperty, EnumProperty, BoolProperty, CollectionProperty\n    import sys\n    import os\n\n    module_name = os.path.basename(os.path.dirname(__file__))\n    def clear_modules():\n        for name in list(sys.modules.keys()):\n            if name.startswith(module_name) and name != module_name:\n                del sys.modules[name]\n    clear_modules() # keep before all addon imports\n\n    from .render_pass import register_render_pass, unregister_render_pass, pass_inputs\n    from .prompt_engineering import *\n    from .operators.open_latest_version import check_for_updates\n    from .operators.project import framebuffer_arguments\n    from .classes import CLASSES, PREFERENCE_CLASSES\n    from .tools import TOOLS\n    from .operators.dream_texture import DreamTexture, kill_generator\n    from .property_groups.dream_prompt import DreamPrompt\n    from .property_groups.seamless_result import SeamlessResult\n    from .ui.presets import register_default_presets\n    \n    from . import engine\n\n    from .diffusers_backend import DiffusersBackend\n\n    requirements_path_items = (\n        ('requirements/win-linux-cuda.txt', 'Linux/Windows (CUDA)', 'Linux or Windows with NVIDIA GPU'),\n        ('requirements/mac-mps-cpu.txt', 'Apple Silicon', 'Apple M1/M2'),\n        ('requirements/linux-rocm.txt', 'Linux (AMD)', 'Linux with AMD GPU'),\n        ('requirements/win-dml.txt', 'Windows (DirectML)', 'Windows with DirectX 12 GPU'),\n        ('requirements/dreamstudio.txt', 'DreamStudio', 'Cloud Compute Service')\n    )\n\n    def register():\n        dt_op = bpy.ops\n        for name in DreamTexture.bl_idname.split(\".\"):\n            dt_op = getattr(dt_op, name)\n        if hasattr(bpy.types, dt_op.idname()): # objects under bpy.ops are created on the fly, have to check that it actually exists a little differently\n            raise RuntimeError(\"Another instance of Dream Textures is already running.\")\n\n        bpy.types.Scene.dream_textures_requirements_path = EnumProperty(name=\"Platform\", items=requirements_path_items, description=\"Specifies which set of dependencies to install\", default='requirements/mac-mps-cpu.txt' if sys.platform == 'darwin' else 'requirements/win-linux-cuda.txt')\n\n        for cls in PREFERENCE_CLASSES:\n            bpy.utils.register_class(cls)\n        \n        bpy.types.Scene.dream_textures_history = CollectionProperty(type=DreamPrompt)\n\n        check_for_updates()\n\n        bpy.types.Scene.dream_textures_prompt = PointerProperty(type=DreamPrompt)\n        bpy.types.Scene.dream_textures_prompt_file = PointerProperty(type=bpy.types.Text)\n        bpy.types.Scene.init_img = PointerProperty(name=\"Init Image\", type=bpy.types.Image)\n        bpy.types.Scene.init_mask = PointerProperty(name=\"Init Mask\", type=bpy.types.Image)\n        bpy.types.Scene.init_depth = PointerProperty(name=\"Init Depth\", type=bpy.types.Image, description=\"Use an existing depth map. Leave blank to generate one from the init image\")\n        bpy.types.Scene.seamless_result = PointerProperty(type=SeamlessResult)\n        def get_selection_preview(self):\n            history = bpy.context.scene.dream_textures_history\n            if self.dream_textures_history_selection > 0 and self.dream_textures_history_selection < len(history):\n                return history[self.dream_textures_history_selection].generate_prompt()\n            return \"\"\n        bpy.types.Scene.dream_textures_history_selection = IntProperty(default=1)\n        bpy.types.Scene.dream_textures_history_selection_preview = bpy.props.StringProperty(name=\"\", default=\"\", get=get_selection_preview, set=lambda _, __: None)\n        bpy.types.Scene.dream_textures_progress = bpy.props.IntProperty(name=\"\", default=0, min=0, max=0)\n        bpy.types.Scene.dream_textures_info = bpy.props.StringProperty(name=\"Info\")\n        bpy.types.Scene.dream_textures_last_execution_time = bpy.props.StringProperty(name=\"Last Execution Time\", default=\"\")\n\n        bpy.types.Scene.dream_textures_viewport_enabled = BoolProperty(name=\"Viewport Enabled\", default=False)\n        bpy.types.Scene.dream_textures_render_properties_enabled = BoolProperty(default=False)\n        bpy.types.Scene.dream_textures_render_properties_prompt = PointerProperty(type=DreamPrompt)\n        bpy.types.Scene.dream_textures_render_properties_pass_inputs = EnumProperty(name=\"Pass Inputs\", items=pass_inputs)\n        \n        bpy.types.Scene.dream_textures_upscale_prompt = PointerProperty(type=DreamPrompt)\n        bpy.types.Scene.dream_textures_upscale_tile_size = IntProperty(name=\"Tile Size\", default=128, step=64, min=64, max=512)\n        bpy.types.Scene.dream_textures_upscale_blend = IntProperty(name=\"Blend\", default=32, step=8, min=0, max=512)\n        bpy.types.Scene.dream_textures_upscale_seamless_result = PointerProperty(type=SeamlessResult)\n        \n        bpy.types.Scene.dream_textures_project_prompt = PointerProperty(type=DreamPrompt)\n        bpy.types.Scene.dream_textures_project_framebuffer_arguments = EnumProperty(name=\"Inputs\", items=framebuffer_arguments)\n        bpy.types.Scene.dream_textures_project_bake = BoolProperty(name=\"Bake\", default=False, description=\"Re-maps the generated texture onto the specified UV map\")\n        def project_use_controlnet(self, context):\n            if self.dream_textures_project_use_control_net:\n                if len(self.dream_textures_project_prompt.control_nets) < 1:\n                    self.dream_textures_project_prompt.control_nets.add()\n            else:\n                self.dream_textures_project_prompt.control_nets.clear()\n        bpy.types.Scene.dream_textures_project_use_control_net = BoolProperty(name=\"Use ControlNet\", default=False, description=\"Use a depth ControlNet instead of a depth model\", update=project_use_controlnet)\n\n        engine.register()\n\n        for cls in CLASSES:\n            bpy.utils.register_class(cls)\n\n        for tool in TOOLS:\n            bpy.utils.register_tool(tool)\n\n        bpy.types.Scene.dream_textures_render_engine = PointerProperty(type=engine.DreamTexturesRenderEngineProperties)\n\n        bpy.types.RENDER_PT_context.append(engine.draw_device)\n\n        # Monkey patch cycles render passes\n        register_render_pass()\n\n        register_default_presets()\n        \n        # Register the default backend.\n        bpy.utils.register_class(DiffusersBackend)\n\n    def unregister():\n        for cls in PREFERENCE_CLASSES:\n            bpy.utils.unregister_class(cls)\n\n        for cls in CLASSES:\n            bpy.utils.unregister_class(cls)\n        for tool in TOOLS:\n            bpy.utils.unregister_tool(tool)\n\n        bpy.types.RENDER_PT_context.remove(engine.draw_device)\n\n        engine.unregister()\n        \n        unregister_render_pass()\n\n        # Unregister the default backend\n        bpy.utils.unregister_class(DiffusersBackend)\n\n        kill_generator()"
        },
        {
          "name": "absolute_path.py",
          "type": "blob",
          "size": 0.427734375,
          "content": "import os\n\ndef absolute_path(component: str):\n    \"\"\"\n    Returns the absolute path to a file in the addon directory.\n\n    Alternative to `os.abspath` that works the same on macOS and Windows.\n    \"\"\"\n    return os.path.join(os.path.dirname(os.path.realpath(__file__)), component)\n\nREAL_ESRGAN_WEIGHTS_PATH = absolute_path(\"weights/realesrgan/realesr-general-x4v3.pth\")\nCLIPSEG_WEIGHTS_PATH = absolute_path(\"weights/clipseg/rd64-uni.pth\")"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "builtin_presets",
          "type": "tree",
          "content": null
        },
        {
          "name": "classes.py",
          "type": "blob",
          "size": 2.568359375,
          "content": "from .operators.install_dependencies import InstallDependencies, UninstallDependencies\nfrom .operators.open_latest_version import OpenLatestVersion\nfrom .operators.dream_texture import DreamTexture, ReleaseGenerator, CancelGenerator\nfrom .operators.view_history import SCENE_UL_HistoryList, RecallHistoryEntry, ClearHistory, RemoveHistorySelection, ExportHistorySelection, ImportPromptFile\nfrom .operators.inpaint_area_brush import InpaintAreaBrushActivated\nfrom .operators.upscale import Upscale\nfrom .operators.project import ProjectDreamTexture, dream_texture_projection_panels\nfrom .operators.notify_result import NotifyResult\nfrom .property_groups.control_net import ControlNet, ControlNetsAdd, ControlNetsRemove, ControlNetsAddMenu, BakeControlNetImage\nfrom .property_groups.dream_prompt import DreamPrompt\nfrom .property_groups.seamless_result import SeamlessResult\nfrom .ui.panels import dream_texture, history, upscaling, render_properties\nfrom .preferences import OpenURL, StableDiffusionPreferences,\\\n    ImportWeights, Model, ModelSearch, InstallModel, PREFERENCES_UL_ModelList,\\\n    CheckpointGroup, LinkCheckpoint, UnlinkCheckpoint, PREFERENCES_UL_CheckpointList\n\nfrom .ui.presets import DREAM_PT_AdvancedPresets, DREAM_MT_AdvancedPresets, AddAdvancedPreset, RestoreDefaultPresets\n\nfrom . import engine\n\nCLASSES = (\n    *render_properties.render_properties_panels(),\n    \n    DreamTexture,\n    ReleaseGenerator,\n    CancelGenerator,\n    OpenLatestVersion,\n    SCENE_UL_HistoryList,\n    RecallHistoryEntry,\n    ClearHistory,\n    RemoveHistorySelection,\n    ExportHistorySelection,\n    ImportPromptFile,\n    InpaintAreaBrushActivated,\n    Upscale,\n    ProjectDreamTexture,\n    \n    ControlNetsAddMenu,\n    ControlNetsAdd,\n    ControlNetsRemove,\n    BakeControlNetImage,\n\n    DREAM_PT_AdvancedPresets,\n    DREAM_MT_AdvancedPresets,\n    AddAdvancedPreset,\n\n    NotifyResult,\n\n    engine.DreamTexturesRenderEngineProperties,\n    engine.DreamTexturesRenderEngine,\n    engine.NewEngineNodeTree,\n    *engine.engine_panels(),\n    \n    # The order these are registered in matters\n    *dream_texture.dream_texture_panels(),\n    *upscaling.upscaling_panels(),\n    *history.history_panels(),\n    *dream_texture_projection_panels(),\n)\n\nPREFERENCE_CLASSES = (\n    PREFERENCES_UL_ModelList,\n    ModelSearch,\n    InstallModel,\n    Model,\n    ControlNet,\n    DreamPrompt,\n    SeamlessResult,\n    UninstallDependencies,\n    InstallDependencies,\n    OpenURL,\n    ImportWeights,\n    RestoreDefaultPresets,\n    CheckpointGroup,\n    LinkCheckpoint,\n    UnlinkCheckpoint,\n    PREFERENCES_UL_CheckpointList,\n    StableDiffusionPreferences,\n)"
        },
        {
          "name": "community_backends",
          "type": "tree",
          "content": null
        },
        {
          "name": "diffusers_backend.py",
          "type": "blob",
          "size": 16.7646484375,
          "content": "import bpy\nfrom bpy.props import FloatProperty, IntProperty, EnumProperty, BoolProperty\nfrom typing import List\n\nfrom .api import Backend, StepCallback, Callback\nfrom .api.models import Model, GenerationArguments, GenerationResult\nfrom .api.models.task import PromptToImage, ImageToImage, Inpaint, DepthToImage, Outpaint, Upscale\nfrom .api.models.fix_it_error import FixItError\n\nfrom .generator_process import Generator\nfrom .generator_process.future import Future\nfrom .generator_process.models import CPUOffload, ModelType, Optimizations, Scheduler\n\nfrom .preferences import checkpoint_lookup, StableDiffusionPreferences, _template_model_download_progress, InstallModel, model_lookup\n\nfrom functools import reduce\n\ndef _convert_models(models):\n    return [\n        None if model is None else (model.id, model.name, model.description)\n        for model in models\n    ]\n\nclass DiffusersBackend(Backend):\n    name = \"HuggingFace Diffusers\"\n    description = \"Local image generation inside of Blender\"\n\n    attention_slicing: BoolProperty(name=\"Attention Slicing\", default=True, description=\"Computes attention in several steps. Saves some memory in exchange for a small speed decrease\")\n    attention_slice_size_src: EnumProperty(\n        name=\"Attention Slice Size\",\n        items=(\n            (\"auto\", \"Automatic\", \"Computes attention in two steps\", 1),\n            (\"manual\", \"Manual\", \"Computes attention in `attention_head_dim // size` steps. A smaller `size` saves more memory.\\n\"\n                                \"`attention_head_dim` must be a multiple of `size`, otherwise the image won't generate properly.\\n\"\n                                \"`attention_head_dim` can be found within the model snapshot's unet/config.json file\", 2)\n        ),\n        default=1\n    )\n    attention_slice_size: IntProperty(name=\"Attention Slice Size\", default=1, min=1)\n    cudnn_benchmark: BoolProperty(name=\"cuDNN Benchmark\", description=\"Allows cuDNN to benchmark multiple convolution algorithms and select the fastest\", default=False)\n    tf32: BoolProperty(name=\"TF32\", description=\"Utilizes tensor cores on Ampere (RTX 30xx) or newer GPUs for matrix multiplications.\\nHas no effect if half precision is enabled\", default=False)\n    half_precision: BoolProperty(name=\"Half Precision\", description=\"Reduces memory usage and increases speed in exchange for a slight loss in image quality.\\nHas no effect if CPU only is enabled or using a GTX 16xx GPU\", default=True)\n    cpu_offload: EnumProperty(\n        name=\"CPU Offload\",\n        items=(\n            (\"off\", \"Off\", \"\", 0),\n            (\"model\", \"Model\", \"Some memory savings with minimal speed penalty\", 1),\n            (\"submodule\", \"Submodule\", \"Better memory savings with large speed penalty\", 2)\n        ),\n        default=0,\n        description=\"Dynamically moves models in and out of device memory for reduced memory usage with reduced speed\"\n    )\n    channels_last_memory_format: BoolProperty(name=\"Channels Last Memory Format\", description=\"An alternative way of ordering NCHW tensors that may be faster or slower depending on the device\", default=False)\n    sdp_attention: BoolProperty(\n        name=\"SDP Attention\",\n        description=\"Scaled dot product attention requires less memory and often comes with a good speed increase.\\n\"\n                    \"Prompt recall may not produce the exact same image, but usually only minor noise differences.\\n\"\n                    \"Overrides attention slicing\",\n        default=True\n    )\n    batch_size: IntProperty(name=\"Batch Size\", default=1, min=1, description=\"Improves speed when using iterations or upscaling in exchange for higher memory usage.\\nHighly recommended to use with VAE slicing enabled\")\n    vae_slicing: BoolProperty(name=\"VAE Slicing\", description=\"Reduces memory usage of batched VAE decoding. Has no effect if batch size is 1.\\nMay have a small performance improvement with large batches\", default=True)\n    vae_tiling: EnumProperty(\n        name=\"VAE Tiling\",\n        items=(\n            (\"off\", \"Off\", \"\", 0),\n            (\"half\", \"Half\", \"Uses tiles of half the selected model's default size. Likely to cause noticeably inaccurate colors\", 1),\n            (\"full\", \"Full\", \"Uses tiles of the selected model's default size, intended for use where image size is manually set higher. May cause slightly inaccurate colors\", 2),\n            (\"manual\", \"Manual\", \"\", 3)\n        ),\n        default=0,\n        description=\"Decodes generated images in tiled regions to reduce memory usage in exchange for longer decode time and less accurate colors.\\nCan allow for generating larger images that would otherwise run out of memory on the final step\"\n    )\n    vae_tile_size: IntProperty(name=\"VAE Tile Size\", min=1, default=512, description=\"Width and height measurement of tiles. Smaller sizes are more likely to cause inaccurate colors and other undesired artifacts\")\n    vae_tile_blend: IntProperty(name=\"VAE Tile Blend\", min=0, default=64, description=\"Minimum amount of how much each edge of a tile will intersect its adjacent tile\")\n    cfg_end: FloatProperty(name=\"CFG End\", min=0, max=1, default=1, description=\"The percentage of steps to complete before disabling classifier-free guidance\")\n    cpu_only: BoolProperty(name=\"CPU Only\", default=False, description=\"Disables GPU acceleration and is extremely slow\")\n\n    use_sdxl_refiner: BoolProperty(name=\"Use SDXL Refiner\", default=False, description=\"Provide a refiner model to run automatically after the initial generation\")\n    sdxl_refiner_model: EnumProperty(name=\"SDXL Refiner Model\", items=lambda self, context: _convert_models(self.list_models(context)), description=\"Specify which model to use as a refiner\")\n\n    def list_models(self, context):\n        def model_case(model, i):\n            return Model(\n                name=model.model_base.replace('models--', '').replace('--', '/'),\n                description=ModelType[model.model_type].name,\n                id=model.model_base.replace('models--', '').replace('--', '/')\n            )\n        models = {}\n        for i, model in enumerate(context.preferences.addons[StableDiffusionPreferences.bl_idname].preferences.installed_models):\n            if model.model_type in {ModelType.CONTROL_NET.name, ModelType.UNKNOWN.name}:\n                continue\n            if model.model_type not in models:\n                models[model.model_type] = [model_case(model, i)]\n            else:\n                models[model.model_type].append(model_case(model, i))\n        return reduce(\n            lambda a, b: a + [None] + sorted(b, key=lambda m: m.id),\n            [\n                models[group]\n                for group in sorted(models.keys())\n            ],\n            []\n        )\n    \n    def list_controlnet_models(self, context):\n        return [\n            Model(\n                name=model.model_base.replace('models--', '').replace('--', '/'),\n                description=\"ControlNet\",\n                id=model.model_base.replace('models--', '').replace('--', '/')\n            )\n            for model in context.preferences.addons[StableDiffusionPreferences.bl_idname].preferences.installed_models\n            if model.model_type == ModelType.CONTROL_NET.name\n        ]\n\n    def list_schedulers(self, context) -> List[str]:\n        return [scheduler.value for scheduler in Scheduler]\n\n    def get_batch_size(self, context) -> int:\n        return self.batch_size\n\n    def optimizations(self) -> Optimizations:\n        optimizations = Optimizations()\n        for prop in dir(self):\n            if hasattr(optimizations, prop) and not prop.startswith('__'):\n                setattr(optimizations, prop, getattr(self, prop))\n        if self.attention_slice_size_src == 'auto':\n            optimizations.attention_slice_size = 'auto'\n        optimizations.cpu_offload = CPUOffload(optimizations.cpu_offload)\n        return optimizations\n\n    def generate(self, arguments: GenerationArguments, step_callback: StepCallback, callback: Callback):\n        gen = Generator.shared()\n        common_kwargs = {\n            'model': checkpoint_lookup.get(arguments.model.id),\n            'scheduler': Scheduler(arguments.scheduler),\n            'optimizations': self.optimizations(),\n            'prompt': arguments.prompt.positive,\n            'steps': arguments.steps,\n            'width': arguments.size[0] if arguments.size is not None else None,\n            'height': arguments.size[1] if arguments.size is not None else None,\n            'seed': arguments.seed,\n            'cfg_scale': arguments.guidance_scale,\n            'use_negative_prompt': arguments.prompt.negative is not None,\n            'negative_prompt': arguments.prompt.negative or \"\",\n            'seamless_axes': arguments.seamless_axes,\n            'iterations': arguments.iterations,\n            'step_preview_mode': arguments.step_preview_mode,\n            \n            'sdxl_refiner_model': (checkpoint_lookup.get(self.sdxl_refiner_model) if self.use_sdxl_refiner else None),\n        }\n        future: Future\n        match arguments.task:\n            case PromptToImage():\n                if len(arguments.control_nets) > 0:\n                    future = gen.control_net(\n                        **common_kwargs,\n                        control_net=[checkpoint_lookup.get(c.model) for c in arguments.control_nets],\n                        control=[c.image for c in arguments.control_nets],\n                        controlnet_conditioning_scale=[c.strength for c in arguments.control_nets],\n                        image=None,\n                        inpaint=False,\n                        inpaint_mask_src='alpha',\n                        text_mask='',\n                        text_mask_confidence=1,\n                        strength=1\n                    )\n                else:\n                    future = gen.prompt_to_image(**common_kwargs)\n            case Inpaint(image=image, fit=fit, strength=strength, mask_source=mask_source, mask_prompt=mask_prompt, confidence=confidence):\n                if len(arguments.control_nets) > 0:\n                    future = gen.control_net(\n                        **common_kwargs,\n                        control_net=[c.model for c in arguments.control_nets],\n                        control=[c.image for c in arguments.control_nets],\n                        controlnet_conditioning_scale=[c.strength for c in arguments.control_nets],\n                        image=image,\n                        inpaint=True,\n                        inpaint_mask_src='alpha' if mask_source == Inpaint.MaskSource.ALPHA else 'prompt',\n                        text_mask=mask_prompt,\n                        text_mask_confidence=confidence,\n                        strength=strength\n                    )\n                else:\n                    future = gen.inpaint(\n                        image=image,\n                        fit=fit,\n                        strength=strength,\n                        inpaint_mask_src='alpha' if mask_source == Inpaint.MaskSource.ALPHA else 'prompt',\n                        text_mask=mask_prompt,\n                        text_mask_confidence=confidence,\n                        **common_kwargs\n                    )\n            case ImageToImage(image=image, strength=strength, fit=fit):\n                if len(arguments.control_nets) > 0:\n                    future = gen.control_net(\n                        **common_kwargs,\n                        control_net=[c.model for c in arguments.control_nets],\n                        control=[c.image for c in arguments.control_nets],\n                        controlnet_conditioning_scale=[c.strength for c in arguments.control_nets],\n                        image=image,\n                        inpaint=False,\n                        inpaint_mask_src='alpha',\n                        text_mask='',\n                        text_mask_confidence=1,\n                        strength=strength\n                    )\n                else:\n                    future = gen.image_to_image(image=image, fit=fit, strength=strength, **common_kwargs)\n            case DepthToImage(depth=depth, image=image, strength=strength):\n                future = gen.depth_to_image(\n                    depth=depth,\n                    image=image,\n                    strength=strength,\n                    **common_kwargs\n                )\n            case Outpaint(image=image, origin=origin):\n                future = gen.outpaint(\n                    image=image,\n                    outpaint_origin=origin,\n                    fit=False,\n                    strength=1,\n                    inpaint_mask_src='alpha',\n                    text_mask='',\n                    text_mask_confidence=1,\n                    **common_kwargs\n                )\n            case Upscale(image=image, tile_size=tile_size, blend=blend):\n                future = gen.upscale(\n                    image=image,\n                    tile_size=tile_size,\n                    blend=blend,\n                    **common_kwargs\n                )\n            case _:\n                raise NotImplementedError()\n        def on_step(future: Future, step_image: [GenerationResult]):\n            should_continue = step_callback(step_image)\n            if not should_continue:\n                future.cancel()\n                callback(InterruptedError())\n        def on_done(future: Future):\n            callback(future.result(last_only=True))\n        def on_exception(_, exception):\n            callback(exception)\n        future.add_response_callback(on_step)\n        future.add_exception_callback(on_exception)\n        future.add_done_callback(on_done)\n\n    def validate(self, arguments: GenerationArguments):\n        model = None if arguments.model is None else model_lookup.get(arguments.model.id)\n        if model is None:\n            raise FixItError(\"No model selected.\", FixItError.ChangeProperty(\"model\"))\n        else:\n            if not model.model_type.matches_task(arguments.task):\n                class DownloadModel(FixItError.Solution):\n                    def _draw(self, dream_prompt, context, layout):\n                        if not _template_model_download_progress(context, layout):\n                            target_model_type = ModelType.from_task(arguments.task)\n                            if target_model_type is not None:\n                                install_model = layout.operator(InstallModel.bl_idname, text=f\"Download {target_model_type.recommended_model()} (Recommended)\", icon=\"IMPORT\")\n                                install_model.model = target_model_type.recommended_model()\n                                install_model.prefer_fp16_revision = context.preferences.addons[StableDiffusionPreferences.bl_idname].preferences.prefer_fp16_revision\n                model_task_description = f\"\"\"Incorrect model type selected for {type(arguments.task).name().replace('_', ' ').lower()} tasks.\nThe selected model is for {model.model_type.name.replace('_', ' ').lower()}.\"\"\"\n                if not any(m.model_type.matches_task(arguments.task) for m in model_lookup._models.values()):\n                    raise FixItError(\n                        message=model_task_description + \"\\nYou do not have any compatible models downloaded:\",\n                        solution=DownloadModel()\n                    )\n                else:\n                    raise FixItError(\n                        message=model_task_description + \"\\nSelect a different model below.\",\n                        solution=FixItError.ChangeProperty(\"model\")\n                    )\n\n    def draw_advanced(self, layout, context):\n        layout.prop(self, \"use_sdxl_refiner\")\n        col = layout.column()\n        col.enabled = self.use_sdxl_refiner\n        col.prop(self, \"sdxl_refiner_model\")\n\n    def draw_speed_optimizations(self, layout, context):\n        inferred_device = Optimizations.infer_device()\n        if self.cpu_only:\n            inferred_device = \"cpu\"\n        def optimization(prop):\n            if Optimizations.device_supports(prop, inferred_device):\n                layout.prop(self, prop)\n\n        optimization(\"cudnn_benchmark\")\n        optimization(\"tf32\")\n        optimization(\"half_precision\")\n        optimization(\"channels_last_memory_format\")\n        optimization(\"batch_size\")\n    \n    def draw_memory_optimizations(self, layout, context):\n        inferred_device = Optimizations.infer_device()\n        if self.cpu_only:\n            inferred_device = \"cpu\"\n        def optimization(prop):\n            if Optimizations.device_supports(prop, inferred_device):\n                layout.prop(self, prop)\n\n        optimization(\"sdp_attention\")\n        optimization(\"attention_slicing\")\n        slice_size_row = layout.row()\n        slice_size_row.prop(self, \"attention_slice_size_src\")\n        if self.attention_slice_size_src == 'manual':\n            slice_size_row.prop(self, \"attention_slice_size\", text=\"Size\")\n        optimization(\"cpu_offload\")\n        optimization(\"cpu_only\")\n        optimization(\"vae_slicing\")\n        optimization(\"vae_tiling\")\n        if self.vae_tiling == \"manual\":\n            optimization(\"vae_tile_size\")\n            optimization(\"vae_tile_blend\")"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator_process",
          "type": "tree",
          "content": null
        },
        {
          "name": "image_utils.py",
          "type": "blob",
          "size": 33.111328125,
          "content": "import importlib.util\nimport os\nimport sys\nfrom os import PathLike\nfrom typing import Tuple, Literal, Union, TYPE_CHECKING\n\nimport numpy as np\nfrom numpy.typing import NDArray, DTypeLike\n\nfrom .generator_process import RunInSubprocess\n\n\n\"\"\"\nThis module allows for simple handling of image data in numpy ndarrays in some common formats.\n\nDimensions:\n    2: HW - L\n    3: HWC - L/LA/RGB/RGBA\n    4: NHWC - batched HWC\n\nChannels:\n    1: L\n    2: LA\n    3: RGB\n    4: RGBA\n\"\"\"\n\n\ndef version_str(version):\n    return \".\".join(str(x) for x in version)\n\n\n# find_spec(\"bpy\") will never return None\nhas_bpy = sys.modules.get(\"bpy\", None) is not None\nhas_ocio = importlib.util.find_spec(\"PyOpenColorIO\") is not None\nhas_oiio = importlib.util.find_spec(\"OpenImageIO\") is not None\nhas_pil = importlib.util.find_spec(\"PIL\") is not None\n\nif has_bpy:\n    # frontend\n    import bpy\n    BLENDER_VERSION = bpy.app.version\n    OCIO_CONFIG = os.path.join(bpy.utils.resource_path('LOCAL'), 'datafiles/colormanagement/config.ocio')\n    # Easier to share via environment variables than to enforce backends with subprocesses to use their own methods of sharing.\n    os.environ[\"BLENDER_VERSION\"] = version_str(BLENDER_VERSION)\n    os.environ[\"BLENDER_OCIO_CONFIG\"] = OCIO_CONFIG\nelse:\n    # backend\n    BLENDER_VERSION = tuple(int(x) for x in os.environ[\"BLENDER_VERSION\"].split(\".\"))\n    OCIO_CONFIG = os.environ[\"BLENDER_OCIO_CONFIG\"]\n\nif TYPE_CHECKING:\n    import bpy\n    import PIL.Image\n\n\ndef _bpy_version_error(required_version, feature, module):\n    if BLENDER_VERSION >= required_version:\n        return Exception(f\"{module} is unexpectedly missing in Blender {version_str(BLENDER_VERSION)}\")\n    return Exception(f\"{feature} requires Blender {version_str(required_version)} or higher, you are using {version_str(BLENDER_VERSION)}\")\n\n\ndef size(array: NDArray) -> Tuple[int, int]:\n    if array.ndim == 2:\n        return array.shape[1], array.shape[0]\n    if array.ndim in [3, 4]:\n        return array.shape[-2], array.shape[-3]\n    raise ValueError(f\"Can't determine size from {array.ndim} dimensions\")\n\n\ndef channels(array: NDArray) -> int:\n    if array.ndim == 2:\n        return 1\n    if array.ndim in [3, 4]:\n        return array.shape[-1]\n    raise ValueError(f\"Can't determine channels from {array.ndim} dimensions\")\n\n\ndef ensure_alpha(array: NDArray, alpha=None) -> NDArray:\n    \"\"\"\n    Args:\n        array: Image pixels values.\n        alpha: Default alpha value if an alpha channel will be made. Will be inferred from `array.dtype` if None.\n\n    Returns: The converted image or the original image if it already had alpha.\n    \"\"\"\n    c = channels(array)\n    if c in [2, 4]:\n        return array\n    if c not in [1, 3]:\n        raise ValueError(f\"Can't ensure alpha from {c} channels\")\n\n    if alpha is None:\n        alpha = 0\n        if np.issubdtype(array.dtype, np.floating):\n            alpha = 1\n        elif np.issubdtype(array.dtype, np.integer):\n            alpha = np.iinfo(array.dtype).max\n    array = ensure_channel_dim(array)\n    return np.pad(array, [*[(0, 0)]*(array.ndim-1), (0, 1)], constant_values=alpha)\n\n\ndef ensure_opaque(array: NDArray) -> NDArray:\n    \"\"\"\n    Removes the alpha channel if it exists.\n    \"\"\"\n    if channels(array) in [2, 4]:\n        return array[..., :-1]\n    return array\n\n\ndef ensure_channel_dim(array: NDArray) -> NDArray:\n    \"\"\"\n    Expands a HW grayscale image to HWC.\n    \"\"\"\n    if array.ndim == 2:\n        return array[..., np.newaxis]\n    return array\n\n\ndef rgb(array: NDArray) -> NDArray:\n    \"\"\"\n    Converts a grayscale image to RGB or removes the alpha channel from an RGBA image.\n    If the image was already RGB the original array will be returned.\n    \"\"\"\n    c = channels(array)\n    match channels(array):\n        case 1:\n            return np.concatenate([ensure_channel_dim(array)] * 3, axis=-1)\n        case 2:\n            return np.concatenate([array[..., :1]] * 3, axis=-1)\n        case 3:\n            return array\n        case 4:\n            return array[..., :3]\n    raise ValueError(f\"Can't make {c} channels RGB\")\n\n\ndef rgba(array: NDArray, alpha=None) -> NDArray:\n    \"\"\"\n    Args:\n        array: Image pixels values.\n        alpha: Default alpha value if an alpha channel will be made. Will be inferred from `array.dtype` if None.\n\n    Returns: The converted image or the original image if it already was RGBA.\n    \"\"\"\n    c = channels(array)\n    if c == 4:\n        return array\n    if c == 2:\n        l, a = np.split(array, 2, axis=-1)\n        return np.concatenate([l, l, l, a], axis=-1)\n    return ensure_alpha(rgb(array), alpha)\n\n\ndef grayscale(array: NDArray) -> NDArray:\n    \"\"\"\n    Converts `array` into HW or NHWC grayscale. This is intended for converting an\n    RGB image that is already visibly grayscale, such as a depth map. It will not\n    make a good approximation of perceived lightness of an otherwise colored image.\n    \"\"\"\n    if array.ndim == 2:\n        return array\n    c = channels(array)\n    if array.ndim == 3:\n        if c in [1, 2]:\n            return array[..., 0]\n        elif c in [3, 4]:\n            return np.max(array[..., :3], axis=-1)\n        raise ValueError(f\"Can't make {c} channels grayscale\")\n    elif array.ndim == 4:\n        if c in [1, 2]:\n            return array[..., :1]\n        elif c in [3, 4]:\n            return np.max(array[..., :3], axis=-1, keepdims=True)\n        raise ValueError(f\"Can't make {c} channels grayscale\")\n    raise ValueError(f\"Can't make {array.ndim} dimensions grayscale\")\n\n\ndef _passthrough_alpha(from_array, to_array):\n    if channels(from_array) not in [2, 4]:\n        return to_array\n    to_array = np.concatenate([ensure_channel_dim(to_array), from_array[..., -1:]], axis=-1)\n    return to_array\n\n\ndef linear_to_srgb(array: NDArray, clamp=True) -> NDArray:\n    \"\"\"\n    Args:\n        array: Image to convert from linear to sRGB color space. Will be converted to float32 if it isn't already a float dtype.\n        clamp: whether to restrict the result between 0..1\n    \"\"\"\n    if not np.issubdtype(array.dtype, np.floating):\n        array = to_dtype(array, np.float32)\n    srgb = ensure_opaque(array)\n    srgb = np.where(\n        srgb <= 0.0031308,\n        srgb * 12.92,\n        (np.abs(srgb) ** (1/2.4) * 1.055) - 0.055\n        # abs() to suppress `RuntimeWarning: invalid value encountered in power` for negative values\n    )\n    if clamp:\n        # conversion may produce values outside standard range, usually >1\n        srgb = np.clip(srgb, 0, 1)\n    srgb = _passthrough_alpha(array, srgb)\n    return srgb\n\n\ndef srgb_to_linear(array: NDArray) -> NDArray:\n    \"\"\"\n    Converts from sRGB to linear color space. Will be converted to float32 if it isn't already a float dtype.\n    \"\"\"\n    if not np.issubdtype(array.dtype, np.floating):\n        array = to_dtype(array, np.float32)\n    linear = ensure_opaque(array)\n    linear = np.where(\n        linear <= 0.04045,\n        linear / 12.92,\n        ((linear + 0.055) / 1.055) ** 2.4\n    )\n    linear = _passthrough_alpha(array, linear)\n    return linear\n\n\n@RunInSubprocess.when_raised\ndef color_transform(array: NDArray, from_color_space: str, to_color_space: str, *, clamp_srgb=True) -> NDArray:\n    \"\"\"\n    Args:\n        array: Pixel values in `from_color_space`\n        from_color_space: Color space of `array`\n        to_color_space: Desired color space\n        clamp_srgb: Restrict values inside the standard range when converting to sRGB.\n\n    Returns: Pixel values in `to_color_space`. The image will be converted to RGB/RGBA float32 for most transforms.\n        Transforms between linear and sRGB may remain grayscale and keep the original DType if it was floating point.\n    \"\"\"\n    # Blender handles Raw and Non-Color images as if they were in Linear color space.\n    if from_color_space in [\"Raw\", \"Non-Color\"]:\n        from_color_space = \"Linear\"\n    if to_color_space in [\"Raw\", \"Non-Color\"]:\n        to_color_space = \"Linear\"\n\n    if from_color_space == to_color_space:\n        return array\n    elif from_color_space == \"Linear\" and to_color_space == \"sRGB\":\n        return linear_to_srgb(array, clamp_srgb)\n    elif from_color_space == \"sRGB\" and to_color_space == \"Linear\":\n        return srgb_to_linear(array)\n\n    if not has_ocio:\n        raise RunInSubprocess\n\n    import PyOpenColorIO as OCIO\n    config = OCIO.Config.CreateFromFile(OCIO_CONFIG)\n    proc = config.getProcessor(from_color_space, to_color_space).getDefaultCPUProcessor()\n    # OCIO requires RGB/RGBA float32.\n    # There is a channel agnostic apply(), but I can't seem to get it to work.\n    # getOptimizedCPUProcessor() can handle different precisions, but I doubt it would have meaningful use.\n    array = to_dtype(array, np.float32)\n    c = channels(array)\n    if c in [1, 3]:\n        array = rgb(array)\n        proc.applyRGB(array)\n        if clamp_srgb and to_color_space == \"sRGB\":\n            array = np.clip(array, 0, 1)\n        return array\n    elif c in [2, 4]:\n        array = rgba(array)\n        proc.applyRGBA(array)\n        if clamp_srgb and to_color_space == \"sRGB\":\n            array = np.clip(array, 0, 1)\n        return array\n    raise ValueError(f\"Can't color transform {c} channels\")\n\n\n# inverse=True is often crashing from EXCEPTION_ACCESS_VIOLATION while on frontend.\n# Normally this is caused by not running on the main thread or accessing a deleted\n# object, neither seem to be the issue here. Doesn't matter if the backend imports\n# its own OCIO or the one packaged with Blender.\n# Stack trace:\n# OpenColorIO_2_2.dll :0x00007FFDE8961160  OpenColorIO_v2_2::GradingTone::validate\n# OpenColorIO_2_2.dll :0x00007FFDE8A2BD40  OpenColorIO_v2_2::Processor::isNoOp\n# OpenColorIO_2_2.dll :0x00007FFDE882EA00  OpenColorIO_v2_2::CPUProcessor::apply\n# PyOpenColorIO.pyd   :0x00007FFDEB0F0E40  pybind11::error_already_set::what\n# PyOpenColorIO.pyd   :0x00007FFDEB0F0E40  pybind11::error_already_set::what\n# PyOpenColorIO.pyd   :0x00007FFDEB0F0E40  pybind11::error_already_set::what\n# PyOpenColorIO.pyd   :0x00007FFDEB0E7510  pybind11::error_already_set::discard_as_unraisable\n@RunInSubprocess.when(lambda *_, inverse=False, **__: inverse or not has_ocio)\ndef render_color_transform(\n    array: NDArray,\n    exposure: float,\n    gamma: float,\n    view_transform: str,\n    display_device: str,\n    look: str,\n    *,\n    inverse: bool = False,\n    color_space: str | None = None,\n    clamp_srgb: bool = True,\n) -> NDArray:\n    import PyOpenColorIO as OCIO\n\n    ocio_config = OCIO.Config.CreateFromFile(OCIO_CONFIG)\n\n    # A reimplementation of `OCIOImpl::createDisplayProcessor` from the Blender source.\n    # https://github.com/blender/blender/blob/3816fcd8611bc2836ee8b2a5225b378a02141ce4/intern/opencolorio/ocio_impl.cc#L666\n    # Modified to support a final color space transform.\n    def create_display_processor(\n        config,\n        input_colorspace,\n        view,\n        display,\n        look,\n        scale,  # Exposure\n        exponent,  # Gamma\n        inverse,\n        color_space\n    ):\n        group = OCIO.GroupTransform()\n\n        # Exposure\n        if scale != 1:\n            # Always apply exposure in scene linear.\n            color_space_transform = OCIO.ColorSpaceTransform()\n            color_space_transform.setSrc(input_colorspace)\n            color_space_transform.setDst(OCIO.ROLE_SCENE_LINEAR)\n            group.appendTransform(color_space_transform)\n\n            # Make further transforms aware of the color space change\n            input_colorspace = OCIO.ROLE_SCENE_LINEAR\n\n            # Apply scale\n            matrix_transform = OCIO.MatrixTransform(\n                [scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0])\n            group.appendTransform(matrix_transform)\n\n        # Add look transform\n        use_look = look is not None and len(look) > 0\n        if use_look:\n            look_output = config.getLook(look).getProcessSpace()\n            if look_output is not None and len(look_output) > 0:\n                look_transform = OCIO.LookTransform()\n                look_transform.setSrc(input_colorspace)\n                look_transform.setDst(look_output)\n                look_transform.setLooks(look)\n                group.appendTransform(look_transform)\n                # Make further transforms aware of the color space change.\n                input_colorspace = look_output\n            else:\n                # For empty looks, no output color space is returned.\n                use_look = False\n\n        # Add view and display transform\n        display_view_transform = OCIO.DisplayViewTransform()\n        display_view_transform.setSrc(input_colorspace)\n        display_view_transform.setLooksBypass(use_look)\n        display_view_transform.setView(view)\n        display_view_transform.setDisplay(display)\n        group.appendTransform(display_view_transform)\n\n        if color_space is not None:\n            group.appendTransform(OCIO.ColorSpaceTransform(input_colorspace if display == \"None\" else display, color_space))\n\n        # Gamma\n        if exponent != 1:\n            exponent_transform = OCIO.ExponentTransform([exponent, exponent, exponent, 1.0])\n            group.appendTransform(exponent_transform)\n\n        if inverse:\n            group.setDirection(OCIO.TransformDirection.TRANSFORM_DIR_INVERSE)\n\n        # Create processor from transform. This is the moment were OCIO validates\n        # the entire transform, no need to check for the validity of inputs above.\n        return config.getProcessor(group)\n\n    # Exposure and gamma transformations derived from Blender source:\n    # https://github.com/blender/blender/blob/3816fcd8611bc2836ee8b2a5225b378a02141ce4/source/blender/imbuf/intern/colormanagement.cc#L867\n    scale = 2 ** exposure\n    exponent = 1 / max(gamma, np.finfo(np.float32).eps)\n    processor = create_display_processor(ocio_config, OCIO.ROLE_SCENE_LINEAR, view_transform, display_device, look if look != 'None' else None, scale, exponent, inverse, color_space)\n    array = to_dtype(array, np.float32)\n    c = channels(array)\n    if c in [1, 3]:\n        array = rgb(array)\n        processor.getDefaultCPUProcessor().applyRGB(array)\n    elif c in [2, 4]:\n        array = rgba(array)\n        processor.getDefaultCPUProcessor().applyRGBA(array)\n    else:\n        raise ValueError(f\"Can't color transform {c} channels\")\n    if clamp_srgb and (color_space == \"sRGB\" or (display_device == \"sRGB\" and color_space is None)) and not inverse:\n        array = np.clip(array, 0, 1)\n    return array\n\n\ndef scene_color_transform(array: NDArray, scene: Union[\"bpy.types.Scene\", None] = None, *, inverse: bool = False, color_space: str | None = None, clamp_srgb=True) -> NDArray:\n    if scene is None:\n        import bpy\n        scene = bpy.context.scene\n    view = scene.view_settings\n    display = scene.display_settings.display_device\n    return render_color_transform(\n        array,\n        view.exposure,\n        view.gamma,\n        view.view_transform,\n        display,\n        view.look,\n        inverse=inverse,\n        clamp_srgb=clamp_srgb,\n        color_space=color_space\n    )\n\n\ndef _unsigned(dtype: DTypeLike) -> DTypeLike:\n    match bits := np.iinfo(dtype).bits:\n        case 8:\n            return np.uint8\n        case 16:\n            return np.uint16\n        case 32:\n            return np.uint32\n        case 64:\n            return np.uint64\n    raise ValueError(f\"unexpected bit depth {bits} from {repr(dtype)}\")\n\n\ndef to_dtype(array: NDArray, dtype: DTypeLike) -> NDArray:\n    \"\"\"\n    Remaps values with respect to ranges rather than simply casting for integer DTypes.\n    `integer(0)=float(0)`, `integer.MAX=float(1)`, and signed `integer.MIN+1=float(-1)`\n    \"\"\"\n    dtype = np.dtype(dtype)\n    from_dtype = array.dtype\n    if dtype == from_dtype:\n        return array\n    from_floating = np.issubdtype(from_dtype, np.floating)\n    from_integer = np.issubdtype(from_dtype, np.integer)\n    to_floating = np.issubdtype(dtype, np.floating)\n    to_integer = np.issubdtype(dtype, np.integer)\n    if from_floating and to_floating:\n        array = array.astype(dtype)\n        if np.finfo(from_dtype).bits > np.finfo(dtype).bits:\n            # prevent inf when lowering precision\n            array = np.nan_to_num(array)\n    elif from_floating and to_integer:\n        iinfo = np.iinfo(dtype)\n        array = (array.clip(-1 if iinfo.min < 0 else 0, 1) * iinfo.max).round().astype(dtype)\n    elif from_integer and to_floating:\n        iinfo = np.iinfo(from_dtype)\n        array = (array / iinfo.max).astype(dtype)\n    elif from_integer and to_integer:\n        from_signed = np.issubdtype(from_dtype, np.signedinteger)\n        to_signed = np.issubdtype(dtype, np.signedinteger)\n        from_bits = np.iinfo(from_dtype).bits\n        to_bits = np.iinfo(dtype).bits\n        if from_signed:\n            from_bits -= 1\n        if to_signed:\n            to_bits -= 1\n        bit_diff = to_bits - from_bits\n\n        if from_signed and not to_signed:\n            # unsigned output does not support negative\n            array = np.maximum(array, 0)\n        if from_signed and to_signed:\n            # simpler to handle bit manipulation in unsigned\n            sign = np.sign(array)\n            array = np.abs(array)\n\n        if bit_diff > 0:\n            # Repeat bits rather than using a single left shift\n            # so that from_iinfo.max turns into to_iinfo.max\n            # and all values remain equally spaced.\n            # Example 8 to 16 bits:\n            # (incorrect)        0x00FF << 8 = 0xFF00\n            # (correct) 0x00FF << 8 | 0x00FF = 0xFFFF\n            # Implementation uses multiplication instead of potentially multiple left shifts and ors:\n            # 0x00FF * 0x0101 = 0xFFFF\n            base = array.astype(_unsigned(dtype))\n            m = 0\n            for i in range(bit_diff, -1, -from_bits):\n                m += 2 ** i\n            array = base * m\n            remaining_bits = bit_diff % from_bits\n            if remaining_bits > 0:\n                # when changing between signed and unsigned bit_diff is not a multiple of from_bits\n                array |= base >> (from_bits-remaining_bits)\n        elif bit_diff < 0:\n            array = array.astype(_unsigned(from_dtype), copy=False) >> -bit_diff\n\n        if from_signed and to_signed:\n            array = np.multiply(array, sign, dtype=dtype)\n        array = array.astype(dtype, copy=False)\n    else:\n        raise TypeError(f\"Unable to convert from {array.dtype} to {dtype}\")\n    return array\n\n\n@RunInSubprocess.when(not has_oiio)\ndef resize(array: NDArray, size: Tuple[int, int], clamp=True):\n    no_channels = array.ndim == 2\n    if no_channels:\n        array = array[..., np.newaxis]\n    no_batch = array.ndim < 4\n    if no_batch:\n        array = array[np.newaxis, ...]\n    if clamp:\n        c_min = np.min(array, axis=(1, 2), keepdims=True)\n        c_max = np.max(array, axis=(1, 2), keepdims=True)\n\n    if has_oiio:\n        import OpenImageIO as oiio\n        resized = []\n        for unbatched in array:\n            # OpenImageIO can have batched images, but doesn't support resizing them\n            image_in = oiio.ImageBuf(unbatched)\n            image_out = oiio.ImageBufAlgo.resize(image_in, roi=oiio.ROI(0, int(size[0]), 0, int(size[1])))\n            if image_out.has_error:\n                raise Exception(image_out.geterror())\n            resized.append(image_out.get_pixels(image_in.spec().format))\n        array = np.stack(resized)\n    else:\n        original_dtype = array.dtype\n        if np.issubdtype(original_dtype, np.floating):\n            if original_dtype == np.float16:\n                # interpolation not implemented for float16 on CPU\n                array = to_dtype(array, np.float32)\n        elif np.issubdtype(original_dtype, np.integer):\n            # integer interpolation only supported for uint8 nearest, nearest-exact or bilinear\n            bits = np.iinfo(original_dtype).bits\n            array = to_dtype(array, np.float64 if bits >= 32 else np.float32)\n\n        import torch\n        array = torch.from_numpy(np.transpose(array, (0, 3, 1, 2)))\n        array = torch.nn.functional.interpolate(array, size=(size[1], size[0]), mode=\"bilinear\")\n        array = np.transpose(array, (0, 2, 3, 1)).numpy()\n        array = to_dtype(array, original_dtype)\n\n    if clamp:\n        array = np.clip(array, c_min, c_max)\n    if no_batch:\n        array = np.squeeze(array, 0)\n    if no_channels:\n        array = np.squeeze(array, -1)\n    return array\n\n\ndef bpy_to_np(image: \"bpy.types.Image\", *, color_space: str | None = \"sRGB\", clamp_srgb=True, top_to_bottom=True) -> NDArray:\n    \"\"\"\n    Args:\n        image: Image to extract pixels values from.\n        color_space: The color space to convert to. `None` will apply no color transform.\n            Keep in mind that Raw/Non-Color images are handled as if they were in Linear color space.\n        clamp_srgb: Restrict values inside the standard range when converting to sRGB.\n        top_to_bottom: The y-axis is flipped to a more common standard of `top=0` to `bottom=height-1`.\n\n    Returns: A ndarray copy of `image.pixels` in RGBA float32 format.\n    \"\"\"\n    if image.type == \"RENDER_RESULT\":\n        # can't get pixels automatically without rendering again and freezing Blender until it finishes, or saving to disk\n        raise ValueError(f\"{image.name} image can't be used directly, alternatively use a compositor viewer node\")\n    array = np.empty((image.size[1], image.size[0], image.channels), dtype=np.float32)\n    # foreach_get/set is extremely fast to read/write an entire image compared to alternatives\n    # see https://projects.blender.org/blender/blender/commit/9075ec8269e7cb029f4fab6c1289eb2f1ae2858a\n    image.pixels.foreach_get(array.ravel())\n    if color_space is not None:\n        if image.type == \"COMPOSITING\":\n            # Viewer Node\n            array = scene_color_transform(array, color_space=color_space, clamp_srgb=clamp_srgb)\n        else:\n            array = color_transform(array, image.colorspace_settings.name, color_space, clamp_srgb=clamp_srgb)\n    if top_to_bottom:\n        array = np.flipud(array)\n    return rgba(array)\n\n\ndef np_to_bpy(array: NDArray, name=None, existing_image=None, float_buffer=None, color_space: str = \"sRGB\", top_to_bottom=True) -> \"bpy.types.Image\":\n    \"\"\"\n    Args:\n        array: Image pixel values. The y-axis is expected to be ordered `top=0` to `bottom=height-1`.\n        name: Name of the image data-block. If None it will be `existing_image.name` or \"Untitled\".\n        existing_image: Image data-block to overwrite.\n        float_buffer:\n            Make Blender keep data in (`True`) 32-bit float values, or (`False`) 8-bit integer values.\n            `None` won't invalidate `existing_image`, but if a new image is created it will be `False`.\n        color_space: Color space of `array`.\n\n    Returns: A new Blender image or `existing_image` if it didn't require replacement.\n    \"\"\"\n    if array.ndim == 4 and array.shape[0] > 1:\n        raise ValueError(f\"Can't convert a batched array of {array.shape[0]} images to a Blender image\")\n\n    # create or replace image\n    import bpy\n    width, height = size(array)\n    if name is None:\n        name = \"Untitled\" if existing_image is None else existing_image.name\n    if existing_image is not None and existing_image.type in [\"RENDER_RESULT\", \"COMPOSITING\"]:\n        existing_image = None\n    elif existing_image is not None and (\n            existing_image.size[0] != width\n            or existing_image.size[1] != height\n            or (existing_image.channels != channels(array) and existing_image.channels != 4)\n            or (existing_image.is_float != float_buffer and float_buffer is not None)\n    ):\n        bpy.data.images.remove(existing_image)\n        existing_image = None\n    if existing_image is None:\n        image = bpy.data.images.new(\n            name,\n            width=width,\n            height=height,\n            alpha=channels(array) == 4,\n            float_buffer=False if float_buffer is None else float_buffer\n        )\n    else:\n        image = existing_image\n        image.name = name\n    image.colorspace_settings.name = color_space\n\n    # adjust array pixels to fit into image\n    if array.ndim == 4:\n        array = array[0]\n    if top_to_bottom:\n        array = np.flipud(array)\n    array = to_dtype(array, np.float32)\n    if image.channels == 4:\n        array = rgba(array)\n    elif image.channels == 3:\n        # I believe image.channels only exists for backwards compatibility and modern versions of Blender\n        # will always handle images as RGBA. I can't manage to make or import an image and end up with\n        # anything but 4 channels. Support for images with 3 channels will be kept just in case.\n        array = rgb(array)\n    else:\n        raise NotImplementedError(f\"Blender image unexpectedly has {image.channels} channels\")\n\n    # apply pixels to image\n    image.pixels.foreach_set(array.ravel())\n    image.pack()\n    image.update()\n    return image\n\n\ndef render_pass_to_np(\n    render_pass: \"bpy.types.RenderPass\",\n    size: Tuple[int, int],\n    *,\n    color_management: bool = False,\n    color_space: str | None = None,\n    clamp_srgb: bool = True,\n    top_to_bottom: bool = True\n):\n    array = np.empty((*reversed(size), render_pass.channels), dtype=np.float32)\n    if BLENDER_VERSION >= (4, 1, 0):\n        render_pass.rect.foreach_get(array.reshape(-1))\n    else:\n        render_pass.rect.foreach_get(array.reshape(-1, render_pass.channels))\n    if color_management:\n        array = scene_color_transform(array, color_space=color_space, clamp_srgb=clamp_srgb)\n    elif color_space is not None:\n        array = color_transform(array, \"Linear\", color_space, clamp_srgb=clamp_srgb)\n    if top_to_bottom:\n        array = np.flipud(array)\n    return array\n\n\ndef np_to_render_pass(\n    array: NDArray,\n    render_pass: \"bpy.types.RenderPass\",\n    *,\n    inverse_color_management: bool = False,\n    color_space: str | None = None,\n    dtype: DTypeLike = np.float32,\n    top_to_bottom: bool = True\n):\n    if inverse_color_management:\n        array = scene_color_transform(array, inverse=True, color_space=color_space)\n    elif color_space is not None:\n        array = color_transform(color_space, \"Linear\")\n    if channels(array) != render_pass.channels:\n        match render_pass.channels:\n            case 1:\n                array = grayscale(array)\n            case 3:\n                array = rgb(array)\n            case 4:\n                array = rgba(array)\n            case _:\n                raise NotImplementedError(f\"Render pass {render_pass.name} unexpectedly requires {render_pass.channels} channels\")\n    if dtype is not None:\n        array = to_dtype(array, dtype)\n    if top_to_bottom:\n        array = np.flipud(array)\n    if BLENDER_VERSION >= (4, 1, 0):\n        render_pass.rect.foreach_set(array.reshape(-1))\n    else:\n        render_pass.rect.foreach_set(array.reshape(-1, render_pass.channels))\n\n\ndef _mode(array, mode):\n    if mode is None:\n        return array\n    elif mode == \"RGBA\":\n        return rgba(array)\n    elif mode == \"RGB\":\n        return rgb(array)\n    elif mode == \"L\":\n        return grayscale(array)\n    elif mode == \"LA\":\n        return ensure_alpha(_passthrough_alpha(array, grayscale(array)))\n    raise ValueError(f\"mode expected one of {['RGB', 'RGBA', 'L', 'LA', None]}, got {repr(mode)}\")\n\n\ndef pil_to_np(image, *, dtype: DTypeLike | None = np.float32, mode: Literal[\"RGB\", \"RGBA\", \"L\", \"LA\"] | None = None) -> NDArray:\n    # some modes don't require being converted to RGBA for proper handling in other module functions\n    # see for other modes https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes\n    if image.mode not in [\"RGB\", \"RGBA\", \"L\", \"LA\", \"I\", \"F\", \"I;16\"]:\n        image = image.convert(\"RGBA\")\n    array = np.array(image)\n    if dtype is not None:\n        array = to_dtype(array, dtype)\n    array = _mode(array, mode)\n    return array\n\n\ndef np_to_pil(array: NDArray, *, mode: Literal[\"RGB\", \"RGBA\", \"L\", \"LA\"] | None = None):\n    from PIL import Image\n    array = to_dtype(array, np.uint8)\n    if mode is None:\n        if channels(array) == 1 and array.ndim == 3:\n            # PIL L mode can't have a channel dimension\n            array = array[..., 1]\n    else:\n        array = _mode(array, mode)\n    # PIL does support higher precision modes for a single channel, but I don't see a need for supporting them yet.\n    # uint16=\"I;16\", int32=\"I\", float32=\"F\"\n    return Image.fromarray(array, mode=mode)\n\n\ndef _dtype_to_type_desc(dtype):\n    import OpenImageIO as oiio\n    dtype = np.dtype(dtype)\n    match dtype:\n        case np.uint8:\n            return oiio.TypeUInt8\n        case np.uint16:\n            return oiio.TypeUInt16\n        case np.uint32:\n            return oiio.TypeUInt32\n        case np.uint64:\n            return oiio.TypeUInt64\n        case np.int8:\n            return oiio.TypeInt8\n        case np.int16:\n            return oiio.TypeInt16\n        case np.int32:\n            return oiio.TypeInt32\n        case np.int64:\n            return oiio.TypeInt64\n        case np.float16:\n            return oiio.TypeHalf\n        case np.float32:\n            return oiio.TypeFloat\n        case np.float64:\n            # no oiio.TypeDouble\n            return oiio.TypeDesc(oiio.BASETYPE.DOUBLE)\n    raise TypeError(f\"can't convert {dtype} to OpenImageIO.TypeDesc\")\n\n\n@RunInSubprocess.when(not has_oiio)\ndef path_to_np(\n        path: str | PathLike,\n        *,\n        dtype: DTypeLike | None = np.float32,\n        default_color_space: str | None = None,\n        to_color_space: str | None = \"sRGB\"\n) -> NDArray:\n    \"\"\"\n    Args:\n        path: Path to an image file.\n        dtype: Data type of the returned array. `None` won't change the data type. The data type may still change if a color transform occurs.\n        default_color_space: The color space that `image_or_path` will be handled as when it can't be determined automatically.\n        to_color_space: Color space of the returned array. `None` won't apply a color transform.\n    \"\"\"\n    if has_oiio:\n        import OpenImageIO as oiio\n        image = oiio.ImageInput.open(str(path))\n        if image is None:\n            raise IOError(oiio.geterror())\n        type_desc = image.spec().format\n        if dtype is not None:\n            type_desc = _dtype_to_type_desc(dtype)\n        array = image.read_image(type_desc)\n        from_color_space = image.spec().get_string_attribute(\"oiio:ColorSpace\", default_color_space)\n        image.close()\n    else:\n        from PIL import Image\n        array = pil_to_np(Image.open(path))\n        if dtype is not None:\n            array = to_dtype(array, dtype)\n        from_color_space = \"sRGB\"\n    if from_color_space is not None and to_color_space is not None:\n        array = color_transform(array, from_color_space, to_color_space)\n    return array\n\n\nImageOrPath = Union[NDArray, \"PIL.Image.Image\", str, PathLike]\n\"\"\"Backend compatible image types\"\"\"\n\n\ndef image_to_np(\n        image_or_path: ImageOrPath | \"bpy.types.Image\" | None,\n        *,\n        dtype: DTypeLike | None = np.float32,\n        mode: Literal[\"RGB\", \"RGBA\", \"L\", \"LA\"] | None = \"RGBA\",\n        default_color_space: str | None = None,\n        to_color_space: str | None = \"sRGB\",\n        size: Tuple[int, int] | None = None,\n        top_to_bottom: bool = True\n) -> NDArray:\n    \"\"\"\n    Opens an image from disk or takes an image object and converts it to `numpy.ndarray`.\n    Usable for image argument sanitization when the source can vary in type or format.\n\n    Args:\n        image_or_path: Either a file path or an instance of `bpy.types.Image`, `PIL.Image.Image`, or `numpy.ndarray`. `None` will return `None`.\n        dtype: Data type of the returned array. `None` won't change the data type. The data type may still change if a color transform occurs.\n        mode: Channel mode of the returned array. `None` won't change the mode. The mode may still change if a color transform occurs.\n        default_color_space: The color space that `image_or_path` will be handled as when it can't be determined automatically.\n        to_color_space: Color space of the returned array. `None` won't apply a color transform.\n        size: Resize to specific dimensions. `None` won't change the size.\n        top_to_bottom: Flips the image like `bpy_to_np(top_to_bottom=True)` does when `True` and `image_or_path` is a Blender image. Other image sources will only be flipped when `False`.\n    \"\"\"\n\n    if image_or_path is None:\n        return None\n\n    # convert image_or_path to numpy.ndarray\n    match image_or_path:\n        case PathLike() | str():\n            array = path_to_np(image_or_path, dtype=dtype, default_color_space=default_color_space, to_color_space=to_color_space)\n            from_color_space = None\n        case object(__module__=\"PIL.Image\", __class__=type(__name__=\"Image\")):\n            # abnormal class check because PIL cannot be imported on frontend\n            array = pil_to_np(image_or_path)\n            from_color_space = \"sRGB\"\n        case object(__module__=\"bpy.types\", __class__=type(__name__=\"Image\")):\n            # abnormal class check because bpy cannot be imported on backend\n            array = bpy_to_np(image_or_path, color_space=to_color_space)\n            from_color_space = None\n        case np.ndarray():\n            array = image_or_path\n            from_color_space = default_color_space\n        case _:\n            raise TypeError(f\"not an image or path {repr(type(image_or_path))}\")\n\n    # apply image requirements\n    if not top_to_bottom:\n        array = np.flipud(array)\n    if from_color_space is not None and to_color_space is not None:\n        array = color_transform(array, from_color_space, to_color_space)\n    if dtype is not None:\n        array = to_dtype(array, dtype)\n    array = _mode(array, mode)\n    if size is not None:\n        array = resize(array, size)\n\n    return array\n"
        },
        {
          "name": "operators",
          "type": "tree",
          "content": null
        },
        {
          "name": "preferences.py",
          "type": "blob",
          "size": 20.458984375,
          "content": "import bpy\nfrom bpy.props import CollectionProperty, StringProperty\nfrom bpy_extras.io_utils import ImportHelper\nimport os\nimport webbrowser\nimport importlib.util\nimport site\n\nfrom .absolute_path import absolute_path\nfrom .operators.install_dependencies import InstallDependencies, UninstallDependencies\nfrom .operators.open_latest_version import OpenLatestVersion\nfrom .ui.presets import RestoreDefaultPresets, default_presets_missing\nfrom .generator_process import Generator\nfrom .generator_process.actions.huggingface_hub import DownloadStatus, Model as HubModel\nfrom .generator_process.models import Checkpoint, ModelConfig, ModelType\n\nis_downloading = False\n\nclass OpenURL(bpy.types.Operator):\n    bl_idname = \"dream_textures.open_url\"\n    bl_label = \"Get Access Token\"\n    bl_description = (\"Opens huggingface.co to the tokens page\")\n    bl_options = {\"REGISTER\", \"INTERNAL\"}\n\n    url: bpy.props.StringProperty(name=\"URL\")\n\n    def execute(self, context):\n        webbrowser.open(self.url)\n        return {\"FINISHED\"}\n\n_model_config_options = [(m.name, m.value, '') for m in ModelConfig]\nimport_extensions = ['.ckpt', '.safetensors', '.pth']\nimport_extensions_glob = \";\".join(import_extensions).replace(\".\", \"*.\")\nclass ImportWeights(bpy.types.Operator, ImportHelper):\n    bl_idname = \"dream_textures.import_weights\"\n    bl_label = \"Import Checkpoint File\"\n    filename_ext = \".ckpt\"\n    filter_glob: bpy.props.StringProperty(\n        default=import_extensions_glob,\n        options={'HIDDEN'},\n        maxlen=255,\n    )\n    model_config: bpy.props.EnumProperty(\n        name=\"Model Config\",\n        items=_model_config_options\n    )\n    prefer_fp16_variant: bpy.props.BoolProperty(\n        name=\"Save Half Precision Weights\",\n        default=True\n    )\n\n    def execute(self, context):\n        global is_downloading\n        is_downloading = True\n        f = Generator.shared().convert_original_stable_diffusion_to_diffusers(self.filepath, ModelConfig[self.model_config], self.prefer_fp16_variant)\n        def on_progress(_, response: DownloadStatus):\n            bpy.context.preferences.addons[__package__].preferences.download_file = response.file\n            bpy.context.preferences.addons[__package__].preferences.download_progress = int((response.index / response.total) * 100)\n        def on_done(future):\n            global is_downloading\n            is_downloading = False\n            fetch_installed_models()\n        def on_exception(_, exception):\n            self.report({\"ERROR\"}, str(exception))\n            raise exception\n        f.add_response_callback(on_progress)\n        f.add_done_callback(on_done)\n        f.add_exception_callback(on_exception)\n        return {\"FINISHED\"}\n\nclass Model(bpy.types.PropertyGroup):\n    bl_label = \"Model\"\n    bl_idname = \"dream_textures.Model\"\n\n    model: bpy.props.StringProperty(name=\"Model\")\n    model_base: bpy.props.StringProperty()\n    downloads: bpy.props.IntProperty(name=\"Downloads\")\n    likes: bpy.props.IntProperty(name=\"Likes\")\n    model_type: bpy.props.EnumProperty(name=\"Model Type\", items=[(t.name, t.name, '') for t in ModelType])\n\nclass PREFERENCES_UL_ModelList(bpy.types.UIList):\n    def draw_item(self, context, layout, data, item, icon, active_data, active_propname):\n        model_name = item.model\n        is_installed = False\n        if os.path.exists(item.model):\n            model_name = os.path.basename(item.model).replace('models--', '').replace('--', '/')\n            is_installed = True\n        split = layout.split(factor=0.75)\n        split.label(text=model_name)\n        if item.downloads != -1:\n            split.label(text=str(item.downloads), icon=\"IMPORT\")\n        if item.downloads != -1:\n            split.label(text=str(item.likes), icon=\"HEART\")\n        if ModelType[item.model_type] != ModelType.UNKNOWN:\n            split.label(text=item.model_type.replace('_', ' ').title())\n        install_model = layout.operator(InstallModel.bl_idname, text=\"\", icon=\"FILE_FOLDER\" if is_installed else \"IMPORT\")\n        install_model.model = item.model\n        install_model.prefer_fp16_variant = data.prefer_fp16_variant\n        install_model.resume_download = data.resume_download\n\ndef set_model_list(model_list: str, models: list):\n    getattr(bpy.context.preferences.addons[__package__].preferences, model_list).clear()\n    for model in models:\n        m = getattr(bpy.context.preferences.addons[__package__].preferences, model_list).add()\n        m.model = model.id\n        m.model_base = os.path.basename(model.id)\n        m.downloads = model.downloads\n        m.likes = model.likes\n        try:\n            m.model_type = model.model_type.name\n        except:\n            pass\n\nclass checkpoint_lookup:\n    _checkpoints = {}\n\n    @classmethod\n    def get(cls, item):\n        return cls._checkpoints.get(item, item)\n\nclass model_lookup:\n    _models = {}\n\n    @classmethod\n    def get(cls, item):\n        return cls._models.get(item, None)\n\ndef fetch_installed_models(blocking=True):\n    def on_done(future):\n        model_list = future.result()\n\n        model_lookup._models = { os.path.basename(model.id).replace('models--', '').replace('--', '/'): model for model in model_list }\n\n        pref = bpy.context.preferences.addons[__package__].preferences\n        checkpoint_links = ((link.path, ModelConfig[link.model_config]) for link in pref.linked_checkpoints)\n        checkpoints = {}\n        for path, config in checkpoint_links:\n            if not os.path.exists(path):\n                continue\n            if os.path.isfile(path):\n                checkpoints[os.path.basename(path)] = (path, config)\n                continue\n            for name in os.listdir(path):\n                if os.path.splitext(name)[1] not in import_extensions:\n                    continue\n                if name in checkpoints:\n                    # file linked config takes precedence over folder linked config\n                    continue\n                checkpoints[name] = (os.path.join(path, name), config)\n        checkpoint_lookup._checkpoints.clear()\n        for path, config in checkpoints.values():\n            model = HubModel(path, \"\", [], -1, -1, ModelType.from_config(config))\n            model_list.append(model)\n            checkpoint_lookup._checkpoints[os.path.basename(path)] = Checkpoint(path, config)\n            model_lookup._models[os.path.basename(path)] = model\n\n        set_model_list('installed_models', model_list)\n\n    future = Generator.shared().hf_list_installed_models()\n    if blocking:\n        on_done(future)\n    else:\n        future.add_done_callback(on_done)\n\n\nclass ModelSearch(bpy.types.Operator):\n    bl_idname = \"dream_textures.model_search\"\n    bl_label = \"Search\"\n    bl_description = (\"Searches Hugging Face Hub for models\")\n    bl_options = {\"REGISTER\", \"INTERNAL\"}\n\n    def execute(self, context):\n        \n        return {\"FINISHED\"}\n\nclass InstallModel(bpy.types.Operator):\n    bl_idname = \"dream_textures.install_model\"\n    bl_label = \"Install or Open\"\n    bl_description = (\"Install or open a model from the cache\")\n    bl_options = {\"REGISTER\", \"INTERNAL\"}\n\n    model: StringProperty(name=\"Model ID\")\n    prefer_fp16_variant: bpy.props.BoolProperty(name=\"\", default=True)\n    resume_download: bpy.props.BoolProperty(name=\"\", default=True)\n\n    def execute(self, context):\n        if os.path.exists(self.model):\n            if os.path.isfile(self.model):\n                webbrowser.open(f\"file://{os.path.dirname(self.model)}\")\n            else:\n                webbrowser.open(f\"file://{self.model}\")\n        else:\n            global is_downloading\n            is_downloading = True\n            f = Generator.shared().hf_snapshot_download(\n                self.model,\n                bpy.context.preferences.addons[__package__].preferences.hf_token,\n                \"fp16\" if self.prefer_fp16_variant else None,\n                self.resume_download\n            )\n            def on_progress(_, response: DownloadStatus):\n                bpy.context.preferences.addons[__package__].preferences.download_file = response.file\n                bpy.context.preferences.addons[__package__].preferences.download_progress = int((response.index / response.total) * 100)\n            def on_done(future):\n                global is_downloading\n                is_downloading = False\n                fetch_installed_models()\n            def on_exception(_, exception):\n                self.report({\"ERROR\"}, str(exception))\n                raise exception\n            f.add_response_callback(on_progress)\n            f.add_done_callback(on_done)\n            f.add_exception_callback(on_exception)\n        return {\"FINISHED\"}\n\ndef _model_search(self, context):\n    def on_done(future):\n        set_model_list('model_results', future.result())\n    Generator.shared().hf_list_models(self.model_query, self.hf_token).add_done_callback(on_done)\n\ndef _update_ui(self, context):\n    if hasattr(context.area, \"regions\"):\n        for region in context.area.regions:\n            if region.type == \"UI\":\n                region.tag_redraw()\n    return None\n\ndef _template_model_download_progress(context, layout):\n    global is_downloading\n    preferences = context.preferences.addons[StableDiffusionPreferences.bl_idname].preferences\n    if is_downloading:\n        progress_col = layout.column()\n        progress_col.label(text=preferences.download_file)\n        progress_col.prop(preferences, \"download_progress\", slider=True)\n        progress_col.enabled = False\n    return is_downloading\n\nclass CheckpointGroup(bpy.types.PropertyGroup):\n    bl_label = \"Model\"\n    bl_idname = \"dream_textures.checkpoint\"\n\n    path: bpy.props.StringProperty(name=\"Checkpoint\")\n    model_config: bpy.props.EnumProperty(\n        name=\"Model Config\",\n        items=_model_config_options\n    )\n\nclass LinkCheckpoint(bpy.types.Operator, ImportHelper):\n    bl_idname = \"dream_textures.link_checkpoint\"\n    bl_label = \"Link Checkpoint File or Folder\"\n    filename_ext = \".ckpt\"\n    files: CollectionProperty(\n        type=bpy.types.OperatorFileListElement,\n        options={'HIDDEN', 'SKIP_SAVE'}\n    )\n    filter_glob: bpy.props.StringProperty(\n        default=import_extensions_glob,\n        options={'HIDDEN'},\n        maxlen=255,\n    )\n    model_config: bpy.props.EnumProperty(\n        name=\"Model Config\",\n        items=_model_config_options\n    )\n\n    def invoke(self, context, _event):\n        if os.path.isfile(self.filepath):\n            # Reset to a directory, otherwise the filename remains populated and can cause issues to select a directory if gone unnoticed.\n            self.filepath = os.path.dirname(self.filepath) + os.path.sep\n        return super().invoke(context, _event)\n\n    def execute(self, context):\n        pref = context.preferences.addons[__package__].preferences\n        for file in self.files:\n            path = self.filepath\n            if file.name != \"\":\n                path = os.path.join(os.path.dirname(path), file.name)\n\n            if not os.path.exists(path):\n                self.report({\"ERROR\"}, f\"{path} does not exist\")\n                continue\n            if os.path.isfile(path) and os.path.splitext(path)[1] not in import_extensions:\n                self.report({\"ERROR\"}, f\"{os.path.basename(path)} is not a checkpoint\")\n                continue\n\n            link = next((link for link in pref.linked_checkpoints if link.path == path), None)\n            if link is None:\n                link = pref.linked_checkpoints.add()\n                link.path = path\n            link.model_config = self.model_config\n\n        fetch_installed_models()\n\n        return {\"FINISHED\"}\n\nclass UnlinkCheckpoint(bpy.types.Operator):\n    bl_idname = \"dream_textures.unlink_checkpoint\"\n    bl_label = \"Unlink Checkpoint File\"\n\n    path: bpy.props.StringProperty()\n    def execute(self, context):\n        pref = context.preferences.addons[__package__].preferences\n        index = next((i for i, link in enumerate(pref.linked_checkpoints) if link.path == self.path), -1)\n        if index != -1:\n            pref.linked_checkpoints.remove(index)\n\n        fetch_installed_models()\n\n        return {\"FINISHED\"}\n\nclass PREFERENCES_UL_CheckpointList(bpy.types.UIList):\n    def draw_item(self, context, layout, data, item, icon, active_data, active_propname):\n        split = layout.split(factor=0.75)\n        split.label(text=item.path)\n        split.label(text=ModelConfig[item.model_config].value)\n        install_model = layout.operator(InstallModel.bl_idname, text=\"\", icon=\"FILE_FOLDER\")\n        install_model.model = item.path\n        unlink = layout.operator(UnlinkCheckpoint.bl_idname, text=\"\", icon=\"TRASH\")\n        unlink.path = item.path\n\nclass StableDiffusionPreferences(bpy.types.AddonPreferences):\n    bl_idname = __package__\n\n    dream_studio_key: StringProperty(name=\"DreamStudio Key\")\n\n    model_query: StringProperty(name=\"Search\", update=_model_search)\n    model_results: CollectionProperty(type=Model)\n    active_model_result: bpy.props.IntProperty(name=\"Active Model\", default=0)\n    hf_token: StringProperty(name=\"HuggingFace Token\")\n    prefer_fp16_variant: bpy.props.BoolProperty(name=\"Prefer Half Precision Weights\", description=\"Download fp16 weights if available for smaller file size. If you run with 'Half Precision' disabled, you should not use this setting\", default=True)\n    resume_download: bpy.props.BoolProperty(name=\"Resume Incomplete Download\", description=\"Continue an in-progress download in case if Blender was closed or connection was interrupted, otherwise incomplete files will be entirely redownloaded\", default=True)\n\n    installed_models: CollectionProperty(type=Model)\n    active_installed_model: bpy.props.IntProperty(name=\"Active Model\", default=0)\n\n    linked_checkpoints: CollectionProperty(type=CheckpointGroup)\n    active_linked_checkpoint: bpy.props.IntProperty(name=\"Active Checkpoint\", default=0)\n\n    download_file: bpy.props.StringProperty(name=\"\")\n    download_progress: bpy.props.IntProperty(name=\"\", min=0, max=100, subtype=\"PERCENTAGE\", update=_update_ui)\n\n    model_cache = []\n\n    @staticmethod\n    def register():\n        fetch_installed_models(False)\n\n    def draw(self, context):\n        layout = self.layout\n\n        weights_installed = len(self.installed_models) > 0\n\n        if not weights_installed:\n            layout.label(text=\"Complete the following steps to finish setting up the addon:\")\n\n        has_dependencies = len(os.listdir(absolute_path(\".python_dependencies\"))) > 2\n        if has_dependencies:\n            if not _template_model_download_progress(context, layout):\n                conflicting_packages = [\"wandb\", \"k_diffusion\"]\n                conflicting_package_specs = {}\n                for package in conflicting_packages:\n                    spec = importlib.util.find_spec(package)\n                    if spec is not None:\n                        conflicting_package_specs[package] = spec\n                if len(conflicting_package_specs) > 0:\n                    conflicts_box = layout.box()\n                    conflicts_box.label(text=\"WARNING\", icon=\"ERROR\")\n                    conflicts_box.label(text=f\"The following packages conflict with Dream Textures: {', '.join(conflicting_packages)}\")\n                    conflicts_box.label(text=f\"You may need to run Blender as an administrator to remove these packages\")\n                    conflicts_box.operator(UninstallDependencies.bl_idname, text=\"Uninstall Conflicting Packages\", icon=\"CANCEL\").conflicts = ' '.join(conflicting_packages)\n                    conflicts_box.label(text=f\"If the button above fails, you can remove the following folders manually:\")\n                    for package in conflicting_packages:\n                        if package not in conflicting_package_specs:\n                            continue\n                        location = conflicting_package_specs[package].submodule_search_locations[0]\n                        conflicts_box.operator(OpenURL.bl_idname, text=f\"Open '{location}'\").url = f\"file://{location}\"\n\n                if not weights_installed:\n                    default_weights_box = layout.box()\n                    default_weights_box.label(text=\"You need to download at least one model.\")\n                    install_model = default_weights_box.operator(InstallModel.bl_idname, text=\"Download Stable Diffusion v2.1 (Recommended)\", icon=\"IMPORT\")\n                    install_model.model = \"stabilityai/stable-diffusion-2-1\"\n                    install_model.prefer_fp16_variant = self.prefer_fp16_variant\n                    install_model.resume_download = self.resume_download\n\n                search_box = layout.box()\n                search_box.label(text=\"Find Models\", icon=\"SETTINGS\")\n                search_box.label(text=\"Search Hugging Face Hub for more compatible models.\")\n\n                search_box.prop(self, \"model_query\", text=\"\", icon=\"VIEWZOOM\")\n                \n                if len(self.model_results) > 0:\n                    search_box.template_list(PREFERENCES_UL_ModelList.__name__, \"dream_textures_model_results\", self, \"model_results\", self, \"active_model_result\")\n\n                search_box.label(text=\"Some models require authentication. Provide a token to download gated models.\")\n\n                auth_row = search_box.row()\n                auth_row.prop(self, \"hf_token\", text=\"Token\")\n                auth_row.operator(OpenURL.bl_idname, text=\"Get Your Token\", icon=\"KEYINGSET\").url = \"https://huggingface.co/settings/tokens\"\n                \n                search_box.prop(self, \"prefer_fp16_variant\")\n                search_box.prop(self, \"resume_download\")\n\n            layout.template_list(PREFERENCES_UL_ModelList.__name__, \"dream_textures_installed_models\", self, \"installed_models\", self, \"active_installed_model\")\n            import_weights = layout.operator(ImportWeights.bl_idname, icon='IMPORT')\n            import_weights.prefer_fp16_variant = self.prefer_fp16_variant\n            layout.template_list(PREFERENCES_UL_CheckpointList.__name__, \"dream_textures_linked_checkpoints\", self, \"linked_checkpoints\", self, \"active_linked_checkpoint\")\n            layout.operator(LinkCheckpoint.bl_idname, icon='FOLDER_REDIRECT')\n\n            if weights_installed or len(self.dream_studio_key) > 0:\n                complete_box = layout.box()\n                complete_box.label(text=\"Addon Setup Complete\", icon=\"CHECKMARK\")\n                complete_box.label(text=\"To locate the interface:\")\n                complete_box.label(text=\"1. Open an Image Editor or Shader Editor space\")\n                complete_box.label(text=\"2. Enable 'View' > 'Sidebar'\")\n                complete_box.label(text=\"3. Select the 'Dream' tab\")\n            \n            if default_presets_missing():\n                presets_box = layout.box()\n                presets_box.label(text=\"Default Presets\", icon=\"PRESET\")\n                presets_box.label(text=\"It looks like you removed some of the default presets.\")\n                presets_box.label(text=\"You can restore them here.\")\n                presets_box.operator(RestoreDefaultPresets.bl_idname, icon=\"RECOVER_LAST\")\n        else:\n            missing_dependencies_box = layout.box()\n            missing_dependencies_box.label(text=\"Dependencies Missing\", icon=\"ERROR\")\n            missing_dependencies_box.label(text=\"You've likely downloaded source instead of release by accident.\")\n            missing_dependencies_box.label(text=\"Follow the instructions to install for your platform.\")\n            missing_dependencies_box.operator(OpenLatestVersion.bl_idname, text=\"Download Latest Release\")\n        \n        contributors_box = layout.box()\n        contributors_box.label(text=\"Contributors\", icon=\"COMMUNITY\")\n        contributors_box.label(text=\"Dream Textures is made possible by the contributors on GitHub.\")\n        contributors_box.operator(OpenURL.bl_idname, text=\"See All Contributors\", icon=\"URL\").url = \"https://github.com/carson-katri/dream-textures/graphs/contributors\"\n\n        if context.preferences.view.show_developer_ui: # If 'Developer Extras' is enabled, show addon development tools\n            developer_box = layout.box()\n            developer_box.label(text=\"Development Tools\", icon=\"CONSOLE\")\n            warn_box = developer_box.box()\n            warn_box.label(text=\"WARNING\", icon=\"ERROR\")\n            warn_box.label(text=\"This section is for addon development only.\")\n            warn_box.label(text=\"Do not use any operators in this section unless you are setting up a development environment.\")\n            if has_dependencies:\n                warn_box = developer_box.box()\n                warn_box.label(text=\"Dependencies already installed. Only install below if you developing the addon\", icon=\"CHECKMARK\")\n            developer_box.prop(context.scene, 'dream_textures_requirements_path')\n            developer_box.operator_context = 'INVOKE_DEFAULT'\n            developer_box.operator(InstallDependencies.bl_idname, icon=\"CONSOLE\")\n"
        },
        {
          "name": "prompt_engineering.py",
          "type": "blob",
          "size": 4.068359375,
          "content": "from collections import namedtuple\n\nPromptToken = namedtuple('PromptToken', ['id', 'label', 'values'])\nPromptStructure = namedtuple('PromptStructure', ['id', 'label', 'structure', 'generate'])\n\nframing_token = PromptToken('framing', 'Framing', (\n    ('ecu', 'Extreme Close-up'),\n    ('cu', 'Close-up'),\n    ('mcu', 'Medium Close Up'),\n    ('ms', 'Medium Shot'),\n    ('ls', 'Long Shot'),\n    ('els', 'Extra Long Shot'),\n))\n\nposition_token = PromptToken('position', 'Position', (\n    ('overhead', 'Overhead View'),\n    ('aerial', 'Aerial View'),\n    ('low', 'Low Angle'),\n    ('dutch', 'Dutch Angle'),\n    ('ots', 'Over-the-shoulder shot'),\n))\n\nfilm_type_token = PromptToken('film_type', 'Film Type', (\n    ('bw', 'Black & White'),\n    ('fc', 'Full Color'),\n    ('cine', 'Cinematic'),\n    ('polaroid', 'Polaroid'),\n    ('anaglyph', 'Anaglyph'),\n    ('double', 'Double Exposure'),\n))\n\ncamera_settings_token = PromptToken('camera_settings', 'Camera Settings', (\n    ('high_speed', 'Fast Shutter Speed'),\n    ('long_exposure', 'Long Exposure'),\n    ('bokeh', 'Shallow Depth of Field'),\n    ('deep_dof', 'Deep Depth of Field'),\n    ('tilt_shift', 'Tilt Shift'),\n    ('motion_blur', 'Motion Blur'),\n    ('telephoto', 'Telephoto Lens'),\n    ('macro', 'Macro Lens'),\n    ('wide_angle', 'Wide Angle Lens'),\n    ('fish_eye', 'Fish-Eye Lens'),\n))\n\nshooting_context_token = PromptToken('shooting_context', 'Shooting Context', (\n    ('film_still', 'Film Still'),\n    ('photograph', 'Photograph'),\n    ('studio_portrait', 'Studio Portrait Photograph'),\n    ('outdoor', 'Outdoor Photograph'),\n    ('cctv', 'Surveillance Footage'),\n))\n\nsubject_token = PromptToken('subject', 'Subject', ())\n\nlighting_token = PromptToken('lighting', 'Lighting', (\n    ('golden_hour', 'Golden Hour'),\n    ('blur_hour', 'Blue Hour'),\n    ('midday', 'Midday'),\n    ('overcast', 'Overcast'),\n    ('silhouette', 'Mostly Silhouetted'),\n    \n    ('warm', 'Warm Lighting, 2700K'),\n    ('cold', 'Flourescent Lighting, 4800K'),\n    ('flash', 'Harsh Flash'),\n    ('ambient', 'Ambient Lighting'),\n    ('dramatic', 'Dramatic Lighting'),\n    ('backlit', 'Backlit'),\n    ('studio', 'Studio Lighting'),\n    ('above', 'Lit from Above'),\n    ('below', 'Lit from Below'),\n    ('left', 'Lit from the Left'),\n    ('right', 'Lit from the Right'),\n))\n\ndef texture_prompt(tokens):\n    return f\"{tokens.subject} texture\"\ntexture_structure = PromptStructure(\n    'texture',\n    'Texture',\n    [subject_token],\n    texture_prompt\n)\n\ndef photography_prompt(tokens):\n    return f\"A {tokens.framing} {tokens.position} {tokens.film_type} {tokens.camera_settings} {tokens.shooting_context} of {tokens.subject}, {tokens.lighting}\"\n\nphotography_structure = PromptStructure(\n    'photography',\n    'Photography',\n    (subject_token, framing_token, position_token, film_type_token, camera_settings_token, shooting_context_token, lighting_token),\n    photography_prompt\n)\n\nsubject_type_token = PromptToken('subject_type', 'Subject Type', (\n    ('environment', 'Environment'),\n    ('character', 'Character'),\n    ('weapon', 'Weapon'),\n    ('vehicle', 'Vehicle'),\n))\n\ngenre_token = PromptToken('genre', 'Genre', (\n    ('scifi', 'Sci-Fi'),\n    ('fantasy', 'Fantasy'),\n    ('cyberpunk', 'Cyberpunk'),\n    ('cinematic', 'Cinematic'),\n))\n\ndef concept_art_prompt(tokens):\n    return f\"{tokens.subject}, {tokens.subject_type} concept art, {tokens.genre} digital painting, trending on ArtStation\"\n\nconcept_art_structure = PromptStructure(\n    'concept_art',\n    'Concept Art',\n    (subject_token, subject_type_token, genre_token),\n    concept_art_prompt\n)\n\ndef custom_prompt(tokens):\n    return f\"{tokens.subject}\"\ncustom_structure = PromptStructure(\n    'custom',\n    'Custom',\n    [subject_token],\n    custom_prompt\n)\n\ndef file_batch_prompt(tokens):\n    return f\"\"\nfile_batch_structure = PromptStructure(\n    'file_batch',\n    \"File Batch\",\n    [],\n    file_batch_prompt\n)\n\nprompt_structures = [\n    custom_structure,\n    texture_structure,\n    photography_structure,\n    concept_art_structure,\n    file_batch_structure\n]\n\ndef map_structure(x):\n    return (x.id, x.label, '')\nprompt_structures_items = list(map(map_structure, prompt_structures))"
        },
        {
          "name": "property_groups",
          "type": "tree",
          "content": null
        },
        {
          "name": "realtime_viewport.py",
          "type": "blob",
          "size": 6.7431640625,
          "content": "# Realtime Viewport is still under development, and is not currently used.\nimport bpy\nimport cycles\nimport time\nimport threading\nimport gpu\nfrom gpu_extras.batch import batch_for_shader\nimport numpy as np\nfrom multiprocessing.shared_memory import SharedMemory\nfrom .operators.dream_texture import dream_texture\n\nview_update_original = cycles.CyclesRender.view_update\nview_draw_original = cycles.CyclesRender.view_draw\n\ndef debounce(wait_time):\n    \"\"\"\n    Decorator that will debounce a function so that it is called after wait_time seconds\n    If it is called multiple times, will wait for the last call to be debounced and run only this one.\n    \"\"\"\n\n    def decorator(function):\n        def debounced(*args, **kwargs):\n            def call_function():\n                debounced._timer = None\n                return function(*args, **kwargs)\n            # if we already have a call to the function currently waiting to be executed, reset the timer\n            if debounced._timer is not None:\n                debounced._timer.cancel()\n\n            # after wait_time, call the function provided to the decorator with its arguments\n            debounced._timer = threading.Timer(wait_time, call_function)\n            debounced._timer.start()\n\n        debounced._timer = None\n        return debounced\n\n    return decorator\n\ndef DREAMTEXTURES_HT_viewport_enabled(self, context):\n    self.layout.prop(context.scene, \"dream_textures_viewport_enabled\", text=\"\", icon=\"OUTLINER_OB_VOLUME\" if context.scene.dream_textures_viewport_enabled else \"VOLUME_DATA\", toggle=True)\n\nis_rendering_viewport = False\nlast_viewport_update = time.time()\nlast_viewport_pixel_buffer_update = time.time()\ndream_viewport = None\nis_rendering_dream = False\nrender_dream_flag = False\nviewport_pixel_buffer = None\nviewport_size = (0, 0)\nignore_next = 0\ndef create_image():\n    print(\"Create image\")\n    global dream_viewport\n    dream_viewport = bpy.data.images.new('Dream Viewport', width=32, height=32)\n\ndef register_realtime_viewport():\n    bpy.app.timers.register(create_image)\n\n    def view_update_decorator(original):\n        def view_update(self, context, depsgraph):\n            result = original(self, context, depsgraph)\n            global last_viewport_update\n            global ignore_next\n            if ignore_next <= 0:\n                last_viewport_update = time.time()\n                print(\"View Update\")\n            ignore_next -= 1\n            return result\n        return view_update\n    cycles.CyclesRender.view_update = view_update_decorator(cycles.CyclesRender.view_update)\n    \n    def updates_stopped():\n        global last_viewport_update\n        global is_rendering_viewport\n        global is_rendering_dream\n        threshold_reached = (time.time() - last_viewport_update) < 0.5\n        if threshold_reached != is_rendering_viewport:\n            is_rendering_viewport = threshold_reached\n            global viewport_pixel_buffer\n            if not is_rendering_viewport and not is_rendering_dream and viewport_pixel_buffer is not None:\n                print(\"Stopped rendering viewport\")\n                is_rendering_dream = True\n                array = np.flipud((np.array(viewport_pixel_buffer) * 255).astype(np.int8))\n                pixels_memory = SharedMemory(create=True, size=array.nbytes)\n                pixels_memory_array = np.ndarray(array.shape, dtype=array.dtype, buffer=pixels_memory.buf)\n                pixels_memory_array[:] = array[:]\n\n                def image_callback(shared_memory_name, seed, width, height, upscaled=False):\n                    if not upscaled:\n                        shared_memory = SharedMemory(shared_memory_name)\n                        pixels = np.frombuffer(shared_memory.buf, dtype=np.float32).copy()\n\n                        global ignore_next\n                        ignore_next = 5\n                        global dream_viewport\n                        dream_viewport.scale(width, height)\n                        dream_viewport.pixels[:] = pixels\n\n                        shared_memory.close()\n                        pixels_memory.close()\n\n                        print(\"Done\")\n                        global is_rendering_dream\n                        is_rendering_dream = False\n                        # for area in bpy.context.screen.areas:\n                        #     if area.type == 'VIEW_3D':\n                                # area.tag_redraw()\n                \n                def step_callback(step, width=None, height=None, shared_memory_name=None):\n                    pass\n\n                dream_texture(bpy.context.scene.dream_textures_render_properties_prompt, step_callback, image_callback, init_img_shared_memory=pixels_memory.name, init_img_shared_memory_width=viewport_size[0], init_img_shared_memory_height=viewport_size[1])\n        return 0.5\n    bpy.app.timers.register(updates_stopped)\n\n    def draw():\n        global last_viewport_pixel_buffer_update\n        if not bpy.context.scene.dream_textures_viewport_enabled:\n            return\n        if (time.time() - last_viewport_pixel_buffer_update) < 0.5:\n            return\n        last_viewport_pixel_buffer_update = time.time()\n        # get currently bound framebuffer\n        framebuffer = gpu.state.active_framebuffer_get()\n\n        # get information on current viewport \n        viewport_info = gpu.state.viewport_get()\n        width = viewport_info[2]\n        height = viewport_info[3]\n        \n        global viewport_pixel_buffer\n        global viewport_size\n        viewport_pixel_buffer = framebuffer.read_color(0, 0, width, height, 4, 0, 'FLOAT').to_list()\n        viewport_size = (width, height)\n\n    bpy.types.SpaceView3D.draw_handler_add(draw, (), 'WINDOW', 'PRE_VIEW')\n    def draw_dream():\n        global is_rendering_dream\n        global is_rendering_viewport\n        global dream_viewport\n        if not bpy.context.scene.dream_textures_viewport_enabled or is_rendering_viewport:\n            return\n        texture = gpu.texture.from_image(dream_viewport)\n        viewport_info = gpu.state.viewport_get()\n        width = viewport_info[2]\n        height = viewport_info[3]\n        shader = gpu.shader.from_builtin(\"2D_IMAGE\")\n        shader.bind()\n        shader.uniform_sampler(\"image\", texture)\n        batch = batch_for_shader(shader, 'TRI_FAN', {\n            'pos': ((0, 0), (width, 0), (width, height), (0, height)),\n            'texCoord': ((0, 0), (1, 0), (1, 1), (0, 1)),\n        })\n        batch.draw(shader)\n    bpy.types.SpaceView3D.draw_handler_add(draw_dream, (), 'WINDOW', 'POST_PIXEL')\n\n    bpy.types.VIEW3D_HT_header.append(DREAMTEXTURES_HT_viewport_enabled)\n\ndef unregister_realtime_viewport():\n    global view_update_original\n    cycles.CyclesRender.view_update = view_update_original\n    global view_draw_original\n    cycles.CyclesRender.view_draw = view_draw_original\n    \n    bpy.types.VIEW3D_HT_header.remove(DREAMTEXTURES_HT_viewport_enabled)"
        },
        {
          "name": "render_pass.py",
          "type": "blob",
          "size": 6.3056640625,
          "content": "import bpy\nimport cycles\nimport numpy as np\nimport os\nfrom typing import List\nimport threading\nfrom .generator_process import Generator\nfrom . import api\nfrom . import image_utils\n\npass_inputs = [\n    ('color', 'Color', 'Provide the scene color as input'),\n    ('depth', 'Depth', 'Provide the Z pass as depth input'),\n    ('color_depth', 'Color and Depth', 'Provide the scene color and depth as input'),\n]\n\nupdate_render_passes_original = cycles.CyclesRender.update_render_passes\nrender_original = cycles.CyclesRender.render\n# del_original = cycles.CyclesRender.__del__\n\ndef register_render_pass():\n    def update_render_passes_decorator(original):\n        def update_render_passes(self, scene=None, renderlayer=None):\n            result = original(self, scene, renderlayer)\n            self.register_pass(scene, renderlayer, \"Dream Textures\", 4, \"RGBA\", 'COLOR')\n            return result\n        return update_render_passes\n    cycles.CyclesRender.update_render_passes = update_render_passes_decorator(cycles.CyclesRender.update_render_passes)\n    def render_decorator(original):\n        def render(self, depsgraph):\n            scene = depsgraph.scene if hasattr(depsgraph, \"scene\") else depsgraph\n            if not scene.dream_textures_render_properties_enabled:\n                return original(self, depsgraph)\n            result = original(self, depsgraph)\n            try:\n                original_result = self.get_result()\n                self.add_pass(\"Dream Textures\", 4, \"RGBA\")\n                scale = scene.render.resolution_percentage / 100.0\n                size_x = int(scene.render.resolution_x * scale)\n                size_y = int(scene.render.resolution_y * scale)\n                if size_x % 64 != 0 or size_y % 64 != 0:\n                    self.report({\"ERROR\"}, f\"Image dimensions must be multiples of 64 (e.x. 512x512, 512x768, ...) closest is {round(size_x/64)*64}x{round(size_y/64)*64}\")\n                    return result\n                render_result = self.begin_result(0, 0, size_x, size_y)\n                for layer in render_result.layers:\n                    for render_pass in layer.passes:\n                        if render_pass.name == \"Dream Textures\":\n                            try:\n                                self._render_dream_textures_pass(layer, (size_x, size_y), scene, render_pass, render_result)\n                            except Exception as e:\n                                self.error_set(str(e))\n                        else:\n                            source_pass = None\n                            for original_layer in original_result.layers:\n                                if layer.name == original_layer.name:\n                                    for original_pass in original_layer.passes:\n                                        if original_pass.name == render_pass.name:\n                                            source_pass = original_pass\n                            pixels = image_utils.render_pass_to_np(source_pass, size=(size_x, size_y))\n                            image_utils.np_to_render_pass(pixels, render_pass)\n                self.end_result(render_result)\n            except Exception as e:\n                print(e)\n            return result\n        return render\n    cycles.CyclesRender.render = render_decorator(cycles.CyclesRender.render)\n    cycles.CyclesRender._render_dream_textures_pass = _render_dream_textures_pass\n\n    # def del_decorator(original):\n    #     def del_patch(self):\n    #         result = original(self)\n    #         kill_generator()\n    #         return result\n    #     return del_patch\n    # cycles.CyclesRender.__del__ = del_decorator(cycles.CyclesRender.__del__)\n\ndef unregister_render_pass():\n    global update_render_passes_original\n    cycles.CyclesRender.update_render_passes = update_render_passes_original\n    global render_original\n    cycles.CyclesRender.render = render_original\n    del cycles.CyclesRender._render_dream_textures_pass\n    # global del_original\n    # cycles.CyclesRender.__del__ = del_original\n\ndef _render_dream_textures_pass(self, layer, size, scene, render_pass, render_result):\n    def combined():\n        self.update_stats(\"Dream Textures\", \"Applying color management transforms\")\n        return image_utils.render_pass_to_np(layer.passes[\"Combined\"], size, color_management=True, color_space=\"sRGB\")\n\n    def depth():\n        d = image_utils.render_pass_to_np(layer.passes[\"Depth\"], size).squeeze(2)\n        return (1 - np.interp(d, [0, np.ma.masked_equal(d, d.max(), copy=False).max()], [0, 1]))\n\n    self.update_stats(\"Dream Textures\", \"Starting\")\n    \n    prompt = scene.dream_textures_render_properties_prompt\n    match scene.dream_textures_render_properties_pass_inputs:\n        case 'color':\n            task = api.ImageToImage(\n                combined(),\n                prompt.strength,\n                True\n            )\n        case 'depth':\n            task = api.DepthToImage(\n                depth(),\n                None,\n                prompt.strength\n            )\n        case 'color_depth':\n            task = api.DepthToImage(\n                depth(),\n                combined(),\n                prompt.strength\n            )\n    event = threading.Event()\n    dream_pixels = None\n    def step_callback(progress: List[api.GenerationResult]) -> bool:\n        self.update_progress(progress[-1].progress / progress[-1].total)\n        image_utils.np_to_render_pass(progress[-1].image, render_pass)\n        self.update_result(render_result) # This does not seem to have an effect.\n        return True\n    def callback(results: List[api.GenerationResult] | Exception):\n        nonlocal dream_pixels\n        dream_pixels = results[-1].image\n        event.set()\n    \n    backend: api.Backend = prompt.get_backend()\n    generated_args: api.GenerationArguments = prompt.generate_args(bpy.context)\n    generated_args.task = task\n    generated_args.size = size\n    self.update_stats(\"Dream Textures\", \"Generating...\")\n    backend.generate(\n        generated_args,\n        step_callback=step_callback,\n        callback=callback\n    )\n\n    event.wait()\n\n    # Perform an inverse transform so when Blender applies its transform everything looks correct.\n    self.update_stats(\"Dream Textures\", \"Applying inverse color management transforms\")\n    image_utils.np_to_render_pass(dream_pixels, render_pass, inverse_color_management=True, color_space=\"sRGB\")\n\n    self.update_stats(\"Dream Textures\", \"Finished\")"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sd_configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.py",
          "type": "blob",
          "size": 0.0908203125,
          "content": "from .operators.inpaint_area_brush import InpaintAreaBrush\n\nTOOLS = (\n    InpaintAreaBrush,\n)"
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.py",
          "type": "blob",
          "size": 0.17578125,
          "content": "VERSION = (0, 4, 1)\ndef version_tag(version):\n    return f\"{version[0]}.{version[1]}.{version[2]}\"\n\ndef version_tuple(tag):\n    return tuple(map(lambda x: int(x), tag.split('.')))\n"
        }
      ]
    }
  ]
}