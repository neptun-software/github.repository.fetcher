{
  "metadata": {
    "timestamp": 1736560862905,
    "page": 572,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reorx/awesome-chatgpt-api",
      "stars": 6042,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "pb_data\npb_migrations\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1171875,
          "content": "[submodule \"site/themes/congo\"]\n\tpath = site/themes/congo\n\turl = https://github.com/jpanther/congo.git\n\tbranch = stable\n"
        },
        {
          "name": "README.cn.md",
          "type": "blob",
          "size": 22.458984375,
          "content": "# Awesome ChatGPT API\n\n精心策划的应用程序和工具列表，不仅使用新的 [ChatGPT API](https://platform.openai.com/docs/api-reference/chat), 还允许用户自行配置 [API keys](https://platform.openai.com/account/api-keys), 允许免费和按需使用自己的配额。\n\n还有一个[开发](#开发)部分，该部分为开发人员提供了一系列项目和文章，以帮助他们更好地进行构建.\n\n请访问网站获取最新消息: [awesome-chatgpt-api.top](https://awesome-chatgpt-api.top/)\n\n> 由 [Reorx](https://reorx.com) 收集整理，欢迎在 Twitter 或通过 PR 向我提交新的作品，但请确保您已经阅读了[提交须知](https://github.com/reorx/awesome-chatgpt-api/issues/21)。\n\n\n**目录表**\n\n- [插件和扩展](#插件和扩展)\n- [Web应用](#web应用)\n  - [类似chatgpt的Web-UI](#类似chatgpt的web-ui)\n  - [特殊用途](#特殊用途)\n- [桌面和移动应用程序](#桌面和移动应用程序)\n  - [类似chatgpt的Web-UI](#类似chatgpt的web-ui)\n  - [特殊用途](#特殊用途)\n- [CLI](#cli)\n- [聊天机器人](#聊天机器人)\n- [开发](#开发)\n  - [项目](#项目)\n  - [工具](#工具)\n  - [文章](#文章)\n\n\n## 插件和扩展\n\n- Chrome扩展\n\n    - [ChatGPT Box](https://github.com/josStorer/chatGPTBox)\n\n        深度ChatGPT集成在您的浏览器。支持在任何页面上随时调用聊天对话框，用右键菜单总结任何页面，独立对话页面，多个API等等。此扩展可在Chrome, Edge, Safari和Firefox上使用。\n\n    - [Glarity](https://glarity.app/)\n\n         总结谷歌搜索结果或YouTube视频与ChatGPT API，也支持雅虎!PubMed, PMC, NewsPicks, Github，日经，必应，谷歌专利。这个扩展还支持ChatGPT Webapp的API，不需要配置。\n\n    - [ChatGPT Sidebar](https://chatgpt-sidebar.com/)\n\n        在任何网页中打开侧边栏，向ChatGPT询问有关页面内容的任何信息。比如解释、翻译、总结或重写。您可以自定义提示以方便访问。这个扩展还支持ChatGPT Webapp的API，不需要配置。\n\n    - [ChatHub](https://chrome.google.com/webstore/detail/chathub-all-in-one-chatbo/iaakpnchhognanibcahlpcplchdfmgma)\n\n        ChatHub是一个一体化聊天机器人客户端，目前支持ChatGPT和新的必应聊天。它允许同时与多个聊天机器人聊天，便于比较它们的答案。源代码:[chathub-dev/chathub](https://github.com/chathub-dev/chathub)\n\n    - [TeamSmart AI](https://www.teamsmart.ai/)\n\n        TeamSmart AI是一款Chrome浏览器扩展，旨在提高您的生产力并增强您的ChatGPT体验。它允许你组建一个人工智能助手团队来帮助你完成日常任务。它可以与您自己的OpenAI API密钥一起使用。\n\n    - [OpenAI Translator](https://github.com/yetone/openai-translator)\n\n        一个Chrome扩展，使用OpenAI API翻译文本，附加功能，如抛光和总结。\n\n    - [ChatGPT » summarize everything!](https://chrome.google.com/webstore/detail/chatgpt-%C2%BB-summarize-every/cbgecfllfhmmnknmamkejadjmnmpfjmp)\n\n        一个Chrome扩展，总结任何网站与ChatGPT。\n        其他功能包括总结任何Youtube视频的成绩单和自定义模板。这个扩展还支持ChatGPT Webapp的API，不需要配置。\n\n- [Emacs](https://www.gnu.org/software/emacs/) Packages\n\n    - [GPTel](https://github.com/karthink/gptel)\n    \n        在Emacs中添加一个主模式，其作用类似于ChatGPT网页。它支持多个聊天会话，可以将任何文本选择发送到ChatGPT API，以获得答案，校对，代码建议等。\n        \n    - [org-ai](https://github.com/rksm/org-ai) \n    \n        在Emacs笔记包org模式中添加一个块，该块可以与ChatGPT聊天并使用dll - e生成图像。它支持语音到文本的输入和文本到语音的读出。\n\n- [Obsidian](https://obsidian.md/) Plugins\n\n    - [Obsidian Text Generator Plugin](https://github.com/nhaouari/obsidian-textgenerator-plugin)\n\n        根据你的黑曜石笔记产生想法、吸引人的标题、摘要、大纲和整个段落。\n\n- [Logseq](https://logseq.com/) Plugins\n\n    - [Logseq Plugin GPT3 OpenAI](https://github.com/briansunter/logseq-plugin-gpt3-openai)\n\n        一个插件使用GPT-3 AI辅助笔记在Logseq。\n\n- [Roam Research](https://roamresearch.com/) Plugins\n\n    - [roam-ai](https://github.com/LayBacc/roam-ai)\n\n        基于当前块生成文本;使用dall-e2生成图像;改述\n\n- [Popclip](https://pilotmoon.com/popclip/) Extensions\n\n    - [ChatGPT — PopClip Extensions](https://pilotmoon.com/popclip/extensions/page/ChatGPT)\n\n        将选定的文本发送到ChatGPT并附加响应。\n\n    - [ChatGPT Proofreader extension for Popclip](https://reorx.com/makers-daily/003-chatgpt-proofreader-extension-popclip/)\n\n        校对选定的文本，并附上增强的结果。\n\n    - [ChatGPT Grammar Check PopClip Extension](https://github.com/hirakujira/ChatGPT-Grammar-Check-PopClip-Extension)\n\n        类似于ChatGPT校对扩展，具有不同的提示符和可下载的包。\n\n- [Drafts](https://getdrafts.com/) Actions\n\n    - [ChatGPT Conversation | Drafts Directory](https://directory.getdrafts.com/a/2HJ)\n\n        在草稿笔记中与ChatGPT进行对话，新的回复将在最后添加。支持声明和修改系统、助手和用户角色消息块。\n\n- [Bob](https://bobtranslate.com/) Plugins\n\n    - [OpenAI Translator Bob Plugin](https://github.com/yetone/bob-plugin-openai-translator)\n\n        基于ChatGPT API的Bob插件，用于文本翻译、文本细化和语法纠正。它有一个派生版本，特别强调校对的任务： [OpenAI Polisher Bob Plugin](https://github.com/yetone/bob-plugin-openai-polisher).\n\n- 苹果快捷键\n\n    - [ChatGPT Siri](https://github.com/Yue-Yang/ChatGPT-Siri)\n\n        快捷键Siri连接ChatGPT 3.5涡轮模型，支持连续对话\n\n    - [Siri Pro](https://www.icloud.com/shortcuts/6889d862918e479693be11fd9a0293b2)\n\n      一个增强的快捷方式基于 **ChatGPT Siri**. 原文: [@DottChen](https://twitter.com/DottChen/status/1631309329684123650)\n\n    - [Share to ChatGPT](https://github.com/reorx/Share-to-ChatGPT-Shortcut)\n\n       分享到ChatGPT是一个苹果快捷方式，允许用户分享突出显示的文本到ChatGPT，同时还包括个性化的提示，响应消息将自动复制到用户的剪贴板。\n\n- [Keyboard Maestro](https://www.keyboardmaestro.com/) Macros\n\n    - [Copy to Ask ChatGPT](https://blog.retompi.com/post/use-chatgpt-api/#keyboard-maestro)\n\n        选择并复制文本以使用键盘快捷键询问ChatGPT. [下载链接](https://p15.p3.n0.cdn.getcloudapp.com/items/geuEZvwA/aeed10cb-a35d-404f-a17f-da1d46c9c9c7.kmmacros)\n\n    - [我的六個專屬 ChatGPT 助手](https://pinchlime.com/newsletters/my-six-chatgpt-assistants/)\n\n- GitHub App\n\n    - [CR.GPT](https://github.com/apps/cr-gpt)\n\n        由ChatGPT驱动的代码审查机器人\n\n- [LaunchBar](https://www.obdev.at/products/launchbar/) Actions\n\n    - [ChipiChat](https://github.com/quinncomendant/ChipiChat.lbaction)\n\n        与ChatGPT API交互的LaunchBar操作。响应直接在LaunchBar中接收，可以通过Quick Look浏览、打开、预览、插入或发送到另一个操作。保存会话历史记录以供参考。ChatGPT系统消息可以通过角色进行配置。\n\n\n## web应用\n\n\n### 类似chatgpt的web-ui\n\n- [ChatKit](https://chatkit.app/)\n\n    一个轻量级的ChatGPT Web UI，允许设置url作为对话的上下文。\n\n- [TypingMind](https://www.typingmind.com/)\n\n    一个更好的用户界面ChatGPT，与增强的功能，如快速响应，聊天搜索，集成，提示库等。\n\n- [ChatGPT Next Web](https://github.com/Yidadaa/ChatGPT-Next-Web)<img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    一键部署设计良好的ChatGPT web UI在Vercel。界面经过抛光，支持响应式设计、暗模式和PWA。具有内置提示库，对话压缩和将聊天记录导出为Markdown文件等功能。\n\n- [Chatbot UI](https://github.com/mckaywrigley/chatbot-ui) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    Chatbot UI是OpenAI聊天模型的高级聊天机器人套件，基于Chatbot UI Lite，使用Next.js、TypeScript和顺风CSS。\n\n- [Chat with GPT](https://chatwithgpt.netlify.app) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    一个开源的ChatGPT web UI与附加功能，如TTS。源代码: [cogentapps/chat-with-gpt](https://github.com/cogentapps/chat-with-gpt)\n\n- [ChatGPT Web](https://github.com/Chanzhaoyu/chatgpt-web) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    一个使用ve3和Express构建的ChatGPT web应用程序演示。\n\n- [Next.js ChatGPT](https://github.com/enricoros/nextjs-chatgpt-app) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    这是一个使用Next.js和TypeScript构建的响应式聊天web应用程序，由OpenAI的GPT-4提供支持，具有聊天流，代码高亮显示，代码执行，开发预设等功能。\n\n- [ChatGPT-API Demo](https://github.com/ddiu8081/chatgpt-demo) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    一个用Astro和TypeScript构建的ChatGPT web应用演示。\n\n    相关项目: [ChatGPT-Vercel](https://github.com/ourongxing/chatgpt-vercel) is another ChatGPT web app based on ddiu8081/chatgpt-demo, specifically made for deploying on Vercel.\n\n\n### 特殊用途\n\n- [ChatFiles](https://github.com/guangzhengli/ChatFiles)\n\n    一个可以上传文件并与之对话的网络应用程序。\n    该存储库使用jerryjliu/llama_index拆分大文本，基于mckaywrigley/chatbot-ui，并受到madawei2699/myGPTReader的启发\n\n- [ChatPDF](https://www.chatpdf.com/)\n\n    ChatPDF是一种创新的工具，它允许用户与他们的PDF文件进行口头交流，从而更容易从手册、法律合同和研究论文等大型文档中提取信息。\n\n- [OpenAI Translator](https://translator.lance.moe/)\n\n    一款使用OpenAI GPT-3进行语言翻译的翻译应用程序。它是一个PWA，可以安装在您的手机或桌面上。源代码: [LanceMoe/openai-translator](https://github.com/LanceMoe/openai-translator)\n\n- [BiliGPT](https://b.jimmylv.cn/)\n\n    哔哩哔哩字幕视频一键汇总。源代码: [JimmyLv/BiliGPT](https://github.com/JimmyLv/BiliGPT)\n\n- [ResearchGPT](https://researchgpt.ue.r.appspot.com/)\n\n    这是一个flask应用程序，提供了一个界面，可以与研究论文进行对话。\n    源代码: [mukulpatnaik/ResearchGPT](https://github.com/mukulpatnaik/researchgpt).\n\n    作者探索了从与原始tweet中的提示密切匹配的文本中派生的向量嵌入的利用： [@mukul0x](https://twitter.com/mukul0x/status/1625673579399446529)\n\n- [ChatGPT Academic](https://github.com/binary-husky/chatgpt_academic)\n\n    专门针对科研工作的ChatGPT应用，针对学术论文校对体验进行优化，支持自定义快捷按钮，支持降价表显示，Tex公式双显示，改进代码显示功能，增加本地Python项目分析/自分析功能。\n\n- [AI Subtitle Translator](https://ai.cgsv.top/)\n\n    使用GPT-3.5 API翻译本地或Youtube/Bilibili字幕。源代码: [AI Subtitle](https://github.com/cgsvv/AISubtitle)\n\n- [Visual ChatGPT](https://github.com/microsoft/visual-chatgpt)\n    \n    Visual ChatGPT是一个web应用程序，它将ChatGPT和一系列Visual Foundation Models连接起来，以便在聊天过程中发送和接收图像。\n\n\n## 桌面和移动应用程序\n\n\n### 类似chatgpt的web-ui\n\n- [ChatBox](https://github.com/Bin-Huang/chatbox)\n\n    ChatBox是OpenAI API的跨平台桌面客户端，也是一个即时调试和管理工具。\n\n- [OpenCat](https://opencat.app/)\n\n    本机桌面ChatGPT客户端，利用您自己的API密钥，提供更快和增强的聊天体验。\n\n- [MacGPT](https://www.macgpt.com/)\n\n    一个本地桌面ChatGPT应用程序，与功能，如访问ChatGPT从任何地方在您的Mac与全局，把ChatGPT直接到您的文本字段与MacGPT内联，并快速访问ChatGPT从您的菜单栏。\n\n- [AssisChat](https://assischat.com)\n\n    一个在iOS上运行的ChatGPT API客户端。它可以用来翻译和润色文本，而无需离开其他应用程序，利用系统的共享功能。\n\n- [OpenChit](https://apps.apple.com/cn/app/openchit/id6446192123)\n\n    一个在iOS上运行的ChatGPT API客户端。有语音输入和TTS等功能。\n\n- [MindMac](https://mindmac.app)\n\n    毫不费力地管理您的聊天和文件夹，同时监控成本与直观的macOS应用程序，由ChatGPT API供电，并设计为最大的生产力。内置提示模板，支持GPT-3.5和GPT-4。\n\n### Special-purpose\n\n- [ChatGPT Translator](https://github.com/simpleapples/chatgpt-translator)\n\n    ChatGPT Translator是一个开源的桌面应用程序，允许您使用GPT语言模型翻译文本。\n\n- [OpenAI Translator](https://github.com/yetone/openai-translator)\n\n    基于ChatGPT API的浏览器扩展和跨平台桌面翻译应用程序。\n    \n- [Polyglot](https://github.com/liou666/polyglot) \n\n    基于ChatGPT API和Azure TTS的桌面AI语言实践应用\n\n- [NITM GPT](https://github.com/deskbtm/nitmgpt)\n\n    一个Android应用程序，过滤广告，垃圾邮件，通知使用GPT AI。\n\n- [CommuniqAI](https://play.google.com/store/apps/details?id=dev.mtc.ga)\n\n    这是一个Android应用程序，通过调度和自动发送SMS文本消息(以及电话和电子邮件)来帮助您保持联系，同时利用ChatGPT生成消息。\n\n\n## CLI\n\n- [ShellGPT](https://github.com/TheR1D/shell_gpt)\n\n    一个由ChatGPT提供支持的命令行生产力工具。功能包括生成shell命令、代码片段、注释和文档。\n\n- [bilingual\\_book\\_maker](https://github.com/yihong0618/bilingual_book_maker)\n\n    使用AI翻译制作双语电子书。原创推文 [@yihong0618](https://twitter.com/yihong0618/status/1630948132564631552)\n\n    在[streamlit](https://goldengrape-bilingual-book-maker-streamlit-app-x7nhof.streamlit.app/)上有一个web UI，由[tweet](https://twitter.com/goldengrape/status/1631549869306572800)的作者制作。\n\n- [AI Commits](https://github.com/Nutlope/aicommits)\n\n    一个用AI为你写git提交消息的CLI。\n\n- [cz-git](https://github.com/Zhengqbbb/cz-git)\n\n    commizen CLI和commizen适配器使用AI生成标准化的提交消息。 [Recipes/OpenAI](https://cz-git.qbb.sh/recipes/openai)\n\n- [turbocommit](https://github.com/Sett17/turboCommit)\n\n    使用阶段性diff和可选消息创建常规提交的CLI。\n\n- [xiaogpt](https://github.com/yihong0618/xiaogpt)\n\n    与小米AI扬声器一起玩ChatGPT。\n\n- [AI Vocabulary Builder](https://github.com/piglei/ai-vocabulary-builder)\n\n   帮助您使用AI构建词汇表的CLI。\n\n- [verdverm/chatgpt](https://github.com/verdverm/chatgpt)\n\n    用于与ChatGPT API交互或在基于文件的会话中工作的CLI应用程序。支持提示工程和大多数配置。\n\n- [ai-cli](https://github.com/yufeikang/ai-cli)\n\n    该命令行工具允许您在命令行中轻松使用chatGPT。你可以和它聊天，向它提问，并获得文本翻译。它还支持在终端中呈现Markdown。\n\n- [chatgpt-cli](https://github.com/efJerryYang/chatgpt-cli/)\n\n    一个支持markdown的命令行接口工具，使用OpenAI的API密钥连接到ChatGPT。所提供的命令使您能够像使用官方web客户端一样使用此工具。对话以JSON格式保存在您的机器中。\n\n- [chatGPT-shell-cli](https://github.com/0xacx/chatGPT-shell-cli)\n\n    一个简单的，轻量级的shell脚本，从终端使用OpenAI的chatGPT和dll - e。\n\n- [i18n-cli](https://github.com/pandodao/i18n-cli)\n\n   一个命令行接口(CLI)工具，它利用OpenAI API来翻译基于JSON格式的语言环境文件。\n\n- [ChatGPT-for-Translation](https://github.com/Raychanan/ChatGPT-for-Translation)\n\n    翻译文本文件的Python工具。它提供双语翻译、多线程和自动处理过多的请求频率。\n\n- [subtitle-translator](https://github.com/gnehs/subtitle-translator)\n\n    基于ChatGPT的字幕翻译CLI工具，使用NodeJS开发。它也有一个GUI版本 [subtitle-translator-electron](https://github.com/gnehs/subtitle-translator-electron)\n\n- [Multimedia GPT](https://github.com/fengyuli2002/multimedia-gpt)\n\n    多媒体GPT连接OpenAI GPT与视觉和音频。用户现在可以发送图像、视频和录音，并获得文本和图像格式的回复。\n\n- [README-AI](https://github.com/eli64s/README-AI)\n\n   用于制作美观、结构化和信息丰富的README的命令行工具。md文件。由OpenAI语言模型API提供支持。\n\n- [GPTerminator](https://github.com/AineeJames/ChatGPTerminator)\n\n   GPTerminator是一个python包，它提供了一种使用命令行接口与OpenAI的聊天完成和图像生成API进行交互的方便方法。\n\n- [naming](https://github.com/davidleitw/naming)\n\n    naming 是一个命令行工具，它为函数和变量建议直观和描述性的名称，从而提高代码的可读性。它使用ChatGPT API生成适合您代码的程序命名建议。\n    \n- [AI Shell](https://github.com/BuilderIO/ai-shell)\n\n    将自然语言转换为shell命令的CLI。受Github Copilot X CLI的启发，对所有人开放源代码。\n\n- [DoctorGPT](https://github.com/ingyamilmolinar/doctorgpt)\n\n    DoctorGPT将GPT引入生产环境，用于应用程序日志错误诊断。\n\n- [aider](https://github.com/paul-gauthier/aider)\n\n    aider是一个命令行聊天工具，允许您在终端中使用GPT-4进行编码。向GPT询问特性、改进或错误修复，aider将把建议的更改应用到源文件中。每个更改都会自动提交到git，并附带一个描述性的提交消息。\n    \n- [mods](https://github.com/charmbracelet/mods)\n\n   Mods的工作原理是通过读取标准，并在Mods参数中提供提示符。可选地，它将输出格式化为Markdown，您可以通过管道将其传输到Markdown呈现cli。例如: `mods -f \"what are your thoughts on improving this code?\" < main.go | glow`\n\n## 聊天机器人\n\n- 电报\n    - [karfly/chatgpt\\_telegram\\_bot](https://github.com/karfly/chatgpt_telegram_bot): Written in **Python**.\n    - [n3d1117/chatgpt-telegram-bot](https://github.com/n3d1117/chatgpt-telegram-bot): Written in **Python**.\n    - [RainEggplant/chatgpt-telegram-bot](https://github.com/RainEggplant/chatgpt-telegram-bot): Written in **JavaScript**.\n    - [leafduo/chatgpt-telegram-bot](https://github.com/leafduo/chatgpt-telegram-bot): Written in **Go**.\n    - [TBXark/ChatGPT-Telegram-Workers](https://github.com/TBXark/ChatGPT-Telegram-Workers): This one has been specifically made for **Cloudflare Workers**.\n    - [franalgaba/chatgpt-telegram-bot-serverless](https://github.com/franalgaba/chatgpt-telegram-bot-serverless): Free and in AWS serverless bot in **Python**.\n    - [iamwavecut/telegram-chatgpt-bot](https://github.com/iamwavecut/telegram-chatgpt-bot): Written in **Go** and comes with the **Dockerfile** for easy setup.\n- Slack\n    - [myGPTReader](https://github.com/madawei2699/myGPTReader)\n\n        myGPTReader是一个slack机器人，可以阅读任何网页，电子书，视频(YouTube)或文档，并与chatGPT总结。它还可以使用频道中的内容通过语音与您交谈。\n- 微信\n    - [zhayujie/chatgpt-on-wechat](https://github.com/zhayujie/chatgpt-on-wechat)\n    - [ChatGPT for Wechat](https://chatgpt4wechat.aow.me/)\n- 飞书\n    - [bestony/ChatGPT-Feishu](https://github.com/bestony/ChatGPT-Feishu)\n    - [Leizhenpeng feishu-chatGpt](https://github.com/Leizhenpeng/feishu-chatGpt)\n    - [go-zoox/chatgpt-for-chatbot-feishu](https://github.com/go-zoox/chatgpt-for-chatbot-feishu)\n    - [key7men/openai-feishu-bot](https://github.com/key7men/openai-feishu-bot)\n- 钉钉\n    - [eryajf/chatgpt-dingtalk](https://github.com/eryajf/chatgpt-dingtalk): Written in **Go**.\n- Teams\n    - [formulahendry/chatgpt-teams-bot](https://github.com/formulahendry/chatgpt-teams-bot)\n\n\n## 开发\n\n### 项目\n\n- [OpenAI Cookbook](https://github.com/openai/openai-cookbook)\n\n    官方示例和指南使用OpenAI API，包括如何嵌入长输入，流完成，格式更好的输入和更多。\n    \n- [DocsGPT](https://github.com/arc53/docsgpt)\n\n     一个开源解决方案，简化了在项目文档中查找信息的过程。通过集成强大的GPT模型，开发人员可以轻松地提出有关项目的问题并获得准确的答案。\n\n- [Paul Graham GPT](https://github.com/mckaywrigley/paul-graham-gpt)\n\n    人工智能搜索和聊天Paul Graham的文章。这是一个很好的演示，关于如何使用[OpenAI Embeddings](https://platform.openai.com/docs/guides/embeddings)\n    在ChatGPT API的4096个令牌限制范围内将大型文本数据压缩为提示\n\n    关于这个项目和令牌限制的一些有见地的推文: [@chuangbo](https://twitter.com/chuangbo/status/1631461656151887873), [@dotey](https://twitter.com/dotey/status/1631779232455053313)\n\n- [Elasticsearch + GPT3 Answerer](https://github.com/hunkim/es-gpt)\n\n    拦截Elasticsearch结果并将其发送到GPT3，为您的查询提供准确和相关的答案。\n\n\n### 工具\n\n- [LlamaIndex 🦙 \\(GPT Index\\)](https://github.com/jerryjliu/gpt_index)\n\n    LlamaIndex (GPT Index)是一个项目，它提供了一个中央接口来连接您的LLM与外部数据。它有一组数据结构，允许您为各种LLM任务索引数据，并消除对提示大小限制的担忧。\n\n- [gptcache](https://github.com/zilliztech/gptcache) ⭐️\n\n    一个强大的缓存库，可以用来加速和降低依赖LLM服务的聊天应用程序的成本。GPT Cache作为AIGC应用程序的memcache，类似于Redis为传统应用程序工作的方式。\n\n- [Embedchain](https://github.com/embedchain/embedchain) \n\n    用于在数据集上创建类似机器人的由 LLM 支持的 ChatGPT 的框架\n\n- [Tiktokenizer](https://tiktokenizer.vercel.app/)\n\n    openai的tiktoken库的在线游乐场，为给定的提示计算正确的令牌数量。源代码: [dqbd/tiktokenizer](https://github.com/dqbd/tiktokenizer)\n\n- [ChatGPT Wrapper](https://github.com/mmabrouk/chatgpt-wrapper)\n\n    ChatGPT Wrapper是一个开源的非官方的Power CLI, Python API和Flask API，允许您以编程方式与ChatGPT/GPT4进行交互。支持几种不同的后端连接到ChatGPT模型，包括基于浏览器和基于rest的选项。\n\n- [OpenAI GPT-3.5 Price Calculator](https://openai.deepakness.com/)\n\n    计算使用OpenAI GPT-3.5 API生成一定数量的单词需要花费多少。\n\n- [OpenAI proxy](https://github.com/egoist/openai-proxy)\n\n    OpenAI API反向代理，可以部署在Cloudflare Workers和Vercel Edge上。有助于绕过网络限制或IP速率限制。.\n\n\n### 文章\n\n- [I got early access to ChatGPT API and then pushed it to it’s limits. Here’s what you need to know. — Buildt](https://www.buildt.ai/blog/vm3qozd4qfrbbyzukqhynrwm9vb9tq)\n- [Thread: Advantages of ChatGPT API compared to ChatGPT](https://twitter.com/novoreorx/status/1631250035852861440)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.3330078125,
          "content": "# Awesome ChatGPT API\n\n> [中文](README.cn.md)\n\nCurated list of apps and tools that not only use the new [ChatGPT API](https://platform.openai.com/docs/api-reference/chat), but also allow users to configure their own [API keys](https://platform.openai.com/account/api-keys), enabling free and on-demand usage of their own quota.\n\nThere's also a [Development](#development) section that provides developers with a collection of projects and articles to help them build better.\n\nVisit the website to get latest updates: [awesome-chatgpt-api.top](https://awesome-chatgpt-api.top/)\n\n> Curated by [Reorx](https://reorx.com), you are welcome to suggest new projects via Twitter or PRs, but please ensure you have read the [Collection Standard](https://github.com/reorx/awesome-chatgpt-api/issues/21).\n\n\n**Table of Contents**\n\n- [Plugins and Extensions](#plugins-and-extensions)\n- [Web Apps](#web-apps)\n  - [ChatGPT-like Web UI](#chatgpt-like-web-ui)\n  - [Special-purpose](#special-purpose)\n- [Desktop & Mobile Apps](#desktop--mobile-apps)\n  - [ChatGPT-like Web UI](#chatgpt-like-web-ui)\n  - [Special-purpose](#special-purpose)\n- [CLI](#cli)\n- [Chatbots](#chatbots)\n- [Development](#development)\n  - [Projects](#projects)\n  - [Tools](#tools)\n  - [Articles](#articles)\n\n\n## Plugins and Extensions\n\n- Chrome Extensions\n\n    - [Immersive Translate](https://github.com/immersive-translate/immersive-translate)\n\n        A dual web page translation extension with immersive reading experience, you can add your own OpenAI key to use ChatGPT as a translation provider.\n\n    - [ChatGPT Box](https://github.com/josStorer/chatGPTBox)\n\n        Deep ChatGPT integrations in your browser. Supports call up the chat dialog box on any page at any time, summarize any page with right-click menu, Independent conversation page, multiple API and much more. This extension is available on Chrome, Edge, Safari and Firefox.\n\n    - [Glarity](https://glarity.app/)\n\n         Summarize Google search results or YouTube videos with ChatGPT API, also supports Yahoo! ニュース、PubMed、PMC、NewsPicks、Github、Nikkei、 Bing、Google Patents. This extension also supports ChatGPT Webapp's API which requires no configuration.\n\n    - [ChatGPT Sidebar](https://chatgpt-sidebar.com/)\n\n        Open a sidebar in any webpage, and ask ChatGPT for anything about the content of the page. Like explain, translate, summarize or rewrite it. You can customize prompts for easier access. This extension also supports ChatGPT Webapp's API that requires no configuration.\n\n    - [ChatHub](https://chrome.google.com/webstore/detail/chathub-all-in-one-chatbo/iaakpnchhognanibcahlpcplchdfmgma)\n\n        ChatHub is an all-in-one chatbot client currently supporting ChatGPT and the new Bing Chat. It allows for chatting with multiple chatbots simultaneously, making it easy to compare their answers. Source code: [chathub-dev/chathub](https://github.com/chathub-dev/chathub)\n\n    - [OpenAI Translator](https://github.com/yetone/openai-translator)\n\n        A Chrome extension that uses the OpenAI API to translate text, with additional features like polishing and summarization.\n\n    - [ChatGPT » summarize everything!](https://chrome.google.com/webstore/detail/chatgpt-%C2%BB-summarize-every/cbgecfllfhmmnknmamkejadjmnmpfjmp)\n\n        A Chrome extension that summarizes any website with ChatGPT.\n        Other features including summarizes the transcript of any Youtube Video and customizes template. This extension also supports ChatGPT Webapp's API which requires no configuration.\n\n- [Emacs](https://www.gnu.org/software/emacs/) Packages\n\n    - [GPTel](https://github.com/karthink/gptel)\n    \n        Add a major mode to Emacs that acts similar to ChatGPT web page. It supports multiple chat sessions and can send any text selection to ChatGPT API to get answers, proofreading, code suggestions, etc. \n        \n    - [org-ai](https://github.com/rksm/org-ai) \n    \n        Add a block to Emacs note-taking package org-mode that can chat with ChatGPT and use DALL-E to generate an image. It supports speech-to-text input and text-to-speech reading out.\n\n- [Obsidian](https://obsidian.md/) Plugins\n\n    - [Obsidian Text Generator Plugin](https://github.com/nhaouari/obsidian-textgenerator-plugin)\n\n        Generate ideas, attractive titles, summaries, outlines, and whole paragraphs based on your notes in Obsidian.\n\n- [Logseq](https://logseq.com/) Plugins\n\n    - [Logseq Plugin GPT3 OpenAI](https://github.com/briansunter/logseq-plugin-gpt3-openai)\n\n        A plugin for GPT-3 AI assisted note taking in Logseq.\n\n- [Roam Research](https://roamresearch.com/) Plugins\n\n    - [roam-ai](https://github.com/LayBacc/roam-ai)\n\n        Generate text based on the current block; Generate an image using DALL-E 2; Rephrase\n\n- [Popclip](https://pilotmoon.com/popclip/) Extensions\n\n    - [ChatGPT — PopClip Extensions](https://pilotmoon.com/popclip/extensions/page/ChatGPT)\n\n        Send the selected text to ChatGPT and append the response.\n\n    - [ChatGPT Proofreader extension for Popclip](https://reorx.com/makers-daily/003-chatgpt-proofreader-extension-popclip/)\n\n        Proofread the selected text and append the enhanced result.\n\n    - [ChatGPT Grammar Check PopClip Extension](https://github.com/hirakujira/ChatGPT-Grammar-Check-PopClip-Extension)\n\n        Similar to the ChatGPT Proofreader extension, with a different prompt and a downloadable package.\n\n- [Drafts](https://getdrafts.com/) Actions\n\n    - [ChatGPT Conversation | Drafts Directory](https://directory.getdrafts.com/a/2HJ)\n\n        Have a conversation with ChatGPT in the Drafts note, new responses will be appended at the end. Supports declaring and modifying system, assistant and user role message blocks.\n\n- [Bob](https://bobtranslate.com/) Plugins\n\n    - [OpenAI Translator Bob Plugin](https://github.com/yetone/bob-plugin-openai-translator)\n\n        ChatGPT API based Bob plugin for text translation, text refinement, and grammar correction. It has a derived version that specifically emphasizes the task of proofreading: [OpenAI Polisher Bob Plugin](https://github.com/yetone/bob-plugin-openai-polisher).\n\n- Apple Shortcuts\n\n    - [ChatGPT Siri](https://github.com/Yue-Yang/ChatGPT-Siri)\n\n        Shortcuts for Siri to connect ChatGPT 3.5 turbo model, supports continuous conversations\n\n    - [Siri Pro](https://www.icloud.com/shortcuts/6889d862918e479693be11fd9a0293b2)\n\n        A enhanced shortcut based on **ChatGPT Siri**. Original tweet: [@DottChen](https://twitter.com/DottChen/status/1631309329684123650)\n\n    - [Share to ChatGPT](https://github.com/reorx/Share-to-ChatGPT-Shortcut)\n\n        Share to ChatGPT is an Apple Shortcut that allows users to share highlighted text to ChatGPT while also including personalized prompts, the response message will automatically be copied to the user's clipboard.\n\n- [Keyboard Maestro](https://www.keyboardmaestro.com/) Macros\n\n    - [Copy to Ask ChatGPT](https://blog.retompi.com/post/use-chatgpt-api/#keyboard-maestro)\n\n        Select and copy texts to ask ChatGPT with a keyboard shortcut. [Download link](https://p15.p3.n0.cdn.getcloudapp.com/items/geuEZvwA/aeed10cb-a35d-404f-a17f-da1d46c9c9c7.kmmacros)\n\n    - [My Six ChatGPT Assistants](https://pinchlime.com/newsletters/my-six-chatgpt-assistants/)\n\n- GitHub App\n\n    - [CR.GPT](https://github.com/apps/cr-gpt)\n\n        A code review robot powered by ChatGPT\n\n- [LaunchBar](https://www.obdev.at/products/launchbar/) Actions\n\n    - [ChipiChat](https://github.com/quinncomendant/ChipiChat.lbaction)\n\n        A LaunchBar action to interact with the ChatGPT API. Responses are received directly in LaunchBar and can be browsed, opened, previewed with Quick Look, inserted, or sent to another action. Conversation history is preserved for context. ChatGPT system messages are configurable via personas.\n\n\n## Web Apps\n\n\n### ChatGPT-like UI\n\n- [ChatKit](https://chatkit.app/)\n\n    A lightweight ChatGPT Web UI that allows setting URLs as context for conversations.\n\n- [TypingMind](https://www.typingmind.com/)\n\n    A better UI for ChatGPT, with enhanced features like fast response, chat search, integrations, prompt library, etc.\n\n- [ChatGPT Next Web](https://github.com/Yidadaa/ChatGPT-Next-Web)<img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    One-Click to deploy well-designed ChatGPT web UI on Vercel. The interface is polished to support pesponsive design, dark mode and PWA. With features like builtin prompts library, conversation compression, and export chat history as Markdown file.\n\n- [Chatbot UI](https://github.com/mckaywrigley/chatbot-ui) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    Chatbot UI is an advanced chatbot kit for OpenAI's chat models built on top of Chatbot UI Lite using Next.js, TypeScript, and Tailwind CSS.\n\n- [Chat with GPT](https://chatwithgpt.netlify.app) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    An open source ChatGPT web UI with additional features like TTS. Source code: [cogentapps/chat-with-gpt](https://github.com/cogentapps/chat-with-gpt)\n\n- [ChatGPT Web](https://github.com/Chanzhaoyu/chatgpt-web) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    A ChatGPT web app demo built with Vue3 and Express.\n\n- [Next.js ChatGPT](https://github.com/enricoros/nextjs-chatgpt-app) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    Built using Next.js and TypeScript, this is a responsive chat web application powered by OpenAI's GPT-4, with chat streaming, code highlighting, code execution, development presets, and more.\n\n- [ChatGPT-API Demo](https://github.com/ddiu8081/chatgpt-demo) <img src=\"https://img.shields.io/badge/-self--hosted-1adc61\" />\n\n    A ChatGPT web app demo built with Astro and TypeScript.\n\n    Related project: [ChatGPT-Vercel](https://github.com/ourongxing/chatgpt-vercel) is another ChatGPT web app based on ddiu8081/chatgpt-demo, specifically made for deploying on Vercel.\n\n\n### Special-purpose\n\n- [ChatFiles](https://github.com/guangzhengli/ChatFiles)\n\n    A web app that let you upload your file and have a conversation with it.\n    This repository uses jerryjliu/llama_index to split large text, is based on mckaywrigley/chatbot-ui, and is inspired by madawei2699/myGPTReader\n\n- [ChatPDF](https://www.chatpdf.com/)\n\n    ChatPDF is an innovative tool that allows users to verbally communicate with their PDF files, making it easier to extract information from large documents such as manuals, legal contracts, and research papers.\n\n- [OpenAI Translator](https://translator.lance.moe/)\n\n    A translator app that uses OpenAI GPT-3 to translate between languages. It is a PWA that can be installed on your phone or desktop. Source code: [LanceMoe/openai-translator](https://github.com/LanceMoe/openai-translator)\n\n- [BiliGPT](https://b.jimmylv.cn/)\n\n    One-click summary of the subtitled Bilibili Video. Source code: [JimmyLv/BiliGPT](https://github.com/JimmyLv/BiliGPT)\n\n- [ResearchGPT](https://researchgpt.ue.r.appspot.com/)\n\n    This is a flask app provides an interface to enable a conversation with a research paper.\n    Source code: [mukulpatnaik/ResearchGPT](https://github.com/mukulpatnaik/researchgpt).\n\n    The author explored the utilization of vector embeddings derived from the text that closely matches the prompt in the original tweet: [@mukul0x](https://twitter.com/mukul0x/status/1625673579399446529)\n\n- [ChatGPT Academic](https://github.com/binary-husky/chatgpt_academic)\n\n    Specialized ChatGPT application for scientific research work, optimized for academic paper proofreading experience, supports custom shortcut buttons, supports markdown table display, Tex formula dual display, improved code display function, added local Python project analysis/self-analysis function.\n\n- [AI Subtitle Translator](https://ai.cgsv.top/)\n\n    Translate local or Youtube/Bilibili subtitle using GPT-3.5 API. Source Code: [AI Subtitle](https://github.com/cgsvv/AISubtitle)\n\n- [Visual ChatGPT](https://github.com/microsoft/visual-chatgpt)\n\n    Visual ChatGPT is a web app that connects ChatGPT and a series of Visual Foundation Models to enable sending and receiving images during chatting.\n\n\n## Desktop & Mobile Apps\n\n\n### ChatGPT-like UI\n\n- [ChatBox](https://github.com/Bin-Huang/chatbox)\n\n    ChatBox is a cross-platform desktop client for OpenAI API, also a prompt debugging and management tool.\n\n- [OpenCat](https://opencat.app/)\n\n    A native desktop ChatGPT client that utilizes your own API key, providing a faster and enhanced chat experience.\n\n- [MacGPT](https://www.macgpt.com/)\n\n    A native desktop ChatGPT app, with features like access ChatGPT from anywhere on your Mac with the Global, bring ChatGPT directly into your textfields with MacGPT Inline, and quickly access chatGPT from your menu bar.\n\n- [AssisChat](https://assischat.com)\n\n    A ChatGPT API client running on the iOS. It can be used to translate and polish text without leaving other apps by utilizing the system's share feature.\n\n- [OpenChit](https://apps.apple.com/cn/app/openchit/id6446192123)\n\n    A ChatGPT API client running on the iOS. With features like voice input and TTS.\n\n- [MindMac](https://mindmac.app)\n\n    Effortlessly manage your chats and folders while monitoring costs with intuitive macOS app, powered by ChatGPT API and designed for maximum productivity. Built-in prompt templates, support GPT-3.5 and GPT-4.\n  \n- [EasyChat AI](https://easychat-ai.app)\n\n    A native Windows desktop app for using ChatGPT using the latest Windows 11 UI design principles.\n\n- [WristAssist](https://github.com/DevEmperor/WristAssist)\n\n  A powerful ChatGPT app for all WearOS devices\n\n### Special-purpose\n\n- [ChatGPT Translator](https://github.com/simpleapples/chatgpt-translator)\n\n    ChatGPT Translator is an open-source desktop app that allows you to translate text using GPT language model.\n\n- [OpenAI Translator](https://github.com/yetone/openai-translator)\n\n    Browser extension and cross-platform desktop application for translation based on ChatGPT API.\n    \n- [Polyglot](https://github.com/liou666/polyglot) \n\n    Desktop AI language practice application based on ChatGPT API and Azure TTS\n\n- [NITM GPT](https://github.com/deskbtm/nitmgpt)\n\n    An Android application that filters ads, spam, notifications using GPT AI.\n\n- [CommuniqAI](https://play.google.com/store/apps/details?id=dev.mtc.ga)\n\n    An Android application that helps you stay in touch by scheduling and automating SMS text messages (and calls and email) while leveraging ChatGPT for message generation.\n\n- [RewriteBar](https://rewritebar.com/)\n\n    A MacOS app that allows you to rewrite text using the ChatGPT API. Select text in any app and choose one of the options in the RewriteBar to rewrite the selected text. You can create your own presets for specific workflows.\n\n\n## CLI\n\n- [ShellGPT](https://github.com/TheR1D/shell_gpt)\n\n    A command-line productivity tool powered by ChatGPT. Features include generate shell commands, code snippets, comments, and documentation.\n\n- [bilingual\\_book\\_maker](https://github.com/yihong0618/bilingual_book_maker)\n\n    Make bilingual epub books Using AI translate. Original tweet [@yihong0618](https://twitter.com/yihong0618/status/1630948132564631552)\n\n    There's a web UI at [streamlit](https://goldengrape-bilingual-book-maker-streamlit-app-x7nhof.streamlit.app/), made by the author of this [tweet](https://twitter.com/goldengrape/status/1631549869306572800).\n\n- [AI Commits](https://github.com/Nutlope/aicommits)\n\n    A CLI that writes your git commit messages for you with AI.\n\n- [cz-git](https://github.com/Zhengqbbb/cz-git)\n\n    A Commitizen CLI and Commitizen adapter generate standardized commit messages with AI. [Recipes/OpenAI](https://cz-git.qbb.sh/recipes/openai)\n\n- [turbocommit](https://github.com/Sett17/turboCommit)\n\n    CLI that uses the staged diff and optional message to create Conventional commits.\n\n- [xiaogpt](https://github.com/yihong0618/xiaogpt)\n\n    Play ChatGPT with Xiaomi AI Speaker.\n\n- [AI Vocabulary Builder](https://github.com/piglei/ai-vocabulary-builder)\n\n    A CLI that helps you build your vocabulary with AI.\n\n- [verdverm/chatgpt](https://github.com/verdverm/chatgpt)\n\n    CLI application for working with ChatGPT API interactively or in file based sessions. Supports promt engineering and most configurations.\n\n- [ai-cli](https://github.com/yufeikang/ai-cli)\n\n    This CLI tool allows you to easily use chatGPT in the command line. You can chat with it, ask it questions, and get text translations. It also supports rendering Markdown in the terminal.\n\n- [chatgpt-cli](https://github.com/efJerryYang/chatgpt-cli/)\n\n    A markdown-supported command-line interface tool that connects to ChatGPT using OpenAI's API key. Commands provided enable you to use this tool much like you would use the official web client. Conversations are saved as JSON format in your machine.\n\n- [chatGPT-shell-cli](https://github.com/0xacx/chatGPT-shell-cli)\n\n    A simple, lightweight shell script to use OpenAI's chatGPT and DALL-E from the terminal.\n\n- [i18n-cli](https://github.com/pandodao/i18n-cli)\n\n    A command-line interface (CLI) tool that utilizes the OpenAI API to translate locale files based on JSON format.\n\n- [ChatGPT-for-Translation](https://github.com/Raychanan/ChatGPT-for-Translation)\n\n    Python tool for translating text files. It provides bilingual translation, multithreading, and automatic handling of excessive request frequency.\n\n- [subtitle-translator](https://github.com/gnehs/subtitle-translator)\n\n    A subtitle translation CLI tool based on ChatGPT developed using NodeJS. It also has a Electron GUI version [subtitle-translator-electron](https://github.com/gnehs/subtitle-translator-electron)\n\n- [Multimedia GPT](https://github.com/fengyuli2002/multimedia-gpt)\n\n    Multimedia GPT connects OpenAI GPT with vision and audio. Users can now send images, videos, and audio recordings and get a response in both text and image formats.\n\n- [README-AI](https://github.com/eli64s/README-AI)\n\n    Command-line tool for crafting aesthetic, structured, and informative README.md files. Powered by OpenAI's language model API.\n\n- [GPTerminator](https://github.com/AineeJames/ChatGPTerminator)\n\n    GPTerminator is a python package that provides a convenient way to interact with OpenAI's chat completion and image generation API's using your command line interface.\n\n- [naming](https://github.com/davidleitw/naming)\n\n    naming is a command line tool that suggests intuitive and descriptive names for your functions and variables, improving the readability of your code. It uses ChatGPT API to generate program naming suggestions tailored to your code.\n    \n- [AI Shell](https://github.com/BuilderIO/ai-shell)\n\n    A CLI that converts natural language to shell commands. Inspired by the Github Copilot X CLI, but open source for everyone.\n\n- [DoctorGPT](https://github.com/ingyamilmolinar/doctorgpt)\n\n    DoctorGPT brings GPT into production for application log error diagnosing.\n\n- [aider](https://github.com/paul-gauthier/aider)\n\n    aider is a command-line chat tool that allows you to code with GPT-4 in the terminal. Ask GPT for features, improvements, or bug fixes and aider will apply the suggested changes to your source files. Each change is automatically committed to git with a descriptive commit message.\n\n- [mods](https://github.com/charmbracelet/mods)\n\n    mods works by reading standard in and prefacing it with a prompt supplied in the mods arguments. Optionally it formats output as Markdown, which you can pipe to markdown rendering CLIs. Example: `mods -f \"what are your thoughts on improving this code?\" < main.go | glow`\n\n## Chatbots\n\n- Telegram\n    - [karfly/chatgpt\\_telegram\\_bot](https://github.com/karfly/chatgpt_telegram_bot): Written in **Python**.\n    - [n3d1117/chatgpt-telegram-bot](https://github.com/n3d1117/chatgpt-telegram-bot): Written in **Python**.\n    - [RainEggplant/chatgpt-telegram-bot](https://github.com/RainEggplant/chatgpt-telegram-bot): Written in **JavaScript**.\n    - [leafduo/chatgpt-telegram-bot](https://github.com/leafduo/chatgpt-telegram-bot): Written in **Go**.\n    - [TBXark/ChatGPT-Telegram-Workers](https://github.com/TBXark/ChatGPT-Telegram-Workers): This one has been specifically made for **Cloudflare Workers**.\n    - [franalgaba/chatgpt-telegram-bot-serverless](https://github.com/franalgaba/chatgpt-telegram-bot-serverless): Free and in AWS serverless bot in **Python**.\n    - [iamwavecut/telegram-chatgpt-bot](https://github.com/iamwavecut/telegram-chatgpt-bot): Written in **Go** and comes with the **Dockerfile** for easy setup.\n- Slack\n    - [myGPTReader](https://github.com/madawei2699/myGPTReader)\n\n        myGPTReader is a slack bot that can read any webpage, ebook, video(YouTube) or document and summarize it with chatGPT. It can also talk to you via voice using the content in the channel.\n- WeChat\n    - [zhayujie/chatgpt-on-wechat](https://github.com/zhayujie/chatgpt-on-wechat)\n    - [ChatGPT for Wechat](https://chatgpt4wechat.aow.me/)\n- Feishu\n    - [bestony/ChatGPT-Feishu](https://github.com/bestony/ChatGPT-Feishu)\n    - [Leizhenpeng feishu-chatGpt](https://github.com/Leizhenpeng/feishu-chatGpt)\n    - [go-zoox/chatgpt-for-chatbot-feishu](https://github.com/go-zoox/chatgpt-for-chatbot-feishu)\n    - [key7men/openai-feishu-bot](https://github.com/key7men/openai-feishu-bot)\n- DingTalk\n    - [eryajf/chatgpt-dingtalk](https://github.com/eryajf/chatgpt-dingtalk): Written in **Go**.\n- Teams\n    - [formulahendry/chatgpt-teams-bot](https://github.com/formulahendry/chatgpt-teams-bot)\n\n\n## Development\n\n### Projects\n\n- [OpenAI Cookbook](https://github.com/openai/openai-cookbook)\n\n    Official examples and guides for using the OpenAI API, including how to embedding long inputs, stream completions, format better inputs and much more.\n\n- [DocsGPT](https://github.com/arc53/docsgpt)\n\n    An open-source solution that streamlines the process of finding information in project documentation. With its integration of the powerful GPT models, developers can easily ask questions about a project and receive accurate answers.\n\n- [Paul Graham GPT](https://github.com/mckaywrigley/paul-graham-gpt)\n\n    AI-powered search and chat for Paul Graham's essays. This is a excellent demo\n    on how to use [OpenAI Embeddings](https://platform.openai.com/docs/guides/embeddings)\n    to compress large text data into prompts within the limit of ChatGPT API's 4096 tokens limit.\n\n    Some insightful tweets about this project and token limitation: [@chuangbo](https://twitter.com/chuangbo/status/1631461656151887873), [@dotey](https://twitter.com/dotey/status/1631779232455053313)\n\n- [Elasticsearch + GPT3 Answerer](https://github.com/hunkim/es-gpt)\n\n    Intercepts Elasticsearch results and sends them to GPT3 to provide accurate and relevant answers to your queries.\n\n\n### Tools\n\n- [LlamaIndex 🦙 \\(GPT Index\\)](https://github.com/jerryjliu/gpt_index)\n\n    LlamaIndex (GPT Index) is a project that provides a central interface to connect your LLM's with external data. It has a set of data structures that allow you to index your data for various LLM tasks, and remove concerns over prompt size limitations.\n\n- [gptcache](https://github.com/zilliztech/gptcache) ⭐️\n\n    a powerful caching library that can be used to speed up and lower the cost of chat applications that rely on the LLM service. GPT Cache works as a memcache for AIGC applications, similar to how Redis works for traditional applications.\n\n- [Embedchain](https://github.com/embedchain/embedchain) \n\n    Framework to create LLM-powered ChatGPT like bots over your dataset\n\n- [Tiktokenizer](https://tiktokenizer.vercel.app/)\n\n    Online playground for openai's tiktoken library, calculating the correct number of tokens for a given prompt. Source code: [dqbd/tiktokenizer](https://github.com/dqbd/tiktokenizer)\n\n- [ChatGPT Wrapper](https://github.com/mmabrouk/chatgpt-wrapper)\n\n    ChatGPT Wrapper is an open-source unofficial Power CLI, Python API and Flask API that lets you interact programmatically with ChatGPT/GPT4. Several different backends are supported to connect to the ChatGPT models, including browser-based and REST-based options.\n\n- [OpenAI GPT-3.5 Price Calculator](https://openai.deepakness.com/)\n\n    Calculate how much it will cost to generate certain number of words by using OpenAI GPT-3.5 API.\n\n- [OpenAI proxy](https://github.com/egoist/openai-proxy)\n\n    An OpenAI API reverse proxy that can be deployed on Cloudflare Workers and Vercel Edge.\n    Helpful for bypassing network restrictions or IP rate limits.\n\n\n### Articles\n\n- [I got early access to ChatGPT API and then pushed it to it’s limits. Here’s what you need to know. — Buildt](https://www.buildt.ai/blog/vm3qozd4qfrbbyzukqhynrwm9vb9tq)\n- [Thread: Advantages of ChatGPT API compared to ChatGPT](https://twitter.com/novoreorx/status/1631250035852861440)\n"
        },
        {
          "name": "ai.py",
          "type": "blob",
          "size": 12.953125,
          "content": "#!/usr/bin/env python3\nimport os\nimport re\nimport sys\nimport json\nimport logging\nimport argparse\nfrom typing import Optional, Tuple, Union, Callable\nfrom urllib import request, parse\nfrom urllib.error import HTTPError\nfrom http.client import HTTPResponse, IncompleteRead\n\n\n__version__ = '0.1.0'\n\n\nclass Config:\n    api_key = None\n    api_base_url = 'https://api.openai.com/v1/'\n    default_model = 'gpt-3.5-turbo'\n    default_params = {\n        # 'max_tokens': 80,\n        # 'temperature': 0.8,\n        # 'top_p': 1,\n        # 'frequency_penalty': 0.5,\n        # 'presence_penalty': 0,\n    }\n    timeout = None\n    verbose = False\n    debug = False\n\n\nlg = logging.getLogger(__name__)\n\nhome = os.path.expanduser('~')\n\n\ndef main():\n    # the `formatter_class` can make description & epilog show multiline\n    parser = argparse.ArgumentParser(description=\"A simple CLI for ChatGPT API\", epilog=\"\", formatter_class=argparse.RawDescriptionHelpFormatter)\n\n    # arguments\n    parser.add_argument('prompt', metavar=\"PROMPT\", type=str, nargs='?', help=\"your prompt, leave it empty to run REPL. you can use @ to load prompt from ~/.ai_py_prompts.json\")\n\n    # options\n    parser.add_argument('-s', '--system', type=str, help=\"system message to use at the beginning of the conversation. if starts with @, the message will be located through ~/.ai_py_prompts.json\")\n    parser.add_argument('-c', '--conversation', action='store_true', help=\"enable conversation, which means all the messages will be sent to the API, not just the last one. This is only useful to REPL\")\n    parser.add_argument('-v', '--verbose', action='store_true', help=\"verbose mode, show execution info and role in the message\")\n    parser.add_argument('-d', '--debug', action='store_true', help=\"debug mode, enable logging\")\n\n    # --version\n    parser.add_argument('--version', action='version',\n        version='%(prog)s {version}'.format(version=__version__))\n\n    args = parser.parse_args()\n\n    # config\n    # load config from file\n    config_file = os.path.join(home, '.ai_py_config.json')\n    if os.path.exists(config_file):\n        with open(config_file) as f:\n            config = json.load(f)\n        for k, v in config.items():\n            setattr(Config, k, v)\n    # override config from env\n    env_api_key = os.environ.get('AI_PY_API_KEY')\n    if env_api_key:\n        Config.api_key = env_api_key\n    env_api_base_url = os.environ.get('AI_PY_API_BASE_URL')\n    if env_api_base_url:\n        Config.api_base_url = env_api_base_url\n    # override config from args\n    Config.verbose = args.verbose\n    Config.debug = args.debug\n    if Config.debug:\n        logging.basicConfig(level=logging.DEBUG)\n    # check config\n    if not Config.api_key:\n        print(red('ERROR: missing API key'))\n        print(f'Please set the environment variable AI_PY_API_KEY or set api_key in {config_file}')\n        exit(1)\n    if not Config.api_base_url:\n        print(red('ERROR: missing API base url'))\n        print(f'Please set the environment variable AI_PY_API_BASE_URL or set api_base_url in {config_file}')\n        exit(1)\n\n    # only read stdin when it's not a tty (which means in a pipe) to ensure it won't affect input()\n    if not sys.stdin.isatty():\n        stdin = sys.stdin.read().strip()\n        if stdin:\n            args.prompt = f'{args.prompt} {stdin}'\n\n    # load prompts\n    pm = PromptsManager()\n    pm.load_from_file()\n\n    # create session\n    session = ChatSession(Config.api_base_url, Config.api_key, conversation=args.conversation, messages=pm.new_messages(args.system))\n    if Config.verbose:\n        print_info(session)\n    for i in session.messages:\n        if i['role'] == 'system' or Config.verbose:\n            print_message(i)\n\n    # call the function\n    if args.prompt:\n        chat_once(session, pm, args.prompt)\n    else:\n        repl(session, pm)\n\n\ndef chat_once(session, pm, prompt):\n    user_message = pm.new_user_message(prompt)\n    try:\n        res_message = session.chat(user_message)\n    except TimeoutError:\n        print(red('ERROR: timeout'))\n        return\n    except KeyboardInterrupt:\n        print('chat interrupted')\n        return\n    if Config.verbose:\n        print_message(user_message)\n    print_message(res_message)\n\n\ndef repl(session, pm):\n    green_start = esc(32)\n    while True:\n        try:\n            prompt = input(f'{green_start}> ')\n        except (KeyboardInterrupt, EOFError):\n            print(END, end='')\n            print('exit')\n            break\n        print(END, end='')\n        if not prompt:\n            continue\n        print()\n        if prompt in ['exit', 'quit']:\n            break\n\n        # special commands\n        if prompt.startswith('!'):\n            try:\n                run_command(session, pm, prompt)\n            except Exception as e:\n                print(red(f'command failed: {e}'))\n            break\n\n        chat_once(session, pm, prompt)\n\n\ncommand_set_keys = ['model', 'params', 'system', 'conversation', 'verbose']\n\ndef run_command(session, pm, prompt):\n    sp = prompt.split(' ')\n    command = sp[0][1:]\n    args = sp[1:]\n    if command == 'set':\n        set_key = args[0]\n        assert set_key in command_set_keys, f'set key is not one of {command_set_keys}'\n\n        if set_key == 'verbose':\n            Config.verbose = bool(args[1])\n        elif set_key == 'conversation':\n            session.conversation = bool(args[1])\n        elif set_key == 'system':\n            session.update_system_message(pm.new_system_message(' '.join(args[1:])))\n        elif set_key == 'params':\n            session.params[args[1]] = args[2]\n        elif set_key == 'model':\n            session.model = args[1]\n    else:\n        raise Exception(f'unknown command: {command}')\n\n\ninline_code_re = re.compile(r'`([^\\n`]+)`')\nmultiline_code_re = re.compile(r'```\\w*\\n([^`]+)\\n```')\n\n\ndef print_message(message):\n    role = message['role']\n    role_with_padding = f' {role} '\n    content = message['content'].strip()\n\n    # find inline code and replace with color for non-user messages\n    if role != 'user':\n        content = multiline_code_re.sub(lambda m: m.group(0).replace(m.group(1), cyan(m.group(1))), content)\n        content = inline_code_re.sub(lambda m: m.group(0).replace(m.group(1), cyan(m.group(1))), content)\n\n    content_color = lambda s: s\n    role_color = white_hl\n    if role == 'system':\n        content_color = yellow\n        role_color = yellow_hl\n    elif role == 'user':\n        content_color = green\n        role_color = green_hl\n\n    s = content_color(content)\n    if (Config.verbose):\n        s = f'{role_color(role_with_padding)} {s}'\n\n    print(s + '\\n')\n\n\ndef print_info(session):\n    c = magenta\n    s = f\"\"\"\\\n{magenta_hl(\" execution info \")}:\n{c('Config')}\n    {c('api_base_url')}: {Config.api_base_url}\n    {c('api_key')}: {Config.api_key[:5]}******{Config.api_key[-2:]}\n    {c('default_model')}: {Config.default_model}\n    {c('default_params')}: {json.dumps(Config.default_params)}\n{c('ChatSession')}\n    {c('conversation')}: {session.conversation}\\\n\"\"\"\n    print(s + '\\n')\n\n# Prompts #\n\nshortcut_re = re.compile(r'@(\\w+)')\n\n\nclass PromptsManager:\n    def __init__(self):\n        self.data = {}\n\n    def load_from_file(self):\n        prompts_file = os.path.join(home, '.ai_py_prompts.json')\n        if os.path.exists(prompts_file):\n            with open(prompts_file) as f:\n                self.data = json.load(f)\n        lg.debug(f'prompts loaded: {self.data}')\n\n    def get(self, role, name, default=None):\n        return self.data.get(role, {})[name]\n\n    def format_prompt(self, prompt, role):\n        def handle_match(m):\n            try:\n                return self.get(role, m.group(1))\n            except KeyError:\n                return m.group(0)\n        return shortcut_re.sub(handle_match, prompt)\n\n    def new_messages(self, system_prompt):\n        if system_prompt:\n            return [{\n                'role': 'system',\n                'content': self.format_prompt(system_prompt, 'system'),\n            }]\n        return []\n\n    def new_user_message(self, prompt):\n        return {\n            'role': 'user',\n            'content': self.format_prompt(prompt, 'user'),\n        }\n\n\n# Session #\n\nclass ChatSession:\n    def __init__(self, api_base_url, api_key, conversation=False, messages=None, model=None, params=None):\n        self.api_base_url = api_base_url\n        self.api_key = api_key\n        self.conversation = conversation\n        if messages is None:\n            messages = []\n        self.messages = messages\n\n        if not model:\n            model = Config.default_model\n        self.model = model\n\n        if not params:\n            params = Config.default_params\n        self.params = params\n\n    def chat(self, user_message, params_override=None):\n        self.messages.append(user_message)\n        res_message, data, messages = self.create_completion(params_override=params_override)\n        if Config.verbose:\n            print(blue(f'stat: sent_messages={len(messages)} total_messages={len(self.messages)} total_tokens={data[\"usage\"][\"total_tokens\"]} tokens_price=~${\"{:.6f}\".format(data[\"usage\"][\"total_tokens\"]/1000*0.002)}'))\n        self.messages.append(res_message)\n        return res_message\n\n    def create_completion(self, params_override=None) -> tuple[dict, dict, list]:\n        url = f'{self.api_base_url}chat/completions'\n        headers = {\n            # if User-Agent is not added, cloudflare workers will return 403, no idea why it happens\n            'User-Agent': 'reorx/ai',\n            'Authorization': f'Bearer {self.api_key}',\n        }\n\n        if self.conversation:\n            messages = self.messages\n        else:\n            messages = list(filter(lambda x: x['role'] == 'system', self.messages))\n            # assume the last message is always the user message\n            messages.append(self.messages[-1])\n\n        data = dict(self.params)\n        if params_override:\n            data.update(params_override)\n        data.update(\n            model=Config.default_model,\n            messages=messages,\n        )\n\n        try:\n            res, body_b = http_request('POST', url, headers=headers, data=data, logger=lg, timeout=Config.timeout)\n        except HTTPError as e:\n            raise RequestError(e.status, e.read().decode()) from None\n        res_data = json.loads(body_b)\n        res_message = res_data['choices'][0]['message']\n\n        return res_message, res_data, messages\n\n\n# HTTP request #\n\ndef http_request(method, url, params=None, headers=None, data: Optional[Union[dict, list, bytes]] = None, timeout=None, logger=None) -> Tuple[HTTPResponse, bytes]:\n    if params:\n        url = f'{url}?{parse.urlencode(params)}'\n    if not headers:\n        headers = {}\n    if data and isinstance(data, (dict, list)):\n        data = json.dumps(data, ensure_ascii=False).encode()\n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    if logger:\n        logger.debug(f'request: {method} {url}\\nheaders: {headers}\\ndata: {data}')\n    req = request.Request(url, method=method, headers=headers, data=data)\n    res = request.urlopen(req, timeout=timeout)  # raises: (HTTPException, urllib.error.HTTPError)\n    try:\n        body_b: bytes = res.read()\n    except IncompleteRead as e:\n        body_b: bytes = e.partial\n    if logger:\n        logger.debug(f'response: {res.status}, {body_b}')\n    return res, body_b\n\n\nclass RequestError(Exception):\n    def __init__(self, status, body) -> None:\n        self.status = status\n        self.body = body\n\n    def __str__(self):\n        return f'{self.__class__.__name__}: {self.status}, {self.body}'\n\n\n# Color #\n\ndef esc(*codes: Union[int, str]) -> str:\n    \"\"\"Produces an ANSI escape code from a list of integers\n    :rtype: text_type\n    \"\"\"\n    return '\\x1b[{}m'.format(';'.join(str(c) for c in codes))\n\n\ndef make_color(start, end: str) -> Callable[[str], str]:\n    def color_func(s: str) -> str:\n        return start + s + end\n    return color_func\n\n\nEND = esc(0)\n\nFG_END = esc(39)\nblack = make_color(esc(30), FG_END)\nred = make_color(esc(31), FG_END)\ngreen = make_color(esc(32), FG_END)\nyellow = make_color(esc(33), FG_END)\nblue = make_color(esc(34), FG_END)\nmagenta = make_color(esc(35), FG_END)\ncyan = make_color(esc(36), FG_END)\nwhite = make_color(esc(37), FG_END)\n\nBG_END = esc(49)\nblack_bg = make_color(esc(40), BG_END)\nred_bg = make_color(esc(41), BG_END)\ngreen_bg = make_color(esc(42), BG_END)\nyellow_bg = make_color(esc(43), BG_END)\nblue_bg = make_color(esc(44), BG_END)\nmagenta_bg = make_color(esc(45), BG_END)\ncyan_bg = make_color(esc(46), BG_END)\nwhite_bg = make_color(esc(47), BG_END)\n\nHL_END = esc(22, 27, 39)\n#HL_END = esc(22, 27, 0)\n\nblack_hl = make_color(esc(1, 30, 7), HL_END)\nred_hl = make_color(esc(1, 31, 7), HL_END)\ngreen_hl = make_color(esc(1, 32, 7), HL_END)\nyellow_hl = make_color(esc(1, 33, 7), HL_END)\nblue_hl = make_color(esc(1, 34, 7), HL_END)\nmagenta_hl = make_color(esc(1, 35, 7), HL_END)\ncyan_hl = make_color(esc(1, 36, 7), HL_END)\nwhite_hl = make_color(esc(1, 37, 7), HL_END)\n\nbold = make_color(esc(1), esc(22))\nitalic = make_color(esc(3), esc(23))\nunderline = make_color(esc(4), esc(24))\nstrike = make_color(esc(9), esc(29))\nblink = make_color(esc(5), esc(25))\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "generate_updates.py",
          "type": "blob",
          "size": 6.009765625,
          "content": "import os\nimport time\nimport re\nimport shlex\nimport datetime\nimport subprocess\nimport logging\nfrom collections import OrderedDict\nfrom ai import ChatSession\n\n\nlg = logging.getLogger(__name__)\n\nposts_dir = 'site/content/posts'\n\n\ndef main():\n    logging.basicConfig(level=logging.INFO)\n\n    session = ChatSession(\n        os.environ.get('OPENAI_API_BASE_URL', 'https://api.openai.com/v1/'),\n        os.environ['OPENAI_API_KEY'],\n        params={\n            'temperature': 0.7,\n        }\n    )\n\n    rc, out, err = run_cmd('git log --pretty=format:\"%h %ad %s\" --date=short --first-parent', shlex_reformat=True, logger=lg)\n    # print(out)\n\n    date_hashs_map = OrderedDict()\n\n    min_date = '2023-03-05'\n\n    line_regex = re.compile(r'(?P<hash>\\w+) (?P<date>\\d{4}-\\d{2}-\\d{2}) (?P<msg>.*)')\n    for line in out.strip().splitlines():\n        rv = line_regex.match(line)\n        hash, date = rv.group('hash'), rv.group('date')\n        if date_str_greater_than(min_date, date):\n            # ignore min_date greater than date\n            continue\n\n        hashs = date_hashs_map.setdefault(date, [])\n        hashs.append(hash)\n\n    print(date_hashs_map)\n\n    posts_map = get_posts()\n    for date, hashs in date_hashs_map.items():\n        if date in posts_map:\n            # ignore existing posts\n            continue\n        create_post(date, hashs, 'README.md', session)\n\n\ndef create_post(date, hashs, filename, session, create_cn=False):\n    lg.info(f'create post for {date}')\n    diff = get_diff_for_hashs(hashs, filename)\n    if not diff:\n        lg.info(f'no diff for {date}, skip create_post')\n        return\n\n    print('diff:\\n', diff)\n    post_dir = os.path.join(posts_dir, date)\n    ensure_dir(post_dir)\n\n#     generator_prompt = \"\"\"\\\n# Write a changelog based on the following diff. organize the items in markdown list, each item starts with a markdown link, and a descripition is added below. The generated text starts with \"Here's the projects added or updated today:\"\n# \"\"\"\n    generator_prompt = \"\"\"\\\nWrite a changelog based on the following diff. You should be aware that diff is a format to show the changes of two commits, only the lines starts with + are the added content. You should only extract the added content, organize the items in markdown list, each item starts with a markdown link, and a descripition is added below. The generated text starts with \"Here's the projects added or updated today:\"\n\"\"\"\n    generator_message = session.chat({\n        'role': 'user',\n        'content': f'{generator_prompt}\\n{diff}',\n    })\n    content = generator_message['content'].strip()\n    print('content:\\n', content)\n\n    summary_prompt = \"\"\"Generate a summary within 25 words for the following blog content, using a tone of conscious and informative. Assuming the audiences know the context, ignore words about \"using ChatGPT API\".\\n\"\"\"\n    summary_message = session.chat({\n        'role': 'user',\n        'content': f'{summary_prompt}\\n{content}',\n    })\n    summary = summary_message['content'].strip()\n\n    post = f\"\"\"\\\n---\ntitle: \"Updates for {date}\"\ndate: {date}\nsummary: \"{summary}\"\n---\n{content}\n\"\"\"\n    filename = f'{post_dir}/index.md'\n    lg.info(f'write post {filename}')\n    with open(filename, 'w') as f:\n        f.write(post)\n\n    if create_cn:\n        translator_prompt = \"\"\"\\\n    翻译下面的英文，生成中文的更新日志。\n    \"\"\"\n        translator_message = session.chat({\n            'role': 'user',\n            'content': f'{translator_prompt}\\n{content}',\n        })\n        content_cn = translator_message['content'].strip()\n        summary_cn = session.chat({\n            'role': 'user',\n            'content': f'翻译下面的英文:\\n{summary}',\n        })['content'].strip()\n\n        post_cn = f\"\"\"\\\n    ---\n    title: \"{date} 项目更新\"\n    date: {date}\n    summary: {summary_cn}\n    ---\n    {content_cn}\n\"\"\"\n        filename_cn = f'{post_dir}/index.cn.md'\n        lg.info(f'write post {filename_cn}')\n        with open(filename_cn, 'w') as f:\n            f.write(post_cn)\n\n\ndef get_diff_for_hashs(hashs, filename):\n    # git diff 3b9a293..9d02879~1\n    cmd = ['git', 'diff', '--minimal', '-U2', f'{hashs[-1]}~1..{hashs[0]}', '--', filename]\n    rc, out, err = run_cmd(cmd, logger=lg)\n    if rc != 0:\n        raise RuntimeError(f'git diff failed: {err}')\n    return out.strip()\n\n\ndef get_posts():\n    posts = {}\n    with os.scandir(posts_dir) as entries:\n        for entry in entries:\n            if entry.is_dir():\n                posts[entry.name] = 1\n    return posts\n\n\ndef date_str_greater_than(s0, s1, format='%Y-%m-%d'):\n    d0 = datetime.datetime.strptime(s0, format)\n    d1 = datetime.datetime.strptime(s1, format)\n    return d0 > d1\n\n\ndef run_cmd(cmd, shlex_reformat=False, shell=False, logger=None, **kwargs):\n    if shlex_reformat and shell:\n        raise ValueError('shlex_reformat and shell are mutually exclusive')\n\n    if shell:\n        if not isinstance(cmd, str):\n            raise ValueError('cmd must be str when shell=True')\n        kwargs['shell'] = shell\n\n    # reformat cmd\n    if shlex_reformat:\n        if isinstance(cmd, list):\n            cmd_str = ' '.join(cmd)\n        else:\n            cmd_str = cmd\n        cmd = shlex.split(cmd_str)\n\n    if logger:\n        logger.info('cmd: %s, %s', cmd, kwargs)\n\n    extra_env = kwargs.pop('env', {})\n    if extra_env:\n        env = os.environ.copy()\n        env.update(extra_env)\n        kwargs['env'] = env\n\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs)\n    out, err = p.communicate()\n    out, err = out.decode(), err.decode()\n\n    if logger:\n        logger.debug('cmd=%s returncode=%s out=%s err=%s', cmd, p.returncode, out, err)\n    return p.returncode, out, err\n\n\ndef ensure_dir(path):\n    # lg.debug('ensure dir: {}'.format(path))\n    if os.path.exists(path):\n        if not os.path.isdir(path):\n            raise IOError('ensure_dir: {} must be a directory'.format(path))\n    else:\n        lg.debug('mkdir %s', path)\n        try:\n            os.makedirs(path)\n        except OSError as e:\n            lg.info('ignore os.makedirs OSError: %s', e)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_site.sh",
          "type": "blob",
          "size": 0.326171875,
          "content": "#!/bin/bash\n\ntarget_dir=site/content/posts/the-awesome\n\necho \"---\ntitle: Awesome ChatGPT API\ndate: 2023-03-04\n---\n\" > $target_dir/index.md\ncat README.md | tail -n +4 >> $target_dir/index.md\n\necho \"---\ntitle: Awesome ChatGPT API\ndate: 2023-03-04\n---\n\" > $target_dir/index.cn.md\ncat README.cn.md | tail -n +2 >> $target_dir/index.cn.md\n"
        }
      ]
    }
  ]
}