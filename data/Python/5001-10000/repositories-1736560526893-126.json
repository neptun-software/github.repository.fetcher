{
  "metadata": {
    "timestamp": 1736560526893,
    "page": 126,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pyro-ppl/pyro",
      "stars": 8622,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.2080078125,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nignore:\n  - \"pyro/docutil.py\"\n  - \"pyro/logger.py\"\n\ncoverage:\n  range: 60..95\n  round: nearest\n  precision: 2\n\ncomment: false\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.4228515625,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n[report]\nomit =\n    pyro/docutil.py\n    pyro/logger.py\nexclude_lines =\n    pragma: no cover\n    def backward\n    raise AssertionError\n    raise NotImplementedError\n    raise ValueError\n    except NotImplementedError\n    except ImportError\n    except KeyError\n    except TypeError\n    warnings\\.warn.*\n    warn_if.*\n    if __name__ == .__main__.:\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.115234375,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n*.ipynb linguist-documentation\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.767578125,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\nrun_outputs*\n.DS_Store\n.benchmarks\ndata\n.data\nresults\n*.csv\nexamples/*/processed\nexamples/*/results\nexamples/*/raw\nexamples/dmm/*.pkl\nexamples/*.csv\nexamples/*.pdf\nexamples/mixed_hmm/*csv\npyro/contrib/examples/processed\npyro/contrib/examples/results\npyro/contrib/examples/raw\npyro/_version.py\nprocessed\nraw\n*.pkl\n*.fasta\nbaseline_net_q1.pth\ncvae_net_q1.pth\ncvae_plot_q1.png\nprep_seal_data.csv\nresults.csv\ntutorial/source/model.pdf\n\n# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n# dotenv environment variables file\n.env\n\n#ignore python\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n.pytest_cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n*.out\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\nbuild/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# IDE settings\n.spyderproject\n.idea\n.vscode\n\n# Rope project settings\n.ropeproject\n\n# tmp files\n*.swn\n*.swo\n*.swp\n*~\n\n# mypy cache\n.mypy_cache\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.48828125,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n# Required\nversion: 2\n\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.8\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats: all\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2578125,
          "content": "\n<!--\nCopyright Contributors to the Pyro project.\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at fritz.obermeyer@gmail.com or fehiepsi@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.9521484375,
          "content": "<!--\nCopyright Contributors to the Pyro project.\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Development\n\nPlease follow our established coding style including variable names, module imports, and function definitions.\nThe Pyro codebase follows the [PEP8 style guide](https://www.python.org/dev/peps/pep-0008/)\n(which you can check with `make lint`) and follows\n[`isort`](https://github.com/timothycrosley/isort) import order (which you can enforce with `make format`).\nWhen creating new files please add a license header; this can be done automatically via `make license` or simply `make format`.\n\n# Setup\n\nFirst install [PyTorch](http://pytorch.org/).\n\nThen, install all the dev dependencies for Pyro.\n```sh\nmake install\n```\nor explicitly\n```sh\npip install -e .[dev]\n```\n\n# Testing\n\nBefore submitting a pull request, please autoformat code and ensure that unit tests pass locally\n```sh\nmake format            # runs isort\nmake test              # linting and unit tests\n```\n\nIf you've modified core pyro code, examples, or tutorials, you can run more comprehensive tests locally (after first adding any new files to the appropriate `tests/` script)\n```sh\nmake test-examples     # test examples/\nmake integration-test  # longer-running tests (may take hours)\nmake test-cuda         # runs unit tests in cuda mode\n```\n\nTo run all tests locally in parallel, use the `pytest-xdist` package\n```sh\npip install pytest-xdist\npytest -vs -n auto\n```\n\nTo run a single test from the command line\n```sh\npytest -vs {path_to_test}::{test_name}\n# or in cuda mode\nCUDA_TEST=1 PYRO_DTYPE=float64 PYRO_DEVICE=cuda pytest -vs {path_to_test}::{test_name}\n```\n\nTo ensure documentation builds correctly, run\n```sh\nmake docs\n```\n\n## Testing Tutorials\n\nWe run some tutorials on travis to avoid bit rot.\nBefore submitting a new tutorial, please run `make scrub` from \nthe top-level pyro directory in order to scrub the metadata in \nthe notebooks.\nTo enable a tutorial for testing\n\n1.  Add a line `smoke_test = ('CI' in os.environ)` to your tutorial. Our test\n    scripts only test tutorials that contain the string `smoke_test`.\n2.  Each time you do something expensive for many iterations, set the number\n    of iterations like this:\n    ```py\n    for epoch in range(200 if not smoke_test else 1):\n        ...\n    ```\n\nYou can test locally by running `make test-tutorials`.\n\n# Profiling\n\nThe profiler module contains scripts to support profiling different \nPyro modules, as well as test for performance regression.\n\nTo run the profiling utilities, ensure that all dependencies for profiling are satisfied, \nby running `make install`, or more specifically, `pip install -e .[profile]`.\n\nThere are some generic test cases available in the `profiler` module. Currently, this supports \nonly the `distributions` library, but we will be adding test cases for inference methods\nsoon.\n\n#### Some useful invocations\n\nTo get help on the parameters that the profiling script takes, run: \n\n```sh\npython -m profiler.distributions --help\n```\n\nTo run the profiler on all the distributions, simply run:\n\n```sh\npython -m profiler.distributions\n```\n\nTo run the profiler on a few distributions by varying the batch size, run:\n\n```sh\npython -m profiler.distributions --dist bernoulli normal --batch_sizes 1000 100000 \n```\n\nTo get more details on the potential sources of slowdown, use the `cProfile` tool\n as follows:\n\n```sh\npython -m profiler.distributions --dist bernoulli --tool cprofile\n```\n\n# Submitting\n\nFor larger changes, please open an issue for discussion before submitting a pull request.\nFor relevant design questions to consider, see past\n[design documents](https://github.com/pyro-ppl/pyro/wiki/Design-Docs).\n\nIn your pull request description on github, please note:\n- Proposed changes\n- Links to related issues/PRs\n- New and existing tests\n\nBefore submitting, please run `make format`, `make lint`, and running tests as described above.\n\nFor speculative changes meant for early-stage review, include `[WIP]` in the PR's title. \n(One of the maintainers will add the `WIP` tag.)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.05859375,
          "content": "include LICENSE.md MANIFEST.in\nrecursive-include pyro *.cpp\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.4345703125,
          "content": ".PHONY: all install docs lint format test integration-test clean FORCE\n\nall: docs test\n\ninstall: FORCE\n\tpip install -e .[dev,profile] --config-settings editable_mode=strict\n\nuninstall: FORCE\n\tpip uninstall pyro-ppl\n\ndocs: FORCE\n\t$(MAKE) -C docs html\n\napidoc: FORCE\n\t$(MAKE) -C docs apidoc\n\ntutorial: FORCE\n\t$(MAKE) -C tutorial html\n\nlint: FORCE\n\truff check .\n\tblack --check *.py pyro examples tests scripts profiler\n\tpython scripts/update_headers.py --check\n\tmypy --install-types --non-interactive pyro scripts tests\n\nlicense: FORCE\n\tpython scripts/update_headers.py\n\nformat: license FORCE\n\truff check --fix .\n\tblack *.py pyro examples tests scripts profiler\n\nversion: FORCE\n\tpython scripts/update_version.py\n\nscrub: FORCE\n\tfind tutorial -name \"*.ipynb\" | xargs python -m nbstripout --keep-output --keep-count\n\tfind tutorial -name \"*.ipynb\" | xargs python tutorial/source/cleannb.py\n\ndoctest: FORCE\n\t# We skip testing pyro.distributions.torch wrapper classes because\n\t# they include torch docstrings which are tested upstream.\n\tpython -m pytest -p tests.doctest_fixtures --doctest-modules -o filterwarnings=ignore pyro --ignore=pyro/distributions/torch.py\n\nperf-test: FORCE\n\tbash scripts/perf_test.sh ${ref}\n\nprofile: ref=dev\n\nprofile: FORCE\n\tbash scripts/profile_model.sh ${ref} ${models}\n\ntest: lint docs doctest FORCE\n\tpytest -vx -n auto --stage unit\n\ntest-examples: lint FORCE\n\tpytest -vx --stage test_examples\n\ntest-tutorials: lint FORCE\n\tgrep -l smoke_test tutorial/source/*.ipynb | xargs grep -L 'smoke_test = False' \\\n\t\t| CI=1 xargs pytest -vx --nbval-lax --current-env\n\nintegration-test: lint FORCE\n\tpytest -vx -n auto --stage integration\n\ntest-all: lint FORCE\n\tpytest -vx -n auto\n\tCI=1 grep -l smoke_test tutorial/source/*.ipynb \\\n\t  | xargs pytest -vx --nbval-lax\n\ntest-cuda: lint FORCE\n\tCUDA_TEST=1 PYRO_DTYPE=float64 PYRO_DEVICE=cuda pytest -vx --stage unit\n\tCUDA_TEST=1 pytest -vx tests/test_examples.py::test_cuda\n\ntest-cuda-lax: lint FORCE\n\tCUDA_TEST=1 PYRO_DTYPE=float64 PYRO_DEVICE=cuda pytest -vx --stage unit --lax\n\tCUDA_TEST=1 pytest -vx tests/test_examples.py::test_cuda\n\ntest-jit: FORCE\n\t@echo See jit.log\n\tpytest -v -n auto --tb=short --runxfail tests/infer/test_jit.py tests/test_examples.py::test_jit | tee jit.log\n\tpytest -v -n auto --tb=short --runxfail tests/infer/mcmc/test_hmc.py tests/infer/mcmc/test_nuts.py \\\n\t\t-k JIT=True | tee -a jit.log\n\ntest-funsor: lint FORCE\n\tpytest -vx -n auto --stage funsor\n\nclean: FORCE\n\tgit clean -dfx -e pyro_ppl.egg-info\n\nFORCE:\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5205078125,
          "content": "<!--\nCopyright Contributors to the Pyro project.\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<div align=\"center\">\n  <a href=\"http://pyro.ai\"> <img width=\"220px\" height=\"220px\" src=\"docs/source/_static/img/pyro_logo_with_text.png\"></a>\n</div>\n\n-----------------------------------------\n\n[![Build Status](https://github.com/pyro-ppl/pyro/workflows/CI/badge.svg)](https://github.com/pyro-ppl/pyro/actions)\n[![Coverage Status](https://coveralls.io/repos/github/pyro-ppl/pyro/badge.svg?branch=dev)](https://coveralls.io/github/pyro-ppl/pyro?branch=dev)\n[![Latest Version](https://badge.fury.io/py/pyro-ppl.svg)](https://pypi.python.org/pypi/pyro-ppl)\n[![Documentation Status](https://readthedocs.org/projects/pyro-ppl/badge/?version=dev)](http://pyro-ppl.readthedocs.io/en/stable/?badge=dev)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3056/badge)](https://bestpractices.coreinfrastructure.org/projects/3056)\n\n[Getting Started](http://pyro.ai/examples) |\n[Documentation](http://docs.pyro.ai/) |\n[Community](http://forum.pyro.ai/) |\n[Contributing](https://github.com/pyro-ppl/pyro/blob/master/CONTRIBUTING.md)\n\nPyro is a flexible, scalable deep probabilistic programming library built on PyTorch.  Notably, it was designed with these principles in mind:\n\n- **Universal**: Pyro is a universal PPL - it can represent any computable probability distribution.\n- **Scalable**: Pyro scales to large data sets with little overhead compared to hand-written code.\n- **Minimal**: Pyro is agile and maintainable. It is implemented with a small core of powerful, composable abstractions.\n- **Flexible**: Pyro aims for automation when you want it, control when you need it. This is accomplished through high-level abstractions to express generative and inference models, while allowing experts easy-access to customize inference.\n\nPyro was originally developed at Uber AI and is now actively maintained by community contributors, including a dedicated team at the [Broad Institute](https://www.broadinstitute.org/).\nIn 2019, Pyro [became](https://www.linuxfoundation.org/press-release/2019/02/pyro-probabilistic-programming-language-becomes-newest-lf-deep-learning-project/) a project of the Linux Foundation, a neutral space for collaboration on open source software, open standards, open data, and open hardware.\n\nFor more information about the high level motivation for Pyro, check out our [launch blog post](http://eng.uber.com/pyro).\nFor additional blog posts, check out work on [experimental design](https://eng.uber.com/oed-pyro-release/) and\n[time-to-event modeling](https://eng.uber.com/modeling-censored-time-to-event-data-using-pyro/) in Pyro.\n\n## Installing\n\n### Installing a stable Pyro release\n\n**Install using pip:**\n```sh\npip install pyro-ppl\n```\n\n**Install from source:**\n```sh\ngit clone git@github.com:pyro-ppl/pyro.git\ncd pyro\ngit checkout master  # master is pinned to the latest release\npip install .\n```\n\n**Install with extra packages:**\n\nTo install the dependencies required to run the probabilistic models included in the `examples`/`tutorials` directories, please use the following command:\n```sh\npip install pyro-ppl[extras] \n```\nMake sure that the models come from the same release version of the [Pyro source code](https://github.com/pyro-ppl/pyro/releases) as you have installed.\n\n### Installing Pyro dev branch\n\nFor recent features you can install Pyro from source.\n\n**Install Pyro using pip:**\n\n```sh\npip install git+https://github.com/pyro-ppl/pyro.git\n```\nor, with the `extras` dependency to run the probabilistic models included in the `examples`/`tutorials` directories:\n```sh\npip install git+https://github.com/pyro-ppl/pyro.git#egg=project[extras]\n```\n\n**Install Pyro from source:**\n\n```sh\ngit clone https://github.com/pyro-ppl/pyro\ncd pyro\npip install .  # pip install .[extras] for running models in examples/tutorials\n```\n\n## Running Pyro from a Docker Container\n\nRefer to the instructions [here](docker/README.md).\n\n## Citation\nIf you use Pyro, please consider citing:\n```\n@article{bingham2019pyro,\n  author    = {Eli Bingham and\n               Jonathan P. Chen and\n               Martin Jankowiak and\n               Fritz Obermeyer and\n               Neeraj Pradhan and\n               Theofanis Karaletsos and\n               Rohit Singh and\n               Paul A. Szerlip and\n               Paul Horsfall and\n               Noah D. Goodman},\n  title     = {Pyro: Deep Universal Probabilistic Programming},\n  journal   = {J. Mach. Learn. Res.},\n  volume    = {20},\n  pages     = {28:1--28:6},\n  year      = {2019},\n  url       = {http://jmlr.org/papers/v20/18-403.html}\n}\n```\n"
        },
        {
          "name": "RELEASE-MANAGEMENT.md",
          "type": "blob",
          "size": 1.6787109375,
          "content": "<!--\nCopyright Contributors to the Pyro project.\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Pyro release management\n\nThis describes the process by which versions of Pyro are officially released to the public.\n\n## Versioning\n\nReleases are versioned according to the `version_prefix` constant in [pyro/__init__.py](pyro/__init__.py).\nPyro releases follow semantic versioning with the following caveats:\n\n- Behavior of documented APIs will remain stable across minor releases, except for bug fixes and features marked EXPERIMENTAL or DEPRECATED.\n- Serialization formats will remain stable across patch releases, but may change across minor releases (e.g. if you save a model in 1.0.0, it will be safe to load it in 1.0.1, but not in 1.1.0).\n- Undocumented APIs, features marked EXPERIMENTAL or DEPRECATED, and anything in `pyro.contrib` may change at any time (though we aim for stability).\n- All deprecated features throw a `FutureWarning` and specify possible work-arounds. Features marked as deprecated will not be maintained, and are likely to be removed in a future release.\n- If you want more stability for a particular feature, [contribute](https://github.com/pyro-ppl/pyro/blob/dev/CONTRIBUTING.md) a unit test.\n\n## Release process\n\nPyro is released at irregular cadence, typically about 4 times per year.\n\nReleases are managed by:\n- [Fritz Obermeyer](https://github.com/fritzo)\n- [Neeraj Pradhan](https://github.com/neerajprad)\n- [JP Chen](https://github.com/jpchen)\n\nReleases and release notes are published to [github](https://github.com/pyro-ppl/pyro/releases).\nDocumentation for is published to [readthedocs](https://docs.pyro.ai).\nRelease builds are published to [pypi](https://pypi.org/project/pyro-ppl/).\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "profiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.2109375,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n[tool.ruff]\nextend-exclude = [\"*.ipynb\"]\nline-length = 120\n\n\n[tool.ruff.lint]\nignore = [\"E741\", \"E721\"]\nselect = [\"E\", \"F\", \"I\"]\n"
        },
        {
          "name": "pyro",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.3447265625,
          "content": "# Copyright Contributors to the Pyro project.\n#\n# SPDX-License-Identifier: Apache-2.0\n\n[tool:pytest]\nfilterwarnings = error\n    ignore:numpy.ufunc size changed:RuntimeWarning\n    ignore:numpy.dtype size changed:RuntimeWarning\n    ignore:Mixed memory format inputs detected:UserWarning\n    ignore:Setting attributes on ParameterDict:UserWarning\n    ignore:Creating a tensor from a list of numpy.ndarrays is extremely slow\n    ignore::DeprecationWarning\n    ignore:CUDA initialization:UserWarning\n    ignore:__floordiv__ is deprecated:UserWarning\n    ignore:floor_divide is deprecated:UserWarning\n    ignore:torch.tensor results are registered as constants in the trace\n    once::DeprecationWarning\n\ndoctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL\n\nmarkers =\n    benchmark\n\n[yapf]\nbased_on_style = google\ncolumn_limit = 120\n\n# Global options:\n\n[mypy]\npython_version = 3.8\nexplicit_package_bases = True\nwarn_return_any = True\nwarn_unused_configs = True\nwarn_incomplete_stub = True\nignore_missing_imports = True\nwarn_unreachable = True\n\n# Per-module options:\n\n[mypy-pyro._version.*]\nignore_errors = True\n\n[mypy-pyro.contrib.*]\nignore_errors = True\n\n[mypy-pyro.distributions.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-pyro.generic.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-pyro.infer.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-pyro.ops.einsum]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-pyro.ops.contract]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-pyro.ops.tensor_utils]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-pyro.optim.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.test_primitives]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.test_generic]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.poutine.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.ops.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.optim.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.perf.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.nn.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.infer.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.distributions.*]\nignore_errors = True\nwarn_unused_ignores = True\n\n[mypy-tests.contrib.*]\nignore_errors = True\nwarn_unused_ignores = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.822265625,
          "content": "# Copyright (c) 2017-2019 Uber Technologies, Inc.\n# SPDX-License-Identifier: Apache-2.0\n\nimport os\nimport subprocess\nimport sys\n\nfrom setuptools import find_packages, setup\n\nPROJECT_PATH = os.path.dirname(os.path.abspath(__file__))\nVERSION = \"\"\"\n# This file is auto-generated with the version information during setup.py installation.\n\n__version__ = '{}'\n\"\"\"\n\n# Find pyro version.\nfor line in open(os.path.join(PROJECT_PATH, \"pyro\", \"__init__.py\")):\n    if line.startswith(\"version_prefix = \"):\n        version = line.strip().split()[2][1:-1]\n\n# Append current commit sha to version\ncommit_sha = \"\"\ntry:\n    current_tag = (\n        subprocess.check_output([\"git\", \"tag\", \"--points-at\", \"HEAD\"], cwd=PROJECT_PATH)\n        .decode(\"ascii\")\n        .strip()\n    )\n    # only add sha if HEAD does not point to the release tag\n    if not current_tag == version:\n        commit_sha = (\n            subprocess.check_output(\n                [\"git\", \"rev-parse\", \"--short\", \"HEAD\"], cwd=PROJECT_PATH\n            )\n            .decode(\"ascii\")\n            .strip()\n        )\n# catch all exception to be safe\nexcept Exception:\n    pass  # probably not a git repo\n\n# Write version to _version.py\nif commit_sha:\n    version += \"+{}\".format(commit_sha)\nwith open(os.path.join(PROJECT_PATH, \"pyro\", \"_version.py\"), \"w\") as f:\n    f.write(VERSION.format(version))\n\n\n# READ README.md for long description on PyPi.\n# This requires uploading via twine, e.g.:\n# $ python setup.py sdist bdist_wheel\n# $ twine upload --repository-url https://test.pypi.org/legacy/ dist/*  # test version\n# $ twine upload dist/*\ntry:\n    long_description = open(\"README.md\", encoding=\"utf-8\").read()\nexcept Exception as e:\n    sys.stderr.write(\"Failed to read README.md: {}\\n\".format(e))\n    sys.stderr.flush()\n    long_description = \"\"\n\n# Remove badges since they will always be obsolete.\n# This assumes the first 12 lines contain badge info.\nlong_description = \"\\n\".join([str(line) for line in long_description.split(\"\\n\")[12:]])\n\n# examples/tutorials\nEXTRAS_REQUIRE = [\n    \"notebook\",\n    \"ipywidgets\",\n    \"graphviz>=0.8\",\n    \"matplotlib>=1.3\",\n    \"torchvision>=0.15.0\",\n    \"visdom>=0.1.4,<0.2.2\",  # FIXME visdom.utils is unavailable >=0.2.2\n    \"pandas\",\n    \"pillow>=8.3.1\",  # https://github.com/pytorch/pytorch/issues/61125\n    \"scikit-learn\",\n    \"seaborn>=0.11.0\",\n    \"wget\",\n    \"scipy>=1.1\",\n    # 'biopython>=1.54',\n    # 'scanpy>=1.4',  # Requires HDF5\n    # 'scvi>=0.6',  # Requires loopy and other fragile packages\n]\n\nsetup(\n    name=\"pyro-ppl\",\n    version=version,\n    description=\"A Python library for probabilistic modeling and inference\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(include=[\"pyro\", \"pyro.*\"]),\n    package_data={\n        \"pyro\": [\"py.typed\"],\n        \"pyro.distributions\": [\"*.cpp\"],\n    },\n    author=\"Uber AI Labs\",\n    url=\"http://pyro.ai\",\n    project_urls={\n        \"Documentation\": \"https://docs.pyro.ai\",\n        \"Source\": \"https://github.com/pyro-ppl/pyro\",\n    },\n    install_requires=[\n        # if you add any additional libraries, please also\n        # add them to `docs/requirements.txt`\n        # numpy is necessary for some functionality of PyTorch\n        \"numpy>=1.7\",\n        \"opt_einsum>=2.3.2\",\n        \"pyro-api>=0.1.1\",\n        \"torch>=2.0\",\n        \"tqdm>=4.36\",\n    ],\n    extras_require={\n        \"extras\": EXTRAS_REQUIRE,\n        \"test\": EXTRAS_REQUIRE\n        + [\n            \"black>=21.4b0\",\n            \"nbval\",\n            \"pytest-cov\",\n            \"pytest-xdist\",\n            \"pytest>=5.0\",\n            \"ruff\",\n        ],\n        \"profile\": [\"prettytable\", \"pytest-benchmark\", \"snakeviz\"],\n        \"dev\": EXTRAS_REQUIRE\n        + [\n            \"black>=21.4b0\",\n            \"mypy>=0.812\",\n            \"nbformat\",\n            \"nbsphinx>=0.3.2\",\n            \"nbstripout\",\n            \"nbval\",\n            \"ninja\",\n            \"pypandoc\",\n            \"pytest-xdist\",\n            \"pytest>=5.0\",\n            \"ruff\",\n            \"sphinx\",\n            \"sphinx_rtd_theme\",\n            \"yapf\",\n        ],\n        \"horovod\": [\"horovod[pytorch]>=0.19\"],\n        \"lightning\": [\"lightning\"],\n        \"funsor\": [\n            \"funsor[torch]==0.4.4\",\n        ],\n    },\n    python_requires=\">=3.8\",\n    keywords=\"machine learning statistics probabilistic programming bayesian modeling pytorch\",\n    license=\"Apache 2.0\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Education\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n    # yapf\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}