{
  "metadata": {
    "timestamp": 1736560663588,
    "page": 305,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "volatilityfoundation/volatility",
      "stars": 7450,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4736328125,
          "content": "*.py[cod]\n\n# Pycharm ide library\n.idea\n\n*.swp\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n.svn/\n.DS_Store\n\n# compressed files\n*.zip\n*.7z\n*.rar\n*.tar.gz\n*.gz\n\n# common memory extensions:\n*.vmem\n*.mem\n*.img\n*.dmp\n*.sys\n*.bin\n*.001\n*.raw\n"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 0.759765625,
          "content": "===============================================\nThis file identifies core Volatility authors. \n\nAll lists are alphabetical. \n===============================================\n\nVolatility 2.6:\n------------\n\nMike Auty\nAndrew Case\nMichael Hale Ligh\nJamie Levy\nAAron Walters\nNick L. Petroni, Jr.\n\n\nVolatility 2.4, 2.5:\n------------\n\nMike Auty\nAndrew Case\nMichael Hale Ligh\nJamie Levy\nAAron Walters\n\nVolatility 2.0, 2.1, 2.2, 2.3:\n------------\n\nMike Auty\nAndrew Case\nMichael Cohen\nBrendan Dolan-Gavitt\nMichael Hale Ligh\nJamie Levy\nAAron Walters\n\nVolatility 1.3:\n------------\n\nAAron Walters <awalters@4tphi.net>\nVolatile Systems LLC\n\nBrendan Dolan-Gavitt <bdolangavitt@wesleyan.edu>\n\nVolatools Basic authors:\n------------\n\nAAron Walters \nKomoku, Inc.\n\nNick L. Petroni, Jr.\nKomoku, Inc.\n"
        },
        {
          "name": "CHANGELOG.txt",
          "type": "blob",
          "size": 23.2724609375,
          "content": "Changelog\n\nAs of Volatility 2.4, all changes are now tracked on the GitHub site:\n\nhttps://github.com/volatilityfoundation/volatility\n\nVolatility 2.0-2.3: all changes were tracked on the Google Code site: \n\nhttp://code.google.com/p/volatility/source/list\n\n04.8.2009      Volatility-1.3.1  moyix\n    * Update: Introduce BufferAddressSpace and refactor\n    * Files:\n        forensics/addrspace.py\n        forensics/object.py\n    Description:\n      Added a new BufferAddressSpace class that acts like a regular\n      FileAddressSpace, but can be instantiated from a string buffer.\n      This allows any function that expects an address space to work on\n      a buffer instead. Also refactored the *_buf functions in object.py\n      to use this class instead (reduces code duplication). Thanks to\n      Michael Cohen for the idea.\n\n04.8.2009      Volatility-1.3.1  moyix\n    * Update: Add support for inactive hiberfiles to hibinfo\n    * Files:\n        forensics/win32/hiber_addrspace.py\n    Description:\n      Added the ability to convert hibernation files that are in the\n      \"inactive\" state (their first page is zeroed) to dd format. It is\n      still not possible to run Volatility directly on such files, but\n      they can now be converted for analysis. Thanks to Jon Evans for\n      the suggestion.\n\n04.8.2009      Volatility-1.3.1  moyix\n    * Update: Pool scanning enhancements\n    * Files:\n        forensics/win32/scan2.py\n        forensics/object.py\n    Description:\n      Incorporated new functions written by Andreas Schuster to allow\n      more fine-grained checks in pool scanners, and modularize some of\n      the accessors (get_poolsize, get_poolsize, etc.). The patch also\n      adds read_unicode_string_buf and read_string_buf, which operate on\n      string buffers. Thanks to Andreas Schuster for the patch.\n\n04.7.2009      Volatility-1.3    awalters\n    * Update: Handle table parsing\n    * Files:\n        forensics/win32/handles.py\n    Description:\n      Updated handle parsing code to fix typo. It was not\n      adding the correct offset for Level 3 tables. It was also\n      not traversing all the entries. Thanks to Brendan Dolan-Gavitt.\n\n04.7.2009      Volatility-1.3    awalters\n    * Update: Network Offsets\n    * Files:\n        forensics/win32/network.py\n    Description:\n      Added new offset updates. Thanks to Jun Koi.\n\n03.17.2009     Volatility-1.3    awalters\n    * Update: x86.py robustness\n    * Files:\n        forensics/x86.py\n    Description:\n      Added more robustness to the x86 address space. This time\n      it focused on PAE.  Certain samples were reading outside of \n      the physical address space. Thanks to Brendan Dolan-Gavitt for patch.\n\n03.17.2009    Volatility-1.3.1    awalters\n    * Bug: Hiberfil Address space w\n    * Files:\n        forensics\\win32\\hiber_addrspace.py\n    Description:\n      Needed to import the PAE address space. This only meant\n      that hibinfo was having some issue.  It would still process\n      hiberfil's just fine. Thanks to Andreas Schuster for the bug report.\n\n03.17.2009    Volatility-1.3.1    awalters\n    * Update: New version of tcp driver needed new offsets in SP3\n    * Files:\n        forensics/win32/network.py\n\tforensics/win32/scan2.py\n\tforensics/win32/scan.py\n    Description:\n      Added new offsets to network to handle new driver. Updated scan2\n      and scan as well to support new pool allocation size. Thanks to Brendan \n      Dolan-Gavitt.\n\n02.22.2009    Volatility-1.3.1    awalters\n    * Update: procdump check peb\n    * Files:\n        vmodules.py\n    Description:\n      Added a check to make sure that the PEB is memory resident.\n\n02.05.2009    Volatility-1.3.1    awalters\n    * Update: Handle parsing\n    * Files: \n        forensics/win32/handles.py\n\tvmodules.py\n    Description:\n       Updated handle parsing code to correctly handle middle\n       and upper layer handles in multi-level schemes. Also\n       changed files to now use the common parsing code.\n\n12.11.2008    Volatility-1.3.1    awalters\n    * Update: Plugin Generators\n    * Files:\n        forensics/commands.py\n\tmemory_plugins/example4.py\n\tvutils.py\n    Description:\n      Added the ability to use generators in your plugins. This\n      is extremely powerful and allows us to support arbitrary\n      output formats.  Thanks to Michael Cohen for the patch.\n\n\n12.11.2008    Volatility-1.3.1    awalters\n    * Update: Object Inheritance\n    * Files:\n       forensics/object2.py\n       forensics/registry.py\n       memory_plugins/example3.py\n    Description:\n      Plugins creators are now able to express an inheritance order\n      associated with an object. The default is the Profile objects.\n      This fixes a problem associated with collisions.  Thanks to \n      Cameron C Caffee for the bug report and thanks to Brendan \n      Dolan-Gavitt and Michael Cohen for insightful discussions.\n\n12.10.2008    Volatility-1.3.1    awalters\n    * Update: lists.py\n    * Files:\n        forensics/win32/lists.py\n    Description:\n        Added Brendan Dolan-Gavitt lists.py file for traversing kernel\n\tlinked lists. Thanks Brendan.\n\n12.06.2008    Volatility-1.3.1    awalters\n    * Bug: Crashdump base address space\n    * Files:\n        forensics/win32/tasks.py\n    Description:\n        Changed find_csdversion so that it does not pass in the filename.\n\tMade fname an optional parameter to process_addr_space since it is\n\tno longer being used and only maintained for backward compatibility.\n\tThanks to Richard Austin for the bug report.\n\n11.25.2008    Volatility-1.3.1    awalters\n    * Bug: modules_list\n    * Files:\n        forensics/win32/modules.py\n    Description:\n        Added a check to make sure both PsLoadedModuleList and this\n\tmodule were defined.\n\n11.25.2008    Volatility-1.3.1    awalters\n    * Update: Tabs and spaces\n    * Files:\n        Too Many\n      Description:\n        Spent some quality time with the tab nanny.\n\n11.25.2008    Volatility-1.3.1    awalters\n    * Bug: Added more checks for registry objects\n    * Files:\n        forensics/win32/registry.py\n      Description:\n        Added more checks in print_entry_keys for invalid pages.\n\tSome of the key path was crossing page boundaries so more\n\tchecks needed to be added. Thanks to Christian Herndler \n\tfor the bug report.\n\n11.22.2008    Volatility-1.3.1    awalters\n    * Update: get_obj_offset no longer modifies passed in list\n    * Files:\n        forensics/object.py\n      Description:\n        get_obj_offset previously modified the passed-in list used\n\tto represent type information.  Now it works on a copy to\n\tprevent unexpected behavior. Thanks to Brendan Dolan-Gavitt\n\tfor the update.\n\n11.17.2008    Volatility-1.3.1    awalters\n    * Bug: Checks to make sure KeyControlBlock is a valid address\n    * Files:\n        forensics/win32/registry.py\n      Description:\n        print_entry_keys has been updated to check that KeyControlBlock \n\tis a valid address. Thanks to Christian Herndler for the bug\n\treport and Brendan Dolan-Gavitt for the bug fix.\n\n11.15.2008    Volatility-1.3.1    awalters\n    * Update: removed sha module from crashdump\n    * Files:\n        forensics/win32/crashdump.py\n      Description:\n        Removed the attempt to import the sha module since it generates\n\ta warning with Python 2.6. Thanks to STC for reporting the issue.\n\n11.14.2008    Volatility-1.3.1    awalters\n    * Bug: added more checks in object parsing for invalid pages\n    * Files:\n        forensics/win32/handles.py\n\tforensics/win32/registry.py\n\tvmodules.py\n      Description:\n         Added more checks for invalid pages while processing the \n\t object directory. Thanks to Christian Herndler for the bug \n\t report.\n\n11.03.2008    Volatility-1.3.1    awalters\n    * Bug: Python 2.5 finally\n    * Files:\n        vmodules.py\n      Description:\n        Removed the finally clause that is only available in Python 2.5.\n\tThanks to Cameron Caffee for the bug report and Brendan Dolan-Gavitt\n\tfor the bug fix.\n\n10.17.2008    Volatility-1.3.1    awalters\n    * Bug: Checking for invalid pages\n    * Files:\n       forensics/object2.py\n      Description:\n         Added more checks to object2 to makes sure the addresses\n\t being accessed are valid. If not, then they now return a None.\n\t Thanks to Jesse Kornblum for submitting a patch.\n\n9.27.2008     Volatility-1.3.1    awalters\n    * Update: plugin directory now relative to registry\n    * Files:\n        forensics/registry.py\n      Description:\n        The plugin search is now performed relative to registry.py. Thanks\n\tto Michael Cohen for the patch.\n\n9.4.2008      Volatility-1.3.1    awalters\n    * Bug: length bug in hiberaddrspace\n    * Files:\n        forensics\\win32\\hiber_addrspace.py\n      Description:\n        We were referencing an undefined length variable. Thanks\n\tto Andreas Schuster for sending the patch.\n\n9.4.2008      Volatility-1.3.1    awalters\n    * Update: Find the plugin modules\n    * Files:\n        forensics/registry.py\n      Description:\n        Added the absolute path to search for dynamic plugins. This allows\n\tvolatility to be called from anywhere on the system. Thanks\n\tto Andreas Schuster for sending the patch.\n\n8.14.2008     Volatility-1.3    awalters\n    * Update: x86.py robustness\n    * Files:\n        forensics/x86.py\n      Description:\n        Added more robustness to the x86 address space. Thanks to Brendan\n\tDolan-Gavitt for sending in a bug report.\n\n8.14.2008     Volatility-1.3    awalters\n    * Update: Standardized _LDR_MODULE -> _LDR_DATA_TABLE_ENTRY\n    * Files:\n        forensics/win32/modules.py\n\tforensics/win32/scan.py\n\tforensics/win32/scan2.py\n    Description:\n        Changed the data type names to make them more standardized across\n        operating system versions. Thanks Brendan Dolan-Gavitt for\n        sending in update request.\n\n6.26.2008     Volatility-1.3    awalters\n    * Bug: regobjkey initialize list\n    * Files:\n        vmodules.py\n      Description:\n        When specifying a offset for regobjkey the list\n\thad not been initialized yet. Thanks to Brendan Dolan-Gavitt\n\tfor sending in a bug report.\n\n6.24.2008     Volatility-1.3    awalters\n    * Update: 64-bit hosts\n    * Files:\n        forensics/object.py\n\tforensics/win32/crashdump.py\n\tforensics/win32/scan2.py\n\tforensics/win32/network.py\n\tforensics/win32/executable.py\n      Description:\n        Updated so that modules will work correctly\n\twhen run from 64-bit hosts using python 2.5.\n\tThanks to sham for sending in the bug report.\n\n6.23.2008     Volatility-1.3    awalters\n    * Bug: Non-resident Vad address\n    * Files:\n        forensics/win32/vad.py\n\tvmodules.py\n      Description:\n        Updated the vad modules to handle\n\tinvalid addresses in low memory situations.\n\tThanks to Bryan D. Payne for sending in \n\ta bug report.\n\n6.23.2008     Volatility-1.3    awalters\n    * Bug: Handle count paged\n    * Files:\n        forensics/win32/tasks.py\n      Description:\n        Received a sample where the ObjectTable\n\twas not a valid address. Added a check to make\n\tsure it is valid.  Thanks to Bryan D. Payne\n\tfor sending in a bug report.\n\n6.22.2008     Volatility-1.3    awalters\n    * Update: Ident info\n    * Files:\n        forensics/win32/tasks.py\n\tvutils.py \n      Description:\n        Updated ident command so that it correctly\n\tfinds the version of XP, now that we have\n\tsupport for SP3. Thanks to jeremie0 for noticing\n\tand to Brendan Dolan-Gavitt for helping with\n\tthe fix.\n\n6.11.2008     Volatility-1.3    awalters\n    * Update: Array Types\n    * Files:\n        forensics/object2.py\n      Description:\n        Changed arrays so that they now return objects\n\tin cases where they are not native types. Thanks\n\tto Brendan Dolan-Gavitt for the update!\n\n6.8.2008      Volatility-1.3    awalters\n    * Bug: Invalid page directories\n    * Files:\n        vmodules.py\n      Description:\n        Added code to catch the cases when we encounter\n\tinvalid page directories.  Thanks to both Angelo Cavallini\n\tand Brendan Dolan-Gavitt for reporting this bug.\n        \n6.8.2008      Volatility-1.3    awalters\n    * Update: potential bad string characters (unicode escaping)\n    * Files:\n        forensics/win32/scan2.py\n\tforensics/object.py\n      Description:\n        Attempting to standardize error handling related to unicode\n\tconversions. Thus we are now passing an explicit error\n\tstring argument. Thanks to Brendan Dolan-Gavitt.\n\n6.8.2008      Volatility-1.3    awalters\n    * Update: psscan2 check_dtb\n    * Files: \n        forensics/win32/scan2.py \n      Description:\n        Added a check from psscan to psscan2 in the \n\tcheck_dtb constraint to make sure the DTB\n\thad a value. Thanks Andreas Schuster!\n\n6.7.2008      Volatility-1.3    awalters\n    * Update: SP3 support\n    * Files:\n        forensics/win32/network.py\n      Description:\n        Made changes to support SP3.\n\n5.21.2008     Volatility-1.3    awalters\n    * Update: Changed create_addr_space api\n    * Files:\n        forensics/win32/tasks.py\n        memory_objects/Windows/xp_sp2.py\n        memory_plugins/example2.py\n        memory_plugins/example3.py\n        vmodules.py\n      Description:\n        Changed the create_addr_space API so that it does\n\tnot require types or filname.  This was an\n\tartifact of the way the function used to work.\n\n5.17.2008     Volatility-1.3    awalters\n    * Feature: New Object Model\n    * Files:\n        forensics/registry.py\n\tmemory_objects/Windows/xp_sp2.py\n\tmemory_plugins/example3.py\n\tforensics/object2.py\n\tforensics/win32/meta_info.py\n\tvutils.py\n      Description:\n        Added a new object model to make navigating the data\n\tstructures more intuitive. All future modules will be \n\ttransition to use this new model. Thanks to Brendan \n\tDolan-Gavitt for all his help!\n\n5.14.2008     Volatility-1.3    awalters\n    * Feature: Plugin Architecture\n    * Files:\n        forensics/commands.py\n        forensics/registry.py\n        volatility\n        memory_plugins/example1.py\n        memory_plugins/example2.py\n      Description:\n        Added an entirely new plugin infrastructure.  Now it is \n        possible to load the commands dynamically just by adding\n        them to the correct directory.  This will allow people\n        to support their own modules. This work is based on a \n        similar registry implementation found in PyFlag. \n        Thanks to Michael Cohen and David Collett for the great \n        work they have done and help getting this code integrated.\n\n5.13.2008     Volatility-1.3    awalters\n    * Feature: Hiberfil support\n    * Files:\n        vmodules.py\n        volatility\n        forensics/win32/hiber_addrspace.py\n        forensics/win32/xpress.py\n        forensics/win32/scan.py\n        forensics/win32/network.py\n        forensics/win32/datetime.py\n      Description:\n          Added native hiberfil support.  Also added the ability\n          to convert from hiberfil to linear format.  Now all the\n          commands can be run against hiberfils natively.  This\n          is accomplished through the new hiberfil address space.\n          Thanks to Matthieu Suiche and Brendan Dolan-Gavitt for\n          all the great work they have done with hiberfil parsing\n          and the xpress compression algorithm.\n\n5.13.2008     Volatility-1.3    awalters\n    * Feature: New scanning infrastructure\n    * Files:\n        vmodules.py\n        volatility\n        forensics/win32/scan2.py\n        forensics/win32/globals.py\n        forensics/win32/crash_addrspace.py\n        forensics/win32/datetime.py\n      Description:\n          Added an entirely new OO scanning infrastructure. This allows\n          for extremely fast scanning and easier scanning across the\n          logical address spaces.  As part of this we also ported the \n          scanning modules over to the new infrastructure. Thanks to\n          Michael Cohen and Andreas Schuster for the help and ideas \n          to get this working!\n\n5.7.2008      Volatility-1.3    awalters\n    * Bug: get_available_addresses\n    * Files:\n        forensics/x86.py\n\tvmodules.py\n\tvolatility\n      Description:\n          Fixed an off by 1 error in get_available_address for\n\t  non-pae machines that seemed to have crept back in. Also\n\t  changed the name of usrdmp to memdmp since it is really\n\t  dumping a processes addressable memory. Thanks Eoghan Casey!\n\n4.30.2008     Volatility-1.3    awalters\n    * New Module: procdump\n    * Files:\n          forensics/win32/executable.py\n\t  vtypes.py\n\t  vmodules.py\n      Description:\n          Added a new module that will allow the analyst to extract\n\t  the executable from memory for further analysis. Thanks to\n\t  Brendan Dolan-Gavitt for all your hard work!\n\n4.28.2008     Volatility-1.3    awalters\n    * Bug: open registry keys\n    * Files:\n          forensics/win32/handles.py\n      Description:\n          During testing Brendan found a bug when processing object types.\n\t  It would have been possible to enumerate KeyedEvents. Thanks \n\t  Brendan Dolan-Gavitt!\n\n4.28.2008     Volatility-1.3    awalters\n    * New Module: regobjkey\n    * Files:\n          vmodules.py\n          forensics/win32/registry.py\n          forensics/win32/handles.py\n          vtypes.py\n      Description:\n          Added a new module that will allow an analyst to dump the open\n          registry keys found in the object table.  Thanks to \n          Brendan Dolan-Gavitt for his contributions!\n\n4.27.2008     Volatility-1.3    awalters\n    * Feature: psscan dot format\n    * Files:\n          vmodules.py\n\t  forensics/win32/scan.py\n      Description:\n          Added the ability to print the output of psscan in dot format.\n\t  Similar to that available by ptfinder by Andreas Schuster. This\n\t  was requested by Eoghan Casey.\n\n4.23.2008     Volatility-1.3    awalters\n    * Useability: Pass pid or EPROCESS offset\n      Files:\n          vmodules.py\n\t  forensics/win32/handles.py\n      Description:\n          Added the ability to dump files and dlllist by pid or EPROCESS\n\t  offset.  One reason this was asked for was to deal with data\n\t  only attacks which may remove the process from process list.\n\t  Thanks to Eoghan Casey for the feedback!\n\n4.23.2008     Volatility-1.3    awalters\n    * New Modules: dmp2raw, raw2dmp\n      Files:\n         vtypes.py\n         vmodules.py\n         forensics/win32/crashdump.py\n\t forensics/win32/info.py\n         forensics/win32/tasks.py\n      Description:\n          Added modules to convert from raw dumps to crash dumps and vice\n\t  versa. Thanks to Andreas Schuster for helping to get this started\n\t  and thanks to Brendan Dolan-Gavitt for helping get it perfected!\n\n4.23.2008     Volatility-1.3    awalters\n    * Optimization: KUSER_SHARED_DATA\n      Files:\n         vmodules.py\n      Description:\n         Changed KUSER_SHARED_DATA in get_image_info and get_datetime to\n\t point to 0xFFDF0000 instead of 0x7ffe0000. Thanks Brendan\n\t Dolan-Gavitt!\n\n4.1.2008      Volatility-1.2.3pre  awalters\n    * Bug: socket crash\n      Files:\n         forensics/win32/network.py\n      Description:\n         In get_open_sockets, we needed to make sure that the AddrObjAddr\n\t and AddrTableSize were not none and if they were fail gracefully.\n\t Thanks to Eoghan Casey for the bug report.\n\n3.3.2008      Volatility-1.2.3pre awalters\n    * Bug: get_obj_offset() non-builtin\n      Files:\n        forensics/object.py\n      Description:\n        Modified get_obj_offset to support arrays of non-builtin types.  \n\tThanks Brendan Dolan-Gavitt!\n\n2.27.2008     Volatility-1.2.3pre  awalters\n    * Bug: Not traversing complete module list\n      Files:\n        forensics/win32/modules.py\n      Description:\n        Traversing the module list should not stop when it reaches a None but \n\tcontinue to the next module\n\n2.27.2008     Volatility-1.2.3pre  awalters\n    * Bug: is_valid_address(addr)\n      Files:\n        forensics/addrspace.py\n\tforensics/x86.py\n      Description:\n        is_valid_address was failing to check if addr was None. This was found\n\tby analyzing hiberfile images. Thanks to Brendan Dolan-Gavitt and\n\tAndreas Schuster for helping me find the problem! \n\n2.25.2008     Volatility-1.2.3pre  awalters\n\n    * Bug: hidden processes\n      Files:\n        vmodules.py\n      Description:\n        Both usrdmp and memmap were unable to handle hidden processes. They\n\tcan now be passed the offset to an EPROCESS object. Thanks to Eoghan\n\tCasey for the bug report.\n\n12.28.2007    Volatility-1.2.3pre  awalters\n    * Bug: 64 bit\n      Files:\n        forensics/addrspace.py\n\tforensics/object.py\n\tforensics/win32/scan.py\n\tforensics/x86.py\n\tforensics/win32/crash_addrspace.py\n      Description:\n        Fixed a bug that occurs when people are running Python 2.5 on\n\ta 64 bit OS. Python 2.5 changed the way that Python native types\n\tare stored and thus changed the unpack usage. Thanks to Jamie Levy\n\tand students!\n\n11.28.2007    Volatility-1.2.2pre  awalters\n    * Bug: memmap\n      Files:\n        vmodules.py\n      Description:\n        mem_map fixed so that you can specifiy a particular process.\n\n11.28.2007    Volatility-1.2.2pre  awalters\n    * Bug: dtb_aligned\n      Files:\n        forensics/win32/scan.py\n      Description:\n        On systems using PAE, EPROCESS.DirectoryTableBase actually\n\tpoints to the base of the page directory pointer array.\n\tThanks Andreas Schuster.\n\n11.27.2007    Volatility-1.2.2pre  awalters\n    \n    * Optimization: find_dtb\n      Files:\n        forensics/win32/tasks.py\n      Description:\n        Dramatically reduced the time for find_dtb. Thanks Michael Cohen.\n\n09.21.2007    Volatility-1.2.1pre  awalters\n\n    * New Module: usrdmp\n      Files:\n        vmodules.py\n      Description:\n        Dumps a processes address space. Thanks Eoghan Casey. \n\n09.20.2007    Volatility-1.2pre    awalters\n\n    * New Module: modscan\n      Files:\n        vmodules.py\n        forensics/win32/scan.py\n        forensics/win32/globals.py\n      Description:\n        Performs a linear scan for memory resident Windows modules. Contributed         by Andreas Schuster. \n    * New Module: memmap\n      Files:\n        vmodules.py\n        forensics/x86.py\n      Description:\n        Provides a map of the virtual to physical address translations within \n        a particular address space.  Based on similar tools by Andreas \n        Schuster (memdump.pl) and Brendan Dolan-Gavitt (memdump.py).\n    * New Module: dmpchk \n      Files:\n        vmodules.py\n        forensics/win32/crash_addrspace.py\n      Description:\n        Prints auxiliary information about the crash dump file.\n    * New Module: WindowsCrashDumpSpace32\n      Files:\n        forensics/x86.py\n        forensics/win32/crash_addrspace.py\n      Description:\n        Provides the ability to use crash dumps as input to Volatility. This is \n\taccomplished through the use of stackable address spaces. Contributions \n\tfrom Andreas Schuster.\n    * New Feature: get_available_pages()\n      Files:\n        forensics/x86.py \n      Description:\n        This functions allows an investigator to find all available pages within        a particular address space.  Thanks Brendan Dolan-Gavitt.\n    * New Feature: zread()\n      Files:\n        forensics/x86.py\n\tforensics/addrspace.py\n\tforensics/win32/crash_addrspace.py\n      Description:\n        Added the ability to continuing reading even if pages are unavailable.\n\tInvalid pages are replaced with zeros. Thanks Brendan Dolan-Gavitt.\n\n07.31.2007    Volatility-1.1.1    awalters\n\n    * Virtual Address Descriptor modules: vadinfo, vaddump, vadwalk. Based on the research of Brendan Dolan-Gavitt to be presented at DFRWS 2007\n    * Constraint based linear scanning framework. New modules include psscan, thrdscan, sockscan, connscan. Inspired by the work of Andreas Schuster.\n    * Completely open source. No third-party closed source dependencies.\n    * Auto-identification speed enhancements\n    * Bug fixes in network and socket modules\n    * Removed symbol dependencies\n    * Multiprocessor support\n\n"
        },
        {
          "name": "CREDITS.txt",
          "type": "blob",
          "size": 3.8359375,
          "content": "===============================================\nWe would like to acknowledge individuals that \nhave made significant contributions, code, or \nideas toward the respective volatility releases. \n\nAll lists are alphabetical. \n\nThese lists exclude the core Volatility authors, \nwho are identified in AUTHORS.txt. \n\nIf you believe you've been left off, it is not \nintentional. Please bring it to our attention!\n===============================================\n\nVolatility 2.6:\n\njie-lin for fixing a pyinstaller NameError issue \ngcmoreira for fixing a recursive property issue in Linux plugins\nAdam Bridge for updating the EditBox plugin \njie-lin for preventing a backtrace in the MBR parser plugin\nhaco20292 for fixing a bug in linux_dmesg \nwilliamshowalter for updating mac_get_profile and convert.py for El Capitan support \nrobbyFux for fixing a bug in the svcscan plugin \nf-s-p for adding unified output to the threads plugin \nBinary_Raider for adding the powershell empire plugins\nozylol for updating create_all_profiles.py for Mac 10.11 \nJamesHabben for adjusting sqlite inserts to allow for more columns to exist in table\n\nVolatility 2.5: \n\nAdam Bridge for adding a --count option (humanly readable byte stats) to imagecopy/raw2dmp\nSebastien Bourdon-Richard for various patches and bug fixes\nBruno Constanzo for various patches to enhance performance/optimization \nGlenn P. Edwards, Jr for adding combined user/kernel scans, --case, and ascii/unicode options to yarascan\n@f-s-p for converting some plugins to unfied output format\nCem Gurkok for submitting the mac_threads plugin\nTakahiro Haruyama for noticing and fixing a bug in impscan\n@masdif for contributing a fix for kernel 3.7+ in linux/module.c\nWyatt Roersma for converting a large number of plugins to the unified output format\nKarl Vogel for pointing out an issue with IPv4 addresses on big endian systems\n\nVolatility 2.4:\n\nSteven Adair for assistance identifying a large memory PAE bug\nSebastien Bourdon-Richard for his work on the VMware vmem/vmss split (with meta) AS \nJustin Capella and Espen Olsen for their work on the Qemu ELF core dumps\nCem Gurkok for help updating Mac OS X support for 10.9\nMatt McCormack for supplying a patch to rebase dumped PE files\nStewart McIntyre for extending apihooks for detecting JMP FAR instructions\nKevin Marker for contributing over 160 standard build Linux profiles \nsynack33 for creating various Mac OS X profiles, including initial ones for 10.10\nRaphaël Vinot for his patch to fix IPython within volshell\n\nVolatility 2.3:\n\nCem Gurkok for his work on the privileges plugin for Windows\nNir Izraeli for his work on the VMware snapshot address space (see also the vmsnparser project)\n@osxmem of the volafox project (Mac OS X & BSD Memory Analysis Toolkit)\n@osxreverser of reverse.put.as for his help with OSX memory analysis\nCarl Pulley for numerous bug reports, example patches, and plugin testing\nAndreas Schuster for his work on poison ivy plugins for Windows\nJoe Sylve for his work on the ARM address space and significant contributions to linux and mac capabilities\nPhilippe Teuwen for his work on the virtual box address space\nSantiago Vicente for his work on the citadel plugins for Windows\n\nVolatility 2.2:\n------------\n\nJoe Sylve\n\nVolatility 2.1:\n------------\n\n--- \n\nVolatility 2.0:\n------------\n\nFrank Boldewin \nCarl Pulley\nAndreas Schuster\nBradley Schatz\n\nVolatility 1.3:\n------------\n\nHarlan Carvey\nMichael Cohen\nDavid Collett\nBrendan Dolan-Gavitt \nAndreas Schuster\nMatthieu Suiche\n\nWe would also like to acknowledge those who have provided valuable\nfeedback, bug reports, and testing:\n\nJide Abu\nJoseph Ayo Akinyele\nTommaso Assandri\nRichard Austin\nCameron C Caffee\nEoghan Casey\nAngelo Cavallini\nAndre' DiMino\nJon Evans\nRobert Guess\nChristian Herndler\njeremie0\nJamie Levy\nEugene Libster\nErik Ligda\nRobert Lowe\nTony Martin\nTimothy Morgan\nBryan D. Payne\nGolden G. Richard III\nWyatt Roersma\nRB\nSam F. Stover\nMarko Thure\n"
        },
        {
          "name": "LEGAL.txt",
          "type": "blob",
          "size": 0.681640625,
          "content": "Volatility\n===============\n\nLicense\n-------\n\nCopyright (C) 2007-2013 Volatility Foundation\n\nVolatility is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nVolatility is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Volatility.  If not, see <http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 14.7724609375,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.33984375,
          "content": "include *.txt\ninclude *.win\ninclude MANIFEST.in\ninclude setup.py\ninclude resources/*\ninclude pyinstaller/*.py\ninclude volatility/*.py\ninclude contrib/plugins/*.py\ninclude contrib/plugins/aspaces/*.py\ninclude tools/*.py\ninclude tools/linux/*\ninclude tools/linux/pmem/*\ninclude tools/mac/*.py\ninclude vol.py\ninclude Makefile\ninclude pyinstaller.spec\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.173828125,
          "content": "all: build\n\nbuild:\n\tpython setup.py build\n\ninstall:\n\tpython setup.py install\n\ndist:\n\tpython setup.py sdist\n\nclean:\n\trm -f `find . -name \"*.pyc\" -o -name \"*~\"`\n\trm -rf dist build\n"
        },
        {
          "name": "PKG-INFO",
          "type": "blob",
          "size": 0.248046875,
          "content": "Metadata-Version: 1.0\nName: Volatility\nVersion: GC1\nSummary: Volatility -- Volatile memory framwork\nHome-page: http://www.volatilityfoundation.org\nAuthor: AAron Walters\nAuthor-email: awalters@4tphi.net\nLicense: GPL\nDescription: UNKNOWN\nPlatform: UNKNOWN\n"
        },
        {
          "name": "README.txt",
          "type": "blob",
          "size": 31.2900390625,
          "content": "============================================================================\nVolatility Framework - Volatile memory extraction utility framework\n============================================================================\n\nThe Volatility Framework is a completely open collection of tools,\nimplemented in Python under the GNU General Public License, for the\nextraction of digital artifacts from volatile memory (RAM) samples.\nThe extraction techniques are performed completely independent of the\nsystem being investigated but offer visibilty into the runtime state\nof the system. The framework is intended to introduce people to the\ntechniques and complexities associated with extracting digital artifacts\nfrom volatile memory samples and provide a platform for further work into\nthis exciting area of research.\n\nThe Volatility distribution is available from: \nhttp://www.volatilityfoundation.org/#!releases/component_71401\n\nVolatility should run on any platform that supports \nPython (http://www.python.org)\n\nVolatility supports investigations of the following memory images:\n\nWindows:\n* 32-bit Windows XP Service Pack 2 and 3\n* 32-bit Windows 2003 Server Service Pack 0, 1, 2\n* 32-bit Windows Vista Service Pack 0, 1, 2\n* 32-bit Windows 2008 Server Service Pack 1, 2 (there is no SP0)\n* 32-bit Windows 7 Service Pack 0, 1\n* 32-bit Windows 8, 8.1, and 8.1 Update 1\n* 32-bit Windows 10 (initial support)\n* 64-bit Windows XP Service Pack 1 and 2 (there is no SP0)\n* 64-bit Windows 2003 Server Service Pack 1 and 2 (there is no SP0)\n* 64-bit Windows Vista Service Pack 0, 1, 2\n* 64-bit Windows 2008 Server Service Pack 1 and 2 (there is no SP0)\n* 64-bit Windows 2008 R2 Server Service Pack 0 and 1\n* 64-bit Windows 7 Service Pack 0 and 1\n* 64-bit Windows 8, 8.1, and 8.1 Update 1\n* 64-bit Windows Server 2012 and 2012 R2 \n* 64-bit Windows 10 (including at least 10.0.19041)\n* 64-bit Windows Server 2016 (including at least 10.0.19041)\n\nNote: Please see the guidelines at the following link for notes on \ncompatibility with recently patched Windows 7 (or later) memory samples:\n\n    https://github.com/volatilityfoundation/volatility/wiki/2.6-Win-Profiles\n\nLinux: \n* 32-bit Linux kernels 2.6.11 to 5.5\n* 64-bit Linux kernels 2.6.11 to 5.5\n* OpenSuSE, Ubuntu, Debian, CentOS, Fedora, Mandriva, etc\n\nMac OSX:\n* 32-bit 10.5.x Leopard (the only 64-bit 10.5 is Server, which isn't supported)\n* 32-bit 10.6.x Snow Leopard\n* 64-bit 10.6.x Snow Leopard\n* 32-bit 10.7.x Lion\n* 64-bit 10.7.x Lion\n* 64-bit 10.8.x Mountain Lion (there is no 32-bit version)\n* 64-bit 10.9.x Mavericks (there is no 32-bit version)\n* 64-bit 10.10.x Yosemite (there is no 32-bit version)\n* 64-bit 10.11.x El Capitan (there is no 32-bit version)\n* 64-bit 10.12.x Sierra (there is no 32-bit version)\n* 64-bit 10.13.x High Sierra (there is no 32-bit version))\n* 64-bit 10.14.x Mojave (there is no 32-bit version)\n* 64-bit 10.15.x Catalina (there is no 32-bit version)\n\nVolatility does not provide memory sample acquisition\ncapabilities. For acquisition, there are both free and commercial\nsolutions available. If you would like suggestions about suitable \nacquisition solutions, please contact us at:\n\nvolatility (at) volatilityfoundation (dot) org\n\nVolatility supports a variety of sample file formats and the\nability to convert between these formats:\n\n  - Raw linear sample (dd)\n  - Hibernation file (from Windows 7 and earlier)\n  - Crash dump file\n  - VirtualBox ELF64 core dump\n  - VMware saved state and snapshot files\n  - EWF format (E01) \n  - LiME format\n  - Mach-O file format\n  - QEMU virtual machine dumps\n  - Firewire \n  - HPAK (FDPro)\n\nFor a more detailed list of capabilities, see the following:\n\n    https://github.com/volatilityfoundation/volatility/wiki\n    \nAlso see the community plugins repository:\n\n    https://github.com/volatilityfoundation/community\n\nExample Data\n============\n\nIf you want to give Volatility a try, you can download exemplar\nmemory images from the following url:\n\n    https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples\n\nMailing Lists\n=============\n\nMailing lists to support the users and developers of Volatility\ncan be found at the following address:\n\n    http://lists.volatilesystems.com/mailman/listinfo\n\nContact\n=======\nFor information or requests, contact:\n\nVolatility Foundation\n\nWeb: http://www.volatilityfoundation.org\n     http://volatility-labs.blogspot.com\n     http://volatility.tumblr.com\n     \nEmail: volatility (at) volatilityfoundation (dot) org\n\nIRC: #volatility on freenode\n\nTwitter: @volatility \n\nRequirements\n============\n- Python 2.6 or later, but not 3.0. http://www.python.org\n\nSome plugins may have other requirements which can be found at: \n    https://github.com/volatilityfoundation/volatility/wiki/Installation\n\nQuick Start\n===========\n1. Unpack the latest version of Volatility from\n    volatilityfoundation.org\n   \n2. To see available options, run \"python vol.py -h\" or \"python vol.py --info\"\n\n   Example:\n\n$ python vol.py --info\nVolatility Foundation Volatility Framework 2.6\n\nAddress Spaces\n--------------\nAMD64PagedMemory              - Standard AMD 64-bit address space.\nArmAddressSpace               - Address space for ARM processors\nFileAddressSpace              - This is a direct file AS.\nHPAKAddressSpace              - This AS supports the HPAK format\nIA32PagedMemory               - Standard IA-32 paging address space.\nIA32PagedMemoryPae            - This class implements the IA-32 PAE paging address space. It is responsible\nLimeAddressSpace              - Address space for Lime\nLinuxAMD64PagedMemory         - Linux-specific AMD 64-bit address space.\nMachOAddressSpace             - Address space for mach-o files to support atc-ny memory reader\nOSXPmemELF                    - This AS supports VirtualBox ELF64 coredump format\nQemuCoreDumpElf               - This AS supports Qemu ELF32 and ELF64 coredump format\nVMWareAddressSpace            - This AS supports VMware snapshot (VMSS) and saved state (VMSS) files\nVMWareMetaAddressSpace        - This AS supports the VMEM format with VMSN/VMSS metadata\nVirtualBoxCoreDumpElf64       - This AS supports VirtualBox ELF64 coredump format\nWin10AMD64PagedMemory         - Windows 10-specific AMD 64-bit address space.\nWindowsAMD64PagedMemory       - Windows-specific AMD 64-bit address space.\nWindowsCrashDumpSpace32       - This AS supports windows Crash Dump format\nWindowsCrashDumpSpace64       - This AS supports windows Crash Dump format\nWindowsCrashDumpSpace64BitMap - This AS supports Windows BitMap Crash Dump format\nWindowsHiberFileSpace32       - This is a hibernate address space for windows hibernation files.\n\nProfiles\n--------\nVistaSP0x64           - A Profile for Windows Vista SP0 x64\nVistaSP0x86           - A Profile for Windows Vista SP0 x86\nVistaSP1x64           - A Profile for Windows Vista SP1 x64\nVistaSP1x86           - A Profile for Windows Vista SP1 x86\nVistaSP2x64           - A Profile for Windows Vista SP2 x64\nVistaSP2x86           - A Profile for Windows Vista SP2 x86\nWin10x64              - A Profile for Windows 10 x64\nWin10x64_10586        - A Profile for Windows 10 x64 (10.0.10586.306 / 2016-04-23)\nWin10x64_14393        - A Profile for Windows 10 x64 (10.0.14393.0 / 2016-07-16)\nWin10x86              - A Profile for Windows 10 x86\nWin10x86_10586        - A Profile for Windows 10 x86 (10.0.10586.420 / 2016-05-28)\nWin10x86_14393        - A Profile for Windows 10 x86 (10.0.14393.0 / 2016-07-16)\nWin2003SP0x86         - A Profile for Windows 2003 SP0 x86\nWin2003SP1x64         - A Profile for Windows 2003 SP1 x64\nWin2003SP1x86         - A Profile for Windows 2003 SP1 x86\nWin2003SP2x64         - A Profile for Windows 2003 SP2 x64\nWin2003SP2x86         - A Profile for Windows 2003 SP2 x86\nWin2008R2SP0x64       - A Profile for Windows 2008 R2 SP0 x64\nWin2008R2SP1x64       - A Profile for Windows 2008 R2 SP1 x64\nWin2008R2SP1x64_23418 - A Profile for Windows 2008 R2 SP1 x64 (6.1.7601.23418 / 2016-04-09)\nWin2008SP1x64         - A Profile for Windows 2008 SP1 x64\nWin2008SP1x86         - A Profile for Windows 2008 SP1 x86\nWin2008SP2x64         - A Profile for Windows 2008 SP2 x64\nWin2008SP2x86         - A Profile for Windows 2008 SP2 x86\nWin2012R2x64          - A Profile for Windows Server 2012 R2 x64\nWin2012R2x64_18340    - A Profile for Windows Server 2012 R2 x64 (6.3.9600.18340 / 2016-05-13)\nWin2012x64            - A Profile for Windows Server 2012 x64\nWin2016x64_14393      - A Profile for Windows Server 2016 x64 (10.0.14393.0 / 2016-07-16)\nWin7SP0x64            - A Profile for Windows 7 SP0 x64\nWin7SP0x86            - A Profile for Windows 7 SP0 x86\nWin7SP1x64            - A Profile for Windows 7 SP1 x64\nWin7SP1x64_23418      - A Profile for Windows 7 SP1 x64 (6.1.7601.23418 / 2016-04-09)\nWin7SP1x86            - A Profile for Windows 7 SP1 x86\nWin7SP1x86_23418      - A Profile for Windows 7 SP1 x86 (6.1.7601.23418 / 2016-04-09)\nWin81U1x64            - A Profile for Windows 8.1 Update 1 x64\nWin81U1x86            - A Profile for Windows 8.1 Update 1 x86\nWin8SP0x64            - A Profile for Windows 8 x64\nWin8SP0x86            - A Profile for Windows 8 x86\nWin8SP1x64            - A Profile for Windows 8.1 x64\nWin8SP1x64_18340      - A Profile for Windows 8.1 x64 (6.3.9600.18340 / 2016-05-13)\nWin8SP1x86            - A Profile for Windows 8.1 x86\nWinXPSP1x64           - A Profile for Windows XP SP1 x64\nWinXPSP2x64           - A Profile for Windows XP SP2 x64\nWinXPSP2x86           - A Profile for Windows XP SP2 x86\nWinXPSP3x86           - A Profile for Windows XP SP3 x86\n\nPlugins\n-------\namcache                    - Print AmCache information\napihooks                   - Detect API hooks in process and kernel memory\natoms                      - Print session and window station atom tables\natomscan                   - Pool scanner for atom tables\nauditpol                   - Prints out the Audit Policies from HKLM\\SECURITY\\Policy\\PolAdtEv\nbigpools                   - Dump the big page pools using BigPagePoolScanner\nbioskbd                    - Reads the keyboard buffer from Real Mode memory\ncachedump                  - Dumps cached domain hashes from memory\ncallbacks                  - Print system-wide notification routines\nclipboard                  - Extract the contents of the windows clipboard\ncmdline                    - Display process command-line arguments\ncmdscan                    - Extract command history by scanning for _COMMAND_HISTORY\nconnections                - Print list of open connections [Windows XP and 2003 Only]\nconnscan                   - Pool scanner for tcp connections\nconsoles                   - Extract command history by scanning for _CONSOLE_INFORMATION\ncrashinfo                  - Dump crash-dump information\ndeskscan                   - Poolscaner for tagDESKTOP (desktops)\ndevicetree                 - Show device tree\ndlldump                    - Dump DLLs from a process address space\ndlllist                    - Print list of loaded dlls for each process\ndriverirp                  - Driver IRP hook detection\ndrivermodule               - Associate driver objects to kernel modules\ndriverscan                 - Pool scanner for driver objects\ndumpcerts                  - Dump RSA private and public SSL keys\ndumpfiles                  - Extract memory mapped and cached files\ndumpregistry               - Dumps registry files out to disk\neditbox                    - Displays information about Edit controls. (Listbox experimental.)\nenvars                     - Display process environment variables\neventhooks                 - Print details on windows event hooks\nevtlogs                    - Extract Windows Event Logs (XP/2003 only)\nfilescan                   - Pool scanner for file objects\ngahti                      - Dump the USER handle type information\ngditimers                  - Print installed GDI timers and callbacks\ngdt                        - Display Global Descriptor Table\ngetservicesids             - Get the names of services in the Registry and return Calculated SID\ngetsids                    - Print the SIDs owning each process\nhandles                    - Print list of open handles for each process\nhashdump                   - Dumps passwords hashes (LM/NTLM) from memory\nhibinfo                    - Dump hibernation file information\nhivedump                   - Prints out a hive\nhivelist                   - Print list of registry hives.\nhivescan                   - Pool scanner for registry hives\nhpakextract                - Extract physical memory from an HPAK file\nhpakinfo                   - Info on an HPAK file\nidt                        - Display Interrupt Descriptor Table\niehistory                  - Reconstruct Internet Explorer cache / history\nimagecopy                  - Copies a physical address space out as a raw DD image\nimageinfo                  - Identify information for the image\nimpscan                    - Scan for calls to imported functions\njoblinks                   - Print process job link information\nkdbgscan                   - Search for and dump potential KDBG values\nkpcrscan                   - Search for and dump potential KPCR values\nldrmodules                 - Detect unlinked DLLs\nlimeinfo                   - Dump Lime file format information\nlinux_apihooks             - Checks for userland apihooks\nlinux_arp                  - Print the ARP table\nlinux_aslr_shift           - Automatically detect the Linux ASLR shift\nlinux_banner               - Prints the Linux banner information\nlinux_bash                 - Recover bash history from bash process memory\nlinux_bash_env             - Recover a process' dynamic environment variables\nlinux_bash_hash            - Recover bash hash table from bash process memory\nlinux_check_afinfo         - Verifies the operation function pointers of network protocols\nlinux_check_creds          - Checks if any processes are sharing credential structures\nlinux_check_evt_arm        - Checks the Exception Vector Table to look for syscall table hooking\nlinux_check_fop            - Check file operation structures for rootkit modifications\nlinux_check_idt            - Checks if the IDT has been altered\nlinux_check_inline_kernel  - Check for inline kernel hooks\nlinux_check_modules        - Compares module list to sysfs info, if available\nlinux_check_syscall        - Checks if the system call table has been altered\nlinux_check_syscall_arm    - Checks if the system call table has been altered\nlinux_check_tty            - Checks tty devices for hooks\nlinux_cpuinfo              - Prints info about each active processor\nlinux_dentry_cache         - Gather files from the dentry cache\nlinux_dmesg                - Gather dmesg buffer\nlinux_dump_map             - Writes selected memory mappings to disk\nlinux_dynamic_env          - Recover a process' dynamic environment variables\nlinux_elfs                 - Find ELF binaries in process mappings\nlinux_enumerate_files      - Lists files referenced by the filesystem cache\nlinux_find_file            - Lists and recovers files from memory\nlinux_getcwd               - Lists current working directory of each process\nlinux_hidden_modules       - Carves memory to find hidden kernel modules\nlinux_ifconfig             - Gathers active interfaces\nlinux_info_regs            - It's like 'info registers' in GDB. It prints out all the\nlinux_iomem                - Provides output similar to /proc/iomem\nlinux_kernel_opened_files  - Lists files that are opened from within the kernel\nlinux_keyboard_notifiers   - Parses the keyboard notifier call chain\nlinux_ldrmodules           - Compares the output of proc maps with the list of libraries from libdl\nlinux_library_list         - Lists libraries loaded into a process\nlinux_librarydump          - Dumps shared libraries in process memory to disk\nlinux_list_raw             - List applications with promiscuous sockets\nlinux_lsmod                - Gather loaded kernel modules\nlinux_lsof                 - Lists file descriptors and their path\nlinux_malfind              - Looks for suspicious process mappings\nlinux_memmap               - Dumps the memory map for linux tasks\nlinux_moddump              - Extract loaded kernel modules\nlinux_mount                - Gather mounted fs/devices\nlinux_mount_cache          - Gather mounted fs/devices from kmem_cache\nlinux_netfilter            - Lists Netfilter hooks\nlinux_netscan              - Carves for network connection structures\nlinux_netstat              - Lists open sockets\nlinux_pidhashtable         - Enumerates processes through the PID hash table\nlinux_pkt_queues           - Writes per-process packet queues out to disk\nlinux_plthook              - Scan ELF binaries' PLT for hooks to non-NEEDED images\nlinux_proc_maps            - Gathers process memory maps\nlinux_proc_maps_rb         - Gathers process maps for linux through the mappings red-black tree\nlinux_procdump             - Dumps a process's executable image to disk\nlinux_process_hollow       - Checks for signs of process hollowing\nlinux_psaux                - Gathers processes along with full command line and start time\nlinux_psenv                - Gathers processes along with their static environment variables\nlinux_pslist               - Gather active tasks by walking the task_struct->task list\nlinux_pslist_cache         - Gather tasks from the kmem_cache\nlinux_psscan               - Scan physical memory for processes\nlinux_pstree               - Shows the parent/child relationship between processes\nlinux_psxview              - Find hidden processes with various process listings\nlinux_recover_filesystem   - Recovers the entire cached file system from memory\nlinux_route_cache          - Recovers the routing cache from memory\nlinux_sk_buff_cache        - Recovers packets from the sk_buff kmem_cache\nlinux_slabinfo             - Mimics /proc/slabinfo on a running machine\nlinux_strings              - Match physical offsets to virtual addresses (may take a while, VERY verbose)\nlinux_threads              - Prints threads of processes\nlinux_tmpfs                - Recovers tmpfs filesystems from memory\nlinux_truecrypt_passphrase - Recovers cached Truecrypt passphrases\nlinux_vma_cache            - Gather VMAs from the vm_area_struct cache\nlinux_volshell             - Shell in the memory image\nlinux_yarascan             - A shell in the Linux memory image\nlsadump                    - Dump (decrypted) LSA secrets from the registry\nmac_adium                  - Lists Adium messages\nmac_apihooks               - Checks for API hooks in processes\nmac_apihooks_kernel        - Checks to see if system call and kernel functions are hooked\nmac_arp                    - Prints the arp table\nmac_bash                   - Recover bash history from bash process memory\nmac_bash_env               - Recover bash's environment variables\nmac_bash_hash              - Recover bash hash table from bash process memory\nmac_calendar               - Gets calendar events from Calendar.app\nmac_check_fop              - Validate File Operation Pointers\nmac_check_mig_table        - Lists entires in the kernel's MIG table\nmac_check_syscall_shadow   - Looks for shadow system call tables\nmac_check_syscalls         - Checks to see if system call table entries are hooked\nmac_check_sysctl           - Checks for unknown sysctl handlers\nmac_check_trap_table       - Checks to see if mach trap table entries are hooked\nmac_compressed_swap        - Prints Mac OS X VM compressor stats and dumps all compressed pages\nmac_contacts               - Gets contact names from Contacts.app\nmac_dead_procs             - Prints terminated/de-allocated processes\nmac_dead_sockets           - Prints terminated/de-allocated network sockets\nmac_dead_vnodes            - Lists freed vnode structures\nmac_devfs                  - Lists files in the file cache\nmac_dmesg                  - Prints the kernel debug buffer\nmac_dump_file              - Dumps a specified file\nmac_dump_maps              - Dumps memory ranges of process(es), optionally including pages in compressed swap\nmac_dyld_maps              - Gets memory maps of processes from dyld data structures\nmac_find_aslr_shift        - Find the ASLR shift value for 10.8+ images\nmac_get_profile            - Automatically detect Mac profiles\nmac_ifconfig               - Lists network interface information for all devices\nmac_interest_handlers      - Lists IOKit Interest Handlers\nmac_ip_filters             - Reports any hooked IP filters\nmac_kernel_classes         - Lists loaded c++ classes in the kernel\nmac_kevents                - Show parent/child relationship of processes\nmac_keychaindump           - Recovers possbile keychain keys. Use chainbreaker to open related keychain files\nmac_ldrmodules             - Compares the output of proc maps with the list of libraries from libdl\nmac_librarydump            - Dumps the executable of a process\nmac_list_files             - Lists files in the file cache\nmac_list_kauth_listeners   - Lists Kauth Scope listeners\nmac_list_kauth_scopes      - Lists Kauth Scopes and their status\nmac_list_raw               - List applications with promiscuous sockets\nmac_list_sessions          - Enumerates sessions\nmac_list_zones             - Prints active zones\nmac_lsmod                  - Lists loaded kernel modules\nmac_lsmod_iokit            - Lists loaded kernel modules through IOkit\nmac_lsmod_kext_map         - Lists loaded kernel modules\nmac_lsof                   - Lists per-process opened files\nmac_machine_info           - Prints machine information about the sample\nmac_malfind                - Looks for suspicious process mappings\nmac_memdump                - Dump addressable memory pages to a file\nmac_moddump                - Writes the specified kernel extension to disk\nmac_mount                  - Prints mounted device information\nmac_netstat                - Lists active per-process network connections\nmac_network_conns          - Lists network connections from kernel network structures\nmac_notesapp               - Finds contents of Notes messages\nmac_notifiers              - Detects rootkits that add hooks into I/O Kit (e.g. LogKext)\nmac_orphan_threads         - Lists threads that don't map back to known modules/processes\nmac_pgrp_hash_table        - Walks the process group hash table\nmac_pid_hash_table         - Walks the pid hash table\nmac_print_boot_cmdline     - Prints kernel boot arguments\nmac_proc_maps              - Gets memory maps of processes\nmac_procdump               - Dumps the executable of a process\nmac_psaux                  - Prints processes with arguments in user land (**argv)\nmac_psenv                  - Prints processes with environment in user land (**envp)\nmac_pslist                 - List Running Processes\nmac_pstree                 - Show parent/child relationship of processes\nmac_psxview                - Find hidden processes with various process listings\nmac_recover_filesystem     - Recover the cached filesystem\nmac_route                  - Prints the routing table\nmac_socket_filters         - Reports socket filters\nmac_strings                - Match physical offsets to virtual addresses (may take a while, VERY verbose)\nmac_tasks                  - List Active Tasks\nmac_threads                - List Process Threads\nmac_threads_simple         - Lists threads along with their start time and priority\nmac_timers                 - Reports timers set by kernel drivers\nmac_trustedbsd             - Lists malicious trustedbsd policies\nmac_version                - Prints the Mac version\nmac_vfsevents              - Lists processes filtering file system events\nmac_volshell               - Shell in the memory image\nmac_yarascan               - Scan memory for yara signatures\nmachoinfo                  - Dump Mach-O file format information\nmalfind                    - Find hidden and injected code\nmbrparser                  - Scans for and parses potential Master Boot Records (MBRs)\nmemdump                    - Dump the addressable memory for a process\nmemmap                     - Print the memory map\nmessagehooks               - List desktop and thread window message hooks\nmftparser                  - Scans for and parses potential MFT entries\nmoddump                    - Dump a kernel driver to an executable file sample\nmodscan                    - Pool scanner for kernel modules\nmodules                    - Print list of loaded modules\nmultiscan                  - Scan for various objects at once\nmutantscan                 - Pool scanner for mutex objects\nnetscan                    - Scan a Vista (or later) image for connections and sockets\nnotepad                    - List currently displayed notepad text\nobjtypescan                - Scan for Windows object type objects\npatcher                    - Patches memory based on page scans\npoolpeek                   - Configurable pool scanner plugin\npooltracker                - Show a summary of pool tag usage\nprintkey                   - Print a registry key, and its subkeys and values\nprivs                      - Display process privileges\nprocdump                   - Dump a process to an executable file sample\npslist                     - Print all running processes by following the EPROCESS lists\npsscan                     - Pool scanner for process objects\npstree                     - Print process list as a tree\npsxview                    - Find hidden processes with various process listings\nqemuinfo                   - Dump Qemu information\nraw2dmp                    - Converts a physical memory sample to a windbg crash dump\nscreenshot                 - Save a pseudo-screenshot based on GDI windows\nservicediff                - List Windows services (ala Plugx)\nsessions                   - List details on _MM_SESSION_SPACE (user logon sessions)\nshellbags                  - Prints ShellBags info\nshimcache                  - Parses the Application Compatibility Shim Cache registry key\nshutdowntime               - Print ShutdownTime of machine from registry\nsockets                    - Print list of open sockets\nsockscan                   - Pool scanner for tcp socket objects\nssdt                       - Display SSDT entries\nstrings                    - Match physical offsets to virtual addresses (may take a while, VERY verbose)\nsvcscan                    - Scan for Windows services\nsymlinkscan                - Pool scanner for symlink objects\nthrdscan                   - Pool scanner for thread objects\nthreads                    - Investigate _ETHREAD and _KTHREADs\ntimeliner                  - Creates a timeline from various artifacts in memory\ntimers                     - Print kernel timers and associated module DPCs\ntruecryptmaster            - Recover TrueCrypt 7.1a Master Keys\ntruecryptpassphrase        - TrueCrypt Cached Passphrase Finder\ntruecryptsummary           - TrueCrypt Summary\nunloadedmodules            - Print list of unloaded modules\nuserassist                 - Print userassist registry keys and information\nuserhandles                - Dump the USER handle tables\nvaddump                    - Dumps out the vad sections to a file\nvadinfo                    - Dump the VAD info\nvadtree                    - Walk the VAD tree and display in tree format\nvadwalk                    - Walk the VAD tree\nvboxinfo                   - Dump virtualbox information\nverinfo                    - Prints out the version information from PE images\nvmwareinfo                 - Dump VMware VMSS/VMSN information\nvolshell                   - Shell in the memory image\nwin10cookie                - Find the ObHeaderCookie value for Windows 10\nwindows                    - Print Desktop Windows (verbose details)\nwintree                    - Print Z-Order Desktop Windows Tree\nwndscan                    - Pool scanner for window stations\nyarascan                   - Scan process or kernel memory with Yara signatures\n\n3. To get more information on a Windows memory sample and to make sure Volatility\n   supports that sample type, run 'python vol.py imageinfo -f <imagename>' or 'python vol.py kdbgscan -f <imagename>'\n\n   Example:\n   \n    $ python vol.py imageinfo -f WIN-II7VOJTUNGL-20120324-193051.raw \n    Volatility Foundation Volatility Framework 2.6\n    Determining profile based on KDBG search...\n    \n              Suggested Profile(s) : Win2008R2SP0x64, Win7SP1x64, Win7SP0x64, Win2008R2SP1x64 (Instantiated with Win7SP0x64)\n                         AS Layer1 : AMD64PagedMemory (Kernel AS)\n                         AS Layer2 : FileAddressSpace (/Path/to/WIN-II7VOJTUNGL-20120324-193051.raw)\n                          PAE type : PAE\n                               DTB : 0x187000L\n                              KDBG : 0xf800016460a0\n              Number of Processors : 1\n         Image Type (Service Pack) : 1\n                    KPCR for CPU 0 : 0xfffff80001647d00L\n                 KUSER_SHARED_DATA : 0xfffff78000000000L\n               Image date and time : 2012-03-24 19:30:53 UTC+0000\n         Image local date and time : 2012-03-25 03:30:53 +0800\n\n   If multiple profiles are suggested by imageinfo or kdbgscan, or if you're having trouble analyzing \n   Windows 7 or later memory samples, please see the guidelines here:\n\n        https://github.com/volatilityfoundation/volatility/wiki/2.6-Win-Profiles\n\n4. Run some other plugins. -f is a required option for all plugins. Some\n   also require/accept other options. Run \"python vol.py <plugin> -h\" for\n   more information on a particular command.  A Command Reference wiki\n   is also available on the GitHub site:\n\n        https://github.com/volatilityfoundation/volatility/wiki\n\n   as well as Basic Usage:\n\n        https://github.com/volatilityfoundation/volatility/wiki/Volatility-Usage\n\nLicensing and Copyright\n=======================\n\nCopyright (C) 2007-2016 Volatility Foundation\n\nAll Rights Reserved\n\nVolatility is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nVolatility is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Volatility.  If not, see <http://www.gnu.org/licenses/>.\n\nBugs and Support\n================\nThere is no support provided with Volatility. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE. \n\nIf you think you've found a bug, please report it at:\n\n    https://github.com/volatilityfoundation/volatility/issues\n\nIn order to help us solve your issues as quickly as possible,\nplease include the following information when filing a bug:\n\n* The version of volatility you're using\n* The operating system used to run volatility\n* The version of python used to run volatility\n* The suspected operating system of the memory image\n* The complete command line you used to run volatility\n\nDepending on the operating system of the memory image, you may need to provide\nadditional information, such as:\n\nFor Windows:\n* The suspected Service Pack of the memory image\n\nFor Linux:\n* The suspected kernel version of the memory image\n\nOther options for communication can be found at:\n    https://github.com/volatilityfoundation/volatility/wiki\n\nMissing or Truncated Information\n================================\nVolatility Foundation makes no claims about the validity or correctness of the\noutput of Volatility. Many factors may contribute to the\nincorrectness of output from Volatility including, but not\nlimited to, malicious modifications to the operating system,\nincomplete information due to swapping, and information corruption on\nimage acquisition. \n\nCommand Reference \n====================\nThe following url contains a reference of all commands supported by \nVolatility.\n\n    https://github.com/volatilityfoundation/volatility/wiki\n\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyinstaller.spec",
          "type": "blob",
          "size": 0.9833984375,
          "content": "# -*- mode: python -*-\nimport sys\n\nprojpath = os.path.dirname(os.path.abspath(SPEC))\n\ndef get_plugins(list):\n    for item in list:\n        if item[0].startswith('volatility.plugins') and not (item[0] == 'volatility.plugins' and '__init__.py' in item[1]):\n            yield item\n\nexeext = \".exe\" if sys.platform.startswith(\"win\") else \"\"\n\na = Analysis([os.path.join(projpath, 'vol.py')],\n              pathex = [HOMEPATH],\n              hookspath = [os.path.join(projpath, 'pyinstaller')])\npyz = PYZ(a.pure)\nplugins = Tree(os.path.join(projpath, 'volatility', 'plugins'),\n               os.path.join('plugins'))\nexe = EXE(pyz,\n          a.scripts + [('u', '', 'OPTION')],\n          a.binaries,\n          a.zipfiles,\n          a.datas,\n          plugins,\n          name = os.path.join(projpath, 'dist', 'pyinstaller', 'volatility' + exeext),\n          debug = False,\n          strip = False,\n          upx = True,\n          icon = os.path.join(projpath, 'resources', 'volatility.ico'),\n          console = 1)\n"
        },
        {
          "name": "pyinstaller",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.521484375,
          "content": "#!/usr/bin/env python\n\n# Volatility\n# \n# Authors:\n# AAron Walters <awalters@4tphi.net>\n# Mike Auty <mike.auty@gmail.com>\n#\n# This file is part of Volatility.\n#\n# Volatility is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Volatility is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Volatility.  If not, see <http://www.gnu.org/licenses/>.\n#\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\nimport volatility.constants\nimport sys\nimport os\n\npy2exe_available = True\ntry:\n    import py2exe #pylint: disable-msg=W0611,F0401\nexcept ImportError:\n    py2exe_available = False\n\ndef find_files(topdirs, py = False):\n    \"\"\"Lists all python files under any topdir from the topdirs lists.\n    \n       Returns an appropriate list for data_files,\n       with source and destination directories the same\"\"\"\n    ret = []\n    for topdir in topdirs:\n        for r, _ds, fs in os.walk(topdir):\n            ret.append((r, [ os.path.join(r, f) for f in fs if (f.endswith('.py') or not py)]))\n    return ret\n\nopts = {}\n\nopts['name'] = \"volatility\"\nopts['version'] = volatility.constants.VERSION\nopts['description'] = \"Volatility -- Volatile memory framework\"\nopts['author'] = \"AAron Walters\"\nopts['author_email'] = \"awalters@4tphi.net\"\nopts['url'] = \"http://www.volatilityfoundation.org\"\nopts['license'] = \"GPL\"\nopts['scripts'] = [\"vol.py\"]\nopts['packages'] = [\"volatility\",\n                    \"volatility.win32\",\n                    \"volatility.renderers\",\n                    \"volatility.plugins\",\n                    \"volatility.plugins.addrspaces\",\n                    \"volatility.plugins.overlays\",\n                    \"volatility.plugins.overlays.windows\",\n                    \"volatility.plugins.overlays.linux\",\n                    \"volatility.plugins.overlays.mac\",\n                    \"volatility.plugins.gui\",\n                    \"volatility.plugins.gui.vtypes\",\n                    \"volatility.plugins.linux\",\n                    \"volatility.plugins.registry\",\n                    \"volatility.plugins.malware\", \n                    \"volatility.plugins.mac\"]\nopts['data_files'] = find_files(['contrib'], py = True) + find_files(['tools'])\n\nif py2exe_available:\n    py2exe_distdir = 'dist/py2exe'\n    opts['console'] = [{ 'script': 'vol.py',\n                         'icon_resources': [(1, 'resources/volatility.ico')]\n                      }]\n    # Optimize must be 1 for plugins that use docstring for the help value,\n    # otherwise the help gets optimized out\n    opts['options'] = {'py2exe':{'optimize': 1,\n                                 'dist_dir': py2exe_distdir,\n                                 'packages': opts['packages'] + ['socket', 'ctypes', 'Crypto.Cipher', 'urllib', 'distorm3', 'yara', 'xml.etree.ElementTree'],\n                                 # This, along with zipfile = None, ensures a single binary\n                                 'bundle_files': 1,\n                                }\n                      }\n    opts['zipfile'] = None\n\ndistrib = setup(**opts) #pylint: disable-msg=W0142\n\nif 'py2exe' in sys.argv:\n    # Any py2exe specific files or things that need doing can go in here\n    pass\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vol.py",
          "type": "blob",
          "size": 6.3642578125,
          "content": "#!/usr/bin/env python\n#  -*- mode: python; -*-\n#\n# Volatility\n# Copyright (C) 2007-2013 Volatility Foundation\n#\n# This file is part of Volatility.\n#\n# Volatility is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Volatility is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Volatility.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n\"\"\"\n@author:       AAron Walters\n@license:      GNU General Public License 2.0\n@contact:      awalters@4tphi.net\n@organization: Volatility Foundation\n\"\"\"\n\n#pylint: disable-msg=C0111\nimport sys\n\nif sys.version_info < (2, 6, 0):\n    sys.stderr.write(\"Volatility requires python version 2.6, please upgrade your python installation.\")\n    sys.exit(1)\n\ntry:\n    import psyco #pylint: disable-msg=W0611,F0401\nexcept ImportError:\n    pass\n\nif False:\n    # Include a fake import for things like pyinstaller to hit\n    # since this is a dependency of the malware plugins\n    import yara\n\nimport textwrap\nimport volatility.conf as conf\nconfig = conf.ConfObject()\nimport volatility.constants as constants\nimport volatility.registry as registry\nimport volatility.exceptions as exceptions\nimport volatility.obj as obj\nimport volatility.debug as debug\n\nimport volatility.addrspace as addrspace\nimport volatility.commands as commands\nimport volatility.scan as scan\n\nconfig.add_option(\"INFO\", default = None, action = \"store_true\",\n                  cache_invalidator = False,\n                  help = \"Print information about all registered objects\")\n\ndef list_plugins():\n    result = \"\\n\\tSupported Plugin Commands:\\n\\n\"\n    cmds = registry.get_plugin_classes(commands.Command, lower = True)\n    profs = registry.get_plugin_classes(obj.Profile)\n    if config.PROFILE == None:\n        config.update(\"PROFILE\", \"WinXPSP2x86\")\n    if config.PROFILE not in profs:\n        raise BaseException(\"Invalid profile \" + config.PROFILE + \" selected\")\n    profile = profs[config.PROFILE]()\n    wrongprofile = \"\"\n    for cmdname in sorted(cmds):\n        command = cmds[cmdname]\n        helpline = command.help() or ''\n        ## Just put the title line (First non empty line) in this\n        ## abbreviated display\n        for line in helpline.splitlines():\n            if line:\n                helpline = line\n                break\n        if command.is_valid_profile(profile):\n            result += \"\\t\\t{0:15}\\t{1}\\n\".format(cmdname, helpline)\n        else:\n            wrongprofile += \"\\t\\t{0:15}\\t{1}\\n\".format(cmdname, helpline)\n\n    if wrongprofile and config.VERBOSE:\n        result += \"\\n\\tPlugins requiring a different profile:\\n\\n\"\n        result += wrongprofile\n\n    return result\n\ndef command_help(command):\n    outputs = []\n    for item in dir(command):\n        if item.startswith(\"render_\"):\n            outputs.append(item.split(\"render_\", 1)[-1])\n    outputopts = \"\\nModule Output Options: \" + \\\n        \"{0}\\n\".format(\"{0}\".format(\"\\n\".join([\", \".join(o for o in sorted(outputs))]))) \n\n    result = textwrap.dedent(\"\"\"\n    ---------------------------------\n    Module {0}\n    ---------------------------------\\n\"\"\".format(command.__class__.__name__))\n\n    return outputopts + result + command.help() + \"\\n\\n\"\n\ndef print_info():\n    \"\"\" Returns the results \"\"\"\n    categories = {addrspace.BaseAddressSpace: 'Address Spaces',\n                  commands.Command : 'Plugins',\n                  obj.Profile: 'Profiles',\n                  scan.ScannerCheck: 'Scanner Checks'}\n    for c, n in sorted(categories.items()):\n        lower = (c == commands.Command)\n        plugins = registry.get_plugin_classes(c, lower = lower)\n        print \"\\n\"\n        print \"{0}\".format(n)\n        print \"-\" * len(n)\n\n        result = []\n        max_length = 0\n        for clsname, cls in sorted(plugins.items()):\n            try:\n                doc = cls.__doc__.strip().splitlines()[0]\n            except AttributeError:\n                doc = 'No docs'\n            result.append((clsname, doc))\n            max_length = max(len(clsname), max_length)\n\n        for (name, doc) in result:\n            print \"{0:{2}} - {1:15}\".format(name, doc, max_length)\n\ndef main():\n\n    # Get the version information on every output from the beginning\n    # Exceptionally useful for debugging/telling people what's going on\n    sys.stderr.write(\"Volatility Foundation Volatility Framework {0}\\n\".format(constants.VERSION))\n    sys.stderr.flush()\n\n    # Setup the debugging format\n    debug.setup()\n    # Load up modules in case they set config options\n    registry.PluginImporter()\n\n    ## Register all register_options for the various classes\n    registry.register_global_options(config, addrspace.BaseAddressSpace)\n    registry.register_global_options(config, commands.Command)\n\n    if config.INFO:\n        print_info()\n        sys.exit(0)\n\n    ## Parse all the options now\n    config.parse_options(False)\n    # Reset the logging level now we know whether debug is set or not\n    debug.setup(config.DEBUG)\n\n    module = None\n    ## Try to find the first thing that looks like a module name\n    cmds = registry.get_plugin_classes(commands.Command, lower = True)\n    for m in config.args:\n        if m in cmds.keys():\n            module = m\n            break\n\n    if not module:\n        config.parse_options()\n        debug.error(\"You must specify something to do (try -h)\")\n\n    try:\n        if module in cmds.keys():\n            command = cmds[module](config)\n\n            ## Register the help cb from the command itself\n            config.set_help_hook(obj.Curry(command_help, command))\n            config.parse_options()\n\n            if not config.LOCATION:\n                debug.error(\"Please specify a location (-l) or filename (-f)\")\n\n            command.execute()\n    except exceptions.VolatilityException, e:\n        print e\n\nif __name__ == \"__main__\":\n    config.set_usage(usage = \"Volatility - A memory forensics analysis platform.\")\n    config.add_help_hook(list_plugins)\n\n    try:\n        main()\n    except Exception, ex:\n        if config.DEBUG:\n            debug.post_mortem()\n        else:\n            raise\n    except KeyboardInterrupt:\n        print \"Interrupted\"\n"
        },
        {
          "name": "volatility",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}