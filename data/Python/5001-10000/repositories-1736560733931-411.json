{
  "metadata": {
    "timestamp": 1736560733931,
    "page": 411,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hugapi/hug",
      "stars": 6869,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".bumpversion.cfg",
          "type": "blob",
          "size": 0.1259765625,
          "content": "[bumpversion]\ncurrent_version = 2.6.1\n\n[bumpversion:file:.env]\n\n[bumpversion:file:setup.py]\n\n[bumpversion:file:hug/_version.py]\n\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.359375,
          "content": "[report]\ninclude = hug/*.py\nomit = hug/development_runner.py\nexclude_lines = def hug\n                def serve\n                def _start_api\n                sys.stdout.buffer.write\n                class Socket\n                pragma: no cover\n                except ImportError:\n                if MARSHMALLOW_MAJOR_VERSION is None or MARSHMALLOW_MAJOR_VERSION == 2:\n"
        },
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.193359375,
          "content": "version = 1\n\ntest_patterns = [\"tests/**\"]\n\nexclude_patterns = [\n    \"examples/**\",\n    \"benchmarks/**\"\n]\n\n[[analyzers]]\nname = \"python\"\nenabled = true\n\n  [analyzers.meta]\n  runtime_version = \"3.x.x\""
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.10546875,
          "content": "root = true\n\n[*.py]\nmax_line_length = 100\nindent_style = space\nindent_size = 4\nignore_frosted_errors = E103\n"
        },
        {
          "name": ".env",
          "type": "blob",
          "size": 3.3251953125,
          "content": "#!/bin/bash\nOPEN_PROJECT_NAME=\"hug\"\n\nif [ \"$PROJECT_NAME\" = \"$OPEN_PROJECT_NAME\" ]; then\n    return\nfi\n\nif [ ! -f \".env\" ]; then\n    return\nfi\n\nexport PROJECT_NAME=$OPEN_PROJECT_NAME\nexport PROJECT_DIR=\"$PWD\"\nexport PROJECT_VERSION=\"2.6.1\"\n\nif [ ! -d \"venv\" ]; then\n     if ! hash pyvenv 2>/dev/null; then\n        function pyvenv()\n        {\n            if hash python3.7 2>/dev/null; then\n                python3.7 -m venv $@\n            elif hash pyvenv-3.6 2>/dev/null; then\n                pyvenv-3.6 $@\n            elif hash pyvenv-3.5 2>/dev/null; then\n                pyvenv-3.5 $@\n            elif hash pyvenv-3.4 2>/dev/null; then\n                pyvenv-3.4 $@\n            elif hash pyvenv-3.3 2>/dev/null; then\n                pyvenv-3.3 $@\n            elif hash pyvenv-3.2 2>/dev/null; then\n                pyvenv-3.2 $@\n            else\n                python3 -m venv $@\n            fi\n        }\n    fi\n\n    echo \"Making venv for $PROJECT_NAME\"\n    pyvenv venv\n    . venv/bin/activate\n    pip install -r requirements/development.txt\n    python setup.py install\nfi\n\n. venv/bin/activate\n\n# Let's make sure this is a hubflow enabled repo\nyes | git hf init >/dev/null 2>/dev/null\n\n# Quick directory switching\nalias root=\"cd $PROJECT_DIR\"\nalias project=\"root; cd $PROJECT_NAME\"\nalias tests=\"root; cd tests\"\nalias examples=\"root; cd examples\"\nalias requirements=\"root; cd requirements\"\nalias run_tests=\"_test\"\n\n\nfunction open {\n    (root\n     $CODE_EDITOR hug/*.py setup.py tests/*.py examples/*.py examples/*/*.py README.md tox.ini .gitignore CHANGELOG.md setup.cfg .editorconfig .env .coveragerc .travis.yml requirements/*.txt)\n}\n\n\nfunction clean {\n    (root\n     isort hug/*.py setup.py tests/*.py\n     black -l 100 hug)\n}\n\n\nfunction check {\n    (root\n     frosted hug/*.py)\n}\n\n\nfunction _test {\n    (root\n     tox)\n}\n\n\nfunction coverage {\n    (root\n     $BROWSER htmlcov/index.html)\n}\n\n\nfunction load {\n    (root\n     python setup.py install)\n}\n\n\nfunction unload {\n    (root\n     pip uninstall hug)\n}\n\n\nfunction install {\n    (root\n     sudo python setup.py install)\n}\n\n\nfunction update {\n    (root\n     pip install -r requirements/development.txt -U)\n}\n\n\nfunction distribute {\n    (root\n     pip install pypandoc\n     python -c \"import pypandoc; pypandoc.convert('README.md', 'rst')\" || exit 1\n     python setup.py sdist upload)\n}\n\n\nfunction version()\n{\n    echo $PROJECT_VERSION\n}\n\n\nfunction new_version()\n{\n    (root\n     if [ -z \"$1\" ]; then\n         echo \"You must supply a new version to replace the old version with\"\n         return\n     fi\n\n    sed -i \"s/$PROJECT_VERSION/$1/\" .env setup.py hug/_version.py)\n    export PROJECT_VERSION=$1\n}\n\n\nfunction new_version_patch()\n{\n    (root\n     bumpversion --allow-dirty patch)\n}\n\n\nfunction new_version_minor()\n{\n    (root\n     bumpversion --allow-dirty minor)\n}\n\n\nfunction new_version_major()\n{\n    (root\n     bumpversion --allow-dirty major)\n}\n\n\nfunction leave {\n    export PROJECT_NAME=\"\"\n    export PROJECT_DIR=\"\"\n\n    unalias root\n    unalias project\n    unalias tests\n    unalias examples\n    unalias requirements\n    unalias test\n\n    unset -f _start\n    unset -f _end\n\n\n    unset -f open\n    unset -f clean\n    unset -f _test\n    unset -f coverage\n    unset -f load\n    unset -f unload\n    unset -f install\n    unset -f update\n    unset -f distribute\n    unset -f version\n    unset -f new_version\n\n    unset -f leave\n\n    deactivate\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6826171875,
          "content": "*.py[cod]\n.DS_Store\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\nbuild\neggs\n.eggs\nparts\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\nMANIFEST\n\n# Installer logs\npip-log.txt\nnpm-debug.log\npip-selfcheck.json\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\nhtmlcov\n.cache\n.pytest_cache\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# SQLite\ntest_exp_framework\n\n# npm\nnode_modules/\n\n# dolphin\n.directory\nlibpeerconnection.log\n\n# setuptools\ndist\n\n# IDE Files\natlassian-ide-plugin.xml\n.idea/\n*.swp\n*.kate-swp\n.ropeproject/\n\n# Python3 Venv Files\n.venv/\nbin/\ninclude/\nlib/\nlib64\npyvenv.cfg\nshare/\nvenv/\n\n# Cython\n*.c\n\n# Emacs backup\n*~\n\n# VSCode\n/.vscode\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.111328125,
          "content": "[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=100\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.1650390625,
          "content": "dist: xenial\nlanguage: python\ncache: pip\nmatrix:\n  include:\n  - os: linux\n    sudo: required\n    python: 3.5\n  - os: linux\n    sudo: required\n    python: 3.6\n  - os: linux\n    sudo: required\n    python: 3.8\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-marshmallow2\n  - os: linux\n    sudo: required\n    python: pypy3.5-6.0\n    env: TOXENV=pypy3-marshmallow2\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-marshmallow3\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-black\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-flake8\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-bandit\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-vulture\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-isort\n  - os: linux\n    sudo: required\n    python: 3.7\n    env: TOXENV=py37-safety\n  - os: linux\n    sudo: required\n    python: pypy3.5-6.0\n    env: TOXENV=pypy3-marshmallow3\n  - os: osx\n    language: generic\n    env: TOXENV=py36-marshmallow2\n  - os: osx\n    language: generic\n    env: TOXENV=py36-marshmallow3\nbefore_install:\n- \"./scripts/before_install.sh\"\ninstall:\n- source ./scripts/install.sh\n- pip install tox tox-travis coveralls\nscript: tox\nafter_success: coveralls\ndeploy:\n  provider: pypi\n  user: timothycrosley\n  distributions: sdist bdist_wheel\n  skip_existing: true\n  on:\n    tags: false\n    branch: master\n    condition: \"$TOXENV = py37-marshmallow2\"\n  password:\n    secure: Zb8jwvUzsiXNxU+J0cuP/7ZIUfsw9qoENAlIEI5qyly8MFyHTM/HvdriQJM0IFCKiOSU4PnCtkL6Yt+M4oA7QrjsMrxxDo2ekZq2EbsxjTNxzXnnyetTYh94AbQfZyzliMyeccJe4iZJdoJqYG92BwK0cDyRV/jSsIL6ibkZgjKuBP7WAKbZcUVDwOgL4wEfKztTnQcAYUCmweoEGt8r0HP1PXvb0jt5Rou3qwMpISZpBYU01z38h23wtOi8jylSvYu/LiFdV8fKslAgDyDUhRdbj9DMBVBlvYT8dlWNpnrpphortJ6H+G82NbFT53qtV75CrB1j/wGik1HQwUYfhfDFP1RYgdXfHeKYEMWiokp+mX3O9uv/AoArAX5Q4auFBR8VG3BB6H96BtNQk5x/Lax7eWMZI0yzsGuJtWiDyeI5Ah5EBOs89bX+tlIhYDH5jm44ekmkKJJlRiiry1k2oSqQL35sLI3S68vqzo0vswsMhLq0/dGhdUxf1FH9jJHHbSxSV3HRSk045w9OYpLC2GULytSO9IBOFFOaTJqb8MXFZwyb9wqZbQxELBrfH3VocVq85E1ZJUT4hsDkODNfe6LAeaDmdl8V1T8d+KAs62pX+4BHDED+LmHI/7Ha/bf6MkXloJERKg3ocpjr69QADc3x3zuyArQ2ab1ncrer+yk=\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS.md",
          "type": "blob",
          "size": 2.4072265625,
          "content": "Core Developers\n===================\n- Timothy Edmund Crosley (@timothycrosley)\n- Brandon Hoffman (@BrandonHoffman)\n- Jason Tyler (@jay-tyler)\n- Fabian Kochem (@vortec)\n\nNotable Bug Reporters\n===================\n- Michael Buckner (@michaelbuckner)\n- Carl Neuhaus (@carlneuhaus)\n- Eirik Rye (@eirikrye)\n- Matteo Bertini (@naufraghi)\n- Erwin Haasnoot (@ErwinHaasnoot)\n- Aris Pikeas (@pikeas)\n\nCode Contributors\n===================\n- Kostas Dizas (@kostasdizas)\n- Ali-Akber Saifee (@alisaifee)\n- @arpesenti\n- Eirik Rye (@eirikrye)\n- Matteo Bertini (@naufraghi)\n- Trevor Scheitrum (@trevorscheitrum)\n- Ian Wagner (@ianthetechie)\n- Erwin Haasnoot (@ErwinHaasnoot)\n- Kirk Leon Guerrero (@kirklg)\n- Ergo_ (@johnlam)\n- Rodrigue Cloutier (@rodcloutier)\n- KhanhIceTea (@khanhicetea)\n- Prashant Sinha (@PrashntS)\n- Alan Lu (@cag)\n- Soloman Weng (@soloman1124)\n- Evan Owen (@thatGuy0923)\n- Gemedet (@gemedet)\n- Garrett Squire (@gsquire)\n- Haïkel Guémar (@hguemar)\n- Eshin Kunishima (@mikoim)\n- Mike Adams (@mikeadamz)\n- Michal Bultrowicz (@butla)\n- Bogdan (@spock)\n- @banteg\n- Philip Bjorge (@philipbjorge)\n- Daniel Metz (@danielmmetz)\n- Alessandro Amici (@alexamici)\n- Trevor Bekolay (@tbekolay)\n- Elijah Wilson (@tizz98)\n- Chelsea Dole (@chelseadole)\n- Antti Kaihola (@akaihola)\n- Christopher Goes (@GhostOfGoes)\n- Stanislav (@atmo)\n- Lordran (@xzycn)\n- Stephan Fitzpatrick (@knowsuchagency)\n- Edvard Majakari (@EdvardM)\n- Sai Charan (@mrsaicharan1)\n\nDocumenters\n===================\n- Timothy Cyrus (@tcyrus)\n- M.Yasoob Ullah Khalid (@yasoob)\n- Lionel Montrieux (@lmontrieux)\n- Ian Wagner (@ianthetechie)\n- Andrew Murray (@radarhere)\n- Tim (@timlyo)\n- Sven-Hendrik Haase (@svenstaro)\n- Matt Caldwell (@mattcaldwell)\n- berdario (@berdario)\n- Cory Taylor (@coryandrewtaylor)\n- James C. (@JamesMCo)\n- Ally Weir (@allyjweir)\n- Steven Loria (@sloria)\n- Patrick Abeya (@wombat2k)\n- Ergo_ (@johnlam)\n- Adeel Khan (@adeel)\n- Benjamin Williams (@benjaminjosephw)\n- @gdw2\n- Thierry Colsenet (@ThierryCols)\n- Shawn Q Jackson (@gt50)\n- Bernhard E. Reiter (@bernhardreiter)\n- Adam McCarthy (@mccajm)\n- Sobolev Nikita (@sobolevn)\n- Chris (@ckhrysze)\n- Amanda Crosley (@waddlelikeaduck)\n- Chelsea Dole (@chelseadole)\n- Joshua Crowgey (@jcrowgey)\n- Antti Kaihola (@akaihola)\n- Simon Ince (@Simon-Ince)\n- Edvard Majakari (@EdvardM)\n\n\n\n--------------------------------------------\n\nA sincere thanks to everyone who has helped make hug the great Python3 project it is today!\n\n~Timothy Crosley\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 11.1240234375,
          "content": "The guiding thought behind the architecture\n===========================================\nhug is the cleanest way to create HTTP REST APIs on Python 3.\nIt consistently benchmarks among the top 3 performing web frameworks for Python, handily beating out Flask and Django.\nFor almost every common Web API task the code written to accomplish it in hug is a small fraction of what is required in other Frameworks.\n\nHowever, it's important to note, hug is not a Web API Framework. OK--that certainly is a function it performs. And exceptionally well at that.\nBut at its core, hug is a framework for exposing idiomatically correct and standard internal Python APIs externally.\nA framework to allow developers and architects to define logic and structure once, and then cleanly expose it over other means.\n\nCurrently, this means that you can expose existing Python functions / APIs over HTTP and CLI in addition to standard Python.\nHowever, as time goes on more interfaces will be supported. The architecture and implementation decisions that have gone\ninto hug have and will continue to support this goal.\n\nThis central concept also frees hug to rely on the fastest and best of breed components for every interface it supports:\n\n- [Falcon](https://github.com/falconry/falcon) is leveraged when exposing to HTTP for its impressive performance at this task\n- [Argparse](https://docs.python.org/3/library/argparse.html) is leveraged when exposing to CLI for the clean consistent interaction it enables from the command line\n\n\nWhat this looks like in practice - an illustrative example\n===========================================\n\nLet's say I have a very simple Python API I've built to add 2 numbers together. I call my invention `addition`.\nTrust me, this is legit. It's trademarked and everything:\n\n```python\n\"\"\"A simple API to enable adding two numbers together\"\"\"\n\n\ndef add(number_1, number_2):\n    \"\"\"Returns the result of adding number_1 to number_2\"\"\"\n    return number_1 + number_2\n```\n\nIt works, it's well documented, and it's clean.\nSeveral people are already importing and using my Python module for their math needs.\nHowever, there's a great injustice! I'm lazy, and I don't want to open a Python interpreter etc to access my function.\nHere's how I modify it to expose it via the command line:\n\n```python\n\"\"\"A simple API to enable adding two numbers together\"\"\"\nimport hug\n\n\n@hug.cli()\ndef add(number_1: hug.types.number, number_2: hug.types.number):\n    \"\"\"Returns the result of adding number_1 to number_2\"\"\"\n    return number_1 + number_2\n\n\nif __name__ == '__main__':\n    add.interface.cli()\n```\n\nYay! Now I can just do my math from the command line using:\n```add.py $NUMBER_1 $NUMBER_2```.\nAnd even better, if I miss an argument it lets me know what it is and how to fix my error.\nThe thing I immediately notice, is that my new command line interface works, it's well documented, and it's clean.\nJust like the original.\n\nHowever, users are not satisfied. I keep updating my API and they don't want to have to install a new copy every time.\nThey demand a Web API so they can always be pointing to my latest and greatest without restarting their apps and APIs.\nNo problem. I'll just expose it over HTTP as well:\n\n```python\n\"\"\"A simple API to enable adding two numbers together\"\"\"\nimport hug\n\n\n@hug.get() # <-- This is the only additional line\n@hug.cli()\ndef add(number_1: hug.types.number, number_2: hug.types.number):\n    \"\"\"Returns the result of adding number_1 to number_2\"\"\"\n    return number_1 + number_2\n\n\nif __name__ == '__main__':\n    add.interface.cli()\n```\n\nThat's it. I then run my new service via `hug -f add.py` and can see it running on `http://localhost:8000/`.\nThe default page shows me documentation that points me toward `http://localhost:8000/add?number_1=1&number_2=2` to perform my first addition.\nThe thing I immediately notice, is that my new web interface works, it's well documented, and it's clean.\nJust like the original. Even better, after all of this, people hitting the API via Python didn't have to change anything.\nAll my original unit tests continue to pass and my code coverage remains at 100%.\n\nIt turns out, the problems and thoughts that go into defining a clean well documented API for internal use greatly mirror those that are required to expose an API for external use. hug recognizes this and enables cleanly reusing the documentation, requirements, and structure of internal APIs for external use. This also encourages easier to use and well documented internal APIs: a major win/win.\n\nWhat happened internally as I exposed my API to new interfaces?\n===========================================\n\nA few things happen when you wrapped that first function for external use, with hug.cli():\n\n-   hug created a singleton hug.API object on your module to keep track of all interfaces that exist within the module\n    - This is referable by `__hug__` or `hug.API(__name__)`\n-   a new `hug.interface.CLI()` object was created and attached to `add.interface.cli`\n    - This interface fully encapsulates the logic needed to expose `add` as a command line tool\n    - NOTE: all supported ways to expose a function via hug can be found in `hug/interface.py`\n-   the original Python `add` function is returned unmodified (with exception to the `.interface.cli` property addition)\n\nThen when I extended my API to run as HTTP service the same basic pattern was followed:\n\n-   hug saw that the singleton already existed\n-   a new `hug.interface.HTTP()` object was created and attached to `add.interface.http`\n    - This interface encapsulates the logic needed to expose the `add` command as an HTTP service\n    - The new HTTP interface handler is registered to the API singleton\n-   the original Python `add` function is returned unmodified (with exception to the `.interface.http` property addition)\n\nAt the end of this, I have 2 interface objects attached to my original function: `add.cli` and `add.http`.\nWhich is consistent with what I want to accomplish, one Python API with 2 additional external interfaces.\n\nWhen I start the service via the command line, I call the `add.cli` interface directly which executes the code\nproducing a command line tool to interact with the add function.\n\nWhen I run `hug -f add.py` the hug runner looks for the\n`__hug__` singleton object and then looks for all registered HTTP interfaces, creating a Falcon WSGI API from them.\nIt then uses this new Falcon API to directly handle incoming HTTP requests.\n\nWhere does the code live for these core pieces?\n===========================================\n\nWhile hug has a lot of modules that enable it to provide a great depth of functionality, everything accomplished above,\nand that is core to hug, lives in only a few:\n\n-   `hug/api.py`: Defines the hug per-module singleton object that keeps track of all registered interfaces, alongside the associated per interface APIs (HTTPInterfaceAPI, CLIInterfaceAPI)\n-   `hug/routing.py`: holds all the data and settings that should be passed to newly created interfaces, and creates the interfaces from that data.\n    - This directly is what powers `hug.get`, `hug.cli`, and all other function to interface routers\n    - Can be seen as a Factory for creating new interfaces\n-   `hug/interface.py`: Defines the actual interfaces that manage external interaction with your function (CLI and HTTP).\n\nThese 3 modules define the core functionality of hug, and any API that uses hug will inevitably utilize these modules.\nDevelop a good handling on just these and you'll be in great shape to contribute to hug, and think of new ways to improve the Framework.\n\nBeyond these there is one additional internal utility library that enables hug to do its magic: `hug/introspect.py`.\nThis module provides utility functions that enable hugs routers to determine what arguments a function takes and in what form.\n\nEnabling interfaces to improve upon internal functions\n===========================================\n\nhug provides several mechanisms to enable your exposed interfaces to have additional capabilities not defined by\nthe base Python function.\n\nEnforced type annotations\n--\nhug interfaces automatically enforce the type annotations that you set on functions\n\n```python\ndef add(number_1:hug.types.number, number_2:hug.types.number):\n```\n\n- These types are simply called with the data which is passed into that field, if an exception is raised then it's seen as invalid.\n- All of hug's custom types used for enforcing annotations are defined in `hug/types.py`.\n\nDirectives\n--\nhug interfaces allow replacing Python function parameters with dynamically-pulled data via directives.\n\n```python\ndef add(number_1:hug.types.number, number_2:hug.types.number, hug_timer=2):\n```\n\n- In this example `hug_timer` is a directive, when calling via a hug interface `hug_timer` is replaced with a timer that contains the starting time.\n- All of hug's built-in directives are defined in `hug/directives.py`.\n\nRequires\n--\nhug requirements allow you to specify requirements that must be met only for specified interfaces.\n\n```python\n@hug.get(requires=hug.authentication.basic(hug.authentication.verify('User1', 'mypassword')))\n```\n\n- Causes the HTTP method to only successfully call the Python function if User1 is logged in.\n- require functions currently highly focused on authentication and all existing require functions are defined in `hug/authentication.py`.\n\nTransformations\n--\nhug transformations enable changing the result of a function but only for the specified interface.\n\n```python\n@hug.get(transform=str)\n```\n\n- The above would cause the method to return a stringed result, while the original Python function would still return an int.\n- All of hug's built in transformations are defined in `hug/transform.py`.\n\nInput/Output formats\n--\nhug provides an extensive number of built-in input and output formats.\n\n ```python\n @hug.get(output_format=hug.output_format.json)\n ```\n\n - These formats define how data should be sent to your API function and how it will be returned.\n - All of hugs built-in output formats are found in `hug/output_format.py`.\n - All of hugs built-in input formats are found in `hug/input_format.py`.\n - The default `output_formatting` is JSON.\n\n\nSwitching from using a hug API over one interface to another\n===========================================\n\nhug does its best to also solve the other side of the coin: that is how APIs are used.\nWhile native Python will always be the fastest, HTTP can provide attractive auto updating\nand clear responsibility separation benefits. You can interact with hug APIs via hug.use.[interface] if the ability\nto switch between these is a high priority for you. The code that enables this is found in `hug/use.py` and should be\nkept in mind if working on adding an additional interface for hug, or changing how hug calls functions.\n\nFeel free to update or request more info :)\n===========================================\n\nI tried my best to highlight where important functionality in the hug project lives via this Architecture document, as well as\nexplain the reasoning behind it. However, this document is certainly not complete! If you encounter anything you would like to be\nexpanded upon or explained in detail here, please either let me know or modify the document so everyone can get a good walkthrough of hug's architecture.\n\nThanks!\n\nI hope you have found this guide useful :)\n\n~Timothy\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.30859375,
          "content": "Install the latest\n===================\n\nTo install the latest version of hug simply run:\n\n```bash\npip3 install hug --upgrade\n```\n\nIdeally, within a virtual environment.\n\nChangelog\n=========\n### 2.6.1 - February 6, 2020\n- Fixed issue #834: Bug in some cases when introspecting local documentation.\n\n### 2.6.0 - August 29, 2019\n- Improved CLI multiple behaviour with empty defaults\n- Improved CLI type output for built-in types\n- Improved MultiCLI base documentation\n\n### 2.5.6 - June 20, 2019\n- Fixed issue #815: map_params() causes api documentation to lose param type information\n- Improved project testing: restoring 100% coverage\n\n### 2.5.5 - June 13, 2019\n- Fixed issue #808: Problems with command line invocation via hug CLI\n- Fixed issue #647: Support for arbitrary URL complexity when using CORS middleware\n- Fixed issue #805: Added documentation for `map_params` feature\n- Added initial automated code cleaning and linting partially satisfying [HOPE-8 -- Style Guideline for Hug](https://github.com/hugapi/HOPE/blob/master/all/HOPE-8--Style-Guide-for-Hug-Code.md#hope-8----style-guide-for-hug-code)\n- Implemented [HOPE-20 -- The Zen of Hug](https://github.com/hugapi/HOPE/blob/master/all/HOPE-20--The-Zen-of-Hug.md)\n\n### 2.5.4 hotfix - May 19, 2019\n- Fix issue #798 - Development runner `TypeError` when executing cli\n\n### 2.5.3 hotfix - May 15, 2019\n- Fixed issue #794 - Restore support for versions of Marshmallow pre-2.17.0\n\n### 2.5.2 hotfix - May 10, 2019\n- Fixed issue #790 - Set Falcon defaults to pre 2.0.0 version to avoid breaking changes for Hug users until a Hug 3.0.0 release. The new default Falcon behaviour can be defaulted before hand by setting `__hug__.future = True`.\n\n### 2.5.1 hotfix - May 9, 2019\n- Fixed issue #784 - POST requests broken on 2.5.0\n- Optimizations and simplification of async support, taking advantadge of Python3.4 deprecation.\n- Fix issue #785: Empty query params are not ignored on 2.5.0\n- Added support for modifying falcon API directly on startup\n- Initial `black` formatting of code base, in preperation for CI enforced code formatting\n\n### 2.5.0 - May 4, 2019\n- Updated to latest Falcon: 2.0.0\n- Added support for Marshmallow 3\n- Added support for `args` decorator parameter to optionally specify type transformations separate from annotations\n- Added support for tests to provide a custom host parameter\n- Breaking Changes:\n    - Deprecated support for Python 3.4\n\n### 2.4.9 - TBD\n- Add the ability to invoke the hug development server as a Python module e.g. `python -m hug`\n- Corrected the documentation for the `--without-cython` install option\n\n### 2.4.8 - April 7, 2019\n- Fixed issue #762 - HTTP errors crash with selectable output types\n- Fixed MacOS testing via travis - added testing accross all the same Python versions tested on Linux\n\n### 2.4.7 - March 28, 2019\n- Fixed API documentation with selectable output types\n\n### 2.4.6 - March 25, 2019\n- Fixed issue #753 - 404 not found does not respect default output format.\n- Documented the `--without-cython` option in `CONTRIBUTING.md`\n- Extended documentation for output formats\n\n### 2.4.4 - March 21, 2019\n- Added the ability to change the default output format for CLI endpoints both at the API and global level.\n- Added the ablity to extend CLI APIs in addition to HTTP APIs issue #744.\n- Added optional built-in API aware testing for CLI commands.\n- Add unit test for `extend_api()` with CLI commands\n- Fix running tests using `python setup.py test`\n- Fix issue #749 extending API with mixed GET/POST methods\n- Documented the `multiple_files` example\n- Added the `--without-cython` option to `setup.py`\n\n### 2.4.3 [hotfix] - March 17, 2019\n- Fix issue #737 - latest hug release breaks meinheld worker setup\n\n### 2.4.2 - March 16, 2019\n- Python 3.7 support improvements\n- No longer test against Python 3.4 - aimed for full deprecation in Hug 3.0.0\n- Improved interoperability with the latest Falcon release\n- Documentation improvements\n- Fixed bug in auto reload\n\n### 2.4.1 - Sep 17, 2018\n- Fixed issue #631: Added support for Python 3.7\n- Fixed issue #665: Fixed problem with hug.types.json\n- Fixed issue #679: Return docs for marshmallow schema instead of for dump method\n\n### 2.4.0 - Jan 31, 2018\n- Updated Falcon requirement to 1.4.1\n- Fixed issue #590: Textual output formats should have explicitly defined charsets by default\n- Fixed issue #596: Host argument for development runner\n- Fixed issue #563: Added middleware to handle CORS requests\n- Implemented issue #612: Add support for numpy types in JSON output by default\n- Implemented improved class based directives with cleanup support (see: https://github.com/timothycrosley/hug/pull/603)\n- Support ujson if installed\n- Implement issue #579: Allow silencing intro message when running hug from command line\n- Implemented issue #531: Allow exit value to alter status code for CLI tools\n- Updated documentation generation to use hug's JSON outputter for consistency\n\n### 2.3.2 - Sep 28, 2017\n- Implemented Issue #540: Add support for remapping parameters\n- Updated Falcon requirement to 1.3.0\n- Fixed issue #552: Version ignored in class based routes\n- Fixed issue #555: Gracefully handle digit only version strings\n- Fixed issue #519: Exceptions are now correctly inserted into the current API using `extend_api`\n- Breaking Changes:\n    - Fixed issue #539: Allow JSON output to include non-ascii (UTF8) characters by default.\n\n### 2.3.1 - Aug 26, 2017\n- Fixed issue #500 & 504: Added support for automatic reload on Windows & enabled intuitive use of pdb within autoreloader\n- Implemented improved way to retrieve list of urls and handlers for issue #462\n- Implemented support for Python typing module style sub types\n- Updated to allow -m parameter load modules on current directory\n- Improved hug.test decode behaviour\n- Added built in handlers for CORS support:\n    - directive `hug.directives.cors`\n    - Improved routing support\n    - Added allow origins middleware\n\n### 2.3.0 - May 4, 2017\n- Falcon requirement upgraded to 1.2.0\n- Enables filtering documentation according to a `base_url`\n- Fixed a vulnerability in the static file router that allows files in parent directory to be accessed\n- Fixed issue #392: Enable posting self in JSON data structure\n- Fixed issue #418: Ensure version passed is a number\n- Fixed issue #399: Multiple ints not working correctly for CLI interface\n- Fixed issue #461: Enable async startup methods running in parallel\n- Fixed issue #412: None type return for file output format\n- Fixed issue #464: Class based routing now inherit templated parameters\n- Fixed issue #346: Enable using async routes within threaded server\n- Implemented issue #437: Added support for anonymous APIs\n- Added support for exporting timedeltas to JSON as seconds\n- Added support for endpoint-specific input formatters:\n```python\ndef my_input_formatter(data):\n    return ('Results', hug.input_format.json(data))\n\n@hug.get(inputs={'application/json': my_input_formatter})\ndef foo():\n    pass\n```\n- Adds support for passing in a custom scheme in hug.test\n- Adds str() and repr() support to hug_timer directive\n- Added support for moduleless APIs\n- Improved argparser usage message\n- Implemented feature #427: Allow custom argument deserialization together with standard type annotation\n- Improvements to exception handling.\n- Added support for request / response in a single generator based middleware function\n- Automatic reload support for development runner\n- Added support for passing `params` dictionary and `query_string` arguments into hug.test.http command for more direct modification of test inputs\n- Added support for manual specifying the scheme used in hug.test calls\n- Improved output formats, enabling nested request / response dependent formatters\n- Breaking Changes\n    - Sub output formatters functions now need to accept response & request or **kwargs\n    - Fixed issue #432: Improved ease of sub classing simple types - causes type extensions of types that dont take to __init__\n                        arguments, to automatically return an instanciated type, beaking existing usage that had to instanciate\n                        after the fact\n    - Fixed issue #405: cli and http @hug.startup() differs, not executed for cli, this also means that startup handlers\n      are given an instance of the API and not of the interface.\n\n### 2.2.0 - Oct 16, 2016\n- Defaults asyncio event loop to uvloop automatically if it is installed\n- Added support for making endpoints `private` to enforce lack of automatic documentation creation for them.\n- Added HTTP method named (get, post, etc) routers to the API router to be consistent with documentation\n- Added smart handling of empty JSON content (issue #300)\n- Added ability to have explicitly unversioned API endpoints using `versions=False`\n- Added support for providing a different base URL when extending an API\n- Added support for sinks when extending API\n- Added support for object based CLI handlers\n- Added support for excluding exceptions from being handled\n- Added support for **kwarg handling within CLI interfaces\n- Allows custom decorators to access parameters like request and response, without putting them in the original functions' parameter list\n- Fixed not found handlers not being imported when extending an API\n- Fixed API extending support of extra features like input_format\n- Fixed issue with API directive not working with extension feature\n- Fixed nested async calls so that they reuse the same loop\n- Fixed TypeError being raised incorrectly when no content-type is specified (issue #330)\n- Fixed issues with multi-part requests (issue #329)\n- Fixed documentation output to exclude `api_version` and `body`\n- Fixed an issue passing None where a text value was required (issue #341)\n\n### 2.1.2 - May 18, 2016\n- Fixed an issue with sharing exception handlers across multiple modules (Thanks @soloman1124)\n- Fixed how single direction (response / request) middlewares are bounded to work when code is Cython compiled\n\n### 2.1.1 - May 17, 2016\n- Hot-fix release to ensure input formats don't die with unexpected parameters\n\n### 2.1.0 - May 17, 2016\n- Updated base Falcon requirement to the latest: 1.0.0\n- Added native support for using asyncio methods (Thanks @rodcloutier!)\n- Added improved support for `application/x-www-form-urlencoded` forms (thanks @cag!)\n- Added initial support for `multipart/form-data`\n- Added support for getting URL from hug function\n- Added support for using `hug.local()` on methods in addition to functions\n- Added a default mime-type for static file endpoints (`application/octet-stream`)\n- Added initial `hug.API(__name__).context` dictionary as a safe place to store global per-thread state (such as database connections)\n- Added support for manually specifying API object for all decorators (including middleware / startup) to enable easier plugin interaction\n- Added support for selectively removing requirements per endpoint\n- Added conditional output format based on Accept request header, as detailed in issue #277\n- Added support for dynamically creating named modules from API names\n- Improved how `hug.test` deals with non JSON content types\n- Fixed issues with certain non-standard content-type values causing an exception\n- Fixed a bug producing documentation when versioning is used, and there are no routes that apply accros versions\n- Fixed a bug in the `hug_documentation` directive\n- Breaking Changes\n    - Input formats no longer get passed `encoding` but instead get passed `charset` along side all other set content type parameters\n\n### 2.0.7 - Mar 25, 2016\n- Added convenience `put_post` router to enable easier usage of the common `@hug.get('url/', ('PUT', 'POST\"))` pattern\n- When passing lists or tuples to the hug http testing methods, they will now correctly be handled as multiple values\n\n### 2.0.5 - 2.0.6 - Mar 25, 2016\n- Adds built-in support for token based authentication\n\n### 2.0.4 - Mar 22, 2016\n- Fixes documentation on PyPI website\n\n### 2.0.3 - Mar 22, 2016\n- Fixes hug.use module on Windows\n\n### 2.0.2 - Mar 18, 2016\n- Work-around bug that was keeping hug from working on Windows machines\n- Introduced a delete method to the abstract hug store module\n\n### 2.0.1 - Mar 18, 2016\n- Add in-memory data / session store for testing\n- Default hug.use.HTTP to communicate over JSON body\n\n### 2.0.0 - Mar 17, 2016\n- Adds the concept of chain-able routing decorators\n- Adds built-in static file handling support via a `@hug.static` decorator (thanks @BrandonHoffman!)\n- Adds a directive to enable directly accessing the user object from any API call (thanks @ianthetechie)\n- Adds the concept of seamless micro-services via the hug.use module, enable switching between HTTP and local without code change\n- Adds built-in support for 'X-Api-Key' header based authentication via `authentication.api_key`\n- Adds support for running arbitrary python functions at runtime via a `@hug.startup` decorator\n- Adds support for smarter handling of html output types\n- Adds a UUID type\n- Adds support for explicit API creation / referencing using `hug.api(__name__)`\n- Adds a logging middleware to simplify the process of logging all requests with hug\n- Adds a `middleware_class` class decorator, to enable quickly registering middleware classes\n- Adds `smart_redirection` allowing API functions to return other endpoints\n- Adds support for class based handlers\n- Adds support for automatically handling exceptions\n- Adds support for automatically outputting images with `save` method that don't take a format.\n- Added extended support for delimited fields, enabling use of custom delimiters\n- Added support for running different transformers based on content_type\n- Added support for outputting a different response output type based on the response content_type\n- Added support for running different transformations and outputting different content_types based on path suffix\n- Added support for automatically supporting a set of suffixes at the end of a URL\n- Added support for automatically adding headers based on route match\n- Added support for quickly adding cache header based on route match\n- Added support for quickly adding allow origin header based on route match\n- Added support for quickly re-routing to defined 404 handler\n- Added support for length based types (`length`, `shorter_than`, and `longer_than`)\n- Added support for easily extending hugs JSON outputter with support for custom types\n- Added support for a custom final pass validation function\n- Added support for defining routes separate from handlers\n- Added support for raising on validation errors - to enable overall exception handlers to catch them\n- Added support for multiple transformers on an endpoint via `transform.all`\n- Added support for applying type annotations and directives locally with @hug.local()\n- Added support for a base_url by doing `hug.API(__name__).http.base_url = '/base_url'`\n- Added support for automatically running CLI commands from hug command line runner\n- Added requirements to documentation\n- Updated all default output formats to gracefully handle error dictionaries\n- Documentation generation was moved to API instances to enable easier customization\n- Now correctly identifies and handles custom encodings\n- Improved integration with Falcon so that primary elements (like status codes) can be imported directly from hug\n- Added the ability to specify a transformer for validation errors per request handler, via `on_invalid` decorator argument\n- Added the ability to specify an output format specific to validation errors per request handler, via `output_invalid` decorator argument\n- Changed transform functions to get ran on output of validation errors by default\n- Automatically works around a bug in uwsgi when returning byte streams\n- Refactored how interfaces are built to be more reasuable, and more easily introspected\n- Refactored how the built in annotation types are built to be more easily built upon\n- Updated type.string to fail if a list is passed in\n- Removed 'cli_behaviour' from types, instead moving the responsibility of per-type behavior to the CLI interface\n- Fixed a bug that leaked annotation provided directives to the produced documentation\n- Fully re-factored hug's type system for easier extensibility\n- Breaking Changes\n    - directives are no longer automatically applied to local function calls, '@hug.local' must be used to apply them\n    - cli_behaviour has been removed as a type feature - however common sense inheritance of base types should easily replace it's usage\n    - documentation module has been removed, in favor of documentation being generated by the api object and individual interfaces\n    - API singleton now has sub-apis for each interface in use (IE hug.API(__name__).http and hug.API(__name__).cli)\n    - run module has been removed, with the functionality moved to hug.API(__name__).http.server() and the terminal functionality\n      being moved to hug.development_runner.hug\n\n### 1.9.9 - Dec 15, 2015\n- Hug's json serializer will now automatically convert decimal.Decimal objects during serializationkw\n- Added `in_range`, `greater_than`, and `less_than` types to allow easily limiting values entered into an API\n\n### 1.9.8 - Dec 1, 2015\n- Hug's json serializer will now automatically convert returned (non-list) iterables into json lists\n\n### 1.9.7 - Dec 1, 2015\n- Fixed a bug (issue #115) that caused the command line argument for not auto generating documentation `-nd` to fail\n\n### 1.9.6 - Nov 25, 2015\n- Fixed a bug (issue #112) that caused non-versioned endpoints not to show up in auto-generated documentation, when versioned endpoints are present\n\n### 1.9.5 - Nov 20, 2015\n- Improved cli output, to output nothing if None is returned\n\n### 1.9.3 - Nov 18, 2015\n- Enabled `hug.types.multiple` to be exposed as nargs `*`\n- Fixed a bug that caused a CLI argument when adding an argument starting with `help`\n- Fixed a bug that caused CLI arguments that used `hug.types.multiple` to be parsed as nested lists\n\n### 1.9.2 - Nov 18, 2015\n- Improved boolean type behavior on CLIs\n\n### 1.9.1 - Nov 14, 2015\n- Fixes a bug that caused hug cli clients to occasionally incorrectly require additional arguments\n- Added support for automatically converting non utf8 bytes to base64 during json output\n\n### 1.9.0 - Nov 10, 2015\n- Added initial built-in support for video output formats (Thanks @arpesenti!)\n- Added built-in automatic support for range-requests when streaming files (such as videos)\n- Output formatting functions are now called, even if a stream is returned.\n- Input formatting functions now need to be responsible for dealing with text encoding and streaming\n- Added additional default input format for `text/plain` and a few other common text based formats\n- If no input format is available, but the body parameter is requested - the body stream is now returned\n- Added support for a generic `file` output formatter that automatically determines the content type for the file\n\n### 1.8.2 - Nov 9, 2015\n- Drastically improved hug performance when dealing with a large number of requests in wsgi mode\n\n### 1.8.1 - Nov 5, 2015\n- Added `json` as a built in hug type to handle urlencoded json data in a request\n- Added `multi` as a built in hug type that will allow a single field to be one of multiple types\n\n### 1.8.0 - Nov 4, 2015\n- Added a `middleware` module make it easier to bundle generally useful middlewares going forward\n- Added a generic / reusable `SessionMiddleware` (Thanks @vortec!)\n\n### 1.7.1 - Nov 4, 2015\n- Fix a bug that caused error messages sourced from exceptions to be double quoted\n\n### 1.7.0 - Nov 3, 2015\n- Auto supply `response` and `request` to output transformations and formats when they are taken as arguments\n- Improved the `smart_boolean` type even further, to allow 0, 1, t, f strings as input\n- Enabled normal boolean type to easily work with cli apps, by having it interact via 'store_true'\n\n### 1.6.5 - Nov 2, 2015\n- Fixed a small spelling error on the `smart_boolean` type\n\n### 1.6.2 - Nov 2, 2015\n- Added a `mapping` type that allows users to quikly map string values to Python types\n- Added a `smart_boolean` type that respects explicit true/false in string values\n\n### 1.6.1 - Oct 30, 2015\n- Added support for overriding parameters via decorator to ease use of **kwargs\n- Added built-in boolean type support\n- Improved testing environment\n\n### 1.6.0 - Oct 13, 2015\n- Adds support for attaching hug routes to method calls\n- Hug is now compiled using Cython (when it is available) for an additional performance boost\n\n### 1.5.1 - Oct 1, 2015\n- Added built-in support for serializing sets\n\n### 1.5.0 - Sep 30, 2015\n- Added built-in support for outputting svg images\n- Added support for rendering images from pygal graphs, or other image framworks that support `render`, automatically\n- Added support for marshmallow powered output transformations\n- Added support for marshmallow schema powered input types\n- Added support for using individual marshmallow fields directly as input types\n- Added support for attaching directives to specific named parameters, allowing directives to be used multiple times in a single API call\n- Added support for attaching named directives using only the text name of the directive\n\n### 1.4.0 - Sep 14, 2015\n- Added *args support to hug.cli\n- Added built-in html output support\n- Added multi-api composition example to examples folder\n- Fixed issue #70: error when composing two API modules into a single one without directives\n- Fixed issue #73: README file is incorrectly formatted on PYPI\n\n### 1.3.1 - Sep 8, 2015\n- Fixed string only annotations causing exceptions when used in conjunction with `hug.cli`\n- Fixed return of image file not correctly able to set stream len information / not correctly returning with PIL images\n- Added examples of image loading with hug\n\n### 1.3.0 - Sep 8, 2015\n- Started keeping a log of all changes between releases\n- Added support for quickly exposing functions as cli clients with `hug.cli` decorator\n- Added support for quickly serving up development APIs from withing the module using: `if __name__ == '__main__': __hug__.serve()`\n- Added support for documentation only type annotations, simply by passing just a string in as the type annotation\n- Added support for `requires` argument to limit execution of functions based on a given criteria\n- Added automatic documentation of output type transformations\n- Added initial built-in authentication support\n- Added built-in support for outputting common image file types\n- Added support for returning streams within hugged functions\n- `hug.types.decimal` renamed to `hug.types.float_number` and `hug.types.decimal` type added that returns python Decimal\n- `hug.types.accept` wrapper added, that makes it easy to customize doc strings and error handling for any preexisting type converter\n"
        },
        {
          "name": "CODING_STANDARD.md",
          "type": "blob",
          "size": 0.98046875,
          "content": "Coding Standard\n=========\nAny submission to this project should closely follow the [PEP 8](https://www.python.org/dev/peps/pep-0008/) coding guidelines with the exceptions:\n\n1. Lines can be up to 100 characters long.\n2. Single letter or otherwise nondescript variable names are prohibited.\n\nStandards for new hug modules\n=========\nNew modules added to the hug project should all live directly within the `hug/` directory without nesting.\nIf the modules are meant only for internal use within hug they should be prefixed with a leading underscore. For example, `def _internal_function`.\nModules should contain a doc string at the top that gives a general explanation of the purpose and then\nrestates the project's use of the MIT license.\n\nThere should be a `tests/test_$MODULE_NAME.py` file created to correspond to every new module that contains\ntest coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method\nper code method) to the extent cleanly possible.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.7744140625,
          "content": "Contributing to hug\n=========\nLooking for a growing and useful open source project to contribute to?\nWant your contributions to be warmly welcomed and acknowledged?\nWant a free project t-shirt to show you're a contributor?\nWelcome! You have found the right place.\n\nhug is growing quickly and needs awesome contributors like *you* to help the project reach its full potential.\nFrom reporting issues, writing documentation, implementing new features, fixing bugs and creating logos to providing additional usage examples - any contribution you can provide will be greatly appreciated and acknowledged.\n\nGetting hug set up for local development\n=========\nThe first step when contributing to any project is getting it set up on your local machine. hug aims to make this as simple as possible.\n\nAccount Requirements:\n\n- [A valid GitHub account](https://github.com/join)\n\nBase System Requirements:\n\n- Python3.5+\n- Python3-venv (included with most Python3 installations but some Ubuntu systems require that it be installed separately)\n- bash or a bash compatible shell (should be auto-installed on Linux / Mac)\n- [autoenv](https://github.com/kennethreitz/autoenv) (optional)\n\nOnce you have verified that you system matches the base requirements you can start to get the project working by following these steps:\n\n1. [Fork the project on GitHub](https://github.com/timothycrosley/hug/fork).\n2. Clone your fork to your local file system:\n    `git clone https://github.com/$GITHUB_ACCOUNT/hug.git`\n3. `cd hug`\n    - Create a virtual environment using [`python3 -m venv $ENV_NAME`](https://docs.python.org/3/library/venv.html) or `mkvirtualenv` (from [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/))\n    - If you have autoenv set-up correctly, simply press Y and then wait for the environment to be set up for you.\n    - If you don't have autoenv set-up, run `source .env` to set up the local environment. You will need to run this script every time you want to work on the project - though it will not cause the entire set up process to re-occur.\n4. Run `test` to verify your everything is set up correctly. If the tests all pass, you have successfully set up hug for local development! If not, you can ask for help diagnosing the error [here](https://gitter.im/timothycrosley/hug).\n\nInstall dependencies by running `pip install -r requirements/release.txt`,\nand optional build dependencies\nby running `pip install -r requirements/build.txt`\nor `pip install -r requirements/build_windows.txt`.\n\nInstall Hug itself with `pip install .` or `pip install -e .` (for editable mode).\nThis will compile all modules with [Cython](https://cython.org/) if it's installed in the environment.\nYou can skip Cython compilation using `pip install --install-option=--without-cython .` (this works with `-e` as well).\n\nMaking a contribution\n=========\nCongrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request:\n\n1. Check the [issues page](https://github.com/timothycrosley/hug/issues) on GitHub to see if the task you want to complete is listed there.\n    - If it's listed there, write a comment letting others know you are working on it.\n    - If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control.\n        - If you're not sure if it's something that is good for the main hug project and want immediate feedback, you can discuss it [here](https://gitter.im/timothycrosley/hug).\n2. Create an issue branch for your local work `git checkout -b issue/$ISSUE-NUMBER`.\n3. Do your magic here.\n4. Run `clean` to automatically sort your imports according to pep-8 guidelines.\n5. Ensure your code matches hug's latest coding standards defined [here](https://github.com/timothycrosley/hug/blob/develop/CODING_STANDARD.md). It's important to focus to focus on making your code efficient as hug is used as a base framework for several performance critical APIs.\n7. Submit a pull request to the main project repository via GitHub.\n\nThanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the ACKNOWLEDGEMENTS.md list :).\n\nGetting a free t-shirt\n=========\n![hug t-shirt](https://raw.github.com/timothycrosley/hug/develop/artwork/t-shirt.png)\n\nOnce you have finished contributing to the project, send your mailing address and shirt size to timothy.crosley@gmail.com, with the title hug Shirt for @$GITHUB_USER_NAME.\n\nWhen the project has reached 100 contributors, I will be sending every one of the original hundred contributors a t-shirt to commemorate their awesome work.\n\nThank you!\n=========\nI can not tell you how thankful I am for the hard work done by hug contributors like you. hug could not be the exciting and useful framework it is today without your help.\n\nThank you!\n\n~Timothy Crosley\n"
        },
        {
          "name": "EXTENDING.md",
          "type": "blob",
          "size": 3.078125,
          "content": "Building hug extensions\n=========\nWant to extend hug to tackle new problems? Integrate a new form of authentication? Add new useful types?\nAwesome! Here are some guidlines to help you get going and make a world class hug extension\nthat you will be proud to have showcased to all hug users.\n\nHow are extensions built?\n=========\nhug extensions should be built like any other python project and uploaded to PYPI. What makes a hug extension a *hug* extension is simply it's name and the fact it contains within its Python code utilities and classes that extend hugs capabilties.\n\nNaming your extension\n=========\nAll hug extensions should be prefixed with `hug_` for easy disscovery on PYPI. Additionally, there are a few more exact prefixes that can be optionally be added to help steer users to what your extensions accomplishes:\n\n- `hug_types_` should be used if your extensions is used primarily to add new types to hug (for example: hug_types_numpy).\n- `hug_authentication_` if your extension is used primarily to add a new authentication type to hug (for example: hug_authentication_oath2)\n- `hug_output_format_` if your extension is used primarily to add a new output format to hug (for example: hug_output_format_svg)\n- `hug_input_format_` if your extension is used primarily to add a new input format to hug (for example: hug_input_format_html)\n- `hug_validate_` if your extension is used primarily to add a new overall validator to hug (for example: hug_validate_no_null).\n- `hug_transform_` if your extension is used primarily to add a new hug transformer (for example: hug_transform_add_time)\n- `hug_middleware_` if your extension is used primarily to add a middleware to hug (for example: hug_middleware_redis_session)\n\nFor any more complex or general use case that doesn't fit into these predefined categories or combines many of them, it\nis perfectly suitable to simply prefix your extension with `hug_`. For example: hug_geo could combine hug types, hug input formats, and hug output formats making it a good use case for a simply prefixed extension.\n\nBuilding Recommendations\n=========\nIdeally, hug extensions should be built in the same manner as hug itself. This means 100% test coverage using pytest, decent performance, pep8 compliance, and built in optional compiling with Cython. None of this is strictly required, but will help give users of your extension faith that it wont slow things down or break their setup unexpectedly.\n\nRegistering your extension\n=========\nOnce you have finished developing and testing your extension, you can help increase others ability to discover it by registering it. The first place an extension should be registered is on PYPI, just like any other Python Package. In addition to that you can add your extension to the list of extensions on hug's [github wiki](https://github.com/timothycrosley/hug/wiki/Hug-Extensions).\n\nThank you\n=========\nA sincere thanks to anyone that takes the time to develop and register an extension for hug. You are helping to make hug a more complete eco-system for everyuser out there, and paving the way for a solid foundation into the future.\n\nThanks!\n\n~Timothy Crosley\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 3.916015625,
          "content": "# Frequently Asked Questions about Hug\n\nFor more examples, check out Hug's [documentation](https://github.com/timothycrosley/hug/tree/develop/documentation) and [examples](https://github.com/timothycrosley/hug/tree/develop/examples) Github directories, and its [website](http://www.hug.rest/).\n\n## General Questions\n\nQ: *Can I use Hug with a web framework -- Django for example?*\n\nA: You can use Hug alongside Django or the web framework of your choice, but it does have drawbacks. You would need to run hug on a separate, hug-exclusive server. You can also [mount Hug as a WSGI app](https://pythonhosted.org/django-wsgi/embedded-apps.html), embedded within your normal Django app.\n\nQ: *Is Hug compatabile with Python 2?*\n\nA: Python 2 is not supported by Hug. However, if you need to account for backwards compatability, there are workarounds. For example, you can wrap the decorators:\n\n```Python\ndef my_get_fn(func, *args, **kwargs):\n    if 'hug' in globals():\n        return hug.get(func, *args, **kwargs)\n    return func\n```\n\n## Technical Questions\n\nQ: *I need to ensure the security of my data. Can Hug be used over HTTPS?*\n\nA: Not directly, but you can utilize [uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/) with nginx to transmit sensitive data. HTTPS is not part of the standard WSGI application layer, so you must use a WSGI HTTP server (such as uWSGI) to run in production. With this setup, Nginx handles SSL connections, and transfers requests to uWSGI.\n\nQ:  *How can I serve static files from a directory using Hug?*\n\nA: For a static HTML page, you can just set the proper output format as: `output=hug.output_format.html`. To see other examples, check out the [html_serve](https://github.com/timothycrosley/hug/blob/develop/examples/html_serve.py) example, the [image_serve](https://github.com/timothycrosley/hug/blob/develop/examples/image_serve.py) example, and the more general [static_serve](https://github.com/timothycrosley/hug/blob/develop/examples/static_serve.py) example within `hug/examples`.\n\nMost basic examples will use a format that looks something like this:\n\n```Python\n@hug.static('/static')\n￼def my_static_dirs():\n￼    return('/home/www/path-to-static-dir')\n```\n\nQ: *Does Hug support autoreloading?*\n\nA: Hug supports any WSGI server that uses autoreloading, for example Gunicorn and uWSGI. The scripts for initializing autoreload for them are, respectively:\n\nGunicorn: `gunicorn --reload app:__hug_wsgi__`\nuWSGI: `--py-autoreload 1 --http :8000 -w app:__hug_wsgi__`\n\nQ: *How can I access a list of my routes?*\n\nA: You can access a list of your routes by using the routes object on the HTTP API:\n\n`__hug_wsgi__.http.routes`\n\nIt will return to you a structure of \"base_url -> url -> HTTP method -> Version -> Python Handler\". Therefore, for example, if you have no base_url set and you want to see the list of all URLS, you could run:\n\n`__hug_wsgi__.http.routes[''].keys()`\n\nQ: *How can I configure a unique 404 route?*\n\nA: By default, Hug will call `documentation_404()` if no HTTP route is found. However, if you want to configure other options (such as routing to a directiory, or routing everything else to a landing page) you can use the `@hug.sink('/')` decorator to create a \"catch-all\" route:\n\n```Python\nimport hug\n\n@hug.sink('/all')\ndef my_sink(request):\n    return request.path.replace('/all', '')\n```\n\nFor more information, check out the ROUTING.md file within the `hug/documentation` directory.\n\nQ: *How can I enable CORS*\n\nA: There are many solutions depending on the specifics of your application.\nFor most applications, you can use the included cors middleware:\n\n```\nimport hug\n\napi = hug.API(__name__)\napi.http.add_middleware(hug.middleware.CORSMiddleware(api, max_age=10))\n\n\n@hug.get(\"/demo\")\ndef get_demo():\n    return {\"result\": \"Hello World\"}\n```\nFor cases that are more complex then the middleware handles\n\n[This comment](https://github.com/hugapi/hug/issues/114#issuecomment-342493165) (and the discussion around it) give a good starting off point.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2016 Timothy Crosley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.02734375,
          "content": "include LICENSE\ninclude *.md"
        },
        {
          "name": "Pipfile",
          "type": "blob",
          "size": 0.134765625,
          "content": "[[source]]\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[packages]\n\n[dev-packages]\n\n[requires]\npython_version = \"3.7\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.904296875,
          "content": "[![HUG](https://raw.github.com/hugapi/hug/develop/artwork/logo.png)](http://hug.rest)\n===================\n\n[![PyPI version](https://badge.fury.io/py/hug.svg)](http://badge.fury.io/py/hug)\n[![Build Status](https://travis-ci.org/hugapi/hug.svg?branch=develop)](https://travis-ci.org/hugapi/hug)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/0h7ynsqrbaxs7hfm/branch/master?svg=true)](https://ci.appveyor.com/project/TimothyCrosley/hug)\n[![Coverage Status](https://coveralls.io/repos/hugapi/hug/badge.svg?branch=develop&service=github)](https://coveralls.io/github/hugapi/hug?branch=master)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.python.org/pypi/hug/)\n[![Join the chat at https://gitter.im/timothycrosley/hug](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/timothycrosley/hug?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n_________________\n\n[Read Latest Documentation](https://hugapi.github.io/hug/) - [Browse GitHub Code Repository](https://github.com/hugapi/hug)\n_________________\n\nhug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development.\n\nhug's Design Objectives:\n\n- Make developing a Python driven API as succinct as a written definition.\n- The framework should encourage code that self-documents.\n- It should be fast. A developer should never feel the need to look somewhere else for performance reasons.\n- Writing tests for APIs written on-top of hug should be easy and intuitive.\n- Magic done once, in an API framework, is better than pushing the problem set to the user of the API framework.\n- Be the basis for next generation Python APIs, embracing the latest technology.\n\nAs a result of these goals, hug is Python 3+ only and built upon [Falcon's](https://github.com/falconry/falcon) high performance HTTP library\n\n[![HUG Hello World Example](https://raw.github.com/hugapi/hug/develop/artwork/example.gif)](https://github.com/hugapi/hug/blob/develop/examples/hello_world.py)\n\nSupporting hug development\n===================\n[Get professionally supported hug with the Tidelift Subscription](https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&utm_medium=referral&utm_campaign=readme)\n\nProfessional support for hug is available as part of the [Tidelift\nSubscription](https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&utm_medium=referral&utm_campaign=readme).\nTidelift gives software development teams a single source for\npurchasing and maintaining their software, with professional grade assurances\nfrom the experts who know it best, while seamlessly integrating with existing\ntools.\n\nInstalling hug\n===================\n\nInstalling hug is as simple as:\n\n```bash\npip3 install hug --upgrade\n```\n\nIdeally, within a [virtual environment](http://docs.python-guide.org/en/latest/dev/virtualenvs/).\n\nGetting Started\n===================\n\nBuild an example API with a simple endpoint in just a few lines.\n\n```py\n# filename: happy_birthday.py\n\"\"\"A basic (single function) API written using hug\"\"\"\nimport hug\n\n\n@hug.get('/happy_birthday')\ndef happy_birthday(name, age:hug.types.number=1):\n    \"\"\"Says happy birthday to a user\"\"\"\n    return \"Happy {age} Birthday {name}!\".format(**locals())\n```\n\nTo run, from the command line type:\n\n```bash\nhug -f happy_birthday.py\n```\n\nYou can access the example in your browser at:\n`localhost:8000/happy_birthday?name=hug&age=1`. Then check out the\ndocumentation for your API at `localhost:8000/documentation`\n\nParameters can also be encoded in the URL (check\nout [`happy_birthday.py`](examples/happy_birthday.py) for the whole\nexample).\n\n```py\n@hug.get('/greet/{event}')\ndef greet(event: str):\n    \"\"\"Greets appropriately (from http://blog.ketchum.com/how-to-write-10-common-holiday-greetings/)  \"\"\"\n    greetings = \"Happy\"\n    if event == \"Christmas\":\n        greetings = \"Merry\"\n    if event == \"Kwanzaa\":\n        greetings = \"Joyous\"\n    if event == \"wishes\":\n        greetings = \"Warm\"\n\n    return \"{greetings} {event}!\".format(**locals())\n```\n\nWhich, once you are running the server as above, you can use this way:\n\n```\ncurl http://localhost:8000/greet/wishes\n\"Warm wishes!\"\n```\n\nVersioning with hug\n===================\n\n```py\n# filename: versioning_example.py\n\"\"\"A simple example of a hug API call with versioning\"\"\"\nimport hug\n\n@hug.get('/echo', versions=1)\ndef echo(text):\n    return text\n\n\n@hug.get('/echo', versions=range(2, 5))\ndef echo(text):\n    return \"Echo: {text}\".format(**locals())\n```\n\nTo run the example:\n\n```bash\nhug -f versioning_example.py\n```\n\nThen you can access the example from `localhost:8000/v1/echo?text=Hi` / `localhost:8000/v2/echo?text=Hi` Or access the documentation for your API from `localhost:8000`\n\nNote: versioning in hug automatically supports both the version header as well as direct URL based specification.\n\nTesting hug APIs\n===================\n\nhug's `http` method decorators don't modify your original functions. This makes testing hug APIs as simple as testing any other Python functions. Additionally, this means interacting with your API functions in other Python code is as straight forward as calling Python only API functions. hug makes it easy to test the full Python stack of your API by using the `hug.test` module:\n\n```python\nimport hug\nimport happy_birthday\n\nhug.test.get(happy_birthday, 'happy_birthday', {'name': 'Timothy', 'age': 25}) # Returns a Response object\n```\n\nYou can use this `Response` object for test assertions (check\nout [`test_happy_birthday.py`](examples/test_happy_birthday.py) ):\n\n```python\ndef tests_happy_birthday():\n    response = hug.test.get(happy_birthday, 'happy_birthday', {'name': 'Timothy', 'age': 25})\n    assert response.status == HTTP_200\n    assert response.data is not None\n```\n\nRunning hug with other WSGI based servers\n===================\n\nhug exposes a `__hug_wsgi__` magic method on every API module automatically. Running your hug based API on any standard wsgi server should be as simple as pointing it to `module_name`: `__hug_wsgi__`.\n\nFor Example:\n\n```bash\nuwsgi --http 0.0.0.0:8000 --wsgi-file examples/hello_world.py --callable __hug_wsgi__\n```\n\nTo run the hello world hug example API.\n\nBuilding Blocks of a hug API\n===================\n\nWhen building an API using the hug framework you'll use the following concepts:\n\n**METHOD Decorators** `get`, `post`, `update`, etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged\n\n```py\n@hug.get() # <- Is the hug METHOD decorator\ndef hello_world():\n    return \"Hello\"\n```\n\nhug uses the structure of the function you decorate to automatically generate documentation for users of your API. hug always passes a request, response, and api_version variable to your function if they are defined params in your function definition.\n\n**Type Annotations** functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type\n\n```py\n@hug.get()\ndef math(number_1:int, number_2:int): #The :int after both arguments is the Type Annotation\n    return number_1 + number_2\n```\n\nType annotations also feed into `hug`'s automatic documentation\ngeneration to let users of your API know what data to supply.\n\n**Directives** functions that get executed with the request / response data based on being requested as an argument in your api_function.\nThese apply as input parameters only, and can not be applied currently as output formats or transformations.\n\n```py\n@hug.get()\ndef test_time(hug_timer):\n    return {'time_taken': float(hug_timer)}\n```\n\nDirectives may be accessed via an argument with a `hug_` prefix, or by using Python 3 type annotations. The latter is the more modern approach, and is recommended. Directives declared in a module can be accessed by using their fully qualified name as the type annotation (ex: `module.directive_name`).\n\nAside from the obvious input transformation use case, directives can be used to pipe data into your API functions, even if they are not present in the request query string, POST body, etc. For an example of how to use directives in this way, see the authentication example in the examples folder.\n\nAdding your own directives is straight forward:\n\n```py\n@hug.directive()\ndef square(value=1, **kwargs):\n    '''Returns passed in parameter multiplied by itself'''\n    return value * value\n\n@hug.get()\n@hug.local()\ndef tester(value: square=10):\n    return value\n\ntester() == 100\n```\n\nFor completeness, here is an example of accessing the directive via the magic name approach:\n\n```py\n@hug.directive()\ndef multiply(value=1, **kwargs):\n    '''Returns passed in parameter multiplied by itself'''\n    return value * value\n\n@hug.get()\n@hug.local()\ndef tester(hug_multiply=10):\n    return hug_multiply\n\ntester() == 100\n```\n\n**Output Formatters** a function that takes the output of your API function and formats it for transport to the user of the API.\n\n```py\n@hug.default_output_format()\ndef my_output_formatter(data):\n    return \"STRING:{0}\".format(data)\n\n@hug.get(output=hug.output_format.json)\ndef hello():\n    return {'hello': 'world'}\n```\n\nas shown, you can easily change the output format for both an entire API as well as an individual API call\n\n**Input Formatters** a function that takes the body of data given from a user of your API and formats it for handling.\n\n```py\n@hug.default_input_format(\"application/json\")\ndef my_input_formatter(data):\n    return ('Results', hug.input_format.json(data))\n```\n\nInput formatters are mapped based on the `content_type` of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your `api_function`\n\n**Middleware** functions that get called for every request a hug API processes\n\n```py\n@hug.request_middleware()\ndef process_data(request, response):\n    request.env['SERVER_NAME'] = 'changed'\n\n@hug.response_middleware()\ndef process_data(request, response, resource):\n    response.set_header('MyHeader', 'Value')\n```\n\nYou can also easily add any Falcon style middleware using:\n\n```py\n__hug__.http.add_middleware(MiddlewareObject())\n```\n\n**Parameter mapping** can be used to override inferred parameter names, eg. for reserved keywords:\n\n```py\nimport marshmallow.fields as fields\n...\n\n@hug.get('/foo', map_params={'from': 'from_date'})  # API call uses 'from'\ndef get_foo_by_date(from_date: fields.DateTime()):\n    return find_foo(from_date)\n```\n\nInput formatters are mapped based on the `content_type` of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your `api_function`\n\nSplitting APIs over multiple files\n===================\n\nhug enables you to organize large projects in any manner you see fit. You can import any module that contains hug decorated functions (request handling, directives, type handlers, etc) and extend your base API with that module.\n\nFor example:\n\n`something.py`\n\n```py\nimport hug\n\n@hug.get('/')\ndef say_hi():\n    return 'hello from something'\n```\n\nCan be imported into the main API file:\n\n`__init__.py`\n\n```py\nimport hug\nfrom . import something\n\n@hug.get('/')\ndef say_hi():\n    return \"Hi from root\"\n\n@hug.extend_api('/something')\ndef something_api():\n    return [something]\n```\n\nOr alternatively - for cases like this - where only one module is being included per a URL route:\n\n```py\n#alternatively\nhug.API(__name__).extend(something, '/something')\n```\n\nConfiguring hug 404\n===================\n\nBy default, hug returns an auto generated API spec when a user tries to access an endpoint that isn't defined. If you would not like to return this spec you can turn off 404 documentation:\n\nFrom the command line application:\n\n```bash\nhug -nd -f {file} #nd flag tells hug not to generate documentation on 404\n```\n\nAdditionally, you can easily create a custom 404 handler using the `hug.not_found` decorator:\n\n```py\n@hug.not_found()\ndef not_found_handler():\n    return \"Not Found\"\n```\n\nThis decorator works in the same manner as the hug HTTP method decorators, and is even version aware:\n\n```py\n@hug.not_found(versions=1)\ndef not_found_handler():\n    return \"\"\n\n@hug.not_found(versions=2)\ndef not_found_handler():\n    return \"Not Found\"\n```\n\nAsyncio support\n===============\n\nWhen using the `get` and `cli` method decorator on coroutines, hug will schedule\nthe execution of the coroutine.\n\nUsing asyncio coroutine decorator\n\n```py\n@hug.get()\n@asyncio.coroutine\ndef hello_world():\n    return \"Hello\"\n```\n\nUsing Python 3.5 async keyword.\n\n```py\n@hug.get()\nasync def hello_world():\n    return \"Hello\"\n```\n\nNOTE: Hug is running on top Falcon which is not an asynchronous server. Even if using\nasyncio, requests will still be processed synchronously.\n\nUsing Docker\n===================\n\nIf you like to develop in Docker and keep your system clean, you can do that but you'll need to first install [Docker Compose](https://docs.docker.com/compose/install/).\n\nOnce you've done that, you'll need to `cd` into the `docker` directory and run the web server (Gunicorn) specified in `./docker/gunicorn/Dockerfile`, after which you can preview the output of your API in the browser on your host machine.\n\n```bash\n$ cd ./docker\n# This will run Gunicorn on port 8000 of the Docker container.\n$ docker-compose up gunicorn\n\n# From the host machine, find your Dockers IP address.\n# For Windows & Mac:\n$ docker-machine ip default\n\n# For Linux:\n$ ifconfig docker0 | grep 'inet' | cut -d: -f2 | awk '{ print $1}' | head -n1\n```\n\nBy default, the IP is 172.17.0.1. Assuming that's the IP you see, as well, you would then go to `http://172.17.0.1:8000/` in your browser to view your API.\n\nYou can also log into a Docker container that you can consider your work space. This workspace has Python and Pip installed so you can use those tools within Docker. If you need to test the CLI interface, for example, you would use this.\n\n```bash\n$ docker-compose run workspace bash\n```\n\nOn your Docker `workspace` container, the `./docker/templates` directory on your host computer is mounted to `/src` in the Docker container. This is specified under `services` > `app` of `./docker/docker-compose.yml`.\n\n```bash\nbash-4.3# cd /src\nbash-4.3# tree\n.\n├── __init__.py\n└── handlers\n    ├── birthday.py\n    └── hello.py\n\n1 directory, 3 files\n```\n\nSecurity contact information\n===================\n\nhug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base.\nIf you find or encounter any potential security issues, please let us know right away so we can resolve them.\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\nWhy hug?\n===================\n\nHUG simply stands for Hopefully Useful Guide. This represents the project's goal to help guide developers into creating well written and intuitive APIs.\n\n--------------------------------------------\n\nThanks and I hope you find *this* hug helpful as you develop your next Python API!\n\n~Timothy Crosley\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7080078125,
          "content": "# Security Policy\n\nhug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base.\nIf you find or encounter any potential security issues, please let us know right away so we can resolve them.\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.5.6   | :white_check_mark: |\n\nCurrently, only the latest version of hug will receive security fixes.\n\n## Reporting a Vulnerability\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.2685546875,
          "content": "environment:\n  # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the\n  # /E:ON and /V:ON options are not enabled in the batch script intepreter\n  # See: http://stackoverflow.com/a/13751649/163740\n  CMD_IN_ENV: \"cmd /E:ON /V:ON /C .\\\\appveyor\\\\run_with_env.cmd\"\n  TOX_ENV: \"pywin\"\n\n  matrix:\n    - PYTHON: \"C:\\\\Python35-x64\"\n      PYTHON_VERSION: \"3.5.1\"\n      PYTHON_ARCH: \"64\"\n\ninstall:\n  # Download setup scripts and unzip\n  - ps: \"wget https://github.com/cloudify-cosmo/appveyor-utils/archive/master.zip -OutFile ./master.zip\"\n  - \"7z e master.zip */appveyor/* -oappveyor\"\n\n  # Install Python (from the official .msi of http://python.org) and pip when\n  # not already installed.\n  - \"powershell ./appveyor/install.ps1\"\n\n  # Prepend newly installed Python to the PATH of this build (this cannot be\n  # done from inside the powershell script as it would require to restart\n  # the parent CMD process).\n  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n\n  # Check that we have the expected version and architecture for Python\n  - \"python --version\"\n  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n\nbuild: false  # Not a C# project, build stuff at the test step instead.\n\nbefore_test:\n  - \"%CMD_IN_ENV% pip install tox\"\n\ntest_script:\n  - \"%CMD_IN_ENV% tox -e %TOX_ENV%\"\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hug",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.2294921875,
          "content": "[tool.portray]\ndocs_dir = \"documentation\"\nextra_dirs = [\"examples\", \"artwork\"]\n\n[tool.portray.mkdocs.theme]\nfavicon = \"artwork/koala.png\"\nlogo = \"artwork/koala.png\"\nname = \"material\"\npalette = {primary = \"blue grey\", accent = \"green\"}\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2314453125,
          "content": "[wheel]\nuniversal = 1\n\n[flake8]\nignore = F401,F403,E502,E123,E127,E128,E303,E713,E111,E241,E302,E121,E261,W391,E731,W503,E305\nmax-line-length = 120\n\n[metadata]\nlicense_file = LICENSE\n\n[aliases]\ntest=pytest\n\n[tool:pytest]\naddopts = tests\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.8994140625,
          "content": "#!/usr/bin/env python\n\"\"\"setup.py\n\nDefines the setup instructions for the hug framework\n\nCopyright (C) 2016  Timothy Edmund Crosley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\nto permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\"\"\"\nimport glob\nimport os\nimport sys\nfrom os import path\n\nfrom setuptools import Extension, setup\n\nMYDIR = path.abspath(os.path.dirname(__file__))\nCYTHON = False\nJYTHON = \"java\" in sys.platform\n\next_modules = []\ncmdclass = {}\n\ntry:\n    sys.pypy_version_info\n    PYPY = True\nexcept AttributeError:\n    PYPY = False\n\nif not PYPY and not JYTHON:\n    if \"--without-cython\" in sys.argv:\n        sys.argv.remove(\"--without-cython\")\n        CYTHON = False\n    else:\n        try:\n            from Cython.Distutils import build_ext\n\n            CYTHON = True\n        except ImportError:\n            CYTHON = False\n\nif CYTHON:\n\n    def list_modules(dirname):\n        filenames = glob.glob(path.join(dirname, \"*.py\"))\n\n        module_names = []\n        for name in filenames:\n            module, ext = path.splitext(path.basename(name))\n            if module != \"__init__\":\n                module_names.append(module)\n\n        return module_names\n\n    ext_modules = [\n        Extension(\"hug.\" + ext, [path.join(\"hug\", ext + \".py\")])\n        for ext in list_modules(path.join(MYDIR, \"hug\"))\n    ]\n    cmdclass[\"build_ext\"] = build_ext\n\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:  # Loads in the README for PyPI\n    long_description = f.read()\n\n\nsetup(\n    name=\"hug\",\n    version=\"2.6.1\",\n    description=\"A Python framework that makes developing APIs \"\n    \"as simple as possible, but no simpler.\",\n    long_description=long_description,\n    # PEP 566, the new PyPI, and setuptools>=38.6.0 make markdown possible\n    long_description_content_type=\"text/markdown\",\n    author=\"Timothy Crosley\",\n    author_email=\"timothy.crosley@gmail.com\",\n    # These appear in the left hand side bar on PyPI\n    url=\"https://github.com/hugapi/hug\",\n    project_urls={\n        \"Documentation\": \"http://www.hug.rest/\",\n        \"Gitter\": \"https://gitter.im/timothycrosley/hug\",\n    },\n    license=\"MIT\",\n    entry_points={\"console_scripts\": [\"hug = hug:development_runner.hug.interface.cli\"]},\n    packages=[\"hug\"],\n    requires=[\"falcon\", \"requests\"],\n    install_requires=[\"falcon==2.0.0\", \"requests\"],\n    tests_require=[\"pytest\", \"marshmallow\"],\n    ext_modules=ext_modules,\n    cmdclass=cmdclass,\n    python_requires=\">=3.5\",\n    keywords=\"Web, Python, Python3, Refactoring, REST, Framework, RPC\",\n    classifiers=[\n        \"Development Status :: 6 - Mature\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Environment :: Console\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Topic :: Utilities\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.4384765625,
          "content": "[tox]\nenvlist=py{35,36,37,38,py3}-marshmallow{2,3}, cython-marshmallow{2,3}\n\n[testenv]\ndeps=\n    -rrequirements/build_common.txt\n    marshmallow2: marshmallow <3.0\n    marshmallow3: marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=py.test --durations 3 --cov-report html --cov hug -n auto tests\n\n[testenv:py37-black]\ndeps=\n    -rrequirements/build_style_tools.txt\n    marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=black --check --verbose -l 100 hug\n\n[testenv:py37-vulture]\ndeps=\n    -rrequirements/build_style_tools.txt\n    marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=vulture hug --min-confidence 100 --ignore-names req_succeeded\n\n\n[testenv:py37-flake8]\ndeps=\n    -rrequirements/build_style_tools.txt\n    marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=flake8 hug\n\n[testenv:py37-bandit]\ndeps=\n    -rrequirements/build_style_tools.txt\n    marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=bandit -r hug/ -ll\n\n[testenv:py37-isort]\ndeps=\n    -rrequirements/build_style_tools.txt\n    marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=isort -c --diff --recursive hug\n\n[testenv:py37-safety]\ndeps=\n    -rrequirements/build_style_tools.txt\n    marshmallow==3.0.0rc6\n\nwhitelist_externals=flake8\ncommands=safety check -i 36810\n\n[testenv:pywin]\ndeps =-rrequirements/build_windows.txt\nbasepython = {env:PYTHON:}\\python.exe\ncommands=py.test hug -n auto tests\n\n[testenv:cython]\ndeps=Cython\n     -rrequirements/build.txt\n"
        }
      ]
    }
  ]
}