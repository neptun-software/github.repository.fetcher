{
  "metadata": {
    "timestamp": 1736560651708,
    "page": 291,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lmcinnes/umap",
      "stars": 7559,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03125,
          "content": "*.ipynb linguist-language=Python"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4052734375,
          "content": "# virtual environment\nvenv\n\n# non-stylistic pycharm configs\n.idea/misc.xml\n.idea/modules.xml\n.idea/umap.iml\n.idea/vcs.xml\n.idea/workspace.xml\n.idea/dictionaries\n.idea/other.xml\n\n# Mac Finder layout\n.DS_Store\n\n# IPython/Jupyter notebook checkpoints\n*.ipynb_checkpoints\n\n# Python 2.x & 3.x bytecode cache\n*.pyc\n*__pycache__\n\n# metadata from pip-installing repo\numap_learn.egg-info\n\n# docs\ndoc/auto_examples\ndoc/_build"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".pep8speaks.yml",
          "type": "blob",
          "size": 0.1162109375,
          "content": "pycodestyle:  # Same as scanner.linter value. Other option is flake8\n    max-line-length: 88  # Default is 79 in PEP 8\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.62109375,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: doc/conf.py\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs_requirements.txt\n    - method: pip\n      path: .\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.021484375,
          "content": "language: python\n\ncache:\n  apt: true\n  # We use three different cache directory\n  # to work around a Travis bug with multi-platform cache\n  directories:\n  - $HOME/.cache/pip\n  - $HOME/download\nenv:\n  global:\n    # Directory where tests are run from\n    - TEST_DIR=/tmp/test_dir/\n    - MODULE=umap\n\nmatrix:\n  include:\n    - python: 3.6\n      os: linux\n    - env: DISTRIB=\"conda\" PYTHON_VERSION=\"3.7\" NUMPY_VERSION=\"1.17\" SCIPY_VERSION=\"1.3.1\"\n      os: linux\n    - env: DISTRIB=\"conda\" PYTHON_VERSION=\"3.8\" NUMPY_VERSION=\"1.20.0\" SCIPY_VERSION=\"1.6.0\"\n      os: linux\n    - env: DISTRIB=\"conda\" PYTHON_VERSION=\"3.8\" COVERAGE=\"true\" NUMPY_VERSION=\"1.20.0\" SCIPY_VERSION=\"1.6.0\"\n      os: linux\n#    - env: DISTRIB=\"conda\" PYTHON_VERSION=\"3.7\" NUMBA_VERSION=\"0.51.2\"\n#      os: osx\n#      language: generic\n#    - env: DISTRIB=\"conda\" PYTHON_VERSION=\"3.8\" NUMBA_VERSION=\"0.51.2\"\n#      os: osx\n#      language: generic\n\ninstall: source ci_scripts/install.sh\nscript: travis_wait 90 bash ci_scripts/test.sh\nafter_success: source ci_scripts/success.sh\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1455078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at leland.mcinnes@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.8837890625,
          "content": "# Contributing\n\nContributions of all kinds are welcome. In particular pull requests are appreciated. \nThe authors will endeavour to help walk you through any issues in the pull request\ndiscussion, so please feel free to open a pull request even if you are new to such things.\n\n## Issues\n\nThe easiest contribution to make is to [file an issue](https://github.com/lmcinnes/umap/issues/new).\nIt is beneficial if you check the [FAQ](https://umap-learn.readthedocs.io/en/latest/faq.html), \nand do a cursory search of [existing issues](https://github.com/lmcinnes/umap/issues?utf8=%E2%9C%93&q=is%3Aissue).\nIt is also helpful, but not necessary, if you can provide clear instruction for \nhow to reproduce a problem. If you have resolved an issue yourself please consider\ncontributing to the FAQ to add your problem, and its resolution, so others can\nbenefit from your work.\n\n## Documentation\n\nContributing to documentation is the easiest way to get started. Providing simple\nclear or helpful documentation for new users is critical. Anything that *you* as \na new user found hard to understand, or difficult to work out, are excellent places\nto begin. Contributions to more detailed and descriptive error messages is\nespecially appreciated. To contribute to the documentation please \n[fork the project](https://github.com/lmcinnes/umap/issues#fork-destination-box)\ninto your own repository, make changes there, and then submit a pull request.\n\n### Building the Documentation Locally\n\nTo build the docs locally, install the documentation tools requirements:\n\n```bash\npip install -r docs_requirements.txt\n```\n\nThen run:\n\n```bash\nsphinx-build -b html doc doc/_build\n```\n\nThis will build the documentation in HTML format. You will be able to find the output\nin the `doc/_build` folder.\n\n## Code\n\nCode contributions are always welcome, from simple bug fixes, to new features. To\ncontribute code please \n[fork the project](https://github.com/lmcinnes/umap/issues#fork-destination-box)\ninto your own repository, make changes there, and then submit a pull request. If\nyou are fixing a known issue please add the issue number to the PR message. If you\nare fixing a new issue feel free to file an issue and then reference it in the PR.\nYou can [browse open issues](https://github.com/lmcinnes/umap/issues), \nor consult the [project roadmap](https://github.com/lmcinnes/umap/issues/15), for potential code\ncontributions. Fixes for issues tagged with 'help wanted' are especially appreciated.\n\n### Code formatting\n\nIf possible, install the [black code formatter](https://github.com/python/black) (e.g.\n`pip install black`) and run it before submitting a pull request. This helps maintain consistency\nacross the code, but also there is a check in the Travis-CI continuous integration system which\nwill show up as a failure in the pull request if `black` detects that it hasn't been run.\n\nFormatting is as simple as running:\n\n```bash\nblack .\n```\n\nin the root of the project.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.478515625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2017, Leland McInnes\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.41796875,
          "content": "# make gh-pages in repo base directory to automatically build and deploy documents to github\n\ngh-pages:\n\techo \"Make gh-pages\"\n\tcd doc; make html\n\tgit checkout gh-pages\n\trm -rf _sources _static _modules _downloads _images auto_examples\n\tmv -fv doc/_build/html/* .\n\trm -rf doc\n\tgit add -A\n\tgit commit -m \"Generated gh-pages for `git log master -1 --pretty=short --abbrev-commit`\" && git push origin gh-pages ; git checkout master\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 20.9267578125,
          "content": ".. -*- mode: rst -*-\n\n.. image:: doc/logo_large.png\n  :width: 600\n  :alt: UMAP logo\n  :align: center\n\n|pypi_version|_ |pypi_downloads|_\n\n|conda_version|_ |conda_downloads|_\n\n|License|_ |build_status|_ |Coverage|_\n\n|Docs|_ |joss_paper|_\n\n.. |pypi_version| image:: https://img.shields.io/pypi/v/umap-learn.svg\n.. _pypi_version: https://pypi.python.org/pypi/umap-learn/\n\n.. |pypi_downloads| image:: https://pepy.tech/badge/umap-learn/month\n.. _pypi_downloads: https://pepy.tech/project/umap-learn\n\n.. |conda_version| image:: https://anaconda.org/conda-forge/umap-learn/badges/version.svg\n.. _conda_version: https://anaconda.org/conda-forge/umap-learn\n\n.. |conda_downloads| image:: https://anaconda.org/conda-forge/umap-learn/badges/downloads.svg\n.. _conda_downloads: https://anaconda.org/conda-forge/umap-learn\n\n.. |License| image:: https://img.shields.io/pypi/l/umap-learn.svg\n.. _License: https://github.com/lmcinnes/umap/blob/master/LICENSE.txt\n\n.. |build_status| image:: https://dev.azure.com/TutteInstitute/build-pipelines/_apis/build/status/lmcinnes.umap?branchName=master\n.. _build_status: https://dev.azure.com/TutteInstitute/build-pipelines/_build/latest?definitionId=2&branchName=master\n\n.. |Coverage| image:: https://coveralls.io/repos/github/lmcinnes/umap/badge.svg\n.. _Coverage: https://coveralls.io/github/lmcinnes/umap\n\n.. |Docs| image:: https://readthedocs.org/projects/umap-learn/badge/?version=latest\n.. _Docs: https://umap-learn.readthedocs.io/en/latest/?badge=latest\n\n.. |joss_paper| image:: http://joss.theoj.org/papers/10.21105/joss.00861/status.svg\n.. _joss_paper: https://doi.org/10.21105/joss.00861\n\n====\nUMAP\n====\n\nUniform Manifold Approximation and Projection (UMAP) is a dimension reduction\ntechnique that can be used for visualisation similarly to t-SNE, but also for\ngeneral non-linear dimension reduction. The algorithm is founded on three\nassumptions about the data:\n\n1. The data is uniformly distributed on a Riemannian manifold;\n2. The Riemannian metric is locally constant (or can be approximated as such);\n3. The manifold is locally connected.\n\nFrom these assumptions it is possible to model the manifold with a fuzzy\ntopological structure. The embedding is found by searching for a low dimensional\nprojection of the data that has the closest possible equivalent fuzzy\ntopological structure.\n\nThe details for the underlying mathematics can be found in\n`our paper on ArXiv <https://arxiv.org/abs/1802.03426>`_:\n\nMcInnes, L, Healy, J, *UMAP: Uniform Manifold Approximation and Projection\nfor Dimension Reduction*, ArXiv e-prints 1802.03426, 2018\n\nA broader introduction to UMAP targetted the scientific community can be found \nin our `paper published in Nature Review Methods Primers  <https://doi.org/10.1038/s43586-024-00363-x>`_:\n\nHealy, J., McInnes, L. *Uniform manifold approximation and projection*. Nat Rev Methods \nPrimers 4, 82 (2024). \n\nA read only version of this paper can accessed via `link <https://rdcu.be/d0YZT>`_\n\nThe important thing is that you don't need to worry about that—you can use\nUMAP right now for dimension reduction and visualisation as easily as a drop\nin replacement for scikit-learn's t-SNE.\n\nDocumentation is `available via Read the Docs <https://umap-learn.readthedocs.io/>`_.\n\n**New: this package now also provides support for densMAP.** The densMAP algorithm augments UMAP\nto preserve local density information in addition to the topological structure of the data.\nDetails of this method are described in the following `paper <https://doi.org/10.1038/s41587-020-00801-7>`_:\n\nNarayan, A, Berger, B, Cho, H, *Assessing Single-Cell Transcriptomic Variability\nthrough Density-Preserving Data Visualization*, Nature Biotechnology, 2021\n\n----------\nInstalling\n----------\n\nUMAP depends upon ``scikit-learn``, and thus ``scikit-learn``'s dependencies\nsuch as ``numpy`` and ``scipy``. UMAP adds a requirement for ``numba`` for\nperformance reasons. The original version used Cython, but the improved code\nclarity, simplicity and performance of Numba made the transition necessary.\n\nRequirements:\n\n* Python 3.6 or greater\n* numpy\n* scipy\n* scikit-learn\n* numba\n* tqdm\n* `pynndescent <https://github.com/lmcinnes/pynndescent>`_\n\nRecommended packages:\n\n* For plotting\n   * matplotlib\n   * datashader\n   * holoviews\n* for Parametric UMAP\n   * tensorflow > 2.0.0\n\n**Install Options**\n\nConda install, via the excellent work of the conda-forge team:\n\n.. code:: bash\n\n    conda install -c conda-forge umap-learn\n\nThe conda-forge packages are available for Linux, OS X, and Windows 64 bit.\n\nPyPI install, presuming you have numba and sklearn and all its requirements\n(numpy and scipy) installed:\n\n.. code:: bash\n\n    pip install umap-learn\n\nIf you wish to use the plotting functionality you can use\n\n.. code:: bash\n\n    pip install umap-learn[plot]\n\nto install all the plotting dependencies.\n\nIf you wish to use Parametric UMAP, you need to install Tensorflow, which can be\ninstalled either using the instructions at https://www.tensorflow.org/install\n(recommended) or using\n\n.. code:: bash\n\n    pip install umap-learn[parametric_umap]\n\nfor a CPU-only version of Tensorflow.\n\nIf you're on an x86 processor, you can also optionally install `tbb`, which will\nprovide additional CPU optimizations:\n\n.. code:: bash\n\n    pip install umap-learn[tbb]\n\nIf pip is having difficulties pulling the dependencies then we'd suggest installing\nthe dependencies manually using anaconda followed by pulling umap from pip:\n\n.. code:: bash\n\n    conda install numpy scipy\n    conda install scikit-learn\n    conda install numba\n    pip install umap-learn\n\nFor a manual install get this package:\n\n.. code:: bash\n\n    wget https://github.com/lmcinnes/umap/archive/master.zip\n    unzip master.zip\n    rm master.zip\n    cd umap-master\n\nOptionally, install the requirements through Conda:\n\n.. code:: bash\n\n    conda install scikit-learn numba\n\nThen install the package\n\n.. code:: bash\n\n    python -m pip install -e .\n\n---------------\nHow to use UMAP\n---------------\n\nThe umap package inherits from sklearn classes, and thus drops in neatly\nnext to other sklearn transformers with an identical calling API.\n\n.. code:: python\n\n    import umap\n    from sklearn.datasets import load_digits\n\n    digits = load_digits()\n\n    embedding = umap.UMAP().fit_transform(digits.data)\n\nThere are a number of parameters that can be set for the UMAP class; the\nmajor ones are as follows:\n\n -  ``n_neighbors``: This determines the number of neighboring points used in\n    local approximations of manifold structure. Larger values will result in\n    more global structure being preserved at the loss of detailed local\n    structure. In general this parameter should often be in the range 5 to\n    50, with a choice of 10 to 15 being a sensible default.\n\n -  ``min_dist``: This controls how tightly the embedding is allowed compress\n    points together. Larger values ensure embedded points are more evenly\n    distributed, while smaller values allow the algorithm to optimise more\n    accurately with regard to local structure. Sensible values are in the\n    range 0.001 to 0.5, with 0.1 being a reasonable default.\n\n -  ``metric``: This determines the choice of metric used to measure distance\n    in the input space. A wide variety of metrics are already coded, and a user\n    defined function can be passed as long as it has been JITd by numba.\n\nAn example of making use of these options:\n\n.. code:: python\n\n    import umap\n    from sklearn.datasets import load_digits\n\n    digits = load_digits()\n\n    embedding = umap.UMAP(n_neighbors=5,\n                          min_dist=0.3,\n                          metric='correlation').fit_transform(digits.data)\n\nUMAP also supports fitting to sparse matrix data. For more details\nplease see `the UMAP documentation <https://umap-learn.readthedocs.io/>`_\n\n----------------\nBenefits of UMAP\n----------------\n\nUMAP has a few signficant wins in its current incarnation.\n\nFirst of all UMAP is *fast*. It can handle large datasets and high\ndimensional data without too much difficulty, scaling beyond what most t-SNE\npackages can manage. This includes very high dimensional sparse datasets. UMAP\nhas successfully been used directly on data with over a million dimensions.\n\nSecond, UMAP scales well in embedding dimension—it isn't just for\nvisualisation! You can use UMAP as a general purpose dimension reduction\ntechnique as a preliminary step to other machine learning tasks. With a\nlittle care it partners well with the `hdbscan\n<https://github.com/scikit-learn-contrib/hdbscan>`_ clustering library (for\nmore details please see `Using UMAP for Clustering\n<https://umap-learn.readthedocs.io/en/latest/clustering.html>`_).\n\nThird, UMAP often performs better at preserving some aspects of global structure\nof the data than most implementations of t-SNE. This means that it can often\nprovide a better \"big picture\" view of your data as well as preserving local neighbor\nrelations.\n\nFourth, UMAP supports a wide variety of distance functions, including\nnon-metric distance functions such as *cosine distance* and *correlation\ndistance*. You can finally embed word vectors properly using cosine distance!\n\nFifth, UMAP supports adding new points to an existing embedding via\nthe standard sklearn ``transform`` method. This means that UMAP can be\nused as a preprocessing transformer in sklearn pipelines.\n\nSixth, UMAP supports supervised and semi-supervised dimension reduction.\nThis means that if you have label information that you wish to use as\nextra information for dimension reduction (even if it is just partial\nlabelling) you can do that—as simply as providing it as the ``y``\nparameter in the fit method.\n\nSeventh, UMAP supports a variety of additional experimental features including: an\n\"inverse transform\" that can approximate a high dimensional sample that would map to\na given position in the embedding space; the ability to embed into non-euclidean\nspaces including hyperbolic embeddings, and embeddings with uncertainty; very\npreliminary support for embedding dataframes also exists.\n\nFinally, UMAP has solid theoretical foundations in manifold learning\n(see `our paper on ArXiv <https://arxiv.org/abs/1802.03426>`_).\nThis both justifies the approach and allows for further\nextensions that will soon be added to the library.\n\n------------------------\nPerformance and Examples\n------------------------\n\nUMAP is very efficient at embedding large high dimensional datasets. In\nparticular it scales well with both input dimension and embedding dimension.\nFor the best possible performance we recommend installing the nearest neighbor\ncomputation library `pynndescent <https://github.com/lmcinnes/pynndescent>`_ .\nUMAP will work without it, but if installed it will run faster, particularly on\nmulticore machines.\n\nFor a problem such as the 784-dimensional MNIST digits dataset with\n70000 data samples, UMAP can complete the embedding in under a minute (as\ncompared with around 45 minutes for scikit-learn's t-SNE implementation).\nDespite this runtime efficiency, UMAP still produces high quality embeddings.\n\nThe obligatory MNIST digits dataset, embedded in 42\nseconds (with pynndescent installed and after numba jit warmup)\nusing a 3.1 GHz Intel Core i7 processor (n_neighbors=10, min_dist=0.001):\n\n.. image:: images/umap_example_mnist1.png\n    :alt: UMAP embedding of MNIST digits\n\nThe MNIST digits dataset is fairly straightforward, however. A better test is\nthe more recent \"Fashion MNIST\" dataset of images of fashion items (again\n70000 data sample in 784 dimensions). UMAP\nproduced this embedding in 49 seconds (n_neighbors=5, min_dist=0.1):\n\n.. image:: images/umap_example_fashion_mnist1.png\n    :alt: UMAP embedding of \"Fashion MNIST\"\n\nThe UCI shuttle dataset (43500 sample in 8 dimensions) embeds well under\n*correlation* distance in 44 seconds (note the longer time\nrequired for correlation distance computations):\n\n.. image:: images/umap_example_shuttle.png\n    :alt: UMAP embedding the UCI Shuttle dataset\n\nThe following is a densMAP visualization of the MNIST digits dataset with 784 features\nbased on the same parameters as above (n_neighbors=10, min_dist=0.001). densMAP reveals\nthat the cluster corresponding to digit 1 is noticeably denser, suggesting that\nthere are fewer degrees of freedom in the images of 1 compared to other digits.\n\n.. image:: images/densmap_example_mnist.png\n    :alt: densMAP embedding of the MNIST dataset\n\n--------\nPlotting\n--------\n\nUMAP includes a subpackage ``umap.plot`` for plotting the results of UMAP embeddings.\nThis package needs to be imported separately since it has extra requirements\n(matplotlib, datashader and holoviews). It allows for fast and simple plotting and\nattempts to make sensible decisions to avoid overplotting and other pitfalls. An\nexample of use:\n\n.. code:: python\n\n    import umap\n    import umap.plot\n    from sklearn.datasets import load_digits\n\n    digits = load_digits()\n\n    mapper = umap.UMAP().fit(digits.data)\n    umap.plot.points(mapper, labels=digits.target)\n\nThe plotting package offers basic plots, as well as interactive plots with hover\ntools and various diagnostic plotting options. See the documentation for more details.\n\n---------------\nParametric UMAP\n---------------\n\nParametric UMAP provides support for training a neural network to learn a UMAP based\ntransformation of data. This can be used to support faster inference of new unseen\ndata, more robust inverse transforms, autoencoder versions of UMAP and\nsemi-supervised classification (particularly for data well separated by UMAP and very\nlimited amounts of labelled data). See the\n`documentation of Parametric UMAP <https://umap-learn.readthedocs.io/en/0.5dev/parametric_umap.html>`_\nor the\n`example notebooks <https://github.com/lmcinnes/umap/tree/master/notebooks/Parametric_UMAP>`_\nfor more.\n\n\n-------\ndensMAP\n-------\n\nThe densMAP algorithm augments UMAP to additionally preserve local density information\nin addition to the topological structure captured by UMAP. One can easily run densMAP\nusing the umap package by setting the ``densmap`` input flag:\n\n.. code:: python\n\n    embedding = umap.UMAP(densmap=True).fit_transform(data)\n\nThis functionality is built upon the densMAP `implementation <https://github.com/hhcho/densvis>`_ provided by the developers\nof densMAP, who also contributed to integrating densMAP into the umap package.\n\ndensMAP inherits all of the parameters of UMAP. The following is a list of additional\nparameters that can be set for densMAP:\n\n - ``dens_frac``: This determines the fraction of epochs (a value between 0 and 1) that will include the density-preservation term in the optimization objective. This parameter is set to 0.3 by default. Note that densMAP switches density optimization on after an initial phase of optimizing the embedding using UMAP.\n\n - ``dens_lambda``: This determines the weight of the density-preservation objective. Higher values prioritize density preservation, and lower values (closer to zero) prioritize the UMAP objective. Setting this parameter to zero reduces the algorithm to UMAP. Default value is 2.0.\n\n - ``dens_var_shift``: Regularization term added to the variance of local densities in the embedding for numerical stability. We recommend setting this parameter to 0.1, which consistently works well in many settings.\n\n - ``output_dens``: When this flag is True, the call to ``fit_transform`` returns, in addition to the embedding, the local radii (inverse measure of local density defined in the `densMAP paper <https://doi.org/10.1101/2020.05.12.077776>`_) for the original dataset and for the embedding. The output is a tuple ``(embedding, radii_original, radii_embedding)``. Note that the radii are log-transformed. If False, only the embedding is returned. This flag can also be used with UMAP to explore the local densities of UMAP embeddings. By default this flag is False.\n\nFor densMAP we recommend larger values of ``n_neighbors`` (e.g. 30) for reliable estimation of local density.\n\nAn example of making use of these options (based on a subsample of the mnist_784 dataset):\n\n.. code:: python\n\n    import umap\n    from sklearn.datasets import fetch_openml\n    from sklearn.utils import resample\n\n    digits = fetch_openml(name='mnist_784')\n    subsample, subsample_labels = resample(digits.data, digits.target, n_samples=7000,\n                                           stratify=digits.target, random_state=1)\n\n    embedding, r_orig, r_emb = umap.UMAP(densmap=True, dens_lambda=2.0, n_neighbors=30,\n                                         output_dens=True).fit_transform(subsample)\n\nSee `the documentation <https://umap-learn.readthedocs.io/en/0.5dev/densmap_demo.html>`_ for more details.\n\n----------------\nHelp and Support\n----------------\n\nDocumentation is at `Read the Docs <https://umap-learn.readthedocs.io/>`_.\nThe documentation `includes a FAQ <https://umap-learn.readthedocs.io/en/latest/faq.html>`_ that\nmay answer your questions. If you still have questions then please\n`open an issue <https://github.com/lmcinnes/umap/issues/new>`_\nand I will try to provide any help and guidance that I can.\n\n--------\nCitation\n--------\n\nIf you make use of this software for your work we would appreciate it if you\nwould cite the paper from the Journal of Open Source Software:\n\n.. code:: bibtex\n\n    @article{mcinnes2018umap-software,\n      title={UMAP: Uniform Manifold Approximation and Projection},\n      author={McInnes, Leland and Healy, John and Saul, Nathaniel and Grossberger, Lukas},\n      journal={The Journal of Open Source Software},\n      volume={3},\n      number={29},\n      pages={861},\n      year={2018}\n    }\n\nIf you would like to cite this algorithm in your work the ArXiv paper is the\ncurrent reference:\n\n.. code:: bibtex\n\n   @article{2018arXivUMAP,\n        author = {{McInnes}, L. and {Healy}, J. and {Melville}, J.},\n        title = \"{UMAP: Uniform Manifold Approximation\n        and Projection for Dimension Reduction}\",\n        journal = {ArXiv e-prints},\n        archivePrefix = \"arXiv\",\n        eprint = {1802.03426},\n        primaryClass = \"stat.ML\",\n        keywords = {Statistics - Machine Learning,\n                    Computer Science - Computational Geometry,\n                    Computer Science - Learning},\n        year = 2018,\n        month = feb,\n   }\n\nIf you found the Nature Primer introduction useful please cite the following reference:\n\n.. code:: bibtex\n\n    @article{Healy2024,\n      author={Healy, John\n      and McInnes, Leland},\n      title={Uniform manifold approximation and projection},\n      journal={Nature Reviews Methods Primers},\n      year={2024},\n      month={Nov},\n      day={21},\n      volume={4},\n      number={1},\n      pages={82},\n      abstract={Uniform manifold approximation and projection is a nonlinear dimension reduction method often used for visualizing data and as pre-processing for further machine-learning tasks such as clustering. In this Primer, we provide an introduction to the uniform manifold approximation and projection algorithm, the intuitions behind how it works, how best to apply it on data and how to interpret and understand results.},\n      issn={2662-8449},\n      doi={10.1038/s43586-024-00363-x},\n      url={https://doi.org/10.1038/s43586-024-00363-x}\n    }\n\nAdditionally, if you use the densMAP algorithm in your work please cite the following reference:\n\n.. code:: bibtex\n\n    @article {NBC2020,\n        author = {Narayan, Ashwin and Berger, Bonnie and Cho, Hyunghoon},\n        title = {Assessing Single-Cell Transcriptomic Variability through Density-Preserving Data Visualization},\n        journal = {Nature Biotechnology},\n        year = {2021},\n        doi = {10.1038/s41587-020-00801-7},\n        publisher = {Springer Nature},\n        URL = {https://doi.org/10.1038/s41587-020-00801-7},\n        eprint = {https://www.biorxiv.org/content/early/2020/05/14/2020.05.12.077776.full.pdf},\n    }\n\nIf you use the Parametric UMAP algorithm in your work please cite the following reference:\n\n.. code:: bibtex\n\n    @article {SMG2020,\n        author = {Sainburg, Tim and McInnes, Leland and Gentner, Timothy Q.},\n        title = {Parametric UMAP: learning embeddings with deep neural networks for representation and semi-supervised learning},\n        journal = {ArXiv e-prints},\n        archivePrefix = \"arXiv\",\n        eprint = {2009.12981},\n        primaryClass = \"stat.ML\",\n        keywords = {Statistics - Machine Learning,\n                    Computer Science - Computational Geometry,\n                    Computer Science - Learning},\n        year = 2020,\n        }\n\n\n-------\nLicense\n-------\n\nThe umap package is 3-clause BSD licensed.\n\nWe would like to note that the umap package makes heavy use of\nNumFOCUS sponsored projects, and would not be possible without\ntheir support of those projects, so please `consider contributing to NumFOCUS <https://www.numfocus.org/membership>`_.\n\n------------\nContributing\n------------\n\nContributions are more than welcome! There are lots of opportunities\nfor potential projects, so please get in touch if you would like to\nhelp out. Everything from code to notebooks to\nexamples and documentation are all *equally valuable* so please don't feel\nyou can't contribute. To contribute please\n`fork the project <https://github.com/lmcinnes/umap/issues#fork-destination-box>`_\nmake your changes and\nsubmit a pull request. We will do our best to work through any issues with\nyou and get your code merged into the main branch.\n\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.6953125,
          "content": "build: \"off\"\n\nenvironment:\n  matrix:\n    - PYTHON_VERSION: \"3.7\"\n      MINICONDA: C:\\Miniconda3-x64\n    - PYTHON_VERSION: \"3.8\"\n      MINICONDA: C:\\Miniconda3-x64\n\ninit:\n  - \"ECHO %PYTHON_VERSION% %MINICONDA%\"\n\ninstall:\n  - \"set PATH=%MINICONDA%;%MINICONDA%\\\\Scripts;%PATH%\"\n  - conda config --set always_yes yes --set changeps1 no\n  - conda update -q conda\n  - conda info -a\n  - \"conda create -q -n test-environment python=%PYTHON_VERSION% numpy scipy scikit-learn numba pandas bokeh holoviews datashader scikit-image pytest\"\n  - activate test-environment\n  - pip install \"tensorflow>=2.1\"\n  - pip install pytest-benchmark\n  - pip install -e .\n\ntest_script:\n  - pytest --show-capture=no -v --disable-warnings\n  "
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 5.6298828125,
          "content": "# Trigger a build when there is a push to the main branch or a tag starts with release-\ntrigger:\n  branches:\n    include:\n    - master\n  tags:\n    include:\n    - release-*\n\n# Trigger a build when there is a pull request to the main branch\n# Ignore PRs that are just updating the docs\npr:\n  branches:\n    include:\n    - master\n    exclude:\n    - doc/*\n    - README.rst\n\nparameters:\n  - name: includeReleaseCandidates\n    displayName: \"Allow pre-release dependencies\"\n    type: boolean\n    default: false\n\n\nvariables:\n  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]\n\nstages:\n  - stage: RunAllTests\n    displayName: Run test suite\n    jobs:\n      - job: run_platform_tests\n        strategy:\n          matrix:\n            mac_py39:\n              imageName: 'macOS-latest'\n              python.version: '3.9'\n            linux_py39:\n              imageName: 'ubuntu-latest'\n              python.version: '3.9'\n            windows_py39:\n              imageName: 'windows-latest'\n              python.version: '3.9'\n            mac_py310:\n              imageName: 'macOS-latest'\n              python.version: '3.10'\n            linux_py310:\n              imageName: 'ubuntu-latest'\n              python.version: '3.10'\n            windows_py310:\n              imageName: 'windows-latest'\n              python.version: '3.10'\n            mac_py311:\n              imageName: 'macOS-latest'\n              python.version: '3.11'\n            linux_py311:\n              imageName: 'ubuntu-latest'\n              python.version: '3.11'\n            windows_py311:\n              imageName: 'windows-latest'\n              python.version: '3.11'\n            mac_py312:\n              imageName: 'macOS-latest'\n              python.version: '3.12'\n            linux_py312:\n              imageName: 'ubuntu-latest'\n              python.version: '3.12'\n            windows_py312:\n              imageName: 'windows-latest'\n              python.version: '3.12'\n\n        pool:\n          vmImage: $(imageName)\n\n        steps:\n        - task: UsePythonVersion@0\n          inputs:\n            versionSpec: '$(python.version)'\n          displayName: 'Use Python $(python.version)'\n\n        - script: |\n            python -m pip install --upgrade pip\n          displayName: 'Upgrade pip'\n\n        - script: |\n            pip install -e .\n            pip install .[plot]\n            pip install .[parametric_umap]\n          displayName: 'Install dependencies'\n          condition: ${{ eq(parameters.includeReleaseCandidates, false) }}\n\n        - script: |\n            pip install --pre -e .\n            pip install --pre .[plot]\n            pip install --pre .[parametric_umap]\n          displayName: 'Install dependencies (allow pre-releases)'\n          condition: ${{ eq(parameters.includeReleaseCandidates, true) }}\n\n        - script: |\n            pip install pytest  pytest-azurepipelines pytest-cov pytest-benchmark coveralls\n          displayName: 'Install pytest'\n\n        - script: |\n            # export NUMBA_DISABLE_JIT=1 # Disable numba coverage so tests run on time for now.\n            pytest umap/tests --show-capture=no -v --disable-warnings --junitxml=junit/test-results.xml --cov=umap/ --cov-report=xml --cov-report=html\n          displayName: 'Run tests'\n\n        - bash: |\n            coveralls\n          displayName: 'Publish to coveralls'\n          condition: and(succeeded(), eq(variables.triggeredByPullRequest, false)) # Don't run this for PRs because they can't access pipeline secrets\n          env:\n            COVERALLS_REPO_TOKEN: $(COVERALLS_TOKEN)\n\n        - task: PublishTestResults@2\n          inputs:\n            testResultsFiles: '$(System.DefaultWorkingDirectory)/**/coverage.xml'\n            testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'\n          condition: succeededOrFailed()\n\n  - stage: BuildPublishArtifact\n    dependsOn: RunAllTests\n    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables.triggeredByPullRequest, false))\n    jobs:\n      - job: BuildArtifacts\n        displayName: Build source dists and wheels    \n        pool:\n          vmImage: 'ubuntu-latest'\n        steps:\n        - task: UsePythonVersion@0\n          inputs:\n            versionSpec: '3.10'\n          displayName: 'Use Python 3.10'\n\n        - script: |\n            python -m pip install --upgrade pip\n            pip install wheel\n            pip install -e .\n          displayName: 'Install package locally'\n        \n        - bash: |\n            python setup.py sdist bdist_wheel\n            ls -l dist/\n          displayName: 'Build package'\n\n        - bash: |\n            export PACKAGE_VERSION=\"$(python setup.py --version)\"\n            echo \"Package Version: ${PACKAGE_VERSION}\"\n            echo \"##vso[task.setvariable variable=packageVersionFormatted;]release-${PACKAGE_VERSION}\"\n          displayName: 'Get package version'\n\n        - script: |\n            echo \"Version in git tag $(Build.SourceBranchName) does not match version derived from setup.py $(packageVersionFormatted)\"\n            exit 1\n          displayName: Raise error if version doesnt match tag\n          condition: and(succeeded(), ne(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))\n\n        - task: DownloadSecureFile@1\n          name: PYPIRC_CONFIG\n          displayName: 'Download pypirc'\n          inputs:\n            secureFile: 'pypirc'  \n\n        - script: |\n            pip install twine\n            twine upload --repository pypi --config-file $(PYPIRC_CONFIG.secureFilePath) dist/*\n          displayName: 'Upload to PyPI'\n          condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))\n\n"
        },
        {
          "name": "ci_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs_requirements.txt",
          "type": "blob",
          "size": 0.0751953125,
          "content": "sphinx>=1.8\nsphinx_gallery\nmatplotlib\npillow\nsphinx_rtd_theme\nnumpydoc\nscipy\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper.bib",
          "type": "blob",
          "size": 0.673828125,
          "content": "@article{umap_arxiv,\n     author = {{McInnes}, L. and {Healy}, J.},\n     title = \"{UMAP: Uniform Manifold Approximation\n     and Projection for Dimension Reduction}\",\n     journal = {ArXiv e-prints},\n     archivePrefix = \"arXiv\",\n     eprint = {1802.03426},\n     primaryClass = \"stat.ML\",\n     keywords = {Statistics - Machine Learning,\n                 Computer Science - Computational Geometry,\n                 Computer Science - Learning},\n     year = 2018,\n     month = feb,\n}\n\n@online{umap_repo,\n  author = {Leland McInnes and John Healy and Nathaniel Saul and Lukas Grossberger},\n  title = {UMAP},\n  year = 2018,\n  url = {https://github.com/lmcinnes/umap},\n  urldate = {2018-07-22}\n}"
        },
        {
          "name": "paper.md",
          "type": "blob",
          "size": 1.6171875,
          "content": "---\ntitle: 'UMAP: Uniform Manifold Approximation and Projection'\ntags:\n  - manifold learning\n  - dimension reduction\n  - unsupervised learning\nauthors:\n - name: Leland McInnes\n   orcid: 0000-0003-2143-6834\n   affiliation: 1\n - name: John Healy\n   affiliation: 1\n - name: Nathaniel Saul\n   affiliation: 2\n - name: Lukas Großberger\n   affiliation: \"3, 4\"\naffiliations:\n - name: Tutte Institute for Mathematics and Computing\n   index: 1\n - name: Department of Mathematics and Statistics, Washington State University\n   index: 2\n - name: Ernst Strüngmann Institute for Neuroscience in cooperation with Max Planck Society\n   index: 3\n - name: Donders Institute for Brain, Cognition and Behaviour, Radboud Universiteit\n   index: 4\ndate: 26 July 2018\nbibliography: paper.bib\n---\n\n# Summary\n\nUniform Manifold Approximation and Projection (UMAP) is a dimension reduction technique\nthat can be used for  visualisation similarly to t-SNE, but also for general non-linear\ndimension reduction. UMAP has a rigorous mathematical foundation, but is simple to use,\nwith a scikit-learn compatible API. UMAP is among the fastest manifold learning\nimplementations available -- significantly faster than most t-SNE implementations.\n\nUMAP supports a number of useful features, including the ability to use labels\n(or partial labels) for supervised (or semi-supervised) dimension reduction,\nand the ability to transform new unseen data into a pretrained embedding space.\n\nFor details of the mathematical underpinnings see [@umap_arxiv]. The implementation\ncan be found at [@umap_repo].\n\n-![Fashion MNIST embedded via UMAP](images/umap_example_fashion_mnist1.png)\n\n# References\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.2236328125,
          "content": "import platform\nfrom setuptools import setup\n\n\ndef readme():\n    try:\n        with open(\"README.rst\", encoding=\"UTF-8\") as readme_file:\n            return readme_file.read()\n    except TypeError:\n        # Python 2.7 doesn't support encoding argument in builtin open\n        import io\n\n        with io.open(\"README.rst\", encoding=\"UTF-8\") as readme_file:\n            return readme_file.read()\n\n\nconfiguration = {\n    \"name\": \"umap-learn\",\n    \"version\": \"0.5.7\",\n    \"description\": \"Uniform Manifold Approximation and Projection\",\n    \"long_description\": readme(),\n    \"long_description_content_type\": \"text/x-rst\",\n    \"classifiers\": [\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved\",\n        \"Programming Language :: C\",\n        \"Programming Language :: Python\",\n        \"Topic :: Software Development\",\n        \"Topic :: Scientific/Engineering\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n    ],\n    \"keywords\": \"dimension reduction t-sne manifold\",\n    \"url\": \"http://github.com/lmcinnes/umap\",\n    \"maintainer\": \"Leland McInnes\",\n    \"maintainer_email\": \"leland.mcinnes@gmail.com\",\n    \"license\": \"BSD\",\n    \"packages\": [\"umap\"],\n    \"install_requires\": [\n        \"numpy >= 1.17\",\n        \"scipy >= 1.3.1\",\n        \"scikit-learn >= 0.22\",\n        \"numba >= 0.51.2\",\n        \"pynndescent >= 0.5\",\n        \"tqdm\",\n    ],\n    \"extras_require\": {\n        \"plot\": [\n            \"pandas\",\n            \"matplotlib\",\n            \"datashader\",\n            \"bokeh\",\n            \"holoviews\",\n            \"colorcet\",\n            \"seaborn\",\n            \"scikit-image\",\n        ],\n        \"parametric_umap\": [\"tensorflow >= 2.1\"],\n        \"tbb\": [\"tbb >= 2019.0\"],\n    },\n    \"ext_modules\": [],\n    \"cmdclass\": {},\n    \"test_suite\": \"pytest\",\n    \"tests_require\": [\"pytest\"],\n    \"data_files\": (),\n    \"zip_safe\": False,\n}\n\nsetup(**configuration)\n"
        },
        {
          "name": "umap",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}