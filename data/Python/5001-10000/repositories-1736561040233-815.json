{
  "metadata": {
    "timestamp": 1736561040233,
    "page": 815,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pypa/sampleproject",
      "stars": 5156,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.134765625,
          "content": "# general things to ignore\nbuild/\ndist/\n*.egg-info/\n*.egg\n*.py[cod]\n__pycache__/\n*.so\n*~\nvenv/\n\n# due to using nox and pytest\n.nox\n.cache\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0556640625,
          "content": "Copyright (c) 2016 The Python Packaging Authority (PyPA)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.76171875,
          "content": "# A sample Python project\n\n![Python Logo](https://www.python.org/static/community_logos/python-logo.png \"Sample inline image\")\n\nA sample project that exists as an aid to the [Python Packaging User\nGuide][packaging guide]'s [Tutorial on Packaging and Distributing\nProjects][distribution tutorial].\n\nThis project does not aim to cover best practices for Python project\ndevelopment as a whole. For example, it does not provide guidance or tool\nrecommendations for version control, documentation, or testing.\n\n[The source for this project is available here][src].\n\nThe metadata for a Python project is defined in the `pyproject.toml` file,\nan example of which is included in this project. You should edit this file\naccordingly to adapt this sample project to your needs.\n\n----\n\nThis is the README file for the project.\n\nThe file should use UTF-8 encoding and can be written using\n[reStructuredText][rst] or [markdown][md use] with the appropriate [key set][md\nuse]. It will be used to generate the project webpage on PyPI and will be\ndisplayed as the project homepage on common code-hosting services, and should be\nwritten for that purpose.\n\nTypical contents for this file would include an overview of the project, basic\nusage examples, etc. Generally, including the project changelog in here is not a\ngood idea, although a simple “What's New” section for the most recent version\nmay be appropriate.\n\n[packaging guide]: https://packaging.python.org\n[distribution tutorial]: https://packaging.python.org/tutorials/packaging-projects/\n[src]: https://github.com/pypa/sampleproject\n[rst]: http://docutils.sourceforge.net/rst.html\n[md]: https://tools.ietf.org/html/rfc7764#section-3.5 \"CommonMark variant\"\n[md use]: https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n"
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 1.4287109375,
          "content": "# this file is *not* meant to cover or endorse the use of nox or pytest or\n# testing in general,\n#\n#  It's meant to show the use of:\n#\n#  - check-manifest\n#     confirm items checked into vcs are in your sdist\n#  - readme_renderer (when using a reStructuredText README)\n#     confirms your long_description will render correctly on PyPI.\n#\n#  and also to help confirm pull requests to this project.\n\nimport os\n\nimport nox\n\nnox.options.sessions = [\"lint\"]\n\n# Define the minimal nox version required to run\nnox.options.needs_version = \">= 2024.3.2\"\n\n\n@nox.session\ndef lint(session):\n    session.install(\"flake8\")\n    session.run(\n        \"flake8\", \"--exclude\", \".nox,*.egg,build,data\",\n        \"--select\", \"E,W,F\", \".\"\n    )\n\n\n@nox.session\ndef build_and_check_dists(session):\n    session.install(\"build\", \"check-manifest >= 0.42\", \"twine\")\n    # If your project uses README.rst, uncomment the following:\n    # session.install(\"readme_renderer\")\n\n    session.run(\"check-manifest\", \"--ignore\", \"noxfile.py,tests/**\")\n    session.run(\"python\", \"-m\", \"build\")\n    session.run(\"python\", \"-m\", \"twine\", \"check\", \"dist/*\")\n\n\n@nox.session(python=[\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"])\ndef tests(session):\n    session.install(\"pytest\")\n    build_and_check_dists(session)\n\n    generated_files = os.listdir(\"dist/\")\n    generated_sdist = os.path.join(\"dist/\", generated_files[1])\n\n    session.install(generated_sdist)\n\n    session.run(\"py.test\", \"tests/\", *session.posargs)\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.52734375,
          "content": "# Guide (user-friendly):\n# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/\n\n# Specification (technical, formal):\n# https://packaging.python.org/en/latest/specifications/pyproject-toml/\n\n\n# Choosing a build backend:\n# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend\n[build-system]\n# A list of packages that are needed to build your package:\nrequires = [\"setuptools\"] # REQUIRED if [build-system] table is used\n# The name of the Python object that frontends will use to perform the build:\nbuild-backend = \"setuptools.build_meta\" # If not defined, then legacy behavior can happen.\n\n\n[project]\n# This is the name of your project. The first time you publish this\n# package, this name will be registered for you. It will determine how\n# users can install this project, e.g.:\n#\n# $ pip install sampleproject\n#\n# And where it will live on PyPI: https://pypi.org/project/sampleproject/\n#\n# There are some restrictions on what makes a valid project name\n# specification here:\n# https://packaging.python.org/specifications/core-metadata/#name\nname = \"sampleproject\" # REQUIRED, is the only field that cannot be marked as dynamic.\n\n# Versions should comply with PEP 440:\n# https://www.python.org/dev/peps/pep-0440/\n#\n# For a discussion on single-sourcing the version, see\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = \"4.0.0\" # REQUIRED, although can be dynamic\n\n# This is a one-line description or tagline of what your project does. This\n# corresponds to the \"Summary\" metadata field:\n# https://packaging.python.org/specifications/core-metadata/#summary\ndescription = \"A sample Python project\"\n\n# This is an optional longer description of your project that represents\n# the body of text which users will see when they visit PyPI.\n#\n# Often, this is the same as your README, so you can just read it in from\n# that file directly.\n#\n# This field corresponds to the \"Description\" metadata field:\n# https://packaging.python.org/specifications/core-metadata/#description-optional\nreadme = \"README.md\"\n\n# Specify which Python versions you support. In contrast to the\n# 'Programming Language' classifiers in this file, 'pip install' will check this\n# and refuse to install the project if the version does not match. See\n# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\nrequires-python = \">=3.9\"\n\n# This is either text indicating the license for the distribution, or a file\n# that contains the license.\n# https://packaging.python.org/en/latest/specifications/core-metadata/#license\nlicense = { file = \"LICENSE.txt\" }\n\n# This field adds keywords for your project which will appear on the\n# project page. What does your project relate to?\n#\n# Note that this is a list of additional keywords, separated\n# by commas, to be used to assist searching for the distribution in a\n# larger catalog.\nkeywords = [\"sample\", \"setuptools\", \"development\"]\n\n# This should be your name or the name of the organization who originally\n# authored the project, and a valid email address corresponding to the name\n# listed.\nauthors = [{ name = \"A. Random Developer\", email = \"author@example.com\" }]\n\n# This should be your name or the names of the organization who currently\n# maintains the project, and a valid email address corresponding to the name\n# listed.\nmaintainers = [\n  { name = \"A. Great Maintainer\", email = \"maintainer@example.com\" },\n]\n\n# Classifiers help users find your project by categorizing it.\n#\n# For a list of valid classifiers, see https://pypi.org/classifiers/\nclassifiers = [\n  # How mature is this project? Common values are\n  #   3 - Alpha\n  #   4 - Beta\n  #   5 - Production/Stable\n  \"Development Status :: 3 - Alpha\",\n\n  # Indicate who your project is intended for\n  \"Intended Audience :: Developers\",\n  \"Topic :: Software Development :: Build Tools\",\n\n  # Pick your license as you wish\n  \"License :: OSI Approved :: MIT License\",\n\n  # Specify the Python versions you support here. In particular, ensure\n  # that you indicate you support Python 3. These classifiers are *not*\n  # checked by \"pip install\". See instead \"requires-python\" key in this file.\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: 3 :: Only\",\n]\n\n# This field lists other packages that your project depends on to run.\n# Any package you put here will be installed by pip when your project is\n# installed, so they must be valid existing projects.\n#\n# For an analysis of this field vs pip's requirements files see:\n# https://packaging.python.org/discussions/install-requires-vs-requirements/\ndependencies = [\"peppercorn\"]\n\n# List additional groups of dependencies here (e.g. development\n# dependencies). Users will be able to install these using the \"extras\"\n# syntax, for example:\n#\n#   $ pip install sampleproject[dev]\n#\n# Optional dependencies the project provides. These are commonly\n# referred to as \"extras\". For a more extensive definition see:\n# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras\n[project.optional-dependencies]\ndev = [\"check-manifest\"]\ntest = [\"coverage\"]\n\n# List URLs that are relevant to your project\n#\n# This field corresponds to the \"Project-URL\" and \"Home-Page\" metadata fields:\n# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n# https://packaging.python.org/specifications/core-metadata/#home-page-optional\n#\n# Examples listed include a pattern for specifying where the package tracks\n# issues, where the source is hosted, where to say thanks to the package\n# maintainers, and where to support the project financially. The key is\n# what's used to render the link text on PyPI.\n[project.urls]\n\"Homepage\" = \"https://github.com/pypa/sampleproject\"\n\"Bug Reports\" = \"https://github.com/pypa/sampleproject/issues\"\n\"Funding\" = \"https://donate.pypi.org\"\n\"Say Thanks!\" = \"http://saythanks.io/to/example\"\n\"Source\" = \"https://github.com/pypa/sampleproject/\"\n\n# The following would provide a command line executable called `sample`\n# which executes the function `main` from this package when invoked.\n[project.scripts]\nsample = \"sample:main\"\n\n\n# This is configuration specific to the `setuptools` build backend.\n# If you are using a different build backend, you will need to change this.\n[tool.setuptools]\n# If there are data files included in your packages that need to be\n# installed, specify them here.\npackage-data = { \"sample\" = [\"*.dat\"] }\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}