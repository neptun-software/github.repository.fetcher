{
  "metadata": {
    "timestamp": 1736560640008,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "THUDM/CodeGeeX2",
      "stars": 7643,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright Zhengxiao Du\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "MODEL_LICENSE",
          "type": "blob",
          "size": 2.2841796875,
          "content": "The CodeGeeX License\n\n1. Definitions\n\n“Licensor” means the CodeGeeX Model Team that distributes its Software.\n\n“Software” means the CodeGeeX model parameters made available under this license.\n\n2. License Grant\n\nSubject to the terms and conditions of this License, the Licensor hereby grants to you a non-exclusive, worldwide, non-transferable, non-sublicensable, revocable, royalty-free copyright license to use the Software solely for your non-commercial research purposes.\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n3. Restriction\n\nYou will not use, copy, modify, merge, publish, distribute, reproduce, or create derivative works of the Software, in whole or in part, for any commercial, military, or illegal purposes.\n\nYou will not use the Software for any act that may undermine China's national security and national unity, harm the public interest of society, or infringe upon the rights and interests of human beings.\n\n4. Disclaimer\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n5. Limitation of Liability\n\nEXCEPT TO THE EXTENT PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL THEORY, WHETHER BASED IN TORT, NEGLIGENCE, CONTRACT, LIABILITY, OR OTHERWISE WILL ANY LICENSOR BE LIABLE TO YOU FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES, OR ANY OTHER COMMERCIAL LOSSES, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n6. Dispute Resolution\n\nThis license shall be governed and construed in accordance with the laws of People’s Republic of China. Any dispute arising from or in connection with this License shall be submitted to Haidian District People's Court in Beijing.\n\nNote that the license is subject to update to a more comprehensive version. For any questions related to the license and copyright, please contact us at license@zhipuai.cn."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.5302734375,
          "content": "![](resources/codegeex_logo.png)\n\n<p align=\"center\">\n    🏠 <a href=\"https://codegeex.cn\" target=\"_blank\">主页</a>｜🛠 插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=aminer.codegeex\" target=\"_blank\">VS Code</a>, <a href=\"https://plugins.jetbrains.com/plugin/20587-codegeex\" target=\"_blank\">Jetbrains</a>｜🤗 <a href=\"https://huggingface.co/THUDM/codegeex2-6b\" target=\"_blank\">模型下载</a>｜📄 <a href=\"https://arxiv.org/abs/2303.17568\" target=\"_blank\">论文</a>｜👋 加入<a href=\"resources/wechat.md\"target=\"_blank\">微信开发者交流群</a>\n</p>\n\nRead this in [English](README_EN.md)<br>\n[日本語](README_JA.md)で読む<br>\nLire en [Français](README_FR.md)\n\n⭐️ 最新一代 [CodeGeeX4](https://github.com/THUDM/CodeGeeX4) 模型已经正式开源。\nThe newest [CodeGeeX4](https://github.com/THUDM/CodeGeeX4) has been released.\n\n# CodeGeeX2: 更强大的多语言代码生成模型\n\nCodeGeeX2 是多语言代码生成模型 [CodeGeeX](https://github.com/THUDM/CodeGeeX) ([KDD’23](https://arxiv.org/abs/2303.17568)) 的第二代模型。不同于一代 CodeGeeX（完全在国产华为昇腾芯片平台训练） ，CodeGeeX2 是基于 [ChatGLM2](https://github.com/THUDM/ChatGLM2-6B) 架构加入代码预训练实现，得益于 ChatGLM2 的更优性能，CodeGeeX2 在多项指标上取得性能提升（+107% > CodeGeeX；仅60亿参数即超过150亿参数的 StarCoder-15B 近10%），更多特性包括：\n\n* **更强大的代码能力**：基于 ChatGLM2-6B 基座语言模型，CodeGeeX2-6B 进一步经过了 600B 代码数据预训练，相比一代模型，在代码能力上全面提升，[HumanEval-X](https://huggingface.co/datasets/THUDM/humaneval-x) 评测集的六种编程语言均大幅提升 (Python +57%, C++ +71%, Java +54%, JavaScript +83%, Go +56%, Rust +321\\%)，在Python上达到 35.9\\% 的 Pass@1 一次通过率，超越规模更大的 StarCoder-15B。\n* **更优秀的模型特性**：继承 ChatGLM2-6B 模型特性，CodeGeeX2-6B 更好支持中英文输入，支持最大 8192 序列长度，推理速度较一代 CodeGeeX-13B 大幅提升，量化后仅需6GB显存即可运行，支持轻量级本地化部署。\n* **更全面的AI编程助手**：CodeGeeX插件（[VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex), [Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex)）后端升级，支持超过100种编程语言，新增上下文补全、跨文件补全等实用功能。结合 Ask CodeGeeX 交互式AI编程助手，支持中英文对话解决各种编程问题，包括且不限于代码解释、代码翻译、代码纠错、文档生成等，帮助程序员更高效开发。\n* **更开放的协议**：CodeGeeX2-6B 权重对学术研究完全开放，填写[登记表](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B)申请商业使用。\n\n## 使用教程\n\n* [快速开始](#快速开始)\n* [推理教程（多卡推理，加速推理，多平台推理等）](docs/zh/inference_zh.md)\n\n## AI编程助手\n\n![](resources/codegeex_demo.png)\n\n我们开发了支持 VS Code、 IntelliJ IDEA、PyCharm、GoLand、WebStorm、Android Studio 等IDE的 CodeGeeX 插件。在插件中，可以更直接地体验到 CodeGeeX2 模型在代码生成与补全、添加注释、代码翻译及技术问答方面的能力为开发效率带来的提升。欢迎在IDE中下载 CodeGeeX 插件获得更加全面的AI编程体验，详情见[CodeGeeX主页](https://codegeex.cn/)。\n\n\n## 快速开始\n\n### 使用`transformers`快速调用[CodeGeeX2-6B](https://huggingface.co/THUDM/codegeex2-6b)：\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\ntokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\nmodel = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\nmodel = model.eval()\n\n# remember adding a language tag for better performance\nprompt = \"# language: Python\\n# write a bubble sort function\\n\"\ninputs = tokenizer.encode(prompt, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(inputs, max_length=256, top_k=1)\nresponse = tokenizer.decode(outputs[0])\n\n>>> print(response)\n# language: Python\n# write a bubble sort function\n\n\ndef bubble_sort(list):\n    for i in range(len(list) - 1):\n        for j in range(len(list) - 1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n    return list\n\n\nprint(bubble_sort([5, 2, 1, 8, 4]))\n```\n\n### 启动 Gradio DEMO：\n```\npython ./demo/run_demo.py\n\nusage: run_demo.py [-h] [--model-path MODEL_PATH] [--example-path EXAMPLE_PATH] [--quantize QUANTIZE]\n                   [--chatglm-cpp] [--fastllm] [--n-gpus N_GPUS] [--gpu GPU] [--cpu] [--auth] [--username yourname]\n                   [--password yourpassword]\n                   [--port PORT] [--listen ADDRESS]\n\n# 若要启用身份验证，请先启用--auth，然后定义--username与--password，如：\npython run_demo.py --auth --username user --password password  # 若要监听所有地址请指定 --listen 0.0.0.0\n```\n支持使用 [ChatGLM.cpp](https://github.com/li-plus/chatglm.cpp) 量化推理加速：\n```sh\npython ./demo/run_demo.py --quantize 4 --chatglm-cpp\n```\n### 启动FAST API:\n```\npython ./demo/fastapicpu.py\nusage: fastapicpu.py [-h] [--model-path MODEL_PATH] [--listen ADDRESS] [--port PORT] [--workders NUM] [--cpu] [--half] [--quantize QUANTIZE] [--chatglm-cpp]\n# --cpu启用cpu --half启用.half()\n```\n支持使用 [ChatGLM.cpp](https://github.com/li-plus/chatglm.cpp) 量化推理加速，同样添加 `--quantize 4 --chatglm-cpp` 参数即可。\n### API使用示例\n```\ncurl -X POST \"http://127.0.0.1:7860\" \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"lang\": \"Python\", \"prompt\": \"# Write a quick sort function\"}'\n```\n\n\n❗️请注意：\n* CodeGeeX2-6B 是一个基座代码生成模型，不具备聊天能力。请前往插件中体验更全面的 Ask CodeGeeX 聊天功能。\n* 在使用 CodeGeeX2-6B 的补全功能时，输入prompt需要遵循特定的格式以获得最好的效果。比如需要在开头加入编程语言标签（`# language: Python`，请查看[完整语言列表](https://github.com/THUDM/CodeGeeX2/blob/main/evaluation/utils.py#L14)），以注释的形式写prompt等。参考`run_demo.py`中的处理。\n* 如果显卡不支持`bfloat16`格式，将会输出错误的内容，需要将模型转换成`float16`格式：\n    ```python\n    model = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True).half().cuda()\n    ```\n* 如果需要使用多显卡加载模型,可以将以下代码：\n    ```python\n    tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n    model = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\n    model = model.eval()\n    ```\n    替换为\n\n    ```python\n    def get_model():\n        tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n        from gpus import load_model_on_gpus\n        # gpus文件在demo文件夹中\n        model = load_model_on_gpus(\"THUDM/codegeex2-6b\", num_gpus=2)\n        model = model.eval()\n        return tokenizer, model\n\n    tokenizer, model = get_model()\n    ```\n\n## 代码能力评测\n\nCodeGeeX2 作为一个多语言代码生成基座模型，代码能力较上一代大幅提升，以下是在 HumanEval，HumanEval-X, DS1000 基准上的评测结果（评价指标 Pass@k 定义与[论文](https://arxiv.org/abs/2303.17568)中一致）：\n\n### HumanEval (Pass@1,10,100)\n\n| **Model**           | **Pass@1** | **Pass@10** | **Pass@100** |\n| :-----------------: | :--------: | :---------: | :----------: |\n| CodeGen-16B-multi   | 19\\.2      | 34\\.6       | 55\\.2        |\n| CodeGeeX-13B        | 22\\.9      | 39\\.6       | 60\\.9        |\n| Codex-12B           | 28\\.8      | 46\\.8       | 72\\.3        |\n| CodeT5Plus-16B-mono | 30\\.9      | 51\\.6       | 76\\.7        |\n| Code-Cushman-001    | 33\\.5      | 54\\.3       | 77\\.4        |\n| LLaMA-65B           | 23\\.7      | -           | 79\\.3        |\n| LLaMA2-70B          | 29\\.9      | -           | -            |\n| CodeGen2\\.5-7B-mono | 33\\.4      | 58\\.4       | 82\\.7        |\n| StarCoder-15B       | 33\\.2      | 61\\.0       | 84\\.7        |\n| **CodeGeeX2-6B**    | **35\\.9**  | **62\\.6**   | **88\\.3**    |\n> **Pass@1** 使用 `n=20, t=0.2, top_p=0.95`；**Pass@10,Pass@100** 使用 `n=200, t=0.8, top_p=0.95`。\n\n### HumanEval-X (Pass@1)\n\n| **Model**                | **Python** | **C++**   | **Java**  | **JavaScript** | **Go**    | **Rust**  | **Overall** |\n| :------------------: | :--------: | :-------: | :-------: | :------------: | :-------: | :-------: | :---------: |\n| CodeGen-16B-multi    | 19\\.2      | 18\\.1     | 15\\.0     | 18\\.4          | 13\\.0     | 1\\.8      | 14\\.2       |\n| CodeGeeX-13B         | 22\\.9      | 17\\.1     | 20\\.0     | 17\\.6          | 14\\.4     | 4\\.3      | 16\\.0       |\n| Replit-code-v1-3B    | 22\\.0      | 20\\.1     | 20\\.1     | 20\\.1          | 12\\.2     | 8\\.6      | 17\\.2       |\n| CodeGen2\\.5-7B-multi | 30\\.6      | 24\\.3     | 29\\.0     | 27\\.5          | 18\\.9     | **20\\.1** | 25\\.1       |\n| StarCoder-15B        | 35\\.5      | 28\\.2     | **31\\.5** | **33\\.2**      | 21\\.3     | 17\\.8     | 27\\.9       |\n| **CodeGeeX2-6B**         | **35\\.9**  | **29\\.3** | 30\\.8     | 32\\.2          | **22\\.5** | 18\\.1     | **28\\.1**   |\n> **Pass@1** 使用 `n=20, t=0.2, top_p=0.95`。\n\n以上结果可使用脚本`scripts/run_humanevalx.sh`复现。环境配置和说明参见[评测环境](https://github.com/THUDM/CodeGeeX/blob/main/codegeex/benchmark/README_zh.md)。\n\n### DS1000 (Pass@1)\n\n| **Model**            | **Matplotlib** | **Numpy** | **Pandas** | **Pytorch** | **SciPy** | **Scikit-learn** | **TensorFlow** | **Overall** |\n| :--------------: | :------------: | :-------: | :--------: | :---------: | :-------: | :--------------: | :------------: | :---------: |\n| \\# Samples       | 155            | 220       | 291        | 68          | 106       | 115              | 45             | 1000        |\n| CodeGen-16B-Mono | 31\\.7          | 10\\.9     | 3\\.4       | 7\\.0        | 9\\.0      | 10\\.8            | 15\\.2          | 11\\.7       |\n| code-cushman-001 | 40\\.7          | 21\\.8     | 7\\.9       | 12\\.4       | 11\\.3     | 18\\.0            | 12\\.2          | 18\\.1       |\n| Codex-001        | 41\\.8          | 26\\.6     | 9\\.4       | 9\\.7        | 15\\.0     | 18\\.5            | 17\\.2          | 20\\.2       |\n| **CodeGeeX2-6B** | 40\\.5          | 25\\.5     | 14\\.5      | 17\\.3       | 19\\.3     | 24\\.0            | 23\\.0          | 23\\.1       |\n| StarCoder-15B    | 51\\.7          | 29\\.7     | 11\\.4      | 21\\.4       | 20\\.2     | 29\\.5            | 24\\.5          | 26\\.0       |\n| Codex-002        | **57\\.0**      | **43\\.1** | **26\\.5**  | **41\\.8**   | **31\\.8** | **44\\.8**        | **39\\.3**      | **39\\.2**   |\n> **Pass@1** 使用 `n=40, t=0.2, top_p=0.5`。\n\n以上结果可使用[DS1000评测代码](https://github.com/HKUNLP/DS-1000.git)复现。\n\n## 量化推理性能\n\nCodeGeeX2 与上一代相比，对部署更加友好。得益于使用 Multi-Query Attention 和 Flash Attention，推理速度更快，且量化后仅需6GB显存即可运行：\n\n### 量化\n\n| **Model**        | FP16/BF16 | INT8    | INT4   |\n| :--------------: | :-------: | :-----: | :----: |\n| CodeGeeX-13B     | 26\\.9 GB   | 14\\.7 GB | -      |\n| **CodeGeeX2-6B** | 13\\.1 GB  | 8\\.2 GB  | 5\\.5 GB |\n> 基于 PyTorch 2.0 测试，利用`torch.nn.functional.scaled_dot_product_attention`实现高效的 Attention 计算。\n\n### 推理\n\n| **Model**        | **推理速度 (字符/秒)** |\n| :--------------: | :-------------: |\n| CodeGeeX-13B     | 32              |\n| **CodeGeeX2-6B** | 94              |\n> `batch_size=1, max_length=2048`，均使用加速框架，测试硬件为`GeForce RTX-3090`。\n\n## 协议\n\n本仓库的代码依照 [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0) 协议开源，模型的权重的使用则需要遵循 [Model License](MODEL_LICENSE)。CodeGeeX2-6B 权重对学术研究完全开放，填写[登记表](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B)申请商业使用。\n\n\n## 引用\n\n如果觉得我们的工作有帮助，欢迎引用以下论文：\n\n```\n@inproceedings{zheng2023codegeex,\n  title={CodeGeeX: A Pre-Trained Model for Code Generation with Multilingual Benchmarking on HumanEval-X},\n  author={Qinkai Zheng and Xiao Xia and Xu Zou and Yuxiao Dong and Shan Wang and Yufei Xue and Zihan Wang and Lei Shen and Andi Wang and Yang Li and Teng Su and Zhilin Yang and Jie Tang},\n  booktitle={Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining},\n  pages={5673--5684},\n  year={2023}\n}\n```\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 12.1767578125,
          "content": "![](resources/codegeex_logo.png)\n\n<p align=\"center\">\n    🏠 <a href=\"https://codegeex.cn\" target=\"_blank\">Homepage</a>｜🛠 Extensions <a href=\"https://marketplace.visualstudio.com/items?itemName=aminer.codegeex\" target=\"_blank\">VS Code</a>, <a href=\"https://plugins.jetbrains.com/plugin/20587-codegeex\" target=\"_blank\">Jetbrains</a>｜🤗 <a href=\"https://huggingface.co/THUDM/codegeex2-6b\" target=\"_blank\">HF Repo</a>｜📄 <a href=\"https://arxiv.org/abs/2303.17568\" target=\"_blank\">Paper</a>\n</p>\n\n<p align=\"center\">\n    👋 Join our <a href=\"https://discord.gg/8gjHdkmAN6\" target=\"_blank\">Discord</a>, <a href=\"https://join.slack.com/t/codegeexworkspace/shared_invite/zt-1s118ffrp-mpKKhQD0tKBmzNZVCyEZLw\" target=\"_blank\">Slack</a>, <a href=\"https://t.me/+IipIayJ32B1jOTg1\" target=\"_blank\">Telegram</a>, <a href=\"resources/wechat.md\"target=\"_blank\">WeChat</a>\n</p>\n\n查看[中文版](README.md)<br>\n[日本語](README_JA.md)で読む<br>\nLire en [Français](README_FR.md)\n\n# CodeGeeX2: A More Powerful Multilingual Code Generation Model\n\nCodeGeeX2 is the second-generation model of the multilingual code generation model [CodeGeeX](https://github.com/THUDM/CodeGeeX) ([KDD’23](https://arxiv.org/abs/2303.17568)), which is implemented based on the [ChatGLM2](https://github.com/THUDM/ChatGLM2-6B) architecture trained on more code data. Due to the advantage of ChatGLM2, CodeGeeX2 has been comprehensively improved in coding capability (+107% > CodeGeeX; with only 6B parameters, surpassing larger StarCoder-15B for some tasks). It has the following features:\n\n* **More Powerful Coding Capabilities**: Based on the ChatGLM2-6B model, CodeGeeX2-6B has been further pre-trained on 600B code tokens, which has been comprehensively improved in coding capability compared to the first-generation. On the [HumanEval-X](https://huggingface.co/datasets/THUDM/humaneval-x) benchmark, all six languages have been significantly improved (Python +57%, C++ +71%, Java +54%, JavaScript +83%, Go +56%, Rust +321\\%), and in Python it reached 35.9% of Pass@1 one-time pass rate, surpassing the larger StarCoder-15B.\n* **More Useful Features**: Inheriting the ChatGLM2-6B model features, CodeGeeX2-6B better supports both Chinese and English prompts, maximum 8192 sequence length, and the inference speed is significantly improved compared to the first-generation. After quantization, it only needs 6GB of GPU memory for inference, thus supports lightweight local deployment.\n* **Comprehensive AI Coding Assistant**: The backend of CodeGeeX plugin ([VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex), [Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex)) is upgraded, supporting 100+ programming languages, and adding practical functions such as infilling and cross-file completion. Combined with the \"Ask CodeGeeX\" interactive AI coding assistant, it can be used to solve various programming problems via Chinese or English dialogue, including but not limited to code summarization, code translation, debugging, and comment generation, which helps increasing the efficiency of developpers.\n* **Open License**: CodeGeeX2-6B weights are fully open to academic research, and please apply for commercial use by filling in the [registration form](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B).\n\n\n## AI Coding Assistant\n\n![](resources/codegeex_demo.png)\n\nWe have developed the CodeGeeX plugin, which supports IDEs such as VS Code, IntelliJ IDEA, PyCharm, GoLand, WebStorm, and Android Studio. The plugin allows you to experience the CodeGeeX2 model's capabilities in code generation and completion, annotation, code translation, and \"Ask CodeGeeX\" interactive programming, which can help improve your development efficiency. Please download the CodeGeeX plugin in your IDE to get a more comprehensive AI coding experience. You can find more details on our [homepage]( https://codegeex.cn/).\n\n## Get Started\n\nUse `transformers` to quickly launch [CodeGeeX2-6B](https://huggingface.co/THUDM/codegeex2-6b)：\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\ntokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\nmodel = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\nmodel = model.eval()\n\n# remember adding a language tag for better performance\nprompt = \"# language: Python\\n# write a bubble sort function\\n\"\ninputs = tokenizer.encode(prompt, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(inputs, max_length=256, top_k=1)\nresponse = tokenizer.decode(outputs[0])\n\n>>> print(response)\n# language: Python\n# write a bubble sort function\n\n\ndef bubble_sort(list):\n    for i in range(len(list) - 1):\n        for j in range(len(list) - 1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n    return list\n\n\nprint(bubble_sort([5, 2, 1, 8, 4]))\n```\n\nLaunch Gradio DEMO:\n```\npython ./demo/run_demo.py\n```\n\n❗️Attention:\n* CodeGeeX2 is a base model, which is not instruction-tuned for chatting. It can do tasks like code completion/translation/explaination. To try the instruction-tuned version in CodeGeeX plugins ([VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex), [Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex)).\n* Programming languages can be controled by adding `language tag`, e.g., `# language: Python`. The format should be respected to ensure performance, full list can be found [here](https://github.com/THUDM/CodeGeeX2/blob/main/evaluation/utils.py#L14). Please write comments under the format of the selected programming language to achieve better results.\n* If the GPU doesn't support `bfloat16` format, it will cause incorrect output. Please convert the model to `float16` format:\n    ```python\n    model = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True).half().cuda()\n    ```\n* If you need to use Multiple GPUs to load the model, you can use the following code:\n    ```python\n    tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n    model = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\n    model = model.eval()\n    ```\n    Replace with\n\n    ```python\n    def get_model():\n        tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n        from gpus import load_model_on_gpus\n        # The \"gpus\" file is located in the demo folder\n        model = load_model_on_gpus(\"THUDM/codegeex2-6b\", num_gpus=2)\n        model = model.eval()\n        return tokenizer, model\n\n    tokenizer, model = get_model()\n    ```\n\n## Evaluation\n\nCodeGeeX2 is a base model for multilingual code generation, which has been significantly improved in its coding ability compared to the previous generation. The following are the evaluation results on the HumanEval, HumanEval-X, and DS1000 benchmarks (the evaluation metric Pass@k is the same as in the [paper](https://arxiv.org/abs/2303.17568)):\n\n### HumanEval (Pass@1,10,100)\n\n| **Model**           | **Pass@1** | **Pass@10** | **Pass@100** |\n| :-----------------: | :--------: | :---------: | :----------: |\n| CodeGen-16B-multi   | 19\\.2      | 34\\.6       | 55\\.2        |\n| CodeGeeX-13B        | 22\\.9      | 39\\.6       | 60\\.9        |\n| Codex-12B           | 28\\.8      | 46\\.8       | 72\\.3        |\n| CodeT5Plus-16B-mono | 30\\.9      | 51\\.6       | 76\\.7        |\n| Code-Cushman-001    | 33\\.5      | 54\\.3       | 77\\.4        |\n| LLaMA-65B           | 23\\.7      | -           | 79\\.3        |\n| LLaMA2-70B          | 29\\.9      | -           | -            |\n| CodeGen2\\.5-7B-mono | 33\\.4      | 58\\.4       | 82\\.7        |\n| StarCoder-15B       | 33\\.2      | 61\\.0       | 84\\.7        |\n| **CodeGeeX2-6B**    | **35\\.9**  | **62\\.6**   | **88\\.3**    |\n> `n=20, t=0.2, top_p=0.95` for **Pass@1**; `n=200, t=0.8, top_p=0.95` for **Pass@10** and **Pass@100**.\n\n### HumanEval-X (Pass@1)\n\n| **Model**                | **Python** | **C++**   | **Java**  | **JavaScript** | **Go**    | **Rust**  | **Overall** |\n| :------------------: | :--------: | :-------: | :-------: | :------------: | :-------: | :-------: | :---------: |\n| CodeGen-16B-multi    | 19\\.2      | 18\\.1     | 15\\.0     | 18\\.4          | 13\\.0     | 1\\.8      | 14\\.2       |\n| CodeGeeX-13B         | 22\\.9      | 17\\.1     | 20\\.0     | 17\\.6          | 14\\.4     | 4\\.3      | 16\\.0       |\n| Replit-code-v1-3B    | 22\\.0      | 20\\.1     | 20\\.1     | 20\\.1          | 12\\.2     | 8\\.6      | 17\\.2       |\n| CodeGen2\\.5-7B-multi | 30\\.6      | 24\\.3     | 29\\.0     | 27\\.5          | 18\\.9     | **20\\.1** | 25\\.1       |\n| StarCoder-15B        | 35\\.5      | 28\\.2     | **31\\.5** | **33\\.2**      | 21\\.3     | 17\\.8     | 27\\.9       |\n| **CodeGeeX2-6B**         | **35\\.9**  | **29\\.3** | 30\\.8     | 32\\.2          | **22\\.5** | 18\\.1     | **28\\.1**   |\n> `n=20, t=0.2, top_p=0.95` for **Pass@1**.\n\nThe above results can be reproduced by running `scripts/run_humanevalx.sh`. Refer to [HumanEval-X environment](https://github.com/THUDM/CodeGeeX/blob/main/codegeex/benchmark/README_zh.md) for the experiment setups.\n\n### DS1000 (Pass@1)\n\n| **Model**            | **Matplotlib** | **Numpy** | **Pandas** | **Pytorch** | **SciPy** | **Scikit-learn** | **TensorFlow** | **Overall** |\n| :--------------: | :------------: | :-------: | :--------: | :---------: | :-------: | :--------------: | :------------: | :---------: |\n| \\# Samples       | 155            | 220       | 291        | 68          | 106       | 115              | 45             | 1000        |\n| CodeGen-16B-Mono | 31\\.7          | 10\\.9     | 3\\.4       | 7\\.0        | 9\\.0      | 10\\.8            | 15\\.2          | 11\\.7       |\n| code-cushman-001 | 40\\.7          | 21\\.8     | 7\\.9       | 12\\.4       | 11\\.3     | 18\\.0            | 12\\.2          | 18\\.1       |\n| Codex-001        | 41\\.8          | 26\\.6     | 9\\.4       | 9\\.7        | 15\\.0     | 18\\.5            | 17\\.2          | 20\\.2       |\n| **CodeGeeX2-6B** | 40\\.5          | 25\\.5     | 14\\.5      | 17\\.3       | 19\\.3     | 24\\.0            | 23\\.0          | 23\\.1       |\n| StarCoder-15B    | 51\\.7          | 29\\.7     | 11\\.4      | 21\\.4       | 20\\.2     | 29\\.5            | 24\\.5          | 26\\.0       |\n| Codex-002        | **57\\.0**      | **43\\.1** | **26\\.5**  | **41\\.8**   | **31\\.8** | **44\\.8**        | **39\\.3**      | **39\\.2**   |\n> `n=40, t=0.2, top_p=0.5` for **Pass@1**。\n\nThe above results can be reproduced by the code in [DS1000 repo](https://github.com/HKUNLP/DS-1000.git).\n\n## Inference\n\nCodeGeeX2 is more friendly to deployment than the previous generation. Thanks to the use of Multi-Query Attention and Flash Attention, the inference speed is faster, and only 6GB of GPU memory is required after INT4 quantization.\n\n### Quantization\n\n| **Model**        | FP16/BF16 | INT8    | INT4   |\n| :--------------: | :-------: | :-----: | :----: |\n| CodeGeeX-13B     | 26\\.9 GB   | 14\\.7 GB | -      |\n| **CodeGeeX2-6B** | 13\\.1 GB  | 8\\.2 GB  | 5\\.5 GB |\n> Based on PyTorch 2.0, using `torch.nn.functional.scaled_dot_product_attention` for effecient attention mechanism。\n\n### Acceleration\n\n| **Model**        | **Inference speed (token/s)** |\n| :--------------: | :-------------: |\n| CodeGeeX-13B     | 32              |\n| **CodeGeeX2-6B** | 94              |\n> `batch_size=1, max_length=2048`, both using acceleration framework, in `GeForce RTX-3090`。\n\n## License\n\nThe code in this repository is open source under the [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0) license. The model weights are licensed under the [Model License](MODEL_LICENSE). CodeGeeX2-6B weights are open for academic research, and please apply for commercial use by filling in the [registration form](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B).\n\n\n## Citation\n\nIf you find our work helpful, please feel free to cite the following paper:\n\n```\n@inproceedings{zheng2023codegeex,\n  title={CodeGeeX: A Pre-Trained Model for Code Generation with Multilingual Benchmarking on HumanEval-X},\n  author={Qinkai Zheng and Xiao Xia and Xu Zou and Yuxiao Dong and Shan Wang and Yufei Xue and Zihan Wang and Lei Shen and Andi Wang and Yang Li and Teng Su and Zhilin Yang and Jie Tang},\n  booktitle={Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining},\n  pages={5673--5684},\n  year={2023}\n}\n```\n"
        },
        {
          "name": "README_FR.md",
          "type": "blob",
          "size": 12.615234375,
          "content": "![](resources/codegeex_logo.png)\n\n<p align=\"center\">\n    🏠 <a href=\"https://codegeex.cn\" target=\"_blank\">Homepage</a>｜🛠 Extensions <a href=\"https://marketplace.visualstudio.com/items?itemName=aminer.codegeex\" target=\"_blank\">VS Code</a>, <a href=\"https://plugins.jetbrains.com/plugin/20587-codegeex\" target=\"_blank\">Jetbrains</a>｜🤗 <a href=\"https://huggingface.co/THUDM/codegeex2-6b\" target=\"_blank\">HF Repo</a>｜📄 <a href=\"https://arxiv.org/abs/2303.17568\" target=\"_blank\">Paper</a>\n</p>\n\n<p align=\"center\">\n    👋 Rejoignez nous sur <a href=\"https://discord.gg/8gjHdkmAN6\" target=\"_blank\">Discord</a>, <a href=\"https://join.slack.com/t/codegeexworkspace/shared_invite/zt-1s118ffrp-mpKKhQD0tKBmzNZVCyEZLw\" target=\"_blank\">Slack</a>, <a href=\"https://t.me/+IipIayJ32B1jOTg1\" target=\"_blank\">Telegram</a>, <a href=\"resources/wechat.md\"target=\"_blank\">WeChat</a>\n</p>\n\n查看[中文版](README.md)<br>\nRead this in [English](README_EN.md)<br>\n[日本語](README_JA.md)で読む\n\n# CodeGeeX2: Un Modèle de Génération de Code Plus Puissant\n\nCodeGeeX2 est la deuxième itération du modèle de génération de code multilingue [CodeGeeX](https://github.com/THUDM/CodeGeeX) ([KDD’23](https://arxiv.org/abs/2303.17568)), basé sur [ChatGLM2](https://github.com/THUDM/ChatGLM2-6B) et entrainé sur un large corpus de code. Grâce à l'architecture ChatGLM2, CodeGeeX2 excelle sur une multitude de tâches de génération de code (+107% > CodeGeeX; avec seulement 6 milliards de paramètres, dépassant StarCoder-15B pour certaines tâches). CodeGeeX2 possède les fonctionnalités suivantes:\n\n* **Capacités de Génération de Code Accrues**: Basé sur ChatGLM2-6B, CodeGeeX2-6B à été entrainé sur un dataset de 600 milliards de tokens de plus ce qui a propulsé ses capacités de génération de code par rapport à la génération précédente. Sur [HumanEval-X](https://huggingface.co/datasets/THUDM/humaneval-x), le modèle opère bien mieux que son prédécesseur (Python +57%, C++ +71%, Java +54%, JavaScript +83%, Go +56%, Rust +321\\%). En Python, CodeGeeX atteint un score Pass@1 de 35.9%, surpassant StarCoder-15B malgré le fait que CodeGeeX ait ~3 fois moins de paramètres.\n* **Des Fonctionnalités Plus Utiles**: Héritant des fonctionnalités de ChatGLM2-6B, CodeGeeX2-6B prend mieux en charge les prompts en chinois et en anglais, peut ingérer jusqu'à 8192 tokens, et se dotte d'une vitesse de génération en inference fortement accrue comparé à la dernière génération. Après quantisation, CodeGeeX fonctionne sur un GPU avec >6GB de mémoire, permettant un déploiement local efficace.\n* **Un Assistant Intelligent dans votre Éditeur**: Les plugins ([VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex), et [Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex)) ont été mis à jour et sont maintenant compatible avec plus de 100 langages de programmation. Le modèle, couplé à l'extension, permet désormais aux utilisateurs de générer du code pour plusieurs fichiers ainsi que de générer et modifier des sections de code. CodeGeeX2 est maintenant capable de résoudre de nombreux problèmes de programmation. Les utilisateurs peuvent profiter de la fonctionnalité \"Ask CodeGeeX\" pour discuter de manière interactive avec un AI-assistant afin de résumer et d'expliquer du code, traduire du code entre langages, rajouter des commentaires, etc. CodeGeeX permet de maximiser la productivité de ses utilisateurs.\n* **License Open-Source**: Les poids du modèle CodeGeeX2-6B sont en accès libre pour toute utilisation dans le cadre de la recherche. Pour toute utilisation commerciale, merci de consulter ce [formulaire](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B).\n\n\n## Assistant Intelligent\n\n![](resources/codegeex_demo.png)\n\nNous avons développé une extension pour VS Code, IntelliJ IDEA, PyCharm, GoLand, WebStorm, and Android Studio. L'extension permet de profiter des capacités du modèle CodeGeeX2 et de générer, annoter et traduire du code. La fonctionnalité \"Ask CodeGeeX\" permet de coder de manière interactive et améliore grandement votre productivité. Téléchargez l'extension CodeGeeX dans votre IDE pour une meilleure expérience de développement. Trouvez plus de détail sur notre [site]( https://codegeex.cn/).\n\n## Utilisation\n\nPour exécuter [CodeGeeX2-6B](https://huggingface.co/THUDM/codegeex2-6b), utilisez la librairie `transformers`：\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\ntokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\nmodel = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\nmodel = model.eval()\n\n# TIP: Utilisez un tag pour identifier le langage dans lequel vous souhaitez générer.\nprompt = \"# language: Python\\n# write a bubble sort function\\n\"\ninputs = tokenizer.encode(prompt, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(inputs, max_length=256, top_k=1)\nresponse = tokenizer.decode(outputs[0])\n\n>>> print(response)\n# language: Python\n# write a bubble sort function\n\n\ndef bubble_sort(list):\n    for i in range(len(list) - 1):\n        for j in range(len(list) - 1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n    return list\n\n\nprint(bubble_sort([5, 2, 1, 8, 4]))\n```\n\nAccéder à la démo Gradio:\n```\npython ./demo/run_demo.py\n```\n\n❗️Attention:\n* Cette version de CodeGeeX2 est capable de compléter / expliquer / traduire du code mais n'a pas été fine-tuned pour être utilisé comme un chatbot. Pour accéder à la version chatbot de CodeGeeX, utilisez les extensions [VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex) et [Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex).\n* Pour controller le langage dans lequel CodeGeeX2 opère, utilisez des tags formattés ainsi: `# language: Python`. La liste de tous les langages de programmations que CodeGeeX supporte est accessible [ici](https://github.com/THUDM/CodeGeeX2/blob/main/evaluation/utils.py#L14).\n* Si vous avez besoin d'utiliser plusieurs GPU pour charger le modèle, vous pouvez utiliser le code suivant:\n    ```python\n    tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n    model = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\n    model = model.eval()\n    ```\n    Remplacer par\n\n    ```python\n    def get_model():\n        tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n        from gpus import load_model_on_gpus\n        # Le fichier \"gpus\" se trouve dans le dossier de démonstration\n        model = load_model_on_gpus(\"THUDM/codegeex2-6b\", num_gpus=2)\n        model = model.eval()\n        return tokenizer, model\n\n    tokenizer, model = get_model()\n    ```\n\n## Evaluation\n\nCodeGeeX2 est un modèle de base capable de générer du code en plusieurs langages de programmation et qui est bien plus performant que la version précédente. Voici les capacités de CodeGeeX sur les benchmarks HumanEval, HumanEval-X, et DS1000 (la métrique Pass@k est la même que celle décrite dans ce [papier](https://arxiv.org/abs/2303.17568)):\n\n### HumanEval (Pass@1,10,100)\n\n| **Model**           | **Pass@1** | **Pass@10** | **Pass@100** |\n| :-----------------: | :--------: | :---------: | :----------: |\n| CodeGen-16B-multi   | 19\\.2      | 34\\.6       | 55\\.2        |\n| CodeGeeX-13B        | 22\\.9      | 39\\.6       | 60\\.9        |\n| Codex-12B           | 28\\.8      | 46\\.8       | 72\\.3        |\n| CodeT5Plus-16B-mono | 30\\.9      | 51\\.6       | 76\\.7        |\n| Code-Cushman-001    | 33\\.5      | 54\\.3       | 77\\.4        |\n| LLaMA-65B           | 23\\.7      | -           | 79\\.3        |\n| LLaMA2-70B          | 29\\.9      | -           | -            |\n| CodeGen2\\.5-7B-mono | 33\\.4      | 58\\.4       | 82\\.7        |\n| StarCoder-15B       | 33\\.2      | 61\\.0       | 84\\.7        |\n| **CodeGeeX2-6B**    | **35\\.9**  | **62\\.6**   | **88\\.3**    |\n> `n=20, t=0.2, top_p=0.95` pour **Pass@1**; `n=200, t=0.8, top_p=0.95` pour **Pass@10** et **Pass@100**.\n\n### HumanEval-X (Pass@1)\n\n| **Model**                | **Python** | **C++**   | **Java**  | **JavaScript** | **Go**    | **Rust**  | **Overall** |\n| :------------------: | :--------: | :-------: | :-------: | :------------: | :-------: | :-------: | :---------: |\n| CodeGen-16B-multi    | 19\\.2      | 18\\.1     | 15\\.0     | 18\\.4          | 13\\.0     | 1\\.8      | 14\\.2       |\n| CodeGeeX-13B         | 22\\.9      | 17\\.1     | 20\\.0     | 17\\.6          | 14\\.4     | 4\\.3      | 16\\.0       |\n| Replit-code-v1-3B    | 22\\.0      | 20\\.1     | 20\\.1     | 20\\.1          | 12\\.2     | 8\\.6      | 17\\.2       |\n| CodeGen2\\.5-7B-multi | 30\\.6      | 24\\.3     | 29\\.0     | 27\\.5          | 18\\.9     | **20\\.1** | 25\\.1       |\n| StarCoder-15B        | 35\\.5      | 28\\.2     | **31\\.5** | **33\\.2**      | 21\\.3     | 17\\.8     | 27\\.9       |\n| **CodeGeeX2-6B**         | **35\\.9**  | **29\\.3** | 30\\.8     | 32\\.2          | **22\\.5** | 18\\.1     | **28\\.1**   |\n> `n=20, t=0.2, top_p=0.95` for **Pass@1**.\n\nLes résultats ci-dessus peuvent être reproduits avec le script `scripts/run_humanevalx.sh`. Les environements utilisés sont renseignés [ici](https://github.com/THUDM/CodeGeeX/blob/main/codegeex/benchmark/README_zh.md).\n\n### DS1000 (Pass@1)\n\n| **Model**            | **Matplotlib** | **Numpy** | **Pandas** | **Pytorch** | **SciPy** | **Scikit-learn** | **TensorFlow** | **Overall** |\n| :--------------: | :------------: | :-------: | :--------: | :---------: | :-------: | :--------------: | :------------: | :---------: |\n| \\# Samples       | 155            | 220       | 291        | 68          | 106       | 115              | 45             | 1000        |\n| CodeGen-16B-Mono | 31\\.7          | 10\\.9     | 3\\.4       | 7\\.0        | 9\\.0      | 10\\.8            | 15\\.2          | 11\\.7       |\n| code-cushman-001 | 40\\.7          | 21\\.8     | 7\\.9       | 12\\.4       | 11\\.3     | 18\\.0            | 12\\.2          | 18\\.1       |\n| Codex-001        | 41\\.8          | 26\\.6     | 9\\.4       | 9\\.7        | 15\\.0     | 18\\.5            | 17\\.2          | 20\\.2       |\n| **CodeGeeX2-6B** | 40\\.5          | 25\\.5     | 14\\.5      | 17\\.3       | 19\\.3     | 24\\.0            | 23\\.0          | 23\\.1       |\n| StarCoder-15B    | 51\\.7          | 29\\.7     | 11\\.4      | 21\\.4       | 20\\.2     | 29\\.5            | 24\\.5          | 26\\.0       |\n| Codex-002        | **57\\.0**      | **43\\.1** | **26\\.5**  | **41\\.8**   | **31\\.8** | **44\\.8**        | **39\\.3**      | **39\\.2**   |\n> `n=40, t=0.2, top_p=0.5` for **Pass@1**。\n\nLes résultats ci-dessus peuvent être reproduits avec le code présent sur le repository [HKUNLP/DS-1000](https://github.com/HKUNLP/DS-1000.git).\n\n## Inference\n\nCodeGeeX2 est bien plus simple à déployer que la génération précédente. L'utilisation de \"Multi-Query Attention\" et \"Flash Attention\" accélère grandement la vitesse de génération et le modèle n'a besoin que de 6GB de mémoire après avoir été quantisé en INT4.\n\n### Quantisation\n\n| **Model**        | FP16/BF16 | INT8    | INT4   |\n| :--------------: | :-------: | :-----: | :----: |\n| CodeGeeX-13B     | 26\\.9 GB   | 14\\.7 GB | -      |\n| **CodeGeeX2-6B** | 13\\.1 GB  | 8\\.2 GB  | 5\\.5 GB |\n> Résultats obtenus avec PyTorch 2.0, avec `torch.nn.functional.scaled_dot_product_attention` qui est une version plus rapide du calcul de l'attention.\n\n### Accelération\n\n| **Model**        | **Inference speed (token/s)** |\n| :--------------: | :-------------: |\n| CodeGeeX-13B     | 32              |\n| **CodeGeeX2-6B** | 94              |\n> `batch_size=1, max_length=2048` et en utilisant l'accélération des GPUs `GeForce RTX-3090`。\n\n## License\n\nLe code dans ce dépôt est en libre accès selon les droits et devoirs prévu par la license [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0). Les poids du modèle sont régis par la [license du modèle](MODEL_LICENSE). Les poids du modèle CodeGeeX2-6B sont en accès libre pour toute utilisation dans le cadre de la recherche. Pour toute utilisation commerciale, merci de consulter ce [formulaire](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B).\n\n\n## Citation\n\nSi vous trouvez ce projet utile, n'hésitez pas à citer notre papier:\n\n```\n@inproceedings{zheng2023codegeex,\n  title={CodeGeeX: A Pre-Trained Model for Code Generation with Multilingual Benchmarking on HumanEval-X},\n  author={Qinkai Zheng and Xiao Xia and Xu Zou and Yuxiao Dong and Shan Wang and Yufei Xue and Zihan Wang and Lei Shen and Andi Wang and Yang Li and Teng Su and Zhilin Yang and Jie Tang},\n  booktitle={Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining},\n  pages={5673--5684},\n  year={2023}\n}\n```\n"
        },
        {
          "name": "README_JA.md",
          "type": "blob",
          "size": 13.140625,
          "content": "![](resources/codegeex_logo.png)\n\n<p align=\"center\">\n    🏠 <a href=\"https://codegeex.cn\" target=\"_blank\">ホームページ</a>｜🛠 拡張 <a href=\"https://marketplace.visualstudio.com/items?itemName=aminer.codegeex\" target=\"_blank\">VS Code</a>, <a href=\"https://plugins.jetbrains.com/plugin/20587-codegeex\" target=\"_blank\">Jetbrains</a>｜🤗 <a href=\"https://huggingface.co/THUDM/codegeex2-6b\" target=\"_blank\">HF Repo</a>｜📄 <a href=\"https://arxiv.org/abs/2303.17568\" target=\"_blank\">論文</a>\n</p>\n\n<p align=\"center\">\n    👋 <a href=\"https://discord.gg/8gjHdkmAN6\" target=\"_blank\">Discord</a> に参加, <a href=\"https://join.slack.com/t/codegeexworkspace/shared_invite/zt-1s118ffrp-mpKKhQD0tKBmzNZVCyEZLw\" target=\"_blank\">Slack</a>, <a href=\"https://t.me/+IipIayJ32B1jOTg1\" target=\"_blank\">Telegram</a>, <a href=\"resources/wechat.md\"target=\"_blank\">WeChat</a>\n</p>\n\n查看[中文版](README.md)<br>\nRead this in [English](README_EN.md)<br>\nLire en [Français](README_FR.md)\n\n# CodeGeeX2: より強力な多言語コード生成モデル\n\nCodeGeeX2 は、多言語コード生成モデル [CodeGeeX](https://github.com/THUDM/CodeGeeX)([KDD'23](https://arxiv.org/abs/2303.17568)) の第 2 世代モデルであり、より多くのコードデータで学習された [ChatGLM2](https://github.com/THUDM/ChatGLM2-6B) アーキテクチャに基づいて実装されています。ChatGLM2 のアドバンテージにより、CodeGeeX2 のコーディング能力は包括的に向上しています(+107% > CodeGeeX; わずか 6B のパラメータで、いくつかのタスクではより大規模な StarCoder-15B を凌駕しています)。以下の特徴があります:\n\n* **より強力なコーディング機能**: CodeGeeX2-6B は、ChatGLM2-6B モデルをベースに、さらに 600B のコードトークンに対して事前学習を行っており、第一世代と比較してコーディング能力が総合的に向上しています。[HumanEval-X](https://huggingface.co/datasets/THUDM/humaneval-x) ベンチマークでは、6 言語すべてで大幅な改善が見られ（Python +57%、C++ +71%、Java +54%、JavaScript +83%、Go +56%、Rust +321%）、Python では Pass@1 一回合格率 35.9% に達し、より大規模な StarCoder-15B を上回りました。\n* **その他の便利な機能**: ChatGLM2-6B モデルの特徴を継承し、CodeGeeX2-6B は中国語と英語のプロンプト、最大 8192 シーケンス長をサポートし、推論速度は第一世代と比較して大幅に改善されています。量子化後、推論に必要な GPU メモリは 6GB のみで、軽量なローカル展開をサポートします。\n* **包括的な AI コーディングアシスタント**: CodeGeeX プラグイン（[VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex)、[Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex)）のバックエンドがアップグレードされ、100 以上のプログラミング言語をサポートし、インフィルやクロスファイル補完などの実用的な機能が追加されました。対話型 AI コーディングアシスタント \"Ask CodeGeeX\" と組み合わせることで、中国語または英語の対話を通じて、コードの要約、コードの翻訳、デバッグ、コメント生成など、さまざまなプログラミング問題を解決することができ、開発者の作業効率を高めることができます。\n* **オープンライセンス**: CodeGeeX2-6B ウェイトは学術研究に全面的に開放しています。商用利用をご希望の方は、[登録フォーム](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B)にご記入の上、お申し込みください。\n\n\n## AI コーディングアシスタント\n\n![](resources/codegeex_demo.png)\n\nVS Code、IntelliJ IDEA、PyCharm、GoLand、WebStorm、Android Studio などの IDE をサポートする CodeGeeX プラグインを開発しました。このプラグインを使用することで、CodeGeeX2 モデルのコード生成と補完、アノテーション、コード変換、\"Ask CodeGeeX\" 対話型プログラミングなどの機能を体験することができ、開発効率を向上させることができます。より包括的な AI コーディング体験を得るために、IDE に CodeGeeX プラグインをダウンロードしてください。詳しくは[ホームページ](https://codegeex.cn/)をご覧ください。\n\n## 始める\n\n[CodeGeeX2-6B](https://huggingface.co/THUDM/codegeex2-6b) を素早く起動するには、`transformers` を使用します：\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\ntokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\nmodel = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\nmodel = model.eval()\n\n# remember adding a language tag for better performance\nprompt = \"# language: Python\\n# write a bubble sort function\\n\"\ninputs = tokenizer.encode(prompt, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(inputs, max_length=256, top_k=1)\nresponse = tokenizer.decode(outputs[0])\n\n>>> print(response)\n# language: Python\n# write a bubble sort function\n\n\ndef bubble_sort(list):\n    for i in range(len(list) - 1):\n        for j in range(len(list) - 1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n    return list\n\n\nprint(bubble_sort([5, 2, 1, 8, 4]))\n```\n\nGradio DEMO の起動:\n```\npython ./demo/run_demo.py\n```\n\n❗️注意:\n* CodeGeeX2 はベースモデルであり、チャット用の命令チューニングはされていません。コード補完/翻訳/説明のようなタスクは可能です。CodeGeeX のプラグイン([VS Code](https://marketplace.visualstudio.com/items?itemName=aminer.codegeex), [Jetbrains](https://plugins.jetbrains.com/plugin/20587-codegeex))で命令チューニングされたバージョンを試すことができます。\n* プログラミング言語は、`# language: Python` のように `language tag` を追加することで制御できます。パフォーマンスを確保するため、書式を守る必要があります。完全なリストは[こちら](https://github.com/THUDM/CodeGeeX2/blob/main/evaluation/utils.py#L14)にあります。より良い結果を得るためには、選択したプログラミング言語のフォーマットでコメントを書いてください。\n* 複数のグラフィックカードを使用してモデルをロードする必要がある場合は、以下のコードを使用できます：\n    ```python\n    tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n    model = AutoModel.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True, device='cuda')\n    model = model.eval()\n    ```\n    をに置き換えてください\n\n    ```python\n    def get_model():\n        tokenizer = AutoTokenizer.from_pretrained(\"THUDM/codegeex2-6b\", trust_remote_code=True)\n        from gpus import load_model_on_gpus\n        # gpusファイルはdemoフォルダにあります\n        model = load_model_on_gpus(\"THUDM/codegeex2-6b\", num_gpus=2)\n        model = model.eval()\n        return tokenizer, model\n\n    tokenizer, model = get_model()\n    ```\n## 評価\n\nCodeGeeX2 は多言語コード生成のベースモデルであり、前世代と比較してコーディング能力が大幅に向上しています。HumanEval、HumanEval-X、DS1000 ベンチマークでの評価結果を以下に示します（評価指標 Pass@k は[論文](https://arxiv.org/abs/2303.17568)と同じです）:\n\n### HumanEval (Pass@1,10,100)\n\n| **Model**           | **Pass@1** | **Pass@10** | **Pass@100** |\n| :-----------------: | :--------: | :---------: | :----------: |\n| CodeGen-16B-multi   | 19\\.2      | 34\\.6       | 55\\.2        |\n| CodeGeeX-13B        | 22\\.9      | 39\\.6       | 60\\.9        |\n| Codex-12B           | 28\\.8      | 46\\.8       | 72\\.3        |\n| CodeT5Plus-16B-mono | 30\\.9      | 51\\.6       | 76\\.7        |\n| Code-Cushman-001    | 33\\.5      | 54\\.3       | 77\\.4        |\n| LLaMA-65B           | 23\\.7      | -           | 79\\.3        |\n| LLaMA2-70B          | 29\\.9      | -           | -            |\n| CodeGen2\\.5-7B-mono | 33\\.4      | 58\\.4       | 82\\.7        |\n| StarCoder-15B       | 33\\.2      | 61\\.0       | 84\\.7        |\n| **CodeGeeX2-6B**    | **35\\.9**  | **62\\.6**   | **88\\.3**    |\n> **Pass@1** 使用 `n=20, t=0.2, top_p=0.95`; **Pass@10** および **Pass@100** を使用 `n=200, t=0.8, top_p=0.95`。\n\n### HumanEval-X (Pass@1)\n\n| **Model**                | **Python** | **C++**   | **Java**  | **JavaScript** | **Go**    | **Rust**  | **Overall** |\n| :------------------: | :--------: | :-------: | :-------: | :------------: | :-------: | :-------: | :---------: |\n| CodeGen-16B-multi    | 19\\.2      | 18\\.1     | 15\\.0     | 18\\.4          | 13\\.0     | 1\\.8      | 14\\.2       |\n| CodeGeeX-13B         | 22\\.9      | 17\\.1     | 20\\.0     | 17\\.6          | 14\\.4     | 4\\.3      | 16\\.0       |\n| Replit-code-v1-3B    | 22\\.0      | 20\\.1     | 20\\.1     | 20\\.1          | 12\\.2     | 8\\.6      | 17\\.2       |\n| CodeGen2\\.5-7B-multi | 30\\.6      | 24\\.3     | 29\\.0     | 27\\.5          | 18\\.9     | **20\\.1** | 25\\.1       |\n| StarCoder-15B        | 35\\.5      | 28\\.2     | **31\\.5** | **33\\.2**      | 21\\.3     | 17\\.8     | 27\\.9       |\n| **CodeGeeX2-6B**         | **35\\.9**  | **29\\.3** | 30\\.8     | 32\\.2          | **22\\.5** | 18\\.1     | **28\\.1**   |\n> **Pass@1** 使用 `n=20, t=0.2, top_p=0.95`。\n\n上記の結果は `scripts/run_humanevalx.sh` を実行することで再現できる。実験の設定は [HumanEval-X 環境](https://github.com/THUDM/CodeGeeX/blob/main/codegeex/benchmark/README_zh.md)を参照してください。\n\n### DS1000 (Pass@1)\n\n| **Model**            | **Matplotlib** | **Numpy** | **Pandas** | **Pytorch** | **SciPy** | **Scikit-learn** | **TensorFlow** | **Overall** |\n| :--------------: | :------------: | :-------: | :--------: | :---------: | :-------: | :--------------: | :------------: | :---------: |\n| \\# Samples       | 155            | 220       | 291        | 68          | 106       | 115              | 45             | 1000        |\n| CodeGen-16B-Mono | 31\\.7          | 10\\.9     | 3\\.4       | 7\\.0        | 9\\.0      | 10\\.8            | 15\\.2          | 11\\.7       |\n| code-cushman-001 | 40\\.7          | 21\\.8     | 7\\.9       | 12\\.4       | 11\\.3     | 18\\.0            | 12\\.2          | 18\\.1       |\n| Codex-001        | 41\\.8          | 26\\.6     | 9\\.4       | 9\\.7        | 15\\.0     | 18\\.5            | 17\\.2          | 20\\.2       |\n| **CodeGeeX2-6B** | 40\\.5          | 25\\.5     | 14\\.5      | 17\\.3       | 19\\.3     | 24\\.0            | 23\\.0          | 23\\.1       |\n| StarCoder-15B    | 51\\.7          | 29\\.7     | 11\\.4      | 21\\.4       | 20\\.2     | 29\\.5            | 24\\.5          | 26\\.0       |\n| Codex-002        | **57\\.0**      | **43\\.1** | **26\\.5**  | **41\\.8**   | **31\\.8** | **44\\.8**        | **39\\.3**      | **39\\.2**   |\n> **Pass@1** 使用 `n=40, t=0.2, top_p=0.5`。\n\n上記の結果は [DS1000 repo](https://github.com/HKUNLP/DS-1000.git) のコードで再現できる。\n\n## 推論\n\nCodeGeeX2 は、前世代よりも導入が容易になりました。マルチクエリーアテンションとフラッシュアテンションの使用により、推論速度が速くなり、INT4 量子化後に必要な GPU メモリは 6GB のみです。\n\n### 量子化\n\n| **Model**        | FP16/BF16 | INT8    | INT4   |\n| :--------------: | :-------: | :-----: | :----: |\n| CodeGeeX-13B     | 26\\.9 GB   | 14\\.7 GB | -      |\n| **CodeGeeX2-6B** | 13\\.1 GB  | 8\\.2 GB  | 5\\.5 GB |\n> PyTorch 2.0に基づき、`torch.nn.functional.scaled_dot_product_attention` を使用して、効率的なアテンションメカニズムを実現。\n\n### 加速\n\n| **Model**        | **推論速度 (token/秒)** |\n| :--------------: | :-------------: |\n| CodeGeeX-13B     | 32              |\n| **CodeGeeX2-6B** | 94              |\n> `batch_size=1, max_length=2048`, どちらもアクセラレーションフレームワークを使用、`GeForce RTX-3090` の場合。\n\n## ライセンス\n\nこのリポジトリのコードは、[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0) ライセンスの下でのオープンソースです。モデルのウェイトは [Model License](MODEL_LICENSE) に基づいてライセンスされています。CodeGeeX2-6B のウェイトは学術研究用に公開されています。商用利用を希望される方は、[登録フォーム](https://open.bigmodel.cn/mla/form?mcode=CodeGeeX2-6B)にご記入の上、お申し込みください。\n\n\n## 引用\n\n私たちの研究がお役に立ちましたら、ぜひ以下の論文を引用してください:\n\n```\n@inproceedings{zheng2023codegeex,\n  title={CodeGeeX: A Pre-Trained Model for Code Generation with Multilingual Benchmarking on HumanEval-X},\n  author={Qinkai Zheng and Xiao Xia and Xu Zou and Yuxiao Dong and Shan Wang and Yufei Xue and Zihan Wang and Lei Shen and Andi Wang and Yang Li and Teng Su and Zhilin Yang and Jie Tang},\n  booktitle={Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining},\n  pages={5673--5684},\n  year={2023}\n}\n```\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "evaluation",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.08203125,
          "content": "protobuf\ntransformers>=4.30.2\naccelerate\ncpm_kernels\ntorch>=2.0\nsentencepiece\ngradio"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}