{
  "metadata": {
    "timestamp": 1736560789290,
    "page": 480,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wzpan/wukong-robot",
      "stars": 6502,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0302734375,
          "content": "# Generic files to ignore\n*~\n*.lock\n*.DS_Store\n*.swp\n*.out\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff/Logfiles\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Coverage reports for a specific version\n.coverage\n\n# SublimeLinter config file\n.sublimelinterrc\n\n# temp folder\ntemp/*\n\n# temp file\n#*.*#\n#*#\n\\#*#\n*~\n.#*.*\n\n# NetEase music account info\nuserInfo\n\n# wget log\nwget-log*\n\n# some thirdparty libs\nclient/mic_array\nlogin/wxqr.png\n.idea/\nsftp-config.json\n__pycache__\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2490234375,
          "content": "env:\n    - ARCH=x86\nlanguage: python\nsudo: false\npython:\n    - \"3.5\"\ncache:\n  directories:\n    - \"$HOME/.pip-cache/\"\n    - \"/home/travis/virtualenv/python3.8\"\ninstall: \n    - \"pip3 install pyflakes --cache-dir $HOME/.pip-cache\"\nscript:\n    - \"pyflakes .\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2016 - present Weizhou Pan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.5009765625,
          "content": "# wukong-robot\n\n<p align=\"center\">\n  <a href=\"https://wukong.hahack.com\" target=\"_blank\">\n    <img width=\"128\" src=\"http://hahack-1253537070.file.myqcloud.com/images/wukong-icons/256_256.png\" alt=\"wukong-robot\">\n  </a>\n</p>\n\n<p align=\"center\">\n  wukong-robot 是一个简单、灵活、优雅的中文语音对话机器人/智能音箱项目，目的是让中国的 Maker 和 Haker 们也能快速打造个性化的智能音箱。wukong-robot 还可能是第一个开源的脑机唤醒智能音箱。  \n</p>\n<p align=\"center\">\n  截至 2023 年 3 月 31 日，wukong-robot 的安装设备数已超过 13,000 台，唤醒次数累积超过了 700,000 次。\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/users/wzpan/projects/2/views/1\"><img alt=\"wukong-project\" src=\"https://img.shields.io/badge/project-wukong-informational.svg?style=flat-square\"></a>\n  <a href=\"https://wukong.hahack.com/#/donate\"><img alt=\"捐赠\" src=\"https://img.shields.io/badge/%EF%BF%A5-donate-green.svg?style=flat-square\"></a>\n  <a href=\"#\"><img alt=\"Python3.7+\" src=\"https://img.shields.io/badge/Python->=3.7-blue.svg?style=flat-square\"></a>\n  <a href=\"https://hub.docker.com/r/wzpan/wukong-robot\"><img alt=\"docker-pulls\" src=\"https://img.shields.io/docker/pulls/wzpan/wukong-robot.svg?style=flat-square&colorB=success\"></a>\n  <a href=\"https://github1s.com/wzpan/wukong-robot\"><img alt=\"browse-code\" src=\"https://img.shields.io/badge/browse-code-purple.svg?style=flat-square\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://opencollective.com/wukong-robot/contribute/tier/8131-sponsor\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsors.svg?avatarHeight=36\"></a>\n</p>\n\n## Table of Contents\n\n* [特性](#特性)\n* [Demo](#demo)\n* [环境要求](#环境要求)\n* [安装](#安装)\n* [升级](#升级)\n* [运行](#运行)\n* [配置](#配置)\n* [技能插件](#插件)\n* [API接口](#api-接口)\n* [捐赠](#捐赠)\n* [贡献](#贡献)\n* [引用](#引用)\n* [联系](#联系)\n* [感谢](#感谢)\n* [FAQ](#faq)\n* [免责声明](#免责声明)\n\n## 特性\n\n<p align=\"center\">\n  <img src=\"https://wzpan-1253537070.cos.ap-guangzhou.myqcloud.com/wukong/wukong-robot-3.3.0.png\" alt=\"wukong-robot\">\n</p>\n\n* 模块化。功能插件、语音识别、语音合成、对话机器人都做到了高度模块化，第三方插件单独维护，方便继承和开发自己的插件。\n* 中文支持。集成百度、科大讯飞、阿里、腾讯、OpenAI Whisper、Apple、微软Edge、VITS声音克隆TTS 等多家中文语音识别和语音合成技术，且可以继续扩展。\n* 对话机器人支持。支持基于 [AnyQ](https://wukong.hahack.com/#/anyq) 的本地对话机器人，并支持接入图灵机器人、ChatGPT 等在线对话机器人。\n* 全局监听，离线唤醒。支持 [Porcupine](https://github.com/Picovoice/porcupine) 和 [snowboy](https://github.com/Kitt-AI/snowboy) 两套离线语音指令唤醒引擎，并支持 Muse [脑机唤醒](https://wukong.hahack.com/#/bci) 以及行空板摇一摇唤醒等其他唤醒方式。\n* 灵活可配置。支持定制机器人名字，支持选择语音识别和合成的插件。\n* 智能家居。支持和 [小爱音箱](https://wukong.hahack.com/#/linkage)、[Siri](https://wukong.hahack.com/#/linkage)、mqtt、[HomeAssistant](https://wukong.hahack.com/#/smarthome) 等智能家居协议联动，支持语音控制智能家电。\n* 后台配套支持。提供配套后台，可实现远程操控、修改配置和日志查看等功能。\n* 开放API。可利用后端开放的API，实现更丰富的功能。\n* 安装简单，支持更多平台。相比 dingdang-robot ，舍弃了 PocketSphinx 的离线唤醒方案，安装变得更加简单，代码量更少，更易于维护并且能在 Mac 以及更多 Linux 系统中运行。\n\nwukong-robot 的功能还在不断更新迭代中，详见 [更新说明](https://github.com/wzpan/wukong-robot/wiki/update-notes) 。\n\nwukong-robot 的工作模式：\n\n<p align=\"center\">\n  <img src=\"https://wzpan-1253537070.cos.ap-guangzhou.myqcloud.com/wukong/wukong-robot-workflow.png\" alt=\"wukong-robot 的工作模式\">\n</p>\n\nwukong-robot 被唤醒后，用户的语音指令先经过 ASR 引擎进行 ASR 识别成文本，然后对识别到的文本进行 NLU 解析，再将解析结果进行技能匹配，交给适合处理该指令的技能插件去处理。插件处理完成后，得到的结果再交给 TTS 引擎合成成语音，播放给用户。\n\n虽然一次交互可能包含多次网络请求，不过带来的好处是：每一个环节都可以被修改和定制。而且我认为，到了 5G 时代，音箱的响应速度将不再成为体验问题。可定制和个性化才是未来的主流，而届时 wukong-robot 将会是更好的选择！\n\n## Demo\n\n<p align=\"center\">\n  <img src=\"https://wzpan-1253537070.cos.ap-guangzhou.myqcloud.com/wukong/user-demo.jpg\" alt=\"demo\">\n</p>\n\n* Demo视频：\n  - [wukong-robot + ChatGPT 实现支持流式对话的智能音箱（一分半钟）](https://www.bilibili.com/video/BV1Bh411g7t2)\n  - [粉丝向定制版，演示对话+音乐+开放API+智能家居（五分钟）](https://www.bilibili.com/video/av50685517/)\n  - [使用脑机唤醒 wukong-robot](https://www.bilibili.com/video/av76739580/)\n  - [Google AIY Voice Kit + wukong-robot](https://www.bilibili.com/video/av81173082/)\n  - [Siri 联动 wukong-robot + ChatGPT](https://www.bilibili.com/video/BV1yY4y1y7oW)\n  - [小爱同学联动 wukong-robot](https://www.bilibili.com/video/BV1eg4y1b75Y)\n  - [教程：基于树莓派&wukong-robot&VITS的AI泠鸢开源智能音箱的初步实现（by @二维环状无限深势阱）](https://www.bilibili.com/video/BV1Sc411K7dv)\n  - [教程：实现一个虚拟管家：贾维斯(by @Echo）](https://zhuanlan.zhihu.com/p/655865035)\n* 后台管理端 Demo\n  - 体验地址：https://bot.hahack.com  （体验用户名：wukong；体验密码：wukong@2019）\n\n## 环境要求 ##\n\n### Python 版本 ###\n\nwukong-robot 只支持 Python >= 3.7 且 < 3.10 ，不支持 Python 2.x 。\n\n### 设备要求 ###\n\nwukong-robot 支持运行在以下的设备和系统中：\n\n* Intel Chip Mac (不支持 M1 芯片)\n* 64bit Ubuntu（12.04 and 14.04）\n* 全系列的树莓派（Raspbian 系统）\n* Pine 64 with Debian Jessie 8.5（3.10.102）\n* Intel Edison with Ubilinux （Debian Wheezy 7.8）\n* 装有 WSL（Windows Subsystem for Linux） 的 Windows\n\n## 安装 ##\n\n见 [wukong-robot 安装教程](https://wukong.hahack.com/#/install) 。\n\n## 升级\n\n``` bash\npython3 wukong.py update\n```\n\n如果提示升级失败，可以尝试在 wukong-robot 的根目录手动执行以下命令，看看问题出在哪。\n\n``` sh\ngit pull\npip3 install -r requirements.txt\n```\n\n## 运行 ##\n\n``` bash\npython3 wukong.py\n```\n\n建议在 [tmux](http://blog.jobbole.com/87278/) 或 supervisor 中执行。\n\n第一次启动时将提示你是否要到用户目录下创建一个配置文件，输入 `y` 即可。\n\n然后通过唤醒词 “snowboy” 唤醒 wukong-robot 进行交互（该唤醒词可自定义）。\n\n此外，wukong-robot 默认在运行期间还会启动一个后台管理端，提供了远程对话、查看修改配置、查看 log 等能力。\n\n- 默认地址：http://localhost:5001\n- 默认账户名：wukong\n- 默认密码：wukong@2019\n\n建议正式使用时修改用户名和密码，以免泄漏隐私。\n\n## 配置 ##\n\n参考[配置文件的注释](https://github.com/wzpan/wukong-robot/blob/master/static/default.yml)进行配置即可。注意不建议直接修改 default.yml 里的内容，否则会给后续通过 `git pull` 更新带来麻烦。你应该拷贝一份放到 `$HOME/.wukong/config.yml` 中，或者在运行的时候按照提示让 wukong-robot 为你完成这件事。\n\n> tips：不论使用哪个厂商的API，都建议注册并填上自己注册的应用信息，而不要用默认的配置。这是因为这些API都有使用频率和并发数限制，过多人同时使用会影响服务质量。\n\n## 技能插件 ##\n\n* [官方插件列表](https://wukong.hahack.com/#/official)\n* [用户贡献插件](https://wukong.hahack.com/#/contrib)\n\n## API 接口 ##\n\nwukong-robot 的后台接口是开放 Web API 的，可以使用 Restful 方式调用，见 [后台API](https://wukong.hahack.com/#/api)。\n\n## 捐赠\n\n您的捐赠将鼓励我继续完善 wukong-robot。\n\n* 对于个人用户，可以使用支付宝或者微信进行捐赠，单笔超过 100 元的捐赠者，您的 ID 将可以出现在 wukong-robot 后台管理端的捐赠页面中。\n\n \n| 支付宝 | 微信支付 |\n| ------ | --------- |\n| <img src=\"http://hahack.com/images/misc/alipay.png\" height=\"248px\" width=\"164px\" title=\"支付宝\" style=\"display:inherit;\"/> | <img src=\"http://hahack.com/images/misc/wechatpay.jpeg\" height=\"248px\" width=\"164px\" title=\"微信支付\" style=\"display:inherit;\"/> |\n\n如果以上的图裂了，可以下载图片（[支付宝](http://hahack.com/images/misc/alipay.png) | [微信](http://hahack.com/images/misc/wechatpay.jpeg)）到本地进行扫描。\n\n* 对于企业用户，建议[成为这个项目的 backer](https://opencollective.com/wukong-robot/contribute/tier/8131-sponsor)，您将可以把一个带链接的 logo 放在 wukong-robot 后台管理端的首页、捐赠页面以及 Github 项目首页中。\n\n<p>\n  <a href=\"https://opencollective.com/wukong-robot/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/wukong-robot/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/wukong-robot/sponsor/9/avatar.svg\"></a>\n</p>\n\n## 贡献\n\n* 喜欢本项目请先打一颗星；\n* 提 bug 请到 [issue 页面](https://github.com/wzpan/wukong-robot/issues)；\n* 要贡献代码，欢迎 fork 之后再提 pull request；\n* 插件请提交到 [wukong-contrib](https://github.com/wzpan/wukong-contrib) ；\n\n\n## 引用\n\n如果使用本项目的代码或插件，请引用本项目。\n\n```\n@misc{wukong-robot,\n  author = {潘伟洲},\n  title = {wukong-robot，一个简单、灵活、优雅的中文语音对话机器人/智能音箱项目},\n  year = {2019},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/wzpan/wukong-robot}},\n}\n```\n\n\n## 联系\n\n* wukong-robot 的主要开发者是 [潘伟洲](http://hahack.com) 。\n* QQ 频道（推荐）：\n\n使用 QQ 扫码加入：\n\n![](https://wzpan-1253537070.cos.ap-guangzhou.myqcloud.com/misc/wukong-guild-qrcode-256.png)\n\n* QQ 群：580447290（人数将满，为控制人数，需付费20元入群。微信或支付宝支付后，申请入群时贴上转账单号即可。**群收入的前一万元已无偿捐赠给[壹基金等公益项目](https://hahack-1253537070.cos.ap-chengdu.myqcloud.com/images/donate.png)**）。\n\n| 支付宝 | 微信支付 |\n| ------ | --------- |\n| <img src=\"http://hahack.com/images/misc/alipay.png\" height=\"248px\" width=\"164px\" title=\"支付宝\" style=\"display:inherit;\"/> | <img src=\"http://hahack.com/images/misc/wechatpay.jpeg\" height=\"248px\" width=\"164px\" title=\"微信支付\" style=\"display:inherit;\"/> |\n\n如果以上的图裂了，可以下载图片（[支付宝](http://hahack.com/images/misc/alipay.png) | [微信](http://hahack.com/images/misc/wechatpay.jpeg)）到本地进行扫描。\n\n## 感谢\n\n* 悟空的前身是 [dingdang-robot](https://github.com/dingdang-robot/dingdang-robot) 项目和 [jasper-client](https://github.com/jasperproject/jasper-client) 项目。感谢 [Shubhro Saha](http://www.shubhro.com/), [Charles Marsh](http://www.crmarsh.com/) and [Jan Holthuis](http://homepage.ruhr-uni-bochum.de/Jan.Holthuis/) 在 Jasper 项目上做出的优秀贡献；\n* 感谢三咲智子提供了备选的后台管理端 Demo 体验地址。\n* 感谢 aliciacai 贡献的 wukong-robot 图标。\n* 感谢所有为[本项目](https://github.com/wzpan/wukong-robot/graphs/contributors)、 [wukong-contrib](https://github.com/wzpan/wukong-contrib/graphs/contributors) 项目以及[dingdang-robot](https://github.com/dingdang-robot/dingdang-robot/graphs/contributors) 项目做出过贡献的人！\n\n## Star 历史\n\n[![Star History Chart](https://api.star-history.com/svg?repos=wzpan/wukong-robot&type=Date)](https://star-history.com/#wzpan/wukong-robot&Date)\n\n## 免责声明\n\n* wukong-robot 只用作个人学习研究，如因使用 wukong-robot 导致任何损失，本人概不负责。\n* 本开源项目与腾讯叮当助手及优必选悟空项目没有任何关系。\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.5.3\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3056640625,
          "content": "pyyaml>=4.2b1\nrequests==2.31.0\nbaidu-aip==2.0.0.1\npydub==0.23.1\npython-dateutil==2.7.5\nwatchdog==0.9.0\npytz==2018.9\nfire==0.1.3\ntornado==6.3.3\nmarkdown==3.0.1\nsemver==2.8.1\nwebsocket==0.2.1\nwebsocket-client\npypinyin\njieba\npvporcupine\npvrecorder==1.1.1\nopenai\napscheduler\nasyncio\nedge-tts\nnest_asyncio\nfunasr_onnx\n"
        },
        {
          "name": "robot",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "snowboy",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "temp",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wukong.py",
          "type": "blob",
          "size": 5.740234375,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nimport fire\nimport signal\nimport hashlib\nimport urllib3\n\nfrom robot.Updater import Updater\nfrom robot.Conversation import Conversation\nfrom robot.LifeCycleHandler import LifeCycleHandler\n\nfrom robot import config, utils, constants, logging, detector\n\nfrom server import server\nfrom tools import make_json, solr_tools\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nlogger = logging.getLogger(__name__)\n\n\nclass Wukong(object):\n\n    _profiling = False\n    _debug = False\n\n    def init(self):\n        self.detector = None\n        self.porcupine = None\n        self.gui = None\n        self._interrupted = False\n        print(\n            \"\"\"\n********************************************************\n*          wukong-robot - 中文语音对话机器人           *\n*          (c) 2019 潘伟洲 <m@hahack.com>              *\n*               当前版本号:  {}                      *\n*     https://github.com/wzpan/wukong-robot.git        *\n********************************************************\n\n            后台管理端：http://{}:{}\n            如需退出，可以按 Ctrl-4 组合键\n\n\"\"\".format(\n                utils.get_file_content(\n                    os.path.join(constants.APP_PATH, \"VERSION\"), \"r\"\n                ).strip(),\n                config.get(\"/server/host\", \"0.0.0.0\"),\n                config.get(\"/server/port\", \"5001\"),\n            )\n        )\n\n        self.conversation = Conversation(self._profiling)\n        self.conversation.say(f\"{config.get('first_name', '主人')} 你好！试试对我喊唤醒词叫醒我吧\", True)\n        self.lifeCycleHandler = LifeCycleHandler(self.conversation)\n        self.lifeCycleHandler.onInit()\n\n    def _signal_handler(self, signal, frame):\n        self._interrupted = True\n        utils.clean()\n        self.lifeCycleHandler.onKilled()\n\n    def _detected_callback(self, is_snowboy=True):\n        def _start_record():\n            logger.info(\"开始录音\")\n            self.conversation.isRecording = True\n            utils.setRecordable(True)\n\n        if not utils.is_proper_time():\n            logger.warning(\"勿扰模式开启中\")\n            return\n        if self.conversation.isRecording:\n            logger.warning(\"正在录音中，跳过\")\n            return\n        if is_snowboy:\n            self.conversation.interrupt()\n            utils.setRecordable(False)\n        self.lifeCycleHandler.onWakeup()\n        if is_snowboy:\n            _start_record()\n\n    def _interrupt_callback(self):\n        return self._interrupted\n\n    def run(self):\n        self.init()\n        # capture SIGINT signal, e.g., Ctrl+C\n        signal.signal(signal.SIGINT, self._signal_handler)\n        # 后台管理端\n        server.run(self.conversation, self, debug=self._debug)\n        try:\n            # 初始化离线唤醒\n            detector.initDetector(self)\n        except AttributeError:\n            logger.error(\"初始化离线唤醒功能失败\", stack_info=True)\n            pass\n\n    def help(self):\n        print(\n            \"\"\"=====================================================================================\n    python3 wukong.py [命令]\n    可选命令：\n      md5                      - 用于计算字符串的 md5 值，常用于密码设置\n      update                   - 手动更新 wukong-robot\n      upload [thredNum]        - 手动上传 QA 集语料，重建 solr 索引。\n                                 threadNum 表示上传时开启的线程数（可选。默认值为 10）\n      profiling                - 运行过程中打印耗时数据\n    如需更多帮助，请访问：https://wukong.hahack.com/#/run\n=====================================================================================\"\"\"\n        )\n\n    def md5(self, password):\n        \"\"\"\n        计算字符串的 md5 值\n        \"\"\"\n        return hashlib.md5(str(password).encode(\"utf-8\")).hexdigest()\n\n    def update(self):\n        \"\"\"\n        更新 wukong-robot\n        \"\"\"\n        updater = Updater()\n        return updater.update()\n\n    def fetch(self):\n        \"\"\"\n        检测 wukong-robot 的更新\n        \"\"\"\n        updater = Updater()\n        updater.fetch()\n\n    def upload(self, threadNum=10):\n        \"\"\"\n        手动上传 QA 集语料，重建 solr 索引\n        \"\"\"\n        try:\n            qaJson = os.path.join(constants.TEMP_PATH, \"qa_json\")\n            make_json.run(constants.getQAPath(), qaJson)\n            solr_tools.clear_documents(\n                config.get(\"/anyq/host\", \"0.0.0.0\"),\n                \"collection1\",\n                config.get(\"/anyq/solr_port\", \"8900\"),\n            )\n            solr_tools.upload_documents(\n                config.get(\"/anyq/host\", \"0.0.0.0\"),\n                \"collection1\",\n                config.get(\"/anyq/solr_port\", \"8900\"),\n                qaJson,\n                threadNum,\n            )\n        except Exception as e:\n            logger.error(f\"上传失败：{e}\", stack_info=True)\n\n    def restart(self):\n        \"\"\"\n        重启 wukong-robot\n        \"\"\"\n        logger.critical(\"程序重启...\")\n        try:\n            self.detector.terminate()\n        except AttributeError:\n            pass\n        python = sys.executable\n        os.execl(python, python, *sys.argv)\n\n    def profiling(self):\n        \"\"\"\n        运行过程中打印耗时数据\n        \"\"\"\n        logger.info(\"性能调优\")\n        self._profiling = True\n        self.run()\n\n    def debug(self):\n        \"\"\"\n        调试模式启动服务\n        \"\"\"\n        logger.info(\"进入调试模式\")\n        self._debug = True\n        self.run()\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        wukong = Wukong()\n        wukong.run()\n    elif \"-h\" in (sys.argv):\n        wukong = Wukong()\n        wukong.help()\n    else:\n        fire.Fire(Wukong)\n"
        }
      ]
    }
  ]
}