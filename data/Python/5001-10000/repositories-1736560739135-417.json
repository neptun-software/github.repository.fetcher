{
  "metadata": {
    "timestamp": 1736560739135,
    "page": 417,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenTalker/video-retalking",
      "stars": 6808,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1171875,
          "content": "*.pkl\n*.jpg\n*.pth\n*.pyc\n__pycache__\n*.h5\n*.pyc\n*.mkv\n*.gif\n*.webm\ncheckpoints/*\nresults/*\ntemp/*\nsegments.txt\n.DS_Store\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.9521484375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic address, without explicit permission\n- Other conduct that could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team  All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at [https://www.contributor-covenant.org/version/2/0/code_of_conduct.html](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.51953125,
          "content": "<div align=\"center\">\n\n<h2>VideoReTalking <br/> <span style=\"font-size:12px\">Audio-based Lip Synchronization for Talking Head Video Editing in the Wild</span> </h2> \n\n  <a href='https://arxiv.org/abs/2211.14758'><img src='https://img.shields.io/badge/ArXiv-2211.14758-red'></a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href='https://vinthony.github.io/video-retalking/'><img src='https://img.shields.io/badge/Project-Page-Green'></a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/vinthony/video-retalking/blob/main/quick_demo.ipynb)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n[![Replicate](https://replicate.com/cjwbw/video-retalking/badge)](https://replicate.com/cjwbw/video-retalking)\n\n<div>\n    <a target='_blank'>Kun Cheng <sup>*,1,2</sup> </a>&emsp;\n    <a href='https://vinthony.github.io/' target='_blank'>Xiaodong Cun <sup>*,2</a>&emsp;\n    <a href='https://yzhang2016.github.io/yongnorriszhang.github.io/' target='_blank'>Yong Zhang <sup>2</sup></a>&emsp;\n    <a href='https://menghanxia.github.io/' target='_blank'>Menghan Xia <sup>2</sup></a>&emsp;\n    <a href='https://feiiyin.github.io/' target='_blank'>Fei Yin <sup>2,3</sup></a>&emsp;<br/>\n    <a href='https://web.xidian.edu.cn/mrzhu/en/index.html' target='_blank'>Mingrui Zhu <sup>1</sup></a>&emsp;\n    <a href='https://xuanwangvc.github.io/' target='_blank'>Xuan Wang <sup>2</sup></a>&emsp;\n    <a href='https://juewang725.github.io/' target='_blank'>Jue Wang <sup>2</sup></a>&emsp;\n    <a href='https://web.xidian.edu.cn/nnwang/en/index.html' target='_blank'>Nannan Wang <sup>1</sup></a>\n</div>\n<br>\n<div>\n    <sup>1</sup> Xidian University &emsp; <sup>2</sup> Tencent AI Lab &emsp; <sup>3</sup> Tsinghua University\n</div>\n<br>\n<i><strong><a href='https://sa2022.siggraph.org/' target='_blank'>SIGGRAPH Asia 2022 Conference Track</a></strong></i>\n<br>\n<br>\n<img src=\"https://opentalker.github.io/video-retalking/static/images/teaser.png\" width=\"768px\">\n\n\n<div align=\"justify\">  <BR> We present VideoReTalking, a new system to edit the faces of a real-world talking head video according to input audio, producing a high-quality and lip-syncing output video even with a different emotion. Our system disentangles this objective into three sequential tasks:\n  \n <BR> (1) face video generation with a canonical expression\n<BR> (2) audio-driven lip-sync and \n  <BR> (3) face enhancement for improving photo-realism. \n  \n <BR>  Given a talking-head video, we first modify the expression of each frame according to the same expression template using the expression editing network, resulting in a video with the canonical expression. This video, together with the given audio, is then fed into the lip-sync network to generate a lip-syncing video. Finally, we improve the photo-realism of the synthesized faces through an identity-aware face enhancement network and post-processing. We use learning-based approaches for all three steps and all our modules can be tackled in a sequential pipeline without any user intervention.</div>\n<BR>\n\n<p>\n<img alt='pipeline' src=\"./docs/static/images/pipeline.png?raw=true\" width=\"768px\"><br>\n<em align='center'>Pipeline</em>\n</p>\n\n</div>\n\n## Results in the Wild （contains audio）\nhttps://user-images.githubusercontent.com/4397546/224310754-665eb2dd-aadc-47dc-b1f9-2029a937b20a.mp4\n\n\n\n\n## Environment\n```\ngit clone https://github.com/vinthony/video-retalking.git\ncd video-retalking\nconda create -n video_retalking python=3.8\nconda activate video_retalking\n\nconda install ffmpeg\n\n# Please follow the instructions from https://pytorch.org/get-started/previous-versions/\n# This installation command only works on CUDA 11.1\npip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html\n\npip install -r requirements.txt\n```\n\n## Quick Inference\n\n#### Pretrained Models\nPlease download our [pre-trained models](https://drive.google.com/drive/folders/18rhjMpxK8LVVxf7PI6XwOidt8Vouv_H0?usp=share_link) and put them in `./checkpoints`.\n\n<!-- We also provide some [example videos and audio](https://drive.google.com/drive/folders/14OwbNGDCAMPPdY-l_xO1axpUjkPxI9Dv?usp=share_link). Please put them in `./examples`. -->\n\n#### Inference\n\n```\npython3 inference.py \\\n  --face examples/face/1.mp4 \\\n  --audio examples/audio/1.wav \\\n  --outfile results/1_1.mp4\n```\nThis script includes data preprocessing steps. You can test any talking face videos without manual alignment. But it is worth noting that DNet cannot handle extreme poses.\n\nYou can also control the expression by adding the following parameters:\n\n```--exp_img```: Pre-defined expression template. The default is \"neutral\". You can choose \"smile\" or an image path.\n\n```--up_face```: You can choose \"surprise\" or \"angry\" to modify the expression of upper face with [GANimation](https://github.com/donydchen/ganimation_replicate).\n\n\n\n## Citation\n\nIf you find our work useful in your research, please consider citing:\n\n```\n@misc{cheng2022videoretalking,\n        title={VideoReTalking: Audio-based Lip Synchronization for Talking Head Video Editing In the Wild}, \n        author={Kun Cheng and Xiaodong Cun and Yong Zhang and Menghan Xia and Fei Yin and Mingrui Zhu and Xuan Wang and Jue Wang and Nannan Wang},\n        year={2022},\n        eprint={2211.14758},\n        archivePrefix={arXiv},\n        primaryClass={cs.CV}\n  }\n```\n\n## Acknowledgement\nThanks to\n[Wav2Lip](https://github.com/Rudrabha/Wav2Lip),\n[PIRenderer](https://github.com/RenYurui/PIRender), \n[GFP-GAN](https://github.com/TencentARC/GFPGAN), \n[GPEN](https://github.com/yangxy/GPEN),\n[ganimation_replicate](https://github.com/donydchen/ganimation_replicate),\n[STIT](https://github.com/rotemtzaban/STIT)\nfor sharing their code.\n\n\n## Related Work\n- [StyleHEAT: One-Shot High-Resolution Editable Talking Face Generation via Pre-trained StyleGAN (ECCV 2022)](https://github.com/FeiiYin/StyleHEAT)\n- [CodeTalker: Speech-Driven 3D Facial Animation with Discrete Motion Prior (CVPR 2023)](https://github.com/Doubiiu/CodeTalker)\n- [SadTalker: Learning Realistic 3D Motion Coefficients for Stylized Audio-Driven Single Image Talking Face Animation (CVPR 2023)](https://github.com/Winfredy/SadTalker)\n- [DPE: Disentanglement of Pose and Expression for General Video Portrait Editing (CVPR 2023)](https://github.com/Carlyx/DPE)\n- [3D GAN Inversion with Facial Symmetry Prior (CVPR 2023)](https://github.com/FeiiYin/SPI/)\n- [T2M-GPT: Generating Human Motion from Textual Descriptions with Discrete Representations (CVPR 2023)](https://github.com/Mael-zys/T2M-GPT)\n\n##  Disclaimer\n\nThis is not an official product of Tencent. \n\n```\n1. Please carefully read and comply with the open-source license applicable to this code before using it. \n2. Please carefully read and comply with the intellectual property declaration applicable to this code before using it.\n3. This open-source code runs completely offline and does not collect any personal information or other data. If you use this code to provide services to end-users and collect related data, please take necessary compliance measures according to applicable laws and regulations (such as publishing privacy policies, adopting necessary data security strategies, etc.). If the collected data involves personal information, user consent must be obtained (if applicable). Any legal liabilities arising from this are unrelated to Tencent.\n4. Without Tencent's written permission, you are not authorized to use the names or logos legally owned by Tencent, such as \"Tencent.\" Otherwise, you may be liable for your legal responsibilities.\n5. This open-source code does not have the ability to directly provide services to end-users. If you need to use this code for further model training or demos, as part of your product to provide services to end-users, or for similar use, please comply with applicable laws and regulations for your product or service. Any legal liabilities arising from this are unrelated to Tencent.\n6. It is prohibited to use this open-source code for activities that harm the legitimate rights and interests of others (including but not limited to fraud, deception, infringement of others' portrait rights, reputation rights, etc.), or other behaviors that violate applicable laws and regulations or go against social ethics and good customs (including providing incorrect or false information, spreading pornographic, terrorist, and violent information, etc.). Otherwise, you may be liable for your legal responsibilities.\n\n```\n## All Thanks To Our Contributors \n\n<a href=\"https://github.com/OpenTalker/video-retalking/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=OpenTalker/video-retalking\" />\n</a>\n"
        },
        {
          "name": "cog.yaml",
          "type": "blob",
          "size": 1.556640625,
          "content": "# Configuration for Cog ⚙️\n# Reference: https://github.com/replicate/cog/blob/main/docs/yaml.md\n\nbuild:\n  gpu: true\n  system_packages:\n    - \"libgl1-mesa-glx\"\n    - \"libglib2.0-0\"\n    - \"ffmpeg\"\n  python_version: \"3.11\"\n  python_packages:\n    - \"torch==2.0.1\"\n    - \"torchvision==0.15.2\"\n    - \"basicsr==1.4.2\"\n    - \"kornia==0.5.1\"\n    - \"face-alignment==1.3.4\"\n    - \"ninja==1.10.2.3\"\n    - \"einops==0.4.1\"\n    - \"facexlib==0.2.5\"\n    - \"librosa==0.9.2\"\n    - \"cmake==3.27.7\"\n    - \"numpy==1.23.4\"\n  run:\n    - pip install dlib\n    - mkdir -p /root/.pyenv/versions/3.11.6/lib/python3.11/site-packages/facexlib/weights/ && wget --output-document \"/root/.pyenv/versions/3.11.6/lib/python3.11/site-packages/facexlib/weights/detection_Resnet50_Final.pth\" \"https://github.com/xinntao/facexlib/releases/download/v0.1.0/detection_Resnet50_Final.pth\"\n    - mkdir -p /root/.pyenv/versions/3.11.6/lib/python3.11/site-packages/facexlib/weights/ && wget --output-document \"/root/.pyenv/versions/3.11.6/lib/python3.11/site-packages/facexlib/weights/parsing_parsenet.pth\" \"https://github.com/xinntao/facexlib/releases/download/v0.2.2/parsing_parsenet.pth\"\n    - mkdir -p /root/.cache/torch/hub/checkpoints/ && wget --output-document \"/root/.cache/torch/hub/checkpoints/s3fd-619a316812.pth\" \"https://www.adrianbulat.com/downloads/python-fan/s3fd-619a316812.pth\"\n    - mkdir -p /root/.cache/torch/hub/checkpoints/ && wget --output-document \"/root/.cache/torch/hub/checkpoints/2DFAN4-cd938726ad.zip\" \"https://www.adrianbulat.com/downloads/python-fan/2DFAN4-cd938726ad.zip\"\npredict: \"predict.py:Predictor\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference.py",
          "type": "blob",
          "size": 16.822265625,
          "content": "import numpy as np\nimport cv2, os, sys, subprocess, platform, torch\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom scipy.io import loadmat\n\nsys.path.insert(0, 'third_part')\nsys.path.insert(0, 'third_part/GPEN')\nsys.path.insert(0, 'third_part/GFPGAN')\n\n# 3dmm extraction\nfrom third_part.face3d.util.preprocess import align_img\nfrom third_part.face3d.util.load_mats import load_lm3d\nfrom third_part.face3d.extract_kp_videos import KeypointExtractor\n# face enhancement\nfrom third_part.GPEN.gpen_face_enhancer import FaceEnhancement\nfrom third_part.GFPGAN.gfpgan import GFPGANer\n# expression control\nfrom third_part.ganimation_replicate.model.ganimation import GANimationModel\n\nfrom utils import audio\nfrom utils.ffhq_preprocess import Croper\nfrom utils.alignment_stit import crop_faces, calc_alignment_coefficients, paste_image\nfrom utils.inference_utils import Laplacian_Pyramid_Blending_with_mask, face_detect, load_model, options, split_coeff, \\\n                                  trans_image, transform_semantic, find_crop_norm_ratio, load_face3d_net, exp_aus_dict\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nargs = options()\n\ndef main():    \n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    print('[Info] Using {} for inference.'.format(device))\n    os.makedirs(os.path.join('temp', args.tmp_dir), exist_ok=True)\n\n    enhancer = FaceEnhancement(base_dir='checkpoints', size=512, model='GPEN-BFR-512', use_sr=False, \\\n                               sr_model='rrdb_realesrnet_psnr', channel_multiplier=2, narrow=1, device=device)\n    restorer = GFPGANer(model_path='checkpoints/GFPGANv1.3.pth', upscale=1, arch='clean', \\\n                        channel_multiplier=2, bg_upsampler=None)\n\n    base_name = args.face.split('/')[-1]\n    if os.path.isfile(args.face) and args.face.split('.')[1] in ['jpg', 'png', 'jpeg']:\n        args.static = True\n    if not os.path.isfile(args.face):\n        raise ValueError('--face argument must be a valid path to video/image file')\n    elif args.face.split('.')[1] in ['jpg', 'png', 'jpeg']:\n        full_frames = [cv2.imread(args.face)]\n        fps = args.fps\n    else:\n        video_stream = cv2.VideoCapture(args.face)\n        fps = video_stream.get(cv2.CAP_PROP_FPS)\n\n        full_frames = []\n        while True:\n            still_reading, frame = video_stream.read()\n            if not still_reading:\n                video_stream.release()\n                break\n            y1, y2, x1, x2 = args.crop\n            if x2 == -1: x2 = frame.shape[1]\n            if y2 == -1: y2 = frame.shape[0]\n            frame = frame[y1:y2, x1:x2]\n            full_frames.append(frame)\n\n    print (\"[Step 0] Number of frames available for inference: \"+str(len(full_frames)))\n    # face detection & cropping, cropping the first frame as the style of FFHQ\n    croper = Croper('checkpoints/shape_predictor_68_face_landmarks.dat')\n    full_frames_RGB = [cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) for frame in full_frames]\n    full_frames_RGB, crop, quad = croper.crop(full_frames_RGB, xsize=512)\n\n    clx, cly, crx, cry = crop\n    lx, ly, rx, ry = quad\n    lx, ly, rx, ry = int(lx), int(ly), int(rx), int(ry)\n    oy1, oy2, ox1, ox2 = cly+ly, min(cly+ry, full_frames[0].shape[0]), clx+lx, min(clx+rx, full_frames[0].shape[1])\n    # original_size = (ox2 - ox1, oy2 - oy1)\n    frames_pil = [Image.fromarray(cv2.resize(frame,(256,256))) for frame in full_frames_RGB]\n\n    # get the landmark according to the detected face.\n    if not os.path.isfile('temp/'+base_name+'_landmarks.txt') or args.re_preprocess:\n        print('[Step 1] Landmarks Extraction in Video.')\n        kp_extractor = KeypointExtractor()\n        lm = kp_extractor.extract_keypoint(frames_pil, './temp/'+base_name+'_landmarks.txt')\n    else:\n        print('[Step 1] Using saved landmarks.')\n        lm = np.loadtxt('temp/'+base_name+'_landmarks.txt').astype(np.float32)\n        lm = lm.reshape([len(full_frames), -1, 2])\n       \n    if not os.path.isfile('temp/'+base_name+'_coeffs.npy') or args.exp_img is not None or args.re_preprocess:\n        net_recon = load_face3d_net(args.face3d_net_path, device)\n        lm3d_std = load_lm3d('checkpoints/BFM')\n\n        video_coeffs = []\n        for idx in tqdm(range(len(frames_pil)), desc=\"[Step 2] 3DMM Extraction In Video:\"):\n            frame = frames_pil[idx]\n            W, H = frame.size\n            lm_idx = lm[idx].reshape([-1, 2])\n            if np.mean(lm_idx) == -1:\n                lm_idx = (lm3d_std[:, :2]+1) / 2.\n                lm_idx = np.concatenate([lm_idx[:, :1] * W, lm_idx[:, 1:2] * H], 1)\n            else:\n                lm_idx[:, -1] = H - 1 - lm_idx[:, -1]\n\n            trans_params, im_idx, lm_idx, _ = align_img(frame, lm_idx, lm3d_std)\n            trans_params = np.array([float(item) for item in np.hsplit(trans_params, 5)]).astype(np.float32)\n            im_idx_tensor = torch.tensor(np.array(im_idx)/255., dtype=torch.float32).permute(2, 0, 1).to(device).unsqueeze(0) \n            with torch.no_grad():\n                coeffs = split_coeff(net_recon(im_idx_tensor))\n\n            pred_coeff = {key:coeffs[key].cpu().numpy() for key in coeffs}\n            pred_coeff = np.concatenate([pred_coeff['id'], pred_coeff['exp'], pred_coeff['tex'], pred_coeff['angle'],\\\n                                         pred_coeff['gamma'], pred_coeff['trans'], trans_params[None]], 1)\n            video_coeffs.append(pred_coeff)\n        semantic_npy = np.array(video_coeffs)[:,0]\n        np.save('temp/'+base_name+'_coeffs.npy', semantic_npy)\n    else:\n        print('[Step 2] Using saved coeffs.')\n        semantic_npy = np.load('temp/'+base_name+'_coeffs.npy').astype(np.float32)\n\n    # generate the 3dmm coeff from a single image\n    if args.exp_img is not None and ('.png' in args.exp_img or '.jpg' in args.exp_img):\n        print('extract the exp from',args.exp_img)\n        exp_pil = Image.open(args.exp_img).convert('RGB')\n        lm3d_std = load_lm3d('third_part/face3d/BFM')\n        \n        W, H = exp_pil.size\n        kp_extractor = KeypointExtractor()\n        lm_exp = kp_extractor.extract_keypoint([exp_pil], 'temp/'+base_name+'_temp.txt')[0]\n        if np.mean(lm_exp) == -1:\n            lm_exp = (lm3d_std[:, :2] + 1) / 2.\n            lm_exp = np.concatenate(\n                [lm_exp[:, :1] * W, lm_exp[:, 1:2] * H], 1)\n        else:\n            lm_exp[:, -1] = H - 1 - lm_exp[:, -1]\n\n        trans_params, im_exp, lm_exp, _ = align_img(exp_pil, lm_exp, lm3d_std)\n        trans_params = np.array([float(item) for item in np.hsplit(trans_params, 5)]).astype(np.float32)\n        im_exp_tensor = torch.tensor(np.array(im_exp)/255., dtype=torch.float32).permute(2, 0, 1).to(device).unsqueeze(0)\n        with torch.no_grad():\n            expression = split_coeff(net_recon(im_exp_tensor))['exp'][0]\n        del net_recon\n    elif args.exp_img == 'smile':\n        expression = torch.tensor(loadmat('checkpoints/expression.mat')['expression_mouth'])[0]\n    else:\n        print('using expression center')\n        expression = torch.tensor(loadmat('checkpoints/expression.mat')['expression_center'])[0]\n\n    # load DNet, model(LNet and ENet)\n    D_Net, model = load_model(args, device)\n\n    if not os.path.isfile('temp/'+base_name+'_stablized.npy') or args.re_preprocess:\n        imgs = []\n        for idx in tqdm(range(len(frames_pil)), desc=\"[Step 3] Stabilize the expression In Video:\"):\n            if args.one_shot:\n                source_img = trans_image(frames_pil[0]).unsqueeze(0).to(device)\n                semantic_source_numpy = semantic_npy[0:1]\n            else:\n                source_img = trans_image(frames_pil[idx]).unsqueeze(0).to(device)\n                semantic_source_numpy = semantic_npy[idx:idx+1]\n            ratio = find_crop_norm_ratio(semantic_source_numpy, semantic_npy)\n            coeff = transform_semantic(semantic_npy, idx, ratio).unsqueeze(0).to(device)\n        \n            # hacking the new expression\n            coeff[:, :64, :] = expression[None, :64, None].to(device) \n            with torch.no_grad():\n                output = D_Net(source_img, coeff)\n            img_stablized = np.uint8((output['fake_image'].squeeze(0).permute(1,2,0).cpu().clamp_(-1, 1).numpy() + 1 )/2. * 255)\n            imgs.append(cv2.cvtColor(img_stablized,cv2.COLOR_RGB2BGR)) \n        np.save('temp/'+base_name+'_stablized.npy',imgs)\n        del D_Net\n    else:\n        print('[Step 3] Using saved stabilized video.')\n        imgs = np.load('temp/'+base_name+'_stablized.npy')\n    torch.cuda.empty_cache()\n\n    if not args.audio.endswith('.wav'):\n        command = 'ffmpeg -loglevel error -y -i {} -strict -2 {}'.format(args.audio, 'temp/{}/temp.wav'.format(args.tmp_dir))\n        subprocess.call(command, shell=True)\n        args.audio = 'temp/{}/temp.wav'.format(args.tmp_dir)\n    wav = audio.load_wav(args.audio, 16000)\n    mel = audio.melspectrogram(wav)\n    if np.isnan(mel.reshape(-1)).sum() > 0:\n        raise ValueError('Mel contains nan! Using a TTS voice? Add a small epsilon noise to the wav file and try again')\n\n    mel_step_size, mel_idx_multiplier, i, mel_chunks = 16, 80./fps, 0, []\n    while True:\n        start_idx = int(i * mel_idx_multiplier)\n        if start_idx + mel_step_size > len(mel[0]):\n            mel_chunks.append(mel[:, len(mel[0]) - mel_step_size:])\n            break\n        mel_chunks.append(mel[:, start_idx : start_idx + mel_step_size])\n        i += 1\n\n    print(\"[Step 4] Load audio; Length of mel chunks: {}\".format(len(mel_chunks)))\n    imgs = imgs[:len(mel_chunks)]\n    full_frames = full_frames[:len(mel_chunks)]  \n    lm = lm[:len(mel_chunks)]\n    \n    imgs_enhanced = []\n    for idx in tqdm(range(len(imgs)), desc='[Step 5] Reference Enhancement'):\n        img = imgs[idx]\n        pred, _, _ = enhancer.process(img, img, face_enhance=True, possion_blending=False)\n        imgs_enhanced.append(pred)\n    gen = datagen(imgs_enhanced.copy(), mel_chunks, full_frames, None, (oy1,oy2,ox1,ox2))\n\n    frame_h, frame_w = full_frames[0].shape[:-1]\n    out = cv2.VideoWriter('temp/{}/result.mp4'.format(args.tmp_dir), cv2.VideoWriter_fourcc(*'mp4v'), fps, (frame_w, frame_h))\n    \n    if args.up_face != 'original':\n        instance = GANimationModel()\n        instance.initialize()\n        instance.setup()\n\n    kp_extractor = KeypointExtractor()\n    for i, (img_batch, mel_batch, frames, coords, img_original, f_frames) in enumerate(tqdm(gen, desc='[Step 6] Lip Synthesis:', total=int(np.ceil(float(len(mel_chunks)) / args.LNet_batch_size)))):\n        img_batch = torch.FloatTensor(np.transpose(img_batch, (0, 3, 1, 2))).to(device)\n        mel_batch = torch.FloatTensor(np.transpose(mel_batch, (0, 3, 1, 2))).to(device)\n        img_original = torch.FloatTensor(np.transpose(img_original, (0, 3, 1, 2))).to(device)/255. # BGR -> RGB\n        \n        with torch.no_grad():\n            incomplete, reference = torch.split(img_batch, 3, dim=1) \n            pred, low_res = model(mel_batch, img_batch, reference)\n            pred = torch.clamp(pred, 0, 1)\n\n            if args.up_face in ['sad', 'angry', 'surprise']:\n                tar_aus = exp_aus_dict[args.up_face]\n            else:\n                pass\n            \n            if args.up_face == 'original':\n                cur_gen_faces = img_original\n            else:\n                test_batch = {'src_img': torch.nn.functional.interpolate((img_original * 2 - 1), size=(128, 128), mode='bilinear'), \n                              'tar_aus': tar_aus.repeat(len(incomplete), 1)}\n                instance.feed_batch(test_batch)\n                instance.forward()\n                cur_gen_faces = torch.nn.functional.interpolate(instance.fake_img / 2. + 0.5, size=(384, 384), mode='bilinear')\n                \n            if args.without_rl1 is not False:\n                incomplete, reference = torch.split(img_batch, 3, dim=1)\n                mask = torch.where(incomplete==0, torch.ones_like(incomplete), torch.zeros_like(incomplete)) \n                pred = pred * mask + cur_gen_faces * (1 - mask) \n        \n        pred = pred.cpu().numpy().transpose(0, 2, 3, 1) * 255.\n\n        torch.cuda.empty_cache()\n        for p, f, xf, c in zip(pred, frames, f_frames, coords):\n            y1, y2, x1, x2 = c\n            p = cv2.resize(p.astype(np.uint8), (x2 - x1, y2 - y1))\n            \n            ff = xf.copy() \n            ff[y1:y2, x1:x2] = p\n            \n            # month region enhancement by GFPGAN\n            cropped_faces, restored_faces, restored_img = restorer.enhance(\n                ff, has_aligned=False, only_center_face=True, paste_back=True)\n                # 0,   1,   2,   3,   4,   5,   6,   7,   8,  9, 10,  11,  12,\n            mm = [0,   0,   0,   0,   0,   0,   0,   0,   0,  0, 255, 255, 255, 0, 0, 0, 0, 0, 0]\n            mouse_mask = np.zeros_like(restored_img)\n            tmp_mask = enhancer.faceparser.process(restored_img[y1:y2, x1:x2], mm)[0]\n            mouse_mask[y1:y2, x1:x2]= cv2.resize(tmp_mask, (x2 - x1, y2 - y1))[:, :, np.newaxis] / 255.\n\n            height, width = ff.shape[:2]\n            restored_img, ff, full_mask = [cv2.resize(x, (512, 512)) for x in (restored_img, ff, np.float32(mouse_mask))]\n            img = Laplacian_Pyramid_Blending_with_mask(restored_img, ff, full_mask[:, :, 0], 10)\n            pp = np.uint8(cv2.resize(np.clip(img, 0 ,255), (width, height)))\n\n            pp, orig_faces, enhanced_faces = enhancer.process(pp, xf, bbox=c, face_enhance=False, possion_blending=True)\n            out.write(pp)\n    out.release()\n    \n    if not os.path.isdir(os.path.dirname(args.outfile)):\n        os.makedirs(os.path.dirname(args.outfile), exist_ok=True)\n    command = 'ffmpeg -loglevel error -y -i {} -i {} -strict -2 -q:v 1 {}'.format(args.audio, 'temp/{}/result.mp4'.format(args.tmp_dir), args.outfile)\n    subprocess.call(command, shell=platform.system() != 'Windows')\n    print('outfile:', args.outfile)\n\n\n# frames:256x256, full_frames: original size\ndef datagen(frames, mels, full_frames, frames_pil, cox):\n    img_batch, mel_batch, frame_batch, coords_batch, ref_batch, full_frame_batch = [], [], [], [], [], []\n    base_name = args.face.split('/')[-1]\n    refs = []\n    image_size = 256 \n\n    # original frames\n    kp_extractor = KeypointExtractor()\n    fr_pil = [Image.fromarray(frame) for frame in frames]\n    lms = kp_extractor.extract_keypoint(fr_pil, 'temp/'+base_name+'x12_landmarks.txt')\n    frames_pil = [ (lm, frame) for frame,lm in zip(fr_pil, lms)] # frames is the croped version of modified face\n    crops, orig_images, quads  = crop_faces(image_size, frames_pil, scale=1.0, use_fa=True)\n    inverse_transforms = [calc_alignment_coefficients(quad + 0.5, [[0, 0], [0, image_size], [image_size, image_size], [image_size, 0]]) for quad in quads]\n    del kp_extractor.detector\n\n    oy1,oy2,ox1,ox2 = cox\n    face_det_results = face_detect(full_frames, args, jaw_correction=True)\n\n    for inverse_transform, crop, full_frame, face_det in zip(inverse_transforms, crops, full_frames, face_det_results):\n        imc_pil = paste_image(inverse_transform, crop, Image.fromarray(\n            cv2.resize(full_frame[int(oy1):int(oy2), int(ox1):int(ox2)], (256, 256))))\n\n        ff = full_frame.copy()\n        ff[int(oy1):int(oy2), int(ox1):int(ox2)] = cv2.resize(np.array(imc_pil.convert('RGB')), (ox2 - ox1, oy2 - oy1))\n        oface, coords = face_det\n        y1, y2, x1, x2 = coords\n        refs.append(ff[y1: y2, x1:x2])\n\n    for i, m in enumerate(mels):\n        idx = 0 if args.static else i % len(frames)\n        frame_to_save = frames[idx].copy()\n        face = refs[idx]\n        oface, coords = face_det_results[idx].copy()\n\n        face = cv2.resize(face, (args.img_size, args.img_size))\n        oface = cv2.resize(oface, (args.img_size, args.img_size))\n\n        img_batch.append(oface)\n        ref_batch.append(face) \n        mel_batch.append(m)\n        coords_batch.append(coords)\n        frame_batch.append(frame_to_save)\n        full_frame_batch.append(full_frames[idx].copy())\n\n        if len(img_batch) >= args.LNet_batch_size:\n            img_batch, mel_batch, ref_batch = np.asarray(img_batch), np.asarray(mel_batch), np.asarray(ref_batch)\n            img_masked = img_batch.copy()\n            img_original = img_batch.copy()\n            img_masked[:, args.img_size//2:] = 0\n            img_batch = np.concatenate((img_masked, ref_batch), axis=3) / 255.\n            mel_batch = np.reshape(mel_batch, [len(mel_batch), mel_batch.shape[1], mel_batch.shape[2], 1])\n\n            yield img_batch, mel_batch, frame_batch, coords_batch, img_original, full_frame_batch\n            img_batch, mel_batch, frame_batch, coords_batch, img_original, full_frame_batch, ref_batch  = [], [], [], [], [], [], []\n\n    if len(img_batch) > 0:\n        img_batch, mel_batch, ref_batch = np.asarray(img_batch), np.asarray(mel_batch), np.asarray(ref_batch)\n        img_masked = img_batch.copy()\n        img_original = img_batch.copy()\n        img_masked[:, args.img_size//2:] = 0\n        img_batch = np.concatenate((img_masked, ref_batch), axis=3) / 255.\n        mel_batch = np.reshape(mel_batch, [len(mel_batch), mel_batch.shape[1], mel_batch.shape[2], 1])\n        yield img_batch, mel_batch, frame_batch, coords_batch, img_original, full_frame_batch\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "inference_videoretalking.sh",
          "type": "blob",
          "size": 0.115234375,
          "content": "python3 inference.py \\\n  --face ./examples/face/1.mp4 \\\n  --audio ./examples/audio/1.wav \\\n  --outfile results/1_1.mp4"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "predict.py",
          "type": "blob",
          "size": 19.8525390625,
          "content": "# Prediction interface for Cog ⚙️\n# https://github.com/replicate/cog/blob/main/docs/python.md\n\nimport os\nimport sys\nimport argparse\nimport subprocess\nimport numpy as np\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom scipy.io import loadmat\nimport torch\nimport cv2\nfrom cog import BasePredictor, Input, Path\n\nsys.path.insert(0, \"third_part\")\nsys.path.insert(0, \"third_part/GPEN\")\nsys.path.insert(0, \"third_part/GFPGAN\")\n\n# 3dmm extraction\nfrom third_part.face3d.util.preprocess import align_img\nfrom third_part.face3d.util.load_mats import load_lm3d\nfrom third_part.face3d.extract_kp_videos import KeypointExtractor\n\n# face enhancement\nfrom third_part.GPEN.gpen_face_enhancer import FaceEnhancement\nfrom third_part.GFPGAN.gfpgan import GFPGANer\n\n# expression control\nfrom third_part.ganimation_replicate.model.ganimation import GANimationModel\n\nfrom utils import audio\nfrom utils.ffhq_preprocess import Croper\nfrom utils.alignment_stit import crop_faces, calc_alignment_coefficients, paste_image\nfrom utils.inference_utils import (\n    Laplacian_Pyramid_Blending_with_mask,\n    face_detect,\n    load_model,\n    options,\n    split_coeff,\n    trans_image,\n    transform_semantic,\n    find_crop_norm_ratio,\n    load_face3d_net,\n    exp_aus_dict,\n)\n\n\nclass Predictor(BasePredictor):\n    def setup(self) -> None:\n        \"\"\"Load the model into memory to make running multiple predictions efficient\"\"\"\n        self.enhancer = FaceEnhancement(\n            base_dir=\"checkpoints\",\n            size=512,\n            model=\"GPEN-BFR-512\",\n            use_sr=False,\n            sr_model=\"rrdb_realesrnet_psnr\",\n            channel_multiplier=2,\n            narrow=1,\n            device=\"cuda\",\n        )\n        self.restorer = GFPGANer(\n            model_path=\"checkpoints/GFPGANv1.3.pth\",\n            upscale=1,\n            arch=\"clean\",\n            channel_multiplier=2,\n            bg_upsampler=None,\n        )\n        self.croper = Croper(\"checkpoints/shape_predictor_68_face_landmarks.dat\")\n        self.kp_extractor = KeypointExtractor()\n\n        face3d_net_path = \"checkpoints/face3d_pretrain_epoch_20.pth\"\n\n        self.net_recon = load_face3d_net(face3d_net_path, \"cuda\")\n        self.lm3d_std = load_lm3d(\"checkpoints/BFM\")\n\n    def predict(\n        self,\n        face: Path = Input(description=\"Input video file of a talking-head.\"),\n        input_audio: Path = Input(description=\"Input audio file.\"),\n    ) -> Path:\n        \"\"\"Run a single prediction on the model\"\"\"\n        device = \"cuda\"\n        args = argparse.Namespace(\n            DNet_path=\"checkpoints/DNet.pt\",\n            LNet_path=\"checkpoints/LNet.pth\",\n            ENet_path=\"checkpoints/ENet.pth\",\n            face3d_net_path=\"checkpoints/face3d_pretrain_epoch_20.pth\",\n            face=str(face),\n            audio=str(input_audio),\n            exp_img=\"neutral\",\n            outfile=None,\n            fps=25,\n            pads=[0, 20, 0, 0],\n            face_det_batch_size=4,\n            LNet_batch_size=16,\n            img_size=384,\n            crop=[0, -1, 0, -1],\n            box=[-1, -1, -1, -1],\n            nosmooth=False,\n            static=False,\n            up_face=\"original\",\n            one_shot=False,\n            without_rl1=False,\n            tmp_dir=\"temp\",\n            re_preprocess=False,\n        )\n\n        base_name = args.face.split(\"/\")[-1]\n\n        if args.face.split(\".\")[1] in [\"jpg\", \"png\", \"jpeg\"]:\n            full_frames = [cv2.imread(args.face)]\n            args.static = True\n            fps = args.fps\n        else:\n            video_stream = cv2.VideoCapture(args.face)\n            fps = video_stream.get(cv2.CAP_PROP_FPS)\n            full_frames = []\n            while True:\n                still_reading, frame = video_stream.read()\n                if not still_reading:\n                    video_stream.release()\n                    break\n                y1, y2, x1, x2 = args.crop\n                if x2 == -1:\n                    x2 = frame.shape[1]\n                if y2 == -1:\n                    y2 = frame.shape[0]\n                frame = frame[y1:y2, x1:x2]\n                full_frames.append(frame)\n\n        full_frames_RGB = [\n            cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) for frame in full_frames\n        ]\n        full_frames_RGB, crop, quad = self.croper.crop(full_frames_RGB, xsize=512)\n\n        clx, cly, crx, cry = crop\n        lx, ly, rx, ry = quad\n        lx, ly, rx, ry = int(lx), int(ly), int(rx), int(ry)\n        oy1, oy2, ox1, ox2 = (\n            cly + ly,\n            min(cly + ry, full_frames[0].shape[0]),\n            clx + lx,\n            min(clx + rx, full_frames[0].shape[1]),\n        )\n        # original_size = (ox2 - ox1, oy2 - oy1)\n        frames_pil = [\n            Image.fromarray(cv2.resize(frame, (256, 256))) for frame in full_frames_RGB\n        ]\n\n        # get the landmark according to the detected face.\n        if (\n            not os.path.isfile(\"temp/\" + base_name + \"_landmarks.txt\")\n            or args.re_preprocess\n        ):\n            print(\"[Step 1] Landmarks Extraction in Video.\")\n            lm = self.kp_extractor.extract_keypoint(\n                frames_pil, \"./temp/\" + base_name + \"_landmarks.txt\"\n            )\n        else:\n            print(\"[Step 1] Using saved landmarks.\")\n            lm = np.loadtxt(\"temp/\" + base_name + \"_landmarks.txt\").astype(np.float32)\n            lm = lm.reshape([len(full_frames), -1, 2])\n\n        if (\n            not os.path.isfile(\"temp/\" + base_name + \"_coeffs.npy\")\n            or args.exp_img is not None\n            or args.re_preprocess\n        ):\n            video_coeffs = []\n            for idx in tqdm(\n                range(len(frames_pil)), desc=\"[Step 2] 3DMM Extraction In Video:\"\n            ):\n                frame = frames_pil[idx]\n                W, H = frame.size\n                lm_idx = lm[idx].reshape([-1, 2])\n                if np.mean(lm_idx) == -1:\n                    lm_idx = (self.lm3d_std[:, :2] + 1) / 2.0\n                    lm_idx = np.concatenate([lm_idx[:, :1] * W, lm_idx[:, 1:2] * H], 1)\n                else:\n                    lm_idx[:, -1] = H - 1 - lm_idx[:, -1]\n\n                trans_params, im_idx, lm_idx, _ = align_img(\n                    frame, lm_idx, self.lm3d_std\n                )\n                trans_params = np.array(\n                    [float(item) for item in np.hsplit(trans_params, 5)]\n                ).astype(np.float32)\n                im_idx_tensor = (\n                    torch.tensor(np.array(im_idx) / 255.0, dtype=torch.float32)\n                    .permute(2, 0, 1)\n                    .to(device)\n                    .unsqueeze(0)\n                )\n                with torch.no_grad():\n                    coeffs = split_coeff(self.net_recon(im_idx_tensor))\n\n                pred_coeff = {key: coeffs[key].cpu().numpy() for key in coeffs}\n                pred_coeff = np.concatenate(\n                    [\n                        pred_coeff[\"id\"],\n                        pred_coeff[\"exp\"],\n                        pred_coeff[\"tex\"],\n                        pred_coeff[\"angle\"],\n                        pred_coeff[\"gamma\"],\n                        pred_coeff[\"trans\"],\n                        trans_params[None],\n                    ],\n                    1,\n                )\n                video_coeffs.append(pred_coeff)\n            semantic_npy = np.array(video_coeffs)[:, 0]\n            np.save(\"temp/\" + base_name + \"_coeffs.npy\", semantic_npy)\n        else:\n            print(\"[Step 2] Using saved coeffs.\")\n            semantic_npy = np.load(\"temp/\" + base_name + \"_coeffs.npy\").astype(\n                np.float32\n            )\n\n        # generate the 3dmm coeff from a single image\n        if args.exp_img == \"smile\":\n            expression = torch.tensor(\n                loadmat(\"checkpoints/expression.mat\")[\"expression_mouth\"]\n            )[0]\n        else:\n            print(\"using expression center\")\n            expression = torch.tensor(\n                loadmat(\"checkpoints/expression.mat\")[\"expression_center\"]\n            )[0]\n\n        # load DNet, model(LNet and ENet)\n        D_Net, model = load_model(args, device)\n\n        if (\n            not os.path.isfile(\"temp/\" + base_name + \"_stablized.npy\")\n            or args.re_preprocess\n        ):\n            imgs = []\n            for idx in tqdm(\n                range(len(frames_pil)),\n                desc=\"[Step 3] Stabilize the expression In Video:\",\n            ):\n                if args.one_shot:\n                    source_img = trans_image(frames_pil[0]).unsqueeze(0).to(device)\n                    semantic_source_numpy = semantic_npy[0:1]\n                else:\n                    source_img = trans_image(frames_pil[idx]).unsqueeze(0).to(device)\n                    semantic_source_numpy = semantic_npy[idx : idx + 1]\n                ratio = find_crop_norm_ratio(semantic_source_numpy, semantic_npy)\n                coeff = (\n                    transform_semantic(semantic_npy, idx, ratio).unsqueeze(0).to(device)\n                )\n\n                # hacking the new expression\n                coeff[:, :64, :] = expression[None, :64, None].to(device)\n                with torch.no_grad():\n                    output = D_Net(source_img, coeff)\n                img_stablized = np.uint8(\n                    (\n                        output[\"fake_image\"]\n                        .squeeze(0)\n                        .permute(1, 2, 0)\n                        .cpu()\n                        .clamp_(-1, 1)\n                        .numpy()\n                        + 1\n                    )\n                    / 2.0\n                    * 255\n                )\n                imgs.append(cv2.cvtColor(img_stablized, cv2.COLOR_RGB2BGR))\n            np.save(\"temp/\" + base_name + \"_stablized.npy\", imgs)\n            del D_Net\n        else:\n            print(\"[Step 3] Using saved stabilized video.\")\n            imgs = np.load(\"temp/\" + base_name + \"_stablized.npy\")\n        torch.cuda.empty_cache()\n\n        if not args.audio.endswith(\".wav\"):\n            command = \"ffmpeg -loglevel error -y -i {} -strict -2 {}\".format(\n                args.audio, \"temp/{}/temp.wav\".format(args.tmp_dir)\n            )\n            subprocess.call(command, shell=True)\n            args.audio = \"temp/{}/temp.wav\".format(args.tmp_dir)\n        wav = audio.load_wav(args.audio, 16000)\n        mel = audio.melspectrogram(wav)\n        if np.isnan(mel.reshape(-1)).sum() > 0:\n            raise ValueError(\n                \"Mel contains nan! Using a TTS voice? Add a small epsilon noise to the wav file and try again\"\n            )\n\n        mel_step_size, mel_idx_multiplier, i, mel_chunks = 16, 80.0 / fps, 0, []\n        while True:\n            start_idx = int(i * mel_idx_multiplier)\n            if start_idx + mel_step_size > len(mel[0]):\n                mel_chunks.append(mel[:, len(mel[0]) - mel_step_size :])\n                break\n            mel_chunks.append(mel[:, start_idx : start_idx + mel_step_size])\n            i += 1\n\n        print(\"[Step 4] Load audio; Length of mel chunks: {}\".format(len(mel_chunks)))\n        imgs = imgs[: len(mel_chunks)]\n        full_frames = full_frames[: len(mel_chunks)]\n        lm = lm[: len(mel_chunks)]\n\n        imgs_enhanced = []\n        for idx in tqdm(range(len(imgs)), desc=\"[Step 5] Reference Enhancement\"):\n            img = imgs[idx]\n            pred, _, _ = self.enhancer.process(\n                img, img, face_enhance=True, possion_blending=False\n            )\n            imgs_enhanced.append(pred)\n        gen = datagen(\n            imgs_enhanced.copy(), mel_chunks, full_frames, args, (oy1, oy2, ox1, ox2)\n        )\n\n        frame_h, frame_w = full_frames[0].shape[:-1]\n        out = cv2.VideoWriter(\n            \"temp/{}/result.mp4\".format(args.tmp_dir),\n            cv2.VideoWriter_fourcc(*\"mp4v\"),\n            fps,\n            (frame_w, frame_h),\n        )\n\n        if args.up_face != \"original\":\n            instance = GANimationModel()\n            instance.initialize()\n            instance.setup()\n\n        # kp_extractor = KeypointExtractor()\n        for i, (\n            img_batch,\n            mel_batch,\n            frames,\n            coords,\n            img_original,\n            f_frames,\n        ) in enumerate(\n            tqdm(\n                gen,\n                desc=\"[Step 6] Lip Synthesis:\",\n                total=int(np.ceil(float(len(mel_chunks)) / args.LNet_batch_size)),\n            )\n        ):\n            img_batch = torch.FloatTensor(np.transpose(img_batch, (0, 3, 1, 2))).to(\n                device\n            )\n            mel_batch = torch.FloatTensor(np.transpose(mel_batch, (0, 3, 1, 2))).to(\n                device\n            )\n            img_original = (\n                torch.FloatTensor(np.transpose(img_original, (0, 3, 1, 2))).to(device)\n                / 255.0\n            )  # BGR -> RGB\n\n            with torch.no_grad():\n                incomplete, reference = torch.split(img_batch, 3, dim=1)\n                pred, low_res = model(mel_batch, img_batch, reference)\n                pred = torch.clamp(pred, 0, 1)\n\n                if args.up_face in [\"sad\", \"angry\", \"surprise\"]:\n                    tar_aus = exp_aus_dict[args.up_face]\n                else:\n                    pass\n\n                if args.up_face == \"original\":\n                    cur_gen_faces = img_original\n                else:\n                    test_batch = {\n                        \"src_img\": torch.nn.functional.interpolate(\n                            (img_original * 2 - 1), size=(128, 128), mode=\"bilinear\"\n                        ),\n                        \"tar_aus\": tar_aus.repeat(len(incomplete), 1),\n                    }\n                    instance.feed_batch(test_batch)\n                    instance.forward()\n                    cur_gen_faces = torch.nn.functional.interpolate(\n                        instance.fake_img / 2.0 + 0.5, size=(384, 384), mode=\"bilinear\"\n                    )\n\n                if args.without_rl1 is not False:\n                    incomplete, reference = torch.split(img_batch, 3, dim=1)\n                    mask = torch.where(\n                        incomplete == 0,\n                        torch.ones_like(incomplete),\n                        torch.zeros_like(incomplete),\n                    )\n                    pred = pred * mask + cur_gen_faces * (1 - mask)\n\n            pred = pred.cpu().numpy().transpose(0, 2, 3, 1) * 255.0\n\n            torch.cuda.empty_cache()\n            for p, f, xf, c in zip(pred, frames, f_frames, coords):\n                y1, y2, x1, x2 = c\n                p = cv2.resize(p.astype(np.uint8), (x2 - x1, y2 - y1))\n\n                ff = xf.copy()\n                ff[y1:y2, x1:x2] = p\n\n                # month region enhancement by GFPGAN\n                cropped_faces, restored_faces, restored_img = self.restorer.enhance(\n                    ff, has_aligned=False, only_center_face=True, paste_back=True\n                )\n                # 0,   1,   2,   3,   4,   5,   6,   7,   8,  9, 10,  11,  12,\n                mm = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0]\n                mouse_mask = np.zeros_like(restored_img)\n                tmp_mask = self.enhancer.faceparser.process(\n                    restored_img[y1:y2, x1:x2], mm\n                )[0]\n                mouse_mask[y1:y2, x1:x2] = (\n                    cv2.resize(tmp_mask, (x2 - x1, y2 - y1))[:, :, np.newaxis] / 255.0\n                )\n\n                height, width = ff.shape[:2]\n                restored_img, ff, full_mask = [\n                    cv2.resize(x, (512, 512))\n                    for x in (restored_img, ff, np.float32(mouse_mask))\n                ]\n                img = Laplacian_Pyramid_Blending_with_mask(\n                    restored_img, ff, full_mask[:, :, 0], 10\n                )\n                pp = np.uint8(cv2.resize(np.clip(img, 0, 255), (width, height)))\n\n                pp, orig_faces, enhanced_faces = self.enhancer.process(\n                    pp, xf, bbox=c, face_enhance=False, possion_blending=True\n                )\n                out.write(pp)\n        out.release()\n\n        output_file = \"/tmp/output.mp4\"\n        command = \"ffmpeg -loglevel error -y -i {} -i {} -strict -2 -q:v 1 {}\".format(\n            args.audio, \"temp/{}/result.mp4\".format(args.tmp_dir), output_file\n        )\n        subprocess.call(command, shell=True)\n\n        return Path(output_file)\n\n\n# frames:256x256, full_frames: original size\ndef datagen(frames, mels, full_frames, args, cox):\n    img_batch, mel_batch, frame_batch, coords_batch, ref_batch, full_frame_batch = (\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n    )\n    base_name = args.face.split(\"/\")[-1]\n    refs = []\n    image_size = 256\n\n    # original frames\n    kp_extractor = KeypointExtractor()\n    fr_pil = [Image.fromarray(frame) for frame in frames]\n    lms = kp_extractor.extract_keypoint(\n        fr_pil, \"temp/\" + base_name + \"x12_landmarks.txt\"\n    )\n    frames_pil = [\n        (lm, frame) for frame, lm in zip(fr_pil, lms)\n    ]  # frames is the croped version of modified face\n    crops, orig_images, quads = crop_faces(\n        image_size, frames_pil, scale=1.0, use_fa=True\n    )\n    inverse_transforms = [\n        calc_alignment_coefficients(\n            quad + 0.5,\n            [[0, 0], [0, image_size], [image_size, image_size], [image_size, 0]],\n        )\n        for quad in quads\n    ]\n    del kp_extractor.detector\n\n    oy1, oy2, ox1, ox2 = cox\n    face_det_results = face_detect(full_frames, args, jaw_correction=True)\n\n    for inverse_transform, crop, full_frame, face_det in zip(\n        inverse_transforms, crops, full_frames, face_det_results\n    ):\n        imc_pil = paste_image(\n            inverse_transform,\n            crop,\n            Image.fromarray(\n                cv2.resize(\n                    full_frame[int(oy1) : int(oy2), int(ox1) : int(ox2)], (256, 256)\n                )\n            ),\n        )\n\n        ff = full_frame.copy()\n        ff[int(oy1) : int(oy2), int(ox1) : int(ox2)] = cv2.resize(\n            np.array(imc_pil.convert(\"RGB\")), (ox2 - ox1, oy2 - oy1)\n        )\n        oface, coords = face_det\n        y1, y2, x1, x2 = coords\n        refs.append(ff[y1:y2, x1:x2])\n\n    for i, m in enumerate(mels):\n        idx = 0 if args.static else i % len(frames)\n        frame_to_save = frames[idx].copy()\n        face = refs[idx]\n        oface, coords = face_det_results[idx].copy()\n\n        face = cv2.resize(face, (args.img_size, args.img_size))\n        oface = cv2.resize(oface, (args.img_size, args.img_size))\n\n        img_batch.append(oface)\n        ref_batch.append(face)\n        mel_batch.append(m)\n        coords_batch.append(coords)\n        frame_batch.append(frame_to_save)\n        full_frame_batch.append(full_frames[idx].copy())\n\n        if len(img_batch) >= args.LNet_batch_size:\n            img_batch, mel_batch, ref_batch = (\n                np.asarray(img_batch),\n                np.asarray(mel_batch),\n                np.asarray(ref_batch),\n            )\n            img_masked = img_batch.copy()\n            img_original = img_batch.copy()\n            img_masked[:, args.img_size // 2 :] = 0\n            img_batch = np.concatenate((img_masked, ref_batch), axis=3) / 255.0\n            mel_batch = np.reshape(\n                mel_batch, [len(mel_batch), mel_batch.shape[1], mel_batch.shape[2], 1]\n            )\n\n            yield img_batch, mel_batch, frame_batch, coords_batch, img_original, full_frame_batch\n            (\n                img_batch,\n                mel_batch,\n                frame_batch,\n                coords_batch,\n                img_original,\n                full_frame_batch,\n                ref_batch,\n            ) = ([], [], [], [], [], [], [])\n\n    if len(img_batch) > 0:\n        img_batch, mel_batch, ref_batch = (\n            np.asarray(img_batch),\n            np.asarray(mel_batch),\n            np.asarray(ref_batch),\n        )\n        img_masked = img_batch.copy()\n        img_original = img_batch.copy()\n        img_masked[:, args.img_size // 2 :] = 0\n        img_batch = np.concatenate((img_masked, ref_batch), axis=3) / 255.0\n        mel_batch = np.reshape(\n            mel_batch, [len(mel_batch), mel_batch.shape[1], mel_batch.shape[2], 1]\n        )\n        yield img_batch, mel_batch, frame_batch, coords_batch, img_original, full_frame_batch\n"
        },
        {
          "name": "quick_demo.ipynb",
          "type": "blob",
          "size": 11.1435546875,
          "content": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n    \"colab\": {\n      \"provenance\": [],\n      \"authorship_tag\": \"ABX9TyMPin07iIA2oewCCP9ZTz6w\",\n      \"include_colab_link\": true\n    },\n    \"kernelspec\": {\n      \"name\": \"python3\",\n      \"display_name\": \"Python 3\"\n    },\n    \"language_info\": {\n      \"name\": \"python\"\n    },\n    \"accelerator\": \"GPU\",\n    \"gpuClass\": \"standard\"\n  },\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"view-in-github\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"<a href=\\\"https://colab.research.google.com/github/vinthony/video-retalking/blob/main/quick_demo.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"## VideoReTalking：Audio-based Lip Synchronization for Talking Head Video Editing In the Wild\\n\",\n        \"\\n\",\n        \"[Arxiv](https://arxiv.org/abs/2211.14758) | [Project](https://vinthony.github.io/video-retalking/) | [Github](https://github.com/vinthony/video-retalking)\\n\",\n        \"\\n\",\n        \"Kun Cheng, Xiaodong Cun, Yong Zhang, Menghan Xia, Fei Yin, Mingrui Zhu, Xuan Wang, Jue Wang, Nannan Wang\\n\",\n        \"\\n\",\n        \"Xidian University, Tencent AI Lab, Tsinghua University\\n\",\n        \"\\n\",\n        \"*SIGGRAPH Asia 2022 Conferenence Track*\\n\",\n        \"\\n\"\n      ],\n      \"metadata\": {\n        \"id\": \"NVfkv2BXSpr3\"\n      }\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"**Installation** (30s)\"\n      ],\n      \"metadata\": {\n        \"id\": \"u9hdPaH6UL_F\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"execution_count\": null,\n      \"metadata\": {\n        \"id\": \"PnKT9goiQ3Hk\"\n      },\n      \"outputs\": [],\n      \"source\": [\n        \"#@title\\n\",\n        \"### make sure that CUDA is available in Edit -> Nootbook settings -> GPU\\n\",\n        \"!nvidia-smi\\n\",\n        \"\\n\",\n        \"!python --version  \\n\",\n        \"!apt-get update\\n\",\n        \"!apt install ffmpeg &> /dev/null \\n\",\n        \"\\n\",\n        \"print('Git clone project and install requirements...')\\n\",\n        \"!git clone https://github.com/vinthony/video-retalking.git &> /dev/null\\n\",\n        \"%cd video-retalking\\n\",\n        \"# !pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html\\n\",\n        \"!pip install -r requirements.txt\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"**Download Pretrained Models**\"\n      ],\n      \"metadata\": {\n        \"id\": \"uwJS0eaM61Cq\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title\\n\",\n        \"print('Download pre-trained models...')\\n\",\n        \"!mkdir ./checkpoints  \\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/30_net_gen.pth -O ./checkpoints/30_net_gen.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/BFM.zip -O ./checkpoints/BFM.zip\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/DNet.pt -O ./checkpoints/DNet.pt\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/ENet.pth -O ./checkpoints/ENet.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/expression.mat -O ./checkpoints/expression.mat\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/face3d_pretrain_epoch_20.pth -O ./checkpoints/face3d_pretrain_epoch_20.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/GFPGANv1.3.pth -O ./checkpoints/GFPGANv1.3.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/GPEN-BFR-512.pth -O ./checkpoints/GPEN-BFR-512.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/LNet.pth -O ./checkpoints/LNet.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/ParseNet-latest.pth -O ./checkpoints/ParseNet-latest.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/RetinaFace-R50.pth -O ./checkpoints/RetinaFace-R50.pth\\n\",\n        \"!wget https://github.com/vinthony/video-retalking/releases/download/v0.0.1/shape_predictor_68_face_landmarks.dat -O ./checkpoints/shape_predictor_68_face_landmarks.dat\\n\",\n        \"!unzip -d ./checkpoints/BFM ./checkpoints/BFM.zip\"\n      ],\n      \"metadata\": {\n        \"id\": \"x18qYuQY678E\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"**Inference**\\n\",\n        \"\\n\",\n        \"`--face`: Input video.\\n\",\n        \"\\n\",\n        \"`--audio`: Input audio. Both *.wav* and *.mp4* files are supported.\\n\",\n        \"\\n\",\n        \"You can choose our provided data from `./examples` folder or upload from your local computer.\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"\\n\"\n      ],\n      \"metadata\": {\n        \"id\": \"QJRTF4U8UOjv\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title\\n\",\n        \"import glob, os, sys\\n\",\n        \"import ipywidgets as widgets\\n\",\n        \"from IPython.display import HTML\\n\",\n        \"from base64 import b64encode\\n\",\n        \"\\n\",\n        \"print(\\\"Choose the Video name to edit: (saved in folder 'examples/face')\\\")\\n\",\n        \"vid_list = glob.glob1('examples/face/', '*.mp4')\\n\",\n        \"vid_list.sort()\\n\",\n        \"default_vid_name = widgets.Dropdown(options=vid_list, value='1.mp4')\\n\",\n        \"display(default_vid_name)\\n\",\n        \"\\n\",\n        \"print(\\\"Choose the Audio name to edit: (saved in folder 'examples/audio')\\\")\\n\",\n        \"audio_list = glob.glob1('examples/audio/', '*')\\n\",\n        \"audio_list.sort()\\n\",\n        \"default_audio_name = widgets.Dropdown(options=audio_list, value='1.wav')\\n\",\n        \"display(default_audio_name)\\n\"\n      ],\n      \"metadata\": {\n        \"id\": \"U-IY-cBSporP\",\n        \"cellView\": \"form\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"Visualize the input video and audio:\"\n      ],\n      \"metadata\": {\n        \"id\": \"-MtI_R1bLJ-f\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title\\n\",\n        \"input_video_name = './examples/face/{}'.format(default_vid_name.value)\\n\",\n        \"input_video_mp4 = open('{}'.format(input_video_name),'rb').read()\\n\",\n        \"input_video_data_url = \\\"data:video/x-m4v;base64,\\\" + b64encode(input_video_mp4).decode()\\n\",\n        \"print('Display input video: {}'.format(input_video_name), file=sys.stderr)\\n\",\n        \"display(HTML(\\\"\\\"\\\"\\n\",\n        \"  <video width=400 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"video/mp4\\\">\\n\",\n        \"  </video>\\n\",\n        \"  \\\"\\\"\\\" % input_video_data_url))\\n\",\n        \"\\n\",\n        \"input_audio_name = './examples/audio/{}'.format(default_audio_name.value)\\n\",\n        \"input_audio_mp4 = open('{}'.format(input_audio_name),'rb').read()\\n\",\n        \"input_audio_data_url = \\\"data:audio/wav;base64,\\\" + b64encode(input_audio_mp4).decode()\\n\",\n        \"print('Display input audio: {}'.format(input_audio_name), file=sys.stderr)\\n\",\n        \"display(HTML(\\\"\\\"\\\"\\n\",\n        \"  <audio width=400 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"audio/wav\\\">\\n\",\n        \"  </audio>\\n\",\n        \"  \\\"\\\"\\\" % input_audio_data_url))\\n\"\n      ],\n      \"metadata\": {\n        \"id\": \"ljbScdofJyGO\",\n        \"cellView\": \"form\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"input_video_path = 'examples/face/{}'.format(default_vid_name.value)\\n\",\n        \"input_audio_path = 'examples/audio/{}'.format(default_audio_name.value)\\n\",\n        \"\\n\",\n        \"!python3 inference.py \\\\\\n\",\n        \"  --face {input_video_path} \\\\\\n\",\n        \"  --audio {input_audio_path} \\\\\\n\",\n        \"  --outfile results/output.mp4\"\n      ],\n      \"metadata\": {\n        \"id\": \"D7hUwRCyUYEA\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"Visualize the output video:\"\n      ],\n      \"metadata\": {\n        \"id\": \"JB5RbKc-njkB\"\n      }\n    },\n    {\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title\\n\",\n        \"# visualize code from makeittalk\\n\",\n        \"from IPython.display import HTML\\n\",\n        \"from base64 import b64encode\\n\",\n        \"import os, sys, glob, cv2, subprocess, platform\\n\",\n        \"\\n\",\n        \"def read_video(vid_name):\\n\",\n        \"  video_stream = cv2.VideoCapture(vid_name)\\n\",\n        \"  fps = video_stream.get(cv2.CAP_PROP_FPS)\\n\",\n        \"  full_frames = []\\n\",\n        \"  while True:\\n\",\n        \"    still_reading, frame = video_stream.read()\\n\",\n        \"    if not still_reading:\\n\",\n        \"        video_stream.release()\\n\",\n        \"        break\\n\",\n        \"    full_frames.append(frame)\\n\",\n        \"  return full_frames, fps\\n\",\n        \"\\n\",\n        \"input_video_frames, fps = read_video(input_video_path)\\n\",\n        \"output_video_frames, _ = read_video('./results/output.mp4')\\n\",\n        \"\\n\",\n        \"frame_h, frame_w = input_video_frames[0].shape[:-1]\\n\",\n        \"out_concat = cv2.VideoWriter('./temp/temp/result_concat.mp4', cv2.VideoWriter_fourcc(*'mp4v'), fps, (frame_w*2, frame_h))\\n\",\n        \"for i in range(len(output_video_frames)):\\n\",\n        \"  frame_input = input_video_frames[i % len(input_video_frames)]\\n\",\n        \"  frame_output = output_video_frames[i]\\n\",\n        \"  out_concat.write(cv2.hconcat([frame_input, frame_output]))\\n\",\n        \"out_concat.release()\\n\",\n        \"\\n\",\n        \"command = 'ffmpeg -loglevel error -y -i {} -i {} -strict -2 -q:v 1 {}'.format(input_audio_path, './temp/temp/result_concat.mp4', './results/output_concat_input.mp4')\\n\",\n        \"subprocess.call(command, shell=platform.system() != 'Windows')\\n\",\n        \"\\n\",\n        \"\\n\",\n        \"output_video_name = './results/output.mp4'\\n\",\n        \"output_video_mp4 = open('{}'.format(output_video_name),'rb').read()\\n\",\n        \"output_video_data_url = \\\"data:video/mp4;base64,\\\" + b64encode(output_video_mp4).decode()\\n\",\n        \"print('Display lip-syncing video: {}'.format(output_video_name), file=sys.stderr)\\n\",\n        \"display(HTML(\\\"\\\"\\\"\\n\",\n        \"  <video height=400 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"video/mp4\\\">\\n\",\n        \"  </video>\\n\",\n        \"  \\\"\\\"\\\" % output_video_data_url))\\n\",\n        \"\\n\",\n        \"output_concat_video_name = './results/output_concat_input.mp4'\\n\",\n        \"output_concat_video_mp4 = open('{}'.format(output_concat_video_name),'rb').read()\\n\",\n        \"output_concat_video_data_url = \\\"data:video/mp4;base64,\\\" + b64encode(output_concat_video_mp4).decode()\\n\",\n        \"print('Display input video and lip-syncing video: {}'.format(output_concat_video_name), file=sys.stderr)\\n\",\n        \"display(HTML(\\\"\\\"\\\"\\n\",\n        \"  <video height=400 controls>\\n\",\n        \"        <source src=\\\"%s\\\" type=\\\"video/mp4\\\">\\n\",\n        \"  </video>\\n\",\n        \"  \\\"\\\"\\\" % output_concat_video_data_url))\\n\"\n      ],\n      \"metadata\": {\n        \"id\": \"ravs9UDucMfy\",\n        \"cellView\": \"form\"\n      },\n      \"execution_count\": null,\n      \"outputs\": []\n    }\n  ]\n}"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.150390625,
          "content": "basicsr==1.4.2\nkornia==0.5.1\nface-alignment==1.3.4\nninja==1.10.2.3\neinops==0.4.1\nfacexlib==0.2.5\nlibrosa==0.9.2\ndlib==19.24.0\ngradio>=3.7.0\nnumpy==1.23.4\n"
        },
        {
          "name": "third_part",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "webUI.py",
          "type": "blob",
          "size": 5.576171875,
          "content": "import random\nimport subprocess\nimport os\nimport gradio\nimport gradio as gr\nimport shutil\n\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n\n\ndef convert(segment_length, video, audio, progress=gradio.Progress()):\n    if segment_length is None:\n        segment_length=0\n    print(video, audio)\n\n    if segment_length != 0:\n        video_segments = cut_video_segments(video, segment_length)\n        audio_segments = cut_audio_segments(audio, segment_length)\n    else:\n        video_path = os.path.join('temp/video', os.path.basename(video))\n        shutil.move(video, video_path)\n        video_segments = [video_path]\n        audio_path = os.path.join('temp/audio', os.path.basename(audio))\n        shutil.move(audio, audio_path)\n        audio_segments = [audio_path]\n\n    processed_segments = []\n    for i, (video_seg, audio_seg) in progress.tqdm(enumerate(zip(video_segments, audio_segments))):\n        processed_output = process_segment(video_seg, audio_seg, i)\n        processed_segments.append(processed_output)\n\n    output_file = f\"results/output_{random.randint(0,1000)}.mp4\"\n    concatenate_videos(processed_segments, output_file)\n\n    # Remove temporary files\n    cleanup_temp_files(video_segments + audio_segments)\n\n    # Return the concatenated video file\n    return output_file\n\n\ndef cleanup_temp_files(file_list):\n    for file_path in file_list:\n        if os.path.isfile(file_path):\n            os.remove(file_path)\n\n\ndef cut_video_segments(video_file, segment_length):\n    temp_directory = 'temp/audio'\n    shutil.rmtree(temp_directory, ignore_errors=True)\n    shutil.os.makedirs(temp_directory, exist_ok=True)\n    segment_template = f\"{temp_directory}/{random.randint(0,1000)}_%03d.mp4\"\n    command = [\"ffmpeg\", \"-i\", video_file, \"-c\", \"copy\", \"-f\",\n               \"segment\", \"-segment_time\", str(segment_length), segment_template]\n    subprocess.run(command, check=True)\n\n    video_segments = [segment_template %\n                      i for i in range(len(os.listdir(temp_directory)))]\n    return video_segments\n\n\ndef cut_audio_segments(audio_file, segment_length):\n    temp_directory = 'temp/video'\n    shutil.rmtree(temp_directory, ignore_errors=True)\n    shutil.os.makedirs(temp_directory, exist_ok=True)\n    segment_template = f\"{temp_directory}/{random.randint(0,1000)}_%03d.mp3\"\n    command = [\"ffmpeg\", \"-i\", audio_file, \"-f\", \"segment\",\n               \"-segment_time\", str(segment_length), segment_template]\n    subprocess.run(command, check=True)\n\n    audio_segments = [segment_template %\n                      i for i in range(len(os.listdir(temp_directory)))]\n    return audio_segments\n\n\ndef process_segment(video_seg, audio_seg, i):\n    output_file = f\"results/{random.randint(10,100000)}_{i}.mp4\"\n    command = [\"python\", \"inference.py\", \"--face\", video_seg,\n               \"--audio\", audio_seg, \"--outfile\", output_file]\n    subprocess.run(command, check=True)\n\n    return output_file\n\n\ndef concatenate_videos(video_segments, output_file):\n    with open(\"segments.txt\", \"w\") as file:\n        for segment in video_segments:\n            file.write(f\"file '{segment}'\\n\")\n    command = [\"ffmpeg\", \"-f\", \"concat\", \"-i\",\n               \"segments.txt\", \"-c\", \"copy\", output_file]\n    subprocess.run(command, check=True)\n\n\nwith gradio.Blocks(\n    title=\"Audio-based Lip Synchronization\",\n    theme=gr.themes.Base(\n        primary_hue=gr.themes.colors.green,\n        font=[\"Source Sans Pro\", \"Arial\", \"sans-serif\"],\n        font_mono=['JetBrains mono', \"Consolas\", 'Courier New']\n    ),\n) as demo:\n    with gradio.Row():\n        gradio.Markdown(\"# Audio-based Lip Synchronization\")\n    with gradio.Row():\n        with gradio.Column():\n            with gradio.Row():\n                seg = gradio.Number(\n                    label=\"segment length (Second), 0 for no segmentation\")\n            with gradio.Row():\n                with gradio.Column():\n                    v = gradio.Video(label='SOurce Face')\n\n                with gradio.Column():\n                    a = gradio.Audio(\n                        type='filepath', label='Target Audio')\n\n            with gradio.Row():\n                btn = gradio.Button(value=\"Synthesize\",variant=\"primary\")\n            with gradio.Row():\n                gradio.Examples(\n                    label=\"Face Examples\",\n                    examples=[\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/face/1.mp4\"),\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/face/2.mp4\"),\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/face/3.mp4\"),\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/face/4.mp4\"),\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/face/5.mp4\"),\n                    ],\n                    inputs=[v],\n                    fn=convert,\n                )\n            with gradio.Row():\n                gradio.Examples(\n                    label=\"Audio Examples\",\n                    examples=[\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/audio/1.wav\"),\n                        os.path.join(os.path.dirname(__file__),\n                                     \"examples/audio/2.wav\"),\n                    ],\n                    inputs=[a],\n                    fn=convert,\n                )\n\n        with gradio.Column():\n            o = gradio.Video(label=\"Output Video\")\n\n    btn.click(fn=convert, inputs=[seg, v, a], outputs=[o])\n\ndemo.queue().launch()\n"
        }
      ]
    }
  ]
}