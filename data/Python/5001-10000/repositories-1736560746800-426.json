{
  "metadata": {
    "timestamp": 1736560746800,
    "page": 426,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openatx/uiautomator2",
      "stars": 6765,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.5947265625,
          "content": "[run]\nbranch = True\n\nomit =\n    /tests/**\n    /docs/*\n    /*_tests/**\n\n[report]\n; Regexes for lines to exclude from consideration\nexclude_also =\n    ; Don't complain about missing debug-only code:\n    def __repr__\n    if self\\.debug\n\n    ; Don't complain if tests don't hit defensive assertion code:\n    raise AssertionError\n    raise NotImplementedError\n\n    ; Don't complain if non-runnable code isn't run:\n    if 0:\n    if __name__ == .__main__.:\n\n    ; Don't complain about abstract methods, they aren't run:\n    @(abc\\.)?abstractmethod\n\n    except adbutils.AdbError\n    @deprecated\n\nignore_errors = True\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.234375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.idea/\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\nAUTHORS\nChangeLog\n\n.vscode/\nreport/\n*.apk\n*.exe\nnode_modules/\nvendor/\n\ndocs/*.rst\n\n.DS_Store\n*.lock\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 23.216796875,
          "content": "CHANGES\n=======\n\n2.16.10\n-------\n\n* try not to reinstall apk when atx-agent is not installed\n\n2.16.9\n------\n\n* little fix for vivo and oppo, do not reinstall uiautomator apk\n\n2.16.8\n------\n\n* fix dump\\_hierarchy error when recovered in a minute\n* update logic for tmq\n* fixed: 增加app\\_install的超时时间 (#736)\n\n2.16.7\n------\n\n* use filelock to prevent multi process reset\\_uiautomator\n\n2.16.6\n------\n\n* remove process\\_safe\\_wrapper since not allow multi device operation\n\n2.16.5\n------\n\n* use filelock to make process call process safe\n\n2.16.4\n------\n\n* skip uninstall uiautomator apk for tmq platform\n* add link\n\n2.16.3\n------\n\n* use github actions to publish lib instead of trivis\n\n2.16.2\n------\n\n* fix tests\n* Update init.py (#618)\n\n2.16.1\n------\n\n* hotfix for multiprocess call reset\\_uiautomator\n* update ISSUE\\_TEMPLATE for REQUIRED logs\n* update doc\n\n2.16.0\n------\n\n* add cli:doctor\n* add doc\n\n2.15.2\n------\n\n* add support reconnect when device disconnect\n* update requirements\n* Update \\_\\_init\\_\\_.py (#679)\n\n2.15.1\n------\n\n* try to fix when wifi connect device still try to upgrade atx-agent bug\n* add multi thread example\n\n2.15.0\n------\n\n* add init --addr support\n* update func doc\n\n2.14.1\n------\n\n* fix init error\n\n2.14.0\n------\n\n* mark useless tests\n* add atx-agent version check when something when wrong\n* update apk and atx-agent version\n* skip flake8 check\n\n2.13.2\n------\n\n* update atx-agent to fix security error, ref openatx/atx-agent#82\n\n2.13.1\n------\n\n* update minicap download address to devicefarmer group, which support sdk:30\n\n2.13.0\n------\n\n* add d.xpath(..).child support\n\n2.12.3\n------\n\n* show float window in tmq platform\n\n2.12.2\n------\n\n* fix bug #650\n* add typing for image, commented findit\n\n2.12.1\n------\n\n* fix d.settings to self.settings\n* change localhost to 127.0.0.1\n\n2.12.0\n------\n\n* add open\\_url method\n\n2.11.5\n------\n\n* fix swipe set duration no effect, close #591\n\n2.11.4\n------\n\n* xpath: %xxx% support content-desc\n\n2.11.3\n------\n\n* add missing builtin arg\n* add builtin and autostart to watch\\_context\n* add hire doc\n\n2.11.2\n------\n\n* update requirements\n\n2.11.1\n------\n\n* fix settings props check\n\n2.11.0\n------\n\n* add watch\\_context which may replace watcher\n* fix reset-uiautomator on windows error\n\n2.10.2\n------\n\n* add retry for app\\_current, fix #572\n* update sponsor link\n\n2.10.1\n------\n\n* update tests, prevent atx-agent log too large\n\n2.10.0\n------\n\n* add more tests\n* add Direction, support scroll\\_to, update some doc\n* d.xpath add scroll support\n\n2.9.6\n-----\n\n* fix support for d(resourceId='android:id/text1')[-1].get\\_text()\n\n2.9.5\n-----\n\n* support change to production use os.environ['TMQ'] = true\n* raise EnvironmentError directly when connected with wifi, but atx-agent is down\n\n2.9.4\n-----\n\n* fix recover logic when atx-agent is not responsing\n\n2.9.3\n-----\n\n* enable screenrecord test\n* fix screenrecord\n\n2.9.2\n-----\n\n* fix wait\\_for\\_device not finished error\n\n2.9.1\n-----\n\n* fix selector long\\_click bug\n* update doc\n\n2.9.0\n-----\n\n* add operation\\_delay support\n\n2.8.6\n-----\n\n* add init into connect\\_usb for compability\n\n2.8.5\n-----\n\n* remove humanize\n* add support d(description=我的淘宝).screenshot()\n\n2.8.4\n-----\n\n* hotfix for set\\_new\\_command\\_timeout error\n\n2.8.3\n-----\n\n* hot fix for connect error when atx-agent not installed\n\n2.8.2\n-----\n\n* support fallback to WiFi when usb disconnected, add deprecated method :service\n\n2.8.1\n-----\n\n* fix app\\_start missing stop=True error\n* support push url\n\n2.8.0\n-----\n\n* change property serial back\n* add double\\_click, set click\\_pre and post delay to 0\n* fix bugs reported in qq\n* remove useless code\n* add missing swipe\\_ext and @address(teditor)\n* finally version\n* add missing toast\n* add more method\n* rewrite uiautomator2, too complex\n\n2.7.3\n-----\n\n* add timeout(60s) in init.py to prevent hang on apk install page\n\n2.7.2\n-----\n\n* update adbutils which buildin adb.exe for windows\n* rewrite part of init code\n\n2.7.1\n-----\n\n* upgrade adbutils: support download adb.exe when missing on windows\n\n2.7.0\n-----\n\n* add click\\_exists to xpath\n\n2.6.2\n-----\n\n* fix with reinstall apks when meet signature not matched error\n* add image.click doc and tests\n\n2.6.1\n-----\n\n* screenrecord support horizontal and vertical, support limit fps\n* add screenrecord usage\n\n2.6.0\n-----\n\n* add screenrecord code\n* add screenrecord sample\n\n2.5.9\n-----\n\n* upgrade atx-agent to 0.9.4 to fix go panic on go12\n\n2.5.8\n-----\n\n* update minicap sync method\n* update atx-agent version and apk version\n* call watcher when d.xpath calls\n* let d.touch.down support percent position, remove stop-app when reset-uiautomator\n* update doc\n* support Android Q minicap, show debug log when image search\n\n2.5.7\n-----\n\n* fix click on infinitly display not working bug\n* add recommended article\n* support generate all docs by sphinx\n* fix docs generate with sphinx, not very well\n* add missing file\n* fix retry when take screenshot, update readthedocs\n* add readthedocs for test\n\n2.5.6\n-----\n\n* add match and scroll\\_to to xpath object, update atx-agent version\n\n2.5.5\n-----\n\n* change connect\\_usb not start uiautomator automatically\n\n2.5.4\n-----\n\n* update atx-agent and apk version to use minitouchagent\n\n2.5.3\n-----\n\n\n2.5.2\n-----\n\n* fix pull error\n* add readTimeout handle\n\n2.5.1\n-----\n\n* fix \\_request func recursive error\n\n2.5.0\n-----\n\n* add d.alibaba support\n* update scale and wait-for-device timeout to 70s\n* fix when device replugin, d.shell fails\n\n2.4.6\n-----\n\n* fix wait am instrument too short, change timeout from 20 to 40\n* fix adbutils shell decode error\n* add retry in push\\_url\n\n2.4.5\n-----\n\n* fix usb cable replug raise ConnectionError bug\n\n2.4.4\n-----\n\n* update apk version, and atx-agent version\n* update atx-agent to 0.8.1, do lot of code format\n* fix Android Q screenshot error\n* fix init may raise FileNotFoundError bug\n* add uiautomator2 version in command line\n* add session test\n\n2.4.3\n-----\n\n* add fallback and session add some missing method\n* fix github workflow\n* fix flake8 warning\n* test github actions\n* change callback to fallback\n* add d.xpath(xxxxx).callback(click, px, py).click() support\n* add back token again\n* check if travis notification is working\n* add d.xpath.position方法\n\n2.4.2\n-----\n\n* change am instrument logic again\n* rewrite jsonrpc\\_retry\\_call logic\n* make recover uiautomator logic more simple\n\n2.4.1\n-----\n\n* add taobao plugin for internal network\n* add long\\_click to d.xpath\n\n2.4.0\n-----\n\n* change logic of start uiautomator, upgrade apk version\n* fix bug, reported by h.t\n* am start apk twice to make sure, uiautomator can be recovered\n\n2.3.4\n-----\n\n* show lib version when init for easily debug\n* support config service recover behavior\n\n2.3.3\n-----\n\n* fix d.serial return None bug, fix tests on large screen\n* update doc, add quick-reference.md\n* add quick ref guide\n\n2.3.2\n-----\n\n* fix init command not resolve signature mismatch bug, fix uninstall can not uninstall apk bug\n\n2.3.1\n-----\n\n* add xpath\\_debug to settings, fix xpath %xx and xx%\n* update watcher doc\n\n2.3.0\n-----\n\n* add d.watcher method to handle popups\n* add settings code\n* add basic settings.py\n* Update README.md\n* hotfix for windows\n* remove timeout for function: pull\n\n2.2.0\n-----\n\n* add cmd\\_purge, add set\\_new\\_command\\_timeout api\n\n2.1.0\n-----\n\n* add image.py, change uiautomator from v1 to v2\n* add uauto\n* typo (#476)\n* fix missing \\_parent error, close #477\n* hot fix for #475\n* fix spell error\n* fix logo not show error in readme\n* add hogwarts sponsor\n* add wait to image.py\n* fix xpath start-with and ends-with, add image click\n\n2.0.0\n-----\n\n* remove toast from readme\n* add app list api\n* support multi xpath(xx).xpath(xx), and add .info in xpath\n* add clipboard doc\n* change to uiautomator 1.0\n* Fixes #451\n* add clipboard support\n* Update README.md\n* fix d.xpath.when(..).when(..), thread-safe reset-uiautomator\n\n1.3.6\n-----\n\n* use monkey command to install apk on TMQ platform\n* fix d.xpath.watcher, fix d.shell can not handle & and ? bug\n\n1.3.5\n-----\n\n* add xpath.apply\\_watch\\_from\\_yaml, support xpath.when(1).when(2)\n* fix homepage link\n* fix atx-agent version compare check\n\n1.3.4\n-----\n\n* remove useless cli\n* use jsonrpc.dumpWindowsHierarchy instead of http GET /dump/hierarchy\n* assert file\\_size when cache\\_download\n\n1.3.3\n-----\n\n* fix uiautomator start error\n\n1.3.2\n-----\n\n* update atx-agent to fix UIAutomation not connected error\n* upgrade apk version\n* enhance reset\\_uiautomator()\n\n1.3.1\n-----\n\n* fix adbutils dep version\n\n1.3.0\n-----\n\n* fix check atx-agent\n* fix last commit\n* add function to check atx-agent version\n* update atx-agent version\n* update dingtalk webhook again\n* update dingtalk webhook\n\n1.2.6\n-----\n\n* fix when uiautomator not alive, func connect can not auto init error\n\n1.2.5\n-----\n\n* update dingtalk robot webhook url\n* set init as default, set default screenshot name when use cli:uiautomator2 screenshot\n* rename current\\_app to app\\_current\n* add webview for future develop\n\n1.2.4\n-----\n\n* fix app\\_start without activity not launch error\n* add adcd.py(abstract class about device) and implement pure adb to run test\n* implement pure adb to run test\n* use Baidu OCR to select element (#419)\n\n1.2.3\n-----\n\n* update androidbinary to fix momo can not start error #393\n* add support u2.connect\\_usb(serial, init=False)\n* change function behavior d.touch.up() to d.touch.up(x, y)\n\n1.2.2\n-----\n\n* fix app\\_list\\_running() only show 3rd party apps bug, add support to read from env-var ANDROID\\_SERIAL\n\n1.2.1\n-----\n\n* fix and add doc for app\\_start #425, add uiautomator check in dump\\_hierarchy\n* add thread lock in dump\\_hierarchy\n* fix session restart\n* Update README.md\n* add notification about dingtalk travis\n\n1.2.0\n-----\n\n* add wait gone\n* add strict argument to session()\n* rename UIAutomatorServer to Device, add session.restart() method\n* change http://tool.appetizer.io to https protocol\n* add swipe\\_ext('right', 0.9) method\n* add app\\_wait, app\\_list\\_running\n\n1.1.0\n-----\n\n* add swipe and screenshot to d.xpath element\n* fix  init with serial\n* update changelog, remove d.watchers.watched, use IPython.embed first in cmd:uiautomator2 console\n* add console in command line\n* fix shell(stream=True) timeout error, close #394\n\n1.0.3\n-----\n\n* fix android Q support again\n\n1.0.2\n-----\n\n* replace google-fire with argparse, add current, stop, start subcommand in command line\n* remove useless u2cli\n\n1.0.1\n-----\n\n* fix init unknown host service, close #373\n* add develop.md\n\n1.0.0\n-----\n\n* upgrade atx-agent version, and android-uiautomator-version, update doc\n* fix swipe\\_points usage in readme\n* init add mirror of appetizer\n* fix str decode error\n* fix debug mode decode error\n\n0.3.3\n-----\n\n* add watch\\_clear and address\n* add xpath.watch\\_stop()\n\n0.3.2\n-----\n\n* fix debug curl print\n* fix shell calls in connect\n\n0.3.1\n-----\n\n* fix #370\n* test with 3.5\n\n0.3.0\n-----\n\n* fix fix\n* fix travis again\n* fix travis\n* update readme\n* add missing dep:adbutils\n* update xpath doc, add set\\_text to xpath\n* remove uiautomator2/adbutils.py, use thirdparty adbutils\n* add quickstart, fix healthcheck for OnePlus\n* fix screenshot method\n* say goodbye to python2 and welcome python3\n* Update ISSUE\\_TEMPLATE.md\n* use /dump/hierarchy to instead of call:dumpHierarchy\n* update atx-agent version\n\n0.2.3\n-----\n\n* xpath element support click\n* add http\\_timeout for shell function, resolve #353\n* add xpath quicksheet\n* resolve #348\n* remove code which leads to minicap install error\n* add get method of xpath\n* add xpath::get\\_text(), close #337\n* add connect\\_adb\\_wifi function\n* add probot link\n* auto stale issue when tagged as invalid\n* serial support none\n* 修复多台设备时，list-forward失败 (#327)\n* \\`python -m uiautomator2 init\\`初始化403报错，增加header atx\\_agent\\_url中报错变量错误修复\n\n0.2.2\n-----\n\n* update atx-agent version\n* typo (#318)\n* fix connect\\_usb error\n\n0.2.1\n-----\n\n* fix #317, fix #316\n\n0.2.0\n-----\n\n* merge change\n* remove pure-python-adb dependency, use adbutils.py instead\n* format \\_\\_init\\_\\_.py, update adbutils with ADB Protocol\n* update changelog\n* part of job\n\n0.1.11\n------\n\n* limit pure-python-adb version, to fix from adb.client import error\n* support args\n\n0.1.10\n------\n\n* remove cmd:init from fire.Fire, fix forward error when muti device connect to one machine\n* upgrade atx-agent\n* ext\\_xpath support\n* remove 3.7\n* fix travis test again\n* fix travis\n* sort imports\n* split code to different files\n* Update README.md\n* Update README.md\n* remove debug with dict: which will lead misunderstanding\n* update atx-agent version\n* appveyor\n* exedir detection everywhere\n* fix\n* come at me\n* need android components nowadays\n* travis 2018 switches from android-21 to android-22\n* fix pip install requirements\n* fix travis lang\n* add emulator and tests to travis and update README\n* fix typo. (#278)\n\n0.1.9\n-----\n\n* fix connect\\_usb init error, close #276\n* fix typo\n* add set\\_fail\\_prompt function\n* add d.touch.(down|move|up) in readme\n* fix atxagent version code\n\n0.1.8\n-----\n\n* update atx-agent add api app\\_info, and app\\_icon\n* update atx-agent version to 0.5.1, fix session timeout error\n* update atx-agent version and netease music example\n* add wait\\_activity\n* raise IndexError when UiObject returned by child\\_by\\_xxx, close #261\n* fix xpath py2 py3 compatibale\n* fix xpath ext resource-id error\n* Update README.md (#260)\n* update weditor install method\n\n0.1.7\n-----\n\n* sem-ver:bugfix, fix init with PATH env error on windows\n* fix doc\n* update apk to 1.1.7 to fix dumpHierarchy, close #207\n\n0.1.6\n-----\n\n* use atx-agent server -stop before launch\n* force stop atx-agent when init\n* fix launch atx-agent with wrong PATH, which may cause /info get wrong info\n* fix test on android P emulator\n* 加入aricv图像识别插件 (#250)\n* update atx-agent version\n\n0.1.5\n-----\n\n* fix init, because of mirror down\n* fix xpath python2 support, perf create dir if not exists\n* fix little bug\n* update readme\n* first xpath plugin version\n* add more comment about xpath plugin\n* add xpath plugin\n\n0.1.4\n-----\n\n* update install method\n* update install part\n* add install test code\n* fix fps collect\n* update atx-agent version\n* fix if log bug in ext/info\n* 修改info插件调用模式 (#245)\n* add test info plugin (#240)\n* fix perf get data error (#239)\n* Update README.md\n* open python 3.7 support\n* 更改一处类型提示错误 (#229)\n* add beta method hooks\\_register\n* fix #206, init gives 'inf' as serial <class 'float'> (#216)\n* 修改init不成功的问题 (#221)\n* update to new atx-agent\n* fix current\\_app in sumsung, add tcp and udp in perf\n* add images\n* add fps\n* swipe duration default 0.1(old 0.5), add swipe ui\n* fix perf uiautomator in python2\n* update doc\n* fix perf d not exists bug\n* add traffic into perf plugin\n* update atx-agent version\n* catch AttributeError in UIAutomatorServer\n* add back implicitly wait\n* add perf doc\n* add perf plugin\n* runyaml fix\n* add plugin\\_register and ocr plugin\n* add plugin support\n* let shell return namedtuple, remove outdated docs\n* use q|query instead of xpath in steps\n* add send\\_action support\n* fix #200\n* add with into session, update oppo support\n* fix merge conflict\n* click add offset, support oppo install with browser\n* add oppo install method, not finished yet\n* fix str(err.data) encode error\n* Update \\_\\_init\\_\\_.py\n* add some comment\n* 1.修改截图定位线\n* raise error when error found in uiautomator2.cli install\n* catch NullPointerExceptionError on jsonrpc call\n* patch to catch UiAutomation not connect\n* use github-mirror for update-apk command\n* fix healthcheck\n* add unlock screen for healthcheck\n* add retry for objInfo\n* fix conflict\n* hot fix for update\\_instance\n* add implicit\\_wait function\n* remove pid file when stop atx-agent\n\n0.1.3\n-----\n\n* fix init twice error, update atx-agent t0 0.4.1\n* support vivo install\n* add cancel request support\n* fix python requires\n* update to new version\n* exclude py 3.7 version\n* make u2cli work\n* fix when no progress\n* update uiautomator2.cli install\n* show progress\n* add missing file\n* add u2cli entry\n* add qrcode of qq\n* add fail reason\n* todo: add push folder support\n* add --mirror document, ref #173\n* add retry for dump\\_hierarchy, because of UiDevice NullPointer Exception\n* support github-mirror to make download faster\n* chmod +x report bad mode on xiaomi HMNote3\n* Change method of detecting executable dir\n* merge openatx\n* fix push to /data/local/tmp/mini... instead of /data/local/tmp\n* fix requests RemoteDisconnected error\n* Use pure-python-adb to get serials of all android devices when initializing\n* If adb client can't connect to the adb server, try to use adb cli to start adb server\n* Use pure-python-adb package to replace adb wrapper\n* support --mirror\n* fix get toast error\n* hot fix for executable dir\n* replace $ into -, fix #152\n* update document\n* use /data/local/tmp as default exec dir\n* forgot to update apk version\n* manually merge pr 46\n* parens are necessary to catch multi exception in python3\n* add screenshot(format=raw), fix init timeoutError, close #114\n* Replace os.path.join with string format, so can run as normal on windows\n* Revert changes to install\\_atx\\_agent\n* Provide alternative execute directory to /data/local/tmp, so can install to devices like 'ZUK's Z2\n* Solve ZUK's no permission to /data/local/tmp problem\n* fix xpath wait, fix connect simulator bug, update apk, to make watchers faster\n* Replace os.path.join with string format, so can run as normal on windows\n* Revert changes to install\\_atx\\_agent\n* Provide alternative execute directory to /data/local/tmp, so can install to devices like 'ZUK's Z2\n* hot fix for session launch\n* fix fix\n* update apk version to fix #138 #137\n* update view\n* add xpath support\n* fix session can not start app error\n* start atx-agent if atx-agent dead when connect\\_usb\n* fix ext/htmlreport unpatch\n* exists return class, fix watchers.watched not working bug\n* add toast capture support\n* add d.watchers.watched = True support\n\n0.1.2\n-----\n\n* Import update on uiautomator-server, fix current app function fix #41\n* \\_wait\\_install\\_finished 增加 hasattr(sys.stdout, 'isatty')判断\n* fix current\\_ime() failed\n* Solve ZUK's no permission to /data/local/tmp problem\n* add shell function in order to replace adb\\_shell one day\n* support long running command\n* package info should return None\n* comment useless code\n* update apk version, try to catch NullException\n* run code again for NullObjectException and StaleObjectException\n* fix install -g error\n* handle StaleObjectException\n* fix dns when network change\n* only build in python 2.7\n* add healthcheck in command line\n* update travis\n* format code, add click\\_gone function\n* change prompt\n* add double click support\n* add proxyhttp.go not finished yet\n* stash code\n* add support to patch long\\_click\n* add fancybox into htmlreport\n* add qqicon\n\n0.1.1\n-----\n\n* fix message in None error\n* try to fix #73\n* update atx-agent version\n* add screenshot into cli\n* fix for failed to init\n* modified for android simulator\n* add docstring for swipe\\_points\n* add swipe points description\n* add --ignore-apk-check option\n* add issue template\n* little fix\n* wait disable\\_popups for fix\n* UiObject support long\\_click with duration\n* add issue robot\n* support back to init multi devices\n* if adb without -g, remove -g and try again\n* add DeleteImmediatelly in disable\\_popups\n* update apk version to support toast\n* add support to show toast\n* add how to do with popups\n* update version\n* add disable\\_popups support\n* update atx agent\n* change TMPDIR to support upload large file\n* fix UINotFoundEncoding error\n* check if apk installed after init\n* open u2 github URL after success init\n* add adbkit-init\n* fix raise exception unicode code encode error\n* fix click\\_nowait missing error\n* support stop uiautomator keeper\n* fix htmlreport\n* add some useful link\n* add htmlreport support, remove click\\_nowait and tap\n\n0.1.0\n-----\n\n* add session support\n* add syntax error retry on screenshot error\n* hot fix to fix atx-agent screenshot bug\n* 修改import错误 ：ImportError: cannot import name popup\n* update atx-agent version\n* send\\_keys use adb shell input text when set\\_fast\\_ime failed.  upgrade pos\\_rel2abs  function\n* add tkgui for experiment\n* show better app\\_install progress on noatty, make healthcheck better\n* update TOC\n* sync to atx-agent new download logic\n* travis fight\n* no android for now\n* boring travis non-python pip problem\n* fix travis build\n* add Android emulator to travis and deploy only once on py2.7\n* clarify adb\\_shell; fix typos\n* Update README.md\n* fix healthcheck on xiaomi device\n\n0.0.3\n-----\n\n* fix apk version name\n* hot fix\n* not raise RuntimeError in current\\_app()\n* add window\\_size api\n* remove ReadTimeout from jsonrpc\\_retry\\_call\n* update logic, when uiautomator2 is down, restart apk\n* fix input method\n* add timeout in screenshot and restart uiautomator.apk shen connect 502\n* hot fix for weditor\n* stop uiautomator before start when do healthcheck()\n* open identify activity with am start -n\n* fix deprecated warn error\n* deprecated set\\_click\\_post\\_delay\n* add deault wait\\_timeout  set support\n* add retry to prevent screenshot error on some special conditions\n* update screenshot to support opencv\n* update atx agent version\n* update the connect method\n* update atx-agent version\n* add push\\_url api\n* 增加init时对代理的支持\n* support install on emulator\n* suppress warning when uninstall error\n* rename examples/powerweb to webbattery\n* add webpower ^\\_^\n* fix displayHeight error on Huawei\n* update atx\\_agent version to 0.1.1\n* make pos\\_rel2abs a little faster\n* modify http\\_timeout according to wait(timeout..)\n\n0.0.2\n-----\n\n* update doc\n* update doc\n* support oppo auto install\n* add app\\_install\\_local, handle serial contains &\n* swipe\\_points support percent points\n* long click support seconds\n* add minitouch install support\n* add minitouch but not tested\n* add FastInputIME\n* add send\\_keys method\n* guesture relative pos to real, close #12\n* fix click\\_exists\n* add gesture and pinch\n* add select count and fling, scroll\n* update ABOUT.rst addr\n\n0.0.1\n-----\n\n* setup travis build on all\\_branches\n* add skip cleanup\n* update doc again\n* check com.github.uiautotor.test when init\n* update badge link\n* fix datetime error\n* add debug\n* add identify method\n* add default timeout to requests\n* update to new version\n* change healthcheck logic, launch com.github.uiautomator and then HOME\n* update atx-agent version to 0.0.9\n* sync with atx-agent code\n* when device ip is empty, connect\\_usb will be called\n* add pull support\n* support stop in app\\_start\n* add app-stop-all method\n* add unlock cli\n* add watcher support\n* update install guide\n* add pypi version badge\n* add readme\n* am\\_start add stop param\n* click when exists\n* add healthcheck and connect\\_usb, close #3\n* add unlock method\n* add delay after click\n* fix abilist is empty error\n* add session check(check if app is alive when test is running\n* fix atx-agent install error\n* add clear cache support\n* add pushfile support\n* support kill all apps\n* support percent positions\n* fix detect device from adb devices -l error\n* remove useless print\n* support init multi devices\n* support percent tap, recode init logic\n* fix raise UiObjectNotFoundError error\n* fix incompatible in py3\n* tired, want to sleep\n* add output\n* fix auto install method\n* add auto install requirements scripts\n* update document\n* screenshot return PIL.Image\n* ref |> update function app\\_start(..) can input packagename and activity to start app\n* update doc to lastest\n* add selector long\\_click, update some doc\n* add example test\n* set default port to 7912\n* update readme\n* add connect(..) and add some doc\n* fix some error\n* initial project\n* Initial commit\n"
        },
        {
          "name": "DEVELOP.md",
          "type": "blob",
          "size": 0.5419921875,
          "content": "## Local development\n\n```\ngit clone https://github.com/openatx/uiautomator2\ncd uiautomator2\n\npip install poetry\npoetry install\n\n# download apk to assets/\nmake sync\n\n# run python shell after device or emulator connected\npoetry run uiautomator2 console\n```\n\n\n## ViewConfiguration\nDefault configuration can retrived from [/android/view/ViewConfiguration.java](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewConfiguration.java)\n\n> Unit: ms\n\n- TAP_TIMEOUT: 100\n- LONG_PRESS_TIMEOUT: 500\n- DOUBLE_TAP_TIMEOUT: 300\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2017 openatx\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.744140625,
          "content": ".PHONY: build\n\nformat:\n\tpoetry run isort . -m HANGING_INDENT -l 120\n\ntest:\n\tpoetry run pytest -v mobile_tests/\n\ncovtest:\n\tpoetry run coverage run -m pytest -v demo_tests tests\n\tpoetry run coverage html --include 'uiautomator2/**'\n\n\ncov:\n\tpoetry run pytest -v tests/ \\\n\t\t\t--cov-config=.coveragerc \\\n\t\t\t--cov uiautomator2 \\\n\t\t\t--cov-report xml \\\n\t\t\t--cov-report term\n\nsync:\n\tcd uiautomator2/assets; ./sync.sh; cd -\n\nbuild:\n\tpoetry self add \"poetry-dynamic-versioning[plugin]\"\n\tcd uiautomator2/assets; ./sync.sh; cd -\n\trm -fr dist\n\tpoetry build -vvv\n\ninit:\n\tif [ ! -f \"ApiDemos-debug.apk\" ]; then \\\n\t\twget https://github.com/appium/appium/raw/master/packages/appium/sample-code/apps/ApiDemos-debug.apk; \\\n\tfi\n\tpoetry run python -m adbutils -i ./ApiDemos-debug.apk\n\n"
        },
        {
          "name": "QUICK_REFERENCE.md",
          "type": "blob",
          "size": 3.1015625,
          "content": "# QUICK REFENRECE GUIDE\n\n```python\nimport uiautomator2 as u2\n\nd = u2.connect(\"--serial-here--\") # 只有一个设备也可以省略参数\nd = u2.connect() # 一个设备时, read env-var ANDROID_SERIAL\n\n# 信息获取\nprint(d.info)\nprint(d.device_info)\nwidth, height = d.window_size()\nprint(d.wlan_ip)\nprint(d.serial)\n\n## 截图\nd.screenshot() # Pillow.Image.Image格式\nd.screenshot().save(\"current_screen.jpg\")\n\n# 获取hierarchy\nd.dump_hierarchy() # str\n\n# 设置查找元素等待时间，单位秒\nd.implicitly_wait(10)\n\nd.app_current() # 获取前台应用 packageName, activity\nd.app_start(\"io.appium.android.apis\") # 启动应用\nd.app_start(\"io.appium.android.apis\", stop=True) # 启动应用前停止应用\nd.app_stop(\"io.appium.android.apis\") # 停止应用\n\napp = d.session(\"io.appium.android.apis\") # 启动应用并获取session\n\n# session的用途是操作的同时监控应用是否闪退，当闪退时操作，会抛出SessionBrokenError\napp.click(10, 20) # 坐标点击\n\n# 无session状态下操作\nd.click(10, 20) # 坐标点击\nd.long_click(10, 10)\nd.double_click(10, 20)\n\nd.swipe(10, 20, 80, 90) # 从(10, 20)滑动到(80, 90)\nd.swipe_ext(\"right\") # 整个屏幕右滑动\nd.swipe_ext(\"right\", scale=0.9) # 屏幕右滑，滑动距离为屏幕宽度的90%\nd.drag(10, 10, 80, 80)\n\nd.press(\"back\") # 模拟点击返回键\nd.press(\"home\") # 模拟Home键\nd.long_press(\"volume_up\")\n\nd.send_keys(\"hello world\") # 模拟输入，需要光标已经在输入框中才可以\nd.clear_text() # 清空输入框\n\nd.screen_on() # wakeUp\nd.screen_off() # sleep screen\n\nprint(d.orientation) # left|right|natural|upsidedown\nd.orientation = 'natural'\nd.freeze_rotation(True)\n\nprint(d.last_toast) # 获取显示的toast文本\nd.clear_toast() # 重置一下\n\nd.open_notification()\nd.open_quick_settings()\n\nd.open_url(\"https://www.baidu.com\")\nd.keyevent(\"HOME\") # same as: input keyevent HOME\n\n# 执行shell命令\noutput, exit_code = d.shell(\"ps -A\", timeout=60) # 执行shell命令，获取输出和exitCode\noutput = d.shell(\"pwd\").output # 这样也可以\nexit_code = d.shell(\"pwd\").exit_code # 这样也可以\n\n# Selector操作\nsel = d(text=\"Gmail\")\nsel.wait()\nsel.click()\n\n```\n\n```python\n# XPath操作\n# 元素操作\nd.xpath(\"立即开户\").wait() # 等待元素，最长等10s（默认）\nd.xpath(\"立即开户\").wait(timeout=10) # 修改默认等待时间\n\n# 常用配置\nd.settings['wait_timeout'] = 20 # 控件查找默认等待时间(默认20s)\n\nd.xpath(\"立即开户\").click() # 包含查找等待+点击操作，匹配text或者description等于立即开户的按钮\nd.xpath(\"//*[@text='私人FM']/../android.widget.ImageView\").click()\n\nd.xpath('//*[@text=\"私人FM\"]').get().info # 获取控件信息\n\nfor el in d.xpath('//android.widget.EditText').all():\n    print(\"rect:\", el.rect) # output tuple: (left_x, top_y, width, height)\n    print(\"bounds:\", el.bounds) # output tuple: （left, top, right, bottom)\n    print(\"center:\", el.center())\n    el.click() # click operation\n    print(el.elem) # 输出lxml解析出来的Node\n\n# 监控弹窗(在线程中监控)\nd.watcher.when(\"跳过\").click()\nd.watcher.start()\n```\n\n**欢迎多提意见。更欢迎Pull Request**"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 46.8681640625,
          "content": "# uiautomator2\n[![PyPI](https://img.shields.io/pypi/v/uiautomator2.svg)](https://pypi.python.org/pypi/uiautomator2)\n![PyPI](https://img.shields.io/pypi/pyversions/uiautomator2.svg)\n[![codecov](https://codecov.io/gh/openatx/uiautomator2/graph/badge.svg?token=d0ZLkqorBu)](https://codecov.io/gh/openatx/uiautomator2)\n\nQQ交流群: **815453846**\nDiscord: <https://discord.gg/PbJhnZJKDd>\n\n> 有段时间没有维护这个项目了（可能有两年了），但是最近工作需要又重新研究一下Android原生自动化，当然又调研了Appium，对比下来一看，发现uiautomator2这个项目的运行速度是真的好快，从检测元素到点击，都是毫秒级的，代码也比较好理解。真是没想到以前竟然写出了这么神奇的项目，这么好的项目怎么能让它落灰呢，得好好整一整，一些垃圾代码清理清理。所以项目版本从2.x.x升级到了3.x.x\n\n还在用2.x.x版本的用户，可以先看一下[2to3](docs/2to3.md) 再决定是否要升级3.x.x （我个人还是非常建议升级的）\n\n2到3毕竟是大版本升级，很多的函数删掉了。首先删掉的就是atx-agent，其次还有一堆atx-agent相关的函数。废弃的功能比如init.\n\n各种依赖库的版本号\n\n- [![PyPI](https://img.shields.io/pypi/v/uiautomator2.svg?label=uiautomator2)](https://pypi.python.org/pypi/uiautomator2)\n- [![PyPI](https://img.shields.io/pypi/v/adbutils.svg?label=adbutils)](https://github.com/openatx/adbutils)\n- [![GitHub tag (latest SemVer)](https://img.shields.io/github/tag/openatx/android-uiautomator-server.svg?label=android-uiautomator-server)](https://github.com/openatx/android-uiautomator-server)\n- ~~[![GitHub tag (latest SemVer)](https://img.shields.io/github/tag/openatx/atx-agent.svg?label=atx-agent)](https://github.com/openatx/atx-agent)~~\n\n[UiAutomator](https://developer.android.com/training/testing/ui-automator.html)是Google提供的用来做安卓自动化测试的一个Java库，基于Accessibility服务。功能很强，可以对第三方App进行测试，获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作，但有两个缺点：1. 测试脚本只能使用Java语言 2. 测试脚本要打包成jar或者apk包上传到设备上才能运行。\n\n我们希望测试逻辑能够用Python编写，能够在电脑上运行的时候就控制手机。这里要非常感谢 Xiaocong He ([@xiaocong][])，他将这个想法实现了出来（见[xiaocong/uiautomator](https://github.com/xiaocong/uiautomator)），原理是在手机上运行了一个http rpc服务，将uiautomator中的功能开放出来，然后再将这些http接口封装成Python库。\n因为`xiaocong/uiautomator`这个库，已经很久不见更新。所以我们直接fork了一个版本，为了方便做区分我们就在后面加了个2 [openatx/uiautomator2](https://github.com/openatx/uiautomator2),对应的Android包源码我也fork了一份，[openatx/android-uiautomator-server](https://github.com/openatx/android-uiautomator-server)\n\n除了对原有的库的bug进行了修复，还增加了很多新的Feature。主要有以下部分：\n\n* ~~设备和开发机可以脱离数据线，通过WiFi互联（基于[atx-agent](https://github.com/openatx/atx-agent)~~\n* ~~集成了[openstf/minicap](https://github.com/openstf/minicap)达到实时屏幕投频，以及实时截图~~\n* ~~集成了[openstf/minitouch](https://github.com/openstf/minitouch)达到精确实时控制设备~~\n* 修复了[xiaocong/uiautomator](https://github.com/xiaocong/uiautomator)经常性退出的问题\n* 代码进行了重构和精简，方便维护\n* 实现了一个设备管理平台(也支持iOS) [atxserver2](https://github.com/openatx/atxserver2) （注：目前不怎么维护了）\n* 扩充了toast获取和展示的功能（需要手动开启ATX的悬浮窗权限） 貌似有bug用不了\n\n>这里要先说明下，因为经常有很多人问 openatx/uiautomator2 并不支持iOS测试，需要iOS自动化测试，可以转到这个库 [openatx/facebook-wda](https://github.com/openatx/facebook-wda)。\n\n> PS: 这个库 ~~<https://github.com/NeteaseGame/ATX>~~ 目前已经不维护了，请尽快更换。\n\n这里有一份快速参考，适合已经入门的人 [QUICK REFERENCE GUIDE](QUICK_REFERENCE.md)，欢迎多提意见。\n\n## Requirements\n- Android版本 4.4+\n- Python 3.8+\n\n## QUICK START\n先准备一台（不要两台）开启了`开发者选项`的安卓手机，连接上电脑，确保执行`adb devices`可以看到连接上的设备。\n\n运行`pip3 install -U uiautomator2` 安装uiautomator2\n\n命令行运行`python`打开python交互窗口。然后将下面的命令输入到窗口中。\n\n```python\nimport uiautomator2 as u2\n\nd = u2.connect() # connect to device\nprint(d.info)\n```\n\n这时看到类似下面的输出，就可以正式开始用我们这个库了。因为这个库功能太多，后面还有很多的内容，需要慢慢去看 ....\n\n```\n{'currentPackageName': 'net.oneplus.launcher', 'displayHeight': 1920, 'displayRotation': 0, 'displaySizeDpX': 411, 'displaySizeDpY': 731, 'displayWidth': 1080, 'productName': 'OnePlus5', '\nscreenOn': True, 'sdkInt': 27, 'naturalOrientation': True}\n```\n\n另外为了保持稳定，还需要开启`小黄车`的悬浮窗权限。参考文章 [py-uiautomator2通过悬浮窗让服务长时间可用](https://zhuanlan.zhihu.com/p/688009468)\n\n一般情况下都会成功，不过也可能会有意外。可以加QQ群反馈问题(群号在最上面），群里有很多大佬可以帮你解决问题。\n\n## Sponsors\nThank you to all our sponsors! ✨🍰✨\n\n### 金牌赞助商（Gold Sponsor）\nEmpty\n\n# Article Recommended\n优秀文章推荐 (欢迎QQ群里at我反馈）\n\n- [termux里如何部署uiautomator2简介](https://www.cnblogs.com/ze-yan/p/12242383.html) by `成都-测试只会一点点`\n\n## 相关项目\n- 基于adb协议与Android进行交互的库 [adbutils](https://github.com/openatx/adbutils)\n- [uiauto.dev](https://uiauto.dev) 用于查看UI层级结构，类似于uiautomatorviewer(用于替代之前写的weditor），用于查看UI层级结构 \n- 设备管理平台，设备多了就会用到 [atxserver2](https://github.com/openatx/atxserver2) （寻找项目维护人员）\n- ~~[atx-agent](https://github.com/openatx/atx-agent) 运行在设备上的驻守程序，go开发，用于保活设备上相关的服务~~\n- ~~[weditor](https://github.com/openatx/weditor) 类似于uiautomatorviewer，专门为本项目开发的辅助编辑器(这个暂不维护了~~\n\n**[Installation](#installation)**\n\n**[Connect to a device](#connect-to-a-device)**\n\n**[Command line](#command-line)**\n\n**[Global settings](#global-settings)**\n  - **[Debug HTTP requests](#debug-http-requests)**\n  - **[Implicit wait](#implicit-wait)**\n\n**[App management](#app-management)**\n  - **[Install an app](#install-an-app)**\n  - **[Launch an app](#launch-an-app)**\n  - **[Stop an app](#stop-an-app)**\n  - **[Stop all running apps](#stop-all-running-apps)**\n  - **[Push and pull files](#push-and-pull-files)**\n  - **[Other app operations](#other-app-operations)**\n\n**[UI automation](#basic-api-usages)**\n  - **[Shell commands](#shell-commands)**\n  - **[Session](#session)**\n  - **[Retrieve the device info](#retrieve-the-device-info)**\n  - **[Key Events](#key-events)**\n  - **[Gesture interaction with the device](#gesture-interaction-with-the-device)**\n  - **[Screen-related](#screen-related)**\n  - **[Selector](#selector)**\n  - **[Watcher](#watcher)**\n  - **[Global settings](#global-settings)**\n  - **[Input method](#input-method)**\n  - **[Toast](#toast)**\n  - **[XPath](#xpath)**\n  - **[Screenrecord](#screenrecord)**\n  - **[Image match](#image-match) Removed**\n\n\n**[Contributors](#contributors)**\n\n**[LICENSE](#license)**\n\n\n# Installation\n1. Install uiautomator2\n\n    ```bash\n    pip install -U uiautomator2\n    ```\n    \n    测试是否安装成功 `uiautomator2 --help`\n    \n2. UI Inspector\n\n    ```bash\n    pip install uiautodev\n    # 启动\n    uiauto.dev\n    ```\n\n    浏览器打开 https://uiauto.dev 查看当前设备的界面结构。\n\n    **uiauto.dev**\n\n    [uiauto.dev](https://github.com/codeskyblue/uiauto.dev) 是一个独立与uiautomator2之外的一个项目，用于查看图层结构的。属于旧版项目[weditor的重构版本](https://github.com/openatx/weditor)，后续也许会收费（价格肯定物超所值），来支持当前这个项目继续维护下去。感兴趣的可以加群讨论(也包含提需求) QQ群 536481989\n\n# Connect to a device\nuse serialno to connect device eg. `123456f` (seen from `adb devices`)\n\n```python\nimport uiautomator2 as u2\n\nd = u2.connect('123456f') # alias for u2.connect_usb('123456f')\nprint(d.info)\n```\n\nSerial can be passed through env-var `ANDROID_SERIAL`\n\n\n```python\n# export ANDROID_SERIAL=123456f\nd = u2.connect()\n```\n\n# Command line\n其中的`$device_ip`代表设备的ip地址\n\n如需指定设备需要传入`--serial` 如 `python3 -m uiautomator2 --serial bff1234 <SubCommand>`, SubCommand为子命令（screenshot, current 等）\n\n> 1.0.3 Added: `python3 -m uiautomator2` equals to `uiautomator2`\n\n- screenshot: 截图\n\n    ```bash\n    $ uiautomator2 screenshot screenshot.jpg\n    ```\n\n- current: 获取当前包名和activity\n\n    ```bash\n    $ uiautomator2 current\n    {\n        \"package\": \"com.android.browser\",\n        \"activity\": \"com.uc.browser.InnerUCMobile\",\n        \"pid\": 28478\n    }\n    ```\n    \n- uninstall： Uninstall app\n\n    ```bash\n    $ uiautomator2 uninstall <package-name> # 卸载一个包\n    $ uiautomator2 uninstall <package-name-1> <package-name-2> # 卸载多个包\n    $ uiautomator2 uninstall --all # 全部卸载\n    ```\n\n- stop: Stop app\n\n    ```bash\n    $ uiautomator2 stop com.example.app # 停止一个app\n    $ uiautomator2 stop --all # 停止所有的app\n    ```\n\n- doctor:\n\n    ```bash\n    $ uiautomator2 doctor\n    [I 2024-04-25 19:53:36,288 __main__:101 pid:15596] uiautomator2 is OK\n    ```\n    \n# API Documents\n\n### New command timeout （Removed)\nWhen python quit, the UiAutomation service also quit.\n<!-- How long (in seconds) will wait for a new command from the client before assuming the client quit and ending the uiautomator service （Default 3 minutes）\n\n配置accessibility服务的最大空闲时间，超时将自动释放。默认3分钟。\n\n```python\nd.set_new_command_timeout(300) # change to 5 minutes, unit seconds\n``` -->\n\n### Debug HTTP requests\n打印出代码背后的HTTP请求信息\n\n```python\n>>> d.debug = True\n>>> d.info\n12:32:47.182 $ curl -X POST -d '{\"jsonrpc\": \"2.0\", \"id\": \"b80d3a488580be1f3e9cb3e926175310\", \"method\": \"deviceInfo\", \"params\": {}}' 'http://127.0.0.1:54179/jsonrpc/0'\n12:32:47.225 Response >>>\n{\"jsonrpc\":\"2.0\",\"id\":\"b80d3a488580be1f3e9cb3e926175310\",\"result\":{\"currentPackageName\":\"com.android.mms\",\"displayHeight\":1920,\"displayRotation\":0,\"displaySizeDpX\":360,\"displaySizeDpY\":640,\"displayWidth\":1080,\"productName\"\n:\"odin\",\"screenOn\":true,\"sdkInt\":25,\"naturalOrientation\":true}}\n<<< END\n```\n\n### Implicit wait\n设置元素查找等待时间（默认20s）\n\n```python\nd.implicitly_wait(10.0) # 也可以通过d.settings['wait_timeout'] = 10.0 修改\nd(text=\"Settings\").click() # if Settings button not show in 10s, UiObjectNotFoundError will raised\n\nprint(\"wait timeout\", d.implicitly_wait()) # get default implicit wait\n```\n\nThis function will have influence on `click`, `long_click`, `drag_to`, `get_text`, `set_text`, `clear_text`, etc.\n\n## App management\nThis part showcases how to perform app management\n\n### Install an app\nWe only support installing an APK from a URL\n\n```python\nd.app_install('http://some-domain.com/some.apk')\n```\n\n### Launch an app\n```python\n# 默认的这种方法是先通过atx-agent解析apk包的mainActivity，然后调用am start -n $package/$activity启动\nd.app_start(\"com.example.hello_world\")\n\n# 使用 monkey -p com.example.hello_world -c android.intent.category.LAUNCHER 1 启动\n# 这种方法有个副作用，它自动会将手机的旋转锁定给关掉\nd.app_start(\"com.example.hello_world\", use_monkey=True) # start with package name\n\n# 通过指定main activity的方式启动应用，等价于调用am start -n com.example.hello_world/.MainActivity\nd.app_start(\"com.example.hello_world\", \".MainActivity\")\n```\n\n### Stop an app\n```python\n# equivalent to `am force-stop`, thus you could lose data\nd.app_stop(\"com.example.hello_world\") \n# equivalent to `pm clear`\nd.app_clear('com.example.hello_world')\n```\n\n### Stop all running apps\n```python\n# stop all\nd.app_stop_all()\n# stop all app except for com.examples.demo\nd.app_stop_all(excludes=['com.examples.demo'])\n```\n\n### Get app info\n```python\nd.app_info(\"com.examples.demo\")\n# expect output\n#{\n#    \"mainActivity\": \"com.github.uiautomator.MainActivity\",\n#    \"label\": \"ATX\",\n#    \"versionName\": \"1.1.7\",\n#    \"versionCode\": 1001007,\n#    \"size\":1760809\n#}\n\n# save app icon\nimg = d.app_icon(\"com.examples.demo\")\nimg.save(\"icon.png\")\n```\n\n### List all running apps\n```python\nd.app_list_running()\n# expect output\n# [\"com.xxxx.xxxx\", \"com.github.uiautomator\", \"xxxx\"]\n```\n\n### Wait until app running\n```python\npid = d.app_wait(\"com.example.android\") # 等待应用运行, return pid(int)\nif not pid:\n    print(\"com.example.android is not running\")\nelse:\n    print(\"com.example.android pid is %d\" % pid)\n\nd.app_wait(\"com.example.android\", front=True) # 等待应用前台运行\nd.app_wait(\"com.example.android\", timeout=20.0) # 最长等待时间20s（默认）\n```\n\n> Added in version 1.2.0\n\n### Push and pull files\n* push a file to the device\n\n    ```python\n    # push to a folder\n    d.push(\"foo.txt\", \"/sdcard/\")\n    # push and rename\n    d.push(\"foo.txt\", \"/sdcard/bar.txt\")\n    # push fileobj\n    with open(\"foo.txt\", 'rb') as f:\n        d.push(f, \"/sdcard/\")\n    # push and change file access mode\n    d.push(\"foo.sh\", \"/data/local/tmp/\", mode=0o755)\n    ```\n\n* pull a file from the device\n\n    ```python\n    d.pull(\"/sdcard/tmp.txt\", \"tmp.txt\")\n\n    # FileNotFoundError will raise if the file is not found on the device\n    d.pull(\"/sdcard/some-file-not-exists.txt\", \"tmp.txt\")\n    ```\n\n### Other app operations\n\n```python\n# grant all the permissions\nd.app_auto_grant_permissions(\"io.appium.android.apis\")\n\n# open scheme\nd.open_url(\"appname://appnamehost\")\n# same as\n# adb shell am start -a android.intent.action.VIEW -d \"appname://appnamehost\"\n```\n\n## Basic API Usages\nThis part showcases how to perform common device operations:\n\n### Shell commands\n* Run a short-lived shell command with a timeout protection. (Default timeout 60s)\n\n    Note: timeout support require `atx-agent >=0.3.3`\n\n    `adb_shell` function is deprecated. Use `shell` instead.\n\n    Simple usage\n\n    ```python\n    output, exit_code = d.shell(\"pwd\", timeout=60) # timeout 60s (Default)\n    # output: \"/\\n\", exit_code: 0\n    # Similar to command: adb shell pwd\n\n    # Since `shell` function return type is `namedtuple(\"ShellResponse\", (\"output\", \"exit_code\"))`\n    # so we can do some tricks\n    output = d.shell(\"pwd\").output\n    exit_code = d.shell(\"pwd\").exit_code\n    ```\n\n    The first argument can be list. for example\n\n    ```python\n    output, exit_code = d.shell([\"ls\", \"-l\"])\n    # output: \"/....\", exit_code: 0\n    ```\n\n   This returns a string for stdout merged with stderr.\n   If the command is a blocking command, `shell` will also block until the command is completed or the timeout kicks in. No partial output will be received during the execution of the command. This API is not suitable for long-running commands. The shell command given runs in a similar environment of `adb shell`, which has a Linux permission level of `adb` or `shell` (higher than an app permission).\n\n* Run a long-running shell command (Removed)\n<!-- \n    add stream=True will return `requests.models.Response` object. More info see [requests stream](http://docs.python-requests.org/zh_CN/latest/user/quickstart.html#id5)\n\n    ```python\n    r = d.shell(\"logcat\", stream=True)\n    # r: requests.models.Response\n    deadline = time.time() + 10 # run maxium 10s\n    try:\n        for line in r.iter_lines(): # r.iter_lines(chunk_size=512, decode_unicode=None, delimiter=None)\n            if time.time() > deadline:\n                break\n            print(\"Read:\", line.decode('utf-8'))\n    finally:\n        r.close() # this method must be called\n    ```\n\n    Command will be terminated when `r.close()` called. -->\n    \n### Session\nSession represent an app lifecycle. Can be used to start app, detect app crash.\n\n* Launch and close app\n\n    ```python\n    sess = d.session(\"com.netease.cloudmusic\") # start 网易云音乐\n    sess.close() # 停止网易云音乐\n    sess.restart() # 冷启动网易云音乐\n    ```\n\n* Use python `with` to launch and close app\n\n    ```python\n    with d.session(\"com.netease.cloudmusic\") as sess:\n        sess(text=\"Play\").click()\n    ```\n\n* Attach to the running app\n\n    ```python\n    # launch app if not running, skip launch if already running\n    sess = d.session(\"com.netease.cloudmusic\", attach=True)\n    ```\n\n* Detect app crash\n\n    ```python\n    # When app is still running\n    sess(text=\"Music\").click() # operation goes normal\n\n    # If app crash or quit\n    sess(text=\"Music\").click() # raise SessionBrokenError\n    # other function calls under session will raise SessionBrokenError too\n    ```\n\n    ```python\n    # check if session is ok.\n    # Warning: function name may change in the future\n    sess.running() # True or False\n    ```\n\n\n### Retrieve the device info\n\nGet basic information\n\n```python\nd.info\n```\n\nBelow is a possible output:\n\n```\n{'currentPackageName': 'com.android.systemui',\n 'displayHeight': 1560,\n 'displayRotation': 0,\n 'displaySizeDpX': 360,\n 'displaySizeDpY': 780,\n 'displayWidth': 720,\n 'naturalOrientation': True,\n 'productName': 'ELE-AL00',\n 'screenOn': True,\n 'sdkInt': 29}\n```\n\nGet window size\n\n```python\nprint(d.window_size())\n# device upright output example: (1080, 1920)\n# device horizontal output example: (1920, 1080)\n```\n\nGet current app info. For some android devices, the output could be empty (see *Output example 3*)\n\n```python\nprint(d.app_current())\n# Output example 1: {'activity': '.Client', 'package': 'com.netease.example', 'pid': 23710}\n# Output example 2: {'activity': '.Client', 'package': 'com.netease.example'}\n# Output example 3: {'activity': None, 'package': None}\n```\n\nWait activity\n\n```python\nd.wait_activity(\".ApiDemos\", timeout=10) # default timeout 10.0 seconds\n# Output: true of false\n```\n\nGet device serial number\n\n```python\nprint(d.serial)\n# output example: 74aAEDR428Z9\n```\n\nGet WLAN ip\n\n```python\nprint(d.wlan_ip)\n# output example: 10.0.0.1 or None\n```\n\n\n~~Get detailed device info~~ `d.device_info`\n\ndevice_info\n\n```python\nprint(d.device_info)\n```\n\nBelow is a possible output:\n\n```\n{'arch': 'arm64-v8a',\n 'brand': 'google',\n 'model': 'sdk_gphone64_arm64',\n 'sdk': 34,\n 'serial': 'EMULATOR34X1X19X0',\n 'version': 14}\n```\n\n### Clipboard\nGet of set clipboard content\n\n设置粘贴板内容或获取内容\n\n* clipboard/set_clipboard\n\n    ```python\n    d.clipboard = 'hello-world'\n    # or\n    d.set_clipboard('hello-world', 'label')\n\n    ```\n\nGet clipboard content\n\n>  get clipboard requires IME(com.github.uiautomator/.AdbKeyboard) call `d.set_input_ime()` before using it.\n\n    ```python\n    \n    # get clipboard content\n    print(d.clipboard)\n    ```\n\n### Key Events\n\n* Turn on/off screen\n\n    ```python\n    d.screen_on() # turn on the screen\n    d.screen_off() # turn off the screen\n    ```\n\n* Get current screen status\n\n    ```python\n    d.info.get('screenOn') # require Android >= 4.4\n    ```\n\n* Press hard/soft key\n\n    ```python\n    d.press(\"home\") # press the home key, with key name\n    d.press(\"back\") # press the back key, with key name\n    d.press(0x07, 0x02) # press keycode 0x07('0') with META ALT(0x02)\n    ```\n\n* These key names are currently supported:\n\n    - home\n    - back\n    - left\n    - right\n    - up\n    - down\n    - center\n    - menu\n    - search\n    - enter\n    - delete ( or del)\n    - recent (recent apps)\n    - volume_up\n    - volume_down\n    - volume_mute\n    - camera\n    - power\n\nYou can find all key code definitions at [Android KeyEvnet](https://developer.android.com/reference/android/view/KeyEvent.html)\n\n* Unlock screen\n\n    ```python\n    d.unlock()\n    # This is equivalent to\n    # 1. press(\"power\")\n    # 2. swipe from left-bottom to right-top\n    ```\n\n### Gesture interaction with the device\n* Click on the screen\n\n    ```python\n    d.click(x, y)\n    ```\n\n* Double click\n\n    ```python\n    d.double_click(x, y)\n    d.double_click(x, y, 0.1) # default duration between two click is 0.1s\n    ```\n\n* Long click on the screen\n\n    ```python\n    d.long_click(x, y)\n    d.long_click(x, y, 0.5) # long click 0.5s (default)\n    ```\n\n* Swipe\n\n    ```python\n    d.swipe(sx, sy, ex, ey)\n    d.swipe(sx, sy, ex, ey, 0.5) # swipe for 0.5s(default)\n    ```\n\n* SwipeExt 扩展功能\n\n    ```python\n    d.swipe_ext(\"right\") # 手指右滑，4选1 \"left\", \"right\", \"up\", \"down\"\n    d.swipe_ext(\"right\", scale=0.9) # 默认0.9, 滑动距离为屏幕宽度的90%\n    d.swipe_ext(\"right\", box=(0, 0, 100, 100)) # 在 (0,0) -> (100, 100) 这个区域做滑动\n\n\t# 实践发现上滑或下滑的时候，从中点开始滑动成功率会高一些\n\td.swipe_ext(\"up\", scale=0.8) # 代码会vkk\n\n    # 还可以使用Direction作为参数\n    from uiautomator2 import Direction\n    \n    d.swipe_ext(Direction.FORWARD) # 页面下翻, 等价于 d.swipe_ext(\"up\"), 只是更好理解\n    d.swipe_ext(Direction.BACKWARD) # 页面上翻\n    d.swipe_ext(Direction.HORIZ_FORWARD) # 页面水平右翻\n    d.swipe_ext(Direction.HORIZ_BACKWARD) # 页面水平左翻\n    ```\n\n* Drag\n\n    ```python\n    d.drag(sx, sy, ex, ey)\n    d.drag(sx, sy, ex, ey, 0.5) # swipe for 0.5s(default)\n\n* Swipe points\n\n    ```python\n    # swipe from point(x0, y0) to point(x1, y1) then to point(x2, y2)\n    # time will speed 0.2s bwtween two points\n    d.swipe_points([(x0, y0), (x1, y1), (x2, y2)], 0.2))\n    ```\n\n    多用于九宫格解锁，提前获取到每个点的相对坐标（这里支持百分比），\n    更详细的使用参考这个帖子 [使用u2实现九宫图案解锁](https://testerhome.com/topics/11034)\n\n* Touch and drap (Beta)\n\n    这个接口属于比较底层的原始接口，感觉并不完善，不过凑合能用。注：这个地方并不支持百分比\n\n    ```python\n    d.touch.down(10, 10) # 模拟按下\n    time.sleep(.01) # down 和 move 之间的延迟，自己控制\n    d.touch.move(15, 15) # 模拟移动\n    d.touch.up(10, 10) # 模拟抬起\n    ```\n\nNote: click, swipe, drag operations support percentage position values. Example:\n\n`d.long_click(0.5, 0.5)` means long click center of screen\n\n### Screen-related\n* Retrieve/Set device orientation\n\n    The possible orientations:\n\n    -   `natural` or `n`\n    -   `left` or `l`\n    -   `right` or `r`\n    -   `upsidedown` or `u` (can not be set)\n\n    ```python\n    # retrieve orientation. the output could be \"natural\" or \"left\" or \"right\" or \"upsidedown\"\n    orientation = d.orientation\n\n    # WARNING: not pass testing in my TT-M1\n    # set orientation and freeze rotation.\n    # notes: setting \"upsidedown\" requires Android>=4.3.\n    d.set_orientation('l') # or \"left\"\n    d.set_orientation(\"l\") # or \"left\"\n    d.set_orientation(\"r\") # or \"right\"\n    d.set_orientation(\"n\") # or \"natural\"\n    ```\n\n* Freeze/Un-freeze rotation\n\n    ```python\n    # freeze rotation\n    d.freeze_rotation()\n    # un-freeze rotation\n    d.freeze_rotation(False)\n    ```\n\n* Take screenshot\n\n    ```python\n    # take screenshot and save to a file on the computer, require Android>=4.2.\n    d.screenshot(\"home.jpg\")\n    \n    # get PIL.Image formatted images. Naturally, you need pillow installed first\n    image = d.screenshot() # default format=\"pillow\"\n    image.save(\"home.jpg\") # or home.png. Currently, only png and jpg are supported\n\n    # get opencv formatted images. Naturally, you need numpy and cv2 installed first\n    import cv2\n    image = d.screenshot(format='opencv')\n    cv2.imwrite('home.jpg', image)\n\n    # get raw jpeg data\n    imagebin = d.screenshot(format='raw')\n    open(\"some.jpg\", \"wb\").write(imagebin)\n    ```\n\n* Dump UI hierarchy\n\n    ```python\n    # get the UI hierarchy dump content\n    xml = d.dump_hierarchy()\n\n    # compressed=True: include not import nodes\n    # pretty: format xml\n    # max_depth: limit xml depth, default 50\n    xml = d.dump_hierarchy(compressed=False, pretty=False, max_depth=50)\n    ```\n\n* Open notification or quick settings\n\n    ```python\n    d.open_notification()\n    d.open_quick_settings()\n    ```\n\n### Selector\n\nSelector is a handy mechanism to identify a specific UI object in the current window.\n\n```python\n# Select the object with text 'Clock' and its className is 'android.widget.TextView'\nd(text='Clock', className='android.widget.TextView')\n```\n\nSelector supports below parameters. Refer to [UiSelector Java doc](http://developer.android.com/tools/help/uiautomator/UiSelector.html) for detailed information.\n\n*  `text`, `textContains`, `textMatches`, `textStartsWith`\n*  `className`, `classNameMatches`\n*  `description`, `descriptionContains`, `descriptionMatches`, `descriptionStartsWith`\n*  `checkable`, `checked`, `clickable`, `longClickable`\n*  `scrollable`, `enabled`,`focusable`, `focused`, `selected`\n*  `packageName`, `packageNameMatches`\n*  `resourceId`, `resourceIdMatches`\n*  `index`, `instance`\n\n#### Children and siblings\n\n* children\n\n  ```python\n  # get the children or grandchildren\n  d(className=\"android.widget.ListView\").child(text=\"Bluetooth\")\n  ```\n\n* siblings\n\n  ```python\n  # get siblings\n  d(text=\"Google\").sibling(className=\"android.widget.ImageView\")\n  ```\n\n* children by text or description or instance\n\n  ```python\n  # get the child matching the condition className=\"android.widget.LinearLayout\"\n  # and also its children or grandchildren with text \"Bluetooth\"\n  d(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n   .child_by_text(\"Bluetooth\", className=\"android.widget.LinearLayout\")\n\n  # get children by allowing scroll search\n  d(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n   .child_by_text(\n      \"Bluetooth\",\n      allow_scroll_search=True,\n      className=\"android.widget.LinearLayout\"\n    )\n  ```\n\n  - `child_by_description` is to find children whose grandchildren have\n      the specified description, other parameters being similar to `child_by_text`.\n\n  - `child_by_instance` is to find children with has a child UI element anywhere\n      within its sub hierarchy that is at the instance specified. It is performed\n      on visible views **without scrolling**.\n\n  See below links for detailed information:\n\n  -   [UiScrollable](http://developer.android.com/tools/help/uiautomator/UiScrollable.html), `getChildByDescription`, `getChildByText`, `getChildByInstance`\n  -   [UiCollection](http://developer.android.com/tools/help/uiautomator/UiCollection.html), `getChildByDescription`, `getChildByText`, `getChildByInstance`\n\n  Above methods support chained invoking, e.g. for below hierarchy\n\n  ```xml\n  <node index=\"0\" text=\"\" resource-id=\"android:id/list\" class=\"android.widget.ListView\" ...>\n    <node index=\"0\" text=\"WIRELESS & NETWORKS\" resource-id=\"\" class=\"android.widget.TextView\" .../>\n    <node index=\"1\" text=\"\" resource-id=\"\" class=\"android.widget.LinearLayout\" ...>\n      <node index=\"1\" text=\"\" resource-id=\"\" class=\"android.widget.RelativeLayout\" ...>\n        <node index=\"0\" text=\"Wi‑Fi\" resource-id=\"android:id/title\" class=\"android.widget.TextView\" .../>\n      </node>\n      <node index=\"2\" text=\"ON\" resource-id=\"com.android.settings:id/switchWidget\" class=\"android.widget.Switch\" .../>\n    </node>\n    ...\n  </node>\n  ```\n  ![settings](https://raw.github.com/xiaocong/uiautomator/master/docs/img/settings.png)\n\n  To click the switch widget right to the TextView 'Wi‑Fi', we need to select the switch widgets first. However, according to the UI hierarchy, more than one switch widgets exist and have almost the same properties. Selecting by className will not work. Alternatively, the below selecting strategy would help:\n\n  ```python\n  d(className=\"android.widget.ListView\", resourceId=\"android:id/list\") \\\n    .child_by_text(\"Wi‑Fi\", className=\"android.widget.LinearLayout\") \\\n    .child(className=\"android.widget.Switch\") \\\n    .click()\n  ```\n\n* relative positioning\n\n  Also we can use the relative positioning methods to get the view: `left`, `right`, `top`, `bottom`.\n\n  -   `d(A).left(B)`, selects B on the left side of A.\n  -   `d(A).right(B)`, selects B on the right side of A.\n  -   `d(A).up(B)`, selects B above A.\n  -   `d(A).down(B)`, selects B under A.\n\n  So for above cases, we can alternatively select it with:\n\n  ```python\n  ## select \"switch\" on the right side of \"Wi‑Fi\"\n  d(text=\"Wi‑Fi\").right(className=\"android.widget.Switch\").click()\n  ```\n\n* Multiple instances\n\n  Sometimes the screen may contain multiple views with the same properties, e.g. text, then you will\n  have to use the \"instance\" property in the selector to pick one of qualifying instances, like below:\n\n  ```python\n  d(text=\"Add new\", instance=0)  # which means the first instance with text \"Add new\"\n  ```\n\n  In addition, uiautomator2 provides a list-like API (similar to jQuery):\n\n  ```python\n  # get the count of views with text \"Add new\" on current screen\n  d(text=\"Add new\").count\n\n  # same as count property\n  len(d(text=\"Add new\"))\n\n  # get the instance via index\n  d(text=\"Add new\")[0]\n  d(text=\"Add new\")[1]\n  ...\n\n  # iterator\n  for view in d(text=\"Add new\"):\n      view.info  # ...\n  ```\n\n  **Notes**: when using selectors in a code block that walk through the result list, you must ensure that the UI elements on the screen\n  keep unchanged. Otherwise, when Element-Not-Found error could occur when iterating through the list.\n\n#### Get the selected ui object status and its information\n* Check if the specific UI object exists\n\n    ```python\n    d(text=\"Settings\").exists # True if exists, else False\n    d.exists(text=\"Settings\") # alias of above property.\n\n    # advanced usage\n    d(text=\"Settings\").exists(timeout=3) # wait Settings appear in 3s, same as .wait(3)\n    ```\n\n* Retrieve the info of the specific UI object\n\n    ```python\n    d(text=\"Settings\").info\n    ```\n\n    Below is a possible output:\n\n    ```\n    { u'contentDescription': u'',\n    u'checked': False,\n    u'scrollable': False,\n    u'text': u'Settings',\n    u'packageName': u'com.android.launcher',\n    u'selected': False,\n    u'enabled': True,\n    u'bounds': {u'top': 385,\n                u'right': 360,\n                u'bottom': 585,\n                u'left': 200},\n    u'className': u'android.widget.TextView',\n    u'focused': False,\n    u'focusable': True,\n    u'clickable': True,\n    u'chileCount': 0,\n    u'longClickable': True,\n    u'visibleBounds': {u'top': 385,\n                        u'right': 360,\n                        u'bottom': 585,\n                        u'left': 200},\n    u'checkable': False\n    }\n    ```\n\n* Get/Set/Clear text of an editable field (e.g., EditText widgets)\n\n    ```python\n    d(text=\"Settings\").get_text()  # get widget text\n    d(text=\"Settings\").set_text(\"My text...\")  # set the text\n    d(text=\"Settings\").clear_text()  # clear the text\n    ```\n\n* Get Widget center point\n\n    ```python\n    x, y = d(text=\"Settings\").center()\n    # x, y = d(text=\"Settings\").center(offset=(0, 0)) # left-top x, y\n    ```\n    \n* Take screenshot of widget\n\n    ```python\n    im = d(text=\"Settings\").screenshot()\n    im.save(\"settings.jpg\")\n    ```\n\n#### Perform the click action on the selected UI object\n* Perform click on the specific   object\n\n    ```python\n    # click on the center of the specific ui object\n    d(text=\"Settings\").click()\n    \n    # wait element to appear for at most 10 seconds and then click\n    d(text=\"Settings\").click(timeout=10)\n    \n    # click with offset(x_offset, y_offset)\n    # click_x = x_offset * width + x_left_top\n    # click_y = y_offset * height + y_left_top\n    d(text=\"Settings\").click(offset=(0.5, 0.5)) # Default center\n    d(text=\"Settings\").click(offset=(0, 0)) # click left-top\n    d(text=\"Settings\").click(offset=(1, 1)) # click right-bottom\n\n    # click when exists in 10s, default timeout 0s\n    clicked = d(text='Skip').click_exists(timeout=10.0)\n    \n    # click until element gone, return bool\n    is_gone = d(text=\"Skip\").click_gone(maxretry=10, interval=1.0) # maxretry default 10, interval default 1.0\n    ```\n\n* Perform long click on the specific UI object\n\n    ```python\n    # long click on the center of the specific UI object\n    d(text=\"Settings\").long_click()\n    ```\n\n#### Gesture actions for the specific UI object\n* Drag the UI object towards another point or another UI object \n\n    ```python\n    # notes : drag can not be used for Android<4.3.\n    # drag the UI object to a screen point (x, y), in 0.5 second\n    d(text=\"Settings\").drag_to(x, y, duration=0.5)\n    # drag the UI object to (the center position of) another UI object, in 0.25 second\n    d(text=\"Settings\").drag_to(text=\"Clock\", duration=0.25)\n    ```\n\n* Swipe from the center of the UI object to its edge\n\n    Swipe supports 4 directions:\n\n    - left\n    - right\n    - top\n    - bottom\n\n    ```python\n    d(text=\"Settings\").swipe(\"right\")\n    d(text=\"Settings\").swipe(\"left\", steps=10)\n    d(text=\"Settings\").swipe(\"up\", steps=20) # 1 steps is about 5ms, so 20 steps is about 0.1s\n    d(text=\"Settings\").swipe(\"down\", steps=20)\n    ```\n\n* Two-point gesture from one point to another\n\n  ```python\n  d(text=\"Settings\").gesture((sx1, sy1), (sx2, sy2), (ex1, ey1), (ex2, ey2))\n  ```\n\n* Two-point gesture on the specific UI object\n\n  Supports two gestures:\n  - `In`, from edge to center\n  - `Out`, from center to edge\n\n  ```python\n  # notes : pinch can not be set until Android 4.3.\n  # from edge to center. here is \"In\" not \"in\"\n  d(text=\"Settings\").pinch_in(percent=100, steps=10)\n  # from center to edge\n  d(text=\"Settings\").pinch_out()\n  ```\n\n* Wait until the specific UI appears or disappears\n    \n    ```python\n    # wait until the ui object appears\n    d(text=\"Settings\").wait(timeout=3.0) # return bool\n    # wait until the ui object gone\n    d(text=\"Settings\").wait_gone(timeout=1.0)\n    ```\n\n    The default timeout is 20s. see **global settings** for more details\n\n* Perform fling on the specific ui object(scrollable)\n\n  Possible properties:\n  - `horiz` or `vert`\n  - `forward` or `backward` or `toBeginning` or `toEnd`\n\n  ```python\n  # fling forward(default) vertically(default) \n  d(scrollable=True).fling()\n  # fling forward horizontally\n  d(scrollable=True).fling.horiz.forward()\n  # fling backward vertically\n  d(scrollable=True).fling.vert.backward()\n  # fling to beginning horizontally\n  d(scrollable=True).fling.horiz.toBeginning(max_swipes=1000)\n  # fling to end vertically\n  d(scrollable=True).fling.toEnd()\n  ```\n\n* Perform scroll on the specific ui object(scrollable)\n\n  Possible properties:\n  - `horiz` or `vert`\n  - `forward` or `backward` or `toBeginning` or `toEnd`, or `to`\n\n  ```python\n  # scroll forward(default) vertically(default)\n  d(scrollable=True).scroll(steps=10)\n  # scroll forward horizontally\n  d(scrollable=True).scroll.horiz.forward(steps=100)\n  # scroll backward vertically\n  d(scrollable=True).scroll.vert.backward()\n  # scroll to beginning horizontally\n  d(scrollable=True).scroll.horiz.toBeginning(steps=100, max_swipes=1000)\n  # scroll to end vertically\n  d(scrollable=True).scroll.toEnd()\n  # scroll forward vertically until specific ui object appears\n  d(scrollable=True).scroll.to(text=\"Security\")\n  ```\n\n### WatchContext\n目前的这个watch_context是用threading启动的，每2s检查一次\n目前还只有click这一种触发操作\n\n```python\nwith d.watch_context() as ctx:\n    # 当同时出现 （立即下载 或 立即更新）和 取消 按钮的时候，点击取消\n    ctx.when(\"^立即(下载|更新)\").when(\"取消\").click() \n    ctx.when(\"同意\").click()\n    ctx.when(\"确定\").click()\n    # 上面三行代码是立即执行完的，不会有什么等待\n    \n    ctx.wait_stable() # 开启弹窗监控，并等待界面稳定（两个弹窗检查周期内没有弹窗代表稳定）\n\n    # 使用call函数来触发函数回调\n    # call 支持两个参数，d和el，不区分参数位置，可以不传参，如果传参变量名不能写错\n    # eg: 当有元素匹配仲夏之夜，点击返回按钮\n    ctx.when(\"仲夏之夜\").call(lambda d: d.press(\"back\"))\n    ctx.when(\"确定\").call(lambda el: el.click())\n\n    # 其他操作\n\n# 为了方便也可以使用代码中默认的弹窗监控逻辑\n# 下面是目前内置的默认逻辑，可以加群at群主，增加新的逻辑，或者直接提pr\n    # when(\"继续使用\").click()\n    # when(\"移入管控\").when(\"取消\").click()\n    # when(\"^立即(下载|更新)\").when(\"取消\").click()\n    # when(\"同意\").click()\n    # when(\"^(好的|确定)\").click()\nwith d.watch_context(builtin=True) as ctx:\n    # 在已有的基础上增加\n    ctx.when(\"@tb:id/jview_view\").when('//*[@content-desc=\"图片\"]').click()\n\n    # 其他脚本逻辑\n```\n\n另外一种写法\n\n```python\nctx = d.watch_context()\nctx.when(\"设置\").click()\nctx.wait_stable() # 等待界面不在有弹窗了\n\nctx.close()\n```\n\n### Watcher\n**更推荐用WatchContext** 写法更简洁一些\n\n~~You can register [watchers](http://developer.android.com/tools/help/uiautomator/UiWatcher.html) to perform some actions when a selector does not find a match.~~\n\n2.0.0之前使用的是 uiautomator-jar库中提供的[Watcher]((http://developer.android.com/tools/help/uiautomator/UiWatcher.html)方法，但在实践中发现一旦uiautomator连接失败重启了，所有的watcher配置都是丢失，这肯定是无法接受的。\n\n所以目前采用了后台运行了一个线程的方法(依赖threading库），然后每隔一段时间dump一次hierarchy，匹配到元素之后执行相应的操作。\n\n用法举例\n\n注册监控\n\n```python\n# 常用写法，注册匿名监控\nd.watcher.when(\"安装\").click()\n\n# 注册名为ANR的监控，当出现ANR和Force Close时，点击Force Close\nd.watcher(\"ANR\").when(xpath=\"ANR\").when(\"Force Close\").click()\n\n# 其他回调例子\nd.watcher.when(\"抢红包\").press(\"back\")\nd.watcher.when(\"//*[@text = 'Out of memory']\").call(lambda d: d.shell('am force-stop com.im.qq'))\n\n# 回调说明\ndef click_callback(d: u2.Device):\n    d.xpath(\"确定\").click() # 在回调中调用不会再次触发watcher\n\nd.xpath(\"继续\").click() # 使用d.xpath检查元素的时候，会触发watcher（目前最多触发5次）\n\n# 开始后台监控\nd.watcher.start()\n```\n\n监控操作\n\n```python\n# 移除ANR的监控\nd.watcher.remove(\"ANR\")\n\n# 移除所有的监控\nd.watcher.remove()\n\n# 开始后台监控\nd.watcher.start()\nd.watcher.start(2.0) # 默认监控间隔2.0s\n\n# 强制运行所有监控\nd.watcher.run()\n\n# 停止监控\nd.watcher.stop()\n\n# 停止并移除所有的监控，常用于初始化\nd.watcher.reset()\n```\n\n另外文档还是有很多没有写，推荐直接去看源码[watcher.py](uiautomator2/watcher.py)\n\n### Global settings\n\n```python\nu2.HTTP_TIMEOUT = 60 # 默认值60s, http默认请求超时时间\n```\n\n其他的配置，目前已大部分集中到 `d.settings` 中，根据后期的需求配置可能会有增减。\n\n```python\nprint(d.settings)\n{'operation_delay': (0, 0),\n 'operation_delay_methods': ['click', 'swipe'],\n 'wait_timeout': 20.0}\n\n# 配置点击前延时0.5s，点击后延时1s\nd.settings['operation_delay'] = (.5, 1)\n\n# 修改延迟生效的方法\n# 其中 double_click, long_click 都对应click\nd.settings['operation_delay_methods'] = ['click', 'swipe', 'drag', 'press']\nd.settings['wait_timeout'] = 20.0 # 默认控件等待时间（原生操作，xpath插件的等待时间）\n\nd.settings['max_depth'] = 50 # 默认50，限制dump_hierarchy返回的元素层级\n```\n\n对于随着版本升级，设置过期的配置时，会提示Deprecated，但是不会抛异常。\n\n```bash\n>>> d.settings['click_before_delay'] = 1  \n[W 200514 14:55:59 settings:72] d.settings[click_before_delay] deprecated: Use operation_delay instead\n```\n\n**uiautomator恢复方式设置**\n\n细心的你可能发现，实际上手机安装了两个APK，一个在前台可见（小黄车）。一个包名为`com.github.uiautomator.test`在后台不可见。这两个apk使用同一个证书签名的。\n不可见的应用实际上是一个测试包，包含有所有的测试代码，核心的测试服务也是通过其启动的。\n但是运行的时候，系统却需要那个小黄车一直在运行（在后台运行也可以）。一旦小黄车应用被杀，后台运行的测试服务也很快的会被杀掉。就算什么也不做，应用应用在后台，也会很快被系统回收掉。（这里希望高手指点一下，如何才能不依赖小黄车应用，感觉理论上是可以的，但是目前我还不会）。\n\n~~让小黄车在后台运行有两种方式，一种启动应用后，放到后台（默认）。另外通过`am startservice`启动一个后台服务也行。~~\n\n~~通过 `d.settings[\"uiautomator_runtest_app_background\"] = True` 可以调整该行为。True代表启动应用，False代表启动服务。~~\n\nUiAutomator中的超时设置(隐藏方法)\n\n```python\n>> d.jsonrpc.getConfigurator() \n{'actionAcknowledgmentTimeout': 500,\n 'keyInjectionDelay': 0,\n 'scrollAcknowledgmentTimeout': 200,\n 'waitForIdleTimeout': 0,\n 'waitForSelectorTimeout': 0}\n\n>> d.jsonrpc.setConfigurator({\"waitForIdleTimeout\": 100})\n{'actionAcknowledgmentTimeout': 500,\n 'keyInjectionDelay': 0,\n 'scrollAcknowledgmentTimeout': 200,\n 'waitForIdleTimeout': 100,\n 'waitForSelectorTimeout': 0}\n```\n\n为了防止客户端程序响应超时，`waitForIdleTimeout`和`waitForSelectorTimeout`目前已改为`0`\n\nRefs: [Google uiautomator Configurator](https://developer.android.com/reference/android/support/test/uiautomator/Configurator)\n\n### Input method\n这种方法通常用于不知道控件的情况下的输入。\n\n```python\n# 目前采用从剪贴板粘贴的方式输入\nd.send_keys(\"你好123abcEFG\")\nd.send_keys(\"你好123abcEFG\", clear=True)\n\nd.clear_text() # 清除输入框所有内容\n\nd.send_action() # 根据输入框的需求，自动执行回车、搜索等指令, Added in version 3.1\n# 也可以指定发送的输入法action, eg: d.send_action(\"search\") 支持 go, search, send, next, done, previous\n```\n\n\n\n```python\nprint(d.current_ime()) # 获取当前输入法ID\n\n```\n\n> 更多参考: [IME_ACTION_CODE](https://developer.android.com/reference/android/view/inputmethod/EditorInfo)\n\n### Toast\n```python\nprint(d.last_toast) # get last toast, if not toast return None\nd.clear_toast()\n```\n\n> Fixed in version 3.2.0\n\n### XPath\nJava uiautoamtor中默认是不支持xpath的，所以这里属于扩展的一个功能。速度不是这么的快。\n\nFor example: 其中一个节点的内容\n\n```xml\n<android.widget.TextView\n  index=\"2\"\n  text=\"05:19\"\n  resource-id=\"com.netease.cloudmusic:id/qf\"\n  package=\"com.netease.cloudmusic\"\n  content-desc=\"\"\n  checkable=\"false\" checked=\"false\" clickable=\"false\" enabled=\"true\" focusable=\"false\" focused=\"false\"\n  scrollable=\"false\" long-clickable=\"false\" password=\"false\" selected=\"false\" visible-to-user=\"true\"\n  bounds=\"[957,1602][1020,1636]\" />\n```\n\nxpath定位和使用方法\n\n有些属性的名字有修改需要注意\n\n```\ndescription -> content-desc\nresourceId -> resource-id\n```\n\n常见用法\n\n```python\n# wait exists 10s\nd.xpath(\"//android.widget.TextView\").wait(10.0)\n# find and click\nd.xpath(\"//*[@content-desc='分享']\").click()\n# check exists\nif d.xpath(\"//android.widget.TextView[contains(@text, 'Se')]\").exists:\n    print(\"exists\")\n# get all text-view text, attrib and center point\nfor elem in d.xpath(\"//android.widget.TextView\").all():\n    print(\"Text:\", elem.text)\n    # Dictionary eg: \n    # {'index': '1', 'text': '999+', 'resource-id': 'com.netease.cloudmusic:id/qb', 'package': 'com.netease.cloudmusic', 'content-desc': '', 'checkable': 'false', 'checked': 'false', 'clickable': 'false', 'enabled': 'true', 'focusable': 'false', 'focused': 'false','scrollable': 'false', 'long-clickable': 'false', 'password': 'false', 'selected': 'false', 'visible-to-user': 'true', 'bounds': '[661,1444][718,1478]'}\n    print(\"Attrib:\", elem.attrib)\n    # Coordinate eg: (100, 200)\n    print(\"Position:\", elem.center())\n```\n\n点击查看[其他XPath常见用法](XPATH.md)\n\n### Screenrecord (Deprecated)\n视频录制(废弃)，使用[scrcpy](https://github.com/Genymobile/scrcpy)来代替吧\n\n这里没有使用手机中自带的screenrecord命令，是通过获取手机图片合成视频的方法，所以需要安装一些其他的依赖，如imageio, imageio-ffmpeg, numpy等\n因为有些依赖比较大，推荐使用镜像安装。直接运行下面的命令即可。\n\n```bash\npip3 install -U \"uiautomator2[image]\" -i https://pypi.doubanio.com/simple\n```\n\n使用方法\n\n```\nd.screenrecord('output.mp4')\n\ntime.sleep(10)\n# or do something else\n\nd.screenrecord.stop() # 停止录制后，output.mp4文件才能打开\n```\n\n录制的时候也可以指定fps（当前是20），这个值是率低于minicap输出图片的速度，感觉已经很好了，不建议你修改。\n\n# Enable uiautomator2 logger\n\n```python\nfrom uiautomator2 import enable_pretty_logging\nenable_pretty_logging()\n```\n\nOr\n\n```\nlogger = logging.getLogger(\"uiautomator2\")\n# setup logger\n```\n\n## Stop UiAutomator\nPython程序退出了，UiAutomation就退出了。\n不过也可以通过接口的方法停止服务\n\n```python\nd.stop_uiautomator()\n```\n\n## Google UiAutomator 2.0和1.x的区别\nhttps://www.cnblogs.com/insist8089/p/6898181.html\n\n- 新增接口：UiObject2、Until、By、BySelector\n- 引入方式：2.0中，com.android.uiautomator.core.* 引入方式被废弃。改为android.support.test.uiautomator\n- 构建系统：Maven 和/或 Ant（1.x）；Gradle（2.0）\n- 产生的测试包的形式：从zip /jar（1.x） 到 apk（2.0）\n- 在本地环境以adb命令运行UIAutomator测试，启动方式的差别：   \n  adb shell uiautomator runtest UiTest.jar -c package.name.ClassName（1.x）\n  adb shell am instrument -e class com.example.app.MyTest \n  com.example.app.test/android.support.test.runner.AndroidJUnitRunner（2.0）\n- 能否使用Android服务及接口？ 1.x~不能；2.0~能。\n- og输出？ 使用System.out.print输出流回显至执行端（1.x）； 输出至Logcat（2.0）\n- 执行？测试用例无需继承于任何父类，方法名不限，使用注解 Annotation进行（2.0）;  需要继承UiAutomatorTestCase，测试方法需要以test开头(1.x) \n\n\n## 依赖项目\n- uiautomator jsonrpc server<https://github.com/openatx/android-uiautomator-server/>\n- ~~uiautomator守护程序 <https://github.com/openatx/atx-agent>~~\n\n# Contributors\n- codeskyblue ([@codeskyblue][])\n- Xiaocong He ([@xiaocong][])\n- Yuanyuan Zou ([@yuanyuan][])\n- Qian Jin ([@QianJin2013][])\n- Xu Jingjie ([@xiscoxu][])\n- Xia Mingyuan ([@mingyuan-xia][])\n- Artem Iglikov, Google Inc. ([@artikz][])\n\n[@codeskyblue]: https://github.com/codeskyblue\n[@xiaocong]: https://github.com/xiaocong\n[@yuanyuan]: https://github.com/yuanyuanzou\n[@QianJin2013]: https://github.com/QianJin2013\n[@xiscoxu]: https://github.com/xiscoxu\n[@mingyuan-xia]: https://github.com/mingyuan-xia\n[@artikz]: https://github.com/artikz\n\nOther [contributors](../../graphs/contributors)\n\n## 其他优秀的项目\n- https://github.com/atinfo/awesome-test-automation 所有优秀测试框架的集合，包罗万象\n- [google/mobly](https://github.com/google/mobly) 谷歌内部的测试框架，虽然我不太懂，但是感觉很好用\n- https://github.com/zhangzhao4444/Maxim 基于Uiautomator的monkey\n- http://www.sikulix.com/ 基于图像识别的自动化测试框架，非常的老牌\n- http://airtest.netease.com/ 本项目的前身，后来被网易广州团队接手并继续优化。实现有一个不错的IDE\n\n排名有先后，欢迎补充\n\n# LICENSE\n[MIT](LICENSE)\n"
        },
        {
          "name": "XPATH.md",
          "type": "blob",
          "size": 10.837890625,
          "content": "# uiautomator2 xpath extension\n\n用这个插件前，要先了解一些XPath知识。\n好在网上这方便的资料很多。下面列举一些\n\n- [W3CSchool XPath教程](http://www.w3school.com.cn/xpath/index.asp)\n- [XPath tutorial](http://www.zvon.org/xxl/XPathTutorial/)\n- [阮一峰的XPath学习笔记](http://www.ruanyifeng.com/blog/2009/07/xpath_path_expressions.html)\n- [测试XPath的网站](https://www.freeformatter.com/xpath-tester.html)\n- [XPath tester](https://extendsclass.com/xpath-tester.html)\n\n代码并没有完全测试完，可能还有bug，欢迎跟我反馈。\n\n## 工作原理\n1. 通过uiautomator2库的`dump_hierarchy`接口，获取到当前的UI界面（一个很丰富的XML）。\n2. 然后使用`lxml`库解析，寻找匹配的xpath，然后使用click指令完后操作\n\n>目前发现lxml只支持XPath1.0, 有了解的可以告诉我下怎么支持XPath2.0\n\n**弹窗监控原理**\n\n通过hierarchy可以知道界面上的所有元素信息（包括弹窗和要点击的按钮）。\n假设有 `跳过`, `知道了` 这两个弹窗按钮。需要点击的按钮名是 `播放`\n\n1. 获取到当前界面的XML（通过dump_hierarchy函数）\n2. 检查有没有`跳过`, `知道了` 这两个按钮，如果有就点击，然后回到第一步\n3. 检查有没有`播放`按钮, 有就点击，结束。没有找到在回到第一步，一直执行到查找次数超标。\n\n## 安装方法\n```\npip3 install -U uiautomator2\n```\n\n## 使用方法\n\n### 简单用法\n\n看下面的这个简单的例子了解下如何使用\n\n```python\nimport uiautomator2 as u2\n\ndef main():\n    d = u2.connect()\n    d.app_start(\"com.netease.cloudmusic\", stop=True)\n\n    d.xpath('//*[@text=\"私人FM\"]').click()\n    \n    #\n    # 高级用法(元素定位)\n    #\n\n    # @开头\n    d.xpath('@personal-fm') # 等价于 d.xpath('//*[@resource-id=\"personal-fm\"]')\n    # 多个条件定位, 类似于AND\n    d.xpath('//android.widget.Button').xpath('//*[@text=\"私人FM\"]')\n    \n    d.xpath('//*[@text=\"私人FM\"]').parent() # 定位到父元素\n    d.xpath('//*[@text=\"私人FM\"]').parent(\"@android:list\") # 定位到符合条件的父元素\n\n\t# 包含child的时候，不建议在使用多条件的xpath，因为容易搞混\n\td.xpath('@android:id/list').child('/android.widget.TextView').click()\n\t# 等价于下面这个\n\t# d.xpath('//*[@resource-id=\"android:id/list\"]/android.widget.TextView').click()\n```\n\n>下面的代码为了方便就不写`import`和`main`了，默认存在`d`这个变量\n\n### `XPathSelector`的操作\n\n```python\nsl = d.xpath(\"@com.example:id/home_searchedit\") # sl为XPathSelector对象\n\n# 点击\nsl.click()\nsl.click(timeout=10) # 指定超时时间, 找不到抛出异常 XPathElementNotFoundError\nsl.click_exists() # 存在即点击，返回是否点击成功\nsl.click_exists(timeout=10) # 等待最多10s钟\n\nsl.match() # 不匹配返回None, 否则返回XMLElement\n\n# 等到对应的元素出现，返回XMLElement\n# 默认的等待时间是10s\nel = sl.wait()\nel = sl.wait(timeout=15) # 等待15s, 没有找到会返回None\n\n# 等待元素消失\nsl.wait_gone()\nsl.wait_gone(timeout=15) \n\n# 跟wait用法类似，区别是如果没找到直接抛出 XPathElementNotFoundError 异常\nel = sl.get() \nel = sl.get(timeout=15)\n\n# 修改默认的等待时间为15s\nd.xpath.global_set(\"timeout\", 15)\nd.xpath.implicitly_wait(15) # 与上一行代码等价 (TODO: Removed)\n\nprint(sl.exists) # 返回是否存在 (bool)\nsl.get_last_match() # 获取上次匹配的XMLElement\n\nsl.get_text() # 获取组件名\nsl.set_text(\"\") # 清空输入框\nsl.set_text(\"hello world\") # 输入框输入 hello world\n\n# 遍历所有匹配的元素\nfor el in d.xpath('//android.widget.EditText').all():\n    print(\"rect:\", el.rect) # output tuple: (x, y, width, height)\n    print(\"center:\", el.center())\n    el.click() # click operation\n    print(el.elem) # 输出lxml解析出来的Node\n    print(el.text)\n\n# child操作\nd.xpath('@android:id/list').child('/android.widget.TextView').click()\n等价于 d.xpath('//*[@resource-id=\"android:id/list\"]/android.widget.TextView').all()\n```\n\n高级查找语法\n\n> Added in version 3.1\n\n```python\n# 查找 text=NFC AND id=android:id/item\n(d.xpath(\"NFC\") & d.xpath(\"@android:id/item\")).get()\n\n# 查找 text=NFC OR id=android:id/item\n(d.xpath(\"NFC\") | d.xpath(\"App\") | d.xpath(\"Content\")).get()\n\n# 复杂一点也支持\n((d.xpath(\"NFC\") | d.xpath(\"@android:id/item\")) & d.xpath(\"//android.widget.TextView\")).get()\n\n### `XMLElement`的操作\n\n```python\n# 通过XPathSelector.get() 返回的对象叫做 XMLElement\nel = d.xpath(\"@com.example:id/home_searchedit\").get()\n\nlx, ly, width, height = el.rect # 获取左上角坐标和宽高\nlx, ly, rx, ry = el.bounds # 左上角与右下角的坐标\nx, y = el.center() # get element center position\nx, y = el.offset(0.5, 0.5) # same as center()\n\n# send click\nel.click()\n\n# 打印文本内容\nprint(el.text) \n\n# 获取组内的属性, dict类型\nprint(el.attrib)\n\n# 控件截图 （原理为先整张截图，然后再crop）\nel.screenshot()\n\n# 控件滑动\nel.swipe(\"right\") # left, right, up, down\nel.swipe(\"right\", scale=0.9) # scale默认0.9, 意思是滑动距离为控件宽度的90%, 上滑则为高度的90%\n\nprint(el.info)\n# output example\n{'index': '0',\n 'text': '',\n 'resourceId': 'com.example:id/home_searchedit',\n 'checkable': 'true',\n 'checked': 'true',\n 'clickable': 'true',\n 'enabled': 'true',\n 'focusable': 'false',\n 'focused': 'false',\n 'scrollable': 'false',\n 'longClickable': 'false',\n 'password': 'false',\n 'selected': 'false',\n 'visibleToUser': 'true',\n 'childCount': 0,\n 'className': 'android.widget.Switch',\n 'bounds': {'left': 882, 'top': 279, 'right': 1026, 'bottom': 423},\n 'packageName': 'com.android.settings',\n 'contentDescription': '',\n 'resourceName': 'android:id/switch_widget'}\n```\n\n### 滑动到指定位置\n> `scroll_to` 这个功能属于新增加的，可能不这么完善（比如不能检测是否滑动到底部了）\n\n先看例子\n\n```python\nfrom uiautomator2 import connect_usb, Direction\n\nd = connect_usb()\n\nd.scroll_to(\"下单\")\nd.scroll_to(\"下单\", Direction.FORWARD) # 默认就是向下滑动，除此之外还可以BACKWARD, HORIZ_FORWARD(水平), HORIZ_BACKWARD(水平反向)\nd.scroll_to(\"下单\", Direction.HORIZ_FORWARD, max_swipes=5)\n\n# 除此之外还可以在指定在某个元素内滑动\nd.xpath('@com.taobao.taobao:id/dx_root').scroll(Direction.HORIZ_FORWARD)\nd.xpath('@com.taobao.taobao:id/dx_root').scroll_to(\"下单\", Direction.HORIZ_FORWARD)\n```\n\n**比较完整的例子**\n\n```python\nimport uiautomator2 as u2\nfrom uiautomator2 import Direction\n\ndef main():\n    d = u2.connect()\n    d.app_start(\"com.netease.cloudmusic\", stop=True)\n\n    # steps\n    d.xpath(\"//*[@text='私人FM']/../android.widget.ImageView\").click()\n    d.xpath(\"下一首\").click()\n\n    # 监控弹窗2s钟，时间可能大于2s\n    d.xpath.sleep_watch(2)\n    d.xpath(\"转到上一层级\").click()\n    \n    d.xpath(\"转到上一层级\").click(watch=False) # click without trigger watch\n    d.xpath(\"转到上一层级\").click(timeout=5.0) # wait timeout 5s\n\n    d.xpath.watch_background() # 开启后台监控模式，默认每4s检查一次\n    d.xpath.watch_background(interval=2.0) # 每2s检查一次\n    d.xpath.watch_stop() # 停止监控\n\n    for el in d.xpath('//android.widget.EditText').all():\n        print(\"rect:\", el.rect) # output tuple: (left_x, top_y, width, height)\n        print(\"bounds:\", el.bounds) # output tuple: （left, top, right, bottom)\n        print(\"center:\", el.center())\n        el.click() # click operation\n        print(el.elem) # 输出lxml解析出来的Node\n    \n    # 滑动\n    el = d.xpath('@com.taobao.taobao:id/fl_banner_container').get()\n\n    # 从右滑到左\n    el.swipe(Direction.HORIZ_FORWARD) \n    el.swipe(Direction.LEFT) # 从右滑到左\n\n    # 从下滑到上\n    el.swipe(Direction.FORWARD)\n    el.swipe(Direction.UP)\n\n    el.swipe(\"right\", scale=0.9) # scale 默认0.9, 滑动距离为控件宽度的80%,\b 滑动的中心点与控件中心点一致\n    el.swipe(\"up\", scale=0.5) # 滑动距离为控件高度的50%\n\n    # scroll同swipe不一样，scroll返回bool值，表示是否还有新元素出现\n    el.scroll(Direction.FORWARD) # 向下滑动\n    el.scroll(Direction.BACKWARD) # 向上滑动\n    el.scroll(Direction.HORIZ_FORWARD) # 水平向前\n    el.scroll(Direction.HORIZ_BACKWARD) # 水平向后\n\n    if el.scroll(\"forward\"):\n        print(\"还可以继续滚动\")\n```\n\n### `PageSource`对象\n> Added in version 3.1\n\n这个属于高级用法，但是这个对象也最初级，几乎所有的函数都依赖它。\n\n什么是PageSource？\n\nPageSource是从d.dump_hierarchy()的返回值初始化来的。主要用于通过XPATH完成元素的查找工作。\n\n用法？\n\n```python\nsource = d.xpath.get_page_source()\n\n# find_elements 是核心方法\nelements = source.find_elements('//android.widget.TextView') # List[XMLElement]\nfor el in elements:\n    print(el.text)\n\n# 获取坐标后点击\nx, y = elements[0].center()\nd.click(x, y)\n\n# 多种条件的查询写法\nes1 = source.find_elements('//android.widget.TextView')\nes2 = source.find_elements(XPath('@android:id/content').joinpath(\"//*\"))\n\n# 寻找是TextView但不属于id=android:id/content下的节点\nels = set(es1) - set(es2)\n\n# 寻找是TextView同事属于id=android:id/content下的节点\nels = set(es1) & set(es2)\n```\n\n## XPath规则\n为了写起脚本来更快，我们自定义了一些简化的xpath规则\n\n**规则1**\n\n`//` 开头代表原生xpath\n\n**规则2**\n\n`@` 开头代表resourceId定位\n\n`@smartisanos:id/right_container` 相当于 \n`//*[@resource-id=\"smartisanos:id/right_container\"]`\n\n**规则3**\n\n`^`开头代表正则表达式\n\n`^.*道了` 相当于 `//*[re:match(text(), '^.*道了')]`\n\n**规则4**\n\n> 灵感来自SQL like\n\n`知道%` 匹配`知道`开始的文本， 相当于 `//*[starts-with(text(), '知道')]`\n\n`%知道` 匹配`知道`结束的文本，相当于 `//*[ends-with(text(), '知道')]`\n\n`%知道%` 匹配包含`知道`的文本，相当于 `//*[contains(text(), '知道')]`\n\n**规则 Last**\n\n会匹配text 和 description字段\n\n如 `搜索` 相当于 XPath `//*[@text=\"搜索\" or @content-desc=\"搜索\" or @resource-id=\"搜索\"]`\n\n## 特殊说明\n- 有时className中包含有`$@#&`字符，这个字符在XML中是不合法的，所以全部替换成了`.`\n\n## XPath的一些高级用法\n```\n# 所有元素\n//*\n\n# resource-id包含login字符\n//*[contains(@resource-id, 'login')]\n\n# 按钮包含账号或帐号\n//android.widget.Button[contains(@text, '账号') or contains(@text, '帐号')]\n\n# 所有ImageView中的第二个\n(//android.widget.ImageView)[2]\n\n# 所有ImageView中的最后一个\n(//android.widget.ImageView)[last()]\n\n# className包含ImageView\n//*[contains(name(), \"ImageView\")]\n```\n\n## 一些有用的网站\n- [XPath playground](https://scrapinghub.github.io/xpath-playground/)\n- [XPath的一些高级用法-简书](https://www.jianshu.com/p/4fef4142b33f)\n- [XPath Quicksheet](https://devhints.io/xpath)\n\n如有其他资料，欢迎提[Issues](https://github.com/openatx/uiautomator2/issues/new)补充\n"
        },
        {
          "name": "_archived",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mobile_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "poetry.toml",
          "type": "blob",
          "size": 0.044921875,
          "content": "[virtualenvs]\ncreate = true\nin-project = true\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.9296875,
          "content": "[tool.poetry]\nname = \"uiautomator2\"\nversion = \"3.2.0\"\ndescription = \"uiautomator for android device\"\nhomepage = \"https://github.com/openatx/uiautomator2\"\nauthors = [\"codeskyblue <codeskyblue@gmail.com>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\ninclude = [\"*/assets/*\"]\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\nrequests = \"*\"\nlxml = \"*\"\nadbutils = \"^2.5.0\"\nretry = \">=0,<1\"\nPillow = \"*\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^8.1.1\"\nisort = \"^5.13.2\"\npytest-cov = \"^4.1.0\"\nipython = \"*\"\ncoverage = \"^7.6.0\"\n\n[tool.poetry.scripts]\nuiautomator2 = \"uiautomator2.__main__:main\"\n\n[tool.poetry-dynamic-versioning] # 根据tag来动态配置版本号\nenable = true\npattern = \"^((?P<epoch>\\\\d+)!)?(?P<base>\\\\d+(\\\\.\\\\d+)*)\"\n\n[tool.poetry-dynamic-versioning.substitution]\nfiles = [\"uiautomator2/version.py\"]\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\", \"poetry-dynamic-versioning>=1.0.0,<2.0.0\"]\nbuild-backend = \"poetry_dynamic_versioning.backend\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "uiautomator2",
          "type": "tree",
          "content": null
        },
        {
          "name": "uibox",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}