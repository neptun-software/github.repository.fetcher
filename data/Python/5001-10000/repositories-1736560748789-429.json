{
  "metadata": {
    "timestamp": 1736560748789,
    "page": 429,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "robinhood/faust",
      "stars": 6756,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.982421875,
          "content": "[run]\nbranch = 1\ncover_pylib = 0\ninclude=*faust/*\nomit = t.*\n\n[report]\nomit =\n    */python?.?/*\n    */site-packages/*\n    */pypy/*\n\n    # tested by functional tests\n    */faust/cli/agents.py\n    */faust/cli/livecheck.py\n    */faust/cli/model.py\n    */faust/cli/models.py\n    */faust/cli/reset.py\n    */faust/cli/send.py\n    */faust/cli/tables.py\n    */faust/cli/worker.py\n    */faust/web/apps/*\n    */faust/assignor/*\n    */faust/transport/drivers/memory.py\n    */faust/transport/drivers/confluent.py\n\n    # tested by integration\n    */faust/tables/recovery.py\n\n    # not needed\n    */faust/utils/functional.py\n    */faust/utils/kafka/*\n    */faust/utils/iso8601.py\n    */faust/utils/platforms.py\n    */faust/utils/tracing.py\n    */faust/types/*\n    */faust/__main__.py\n\n    # deprecated\n    */faust/app/_attached.py\nexclude_lines =\n    # Have to re-enable the standard pragma\n    if\\ typing\\.TYPE_CHECKING\\:\n\n    pragma: no cover\n\n    if sys.platform == 'win32':\n\n    if DEBUG:\n\n    \\@abc\\.abstractmethod\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2001953125,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\nend_of_line = lf\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.458984375,
          "content": ".DS_Store\n*.pyc\n*$py.class\n*~\n.sw*\n.*.sw*\ndist/\n*.egg-info\n*.egg\n*.egg/\n*.eggs/\nbuild/\n.build/\n_build/\npip-log.txt\n.directory\nerl_crash.dump\n*.db\nDocumentation/\n.tox/\n.ropeproject/\n.project\n.pydevproject\n.idea/\n.coverage\ncelery/tests/cover/\n.ve*\ncover/\n.vagrant/\n.cache/\n.hypothesis/\n.mypy_cache/\n.pytest_cache/\nhtmlcov/\n*-cache*\n.checkpoint\n.python-version\n.pyre/\n.dmypy.json\n*.so\nfaust/_cython/*.c\nfaust/transport/_cython/*.c\n\n# virtualenvs\n/env\n/venv\n\n# ide\n.vscode/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.162109375,
          "content": "repos:\n-   repo: local\n    hooks:\n    - id: flake8\n      name: flake8\n      entry: flake8\n      language: system\n      files: .*\\.py$\n      python_version: python3.6\n"
        },
        {
          "name": ".pyup.yml",
          "type": "blob",
          "size": 0.091796875,
          "content": "# Label PRs with `deps-update` label\nlabel_prs: deps-update\n\npin: False\n\nschedule: every week\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.3515625,
          "content": "language: python\nsudo: required\ncache: pip\n\nenv:\n  global:\n  - PYTHONUNBUFFERED=yes\n\nstages:\n    - lint\n    - test\n    - cython\n\nmatrix:\n  include:\n  - python: 3.8.0\n    env: TOXENV=flake8\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.8.0\n    env: TOXENV=typecheck\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.8.0\n    env: TOXENV=apicheck\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.8.0\n    env: TOXENV=configcheck\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.8.0\n    env: TOXENV=docstyle\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.8.0\n    env: TOXENV=bandit\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.8.0\n    env: TOXENV=spell USE_ENCHANT=y\n    os: linux\n    dist: xenial\n    stage: lint\n  - python: 3.6.1\n    env: TOXENV=3.6 IDENT=\"3.6.1\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: trusty\n    stage: test\n  - python: 3.6.2\n    env: TOXENV=3.6 IDENT=\"3.6.2\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: trusty\n    stage: test\n  - python: 3.6.3\n    env: TOXENV=3.6 IDENT=\"3.6.3\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.6.4\n    env: TOXENV=3.6 IDENT=\"3.6.4\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.6.5\n    env: TOXENV=3.6 IDENT=\"3.6.5\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.6.6\n    env: TOXENV=3.6 IDENT=\"3.6.6\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.6.7\n    env: TOXENV=3.6 IDENT=\"3.6.7\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.6.8\n    env: TOXENV=3.6 IDENT=\"3.6.8\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.6.9\n    env: TOXENV=3.6 IDENT=\"3.6.9\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.0\n    env: TOXENV=3.7 IDENT=\"3.7.0\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.1\n    env: TOXENV=3.7 IDENT=\"3.7.1\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.2\n    env: TOXENV=3.7 IDENT=\"3.7.2\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.3\n    env: TOXENV=3.7 IDENT=\"3.7.3\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.4\n    env: TOXENV=3.7 IDENT=\"3.7.4\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.5\n    env: TOXENV=3.7 IDENT=\"3.7.5\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.8.0\n    env: TOXENV=3.8 IDENT=\"3.8.0\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.8.1\n    env: TOXENV=3.8 IDENT=\"3.8.0\" RUN_SUITE=y NO_CYTHON=y\n    os: linux\n    dist: xenial\n    stage: test\n  - python: 3.7.5\n    env: TOXENV=3.7 RUN_SUITE=y NO_CYTHON=y\n    os: windows\n    stage: test\n    language: sh\n    before_install:\n        - choco install python --version=3.7.5\n        - export PATH=\"/c/Python37:/c/Python37/Scripts:$PATH\"\n        - python -m pip install --upgrade pip wheel\n  - python: 3.8.0\n    env: TOXENV=3.8 IDENT= RUN_SUITE=y USE_CYTHON=y NO_CYTHON=\n    os: linux\n    dist: xenial\n    stage: cython\n\nbefore_install:\n    - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" && \"$USE_ENCHANT\" == \"y\" ]]; then sudo apt-get install -y enchant libenchant-dev; fi\n\ninstall:\n- |\n  if [[ \"$USE_CYTHON\" == \"y\" ]]; then\n    python -m pip install -U cython tox\n  else\n    python -m pip install -U tox\n  fi\nafter_success:\n- |\n  if [[ ! -z \"$IDENT\" ]]; then\n      .tox/$TOXENV/bin/coverage xml\n      .tox/$TOXENV/bin/codecov -e IDENT\n  fi;\nscript: tox -v -- -v\nnotifications:\n  slack:\n    secure: rEeKSgjI9TLh1HCFHvM2sTNquvlFj4AhyZqObUn/Rt5mYZpUb0G9HyQZDksm+8sumWt44WDrGIxRiFh1RQW3Onww1+/DBIqORKEZNv63njC4lMjNvk97l5iVHFXqPiVcaIRS3TXgVpNkbc+Diwc0DGgDVu5X2dhe9ClRlV259F2ymt9XkaPIV7qTacbGhH1aX/2suvA023AkXCo2FX2rRNp4yReoHgLdLc7rYz5cc9IruE4QP2AzaD2pnYmX8Fs9UmXPPEh0DxTQ8/FLCg9H2OJBBE/REATjx3QHZMGKiDbDgCPu2MY6gCR/El+eu+eOl2fJ1j2Z/4iOz4vnKHMm4Qamln1WgfGWRp0w30lVvri8pYVn6lSkHC2sIJ4wg26csDCF2WHLusd9bnmYHB/IyY4oFy/wBptvZd5qRkivgsNeD/eOwuVAjryN2qx0kRE6iKACsch3+NAEb1d5kNwebLQ78ETkmwpQOpBwHOngtYo1xbi93VE1DaWJjMO5tStE7dDAou7RQwaApe+H9f6PBu5tuVQgQvhLhlg9laFia+z7lkyb7kwnJ5QG3OimVM9I2fxVtxMPYgnZ/XbPR++9LcwyMRJh9pmYuVzyyHxQZTT8AgHjrPpoRc9meKgWYUhh4AAG/4egviJd0i/DCtV9pOSyOzsXJp2a5B08vA9uueg=\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 6.515625,
          "content": "Creators\n========\n\n+---------------------+---------------------------------------+\n| Name                | Email                                 |\n+=====================+=======================================+\n| Ask Solem           | <ask@robinhood.com>                   |\n+---------------------+---------------------------------------+\n| Vineet Goel         | <vineet@robinhood.com>                |\n+---------------------+---------------------------------------+\n\n.. note::\n\n    You must not solicit for free support from email addresses on this list.\n    Ask the community for help in the Slack channel, or ask\n    a question on Stack Overflow.\n\nCommitters\n==========\n\n+---------------------+---------------------------------------+\n| Arpan Shah          | <arpan@robinhood.com>                 |\n+---------------------+---------------------------------------+\n| Sanyam Satia        | <sanyam@robinhood.com>                |\n+---------------------+---------------------------------------+\n\nContributors become committers by stepping up to the task.\nThey can 1) triage issues, help others on the issue tracker, code reviews,\nSlack or mailing lists, or 2) make modifications to documentation and code.\nThe award for doing this in any significant capacity for one year or longer,\nis to be added to the list of maintainers above.\n\n\nContributors\n============\n\n+---------------------+---------------------------------------+\n| Allison Wang        | <allison.wang@robinhood.com>          |\n+---------------------+---------------------------------------+\n| Jamshed Vesuna      | <jamshed@robinhood.com>               |\n+---------------------+---------------------------------------+\n| Jaren Glover        | <jaren@robinhood.com>                 |\n+---------------------+---------------------------------------+\n| Jerry Li            | <jerry.li@robinhood.com>              |\n+---------------------+---------------------------------------+\n| Prithvi Narasimhan  | <narasimhan.prithvi@gmail.com>        |\n+---------------------+---------------------------------------+\n| Ruby Wang           | <ruby.wang@robinhood.com>             |\n+---------------------+---------------------------------------+\n| Shrey Kumar Shahi   | <shrey@robinhood.com>                 |\n+---------------------+---------------------------------------+\n| Mika Eloranta       | <mel@aiven.io>                        |\n+---------------------+---------------------------------------+\n| Omar Rayward        | <orayward@yahoo.com>                  |\n+---------------------+---------------------------------------+\n| Alexander Oberegger | <alexander.oberegger@smaxtec.com>     |\n+---------------------+---------------------------------------+\n| Matthew Stump       | <mstump@vorstella.com>                |\n+---------------------+---------------------------------------+\n| Martin Maillard     | <self@martin-maillard.com>            |\n+---------------------+---------------------------------------+\n| Mattias Karlsson    | <mattias@hemmabolan.se>               |\n+---------------------+---------------------------------------+\n| Matthias Wutte      | <matthias.wutte@smaxtec.com>          |\n+---------------------+---------------------------------------+\n| Thibault Serot      | <thibserot@gmail.com>                 |\n+---------------------+---------------------------------------+\n| Ryan Whitten        | <ryan@pixability.com>                 |\n+---------------------+---------------------------------------+\n| Nimi Wariboko Jr    | <nimiwaribokoj@gmail.com>             |\n+---------------------+---------------------------------------+\n| Chris Seto          | <chriskseto@gmail.com>                |\n+---------------------+---------------------------------------+\n| Amit Ripshtos       | <amit.r@qspark.prod>                  |\n+---------------------+---------------------------------------+\n|  Miha Troha         | <miha.troha@comcom.si>                |\n+---------------------+---------------------------------------+\n|  Perk Lim           | <perk@robinhood.com>                  |\n+---------------------+---------------------------------------+\n| Julien Surloppe     | <julien@surloppe.fr>                  |\n+---------------------+---------------------------------------+\n| Bob Haddleton       | <bob.haddleton@nokia.com>             |\n+---------------------+---------------------------------------+\n| Nimish Telang       | <nimish@telang.net>                   |\n+---------------------+---------------------------------------+\n| Cesar Pantoja       | <cesarpantoj@gmail.com>               |\n+---------------------+---------------------------------------+\n| Tomasz Nguyen       | <me@swistofon.pl>                     |\n+---------------------+---------------------------------------+\n| Artak Papikyan      | <artakp@patriot1tech.com>             |\n+---------------------+---------------------------------------+\n| Andrei Tuppitcyn    | <andrew.tupitsin@gmail.com>           |\n+---------------------+---------------------------------------+\n| Vikram Patki        | <vpatki@wayfair.com>                  |\n+---------------------+---------------------------------------+\n| Victor Miroshnikov  | <me@vmiroshnikov.com>                 |\n+---------------------+---------------------------------------+\n| Tobias Rauter       | <tobias.rauter@smaxtec.com>           |\n+---------------------+---------------------------------------+\n| DhruvaPatil98       | <dhruva.patil@galepartners.com>       |\n+---------------------+---------------------------------------+\n| Leandro Vonwerra    | <leandro.vonwerra@spoud.io>           |\n+---------------------+---------------------------------------+\n| Ignacio Peluffo     | <ipeluffo@gmail.com>                  |\n+---------------------+---------------------------------------+\n| Sergej Herbert      | <herbert.sergej@gmail.com>            |\n+---------------------+---------------------------------------+\n| Marcos Schroh       | <schrohm@gmail.com>                   |\n+---------------------+---------------------------------------+\n| Denis Kovalev       | <aikikode@gmail.com>                  |\n+---------------------+---------------------------------------+\n| Jonathan A. Booth   | <jonathan.booth@mastery.net>          |\n+---------------------+---------------------------------------+\n| Eran Kampf          | <ekampf@users.noreply.github.com>     |\n+---------------------+---------------------------------------+\n| Wjatscheslaw Kewlin | <Wjatscheslaw.Kewlin@d-fine.de>       |\n+---------------------+---------------------------------------+\n| Ramkumar M          | <ramchiyan1093@gmail.com>             |\n+---------------------+---------------------------------------+\n"
        },
        {
          "name": "CODE_OF_CONDUCT.rst",
          "type": "blob",
          "size": 0.025390625,
          "content": ".github/CODE_OF_CONDUCT.md"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 25.0556640625,
          "content": ".. _contributing:\n\n==============\n Contributing\n==============\n\nWelcome!\n\nThis document is fairly extensive and you aren't really expected\nto study this in detail for small contributions;\n\n    The most important rule is that contributing must be easy\n    and that the community is friendly and not nitpicking on details,\n    such as coding style.\n\nIf you're reporting a bug you should read the Reporting bugs section\nbelow to ensure that your bug report contains enough information\nto successfully diagnose the issue, and if you're contributing code\nyou should try to mimic the conventions you see surrounding the code\nyou're working on, but in the end all patches will be cleaned up by\nthe person merging the changes so don't worry too much.\n\n.. contents::\n    :local:\n\n.. _community-code-of-conduct:\n\nCode of Conduct\n===============\n\nEveryone interacting in the project's code bases, issue trackers, chat rooms,\nand mailing lists is expected to follow the Faust Code of Conduct.\n\nAs contributors and maintainers of these projects, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in these projects a harassment-free\nexperience for everyone, regardless of level of experience, gender,\ngender identity and expression, sexual orientation, disability,\npersonal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical\n  or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct. By adopting this Code of Conduct,\nproject maintainers commit themselves to fairly and consistently applying\nthese principles to every aspect of managing this project. Project maintainers\nwho do not follow or enforce the Code of Conduct may be permanently removed from\nthe project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the Contributor Covenant,\nversion 1.2.0 available at http://contributor-covenant.org/version/1/2/0/.\n\n.. _reporting-bugs:\n\nReporting Bugs\n==============\n\n.. _vulnsec:\n\nSecurity\n--------\n\nYou must never report security related issues, vulnerabilities or bugs\nincluding sensitive information to the bug tracker, or elsewhere in public.\nInstead sensitive bugs must be sent by email to ``security@celeryproject.org``.\n\nIf you'd like to submit the information encrypted our PGP key is::\n\n    -----BEGIN PGP PUBLIC KEY BLOCK-----\n    Version: GnuPG v1.4.15 (Darwin)\n\n    mQENBFJpWDkBCADFIc9/Fpgse4owLNvsTC7GYfnJL19XO0hnL99sPx+DPbfr+cSE\n    9wiU+Wp2TfUX7pCLEGrODiEP6ZCZbgtiPgId+JYvMxpP6GXbjiIlHRw1EQNH8RlX\n    cVxy3rQfVv8PGGiJuyBBjxzvETHW25htVAZ5TI1+CkxmuyyEYqgZN2fNd0wEU19D\n    +c10G1gSECbCQTCbacLSzdpngAt1Gkrc96r7wGHBBSvDaGDD2pFSkVuTLMbIRrVp\n    lnKOPMsUijiip2EMr2DvfuXiUIUvaqInTPNWkDynLoh69ib5xC19CSVLONjkKBsr\n    Pe+qAY29liBatatpXsydY7GIUzyBT3MzgMJlABEBAAG0MUNlbGVyeSBTZWN1cml0\n    eSBUZWFtIDxzZWN1cml0eUBjZWxlcnlwcm9qZWN0Lm9yZz6JATgEEwECACIFAlJp\n    WDkCGwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEOArFOUDCicIw1IH/26f\n    CViDC7/P13jr+srRdjAsWvQztia9HmTlY8cUnbmkR9w6b6j3F2ayw8VhkyFWgYEJ\n    wtPBv8mHKADiVSFARS+0yGsfCkia5wDSQuIv6XqRlIrXUyqJbmF4NUFTyCZYoh+C\n    ZiQpN9xGhFPr5QDlMx2izWg1rvWlG1jY2Es1v/xED3AeCOB1eUGvRe/uJHKjGv7J\n    rj0pFcptZX+WDF22AN235WYwgJM6TrNfSu8sv8vNAQOVnsKcgsqhuwomSGsOfMQj\n    LFzIn95MKBBU1G5wOs7JtwiV9jefGqJGBO2FAvOVbvPdK/saSnB+7K36dQcIHqms\n    5hU4Xj0RIJiod5idlRC5AQ0EUmlYOQEIAJs8OwHMkrdcvy9kk2HBVbdqhgAREMKy\n    gmphDp7prRL9FqSY/dKpCbG0u82zyJypdb7QiaQ5pfPzPpQcd2dIcohkkh7G3E+e\n    hS2L9AXHpwR26/PzMBXyr2iNnNc4vTksHvGVDxzFnRpka6vbI/hrrZmYNYh9EAiv\n    uhE54b3/XhXwFgHjZXb9i8hgJ3nsO0pRwvUAM1bRGMbvf8e9F+kqgV0yWYNnh6QL\n    4Vpl1+epqp2RKPHyNQftbQyrAHXT9kQF9pPlx013MKYaFTADscuAp4T3dy7xmiwS\n    crqMbZLzfrxfFOsNxTUGE5vmJCcm+mybAtRo4aV6ACohAO9NevMx8pUAEQEAAYkB\n    HwQYAQIACQUCUmlYOQIbDAAKCRDgKxTlAwonCNFbB/9esir/f7TufE+isNqErzR/\n    aZKZo2WzZR9c75kbqo6J6DYuUHe6xI0OZ2qZ60iABDEZAiNXGulysFLCiPdatQ8x\n    8zt3DF9BMkEck54ZvAjpNSern6zfZb1jPYWZq3TKxlTs/GuCgBAuV4i5vDTZ7xK/\n    aF+OFY5zN7ciZHkqLgMiTZ+RhqRcK6FhVBP/Y7d9NlBOcDBTxxE1ZO1ute6n7guJ\n    ciw4hfoRk8qNN19szZuq3UU64zpkM2sBsIFM9tGF2FADRxiOaOWZHmIyVZriPFqW\n    RUwjSjs7jBVNq0Vy4fCu/5+e+XLOUBOoqtM5W7ELt0t1w9tXebtPEetV86in8fU2\n    =0chn\n    -----END PGP PUBLIC KEY BLOCK-----\n\nOther bugs\n----------\n\nBugs can always be described to the `slack-channel`_, but the best\nway to report an issue and to ensure a timely response is to use the\nissue tracker.\n\n1) **Create a GitHub account**.\n\nYou need to `create a GitHub account`_ to be able to create new issues\nand participate in the discussion.\n\n.. _`create a GitHub account`: https://github.com/signup/free\n\n2) **Determine if your bug is really a bug**.\n\nYou shouldn't file a bug if you're requesting support. For that you can use\nthe `slack-channel`_.\n\n3) **Make sure your bug hasn't already been reported**.\n\nSearch through the appropriate Issue tracker. If a bug like yours was found,\ncheck if you have new information that could be reported to help\nthe developers fix the bug.\n\n4) **Check if you're using the latest version**.\n\nA bug could be fixed by some other improvements and fixes - it might not have an\nexisting report in the bug tracker. Make sure you're using the latest release\nof Faust.\n\n5) **Collect information about the bug**.\n\nTo have the best chance of having a bug fixed, we need to be able to easily\nreproduce the conditions that caused it. Most of the time this information\nwill be from a Python traceback message, though some bugs might be in design,\nspelling or other errors on the website/docs/code.\n\n    A) If the error is from a Python traceback, include it in the bug report.\n\n    B) We also need to know what platform you're running (Windows, macOS, Linux,\n       etc.), the version of your Python interpreter, and the version of Faust,\n       and related packages that you were running when the bug occurred.\n\n    C) If you're reporting a race condition or a deadlock, tracebacks can be\n       hard to get or might not be that useful. Try to inspect the process to\n       get more diagnostic data. Some ideas:\n\n       * Collect tracing data using `strace`_(Linux),\n         ``dtruss`` (macOS), and ``ktrace`` (BSD),\n         `ltrace`_, and `lsof`_.\n\n    D) Include the output from the ``faust report`` command:\n\n        .. sourcecode:: console\n\n            $ faust -A proj report\n\n        This will also include your configuration settings and it try to\n        remove values for keys known to be sensitive, but make sure you also\n        verify the information before submitting so that it doesn't contain\n        confidential information like API tokens and authentication\n        credentials.\n\n6) **Submit the bug**.\n\nBy default `GitHub`_ will email you to let you know when new comments have\nbeen made on your bug. In the event you've turned this feature off, you\nshould check back on occasion to ensure you don't miss any questions a\ndeveloper trying to fix the bug might ask.\n\n.. _`GitHub`: https://github.com\n.. _`strace`: https://en.wikipedia.org/wiki/Strace\n.. _`ltrace`: https://en.wikipedia.org/wiki/Ltrace\n.. _`lsof`: https://en.wikipedia.org/wiki/Lsof\n\n.. _issue-trackers:\n\nIssue Trackers\n--------------\n\nBugs for a package in the Faust ecosystem should be reported to the relevant\nissue tracker.\n\n* ``Faust`` - https://github.com/robinhood/faust/issues\n* ``Mode`` - https://github.com/ask/mode/issues\n\nIf you're unsure of the origin of the bug you can ask the\n`slack-channel`_, or just use the Faust issue tracker.\n\nContributors guide to the code base\n===================================\n\nThere's a separate section for internal details,\nincluding details about the code base and a style guide.\n\nRead ``developers-guide`` for more!\n\n.. _versions:\n\nVersions\n========\n\nVersion numbers consists of a major version, minor version and a release number.\nFaust uses the versioning semantics described by SemVer: http://semver.org.\n\nStable releases are published at PyPI\nwhile development releases are only available in the GitHub git repository as tags.\nAll version tags starts with “v”, so version 0.8.0 is the tag v0.8.0.\n\n.. _git-branches:\n\nBranches\n========\n\nCurrent active version branches:\n\n* dev (which git calls \"master\") (https://github.com/robinhood/faust/tree/master)\n* 1.0 (https://github.com/robinhood/faust/tree/1.0)\n\nYou can see the state of any branch by looking at the Changelog:\n\n    https://github.com/robinhood/faust/blob/master/Changelog.rst\n\nIf the branch is in active development the topmost version info should\ncontain meta-data like:\n\n.. sourcecode:: restructuredtext\n\n    2.4.0\n    ======\n    :release-date: TBA\n    :status: DEVELOPMENT\n    :branch: dev (git calls this master)\n\nThe ``status`` field can be one of:\n\n* ``PLANNING``\n\n    The branch is currently experimental and in the planning stage.\n\n* ``DEVELOPMENT``\n\n    The branch is in active development, but the test suite should\n    be passing and the product should be working and possible for users to test.\n\n* ``FROZEN``\n\n    The branch is frozen, and no more features will be accepted.\n    When a branch is frozen the focus is on testing the version as much\n    as possible before it is released.\n\ndev branch\n----------\n\nThe dev branch (called \"master\" by git), is where development of the next\nversion happens.\n\nMaintenance branches\n--------------------\n\nMaintenance branches are named after the version -- for example,\nthe maintenance branch for the 2.2.x series is named ``2.2``.\n\nPreviously these were named ``releaseXX-maint``.\n\nThe versions we currently maintain is:\n\n* 1.0\n\n  This is the current series.\n\nArchived branches\n-----------------\n\nArchived branches are kept for preserving history only,\nand theoretically someone could provide patches for these if they depend\non a series that's no longer officially supported.\n\nAn archived version is named ``X.Y-archived``.\n\nOur currently archived branches are:\n\nWe don't currently have any archived branches.\n\nFeature branches\n----------------\n\nMajor new features are worked on in dedicated branches.\nThere's no strict naming requirement for these branches.\n\nFeature branches are removed once they've been merged into a release branch.\n\nTags\n====\n\n- Tags are used exclusively for tagging releases. A release tag is\n  named with the format ``vX.Y.Z`` -- for example ``v2.3.1``.\n\n- Experimental releases contain an additional identifier ``vX.Y.Z-id`` --\n  for example ``v3.0.0-rc1``.\n\n- Experimental tags may be removed after the official release.\n\n.. _contributing-changes:\n\nWorking on Features & Patches\n=============================\n\n.. note::\n\n    Contributing to Faust should be as simple as possible,\n    so none of these steps should be considered mandatory.\n\n    You can even send in patches by email if that's your preferred\n    work method. We won't like you any less, any contribution you make\n    is always appreciated!\n\n    However following these steps may make maintainers life easier,\n    and may mean that your changes will be accepted sooner.\n\nForking and setting up the repository\n-------------------------------------\n\nCreate your fork\n~~~~~~~~~~~~~~~~\n\nFirst you need to fork the Faust repository, a good introduction to this\nis in the GitHub Guide: `Fork a Repo`_.\n\nAfter you have cloned the repository you should checkout your copy\nto a directory on your machine:\n\n.. sourcecode:: console\n\n    $ git clone git@github.com:username/faust.git\n\nWhen the repository is cloned enter the directory to set up easy access\nto upstream changes:\n\n.. sourcecode:: console\n\n    $ cd faust\n    $ git remote add upstream https://github.com/robinhood/faust.git\n    $ git fetch upstream\n\nIf you need to pull in new changes from upstream you should\nalways use the ``--rebase`` option to ``git pull``:\n\n.. sourcecode:: console\n\n    $ git pull --rebase upstream master\n\nWith this option you don't clutter the history with merging\ncommit notes. See `Rebasing merge commits in git`_.\nIf you want to learn more about rebasing see the `Rebase`_\nsection in the GitHub guides.\n\nStart Developing\n~~~~~~~~~~~~~~~~\n\nTo start developing Faust you should install the requirements\nand setup the development environment so that Python uses the Faust\ndevelopment directory.\n\nTo do so run:\n\n.. sourcecode:: console\n\n    $ make develop\n\n\nIf you want to install requirements manually you should at least install\nthe git pre-commit hooks (the ``make develop`` command above automatically\nruns this as well):\n\n.. sourcecode:: console\n\n    $ make hooks\n\n\nIf you also want to install C extensions, including the RocksDB bindings\nthen you can use `make cdevelop` instead of `make develop`:\n\n.. sourcecode:: console\n\n    $ make cdevelop\n\n.. note::\n\n    If you need to work on a different branch than the\n    one git calls ``master``, you can\n    fetch and checkout a remote branch like this:\n\n    .. sourcecode:: console\n\n        $ git checkout --track -b 2.0-devel origin/2.0-devel\n\n.. _`Fork a Repo`: http://help.github.com/fork-a-repo/\n.. _`Rebasing merge commits in git`:\n    http://notes.envato.com/developers/rebasing-merge-commits-in-git/\n.. _`Rebase`: http://help.github.com/rebase/\n\n.. _contributing-testing:\n\nRunning the test suite\n----------------------\n\nTo run the Faust test suite you need to install a few dependencies.\nA complete list of the dependencies needed are located in\n``requirements/test.txt``.\n\nBoth the stable and the development version have testing related\ndependencies, so install these:\n\n.. sourcecode:: console\n\n    $ pip install -U -r requirements/test.txt\n    $ pip install -U -r requirements/default.txt\n\nAfter installing the dependencies required, you can now execute\nthe test suite by calling ``py.test <pytest``:\n\n.. sourcecode:: console\n\n    $ py.test\n\nThis will run the unit tests, functional tests and doc example tests,\nbut not integration tests or stress tests.\n\nSome useful options to ``py.test`` are:\n\n* ``-x``\n\n    Stop running the tests at the first test that fails.\n\n* ``-s``\n\n    Don't capture output\n\n* ``-v``\n\n    Run with verbose output.\n\nIf you want to run the tests for a single test file only\nyou can do so like this:\n\n.. sourcecode:: console\n\n    $ py.test t/unit/test_app.py\n\n.. _contributing-pull-requests:\n\nCreating pull requests\n----------------------\n\nWhen your feature/bugfix is complete you may want to submit\na pull requests so that it can be reviewed by the maintainers.\n\nCreating pull requests is easy, and also let you track the progress\nof your contribution. Read the `Pull Requests`_ section in the GitHub\nGuide to learn how this is done.\n\nYou can also attach pull requests to existing issues by following\nthe steps outlined here: http://bit.ly/koJoso\n\n.. _`Pull Requests`: http://help.github.com/send-pull-requests/\n\n.. _contributing-tox:\n\nRunning the tests on all supported Python versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere's a ``tox`` configuration file in the top directory of the\ndistribution.\n\nTo run the tests for all supported Python versions simply execute:\n\n.. sourcecode:: console\n\n    $ tox\n\nUse the ``tox -e`` option if you only want to test specific Python versions:\n\n.. sourcecode:: console\n\n    $ tox -e 2.7\n\nBuilding the documentation\n--------------------------\n\nTo build the documentation you need to install the dependencies\nlisted in ``requirements/docs.txt``:\n\n.. sourcecode:: console\n\n    $ pip install -U -r requirements/docs.txt\n\nAfter these dependencies are installed you should be able to\nbuild the docs by running:\n\n.. sourcecode:: console\n\n    $ cd docs\n    $ rm -rf _build\n    $ make html\n\nMake sure there are no errors or warnings in the build output.\nAfter building succeeds the documentation is available at ``_build/html``.\n\n.. _contributing-verify:\n\nVerifying your contribution\n---------------------------\n\nTo use these tools you need to install a few dependencies. These dependencies\ncan be found in ``requirements/dist.txt``.\n\nInstalling the dependencies:\n\n.. sourcecode:: console\n\n    $ pip install -U -r requirements/dist.txt\n\npyflakes & PEP-8\n~~~~~~~~~~~~~~~~\n\nTo ensure that your changes conform to ``8`` and to run pyflakes\nexecute:\n\n.. sourcecode:: console\n\n    $ make flakecheck\n\nTo not return a negative exit code when this command fails use\nthe ``flakes`` target instead:\n\n.. sourcecode:: console\n\n    $ make flakes\n\nAPI reference\n~~~~~~~~~~~~~\n\nTo make sure that all modules have a corresponding section in the API\nreference please execute:\n\n.. sourcecode:: console\n\n    $ make apicheck\n    $ make indexcheck\n\nIf files are missing you can add them by copying an existing reference file.\n\nIf the module is internal it should be part of the internal reference\nlocated in ``docs/internals/reference/``. If the module is public\nit should be located in ``docs/reference/``.\n\nFor example if reference is missing for the module ``faust.worker.awesome``\nand this module is considered part of the public API, use the following steps:\n\n\nUse an existing file as a template:\n\n.. sourcecode:: console\n\n    $ cd docs/reference/\n    $ cp faust.schedules.rst faust.worker.awesome.rst\n\nEdit the file using your favorite editor:\n\n.. sourcecode:: console\n\n    $ vim faust.worker.awesome.rst\n\n        # change every occurrence of ``faust.schedules`` to\n        # ``faust.worker.awesome``\n\n\nEdit the index using your favorite editor:\n\n.. sourcecode:: console\n\n    $ vim index.rst\n\n        # Add ``faust.worker.awesome`` to the index.\n\n\nCommit your changes:\n\n.. sourcecode:: console\n\n    # Add the file to git\n    $ git add faust.worker.awesome.rst\n    $ git add index.rst\n    $ git commit faust.worker.awesome.rst index.rst \\\n        -m \"Adds reference for faust.worker.awesome\"\n\nConfiguration Reference\n-----------------------\n\nTo make sure that all settings have a corresponding section in the\nconfiguration reference, please execute:\n\n.. sourcecode:: console\n\n    $ make configcheck\n\nIf settings are missing from there an error is produced, and you can proceed\nby documenting the settings in ``docs/userguide/settings.rst``.\n\n.. _coding-style:\n\nCoding Style\n============\n\nYou should probably be able to pick up the coding style\nfrom surrounding code, but it is a good idea to be aware of the\nfollowing conventions.\n\n* We use static types and the ``mypy`` type checker to verify them.\n\n  Python code must import these static types when using them, so to\n  keep static types lightweight we define interfaces for\n  classes in ``faust/types/``.\n\n  For example for the ``fauts.App`` class, there is a corresponding\n  ``faust.types.app.AppT``; for ``faust.Channel`` there is a\n  ``faust.types.channels.ChannelT`` and similarly for most other classes\n  in the library.\n\n  We suffer some duplication because of this, but it keeps static typing imports\n  fast and reduces the need for recursive imports.\n\n  In some cases recursive imports still happen, in that case you can \"trick\"\n  the type checker into importing it, while regular Python does not::\n\n    if typing.TYPE_CHECKING:\n        from faust.app import App\n    else:\n        class App: ...  # noqa\n\n* All Python code must follow the ``8`` guidelines.\n\n``pep8`` is a utility you can use to verify that your code\nis following the conventions.\n\n* Docstrings must follow the ``257`` conventions, and use the following\n  style.\n\n    Do this:\n\n    .. sourcecode:: python\n\n        def method(self, arg: str) -> None:\n            \"\"\"Short description.\n\n            More details.\n\n            \"\"\"\n\n    or:\n\n    .. sourcecode:: python\n\n        def method(self, arg: str) -> None:\n            \"\"\"Short description.\"\"\"\n\n\n    but not this:\n\n    .. sourcecode:: python\n\n        def method(self, arg: str) -> None:\n            \"\"\"\n            Short description.\n            \"\"\"\n\n* Lines shouldn't exceed 78 columns.\n\n  You can enforce this in ``vim`` by setting the ``textwidth`` option:\n\n  .. sourcecode:: vim\n\n        set textwidth=78\n\n  If adhering to this limit makes the code less readable, you have one more\n  character to go on. This means 78 is a soft limit, and 79 is the hard\n  limit :)\n\n* Import order\n\n    * Python standard library\n    * Third-party packages.\n    * Other modules from the current package.\n\n    or in case of code using Django:\n\n    * Python standard library (`import xxx`)\n    * Third-party packages.\n    * Django packages.\n    * Other modules from the current package.\n\n    Within these sections the imports should be sorted by module name.\n\n    Example:\n\n    .. sourcecode:: python\n\n        import threading\n        import time\n        from collections import deque\n        from Queue import Queue, Empty\n\n        from .platforms import Pidfile\n        from .five import zip_longest, items, range\n        from .utils.time import maybe_timedelta\n\n* Wild-card imports must not be used (`from xxx import *`).\n\n.. _feature-with-extras:\n\nContributing features requiring additional libraries\n====================================================\n\nSome features like a new result backend may require additional libraries\nthat the user must install.\n\nWe use setuptools `extra_requires` for this, and all new optional features\nthat require third-party libraries must be added.\n\n1) Add a new requirements file in `requirements/extras`\n\n    For the RocksDB store this is\n    ``requirements/extras/rocksdb.txt``, and the file looks like this:\n\n    .. sourcecode:: text\n\n        python-rocksdb\n\n    These are pip requirement files so you can have version specifiers and\n    multiple packages are separated by newline. A more complex example could\n    be:\n\n    .. sourcecode:: text\n\n        # python-rocksdb 2.0 breaks Foo\n        python-rocksdb>=1.0,<2.0\n        thrift\n\n2) Modify ``setup.py``\n\n    After the requirements file is added you need to add it as an option\n    to ``setup.py`` in the ``EXTENSIONS`` section::\n\n        EXTENSIONS = {\n            'debug',\n            'fast',\n            'rocksdb',\n            'uvloop',\n        }\n\n\n3) Document the new feature in ``docs/includes/installation.txt``\n\n    You must add your feature to the list in the bundles section\n    of ``docs/includes/installation.txt``.\n\n    After you've made changes to this file you need to render\n    the distro ``README`` file:\n\n    .. sourcecode:: console\n\n        $ pip install -U requirements/dist.txt\n        $ make readme\n\n\n.. _contact_information:\n\nContacts\n========\n\nThis is a list of people that can be contacted for questions\nregarding the official git repositories, PyPI packages\nRead the Docs pages.\n\nIf the issue isn't an emergency then it's better\nto `report an issue`_.\n\n\nCommitters\n----------\n\nAsk Solem\n~~~~~~~~~\n\n:github: https://github.com/ask\n:twitter: http://twitter.com/#!/asksol\n\nVineet Goel\n~~~~~~~~~~~\n\n:github: https://github.com/vineet-rh\n:twitter: https://twitter.com/#!/vineetik\n\nArpan Shah\n~~~~~~~~~~\n\n:github: https://github.com/arpanshah29\n\n.. _packages:\n\nPackages\n========\n\n``Faust``\n---------\n\n:git: https://github.com/robinhood/faust\n:CI: http://travis-ci.org/#!/robinhood/faust\n:Windows-CI: https://ci.appveyor.com/project/ask/faust\n:PyPI: ``faust``\n:docs: https://faust.readthedocs.io\n\n``Mode``\n--------\n\n:git: https://github.com/ask/mode\n:CI: http://travis-ci.org/#!/ask/mode\n:Windows-CI: https://ci.appveyor.com/project/ask/mode\n:PyPI: ``Mode``\n:docs: http://mode.readthedocs.io/\n\n.. _release-procedure:\n\nRelease Procedure\n=================\n\nUpdating the version number\n---------------------------\n\nThe version number must be updated two places:\n\n    * ``faust/__init__.py``\n    * ``docs/include/introduction.txt``\n\nAfter you have changed these files you must render\nthe ``README`` files. There's a script to convert sphinx syntax\nto generic reStructured Text syntax, and the make target `readme`\ndoes this for you:\n\n.. sourcecode:: console\n\n    $ make readme\n\nNow commit the changes:\n\n.. sourcecode:: console\n\n    $ git commit -a -m \"Bumps version to X.Y.Z\"\n\nand make a new version tag:\n\n.. sourcecode:: console\n\n    $ git tag vX.Y.Z\n    $ git push --tags\n\nReleasing\n---------\n\nCommands to make a new public stable release:\n\n.. sourcecode:: console\n\n    $ make distcheck  # checks pep8, autodoc index, runs tests and more\n    $ make dist  # NOTE: Runs git clean -xdf and removes files not in the repo.\n    $ python setup.py sdist upload --sign --identity='Celery Security Team'\n    $ python setup.py bdist_wheel upload --sign --identity='Celery Security Team'\n\nIf this is a new release series then you also need to do the\nfollowing:\n\n* Go to the Read The Docs management interface at:\n    http://readthedocs.org/projects/faust/?fromdocs=faust\n\n* Enter \"Edit project\"\n\n    Change default branch to the branch of this series, for example, use\n    the ``1.0`` branch for the 1.0 series.\n\n* Also add the previous version under the \"versions\" tab.\n\n.. _`slack-channel`: http://faust.readthedocs.io/en/latest/getting-started/resources.html#slack-channel\n\n.. _`report an issue`: http://faust.readthedocs.io/en/latest/contributing.html#reporting-bugs\n\n"
        },
        {
          "name": "Changelog.rst",
          "type": "blob",
          "size": 0.748046875,
          "content": ".. _changelog:\n\n==============================\n Changes\n==============================\n\nThis document contain change notes for bugfix releases in\nthe Faust 1.10 series. If you're looking for previous releases,\nplease visit the :ref:`history` section.\n\n.. _version-1.11.0:\n\n1.11.0\n======\n:release-date: TBA\n:release-by: TBA\n\n- **Requirements**\n\n  + Now depends on :ref:`Mode 4.3.2 <mode:version-4.3.2>`\n\n  + Now depends on :pypi:`robinhood-aiokafka` 1.1.5\n\n- **Tables**: Table HTTP router now forwards HTTP status code\n  in responses.\n\n    Contributed by Wjatscheslaw Kewlin :github_user:`slawak`.\n\n- **Tables**: Windowed tables may now have asynchronous ``on_window_close``\n  callbacks.\n\n    Contributed by Ramkumar M (:github_user:`billaram`).\n\n.. _version-1.10.4:\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.431640625,
          "content": "Copyright (c) 2017-2020, Robinhood Markets, Inc.\nAll rights reserved.\n\nFaust is licensed under The BSD License (3 Clause, also known as\nthe new BSD license).  The license is an OSI approved Open Source\nlicense and is GPL-compatible(1).\n\nThe license text can also be found here:\nhttp://www.opensource.org/licenses/BSD-3-Clause\n\nLicense\n=======\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of Robinhood Markets, Inc. nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Robinhood Markets, Inc. OR CONTRIBUTORS\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nDocumentation License\n=====================\n\nThe documentation portion of Faust (the rendered contents of the\n\"docs\" directory of a software distribution or checkout) is supplied\nunder the \"Creative Commons Attribution-ShareAlike 4.0\nInternational\" (CC BY-SA 4.0) License as described by\nhttp://creativecommons.org/licenses/by-sa/4.0/\n\nFootnotes\n=========\n(1) A GPL-compatible license makes it possible to\n    combine Faust with other software that is released\n    under the GPL, it does not mean that we're distributing\n    Faust under the GPL license.  The BSD license, unlike the GPL,\n    let you distribute a modified version without making your\n    changes open source.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.6669921875,
          "content": "include AUTHORS.rst\ninclude CODE_OF_CONDUCT.rst\ninclude Changelog.rst\ninclude LICENSE\ninclude README.rst\ninclude MANIFEST.in\ninclude setup.cfg\ninclude setup.py\nrecursive-include artwork *\nrecursive-include docs *\nrecursive-include extra/*\nrecursive-include examples *\nrecursive-include faust *.py *.html *.typed *.pyx\nrecursive-include requirements *.txt *.rst\nrecursive-include t *.py *.sh *.txt\nrecursive-include t/stress/reports/assets LICENSE *.py *.js *.css *.scss *.map *.eot *.svg *.ttf *.woff *.woff2\nrecursive-include t/stress/reports/templates *.html\n\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\nrecursive-exclude * .*.sw[a-z]\nrecursive-exclude * *.c *.so\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.6943359375,
          "content": "PROJ ?= faust\nPGPIDENT? = \"Celery Security Team\"\nPYTHON ?= python\nPYTEST ?= py.test\nPIP ?= pip\nGIT ?= git\nTOX ?= tox\nNOSETESTS ?= nosetests\nICONV ?= iconv\nFLAKE8 ?= flake8\nPYDOCSTYLE ?= pydocstyle\nMYPY ?= mypy\nSPHINX2RST ?= sphinx2rst\nBUMPVERSION ?= bumpversion\nVULTURE ?= vulture\nVULTURE_MIN_CONFIDENCE ?= 100\nPRE_COMMIT ?= pre-commit\nDMYPY ?= dmypy\nBANDIT ?= bandit\nRENDER_CONFIGREF ?= extra/tools/render_configuration_reference.py\nCONFIGREF_TARGET ?= docs/includes/settingref.txt\nTESTDIR ?= t\nEXAMPLESDIR ?= examples\nSPHINX_DIR ?= docs/\nSPHINX_BUILDDIR ?= \"${SPHINX_DIR}/_build\"\nREADME ?= README.rst\nREADME_SRC ?= \"docs/templates/readme.txt\"\nCONTRIBUTING ?= CONTRIBUTING.rst\nCONTRIBUTING_SRC ?= \"docs/contributing.rst\"\nCOC ?= .github/CODE_OF_CONDUCT.md\nCOC_SRC ?= \"docs/includes/code-of-conduct.txt\"\nSPHINX_HTMLDIR ?= \"${SPHINX_BUILDDIR}/html\"\nDOCUMENTATION ?= Documentation\n\nall: help\n\nhelp:\n\t@echo \"docs                 - Build documentation.\"\n\t@echo \"livedocs             - Start documentation live web server.\"\n\t@echo \"develop              - Start contributing to Faust\"\n\t@echo \"  develop-hooks      - Install Git commit hooks (required)\"\n\t@echo \"  reqs\"              - Install requirements\n\t@echo \"  setup-develop      - Run setup.py develop\"\n\t@echo \"cdevelop             - Like develop but installs C extensions\"\n\t@echo \"  reqs-rocksdb       -   Install python-rocksdb (require rocksdb)\"\n\t@echo \"  reqs-fast          -   Install C optimizations\"\n\t@echo \"  reqs-uvloop        -   Install uvloop extension\"\n\t@echo \"test-all             - Run tests for all supported python versions.\"\n\t@echo \"distcheck ---------- - Check distribution for problems.\"\n\t@echo \"  test               - Run unittests using current python.\"\n\t@echo \"  lint ------------  - Check codebase for problems.\"\n\t@echo \"    apicheck         - Check API reference coverage.\"\n\t@echo \"    configcheck      - Check configuration reference coverage.\"\n\t@echo \"    readmecheck      - Check README.rst encoding.\"\n\t@echo \"    contribcheck     - Check CONTRIBUTING.rst encoding\"\n\t@echo \"    flakes --------  - Check code for syntax and style errors.\"\n\t@echo \"      flakecheck     - Run flake8 on the source code.\"\n\t@echo \"    typecheck        - Run the mypy type checker\"\n\t@echo \"    pep257check      - Run pep257 on the source code.\"\n\t@echo \"    vulture          - Run vulture to find unused code.\"\n\t@echo \"readme               - Regenerate README.rst file.\"\n\t@echo \"contrib              - Regenerate CONTRIBUTING.rst file\"\n\t@echo \"configref            - Regenerate docs/userguide/settings.rst\"\n\t@echo \"coc                  - Regenerate CODE_OF_CONDUCT.rst file\"\n\t@echo \"clean-dist --------- - Clean all distribution build artifacts.\"\n\t@echo \"  clean-git-force    - Remove all uncommitted files.\"\n\t@echo \"  clean ------------ - Non-destructive clean\"\n\t@echo \"    clean-pyc        - Remove .pyc/__pycache__ files\"\n\t@echo \"    clean-docs       - Remove documentation build artifacts.\"\n\t@echo \"    clean-build      - Remove setup artifacts.\"\n\t@echo \"bump                 - Bump patch version number.\"\n\t@echo \"bump-minor           - Bump minor version number.\"\n\t@echo \"bump-major           - Bump major version number.\"\n\t@echo \"hooks\"               - Update pre-commit hooks\n\t@echo \"release              - Make PyPI release.\"\n\nclean: clean-docs clean-pyc clean-build\n\nclean-dist: clean clean-git-force\n\nbump:\n\t$(BUMPVERSION) patch\n\nbump-minor:\n\t$(BUMPVERSION) minor\n\nbump-major:\n\t$(BUMPVERSION) major\n\nrelease:\n\t$(PYTHON) setup.py register sdist bdist_wheel upload --sign --identity=\"$(PGPIDENT)\"\n\n. PHONY: Documentation\nDocumentation:\n\t$(PIP) install -r requirements/docs.txt\n\t(cd \"$(SPHINX_DIR)\"; $(MAKE) html)\n\tmv \"$(SPHINX_HTMLDIR)\" $(DOCUMENTATION)\n\n. PHONY: docs\ndocs: Documentation\n\n. PHONY: livedocs\nlivedocs:\n\t$(PIP) install -r requirements/docs.txt\n\t$(PIP) install -r requirements/dist.txt\n\t(cd \"$(SPHINX_DIR)\"; $(MAKE) livehtml)\n\nclean-docs:\n\t-rm -rf \"$(SPHINX_BUILDDIR)\"\n\nlint: flakecheck apicheck configcheck readmecheck pep257check vulture\n\napicheck:\n\t(cd \"$(SPHINX_DIR)\"; $(MAKE) apicheck)\n\nconfigcheck:\n\t(cd \"$(SPHINX_DIR)\"; $(MAKE) configcheck)\n\nspell:\n\t(cd \"$(SPHINX_DIR)\"; $(MAKE) spell)\n\nflakecheck:\n\t$(FLAKE8) \"$(PROJ)\" \"$(TESTDIR)\" examples/\n\ndocstylecheck:\n\t$(PYDOCSTYLE) --match-dir '(?!types|assignor)' \"$(PROJ)\"\n\nvulture:\n\t$(VULTURE) \"$(PROJ)\" \"$(TESTDIR)\" \"$(EXAMPLESDIR)\" \\\n\t\t--min-confidence=\"$(VULTURE_MIN_CONFIDENCE)\"\n\nflakediag:\n\t-$(MAKE) flakecheck\n\nflakes: flakediag\n\nclean-readme:\n\t-rm -f $(README)\n\nreadmecheck:\n\t$(ICONV) -f ascii -t ascii $(README) >/dev/null\n\n$(README):\n\t$(SPHINX2RST) \"$(README_SRC)\" --ascii > $@\n\nreadme: clean-readme $(README) readmecheck\n\nclean-contrib:\n\t-rm -f \"$(CONTRIBUTING)\"\n\n$(CONTRIBUTING):\n\t$(SPHINX2RST) \"$(CONTRIBUTING_SRC)\" > $@\n\ncontrib: clean-contrib $(CONTRIBUTING)\n\nconfigref:\n\t$(PYTHON) $(RENDER_CONFIGREF) > $(CONFIGREF_TARGET)\n\nclean-coc:\n\t-rm -f \"$(COC)\"\n\n$(COC):\n\t$(SPHINX2RST) \"$(COC_SRC)\" > $@\n\ncoc: clean-coc $(COC)\n\nclean-pyc:\n\t-find . -type f -a \\( -name \"*.pyc\" -o -name \"*$$py.class\" \\) | xargs rm\n\t-find . -type d -name \"__pycache__\" | xargs rm -r\n\nremovepyc: clean-pyc\n\nclean-build:\n\trm -rf build/ dist/ .eggs/ *.egg-info/ .tox/ .coverage cover/\n\nclean-git:\n\t$(GIT) clean -xdn\n\nclean-git-force:\n\t$(GIT) clean -xdf\n\ntest-all: clean-pyc\n\t$(TOX)\n\ntest:\n\t$(PYTHON) setup.py test\n\nbuild:\n\t$(PYTHON) setup.py sdist bdist_wheel\n\ndistcheck: lint test clean\n\ndist: readme contrib clean-dist build\n\ntypecheck:\n\t$(MYPY) -p $(PROJ)\n\n.PHONY: requirements\nrequirements:\n\t$(PIP) install --upgrade pip;\\\n\tfor f in `ls requirements/`; do if [[ $$f =~ \\.txt$$ ]]; then $(PIP) install -r requirements/$$f; fi; done\n\n.PHONY: clean-requirements\nclean-requirements:\n\tpip freeze | xargs pip uninstall -y\n\t$(MAKE) requirements\n\n.PHONY:\nhooks:\n\t$(PRE_COMMIT) install\n\n.PHONY:\ncdevelop: develop reqs-ext\n\n.PHONY:\ndevelop: reqs develop-hooks setup-develop\n\n.PHONY:\ndevelop-hooks: hooks\n\n.PHONY:\nreqs: reqs-default reqs-test reqs-dist reqs-docs reqs-ci reqs-debug\n\n.PHONY:\nreqs-default:\n\t$(PIP) install -U -r requirements/default.txt\n\n.PHONY:\nreqs-test:\n\t$(PIP) install -U -r requirements/test.txt\n\n.PHONY:\nreqs-docs:\n\t$(PIP) install -U -r requirements/docs.txt\n\n.PHONY:\nreqs-dist:\n\t$(PIP) install -U -r requirements/dist.txt\n\n.PHONY:\nreqs-ci:\n\t$(PIP) install -U -r requirements/ci.txt\n\n.PHONY:\nreqs-debug:\n\t$(PIP) install -U -r requirements/extras/debug.txt\n\n.PHONY:\nreqs-ext: reqs-rocksdb reqs-fast reqs-uvloop\n\n.PHONY:\nreqs-rocksdb:\n\t$(PIP) install --no-cache -U -r requirements/extras/rocksdb.txt\n\n.PHONY:\nreqs-fast:\n\t$(PIP) install --no-cache -U -r requirements/extras/fast.txt\n\n.PHONY:\nreqs-uvloop:\n\t$(PIP) install --no-cache -U -r requirements/extras/uvloop.txt\n\n.PHONY:\nsetup-develop:\n\t$(PYTHON) setup.py develop\n\n.PHONY:\nupdate-bandit:\n\t$(BANDIT) -o extra/bandit/baseline.json -f json -c extra/bandit/config.yaml -r \"$(PROJ)\"\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 18.5234375,
          "content": ".. XXX Need to change this image to readthedocs before release\n\n.. image:: https://raw.githubusercontent.com/robinhood/faust/8ee5e209322d9edf5bdb79b992ef986be2de4bb4/artwork/banner-alt1.png\n\n===========================\n Deprecation Notice\n===========================\n\nThis library has been deprecated and no longer managed or supported. The current active community project can be found at https://github.com/faust-streaming/faust\n\n===========================\n Python Stream Processing\n===========================\n\n|build-status| |coverage| |license| |wheel| |pyversion| |pyimp|\n\n:Version: 1.10.4\n:Web: http://faust.readthedocs.io/\n:Download: http://pypi.org/project/faust\n:Source: http://github.com/robinhood/faust\n:Keywords: distributed, stream, async, processing, data, queue, state management\n\n\n.. sourcecode:: python\n\n    # Python Streams\n    # Forever scalable event processing & in-memory durable K/V store;\n    # as a library w/ asyncio & static typing.\n    import faust\n\n**Faust** is a stream processing library, porting the ideas from\n`Kafka Streams`_ to Python.\n\nIt is used at `Robinhood`_ to build high performance distributed systems\nand real-time data pipelines that process billions of events every day.\n\nFaust provides both *stream processing* and *event processing*,\nsharing similarity with tools such as\n`Kafka Streams`_, `Apache Spark`_/`Storm`_/`Samza`_/`Flink`_,\n\nIt does not use a DSL, it's just Python!\nThis means you can use all your favorite Python libraries\nwhen stream processing: NumPy, PyTorch, Pandas, NLTK, Django,\nFlask, SQLAlchemy, ++\n\nFaust requires Python 3.6 or later for the new `async/await`_ syntax,\nand variable type annotations.\n\nHere's an example processing a stream of incoming orders:\n\n.. sourcecode:: python\n\n    app = faust.App('myapp', broker='kafka://localhost')\n\n    # Models describe how messages are serialized:\n    # {\"account_id\": \"3fae-...\", amount\": 3}\n    class Order(faust.Record):\n        account_id: str\n        amount: int\n\n    @app.agent(value_type=Order)\n    async def order(orders):\n        async for order in orders:\n            # process infinite stream of orders.\n            print(f'Order for {order.account_id}: {order.amount}')\n\nThe Agent decorator defines a \"stream processor\" that essentially\nconsumes from a Kafka topic and does something for every event it receives.\n\nThe agent is an ``async def`` function, so can also perform\nother operations asynchronously, such as web requests.\n\nThis system can persist state, acting like a database.\nTables are named distributed key/value stores you can use\nas regular Python dictionaries.\n\nTables are stored locally on each machine using a super fast\nembedded database written in C++, called `RocksDB`_.\n\nTables can also store aggregate counts that are optionally \"windowed\"\nso you can keep track\nof \"number of clicks from the last day,\" or\n\"number of clicks in the last hour.\" for example. Like `Kafka Streams`_,\nwe support tumbling, hopping and sliding windows of time, and old windows\ncan be expired to stop data from filling up.\n\nFor reliability we use a Kafka topic as \"write-ahead-log\".\nWhenever a key is changed we publish to the changelog.\nStandby nodes consume from this changelog to keep an exact replica\nof the data and enables instant recovery should any of the nodes fail.\n\nTo the user a table is just a dictionary, but data is persisted between\nrestarts and replicated across nodes so on failover other nodes can take over\nautomatically.\n\nYou can count page views by URL:\n\n.. sourcecode:: python\n\n    # data sent to 'clicks' topic sharded by URL key.\n    # e.g. key=\"http://example.com\" value=\"1\"\n    click_topic = app.topic('clicks', key_type=str, value_type=int)\n\n    # default value for missing URL will be 0 with `default=int`\n    counts = app.Table('click_counts', default=int)\n\n    @app.agent(click_topic)\n    async def count_click(clicks):\n        async for url, count in clicks.items():\n            counts[url] += count\n\nThe data sent to the Kafka topic is partitioned, which means\nthe clicks will be sharded by URL in such a way that every count\nfor the same URL will be delivered to the same Faust worker instance.\n\n\nFaust supports any type of stream data: bytes, Unicode and serialized\nstructures, but also comes with \"Models\" that use modern Python\nsyntax to describe how keys and values in streams are serialized:\n\n.. sourcecode:: python\n\n    # Order is a json serialized dictionary,\n    # having these fields:\n\n    class Order(faust.Record):\n        account_id: str\n        product_id: str\n        price: float\n        quantity: float = 1.0\n\n    orders_topic = app.topic('orders', key_type=str, value_type=Order)\n\n    @app.agent(orders_topic)\n    async def process_order(orders):\n        async for order in orders:\n            # process each order using regular Python\n            total_price = order.price * order.quantity\n            await send_order_received_email(order.account_id, order)\n\nFaust is statically typed, using the ``mypy`` type checker,\nso you can take advantage of static types when writing applications.\n\nThe Faust source code is small, well organized, and serves as a good\nresource for learning the implementation of `Kafka Streams`_.\n\n**Learn more about Faust in the** `introduction`_ **introduction page**\n    to read more about Faust, system requirements, installation instructions,\n    community resources, and more.\n\n**or go directly to the** `quickstart`_ **tutorial**\n    to see Faust in action by programming a streaming application.\n\n**then explore the** `User Guide`_\n    for in-depth information organized by topic.\n\n.. _`Robinhood`: http://robinhood.com\n.. _`async/await`:\n    https://medium.freecodecamp.org/a-guide-to-asynchronous-programming-in-python-with-asyncio-232e2afa44f6\n.. _`Celery`: http://celeryproject.org\n.. _`Kafka Streams`: https://kafka.apache.org/documentation/streams\n.. _`Apache Spark`: http://spark.apache.org\n.. _`Storm`: http://storm.apache.org\n.. _`Samza`: http://samza.apache.org\n.. _`Flink`: http://flink.apache.org\n.. _`RocksDB`: http://rocksdb.org\n.. _`Apache Kafka`: https://kafka.apache.org\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\nFaust is...\n===========\n\n**Simple**\n    Faust is extremely easy to use. To get started using other stream processing\n    solutions you have complicated hello-world projects, and\n    infrastructure requirements.  Faust only requires Kafka,\n    the rest is just Python, so If you know Python you can already use Faust to do\n    stream processing, and it can integrate with just about anything.\n\n    Here's one of the easier applications you can make::\n\n        import faust\n\n        class Greeting(faust.Record):\n            from_name: str\n            to_name: str\n\n        app = faust.App('hello-app', broker='kafka://localhost')\n        topic = app.topic('hello-topic', value_type=Greeting)\n\n        @app.agent(topic)\n        async def hello(greetings):\n            async for greeting in greetings:\n                print(f'Hello from {greeting.from_name} to {greeting.to_name}')\n\n        @app.timer(interval=1.0)\n        async def example_sender(app):\n            await hello.send(\n                value=Greeting(from_name='Faust', to_name='you'),\n            )\n\n        if __name__ == '__main__':\n            app.main()\n\n    You're probably a bit intimidated by the `async` and `await` keywords,\n    but you don't have to know how ``asyncio`` works to use\n    Faust: just mimic the examples, and you'll be fine.\n\n    The example application starts two tasks: one is processing a stream,\n    the other is a background thread sending events to that stream.\n    In a real-life application, your system will publish\n    events to Kafka topics that your processors can consume from,\n    and the background thread is only needed to feed data into our\n    example.\n\n**Highly Available**\n    Faust is highly available and can survive network problems and server\n    crashes.  In the case of node failure, it can automatically recover,\n    and tables have standby nodes that will take over.\n\n**Distributed**\n    Start more instances of your application as needed.\n\n**Fast**\n    A single-core Faust worker instance can already process tens of thousands\n    of events every second, and we are reasonably confident that throughput will\n    increase once we can support a more optimized Kafka client.\n\n**Flexible**\n    Faust is just Python, and a stream is an infinite asynchronous iterator.\n    If you know how to use Python, you already know how to use Faust,\n    and it works with your favorite Python libraries like Django, Flask,\n    SQLAlchemy, NTLK, NumPy, SciPy, TensorFlow, etc.\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\nInstallation\n============\n\nYou can install Faust either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`:\n\n.. sourcecode:: console\n\n    $ pip install -U faust\n\n.. _bundles:\n\nBundles\n-------\n\nFaust also defines a group of ``setuptools`` extensions that can be used\nto install Faust and the dependencies for a given feature.\n\nYou can specify these in your requirements or on the ``pip``\ncommand-line by using brackets. Separate multiple bundles using the comma:\n\n.. sourcecode:: console\n\n    $ pip install \"faust[rocksdb]\"\n\n    $ pip install \"faust[rocksdb,uvloop,fast,redis]\"\n\nThe following bundles are available:\n\nStores\n~~~~~~\n\n:``faust[rocksdb]``:\n    for using `RocksDB`_ for storing Faust table state.\n\n    **Recommended in production.**\n\n\n.. _`RocksDB`: http://rocksdb.org\n\nCaching\n~~~~~~~\n\n:``faust[redis]``:\n    for using `Redis_` as a simple caching backend (Memcached-style).\n\nCodecs\n~~~~~~\n\n:``faust[yaml]``:\n    for using YAML and the ``PyYAML`` library in streams.\n\nOptimization\n~~~~~~~~~~~~\n\n:``faust[fast]``:\n    for installing all the available C speedup extensions to Faust core.\n\nSensors\n~~~~~~~\n\n:``faust[datadog]``:\n    for using the Datadog Faust monitor.\n\n:``faust[statsd]``:\n    for using the Statsd Faust monitor.\n\nEvent Loops\n~~~~~~~~~~~\n\n:``faust[uvloop]``:\n    for using Faust with ``uvloop``.\n\n:``faust[eventlet]``:\n    for using Faust with ``eventlet``\n\nDebugging\n~~~~~~~~~\n\n:``faust[debug]``:\n    for using ``aiomonitor`` to connect and debug a running Faust worker.\n\n:``faust[setproctitle]``:\n    when the ``setproctitle`` module is installed the Faust worker will\n    use it to set a nicer process name in ``ps``/``top`` listings.\n    Also installed with the ``fast`` and ``debug`` bundles.\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Faust from\nhttp://pypi.org/project/faust\n\nYou can install it by doing:\n\n.. sourcecode:: console\n\n    $ tar xvfz faust-0.0.0.tar.gz\n    $ cd faust-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nYou can install the latest snapshot of Faust using the following\n``pip`` command:\n\n.. sourcecode:: console\n\n    $ pip install https://github.com/robinhood/faust/zipball/master#egg=faust\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\nFAQ\n===\n\nCan I use Faust with Django/Flask/etc.?\n---------------------------------------\n\nYes! Use ``eventlet`` as a bridge to integrate with ``asyncio``.\n\n\nUsing ``eventlet``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThis approach works with any blocking Python library that can work with\n``eventlet``.\n\nUsing ``eventlet`` requires you to install the ``aioeventlet`` module,\nand you can install this as a bundle along with Faust:\n\n.. sourcecode:: console\n\n    $ pip install -U faust[eventlet]\n\nThen to actually use eventlet as the event loop you have to either\nuse the ``-L <faust --loop>`` argument to the ``faust`` program:\n\n.. sourcecode:: console\n\n    $ faust -L eventlet -A myproj worker -l info\n\nor add ``import mode.loop.eventlet`` at the top of your entry point script:\n\n.. sourcecode:: python\n\n    #!/usr/bin/env python3\n    import mode.loop.eventlet  # noqa\n\n.. warning::\n\n    It's very important this is at the very top of the module,\n    and that it executes before you import libraries.\n\nCan I use Faust with Tornado?\n-----------------------------\n\nYes! Use the ``tornado.platform.asyncio`` bridge:\nhttp://www.tornadoweb.org/en/stable/asyncio.html\n\nCan I use Faust with Twisted?\n-----------------------------\n\nYes! Use the ``asyncio`` reactor implementation:\nhttps://twistedmatrix.com/documents/17.1.0/api/twisted.internet.asyncioreactor.html\n\nWill you support Python 2.7 or Python 3.5?\n------------------------------------------\n\nNo. Faust requires Python 3.6 or later, since it heavily uses features that were\nintroduced in Python 3.6 (`async`, `await`, variable type annotations).\n\nI get a maximum number of open files exceeded error by RocksDB when running a Faust app locally. How can I fix this?\n--------------------------------------------------------------------------------------------------------------------\n\nYou may need to increase the limit for the maximum number of open files. The\nfollowing post explains how to do so on OS X:\nhttps://blog.dekstroza.io/ulimit-shenanigans-on-osx-el-capitan/\n\n\nWhat kafka versions faust supports?\n---------------------------------------\n\nFaust supports kafka with version >= 0.10.\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\n.. _getting-help:\n\nGetting Help\n============\n\n.. _slack-channel:\n\nSlack\n-----\n\nFor discussions about the usage, development, and future of Faust,\nplease join the `fauststream`_ Slack.\n\n* https://fauststream.slack.com\n* Sign-up: https://join.slack.com/t/fauststream/shared_invite/enQtNDEzMTIyMTUyNzU2LTIyMjNjY2M2YzA2OWFhMDlmMzVkODk3YTBlYThlYmZiNTUwZDJlYWZiZTdkN2Q4ZGU4NWM4YWMyNTM5MGQ5OTg\n\nResources\n=========\n\n.. _bug-tracker:\n\nBug tracker\n-----------\n\nIf you have any suggestions, bug reports, or annoyances please report them\nto our issue tracker at https://github.com/robinhood/faust/issues/\n\n.. _license:\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the ``LICENSE``\nfile in the top distribution directory for the full license text.\n\n.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\nContributing\n============\n\nDevelopment of `Faust` happens at GitHub: https://github.com/robinhood/faust\n\nYou're highly encouraged to participate in the development\nof `Faust`.\n\nBe sure to also read the `Contributing to Faust`_ section in the\ndocumentation.\n\n.. _`Contributing to Faust`:\n    http://faust.readthedocs.io/en/latest/contributing.html\n\nCode of Conduct\n===============\n\nEveryone interacting in the project's code bases, issue trackers, chat rooms,\nand mailing lists is expected to follow the Faust Code of Conduct.\n\nAs contributors and maintainers of these projects, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in these projects a harassment-free\nexperience for everyone, regardless of level of experience, gender,\ngender identity and expression, sexual orientation, disability,\npersonal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical\n  or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct. By adopting this Code of Conduct,\nproject maintainers commit themselves to fairly and consistently applying\nthese principles to every aspect of managing this project. Project maintainers\nwho do not follow or enforce the Code of Conduct may be permanently removed from\nthe project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the Contributor Covenant,\nversion 1.2.0 available at http://contributor-covenant.org/version/1/2/0/.\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\n.. |build-status| image:: https://secure.travis-ci.org/robinhood/faust.png?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/robinhood/faust\n\n.. |coverage| image:: https://codecov.io/github/robinhood/faust/coverage.svg?branch=master\n    :target: https://codecov.io/github/robinhood/faust?branch=master\n\n.. |license| image:: https://img.shields.io/pypi/l/faust.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/faust.svg\n    :alt: faust can be installed via wheel\n    :target: http://pypi.org/project/faust/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/faust.svg\n    :alt: Supported Python versions.\n    :target: http://pypi.org/project/faust/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/faust.svg\n    :alt: Support Python implementations.\n    :target: http://pypi.org/project/faust/\n\n.. _`introduction`: http://faust.readthedocs.io/en/latest/introduction.html\n\n.. _`quickstart`: http://faust.readthedocs.io/en/latest/playbooks/quickstart.html\n\n.. _`User Guide`: http://faust.readthedocs.io/en/latest/userguide/index.html\n\n"
        },
        {
          "name": "TODO.rst",
          "type": "blob",
          "size": 4.3662109375,
          "content": "======\n TODO\n======\n\nHTTP User interface\n-------------------\n\nIf content-type is set to text/html, return HTML pages allowing the user\nto browse key/value pairs.\n\nJoins\n=====\n\n- Stream/Stream join\n\n- Table/Table join\n\n- Stream/Table, Table/Stream join.\n\nSee ``faust/joins.py``\n\nAPI already exposed in faust.streams.Stream, but not implemented.\n\nBuffering Ack Optimization\n==========================\n\nTODO\n\nAck buffer using start_offset-end_offset.\n\nTables\n======\n\n- Nested data-structures, like ``Mapping[str, List]``, ``Mapping[str, Set]``\n\n    - Can be accomplished by treating the changelog as a database \"transaction\n      log\"\n\n    - For example, adding a new element to a Mapping of sets::\n\n        class SubReq(faust.Record):\n            topic: str\n\n        class PubReq(faust.Record):\n            topic: str\n            message: str\n\n\n        subscribers = app.Table('subscribers', type=set)\n\n        @app.agent()\n        async def subscribe(subscriptions: Stream[SubReq]) -> AsyncIterable[bool]:\n            async for subsription in subscriptions:\n                subscribers[subscription.topic].add(subscriber.account)\n\n        @app.agent()\n        async def send_to_subscribers(requests):\n            async for req in requests:\n                for account in subscribers[req.topic]:\n                    accounts.get(account).send_message(req.message)\n\n        @route('/(?P<topic>/send/')\n        @accept_methods('POST')\n        async def send_to_subscribers(request):\n            await send_to_subscribers.send(PubReq(\n                topic=request.POST['topic'],\n                message=request.POST['message'],\n            )\n\n    - Adding an element produces the following changelog:\n\n        .. sourcecode:: text\n\n            KEY=topic VALUE={'action': 'add', 'value': new_member}\n\n    - while removing an element produces the changelog:\n\n        .. sourcecode:: text\n\n            KEY=topic VALUE={'action': 'remove', 'value': new_member}\n\n    - NOTE: Not sure how this would coexist with windowing, but maybe it will\n            work just by the Window+key keying.\n\n\nETA/countdown\n=============\n\nSend something to be processed later\n\n.. sourcecode:: python\n\n    async for event in my_topic.stream():\n        # forward to other topic, but only after two days\n        await topic.send(event, eta=timedelta(days=2))\nTests\n=====\n\nNeed to write more functional tests: test behavior, not coverage.\n\nlibrdkafka asyncio client\n=========================\n\nNeed to dive into C to add callbacks to C client so that it can be\nconnected to the event loop.\n\nThere are already NodeJS clients using librdkafka so this should\ndefinitely be possible.\n\nLook at confluent-kafka for inspiration.\n\nSensors\n=======\n\n- ``through()`` latency\n\n- ``group_by()`` latency\n\nDocumentation\n=============\n\n- Topic\n\n  - Partitioning/Sharding illustration\n\n  - Arguments to ``app.topic``\n\n- Agent\n\n    - Message lifecycle\n\n    - Manual acknowledgment (``async with event``)\n\n    - Arguments to ``app.agent``\n\n- Tables\n\n    - Windowing (``value.current()``, ``Table.relative_to_stream()`` etc.)\n\n    - Windowing illustrations\n\n    - Changelog callbacks\n\n    - Arguments to ``app.Table``.\n\n- Models\n\n    - may have forgotten something (isodates, special cases, go through code).\n\n- Stream\n\n    - Arguments\n\n        - Stream from iterable/async iterable\n        - Stream from channel/topic.\n\n- Deployment\n\n    - supervisord\n\n    - Logging\n\n    - Sentry\n\n- Availability guide\n\n    - partitioning\n\n    - recovery\n\n    - acknowledgments\n\n- Go through comments in the code, some of it describes things that should\n  be documented.\n\n\nTyping\n======\n\nThese are very very very low priority tasks, and more of a convenience if\nanyone wants to learn Python typing.\n\n- Add typing to (either .pyi header files, or fork projects):\n\n    - aiokafka\n        - kafka-python\n    - aiohttp\n    - avro-python3\n\n- WeakSet missing from mypy\n\n    Not really a task, but a note to keep checking when this is fixed\n    in a future mypy version.\n\n\nWorkflows\n=========\n\nThings to replace Celery, maybe not in Core but in a separate library.\n\n- Chains\n\n- Chords/Barrier\n\n    synchronization should be possible:\n        ``chord_id = uuid(); requests = [....]``,\n    then each agent forwards a completion message to an agent that keeps\n    track of counts::\n\n        chord_unlock.send(key=chord_id, value=(chord_size, callback)\n\n     when the `chord_unlock` agent sees that ``count > chord_size``, it\n     calls the callback\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.2119140625,
          "content": "channels:\n    - conda-forge\nname: py36\ndependencies:\n    - pip\n    - python=3.6\n    - setuptools\n    - wheel\n    - pip:\n        - Sphinx\n        - sphinx_celery\n        - sphinx-autodoc-annotation\n        - alabaster\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "faust",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.0322265625,
          "content": "conda:\n    file: environment.yml\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.443359375,
          "content": "[bumpversion]\ncurrent_version = 1.10.3\ncommit = true\ntag = true\nparse = (?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(?P<releaselevel>[a-z]+)?\nserialize = \n\t{major}.{minor}.{patch}{releaselevel}\n\t{major}.{minor}.{patch}\n\n[metadata]\nlicense_file = LICENSE\n\n[wheel]\nuniversal = 1\n\n[tool:pytest]\nminversion = 3.0\ntestpaths = t/unit t/functional\npython_classes = test_*\nopen_files = True\n\n[yapf]\nbased_on_style = pep8\nspaces_before_comment = 2\nallow_multiline_dictionary_keys = True\n\n[flake8]\nignore = N806,N802,N801,N803,I201,D102,D104,D107,D203,D105,D213,D406,D407,D413,I100,I202,B008,W504,G200,B011\nmax_complexity = 30\ninline-quotes = single\nmultiline-quotes = '''\ndocstring-quotes = \"\"\"\nenable-extensions = G\n\n[pep257]\nignore = D107,D203,D105,D213,D406,D407,D413\n\n[mypy]\npython_version = 3.6\ndisallow_untyped_calls = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ncheck_untyped_defs = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\nwarn_unused_configs = True\ndisallow_subclassing_any = True\nwarn_return_any = False\ndisallow_untyped_decorators = False\nwarn_incomplete_stub = False\nignore_missing_imports = True\nshow_error_context = True\ncache_fine_grained = True\nshow_column_numbers = True\ndisallow_any_expr = False\ndisallow_any_unimported = False\ndisallow_any_decorated = False\ndisallow_any_generics = False\nfollow_imports = normal\n\n[bumpversion:file:faust/__init__.py]\n\n[bumpversion:file:docs/includes/tags.txt]\n\n[bumpversion:file:README.rst]\n\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 6.701171875,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport re\nimport sys\nfrom setuptools import Extension, find_packages, setup\nfrom distutils.command.build_ext import build_ext\nfrom distutils.errors import (\n    CCompilerError,\n    DistutilsExecError,\n    DistutilsPlatformError,\n)\n\ntry:\n    from Cython.Build import cythonize\nexcept ImportError:\n    USE_CYTHON = False\nelse:\n    USE_CYTHON = os.environ.get('USE_CYTHON', True)\n\n\nif os.environ.get('NO_CYTHON'):\n    USE_CYTHON = False\n\nNAME = 'faust'\nBUNDLES = {\n    'aiodns',\n    'aiomonitor',\n    'cchardet',\n    'ckafka',\n    'ciso8601',\n    'cython',\n    'datadog',\n    'debug',\n    'fast',\n    'orjson',\n    'prometheus',\n    'redis',\n    'rocksdb',\n    'sentry',\n    'setproctitle',\n    'statsd',\n    'uvloop',\n    'eventlet',\n    'yaml',\n}\nCFLAGS = ['-O2']\nLDFLAGS = []\nLIBRARIES = []\nE_UNSUPPORTED_PYTHON = NAME + ' 1.0 requires Python %%s or later!'\n\nif sys.version_info < (3, 6):\n    raise Exception(E_UNSUPPORTED_PYTHON % ('3.6',))  # NOQA\n\nfrom pathlib import Path  # noqa\n\nREADME = Path('README.rst')\n\n# -*- Compiler Flags -*-\n\nif sys.platform == 'win32':\n    LDFLAGS.append('ws2_32.lib')\nelse:\n    CFLAGS.extend(['-Wall', '-Wsign-compare', '-Wconversion'])\n    LIBRARIES.append('z')\n\n# -*- C Extensions -*-\next = '.pyx' if USE_CYTHON else '.c'\n\nextensions = [\n    Extension(\n        'faust._cython.windows',\n        ['faust/_cython/windows' + ext],\n        libraries=LIBRARIES,\n        extra_compile_args=CFLAGS,\n        extra_link_args=LDFLAGS,\n    ),\n    Extension(\n        'faust._cython.streams',\n        ['faust/_cython/streams' + ext],\n        libraries=LIBRARIES,\n        extra_compile_args=CFLAGS,\n        extra_link_args=LDFLAGS,\n    ),\n    Extension(\n        'faust.transport._cython.conductor',\n        ['faust/transport/_cython/conductor' + ext],\n        libraries=LIBRARIES,\n        extra_compile_args=CFLAGS,\n        extra_link_args=LDFLAGS,\n    ),\n]\n\n\nif USE_CYTHON:\n    print('---*--- USING CYTHON ---*---')\n    extensions = cythonize(extensions)\n\n\nclass BuildFailed(Exception):\n    pass\n\n\nclass ve_build_ext(build_ext):\n    # This class allows C extension building to fail.\n\n    def run(self):\n        try:\n            build_ext.run(self)\n        except (DistutilsPlatformError, FileNotFoundError):\n            raise BuildFailed()\n\n    def build_extension(self, ext):\n        try:\n            build_ext.build_extension(self, ext)\n        except (CCompilerError, DistutilsExecError,\n                DistutilsPlatformError, ValueError):\n            raise BuildFailed()\n\n\n# -*- Distribution Meta -*-\n\nre_meta = re.compile(r'__(\\w+?)__\\s*=\\s*(.*)')\nre_doc = re.compile(r'^\"\"\"(.+?)\"\"\"')\n\n\ndef add_default(m):\n    attr_name, attr_value = m.groups()\n    return ((attr_name, attr_value.strip(\"\\\"'\")),)\n\n\ndef add_doc(m):\n    return (('doc', m.groups()[0]),)\n\n\npats = {re_meta: add_default, re_doc: add_doc}\nhere = Path(__file__).parent.absolute()\nwith open(here / NAME / '__init__.py') as meta_fh:\n    meta = {}\n    for line in meta_fh:\n        if line.strip() == '# -eof meta-':\n            break\n        for pattern, handler in pats.items():\n            m = pattern.match(line.strip())\n            if m:\n                meta.update(handler(m))\n\n# -*- Installation Requires -*-\n\n\ndef strip_comments(l):\n    return l.split('#', 1)[0].strip()\n\n\ndef _pip_requirement(req, *root):\n    if req.startswith('-r '):\n        _, path = req.split()\n        return reqs(*root, *path.split('/'))\n    return [req]\n\n\ndef _reqs(*f):\n    path = (Path.cwd() / 'requirements').joinpath(*f)\n    with path.open() as fh:\n        reqs = [strip_comments(l) for l in fh.readlines()]\n        return [_pip_requirement(r, *f[:-1]) for r in reqs if r]\n\n\ndef reqs(*f):\n    return [req for subreq in _reqs(*f) for req in subreq]\n\n\ndef extras(*p):\n    \"\"\"Parse requirement in the requirements/extras/ directory.\"\"\"\n    return reqs('extras', *p)\n\n\ndef extras_require():\n    \"\"\"Get map of all extra requirements.\"\"\"\n    return {x: extras(x + '.txt') for x in BUNDLES}\n\n\n# -*- Long Description -*-\n\n\nif README.exists():\n    long_description = README.read_text(encoding='utf-8')\nelse:\n    long_description = 'See http://pypi.org/project/{}'.format(NAME)\n\n# -*- %%% -*-\n\n\ndef do_setup(**kwargs):\n    setup(\n        name=NAME,\n        version=meta['version'],\n        description=meta['doc'],\n        long_description=long_description,\n        long_description_content_type='text/x-rst',\n        author=meta['author'],\n        author_email=meta['contact'],\n        url=meta['homepage'],\n        platforms=['any'],\n        license='BSD 3-Clause',\n        packages=find_packages(exclude=['examples', 'ez_setup', 't', 't.*']),\n        # PEP-561: https://www.python.org/dev/peps/pep-0561/\n        package_data={'faust': ['py.typed']},\n        include_package_data=True,\n        python_requires='>=3.6.0',\n        zip_safe=False,\n        install_requires=reqs('default.txt'),\n        tests_require=reqs('test.txt'),\n        extras_require=extras_require(),\n        entry_points={\n            'console_scripts': [\n                'faust = faust.cli.faust:cli',\n            ],\n        },\n        project_urls={\n            'Bug Reports': 'https://github.com/robinhood/faust/issues',\n            'Source': 'https://github.com/robinhood/faust',\n            'Documentation': 'https://faust.readthedocs.io/',\n        },\n        keywords=[\n            'stream',\n            'processing',\n            'asyncio',\n            'distributed',\n            'queue',\n            'kafka',\n        ],\n        classifiers=[\n            'Framework :: AsyncIO',\n            'Development Status :: 5 - Production/Stable',\n            'Intended Audience :: Developers',\n            'Natural Language :: English',\n            'License :: OSI Approved :: BSD License',\n            'Programming Language :: Python',\n            'Programming Language :: Python :: 3 :: Only',\n            'Programming Language :: Python :: 3.6',\n            'Programming Language :: Python :: 3.7',\n            'Programming Language :: Python :: Implementation :: CPython',\n            'Programming Language :: Python :: Implementation :: PyPy',\n            'Operating System :: POSIX',\n            'Operating System :: POSIX :: Linux',\n            'Operating System :: MacOS :: MacOS X',\n            'Operating System :: POSIX :: BSD',\n            'Operating System :: Microsoft :: Windows',\n            'Topic :: System :: Networking',\n            'Topic :: System :: Distributed Computing',\n        ],\n        **kwargs)\n\n\ntry:\n    do_setup(cmdclass={'build_ext': ve_build_ext},\n             ext_modules=extensions)\nexcept BuildFailed:\n    print('************************************************************')\n    print('Cannot compile C accelerated modules, using pure python')\n    print('************************************************************')\n    do_setup()\n"
        },
        {
          "name": "t",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.6337890625,
          "content": "[tox]\nenvlist = 3.8,3.7,3.6,flake8,apicheck,configcheck,typecheck,docstyle,bandit,spell\n\n[testenv]\ndeps=\n    -r{toxinidir}/requirements/default.txt\n    -r{toxinidir}/requirements/test.txt\n    -r{toxinidir}/requirements/ci.txt\n\n    linkcheck,apicheck,configcheck: -r{toxinidir}/requirements/docs.txt\n    spell: -r{toxinidir}/requirements/spell.txt\n    flake8,docstyle: -r{toxinidir}/requirements/dist.txt\n    bandit: bandit\npassenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY\nsitepackages = False\nrecreate = False\ncommands = py.test --random-order --open-files -xvv --cov=faust t/unit t/functional t/integration t/meticulous/ t/regression\n\nbasepython =\n    3.8,flake8,apicheck,linkcheck,configcheck,typecheck,docstyle,bandit,spell: python3.8\n    3.7: python3.7\n    3.6: python3.6\n\n[testenv:apicheck]\nsetenv =\n    APICHECK=1\ncommands =\n    sphinx-build -b apicheck -d {envtmpdir}/doctrees2 docs docs/_build/apicheck\n\n[testenv:configcheck]\ncommands =\n    sphinx-build -b configcheck -d {envtmpdir}/doctrees2 docs docs/_build/configcheck\n    python extra/tools/verify_doc_defaults.py\n\n[testenv:linkcheck]\ncommands =\n    sphinx-build -b linkcheck -d {envtmpdir}/doctrees2 docs docs/_build/linkcheck\n\n[testenv:spell]\ncommands =\n    env SPELLCHECK=1 sphinx-build -b spelling -d {envtmpdir}/doctrees2 docs docs/_build/spell\n\n[testenv:flake8]\ncommands =\n    flake8 {toxinidir}/faust {toxinidir}/t {toxinidir}/examples\n\n[testenv:typecheck]\ncommands =\n    mypy -p faust\n\n[testenv:docstyle]\ncommands =\n    pydocstyle --match-dir '(?!types|assignor)' faust\n\n[testenv:bandit]\ncommands =\n    bandit -b extra/bandit/baseline.json -c extra/bandit/config.yaml -r faust\n"
        }
      ]
    }
  ]
}