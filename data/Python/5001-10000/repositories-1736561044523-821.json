{
  "metadata": {
    "timestamp": 1736561044523,
    "page": 821,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "InternLM/lmdeploy",
      "stars": 5135,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.8369140625,
          "content": "Language: Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAllowShortEnumsOnASingleLine: false\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: Right\nAlignOperands: true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowAllArgumentsOnNextLine: true\nAllowShortBlocksOnASingleLine: Empty\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Stroustrup\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: AfterColon\nBreakInheritanceList: AfterColon\nBreakStringLiterals: false\nColumnLimit: 120\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nFixNamespaceComments: true\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCtorInitializerColon: false\nSpaceBeforeInheritanceColon: false\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: c++17\nTabWidth: 4\nUseTab: Never\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9814453125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n.vscode/\n.idea/\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\ntriton-rerope/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n*build*/\n!builder/\nlmdeploy/lib/\nlmdeploy/bin/\ndist/\nexamples/cpp/llama/*.csv\n*.npy\n*.weight\ninstall/\n\n# LMDeploy\nworkspace/\nwork_dir*/\n\n# Huggingface\n*.bin\n*config.json\n*generate_config.json\n!lmdeploy/turbomind/hf_repo/config.json\n\n# Pytorch\n*.pt\n*.pth\n*.py~\n*.sh~\n*.pyc\n**/src/pytorch-sphinx-theme/\n\n# Outputs and logs\n*.txt\n*.log\n*.out\n*.csv\n!start_ids.csv\n*.pkl\n\n!CMakeLists.txt\nproxy_config.yml\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.7744140625,
          "content": "repos:\n  - repo: https://github.com/PyCQA/flake8\n    rev: 4.0.1\n    hooks:\n      - id: flake8\n        args: [\"--exclude=lmdeploy/turbomind/triton_models/*,lmdeploy/pytorch/modeling/*\", \"--max-line-length=79\"]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.11.5\n    hooks:\n      - id: isort\n  - repo: https://github.com/pre-commit/mirrors-yapf\n    rev: v0.32.0\n    hooks:\n      - id: yapf\n        name: yapf\n        description: 'Formatter for Python code'\n        entry: yapf\n        language: python\n        args: ['-i', '--style={based_on_style: pep8, column_limit: 79}']\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.2.0\n    hooks:\n      - id: trailing-whitespace\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: requirements-txt-fixer\n      - id: double-quote-string-fixer\n      - id: check-merge-conflict\n      - id: fix-encoding-pragma\n        args: [\"--remove\"]\n      - id: mixed-line-ending\n        args: [\"--fix=lf\"]\n  - repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.9\n    hooks:\n      - id: mdformat\n        args: [\"--number\"]\n        additional_dependencies:\n          - mdformat-openmmlab\n          - mdformat_frontmatter\n          - linkify-it-py\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.1.0\n    hooks:\n      - id: codespell\n        args: [\"--skip=third_party/*,*.ipynb,*.proto,src/turbomind/*,docker/Dockerfile_aarch64_ascend,docs/en/get_started/ascend/get_started.md,docs/zh_cn/get_started/ascend/get_started.md\"]\n\n\n  - repo: https://github.com/myint/docformatter\n    rev: v1.4\n    hooks:\n      - id: docformatter\n        args: [\"--in-place\", \"--wrap-descriptions\", \"79\"]\n\n  - repo: https://github.com/open-mmlab/pre-commit-hooks\n    rev: v0.2.0\n    hooks:\n    -   id: check-copyright\n        args: [\"lmdeploy\"]\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 18.5947265625,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-whitelist=\n\n# Specify a score threshold to be exceeded before program exits with error.\nfail-under=8.5\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS,configs\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=1\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python module names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=print-statement,\n        parameter-unpacking,\n        unpacking-in-except,\n        old-raise-syntax,\n        backtick,\n        long-suffix,\n        old-ne-operator,\n        old-octal-literal,\n        import-star-module-level,\n        non-ascii-bytes-literal,\n        raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        use-symbolic-message-instead,\n        apply-builtin,\n        basestring-builtin,\n        buffer-builtin,\n        cmp-builtin,\n        coerce-builtin,\n        execfile-builtin,\n        file-builtin,\n        long-builtin,\n        raw_input-builtin,\n        reduce-builtin,\n        standarderror-builtin,\n        unicode-builtin,\n        xrange-builtin,\n        coerce-method,\n        delslice-method,\n        getslice-method,\n        setslice-method,\n        no-absolute-import,\n        old-division,\n        dict-iter-method,\n        dict-view-method,\n        next-method-called,\n        metaclass-assignment,\n        indexing-exception,\n        raising-string,\n        reload-builtin,\n        oct-method,\n        hex-method,\n        nonzero-method,\n        cmp-method,\n        input-builtin,\n        round-builtin,\n        intern-builtin,\n        unichr-builtin,\n        map-builtin-not-iterating,\n        zip-builtin-not-iterating,\n        range-builtin-not-iterating,\n        filter-builtin-not-iterating,\n        using-cmp-argument,\n        eq-without-hash,\n        div-method,\n        idiv-method,\n        rdiv-method,\n        exception-message-attribute,\n        invalid-str-codec,\n        sys-max-int,\n        bad-python3-import,\n        deprecated-string-function,\n        deprecated-str-translate-call,\n        deprecated-itertools-function,\n        deprecated-types-field,\n        next-method-defined,\n        dict-items-not-iterating,\n        dict-keys-not-iterating,\n        dict-values-not-iterating,\n        deprecated-operator-function,\n        deprecated-urllib-function,\n        xreadlines-attribute,\n        deprecated-sys-function,\n        exception-escape,\n        comprehension-escape,\n        no-member,\n        invalid-name,\n        too-many-branches,\n        wrong-import-order,\n        too-many-arguments,\n        missing-function-docstring,\n        missing-module-docstring,\n        too-many-locals,\n        too-few-public-methods,\n        abstract-method,\n        broad-except,\n        too-many-nested-blocks,\n        too-many-instance-attributes,\n        missing-class-docstring,\n        duplicate-code,\n        not-callable,\n        protected-access,\n        dangerous-default-value,\n        no-name-in-module,\n        logging-fstring-interpolation,\n        super-init-not-called,\n        redefined-builtin,\n        attribute-defined-outside-init,\n        arguments-differ,\n        cyclic-import,\n        bad-super-call,\n        too-many-statements,\n        unused-argument,\n        import-outside-toplevel,\n        import-error,\n        super-with-arguments\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[REPORTS]\n\n# Python expression which should return a score less than or equal to 10. You\n# have access to the variables 'error', 'warning', 'refactor', and 'convention'\n# which contain the number of messages in each category, as well as 'statement'\n# which is the total number of statements analyzed. This score is used by the\n# global evaluation report (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages.\nreports=yes\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis). It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n# List of decorators that change the signature of a decorated function.\nsignature-mutators=\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it work,\n# install the python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains the private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to the private dictionary (see the\n# --spelling-private-dict-file option) instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[LOGGING]\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=old\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=no\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n# Regular expression of note tags to take in consideration.\n#notes-rgx=\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style.\n#class-attribute-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _,\n           x,\n           y,\n           w,\n           h,\n           a,\n           b\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style.\n#variable-rgx=\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement (see R0916).\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled).\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled).\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp,\n                      __post_init__\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=cls\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"BaseException, Exception\".\novergeneral-exceptions=BaseException,\n                       Exception\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 14.541015625,
          "content": "# Copyright (c) 2019-2023, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.11 FATAL_ERROR) # for PyTorch extensions, version should be greater than 3.13\nproject(TurboMind LANGUAGES CXX CUDA)\n\nfind_package(CUDA 10.2 REQUIRED)\n\nif(${CUDA_VERSION_MAJOR} VERSION_GREATER_EQUAL \"11\")\n  add_definitions(\"-DENABLE_BF16\")\n  message(\"CUDA_VERSION ${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} is greater or equal than 11.0, enable -DENABLE_BF16 flag\")\nendif()\n\n# if((${CUDA_VERSION_MAJOR} VERSION_GREATER_EQUAL \"11\" AND ${CUDA_VERSION_MINOR} VERSION_GREATER_EQUAL \"8\") OR (${CUDA_VERSION_MAJOR} VERSION_GREATER_EQUAL \"12\"))\n#   add_definitions(\"-DENABLE_FP8\")\n#   option(ENABLE_FP8 \"ENABLE_FP8\" OFF)\n#   if(ENABLE_FP8)\n#     message(\"CUDA_VERSION ${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} is greater or equal than 11.8, enable -DENABLE_FP8 flag\")\n#   endif()\n# endif()\n\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)\n\noption(BUILD_PYT \"Build in PyTorch TorchScript class mode\" OFF)\nif(NOT BUILD_MULTI_GPU)\n  option(BUILD_MULTI_GPU \"Build project about multi-GPU\" OFF)\nendif()\nif(NOT USE_TRITONSERVER_DATATYPE)\n  option(USE_TRITONSERVER_DATATYPE \"Build triton backend for triton server\" OFF)\nendif()\noption(BUILD_PY_FFI \"Build python ffi\" ON)\noption(BUILD_TEST \"Build tests\" OFF)\n\ninclude(FetchContent)\nif (BUILD_TEST)\n  FetchContent_Declare(\n    repo-cutlass\n    GIT_REPOSITORY https://github.com/NVIDIA/cutlass.git\n    GIT_TAG        6f47420213f757831fae65c686aa471749fa8d60\n    GIT_SHALLOW ON\n  )\n\n  set(CUTLASS_ENABLE_HEADERS_ONLY ON CACHE BOOL \"Enable only the header library\")\n\n  FetchContent_MakeAvailable(repo-cutlass)\n\n  set(CUTLASS_HEADER_DIR ${PROJECT_SOURCE_DIR}/3rdparty/cutlass/include)\n  set(CUTLASS_EXTENSIONS_DIR ${PROJECT_SOURCE_DIR}/src/turbomind/cutlass_extensions/include)\nendif()\n\nFetchContent_Declare(\n  yaml-cpp\n  GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git\n  GIT_TAG 0.8.0\n)\nset(YAML_BUILD_SHARED_LIBS OFF CACHE BOOL \"Build static library of yaml-cpp\")\nFetchContent_MakeAvailable(yaml-cpp)\n\n\noption(SPARSITY_SUPPORT \"Build project with Ampere sparsity feature support\" OFF)\n\noption(BUILD_FAST_MATH \"Build in fast math mode\" ON)\n\n# the environment variable\n#   ASAN_OPTIONS=protect_shadow_gap=0,intercept_tls_get_addr=0\n# must be set at runtime\n# https://github.com/google/sanitizers/issues/1322\nif (LMDEPLOY_ASAN_ENABLE)\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fsanitize=address>)\n    add_link_options(-fsanitize=address)\nendif ()\n\n# notice that ubsan has linker issues for ubuntu < 18.04, see\n# https://stackoverflow.com/questions/50024731/ld-unrecognized-option-push-state-no-as-needed\nif (LMDEPLOY_UBSAN_ENABLE)\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fsanitize=undefined>)\n    add_link_options(-fsanitize=undefined)\nendif ()\n\nif(BUILD_MULTI_GPU)\n  message(STATUS \"Add DBUILD_MULTI_GPU, requires MPI and NCCL\")\n  add_definitions(\"-DBUILD_MULTI_GPU\")\n  set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)\n  find_package(MPI REQUIRED)\n  find_package(NCCL REQUIRED)\n  set(CMAKE_MODULE_PATH \"\") # prevent the bugs for pytorch building\nendif()\n\nif(BUILD_PYT)\n  if(DEFINED ENV{NVIDIA_PYTORCH_VERSION})\n    if($ENV{NVIDIA_PYTORCH_VERSION} VERSION_LESS \"20.03\")\n      message(FATAL_ERROR \"NVIDIA PyTorch image is too old for TorchScript mode.\")\n    endif()\n    if($ENV{NVIDIA_PYTORCH_VERSION} VERSION_EQUAL \"20.03\")\n      add_definitions(-DLEGACY_THS=1)\n    endif()\n  endif()\nendif()\n\nif(USE_TRITONSERVER_DATATYPE)\n  message(\"-- USE_TRITONSERVER_DATATYPE\")\n  add_definitions(\"-DUSE_TRITONSERVER_DATATYPE\")\nendif()\n\nset(CXX_STD \"17\" CACHE STRING \"C++ standard\")\n# enable gold linker for binary and .so\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\")\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=gold\")\nset(CUDA_PATH ${CUDA_TOOLKIT_ROOT_DIR})\n\nset(TF_PATH \"\" CACHE STRING \"TensorFlow path\")\nset(CUSPARSELT_PATH \"\" CACHE STRING \"cuSPARSELt path\")\n\nif((BUILD_TF OR BUILD_TF2) AND NOT TF_PATH)\n  message(FATAL_ERROR \"TF_PATH must be set if BUILD_TF or BUILD_TF2 (=TensorFlow mode) is on.\")\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH ${CUDA_PATH}/lib64)\n\n# profiling\noption(USE_NVTX \"Whether or not to use nvtx\" ON)\nif(USE_NVTX)\n  message(STATUS \"NVTX is enabled.\")\n  add_definitions(\"-DUSE_NVTX\")\nendif()\n\n# setting compiler flags\nset(CMAKE_C_FLAGS    \"${CMAKE_C_FLAGS}\")\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} -Xcompiler -Wall -ldl\") # -Xptxas -v\n\n# TODO: build for sm_72 & sm_87 on aarch64 platform (Jetson devices)\nif (NOT CMAKE_CUDA_ARCHITECTURES)\n  set(CMAKE_CUDA_ARCHITECTURES 70-real 75-real)\n  if (${CUDA_VERSION} VERSION_GREATER_EQUAL \"11\")\n    list(APPEND CMAKE_CUDA_ARCHITECTURES 80-real)\n  endif ()\n  if (${CUDA_VERSION} VERSION_GREATER_EQUAL \"11.1\")\n    list(APPEND CMAKE_CUDA_ARCHITECTURES 86-real)\n  endif ()\n  if (${CUDA_VERSION} VERSION_GREATER_EQUAL \"11.8\")\n    list(APPEND CMAKE_CUDA_ARCHITECTURES 89-real 90-real)\n  endif ()\n  if (MSVC)\n    list(REMOVE_ITEM CMAKE_CUDA_ARCHITECTURES 80-real 90-real)\n  endif ()\nendif ()\n\nmessage(STATUS \"Building with CUDA archs: ${CMAKE_CUDA_ARCHITECTURES}\")\n\nset(CMAKE_CUDA_RUNTIME_LIBRARY Shared)\nset(CMAKE_C_FLAGS_DEBUG    \"${CMAKE_C_FLAGS_DEBUG}    -Wall -O0\")\nset(CMAKE_CXX_FLAGS_DEBUG  \"${CMAKE_CXX_FLAGS_DEBUG}  -Wall -O0\")\n# set(CMAKE_CUDA_FLAGS_DEBUG \"${CMAKE_CUDA_FLAGS_DEBUG} -O0 -G -Xcompiler -Wall  --ptxas-options=-v --resource-usage\")\nset(CMAKE_CUDA_FLAGS_DEBUG \"${CMAKE_CUDA_FLAGS_DEBUG} -O0 -G -Xcompiler -Wall -DCUDA_PTX_FP8_F2FP_ENABLED\")\n\nset(CMAKE_CXX_STANDARD \"${CXX_STD}\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} --expt-extended-lambda\")\nset(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} --expt-relaxed-constexpr\")\nset(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} --std=c++${CXX_STD} -DCUDA_PTX_FP8_F2FP_ENABLED\")\n\nset(CMAKE_CXX_FLAGS_RELEASE        \"${CMAKE_CXX_FLAGS_RELEASE}        -O3\")\nset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O3\")\n# set(CMAKE_CUDA_FLAGS_RELEASE \"${CMAKE_CUDA_FLAGS_RELEASE} -Xcompiler -O3 --ptxas-options=--verbose\")\nset(CMAKE_CUDA_FLAGS_RELEASE        \"${CMAKE_CUDA_FLAGS_RELEASE}        -Xcompiler -O3 -DCUDA_PTX_FP8_F2FP_ENABLED\")\nset(CMAKE_CUDA_FLAGS_RELWITHDEBINFO \"${CMAKE_CUDA_FLAGS_RELWITHDEBINFO} -Xcompiler -O3 -DCUDA_PTX_FP8_F2FP_ENABLED\")\n\nif(BUILD_FAST_MATH)\n    set(CMAKE_CUDA_FLAGS_RELEASE        \"${CMAKE_CUDA_FLAGS_RELEASE}        --use_fast_math\")\n    set(CMAKE_CUDA_FLAGS_RELWITHDEBINFO \"${CMAKE_CUDA_FLAGS_RELWITHDEBINFO} --use_fast_math\")\n    message(\"Release build CUDA flags: ${CMAKE_CUDA_FLAGS_RELEASE}\")\nendif()\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nset(COMMON_HEADER_DIRS\n  ${PROJECT_SOURCE_DIR}\n  ${CUDA_PATH}/include\n  ${CUTLASS_HEADER_DIR}\n)\nmessage(\"-- COMMON_HEADER_DIRS: ${COMMON_HEADER_DIRS}\")\n\nset(COMMON_LIB_DIRS\n  ${CUDA_PATH}/lib64\n)\n\nif (SPARSITY_SUPPORT)\n  list(APPEND COMMON_HEADER_DIRS ${CUSPARSELT_PATH}/include)\n  list(APPEND COMMON_LIB_DIRS ${CUSPARSELT_PATH}/lib64)\n  add_definitions(-DSPARSITY_ENABLED=1)\nendif()\n\nif(BUILD_TF)\n  list(APPEND COMMON_HEADER_DIRS ${TF_PATH}/include)\n  list(APPEND COMMON_LIB_DIRS ${TF_PATH})\n  add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)\nendif()\n\nif(BUILD_TF2)\n  list(APPEND COMMON_HEADER_DIRS ${TF_PATH}/include)\n  list(APPEND COMMON_LIB_DIRS ${TF_PATH})\n  add_definitions(-D_GLIBCXX_USE_CXX11_ABI=1)\nendif()\n\nset(PYTHON_PATH \"python\" CACHE STRING \"Python path\")\nif(BUILD_PYT)\n  execute_process(COMMAND ${PYTHON_PATH} \"-c\" \"from __future__ import print_function; import torch; print(torch.__version__,end='');\"\n                  RESULT_VARIABLE _PYTHON_SUCCESS\n                  OUTPUT_VARIABLE TORCH_VERSION)\n  if (TORCH_VERSION VERSION_LESS \"1.5.0\")\n      message(FATAL_ERROR \"PyTorch >= 1.5.0 is needed for TorchScript mode.\")\n  endif()\n  execute_process(COMMAND ${PYTHON_PATH} \"-c\" \"from __future__ import print_function; import os; import torch;\nprint(os.path.dirname(torch.__file__),end='');\"\n                  RESULT_VARIABLE _PYTHON_SUCCESS\n                  OUTPUT_VARIABLE TORCH_DIR)\n  if (NOT _PYTHON_SUCCESS MATCHES 0)\n      message(FATAL_ERROR \"Torch config Error.\")\n  endif()\n  list(APPEND CMAKE_PREFIX_PATH ${TORCH_DIR})\n  find_package(Torch REQUIRED)\n  execute_process(COMMAND ${PYTHON_PATH} \"-c\" \"from __future__ import print_function; from distutils import sysconfig;\nprint(sysconfig.get_python_inc());\"\n                  RESULT_VARIABLE _PYTHON_SUCCESS\n                  OUTPUT_VARIABLE PY_INCLUDE_DIR)\n  if (NOT _PYTHON_SUCCESS MATCHES 0)\n      message(FATAL_ERROR \"Python config Error.\")\n  endif()\n  list(APPEND COMMON_HEADER_DIRS ${PY_INCLUDE_DIR})\n  execute_process(COMMAND ${PYTHON_PATH} \"-c\" \"from __future__ import print_function; import torch;\nprint(torch._C._GLIBCXX_USE_CXX11_ABI,end='');\"\n                  RESULT_VARIABLE _PYTHON_SUCCESS\n                  OUTPUT_VARIABLE USE_CXX11_ABI)\n  message(\"-- USE_CXX11_ABI=${USE_CXX11_ABI}\")\n  if (USE_CXX11_ABI)\n    set(CMAKE_CUDA_FLAGS_RELWITHDEBINFO \"${CMAKE_CUDA_FLAGS_RELWITHDEBINFO} -D_GLIBCXX_USE_CXX11_ABI=1\")\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -D_GLIBCXX_USE_CXX11_ABI=1\")\n    set(CMAKE_CUDA_FLAGS_RELEASE \"${CMAKE_CUDA_FLAGS_RELEASE} -D_GLIBCXX_USE_CXX11_ABI=1\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -D_GLIBCXX_USE_CXX11_ABI=1\")\n    set(CMAKE_CUDA_FLAGS_DEBUG \"${CMAKE_CUDA_FLAGS_DEBUG} -D_GLIBCXX_USE_CXX11_ABI=1\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_USE_CXX11_ABI=1\")\n  else()\n    set(CMAKE_CUDA_FLAGS_RELWITHDEBINFO \"${CMAKE_CUDA_FLAGS_RELWITHDEBINFO} -D_GLIBCXX_USE_CXX11_ABI=0\")\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -D_GLIBCXX_USE_CXX11_ABI=0\")\n    set(CMAKE_CUDA_FLAGS_RELEASE \"${CMAKE_CUDA_FLAGS_RELEASE} -D_GLIBCXX_USE_CXX11_ABI=0\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -D_GLIBCXX_USE_CXX11_ABI=0\")\n    set(CMAKE_CUDA_FLAGS_DEBUG \"${CMAKE_CUDA_FLAGS_DEBUG} -D_GLIBCXX_USE_CXX11_ABI=0\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_USE_CXX11_ABI=0\")\n  endif()\nendif()\n\n# turn off warnings on windows\nif (MSVC)\n  foreach(\n    flag_var\n    CMAKE_CXX_FLAGS\n    CMAKE_CXX_FLAGS_DEBUG\n    CMAKE_CXX_FLAGS_RELEASE\n    CMAKE_CXX_FLAGS_MINSIZEREL\n    CMAKE_CXX_FLAGS_RELWITHDEBINFO\n    CMAKE_C_FLAGS\n    CMAKE_C_FLAGS_DEBUG\n    CMAKE_C_FLAGS_RELEASE\n    CMAKE_C_FLAGS_MINSIZEREL\n    CMAKE_C_FLAGS_RELWITHDEBINFO\n    CMAKE_CUDA_FLAGS\n    CMAKE_CUDA_FLAGS_DEBUG\n    CMAKE_CUDA_FLAGS_RELEASE\n    CMAKE_CUDA_FLAGS_MINSIZEREL\n    CMAKE_CUDA_FLAGS_RELWITHDEBINFO)\n    string(REGEX REPLACE \"-Wall\" \" /W0 \" ${flag_var} \"${${flag_var}}\")\n  endforeach()\nendif()\n\nif (BUILD_MULTI_GPU)\n  list(APPEND COMMON_HEADER_DIRS ${MPI_INCLUDE_PATH})\nendif()\n\nif(USE_TRITONSERVER_DATATYPE)\n  list(APPEND COMMON_HEADER_DIRS ${PROJECT_SOURCE_DIR}/../repo-core-src/include)\nendif()\n\ninclude_directories(\n  ${COMMON_HEADER_DIRS}\n)\n\nlink_directories(\n  ${COMMON_LIB_DIRS}\n)\n\n# add_subdirectory(3rdparty)\nadd_subdirectory(src)\n# add_subdirectory(examples)\n\nif(BUILD_TEST)\n    add_subdirectory(tests/csrc)\nendif()\n\n# install python api\nif (BUILD_PY_FFI)\n  install(TARGETS _turbomind DESTINATION ${CMAKE_SOURCE_DIR}/lmdeploy/lib)\nendif ()\n\nif (MSVC)\n  return()\nendif ()\n\n# # Mesaure the compile time\noption(MEASURE_BUILD_TIME \"Measure the build time of each module\" OFF)\nif (MEASURE_BUILD_TIME)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CMAKE_COMMAND} -E time\")\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM \"${CMAKE_COMMAND} -E time\")\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK \"${CMAKE_COMMAND} -E time\")\nendif()\n\n########################################\n\nadd_library(transformer-shared SHARED\n  $<TARGET_OBJECTS:DynamicDecodeLayer>\n  $<TARGET_OBJECTS:Llama>\n  $<TARGET_OBJECTS:LlamaTritonBackend>\n  $<TARGET_OBJECTS:TransformerTritonBackend>\n  $<TARGET_OBJECTS:activation_kernels>\n  $<TARGET_OBJECTS:ban_bad_words>\n  $<TARGET_OBJECTS:cublasAlgoMap>\n  $<TARGET_OBJECTS:cublasMMWrapper>\n  $<TARGET_OBJECTS:cuda_utils>\n  $<TARGET_OBJECTS:custom_ar_comm>\n  $<TARGET_OBJECTS:custom_ar_kernels>\n  $<TARGET_OBJECTS:attention>\n  $<TARGET_OBJECTS:decoding_kernels>\n  $<TARGET_OBJECTS:gpt_kernels>\n  $<TARGET_OBJECTS:logprob_kernels>\n  $<TARGET_OBJECTS:logger>\n  $<TARGET_OBJECTS:memory_utils>\n  $<TARGET_OBJECTS:mpi_utils>\n  $<TARGET_OBJECTS:nccl_utils>\n  $<TARGET_OBJECTS:nvtx_utils>\n  $<TARGET_OBJECTS:anomaly_handler>\n  $<TARGET_OBJECTS:sampling_penalty_kernels>\n  $<TARGET_OBJECTS:sampling_topk_kernels>\n  $<TARGET_OBJECTS:sampling_topp_kernels>\n  $<TARGET_OBJECTS:stop_criteria>\n  $<TARGET_OBJECTS:tensor>\n  $<TARGET_OBJECTS:unfused_attention_kernels>\n)\n\nif (BUILD_MULTI_GPU)\ntarget_link_libraries(transformer-shared PUBLIC\n  ${MPI_CXX_LIBRARIES}\n  ${NCCL_LIBRARIES}\n)\nendif()\n\nif(USE_NVTX)\ntarget_link_libraries(transformer-shared PUBLIC\n  -lnvToolsExt\n)\nendif()\n\nset_target_properties(transformer-shared PROPERTIES POSITION_INDEPENDENT_CODE ON)\nset_target_properties(transformer-shared PROPERTIES CUDA_RESOLVE_DEVICE_SYMBOLS ON)\nset_target_properties(transformer-shared PROPERTIES LINKER_LANGUAGE CXX)\ntarget_link_libraries(transformer-shared PUBLIC -lcudart -lcublas -lcublasLt -lcurand)\n\ninclude(GNUInstallDirs)\nset(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/TurboMind)\n\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n  ${CMAKE_CURRENT_LIST_DIR}/cmake/TurboMindConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/TurboMindConfig.cmake\n  INSTALL_DESTINATION ${INSTALL_CONFIGDIR}\n)\n\ninstall(\n  FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/TurboMindConfig.cmake\n  DESTINATION ${INSTALL_CONFIGDIR}\n)\n\ninstall(\n  TARGETS\n    transformer-shared\n  EXPORT\n    transformer-shared-targets\n  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/turbomind\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/turbomind\n  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin\n)\n\ninstall(\n  EXPORT\n    transformer-shared-targets\n  FILE\n    TurboMindTargets.cmake\n  DESTINATION\n    ${INSTALL_CONFIGDIR}\n)\n\nexport(\n  EXPORT\n    transformer-shared-targets\n  FILE\n    ${CMAKE_CURRENT_BINARY_DIR}/TurboMindTargets.cmake\n  NAMESPACE\n    TritonCore::\n)\n\nexport(PACKAGE TurboMind)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1123046875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023-2024 Shanghai AI Laboratory. All rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1279296875,
          "content": "\ninclude lmdeploy/lib/*.so\ninclude lmdeploy/lib/*.so*\ninclude lmdeploy/lib/*.dll\ninclude lmdeploy/lib/*.pyd\ninclude lmdeploy/bin/*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.0322265625,
          "content": "<div align=\"center\">\n  <img src=\"docs/en/_static/image/lmdeploy-logo.svg\" width=\"450\"/>\n\n[![PyPI](https://img.shields.io/pypi/v/lmdeploy)](https://pypi.org/project/lmdeploy)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/lmdeploy)\n[![license](https://img.shields.io/github/license/InternLM/lmdeploy.svg)](https://github.com/InternLM/lmdeploy/tree/main/LICENSE)\n[![issue resolution](https://img.shields.io/github/issues-closed-raw/InternLM/lmdeploy)](https://github.com/InternLM/lmdeploy/issues)\n[![open issues](https://img.shields.io/github/issues-raw/InternLM/lmdeploy)](https://github.com/InternLM/lmdeploy/issues)\n\n[📘Documentation](https://lmdeploy.readthedocs.io/en/latest/) |\n[🛠️Quick Start](https://lmdeploy.readthedocs.io/en/latest/get_started/get_started.html) |\n[🤔Reporting Issues](https://github.com/InternLM/lmdeploy/issues/new/choose)\n\nEnglish | [简体中文](README_zh-CN.md) | [日本語](README_ja.md)\n\n👋 join us on [![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=wechat&label=WeChat)](https://cdn.vansin.top/internlm/lmdeploy.jpg)\n[![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=twitter&label=Twitter)](https://twitter.com/intern_lm)\n[![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=discord&label=Discord)](https://discord.gg/xa29JuW87d)\n\n</div>\n\n______________________________________________________________________\n\n## Latest News 🎉\n\n<details open>\n<summary><b>2024</b></summary>\n\n- \\[2024/11\\] Support Mono-InternVL with PyTorch engine\n- \\[2024/10\\] PyTorchEngine supports graph mode on ascend platform, doubling the inference speed\n- \\[2024/09\\] LMDeploy PyTorchEngine adds support for [Huawei Ascend](./docs/en/get_started/ascend/get_started.md). See supported models [here](docs/en/supported_models/supported_models.md)\n- \\[2024/09\\] LMDeploy PyTorchEngine achieves 1.3x faster on Llama3-8B inference by introducing CUDA graph\n- \\[2024/08\\] LMDeploy is integrated into [modelscope/swift](https://github.com/modelscope/swift) as the default accelerator for VLMs inference\n- \\[2024/07\\] Support Llama3.1 8B, 70B and its TOOLS CALLING\n- \\[2024/07\\] Support [InternVL2](docs/en/multi_modal/internvl.md) full-series models, [InternLM-XComposer2.5](docs/en/multi_modal/xcomposer2d5.md) and [function call](docs/en/llm/api_server_tools.md) of InternLM2.5\n- \\[2024/06\\] PyTorch engine support DeepSeek-V2 and several VLMs, such as CogVLM2, Mini-InternVL, LlaVA-Next\n- \\[2024/05\\] Balance vision model when deploying VLMs with multiple GPUs\n- \\[2024/05\\] Support 4-bits weight-only quantization and inference on VLMs, such as InternVL v1.5, LLaVa, InternLMXComposer2\n- \\[2024/04\\] Support Llama3 and more VLMs, such as InternVL v1.1, v1.2, MiniGemini, InternLMXComposer2.\n- \\[2024/04\\] TurboMind adds online int8/int4 KV cache quantization and inference for all supported devices. Refer [here](docs/en/quantization/kv_quant.md) for detailed guide\n- \\[2024/04\\] TurboMind latest upgrade boosts GQA, rocketing the [internlm2-20b](https://huggingface.co/internlm/internlm2-20b) model inference to 16+ RPS, about 1.8x faster than vLLM.\n- \\[2024/04\\] Support Qwen1.5-MOE and dbrx.\n- \\[2024/03\\] Support DeepSeek-VL offline inference pipeline and serving.\n- \\[2024/03\\] Support VLM offline inference pipeline and serving.\n- \\[2024/02\\] Support Qwen 1.5, Gemma, Mistral, Mixtral, Deepseek-MOE and so on.\n- \\[2024/01\\] [OpenAOE](https://github.com/InternLM/OpenAOE) seamless integration with [LMDeploy Serving Service](docs/en/llm/api_server.md).\n- \\[2024/01\\] Support for multi-model, multi-machine, multi-card inference services. For usage instructions, please refer to [here](docs/en/llm/proxy_server.md)\n- \\[2024/01\\] Support [PyTorch inference engine](./docs/en/inference/pytorch.md), developed entirely in Python, helping to lower the barriers for developers and enable  rapid experimentation with new features and technologies.\n\n</details>\n\n<details close>\n<summary><b>2023</b></summary>\n\n- \\[2023/12\\] Turbomind supports multimodal input.\n- \\[2023/11\\] Turbomind supports loading hf model directly. Click [here](docs/en/inference/load_hf.md) for details.\n- \\[2023/11\\] TurboMind major upgrades, including: Paged Attention, faster attention kernels without sequence length limitation, 2x faster KV8 kernels, Split-K decoding (Flash Decoding), and W4A16 inference for sm_75\n- \\[2023/09\\] TurboMind supports Qwen-14B\n- \\[2023/09\\] TurboMind supports InternLM-20B\n- \\[2023/09\\] TurboMind supports all features of Code Llama: code completion, infilling, chat / instruct, and python specialist. Click [here](./docs/en/llm/codellama.md) for deployment guide\n- \\[2023/09\\] TurboMind supports Baichuan2-7B\n- \\[2023/08\\] TurboMind supports flash-attention2.\n- \\[2023/08\\] TurboMind supports Qwen-7B, dynamic NTK-RoPE scaling and dynamic logN scaling\n- \\[2023/08\\] TurboMind supports Windows (tp=1)\n- \\[2023/08\\] TurboMind supports 4-bit inference, 2.4x faster than FP16, the fastest open-source implementation. Check [this](docs/en/quantization/w4a16.md) guide for detailed info\n- \\[2023/08\\] LMDeploy has launched on the [HuggingFace Hub](https://huggingface.co/lmdeploy), providing ready-to-use 4-bit models.\n- \\[2023/08\\] LMDeploy supports 4-bit quantization using the [AWQ](https://arxiv.org/abs/2306.00978) algorithm.\n- \\[2023/07\\] TurboMind supports Llama-2 70B with GQA.\n- \\[2023/07\\] TurboMind supports Llama-2 7B/13B.\n- \\[2023/07\\] TurboMind supports tensor-parallel inference of InternLM.\n\n</details>\n\n______________________________________________________________________\n\n# Introduction\n\nLMDeploy is a toolkit for compressing, deploying, and serving LLM, developed by the [MMRazor](https://github.com/open-mmlab/mmrazor) and [MMDeploy](https://github.com/open-mmlab/mmdeploy) teams. It has the following core features:\n\n- **Efficient Inference**: LMDeploy delivers up to 1.8x higher request throughput than vLLM, by introducing key features like persistent batch(a.k.a. continuous batching), blocked KV cache, dynamic split&fuse, tensor parallelism, high-performance CUDA kernels and so on.\n\n- **Effective Quantization**: LMDeploy supports weight-only and k/v quantization, and the 4-bit inference performance is 2.4x higher than FP16. The quantization quality has been confirmed via OpenCompass evaluation.\n\n- **Effortless Distribution Server**: Leveraging the request distribution service, LMDeploy facilitates an easy and efficient deployment of multi-model services across multiple machines and cards.\n\n- **Interactive Inference Mode**: By caching the k/v of attention during multi-round dialogue processes, the engine remembers dialogue history, thus avoiding repetitive processing of historical sessions.\n\n- **Excellent Compatibility**: LMDeploy supports [KV Cache Quant](docs/en/quantization/kv_quant.md), [AWQ](docs/en/quantization/w4a16.md) and [Automatic Prefix Caching](docs/en/inference/turbomind_config.md) to be used simultaneously.\n\n# Performance\n\n![v0 1 0-benchmark](https://github.com/InternLM/lmdeploy/assets/4560679/8e455cf1-a792-4fa8-91a2-75df96a2a5ba)\n\nFor detailed inference benchmarks in more devices and more settings, please refer to the following link:\n\n- [A100](./docs/en/benchmark/a100_fp16.md)\n- V100\n- 4090\n- 3090\n- 2080\n\n# Supported Models\n\n<table>\n<tbody>\n<tr align=\"center\" valign=\"middle\">\n<td>\n  <b>LLMs</b>\n</td>\n<td>\n  <b>VLMs</b>\n</td>\n<tr valign=\"top\">\n<td align=\"left\" valign=\"top\">\n<ul>\n  <li>Llama (7B - 65B)</li>\n  <li>Llama2 (7B - 70B)</li>\n  <li>Llama3 (8B, 70B)</li>\n  <li>Llama3.1 (8B, 70B)</li>\n  <li>Llama3.2 (1B, 3B)</li>\n  <li>InternLM (7B - 20B)</li>\n  <li>InternLM2 (7B - 20B)</li>\n  <li>InternLM2.5 (7B)</li>\n  <li>Qwen (1.8B - 72B)</li>\n  <li>Qwen1.5 (0.5B - 110B)</li>\n  <li>Qwen1.5 - MoE (0.5B - 72B)</li>\n  <li>Qwen2 (0.5B - 72B)</li>\n  <li>Qwen2-MoE (57BA14B)</li>\n  <li>Qwen2.5 (0.5B - 32B)</li>\n  <li>Baichuan (7B)</li>\n  <li>Baichuan2 (7B-13B)</li>\n  <li>Code Llama (7B - 34B)</li>\n  <li>ChatGLM2 (6B)</li>\n  <li>GLM4 (9B)</li>\n  <li>CodeGeeX4 (9B)</li>\n  <li>Falcon (7B - 180B)</li>\n  <li>YI (6B-34B)</li>\n  <li>Mistral (7B)</li>\n  <li>DeepSeek-MoE (16B)</li>\n  <li>DeepSeek-V2 (16B, 236B)</li>\n  <li>DeepSeek-V2.5 (236B)</li>\n  <li>Mixtral (8x7B, 8x22B)</li>\n  <li>Gemma (2B - 7B)</li>\n  <li>Dbrx (132B)</li>\n  <li>StarCoder2 (3B - 15B)</li>\n  <li>Phi-3-mini (3.8B)</li>\n  <li>Phi-3.5-mini (3.8B)</li>\n  <li>Phi-3.5-MoE (16x3.8B)</li>\n  <li>MiniCPM3 (4B)</li>\n</ul>\n</td>\n<td>\n<ul>\n  <li>LLaVA(1.5,1.6) (7B-34B)</li>\n  <li>InternLM-XComposer2 (7B, 4khd-7B)</li>\n  <li>InternLM-XComposer2.5 (7B)</li>\n  <li>Qwen-VL (7B)</li>\n  <li>Qwen2-VL (2B, 7B, 72B)</li>\n  <li>DeepSeek-VL (7B)</li>\n  <li>InternVL-Chat (v1.1-v1.5)</li>\n  <li>InternVL2 (1B-76B)</li>\n  <li>Mono-InternVL (2B)</li>\n  <li>ChemVLM (8B-26B)</li>\n  <li>MiniGeminiLlama (7B)</li>\n  <li>CogVLM-Chat (17B)</li>\n  <li>CogVLM2-Chat (19B)</li>\n  <li>MiniCPM-Llama3-V-2_5</li>\n  <li>MiniCPM-V-2_6</li>\n  <li>Phi-3-vision (4.2B)</li>\n  <li>Phi-3.5-vision (4.2B)</li>\n  <li>GLM-4V (9B)</li>\n  <li>Llama3.2-vision (11B, 90B)</li>\n  <li>Molmo (7B-D,72B)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nLMDeploy has developed two inference engines - [TurboMind](./docs/en/inference/turbomind.md) and [PyTorch](./docs/en/inference/pytorch.md), each with a different focus. The former strives for ultimate optimization of inference performance, while the latter, developed purely in Python, aims to decrease the barriers for developers.\n\nThey differ in the types of supported models and the inference data type. Please refer to [this table](./docs/en/supported_models/supported_models.md) for each engine's capability and choose the proper one that best fits your actual needs.\n\n# Quick Start [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Dh-YlSwg78ZO3AlleO441NF_QP2shs95#scrollTo=YALmXnwCG1pQ)\n\n## Installation\n\nIt is recommended installing lmdeploy using pip in a conda environment (python 3.8 - 3.12):\n\n```shell\nconda create -n lmdeploy python=3.8 -y\nconda activate lmdeploy\npip install lmdeploy\n```\n\nThe default prebuilt package is compiled on **CUDA 12** since v0.3.0.\nFor more information on installing on CUDA 11+ platform, or for instructions on building from source, please refer to the [installation guide](docs/en/get_started/installation.md).\n\n## Offline Batch Inference\n\n```python\nimport lmdeploy\npipe = lmdeploy.pipeline(\"internlm/internlm2-chat-7b\")\nresponse = pipe([\"Hi, pls intro yourself\", \"Shanghai is\"])\nprint(response)\n```\n\n> \\[!NOTE\\]\n> By default, LMDeploy downloads model from HuggingFace. If you would like to use models from ModelScope, please install ModelScope by `pip install modelscope` and set the environment variable:\n>\n> `export LMDEPLOY_USE_MODELSCOPE=True`\n>\n> If you would like to use models from openMind Hub, please install openMind Hub by `pip install openmind_hub` and set the environment variable:\n>\n> `export LMDEPLOY_USE_OPENMIND_HUB=True`\n\nFor more information about inference pipeline, please refer to [here](docs/en/llm/pipeline.md).\n\n# Tutorials\n\nPlease review [getting_started](docs/en/get_started/get_started.md) section for the basic usage of LMDeploy.\n\nFor detailed user guides and advanced guides, please refer to our [tutorials](https://lmdeploy.readthedocs.io/en/latest/):\n\n- User Guide\n  - [LLM Inference pipeline](docs/en/llm/pipeline.md) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Dh-YlSwg78ZO3AlleO441NF_QP2shs95#scrollTo=YALmXnwCG1pQ)\n  - [VLM Inference pipeline](docs/en/multi_modal/vl_pipeline.md) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1nKLfnPeDA3p-FMNw2NhI-KOpk7-nlNjF?usp=sharing)\n  - [LLM Serving](docs/en/llm/api_server.md)\n  - [VLM Serving](docs/en/multi_modal/api_server_vl.md)\n  - [Quantization](docs/en/quantization)\n- Advance Guide\n  - [Inference Engine - TurboMind](docs/en/inference/turbomind.md)\n  - [Inference Engine - PyTorch](docs/en/inference/pytorch.md)\n  - [Customize chat templates](docs/en/advance/chat_template.md)\n  - [Add a new model](docs/en/advance/pytorch_new_model.md)\n  - gemm tuning\n  - [Long context inference](docs/en/advance/long_context.md)\n  - [Multi-model inference service](docs/en/llm/proxy_server.md)\n\n# Third-party projects\n\n- Deploying LLMs offline on the NVIDIA Jetson platform by LMDeploy: [LMDeploy-Jetson](https://github.com/BestAnHongjun/LMDeploy-Jetson)\n\n- Example project for deploying LLMs using LMDeploy and BentoML: [BentoLMDeploy](https://github.com/bentoml/BentoLMDeploy)\n\n# Contributing\n\nWe appreciate all contributions to LMDeploy. Please refer to [CONTRIBUTING.md](.github/CONTRIBUTING.md) for the contributing guideline.\n\n# Acknowledgement\n\n- [FasterTransformer](https://github.com/NVIDIA/FasterTransformer)\n- [llm-awq](https://github.com/mit-han-lab/llm-awq)\n- [vLLM](https://github.com/vllm-project/vllm)\n- [DeepSpeed-MII](https://github.com/microsoft/DeepSpeed-MII)\n\n# Citation\n\n```bibtex\n@misc{2023lmdeploy,\n    title={LMDeploy: A Toolkit for Compressing, Deploying, and Serving LLM},\n    author={LMDeploy Contributors},\n    howpublished = {\\url{https://github.com/InternLM/lmdeploy}},\n    year={2023}\n}\n```\n\n# License\n\nThis project is released under the [Apache 2.0 license](LICENSE).\n"
        },
        {
          "name": "README_ja.md",
          "type": "blob",
          "size": 14.7490234375,
          "content": "<div align=\"center\">\n  <img src=\"docs/en/_static/image/lmdeploy-logo.svg\" width=\"450\"/>\n\n[![PyPI](https://img.shields.io/pypi/v/lmdeploy)](https://pypi.org/project/lmdeploy)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/lmdeploy)\n[![license](https://img.shields.io/github/license/InternLM/lmdeploy.svg)](https://github.com/InternLM/lmdeploy/tree/main/LICENSE)\n[![issue resolution](https://img.shields.io/github/issues-closed-raw/InternLM/lmdeploy)](https://github.com/InternLM/lmdeploy/issues)\n[![open issues](https://img.shields.io/github/issues-raw/InternLM/lmdeploy)](https://github.com/InternLM/lmdeploy/issues)\n\n[📘Documentation](https://lmdeploy.readthedocs.io/en/latest/) |\n[🛠️Quick Start](https://lmdeploy.readthedocs.io/en/latest/get_started/get_started.html) |\n[🤔Reporting Issues](https://github.com/InternLM/lmdeploy/issues/new/choose)\n\n[English](README.md) | [简体中文](README_zh-CN.md) | 日本語\n\n👋 join us on [![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=wechat&label=WeChat)](https://cdn.vansin.top/internlm/lmdeploy.jpg)\n[![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=twitter&label=Twitter)](https://twitter.com/intern_lm)\n[![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=discord&label=Discord)](https://discord.gg/xa29JuW87d)\n\n</div>\n\n______________________________________________________________________\n\n## 最新ニュース 🎉\n\n<details open>\n<summary><b>2024</b></summary>\n\n- \\[2024/08\\] 🔥🔥 LMDeployは[modelscope/swift](https://github.com/modelscope/swift)に統合され、VLMs推論のデフォルトアクセラレータとなりました\n- \\[2024/07\\] 🎉🎉 Llama3.1 8B、70Bおよびそのツールコールをサポート\n- \\[2024/07\\] [InternVL2](https://huggingface.co/collections/OpenGVLab/internvl-20-667d3961ab5eb12c7ed1463e)全シリーズモデル、[InternLM-XComposer2.5](docs/en/multi_modal/xcomposer2d5.md)およびInternLM2.5の[ファンクションコール](docs/en/llm/api_server_tools.md)をサポート\n- \\[2024/06\\] PyTorchエンジンはDeepSeek-V2およびいくつかのVLMs、例えばCogVLM2、Mini-InternVL、LlaVA-Nextをサポート\n- \\[2024/05\\] 複数のGPUでVLMsをデプロイする際にビジョンモデルをバランスさせる\n- \\[2024/05\\] InternVL v1.5、LLaVa、InternLMXComposer2などのVLMsで4ビットの重みのみの量子化と推論をサポート\n- \\[2024/04\\] Llama3およびInternVL v1.1、v1.2、MiniGemini、InternLMXComposer2などのVLMモデルをサポート\n- \\[2024/04\\] TurboMindはすべてのサポートされているデバイスでのオンラインint8/int4 KVキャッシュ量子化と推論を追加しました。詳細なガイドは[こちら](docs/en/quantization/kv_quant.md)を参照してください\n- \\[2024/04\\] TurboMindの最新アップグレードによりGQAが強化され、[internlm2-20b](https://huggingface.co/internlm/internlm2-20b)モデルの推論が16+ RPSに達し、vLLMの約1.8倍の速さになりました\n- \\[2024/04\\] Qwen1.5-MOEおよびdbrxをサポート\n- \\[2024/03\\] DeepSeek-VLのオフライン推論パイプラインとサービングをサポート\n- \\[2024/03\\] VLMのオフライン推論パイプラインとサービングをサポート\n- \\[2024/02\\] Qwen 1.5、Gemma、Mistral、Mixtral、Deepseek-MOEなどをサポート\n- \\[2024/01\\] [OpenAOE](https://github.com/InternLM/OpenAOE)が[LMDeployサービングサービス](./docs/en/llm/api_server.md)とシームレスに統合されました\n- \\[2024/01\\] 複数モデル、複数マシン、複数カードの推論サービスをサポート。使用方法は[こちら](./docs/en/llm/proxy_server.md)を参照してください\n- \\[2024/01\\] [PyTorch推論エンジン](./docs/en/inference/pytorch.md)をサポートし、完全にPythonで開発されており、開発者の障壁を下げ、新機能や技術の迅速な実験を可能にします\n\n</details>\n\n<details close>\n<summary><b>2023</b></summary>\n\n- \\[2023/12\\] Turbomindはマルチモーダル入力をサポート\n- \\[2023/11\\] Turbomindはhfモデルの直接読み込みをサポート。詳細は[こちら](docs/en/inference/load_hf.md)をクリックしてください\n- \\[2023/11\\] TurboMindの主要なアップグレード、包括的なPaged Attention、シーケンス長制限のない高速なアテンションカーネル、2倍速いKV8カーネル、Split-Kデコーディング（Flash Decoding）、およびsm_75のW4A16推論\n- \\[2023/09\\] TurboMindはQwen-14Bをサポート\n- \\[2023/09\\] TurboMindはInternLM-20Bをサポート\n- \\[2023/09\\] TurboMindはCode Llamaのすべての機能をサポート：コード補完、インフィリング、チャット/インストラクト、Pythonスペシャリスト。デプロイメントガイドは[こちら](./docs/en/llm/codellama.md)をクリックしてください\n- \\[2023/09\\] TurboMindはBaichuan2-7Bをサポート\n- \\[2023/08\\] TurboMindはflash-attention2をサポート\n- \\[2023/08\\] TurboMindはQwen-7B、動的NTK-RoPEスケーリング、動的logNスケーリングをサポート\n- \\[2023/08\\] TurboMindはWindowsをサポート（tp=1）\n- \\[2023/08\\] TurboMindは4ビット推論をサポートし、FP16の2.4倍の速さで、最速のオープンソース実装です。詳細な情報は[こちら](docs/en/quantization/w4a16.md)のガイドを確認してください\n- \\[2023/08\\] LMDeployは[HuggingFace Hub](https://huggingface.co/lmdeploy)で提供され、すぐに使用できる4ビットモデルを提供します\n- \\[2023/08\\] LMDeployは[AWQ](https://arxiv.org/abs/2306.00978)アルゴリズムを使用した4ビット量子化をサポート\n- \\[2023/07\\] TurboMindはGQAを使用したLlama-2 70Bをサポート\n- \\[2023/07\\] TurboMindはLlama-2 7B/13Bをサポート\n- \\[2023/07\\] TurboMindはInternLMのテンソル並列推論をサポート\n\n</details>\n\n______________________________________________________________________\n\n# 紹介\n\nLMDeployは、[MMRazor](https://github.com/open-mmlab/mmrazor)および[MMDeploy](https://github.com/open-mmlab/mmdeploy)チームによって開発された、LLMの圧縮、デプロイ、およびサービングのためのツールキットです。以下の主要な機能を備えています：\n\n- **効率的な推論**：LMDeployは、persistent batch（連続バッチ）、ブロック化されたKVキャッシュ、動的分割と融合、テンソル並列、高性能なCUDAカーネルなどの主要な機能を導入し、vLLMよりも最大1.8倍のリクエストスループットを提供します。\n\n- **効果的な量子化**：LMDeployは、重みのみおよびk/vの量子化をサポートし、4ビットの推論性能はFP16の2.4倍です。量子化の品質はOpenCompassの評価を通じて確認されています。\n\n- **簡単な分散サーバー**：リクエスト分散サービスを活用することで、LMDeployは複数のマシンおよびカードにわたるマルチモデルサービスのデプロイを容易にします。\n\n- **インタラクティブな推論モード**：マルチラウンドの対話プロセス中にアテンションのk/vをキャッシュすることで、エンジンは対話履歴を記憶し、履歴セッションの繰り返し処理を回避します。\n\n- **優れた互換性**：LMDeployは、[KV Cache Quant](docs/en/quantization/kv_quant.md)、[AWQ](docs/en/quantization/w4a16.md)、および[Automatic Prefix Caching](docs/en/inference/turbomind_config.md)を同時に使用することをサポートします。\n\n# パフォーマンス\n\nLMDeploy TurboMindエンジンは卓越した推論能力を持ち、さまざまな規模のモデルで、vLLMの1.36〜1.85倍のリクエストを毎秒処理します。静的推論能力の面では、TurboMind 4ビットモデルの推論速度（out token/s）はFP16/BF16推論をはるかに上回ります。小さなバッチでは、2.4倍に向上します。\n\n![v0 1 0-benchmark](https://github.com/InternLM/lmdeploy/assets/4560679/8e455cf1-a792-4fa8-91a2-75df96a2a5ba)\n\n詳細な推論ベンチマークについては、以下のリンクを参照してください：\n\n- [A100](./docs/en/benchmark/a100_fp16.md)\n- 4090\n- 3090\n- 2080\n\n# サポートされているモデル\n\n<table>\n<tbody>\n<tr align=\"center\" valign=\"middle\">\n<td>\n  <b>LLMs</b>\n</td>\n<td>\n  <b>VLMs</b>\n</td>\n<tr valign=\"top\">\n<td align=\"left\" valign=\"top\">\n<ul>\n  <li>Llama (7B - 65B)</li>\n  <li>Llama2 (7B - 70B)</li>\n  <li>Llama3 (8B, 70B)</li>\n  <li>Llama3.1 (8B, 70B)</li>\n  <li>Llama3.2 (1B, 3B)</li>\n  <li>InternLM (7B - 20B)</li>\n  <li>InternLM2 (7B - 20B)</li>\n  <li>InternLM2.5 (7B)</li>\n  <li>Qwen (1.8B - 72B)</li>\n  <li>Qwen1.5 (0.5B - 110B)</li>\n  <li>Qwen1.5 - MoE (0.5B - 72B)</li>\n  <li>Qwen2 (0.5B - 72B)</li>\n  <li>Qwen2-MoE (57BA14B)</li>\n  <li>Qwen2.5 (0.5B - 32B)</li>\n  <li>Baichuan (7B)</li>\n  <li>Baichuan2 (7B-13B)</li>\n  <li>Code Llama (7B - 34B)</li>\n  <li>ChatGLM2 (6B)</li>\n  <li>GLM4 (9B)</li>\n  <li>CodeGeeX4 (9B)</li>\n  <li>Falcon (7B - 180B)</li>\n  <li>YI (6B-34B)</li>\n  <li>Mistral (7B)</li>\n  <li>DeepSeek-MoE (16B)</li>\n  <li>DeepSeek-V2 (16B, 236B)</li>\n  <li>DeepSeek-V2.5 (236B)</li>\n  <li>Mixtral (8x7B, 8x22B)</li>\n  <li>Gemma (2B - 7B)</li>\n  <li>Dbrx (132B)</li>\n  <li>StarCoder2 (3B - 15B)</li>\n  <li>Phi-3-mini (3.8B)</li>\n  <li>Phi-3.5-mini (3.8B)</li>\n  <li>Phi-3.5-MoE (16x3.8B)</li>\n  <li>MiniCPM3 (4B)</li>\n</ul>\n</td>\n<td>\n<ul>\n  <li>LLaVA(1.5,1.6) (7B-34B)</li>\n  <li>InternLM-XComposer2 (7B, 4khd-7B)</li>\n  <li>InternLM-XComposer2.5 (7B)</li>\n  <li>Qwen-VL (7B)</li>\n  <li>DeepSeek-VL (7B)</li>\n  <li>InternVL-Chat (v1.1-v1.5)</li>\n  <li>InternVL2 (1B-76B)</li>\n  <li>Mono-InternVL (2B)</li>\n  <li>ChemVLM (8B-26B)</li>\n  <li>MiniGeminiLlama (7B)</li>\n  <li>CogVLM-Chat (17B)</li>\n  <li>CogVLM2-Chat (19B)</li>\n  <li>MiniCPM-Llama3-V-2_5</li>\n  <li>MiniCPM-V-2_6</li>\n  <li>Phi-3-vision (4.2B)</li>\n  <li>Phi-3.5-vision (4.2B)</li>\n  <li>GLM-4V (9B)</li>\n  <li>Llama3.2-vision (11B, 90B)</li>\n  <li>Molmo (7B-D,72B)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nLMDeployは、[TurboMind](./docs/en/inference/turbomind.md)および[PyTorch](./docs/en/inference/pytorch.md)の2つの推論エンジンを開発しました。それぞれ異なる焦点を持っています。前者は推論性能の究極の最適化を目指し、後者は完全にPythonで開発されており、開発者の障壁を下げることを目指しています。\n\nサポートされているモデルの種類や推論データタイプに違いがあります。各エンジンの能力については[この表](./docs/en/supported_models/supported_models.md)を参照し、実際のニーズに最適なものを選択してください。\n\n# クイックスタート [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Dh-YlSwg78ZO3AlleO441NF_QP2shs95#scrollTo=YALmXnwCG1pQ)\n\n## インストール\n\nクリーンなconda環境（Python 3.8 - 3.12）でlmdeployをインストールすることをお勧めします。\n\n```shell\nconda create -n lmdeploy python=3.8 -y\nconda activate lmdeploy\npip install lmdeploy\n```\n\nv0.3.0から、デフォルトの事前構築済みパッケージはCUDA 12でコンパイルされています。\nCUDA 11+プラットフォームでのインストールに関する情報、またはソースからのビルド手順については、[インストールガイドを](docs/en/get_started/installation.md)参照してください。\n\n## オフラインバッチ推論\n\n```python\nimport lmdeploy\npipe = lmdeploy.pipeline(\"internlm/internlm2-chat-7b\")\nresponse = pipe([\"Hi, pls intro yourself\", \"Shanghai is\"])\nprint(response)\n```\n\n> \\[!NOTE\\]\n> デフォルトでは、LMDeployはHuggingFaceからモデルをダウンロードします。ModelScopeからモデルを使用する場合は、`pip install modelscope`コマンドでModelScopeをインストールし、環境変数を設定してください：\n>\n> `export LMDEPLOY_USE_MODELSCOPE=True`\n>\n> openMind Hubからモデルを使用する場合は、`pip install openmind_hub`コマンドでopenMind Hubをインストールし、環境変数を設定してください：\n>\n> `export LMDEPLOY_USE_OPENMIND_HUB=True`\n\n推論パイプラインに関する詳細情報は[こちら](./docs/en/llm/pipeline.md)を参照してください。\n\n# チュートリアル\n\nLMDeployの基本的な使用方法については、[getting_started](docs/en/get_started/get_started.md)セクションを参照してください。\n\n詳細なユーザーガイドと高度なガイドについては、[チュートリアル](https://lmdeploy.readthedocs.io/en/latest/)を参照してください：\n\n- ユーザーガイド\n  - [LLM推論パイプライン](./docs/en/llm/pipeline.md) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Dh-YlSwg78ZO3AlleO441NF_QP2shs95#scrollTo=YALmXnwCG1pQ)\n  - [VLM推論パイプライン](./docs/en/multi_modal/vl_pipeline.md) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1nKLfnPeDA3p-FMNw2NhI-KOpk7-nlNjF?usp=sharing)\n  - [LLMサービング](docs/en/llm/api_server.md)\n  - [VLMサービング](docs/en/multi_modal/api_server_vl.md)\n  - [量子化](docs/en/quantization)\n- 高度なガイド\n  - [推論エンジン - TurboMind](docs/en/inference/turbomind.md)\n  - [推論エンジン - PyTorch](docs/en/inference/pytorch.md)\n  - [カスタムチャットテンプレート](docs/en/advance/chat_template.md)\n  - [新しいモデルの追加](docs/en/advance/pytorch_new_model.md)\n  - gemmチューニング\n  - [長文推論](docs/en/advance/long_context.md)\n  - [マルチモデル推論サービス](docs/en/llm/proxy_server.md)\n\n# サードパーティプロジェクト\n\n- LMDeployを使用してNVIDIA JetsonプラットフォームでLLMをオフラインでデプロイ：[LMDeploy-Jetson](https://github.com/BestAnHongjun/LMDeploy-Jetson)\n- LMDeployとBentoMLを使用してLLMをデプロイするためのサンプルプロジェクト：[BentoLMDeploy](https://github.com/bentoml/BentoLMDeploy)\n\n# 貢献\n\nLMDeployへのすべての貢献に感謝します。貢献ガイドラインについては、[CONTRIBUTING.md](.github/CONTRIBUTING.md)を参照してください。\n\n# 謝辞\n\n- [FasterTransformer](https://github.com/NVIDIA/FasterTransformer)\n- [llm-awq](https://github.com/mit-han-lab/llm-awq)\n- [vLLM](https://github.com/vllm-project/vllm)\n- [DeepSpeed-MII](https://github.com/microsoft/DeepSpeed-MII)\n\n# 引用\n\n```bibtex\n@misc{2023lmdeploy,\n    title={LMDeploy: A Toolkit for Compressing, Deploying, and Serving LLM},\n    author={LMDeploy Contributors},\n    howpublished = {\\url{https://github.com/InternLM/lmdeploy}},\n    year={2023}\n}\n```\n\n# ライセンス\n\nこのプロジェクトは[Apache 2.0ライセンス](LICENSE)の下でリリースされています。\n"
        },
        {
          "name": "README_zh-CN.md",
          "type": "blob",
          "size": 13.0078125,
          "content": "<div align=\"center\">\n  <img src=\"docs/en/_static/image/lmdeploy-logo.svg\" width=\"450\"/>\n\n[![PyPI](https://img.shields.io/pypi/v/lmdeploy)](https://pypi.org/project/lmdeploy)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/lmdeploy)\n[![license](https://img.shields.io/github/license/InternLM/lmdeploy.svg)](https://github.com/InternLM/lmdeploy/tree/main/LICENSE)\n[![issue resolution](https://img.shields.io/github/issues-closed-raw/InternLM/lmdeploy)](https://github.com/InternLM/lmdeploy/issues)\n[![open issues](https://img.shields.io/github/issues-raw/InternLM/lmdeploy)](https://github.com/InternLM/lmdeploy/issues)\n\n[📘Documentation](https://lmdeploy.readthedocs.io/zh-cn/latest/) |\n[🛠️Quick Start](https://lmdeploy.readthedocs.io/zh-cn/latest/get_started/get_started.html) |\n[🤔Reporting Issues](https://github.com/InternLM/lmdeploy/issues/new/choose)\n\n[English](README.md) | 简体中文 | [日本語](README_ja.md)\n\n👋 join us on [![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=wechat&label=WeChat)](https://cdn.vansin.top/internlm/lmdeploy.jpg)\n[![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=twitter&label=Twitter)](https://twitter.com/intern_lm)\n[![Static Badge](https://img.shields.io/badge/-grey?style=social&logo=discord&label=Discord)](https://discord.gg/xa29JuW87d)\n\n</div>\n\n______________________________________________________________________\n\n## 最新进展 🎉\n\n<details open>\n<summary><b>2024</b></summary>\n\n- \\[2024/11\\] PyTorch engine 支持 Mono-InternVL 模型\n- \\[2024/10\\] PyTorchEngine 在 ascend 平台上支持了图模式，推理性能提高了 1 倍\n- \\[2024/09\\] LMDeploy PyTorchEngine 增加了对 [华为 Ascend](docs/zh_cn/get_started/ascend/get_started.md) 的支持。支持的模型请见[这里](docs/zh_cn/supported_models/supported_models.md)\n- \\[2024/09\\] 通过引入 CUDA Graph，LMDeploy PyTorchEngine 在 Llama3-8B 推理上实现了 1.3 倍的加速\n- \\[2024/08\\] LMDeploy现已集成至 [modelscope/swift](https://github.com/modelscope/swift)，成为 VLMs 推理的默认加速引擎\n- \\[2024/07\\] 支持 Llama3.1 8B 和 70B 模型，以及工具调用功能\n- \\[2024/07\\] 支持 [InternVL2](docs/zh_cn/multi_modal/internvl.md) 全系列模型，[InternLM-XComposer2.5](docs/zh_cn/multi_modal/xcomposer2d5.md) 模型和 InternLM2.5 的 [function call 功能](docs/zh_cn/llm/api_server_tools.md)\n- \\[2024/06\\] PyTorch engine 支持了 DeepSeek-V2 和若干 VLM 模型推理, 比如 CogVLM2，Mini-InternVL，LlaVA-Next\n- \\[2024/05\\] 在多 GPU 上部署 VLM 模型时，支持把视觉部分的模型均分到多卡上\n- \\[2024/05\\] 支持InternVL v1.5, LLaVa, InternLMXComposer2 等 VLMs 模型的 4bit 权重量化和推理\n- \\[2024/04\\] 支持 Llama3 和 InternVL v1.1, v1.2，MiniGemini，InternLM-XComposer2 等 VLM 模型\n- \\[2024/04\\] TurboMind 支持 kv cache int4/int8 在线量化和推理，适用已支持的所有型号显卡。详情请参考[这里](docs/zh_cn/quantization/kv_quant.md)\n- \\[2024/04\\] TurboMind 引擎升级，优化 GQA 推理。[internlm2-20b](https://huggingface.co/internlm/internlm2-20b) 推理速度达 16+ RPS，约是 vLLM 的 1.8 倍\n- \\[2024/04\\] 支持 Qwen1.5-MOE 和 dbrx.\n- \\[2024/03\\] 支持 DeepSeek-VL 的离线推理 pipeline 和推理服务\n- \\[2024/03\\] 支持视觉-语言模型（VLM）的离线推理 pipeline 和推理服务\n- \\[2024/02\\] 支持 Qwen 1.5、Gemma、Mistral、Mixtral、Deepseek-MOE 等模型\n- \\[2024/01\\] [OpenAOE](https://github.com/InternLM/OpenAOE) 发布，支持无缝接入[LMDeploy Serving Service](docs/zh_cn/llm/api_server.md)\n- \\[2024/01\\] 支持多模型、多机、多卡推理服务。使用方法请参考[此处](docs/zh_cn/llm/proxy_server.md)\n- \\[2024/01\\] 增加 [PyTorch 推理引擎](./docs/zh_cn/inference/pytorch.md)，作为 TurboMind 引擎的补充。帮助降低开发门槛，和快速实验新特性、新技术\n\n</details>\n\n<details close>\n<summary><b>2023</b></summary>\n\n- \\[2023/12\\] Turbomind 支持多模态输入\n- \\[2023/11\\] Turbomind 支持直接读取 Huggingface 模型。点击[这里](docs/zh_cn/inference/load_hf.md)查看使用方法\n- \\[2023/11\\] TurboMind 重磅升级。包括：Paged Attention、更快的且不受序列最大长度限制的 attention kernel、2+倍快的 KV8 kernels、Split-K decoding (Flash Decoding) 和 支持 sm_75 架构的 W4A16\n- \\[2023/09\\] TurboMind 支持 Qwen-14B\n- \\[2023/09\\] TurboMind 支持 InternLM-20B 模型\n- \\[2023/09\\] TurboMind 支持 Code Llama 所有功能：代码续写、填空、对话、Python专项。点击[这里](./docs/zh_cn/llm/codellama.md)阅读部署方法\n- \\[2023/09\\] TurboMind 支持 Baichuan2-7B\n- \\[2023/08\\] TurboMind 支持 flash-attention2\n- \\[2023/08\\] TurboMind 支持 Qwen-7B，动态NTK-RoPE缩放，动态logN缩放\n- \\[2023/08\\] TurboMind 支持 Windows (tp=1)\n- \\[2023/08\\] TurboMind 支持 4-bit 推理，速度是 FP16 的 2.4 倍，是目前最快的开源实现。部署方式请看[这里](docs/zh_cn/quantization/w4a16.md)\n- \\[2023/08\\] LMDeploy 开通了 [HuggingFace Hub](https://huggingface.co/lmdeploy) ，提供开箱即用的 4-bit 模型\n- \\[2023/08\\] LMDeploy 支持使用 [AWQ](https://arxiv.org/abs/2306.00978) 算法进行 4-bit 量化\n- \\[2023/07\\] TurboMind 支持使用 GQA 的 Llama-2 70B 模型\n- \\[2023/07\\] TurboMind 支持 Llama-2 7B/13B 模型\n- \\[2023/07\\] TurboMind 支持 InternLM 的 Tensor Parallel 推理\n\n</details>\n______________________________________________________________________\n\n# 简介\n\nLMDeploy 由 [MMDeploy](https://github.com/open-mmlab/mmdeploy) 和 [MMRazor](https://github.com/open-mmlab/mmrazor) 团队联合开发，是涵盖了 LLM 任务的全套轻量化、部署和服务解决方案。\n这个强大的工具箱提供以下核心功能：\n\n- **高效的推理**：LMDeploy 开发了 Persistent Batch(即 Continuous Batch)，Blocked K/V Cache，动态拆分和融合，张量并行，高效的计算 kernel等重要特性。推理性能是 vLLM 的 1.8 倍\n\n- **可靠的量化**：LMDeploy 支持权重量化和 k/v 量化。4bit 模型推理效率是 FP16 下的 2.4 倍。量化模型的可靠性已通过 OpenCompass 评测得到充分验证。\n\n- **便捷的服务**：通过请求分发服务，LMDeploy 支持多模型在多机、多卡上的推理服务。\n\n- **有状态推理**：通过缓存多轮对话过程中 attention 的 k/v，记住对话历史，从而避免重复处理历史会话。显著提升长文本多轮对话场景中的效率。\n\n- **卓越的兼容性**: LMDeploy 支持 [KV Cache 量化](docs/zh_cn/quantization/kv_quant.md), [AWQ](docs/zh_cn/quantization/w4a16.md) 和 [Automatic Prefix Caching](docs/zh_cn/inference/turbomind_config.md) 同时使用。\n\n# 性能\n\nLMDeploy TurboMind 引擎拥有卓越的推理能力，在各种规模的模型上，每秒处理的请求数是 vLLM 的 1.36 ~ 1.85 倍。在静态推理能力方面，TurboMind 4bit 模型推理速度（out token/s）远高于 FP16/BF16 推理。在小 batch 时，提高到 2.4 倍。\n\n![v0 1 0-benchmark](https://github.com/InternLM/lmdeploy/assets/4560679/8e455cf1-a792-4fa8-91a2-75df96a2a5ba)\n\n更多设备、更多计算精度、更多setting下的的推理 benchmark，请参考以下链接：\n\n- [A100](./docs/en/benchmark/a100_fp16.md)\n- 4090\n- 3090\n- 2080\n\n# 支持的模型\n\n<table>\n<tbody>\n<tr align=\"center\" valign=\"middle\">\n<td>\n  <b>LLMs</b>\n</td>\n<td>\n  <b>VLMs</b>\n</td>\n<tr valign=\"top\">\n<td align=\"left\" valign=\"top\">\n<ul>\n  <li>Llama (7B - 65B)</li>\n  <li>Llama2 (7B - 70B)</li>\n  <li>Llama3 (8B, 70B)</li>\n  <li>Llama3.1 (8B, 70B)</li>\n  <li>Llama3.2 (1B, 3B)</li>\n  <li>InternLM (7B - 20B)</li>\n  <li>InternLM2 (7B - 20B)</li>\n  <li>InternLM2.5 (7B)</li>\n  <li>Qwen (1.8B - 72B)</li>\n  <li>Qwen1.5 (0.5B - 110B)</li>\n  <li>Qwen1.5 - MoE (0.5B - 72B)</li>\n  <li>Qwen2 (0.5B - 72B)</li>\n  <li>Qwen2-MoE (57BA14B)</li>\n  <li>Qwen2.5 (0.5B - 32B)</li>\n  <li>Baichuan (7B)</li>\n  <li>Baichuan2 (7B-13B)</li>\n  <li>Code Llama (7B - 34B)</li>\n  <li>ChatGLM2 (6B)</li>\n  <li>GLM4 (9B)</li>\n  <li>CodeGeeX4 (9B)</li>\n  <li>Falcon (7B - 180B)</li>\n  <li>YI (6B-34B)</li>\n  <li>Mistral (7B)</li>\n  <li>DeepSeek-MoE (16B)</li>\n  <li>DeepSeek-V2 (16B, 236B)</li>\n  <li>DeepSeek-V2.5 (236B)</li>\n  <li>Mixtral (8x7B, 8x22B)</li>\n  <li>Gemma (2B - 7B)</li>\n  <li>Dbrx (132B)</li>\n  <li>StarCoder2 (3B - 15B)</li>\n  <li>Phi-3-mini (3.8B)</li>\n  <li>Phi-3.5-mini (3.8B)</li>\n  <li>Phi-3.5-MoE (16x3.8B)</li>\n  <li>MiniCPM3 (4B)</li>\n</ul>\n</td>\n<td>\n<ul>\n  <li>LLaVA(1.5,1.6) (7B-34B)</li>\n  <li>InternLM-XComposer2 (7B, 4khd-7B)</li>\n  <li>InternLM-XComposer2.5 (7B)</li>\n  <li>Qwen-VL (7B)</li>\n  <li>Qwen2-VL (2B, 7B, 72B)</li>\n  <li>DeepSeek-VL (7B)</li>\n  <li>InternVL-Chat (v1.1-v1.5)</li>\n  <li>InternVL2 (1B-76B)</li>\n  <li>Mono-InternVL (2B)</li>\n  <li>ChemVLM (8B-26B)</li>\n  <li>MiniGeminiLlama (7B)</li>\n  <li>CogVLM-Chat (17B)</li>\n  <li>CogVLM2-Chat (19B)</li>\n  <li>MiniCPM-Llama3-V-2_5</li>\n  <li>MiniCPM-V-2_6</li>\n  <li>Phi-3-vision (4.2B)</li>\n  <li>Phi-3.5-vision (4.2B)</li>\n  <li>GLM-4V (9B)</li>\n  <li>Llama3.2-vision (11B, 90B)</li>\n  <li>Molmo (7B-D,72B)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nLMDeploy 支持 2 种推理引擎： [TurboMind](./docs/zh_cn/inference/turbomind.md) 和 [PyTorch](./docs/zh_cn/inference/pytorch.md)，它们侧重不同。前者追求推理性能的极致优化，后者纯用python开发，着重降低开发者的门槛。\n\n它们在支持的模型类别、计算精度方面有所差别。用户可参考[这里](./docs/zh_cn/supported_models/supported_models.md), 查阅每个推理引擎的能力，并根据实际需求选择合适的。\n\n# 快速开始 [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Dh-YlSwg78ZO3AlleO441NF_QP2shs95#scrollTo=YALmXnwCG1pQ)\n\n## 安装\n\n我们推荐在一个干净的conda环境下（python3.8 - 3.12），安装 lmdeploy：\n\n```shell\nconda create -n lmdeploy python=3.8 -y\nconda activate lmdeploy\npip install lmdeploy\n```\n\n自 v0.3.0 起，LMDeploy 预编译包默认基于 CUDA 12 编译。如果需要在 CUDA 11+ 下安装 LMDeploy，或者源码安装 LMDeploy，请参考[安装文档](docs/zh_cn/get_started/installation.md)\n\n## 离线批处理\n\n```python\nimport lmdeploy\npipe = lmdeploy.pipeline(\"internlm/internlm2-chat-7b\")\nresponse = pipe([\"Hi, pls intro yourself\", \"Shanghai is\"])\nprint(response)\n```\n\n> \\[!NOTE\\]\n> LMDeploy 默认从 HuggingFace 上面下载模型，如果要从 ModelScope 上面下载模型，请通过命令 `pip install modelscope` 安装ModelScope，并设置环境变量：\n>\n> `export LMDEPLOY_USE_MODELSCOPE=True`\n>\n> 如果要从 openMind Hub 上面下载模型，请通过命令 `pip install openmind_hub` 安装openMind Hub，并设置环境变量：\n>\n> `export LMDEPLOY_USE_OPENMIND_HUB=True`\n\n关于 pipeline 的更多推理参数说明，请参考[这里](docs/zh_cn/llm/pipeline.md)\n\n# 用户教程\n\n请阅读[快速上手](docs/zh_cn/get_started/get_started.md)章节，了解 LMDeploy 的基本用法。\n\n为了帮助用户更进一步了解 LMDeploy，我们准备了用户指南和进阶指南，请阅读我们的[文档](https://lmdeploy.readthedocs.io/zh-cn/latest/)：\n\n- 用户指南\n  - [LLM 推理 pipeline](docs/zh_cn/llm/pipeline.md) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Dh-YlSwg78ZO3AlleO441NF_QP2shs95#scrollTo=YALmXnwCG1pQ)\n  - [VLM 推理 pipeline](docs/zh_cn/multi_modal/vl_pipeline.md) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1nKLfnPeDA3p-FMNw2NhI-KOpk7-nlNjF?usp=sharing)\n  - [LLM 推理服务](docs/zh_cn/llm/api_server.md)\n  - [VLM 推理服务](docs/zh_cn/multi_modal/api_server_vl.md)\n  - [模型量化](./docs/zh_cn/quantization)\n- 进阶指南\n  - [推理引擎 - TurboMind](./docs/zh_cn/inference/turbomind.md)\n  - [推理引擎 - PyTorch](./docs/zh_cn/inference/pytorch.md)\n  - [自定义对话模板](./docs/zh_cn/advance/chat_template.md)\n  - [支持新模型](./docs/zh_cn/advance/pytorch_new_model.md)\n  - gemm tuning\n  - [长文本推理](./docs/zh_cn/advance/long_context.md)\n  - [多模型推理服务](docs/zh_cn/llm/proxy_server.md)\n\n# 社区项目\n\n- 使用LMDeploy在英伟达Jetson系列板卡部署大模型：[LMDeploy-Jetson](https://github.com/BestAnHongjun/LMDeploy-Jetson)\n- 使用 LMDeploy 和 BentoML 部署大模型的示例项目：[BentoLMDeploy](https://github.com/bentoml/BentoLMDeploy)\n\n# 贡献指南\n\n我们感谢所有的贡献者为改进和提升 LMDeploy 所作出的努力。请参考[贡献指南](.github/CONTRIBUTING.md)来了解参与项目贡献的相关指引。\n\n# 致谢\n\n- [FasterTransformer](https://github.com/NVIDIA/FasterTransformer)\n- [llm-awq](https://github.com/mit-han-lab/llm-awq)\n- [vLLM](https://github.com/vllm-project/vllm)\n- [DeepSpeed-MII](https://github.com/microsoft/DeepSpeed-MII)\n\n# 引用\n\n```bibtex\n@misc{2023lmdeploy,\n    title={LMDeploy: A Toolkit for Compressing, Deploying, and Serving LLM},\n    author={LMDeploy Contributors},\n    howpublished = {\\url{https://github.com/InternLM/lmdeploy}},\n    year={2023}\n}\n```\n\n# 开源许可证\n\n该项目采用 [Apache 2.0 开源许可证](LICENSE)。\n"
        },
        {
          "name": "autotest",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug.sh",
          "type": "blob",
          "size": 0.380859375,
          "content": "#!/bin/sh\n\nbuilder=\"-G Ninja\"\n\nif [ \"$1\" == \"make\" ]; then\n    builder=\"\"\nfi\n\ncmake ${builder} .. \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n    -DCMAKE_INSTALL_PREFIX=./install \\\n    -DBUILD_PY_FFI=ON \\\n    -DBUILD_MULTI_GPU=ON \\\n    -DCMAKE_CUDA_FLAGS=\"-lineinfo\" \\\n    -DUSE_NVTX=ON \\\n    -DPYTHON_EXECUTABLE=$(which python3) \\\n    -DBUILD_TEST=ON\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate.sh",
          "type": "blob",
          "size": 0.3818359375,
          "content": "#!/bin/bash\nWORKSPACE_PATH=$(dirname \"$(readlink -f \"$0\")\")\n\nbuilder=\"-G Ninja\"\n\nif [ \"$1\" == \"make\" ]; then\n    builder=\"\"\nfi\n\ncmake ${builder} .. \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n    -DCMAKE_INSTALL_PREFIX=${WORKSPACE_PATH}/install \\\n    -DBUILD_PY_FFI=ON \\\n    -DBUILD_MULTI_GPU=ON \\\n    -DCMAKE_CUDA_FLAGS=\"-lineinfo\" \\\n    -DUSE_NVTX=ON\n"
        },
        {
          "name": "k8s",
          "type": "tree",
          "content": null
        },
        {
          "name": "lmdeploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements_ascend.txt",
          "type": "blob",
          "size": 0.109375,
          "content": "-r requirements/build.txt\n-r requirements/runtime_ascend.txt\n-r requirements/lite.txt\n-r requirements/serve.txt\n"
        },
        {
          "name": "requirements_cuda.txt",
          "type": "blob",
          "size": 0.107421875,
          "content": "-r requirements/build.txt\n-r requirements/runtime_cuda.txt\n-r requirements/lite.txt\n-r requirements/serve.txt\n"
        },
        {
          "name": "requirements_maca.txt",
          "type": "blob",
          "size": 0.107421875,
          "content": "-r requirements/build.txt\n-r requirements/runtime_maca.txt\n-r requirements/lite.txt\n-r requirements/serve.txt\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.7353515625,
          "content": "import os\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\n\npwd = os.path.dirname(__file__)\nversion_file = 'lmdeploy/version.py'\n\n\ndef get_target_device():\n    return os.getenv('LMDEPLOY_TARGET_DEVICE', 'cuda')\n\n\ndef readme():\n    with open(os.path.join(pwd, 'README.md'), encoding='utf-8') as f:\n        content = f.read()\n    return content\n\n\ndef get_version():\n    with open(os.path.join(pwd, version_file), 'r') as f:\n        exec(compile(f.read(), version_file, 'exec'))\n    return locals()['__version__']\n\n\ndef check_ext_modules():\n    if os.path.exists(os.path.join(pwd, 'lmdeploy', 'lib')):\n        return True\n    return False\n\n\ndef get_cuda_pkgs():\n    arg_name = '--cuda='\n    arg_value = None\n    for arg in sys.argv[1:]:\n        if arg.startswith(arg_name):\n            arg_value = arg[len(arg_name):]\n            sys.argv.remove(arg)\n            break\n\n    cuda_pkgs = []\n    if arg_value == '11':\n        cuda_pkgs = [\n            'nvidia-nccl-cu11', 'nvidia-cuda-runtime-cu11',\n            'nvidia-cublas-cu11', 'nvidia-curand-cu11'\n        ]\n    elif arg_value == '12':\n        cuda_pkgs = [\n            'nvidia-nccl-cu12', 'nvidia-cuda-runtime-cu12',\n            'nvidia-cublas-cu12', 'nvidia-curand-cu12'\n        ]\n    return cuda_pkgs\n\n\ncuda_pkgs = get_cuda_pkgs()\n\n\ndef parse_requirements(fname='requirements.txt', with_version=True):\n    \"\"\"Parse the package dependencies listed in a file but strips specific\n    versioning information.\n\n    Args:\n        fname (str): path to the file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"\n    require_fpath = fname\n\n    def parse_line(line):\n        \"\"\"Parse information from a line in a requirements text file.\"\"\"\n        if line.startswith('-r '):\n            # Allow specifying requirements in other files\n            target = line.split(' ')[1]\n            for info in parse_require_file(target):\n                yield info\n        else:\n            info = {'line': line}\n            if line.startswith('-e '):\n                info['package'] = line.split('#egg=')[1]\n            elif '@git+' in line:\n                info['package'] = line\n            else:\n                # Remove versioning from the package\n                pat = '(' + '|'.join(['>=', '==', '>']) + ')'\n                parts = re.split(pat, line, maxsplit=1)\n                parts = [p.strip() for p in parts]\n\n                info['package'] = parts[0]\n                if len(parts) > 1:\n                    op, rest = parts[1:]\n                    if ';' in rest:\n                        # Handle platform specific dependencies\n                        # http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies\n                        version, platform_deps = map(str.strip,\n                                                     rest.split(';'))\n                        info['platform_deps'] = platform_deps\n                    else:\n                        version = rest  # NOQA\n                    info['version'] = (op, version)\n            yield info\n\n    def parse_require_file(fpath):\n        with open(fpath, 'r') as f:\n            for line in f.readlines():\n                line = line.strip()\n                if line and not line.startswith('#'):\n                    for info in parse_line(line):\n                        yield info\n\n    def gen_packages_items():\n        if os.path.exists(require_fpath):\n            for info in parse_require_file(require_fpath):\n                parts = [info['package']]\n                if with_version and 'version' in info:\n                    parts.extend(info['version'])\n                if not sys.version.startswith('3.4'):\n                    # apparently package_deps are broken in 3.4\n                    platform_deps = info.get('platform_deps')\n                    if platform_deps is not None:\n                        parts.append(';' + platform_deps)\n                item = ''.join(parts)\n                yield item\n\n    packages = list(gen_packages_items())\n    packages += cuda_pkgs\n    return packages\n\n\nif __name__ == '__main__':\n    lmdeploy_package_data = ['lmdeploy/bin/llama_gemm']\n    setup(\n        name='lmdeploy',\n        version=get_version(),\n        description='A toolset for compressing, deploying and serving LLM',\n        long_description=readme(),\n        long_description_content_type='text/markdown',\n        author='OpenMMLab',\n        author_email='openmmlab@gmail.com',\n        packages=find_packages(exclude=()),\n        package_data={\n            'lmdeploy': lmdeploy_package_data,\n        },\n        include_package_data=True,\n        setup_requires=parse_requirements('requirements/build.txt'),\n        tests_require=parse_requirements('requirements/test.txt'),\n        install_requires=parse_requirements(\n            f'requirements/runtime_{get_target_device()}.txt'),\n        extras_require={\n            'all':\n            parse_requirements(f'requirements_{get_target_device()}.txt'),\n            'lite': parse_requirements('requirements/lite.txt'),\n            'serve': parse_requirements('requirements/serve.txt')\n        },\n        has_ext_modules=check_ext_modules,\n        classifiers=[\n            'Programming Language :: Python :: 3.8',\n            'Programming Language :: Python :: 3.9',\n            'Programming Language :: Python :: 3.10',\n            'Programming Language :: Python :: 3.11',\n            'Programming Language :: Python :: 3.12',\n            'Intended Audience :: Developers',\n            'Intended Audience :: Education',\n            'Intended Audience :: Science/Research',\n        ],\n        entry_points={'console_scripts': ['lmdeploy = lmdeploy.cli:run']},\n    )\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}