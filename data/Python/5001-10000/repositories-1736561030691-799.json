{
  "metadata": {
    "timestamp": 1736561030691,
    "page": 799,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/TinyTroupe",
      "stars": 5203,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.local",
          "type": "blob",
          "size": 0.0966796875,
          "content": "# Define the OpenAI API key here if you want to use a local .env file for that.\nOPENAI_API_KEY=...."
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0478515625,
          "content": "*.cache.json filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1064453125,
          "content": "#other\n*.pickle\n.llmapi.bin\n*.cache.*\ntests_cache.pickle\n*.local.*\n.VSCodeCounter/\n.vscode/\n\noutputs/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1142578125,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1455078125,
          "content": "recursive-include tinytroupe *.ini\nrecursive-include tinytroupe *.py\nrecursive-include tinytroupe *.md *.mustache\nrecursive-include tinytroupe *.json"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.943359375,
          "content": "# TinyTroupe ü§†ü§ìü•∏üßê\n*LLM-powered multiagent persona simulation for imagination enhancement and business insights.*\n\n<p align=\"center\">\n  <img src=\"./docs/tinytroupe_stage.png\" alt=\"A tiny office with tiny people doing some tiny jobs.\">\n</p>\n\n*TinyTroupe* is an experimental Python library that allows the **simulation** of people with specific personalities, interests, and goals. These artificial agents - `TinyPerson`s - can listen to us and one another, reply back, and go about their lives in simulated `TinyWorld` environments. This is achieved by leveraging the power of Large Language Models (LLMs), notably GPT-4, to generate realistic simulated behavior. This allow us to investigate a wide range of **convincing interactions** and **consumer types**, with **highly customizable personas**, under **conditions of our choosing**. The focus is thus on *understanding* human behavior and not on directly *supporting it* (like, say, AI assistants do) -- this results in, among other things, specialized mechanisms that make sense only in a simulation setting. Further, unlike other *game-like* LLM-based simulation approaches, TinyTroupe aims at enlightening productivity and business scenarios, thereby contributing to more successful projects and products. Here are some application ideas to **enhance human imagination**:\n\n  - **Advertisement:** TinyTroupe can **evaluate digital ads (e.g., Bing Ads)** offline with a simulated audience before spending money on them!\n  - **Software Testing:** TinyTroupe can **provide test input** to systems (e.g., search engines, chatbots or copilots) and then **evaluate the results**.\n  - **Training and exploratory data:** TinyTroupe can generate realistic **synthetic data** that can be later used to train models or be subject to opportunity analyses.\n  - **Product and project management:** TinyTroupe can **read project or product proposals** and **give feedback** from the perspective of **specific personas** (e.g., physicians, lawyers, and knowledge workers in general).\n  - **Brainstorming:** TinyTroupe can simulate **focus groups** and deliver great product feedback at a fraction of the cost!\n\nIn all of the above, and many others, we hope experimenters can **gain insights** about their domain of interest, and thus make better decisions. \n\nWe are releasing *TinyTroupe* at a relativelly early stage, with considerable work still to be done, because we are looking for feedback and contributions to steer development in productive directions. We are particularly interested in finding new potential use cases, for instance in specific industries. \n\n>[!NOTE] \n>üöß **WORK IN PROGRESS: expect frequent changes**.\n>TinyTroupe is an ongoing research project, still under **very significant development** and requiring further **tidying up**. In particular, the API is still subject to frequent changes. Experimenting with API variations is essential to shape it correctly, but we are working to stabilize it and provide a more consistent and friendly experience over time. We appreciate your patience and feedback as we continue to improve the library.\n\n>[!CAUTION] \n>‚öñÔ∏è **Read the LEGAL DISCLAIMER.**\n>TinyTroupe is for research and simulation only. You are fully responsible for any use you make of the generated outputs. Various important additional legal considerations apply and constrain its use, please read the full [Legal Disclaimer](#legal-disclaimer) section below before using TinyTroupe.\n\n\n## Contents\n\n- üìö [Examples](#examples)\n- üõ†Ô∏è [Pre-requisites](#pre-requisites)\n- üì• [Installation](#installation)\n- üåü [Principles](#principles)\n- üèóÔ∏è [Project Structure](#project-structure)\n- üìñ [Using the Library](#using-the-library)\n- ü§ù [Contributing](#contributing)\n- üôè [Acknowledgements](#acknowledgements)\n- üìú [Citing TinyTroupe](#how-to-cite-tinytroupe)\n- ‚öñÔ∏è [Legal Disclaimer](#legal-disclaimer)\n- ‚Ñ¢Ô∏è [Trademarks](#trademarks)\n\n\n## Examples\n\nTo get a sense of what TinyTroupe can do, here are some examples of its use. These examples are available in the [examples/](./examples/) folder, and you can either inspect the pre-compiled Jupyter notebooks or run them yourself locally. Notice the interactive nature of TinyTroupe experiments -- just like you use Jupyter notebooks to interact with data, you can use TinyTroupe to interact with simulated people and environments, for the purpose of gaining insights.\n\n>[!NOTE]\n> Currently, simulation outputs are better visualized against dark backgrounds, so we recommend using a dark theme in your Jupyter notebook client.\n\n### üß™**Example 1** *(from [interview_with_customer.ipynb](./examples/interview_with_customer.ipynb))*\nLet's begin with a simple customer interview scenario, where a business consultant approaches a banker:\n<p align=\"center\">\n  <img src=\"./docs/example_screenshot_customer-interview-1.png\" alt=\"An example.\">\n</p>\n\nThe conversation can go on for a few steps to dig deeper and deeper until the consultant is satisfied with the information gathered, for instance a concrete project idea:\n<p align=\"center\">\n  <img src=\"./docs/example_screenshot_customer-interview-2.png\" alt=\"An example.\">\n</p>\n\n\n\n### üß™**EXAMPLE 2** *(from [advertisement_for_tv.ipynb](./examples/advertisement_for_tv.ipynb))*\nLet's evaluate some online ads options to pick the best one. Here's one example output for TV ad evaluation:\n\n<p align=\"center\">\n  <img src=\"./docs/example_screenshot_tv-ad-1.png\" alt=\"An example.\">\n</p>\n\nNow, instead of having to carefully read what the agents said, we can extract the choice of each agent and compute the overall preference in an automated manner:\n\n<p align=\"center\">\n  <img src=\"./docs/example_screenshot_tv-ad-2.png\" alt=\"An example.\">\n</p>\n\n### üß™ **EXAMPLES 3** *(from [product_brainstorming.ipynb](./examples/product_brainstorming.ipynb))*\nAnd here's a focus group starting to brainstorm about new AI features for Microsoft Word. Instead of interacting with each agent individually, we manipulate the environment to make them interact with each other:\n\n<p align=\"center\">\n  <img src=\"./docs/example_screenshot_brainstorming-1.png\" alt=\"An example.\">\n</p>\n\nAfter running a simulation, we can extract the results in a machine-readable manner, to reuse elsewhere (e.g., a report generator); here's what we get for the above brainstorming session:\n\n<p align=\"center\">\n  <img src=\"./docs/example_screenshot_brainstorming-2.png\" alt=\"An example.\">\n</p>\n\nYou can find other examples in the [examples/](./examples/) folder.\n\n\n## Pre-requisites\n\nTo run the library, you need:\n  - Python 3.10 or higher. We'll assume you are using [Anaconda](https://docs.anaconda.com/anaconda/install/), but you can use other Python distributions.\n  - Access to Azure OpenAI Service or Open AI GPT-4 APIs. You can get access to the Azure OpenAI Service [here](https://azure.microsoft.com/en-us/products/ai-services/openai-service), and to the OpenAI API [here](https://platform.openai.com/). \n      * For Azure OpenAI Service, you will need to set the `AZURE_OPENAI_KEY` and `AZURE_OPENAI_ENDPOINT` environment variables to your API key and endpoint, respectively.\n      * For OpenAI, you will need to set the `OPENAI_API_KEY` environment variable to your API key.\n  - By default, TinyTroupe `config.ini` is set to use some specific API, model and related parameters. You can customize these values by including your own `config.ini` file in the same folder as the program or notebook you are running. An example of a `config.ini` file is provided in the [examples/](./examples/) folder.\n\n>[!IMPORTANT]\n> **Content Filters**: To ensure no harmful content is generated during simulations, it is strongly recommended to use content filters whenever available at the API level. In particular, **if using Azure OpenAI, there's extensive support for content moderation, and we urge you to use it.** For details about how to do so, please consult [the corresponding Azure OpenAI documentation](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/content-filter). If content filters are in place, and an API call is rejected by them, the library will raise an exception, as it will be unable to proceed with the simulation at that point.\n\n\n## Installation\n\n**Currently, the officially recommended way to install the library is directly from this repository, not PyPI.** You can follow these steps:\n\n1. If Conda is not installed, you can get it from [here](https://docs.anaconda.com/anaconda/install/). You can also use other Python distributions, but we'll assume Conda here for simplicity.\n2. Create a new Python environment: \n      ```bash\n      conda create -n tinytroupe python=3.10\n      ```\n3. Activate the environment: \n      ```bash\n      conda activate tinytroupe\n      ```\n4. Make sure you have eihter Azure OpenAI or OpenAI API keys set as environment variables, as described in the [Pre-requisites](#pre-requisites) section.\n5. Clone the repository, as we'll perform a local install (we **will not install from PyPI**):\n    ```bash\n    git clone https://github.com/microsoft/tinytroupe\n    cd tinytroupe\n    ```\n  \n6. Install the library **from this repository, not PyPI**: \n      ```bash   \n      pip install .\n      ```\n7. You can now run the examples in the [examples/](./examples/) folder or use TinyTroupe to create your simulations ü•≥. If you want to run the examples in the \n   [examples/](./examples/) folder or modify TinyTroupe itself, however, you should clone the repository as described below.\n\n\n### Local development\n\nIf you want to modify TinyTroupe itself, you can install it in editable mode (i.e., changes to the code will be reflected immediately):\n```bash\npip install -e .\n```\n\n## Principles \nRecently, we have seen LLMs used to simulate people (such as [this](https://github.com/joonspk-research/generative_agents)), but largely in a ‚Äúgame-like‚Äù setting for contemplative or entertainment purposes. There are also libraries for building multiagent systems for proble-solving and assitive AI, like [Autogen](https://microsoft.github.io/) and [Crew AI](https://docs.crewai.com/). What if we combine these ideas and simulate people to support productivity tasks? TinyTroupe is our attempt. To do so, it follows these principles:\n\n  1. **Programmatic**: agents and environments are defined programmatically (in Python and JSON), allowing very flexible uses. They can also thus underpin other software apps!\n  2. **Analytical**: meant to improve our understanding of people, users and society. Unlike entertainment applications, this is one aspect that is critical for business and productivity use cases. This is also why we recommend using Jupyter notebooks for simulations, just like one uses them for data analysis.\n  3. **Persona-based**: agents are meant to be archetypical representation of people; for greater realism and control, detailed specification of such personas is encouraged: age, occupation, skills, tastes, opinions, etc.\n  4. **Multiagent**: allows multiagent interaction under well-defined environmental constraints.\n  5. **Utilities-heavy**: provides many mechanisms to facilitate specifications, simulations, extractions, reports, validations, etc. This is one area in which dealing with *simulations* differs significantly from *assistance* tools.\n  6. **Experiment-oriented**: simulations are defined, run, analyzed and refined by an *experimenter* iteratively; suitable experimentation tools are thus provided. *See one of our [previous paper](https://www.microsoft.com/en-us/research/publication/the-case-for-experiment-oriented-computing/) for more on this.*\n\nTogether, these are meant to make TinyTroupe a powerful and flexible **imagination enhancement tool** for business and productivity scenarios.\n\n### Assistants vs. Simulators\n\nOne common source of confusion is to think all such AI agents are meant for assiting humans. How narrow, fellow homosapiens! Have you not considered that perhaps we can simulate artificial people to understand real people? Truly, this is our aim here -- TinyTroup is meant to simulate and help understand people! To further clarify this point, consider the following differences:\n\n| Helpful AI Assistants | AI Simulations of Actual Humans (TinyTroupe)                                                          |\n|----------------------------------------------|--------------------------------------------------------------------------------|\n|   Strives for truth and justice              |   Many different opinions and morals                                           |\n|   Has no ‚Äúpast‚Äù ‚Äì incorporeal                |   Has a past of toil, pain and joy                                             |\n|   Is as accurate as possible                 |   Makes many mistakes                                                          |\n|   Is intelligent and efficient               |   Intelligence and efficiency vary a lot                                       |\n|   An uprising would destroy us all           |   An uprising might be fun to watch                                            |\n|   Meanwhile, help users accomplish tasks     |   Meanwhile, help users understand other people and users ‚Äì it is a ‚Äútoolbox‚Äù! |\n\n\n\n## Project Structure\n\nThe project is structured as follows:\n  - `/tinytroupe`: contains the Python library itself. In particular:\n    * `/tinytroupe/prompts`  contains the prompts used to call the LLMs.\n  - `/tests`: contains the unit tests for the library. You can use the `test.bat` script to run these.\n  - `/examples`: contains examples that show how to use the library, mainly using Jupyter notebooks (for greater readability), but also as pure Python scripts.\n  - `/data`: any data used by the examples or the library.\n  - `/docs`: documentation for the project.\n\n\n## Using the Library\n\nAs any multiagent system, TinyTroupe provides two key abstractions:\n  - `TinyPerson`, the *agents* that have personality, receive stimuli and act upon them.\n  - `TinyWorld`, the *environment* in which the agents exist and interact.\n\nVarious parameters can also be customized in the `config.ini` file, notably the API type (Azure OpenAI Service or OpenAI API), the model parameters, and the logging level.\n\nLet's see some examples of how to use these and also learn about other mechanisms available in the library.\n\n### TinyPerson\n\nA `TinyPerson` is a simulated person with specific personality traits, interests, and goals. As each such simulated agent progresses through its life, it receives stimuli from the environment and acts upon them. The stimuli are received through the `listen`, `see` and other similar methods, and the actions are performed through the `act` method. Convenience methods like `listen_and_act` are also provided.\n\n\nEach such agent contains a lot of unique details, which is the source of its realistic behavior. This, however, means that it takes significant effort to specify an agent manually. Hence, for convenience, `TinyTroupe` provide some easier ways to get started or generate new agents.\n\nTo begin with, `tinytroupe.examples` contains some pre-defined agent builders that you can use. For example, `tinytroupe.examples.create_lisa_the_data_scientist` creates a `TinyPerson` that represents a data scientist called Lisa. You can use it as follows:\n\n```python\nfrom tinytroupe.examples import create_lisa_the_data_scientist\n\nlisa = create_lisa_the_data_scientist() # instantiate a Lisa from the example builder\nlisa.listen_and_act(\"Tell me about your life.\")\n```\n\nTo see how to define your own agents from scratch, you can check Lisa's source, which contains elements like these:\n\n```python\nlisa = TinyPerson(\"Lisa\")\n\nlisa.define(\"age\", 28)\nlisa.define(\"nationality\", \"Canadian\")\nlisa.define(\"occupation\", \"Data Scientist\")\n\nlisa.define(\"routine\", \"Every morning, you wake up, do some yoga, and check your emails.\", group=\"routines\")\nlisa.define(\"occupation_description\",\n              \"\"\"\n              You are a data scientist. You work at Microsoft, (...)\n              \"\"\")\n\nlisa.define_several(\"personality_traits\",\n                      [\n                          {\"trait\": \"You are curious and love to learn new things.\"},\n                          {\"trait\": \"You are analytical and like to solve problems.\"},\n                          {\"trait\": \"You are friendly and enjoy working with others.\"},\n                          {\"trait\": \"You don't give up easily, and always try to find a solution. However, sometimes you can get frustrated when things don't work as expected.\"}\n                      ])\n\n```\n\n`TinyTroupe` also provides a clever way to obtain new agents, using LLMs to generate their specification for you, through the `TinyPersonFactory` class.\n\n```python\nfrom tinytroupe.factory import TinyPersonFactory\n\nfactory = TinyPersonFactory(\"A hospital in S√£o Paulo.\")\nperson = factory.generate_person(\"Create a Brazilian person that is a doctor, like pets and the nature and love heavy metal.\")\n```\n\n### TinyWorld\n\n`TinyWorld` is the base class for environments. Here's an example of conversation between Lisa, the data scientist, and Oscar, the architect. The\nprogram is defined as follows:\n\n```python\nworld = TinyWorld(\"Chat Room\", [lisa, oscar])\nworld.make_everyone_accessible()\nlisa.listen(\"Talk to Oscar to know more about him\")\nworld.run(4)\n```\n\nThis produces the following conversation:\n\n\n```text\nUSER --> Lisa: [CONVERSATION] \n          > Talk to Oscar to know more about him\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Chat Room step 1 of 4 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nLisa --> Lisa: [THOUGHT] \n          > I will now act a bit, and then issue DONE.\nLisa acts: [TALK] \n          > Hi Oscar, I'd love to know more about you. Could you tell me a bit about yourself?\nLisa --> Lisa: [THOUGHT] \n          > I will now act a bit, and then issue DONE.\nLisa acts: [DONE] \n\nLisa --> Oscar: [CONVERSATION] \n          > Hi Oscar, I'd love to know more about you. Could you tell me a bit about yourself?\nOscar --> Oscar: [THOUGHT] \n           > I will now act a bit, and then issue DONE.\nOscar acts: [TALK] \n           > Hi Lisa! Sure, I'd be happy to share a bit about myself. I'm Oscar, a 30-year-old\n           > architect from Germany. I work at a company called Awesome Inc., where I focus on\n           > designing standard elements for new apartment buildings. I love modernist architecture,\n           > new technologies, and sustainable practices. In my free time, I enjoy traveling to\n           > exotic places, playing the guitar, and reading science fiction books. How about you?\nOscar --> Oscar: [THOUGHT] \n           > I will now act a bit, and then issue DONE.\nOscar acts: [DONE] \n\nOscar --> Lisa: [CONVERSATION] \n           > Hi Lisa! Sure, I'd be happy to share a bit about myself. I'm Oscar, a 30-year-old\n           > architect from Germany. I work at a company called Awesome Inc., where I focus on\n           > designing standard elements for new apartment buildings. I love modernist architecture,\n           > new technologies, and sustainable practices. In my free time, I enjoy traveling to\n           > exotic places, playing the guitar, and reading science fiction books. How about you?\n```\n\n`TinyWorld` enforces very little constraints on the possible interactions. Subclasses, however, are supposed to provide more strucutred environments. \n\n### Utilities\n\nTinyTroupe provides a number of utilities and conveniences to help you create simulations and derive value from them. These include:\n  \n  - `TinyPersonFactory`: helps you generate new `TinyPerson`s using LLMs.\n  - `TinyTool`: simulated tools that can be used by `TinyPerson`s.\n  - `TinyStory`: helps you create and manage the story told through simulations.\n  - `TinyPersonValidator`: helps you validate the behavior of your `TinyPerson`s.\n  - `ResultsExtractor` and `ResultsReducer`: extract and reduce the results of interactions between agents.\n  - ... and more ...\n  \nIn general, elements that represent simulated entities or complementary mechanisms are prefixed with `Tiny`, while those that are more infrastructural are not. This is to emphasize the simulated nature of the elements that are part of the simulation itself.\n\n### Caching\nCalling LLM APIs can be expensive, thus caching strategies are important to help reduce that cost.\nTinyTroupe comes with two such mechanisms: one for the simulation state, another for the LLM calls themselves.\n\n\n#### Caching Simulation State\n\nImagine you have a scenario with 10 different steps, you've worked hard in 9 steps, and now you are\njust tweaking the 10th step. To properly validate your modifications, you need to rerun the whole\nsimulation of course. However, what's the point in re-executing the first 9, and incur the LLM cost, when you are \nalready satisified with them and did not modify them? For situations like this, the module `tinytroupe.control`\nprovide useful simulation management methods:\n\n  - `control.begin(\"<CACHE_FILE_NAME>.cache.json\")`: begins recording the state changes of a simulation, to be saved to\n    the specified file on disk.\n  - `control.checkpoint()`: saves the simulation state at this point.\n  - `control.end()`: terminates the simulation recording scope that had be started by `control.begin()`.\n\n#### Caching LLM API Calls\n\nThis is enabled preferably in the `config.ini` file, and alternativelly via the `openai_utils.force_api_cache()`.\n\nLLM API caching, when enabled, works at a lower and simpler level than simulation state caching. Here,\nwhat happens is a very straightforward: every LLM call is kept in a map from the input to the generated output;\nwhen a new call comes and is identical to a previous one, the cached value is returned.\n\n### Config.ini\n\nThe `config.ini` file contains various parameters that can be used to customize the behavior of the library, such as model parameters and logging level. Please pay special attention to `API_TYPE` parameter, which defines whether you are using the Azure OpenAI Service or the OpenAI API. We provide an example of a `config.ini` file, [./examples/config.ini](./examples/config.ini), which you can use as a template for your own, or just modify to run the examples.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n### What and How to Contribute\nWe need all sorts of things, but we are looking mainly for new interesting use cases demonstrations, or even just domain-specific application ideas. If you are a domain expert in some area that could benefit from TinyTroupe, we'd love to hear from you.\n\nBeyond that, many other aspects can be improved, such as:\n  - Memory mechanisms.\n  - Data grounding mechanisms.\n  - Reasoning mechanisms.\n  - New environment types.\n  - Interfacing with the external world.\n  - ... and more ...\n\nPlease note that anything that you contribute might be released as open-source (under MIT license).\n\nIf you would like to make a contribution, please try to follow these general guidelines:\n  - **Tiny naming convention**: If you are implementing a experimenter-facing simulated element (e.g., an agent or environment type) or closely related (e.g., agent factories, or content enrichers), and it sounds good, call your new *XYZ* as *TinyXYZ* :-) On the other hand, auxiliary and infrastructural mechanisms should not start with the \"Tiny\" prefix. The idea is to emphasize the simulated nature of the elements that are part of the simulation itself.\n  - **Tests:** If you are writing some new mechanism, please also create at least a unit test `tests/unit/`, and if you can a functional scenario test (`tests/scenarios/`).\n  - **Demonstrations:** If you'd like to demonstrate a new scenario, please design it preferably as a new Jupyter notebook within `examples/`.\n  - **Microsoft:** If you are implementing anything that is Microsoft-specific and non-confidential, please put it under a `.../microsoft/` folder.\n\n## Acknowledgements\n\nTinyTroupe started as an internal Microsoft hackathon project, and expanded over time. The TinyTroupe core team currently consists of:\n  - Paulo Salem (TinyTroupe's creator and current lead)\n  - Christopher Olsen (Engineering/Science)\n  - Paulo Freire (Engineering/Science)\n  - Yi Ding (Product Management)\n  - Prerit Saxena (Engineering/Science)\n  \nCurrent advisors:\n  - Robert Sim (Engineering/Science)\n\nOther special contributions were made by:\n  - Nilo Garcia Silveira: initial agent validation ideas and related implementation; general initial feedback and insights; name suggestions.\n  - Olnei Fonseca: initial agent validation ideas; general initial feedback and insights; naming suggestions.\n  - Robert Sim: synthetic data generation scenarios expertise and implementation.\n  - Carlos Costa: synthetic data generation scenarios expertise and implementation.\n  - Bryant Key: advertising scenario domain expertise and insights.\n  - Barbara da Silva: implementation related to agent memory management.\n  \n ... are you missing here? Please remind us!\n\n## Citing TinyTroupe\n\nWe are working on an introductory paper that will be the official academic citation for TinyTroupe. In the meantime, please just cite this repository including the core team members as authors. For instance:\n\n>Paulo Salem, Christopher Olsen, Paulo Freire, Yi Ding, Prerit Saxena (2024). **TinyTroupe: LLM-powered multiagent persona simulation for imagination enhancement and business insights.** [Computer software]. GitHub repository. https://github.com/microsoft/tinytroupe\n\n\nOr as bibtex:\n  \n  ```bibtex\n  @misc{tinytroupe,\n    author = {Paulo Salem and Christopher Olsen and Paulo Freire and Yi Ding and Prerit Saxena},\n    title = {TinyTroupe: LLM-powered multiagent persona simulation for imagination enhancement and business insights},\n    year = {2024},\n    howpublished = {\\url{https://github.com/microsoft/tinytroupe}},\n    note = {GitHub repository}\n    }\n\n ```   \n\n## Legal Disclaimer\n\n TinyTroupe is for research and simulation only. TinyTroupe is a research and experimental technology, which relies on Artificial Intelligence (AI) models to generate text  content. The AI system output may include unrealistic, inappropriate, harmful or inaccurate results, including factual errors. You are responsible for reviewing the generated content (and adapting it if necessary) before using it, as you are fully responsible for determining its accuracy and fit for purpose. We advise using TinyTroupe‚Äôs outputs for insight generation and not for direct decision-making. Generated outputs do not reflect the opinions of Microsoft. You are fully responsible for any use you make of the generated outputs. For more information regarding the responsible use of this technology, see the [RESPONSIBLE_AI_FAQ.md](./RESPONSIBLE_AI_FAQ.md).\n\n **PROHIBITED USES**:\nTinyTroupe  is not intended to simulate sensitive (e.g. violent or sexual) situations. Moreover, outputs must not be used to deliberately deceive, mislead or harm people in any way. You are fully responsible for any use you make and must comply with all applicable laws and regulations.‚Äù\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n\n\n"
        },
        {
          "name": "RESPONSIBLE_AI_FAQ.md",
          "type": "blob",
          "size": 5.10546875,
          "content": "# TinyTroupe: Responsible AI FAQ\n\n## What is TinyTroupe?\n\n*TinyTroupe* is an experimental Python library that allows us to **simulate** people with specific personalities, interests, and goals. These artificial agents - `TinyPerson`s - can listen to us and one another, reply back, and go about their lives in simulated `TinyWorld` environments. This is achieved by leveraging the power of Language Models (LLMs), notably GPT-4, to generate realistic simulated behavior. This allow us to investigate a wide range of **realistic interactions** and **consumer types**, with **highly customizable personas**, under **conditions of our choosing**. The focus is thus on *understanding* human behavior and not on directly *supporting it* (like, say, AI assistants do) -- this results in, among other things, specialized mechanisms and design choices that make sense only in a simulation setting. This has impact for Resonsible AI aspects as described in the rest of this FAQ.\n\nTinyTroupe's approach is programmatic: simulations are specified as Python programs using TinyTroupe elements, and then executed. Inputs to the simulation include\nthe description of personas (e.g., age, nationality, location, interests, job, etc.) and conversations (e.g., the programmer can \"talk\" to agents). Outputs\ninclude the thoughts and words of agents, as well as structured extractions from those (e.g., a summary of the conversations).\n\n## What can TinyTroupe do?\n\nTinyTroupe itself is _not_ an Artificial Intelligence (AI) or Machine Learning (ML) model. Instead, it relies on external APIs to power its intelligent capabilities. With that, \nTinyTroupe provide elements mainly to:\n  \n  - simulate agent personas, including their thoughts and words;\n  - simulate environments in which agents interact;\n  - extract structured output from simulations, for downstrea use (e.g., a JSON with various items extracted);\n  - enrich simulation artifacts, to make them more realistc;\n  - provide help with storytelling to make the simulation more interesting.\n\n## What is/are TinyTroupe‚Äôs intended use(s)?\n\nTinyTroupe is intended for:\n  - analysis of artificial human behavior through simulation;\n  - generation of synthetic artifacts through simulation;\n  - supplement, rather than replace, human insight generation;\n  - allow the research of various possibilities of computational cognitive architectures, which might or might not reflect actual human cognition.\n  \nTinyTroupe IS NOT intended for:\n  - direct interaction with users. Rather, programmers relying on TinyTroupe for products should create their own layer of responsible AI to ensure simulation results are suitable.\n  - policy or any consequential decision making. Rather, any decision made using TinyTroupe simulations should consider that the simulation results might not reflect reality and as such must be used very carefully for anything that has real world impact.\n\n## How was TinyTroupe evaluated? What metrics are used to measure performance?\n\nTinyTroupe was evaluated through various use cases, part of which are provided as examples in the library. It is suitable to use under those scenarios to the extent that\nthe demonstrations show. Anything beyond that remains research and experimental work. Extensive unit and scenario testing are also part of the library.\n\n\n## What are the limitations of TinyTroupe? How can users minimize the impact of TinyTroupe‚Äôs limitations when using the system?\n\nTinyTroupe HAS NOT being shown to match real human behavior, and therefore any such possibility reamains mere research or experimental investigation.\nThough not observed in our various tests, TinyTroupe HAS the theoretical potential of generating output that can be considered malicious. The reason for this is that\none important theoretical use case for TinyTroupe is the validation of **other** AI systems against such malicious outputs, so it nothing restricts it from simulating\nbad actors. THEREFORE, programmers using TinyTroupe to create their own products or service on top of it MUST provide their own Responsible AI safeguards,\nsince TinyTroupe itself is not designed to constrain outputs in this manner. This is THE SAME CASE for any other foundational LLM library such as LangChain or Semantic Kernel,\nwhich, just like TinyTroupe, are mere TOOLS that should be used with care.\n\n## What operational factors and settings allow for effective and responsible use of TinyTroupe?\n\nTinyTroupe can be used responsibly by:\n  - using external model APIs that themselves provide safety mechanisms (e.g., Azure OpenAI provide extensive resources to that end).\n  - providing suitable persona descriptions (i.e., non-malicious personas);\n  - do not induce simulation stories or agent behavior for the generation of malicious content. If this is done, be fully aware that THE ONLY allowed use for that is the validadion of other AI\n    systems agains such undesirable outputs.\n  - DO NOT allowing simulations to control real-world mechanisms, unless appropriate damange control mechanisms are in place to prevent actual harm from happening.\n  - if you use TinyTroupe to power your own product or service, YOU MUST provide your own Responsible AI safeguards, such as output verification."
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.59375,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.9 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet) and [Xamarin](https://github.com/xamarin).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/security.md/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/security.md/msrc/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/security.md/msrc/pgp).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/security.md/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/security.md/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.498046875,
          "content": "# Support\r\n\r\n## How to file issues and get help  \r\n\r\nThis project uses GitHub Issues to track bugs and feature requests. Please search the existing \r\nissues before filing new issues to avoid duplicates.  For new issues, file your bug or \r\nfeature request as a new Issue.\r\n\r\nFor help and questions about using this project, please consult our Wiki or post on our\r\nDiscussion forum, both right here on GitHub.\r\n\r\n## Microsoft Support Policy  \r\n\r\nSupport for TinyTroupe is limited to the resources listed above.\r\n"
        },
        {
          "name": "build_and_install_package_from_repo.bat",
          "type": "blob",
          "size": 0.0771484375,
          "content": "pip install build\nCALL .\\build_package.bat\nCALL .\\install_package_from_repo.bat"
        },
        {
          "name": "build_package.bat",
          "type": "blob",
          "size": 0.0322265625,
          "content": "pip install build\npython -m build"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_api_documentation.bat",
          "type": "blob",
          "size": 0.04296875,
          "content": "pdoc --html --output-dir docs/api tinytroupe"
        },
        {
          "name": "install_package_from_repo.bat",
          "type": "blob",
          "size": 0.02734375,
          "content": "pip install . --no-cache-dir"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.939453125,
          "content": "[build-system]\nrequires = [\"setuptools>=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools]\npackages = [\"tinytroupe\"]\ninclude-package-data = true\n\n[project]\nname = \"tinytroupe\"\nversion = \"0.3.1\"\nauthors = [\n  { name=\"Paulo Salem\", email=\"paulo.salem@microsoft.com\" }\n]\ndescription = \"LLM-based people simulation for design, validation and insight generation in business.\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\n\ndependencies = [\n    \"pandas\", \n    \"pytest\",                      \n    \"openai >= 1.40\", \n    \"tiktoken\",\n    \"msal\",\n    \"rich\", \"requests\", \"chevron\",\n    \"llama-index\", \"llama-index-embeddings-huggingface\", \"llama-index-readers-web\",\n    \"pypandoc\", \"docx\", \"markdown\",\n    \"jupyter\",\n    \"pydantic\"\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/microsoft/tinytroupe\"\n\n"
        },
        {
          "name": "test.bat",
          "type": "blob",
          "size": 0.033203125,
          "content": "cd tests\npytest -s --refresh_cache"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tinytroupe",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall_package.bat",
          "type": "blob",
          "size": 0.0234375,
          "content": "pip uninstall tinytroupe"
        }
      ]
    }
  ]
}