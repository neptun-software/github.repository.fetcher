{
  "metadata": {
    "timestamp": 1736560650280,
    "page": 290,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "samshadwell/TrumpScript",
      "stars": 7568,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": ".idea\n.DS_Store\nsrc/trumpscript/__pycache__\n"
        },
        {
          "name": "Brainstorming.txt",
          "type": "blob",
          "size": 1.3857421875,
          "content": "RULES:\n*No import statements (or requires a protective tariff)\nBooleans: true -> fact, false -> lie\n*Not portable\nNot compatible with PC\nVariable names are English only, and either short or popular words only\nDon't run if file contains \"Hillary\", \"Muslim\", \"Mexico\", etc...\nError messages are all Trump quotes\nNo floating point numbers, America doesn't do things halfway\n$4B always converted to $10B\n\"Yell\" or \"Exclaim\" are the prints to std out\nAmerica = Great is the equivalent of exit(0)\nStrings that are yelled, or all strings can only be uppercase\nNumbers have to be greater than $1mill\nNo build-in random generation\n\"Build a fence\" should do something ???\nFor loop could be \"Get 10 Mexicans to build a wall\"\nStart closure with ':', end it with '!'\nUse 'x' as multiplication?\nDivision always rounds up\nPeriods are our 'newline' characters\nAssignment is done via \"x is y\" and \"Make x <- y\"\nEquality check: put \"?\" at end of word\n\"Guarantee\" defines a function\n\"Do\" calls a function\nNull is \"Jeb\"?\n\nDEMO:\nFizzBuzz = Fiorina Bush\n\nKEYWORD MAPPING:\nNone -> Jeb\nFalse -> lies, nonsense\nTrue -> truth, fact\nand -> AND\nassert -> absolutely\nbreak -> capiche\ndef -> guarantee\nif, elif, else -> if, else if, else\nis -> is\nnot -> not\nor -> or\npass -> ???\nreturn -> ???\nwhile -> as long as\nprint -> tell, say\n\n< -> less, fewer, smaller\n> -> more, greater, larger\n\nOTHER:\n\nAllow a couple of different variations on the ending\n\n"
        },
        {
          "name": "Grammar.txt",
          "type": "blob",
          "size": 1.2568359375,
          "content": "Abstract grammar for TrumpScript\n{\n\tmod = Module(stmt* body)\n\n\tstmt = Assign(expr* targets, expr value)\n \t      | Print(expr? dest, expr* values, bool nl) <- secretly represented by Call, which makes it an expr\n\t      | While(expr test, stmt* body, stmt* orelse)\n\t      | If(expr test, stmt* body, stmt* orelse)\n\t      | Expr(expr value)\n\n\t      -- BoolOp() can use left & right?\n\texpr = BoolOp(boolop op, expr* values)\n\t     | BinOp(expr left, operator op, expr right)\n\t     | UnaryOp(unaryop op, expr operand) <- only used for Not\n\n\t     -- need sequences for compare to distinguish between\n\t     -- x < 4 < 3 and (x < 4) < 3\n\n\t     | Compare(expr left, cmpop* ops, expr* comparators)\n\t     | Call(expr func, expr* args, keyword* keywords, <- not actually used in our grammar\n\t\t\t expr? starargs, expr? kwargs)\n\t     | Num(object n) -- a number as a PyObject.\n\t     | Str(string s) -- need to specify raw, unicode, etc?\n\t     | Name(identifier id, expr_context ctx)\n\n\texpr_context = Load | Store (| Param?) <- not part of our grammar\n\n\tboolop = And | Or <- are they given their own handlers?\n\n\toperator = Add | Sub | Mult | Div <- not given their own handlers\n\n\tunaryop = Not\n\n\tcmpop = Eq | Lt | Gt (| NotEq | GtE | LtE can all be built using not/or) <- not given their own operation\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Sam Shadwell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4814453125,
          "content": "# Final Update\nIt's been a while since we made any updates to TrumpScript, and we just wanted to make it official that our development on this project has stopped and that we will no longer be accepting issues or pull requests on this repo.\n\nFrankly, this joke isn't funny anymore. Rather than spend your time beating the \"Trump is ridiculous\" meme to death, please actually do something instead and donate to:\n* [American Civil Liberties Union](https://www.aclu.org)\n* [National Resources Defense Council](https://www.nrdc.org)\n* [Planned Parenthood](https://www.plannedparenthood.org)\n\n# TrumpScript <img src=\"https://raw.github.com/samshadwell/TrumpScript/master/TrumpScript.jpg\" width=\"50px\" height=\"50px\" />\nMake Python great again\n\n## Mission\nTrumpScript is a language based upon the illustrious Donald Trump. As the undeniably best US President, we found that the current field of programming languages does not include any that Trump's glorious golden combover would approve of.\n\nTrumpScript is our solution to this. It's the programming language Trump would approve of. Just like he is going to make America great again, we hope our efforts will make programming great again.\n\n## Installation\nTo use, download the .zip and extract the contents or clone the repository by typing\n\n```bash\ngit clone https://github.com/samshadwell/TrumpScript.git\n```\n\nAdd the TrumpScript root directory to your system `PATH` using one of the two following techniques\n\n1. Temporary: Write `export PATH=$PATH:/path/to/TrumpScript/bin` to terminal.\n2. Permanent: Append `export PATH=$PATH:/path/to/TrumpScript/bin` to the end of your `~/.bashrc` file.\n\n## Usage\n* Write a TrumpScript file following the syntax we've specified (good luck).\n* Execute `TRUMP /path/to/trumpscript/file.tr`\n* Enjoy the wonderful world of TrumpScript!\n\n## Features\nOur language includes several convenient features, perfect for any aspiring Presidential candidate including:\n* No floating point numbers, only integers. America never does anything halfway.\n* All numbers must be strictly greater than 1 million. The small stuff is inconsequential to us.\n* There are no import statements allowed. All code has to be home-grown and American made.\n* Instead of `True` and `False`, we have the keywords `fact` and `lie`.\n* Only the most popular English words, Trump's favorite words, and current politician names can be used as variable names.\n* Error messages are mostly quotes directly taken from Trump himself.\n* All programs must end with `America is great`.\n* Our language will automatically correct Forbes' $4.5B to $10B.\n* In its raw form, TrumpScript is not compatible with Windows, because Trump isn't the type of guy to believe in PC.\n* TrumpScript boycotts OS X and all Apple products  until such time as Apple gives cellphone info to authorities regarding radical Islamic terrorist couple from Cal.\n* The language is completely case insensitive.\n* If the running computer is from China, TrumpScript will not compile. We don't want them stealing our American technological secrets.\n* By constructing a wall (providing the --Wall flag), TrumpScript will refuse to run on machines with Mexican locales\n* Warns you if you have any Communists masquerading as legitimate \"SSL Certificates\" from China on your system.\n* Won't run in root mode because America doesn't need your help being great. Trump is all we need.\n* Easy to type with small hands\n\nIf you find you can't get any TrumpScript to run on your computer (probably because we disallow the two most popular operating systems), you can specify the `--shut_up` flag to let the interpreter know you just want your code to run, damn it.\n\n## Grammar\nThe grammar of the language is fairly convoluted, but here's a taste of the enlightened decisions we've made.\n\nArithmetic operators:\n* `+` and `plus` do addition\n* `-` and `minus` do subtraction\n* `*` and `times` do multiplication\n* `/` and `over` do division\n* `<`, `less`, `fewer`, and `smaller` all evaluate to 'less than'\n* `>`, `more`, `greater`, and `larger` all evaluate to 'greater than'\n\nControl flow:\n* Use `,` and `;` to treat compound statements as a single evaluation, similar to how `()` are used in other languages\n* Use `:` and `!` to define the scope of loops and if statements, similar to how `{}` is used in Java\n* `if`, `else if`, and `else` do what you think they do\n* `not`, `and`, and `or` do what you expect\n\nThe exciting parts:\n* Strings are denoted by double quotes (`\"I love Trump\"`)\n* The `is` and `are` keywords are used both to check for equality, and for assignment. To use for assignment, say something like `Trump is great` or `Democrats are dumb`. To use to check for equality, do the same but append a `?`. For example, you may need to ask yourself `Trump is \"the best\"?` (although we all know that would evaluate to `fact` anyway)\n* Assignment can also be done via the `make` keyword. E.g. `Make America great` assigns the value of the variable `great` to `America`\n* Printing to stdout can be done via `tell` or `say`\n* While loops are denoted via `as long as`. And that's the only type of loop you need anyway\n* If a 'word' (so anything that could be a variable name) is deemed unnecessary by the compiler, it's simply thrown away. So you can make truly self documenting code, or code that appear to read very very similarly to real speeches by the big man himself. You can find some interesting examples in our `test/test_files` directory\n\nExample:\n```\nWhat are we in this country\nHillary speaks nothing but lies\nBut look at me I came to this election to make guys\nbelieve again\nbelieve in fact\nif, all of us real lies the light; : say \"VOTE TRUMP\" !\nbut I know we should be free\nelse the result will be bad: all the work of George\nWashington was for nothing\nso this election say \"Hello World\" say \"TRUMP FOR PRESIDENT\"!\nAmerica is great.\n```\n\nBut most importantly, Trump doesn't like to talk about his failures. So a lot of the time your code will fail, and it will do so silently. Just think of debugging as a fun little game.\n\n## Because We Pretend We're Good People\nIf this page entertained you, consider making a donation to your favorite charity or political campaign.\n\nI'm a fan of the [Electronic Frontier Foundation](https://www.eff.org), [donate here](https://supporters.eff.org/donate/button)\n\nThere's also [Hillary Clinton](https://www.hillaryclinton.com/contribute/donate/), and of course [Donald Trump himself. ](http://www.reactiongifs.com/r/saywha.gif)\n\n## Because We've Sold Out\nIf you're feeling extra generous, you can also buy us a beer (or two) for more brainstorming because our small loan of a million dollars wasn't enough:\n\nPaypal:\n[paypal.me/Shadwell](https://paypal.me/Shadwell)\n\nBitcoin:\n[1AKK76WNmQheCYgZEksB61Jyp1voYxN63v](bitcoin:1AKK76WNmQheCYgZEksB61Jyp1voYxN63v)\n\n## Hey, this repo seems pretty dead...\nThis project is (probably) not totally dead, and we'll get back to it eventually, but hold tight for now, since we're all busy students full-time.\n\nBut by all means, please submit a pull request! We're all just shocked this has blown up so much, and we'd love to get this language implemented \"properly!\"\n\n## Media\nHey, cool, [we got an article on Inverse written about us!](https://www.inverse.com/article/10448-coders-assimilate-donald-trump-to-a-programming-language)\n\n[Also Motherboard](http://motherboard.vice.com/read/donald-trump-in-a-programming-language)\n\n[And The Verge](http://www.theverge.com/tldr/2016/1/21/10806944/donald-trump-script-python)\n\n[And one on Gizmodo](http://gizmodo.com/theres-a-donald-trump-programming-language-1754458693)\n\n[And TheNextWeb](http://thenextweb.com/us/2016/01/22/trumpscript-is-a-programming-language-that-thinks-and-acts-like-donald/)\n\n[And Mashable](http://mashable.com/2016/01/22/donald-trump-programming-language/#9NAKAP8GPOqt)\n\n[And The Washington Post](https://www.washingtonpost.com/news/powerpost/wp/2016/01/22/decentralizing-control-of-the-internet-meet-trumpscript-a-new-programming-language-are-iphone-sales-in-decline/)\n\n[Geekwire](http://www.geekwire.com/2016/donald-trump-programming-language-seeks-to-make-programming-great-again/)\n\n[UPI](http://www.upi.com/Odd_News/2016/01/22/Group-of-coders-create-script-language-based-on-Donald-Trump/1101453495327/)\n\n[Neowin](http://www.neowin.net/news/neobytes--trumpscript-will-make-python-great-again)\n\n## History\nCreated for HackRice ([hack.rice.edu](http://hack.rice.edu/)) by:\n\n[Sam Shadwell](http://samshadwell.me), [@samshadwell](https://github.com/samshadwell)\n\nDan Korn, [@DnlRKorn](https://github.com/DnlRKorn)\n\nChris Brown, [@CryoBrown](https://github.com/CryoBrown)\n\nCannon Lewis, [@cannon10100](https://github.com/cannon10100)\n"
        },
        {
          "name": "TrumpScript.jpg",
          "type": "blob",
          "size": 26.6865234375,
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}