{
  "metadata": {
    "timestamp": 1736560824660,
    "page": 519,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "subframe7536/maple-font",
      "stars": 6317,
      "defaultBranch": "variable",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0390625,
          "content": "*.ttf binary\n*.vfc binary\n*.woff2 binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1103515625,
          "content": ".astro\nnode_modules\ndist\n/FontPatcher\n/fonts\n/source/cn/static\n__pycache__\n.DS_store\nrelease\nsource/cn\nfontsource"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5009765625,
          "content": "FROM python:3.11-slim\n\n# Install system dependencies including FontForge\nRUN apt-get update \\\n    && apt-get install -y fontforge \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /app\n\n# Copy the project files\nCOPY . .\n\n# Install Python dependencies\nRUN pip install -r requirements.txt\n\n# Create volume mount point for output\nVOLUME /app/fonts\n\n# Default build arguments\nENV BUILD_ARGS=\"\"\n\n# Run the build script with optional arguments\nENTRYPOINT [\"sh\", \"-c\", \"python build.py $BUILD_ARGS\"]\n"
        },
        {
          "name": "OFL.txt",
          "type": "blob",
          "size": 4.302734375,
          "content": "Copyright (c) 2022, subframe7536 (https://github.com/subframe7536),\nwith Reserved Font Name Maple Mono.\n\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\nThis license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL\n\n\n-----------------------------------------------------------\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n-----------------------------------------------------------\n\nPREAMBLE\nThe goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.\n\nThe OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded,\nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.\n\nDEFINITIONS\n\"Font Software\" refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.\n\n\"Reserved Font Name\" refers to any names specified as such after the\ncopyright statement(s).\n\n\"Original Version\" refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).\n\n\"Modified Version\" refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.\n\n\"Author\" refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.\n\nPERMISSION & CONDITIONS\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:\n\n1) Neither the Font Software nor any of its individual components,\nin Original or Modified Versions, may be sold by itself.\n\n2) Original or Modified Versions of the Font Software may be bundled,\nredistributed and/or sold with any software, provided that each copy\ncontains the above copyright notice and this license. These can be\nincluded either as stand-alone text files, human-readable headers or\nin the appropriate machine-readable metadata fields within text or\nbinary files as long as those fields can be easily viewed by the user.\n\n3) No Modified Version of the Font Software may use the Reserved Font\nName(s) unless explicit written permission is granted by the corresponding\nCopyright Holder. This restriction only applies to the primary font name as\npresented to the users.\n\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\nSoftware shall not be used to promote, endorse or advertise any\nModified Version, except to acknowledge the contribution(s) of the\nCopyright Holder(s) and the Author(s) or with their explicit written\npermission.\n\n5) The Font Software, modified or unmodified, in part or in whole,\nmust be distributed entirely under this license, and must not be\ndistributed under any other license. The requirement for fonts to\nremain under this license does not apply to any document created\nusing the Font Software.\n\nTERMINATION\nThis license becomes null and void if any of the above conditions are\nnot met.\n\nDISCLAIMER\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.751953125,
          "content": "> [!note]\n> ### When will V7 become stable?\n> It is almost stable now.\n>\n> As a side project during my weekends, I will release a new beta version to fix the bugs reported or encountered in my daily coding within 1-2 weeks, and do some work on the new website and build tools.\n>\n> If everything goes well, the stable version will be released later this year.\n\n![](./resources/header.png)\n\n# Maple Mono\n\nMaple Mono is an open source monospace font focused on smoothing your coding flow.\n\nI create it to enhance my working experience, and hope that it can be useful to others.\n\nV7 is a completely remade version, providing variable font, redesigning more than half of the glyphs and offering smarter ligatures. You can checkout V6 [here](https://github.com/subframe7536/maple-font/tree/main)\n\n## Features\n\n- ✨ Variable - Infinity font weights with fine-grained italic glyphs.\n- ☁️ Smooth - Round corner, brand-new glyph of `@ $ % & Q ->` and cursive `f i j k l x y` in italic style.\n- 💪 Useful - Large amount of smart ligatures, see in [`features/`](./source/features/README.md)\n- 🎨 Icon - First-Class [Nerd-Font](https://github.com/ryanoasis/nerd-fonts) support, make your terminal more vivid.\n- 🔨 Customize - Enable or disable font features as you want, just make your own font.\n\n### Simpified Chinese, Traditional Chinese and Japanese\n\nThe CN version contails the glyphs of simplified and traditional Chinese, and Japanese, which are not as normal as most CN fonts. The CJK glyphs' spacing is much looser for better metric alignment, see details in [release notes](https://github.com/subframe7536/maple-font/releases/tag/cn-base) and [this issue](https://github.com/subframe7536/maple-font/issues/211).\n\n![](./resources/2-1.png)\n\n## ScreenShots\n\n![](https://github.com/subframe7536/maple-font/assets/78338239/19383849-6be1-4cfc-9b34-7b33fc047ecf)\n\n- Generated by [CodeImg](https://github.com/subframe7536/vscode-codeimg)\n- Theme: [Maple](https://github.com/subframe7536/vscode-theme-maple)\n\n## Download\n\nYou can download all the font archives from [Releases](https://github.com/subframe7536/maple-font/releases).\n\n### Arch Linux\n\n```shell\nparu -S ttf-maple-beta\n```\n\n## Naming FAQ\n\n### Features\n\n- **Ligature**: Default version with ligatures (`Maple Mono`)\n- **No-Ligature**: Default version without ligatures (`Maple Mono NL`)\n- **Normal-Ligature**: [`--normal` preset](#preset) with ligatures (`Maple Mono Normal`)\n- **Normal-No-Ligature**: [`--normal` preset](#preset) without ligatures (`Maple Mono Normal NL`)\n\n### Format and Glyph Set\n\n- **Variable**: Minimal version, smoothly change font weight by variable\n- **TTF**: Minimal version, ttf format [Recommend!]\n- **OTF**: Minimal version, otf format\n- **WOFF2**: Minimal version, woff2 format, for small size on web pages\n- **NF**: Nerd-Font patched version, add icons for terminal (With `-NF` suffix)\n- **CN**: Chinese version, embed with Chinese and Japanese glyphs (With `-CN` suffix)\n- **NF-CN**: Full version, embed with icons, Chinese and Japanese glyphs (With `-NF-CN` suffix)\n\n### Font Hint\n\n- **Hinted font** is used for low resolution screen to have better render effect. From my experience, if your screen resolution is lower or equal than 1080P, it is recommended to use \"hinted font\". Using \"unhinted font\" will lead to misalignment or uneven thickness on your text.\n  - In this case, you can choose `MapleMono-TTF-AutoHint` / `MapleMono-NF` / `MapleMono-NF-CN`, etc.\n- **Unhinted font** is used for high resolution screen (e.g. for MacBook). Using \"hinted font\" will blur your text or make it looks weird.\n  - In this case, you can choose `MapleMono-OTF` / `MapleMono-TTF` / `MapleMono-NF-unhinted` / `MapleMono-NF-CN-unhinted`, etc.\n- Why there exists `-AutoHint` and `-unhinted` suffix?\n  - for backward compatibility, I keep the original naming scheme. `-AutoHint` is only used for `TTF` format.\n\n## CDN\n\n### Maple Mono\n\n- [fontsource](https://fontsource.org/fonts/maple-mono)\n- [ZeoSeven Fonts](https://fonts.zeoseven.com/items/443/)\n\n### Maple Mono CN\n\n- [The Chinese Web Fonts Plan (中文网字计划)](https://chinese-font.netlify.app/zh-cn/fonts/maple-mono-cn/MapleMono-CN-Regular)\n- [ZeoSeven Fonts](https://fonts.zeoseven.com/items/442/)\n\n## Custom Build\n\nThe [`config.json`](./config.json) file is used to configure the build process. Checkout the [schema](./source/schema.json) or [document](https://github.com/subframe7536/maple-font/blob/variable/source/features/README.md) for more details.\n\nThere also have some [command line options](#build-script-usage) for customizing the build process. Cli options have higher priority than options in `config.json`.\n\n### Use Github Actions\n\nYou can use [Github Actions](https://github.com/subframe7536/maple-font/actions/workflows/custom.yml) to build the font.\n\n1. Fork the repo\n2. (Optional) Change the content in `config.json`\n3. Go to Actions tab\n4. Click on `Custom Build` menu item on the left\n5. Click on `Run workflow` button with options setup\n6. Wait for the build to finish\n7. Download the font archives from Releases\n\n### Use Docker\n\n```shell\ngit clone https://github.com/subframe7536/maple-font --depth 1 -b variable\ndocker build -t maple-font .\ndocker run -v \"$(pwd)/fonts:/app/fonts\" -e BUILD_ARGS=\"--normal\" maple-font\n```\n\n### Local Build\n\nClone the repo and run on your local machine. Make sure you have `python3` and `pip` installed\n\n```shell\ngit clone https://github.com/subframe7536/maple-font --depth 1 -b variable\npip install -r requirements.txt\npython build.py\n```\n\n- For `Ubuntu` or `Debian`, maybe `python-is-python3` is needed as well\n\nIf you have trouble installing the dependencies, just create a new GitHub Codespace and run the commands there\n\n#### Custom Nerd-Font\n\nFor custom `font-patcher` args, `font-forge` (and maybe `python3-fontforge` as well) is required.\n\nMaybe you should also change `\"nerd_font.extra_args\"` in [config.json](./config.json)\n\n#### Preset\n\nAdd `--normal` flag in `build.py` for common config, make the font just like `JetBrains Mono` (with slashed zero).\n\n#### Font Feature Freeze\n\nThere are three kind of options for feature freeze:\n\n1. `enable`: Move ligature rules to `calt`, which will enable the features without setting up `cvXX` / `ssXX` / `zero` in font features config, just as default ligatures\n2. `disable`: Remove the features in `cvXX` / `ssXX` / `zero`, which will no longer effect, even if you enable it manually\n3. `ignore`: Do nothing\n\n#### Load Custom Feature File\n\nRun `build.py` with `--apply-fea-file` flag, the feature file from [`source/features/{regular,italic}.fea`](./source/features) will be applied into variable font. You can modify it to change all features, e.g. remove some ligatures in `calt`.\n\n### Chinese version\n\nRun `python build.py --cn`, the CN base fonts (about 130 MB) will download from GitHub.\n\nIf you want to build CN base fonts from variable (about 35 MB), setup `\"cn.use_static_base_font\": false` in [config.json](./config.json) and **BE PATIENT**, instantiation will take about 40-50 minutes.\n\n#### GitHub Mirror\n\nThe build script will auto download neccessory assets from GitHub. If you have trouble downloading, please setup `github_mirror` in [config.json](./config.json) or `$GITHUB` to your environment variable. (Target URL will be `https://{github_mirror}/<user>/<repo>/releases/download/{tag}/{file}`), or just download the target `.zip` file and put it in the same directory as `build.py`.\n\n### Build Script Usage\n\n```\nusage: build.py [-h] [-v] [-d] [--debug] [-n] [--feat FEAT] [--apply-fea-file]\n                [--hinted | --no-hinted] [--liga | --no-liga] [--cn-narrow]\n                [--nerd-font | --no-nerd-font] [--cn | --no-cn] [--cn-both] [--ttf-only]\n                [--cache] [--cn-rebuild] [--archive]\n\n✨ Builder and optimizer for Maple Mono\n\noptions:\n  -h, --help        show this help message and exit\n  -v, --version     show program's version number and exit\n  -d, --dry         Output config and exit\n  --debug           Add `Debug` suffix to family name, skip optimization\n\nFeature Options:\n  -n, --normal      Use normal preset, just like `JetBrains Mono` with slashed zero\n  --feat FEAT       Freeze font features, splited by `,` (e.g. `--feat\n                    zero,cv01,ss07,ss08`). No effect on variable format\n  --apply-fea-file  Load feature file from `source/features/{regular,italic}.fea` to\n                    variable font\n  --hinted          Use hinted font as base font\n  --no-hinted       Use unhinted font as base font\n  --liga            Preserve all the ligatures\n  --no-liga         Remove all the ligatures\n  --cn-narrow       Make CN characters narrow (experimental)\n\nBuild Options:\n  --nerd-font       Build Nerd-Font version\n  --no-nerd-font    Do not build Nerd-Font version\n  --cn              Build Chinese version\n  --no-cn           Do not build Chinese version\n  --cn-both         Build both `Maple Mono CN` and `Maple Mono NF CN`. Nerd-Font version\n                    must be enabled\n  --ttf-only        Only build unhinted TTF format\n  --cache           Reuse font cache of TTF, OTF and Woff2 formats\n  --cn-rebuild      Reinstantiate CN base font\n  --archive         Build font archives with config and license. If has `--cache` flag,\n                    only archive Nerd-Font and CN formats\n```\n\n## Credit\n\n- [JetBrains Mono](https://github.com/JetBrains/JetBrainsMono)\n- [Roboto Mono](https://github.com/googlefonts/RobotoMono)\n- [Fira Code](https://github.com/tonsky/FiraCode)\n- [Victor Mono](https://github.com/rubjo/victor-mono)\n- [Commit Mono](https://github.com/eigilnikolajsen/commit-mono)\n- [Code Sample](https://github.com/TheRenegadeCoder/sample-programs-website)\n- [Nerd Font](https://github.com/ryanoasis/nerd-fonts)\n- [Font Freeze](https://github.com/MuTsunTsai/fontfreeze/)\n- [Font Viewer](https://tophix.com/font-tools/font-viewer)\n- [Monolisa](https://www.monolisa.dev/)\n- [Recursive](https://www.recursive.design/)\n\n## License\n\nSIL Open Font License 1.1\n"
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 41.07421875,
          "content": "#!/usr/bin/env python3\nimport argparse\nimport hashlib\nimport importlib.util\nimport json\nimport re\nimport shutil\nimport time\nfrom functools import partial\nfrom multiprocessing import Pool\nfrom os import environ, listdir, makedirs, path, remove, walk, getenv\nfrom typing import Callable\nfrom zipfile import ZIP_DEFLATED, ZipFile\nfrom fontTools.ttLib import TTFont, newTable\nfrom fontTools.feaLib.builder import addOpenTypeFeatures\nfrom fontTools.merge import Merger\nfrom source.py.utils import (\n    check_font_patcher,\n    download_cn_base_font,\n    get_font_forge_bin,\n    get_font_name,\n    is_ci,\n    match_unicode_names,\n    run,\n    set_font_name,\n    joinPaths,\n)\nfrom source.py.feature import freeze_feature, get_freeze_config_str\n\nFONT_VERSION = \"v7.0-beta34\"\n# =========================================================================================\n\n\ndef check_ftcli():\n    package_name = \"foundryToolsCLI\"\n    package_installed = importlib.util.find_spec(package_name) is not None\n\n    if not package_installed:\n        print(\n            f\"❗{package_name} is not found. Please run `pip install foundrytools-cli`\"\n        )\n        exit(1)\n\n\n# =========================================================================================\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description=\"✨ Builder and optimizer for Maple Mono\",\n    )\n    parser.add_argument(\n        \"-v\",\n        \"--version\",\n        action=\"version\",\n        version=f\"Maple Mono Builder v{FONT_VERSION}\",\n    )\n    parser.add_argument(\n        \"-d\",\n        \"--dry\",\n        dest=\"dry\",\n        action=\"store_true\",\n        help=\"Output config and exit\",\n    )\n    parser.add_argument(\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Add `Debug` suffix to family name, skip optimization\",\n    )\n\n    feature_group = parser.add_argument_group(\"Feature Options\")\n    feature_group.add_argument(\n        \"-n\",\n        \"--normal\",\n        dest=\"normal\",\n        action=\"store_true\",\n        help=\"Use normal preset, just like `JetBrains Mono` with slashed zero\",\n    )\n    feature_group.add_argument(\n        \"--feat\",\n        type=lambda x: x.strip().split(\",\"),\n        help=\"Freeze font features, splited by `,` (e.g. `--feat zero,cv01,ss07,ss08`). No effect on variable format\",\n    )\n    feature_group.add_argument(\n        \"--apply-fea-file\",\n        default=None,\n        action=\"store_true\",\n        help=\"Load feature file from `source/features/{regular,italic}.fea` to variable font\",\n    )\n    hint_group = feature_group.add_mutually_exclusive_group()\n    hint_group.add_argument(\n        \"--hinted\",\n        dest=\"hinted\",\n        default=None,\n        action=\"store_true\",\n        help=\"Use hinted font as base font\",\n    )\n    hint_group.add_argument(\n        \"--no-hinted\",\n        dest=\"hinted\",\n        default=None,\n        action=\"store_false\",\n        help=\"Use unhinted font as base font\",\n    )\n    liga_group = feature_group.add_mutually_exclusive_group()\n    liga_group.add_argument(\n        \"--liga\",\n        dest=\"liga\",\n        default=None,\n        action=\"store_true\",\n        help=\"Preserve all the ligatures\",\n    )\n    liga_group.add_argument(\n        \"--no-liga\",\n        dest=\"liga\",\n        default=None,\n        action=\"store_false\",\n        help=\"Remove all the ligatures\",\n    )\n    feature_group.add_argument(\n        \"--cn-narrow\",\n        action=\"store_true\",\n        help=\"Make CN characters narrow (experimental)\",\n    )\n\n    build_group = parser.add_argument_group(\"Build Options\")\n    nf_group = build_group.add_mutually_exclusive_group()\n    nf_group.add_argument(\n        \"--nerd-font\",\n        dest=\"nerd_font\",\n        default=None,\n        action=\"store_true\",\n        help=\"Build Nerd-Font version\",\n    )\n    nf_group.add_argument(\n        \"--no-nerd-font\",\n        dest=\"nerd_font\",\n        default=None,\n        action=\"store_false\",\n        help=\"Do not build Nerd-Font version\",\n    )\n    cn_group = build_group.add_mutually_exclusive_group()\n    cn_group.add_argument(\n        \"--cn\",\n        dest=\"cn\",\n        default=None,\n        action=\"store_true\",\n        help=\"Build Chinese version\",\n    )\n    cn_group.add_argument(\n        \"--no-cn\",\n        dest=\"cn\",\n        default=None,\n        action=\"store_false\",\n        help=\"Do not build Chinese version\",\n    )\n    build_group.add_argument(\n        \"--cn-both\",\n        action=\"store_true\",\n        help=\"Build both `Maple Mono CN` and `Maple Mono NF CN`. Nerd-Font version must be enabled\",\n    )\n    build_group.add_argument(\n        \"--ttf-only\",\n        action=\"store_true\",\n        help=\"Only build unhinted TTF format\",\n    )\n    build_group.add_argument(\n        \"--cache\",\n        action=\"store_true\",\n        help=\"Reuse font cache of TTF, OTF and Woff2 formats\",\n    )\n    build_group.add_argument(\n        \"--cn-rebuild\",\n        action=\"store_true\",\n        help=\"Reinstantiate CN base font\",\n    )\n    build_group.add_argument(\n        \"--archive\",\n        action=\"store_true\",\n        help=\"Build font archives with config and license. If has `--cache` flag, only archive Nerd-Font and CN formats\",\n    )\n\n    return parser.parse_args()\n\n\n# =========================================================================================\n\n\nclass FontConfig:\n    def __init__(self, args):\n        self.archive = None\n        self.use_cn_both = None\n        self.ttf_only = None\n        self.debug = None\n        self.apply_fea_file = None\n        # the number of parallel tasks\n        # when run in codespace, this will be 1\n        self.pool_size = 1 if not getenv(\"CODESPACE_NAME\") else 4\n        # font family name\n        self.family_name = \"Maple Mono\"\n        self.family_name_compact = \"MapleMono\"\n        # whether to use hinted ttf as base font\n        self.use_hinted = True\n        # whether to enable ligature\n        self.enable_liga = True\n        self.github_mirror = environ.get(\"GITHUB\", \"github.com\")\n        self.feature_freeze = {\n            \"cv01\": \"ignore\",\n            \"cv02\": \"ignore\",\n            \"cv03\": \"ignore\",\n            \"cv04\": \"ignore\",\n            \"cv31\": \"ignore\",\n            \"cv32\": \"ignore\",\n            \"cv33\": \"ignore\",\n            \"cv34\": \"ignore\",\n            \"cv35\": \"ignore\",\n            \"cv36\": \"ignore\",\n            \"cv96\": \"ignore\",\n            \"cv97\": \"ignore\",\n            \"cv98\": \"ignore\",\n            \"cv99\": \"ignore\",\n            \"ss01\": \"ignore\",\n            \"ss02\": \"ignore\",\n            \"ss03\": \"ignore\",\n            \"ss04\": \"ignore\",\n            \"ss05\": \"ignore\",\n            \"ss06\": \"ignore\",\n            \"ss07\": \"ignore\",\n            \"ss08\": \"ignore\",\n            \"zero\": \"ignore\",\n        }\n        # Nerd-Font settings\n        self.nerd_font = {\n            # whether to enable Nerd-Font\n            \"enable\": True,\n            # target version of Nerd-Font if font-patcher not exists\n            \"version\": \"3.2.1\",\n            # whether to make icon width fixed\n            \"mono\": False,\n            # prefer to use Font Patcher instead of using prebuild NerdFont base font\n            # if you want to custom build Nerd-Font using font-patcher, you need to set this to True\n            \"use_font_patcher\": False,\n            # symbol Fonts settings.\n            # default args: [\"--complete\"]\n            # if not, will use font-patcher to generate fonts\n            # full args: https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#font-patcher\n            \"glyphs\": [\"--complete\"],\n            # extra args for font-patcher\n            # default args: [\"-l\", \"--careful\", \"--outputdir\", output_nf]\n            # if \"mono\" is set to True, \"--mono\" will be added\n            # full args: https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#font-patcher\n            \"extra_args\": [],\n        }\n        # chinese font settings\n        self.cn = {\n            # whether to build Chinese fonts\n            # skip if Chinese base fonts are not founded\n            \"enable\": False,\n            # whether to patch Nerd-Font\n            \"with_nerd_font\": True,\n            # fix design language and supported languages\n            \"fix_meta_table\": True,\n            # whether to clean instantiated base CN fonts\n            \"clean_cache\": False,\n            # whether to narrow CN glyphs\n            \"narrow\": False,\n            # whether to hint CN font (will increase about 33% size)\n            \"use_hinted\": False,\n            # whether to use pre-instantiated static CN font as base font\n            \"use_static_base_font\": True,\n        }\n        self.__load_config(args.normal)\n        self.__load_args(args)\n\n        ver = FONT_VERSION\n        if \"-\" in FONT_VERSION:\n            ver, beta = FONT_VERSION.split(\"-\")\n            self.beta = beta\n\n        major, minor = ver.split(\".\")\n        self.version_str = f\"Version {major}.{minor:03}\"\n\n    def __load_config(self, use_normal):\n        try:\n            config_file_path = (\n                \"./source/preset-normal.json\" if use_normal else \"config.json\"\n            )\n            with open(config_file_path, \"r\") as f:\n                data = json.load(f)\n                for prop in [\n                    \"family_name\",\n                    \"use_hinted\",\n                    \"enable_liga\",\n                    \"pool_size\",\n                    \"github_mirror\",\n                    \"feature_freeze\",\n                    \"nerd_font\",\n                    \"cn\",\n                ]:\n                    if prop in data:\n                        val = data[prop]\n                        setattr(\n                            self,\n                            prop,\n                            val\n                            if type(val) is not dict\n                            else {**getattr(self, prop), **val},\n                        )\n\n        except ():\n            print(\"Fail to load config.json. Please check your config.json.\")\n            exit(1)\n\n    def __load_args(self, args):\n        self.archive = args.archive\n        self.use_cn_both = args.cn_both\n        self.debug = args.debug\n\n        if \"font_forge_bin\" not in self.nerd_font:\n            self.nerd_font[\"font_forge_bin\"] = get_font_forge_bin()\n\n        if args.feat is not None:\n            for f in args.feat:\n                if f in self.feature_freeze:\n                    self.feature_freeze[f] = \"enable\"\n\n        if args.hinted is not None:\n            self.use_hinted = args.hinted\n\n        if args.liga is not None:\n            self.enable_liga = args.liga\n\n        if args.nerd_font is not None:\n            self.nerd_font[\"enable\"] = args.nerd_font\n\n        if args.cn is not None:\n            self.cn[\"enable\"] = args.cn\n\n        if args.cn_narrow:\n            self.cn[\"narrow\"] = True\n\n        if args.ttf_only:\n            self.ttf_only = True\n\n        if args.apply_fea_file:\n            self.apply_fea_file = True\n\n        if args.cn_rebuild:\n            self.cn[\"clean_cache\"] = True\n            self.cn[\"use_static_base_font\"] = False\n\n        name_arr = [word.capitalize() for word in self.family_name.split(\" \")]\n        if not self.enable_liga:\n            name_arr.append(\"NL\")\n        if self.debug:\n            name_arr.append(\"Debug\")\n        self.family_name = \" \".join(name_arr)\n        self.family_name_compact = \"\".join(name_arr)\n\n        self.freeze_config_str = get_freeze_config_str(\n            self.feature_freeze, self.enable_liga\n        )\n\n    def should_use_font_patcher(self) -> bool:\n        if not (\n            len(self.nerd_font[\"extra_args\"]) > 0\n            or self.nerd_font[\"use_font_patcher\"]\n            or self.nerd_font[\"glyphs\"] != [\"--complete\"]\n        ):\n            return False\n\n        if check_font_patcher(\n            version=self.nerd_font[\"version\"],\n            github_mirror=self.github_mirror,\n        ) and not path.exists(self.nerd_font[\"font_forge_bin\"]):\n            print(\n                f\"FontForge bin({self.nerd_font['font_forge_bin']}) not found. Use prebuild Nerd-Font base font instead.\"\n            )\n            return False\n\n        return True\n\n    def should_cn_use_nerd_font(self) -> bool:\n        return self.cn[\"with_nerd_font\"] and self.nerd_font[\"enable\"]\n\n    def toggle_nf_cn_config(self) -> bool:\n        if not self.nerd_font[\"enable\"]:\n            print(\"❗Nerd-Font version is disabled. Toggle failed.\")\n            return False\n        self.cn[\"with_nerd_font\"] = not self.cn[\"with_nerd_font\"]\n        return True\n\n\nclass BuildOption:\n    def __init__(self, config: FontConfig):\n        output_dir_default = \"fonts\"\n        # paths\n        self.src_dir = \"source\"\n        self.output_dir = output_dir_default\n        self.output_otf = joinPaths(self.output_dir, \"OTF\")\n        self.output_ttf = joinPaths(self.output_dir, \"TTF\")\n        self.output_ttf_hinted = joinPaths(self.output_dir, \"TTF-AutoHint\")\n        self.output_variable = joinPaths(output_dir_default, \"Variable\")\n        self.output_woff2 = joinPaths(self.output_dir, \"Woff2\")\n        self.output_nf = joinPaths(self.output_dir, \"NF\")\n        self.ttf_base_dir = joinPaths(\n            self.output_dir, \"TTF-AutoHint\" if config.use_hinted else \"TTF\"\n        )\n\n        self.cn_variable_dir = f\"{self.src_dir}/cn\"\n        self.cn_static_dir = f\"{self.cn_variable_dir}/static\"\n\n        self.cn_base_font_dir = None\n        self.cn_suffix = None\n        self.cn_suffix_compact = None\n        self.output_cn = None\n        # In these subfamilies:\n        #   - NameID1 should be the family name\n        #   - NameID2 should be the subfamily name\n        #   - NameID16 and NameID17 should be removed\n        # Other subfamilies:\n        #   - NameID1 should be the family name, append with subfamily name without \"Italic\"\n        #   - NameID2 should be the \"Regular\" or \"Italic\"\n        #   - NameID16 should be the family name\n        #   - NameID17 should be the subfamily name\n        # https://github.com/subframe7536/maple-font/issues/182\n        # https://github.com/subframe7536/maple-font/issues/183\n        #\n        # same as `ftcli assistant commit . --ls 400 700`\n        # https://github.com/ftCLI/FoundryTools-CLI/issues/166#issuecomment-2095756721\n        self.skip_subfamily_list = [\"Regular\", \"Bold\", \"Italic\", \"BoldItalic\"]\n        self.is_nf_built = False\n        self.is_cn_built = False\n        self.has_cache = (\n            check_cache_dir(self.output_variable, count=2)\n            and check_cache_dir(self.output_otf)\n            and check_cache_dir(self.output_ttf)\n            and check_cache_dir(self.output_ttf_hinted)\n            and check_cache_dir(self.output_woff2)\n        )\n\n    def load_cn_dir_and_suffix(self, with_nerd_font: bool) -> None:\n        if with_nerd_font:\n            self.cn_base_font_dir = self.output_nf\n            self.cn_suffix = \"NF CN\"\n            self.cn_suffix_compact = \"NF-CN\"\n        else:\n            self.cn_base_font_dir = joinPaths(self.output_dir, \"TTF\")\n            self.cn_suffix = self.cn_suffix_compact = \"CN\"\n        self.output_cn = joinPaths(self.output_dir, self.cn_suffix_compact)\n\n    def should_build_cn(self, config: FontConfig) -> bool:\n        if not config.cn[\"enable\"] and not config.use_cn_both:\n            print(\n                '\\nNo `\"cn.enable\": true` in config.json or no `--cn` / `--cn-both` in argv. Skip CN build.'\n            )\n            return False\n\n        if config.cn[\"clean_cache\"]:\n            print(\"Clean CN static fonts\")\n            shutil.rmtree(self.cn_static_dir, ignore_errors=True)\n\n        if (\n            not path.exists(self.cn_static_dir)\n            or listdir(self.cn_static_dir).__len__() != 16\n        ):\n            tag = \"cn-base\"\n            if is_ci() or config.cn[\"use_static_base_font\"]:\n                return download_cn_base_font(\n                    tag=tag,\n                    zip_path=\"cn-base-static.zip\",\n                    target_dir=self.cn_static_dir,\n                    github_mirror=config.github_mirror,\n                )\n\n            if not config.cn[\"use_static_base_font\"] or not path.exists(\n                self.cn_static_dir\n            ):\n                if (\n                    path.exists(self.cn_variable_dir)\n                    and listdir(self.cn_variable_dir).__len__() == 2\n                ):\n                    print(\"No static CN fonts but detect CN base fonts\")\n                    instantiate_cn_base(self.cn_variable_dir, self.cn_static_dir)\n                    return True\n\n                result = download_cn_base_font(\n                    tag=tag,\n                    zip_path=\"cn-base-variable.zip\",\n                    target_dir=self.cn_variable_dir,\n                    github_mirror=config.github_mirror,\n                )\n                if result:\n                    instantiate_cn_base(self.cn_variable_dir, self.cn_static_dir)\n                    return True\n\n            print(\"\\nCN base fonts don't exist. Skip CN build.\")\n            return False\n        return True\n\n\ndef check_cache_dir(cache_dir: str, count: int = 16) -> bool:\n    if not path.isdir(cache_dir):\n        return False\n    return listdir(cache_dir).__len__() == count\n\n\ndef handle_ligatures(\n    font: TTFont, enable_ligature: bool, freeze_config: dict[str, str]\n):\n    \"\"\"\n    whether to enable ligatures and freeze font features\n    \"\"\"\n\n    freeze_feature(\n        font=font,\n        calt=enable_ligature,\n        moving_rules=[\"ss03\", \"ss07\", \"ss08\"],\n        config=freeze_config,\n    )\n\n\ndef instantiate_cn_base(cn_variable_dir: str, cn_static_dir: str):\n    print(\"=========================================\")\n    print(\"Instantiating CN Base font, be patient...\")\n    print(\"=========================================\")\n    run(\n        f\"ftcli converter vf2i {cn_variable_dir} -out {cn_static_dir}\",\n        log=True,\n    )\n    run(f\"ftcli ttf fix-contours {cn_static_dir}\", log=True)\n    run(f\"ftcli ttf remove-overlaps {cn_static_dir}\", log=True)\n    run(\n        f\"ftcli utils del-table -t kern -t GPOS {cn_static_dir}\",\n        log=True,\n    )\n\n\ndef parse_style_name(style_name_compact: str, skip_subfamily_list: list[str]):\n    is_italic = style_name_compact.endswith(\"Italic\")\n\n    _style_name = style_name_compact\n    if is_italic and style_name_compact[0] != \"I\":\n        _style_name = style_name_compact[:-6] + \" Italic\"\n\n    if style_name_compact in skip_subfamily_list:\n        return \"\", _style_name, _style_name, True\n    else:\n        return (\n            \" \" + style_name_compact.replace(\"Italic\", \"\"),\n            \"Italic\" if is_italic else \"Regular\",\n            _style_name,\n            False,\n        )\n\n\ndef fix_cn_cv(font: TTFont):\n    gsub_table = font[\"GSUB\"].table\n    config = {\n        \"cv96\": [\"quoteleft\", \"quoteright\", \"quotedblleft\", \"quotedblright\"],\n        \"cv97\": [\"ellipsis\"],\n        \"cv98\": [\"emdash\"],\n    }\n\n    for feature_record in gsub_table.FeatureList.FeatureRecord:\n        if feature_record.FeatureTag in config:\n            sub_table = gsub_table.LookupList.Lookup[\n                feature_record.Feature.LookupListIndex[0]\n            ].SubTable[0]\n            sub_table.mapping = {\n                value: f\"{value}.full\" for value in config[feature_record.FeatureTag]\n            }\n\n\ndef remove_locl(font: TTFont):\n    gsub = font[\"GSUB\"]\n    features_to_remove = []\n\n    for feature in gsub.table.FeatureList.FeatureRecord:\n        feature_tag = feature.FeatureTag\n\n        if feature_tag == \"locl\":\n            features_to_remove.append(feature)\n\n    for feature in features_to_remove:\n        gsub.table.FeatureList.FeatureRecord.remove(feature)\n\n\ndef drop_mac_names(dir: str):\n    run(f\"ftcli name del-mac-names -r {dir}\")\n\n\ndef get_new_name_from_map(old_name: str, map: dict[str, str]):\n    new_name = map.get(old_name)\n    if not new_name:\n        arr = re.split(r\"[\\._]\", old_name, maxsplit=2)\n        if map.get(arr[0]):\n            new_name = map.get(arr[0]) + old_name[len(arr[0]) :]\n    return new_name\n\n\ndef rename_glyph_name(\n    font: TTFont,\n    map: dict[str, str],\n    post_extra_names: bool = True,\n):\n    not_ci = not is_ci()\n    glyph_names = font.getGlyphOrder()\n    extra_names = font[\"post\"].extraNames\n    modified = False\n    extra_map = {\n        \"uni2047.liga\": \"question_question.liga\",\n        \"dotlessi\": \"idotless\",\n        \"f_f\": \"f_f.liga\",\n    }\n    for i, _ in enumerate(glyph_names):\n        old_name = str(glyph_names[i])\n\n        new_name = get_new_name_from_map(old_name, {**map, **extra_map})\n        if not new_name or new_name == old_name:\n            continue\n\n        if not_ci:\n            print(f\"[Rename] {old_name} -> {new_name}\")\n        glyph_names[i] = new_name\n        modified = True\n\n        if post_extra_names and old_name in extra_names:\n            extra_names[extra_names.index(old_name)] = new_name\n\n    if modified:\n        font.setGlyphOrder(glyph_names)\n\n\ndef get_unique_identifier(\n    font_config: FontConfig,\n    postscript_name: str,\n    narrow: bool = False,\n    ignore_suffix: bool = False,\n) -> str:\n    if ignore_suffix:\n        suffix = \"\"\n    else:\n        suffix = font_config.freeze_config_str\n        if \"CN\" in postscript_name and narrow:\n            suffix += \"Narrow;\"\n\n        if \"NF\" in postscript_name:\n            nf_ver = font_config.nerd_font[\"version\"]\n            suffix = f\"NF{nf_ver};{suffix}\"\n\n    beta_str = f\"-{font_config.beta}\" if font_config.beta else \"\"\n    return f\"{font_config.version_str}{beta_str};SUBF;{postscript_name};2024;FL830;{suffix}\"\n\n\ndef change_char_width(font: TTFont, match_width: int, target_width: int):\n    font[\"hhea\"].advanceWidthMax = target_width\n    for name in font.getGlyphOrder():\n        glyph = font[\"glyf\"][name]\n        width, lsb = font[\"hmtx\"][name]\n        if width != match_width:\n            continue\n        if glyph.numberOfContours == 0:\n            font[\"hmtx\"][name] = (target_width, lsb)\n            continue\n\n        delta = round((target_width - width) / 2)\n        glyph.coordinates.translate((delta, 0))\n        glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax = (\n            glyph.coordinates.calcIntBounds()\n        )\n        font[\"hmtx\"][name] = (target_width, lsb + delta)\n\n\ndef update_font_names(\n    font: TTFont,\n    family_name: str,  # NameID 1\n    style_name: str,  # NameID 2\n    unique_identifier: str,  # NameID 3\n    full_name: str,  # NameID 4\n    version_str: str,  # NameID 5\n    postscript_name: str,  # NameID 6\n    is_skip_subfamily: bool,\n    preferred_family_name: str = None,  # NameID 16\n    preferred_style_name: str = None,  # NameID 17\n):\n    set_font_name(font, family_name, 1)\n    set_font_name(font, style_name, 2)\n    set_font_name(font, unique_identifier, 3)\n    set_font_name(font, full_name, 4)\n    set_font_name(font, version_str, 5)\n    set_font_name(font, postscript_name, 6)\n\n    if not is_skip_subfamily and preferred_family_name and preferred_style_name:\n        set_font_name(font, preferred_family_name, 16)\n        set_font_name(font, preferred_style_name, 17)\n\n\ndef build_mono(f: str, font_config: FontConfig, build_option: BuildOption):\n    print(f\"👉 Minimal version for {f}\")\n    source_path = joinPaths(build_option.output_ttf, f)\n    font = TTFont(source_path)\n\n    style_compact = f.split(\"-\")[-1].split(\".\")[0]\n\n    style_with_prefix_space, style_in_2, style_in_17, is_skip_subfamily = (\n        parse_style_name(\n            style_name_compact=style_compact,\n            skip_subfamily_list=build_option.skip_subfamily_list,\n        )\n    )\n\n    postscript_name = f\"{font_config.family_name_compact}-{style_compact}\"\n\n    update_font_names(\n        font=font,\n        family_name=font_config.family_name + style_with_prefix_space,\n        style_name=style_in_2,\n        full_name=f\"{font_config.family_name} {style_in_17}\",\n        version_str=font_config.version_str,\n        postscript_name=postscript_name,\n        unique_identifier=get_unique_identifier(\n            font_config=font_config,\n            postscript_name=postscript_name,\n        ),\n        is_skip_subfamily=is_skip_subfamily,\n        preferred_family_name=font_config.family_name,\n        preferred_style_name=style_in_17,\n    )\n\n    # https://github.com/ftCLI/FoundryTools-CLI/issues/166#issuecomment-2095433585\n    if style_with_prefix_space == \" Thin\":\n        font[\"OS/2\"].usWeightClass = 250\n    elif style_with_prefix_space == \" ExtraLight\":\n        font[\"OS/2\"].usWeightClass = 275\n\n    handle_ligatures(\n        font=font,\n        enable_ligature=font_config.enable_liga,\n        freeze_config=font_config.feature_freeze,\n    )\n\n    remove(source_path)\n    target_path = joinPaths(build_option.output_ttf, f\"{postscript_name}.ttf\")\n    font.save(target_path)\n    font.close()\n\n    if font_config.ttf_only:\n        return\n\n    print(f\"Auto hint {postscript_name}.ttf\")\n    run(f\"ftcli ttf autohint {target_path} -out {build_option.output_ttf_hinted}\")\n    print(f\"Convert {postscript_name}.ttf to WOFF2\")\n    run(\n        f\"ftcli converter ft2wf {target_path} -out {build_option.output_woff2} -f woff2\"\n    )\n\n    _otf_path = joinPaths(\n        build_option.output_otf, path.basename(target_path).replace(\".ttf\", \".otf\")\n    )\n    print(f\"Convert {postscript_name}.ttf to OTF\")\n    run(\n        f\"ftcli converter ttf2otf --silent {target_path} -out {build_option.output_otf}\"\n    )\n    if not font_config.debug:\n        print(f\"Optimize {postscript_name}.otf\")\n        run(f\"ftcli otf fix-contours --silent {_otf_path}\")\n        run(f\"ftcli otf fix-version {_otf_path}\")\n\n\ndef build_nf_by_prebuild_nerd_font(\n    font_basename: str, font_config: FontConfig, build_option: BuildOption\n) -> TTFont:\n    merger = Merger()\n    return merger.merge(\n        [\n            joinPaths(build_option.ttf_base_dir, font_basename),\n            f\"{build_option.src_dir}/MapleMono-NF-Base{'-Mono' if font_config.nerd_font['mono'] else ''}.ttf\",\n        ]\n    )\n\n\ndef build_nf_by_font_patcher(\n    font_basename: str, font_config: FontConfig, build_option: BuildOption\n) -> TTFont:\n    \"\"\"\n    full args: https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#font-patcher\n    \"\"\"\n    _nf_args = [\n        font_config.nerd_font[\"font_forge_bin\"],\n        \"FontPatcher/font-patcher\",\n        \"-l\",\n        \"--careful\",\n        \"--outputdir\",\n        build_option.output_nf,\n    ] + font_config.nerd_font[\"glyphs\"]\n\n    if font_config.nerd_font[\"mono\"]:\n        _nf_args += [\"--mono\"]\n\n    _nf_args += font_config.nerd_font[\"extra_args\"]\n\n    run(_nf_args + [joinPaths(build_option.ttf_base_dir, font_basename)], log=True)\n    nf_file_name = \"NerdFont\"\n    if font_config.nerd_font[\"mono\"]:\n        nf_file_name += \"Mono\"\n    _path = joinPaths(\n        build_option.output_nf, font_basename.replace(\"-\", f\"{nf_file_name}-\")\n    )\n    font = TTFont(_path)\n    remove(_path)\n    return font\n\n\ndef build_nf(\n    f: str,\n    get_ttfont: Callable[[str, FontConfig, BuildOption], TTFont],\n    font_config: FontConfig,\n    build_option: BuildOption,\n):\n    print(f\"👉 NerdFont version for {f}\")\n    makedirs(build_option.output_nf, exist_ok=True)\n    nf_font = get_ttfont(f, font_config, build_option)\n\n    # format font name\n    style_compact_nf = f.split(\"-\")[-1].split(\".\")[0]\n\n    style_nf_with_prefix_space, style_in_2, style_in_17, is_skip_sufamily = (\n        parse_style_name(\n            style_name_compact=style_compact_nf,\n            skip_subfamily_list=build_option.skip_subfamily_list,\n        )\n    )\n\n    postscript_name = f\"{font_config.family_name_compact}-NF-{style_compact_nf}\"\n\n    update_font_names(\n        font=nf_font,\n        family_name=f\"{font_config.family_name} NF{style_nf_with_prefix_space}\",\n        style_name=style_in_2,\n        full_name=f\"{font_config.family_name} NF {style_in_17}\",\n        version_str=font_config.version_str,\n        postscript_name=postscript_name,\n        unique_identifier=get_unique_identifier(\n            font_config=font_config,\n            postscript_name=postscript_name,\n        ),\n        is_skip_subfamily=is_skip_sufamily,\n        preferred_family_name=f\"{font_config.family_name} NF\",\n        preferred_style_name=style_in_17,\n    )\n\n    target_path = joinPaths(\n        build_option.output_nf,\n        f\"{font_config.family_name_compact}-NF-{style_compact_nf}.ttf\",\n    )\n    nf_font.save(target_path)\n    nf_font.close()\n\n\ndef build_cn(f: str, font_config: FontConfig, build_option: BuildOption):\n    style_compact_cn = f.split(\"-\")[-1].split(\".\")[0]\n\n    print(f\"👉 {build_option.cn_suffix_compact} version for {f}\")\n\n    merger = Merger()\n    cn_font = merger.merge(\n        [\n            joinPaths(build_option.cn_base_font_dir, f),\n            joinPaths(\n                build_option.cn_static_dir, f\"MapleMonoCN-{style_compact_cn}.ttf\"\n            ),\n        ]\n    )\n\n    style_cn_with_prefix_space, style_in_2, style_in_17, is_skip_subfamily = (\n        parse_style_name(\n            style_name_compact=style_compact_cn,\n            skip_subfamily_list=build_option.skip_subfamily_list,\n        )\n    )\n\n    postscript_name = f\"{font_config.family_name_compact}-{build_option.cn_suffix_compact}-{style_compact_cn}\"\n\n    update_font_names(\n        font=cn_font,\n        family_name=f\"{font_config.family_name} {build_option.cn_suffix}{style_cn_with_prefix_space}\",\n        style_name=style_in_2,\n        full_name=f\"{font_config.family_name} {build_option.cn_suffix} {style_in_17}\",\n        version_str=font_config.version_str,\n        postscript_name=postscript_name,\n        unique_identifier=get_unique_identifier(\n            font_config=font_config,\n            postscript_name=postscript_name,\n            narrow=font_config.cn[\"narrow\"],\n        ),\n        is_skip_subfamily=is_skip_subfamily,\n        preferred_family_name=f\"{font_config.family_name} {build_option.cn_suffix}\",\n        preferred_style_name=style_in_17,\n    )\n\n    cn_font[\"OS/2\"].xAvgCharWidth = 600\n\n    # https://github.com/subframe7536/maple-font/issues/188\n    # https://github.com/subframe7536/maple-font/issues/313\n    fix_cn_cv(cn_font)\n\n    handle_ligatures(\n        font=cn_font,\n        enable_ligature=font_config.enable_liga,\n        freeze_config=font_config.feature_freeze,\n    )\n\n    if font_config.cn[\"narrow\"]:\n        change_char_width(font=cn_font, match_width=1200, target_width=1000)\n\n    # https://github.com/subframe7536/maple-font/issues/239\n    # already removed in source file\n    # remove_locl(font)\n\n    if font_config.cn[\"fix_meta_table\"]:\n        # add code page, Latin / Japanese / Simplify Chinese / Traditional Chinese\n        cn_font[\"OS/2\"].ulCodePageRange1 = 1 << 0 | 1 << 17 | 1 << 18 | 1 << 20\n\n        # fix meta table, https://learn.microsoft.com/en-us/typography/opentype/spec/meta\n        meta = newTable(\"meta\")\n        meta.data = {\n            \"dlng\": \"Latn, Hans, Hant, Jpan\",\n            \"slng\": \"Latn, Hans, Hant, Jpan\",\n        }\n        cn_font[\"meta\"] = meta\n\n    target_path = joinPaths(\n        build_option.output_cn,\n        f\"{font_config.family_name_compact}-{build_option.cn_suffix_compact}-{style_compact_cn}.ttf\",\n    )\n    cn_font.save(target_path)\n    cn_font.close()\n\n\ndef run_build(pool_size: int, fn: Callable, dir: str):\n    if pool_size > 1:\n        with Pool(pool_size) as p:\n            p.map(fn, listdir(dir))\n    else:\n        for f in listdir(dir):\n            fn(f)\n\n\ndef main():\n    check_ftcli()\n    parsed_args = parse_args()\n\n    font_config = FontConfig(args=parsed_args)\n    build_option = BuildOption(font_config)\n    build_option.load_cn_dir_and_suffix(font_config.should_cn_use_nerd_font())\n\n    if parsed_args.dry:\n        print(\"font_config:\", json.dumps(font_config.__dict__, indent=4))\n        if not is_ci():\n            print(\"build_option:\", json.dumps(build_option.__dict__, indent=4))\n            print(\"parsed_args:\", json.dumps(parsed_args.__dict__, indent=4))\n        return\n\n    should_use_cache = parsed_args.cache\n\n    if not should_use_cache:\n        print(\"🧹 Clean cache...\\n\")\n        shutil.rmtree(build_option.output_dir, ignore_errors=True)\n        shutil.rmtree(build_option.output_woff2, ignore_errors=True)\n\n    makedirs(build_option.output_dir, exist_ok=True)\n    makedirs(build_option.output_variable, exist_ok=True)\n\n    start_time = time.time()\n    print(\"🚩 Start building ...\")\n\n    # =========================================================================================\n    # ===================================   build basic   =====================================\n    # =========================================================================================\n\n    if not should_use_cache or not build_option.has_cache:\n        input_files = [\n            joinPaths(build_option.src_dir, \"MapleMono-Italic[wght]-VF.ttf\"),\n            joinPaths(build_option.src_dir, \"MapleMono[wght]-VF.ttf\"),\n        ]\n        for input_file in input_files:\n            font = TTFont(input_file)\n            basename = path.basename(input_file)\n\n            # fix auto rename by FontLab\n            print(f\"Fix names for {basename}\")\n            rename_glyph_name(\n                font=font,\n                map=match_unicode_names(\n                    input_file.replace(\".ttf\", \".glyphs\").replace(\"-VF\", \"\")\n                ),\n            )\n\n            if font_config.apply_fea_file:\n                fea_path = joinPaths(\n                    build_option.src_dir,\n                    \"features/italic.fea\"\n                    if \"Italic\" in input_file\n                    else \"features/regular.fea\",\n                )\n                print(f\"Apply feature file [{fea_path}] into [{basename}]\")\n                addOpenTypeFeatures(\n                    font,\n                    fea_path,\n                )\n\n            set_font_name(\n                font,\n                get_unique_identifier(\n                    font_config=font_config,\n                    postscript_name=get_font_name(font, 6),\n                    ignore_suffix=True,\n                ),\n                3,\n            )\n\n            font.save(\n                input_file.replace(build_option.src_dir, build_option.output_variable)\n            )\n\n        print(\"\\n✨ Instatiate and optimize fonts...\\n\")\n\n        print(\"Check and optimize variable fonts\")\n        if not font_config.debug:\n            run(f\"ftcli fix decompose-transformed {build_option.output_variable}\")\n\n        run(f\"ftcli fix italic-angle {build_option.output_variable}\")\n        run(f\"ftcli fix monospace {build_option.output_variable}\")\n        print(\"Instantiate TTF\")\n        run(\n            f\"ftcli converter vf2i {build_option.output_variable} -out {build_option.output_ttf}\"\n        )\n        print(\"Fix static TTF\")\n        run(f\"ftcli fix italic-angle {build_option.output_ttf}\")\n        run(f\"ftcli fix monospace {build_option.output_ttf}\")\n        run(f\"ftcli fix strip-names {build_option.output_ttf}\")\n\n        if font_config.debug:\n            run(f\"ftcli ttf dehint {build_option.output_ttf}\")\n        else:\n            # dehint, remove overlap and fix contours\n            run(f\"ftcli ttf fix-contours --silent {build_option.output_ttf}\")\n\n        _build_mono = partial(\n            build_mono, font_config=font_config, build_option=build_option\n        )\n\n        run_build(font_config.pool_size, _build_mono, build_option.output_ttf)\n\n        drop_mac_names(build_option.output_variable)\n        drop_mac_names(build_option.output_ttf)\n\n        if not font_config.ttf_only:\n            drop_mac_names(build_option.output_ttf_hinted)\n            drop_mac_names(build_option.output_otf)\n            drop_mac_names(build_option.output_woff2)\n\n    # =========================================================================================\n    # ====================================   build NF   =======================================\n    # =========================================================================================\n\n    if font_config.nerd_font[\"enable\"] and not font_config.ttf_only:\n        use_font_patcher = font_config.should_use_font_patcher()\n\n        get_ttfont = (\n            build_nf_by_font_patcher\n            if use_font_patcher\n            else build_nf_by_prebuild_nerd_font\n        )\n\n        _build_fn = partial(\n            build_nf,\n            get_ttfont=get_ttfont,\n            font_config=font_config,\n            build_option=build_option,\n        )\n        _version = font_config.nerd_font[\"version\"]\n        print(\n            f\"\\n🔧 Patch Nerd-Font v{_version} using {'Font Patcher' if use_font_patcher else 'prebuild base font'}...\\n\"\n        )\n\n        run_build(font_config.pool_size, _build_fn, build_option.output_ttf)\n        drop_mac_names(build_option.output_ttf)\n        build_option.is_nf_built = True\n\n    # =========================================================================================\n    # ====================================   build CN   =======================================\n    # =========================================================================================\n\n    if not font_config.ttf_only and build_option.should_build_cn(font_config):\n\n        def _build_cn():\n            print(\n                f\"\\n🔎 Build CN fonts {'with Nerd-Font' if font_config.should_cn_use_nerd_font() else ''}...\\n\"\n            )\n            makedirs(build_option.output_cn, exist_ok=True)\n            fn = partial(build_cn, font_config=font_config, build_option=build_option)\n\n            run_build(font_config.pool_size, fn, build_option.cn_base_font_dir)\n\n            if font_config.cn[\"use_hinted\"]:\n                print(\"Auto hint all glyphs\")\n                run(f\"ftcli ttf autohint {build_option.output_cn}\")\n\n            drop_mac_names(build_option.cn_base_font_dir)\n\n        _build_cn()\n\n        if font_config.use_cn_both:\n            result = font_config.toggle_nf_cn_config()\n            if result:\n                build_option.load_cn_dir_and_suffix(\n                    font_config.should_cn_use_nerd_font()\n                )\n                _build_cn()\n\n        build_option.is_cn_built = True\n\n    # write config to output path\n    with open(\n        joinPaths(build_option.output_dir, \"build-config.json\"), \"w\", encoding=\"utf-8\"\n    ) as config_file:\n        result = {\n            \"version\": FONT_VERSION,\n            \"family_name\": font_config.family_name,\n            \"use_hinted\": font_config.use_hinted,\n            \"ligature\": font_config.enable_liga,\n            \"feature_freeze\": font_config.feature_freeze,\n            \"nerd_font\": font_config.nerd_font,\n            \"cn\": font_config.cn,\n        }\n        del result[\"nerd_font\"][\"font_forge_bin\"]\n        result[\"nerd_font\"][\"enable\"] = build_option.is_nf_built\n        result[\"cn\"][\"enable\"] = build_option.is_cn_built\n        config_file.write(\n            json.dumps(\n                result,\n                indent=4,\n            )\n        )\n\n    # =========================================================================================\n    # ====================================   archive   ========================================\n    # =========================================================================================\n\n    def compress_folder(\n        source_file_or_dir_path: str, target_parent_dir_path: str\n    ) -> tuple[str, str]:\n        \"\"\"\n        compress folder and return sha1\n        \"\"\"\n        source_folder_name = path.basename(source_file_or_dir_path)\n\n        zip_file_name_without_ext = f\"{font_config.family_name_compact}-{source_folder_name}{'-unhinted' if not font_config.use_hinted else ''}\"\n\n        zip_path = joinPaths(\n            target_parent_dir_path,\n            f\"{zip_file_name_without_ext}.zip\",\n        )\n\n        with ZipFile(\n            zip_path, \"w\", compression=ZIP_DEFLATED, compresslevel=5\n        ) as zip_file:\n            for root, _, files in walk(source_file_or_dir_path):\n                for file in files:\n                    file_path = joinPaths(root, file)\n                    zip_file.write(\n                        file_path, path.relpath(file_path, source_file_or_dir_path)\n                    )\n            zip_file.write(\"OFL.txt\", \"LICENSE.txt\")\n            if not source_file_or_dir_path.endswith(\"Variable\"):\n                zip_file.write(\n                    joinPaths(build_option.output_dir, \"build-config.json\"),\n                    \"config.json\",\n                )\n\n        zip_file.close()\n        sha256 = hashlib.sha256()\n        with open(zip_path, \"rb\") as zip_file:\n            while True:\n                data = zip_file.read(1024)\n                if not data:\n                    break\n                sha256.update(data)\n\n        return sha256.hexdigest(), zip_file_name_without_ext\n\n    if font_config.archive:\n        print(\"\\n🚀 archive files...\\n\")\n\n        # archive fonts\n        archive_dir_name = \"archive\"\n        archive_dir = joinPaths(build_option.output_dir, archive_dir_name)\n        makedirs(archive_dir, exist_ok=True)\n\n        # archive fonts\n        for f in listdir(build_option.output_dir):\n            if f == archive_dir_name or f.endswith(\".json\"):\n                continue\n\n            if should_use_cache and f not in [\"CN\", \"NF\", \"NF-CN\"]:\n                continue\n\n            sha256, zip_file_name_without_ext = compress_folder(\n                source_file_or_dir_path=joinPaths(build_option.output_dir, f),\n                target_parent_dir_path=archive_dir,\n            )\n            with open(\n                joinPaths(archive_dir, f\"{zip_file_name_without_ext}.sha256\"),\n                \"w\",\n                encoding=\"utf-8\",\n            ) as hash_file:\n                hash_file.write(sha256)\n\n            print(f\"👉 archive: {f}\")\n\n    freeze_str = (\n        font_config.freeze_config_str\n        if font_config.freeze_config_str != \"\"\n        else \"default config\"\n    )\n    end_time = time.time()\n    date_time_fmt = time.strftime(\"%H:%M:%S\", time.localtime(end_time))\n    time_diff = end_time - start_time\n    print(\n        f\"\\n🏁 Build finished at {date_time_fmt}, cost {time_diff:.2f} s, family name is {font_config.family_name}, {freeze_str}\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "build_base_nf.py",
          "type": "blob",
          "size": 4.171875,
          "content": "#!/usr/bin/env python3\nimport json\nfrom os import path, remove\nfrom urllib.request import urlopen\nfrom fontTools.varLib import TTFont\nfrom fontTools.subset import Subsetter\n\nfrom source.py.utils import (\n    check_font_patcher,\n    del_font_name,\n    get_font_forge_bin,\n    set_font_name,\n    run,\n)\n\nbase_font_path = \"fonts/TTF/MapleMono-Regular.ttf\"\nfamily_name = \"Maple Mono\"\nfont_forge_bin = get_font_forge_bin()\n\nif not path.exists(base_font_path):\n    print(\"font not exist, please run `python build.py` first\")\n    exit(1)\n\n\ndef parse_codes_from_json(data) -> list[int]:\n    \"\"\"\n    Load unicodes from `glyphnames.json`\n    \"\"\"\n    try:\n        codes = [\n            int(f\"0x{value['code']}\", 16)\n            for key, value in data.items()\n            if isinstance(value, dict) and \"code\" in value\n        ]\n\n        return codes\n\n    except json.JSONDecodeError:\n        print(\"Invalide JSON\")\n        exit(1)\n\n\ndef update_config_json(config_path: str, version: str):\n    with open(config_path, \"r+\", encoding=\"utf-8\") as file:\n        data = json.load(file)\n\n        if \"nerd_font\" in data:\n            data[\"nerd_font\"][\"version\"] = version\n\n        file.seek(0)\n        json.dump(data, file, ensure_ascii=False, indent=2)\n        file.truncate()\n\n\ndef check_update():\n    current_version = None\n    with open(\"./config.json\", \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n        current_version = data[\"nerd_font\"][\"version\"]\n\n    latest_version = current_version\n    print(\"Getting latest version from remote...\")\n    with urlopen(\n        \"https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest\"\n    ) as response:\n        data = json.loads(response.read().decode(\"utf-8\").split(\"\\n\")[0])\n        for key in data:\n            if key == \"tag_name\":\n                latest_version = str(data[key])[1:]\n                break\n\n        if latest_version == current_version:\n            print(\"✨ Current version match latest version\")\n            if not check_font_patcher(latest_version):\n                print(\"Font-Patcher not exist and fail to download, exit\")\n                exit(1)\n            return\n\n        print(\n            f\"Current version {current_version} not match latest version {latest_version}, update\"\n        )\n        if not check_font_patcher(latest_version):\n            print(\"Fail to update Font-Patcher, exit\")\n            exit(1)\n        update_config_json(\"./config.json\", latest_version)\n        update_config_json(\"./source/preset-normal.json\", latest_version)\n\n\ndef get_nerd_font_patcher_args(mono: bool):\n    # full args: https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#font-patcher\n    _nf_args = [\n        font_forge_bin,\n        \"FontPatcher/font-patcher\",\n        \"-l\",\n        \"-c\",\n        \"--careful\",\n    ]\n    if mono:\n        _nf_args += [\"--mono\"]\n\n    return _nf_args\n\n\ndef build_nf(mono: bool):\n    nf_args = get_nerd_font_patcher_args(mono)\n\n    nf_file_name = \"NerdFont\"\n    if mono:\n        nf_file_name += \"Mono\"\n\n    style_name = \"Regular\"\n\n    run(nf_args + [base_font_path])\n    _path = f\"{family_name.replace(' ', '')}{nf_file_name}-{style_name}.ttf\"\n    nf_font = TTFont(_path)\n    remove(_path)\n\n    set_font_name(nf_font, f\"{family_name} NF Base{' Mono' if mono else ''}\", 1)\n    set_font_name(nf_font, style_name, 2)\n    set_font_name(\n        nf_font, f\"{family_name} NF Base{' Mono' if mono else ''} {style_name}\", 4\n    )\n    set_font_name(\n        nf_font,\n        f\"{family_name.replace(' ', '-')}-NF-Base{'-Mono' if mono else ''}-{style_name}\",\n        6,\n    )\n    del_font_name(nf_font, 16)\n    del_font_name(nf_font, 17)\n\n    return nf_font\n\n\ndef subset(mono: bool, unicodes: list[int]):\n    font = build_nf(mono)\n    subsetter = Subsetter()\n    subsetter.populate(\n        unicodes=unicodes,\n    )\n    subsetter.subset(font)\n\n    _path = f\"source/MapleMono-NF-Base{'-Mono' if mono else ''}.ttf\"\n    font.save(_path)\n    run(f\"ftcli fix monospace {_path}\")\n    font.close()\n\n\ndef main():\n    check_update()\n    with open(\"./FontPatcher/glyphnames.json\", \"r\", encoding=\"utf-8\") as f:\n        unicodes = parse_codes_from_json(json.load(f))\n        subset(True, unicodes=unicodes)\n        subset(False, unicodes=unicodes)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 1.013671875,
          "content": "{\n  \"$schema\": \"./source/schema.json\",\n  \"family_name\": \"Maple Mono\",\n  \"use_hinted\": true,\n  \"pool_size\": 4,\n  \"ligature\": true,\n  \"feature_freeze\": {\n    \"cv01\": \"ignore\",\n    \"cv02\": \"ignore\",\n    \"cv03\": \"ignore\",\n    \"cv04\": \"ignore\",\n    \"cv31\": \"ignore\",\n    \"cv32\": \"ignore\",\n    \"cv33\": \"ignore\",\n    \"cv34\": \"ignore\",\n    \"cv35\": \"ignore\",\n    \"cv36\": \"ignore\",\n    \"cv96\": \"ignore\",\n    \"cv97\": \"ignore\",\n    \"cv98\": \"ignore\",\n    \"cv99\": \"ignore\",\n    \"ss01\": \"ignore\",\n    \"ss02\": \"ignore\",\n    \"ss03\": \"ignore\",\n    \"ss04\": \"ignore\",\n    \"ss05\": \"ignore\",\n    \"ss06\": \"ignore\",\n    \"ss07\": \"ignore\",\n    \"ss08\": \"ignore\",\n    \"zero\": \"ignore\"\n  },\n  \"nerd_font\": {\n    \"enable\": true,\n    \"version\": \"3.3.0\",\n    \"mono\": false,\n    \"use_font_patcher\": false,\n    \"glyphs\": [\n      \"--complete\"\n    ],\n    \"extra_args\": []\n  },\n  \"cn\": {\n    \"enable\": false,\n    \"with_nerd_font\": true,\n    \"fix_meta_table\": true,\n    \"clean_cache\": false,\n    \"narrow\": false,\n    \"use_hinted\": false,\n    \"use_static_base_font\": true\n  }\n}"
        },
        {
          "name": "release.py",
          "type": "blob",
          "size": 3.4892578125,
          "content": "#!/usr/bin/env python3\nimport argparse\nimport os\nimport re\nimport shutil\n\nfrom source.py.utils import run\n\n# Mapping of style names to weights\nweight_map = {\n    \"Thin\": \"100\",\n    \"ExtraLight\": \"200\",\n    \"Light\": \"300\",\n    \"Regular\": \"400\",\n    \"Italic\": \"400\",\n    \"SemiBold\": \"500\",\n    \"Medium\": \"600\",\n    \"Bold\": \"700\",\n    \"ExtraBold\": \"800\",\n}\n\n\ndef format_filename(filename: str):\n    match = re.match(r\"MapleMono-(.*)\\.(.*)$\", filename)\n\n    if not match:\n        return None\n\n    style = match.group(1)\n\n    weight = weight_map[style.removesuffix(\"Italic\") if style != \"Italic\" else \"Italic\"]\n    suf = \"italic\" if \"italic\" in filename.lower() else \"normal\"\n\n    new_filename = f\"maple-mono-latin-{weight}-{suf}.{match.group(2)}\"\n    return new_filename\n\n\ndef rename_files(dir: str):\n    for filename in os.listdir(dir):\n        if not filename.endswith(\".woff\") and not filename.endswith(\".woff2\"):\n            continue\n        new_name = format_filename(filename)\n        if new_name:\n            os.rename(os.path.join(dir, filename), os.path.join(dir, new_name))\n            print(f\"Renamed: {filename} -> {new_name}\")\n\n\ndef parse_tag(args):\n    \"\"\"\n    Parse the tag from the command line arguments.\n    Format: v7.0[-beta3]\n    \"\"\"\n    tag = args.tag\n\n    if not tag.startswith(\"v\"):\n        tag = f\"v{tag}\"\n\n    match = re.match(r\"^v(\\d+)\\.(\\d+)$\", tag)\n    if not match:\n        raise ValueError(f\"Invalid tag: {tag}, expected format: v7.0\")\n\n    major, minor = match.groups()\n    # Remove leading zero from the minor version if necessary\n    minor = str(int(minor))\n    tag = f\"v{major}.{minor}\"\n\n    if args.beta:\n        tag += \"-\" if args.beta.startswith(\"beta\") else \"-beta\" + args.beta\n\n    return tag\n\n\ndef update_build_script_version(tag):\n    with open(\"build.py\", \"r\", encoding=\"utf-8\") as f:\n        content = f.read()\n        f.close()\n    content = re.sub(r'FONT_VERSION = \".*\"', f'FONT_VERSION = \"{tag}\"', content)\n    with open(\"build.py\", \"w\", encoding=\"utf-8\") as f:\n        f.write(content)\n        f.close()\n\n\ndef git_commit(tag):\n    run(\"git add woff2/var build.py\")\n    run([\"git\", \"commit\", \"-m\", f\"Release {tag}\"])\n    run(f\"git tag {tag}\")\n    print(\"Committed and tagged\")\n\n    run(\"git push origin\")\n    run(f\"git push origin {tag}\")\n    print(\"Pushed to origin\")\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"tag\",\n        type=str,\n        help=\"The tag to build the release for, format: 7.0 or v7.0\",\n    )\n    parser.add_argument(\n        \"beta\",\n        nargs=\"?\",\n        type=str,\n        help=\"Beta tag name, format: 3 or beta3\",\n    )\n    parser.add_argument(\n        \"--dry\",\n        action=\"store_true\",\n        help=\"Dry run\",\n    )\n    args = parser.parse_args()\n    tag = parse_tag(args)\n    # prompt and wait for user input\n    choose = input(f\"Tag {tag}? (Y or n) \")\n    if choose != \"\" and choose.lower() != \"y\":\n        print(\"Aborted\")\n        return\n    update_build_script_version(tag)\n\n    target_dir = \"fontsource\"\n    if os.path.exists(target_dir):\n        shutil.rmtree(target_dir)\n    run(\"python build.py --ttf-only\")\n    run(f\"ftcli converter ft2wf -f woff2 ./fonts/TTF -out {target_dir}\")\n    run(f\"ftcli converter ft2wf -f woff ./fonts/TTF -out {target_dir}\")\n    rename_files(target_dir)\n    print(\"Generate fontsource files\")\n    run(\"ftcli converter ft2wf -f woff2 ./fonts/Variable -out woff2/var\")\n    print(\"Update variable WOFF2\")\n\n    if args.dry:\n        print(\"Dry run\")\n    else:\n        git_commit(tag)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0400390625,
          "content": "foundrytools-cli==1.1.22\nglyphsLib==6.6.1"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "woff2",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}