{
  "metadata": {
    "timestamp": 1736560801251,
    "page": 495,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "agronholm/apscheduler",
      "stars": 6429,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.162109375,
          "content": ".project\n.pydevproject\n.idea/\n.coverage\n.cache/\n.mypy_cache\n.pytest_cache/\n.tox/\n.eggs/\n*.egg-info/\n*.pyc\ndist/\ndocs/_build/\nbuild/\nvirtualenv/\nvenv*/\nexample.sqlite\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.138671875,
          "content": "Alex Grönholm <alex.gronholm@nextday.fi> agronholm <devnull@localhost>\nAlex Grönholm <alex.gronholm@nextday.fi> demigod <devnull@localhost>\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.37890625,
          "content": "# This is the configuration file for pre-commit (https://pre-commit.com/).\n# To use:\n# * Install pre-commit (https://pre-commit.com/#installation)\n# * Copy this file as \".pre-commit-config.yaml\"\n# * Run \"pre-commit install\".\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-added-large-files\n      - id: check-case-conflict\n      - id: check-merge-conflict\n      - id: check-symlinks\n      - id: check-toml\n      - id: check-yaml\n      - id: debug-statements\n      - id: end-of-file-fixer\n      - id: mixed-line-ending\n        args: [ \"--fix=lf\" ]\n      - id: trailing-whitespace\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n      - id: ruff\n        args: [--fix, --show-fixes]\n      - id: ruff-format\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.14.1\n    hooks:\n      - id: mypy\n        additional_dependencies:\n          - attrs == 23.2.0\n          - pymongo == 4.8.0\n          - redis == 5.0.7\n          - sqlalchemy == 2.0.31\n          - tzlocal == 5.2\n        exclude: docs/conf.py\n        stages: [manual]\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n\n  - repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    - id: rst-backticks\n    - id: rst-directive-colons\n    - id: rst-inline-touching-normal\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.21484375,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\nsphinx:\n  configuration: docs/conf.py\n  fail_on_warning: true\n\npython:\n   install:\n      - method: pip\n        path: .\n        extra_requirements: [doc]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2009 Alex Grönholm\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.71484375,
          "content": ".. image:: https://github.com/agronholm/apscheduler/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/agronholm/apscheduler/actions/workflows/test.yml\n  :alt: Build Status\n.. image:: https://coveralls.io/repos/github/agronholm/apscheduler/badge.svg?branch=master\n  :target: https://coveralls.io/github/agronholm/apscheduler?branch=master\n  :alt: Code Coverage\n.. image:: https://readthedocs.org/projects/apscheduler/badge/?version=latest\n  :target: https://apscheduler.readthedocs.io/en/master/?badge=latest\n  :alt: Documentation\n\n.. warning:: The v4.0 series is provided as a **pre-release** and may change in a\n   backwards incompatible fashion without any migration pathway, so do NOT use this\n   release in production!\n\nAdvanced Python Scheduler (APScheduler) is a task scheduler and task queue system for\nPython. It can be used solely as a job queuing system if you have no need for task\nscheduling. It scales both up and down, and is suitable for both trivial, single-process\nuse cases as well as large deployments spanning multiple nodes. Multiple schedulers and\nworkers can be deployed to use a shared data store to provide both a degree of high\navailability and horizontal scaling.\n\nAPScheduler comes in both synchronous and asynchronous flavors, making it a good fit for\nboth traditional, thread-based applications, and asynchronous (asyncio or Trio_)\napplications. Documentation and examples are provided for integrating with either WSGI_\nor ASGI_ compatible web applications.\n\nSupport is provided for persistent storage of schedules and jobs. This means that they\ncan be shared among multiple scheduler/worker instances and will survive process and\nnode restarts.\n\nThe built-in persistent data store back-ends are:\n\n* PostgreSQL\n* MySQL and derivatives\n* SQLite\n* MongoDB\n\nThe built-in event brokers (needed in scenarios with multiple schedulers and/or\nworkers):\n\n* PostgreSQL\n* Redis\n* MQTT\n\nThe built-in scheduling mechanisms (*triggers*) are:\n\n* Cron-style scheduling\n* Interval-based scheduling (runs tasks on even intervals)\n* Calendar-based scheduling (runs tasks on intervals of X years/months/weeks/days,\n  always at the same time of day)\n* One-off scheduling (runs a task once, at a specific date/time)\n\nDifferent scheduling mechanisms can even be combined with so-called *combining triggers*\n(see the documentation_ for details).\n\nYou can also implement your custom scheduling logic by building your own trigger class.\nThese will be treated no differently than the built-in ones.\n\nOther notable features include:\n\n* You can limit the maximum number of simultaneous jobs for a given task (function)\n* You can limit the amount of time a job is allowed to start late\n* Jitter (adjustable, random delays added to the run time of each scheduled job)\n\n.. _Trio: https://pypi.org/project/trio/\n.. _WSGI: https://wsgi.readthedocs.io/en/latest/what.html\n.. _ASGI: https://asgi.readthedocs.io/en/latest/index.html\n.. _documentation: https://apscheduler.readthedocs.io/en/master/\n\nDocumentation\n=============\n\nDocumentation can be found\n`here <https://apscheduler.readthedocs.io/en/master/?badge=latest>`_.\n\nSource\n======\n\nThe source can be browsed at `Github <https://github.com/agronholm/apscheduler>`_.\n\nReporting bugs\n==============\n\nA `bug tracker <https://github.com/agronholm/apscheduler/issues>`_ is provided by\nGitHub.\n\nGetting help\n============\n\nIf you have problems or other questions, you can either:\n\n* Ask in the `apscheduler <https://gitter.im/apscheduler/Lobby>`_ room on Gitter\n* Post a question on `GitHub discussions`_, or\n* Post a question on StackOverflow_ and add the ``apscheduler`` tag\n\n.. _GitHub discussions: https://github.com/agronholm/apscheduler/discussions/categories/q-a\n.. _StackOverflow: http://stackoverflow.com/questions/tagged/apscheduler\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.509765625,
          "content": "services:\n  postgresql:\n    image: postgres\n    ports:\n      - 127.0.0.1:5432:5432\n    environment:\n      POSTGRES_DB: testdb\n      POSTGRES_PASSWORD: secret\n\n  mysql:\n    image: mysql\n    ports:\n      - 127.0.0.1:3306:3306\n    environment:\n      MYSQL_DATABASE: testdb\n      MYSQL_ROOT_PASSWORD: secret\n\n  mongodb:\n    image: mongo\n    ports:\n      - 127.0.0.1:27017:27017\n\n  emqx:\n    image: emqx/emqx\n    ports:\n      - 127.0.0.1:1883:1883\n\n  valkey:\n    image: valkey/valkey:7.2\n    ports:\n      - 127.0.0.1:6379:6379\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.7490234375,
          "content": "[build-system]\nrequires = [\n    \"setuptools >= 64\",\n    \"setuptools_scm >= 6.4\"\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"APScheduler\"\ndescription = \"In-process task scheduler with Cron-like capabilities\"\nreadme = \"README.rst\"\nauthors = [{name = \"Alex Grönholm\", email = \"alex.gronholm@nextday.fi\"}]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Typing :: Typed\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n]\nkeywords = [\"scheduling\", \"cron\"]\nlicense = {text = \"MIT\"}\nrequires-python = \">= 3.9\"\ndependencies = [\n    \"anyio ~= 4.0\",\n    \"attrs >= 22.1\",\n    \"tenacity >= 8.0, < 10.0\",\n    \"tzlocal >= 3.0\",\n    \"typing_extensions >= 4.0; python_version < '3.11'\"\n]\ndynamic = [\"version\"]\n\n[project.urls]\nDocumentation = \"https://apscheduler.readthedocs.io/en/master/\"\nChangelog = \"https://apscheduler.readthedocs.io/en/master/versionhistory.html\"\n\"Source code\" = \"https://github.com/agronholm/apscheduler\"\n\"Issue tracker\" = \"https://github.com/agronholm/apscheduler/issues\"\n\n[project.optional-dependencies]\nasyncpg = [\"asyncpg >= 0.20\"]\ncbor = [\"cbor2 >= 5.0\"]\nmongodb = [\"pymongo >= 4\"]\nmqtt = [\"paho-mqtt >= 2.0\"]\nredis = [\"redis >= 5.0.1\"]\nsqlalchemy = [\"sqlalchemy[asyncio] >= 2.0.24\"]\ntest = [\n    \"APScheduler[cbor,mongodb,mqtt,redis,sqlalchemy]\",\n    \"asyncpg >= 0.20; python_implementation == 'CPython' and python_version < '3.13'\",\n    \"aiosqlite >= 0.19\",\n    \"anyio[trio]\",\n    \"asyncmy >= 0.2.5; python_implementation == 'CPython'\",\n    \"coverage >= 7\",\n    \"psycopg[binary]\",\n    \"pymongo >= 4\",\n    \"pymysql[rsa]\",\n    \"PySide6 >= 6.6; python_implementation == 'CPython' and python_version < '3.13'\",\n    \"pytest >= 7.4\",\n    \"pytest-lazy-fixtures\",\n    \"pytest-mock\",\n    \"time-machine >= 2.13.0; python_implementation == 'CPython'\",\n    \"\"\"\\\n    uwsgi <= 2.0.26; python_implementation == 'CPython' and platform_system == 'Linux'\\\n    and python_version < '3.13'\\\n    \"\"\",\n]\ndoc = [\n    \"sphinx\",\n    \"sphinx-autodoc-typehints >= 2.2.3\",\n    \"sphinx-rtd-theme >= 1.3.0\",\n    \"sphinx-tabs >= 3.3.1\",\n]\n\n[tool.setuptools_scm]\nversion_scheme = \"post-release\"\nlocal_scheme = \"dirty-tag\"\n\n[tool.pytest.ini_options]\naddopts = \"-rsx --tb=short\"\ntestpaths = \"tests\"\nfilterwarnings = \"always\"\nmarkers = [\n    \"external_service: marks tests as requiring some external service\",\n]\n\n[tool.coverage.run]\nsource = [\"apscheduler\"]\n\n[tool.coverage.report]\nshow_missing = true\n\n[tool.ruff.lint]\nextend-select = [\n    \"ASYNC\",        # flake8-async\n    \"G\",            # flake8-logging-format\n    \"I\",            # isort\n    \"ISC\",          # flake8-implicit-str-concat\n    \"PGH\",          # pygrep-hooks\n    \"RUF\",          # ruff specific rules\n    \"UP\",           # pyupgrade\n    \"W\",            # pycodestyle warnings\n]\nignore = [\n    \"RUF001\",\n    \"RUF002\",\n]\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"apscheduler\"]\nrequired-imports = [\"from __future__ import annotations\"]\n\n[tool.mypy]\npython_version = \"3.10\"\nignore_missing_imports = true\ndisable_error_code = \"type-abstract\"\n\n[tool.tox]\nenv_list = [\"py39\", \"py310\", \"py311\", \"py312\", \"py313\", \"py314\", \"pypy3\"]\nskip_missing_interpreters = true\n\n[tool.tox.env_run_base]\ncommands = [[\"pytest\", { replace = \"posargs\", extend = true }]]\npackage = \"editable\"\nextras = [\"test\"]\n\n[tool.tox.env.pyright]\ncommands = [[\"pyright\", \"--verifytypes\", \"apscheduler\"]]\ndeps = [\"pyright\"]\n\n[tool.tox.env.docs]\ncommands = [[\"sphinx-build\", \"-W\", \"-n\", \"docs\", \"build/sphinx\"]]\nextras = [\"doc\"]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}