{
  "metadata": {
    "timestamp": 1736560623230,
    "page": 254,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Farama-Foundation/Gymnasium",
      "stars": 7817,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4892578125,
          "content": "*.swp\n*.pyc\n*.py~\n.DS_Store\n.cache\n.pytest_cache/\n__pycache__/\n\n# Setuptools distribution and build folders.\n/dist/\n/build\n/wheels\n/wheelhouse\n\n# Virtualenv\n/env\n/venv\n/.venv\n\n# Python egg metadata, regenerated from source files by setuptools.\n/*.egg-info\n\n*.sublime-project\n*.sublime-workspace\n\nlogs/\n\n.ipynb_checkpoints\nghostdriver.log\n\njunk\nMUJOCO_LOG.txt\n\nrllab_mujoco\n\ntutorial/*.html\n\n# IDE files\n.eggs\n.tox\n\n# PyCharm project files\n.idea\nvizdoom.ini\n\n# Data generated from pytest\nsave_videos*/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.1533203125,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-symlinks\n      - id: destroyed-symlinks\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-toml\n      - id: check-ast\n      - id: check-added-large-files\n      - id: check-merge-conflict\n      - id: check-executables-have-shebangs\n      - id: check-shebang-scripts-are-executable\n      - id: detect-private-key\n      - id: debug-statements\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        args:\n          - --ignore-words-list=reacher,ure,referenc,wile,ontact,manuel\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n        args:\n          - '--per-file-ignores=*/__init__.py:F401 gymnasium/envs/registration.py:E704 docs/tutorials/*.py:E402 gymnasium/experimental/wrappers/__init__.py:E402'\n          - --ignore=E203,W503,E741\n          - --max-complexity=30\n          - --max-line-length=456\n          - --show-source\n          - --statistics\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n      - id: pyupgrade\n        args: [\"--py38-plus\"]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: https://github.com/python/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/pydocstyle\n    rev: 6.3.0\n    hooks:\n      - id: pydocstyle\n        exclude: ^(gymnasium/envs/box2d)|(gymnasium/envs/classic_control)|(gymnasium/envs/mujoco)|(gymnasium/envs/toy_text)|(tests/envs)|(tests/spaces)|(tests/utils)|(tests/vector)|(docs/)\n        args:\n          - --source\n          - --explain\n          - --convention=google\n        additional_dependencies: [\"tomli\"]\n  - repo: local\n    hooks:\n      - id: pyright\n        name: pyright\n        entry: pyright\n        language: node\n        pass_filenames: false\n        types: [python]\n        additional_dependencies: [\"pyright@1.1.383\"]\n        args:\n          - --project=pyproject.toml\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 3.5859375,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: >-\n  Gymnasium: A Standard Interface for Reinforcement Learning\n  Environments\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Mark\n    family-names: Towers\n    email: mt5g17@soton.ac.uk\n    affiliation: University of Southampton & Farama Foundation\n    orcid: 'https://orcid.org/0000-0002-2609-2041'\n  - given-names: Ariel\n    family-names: Kwiatkowski\n    email: akwiatkowski@farama.org\n    affiliation: Farama Foundation\n    orcid: 'https://orcid.org/0000-0002-9391-9993'\n  - given-names: Jordan K\n    family-names: Terry\n    email: jkterry@farama.org\n    affiliation: Farama Foundation\n    orcid: 'https://orcid.org/0009-0006-4511-3756'\n  - given-names: John U.\n    family-names: Balis\n    email: balis@wisc.edu\n    affiliation: Independent Researcher\n  - given-names: Gianluca\n    name-particle: de\n    family-names: Cola\n    email: gianluca.deco@gmail.com\n    affiliation: Farama Foundation\n  - given-names: Tristan\n    family-names: Deleu\n    email: deleutri@mila.quebec\n    affiliation: 'Mila, Université de Montréal'\n  - given-names: Manuel\n    family-names: Goulão\n    email: manuel.silva.goulao@tecnico.ulisboa.pt\n    affiliation: NeuralShift\n    orcid: 'https://orcid.org/0000-0001-6478-2038'\n  - given-names: Andreas\n    family-names: Kallinteris\n    email: akallinteris@tuc.gr\n    affiliation: Technical University of Crete (TUC)\n    orcid: 'https://orcid.org/0000-0002-6223-2670'\n  - given-names: Markus\n    family-names: Krimmel\n    email: markus.krimmel@student.uni-tuebingen.de\n    affiliation: Independent Researcher\n    orcid: 'https://orcid.org/0009-0005-0159-1214'\n  - given-names: Arjun\n    email: kg.arjun@gmail.com\n    family-names: KG\n    affiliation: EarthBrain\n  - given-names: Rodrigo\n    family-names: Perez-Vicente\n    email: rperezvicente@farama.org\n    affiliation: Farama Foundation\n  - given-names: Andrea\n    family-names: Pierré\n    email: andrea_pierre@brown.edu\n    affiliation: Brown University\n    orcid: 'https://orcid.org/0000-0003-4501-5428'\n  - given-names: Sander\n    family-names: Schulhoff\n    email: sschulho@umd.edu\n    affiliation: University of Maryland\n    orcid: 'https://orcid.org/0009-0003-1904-0838'\n  - given-names: Jun Jet\n    family-names: Tai\n    email: taijunjet@hotmail.com\n    affiliation: Coventry University\n  - given-names: Hannah Jin Shen\n    family-names: Tan\n    email: andrew.jinshen@gmail.com\n    orcid: 'https://orcid.org/0009-0009-8772-5525'\n    affiliation: Independent Researcher\n  - given-names: Omar G.\n    family-names: Younis\n    email: omar.younis98@gmail.com\n    affiliation: University of Bologna\n    orcid: 'https://orcid.org/0009-0004-2783-7932'\nidentifiers:\n  - type: url\n    value: 'https://arxiv.org/abs/2407.17032'\nrepository-code: 'https://github.com/Farama-Foundation/Gymnasium'\nurl: 'https://gymnasium.farama.org/'\nabstract: >-\n  Gymnasium is an open-source library providing an API for\n  reinforcement learning environments. Its main contribution\n  is a central abstraction for wide interoperability between\n  benchmark environments and training algorithms. Gymnasium\n  comes with various built-in environments and utilities to\n  simplify researchers’ work along with being supported by\n  most training libraries. This paper outlines the main\n  design decisions for Gymnasium, its key features, and the\n  differences to alternative APIs.\nkeywords:\n  - reinforcement learning\n  - machine learning\n  - artificial intelligence\n  - simulation\nlicense: MIT\n"
        },
        {
          "name": "CODE_OF_CONDUCT.rst",
          "type": "blob",
          "size": 3.6865234375,
          "content": "=================================\nFarama Foundation Code of Conduct\n=================================\n\nThe Farama Foundation is dedicated to providing a harassment-free experience for\neveryone, regardless of gender, gender identity and expression, sexual\norientation, disability, physical appearance, body size, age, race, or\nreligion. We do not tolerate harassment of participants in any form.\n\nThis code of conduct applies to all Farama Foundation repositories (including Gist\ncomments) both online and off. Anyone who violates this code of\nconduct may be sanctioned or expelled from these spaces at the\ndiscretion of the moderators.\n\nWe may add additional rules over time, which will be made clearly\navailable to participants. Participants are responsible for knowing\nand abiding by these rules.\n\n-------------\nOur Standards\n-------------\nMembers of the Farama Foundation community are **open**, **inclusive**, and **respectful**.\nExamples of behavior that contributes to a positive environment for our community include:\n\n* **Being open**. Members of the community are open to collaboration, whether it's on issues, PRs, problems, or otherwise\n* **Focusing on what is best for the community**. We're respectful of the processes set forth in the community, and we work within them to\n  improve the community.\n* **Being respectful of differing viewpoints and experiences.**  We're receptive to constructive comments and criticism,\n  as the experiences and skill sets of other members contribute to the whole of our efforts.\n* **Showing empathy.** We're attentive in our communications, and we're tactful when approaching differing views.\n* **Being respectful.** We're respectful of differing opinions, viewpoints, experiences, and efforts.\n* **Gracefully accepting constructive criticism.** When we disagree, we are courteous in raising our issues.\n* **Using welcoming and inclusive language.** We're accepting of all who wish to take part in our activities, fostering\n  an environment where anyone can participate and everyone can make a difference.\n\nExamples of unacceptable behavior include:\n\n* Harassment of any participants in any form.\n* The use of sexual language or imagery, and sexual attention or advances of any kind.\n* Insults, put downs, or jokes that are based upon stereotypes, that are exclusionary, or that hold others up for ridicule.\n* Publishing others' private information, such as a physical or email address, without explicit permission.\n* Incitement of violence or harassment towards any individual, including encouraging a person to commit suicide or to engage in self-harm.\n* Sustained disruption of online community discussions, in-person presentations, or other in-person events.\n* Creating additional online accounts in order to harass another person or circumvent a ban\n* Other conduct which could reasonably be considered inappropriate in a professional setting including people of many different backgrounds.\n\nMembers asked to stop any inappropriate behavior are expected to comply immediately.\n\n------------\nConsequences\n------------\nIf a participant engages in behavior that violates this code of conduct, the Farama Foundation team may take any action they deem\nappropriate, including warning the offender or expulsion from the community.\n\nThank you for helping make this a welcoming, friendly community for everyone.\n\n-------\nLicense\n-------\nThis Code of Conduct is licensed under the `Creative Commons Attribution-ShareAlike 3.0 Unported License\n<https://creativecommons.org/licenses/by-sa/3.0/>`_.\n\n-----------\nAttribution\n-----------\nThis Code of Conduct is adapted from `Python's Code of Conduct <https://www.python.org/psf/conduct/>`_, which is under a `Creative Commons License\n<https://creativecommons.org/licenses/by-sa/3.0/>`_.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.5966796875,
          "content": "# Gymnasium Contribution Guidelines\n\nAt this time we are currently accepting the current forms of contributions:\n\n- Bug reports (keep in mind that changing environment behavior should be minimized as that requires releasing a new version of the environment and makes results hard to compare across versions)\n- Pull requests for bug fixes\n- Documentation improvements\n- Features\n\nNotably, we are not accepting these forms of contributions:\n\n- New environments\n\n# Development\n\nThis section contains technical instructions & hints for the contributors.\n\n## Type checking\n\nThe project uses `pyright` to check types.\nTo type check locally, install `pyright` per official [instructions](https://github.com/microsoft/pyright#command-line).\nIt's configuration lives within `pyproject.toml`. It includes list of included and excluded files currently supporting type checks.\nTo run `pyright` for the project, run the pre-commit process (`pre-commit run --all-files`) or `pyright --project=pyproject.toml`\nAlternatively, pyright is a built-in feature of VSCode that will automatically provide type hinting.\n\n### Adding typing to more modules and packages\n\nIf you would like to add typing to a module in the project,\nthe list of included, excluded and strict files can be found in pyproject.toml (pyproject.toml -> [tool.pyright]).\nTo run `pyright` for the project, run the pre-commit process (`pre-commit run --all-files`) or `pyright`\n\n## Git hooks\n\nThe CI will run several checks on the new code pushed to the Gymnasium repository. These checks can also be run locally without waiting for the CI by following the steps below:\n\n1. [install `pre-commit`](https://pre-commit.com/#install),\n2. Install the Git hooks by running `pre-commit install`.\n\nOnce those two steps are done, the Git hooks will be run automatically at every new commit.\nThe Git hooks can also be run manually with `pre-commit run --all-files`, and if needed they can be skipped (not recommended) with `git commit --no-verify`.\n**Note:** you may have to run `pre-commit run --all-files` manually a couple of times to make it pass when you commit, as each formatting tool will first format the code and fail the first time but should pass the second time.\n\nAdditionally, for pull requests, the project runs a number of tests for the whole project using [pytest](https://docs.pytest.org/en/latest/getting-started.html#install-pytest).\nThese tests can be run locally with `pytest` in the root folder. If any doctest is modified, run `pytest --doctest-modules --doctest-continue-on-failure gymnasium` to check the changes.\n\n## Docstrings\n\nPydocstyle has been added to the pre-commit process such that all new functions follow the [google docstring style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\nAll new functions require either a short docstring, a single line explaining the purpose of a function\nor a multiline docstring that documents each argument and the return type (if there is one) of the function.\nIn addition, new file and class require top docstrings that should outline the purpose of the file/class.\nFor classes, code block examples can be provided in the top docstring and not the constructor arguments.\n\nTo check your docstrings are correct, run `pre-commit run --all-files` or `pydocstyle --source --explain --convention=google`.\nIf all docstrings that fail, the source and reason for the failure is provided.\n\n## Building the docs\n\nMake sure that you have install the requirements:\n\n```shell\ncd docs\npip install -r requirements.txt\n```\n\nThen run\n\n```shell\npython _scripts/gen_mds.py\nmake dirhtml\n```\n\nNow, navigate to `_build/dirhtml` and open `index.html` in your browser.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "The MIT License\n\nCopyright (c) 2016 OpenAI\nCopyright (c) 2022 Farama Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.59375,
          "content": "[![Python](https://img.shields.io/pypi/pyversions/gymnasium.svg)](https://badge.fury.io/py/gymnasium)\n[![PyPI](https://badge.fury.io/py/gymnasium.svg)](https://badge.fury.io/py/gymnasium)\n[![arXiv](https://img.shields.io/badge/arXiv-2407.17032-b31b1b.svg)](https://arxiv.org/abs/2407.17032)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://pre-commit.com/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n<p align=\"center\">\n    <a href=\"https://gymnasium.farama.org/\" target = \"_blank\">\n    <img src=\"https://raw.githubusercontent.com/Farama-Foundation/Gymnasium/main/gymnasium-text.png\" width=\"500px\" />\n</a>\n\n</p>\n\nGymnasium is an open source Python library for developing and comparing reinforcement learning algorithms by providing a standard API to communicate between learning algorithms and environments, as well as a standard set of environments compliant with that API. This is a fork of OpenAI's [Gym](https://github.com/openai/gym) library by its maintainers (OpenAI handed over maintenance a few years ago to an outside team), and is where future maintenance will occur going forward.\n\nThe documentation website is at [gymnasium.farama.org](https://gymnasium.farama.org), and we have a public discord server (which we also use to coordinate development work) that you can join here: https://discord.gg/bnJ6kubTg6\n\n## Environments\n\nGymnasium includes the following families of environments along with a wide variety of third-party environments\n* [Classic Control](https://gymnasium.farama.org/environments/classic_control/) - These are classic reinforcement learning based on real-world problems and physics.\n* [Box2D](https://gymnasium.farama.org/environments/box2d/) - These environments all involve toy games based around physics control, using box2d based physics and PyGame-based rendering\n* [Toy Text](https://gymnasium.farama.org/environments/toy_text/) - These environments are designed to be extremely simple, with small discrete state and action spaces, and hence easy to learn. As a result, they are suitable for debugging implementations of reinforcement learning algorithms.\n* [MuJoCo](https://gymnasium.farama.org/environments/mujoco/) - A physics engine based environments with multi-joint control which are more complex than the Box2D environments.\n* [Atari](https://ale.farama.org/) - Emulator of Atari 2600 ROMs simulated that have a high range of complexity for agents to learn.\n* [Third-party](https://gymnasium.farama.org/environments/third_party_environments/) - A number of environments have been created that are compatible with the Gymnasium API. Be aware of the version that the software was created for and use the `apply_env_compatibility` in `gymnasium.make` if necessary.\n\n## Installation\n\nTo install the base Gymnasium library, use `pip install gymnasium`\n\nThis does not include dependencies for all families of environments (there's a massive number, and some can be problematic to install on certain systems). You can install these dependencies for one family like `pip install \"gymnasium[atari]\"` or use `pip install \"gymnasium[all]\"` to install all dependencies.\n\nWe support and test for Python 3.8, 3.9, 3.10, 3.11 and 3.12 on Linux and macOS. We will accept PRs related to Windows, but do not officially support it.\n\n## API\n\nThe Gymnasium API models environments as simple Python `env` classes. Creating environment instances and interacting with them is very simple- here's an example using the \"CartPole-v1\" environment:\n\n```python\nimport gymnasium as gym\nenv = gym.make(\"CartPole-v1\")\n\nobservation, info = env.reset(seed=42)\nfor _ in range(1000):\n    action = env.action_space.sample()\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    if terminated or truncated:\n        observation, info = env.reset()\nenv.close()\n```\n\n## Notable Related Libraries\n\nPlease note that this is an incomplete list, and just includes libraries that the maintainers most commonly point newcomers to when asked for recommendations.\n\n* [CleanRL](https://github.com/vwxyzjn/cleanrl) is a learning library based on the Gymnasium API. It is designed to cater to newer people in the field and provides very good reference implementations.\n* [PettingZoo](https://github.com/Farama-Foundation/PettingZoo) is a multi-agent version of Gymnasium with a number of implemented environments, i.e. multi-agent Atari environments.\n* The Farama Foundation also has a collection of many other [environments](https://farama.org/projects) that are maintained by the same team as Gymnasium and use the Gymnasium API.\n\n## Environment Versioning\n\nGymnasium keeps strict versioning for reproducibility reasons. All environments end in a suffix like \"-v0\".  When changes are made to environments that might impact learning results, the number is increased by one to prevent potential confusion. These were inherited from Gym.\n\n## Support Gymnasium's Development\n\nIf you are financially able to do so and would like to support the development of Gymnasium, please join others in the community in [donating to us](https://github.com/sponsors/Farama-Foundation).\n\n## Citation\n\nYou can cite Gymnasium using our related paper (https://arxiv.org/abs/2407.17032) as:\n\n```\n@article{towers2024gymnasium,\n  title={Gymnasium: A Standard Interface for Reinforcement Learning Environments},\n  author={Towers, Mark and Kwiatkowski, Ariel and Terry, Jordan and Balis, John U and De Cola, Gianluca and Deleu, Tristan and Goul{\\~a}o, Manuel and Kallinteris, Andreas and Krimmel, Markus and KG, Arjun and others},\n  journal={arXiv preprint arXiv:2407.17032},\n  year={2024}\n}\n```\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gymnasium-text.png",
          "type": "blob",
          "size": 137.232421875,
          "content": null
        },
        {
          "name": "gymnasium",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.8095703125,
          "content": "# Package ######################################################################\n\n[build-system]\nrequires = [\"setuptools >= 61.0.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"gymnasium\"\ndescription = \"A standard API for reinforcement learning and a diverse set of reference environments (formerly Gym).\"\nreadme = \"README.md\"\nrequires-python = \">= 3.8\"\nauthors = [{ name = \"Farama Foundation\", email = \"contact@farama.org\" }]\nlicense = { text = \"MIT License\" }\nkeywords = [\"Reinforcement Learning\", \"game\", \"RL\", \"AI\", \"gymnasium\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    'Intended Audience :: Science/Research',\n    'Topic :: Scientific/Engineering :: Artificial Intelligence',\n]\ndependencies = [\n    \"numpy >=1.21.0\",\n    \"cloudpickle >=1.2.0\",\n    \"importlib-metadata >=4.8.0; python_version < '3.10'\",\n    \"typing-extensions >=4.3.0\",\n    \"farama-notifications >=0.0.1\",\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\n# Update dependencies in `all` if any are added or removed\natari = [\"ale_py >=0.9\"]\nbox2d = [\"box2d-py ==2.3.5\", \"pygame >=2.1.3\", \"swig ==4.*\"]\nclassic-control = [\"pygame >=2.1.3\"]\nclassic_control = [\"pygame >=2.1.3\"]  # kept for backward compatibility\nmujoco-py = [\"mujoco-py >=2.1,<2.2\", \"cython<3\"]\nmujoco_py = [\"mujoco-py >=2.1,<2.2\", \"cython<3\"]  # kept for backward compatibility\nmujoco = [\"mujoco >=2.1.5\", \"imageio >=2.14.1\"]\ntoy-text = [\"pygame >=2.1.3\"]\ntoy_text = [\"pygame >=2.1.3\"]  # kept for backward compatibility\njax = [\"jax >=0.4.0\", \"jaxlib >=0.4.0\", \"flax >=0.5.0\"]\ntorch = [\"torch >=1.0.0\"]\nother = [\"moviepy >=1.0.0\", \"matplotlib >=3.0\", \"opencv-python >=3.0\", \"seaborn >= 0.13\"]\nall = [\n    # All dependencies above except accept-rom-license\n    # NOTE: No need to manually remove the duplicates, setuptools automatically does that.\n    # atari\n    \"ale_py >=0.9\",\n    # box2d\n    \"box2d-py ==2.3.5\",\n    \"pygame >=2.1.3\",\n    \"swig ==4.*\",\n    # classic-control\n    \"pygame >=2.1.3\",\n    # mujoco-py\n    \"mujoco-py >=2.1,<2.2\",\n    \"cython <3\",\n    # mujoco\n    \"mujoco >=2.1.5\",\n    \"imageio >=2.14.1\",\n    # toy-text\n    \"pygame >=2.1.3\",\n    # jax\n    \"jax >=0.4.0\",\n    \"jaxlib >=0.4.0\",\n    \"flax >= 0.5.0\",\n    # torch\n    \"torch >=1.0.0\",\n    # other\n    \"opencv-python >=3.0\",\n    \"matplotlib >=3.0\",\n    \"moviepy >=1.0.0\",\n]\ntesting = [\n    \"pytest >=7.1.3\",\n    \"scipy >=1.7.3\",\n    \"dill >=0.3.7\",\n]\n\n[project.urls]\nHomepage = \"https://farama.org\"\nRepository = \"https://github.com/Farama-Foundation/Gymnasium\"\nDocumentation = \"https://gymnasium.farama.org\"\n\"Bug Report\" = \"https://github.com/Farama-Foundation/Gymnasium/issues\"\n\n[tool.setuptools]\ninclude-package-data = true\n\n[tool.setuptools.packages.find]\ninclude = [\"gymnasium\", \"gymnasium.*\"]\n\n[tool.setuptools.package-data]\ngymnasium = [\n    \"envs/mujoco/assets/*.xml\",\n    \"envs/classic_control/assets/*.png\",\n    \"envs/phys2d/assets/*.png\",\n    \"envs/toy_text/font/*.ttf\",\n    \"envs/toy_text/img/*.png\",\n    \"py.typed\",\n]\n\n# Linters and Test tools #######################################################\n\n[tool.black]\n\n[tool.isort]\natomic = true\nprofile = \"black\"\nsrc_paths = [\"gymnasium\", \"tests\", \"docs/_scripts\"]\nextra_standard_library = [\"typing_extensions\"]\nindent = 4\nlines_after_imports = 2\nmulti_line_output = 3\n\n[tool.pyright]\ninclude = [\"gymnasium/**\"]\nexclude = [\"tests/**\", \"**/node_modules\", \"**/__pycache__\"]\nstrict = []\n\ntypeCheckingMode = \"basic\"\npythonVersion = \"3.8\"\npythonPlatform = \"All\"\ntypeshedPath = \"typeshed\"\nenableTypeIgnoreComments = true\n\n# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame, box2d)\n#   Therefore, we have to ignore missing imports\nreportMissingImports = \"none\"\n# Some modules are missing type stubs, which is an issue when running pyright locally\nreportMissingTypeStubs = false\n# For warning and error, will raise an error when\nreportInvalidTypeVarUse = \"none\"\n\nreportGeneralTypeIssues = \"none\"  # -> commented out raises 489 errors\nreportAttributeAccessIssue = \"none\"  # pyright provides false positives\nreportArgumentType = \"none\"  # pyright provides false positives\n\nreportPrivateUsage = \"warning\"\n\nreportIndexIssue = \"none\"  # TODO fix one by one\nreportReturnType = \"none\"  # TODO fix one by one\nreportCallIssue = \"none\"  # TODO fix one by one\nreportOperatorIssue = \"none\"  # TODO fix one by one\nreportInvalidTypeForm = \"none\"  # TODO fix one by one\nreportOptionalMemberAccess = \"none\"  # TODO fix one by one\nreportAssignmentType = \"none\"  # TODO fix one by one\n\n\n[tool.pytest.ini_options]\nfilterwarnings = [\"ignore::DeprecationWarning:gymnasium.*:\"]\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.9228515625,
          "content": "\"\"\"Sets up the project.\"\"\"\n\nimport pathlib\n\nfrom setuptools import setup\n\n\nCWD = pathlib.Path(__file__).absolute().parent\n\n\ndef get_version():\n    \"\"\"Gets the gymnasium version.\"\"\"\n    path = CWD / \"gymnasium\" / \"__init__.py\"\n    content = path.read_text()\n\n    for line in content.splitlines():\n        if line.startswith(\"__version__\"):\n            return line.strip().split()[-1].strip().strip('\"')\n    raise RuntimeError(\"bad version data in __init__.py\")\n\n\ndef get_description():\n    \"\"\"Gets the description from the readme.\"\"\"\n    with open(\"README.md\") as fh:\n        long_description = \"\"\n        header_count = 0\n        for line in fh:\n            if line.startswith(\"##\"):\n                header_count += 1\n            if header_count < 2:\n                long_description += line\n            else:\n                break\n    return long_description\n\n\nsetup(name=\"gymnasium\", version=get_version(), long_description=get_description())\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}