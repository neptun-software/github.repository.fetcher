{
  "metadata": {
    "timestamp": 1736560615837,
    "page": 244,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pwndbg/pwndbg",
      "stars": 7883,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.4736328125,
          "content": "# venv\n.venv/\n\n# ignore binaries that are potentially tainted by the host system\n# E.g. the binary could reference source code on the host system\n# this is a problem because inside docker we won't have access to\n# the host system\ntests/**/binaries/*.o\ntests/**/binaries/*.out\ntests/**/binaries/gosample.x*\ntests/**/binaries/div_zero_binary/core\ntests/**/binaries/div_zero_binary/binary\n!tests/**/binaries/*.go\n\n# ignore QEMU test images (could also be tainted)\ntests/qemu-tests/images\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use_flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1787109375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n!tests/**/binaries/glibcs/**/*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n!/pwndbg/lib/\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.cov/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# mkdocs\nsite/\n\n# PyBuilder\ntarget/\n\nnpm-debug.log\n.gdb_history\n\n# PyCharm project files\n.idea/\nvenv/\n\n# PyTest files\n.pytest_cache/\ntests/**/binaries/*.o\ntests/**/binaries/*.out\ntests/**/binaries/gosample.x*\ntests/**/binaries/div_zero_binary/core\ntests/**/binaries/div_zero_binary/binary\n!tests/**/binaries/*.go\n\n# QEMU test images\ntests/qemu-tests/images\n\n# VS Code files\n.vscode/\n\n.zig/\ngdb.txt\n\n# venv\n.venv/\n\n# Nix build and dev shell\nresult*\n.direnv/\n\n# Vim\n*.swp\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.8876953125,
          "content": "# Read the Docs configuration file for MkDocs projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n  # https://docs.readthedocs.io/en/stable/build-customization.html#install-dependencies-with-poetry\n  jobs:\n    post_create_environment:\n      # Install poetry\n      # https://python-poetry.org/docs/#installing-manually\n      - pip install poetry\n    post_install:\n      # Install dependencies with 'docs' dependency group\n      # https://python-poetry.org/docs/managing-dependencies/#dependency-groups\n      # VIRTUAL_ENV needs to be set manually for now.\n      # See https://github.com/readthedocs/readthedocs.org/pull/11152/\n      - VIRTUAL_ENV=$READTHEDOCS_VIRTUALENV_PATH poetry install --with docs\n\nmkdocs:\n  configuration: mkdocs.yml\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "DEVELOPING.md",
          "type": "blob",
          "size": 36.29296875,
          "content": "- [Development Basics](#development-basics)\n  - [Environment setup](#environment-setup)\n    - [Development using Nix](#development-using-nix)\n  - [Testing](#testing)\n  - [Writing Tests](#writing-tests)\n  - [QEMU Tests](#qemu-tests)\n  - [Kernel Tests](#kernel-tests)\n    - [Testing Under Nix](#testing-under-nix)\n  - [Linting](#linting)\n  - [Minimum Supported Versions](#minimum-supported-versions)\n- [Adding a Command](#adding-a-command)\n- [Adding a Configuration Option](#adding-a-configuration-option)\n  - [Configuration Docstrings](#configuration-docstrings)\n  - [Triggers](#triggers)\n- [Porting public tools](#porting-public-tools)\n- [Random developer notes](#random-developer-notes)\n- [Annotations](#annotations)\n  - [Enhancing](#enhancing)\n  - [When to use emulation / reasoning about process state](#when-to-use-emulation--reasoning-about-process-state)\n  - [What if the emulator fails?](#what-if-the-emulator-fails)\n  - [Caching annotations](#caching-annotations)\n  - [Other random annotation details](#other-random-annotation-details)\n  - [Adding or fixing annotations](#adding-or-fixing-annotations)\n  - [Bug root cause](#bug-root-cause)\n  - [Creating small cross-architecture programs](#creating-small-cross-architecture-programs)\n\n# Development Basics\n\n## Environment setup\n\nAfter installing `pwndbg` by running `setup.sh`, you additionally need to run `./setup-dev.sh` to install the necessary development dependencies.\n\nIf you would like to use Docker, you can create a Docker image with everything already installed for you. To build and\nrun the container, run the following commands:\n\n```bash\ndocker build -t pwndbg .\ndocker run -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v `pwd`:/pwndbg pwndbg bash\n```\n\nIf you'd like to use `docker compose`, you can run\n\n```bash\ndocker compose run -i main\n```\n\n### Development using Nix\n\nThere is a development shell defined in the flake that should install all of the development requirements. To enter the\nenvironment run `nix develop` or automatically enter the environment using `direnv`.\n\nWhen testing changes run `nix build .#pwndbg-dev` and use the copy of the files in the `results/` folder.\n\n## Testing\n\nIt's highly recommended you write a new test or update an existing test whenever adding new functionality to `pwndbg`.\n\nWe have four types of tests: `gdb-tests`,`qemu-tests`, `unit-tests`, and Linux kernel tests, which are all located in subdirectories of [`tests`](tests).\n\n`gdb-tests` refers to our x86 tests, which are located [`tests/gdb-tests`](tests/gdb-tests/).\n\nTo run these tests, run [`./tests.sh`](./tests.sh). You can filter the tests to run by providing an argument to the script, such as `./tests.sh heap`, which will only run tests that contain \"heap\" in the name. You can also drop into the PDB debugger when a test fails with `./tests.sh --pdb`.\n\nTo invoke cross-architecture tests, use `./qemu-tests.sh`, and to run unit tests, use `./unit-tests.sh`\n\n## Writing Tests\n\nEach test is a Python function that runs inside of an isolated GDB session. \nUsing a [`pytest`](https://docs.pytest.org/en/latest/) fixture at the beginning of each test, \nGDB will attach to a [`binary`](tests/gdb-tests/conftest.py) or connect to a [`QEMU instance`](tests/qemu-tests/conftest.py). \nEach test runs some commands and uses Python `assert` statements to verify correctness. \nWe can access `pwndbg` library code like `pwndbg.aglib.regs.rsp` as well as execute GDB commands with `gdb.execute()`.\n\nWe can take a look at [`tests/gdb-tests/tests/test_symbol.py`](tests/gdb-tests/tests/test_symbol.py) for an example of a\nsimple test. Looking at a simplified version of the top-level code, we have this:\n\n```python\nimport gdb\nimport pwndbg\nimport tests\n\nBINARY = tests.binaries.get(\"symbol_1600_and_752.out\")\n```\n\nSince these tests run inside GDB, we can import the `gdb` Python library. We also import the `tests` module, which makes it easy to get the path to the test binaries located in [`tests/gdb-tests/tests/binaries`](tests/gdb-tests/tests/binaries). You should be able to reuse the binaries in this folder for most tests, but if not feel free to add a new one.\n\nHere's a small snippet of the actual test:\n\n```python\ndef test_hexdump(start_binary):\n    start_binary(BINARY)\n    pwndbg.config.hexdump_group_width.value = -1\n\n    gdb.execute(\"set hexdump-byte-separator\")\n    stack_addr = pwndbg.aglib.regs.rsp - 0x100\n```\n\n`pytest` will run any function that starts with `test_` as a new test, so there is no need to register your new test anywhere. The `start_binary` argument is a function that will run the binary you give it, and it will set some common options before starting the binary. Using `start_binary` is recommended if you don't need any additional customization to GDB settings before starting the binary, but if you do it's fine to not use it.\n\n## QEMU Tests\n\nOur `gdb-tests` run in x86. To debug other architectures, we use QEMU for emulation, and attach to its debug port. These tests are located in [`tests/qemu-tests/tests/user`](tests/qemu-tests/tests/user). Test creation is identical to our x86 tests - create a Python function with a Pytest fixture name as the parameter (it matches based on the name), and call the argument to start debugging a binary. The `qemu_assembly_run` fixture takes in a Python string of assembly code, compiles it in the appropriate architecture, and runs it - no need to create an external file or edit a Makefile.\n\n## Kernel Tests\n\nWe use `qemu-system` for full system level emulation for our Linux kernel tests. These are located in [`tests/qemu-tests/tests/system`](tests/qemu-tests/tests/system). The tests will run for a variety kernel configurations and architectures.\n\n### Testing Under Nix\n\nYou will need to build a nix-compatible `gdbinit.py` file, which you can do with `nix build .#pwndbg-dev`. Then simply\nrun the test by adding the `--nix` flag:\n\n```bash\n./tests.sh --nix [filter]\n```\n\n## Linting\n\nThe `lint.sh` script runs `isort`, `ruff`, `shfmt`, and `vermin`. `isort` and `ruff` are able to automatically fix any\nissues they detect, and you can enable this by running `./lint.sh -f`. You can find the configuration files for these\ntools in `pyproject.toml` or by checking the arguments passed inside `lint.sh`.\n\nWhen submitting a PR, the CI job defined in `.github/workflows/lint.yml` will verify that running `./lint.sh` succeeds, otherwise the job will fail and we won't be able to merge your PR.\n\nYou can optionally set the contents of `.git/hooks/pre-push` to the following if you would like `lint.sh` to automatically be run before every push:\n\n```bash\n#!/usr/bin/env bash\n\n./lint.sh || exit 1\n```\n\n## Minimum Supported Versions\n\nOur goal is to fully support all Ubuntu LTS releases that have not reach end-of-life, with support for other platforms on a best-effort basis. Currently that means all code should work on Ubuntu 22.04, and 24.04 with GDB 12.1 and later. This means that the minimum supported Python version is 3.10, and we cannot use any newer Python features unless those features are backported to this minimum version.\n\nNote that while all code should run without errors on these supported LTS versions, it's fine if older versions don't support all of the features of newer versions, as long as this is handled correctly and this information is shown to the user. For example, we may make use of some GDB APIs in newer versions that we aren't able to provide alternative implementations for in older versions, and so in these cases we should inform the user that the functionality can't be provided due to the version of GDB.\n\nThe `lint.sh` script described in the previous section runs [`vermin`](https://github.com/netromdk/vermin) to ensure that our code does not use any features that aren't supported on Python 3.10.\n\n# Adding a Command\n\nCreate a new Python file in `pwndbg/commands/my_command.py`, replacing `my_command` with a reasonable name for the command. The most basic command looks like this:\n\n```python\nimport argparse\n\nimport pwndbg.commands\n\nparser = argparse.ArgumentParser(description=\"Command description.\")\nparser.add_argument(\"arg\", type=str, help=\"An example argument.\")\n\n\n@pwndbg.commands.ArgparsedCommand(parser)\ndef my_command(arg: str) -> None:\n    \"\"\"Print the argument\"\"\"\n    print(f\"Argument is {arg}\")\n```\n\nIn addition, you need to import this file in the `load_commands` function in `pwndbg/commands/__init__.py`. After this, running `my_command foo` in GDB or LLDB will print out \"Argument is foo\".\n\n# Adding a Configuration Option\n\n```python\nimport pwndbg\n\npwndbg.config.add_param(\"config-name\", False, \"example configuration option\")\n```\n\n`pwndbg.config.config_name` will now refer to the value of the configuration option, and it will default to `False` if not set.\n\n## Configuration Docstrings (GDB)\n\nTODO: There are many places GDB shows docstrings, and they show up slightly differently in each place, we should give examples of this\n\n* When using `pwndbg.config.add_param` to add a new config, there are a few things to keep in mind:\n  * For the `set_show_doc` parameter, it is best to use a noun phrase like \"the value of something\" to ensure that the output is grammatically correct.\n  * For the `help_docstring` parameter, you can use the output of `help set follow-fork-mode` as a guide for formatting the documentation string if the config is an enum type.\n  * For the `param_class` parameter\n    * See the [documentation](https://sourceware.org/gdb/onlinedocs/gdb/Parameters-In-Python.html) for more information.\n    * If you use `gdb.PARAM_ENUM` as `param_class`, you must pass a list of strings to the `enum_sequence` parameter.\n\n## Triggers\n\nTODO: If we want to do something when user changes config/theme - we can do it defining a function and decorating it\nwith `pwndbg.config.Trigger`.\n\n# Porting public tools\n\nIf porting a public tool to pwndbg, please make a point of crediting the original author. This can be added to\n[CREDITS.md](./CREDITS.md) noting the original author/inspiration, and linking to the original tool/article. Also please\nbe sure that the license of the original tool is suitable to porting into pwndbg, such as MIT.\n\n# Random developer notes\n\nFeel free to update the list below!\n\n* If you want to play with pwndbg functions under GDB, you can always use GDB's `pi` which launches python interpreter or just `py <some python line>`.\n\n* If you want to do the same in LLDB, you should type `lldb`, followed by `script`, which brings up an interactive Python REPL. Don't forget to `import pwndbg`!\n\n* Do not access debugger-specific functionality - eg. anything that uses the `gdb`, `lldb`, or `gdblib` modules - from outside the proper module in `pwndbg.dbg`.\n\n* Use `aglib` instead of `gdblib`, as the latter is [in the process of being removed](https://github.com/pwndbg/pwndbg/issues/2489). Both modules should have nearly identical interfaces, so doing this should be a matter of typing `pwndbg.aglib.X` instead of `pwndbg.gdblib.X`. Ideally, an issue should be opened if there is any functionality present in `gdblib` that's missing from `aglib`.\n\n* We have our own `pwndbg.config.Parameter` - all of our parameters can be seen using `config` or `theme` commands.\n\n* The dashboard/display/context we are displaying is done by `pwndbg/commands/context.py` which is invoked through GDB's and LLDB's prompt hook, which are defined, respectively, in `pwndbg/gdblib/prompt.py` as `prompt_hook_on_stop`, and in `pwndb/dbg/lldb/hooks.py` as `prompt_hook`.\n\n* We change a bit GDB settings - this can be seen in `pwndbg/dbg/gdb.py` under `GDB.setup` - there are also imports for all pwndbg submodules.\n\n* Pwndbg has its own event system, and thanks to it we can set up code to be invoked in response to them. The event types and the conditions in which they occurr are defined and documented in the `EventType` enum, and functions are registered to be called on events with the `@pwndbg.dbg.event_handler` decorator. Both the enum and the decorator are documented in `pwndbg/dbg/__init__.py`.\n\n* We have a caching mechanism ([\"memoization\"](https://en.wikipedia.org/wiki/Memoization)) which we use through Python's decorators - those are defined in `pwndbg/lib/cache.py` - just check its usages\n\n* To block a function before the first prompt was displayed use the `pwndbg.decorators.only_after_first_prompt` decorator.\n\n* Memory accesses should be done through `pwndbg/aglib/memory.py` functions.\n\n* Process properties can be retrieved thanks to `pwndbg/aglib/proc.py` - e.g. using `pwndbg.aglib.proc.pid` will give us current process pid\n\n\n* We have a wrapper for handling exceptions that are thrown by commands - defined in `pwndbg/exception.py` - current approach seems to work fine - by using `set exception-verbose on` - we get a stacktrace. If we want to debug stuff we can always do `set exception-debugger on`.\n\n* Some of pwndbg's functionality require us to have an instance of `pwndbg.dbg.Value` - the problem with that is that there is no way to define our own types in either GDB or LLDB - we have to ask the debugger if it detected a particular type in this particular binary (that sucks). We do that in `pwndbg/aglib/typeinfo.py` and it works most of the time. The known bug with that is that it might not work properly for Golang binaries compiled with debugging symbols.\n\n# Support for Multiple Debuggers\n\nPwndbg is an tool that supports multiple debuggers, and so using debugger-specific functionality\noutside of `pwndbg.dbg.X` is generally discouraged, with one imporant caveat, that we will get into\nlater. When adding code to Pwndbg, one must be careful with the functionality being used.\n\n## The Debugger API\n\nOur support for multiple debuggers is primarily achieved through use of the Debugger API, found\nunder `pwndbg/dbg/`, which defines a terse set of debugging primitives that can then be built upon\nby the rest of Pwndbg. It comprises two parts: the interface, and the implementations. The interface\ncontains the abstract classes and the types that lay out the \"shape\" of the functionality that may\nbe used by the rest of Pwndbg, and the implementations, well, _implement_ the interface on top of each\nsupported debugger.\n\nAs a matter of clarity, it makes sense to think of the Debugger API as a debugger-agnostic version\nof the `lldb` and `gdb` Python modules. Compared to both modules, it is much closer in spirit to\n`lldb` than to `gdb`.\n\nIt is important to note that a lot of care must be exercised when adding things to the Debugger API,\nas one must always add implementations for all supported debuggers of whatever new functionality is\nbeing added, even if only to properly gate off debuggers in which the functionality is not supported.\nAdditionally, it is important to keep the Debugger API interfaces as terse as possible in order to\nreduce code duplication. As a rule of thumb, if all the implementations of an interface are expected\nto share code, that interface is probably better suited for `aglib`, and it should be further broken\ndown into its primitives, which can then be added to the Debugger API.\n\nSome examples of debugging primitives are memory reads, memory writes, memory map acquisition,\nsymbol lookup, register reads and writes, and execution frames. These are all things that one can\nfind in both the GDB and LLDB APIs.\n\nThe entry point for the Debugger API is `pwndbg.dbg`, though most process-related methods are accessed\nthrough a `Process` object. Unless you really know what you're doing, you're going to want to use the\nobjected yielded by `pwndbg.dbg.selected_inferior()` for this.\n\n## `aglib`\n\nAlong with the Debugger API, there is also `aglib`, found under `pwndbg/aglib/`, in which lives\nfunctionality that is both too broad for a single command, and that can be shared between multiple\ndebuggers. Things like QEMU handling, ELF and dynamic section parsing, operating system functionality,\ndisassembly with capstone, heap analysis, and more, all belong in `aglib`.\n\nIn order to facilitate the process of porting Pwndbg to the debugger-agnostic interfaces, and also\nbecause of its historical roots, `aglib` is intended to export the exact same functionality provided\nby `gdblib`, but on top of a debugger-agnostic foundation.\n\nIf it helps, one may think of `aglib` like a `pwndbglib`. It takes the debugging primitives provided\nby the Debugger API and builds the more complex and interesting bits of functionality found in\nPwndbg on top of them.\n\n## Mappings from GDB and LLDB to the Debugger API\n\nHere are some things one may want to do, along with how they can be achieved in the LLDB, GDB, and\nPwndbg Debugger APIs.\n\n| Action | GDB/ | LLDB | Debugger API[^1]                                      |\n| ------ | --- | ---- |-------------------------------------------------------|\n| Setting a breakpoint at an address | `gdb.Breakpoint(\"*<address>\")` | `lldb.target.BreakpointCreateByAddress(<address>)` | `inf.break_at(BreakpointLocation(<address>))`         |\n| Querying for the address of a symbol | `int(gdb.lookup_symbol(<name>).value().address)` | `lldb.target.FindSymbols(<name>).GetContextAtIndex(0).symbol.GetStartAddress().GetLoadAddress(lldb.target)` | `inf.lookup_symbol(<name>)`                           |\n| Setting a watchpoint at an address | `gdb.Breakpoint(f\"(char[{<size>}])*{<address>}\", gdb.BP_WATCHPOINT)` | `lldb.target.WatchAddress(<address>, <size>, ...)` | `inf.break_at(WatchpointLocation(<address>, <size>))` |\n\n[^1]: Many functions in the Debugger API are accessed through a `Process` object, which is usually\nobtained through `pwndbg.dbg.selected_inferior()`. These are abbreviated `inf` in the table.\n\n## Exception to use of Debugger-agnostic interfaces\n\nSome commands might not make any sense outside the context of a single debugger. For these commands,\nit is generally okay to talk to the debugger directly. However, they must be properly marked as\ndebugger-specific and their loading must be properly gated off behind the correct debugger. They\nshould ideally be placed in a separate location from the rest of the commands in `pwndbg/commands/`.\n\n# Annotations\n\nAlongside the disassembled instructions in the dashboard, Pwndbg also has the ability to display annotations - text that contains relevent information regarding the execution of the instruction. For example, on the x86 `MOV` instruction, we can display the concrete value that gets placed into the destination register. Likewise, we can indicate the results of mathematical operations and memory accesses. The annotation in question is always dependent on the exact instruction being annotated - we handle it in a case-by-case basis.\n\nThe main hurdle in providing annotations is determining what each instruction does, getting the relevent CPU registers and memory that are accessed, and then resolving concrete values of the operands. We call the process of determining this information \"enhancement\", as we enhance the information provided natively by GDB.\n\nThe Capstone Engine disassembly framework is used to statically determine information about instructions and their operands. Take the x86 instruction `sub rax, rdx`. Given the raw bytes of the machine instructions, Capstone creates an object that provides an API that, among many things, exposes the names of the operands and the fact that they are both 8-byte wide registers. It provides all the information necessary to describe each operand. It also tells the general 'group' that a instruction belongs to, like if its a JUMP-like instruction, a RET, or a CALL. These groups are architecture agnostic.\n\nHowever, the Capstone Engine doesn't fill in concrete values that those registers take on. It has no way of knowing the value in `rdx`, nor can it actually read from memory.\n\nTo determine the actual values that the operands take on, and to determine the results of executing an instruction, we use the Unicorn Engine, a CPU emulator framework. The emulator has its own internal CPU register set and memory pages that mirror that of the host process, and it can execute instructions to mutate its internal state. Note that the Unicorn Engine cannot execute syscalls - it doesn't have knowledge of a kernel.\n\nWe have the ability to single-step the emulator - tell it to execute the instruction at the program counter inside the emulator. After doing so, we can inspect the state of the emulator - read from its registers and memory. The Unicorn Engine itself doesn't expose information regarding what each instruction is doing - what is the instruction (is it an `add`, `mov`, `push`?) and what registers/memory locations is it reading to and writing from? - which is why we use the Capstone engine to statically determine this information.\n\nUsing what we know about the instruction based on the Capstone engine - such as that it was a `sub` instruction and `rax` was written to - we query the emulator after stepping in to determine the results of the instruction.\n\nWe also read the program counter from the emulator to determine jumps and so we can display the instructions that will actually be executed, as opposed to displaying the instructions that follow consecutively in memory.\n\n## Enhancing\n\nEverytime the inferior process stops (and when the `disasm` context section is displayed), we display the next handful of assembly instructions in the dashboard so the user can understand where the process is headed. The exact amount is determined by the `context-disasm-lines` setting.\n\nWe will be enhancing the instruction at the current program counter, as well as all the future instructions that are displayed. The end result of enhancement is that we get a list of `PwndbgInstruction` objects, each encapsulating relevent information regarding the instructions execution.\n\nWhen the process stops, we instantiate the emulator from scratch. We copy all the registers from the host process into the emulator. For performance purposes, we register a handler to the Unicorn Engine to lazily map memory pages from the host to the emulator when they are accessed (a page fault from within the emulator), instead of immediately copying all the memory from the host to the emulator.\n\nThe enhancement is broken into a couple stops:\n\n1. First, we resolve the values of all the operands of the instruction before stepping the emulator. This means we read values from registers and dereference memory depending on the operand type. This gives us the values of operands before the instruction executes.\n2. Then, we step the emulator, executing a single instruction.\n3. We resolve the values of all operands again, giving us the `after_value` of each operand.\n4. Then, we enhance the \"condition\" field of PwndbgInstructions, where we determine if the instruction is conditional (conditional branch or conditional mov are common) and if the action is taken.\n5. We then determine the `next` and `target` fields of PwndbgInstructions. `next` is the address that the program counter will take on after using the GDB command `nexti`, and `target` indicates the target address of branch/jump/PC-changing instructions.\n6. With all this information determined, we now effectively have a big switch statement, matching on the instruction type, where we set the `annotation` string value, which is the text that will be printed alongside the instruction in question.\n\nWe go through the enhancement process for the instruction at the program counter and then ensuing handful of instructions that are shown in the dashboard.\n\n## When to use emulation / reasoning about process state\n\nWhen possible, we code aims to use emulation as little as possible. If there is information that can be determined statically or without the emulator, then we try to avoid emulation. This is so we can display annotations even when the Unicorn Engine is disabled. For example, say we come to a stop, and are faced with enhancing the following three instructions in the dashboard:\n\n```asm\n1.     lea    rax, [rip + 0xd55]\n2. >   mov    rsi, rax      # The host process program counter is here\n3.     mov    rax, rsi\n```\n\nInstruction #1, the `lea` instruction, is already in the past - we pull our enhanced PwndbgInstruction for it from a cache.\n\nInstruction #2, the first `mov` instruction, is where the host process program counter is at. If we did `stepi` in GDB, this instruction would be executed. In this case, there is two ways we can determine the value that gets written to `rsi`.\n\n1. After stepping the emulator, read from the emulators `rsi` register.\n2. Given the context of the instruction, we know the value in `rsi` will come from `rax`. We can just read the `rax` register from the host. This avoids emulation.\n\nThe decision on which option to take is implemented in the annotation handler for the specific instruction. When possible, we have a preference for the second option, because it makes the annotations work even when emulation is off.\n\nThe reason we could do the second option, in this case, is because we could reason about the process state at the time this instruction would execute. This instruction is about to be executed (`Program PC == instruction.address`). We can safely read from `rax` from the host, knowing that the value we get is the true value it takes on when the instruction will execute. It must - there are no instructions in-between that could have mutated `rax`.\n\nHowever, this will not be the case while enhancing instruction #3 while we are paused at instruction #2. This instruction is in the future, and without emulation, we cannot safely reason about the operands in question. It is reading from `rsi`, which might be mutated from the current value that `rsi` has in the stopped process (and in this case, we happen to know that it will be mutated). We must use emulation to determine the `before_value` of `rsi` in this case, and can't just read from the host processes register set. This principle applies in general - future instructions must be emulated to be fully annotated. When emulation is disable, the annotations are not as detailed since we can't fully reason about process state for future instructions.\n\n## What if the emulator fails?\n\nIt is possible for the emulator to fail to execute an instruction - either due to a restrictions in the engine itself, or the instruction inside segfaults and cannot continue. If the Unicorn Engine fails, there is no real way we can recover. When this happens, we simply stop emulating for the current step, and we try again the next time the process stops when we instantiate the emulator from scratch again.\n\n## Caching annotations\n\nWhen we are stepping through the emulator, we want to remember the annotations of the past couple instructions. We don't want to `nexti`, and suddenly have the annotation of the previously executed instruction deleted. At the same time, we also never want stale annotations that might result from coming back to point in the program to which we have stepped before, such as the middle of a loop via a breakpoint.\n\nNew annotations are only created when the process stops, and we create annotations for next handful of instructions to be executed. If we `continue` in GDB and stop at a breakpoint, we don't want annotations to appear behind the PC that are from a previous time we were near the location in question. To avoid stale annotations while still remembering them when stepping, we have a simple caching method:\n\nWhile we are doing our enhancement, we create a list containing the addresses of the future instructions that are displayed.\n\nFor example, say we have the following instructions with the first number being the memory address:\n\n```gdb\n   0x555555556259 <main+553>    lea    rax, [rsp + 0x90]\n   0x555555556261 <main+561>    mov    edi, 1                          EDI => 1\n   0x555555556266 <main+566>    mov    rsi, rax\n   0x555555556269 <main+569>    mov    qword ptr [rsp + 0x78], rax\n   0x55555555626e <main+574>    call   qword ptr [rip + 0x6d6c]    <fstat64>\n\n ► 0x555555556274 <main+580>    mov    edx, 5                  EDX => 5\n   0x555555556279 <main+585>    lea    rsi, [rip + 0x3f30]     RSI => 0x55555555a1b0 ◂— 'standard output'\n   0x555555556280 <main+592>    test   eax, eax\n   0x555555556282 <main+594>    js     main+3784                   <main+3784>\n\n   0x555555556288 <main+600>    mov    rsi, qword ptr [rsp + 0xc8]\n   0x555555556290 <main+608>    mov    edi, dword ptr [rsp + 0xa8]\n```\n\nIn this case, our `next_addresses_cache` would be `[0x555555556279, 0x555555556280, 0x555555556282, 0x555555556288, 0x555555556290]`.\n\nThen, the next time our program comes to a stop (after using `si`, `n`, or any GDB command that continues the process), we immediately check if the current program counter is in this list. If it is, then we can infer that the annotations are still valid, as the program has only executed a couple instructions. In all other cases, we delete our cache of annotated instructions.\n\nWe might think \"why not just check if it's the next address - 0x555555556279 in this case? Why a list of the next couple addresses?\". This is because when source code is available, `step` and `next` often skip a couple instructions. It would be jarring to remove the annotations in this case. Likewise, this method has the added benefit that if we stop somewhere, and there happens to be a breakpoint only a couple instructions in front of us that we `continue` to, then previous couple annotations won't be wiped.\n\n## Other random annotation details\n\n- We don't emulate through CALL instructions. This is because the function might be very long.\n- We resolve symbols during the enhancement stage for operand values.\n- The folder [`pwndbg/aglib/disasm`](pwndbg/aglib/disasm) contains the code for enhancement. It follows an object-oriented model, with `arch.py` implementing the parent class with shared functionality, and the per-architecture implementations are implemented as subclasses in their own files.\n- `pwndbg/aglib/nearpc.py` is responsible for getting the list of enhanced PwndbgInstruction objects and converting them to the output seen in the 'disasm' view of the dashboard.\n\n## Adding or fixing annotations\n\nWe annotate on an instruction-by-instruction basis. Effectively, imagine a giant `switch` statement that selects the correct handler to create an annotation based on the specific instruction. Many instruction types can be grouped and annotated using the same logic, such as `load`, `store`, and `arithmetic` instructions.\n\nSee [`pwndbg/aglib/disasm/aarch64.py`](pwndbg/aglib/disasm/aarch64.py) as an example. We define sets that group instructions using the unique Capstone ID for each instruction, and inside the constructor of `DisassemblyAssistant` we have a mapping of instructions to a specific handler. The `_set_annotation_string` function will match the instruction to the correct handler, which set the `instruction.annotation` field.\n\nIf there is a bug in an annotation, the first order of business is finding its annotation handler. To track down where we are handling the instruction, you can search for its Capstone constant. For example, the RISC-V store byte instruction, `sb`, is represented as the Capstone constant `RISCV_INS_SB`. Or, if you are looking for the handler for the AArch64 instruction SUB, you can search the disasm code for `_INS_SUB` to find where we reference the appropriate Capstone constant for the instruction and following the code to the function that ultimately sets the annotation.\n\nIf an annotation is causing a crash, is it most likely due to a handler making an incorrect assumption on the number of operands, leading to a `list index out of range` error. One possible source of this is that a given instruction has multiple different disassembly representations. Take the RISC-V `JALR` instruction. It can be represented in 3 ways:\n\n```asm\njalr rs1        # return register is implied as ra, and imm is implied as 0\njalr rs1, imm   # return register is implied as ra\njalr rd, rs1, imm\n```\n\nCapstone will expose the most \"simplified\" one possible, and the underlying list of register operands will change. If the handler doesn't take these different options into account, and rather assumes that `jalr` always has 3 operands, then an index error can occur if the handler accesses `instruction.operands[2]`.\n\n## Bug root cause\n\nWhen encountering an instruction that is behaving strangely (incorrect annotation, or there is a jump target when one shouldn't exist, or the target is incorrect), there are a couple routine things to check.\n\n1. Use the `dev_dump_instruction` command to print all the enhancement information. With no arguments, it will dump the info from the instruction at the current address. If given an address, it will pull from the instruction cache at the corresponding location.\n\nIf the issue is not related to branches, check the operands and the resolved values for registers and memory accesses. Verify that the values are correct - are the resolved memory locations correct? Step past the instruction and use instructions like `telescope` and `regs` to read memory and verify if the claim that the annotation is making is correct. For things like memory operands, you can try to look around the resolved memory location in memory to see the actual value that the instruction dereferenced, and see if the resolved memory location is simply off by a couple bytes.\n\nExample output of dumping a `mov` instruction:\n\n```\nmov qword ptr [rsp], rsi at 0x55555555706c (size=4) (arch: x86)\n        ID: 460, mov\n        Raw asm: mov    qword ptr [rsp], rsi\n        New asm: mov    qword ptr [rsp], rsi\n        Next: 0x555555557070\n        Target: 0x555555557070, Target string=, const=None\n        Condition: UNDETERMINED\n        Groups: []\n        Annotation: [0x7fffffffe000] => 0x7fffffffe248 —▸ 0x7fffffffe618 ◂— '/usr/bin/ls'\n        Operands: [['[0x7fffffffe000]': Symbol: None, Before: 0x7fffffffe000, After: 0x7fffffffe000, type=CS_OP_MEM, size=8, access=CS_AC_WRITE]] ['RSI': Symbol: None, Before: 0x7fffffffe248, After: 0x7fffffffe248, type=CS_OP_REG, size=8, access=CS_AC_READ]]]\n        Conditional jump: False. Taken: False\n        Unconditional jump: False\n        Declare unconditional: None\n        Can change PC: False\n        Syscall:  N/A\n        Causes Delay slot: False\n        Split: NO_SPLIT\n        Call-like: False\n```\n\n2. Use the Capstone disassembler to verify the number of operands the instruction groups.\n\nTaken the raw instruction bytes and pass them to `cstool` to see the information that we are working with:\n\n```sh\ncstool -d mips 0x0400000c\n```\n\nThe number of operands may not match the visual appearance. You might also check the instruction groups, and verify that an instruction that we might consider a `call` has the Capstone `call` group. Capstone is not 100% correct in every single case in all architectures, so it's good to verify. Report a bug to Capstone if there appears to be an error, and in the meanwhile we can create a fix in Pwndbg to work around the current behavior.\n\n3. Check the state of the emulator.\n\nGo to [pwndbg/emu/emulator.py](pwndbg/emu/emulator.py) and uncomment the `DEBUG = -1` line. This will enable verbose debug printing. The emulator will print it's current `pc` at every step, and indicate important events, like memory mappings. Likewise, in [pwndbg/aglib/disasm/arch.py](pwndbg/aglib/disasm/arch.py) you can set `DEBUG_ENHANCEMENT = True` to print register accesses to verify they are sane values.\n\nPotential bugs:\n- A register is 0 (may also be the source of a Unicorn segfault if used as a memory operand) - often means we are not copying the host processes register into the emulator. By default, we map register by name - if in pwndbg, it's called `rax`, then we find the UC constant named `U.x86_const.UC_X86_REG_RAX`. Sometimes, this default mapping doesn't work, sometimes do to differences in underscores (`FSBASE` vs `FS_BASE`). In these cases, we have to manually add the mapping.\n- Unexpected crash - the instruction at hand might require a 'coprocessor', or some information that is unavailable to Unicorn (it's QEMU under the hood).\n- Instructions are just no executing - we've seen this in the case of Arm Thumb instructions. There might be some specific API/way to invoke the emulator that is required for a certain processor state.\n\n## Creating small cross-architecture programs\n\nIf you are encountering a strange behavior with a certain instruction or scenario in a non-native-architecture program, you can use some great functions from `pwntools` to handle the compilation and debugging. This is a great way to create a small reproducible example to isolate an issue.\n\nThe following Python program, when run from inside a `tmux` session, will take some AArch64 assembly, compile it, and run it with GDB attached in a new `tmux` pane. It will search your system for the appropriate cross compiler for the architecture at hand, and run the compiled binary with QEMU.\n\n```python\nfrom pwn import *\n\ncontext.arch = \"aarch64\"\n\nAARCH64_GRACEFUL_EXIT = \"\"\"\nmov x0, 0\nmov x8, 93\nsvc 0\n\"\"\"\n\nout = make_elf_from_assembly(STORE)\n# Debug info\nprint(out)\ngdb.debug(out)\n\npause()\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.8955078125,
          "content": "# This dockerfile was created for development & testing purposes, for APT-based distro.\n#\n# Build as:             docker build -t pwndbg .\n#\n# For testing use:      docker run --rm -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined pwndbg bash\n#\n# For development, mount the directory so the host changes are reflected into container:\n#   docker run -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v `pwd`:/pwndbg pwndbg bash\n#\n\nARG image=mcr.microsoft.com/devcontainers/base:jammy\nFROM $image\n\nWORKDIR /pwndbg\n\nENV PIP_NO_CACHE_DIR=true\nENV LANG en_US.utf8\nENV TZ=America/New_York\nENV ZIGPATH=/opt/zig\nENV PWNDBG_VENV_PATH=/venv\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \\\n    echo $TZ > /etc/timezone && \\\n    apt-get update && \\\n    apt-get install -y locales && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \\\n    apt-get update && \\\n    apt-get install -y vim\n\nADD ./setup.sh /pwndbg/\nADD ./poetry.lock /pwndbg/\nADD ./pyproject.toml /pwndbg/\nADD ./poetry.toml /pwndbg/\n\n# pyproject.toml requires these files, pip install would fail\nRUN touch README.md && mkdir pwndbg && touch pwndbg/empty.py\n\nRUN DEBIAN_FRONTEND=noninteractive ./setup.sh\n\n# Comment these lines if you won't run the tests.\nADD ./setup-dev.sh /pwndbg/\nRUN ./setup-dev.sh\n\n# Cleanup dummy files\nRUN rm README.md && rm -rf pwndbg\n\nADD . /pwndbg/\n\nARG LOW_PRIVILEGE_USER=\"vscode\"\n\nENV PATH=\"${PWNDBG_VENV_PATH}/bin:${PATH}\"\n\n# Add .gdbinit to the home folder of both root and vscode users (if vscode user exists)\n# This is useful for a VSCode dev container, not really for test builds\nRUN if [ ! -f ~/.gdbinit ]; then echo \"source /pwndbg/gdbinit.py\" >> ~/.gdbinit; fi && \\\n    if id -u ${LOW_PRIVILEGE_USER} > /dev/null 2>&1; then \\\n        su ${LOW_PRIVILEGE_USER} -c 'if [ ! -f ~/.gdbinit ]; then echo \"source /pwndbg/gdbinit.py\" >> ~/.gdbinit; fi'; \\\n    fi\n"
        },
        {
          "name": "Dockerfile.arch",
          "type": "blob",
          "size": 1.755859375,
          "content": "# This dockerfile was created for development & testing purposes, for Pacman-based distro.\n#\n# Build as:             docker build -f Dockerfile.arch -t pwndbg .\n#\n# For testing use:      docker run --rm -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined pwndbg bash\n#\n# For development, mount the directory so the host changes are reflected into container:\n#   docker run -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v `pwd`:/pwndbg pwndbg bash\n#\n\nARG image=archlinux:latest\nFROM $image\n\nWORKDIR /pwndbg\n\nENV PIP_NO_CACHE_DIR=true\nENV LANG en_US.utf8\nENV TZ=America/New_York\nENV ZIGPATH=/opt/zig\nENV PWNDBG_VENV_PATH=/venv\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \\\n    echo $TZ > /etc/timezone && \\\n    pacman -Syu --noconfirm && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \\\n    pacman -S --noconfirm vim && \\\n    pacman -Scc --noconfirm\n\nADD ./setup.sh /pwndbg/\nADD ./pyproject.toml /pwndbg/\nADD ./poetry.lock /pwndbg/\nADD ./poetry.toml /pwndbg/\n\n# pyproject.toml requires these files, pip install would fail\nRUN touch README.md && mkdir pwndbg && touch pwndbg/empty.py\n\nRUN sed -i 's/read -p \"Do you want to do a full system update?/#read/' ./setup.sh && \\\n    ./setup.sh\n\n# Comment these lines if you won't run the tests.\nADD ./setup-dev.sh /pwndbg/\nRUN ./setup-dev.sh\n\n# Cleanup dummy files\nRUN rm README.md && rm -rf pwndbg\n\nADD . /pwndbg/\n\nENV PATH=\"${PWNDBG_VENV_PATH}/bin:${PATH}\"\n\nRUN echo \"source /pwndbg/gdbinit.py\" >> ~/.gdbinit.py && \\\n    echo \"PYTHON_MINOR=$(python3 -c \"import sys;print(sys.version_info.minor)\")\" >> /root/.bashrc && \\\n    echo \"PYTHON_PATH=\\\"/usr/local/lib/python3.${PYTHON_MINOR}/dist-packages/bin\\\"\" >> /root/.bashrc && \\\n    echo \"export PATH=$PATH:$PYTHON_PATH\" >> /root/.bashrc\n"
        },
        {
          "name": "Dockerfile.lldb",
          "type": "blob",
          "size": 2.3486328125,
          "content": "# This dockerfile was created for development & testing purposes, for APT-based distro.\n#\n# Build as:             docker build -t pwndbg .\n#\n# For testing use:      docker run --rm -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined pwndbg bash\n#\n# For development, mount the directory so the host changes are reflected into container:\n#   docker run -it --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v `pwd`:/pwndbg pwndbg bash\n#\n\nARG image=mcr.microsoft.com/devcontainers/base:jammy\nFROM $image\n\nWORKDIR /pwndbg\n\nENV PIP_NO_CACHE_DIR=true\nENV LANG en_US.utf8\nENV TZ=America/New_York\nENV ZIGPATH=/opt/zig\nENV PWNDBG_VENV_PATH=/venv\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \\\n    echo $TZ > /etc/timezone && \\\n    apt-get update && \\\n    apt-get install -y locales && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \\\n    apt-get update && \\\n    apt-get install -y vim\n\nADD ./setup.sh /pwndbg/\nADD ./poetry.lock /pwndbg/\nADD ./pyproject.toml /pwndbg/\nADD ./poetry.toml /pwndbg/\n\n# pyproject.toml requires these files, pip install would fail\nRUN touch README.md && mkdir pwndbg && touch pwndbg/empty.py\n\nRUN DEBIAN_FRONTEND=noninteractive ./setup.sh\n\n# Comment these lines if you won't run the tests.\nADD ./setup-dev.sh /pwndbg/\nRUN ./setup-dev.sh\n\n# Cleanup dummy files\nRUN rm README.md && rm -rf pwndbg\n\nADD . /pwndbg/\n\nARG LOW_PRIVILEGE_USER=\"vscode\"\n\n# Add .gdbinit to the home folder of both root and vscode users (if vscode user exists)\n# This is useful for a VSCode dev container, not really for test builds\nRUN if [ ! -f ~/.gdbinit ]; then echo \"source /pwndbg/gdbinit.py\" >> ~/.gdbinit; fi && \\\n    if id -u ${LOW_PRIVILEGE_USER} > /dev/null 2>&1; then \\\n        su ${LOW_PRIVILEGE_USER} -c 'if [ ! -f ~/.gdbinit ]; then echo \"source /pwndbg/gdbinit.py\" >> ~/.gdbinit; fi'; \\\n    fi\n\nRUN apt-get install -y lldb-16\n\n# Add .lldbinit to the home folder of both root and vscode users (if vscode user exists)\n# This is useful for a VSCode dev container, not really for test builds\nRUN if [ ! -f ~/.lldbinit ]; then echo \"command script import /pwndbg/lldbinit.py\" >> ~/.lldbinit; fi && \\\n    if id -u ${LOW_PRIVILEGE_USER} > /dev/null 2>&1; then \\\n        su ${LOW_PRIVILEGE_USER} -c 'if [ ! -f ~/.lldbinit ]; then echo \"command script import /pwndbg/lldbinit.py\" >> ~/.lldbinit; fi'; \\\n    fi\n\n"
        },
        {
          "name": "FEATURES.md",
          "type": "blob",
          "size": 11.3212890625,
          "content": "# pwndbg\n\nPwndbg has a great deal of useful features.  You can a list of all available commands at any time by typing the `pwndbg` command.  Here's a small subset which are easy to capture in screenshots.\n\n## Arguments\n\nAll function call sites are annotated with the arguments to those functions.  This works best with debugging symbols, but also works in the most common case where an imported function (e.g. libc function via GOT or PLT) is used.\n\n![](caps/arguments_getenv.png)\n![](caps/arguments_memcpy.png)\n![](caps/arguments_sigsetjmp.png)\n![](caps/arguments_strcpy.png)\n![](caps/arguments_syscall.png)\n![](caps/arguments_xtrace_init.png)\n\n## Context\n\nA useful summary of the current execution context is printed every time GDB stops (e.g. breakpoint or single-step), displaying all registers, the stack, call frames, disassembly, and additionally recursively dereferencing all pointers.  All memory addresses are color-coded to the type of memory they represent.\n\nThe output of the context may be redirected to a file (including other tty) by using `set context-output /path/to/file` while leaving other output in place.\n\n![](caps/context.png)\n\nA history of previous context output is kept which can be accessed using the `contextprev` and `contextnext` commands.\n\n### Splitting / Layouting Context\n\nThe context sections can be distributed among different tty by using the `contextoutput` command.\nExample: `contextoutput stack /path/to/tty true`\n\nPython can be used to create a tmux layout when starting pwndbg and distributing the context among\nthe splits.\n```python\npython\nimport atexit\nimport os\nfrom pwndbg.commands.context import contextoutput, output, clear_screen\nbt = os.popen('tmux split-window -P -F \"#{pane_id}:#{pane_tty}\" -d \"cat -\"').read().strip().split(\":\")\nst = os.popen(F'tmux split-window -h -t {bt[0]} -P -F '+'\"#{pane_id}:#{pane_tty}\" -d \"cat -\"').read().strip().split(\":\")\nre = os.popen(F'tmux split-window -h -t {st[0]} -P -F '+'\"#{pane_id}:#{pane_tty}\" -d \"cat -\"').read().strip().split(\":\")\ndi = os.popen('tmux split-window -h -P -F \"#{pane_id}:#{pane_tty}\" -d \"cat -\"').read().strip().split(\":\")\npanes = dict(backtrace=bt, stack=st, regs=re, disasm=di)\nfor sec, p in panes.items():\n  contextoutput(sec, p[1], True)\ncontextoutput(\"legend\", di[1], True)\natexit.register(lambda: [os.popen(F\"tmux kill-pane -t {p[0]}\").read() for p in panes.values()])\nend\n```\nIf you like it simple, try configuration with [splitmind](https://github.com/jerdna-regeiz/splitmind)\n\n![](caps/context_splitting.png)\n\nNote above example uses splitmind and following configuration:\n\n```python\npython\nimport splitmind\n(splitmind.Mind()\n  .tell_splitter(show_titles=True)\n  .tell_splitter(set_title=\"Main\")\n  .right(display=\"backtrace\", size=\"25%\")\n  .above(of=\"main\", display=\"disasm\", size=\"80%\", banner=\"top\")\n  .show(\"code\", on=\"disasm\", banner=\"none\")\n  .right(cmd='tty; tail -f /dev/null', size=\"65%\", clearing=False)\n  .tell_splitter(set_title='Input / Output')\n  .above(display=\"stack\", size=\"75%\")\n  .above(display=\"legend\", size=\"25\")\n  .show(\"regs\", on=\"legend\")\n  .below(of=\"backtrace\", cmd=\"ipython\", size=\"30%\")\n).build(nobanner=True)\nend\n```\n\n#### GDB TUI\nThe context sections are available as native [GDB TUI](https://sourceware.org/gdb/current/onlinedocs/gdb.html/TUI.html) windows named `pwndbg_[sectionname]`.\n\nThere are some predefined layouts coming with pwndbg which you can select using `layout pwndbg` or `layout pwndbg_code`.\n\nTo create [your own layout](https://sourceware.org/gdb/current/onlinedocs/gdb.html/TUI-Commands.html) and selecting it use normal `tui new-layout` syntax like:\n```\ntui new-layout pwndbg_custom {-horizontal { { -horizontal { pwndbg_code 1 pwndbg_disasm 1 } 2 { {-horizontal pwndbg_legend 8 pwndbg_control 2 } 1 pwndbg_regs 6 pwndbg_stack 6 } 3 } 7 cmd 3 } 3 { pwndbg_backtrace 2 pwndbg_threads 1 pwndbg_expressions 2 } 1 } 1 status 1\nlayout pwndbg_custom\n```\n\n![](caps/context_tui.png)\n\nUse `focus cmd` to focus the command window and have the arrow keys scroll through the command history again. `tui disable` to disable TUI mode and go back to CLI mode when running commands with longer output. `ctrl-x + a` toggles between TUI and CLI mode quickly. Hold shift to ignore the TUI mouse integration and use the mouse normally to select text or copy data.\n\n### Watch Expressions\n\nYou can add expressions to be watched by the context.\nThose expressions are evaluated and shown on every context refresh.\n\nAn expression can be added via the `contextwatch` command (aliased `ctx-watch` and `cwatch`).\n\nPer default an expression is parsed and evaluated in the debugged language and can be added with:\n```\ncontextwatch BUF\nctx-watch ITEMS[0]\n```\n\nAlternatively one can provide an arbitrary gdb command to be executed and the result printed in the\ncontext by using the optional `cmd` parameter with the value `execute`:\n```\ncontextwatch execute \"ds BUF\"\ncwatch execute \"x/20x $rsp\"\n```\n\n### Ghidra\n\nWith the help of [radare2](https://github.com/radareorg/radare2) or [rizin](https://github.com/rizinorg/rizin) it is possible to show the\ndecompiled source code of the ghidra decompiler.\n\nHowever, this comes with some prerequisites.\n* First: you have to have installed radare2 or rizin and it must be found by gdb (within path)\n* Second: you have to install the ghidra plugin for radare2\n  [r2ghidra](https://github.com/radareorg/r2ghidra) or install the ghidra plugin for rizin [rz-ghidra](https://github.com/rizinorg/rz-ghidra)\n\n* Third: r2pipe has to be installed in the python-context gdb is using (or if you are using rizin, install rzpipe instead)\n\nThe decompiled source be shown as part of the context by adding `ghidra` to `set context-sections`\nor by calling `ctx-ghidra [function]` manually.\n\nBe warned, the first call to both radare2/r2ghidra and rizin/rz-ghidra are rather slow! Subsequent requests for decompiled\nsource will be faster. And it does take up some resources as the radare2/rizin instance is kept by r2pipe/rzpipe\nto enable faster subsequent analysis.\n\nWith those performance penalties it is reasonable to not have it launch always. Therefore it includes\nan option to only start it when required with `set context-ghidra`:\n* `set context-ghidra always`: always trigger the ghidra context\n* `set context-ghidra never`: never trigger the ghidra context except when called manually\n* `set context-ghidra if-no-source`: invoke ghidra if no source code is available\n\nRemark: the plugin tries to guess the correct current line and mark it with \"-->\", but it might\nget it wrong.\n\n## Disassembly\n\nPwndbg uses Capstone Engine to display disassembled instructions, but also leverages its introspection into the instruction to extract memory targets and condition codes.\n\nAll absolute jumps are folded away, only displaying relevant instructions.\n\n![](caps/disasm_taken_folded.png)\n\nAdditionally, if the current instruction is conditional, Pwndbg displays whether or not it is evaluated with a green check or a red X, and folds away instructions as necessary.\n\n![](caps/disasm_taken_after.png)\n![](caps/disasm_taken_before.png)\n![](caps/disasn_taken_false.png)\n\n## Emulation\n\nPwndbg leverages Unicorn Engine in order to only show instructions which will actually be emulated.  At each debugger stop (e.g. breakpoint or single-step) the next few instructions are silently emulated, and only instructions which will actually be executed are displayed.\n\nThis is incredibly useful when stepping through jump tables, PLT entries, and even while ROPping!\n\n![](caps/emulate_vs_disasm.png)\n![](caps/emulation_plt.png)\n![](caps/emulation_rop.png)\n\n## Heap Inspection\n\nPwndbg enables introspection of the glibc allocator, ptmalloc2, via a handful of introspection functions.\n\n![](caps/heap_arena.png)\n![](caps/heap_mp.png)\n![](caps/heap_bins.png)\n![](caps/heap_fastbins.png)\n![](caps/heap_unsorted.png)\n![](caps/heap_smallbins.png)\n![](caps/heap_largebins.png)\n![](caps/heap_heap.png)\n![](caps/heap_heap2.png)\n![](caps/heap_mallocchunk.png)\n![](caps/heap_topchunk.png)\n![](caps/heap_fake_fast.png)\n![](caps/heap_try_free.png)\n\n## IDA Pro/Binary Ninja Integration\n\nPwndbg is capable of integrating with IDA Pro or Binary Ninja by installing an XMLRPC server in the decompiler as a plugin, and then querying it for information.\n\nThis allows extraction of comments, decompiled lines of source, breakpoints, symbols, and synchronized debugging (single-steps update the cursor in the decompiler).\n\n![](caps/ida_comments.png)\n![](caps/ida_function.png)\n![](caps/ida_integration.png)\n\nSee the [Binary Ninja integration guide](docs/binja_integration.md) for setup information.\n\n## Go Debugging\n\nPwndbg has support for dumping complex Go values like maps and slices, including automatically parsing out type layouts in certain cases.\n\nSee the [Go debugging guide](docs/go_debugging.md) for more information.\n\n## Configuration, customization\n\nThere are two commands to set various options:\n\n* `theme` - to set particular output color/style\n![](caps/theme.png)\n\n* `config` - to set parameters like whether to emulate code near current instruction, ida rpc connection info, hexdump bytes/width (and more)\n![](caps/config.png)\n\nOf course you can generate and put it in `.gdbinit` after pwndbg initialization to keep it persistent between pwngdb sessions.\n\nThis can be seen and achieved by `configfile`/`themefile` commands.\n\n## QEMU Compatibility\n\nPwndbg is designed to work with minimally-implemented or otherwise debugger-hostile implementations of the GDB Serial Protocol.  One such implementation is that used by QEMU User-Mode Emulation (`qemu-user`) which is frequently used by CTF players to execute and debug cross-architecture binaries.\n\nVanilla GDB, PEDA, and GEF all fail terribly in this scenario.\n\n#### GEF\n\n![](caps/qemu_gef.png)\n\n#### PEDA\n\n![](caps/qemu_peda.png)\n\n#### Vanilla GDB\n\n![](caps/qemu_vanilla.png)\n\n#### Pwndbg\n\nHowever, Pwndbg works around the limitations of the GDB stub to give you the best debugger environment possible.\n\n![](caps/qemu_pwndbg.png)\n\n## Process State Inspection\n\nUse the `procinfo` command in order to inspect the current process state, like UID, GID, Groups, SELinux context, and open file descriptors!  Pwndbg works particularly well with remote GDB debugging like with Android phones, which PEDA, GEF, and vanilla GDB choke on.\n\n![](caps/procinfo.png)\n\n## ROP Gadgets\n\nPwndbg makes using ROPGadget easy with the actual addresses in the process.\n\nJust use the `rop` command!\n\n![](caps/rop_grep.png)\n\n## Search\n\nPwndbg makes searching the target memory space easy, with a complete and easy-to-use interface.  Whether you're searching for bytes, strings, or various sizes of integer values or pointers, it's a simple command away.\n\n![](caps/search.png)\n\n## Finding Leaks\n![](caps/leakfind.png)\nFinding leak chains can be done using the `leakfind` command. It recursively inspects address ranges for pointers, and reports on all pointers found.\n\n\n## Telescope\n\nInspecting memory dumps is easy with the `telescope` command.  It recursively dereferences a range of memory, letting you see everything at once.  As an added bonus, Pwndbg checks all of the available registers to see if they point into the memory range.\n\n## Virtual Memory Maps\n\nPwndbg enhances the standard memory map listing, and allows easy searching.\n\n![](caps/vmmap.png)\n![](caps/vmmap2.png)\n![](caps/vmmap_pc.png)\n![](caps/vmmap_register.png)\n![](caps/vmmap_stack.png)\n\n## Windbg Compatibility\n\nPwndbg has a complete windbg compatibility layer.  You can `dd`, `dps`, `eq`, and even `eb eip 90` to your heart's content.\n\n![](caps/windbg.png)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.072265625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2025 Dominik 'Disconnect3d' Czarnota\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3837890625,
          "content": "![repository-open-graph](https://github.com/pwndbg/pwndbg/assets/150354584/77b2e438-898f-416f-a989-4bef30759627)\n# pwndbg\n\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://choosealicense.com/licenses/mit/)\n[![Unit tests](https://github.com/pwndbg/pwndbg/actions/workflows/tests.yml/badge.svg?branch=dev&event=push)](https://github.com/pwndbg/pwndbg/actions/workflows/tests.yml)\n[![codecov.io](https://codecov.io/github/pwndbg/pwndbg/branch/dev/badge.svg?token=i1cBPFVCav)](https://app.codecov.io/github/pwndbg/pwndbg/tree/dev)\n[![Discord](https://img.shields.io/discord/843809097920413717?label=Discord&style=plastic)](https://discord.gg/x47DssnGwm)\n\n`pwndbg` (/paʊnˈdiˌbʌɡ/) is a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers.\n\nIt has a boatload of features, see [FEATURES.md](FEATURES.md) and [CHEATSHEET](https://drive.google.com/file/d/16t9MV8KTFXK7oX_CzXhmDdaVnjT8IYM4/view?usp=drive_link) (feel free to print it!).\n\n## Why?\n\nVanilla GDB is terrible to use for reverse engineering and exploit development. Typing `x/g30x $esp` is not fun, and does not  confer much information.  The year is 2024 and GDB still lacks a real hexdump command!  GDB's syntax is arcane and difficult to approach.  Windbg users are completely lost when they occasionally need to bump into GDB.\n\n## What?\n\nPwndbg is a Python module which is loaded directly into GDB, and provides a suite of utilities and crutches to hack around all of the cruft that is GDB and smooth out the rough edges.\n\nMany other projects from the past (e.g., [gdbinit][gdbinit], [PEDA][PEDA]) and present (e.g. [GEF][GEF]) exist to fill some these gaps.  Each provides an excellent experience and great features -- but they're difficult to extend (some are unmaintained, and all are a single [100KB][gdbinit2], [200KB][peda.py], or [363KB][gef.py] file (respectively)).\n\nPwndbg exists not only to replace all of its predecessors, but also to have a clean implementation that runs quickly and is resilient against all the weird corner cases that come up.  It also comes batteries-included, so all of its features are available if you run `setup.sh`.\n\n[gdbinit]: https://github.com/gdbinit/Gdbinit\n[gdbinit2]: https://github.com/gdbinit/Gdbinit/blob/master/gdbinit\n\n[PEDA]: https://github.com/longld/peda\n[peda.py]: https://github.com/longld/peda/blob/master/peda.py\n\n[GEF]: https://github.com/hugsy/gef\n[gef.py]: https://github.com/hugsy/gef/blob/master/gef.py\n\n## How?\n\nFor a portable version with no external dependencies, scroll down for the [Portable Installation](#portable-installation) section.\n\nInstallation from source is straightforward:\n\n```shell\ngit clone https://github.com/pwndbg/pwndbg\ncd pwndbg\n./setup.sh\n```\n\nOr install via the Nix package manager (you can use Nix on any distribution):\n```shell\nnix shell github:pwndbg/pwndbg\npwndbg ./your-binary\n```\n\nPwndbg is supported on Ubuntu 22.04, and 24.04 with GDB 12.1 and later. We do not test on any older versions of Ubuntu, so `pwndbg` may not work on these versions.\n- For Ubuntu 20.04 use the [2024.08.29 release](https://github.com/pwndbg/pwndbg/releases/tag/2024.08.29)\n- For Ubuntu 18.04 use the [2023.07.17: ubuntu18.04-final release](https://github.com/pwndbg/pwndbg/releases/tag/2023.07.17)\n\nWe may accept pull requests fixing issues in older versions on a case by case basis, please discuss this with us on [Discord](https://discord.gg/x47DssnGwm) first. You can also always checkout an older version of `pwndbg` from around the time the Ubuntu version you're interested in was still supported by Canonical, or you can attempt to build a newer version of GDB from source.\n\nOther Linux distributions are also supported via `setup.sh`, including:\n\n* Debian-based OSes (via apt-get)\n* Fedora and Red Hat (via dnf)\n* Clear (via swiped)\n* OpenSUSE LEAP (via zypper)\n* Arch and Manjaro (via community AUR packages)\n* Void (via xbps)\n* Gentoo (via emerge)\n\nIf you use any Linux distribution other than Ubuntu, we recommend using the [latest available GDB](https://www.gnu.org/software/gdb/download/) built from source. You can build it as:\n```\ncd <gdb-sources-dir>\nmkdir build && cd build\nsudo apt install libgmp-dev libmpfr-dev libreadline-dev texinfo  # required by build\n../configure --disable-nls --disable-werror --with-system-readline --with-python=`which python3` --with-system-gdbinit=/etc/gdb/gdbinit --enable-targets=all\nmake -j7\n```\n\n## Portable Installation:\n\nThe portable version includes all necessary dependencies and should work without the need to install additional packages.\n\n### Download the Portable Version:\n\nDownload the portable version from the [Pwndbg releases page](https://github.com/pwndbg/pwndbg/releases) by selecting the desired version.\nChoose the appropriate version for your system architecture (x86_64, armv7l, aarch64, riscv64).\n\n### Installation on RPM-based Systems (CentOS/Alma/Rocky/RHEL):\n\n```shell\ndnf install ./pwndbg-2024.08.29.x86_64.rpm\n# pwndbg\n```\n\n### Installation on DEB-based Systems (Debian/Ubuntu/Kali):\n\n```shell\napt install ./pwndbg_2024.08.29_amd64.deb\n# pwndbg\n```\n\n### Installation on Alpine:\n\n```shell\napk add --allow-untrusted ./pwndbg_2024.08.29_x86_64.apk\n# pwndbg\n```\n\n### Installation on Arch Linux:\n\n```shell\npacman -U ./pwndbg-2024.08.29-1-x86_64.pkg.tar.zst\n# pwndbg\n```\n\n### Generic Linux Installation:\n\n```shell\ntar -v -xf ./pwndbg_2024.08.29_amd64.tar.xz\n# ./pwndbg/bin/pwndbg\n```\n\n## What can I do with that?\n\nFor further info about features/functionalities, see [FEATURES](FEATURES.md).\n\n## Who?\n\nPwndbg is an open-source project, maintained by [many contributors](https://github.com/pwndbg/pwndbg/graphs/contributors)!\n\nPwndbg was originally created by [Zach Riggle](https://github.com/zachriggle), who is no longer with us. We want to thank Zach for all of his contributions to Pwndbg and the wider security community.\n\nWant to help with development? Read [CONTRIBUTING](.github/CONTRIBUTING.md) or [join our Discord server](https://discord.gg/x47DssnGwm)!\n\n## How to develop?\nTo run tests locally you can do this in docker image, after cloning repo run simply\n```shell\ndocker-compose run main ./tests.sh\n```\nDisclaimer - this won't work on apple silicon macs.\n\n## Contact\nIf you have any questions not worthy of a [bug report](https://github.com/pwndbg/pwndbg/issues), feel free to ping\nanybody on [Discord](https://discord.gg/x47DssnGwm) and ask away.\n\n"
        },
        {
          "name": "binja_script.py",
          "type": "blob",
          "size": 13.2421875,
          "content": "from __future__ import annotations\n\nimport ctypes\nimport sys\nimport threading\nimport xmlrpc.client\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import Tuple\nfrom xmlrpc.server import SimpleXMLRPCRequestHandler\nfrom xmlrpc.server import SimpleXMLRPCServer\n\nimport binaryninja\nfrom binaryninja.enums import RegisterValueType\nfrom binaryninja.enums import VariableSourceType\n\n# Allow large integers to be transmitted\nxmlrpc.client.MAXINT = 10**100\nxmlrpc.client.MININT = -(10**100)\n\n\nhost = \"127.0.0.1\"\nport = 31337\n\nlogger = binaryninja.log.Logger(0, \"pwndbg-integration\")\n\n\nclass CustomLogHandler(SimpleXMLRPCRequestHandler):\n    def log_message(self, format: str, *args: Any):\n        logger.log_debug(format % args)\n\n\n# get the earliest-starting function that contains a given address\ndef get_widest_func(bv: binaryninja.BinaryView, addr: int) -> binaryninja.Function | None:\n    funcs = bv.get_functions_containing(addr)\n    if len(funcs) == 0:\n        return None\n    return min(funcs, key=lambda f: f.start)\n\n\n# workaround for BinaryView.add_tag not supporting auto tags\ndef add_data_tag(\n    bv: binaryninja.BinaryView, addr: int, name: str, desc: str, auto: bool = False\n) -> None:\n    if auto:\n        tag = binaryninja.core.BNCreateTag(bv.get_tag_type(name).handle, desc)\n        binaryninja.core.BNAddTag(bv.handle, tag, False)\n        binaryninja.core.BNAddAutoDataTag(bv.handle, addr, tag)\n    else:\n        bv.add_tag(addr, name, desc)\n\n\n# try to add a function tag to the widest function containing the address\n# if there are none, resort to a data tag instead\ndef add_tag_at_addr(\n    bv: binaryninja.BinaryView, addr: int, name: str, desc: str, auto: bool = False\n) -> None:\n    f = get_widest_func(bv, addr)\n    if f is None:\n        add_data_tag(bv, addr, name, desc, auto=auto)\n    else:\n        f.add_tag(name, desc, addr=addr, auto=auto)\n\n\n# workaround for there to be no way to get all address tags in the python API\ndef get_tag_refs(bv: binaryninja.BinaryView, ty: str) -> List[binaryninja.core.BNTagReference]:\n    tag_type = bv.get_tag_type(ty)\n    count = binaryninja.core.BNGetAllTagReferencesOfTypeCount(bv.handle, tag_type.handle)\n    ref_ptr = binaryninja.core.BNGetAllTagReferencesOfType(\n        bv.handle, tag_type.handle, ctypes.c_ulong(count)\n    )\n    return ref_ptr[:count]\n\n\ndef remove_tag_ref(bv: binaryninja.BinaryView, ref: binaryninja.core.BNTagReference):\n    binaryninja.core.BNRemoveTagReference(bv.handle, ref)\n\n\ndef count_pointers(ty: Any) -> Tuple[str, int]:\n    derefcnt = 0\n    while isinstance(ty, binaryninja.types.PointerType):\n        ty = ty.target\n        derefcnt += 1\n    return (str(ty), derefcnt)\n\n\nto_register = []\n\n\ndef should_register(f):\n    to_register.append(f.__name__)\n    return f\n\n\nclass ServerHandler:\n    bv: binaryninja.BinaryView\n\n    def __init__(self, bv: binaryninja.BinaryView):\n        self.bv = bv\n\n    # initialize a binaryview if not already initialized, e.g. add a tag type\n    def init(self) -> None:\n        tag_types = {\"pwndbg-pc\": \"➡️\", \"pwndbg-bp\": \"🔴\"}\n        for k, v in tag_types.items():\n            if k not in self.bv.tag_types:\n                self.bv.create_tag_type(k, v)\n\n    @should_register\n    def clear_pc_tag(self) -> None:\n        \"\"\"\n        Clear all instances of the 'current pc' tag.\n        \"\"\"\n        for t in get_tag_refs(self.bv, \"pwndbg-pc\"):\n            remove_tag_ref(self.bv, t)\n\n    @should_register\n    def navigate_to(self, addr: int) -> None:\n        \"\"\"\n        Navigate to a specified address.\n        \"\"\"\n        self.bv.navigate(self.bv.view, addr)\n\n    @should_register\n    def update_pc_tag(self, new_pc: int) -> None:\n        \"\"\"\n        Sets the 'current pc' tag to the specified address, and clears the old ones.\n        \"\"\"\n        self.clear_pc_tag()\n        add_tag_at_addr(self.bv, new_pc, \"pwndbg-pc\", \"current pc\", auto=True)\n\n    @should_register\n    def get_bp_tags(self) -> List[int]:\n        \"\"\"\n        Gets a list of all addresses with a breakpoint tag.\n        \"\"\"\n        return [t.addr for t in get_tag_refs(self.bv, \"pwndbg-bp\")]\n\n    @should_register\n    def get_symbol(self, addr: int) -> str | None:\n        \"\"\"\n        Gets the symbol at exactly the specified address.\n        \"\"\"\n        sym = self.bv.get_symbol_at(addr)\n        if sym is None:\n            return None\n        return sym.full_name\n\n    @should_register\n    def get_func_info(self, addr: int) -> Tuple[str, int] | None:\n        \"\"\"\n        Gets the widest function containing the specified address.\n\n        Returns a (function name, offset from start) tuple.\n        \"\"\"\n        func = get_widest_func(self.bv, addr)\n        if func is None:\n            return None\n        return (func.symbol.full_name, func.start)\n\n    @should_register\n    def get_data_info(self, addr: int) -> Tuple[str, int] | None:\n        \"\"\"\n        Gets the data variable containing the specified address.\n\n        Returns a (variable name, offset from start) tuple.\n        \"\"\"\n        dv = self.bv.get_data_var_at(addr)\n        if dv is None:\n            return None\n        if dv.symbol is not None:\n            return (dv.symbol.full_name, dv.address)\n        return (dv.name or f\"data_{dv.address:x}\", dv.address)\n\n    @should_register\n    def get_comments(self, addr: int) -> List[str]:\n        \"\"\"\n        Gets a list of all comments at a specified address.\n        \"\"\"\n        ret = []\n        func_list = sorted(self.bv.get_functions_containing(addr), key=lambda f: f.start)\n        for f in func_list:\n            ret += f.get_comment_at(addr).split(\"\\n\")\n        ret += self.bv.get_comment_at(addr).split(\"\\n\")\n        # remove empty lines and prepend double slash\n        return [\"// \" + x for x in ret if x]\n\n    @should_register\n    def decompile_func(\n        self, addr: int, level: str\n    ) -> List[Tuple[int, List[Tuple[str, str]]]] | None:\n        \"\"\"\n        Gets the decompilation of a function at a specified IL level.\n\n        Returns a list of (address, token) tuples, where each token is a (text, type) tuple.\n        \"\"\"\n        func = get_widest_func(self.bv, addr)\n        if func is None:\n            return None\n        orig_func = func\n        if level == \"disasm\":\n            pass\n        elif level == \"llil\":\n            func = func.llil_if_available\n        elif level == \"mlil\":\n            func = func.mlil_if_available\n        elif level == \"hlil\":\n            func = func.hlil_if_available\n        else:\n            raise ValueError(\n                f\"{level!r} is not a recognized IL level. Supported values are: disasm, llil, mlil, hlil.\"\n            )\n        if func is None:\n            return None\n        if level == \"hlil\":\n            lines = func.root.lines\n        else:\n            if level == \"disasm\":\n                lines = [\n                    binaryninja.function.DisassemblyTextLine(tok, addr)\n                    for (tok, addr) in func.instructions\n                ]\n            else:\n                lines = [\n                    binaryninja.function.DisassemblyTextLine(line.tokens, line.address, line)\n                    for line in func.instructions\n                ]\n            lines = binaryninja.function.DisassemblyTextRenderer(func).post_process_lines(\n                orig_func.lowest_address,\n                orig_func.highest_address - orig_func.lowest_address,\n                lines,\n            )\n\n        return [\n            (line.address, [(tok.text, tok.type.name) for tok in line.tokens]) for line in lines\n        ]\n\n    @should_register\n    def get_func_type(\n        self, addr: int\n    ) -> Tuple[Tuple[str, int, str], List[Tuple[str, int, str]]] | None:\n        \"\"\"\n        Gets the type signature of a function.\n\n        Returns a (return type, list of argument types) tuples,\n        where the return type is a (type, pointer count, function name) tuple,\n        and the argument types are (type, pointer count, argument name) tuples.\n        \"\"\"\n        f = self.bv.get_function_at(addr)\n        if f is None:\n            return None\n        ret_ty = (*count_pointers(f.return_type), f.name)\n        arg_tys = [(*count_pointers(arg.type), arg.name) for arg in f.parameter_vars]\n        return (ret_ty, arg_tys)\n\n    @should_register\n    def get_symbol_addr(self, sym: str) -> int | None:\n        \"\"\"\n        Gets the address of a symbol.\n        \"\"\"\n        syms = self.bv.get_symbols_by_name(sym)\n        if syms:\n            return syms[0].address\n        raw = self.bv.get_symbol_by_raw_name(sym)\n        if raw:\n            return raw.address\n        try:\n            if sym.startswith(\"data_\"):\n                return int(sym[5:], 16)\n            if sym.startswith(\"sub_\"):\n                return int(sym[4:], 16)\n        except ValueError:\n            return None\n        return None\n\n    @should_register\n    def parse_expr(self, expr: str, magic_vals: Dict[str, int]) -> int | None:\n        \"\"\"\n        Parses and evaluates a Binary Ninja expression given a dictionary of magic values.\n\n        Check docs of BinaryView.parse_expression for more info.\n        \"\"\"\n        try:\n            self.bv.add_expression_parser_magic_values(\n                list(magic_vals.keys()), list(magic_vals.values())\n            )\n            return self.bv.parse_expression(expr)\n        except ValueError:\n            return None\n\n    @should_register\n    def get_var_offset_from_sp(self, pc: int, var_name: str) -> Tuple[int, int] | None:\n        \"\"\"\n        Gets the offset of a stack variable from the stack pointer, given the current pc and variable name.\n\n        Returns a (confidence, offset) tuple.\n        \"\"\"\n        f = get_widest_func(self.bv, pc)\n        if f is None:\n            return None\n        v = f.get_variable_by_name(var_name)\n        if v is None or v.source_type != VariableSourceType.StackVariableSourceType:\n            return None\n        sp_val = f.get_reg_value_at(pc, f.arch.stack_pointer)\n        if sp_val.type != RegisterValueType.StackFrameOffset:\n            return None\n        return (sp_val.confidence, v.storage - sp_val.value)\n\n    @should_register\n    def get_stack_var_name(\n        self, pc: int, regs: List[Tuple[str, int]], addr: int\n    ) -> Tuple[int, str, str] | None:\n        \"\"\"\n        Gets the name of a stack variable, given the current pc,\n        list of (name, value) register pairs, and address of the stack variable.\n\n        The frame base is computed from the first register in the list that Binary Ninja\n        determines to be a fixed offset from the frame base. Registers that should probably\n        be included are the stack pointer and frame pointer.\n\n        Returns a (confidence, function name, variable name) tuple.\n        \"\"\"\n        f = get_widest_func(self.bv, pc)\n        if f is None:\n            return None\n        valid_regs = []\n        for name, val in regs:\n            static_val = f.get_reg_value_at(pc, name)\n            if static_val.type != RegisterValueType.StackFrameOffset:\n                continue\n            valid_regs.append((val - static_val.value, static_val.confidence))\n            # break early if we're at max confidence\n            if static_val.confidence == 255:\n                break\n        if not valid_regs:\n            return None\n        (frame_base, conf) = max(valid_regs, key=lambda x: x[1])\n        v = f.get_stack_var_at_frame_offset(addr - frame_base, pc)\n        if v is None:\n            return None\n        return (conf, f.name, v.name)\n\n    @should_register\n    def get_base(self) -> int:\n        \"\"\"\n        Gets the base address of the BinaryView.\n        \"\"\"\n        return self.bv.start\n\n    @should_register\n    def get_py_version(self) -> str:\n        \"\"\"\n        Gets Binary Ninja's python version.\n        \"\"\"\n        return sys.version\n\n    @should_register\n    def get_version(self) -> str:\n        \"\"\"\n        Gets Binary Ninja's version.\n        \"\"\"\n        return binaryninja.core_version()\n\n\nserver: SimpleXMLRPCServer | None = None\nhandler: ServerHandler | None = None\n\n\ndef start_server(bv: binaryninja.BinaryView) -> None:\n    global server\n\n    if server is not None:\n        stop_server(bv)\n\n    handler = ServerHandler(bv)\n    handler.init()\n\n    server = SimpleXMLRPCServer((host, port), requestHandler=CustomLogHandler, allow_none=True)\n    server.register_introspection_functions()\n\n    for f in to_register:\n        server.register_function(getattr(handler, f))\n\n    thread = threading.Thread(target=server.serve_forever)\n    thread.daemon = True\n    thread.start()\n\n    logger.log_info(f\"XML-RPC server listening on http://{host}:{port}\")\n\n\ndef stop_server(bv: binaryninja.BinaryView) -> None:\n    global server\n\n    if server is None:\n        return\n\n    server.shutdown()\n    server.server_close()\n    server = None\n\n\ndef toggle_breakpoint(bv: binaryninja.BinaryView, addr: int) -> None:\n    found = False\n    for t in get_tag_refs(bv, \"pwndbg-bp\"):\n        if t.addr == addr:\n            remove_tag_ref(bv, t)\n            found = True\n    if not found:\n        add_tag_at_addr(bv, addr, \"pwndbg-bp\", \"GDB breakpoint\", auto=False)\n\n\nbinaryninja.plugin.PluginCommand.register(\n    \"pwndbg\\\\Start integration on current view\",\n    \"Start pwndbg integration on current view.\",\n    start_server,\n)\nbinaryninja.plugin.PluginCommand.register(\n    \"pwndbg\\\\Stop integration\", \"Stop pwndbg integration.\", stop_server\n)\nbinaryninja.plugin.PluginCommand.register_for_address(\n    \"pwndbg\\\\Toggle breakpoint here\",\n    \"Toggles a GDB breakpoint at the current address.\",\n    toggle_breakpoint,\n)\n"
        },
        {
          "name": "caps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.88671875,
          "content": "version: \"3.8\"\nservices:\n  base: &base-spec\n    build: .\n    platform: linux/amd64\n    security_opt:\n      - seccomp:unconfined\n    cap_add:\n      - SYS_PTRACE\n  main:\n    <<: *base-spec\n    volumes:\n      - .:/pwndbg\n\n  ubuntu22.04:\n    <<: *base-spec\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        image: ubuntu:22.04\n  \n  ubuntu24.04:\n    <<: *base-spec\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        image: ubuntu:24.04\n\n\n  debian12:\n    <<: *base-spec\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        image: debian:12\n\n  lldb:\n    <<: *base-spec\n    build:\n      context: .\n      dockerfile: Dockerfile.lldb\n      args:\n        image: debian:12\n    volumes:\n      - .:/pwndbg\n\n  archlinux:\n    <<: *base-spec\n    build:\n      context: .\n      dockerfile: Dockerfile.arch\n      args:\n        image: archlinux:latest\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 3.5732421875,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nix-github-actions\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"poetry2nix\",\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1729742964,\n        \"narHash\": \"sha256-B4mzTcQ0FZHdpeWcpDYPERtyjJd/NIuaQ9+BV1h+MpA=\",\n        \"owner\": \"nix-community\",\n        \"repo\": \"nix-github-actions\",\n        \"rev\": \"e04df33f62cdcf93d73e9a04142464753a16db67\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-community\",\n        \"repo\": \"nix-github-actions\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1736241350,\n        \"narHash\": \"sha256-CHd7yhaDigUuJyDeX0SADbTM9FXfiWaeNyY34FL1wQU=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"8c9fd3e564728e90829ee7dbac6edc972971cd0f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"poetry2nix\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nix-github-actions\": \"nix-github-actions\",\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": \"systems_2\",\n        \"treefmt-nix\": \"treefmt-nix\"\n      },\n      \"locked\": {\n        \"lastModified\": 1736323755,\n        \"narHash\": \"sha256-lUSZtb4+lONT7MKradw9FLMzc+fxtrkKGX7w3oKJmJg=\",\n        \"owner\": \"nix-community\",\n        \"repo\": \"poetry2nix\",\n        \"rev\": \"29b2641c1c6e67d836f9a9fda8a6de85be9644ac\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-community\",\n        \"repo\": \"poetry2nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\",\n        \"poetry2nix\": \"poetry2nix\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"treefmt-nix\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"poetry2nix\",\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1730120726,\n        \"narHash\": \"sha256-LqHYIxMrl/1p3/kvm2ir925tZ8DkI0KA10djk8wecSk=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"treefmt-nix\",\n        \"rev\": \"9ef337e492a5555d8e17a51c911ff1f02635be15\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"treefmt-nix\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 3.759765625,
          "content": "{\n  description = \"pwndbg\";\n\n  nixConfig = {\n    extra-substituters = [\n      \"https://pwndbg.cachix.org\"\n    ];\n    extra-trusted-public-keys = [\n      \"pwndbg.cachix.org-1:HhtIpP7j73SnuzLgobqqa8LVTng5Qi36sQtNt79cD3k=\"\n    ];\n  };\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n  inputs.poetry2nix = {\n    url = \"github:nix-community/poetry2nix\";\n    inputs.nixpkgs.follows = \"nixpkgs\";\n  };\n\n  outputs =\n    {\n      self,\n      nixpkgs,\n      poetry2nix,\n    }:\n    let\n      # Self contained packages for: Debian, RHEL-like (yum, rpm), Alpine, Arch packages\n      forAllSystems = nixpkgs.lib.genAttrs nixpkgs.lib.systems.flakeExposed;\n      forPortables = nixpkgs.lib.genAttrs [\n        \"deb\"\n        \"rpm\"\n        \"apk\"\n        \"archlinux\"\n      ];\n\n      overlayDarwin =\n        final: prev:\n        nixpkgs.lib.optionalAttrs prev.stdenv.isDarwin {\n          gdb = prev.gdb.override {\n            # dynamic version of libiconv use to much of `dlopen`\n            libiconv = prev.pkgsStatic.libiconv;\n          };\n        };\n      pkgsBySystem = forAllSystems (\n        system:\n        import nixpkgs {\n          inherit system;\n          overlays = [\n            poetry2nix.overlays.default\n            overlayDarwin\n          ];\n        }\n      );\n      pkgUtil = forAllSystems (system: import ./nix/bundle/pkg.nix { pkgs = pkgsBySystem.${system}; });\n\n      portableDrvLldb =\n        system:\n        import ./nix/portable.nix {\n          pkgs = pkgsBySystem.${system};\n          pwndbg = self.packages.${system}.pwndbg-lldb;\n        };\n      portableDrv =\n        system:\n        import ./nix/portable.nix {\n          pkgs = pkgsBySystem.${system};\n          pwndbg = self.packages.${system}.pwndbg;\n        };\n      portableDrvs =\n        system:\n        forPortables (\n          packager:\n          pkgUtil.${system}.buildPackagePFPM {\n            inherit packager;\n            drv = portableDrv system;\n            config = ./nix/bundle/nfpm.yaml;\n            preremove = ./nix/bundle/preremove.sh;\n          }\n        );\n      tarballDrv = system: {\n        tarball = pkgUtil.${system}.buildPackageTarball { drv = portableDrv system; };\n        tarball-lldb = pkgUtil.${system}.buildPackageTarball { drv = portableDrvLldb system; };\n      };\n    in\n    {\n      packages = forAllSystems (\n        system:\n        {\n          default = self.packages.${system}.pwndbg;\n        }\n        // (\n          let\n            systemfix = if (system == \"aarch64-darwin\") then \"x86_64-darwin\" else system;\n          in\n          {\n            pwndbg = import ./nix/pwndbg.nix {\n              pkgs = pkgsBySystem.${systemfix};\n              python3 = pkgsBySystem.${systemfix}.python3;\n              gdb = pkgsBySystem.${systemfix}.gdb;\n              inputs.pwndbg = self;\n            };\n            pwndbg-dev = import ./nix/pwndbg.nix {\n              pkgs = pkgsBySystem.${systemfix};\n              python3 = pkgsBySystem.${systemfix}.python3;\n              gdb = pkgsBySystem.${systemfix}.gdb;\n              inputs.pwndbg = self;\n              isDev = true;\n            };\n          }\n        )\n        // {\n          pwndbg-lldb = import ./nix/pwndbg.nix {\n            pkgs = pkgsBySystem.${system};\n            python3 = pkgsBySystem.${system}.python3;\n            gdb = pkgsBySystem.${system}.gdb;\n            inputs.pwndbg = self;\n            isDev = true;\n            isLLDB = true;\n          };\n        }\n        // (portableDrvs system)\n        // (tarballDrv system)\n      );\n\n      devShells = forAllSystems (\n        system:\n        import ./nix/devshell.nix {\n          pkgs = pkgsBySystem.${system};\n          python3 = pkgsBySystem.${system}.python3;\n          inputs.pwndbg = self;\n          isLLDB = true;\n        }\n      );\n      formatter = forAllSystems (system: pkgsBySystem.${system}.nixfmt-rfc-style);\n    };\n}\n"
        },
        {
          "name": "gdbinit.py",
          "type": "blob",
          "size": 7.412109375,
          "content": "from __future__ import annotations\n\nimport cProfile\nimport hashlib\nimport importlib.abc\nimport logging\nimport os\nimport shutil\nimport site\nimport subprocess\nimport sys\nimport time\nimport traceback\nfrom glob import glob\nfrom pathlib import Path\nfrom typing import List\nfrom typing import Tuple\n\nimport gdb\n\n\n# Fix gdb readline bug: https://github.com/pwndbg/pwndbg/issues/2232#issuecomment-2542564965\nclass GdbRemoveReadlineFinder(importlib.abc.MetaPathFinder):\n    def find_spec(self, fullname, path=None, target=None):\n        if fullname == \"readline\":\n            raise ImportError(\"readline module disabled under GDB\")\n        return None\n\n\nsys.meta_path.insert(0, GdbRemoveReadlineFinder())\n\n\ndef hash_file(file_path: str | Path) -> str:\n    with open(file_path, \"rb\") as f:\n        file_hash = hashlib.sha256()\n        while True:\n            chunk = f.read(8192)\n            if not chunk:\n                break\n            file_hash.update(chunk)\n    return file_hash.hexdigest()\n\n\ndef run_poetry_install(\n    poetry_path: os.PathLike[str], src_root: Path, dev: bool = False\n) -> Tuple[str, str, int]:\n    command: List[str] = [str(poetry_path), \"install\"]\n    if dev:\n        command.extend((\"--with\", \"dev\"))\n    logging.debug(f\"Updating deps with command: {' '.join(command)}\")\n    result = subprocess.run(command, capture_output=True, text=True, cwd=src_root)\n    return result.stdout.strip(), result.stderr.strip(), result.returncode\n\n\ndef find_poetry() -> Path | None:\n    poetry_path = shutil.which(\"poetry\")\n    if poetry_path is not None:\n        return Path(poetry_path)\n\n    # On some systems `poetry` is installed in \"~/.local/bin/\" but this directory is\n    # not on the $PATH\n    poetry_path = Path(\"~/.local/bin/poetry\").expanduser()\n    if poetry_path.exists():\n        return poetry_path\n\n    return None\n\n\ndef is_dev_mode(venv_path: Path) -> bool:\n    # If \"dev.marker\" exists in the venv directory, the user ran setup-dev.sh and is\n    # considered a developer\n    return (venv_path / \"dev.marker\").exists()\n\n\ndef update_deps(src_root: Path, venv_path: Path) -> None:\n    poetry_lock_hash_path = venv_path / \"poetry.lock.hash\"\n\n    current_hash = hash_file(src_root / \"poetry.lock\")\n    logging.debug(f\"Current poetry.lock hash: {current_hash}\")\n\n    stored_hash = None\n    if poetry_lock_hash_path.exists():\n        stored_hash = poetry_lock_hash_path.read_text().strip()\n        logging.debug(f\"Stored poetry.lock hash: {stored_hash}\")\n    else:\n        logging.debug(\"No stored hash found\")\n\n    # If the hashes don't match, update the dependencies\n    if current_hash != stored_hash:\n        print(\"Detected outdated Pwndbg dependencies (poetry.lock). Updating.\")\n        poetry_path = find_poetry()\n        if poetry_path is None:\n            print(\n                \"Poetry was not found on the $PATH. Please ensure it is installed and on the path, \"\n                \"or run `./setup.sh` to manually update Python dependencies.\"\n            )\n            return\n\n        dev_mode = is_dev_mode(venv_path)\n        stdout, stderr, return_code = run_poetry_install(poetry_path, src_root, dev=dev_mode)\n        if return_code == 0:\n            poetry_lock_hash_path.write_text(current_hash)\n\n            # Only print the poetry output if anything was actually updated\n            if \"No dependencies to install or update\" not in stdout:\n                # The output is usually long and ends up paginated. This\n                # normally gets disabled later during initialization, but in\n                # this case we disable it here to avoid pagination.\n                gdb.execute(\"set pagination off\", to_string=True)\n                print(stdout)\n        else:\n            print(stderr, file=sys.stderr)\n\n\ndef fixup_paths(src_root: Path, venv_path: Path):\n    site_pkgs_path = glob(str(venv_path / \"lib/*/site-packages\"))[0]\n\n    # add virtualenv's site-packages to sys.path and run .pth files\n    site.addsitedir(site_pkgs_path)\n\n    # remove existing, system-level site-packages from sys.path\n    for site_packages in site.getsitepackages():\n        if site_packages in sys.path:\n            sys.path.remove(site_packages)\n\n    # Set virtualenv's bin path (needed for utility tools like ropper, pwntools etc)\n    bin_path = str(venv_path / \"bin\")\n    os.environ[\"PATH\"] = bin_path + os.pathsep + os.environ.get(\"PATH\", \"\")\n\n    # Add pwndbg directory to sys.path so it can be imported\n    sys.path.insert(0, str(src_root))\n\n    # Push virtualenv's site-packages to the front\n    sys.path.remove(site_pkgs_path)\n    sys.path.insert(1, site_pkgs_path)\n\n\ndef get_venv_path(src_root: Path):\n    venv_path_env = os.environ.get(\"PWNDBG_VENV_PATH\")\n    if venv_path_env:\n        return Path(venv_path_env).expanduser().resolve()\n    else:\n        return src_root / \".venv\"\n\n\ndef skip_venv(src_root) -> bool:\n    return (\n        os.environ.get(\"PWNDBG_VENV_PATH\") == \"PWNDBG_PLEASE_SKIP_VENV\"\n        or (src_root / \".skip-venv\").exists()\n    )\n\n\ndef init_logger():\n    log_level_env = os.environ.get(\"PWNDBG_LOGLEVEL\", \"WARNING\")\n    log_level = getattr(logging, log_level_env.upper())\n\n    root_logger = logging.getLogger()\n    root_logger.setLevel(log_level)\n\n    # Add a custom StreamHandler we will use to customize log message formatting. We\n    # configure the handler later, after pwndbg has been imported.\n    handler = logging.StreamHandler()\n    root_logger.addHandler(handler)\n\n    return handler\n\n\ndef main() -> None:\n    profiler = cProfile.Profile()\n\n    start_time = None\n    if os.environ.get(\"PWNDBG_PROFILE\") == \"1\":\n        start_time = time.time()\n        profiler.enable()\n\n    handler = init_logger()\n\n    src_root = Path(__file__).parent.resolve()\n    if not skip_venv(src_root):\n        venv_path = get_venv_path(src_root)\n        if not venv_path.exists():\n            print(f\"Cannot find Pwndbg virtualenv directory: {venv_path}. Please re-run setup.sh\")\n            sys.stdout.flush()\n            os._exit(1)\n        no_auto_update = os.getenv(\"PWNDBG_NO_AUTOUPDATE\")\n        if no_auto_update is None:\n            update_deps(src_root, venv_path)\n        fixup_paths(src_root, venv_path)\n\n    # Force UTF-8 encoding (to_string=True to skip output appearing to the user)\n    try:\n        gdb.execute(\"set target-wide-charset UTF-8\", to_string=True)\n        gdb.execute(\"set charset UTF-8\", to_string=True)\n    except gdb.error as e:\n        print(f\"Warning: Cannot set gdb charset: '{e}'\")\n\n    # Add the original stdout methods back to gdb._GdbOutputFile for pwnlib colors\n    sys.stdout.isatty = sys.__stdout__.isatty\n    sys.stdout.fileno = sys.__stdout__.fileno\n\n    import pwndbg  # noqa: F811\n    import pwndbg.dbg.gdb\n\n    pwndbg.dbg = pwndbg.dbg_mod.gdb.GDB()\n    pwndbg.dbg.setup()\n\n    import pwndbg.log\n    import pwndbg.profiling\n\n    # ColorFormatter relies on pwndbg being loaded, so we can't set it up until now\n    handler.setFormatter(pwndbg.log.ColorFormatter())\n\n    pwndbg.profiling.init(profiler, start_time)\n    if os.environ.get(\"PWNDBG_PROFILE\") == \"1\":\n        pwndbg.profiling.profiler.stop(\"pwndbg-load.pstats\")\n        pwndbg.profiling.profiler.start()\n\n\n# We wrap everything in try/except so that we can exit GDB with an error code\n# This is used by tests to check if gdbinit.py failed\ntry:\n    main()\n\n    # We've already imported this in `main`, but we reimport it here so that it's\n    # available at the global scope when some starts a Python interpreter in GDB\n    import pwndbg  # noqa: F401\n\nexcept Exception:\n    print(traceback.format_exc(), file=sys.stderr)\n    sys.stdout.flush()\n    os._exit(1)\n"
        },
        {
          "name": "ida_script.py",
          "type": "blob",
          "size": 5.2666015625,
          "content": "#!/usr/bin/env python\nfrom __future__ import annotations\n\nimport datetime\nimport threading\nimport xmlrpc.client as xmlclient\nfrom xml.sax.saxutils import escape\nfrom xmlrpc.server import SimpleXMLRPCServer\n\nimport idaapi\nimport idc\n\n# Wait for any processing to get done\nidaapi.auto_wait()\n\n# On Windows with NTFS filesystem a filepath with ':'\n# is treated as NTFS ADS (Alternative Data Stream)\n# and so saving file with such name fails\ndt = datetime.datetime.now().isoformat().replace(\":\", \"-\")\n\n# Save the database so nothing gets lost.\nidc.save_database(idc.get_idb_path() + \".\" + dt)\n\n\nDEBUG_MARSHALLING = False\n\n\ndef create_marshaller(use_format=None, just_to_str=False):\n    assert (\n        use_format or just_to_str\n    ), \"Either pass format to use or make it converting the value to str.\"\n\n    def wrapper(_marshaller, value, appender):\n        if use_format:\n            marshalled = use_format % value\n        elif just_to_str:\n            marshalled = f\"<value><string>{escape(str(value))}</string></value>\"\n\n        if DEBUG_MARSHALLING:\n            print(f\"Marshalled: '{marshalled}'\")\n\n        appender(marshalled)\n\n    return wrapper\n\n\nxmlclient.Marshaller.dispatch[type(1 << 63)] = create_marshaller(\"<value><i8>%d</i8></value>\")\nxmlclient.Marshaller.dispatch[int] = create_marshaller(\"<value><i8>%d</i8></value>\")\nxmlclient.Marshaller.dispatch[idaapi.cfuncptr_t] = create_marshaller(just_to_str=True)\n\nhost = \"127.0.0.1\"\nport = 31337\n\nmutex = threading.Condition()\n\n\ndef wrap(f):\n    def wrapper(*a, **kw):\n        rv = []\n        error = []\n\n        def work():\n            try:\n                result = f(*a, **kw)\n                rv.append(result)\n            except Exception as e:\n                error.append(e)\n\n        with mutex:\n            flags = idaapi.MFF_WRITE\n            if f == idc.set_color:\n                flags |= idaapi.MFF_NOWAIT\n                rv.append(None)\n            idaapi.execute_sync(work, flags)\n\n        if error:\n            msg = f\"Failed on calling {f.__module__}.{f.__name__} with args: {a}, kwargs: {kw}\\nException: {str(error[0])}\"\n            print(\"[!!!] ERROR:\", msg)\n            raise error[0]\n\n        return rv[0]\n\n    return wrapper\n\n\ndef register_module(module):\n    for name, function in module.__dict__.items():\n        if hasattr(function, \"__call__\"):\n            server.register_function(wrap(function), name)\n\n\ndef decompile(addr):\n    \"\"\"\n    Function that overwrites `idaapi.decompile` for xmlrpc so that instead\n    of throwing an exception on `idaapi.DecompilationFailure` it just returns `None`.\n    (so that we don't have to parse xmlrpc Fault's exception string on pwndbg side\n    as it differs between IDA versions).\n    \"\"\"\n    try:\n        return idaapi.decompile(addr)\n    except idaapi.DecompilationFailure:\n        return None\n\n\ndef get_decompile_coord_by_ea(cfunc, addr):\n    if idaapi.IDA_SDK_VERSION >= 720:\n        item = cfunc.body.find_closest_addr(addr)\n        y_holder = idaapi.int_pointer()\n        if not cfunc.find_item_coords(item, None, y_holder):\n            return None\n        y = y_holder.value()\n    else:\n        lnmap = {}\n        for i, line in enumerate(cfunc.pseudocode):\n            phead = idaapi.ctree_item_t()\n            pitem = idaapi.ctree_item_t()\n            ptail = idaapi.ctree_item_t()\n            ret = cfunc.get_line_item(line.line, 0, True, phead, pitem, ptail)\n            if ret and pitem.it:\n                lnmap[pitem.it.ea] = i\n        y = None\n        closest_ea = idaapi.BADADDR\n        for ea, line in lnmap.items():\n            if closest_ea == idaapi.BADADDR or abs(closest_ea - addr) > abs(ea - addr):\n                closest_ea = ea\n                y = lnmap[ea]\n\n    return y\n\n\ndef decompile_context(addr, context_lines):\n    cfunc = decompile(addr)\n    if cfunc is None:\n        return None\n    y = get_decompile_coord_by_ea(cfunc, addr)\n    if y is None:\n        return cfunc\n    lines = cfunc.get_pseudocode()\n    retlines = []\n    for lnnum in range(max(0, y - context_lines), min(len(lines), y + context_lines)):\n        retlines.append(idaapi.tag_remove(lines[lnnum].line))\n        if lnnum == y:\n            retlines[-1] = \">\" + retlines[-1][1:]\n    return \"\\n\".join(retlines)\n\n\ndef versions():\n    \"\"\"Returns IDA & Python versions\"\"\"\n    import sys\n\n    return {\n        \"python\": sys.version,\n        \"ida\": idaapi.get_kernel_version(),\n        \"hexrays\": idaapi.get_hexrays_version() if idaapi.init_hexrays_plugin() else None,\n    }\n\n\nserver = SimpleXMLRPCServer((host, port), logRequests=False, allow_none=True)\nregister_module(idaapi)\nregister_module(\n    idc\n)  # prioritize idc functions over above (e.g. idc.get_next_seg/ida_segment.get_next_seg)\n\nserver.register_function(lambda a: eval(a, globals(), locals()), \"eval\")\nserver.register_function(wrap(decompile))  # overwrites idaapi/ida_hexrays.decompile\nserver.register_function(wrap(decompile_context), \"decompile_context\")  # support context decompile\nserver.register_function(wrap(versions))\nserver.register_introspection_functions()\n\nprint(f\"IDA Pro xmlrpc hosted on http://{host}:{port}\")\nprint(\"Call `shutdown()` to shutdown the IDA Pro xmlrpc server.\")\n\nthread = threading.Thread(target=server.serve_forever)\nthread.daemon = True\nthread.start()\n\n\ndef shutdown():\n    global server\n    global thread\n    server.shutdown()\n    server.server_close()\n    del server\n    del thread\n"
        },
        {
          "name": "lint.sh",
          "type": "blob",
          "size": 1.984375,
          "content": "#!/usr/bin/env bash\n\nset -o errexit\n\nhelp_and_exit() {\n    echo \"Usage: ./lint.sh [-f|--fix]\"\n    echo \"  -f,  --fix         fix issues if possible\"\n    exit 1\n}\n\nif [[ $# -gt 1 ]]; then\n    help_and_exit\nfi\n\nFIX=0\n\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -f | --fix)\n            FIX=1\n            shift\n            ;;\n        *)\n            help_and_exit\n            ;;\n    esac\ndone\n\n# Use Python virtual env for all programs used here\nif [[ -z \"${PWNDBG_VENV_PATH}\" ]]; then\n    PWNDBG_VENV_PATH=\"./.venv\"\nfi\n\nif [[ \"${PWNDBG_VENV_PATH}\" != \"PWNDBG_PLEASE_SKIP_VENV\" ]]; then\n    source \"${PWNDBG_VENV_PATH}/bin/activate\"\nfi\n\nset -o xtrace\n\nLINT_FILES=\"pwndbg tests *.py\"\nLINT_TOOLS=\"isort ruff vermin mypy\"\n\nif ! type ${LINT_TOOLS} &> /dev/null; then\n    PIP_CMD=\"poetry install --with dev\"\n    echo \"Missing one of the following tools: ${LINT_TOOLS}\"\n    echo \"Running '${PIP_CMD}'\"\n\n    $PIP_CMD\nfi\n\ncall_shfmt() {\n    local FLAGS=$1\n    if [ -x \"$(command -v shfmt)\" ]; then\n        local SHFMT_FILES=$(find . -name \"*.sh\" -not -path \"./.venv/*\")\n        # Indents are four spaces, binary ops can start a line, indent switch cases,\n        # and allow spaces following a redirect\n        shfmt ${FLAGS} -i 4 -bn -ci -sr -d ${SHFMT_FILES}\n    else\n        echo \"shfmt not installed, skipping\"\n    fi\n}\n\nif [[ $FIX == 1 ]]; then\n    isort ${LINT_FILES}\n    ruff format ${LINT_FILES}\n    ruff check --fix --output-format=full ${LINT_FILES}\n    call_shfmt -w\nelse\n    isort --check-only --diff ${LINT_FILES}\n    ruff format --check --diff ${LINT_FILES}\n    call_shfmt\n\n    if [[ -z \"$GITHUB_ACTIONS\" ]]; then\n        RUFF_OUTPUT_FORMAT=full\n    else\n        RUFF_OUTPUT_FORMAT=github\n    fi\n\n    ruff check --output-format=\"${RUFF_OUTPUT_FORMAT}\" ${LINT_FILES}\nfi\n\n# Checking minimum python version\nvermin -vvv --no-tips -t=3.10- --eval-annotations --violations ${LINT_FILES}\n\n# mypy is run in a separate step on GitHub Actions\nif [[ -z \"$GITHUB_ACTIONS\" ]]; then\n    mypy pwndbg gdbinit.py lldbinit.py pwndbg-lldb.py\nfi\n"
        },
        {
          "name": "lldbinit.py",
          "type": "blob",
          "size": 5.00390625,
          "content": "from __future__ import annotations\n\nimport cProfile\nimport hashlib\nimport os\nimport shutil\nimport site\nimport subprocess\nimport sys\nimport time\nfrom glob import glob\nfrom pathlib import Path\nfrom typing import List\nfrom typing import Tuple\n\nimport lldb\n\n\ndef hash_file(file_path: str | Path) -> str:\n    with open(file_path, \"rb\") as f:\n        file_hash = hashlib.sha256()\n        while True:\n            chunk = f.read(8192)\n            if not chunk:\n                break\n            file_hash.update(chunk)\n    return file_hash.hexdigest()\n\n\ndef run_poetry_install(\n    poetry_path: os.PathLike[str], src_root: Path, dev: bool = False\n) -> Tuple[str, str, int]:\n    command: List[str | os.PathLike[str]] = [poetry_path, \"install\"]\n    if dev:\n        command.extend((\"--with\", \"dev\"))\n    result = subprocess.run(command, capture_output=True, text=True, cwd=src_root)\n    return result.stdout.strip(), result.stderr.strip(), result.returncode\n\n\ndef find_poetry() -> Path | None:\n    poetry_path = shutil.which(\"poetry\")\n    if poetry_path is not None:\n        return Path(poetry_path)\n\n    # On some systems `poetry` is installed in \"~/.local/bin/\" but this directory is\n    # not on the $PATH\n    poetry_path = Path(\"~/.local/bin/poetry\").expanduser()\n    if poetry_path.exists():\n        return poetry_path\n\n    return None\n\n\ndef is_dev_mode(venv_path: Path) -> bool:\n    # If \"dev.marker\" exists in the venv directory, the user ran setup-dev.sh and is\n    # considered a developer\n    return (venv_path / \"dev.marker\").exists()\n\n\ndef update_deps(src_root: Path, venv_path: Path) -> None:\n    poetry_lock_hash_path = venv_path / \"poetry.lock.hash\"\n\n    current_hash = hash_file(src_root / \"poetry.lock\")\n    stored_hash = None\n    if poetry_lock_hash_path.exists():\n        stored_hash = poetry_lock_hash_path.read_text().strip()\n\n    # If the hashes don't match, update the dependencies\n    if current_hash != stored_hash:\n        poetry_path = find_poetry()\n        if poetry_path is None:\n            print(\n                \"Poetry was not found on the $PATH. Please ensure it is installed and on the path, \"\n                \"or run `./setup.sh` to manually update Python dependencies.\"\n            )\n            return\n\n        dev_mode = is_dev_mode(venv_path)\n        stdout, stderr, return_code = run_poetry_install(poetry_path, src_root, dev=dev_mode)\n        if return_code == 0:\n            poetry_lock_hash_path.write_text(current_hash)\n\n            # Only print the poetry output if anything was actually updated\n            if \"No dependencies to install or update\" not in stdout:\n                print(stdout)\n        else:\n            print(stderr, file=sys.stderr)\n\n\ndef fixup_paths(src_root: Path, venv_path: Path):\n    site_pkgs_path = glob(str(venv_path / \"lib/*/site-packages\"))[0]\n\n    # add virtualenv's site-packages to sys.path and run .pth files\n    site.addsitedir(site_pkgs_path)\n\n    # remove existing, system-level site-packages from sys.path\n    for site_packages in site.getsitepackages():\n        if site_packages in sys.path:\n            sys.path.remove(site_packages)\n\n    # Set virtualenv's bin path (needed for utility tools like ropper, pwntools etc)\n    bin_path = str(venv_path / \"bin\")\n    os.environ[\"PATH\"] = bin_path + os.pathsep + os.environ.get(\"PATH\", \"\")\n\n    # Add pwndbg directory to sys.path so it can be imported\n    sys.path.insert(0, str(src_root))\n\n    # Push virtualenv's site-packages to the front\n    if site_pkgs_path in sys.path:\n        sys.path.remove(site_pkgs_path)\n    sys.path.insert(1, site_pkgs_path)\n\n\ndef get_venv_path(src_root: Path):\n    venv_path_env = os.environ.get(\"PWNDBG_VENV_PATH\")\n    if venv_path_env:\n        return Path(venv_path_env).expanduser().resolve()\n    else:\n        return src_root / \".venv\"\n\n\ndef skip_venv(src_root) -> bool:\n    return (\n        os.environ.get(\"PWNDBG_VENV_PATH\") == \"PWNDBG_PLEASE_SKIP_VENV\"\n        or (src_root / \".skip-venv\").exists()\n    )\n\n\ndef main(debugger: lldb.SBDebugger, major: int, minor: int, debug: bool = False) -> None:\n    profiler = cProfile.Profile()\n\n    start_time = None\n    if os.environ.get(\"PWNDBG_PROFILE\") == \"1\":\n        start_time = time.time()\n        profiler.enable()\n\n    src_root = Path(__file__).parent.resolve()\n    if not skip_venv(src_root):\n        venv_path = get_venv_path(src_root)\n        if not venv_path.exists():\n            print(f\"Cannot find Pwndbg virtualenv directory: {venv_path}. Please re-run setup.sh\")\n            sys.exit(1)\n\n        no_auto_update = os.getenv(\"PWNDBG_NO_AUTOUPDATE\")\n        if no_auto_update is None:\n            update_deps(src_root, venv_path)\n        fixup_paths(src_root, venv_path)\n\n    import pwndbg  # noqa: F811\n    import pwndbg.dbg.lldb\n\n    pwndbg.dbg_mod.lldb.LLDB_VERSION = (major, minor)\n\n    pwndbg.dbg = pwndbg.dbg_mod.lldb.LLDB()\n    pwndbg.dbg.setup(debugger, __name__, debug=debug)\n\n    import pwndbg.profiling\n\n    pwndbg.profiling.init(profiler, start_time)\n    if os.environ.get(\"PWNDBG_PROFILE\") == \"1\":\n        pwndbg.profiling.profiler.stop(\"pwndbg-load.pstats\")\n        pwndbg.profiling.profiler.start()\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 4.1181640625,
          "content": "site_url: https://pwndbg.re/pwndbg/\nsite_name: Documentation\nsite_description: >-\n  pwndbg (/paʊnˈdiˌbʌɡ/) is a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers.\n\n# Repository\nrepo_name: pwndbg/pwndbg\nrepo_url: https://github.com/pwndbg/pwndbg/\ntheme:\n  logo: assets/icon.png\n  name: material\n  font:\n    text: Roboto\n    code: Roboto Mono\n  features:\n    # - navigation.footer\n    - content.code.annotate\n    - content.code.annotate\n    - content.code.copy\n    - content.code.select\n    - navigation.indexes\n    - navigation.instant\n    - navigation.sections\n    - navigation.tabs\n    - navigation.top\n    - navigation.tracking\n    - search.highlight\n    - search.share\n    - search.suggest\n    - toc.integrate\n    - toc.follow\n  palette:\n    scheme: slate\n    primary: black\n    accent: purple\n\n  favicon: assets/favicon.ico\n  icon: logo:logo\n\n# Plugins\nplugins:\n  - blog\n  - search:\n      separator: '[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])'\n  - minify:\n      minify_html: true\n  # - git-committers:\n  #     repository: pwndbg/pwndbg\n  #     branch: dev\n  #     exclude:\n  #       - index.md\n  #       - docs/commands/**\n  - gen-files:\n      scripts:\n        - scripts/gen_ref_pages.py\n  - mkdocstrings:\n      default_handler: python\n      handlers:\n        python:\n          paths: []\n          # load_external_modules: true\n          options:\n            allow_inspection: true\n            show_source: false\n            show_bases: true\n            docstring_style: google\n            docstring_section_style: table\n            show_root_full_path: true\n            show_if_no_docstring: true\n            show_docstring_classes: true\n            show_docstring_modules: true\n            show_docstring_description: true\n            show_docstring_examples: true\n            show_docstring_other_parameters: true\n            show_docstring_parameters: true\n            show_docstring_return: true\n            show_docstring_raises: true\n  - rss:\n      match_path: blog/posts/.*\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags\n\n# Additional configuration\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/pwndbg\n    - icon: fontawesome/brands/python\n      link: https://pypi.org/project/pwndbg/\n    - icon: fontawesome/brands/discord\n      link: https://discord.gg/x47DssnGwm\n  # Page status\n  status:\n    new: New\n    deprecated: Deprecated\n  generator: false\n\nextra_css:\n  - stylesheets/extra.css\n\n# Extensions\nmarkdown_extensions:\n  - abbr\n  - admonition\n  - attr_list\n  - def_list\n  - footnotes\n  - md_in_html\n  - fenced_code\n  - toc:\n      permalink: true\n      toc_depth: \"1-2\"\n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.details\n  # - pymdownx.emoji:\n  #     emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  #     emoji_index: !!python/name:material.extensions.emoji.twemoji\n  - pymdownx.highlight:\n      auto_title: true\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n      linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.keys\n  - pymdownx.magiclink:\n      normalize_issue_symbols: true\n      repo_url_shorthand: true\n      user: squidfunk\n      repo: mkdocs-material\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.snippets:\n      auto_append:\n        - includes/mkdocs.md\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed:\n      alternate_style: true\n      combine_header_slug: true\n      slugify: !!python/object/apply:pymdownx.slugs.slugify\n        kwds:\n          case: lower\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.tilde\n\nnav:\n  - Home: index.md\n  # - Getting started: getting_started.md\n  - Setup: setup.md\n  # - Features: features.md\n  - Commands: commands/index.md\n  - Source: source/index.md\n  # - FAQ: faq.md\n  - Blog: blog/index.md\n"
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "poetry.lock",
          "type": "blob",
          "size": 185.482421875,
          "content": "# This file is automatically @generated by Poetry 1.7.1 and should not be changed by hand.\n\n[[package]]\nname = \"asttokens\"\nversion = \"2.4.1\"\ndescription = \"Annotate AST trees with source code positions\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"asttokens-2.4.1-py2.py3-none-any.whl\", hash = \"sha256:051ed49c3dcae8913ea7cd08e46a606dba30b79993209636c4875bc1d637bc24\"},\n    {file = \"asttokens-2.4.1.tar.gz\", hash = \"sha256:b03869718ba9a6eb027e134bfdf69f38a236d681c83c160d510768af11254ba0\"},\n]\n\n[package.dependencies]\nsix = \">=1.12.0\"\n\n[package.extras]\nastroid = [\"astroid (>=1,<2)\", \"astroid (>=2,<4)\"]\ntest = [\"astroid (>=1,<2)\", \"astroid (>=2,<4)\", \"pytest\"]\n\n[[package]]\nname = \"babel\"\nversion = \"2.16.0\"\ndescription = \"Internationalization utilities\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"babel-2.16.0-py3-none-any.whl\", hash = \"sha256:368b5b98b37c06b7daf6696391c3240c938b37767d4584413e8438c5c435fa8b\"},\n    {file = \"babel-2.16.0.tar.gz\", hash = \"sha256:d1f3554ca26605fe173f3de0c65f750f5a42f924499bf134de6423582298e316\"},\n]\n\n[package.extras]\ndev = [\"freezegun (>=1.0,<2.0)\", \"pytest (>=6.0)\", \"pytest-cov\"]\n\n[[package]]\nname = \"bcrypt\"\nversion = \"4.2.0\"\ndescription = \"Modern password hashing for your software and your servers\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"bcrypt-4.2.0-cp37-abi3-macosx_10_12_universal2.whl\", hash = \"sha256:096a15d26ed6ce37a14c1ac1e48119660f21b24cba457f160a4b830f3fe6b5cb\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c02d944ca89d9b1922ceb8a46460dd17df1ba37ab66feac4870f6862a1533c00\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1d84cf6d877918620b687b8fd1bf7781d11e8a0998f576c7aa939776b512b98d\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:1bb429fedbe0249465cdd85a58e8376f31bb315e484f16e68ca4c786dcc04291\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:655ea221910bcac76ea08aaa76df427ef8625f92e55a8ee44fbf7753dbabb328\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:1ee38e858bf5d0287c39b7a1fc59eec64bbf880c7d504d3a06a96c16e14058e7\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:0da52759f7f30e83f1e30a888d9163a81353ef224d82dc58eb5bb52efcabc399\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:3698393a1b1f1fd5714524193849d0c6d524d33523acca37cd28f02899285060\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:762a2c5fb35f89606a9fde5e51392dad0cd1ab7ae64149a8b935fe8d79dd5ed7\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-win32.whl\", hash = \"sha256:5a1e8aa9b28ae28020a3ac4b053117fb51c57a010b9f969603ed885f23841458\"},\n    {file = \"bcrypt-4.2.0-cp37-abi3-win_amd64.whl\", hash = \"sha256:8f6ede91359e5df88d1f5c1ef47428a4420136f3ce97763e31b86dd8280fbdf5\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-macosx_10_12_universal2.whl\", hash = \"sha256:c52aac18ea1f4a4f65963ea4f9530c306b56ccd0c6f8c8da0c06976e34a6e841\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3bbbfb2734f0e4f37c5136130405332640a1e46e6b23e000eeff2ba8d005da68\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3413bd60460f76097ee2e0a493ccebe4a7601918219c02f503984f0a7ee0aebe\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:8d7bb9c42801035e61c109c345a28ed7e84426ae4865511eb82e913df18f58c2\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:3d3a6d28cb2305b43feac298774b997e372e56c7c7afd90a12b3dc49b189151c\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:9c1c4ad86351339c5f320ca372dfba6cb6beb25e8efc659bedd918d921956bae\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:27fe0f57bb5573104b5a6de5e4153c60814c711b29364c10a75a54bb6d7ff48d\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:8ac68872c82f1add6a20bd489870c71b00ebacd2e9134a8aa3f98a0052ab4b0e\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:cb2a8ec2bc07d3553ccebf0746bbf3d19426d1c6d1adbd4fa48925f66af7b9e8\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-win32.whl\", hash = \"sha256:77800b7147c9dc905db1cba26abe31e504d8247ac73580b4aa179f98e6608f34\"},\n    {file = \"bcrypt-4.2.0-cp39-abi3-win_amd64.whl\", hash = \"sha256:61ed14326ee023917ecd093ee6ef422a72f3aec6f07e21ea5f10622b735538a9\"},\n    {file = \"bcrypt-4.2.0-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:39e1d30c7233cfc54f5c3f2c825156fe044efdd3e0b9d309512cc514a263ec2a\"},\n    {file = \"bcrypt-4.2.0-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:f4f4acf526fcd1c34e7ce851147deedd4e26e6402369304220250598b26448db\"},\n    {file = \"bcrypt-4.2.0-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:1ff39b78a52cf03fdf902635e4c81e544714861ba3f0efc56558979dd4f09170\"},\n    {file = \"bcrypt-4.2.0-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:373db9abe198e8e2c70d12b479464e0d5092cc122b20ec504097b5f2297ed184\"},\n    {file = \"bcrypt-4.2.0.tar.gz\", hash = \"sha256:cf69eaf5185fd58f268f805b505ce31f9b9fc2d64b376642164e9244540c1221\"},\n]\n\n[package.extras]\ntests = [\"pytest (>=3.2.1,!=3.3.0)\"]\ntypecheck = [\"mypy\"]\n\n[[package]]\nname = \"cachecontrol\"\nversion = \"0.14.1\"\ndescription = \"httplib2 caching for requests\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"cachecontrol-0.14.1-py3-none-any.whl\", hash = \"sha256:65e3abd62b06382ce3894df60dde9e0deb92aeb734724f68fa4f3b91e97206b9\"},\n    {file = \"cachecontrol-0.14.1.tar.gz\", hash = \"sha256:06ef916a1e4eb7dba9948cdfc9c76e749db2e02104a9a1277e8b642591a0f717\"},\n]\n\n[package.dependencies]\nfilelock = {version = \">=3.8.0\", optional = true, markers = \"extra == \\\"filecache\\\"\"}\nmsgpack = \">=0.5.2,<2.0.0\"\nrequests = \">=2.16.0\"\n\n[package.extras]\ndev = [\"CacheControl[filecache,redis]\", \"build\", \"cherrypy\", \"codespell[tomli]\", \"furo\", \"mypy\", \"pytest\", \"pytest-cov\", \"ruff\", \"sphinx\", \"sphinx-copybutton\", \"tox\", \"types-redis\", \"types-requests\"]\nfilecache = [\"filelock (>=3.8.0)\"]\nredis = [\"redis (>=2.10.5)\"]\n\n[[package]]\nname = \"capstone\"\nversion = \"5.0.3\"\ndescription = \"Capstone disassembly engine\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"capstone-5.0.3-py3-none-macosx_10_9_universal2.whl\", hash = \"sha256:5dc6b5f4d85a2ba2330473529d7b4faccd71470b489fd19a539c20b74f3c9924\"},\n    {file = \"capstone-5.0.3-py3-none-macosx_10_9_x86_64.whl\", hash = \"sha256:5917b00ddb0b3a665bcb7a623ee08bcaf4ddec783c5d2ca69f72278d6de38d2c\"},\n    {file = \"capstone-5.0.3-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:76658b66a5f0275c942cd4daf35dca7520387689f588f127020c9130d76c4ddf\"},\n    {file = \"capstone-5.0.3-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:237fef7e20906bad09286554c7f8a5a744adeec4d658c5e33938bf9241b5f076\"},\n    {file = \"capstone-5.0.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a6b7f3ec2346a60475d9d043b437ace5e6688fc9c4d45387476104bd2c231040\"},\n    {file = \"capstone-5.0.3-py3-none-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1f25e23052d5fa5b6709f7111d7f1250131fb5dac878b8249a4637e6ab953129\"},\n    {file = \"capstone-5.0.3-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:aebb35f0cfb808aac24d2e3c745be43bcedbb863ecb0192d720faa8002983544\"},\n    {file = \"capstone-5.0.3-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:8d45fdf4ae11197234eedbd81742bd4650924f9bb3abee0b238ea63dad8001cc\"},\n    {file = \"capstone-5.0.3-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:63e8544d7500b889a5feb6f7c9a939723663107dd3360ad18f36a3f6985cfd26\"},\n    {file = \"capstone-5.0.3-py3-none-win_amd64.whl\", hash = \"sha256:21d00dce9dc204a22126fe6f45a8894d03a6607182bc86f14fc9bd1d1d3897ed\"},\n    {file = \"capstone-5.0.3.tar.gz\", hash = \"sha256:1f15616c0528f5268f2dc0a81708483e605ce71961b02a01a791230b51fe862d\"},\n]\n\n[[package]]\nname = \"certifi\"\nversion = \"2024.8.30\"\ndescription = \"Python package for providing Mozilla's CA Bundle.\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"certifi-2024.8.30-py3-none-any.whl\", hash = \"sha256:922820b53db7a7257ffbda3f597266d435245903d80737e34f8a45ff3e3230d8\"},\n    {file = \"certifi-2024.8.30.tar.gz\", hash = \"sha256:bec941d2aa8195e248a60b31ff9f0558284cf01a52591ceda73ea9afffd69fd9\"},\n]\n\n[[package]]\nname = \"cffi\"\nversion = \"1.17.1\"\ndescription = \"Foreign Function Interface for Python calling C code.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"cffi-1.17.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:df8b1c11f177bc2313ec4b2d46baec87a5f3e71fc8b45dab2ee7cae86d9aba14\"},\n    {file = \"cffi-1.17.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8f2cdc858323644ab277e9bb925ad72ae0e67f69e804f4898c070998d50b1a67\"},\n    {file = \"cffi-1.17.1-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:edae79245293e15384b51f88b00613ba9f7198016a5948b5dddf4917d4d26382\"},\n    {file = \"cffi-1.17.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:45398b671ac6d70e67da8e4224a065cec6a93541bb7aebe1b198a61b58c7b702\"},\n    {file = \"cffi-1.17.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ad9413ccdeda48c5afdae7e4fa2192157e991ff761e7ab8fdd8926f40b160cc3\"},\n    {file = \"cffi-1.17.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5da5719280082ac6bd9aa7becb3938dc9f9cbd57fac7d2871717b1feb0902ab6\"},\n    {file = \"cffi-1.17.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2bb1a08b8008b281856e5971307cc386a8e9c5b625ac297e853d36da6efe9c17\"},\n    {file = \"cffi-1.17.1-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:045d61c734659cc045141be4bae381a41d89b741f795af1dd018bfb532fd0df8\"},\n    {file = \"cffi-1.17.1-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:6883e737d7d9e4899a8a695e00ec36bd4e5e4f18fabe0aca0efe0a4b44cdb13e\"},\n    {file = \"cffi-1.17.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:6b8b4a92e1c65048ff98cfe1f735ef8f1ceb72e3d5f0c25fdb12087a23da22be\"},\n    {file = \"cffi-1.17.1-cp310-cp310-win32.whl\", hash = \"sha256:c9c3d058ebabb74db66e431095118094d06abf53284d9c81f27300d0e0d8bc7c\"},\n    {file = \"cffi-1.17.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:0f048dcf80db46f0098ccac01132761580d28e28bc0f78ae0d58048063317e15\"},\n    {file = \"cffi-1.17.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:a45e3c6913c5b87b3ff120dcdc03f6131fa0065027d0ed7ee6190736a74cd401\"},\n    {file = \"cffi-1.17.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:30c5e0cb5ae493c04c8b42916e52ca38079f1b235c2f8ae5f4527b963c401caf\"},\n    {file = \"cffi-1.17.1-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f75c7ab1f9e4aca5414ed4d8e5c0e303a34f4421f8a0d47a4d019ceff0ab6af4\"},\n    {file = \"cffi-1.17.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a1ed2dd2972641495a3ec98445e09766f077aee98a1c896dcb4ad0d303628e41\"},\n    {file = \"cffi-1.17.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:46bf43160c1a35f7ec506d254e5c890f3c03648a4dbac12d624e4490a7046cd1\"},\n    {file = \"cffi-1.17.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a24ed04c8ffd54b0729c07cee15a81d964e6fee0e3d4d342a27b020d22959dc6\"},\n    {file = \"cffi-1.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:610faea79c43e44c71e1ec53a554553fa22321b65fae24889706c0a84d4ad86d\"},\n    {file = \"cffi-1.17.1-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:a9b15d491f3ad5d692e11f6b71f7857e7835eb677955c00cc0aefcd0669adaf6\"},\n    {file = \"cffi-1.17.1-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:de2ea4b5833625383e464549fec1bc395c1bdeeb5f25c4a3a82b5a8c756ec22f\"},\n    {file = \"cffi-1.17.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:fc48c783f9c87e60831201f2cce7f3b2e4846bf4d8728eabe54d60700b318a0b\"},\n    {file = \"cffi-1.17.1-cp311-cp311-win32.whl\", hash = \"sha256:85a950a4ac9c359340d5963966e3e0a94a676bd6245a4b55bc43949eee26a655\"},\n    {file = \"cffi-1.17.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:caaf0640ef5f5517f49bc275eca1406b0ffa6aa184892812030f04c2abf589a0\"},\n    {file = \"cffi-1.17.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:805b4371bf7197c329fcb3ead37e710d1bca9da5d583f5073b799d5c5bd1eee4\"},\n    {file = \"cffi-1.17.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:733e99bc2df47476e3848417c5a4540522f234dfd4ef3ab7fafdf555b082ec0c\"},\n    {file = \"cffi-1.17.1-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1257bdabf294dceb59f5e70c64a3e2f462c30c7ad68092d01bbbfb1c16b1ba36\"},\n    {file = \"cffi-1.17.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:da95af8214998d77a98cc14e3a3bd00aa191526343078b530ceb0bd710fb48a5\"},\n    {file = \"cffi-1.17.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d63afe322132c194cf832bfec0dc69a99fb9bb6bbd550f161a49e9e855cc78ff\"},\n    {file = \"cffi-1.17.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f79fc4fc25f1c8698ff97788206bb3c2598949bfe0fef03d299eb1b5356ada99\"},\n    {file = \"cffi-1.17.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b62ce867176a75d03a665bad002af8e6d54644fad99a3c70905c543130e39d93\"},\n    {file = \"cffi-1.17.1-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:386c8bf53c502fff58903061338ce4f4950cbdcb23e2902d86c0f722b786bbe3\"},\n    {file = \"cffi-1.17.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:4ceb10419a9adf4460ea14cfd6bc43d08701f0835e979bf821052f1805850fe8\"},\n    {file = \"cffi-1.17.1-cp312-cp312-win32.whl\", hash = \"sha256:a08d7e755f8ed21095a310a693525137cfe756ce62d066e53f502a83dc550f65\"},\n    {file = \"cffi-1.17.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:51392eae71afec0d0c8fb1a53b204dbb3bcabcb3c9b807eedf3e1e6ccf2de903\"},\n    {file = \"cffi-1.17.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:f3a2b4222ce6b60e2e8b337bb9596923045681d71e5a082783484d845390938e\"},\n    {file = \"cffi-1.17.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:0984a4925a435b1da406122d4d7968dd861c1385afe3b45ba82b750f229811e2\"},\n    {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d01b12eeeb4427d3110de311e1774046ad344f5b1a7403101878976ecd7a10f3\"},\n    {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:706510fe141c86a69c8ddc029c7910003a17353970cff3b904ff0686a5927683\"},\n    {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:de55b766c7aa2e2a3092c51e0483d700341182f08e67c63630d5b6f200bb28e5\"},\n    {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c59d6e989d07460165cc5ad3c61f9fd8f1b4796eacbd81cee78957842b834af4\"},\n    {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dd398dbc6773384a17fe0d3e7eeb8d1a21c2200473ee6806bb5e6a8e62bb73dd\"},\n    {file = \"cffi-1.17.1-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:3edc8d958eb099c634dace3c7e16560ae474aa3803a5df240542b305d14e14ed\"},\n    {file = \"cffi-1.17.1-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:72e72408cad3d5419375fc87d289076ee319835bdfa2caad331e377589aebba9\"},\n    {file = \"cffi-1.17.1-cp313-cp313-win32.whl\", hash = \"sha256:e03eab0a8677fa80d646b5ddece1cbeaf556c313dcfac435ba11f107ba117b5d\"},\n    {file = \"cffi-1.17.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:f6a16c31041f09ead72d69f583767292f750d24913dadacf5756b966aacb3f1a\"},\n    {file = \"cffi-1.17.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:636062ea65bd0195bc012fea9321aca499c0504409f413dc88af450b57ffd03b\"},\n    {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c7eac2ef9b63c79431bc4b25f1cd649d7f061a28808cbc6c47b534bd789ef964\"},\n    {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e221cf152cff04059d011ee126477f0d9588303eb57e88923578ace7baad17f9\"},\n    {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:31000ec67d4221a71bd3f67df918b1f88f676f1c3b535a7eb473255fdc0b83fc\"},\n    {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:6f17be4345073b0a7b8ea599688f692ac3ef23ce28e5df79c04de519dbc4912c\"},\n    {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0e2b1fac190ae3ebfe37b979cc1ce69c81f4e4fe5746bb401dca63a9062cdaf1\"},\n    {file = \"cffi-1.17.1-cp38-cp38-win32.whl\", hash = \"sha256:7596d6620d3fa590f677e9ee430df2958d2d6d6de2feeae5b20e82c00b76fbf8\"},\n    {file = \"cffi-1.17.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:78122be759c3f8a014ce010908ae03364d00a1f81ab5c7f4a7a5120607ea56e1\"},\n    {file = \"cffi-1.17.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:b2ab587605f4ba0bf81dc0cb08a41bd1c0a5906bd59243d56bad7668a6fc6c16\"},\n    {file = \"cffi-1.17.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:28b16024becceed8c6dfbc75629e27788d8a3f9030691a1dbf9821a128b22c36\"},\n    {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1d599671f396c4723d016dbddb72fe8e0397082b0a77a4fab8028923bec050e8\"},\n    {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ca74b8dbe6e8e8263c0ffd60277de77dcee6c837a3d0881d8c1ead7268c9e576\"},\n    {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f7f5baafcc48261359e14bcd6d9bff6d4b28d9103847c9e136694cb0501aef87\"},\n    {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:98e3969bcff97cae1b2def8ba499ea3d6f31ddfdb7635374834cf89a1a08ecf0\"},\n    {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cdf5ce3acdfd1661132f2a9c19cac174758dc2352bfe37d98aa7512c6b7178b3\"},\n    {file = \"cffi-1.17.1-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:9755e4345d1ec879e3849e62222a18c7174d65a6a92d5b346b1863912168b595\"},\n    {file = \"cffi-1.17.1-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:f1e22e8c4419538cb197e4dd60acc919d7696e5ef98ee4da4e01d3f8cfa4cc5a\"},\n    {file = \"cffi-1.17.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:c03e868a0b3bc35839ba98e74211ed2b05d2119be4e8a0f224fba9384f1fe02e\"},\n    {file = \"cffi-1.17.1-cp39-cp39-win32.whl\", hash = \"sha256:e31ae45bc2e29f6b2abd0de1cc3b9d5205aa847cafaecb8af1476a609a2f6eb7\"},\n    {file = \"cffi-1.17.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:d016c76bdd850f3c626af19b0542c9677ba156e4ee4fccfdd7848803533ef662\"},\n    {file = \"cffi-1.17.1.tar.gz\", hash = \"sha256:1c39c6016c32bc48dd54561950ebd6836e1670f2ae46128f67cf49e789c52824\"},\n]\n\n[package.dependencies]\npycparser = \"*\"\n\n[[package]]\nname = \"charset-normalizer\"\nversion = \"3.4.0\"\ndescription = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"\noptional = false\npython-versions = \">=3.7.0\"\nfiles = [\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:4f9fc98dad6c2eaa32fc3af1417d95b5e3d08aff968df0cd320066def971f9a6\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0de7b687289d3c1b3e8660d0741874abe7888100efe14bd0f9fd7141bcbda92b\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:5ed2e36c3e9b4f21dd9422f6893dec0abf2cca553af509b10cd630f878d3eb99\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:40d3ff7fc90b98c637bda91c89d51264a3dcf210cade3a2c6f838c7268d7a4ca\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1110e22af8ca26b90bd6364fe4c763329b0ebf1ee213ba32b68c73de5752323d\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:86f4e8cca779080f66ff4f191a685ced73d2f72d50216f7112185dc02b90b9b7\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7f683ddc7eedd742e2889d2bfb96d69573fde1d92fcb811979cdb7165bb9c7d3\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:27623ba66c183eca01bf9ff833875b459cad267aeeb044477fedac35e19ba907\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:f606a1881d2663630ea5b8ce2efe2111740df4b687bd78b34a8131baa007f79b\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:0b309d1747110feb25d7ed6b01afdec269c647d382c857ef4663bbe6ad95a912\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:136815f06a3ae311fae551c3df1f998a1ebd01ddd424aa5603a4336997629e95\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:14215b71a762336254351b00ec720a8e85cada43b987da5a042e4ce3e82bd68e\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:79983512b108e4a164b9c8d34de3992f76d48cadc9554c9e60b43f308988aabe\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-win32.whl\", hash = \"sha256:c94057af19bc953643a33581844649a7fdab902624d2eb739738a30e2b3e60fc\"},\n    {file = \"charset_normalizer-3.4.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:55f56e2ebd4e3bc50442fbc0888c9d8c94e4e06a933804e2af3e89e2f9c1c749\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:0d99dd8ff461990f12d6e42c7347fd9ab2532fb70e9621ba520f9e8637161d7c\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:c57516e58fd17d03ebe67e181a4e4e2ccab1168f8c2976c6a334d4f819fe5944\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:6dba5d19c4dfab08e58d5b36304b3f92f3bd5d42c1a3fa37b5ba5cdf6dfcbcee\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bf4475b82be41b07cc5e5ff94810e6a01f276e37c2d55571e3fe175e467a1a1c\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ce031db0408e487fd2775d745ce30a7cd2923667cf3b69d48d219f1d8f5ddeb6\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8ff4e7cdfdb1ab5698e675ca622e72d58a6fa2a8aa58195de0c0061288e6e3ea\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3710a9751938947e6327ea9f3ea6332a09bf0ba0c09cae9cb1f250bd1f1549bc\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:82357d85de703176b5587dbe6ade8ff67f9f69a41c0733cf2425378b49954de5\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:47334db71978b23ebcf3c0f9f5ee98b8d65992b65c9c4f2d34c2eaf5bcaf0594\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:8ce7fd6767a1cc5a92a639b391891bf1c268b03ec7e021c7d6d902285259685c\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:f1a2f519ae173b5b6a2c9d5fa3116ce16e48b3462c8b96dfdded11055e3d6365\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:63bc5c4ae26e4bc6be6469943b8253c0fd4e4186c43ad46e713ea61a0ba49129\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:bcb4f8ea87d03bc51ad04add8ceaf9b0f085ac045ab4d74e73bbc2dc033f0236\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-win32.whl\", hash = \"sha256:9ae4ef0b3f6b41bad6366fb0ea4fc1d7ed051528e113a60fa2a65a9abb5b1d99\"},\n    {file = \"charset_normalizer-3.4.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:cee4373f4d3ad28f1ab6290684d8e2ebdb9e7a1b74fdc39e4c211995f77bec27\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:0713f3adb9d03d49d365b70b84775d0a0d18e4ab08d12bc46baa6132ba78aaf6\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:de7376c29d95d6719048c194a9cf1a1b0393fbe8488a22008610b0361d834ecf\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:4a51b48f42d9358460b78725283f04bddaf44a9358197b889657deba38f329db\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b295729485b06c1a0683af02a9e42d2caa9db04a373dc38a6a58cdd1e8abddf1\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ee803480535c44e7f5ad00788526da7d85525cfefaf8acf8ab9a310000be4b03\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3d59d125ffbd6d552765510e3f31ed75ebac2c7470c7274195b9161a32350284\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8cda06946eac330cbe6598f77bb54e690b4ca93f593dee1568ad22b04f347c15\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:07afec21bbbbf8a5cc3651aa96b980afe2526e7f048fdfb7f1014d84acc8b6d8\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6b40e8d38afe634559e398cc32b1472f376a4099c75fe6299ae607e404c033b2\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:b8dcd239c743aa2f9c22ce674a145e0a25cb1566c495928440a181ca1ccf6719\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:84450ba661fb96e9fd67629b93d2941c871ca86fc38d835d19d4225ff946a631\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:44aeb140295a2f0659e113b31cfe92c9061622cadbc9e2a2f7b8ef6b1e29ef4b\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:1db4e7fefefd0f548d73e2e2e041f9df5c59e178b4c72fbac4cc6f535cfb1565\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-win32.whl\", hash = \"sha256:5726cf76c982532c1863fb64d8c6dd0e4c90b6ece9feb06c9f202417a31f7dd7\"},\n    {file = \"charset_normalizer-3.4.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:b197e7094f232959f8f20541ead1d9862ac5ebea1d58e9849c1bf979255dfac9\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:dd4eda173a9fcccb5f2e2bd2a9f423d180194b1bf17cf59e3269899235b2a114\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:e9e3c4c9e1ed40ea53acf11e2a386383c3304212c965773704e4603d589343ed\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:92a7e36b000bf022ef3dbb9c46bfe2d52c047d5e3f3343f43204263c5addc250\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:54b6a92d009cbe2fb11054ba694bc9e284dad30a26757b1e372a1fdddaf21920\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1ffd9493de4c922f2a38c2bf62b831dcec90ac673ed1ca182fe11b4d8e9f2a64\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:35c404d74c2926d0287fbd63ed5d27eb911eb9e4a3bb2c6d294f3cfd4a9e0c23\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4796efc4faf6b53a18e3d46343535caed491776a22af773f366534056c4e1fbc\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e7fdd52961feb4c96507aa649550ec2a0d527c086d284749b2f582f2d40a2e0d\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:92db3c28b5b2a273346bebb24857fda45601aef6ae1c011c0a997106581e8a88\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:ab973df98fc99ab39080bfb0eb3a925181454d7c3ac8a1e695fddfae696d9e90\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:4b67fdab07fdd3c10bb21edab3cbfe8cf5696f453afce75d815d9d7223fbe88b\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_s390x.whl\", hash = \"sha256:aa41e526a5d4a9dfcfbab0716c7e8a1b215abd3f3df5a45cf18a12721d31cb5d\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:ffc519621dce0c767e96b9c53f09c5d215578e10b02c285809f76509a3931482\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-win32.whl\", hash = \"sha256:f19c1585933c82098c2a520f8ec1227f20e339e33aca8fa6f956f6691b784e67\"},\n    {file = \"charset_normalizer-3.4.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:707b82d19e65c9bd28b81dde95249b07bf9f5b90ebe1ef17d9b57473f8a64b7b\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:dbe03226baf438ac4fda9e2d0715022fd579cb641c4cf639fa40d53b2fe6f3e2\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:dd9a8bd8900e65504a305bf8ae6fa9fbc66de94178c420791d0293702fce2df7\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b8831399554b92b72af5932cdbbd4ddc55c55f631bb13ff8fe4e6536a06c5c51\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a14969b8691f7998e74663b77b4c36c0337cb1df552da83d5c9004a93afdb574\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dcaf7c1524c0542ee2fc82cc8ec337f7a9f7edee2532421ab200d2b920fc97cf\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:425c5f215d0eecee9a56cdb703203dda90423247421bf0d67125add85d0c4455\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_aarch64.whl\", hash = \"sha256:d5b054862739d276e09928de37c79ddeec42a6e1bfc55863be96a36ba22926f6\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_i686.whl\", hash = \"sha256:f3e73a4255342d4eb26ef6df01e3962e73aa29baa3124a8e824c5d3364a65748\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_ppc64le.whl\", hash = \"sha256:2f6c34da58ea9c1a9515621f4d9ac379871a8f21168ba1b5e09d74250de5ad62\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_s390x.whl\", hash = \"sha256:f09cb5a7bbe1ecae6e87901a2eb23e0256bb524a79ccc53eb0b7629fbe7677c4\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:0099d79bdfcf5c1f0c2c72f91516702ebf8b0b8ddd8905f97a8aecf49712c621\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-win32.whl\", hash = \"sha256:9c98230f5042f4945f957d006edccc2af1e03ed5e37ce7c373f00a5a4daa6149\"},\n    {file = \"charset_normalizer-3.4.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:62f60aebecfc7f4b82e3f639a7d1433a20ec32824db2199a11ad4f5e146ef5ee\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:af73657b7a68211996527dbfeffbb0864e043d270580c5aef06dc4b659a4b578\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:cab5d0b79d987c67f3b9e9c53f54a61360422a5a0bc075f43cab5621d530c3b6\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:9289fd5dddcf57bab41d044f1756550f9e7cf0c8e373b8cdf0ce8773dc4bd417\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6b493a043635eb376e50eedf7818f2f322eabbaa974e948bd8bdd29eb7ef2a51\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9fa2566ca27d67c86569e8c85297aaf413ffab85a8960500f12ea34ff98e4c41\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a8e538f46104c815be19c975572d74afb53f29650ea2025bbfaef359d2de2f7f\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6fd30dc99682dc2c603c2b315bded2799019cea829f8bf57dc6b61efde6611c8\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2006769bd1640bdf4d5641c69a3d63b71b81445473cac5ded39740a226fa88ab\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:dc15e99b2d8a656f8e666854404f1ba54765871104e50c8e9813af8a7db07f12\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:ab2e5bef076f5a235c3774b4f4028a680432cded7cad37bba0fd90d64b187d19\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:4ec9dd88a5b71abfc74e9df5ebe7921c35cbb3b641181a531ca65cdb5e8e4dea\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:43193c5cda5d612f247172016c4bb71251c784d7a4d9314677186a838ad34858\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:aa693779a8b50cd97570e5a0f343538a8dbd3e496fa5dcb87e29406ad0299654\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-win32.whl\", hash = \"sha256:7706f5850360ac01d80c89bcef1640683cc12ed87f42579dab6c5d3ed6888613\"},\n    {file = \"charset_normalizer-3.4.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:c3e446d253bd88f6377260d07c895816ebf33ffffd56c1c792b13bff9c3e1ade\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:980b4f289d1d90ca5efcf07958d3eb38ed9c0b7676bf2831a54d4f66f9c27dfa\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f28f891ccd15c514a0981f3b9db9aa23d62fe1a99997512b0491d2ed323d229a\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a8aacce6e2e1edcb6ac625fb0f8c3a9570ccc7bfba1f63419b3769ccf6a00ed0\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bd7af3717683bea4c87acd8c0d3d5b44d56120b26fd3f8a692bdd2d5260c620a\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5ff2ed8194587faf56555927b3aa10e6fb69d931e33953943bc4f837dfee2242\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:e91f541a85298cf35433bf66f3fab2a4a2cff05c127eeca4af174f6d497f0d4b\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:309a7de0a0ff3040acaebb35ec45d18db4b28232f21998851cfa709eeff49d62\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:285e96d9d53422efc0d7a17c60e59f37fbf3dfa942073f666db4ac71e8d726d0\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:5d447056e2ca60382d460a604b6302d8db69476fd2015c81e7c35417cfabe4cd\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:20587d20f557fe189b7947d8e7ec5afa110ccf72a3128d61a2a387c3313f46be\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:130272c698667a982a5d0e626851ceff662565379baf0ff2cc58067b81d4f11d\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:ab22fbd9765e6954bc0bcff24c25ff71dcbfdb185fcdaca49e81bac68fe724d3\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:7782afc9b6b42200f7362858f9e73b1f8316afb276d316336c0ec3bd73312742\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-win32.whl\", hash = \"sha256:2de62e8801ddfff069cd5c504ce3bc9672b23266597d4e4f50eda28846c322f2\"},\n    {file = \"charset_normalizer-3.4.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:95c3c157765b031331dd4db3c775e58deaee050a3042fcad72cbc4189d7c8dca\"},\n    {file = \"charset_normalizer-3.4.0-py3-none-any.whl\", hash = \"sha256:fe9f97feb71aa9896b81973a7bbada8c49501dc73e58a10fcef6663af95e5079\"},\n    {file = \"charset_normalizer-3.4.0.tar.gz\", hash = \"sha256:223217c3d4f82c3ac5e29032b3f1c2eb0fb591b72161f86d93f5719079dae93e\"},\n]\n\n[[package]]\nname = \"click\"\nversion = \"8.1.7\"\ndescription = \"Composable command line interface toolkit\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"click-8.1.7-py3-none-any.whl\", hash = \"sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28\"},\n    {file = \"click-8.1.7.tar.gz\", hash = \"sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}\n\n[[package]]\nname = \"colorama\"\nversion = \"0.4.6\"\ndescription = \"Cross-platform colored terminal text.\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\nfiles = [\n    {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n    {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n]\n\n[[package]]\nname = \"colored-traceback\"\nversion = \"0.4.2\"\ndescription = \"Automatically color uncaught exception tracebacks\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"colored-traceback-0.4.2.tar.gz\", hash = \"sha256:ecbc8e41f0712ea81931d7cd436b8beb9f3eff1595d2498f183e0ef69b56fe84\"},\n    {file = \"colored_traceback-0.4.2-py3-none-any.whl\", hash = \"sha256:8ad752a5b3c4e50bccd99d4a2d01e16d80926b519e07a85437ecbf8b4f8ce884\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"os_name == \\\"nt\\\"\"}\npygments = \"*\"\n\n[[package]]\nname = \"coverage\"\nversion = \"7.6.7\"\ndescription = \"Code coverage measurement for Python\"\noptional = false\npython-versions = \">=3.9\"\nfiles = [\n    {file = \"coverage-7.6.7-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:108bb458827765d538abcbf8288599fee07d2743357bdd9b9dad456c287e121e\"},\n    {file = \"coverage-7.6.7-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c973b2fe4dc445cb865ab369df7521df9c27bf40715c837a113edaa2aa9faf45\"},\n    {file = \"coverage-7.6.7-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3c6b24007c4bcd0b19fac25763a7cac5035c735ae017e9a349b927cfc88f31c1\"},\n    {file = \"coverage-7.6.7-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:acbb8af78f8f91b3b51f58f288c0994ba63c646bc1a8a22ad072e4e7e0a49f1c\"},\n    {file = \"coverage-7.6.7-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ad32a981bcdedb8d2ace03b05e4fd8dace8901eec64a532b00b15217d3677dd2\"},\n    {file = \"coverage-7.6.7-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:34d23e28ccb26236718a3a78ba72744212aa383141961dd6825f6595005c8b06\"},\n    {file = \"coverage-7.6.7-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:e25bacb53a8c7325e34d45dddd2f2fbae0dbc230d0e2642e264a64e17322a777\"},\n    {file = \"coverage-7.6.7-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:af05bbba896c4472a29408455fe31b3797b4d8648ed0a2ccac03e074a77e2314\"},\n    {file = \"coverage-7.6.7-cp310-cp310-win32.whl\", hash = \"sha256:796c9b107d11d2d69e1849b2dfe41730134b526a49d3acb98ca02f4985eeff7a\"},\n    {file = \"coverage-7.6.7-cp310-cp310-win_amd64.whl\", hash = \"sha256:987a8e3da7da4eed10a20491cf790589a8e5e07656b6dc22d3814c4d88faf163\"},\n    {file = \"coverage-7.6.7-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:7e61b0e77ff4dddebb35a0e8bb5a68bf0f8b872407d8d9f0c726b65dfabe2469\"},\n    {file = \"coverage-7.6.7-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:1a5407a75ca4abc20d6252efeb238377a71ce7bda849c26c7a9bece8680a5d99\"},\n    {file = \"coverage-7.6.7-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:df002e59f2d29e889c37abd0b9ee0d0e6e38c24f5f55d71ff0e09e3412a340ec\"},\n    {file = \"coverage-7.6.7-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:673184b3156cba06154825f25af33baa2671ddae6343f23175764e65a8c4c30b\"},\n    {file = \"coverage-7.6.7-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e69ad502f1a2243f739f5bd60565d14a278be58be4c137d90799f2c263e7049a\"},\n    {file = \"coverage-7.6.7-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:60dcf7605c50ea72a14490d0756daffef77a5be15ed1b9fea468b1c7bda1bc3b\"},\n    {file = \"coverage-7.6.7-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:9c2eb378bebb2c8f65befcb5147877fc1c9fbc640fc0aad3add759b5df79d55d\"},\n    {file = \"coverage-7.6.7-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:3c0317288f032221d35fa4cbc35d9f4923ff0dfd176c79c9b356e8ef8ef2dff4\"},\n    {file = \"coverage-7.6.7-cp311-cp311-win32.whl\", hash = \"sha256:951aade8297358f3618a6e0660dc74f6b52233c42089d28525749fc8267dccd2\"},\n    {file = \"coverage-7.6.7-cp311-cp311-win_amd64.whl\", hash = \"sha256:5e444b8e88339a2a67ce07d41faabb1d60d1004820cee5a2c2b54e2d8e429a0f\"},\n    {file = \"coverage-7.6.7-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:f07ff574986bc3edb80e2c36391678a271d555f91fd1d332a1e0f4b5ea4b6ea9\"},\n    {file = \"coverage-7.6.7-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:49ed5ee4109258973630c1f9d099c7e72c5c36605029f3a91fe9982c6076c82b\"},\n    {file = \"coverage-7.6.7-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f3e8796434a8106b3ac025fd15417315d7a58ee3e600ad4dbcfddc3f4b14342c\"},\n    {file = \"coverage-7.6.7-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a3b925300484a3294d1c70f6b2b810d6526f2929de954e5b6be2bf8caa1f12c1\"},\n    {file = \"coverage-7.6.7-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3c42ec2c522e3ddd683dec5cdce8e62817afb648caedad9da725001fa530d354\"},\n    {file = \"coverage-7.6.7-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:0266b62cbea568bd5e93a4da364d05de422110cbed5056d69339bd5af5685433\"},\n    {file = \"coverage-7.6.7-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:e5f2a0f161d126ccc7038f1f3029184dbdf8f018230af17ef6fd6a707a5b881f\"},\n    {file = \"coverage-7.6.7-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:c132b5a22821f9b143f87446805e13580b67c670a548b96da945a8f6b4f2efbb\"},\n    {file = \"coverage-7.6.7-cp312-cp312-win32.whl\", hash = \"sha256:7c07de0d2a110f02af30883cd7dddbe704887617d5c27cf373362667445a4c76\"},\n    {file = \"coverage-7.6.7-cp312-cp312-win_amd64.whl\", hash = \"sha256:fd49c01e5057a451c30c9b892948976f5d38f2cbd04dc556a82743ba8e27ed8c\"},\n    {file = \"coverage-7.6.7-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:46f21663e358beae6b368429ffadf14ed0a329996248a847a4322fb2e35d64d3\"},\n    {file = \"coverage-7.6.7-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:40cca284c7c310d622a1677f105e8507441d1bb7c226f41978ba7c86979609ab\"},\n    {file = \"coverage-7.6.7-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:77256ad2345c29fe59ae861aa11cfc74579c88d4e8dbf121cbe46b8e32aec808\"},\n    {file = \"coverage-7.6.7-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:87ea64b9fa52bf395272e54020537990a28078478167ade6c61da7ac04dc14bc\"},\n    {file = \"coverage-7.6.7-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2d608a7808793e3615e54e9267519351c3ae204a6d85764d8337bd95993581a8\"},\n    {file = \"coverage-7.6.7-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:cdd94501d65adc5c24f8a1a0eda110452ba62b3f4aeaba01e021c1ed9cb8f34a\"},\n    {file = \"coverage-7.6.7-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:82c809a62e953867cf57e0548c2b8464207f5f3a6ff0e1e961683e79b89f2c55\"},\n    {file = \"coverage-7.6.7-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:bb684694e99d0b791a43e9fc0fa58efc15ec357ac48d25b619f207c41f2fd384\"},\n    {file = \"coverage-7.6.7-cp313-cp313-win32.whl\", hash = \"sha256:963e4a08cbb0af6623e61492c0ec4c0ec5c5cf74db5f6564f98248d27ee57d30\"},\n    {file = \"coverage-7.6.7-cp313-cp313-win_amd64.whl\", hash = \"sha256:14045b8bfd5909196a90da145a37f9d335a5d988a83db34e80f41e965fb7cb42\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-macosx_10_13_x86_64.whl\", hash = \"sha256:f2c7a045eef561e9544359a0bf5784b44e55cefc7261a20e730baa9220c83413\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:5dd4e4a49d9c72a38d18d641135d2fb0bdf7b726ca60a103836b3d00a1182acd\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5c95e0fa3d1547cb6f021ab72f5c23402da2358beec0a8e6d19a368bd7b0fb37\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f63e21ed474edd23f7501f89b53280014436e383a14b9bd77a648366c81dce7b\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ead9b9605c54d15be228687552916c89c9683c215370c4a44f1f217d2adcc34d\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:0573f5cbf39114270842d01872952d301027d2d6e2d84013f30966313cadb529\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-musllinux_1_2_i686.whl\", hash = \"sha256:e2c8e3384c12dfa19fa9a52f23eb091a8fad93b5b81a41b14c17c78e23dd1d8b\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:70a56a2ec1869e6e9fa69ef6b76b1a8a7ef709972b9cc473f9ce9d26b5997ce3\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-win32.whl\", hash = \"sha256:dbba8210f5067398b2c4d96b4e64d8fb943644d5eb70be0d989067c8ca40c0f8\"},\n    {file = \"coverage-7.6.7-cp313-cp313t-win_amd64.whl\", hash = \"sha256:dfd14bcae0c94004baba5184d1c935ae0d1231b8409eb6c103a5fd75e8ecdc56\"},\n    {file = \"coverage-7.6.7-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:37a15573f988b67f7348916077c6d8ad43adb75e478d0910957394df397d2874\"},\n    {file = \"coverage-7.6.7-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:b6cce5c76985f81da3769c52203ee94722cd5d5889731cd70d31fee939b74bf0\"},\n    {file = \"coverage-7.6.7-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a1ab9763d291a17b527ac6fd11d1a9a9c358280adb320e9c2672a97af346ac2c\"},\n    {file = \"coverage-7.6.7-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6cf96ceaa275f071f1bea3067f8fd43bec184a25a962c754024c973af871e1b7\"},\n    {file = \"coverage-7.6.7-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:aee9cf6b0134d6f932d219ce253ef0e624f4fa588ee64830fcba193269e4daa3\"},\n    {file = \"coverage-7.6.7-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:2bc3e45c16564cc72de09e37413262b9f99167803e5e48c6156bccdfb22c8327\"},\n    {file = \"coverage-7.6.7-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:623e6965dcf4e28a3debaa6fcf4b99ee06d27218f46d43befe4db1c70841551c\"},\n    {file = \"coverage-7.6.7-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:850cfd2d6fc26f8346f422920ac204e1d28814e32e3a58c19c91980fa74d8289\"},\n    {file = \"coverage-7.6.7-cp39-cp39-win32.whl\", hash = \"sha256:c296263093f099da4f51b3dff1eff5d4959b527d4f2f419e16508c5da9e15e8c\"},\n    {file = \"coverage-7.6.7-cp39-cp39-win_amd64.whl\", hash = \"sha256:90746521206c88bdb305a4bf3342b1b7316ab80f804d40c536fc7d329301ee13\"},\n    {file = \"coverage-7.6.7-pp39.pp310-none-any.whl\", hash = \"sha256:0ddcb70b3a3a57581b450571b31cb774f23eb9519c2aaa6176d3a84c9fc57671\"},\n    {file = \"coverage-7.6.7.tar.gz\", hash = \"sha256:d79d4826e41441c9a118ff045e4bccb9fdbdcb1d02413e7ea6eb5c87b5439d24\"},\n]\n\n[package.dependencies]\ntomli = {version = \"*\", optional = true, markers = \"python_full_version <= \\\"3.11.0a6\\\" and extra == \\\"toml\\\"\"}\n\n[package.extras]\ntoml = [\"tomli\"]\n\n[[package]]\nname = \"cryptography\"\nversion = \"43.0.3\"\ndescription = \"cryptography is a package which provides cryptographic recipes and primitives to Python developers.\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"cryptography-43.0.3-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:bf7a1932ac4176486eab36a19ed4c0492da5d97123f1406cf15e41b05e787d2e\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:63efa177ff54aec6e1c0aefaa1a241232dcd37413835a9b674b6e3f0ae2bfd3e\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e1ce50266f4f70bf41a2c6dc4358afadae90e2a1e5342d3c08883df1675374f\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:443c4a81bb10daed9a8f334365fe52542771f25aedaf889fd323a853ce7377d6\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:74f57f24754fe349223792466a709f8e0c093205ff0dca557af51072ff47ab18\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:9762ea51a8fc2a88b70cf2995e5675b38d93bf36bd67d91721c309df184f49bd\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:81ef806b1fef6b06dcebad789f988d3b37ccaee225695cf3e07648eee0fc6b73\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-win32.whl\", hash = \"sha256:cbeb489927bd7af4aa98d4b261af9a5bc025bd87f0e3547e11584be9e9427be2\"},\n    {file = \"cryptography-43.0.3-cp37-abi3-win_amd64.whl\", hash = \"sha256:f46304d6f0c6ab8e52770addfa2fc41e6629495548862279641972b6215451cd\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:8ac43ae87929a5982f5948ceda07001ee5e83227fd69cf55b109144938d96984\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:846da004a5804145a5f441b8530b4bf35afbf7da70f82409f151695b127213d5\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0f996e7268af62598f2fc1204afa98a3b5712313a55c4c9d434aef49cadc91d4\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:f7b178f11ed3664fd0e995a47ed2b5ff0a12d893e41dd0494f406d1cf555cab7\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:e1be4655c7ef6e1bbe6b5d0403526601323420bcf414598955968c9ef3eb7d16\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:df6b6c6d742395dd77a23ea3728ab62f98379eff8fb61be2744d4679ab678f73\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-win32.whl\", hash = \"sha256:d56e96520b1020449bbace2b78b603442e7e378a9b3bd68de65c782db1507995\"},\n    {file = \"cryptography-43.0.3-cp39-abi3-win_amd64.whl\", hash = \"sha256:0c580952eef9bf68c4747774cde7ec1d85a6e61de97281f2dba83c7d2c806362\"},\n    {file = \"cryptography-43.0.3-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:d03b5621a135bffecad2c73e9f4deb1a0f977b9a8ffe6f8e002bf6c9d07b918c\"},\n    {file = \"cryptography-43.0.3-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:a2a431ee15799d6db9fe80c82b055bae5a752bef645bba795e8e52687c69efe3\"},\n    {file = \"cryptography-43.0.3-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:281c945d0e28c92ca5e5930664c1cefd85efe80e5c0d2bc58dd63383fda29f83\"},\n    {file = \"cryptography-43.0.3-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:f18c716be16bc1fea8e95def49edf46b82fccaa88587a45f8dc0ff6ab5d8e0a7\"},\n    {file = \"cryptography-43.0.3-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:4a02ded6cd4f0a5562a8887df8b3bd14e822a90f97ac5e544c162899bc467664\"},\n    {file = \"cryptography-43.0.3-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:53a583b6637ab4c4e3591a15bc9db855b8d9dee9a669b550f311480acab6eb08\"},\n    {file = \"cryptography-43.0.3-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:1ec0bcf7e17c0c5669d881b1cd38c4972fade441b27bda1051665faaa89bdcaa\"},\n    {file = \"cryptography-43.0.3-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:2ce6fae5bdad59577b44e4dfed356944fbf1d925269114c28be377692643b4ff\"},\n    {file = \"cryptography-43.0.3.tar.gz\", hash = \"sha256:315b9001266a492a6ff443b61238f956b214dbec9910a081ba5b6646a055a805\"},\n]\n\n[package.dependencies]\ncffi = {version = \">=1.12\", markers = \"platform_python_implementation != \\\"PyPy\\\"\"}\n\n[package.extras]\ndocs = [\"sphinx (>=5.3.0)\", \"sphinx-rtd-theme (>=1.1.1)\"]\ndocstest = [\"pyenchant (>=1.6.11)\", \"readme-renderer\", \"sphinxcontrib-spelling (>=4.0.1)\"]\nnox = [\"nox\"]\npep8test = [\"check-sdist\", \"click\", \"mypy\", \"ruff\"]\nsdist = [\"build\"]\nssh = [\"bcrypt (>=3.1.5)\"]\ntest = [\"certifi\", \"cryptography-vectors (==43.0.3)\", \"pretend\", \"pytest (>=6.2.0)\", \"pytest-benchmark\", \"pytest-cov\", \"pytest-xdist\"]\ntest-randomorder = [\"pytest-randomly\"]\n\n[[package]]\nname = \"csscompressor\"\nversion = \"0.9.5\"\ndescription = \"A python port of YUI CSS Compressor\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"csscompressor-0.9.5.tar.gz\", hash = \"sha256:afa22badbcf3120a4f392e4d22f9fff485c044a1feda4a950ecc5eba9dd31a05\"},\n]\n\n[[package]]\nname = \"decorator\"\nversion = \"5.1.1\"\ndescription = \"Decorators for Humans\"\noptional = false\npython-versions = \">=3.5\"\nfiles = [\n    {file = \"decorator-5.1.1-py3-none-any.whl\", hash = \"sha256:b8c3f85900b9dc423225913c5aace94729fe1fa9763b38939a95226f02d37186\"},\n    {file = \"decorator-5.1.1.tar.gz\", hash = \"sha256:637996211036b6385ef91435e4fae22989472f9d571faba8927ba8253acbc330\"},\n]\n\n[[package]]\nname = \"exceptiongroup\"\nversion = \"1.2.2\"\ndescription = \"Backport of PEP 654 (exception groups)\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"exceptiongroup-1.2.2-py3-none-any.whl\", hash = \"sha256:3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b\"},\n    {file = \"exceptiongroup-1.2.2.tar.gz\", hash = \"sha256:47c2edf7c6738fafb49fd34290706d1a1a2f4d1c6df275526b62cbb4aa5393cc\"},\n]\n\n[package.extras]\ntest = [\"pytest (>=6)\"]\n\n[[package]]\nname = \"executing\"\nversion = \"2.1.0\"\ndescription = \"Get the currently executing AST node of a frame, and other information\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"executing-2.1.0-py2.py3-none-any.whl\", hash = \"sha256:8d63781349375b5ebccc3142f4b30350c0cd9c79f921cde38be2be4637e98eaf\"},\n    {file = \"executing-2.1.0.tar.gz\", hash = \"sha256:8ea27ddd260da8150fa5a708269c4a10e76161e2496ec3e587da9e3c0fe4b9ab\"},\n]\n\n[package.extras]\ntests = [\"asttokens (>=2.1.0)\", \"coverage\", \"coverage-enable-subprocess\", \"ipython\", \"littleutils\", \"pytest\", \"rich\"]\n\n[[package]]\nname = \"filelock\"\nversion = \"3.16.1\"\ndescription = \"A platform independent file lock.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"filelock-3.16.1-py3-none-any.whl\", hash = \"sha256:2082e5703d51fbf98ea75855d9d5527e33d8ff23099bec374a134febee6946b0\"},\n    {file = \"filelock-3.16.1.tar.gz\", hash = \"sha256:c249fbfcd5db47e5e2d6d62198e565475ee65e4831e2561c8e313fa7eb961435\"},\n]\n\n[package.extras]\ndocs = [\"furo (>=2024.8.6)\", \"sphinx (>=8.0.2)\", \"sphinx-autodoc-typehints (>=2.4.1)\"]\ntesting = [\"covdefaults (>=2.3)\", \"coverage (>=7.6.1)\", \"diff-cover (>=9.2)\", \"pytest (>=8.3.3)\", \"pytest-asyncio (>=0.24)\", \"pytest-cov (>=5)\", \"pytest-mock (>=3.14)\", \"pytest-timeout (>=2.3.1)\", \"virtualenv (>=20.26.4)\"]\ntyping = [\"typing-extensions (>=4.12.2)\"]\n\n[[package]]\nname = \"ghp-import\"\nversion = \"2.1.0\"\ndescription = \"Copy your docs directly to the gh-pages branch.\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"ghp-import-2.1.0.tar.gz\", hash = \"sha256:9c535c4c61193c2df8871222567d7fd7e5014d835f97dc7b7439069e2413d343\"},\n    {file = \"ghp_import-2.1.0-py3-none-any.whl\", hash = \"sha256:8337dd7b50877f163d4c0289bc1f1c7f127550241988d568c1db512c4324a619\"},\n]\n\n[package.dependencies]\npython-dateutil = \">=2.8.1\"\n\n[package.extras]\ndev = [\"flake8\", \"markdown\", \"twine\", \"wheel\"]\n\n[[package]]\nname = \"gitdb\"\nversion = \"4.0.11\"\ndescription = \"Git Object Database\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"gitdb-4.0.11-py3-none-any.whl\", hash = \"sha256:81a3407ddd2ee8df444cbacea00e2d038e40150acfa3001696fe0dcf1d3adfa4\"},\n    {file = \"gitdb-4.0.11.tar.gz\", hash = \"sha256:bf5421126136d6d0af55bc1e7c1af1c397a34f5b7bd79e776cd3e89785c2b04b\"},\n]\n\n[package.dependencies]\nsmmap = \">=3.0.1,<6\"\n\n[[package]]\nname = \"gitpython\"\nversion = \"3.1.43\"\ndescription = \"GitPython is a Python library used to interact with Git repositories\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"GitPython-3.1.43-py3-none-any.whl\", hash = \"sha256:eec7ec56b92aad751f9912a73404bc02ba212a23adb2c7098ee668417051a1ff\"},\n    {file = \"GitPython-3.1.43.tar.gz\", hash = \"sha256:35f314a9f878467f5453cc1fee295c3e18e52f1b99f10f6cf5b1682e968a9e7c\"},\n]\n\n[package.dependencies]\ngitdb = \">=4.0.1,<5\"\n\n[package.extras]\ndoc = [\"sphinx (==4.3.2)\", \"sphinx-autodoc-typehints\", \"sphinx-rtd-theme\", \"sphinxcontrib-applehelp (>=1.0.2,<=1.0.4)\", \"sphinxcontrib-devhelp (==1.0.2)\", \"sphinxcontrib-htmlhelp (>=2.0.0,<=2.0.1)\", \"sphinxcontrib-qthelp (==1.0.3)\", \"sphinxcontrib-serializinghtml (==1.1.5)\"]\ntest = [\"coverage[toml]\", \"ddt (>=1.1.1,!=1.4.3)\", \"mock\", \"mypy\", \"pre-commit\", \"pytest (>=7.3.1)\", \"pytest-cov\", \"pytest-instafail\", \"pytest-mock\", \"pytest-sugar\", \"typing-extensions\"]\n\n[[package]]\nname = \"gnureadline\"\nversion = \"8.2.13\"\ndescription = \"The standard Python readline extension statically linked against the GNU readline library.\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"gnureadline-8.2.13-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0ca03501ce0939d7ecf9d075860d6f6ceb2f49f30331b4e96e4678ce03687bab\"},\n    {file = \"gnureadline-8.2.13-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c28e33bfc56d4204693f213abeab927f65c505ce91f668a039720bc7c46b0353\"},\n    {file = \"gnureadline-8.2.13-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6472e3a780087eecd67c03e5455aecb209de51bcae74583222976f6b816f6192\"},\n    {file = \"gnureadline-8.2.13-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:94b143ea5d22b0c1ca4a591265afe135272c69b7757e968e34fbb47a7858d1ce\"},\n    {file = \"gnureadline-8.2.13-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:561a60b12f74ea7234036cc4fe558f3b46023be0dac5ed73541ece58cba2f88a\"},\n    {file = \"gnureadline-8.2.13-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:daa405028b9fe92bfbb93624e13e0674a242a1c5434b70ef61a04294502fdb65\"},\n    {file = \"gnureadline-8.2.13-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:576dac060887adc6067ee9d23fb2f0031fb2b3e560e07a6c9e666e05f0473af7\"},\n    {file = \"gnureadline-8.2.13-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:10fcaf561bc4ed6ab7075ab3ead188a18faaf4e6e92d916f81a09c0a670ce906\"},\n    {file = \"gnureadline-8.2.13-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:9c152a82613fa012ab4331bb9a0ffddb415e37561d376b910bf9e7d535607faf\"},\n    {file = \"gnureadline-8.2.13-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:85e362d2d0e85e45f0affae7bbfaf998b00167c55a78d31ee0f214de9ff429d2\"},\n    {file = \"gnureadline-8.2.13-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b69e6608cc94e110018b721a11718d480a6330e0b62cbab65a22880e84011205\"},\n    {file = \"gnureadline-8.2.13-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0cc77fc9c8a8fcf10e0a554e49ee763219683386b8f906b7e6ef07c9e40e8420\"},\n    {file = \"gnureadline-8.2.13-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:2d3e33d2e0dd694d623a2ca1fae6990b52f1d25955504b7293a9350fb9912940\"},\n    {file = \"gnureadline-8.2.13-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:6c550d08c4d2882a83293a724b14a262ee5078fd4fa7acdc78aa59cab26ae343\"},\n    {file = \"gnureadline-8.2.13-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a7d6e3f5d9fd0cf8a84fb382d4e3ad2914331be4d929f17d50da01f1571c4b03\"},\n    {file = \"gnureadline-8.2.13-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f59275168cae1b02ca1ec7586a9804bb04ce427df92f8582a80d16e96c846b78\"},\n    {file = \"gnureadline-8.2.13-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:59c5505026646da6d5ced6a5316d6d191d011e8be422cba4abce71730ef37dc6\"},\n    {file = \"gnureadline-8.2.13-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3f1050ecf789f34d0ab0aacdb605f177725009a864e0038e70380614af92dc0d\"},\n    {file = \"gnureadline-8.2.13-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:23b43c8e9e2e6566cb3094749826181a86dba1d94b1e023b5f9923dc26e37876\"},\n    {file = \"gnureadline-8.2.13-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:4f5fc90af56a1ae6f88c9c7122fc76141c395b6c342a63800abed8c813f48b85\"},\n    {file = \"gnureadline-8.2.13-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d708e8f655d3b556a138f13e9fcb2d8a10a6901e3125c04cad5ef7c883191fe8\"},\n    {file = \"gnureadline-8.2.13-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:265bcf6ef7082e130160fb34b9664284affb216a22c5bffcd518b35d02bcc4e9\"},\n    {file = \"gnureadline-8.2.13-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:07231f8191adb7f204010a86a91df9df9a80944981a16576a471f59304ad6a16\"},\n    {file = \"gnureadline-8.2.13-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:30cc1b6cb11d94554815cb91eb1dfa6a11887185aae50f253adaa393e91c6a86\"},\n    {file = \"gnureadline-8.2.13-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:50c40bfffffa82d4fcb0fde4940d4ff128ba2f876c1da09bae9d6d9ff770095e\"},\n    {file = \"gnureadline-8.2.13-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:dcfa601d95c00aa670ec5e4bf791caf6ba0bcf266de940fb54d44c278bd302fe\"},\n    {file = \"gnureadline-8.2.13-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:c7b8d3f2a2c9b7e6feaf1f20bdb6ebb8210e207b8c5360ffe407a47efeeb3fb8\"},\n    {file = \"gnureadline-8.2.13-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:811d85a70ac97cddeb1755282915e8a93c279dcf89513426f28617b8feff5aec\"},\n    {file = \"gnureadline-8.2.13-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4f57a3aa97c3379b2513c8bfbac0de2dfb41f695623c0b2ad337babb646b51a7\"},\n    {file = \"gnureadline-8.2.13.tar.gz\", hash = \"sha256:c9b9e1e7ba99a80bb50c12027d6ce692574f77a65bf57bc97041cf81c0f49bd1\"},\n]\n\n[[package]]\nname = \"griffe\"\nversion = \"1.5.1\"\ndescription = \"Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API.\"\noptional = false\npython-versions = \">=3.9\"\nfiles = [\n    {file = \"griffe-1.5.1-py3-none-any.whl\", hash = \"sha256:ad6a7980f8c424c9102160aafa3bcdf799df0e75f7829d75af9ee5aef656f860\"},\n    {file = \"griffe-1.5.1.tar.gz\", hash = \"sha256:72964f93e08c553257706d6cd2c42d1c172213feb48b2be386f243380b405d4b\"},\n]\n\n[package.dependencies]\ncolorama = \">=0.4\"\n\n[[package]]\nname = \"htmlmin2\"\nversion = \"0.1.13\"\ndescription = \"An HTML Minifier\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"htmlmin2-0.1.13-py3-none-any.whl\", hash = \"sha256:75609f2a42e64f7ce57dbff28a39890363bde9e7e5885db633317efbdf8c79a2\"},\n]\n\n[[package]]\nname = \"idna\"\nversion = \"3.10\"\ndescription = \"Internationalized Domain Names in Applications (IDNA)\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"idna-3.10-py3-none-any.whl\", hash = \"sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\"},\n    {file = \"idna-3.10.tar.gz\", hash = \"sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"},\n]\n\n[package.extras]\nall = [\"flake8 (>=7.1.1)\", \"mypy (>=1.11.2)\", \"pytest (>=8.3.2)\", \"ruff (>=0.6.2)\"]\n\n[[package]]\nname = \"iniconfig\"\nversion = \"2.0.0\"\ndescription = \"brain-dead simple config-ini parsing\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"iniconfig-2.0.0-py3-none-any.whl\", hash = \"sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374\"},\n    {file = \"iniconfig-2.0.0.tar.gz\", hash = \"sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3\"},\n]\n\n[[package]]\nname = \"intervaltree\"\nversion = \"3.1.0\"\ndescription = \"Editable interval tree data structure for Python 2 and 3\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"intervaltree-3.1.0.tar.gz\", hash = \"sha256:902b1b88936918f9b2a19e0e5eb7ccb430ae45cde4f39ea4b36932920d33952d\"},\n]\n\n[package.dependencies]\nsortedcontainers = \">=2.0,<3.0\"\n\n[[package]]\nname = \"ipython\"\nversion = \"8.29.0\"\ndescription = \"IPython: Productive Interactive Computing\"\noptional = false\npython-versions = \">=3.10\"\nfiles = [\n    {file = \"ipython-8.29.0-py3-none-any.whl\", hash = \"sha256:0188a1bd83267192123ccea7f4a8ed0a78910535dbaa3f37671dca76ebd429c8\"},\n    {file = \"ipython-8.29.0.tar.gz\", hash = \"sha256:40b60e15b22591450eef73e40a027cf77bd652e757523eebc5bd7c7c498290eb\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}\ndecorator = \"*\"\nexceptiongroup = {version = \"*\", markers = \"python_version < \\\"3.11\\\"\"}\njedi = \">=0.16\"\nmatplotlib-inline = \"*\"\npexpect = {version = \">4.3\", markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"emscripten\\\"\"}\nprompt-toolkit = \">=3.0.41,<3.1.0\"\npygments = \">=2.4.0\"\nstack-data = \"*\"\ntraitlets = \">=5.13.0\"\ntyping-extensions = {version = \">=4.6\", markers = \"python_version < \\\"3.12\\\"\"}\n\n[package.extras]\nall = [\"ipython[black,doc,kernel,matplotlib,nbconvert,nbformat,notebook,parallel,qtconsole]\", \"ipython[test,test-extra]\"]\nblack = [\"black\"]\ndoc = [\"docrepr\", \"exceptiongroup\", \"intersphinx-registry\", \"ipykernel\", \"ipython[test]\", \"matplotlib\", \"setuptools (>=18.5)\", \"sphinx (>=1.3)\", \"sphinx-rtd-theme\", \"sphinxcontrib-jquery\", \"tomli\", \"typing-extensions\"]\nkernel = [\"ipykernel\"]\nmatplotlib = [\"matplotlib\"]\nnbconvert = [\"nbconvert\"]\nnbformat = [\"nbformat\"]\nnotebook = [\"ipywidgets\", \"notebook\"]\nparallel = [\"ipyparallel\"]\nqtconsole = [\"qtconsole\"]\ntest = [\"packaging\", \"pickleshare\", \"pytest\", \"pytest-asyncio (<0.22)\", \"testpath\"]\ntest-extra = [\"curio\", \"ipython[test]\", \"matplotlib (!=3.2.0)\", \"nbformat\", \"numpy (>=1.23)\", \"pandas\", \"trio\"]\n\n[[package]]\nname = \"isort\"\nversion = \"5.13.2\"\ndescription = \"A Python utility / library to sort Python imports.\"\noptional = false\npython-versions = \">=3.8.0\"\nfiles = [\n    {file = \"isort-5.13.2-py3-none-any.whl\", hash = \"sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6\"},\n    {file = \"isort-5.13.2.tar.gz\", hash = \"sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109\"},\n]\n\n[package.extras]\ncolors = [\"colorama (>=0.4.6)\"]\n\n[[package]]\nname = \"jedi\"\nversion = \"0.19.2\"\ndescription = \"An autocompletion tool for Python that can be used for text editors.\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"jedi-0.19.2-py2.py3-none-any.whl\", hash = \"sha256:a8ef22bde8490f57fe5c7681a3c83cb58874daf72b4784de3cce5b6ef6edb5b9\"},\n    {file = \"jedi-0.19.2.tar.gz\", hash = \"sha256:4770dc3de41bde3966b02eb84fbcf557fb33cce26ad23da12c742fb50ecb11f0\"},\n]\n\n[package.dependencies]\nparso = \">=0.8.4,<0.9.0\"\n\n[package.extras]\ndocs = [\"Jinja2 (==2.11.3)\", \"MarkupSafe (==1.1.1)\", \"Pygments (==2.8.1)\", \"alabaster (==0.7.12)\", \"babel (==2.9.1)\", \"chardet (==4.0.0)\", \"commonmark (==0.8.1)\", \"docutils (==0.17.1)\", \"future (==0.18.2)\", \"idna (==2.10)\", \"imagesize (==1.2.0)\", \"mock (==1.0.1)\", \"packaging (==20.9)\", \"pyparsing (==2.4.7)\", \"pytz (==2021.1)\", \"readthedocs-sphinx-ext (==2.1.4)\", \"recommonmark (==0.5.0)\", \"requests (==2.25.1)\", \"six (==1.15.0)\", \"snowballstemmer (==2.1.0)\", \"sphinx (==1.8.5)\", \"sphinx-rtd-theme (==0.4.3)\", \"sphinxcontrib-serializinghtml (==1.1.4)\", \"sphinxcontrib-websupport (==1.2.4)\", \"urllib3 (==1.26.4)\"]\nqa = [\"flake8 (==5.0.4)\", \"mypy (==0.971)\", \"types-setuptools (==67.2.0.1)\"]\ntesting = [\"Django\", \"attrs\", \"colorama\", \"docopt\", \"pytest (<9.0.0)\"]\n\n[[package]]\nname = \"jinja2\"\nversion = \"3.1.4\"\ndescription = \"A very fast and expressive template engine.\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"jinja2-3.1.4-py3-none-any.whl\", hash = \"sha256:bc5dd2abb727a5319567b7a813e6a2e7318c39f4f487cfe6c89c6f9c7d25197d\"},\n    {file = \"jinja2-3.1.4.tar.gz\", hash = \"sha256:4a3aee7acbbe7303aede8e9648d13b8bf88a429282aa6122a993f0ac800cb369\"},\n]\n\n[package.dependencies]\nMarkupSafe = \">=2.0\"\n\n[package.extras]\ni18n = [\"Babel (>=2.7)\"]\n\n[[package]]\nname = \"jsmin\"\nversion = \"3.0.1\"\ndescription = \"JavaScript minifier.\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"jsmin-3.0.1.tar.gz\", hash = \"sha256:c0959a121ef94542e807a674142606f7e90214a2b3d1eb17300244bbb5cc2bfc\"},\n]\n\n[[package]]\nname = \"mako\"\nversion = \"1.3.6\"\ndescription = \"A super-fast templating language that borrows the best ideas from the existing templating languages.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"Mako-1.3.6-py3-none-any.whl\", hash = \"sha256:a91198468092a2f1a0de86ca92690fb0cfc43ca90ee17e15d93662b4c04b241a\"},\n    {file = \"mako-1.3.6.tar.gz\", hash = \"sha256:9ec3a1583713479fae654f83ed9fa8c9a4c16b7bb0daba0e6bbebff50c0d983d\"},\n]\n\n[package.dependencies]\nMarkupSafe = \">=0.9.2\"\n\n[package.extras]\nbabel = [\"Babel\"]\nlingua = [\"lingua\"]\ntesting = [\"pytest\"]\n\n[[package]]\nname = \"markdown\"\nversion = \"3.7\"\ndescription = \"Python implementation of John Gruber's Markdown.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"Markdown-3.7-py3-none-any.whl\", hash = \"sha256:7eb6df5690b81a1d7942992c97fad2938e956e79df20cbc6186e9c3a77b1c803\"},\n    {file = \"markdown-3.7.tar.gz\", hash = \"sha256:2ae2471477cfd02dbbf038d5d9bc226d40def84b4fe2986e49b59b6b472bbed2\"},\n]\n\n[package.extras]\ndocs = [\"mdx-gh-links (>=0.2)\", \"mkdocs (>=1.5)\", \"mkdocs-gen-files\", \"mkdocs-literate-nav\", \"mkdocs-nature (>=0.6)\", \"mkdocs-section-index\", \"mkdocstrings[python]\"]\ntesting = [\"coverage\", \"pyyaml\"]\n\n[[package]]\nname = \"markdown-it-py\"\nversion = \"3.0.0\"\ndescription = \"Python port of markdown-it. Markdown parsing, done right!\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n    {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n]\n\n[package.dependencies]\nmdurl = \">=0.1,<1.0\"\n\n[package.extras]\nbenchmarking = [\"psutil\", \"pytest\", \"pytest-benchmark\"]\ncode-style = [\"pre-commit (>=3.0,<4.0)\"]\ncompare = [\"commonmark (>=0.9,<1.0)\", \"markdown (>=3.4,<4.0)\", \"mistletoe (>=1.0,<2.0)\", \"mistune (>=2.0,<3.0)\", \"panflute (>=2.3,<3.0)\"]\nlinkify = [\"linkify-it-py (>=1,<3)\"]\nplugins = [\"mdit-py-plugins\"]\nprofiling = [\"gprof2dot\"]\nrtd = [\"jupyter_sphinx\", \"mdit-py-plugins\", \"myst-parser\", \"pyyaml\", \"sphinx\", \"sphinx-copybutton\", \"sphinx-design\", \"sphinx_book_theme\"]\ntesting = [\"coverage\", \"pytest\", \"pytest-cov\", \"pytest-regressions\"]\n\n[[package]]\nname = \"markupsafe\"\nversion = \"3.0.2\"\ndescription = \"Safely add untrusted strings to HTML/XML markup.\"\noptional = false\npython-versions = \">=3.9\"\nfiles = [\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9e2d922824181480953426608b81967de705c3cef4d1af983af849d7bd619158\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:38a9ef736c01fccdd6600705b09dc574584b89bea478200c5fbf112a6b0d5579\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bbcb445fa71794da8f178f0f6d66789a28d7319071af7a496d4d507ed566270d\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:57cb5a3cf367aeb1d316576250f65edec5bb3be939e9247ae594b4bcbc317dfb\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:3809ede931876f5b2ec92eef964286840ed3540dadf803dd570c3b7e13141a3b\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:e07c3764494e3776c602c1e78e298937c3315ccc9043ead7e685b7f2b8d47b3c\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:b424c77b206d63d500bcb69fa55ed8d0e6a3774056bdc4839fc9298a7edca171\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-win32.whl\", hash = \"sha256:fcabf5ff6eea076f859677f5f0b6b5c1a51e70a376b0579e0eadef8db48c6b50\"},\n    {file = \"MarkupSafe-3.0.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:6af100e168aa82a50e186c82875a5893c5597a0c1ccdb0d8b40240b1f28b969a\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:9025b4018f3a1314059769c7bf15441064b2207cb3f065e6ea1e7359cb46db9d\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:93335ca3812df2f366e80509ae119189886b0f3c2b81325d39efdb84a1e2ae93\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2cb8438c3cbb25e220c2ab33bb226559e7afb3baec11c4f218ffa7308603c832\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a123e330ef0853c6e822384873bef7507557d8e4a082961e1defa947aa59ba84\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1e084f686b92e5b83186b07e8a17fc09e38fff551f3602b249881fec658d3eca\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:d8213e09c917a951de9d09ecee036d5c7d36cb6cb7dbaece4c71a60d79fb9798\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:5b02fb34468b6aaa40dfc198d813a641e3a63b98c2b05a16b9f80b7ec314185e\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:0bff5e0ae4ef2e1ae4fdf2dfd5b76c75e5c2fa4132d05fc1b0dabcd20c7e28c4\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-win32.whl\", hash = \"sha256:6c89876f41da747c8d3677a2b540fb32ef5715f97b66eeb0c6b66f5e3ef6f59d\"},\n    {file = \"MarkupSafe-3.0.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:70a87b411535ccad5ef2f1df5136506a10775d267e197e4cf531ced10537bd6b\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:9778bd8ab0a994ebf6f84c2b949e65736d5575320a17ae8984a77fab08db94cf\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:846ade7b71e3536c4e56b386c2a47adf5741d2d8b94ec9dc3e92e5e1ee1e2225\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:88416bd1e65dcea10bc7569faacb2c20ce071dd1f87539ca2ab364bf6231393c\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:52305740fe773d09cffb16f8ed0427942901f00adedac82ec8b67752f58a1b22\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:ad10d3ded218f1039f11a75f8091880239651b52e9bb592ca27de44eed242a48\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-win32.whl\", hash = \"sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30\"},\n    {file = \"MarkupSafe-3.0.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:8e06879fc22a25ca47312fbe7c8264eb0b662f6db27cb2d3bbbc74b1df4b9b87\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:ba9527cdd4c926ed0760bc301f6728ef34d841f405abf9d4f959c478421e4efd\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:f8b3d067f2e40fe93e1ccdd6b2e1d16c43140e76f02fb1319a05cf2b79d99430\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:569511d3b58c8791ab4c2e1285575265991e6d8f8700c7be0e88f86cb0672094\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:15ab75ef81add55874e7ab7055e9c397312385bd9ced94920f2802310c930396\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f3818cb119498c0678015754eba762e0d61e5b52d34c8b13d770f0719f7b1d79\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:cdb82a876c47801bb54a690c5ae105a46b392ac6099881cdfb9f6e95e4014c6a\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:cabc348d87e913db6ab4aa100f01b08f481097838bdddf7c7a84b7575b7309ca\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:444dcda765c8a838eaae23112db52f1efaf750daddb2d9ca300bcae1039adc5c\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-win32.whl\", hash = \"sha256:bcf3e58998965654fdaff38e58584d8937aa3096ab5354d493c77d1fdd66d7a1\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313-win_amd64.whl\", hash = \"sha256:e6a2a455bd412959b57a172ce6328d2dd1f01cb2135efda2e4576e8a23fa3b0f\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-macosx_10_13_universal2.whl\", hash = \"sha256:b5a6b3ada725cea8a5e634536b1b01c30bcdcd7f9c6fff4151548d5bf6b3a36c\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:a904af0a6162c73e3edcb969eeeb53a63ceeb5d8cf642fade7d39e7963a22ddb\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4aa4e5faecf353ed117801a068ebab7b7e09ffb6e1d5e412dc852e0da018126c\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c0ef13eaeee5b615fb07c9a7dadb38eac06a0608b41570d8ade51c56539e509d\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d16a81a06776313e817c951135cf7340a3e91e8c1ff2fac444cfd75fffa04afe\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:6381026f158fdb7c72a168278597a5e3a5222e83ea18f543112b2662a9b699c5\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_i686.whl\", hash = \"sha256:3d79d162e7be8f996986c064d1c7c817f6df3a77fe3d6859f6f9e7be4b8c213a\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:131a3c7689c85f5ad20f9f6fb1b866f402c445b220c19fe4308c0b147ccd2ad9\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-win32.whl\", hash = \"sha256:ba8062ed2cf21c07a9e295d5b8a2a5ce678b913b45fdf68c32d95d6c1291e0b6\"},\n    {file = \"MarkupSafe-3.0.2-cp313-cp313t-win_amd64.whl\", hash = \"sha256:e444a31f8db13eb18ada366ab3cf45fd4b31e4db1236a4448f68778c1d1a5a2f\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:eaa0a10b7f72326f1372a713e73c3f739b524b3af41feb43e4921cb529f5929a\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:48032821bbdf20f5799ff537c7ac3d1fba0ba032cfc06194faffa8cda8b560ff\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1a9d3f5f0901fdec14d8d2f66ef7d035f2157240a433441719ac9a3fba440b13\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:88b49a3b9ff31e19998750c38e030fc7bb937398b1f78cfa599aaef92d693144\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cfad01eed2c2e0c01fd0ecd2ef42c492f7f93902e39a42fc9ee1692961443a29\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:1225beacc926f536dc82e45f8a4d68502949dc67eea90eab715dea3a21c1b5f0\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:3169b1eefae027567d1ce6ee7cae382c57fe26e82775f460f0b2778beaad66c0\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:eb7972a85c54febfb25b5c4b4f3af4dcc731994c7da0d8a0b4a6eb0640e1d178\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-win32.whl\", hash = \"sha256:8c4e8c3ce11e1f92f6536ff07154f9d49677ebaaafc32db9db4620bc11ed480f\"},\n    {file = \"MarkupSafe-3.0.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:6e296a513ca3d94054c2c881cc913116e90fd030ad1c656b3869762b754f5f8a\"},\n    {file = \"markupsafe-3.0.2.tar.gz\", hash = \"sha256:ee55d3edf80167e48ea11a923c7386f4669df67d7994554387f84e7d8b0a2bf0\"},\n]\n\n[[package]]\nname = \"matplotlib-inline\"\nversion = \"0.1.7\"\ndescription = \"Inline Matplotlib backend for Jupyter\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"matplotlib_inline-0.1.7-py3-none-any.whl\", hash = \"sha256:df192d39a4ff8f21b1895d72e6a13f5fcc5099f00fa84384e0ea28c2cc0653ca\"},\n    {file = \"matplotlib_inline-0.1.7.tar.gz\", hash = \"sha256:8423b23ec666be3d16e16b60bdd8ac4e86e840ebd1dd11a30b9f117f2fa0ab90\"},\n]\n\n[package.dependencies]\ntraitlets = \"*\"\n\n[[package]]\nname = \"mdurl\"\nversion = \"0.1.2\"\ndescription = \"Markdown URL utilities\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n    {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n]\n\n[[package]]\nname = \"mdutils\"\nversion = \"1.6.0\"\ndescription = \"Useful package for creating Markdown files while executing python code.\"\noptional = false\npython-versions = \"^3.6\"\nfiles = [\n    {file = \"mdutils-1.6.0.tar.gz\", hash = \"sha256:647f3cf00df39fee6c57fa6738dc1160fce1788276b5530c87d43a70cdefdaf1\"},\n]\n\n[[package]]\nname = \"mergedeep\"\nversion = \"1.3.4\"\ndescription = \"A deep merge function for 🐍.\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"mergedeep-1.3.4-py3-none-any.whl\", hash = \"sha256:70775750742b25c0d8f36c55aed03d24c3384d17c951b3175d898bd778ef0307\"},\n    {file = \"mergedeep-1.3.4.tar.gz\", hash = \"sha256:0096d52e9dad9939c3d975a774666af186eda617e6ca84df4c94dec30004f2a8\"},\n]\n\n[[package]]\nname = \"mkdocs\"\nversion = \"1.6.1\"\ndescription = \"Project documentation with Markdown.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mkdocs-1.6.1-py3-none-any.whl\", hash = \"sha256:db91759624d1647f3f34aa0c3f327dd2601beae39a366d6e064c03468d35c20e\"},\n    {file = \"mkdocs-1.6.1.tar.gz\", hash = \"sha256:7b432f01d928c084353ab39c57282f29f92136665bdd6abf7c1ec8d822ef86f2\"},\n]\n\n[package.dependencies]\nclick = \">=7.0\"\ncolorama = {version = \">=0.4\", markers = \"platform_system == \\\"Windows\\\"\"}\nghp-import = \">=1.0\"\njinja2 = \">=2.11.1\"\nmarkdown = \">=3.3.6\"\nmarkupsafe = \">=2.0.1\"\nmergedeep = \">=1.3.4\"\nmkdocs-get-deps = \">=0.2.0\"\npackaging = \">=20.5\"\npathspec = \">=0.11.1\"\npyyaml = \">=5.1\"\npyyaml-env-tag = \">=0.1\"\nwatchdog = \">=2.0\"\n\n[package.extras]\ni18n = [\"babel (>=2.9.0)\"]\nmin-versions = [\"babel (==2.9.0)\", \"click (==7.0)\", \"colorama (==0.4)\", \"ghp-import (==1.0)\", \"importlib-metadata (==4.4)\", \"jinja2 (==2.11.1)\", \"markdown (==3.3.6)\", \"markupsafe (==2.0.1)\", \"mergedeep (==1.3.4)\", \"mkdocs-get-deps (==0.2.0)\", \"packaging (==20.5)\", \"pathspec (==0.11.1)\", \"pyyaml (==5.1)\", \"pyyaml-env-tag (==0.1)\", \"watchdog (==2.0)\"]\n\n[[package]]\nname = \"mkdocs-autorefs\"\nversion = \"1.2.0\"\ndescription = \"Automatically link across pages in MkDocs.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mkdocs_autorefs-1.2.0-py3-none-any.whl\", hash = \"sha256:d588754ae89bd0ced0c70c06f58566a4ee43471eeeee5202427da7de9ef85a2f\"},\n    {file = \"mkdocs_autorefs-1.2.0.tar.gz\", hash = \"sha256:a86b93abff653521bda71cf3fc5596342b7a23982093915cb74273f67522190f\"},\n]\n\n[package.dependencies]\nMarkdown = \">=3.3\"\nmarkupsafe = \">=2.0.1\"\nmkdocs = \">=1.1\"\n\n[[package]]\nname = \"mkdocs-gen-files\"\nversion = \"0.5.0\"\ndescription = \"MkDocs plugin to programmatically generate documentation pages during the build\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"mkdocs_gen_files-0.5.0-py3-none-any.whl\", hash = \"sha256:7ac060096f3f40bd19039e7277dd3050be9a453c8ac578645844d4d91d7978ea\"},\n    {file = \"mkdocs_gen_files-0.5.0.tar.gz\", hash = \"sha256:4c7cf256b5d67062a788f6b1d035e157fc1a9498c2399be9af5257d4ff4d19bc\"},\n]\n\n[package.dependencies]\nmkdocs = \">=1.0.3\"\n\n[[package]]\nname = \"mkdocs-get-deps\"\nversion = \"0.2.0\"\ndescription = \"MkDocs extension that lists all dependencies according to a mkdocs.yml file\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mkdocs_get_deps-0.2.0-py3-none-any.whl\", hash = \"sha256:2bf11d0b133e77a0dd036abeeb06dec8775e46efa526dc70667d8863eefc6134\"},\n    {file = \"mkdocs_get_deps-0.2.0.tar.gz\", hash = \"sha256:162b3d129c7fad9b19abfdcb9c1458a651628e4b1dea628ac68790fb3061c60c\"},\n]\n\n[package.dependencies]\nmergedeep = \">=1.3.4\"\nplatformdirs = \">=2.2.0\"\npyyaml = \">=5.1\"\n\n[[package]]\nname = \"mkdocs-material\"\nversion = \"9.5.45\"\ndescription = \"Documentation that simply works\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mkdocs_material-9.5.45-py3-none-any.whl\", hash = \"sha256:a9be237cfd0be14be75f40f1726d83aa3a81ce44808dc3594d47a7a592f44547\"},\n    {file = \"mkdocs_material-9.5.45.tar.gz\", hash = \"sha256:286489cf0beca4a129d91d59d6417419c63bceed1ce5cd0ec1fc7e1ebffb8189\"},\n]\n\n[package.dependencies]\nbabel = \">=2.10,<3.0\"\ncolorama = \">=0.4,<1.0\"\njinja2 = \">=3.0,<4.0\"\nmarkdown = \">=3.2,<4.0\"\nmkdocs = \">=1.6,<2.0\"\nmkdocs-material-extensions = \">=1.3,<2.0\"\npaginate = \">=0.5,<1.0\"\npygments = \">=2.16,<3.0\"\npymdown-extensions = \">=10.2,<11.0\"\nregex = \">=2022.4\"\nrequests = \">=2.26,<3.0\"\n\n[package.extras]\ngit = [\"mkdocs-git-committers-plugin-2 (>=1.1,<2.0)\", \"mkdocs-git-revision-date-localized-plugin (>=1.2.4,<2.0)\"]\nimaging = [\"cairosvg (>=2.6,<3.0)\", \"pillow (>=10.2,<11.0)\"]\nrecommended = [\"mkdocs-minify-plugin (>=0.7,<1.0)\", \"mkdocs-redirects (>=1.2,<2.0)\", \"mkdocs-rss-plugin (>=1.6,<2.0)\"]\n\n[[package]]\nname = \"mkdocs-material-extensions\"\nversion = \"1.3.1\"\ndescription = \"Extension pack for Python Markdown and MkDocs Material.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mkdocs_material_extensions-1.3.1-py3-none-any.whl\", hash = \"sha256:adff8b62700b25cb77b53358dad940f3ef973dd6db797907c49e3c2ef3ab4e31\"},\n    {file = \"mkdocs_material_extensions-1.3.1.tar.gz\", hash = \"sha256:10c9511cea88f568257f960358a467d12b970e1f7b2c0e5fb2bb48cab1928443\"},\n]\n\n[[package]]\nname = \"mkdocs-minify-plugin\"\nversion = \"0.8.0\"\ndescription = \"An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mkdocs-minify-plugin-0.8.0.tar.gz\", hash = \"sha256:bc11b78b8120d79e817308e2b11539d790d21445eb63df831e393f76e52e753d\"},\n    {file = \"mkdocs_minify_plugin-0.8.0-py3-none-any.whl\", hash = \"sha256:5fba1a3f7bd9a2142c9954a6559a57e946587b21f133165ece30ea145c66aee6\"},\n]\n\n[package.dependencies]\ncsscompressor = \">=0.9.5\"\nhtmlmin2 = \">=0.1.13\"\njsmin = \">=3.0.1\"\nmkdocs = \">=1.4.1\"\n\n[[package]]\nname = \"mkdocs-rss-plugin\"\nversion = \"1.16.0\"\ndescription = \"MkDocs plugin which generates a static RSS feed using git log and page.meta.\"\noptional = false\npython-versions = \"<4,>=3.9\"\nfiles = [\n    {file = \"mkdocs_rss_plugin-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:be66b11300f1e951d3393ce8da60ca6d730108f731434cc256670b3b8e0cffb3\"},\n    {file = \"mkdocs_rss_plugin-1.16.0.tar.gz\", hash = \"sha256:f0e275c933be69a77ee7af92256d88e2969e10c36c5ee1ecdb663a4ea4aa08ea\"},\n]\n\n[package.dependencies]\ncachecontrol = {version = \">=0.14,<1\", extras = [\"filecache\"]}\nGitPython = \">=3.1,<3.2\"\nmkdocs = \">=1.5,<2\"\nrequests = \">=2.31,<3\"\ntzdata = {version = \"==2024.*\", markers = \"python_version >= \\\"3.9\\\" and sys_platform == \\\"win32\\\"\"}\n\n[package.extras]\ndev = [\"black\", \"flake8 (>=6,<8)\", \"flake8-bugbear (>=23.12)\", \"flake8-builtins (>=2.1)\", \"flake8-eradicate (>=1)\", \"flake8-isort (>=6)\", \"pre-commit (>=3,<4)\"]\ndoc = [\"mkdocs-git-committers-plugin-2 (>=1.2,<2.4)\", \"mkdocs-git-revision-date-localized-plugin (>=1,<1.3)\", \"mkdocs-material[imaging] (>=9.5.1,<10)\", \"mkdocs-minify-plugin (==0.8.*)\", \"mkdocstrings[python] (>=0.18,<1)\", \"termynal (>=0.11.1,<0.13)\"]\ntest = [\"feedparser (>=6.0.11,<6.1)\", \"jsonfeed-util (>=1.1.2,<2)\", \"mkdocs-material[imaging] (>=9)\", \"pytest-cov (>=4,<5.1)\", \"validator-collection (>=1.5,<1.6)\"]\n\n[[package]]\nname = \"mkdocstrings\"\nversion = \"0.27.0\"\ndescription = \"Automatic documentation from sources, for MkDocs.\"\noptional = false\npython-versions = \">=3.9\"\nfiles = [\n    {file = \"mkdocstrings-0.27.0-py3-none-any.whl\", hash = \"sha256:6ceaa7ea830770959b55a16203ac63da24badd71325b96af950e59fd37366332\"},\n    {file = \"mkdocstrings-0.27.0.tar.gz\", hash = \"sha256:16adca6d6b0a1f9e0c07ff0b02ced8e16f228a9d65a37c063ec4c14d7b76a657\"},\n]\n\n[package.dependencies]\nclick = \">=7.0\"\nJinja2 = \">=2.11.1\"\nMarkdown = \">=3.6\"\nMarkupSafe = \">=1.1\"\nmkdocs = \">=1.4\"\nmkdocs-autorefs = \">=1.2\"\nplatformdirs = \">=2.2\"\npymdown-extensions = \">=6.3\"\n\n[package.extras]\ncrystal = [\"mkdocstrings-crystal (>=0.3.4)\"]\npython = [\"mkdocstrings-python (>=0.5.2)\"]\npython-legacy = [\"mkdocstrings-python-legacy (>=0.2.1)\"]\n\n[[package]]\nname = \"mkdocstrings-python\"\nversion = \"1.12.2\"\ndescription = \"A Python handler for mkdocstrings.\"\noptional = false\npython-versions = \">=3.9\"\nfiles = [\n    {file = \"mkdocstrings_python-1.12.2-py3-none-any.whl\", hash = \"sha256:7f7d40d6db3cb1f5d19dbcd80e3efe4d0ba32b073272c0c0de9de2e604eda62a\"},\n    {file = \"mkdocstrings_python-1.12.2.tar.gz\", hash = \"sha256:7a1760941c0b52a2cd87b960a9e21112ffe52e7df9d0b9583d04d47ed2e186f3\"},\n]\n\n[package.dependencies]\ngriffe = \">=0.49\"\nmkdocs-autorefs = \">=1.2\"\nmkdocstrings = \">=0.26\"\n\n[[package]]\nname = \"msgpack\"\nversion = \"1.1.0\"\ndescription = \"MessagePack serializer\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"msgpack-1.1.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7ad442d527a7e358a469faf43fda45aaf4ac3249c8310a82f0ccff9164e5dccd\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:74bed8f63f8f14d75eec75cf3d04ad581da6b914001b474a5d3cd3372c8cc27d\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:914571a2a5b4e7606997e169f64ce53a8b1e06f2cf2c3a7273aa106236d43dd5\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c921af52214dcbb75e6bdf6a661b23c3e6417f00c603dd2070bccb5c3ef499f5\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d8ce0b22b890be5d252de90d0e0d119f363012027cf256185fc3d474c44b1b9e\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:73322a6cc57fcee3c0c57c4463d828e9428275fb85a27aa2aa1a92fdc42afd7b\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:e1f3c3d21f7cf67bcf2da8e494d30a75e4cf60041d98b3f79875afb5b96f3a3f\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:64fc9068d701233effd61b19efb1485587560b66fe57b3e50d29c5d78e7fef68\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:42f754515e0f683f9c79210a5d1cad631ec3d06cea5172214d2176a42e67e19b\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-win32.whl\", hash = \"sha256:3df7e6b05571b3814361e8464f9304c42d2196808e0119f55d0d3e62cd5ea044\"},\n    {file = \"msgpack-1.1.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:685ec345eefc757a7c8af44a3032734a739f8c45d1b0ac45efc5d8977aa4720f\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3d364a55082fb2a7416f6c63ae383fbd903adb5a6cf78c5b96cc6316dc1cedc7\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:79ec007767b9b56860e0372085f8504db5d06bd6a327a335449508bbee9648fa\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:6ad622bf7756d5a497d5b6836e7fc3752e2dd6f4c648e24b1803f6048596f701\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e59bca908d9ca0de3dc8684f21ebf9a690fe47b6be93236eb40b99af28b6ea6\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5e1da8f11a3dd397f0a32c76165cf0c4eb95b31013a94f6ecc0b280c05c91b59\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:452aff037287acb1d70a804ffd022b21fa2bb7c46bee884dbc864cc9024128a0\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:8da4bf6d54ceed70e8861f833f83ce0814a2b72102e890cbdfe4b34764cdd66e\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:41c991beebf175faf352fb940bf2af9ad1fb77fd25f38d9142053914947cdbf6\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:a52a1f3a5af7ba1c9ace055b659189f6c669cf3657095b50f9602af3a3ba0fe5\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-win32.whl\", hash = \"sha256:58638690ebd0a06427c5fe1a227bb6b8b9fdc2bd07701bec13c2335c82131a88\"},\n    {file = \"msgpack-1.1.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fd2906780f25c8ed5d7b323379f6138524ba793428db5d0e9d226d3fa6aa1788\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:d46cf9e3705ea9485687aa4001a76e44748b609d260af21c4ceea7f2212a501d\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:5dbad74103df937e1325cc4bfeaf57713be0b4f15e1c2da43ccdd836393e2ea2\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:58dfc47f8b102da61e8949708b3eafc3504509a5728f8b4ddef84bd9e16ad420\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4676e5be1b472909b2ee6356ff425ebedf5142427842aa06b4dfd5117d1ca8a2\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:17fb65dd0bec285907f68b15734a993ad3fc94332b5bb21b0435846228de1f39\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a51abd48c6d8ac89e0cfd4fe177c61481aca2d5e7ba42044fd218cfd8ea9899f\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:2137773500afa5494a61b1208619e3871f75f27b03bcfca7b3a7023284140247\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:398b713459fea610861c8a7b62a6fec1882759f308ae0795b5413ff6a160cf3c\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:06f5fd2f6bb2a7914922d935d3b8bb4a7fff3a9a91cfce6d06c13bc42bec975b\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-win32.whl\", hash = \"sha256:ad33e8400e4ec17ba782f7b9cf868977d867ed784a1f5f2ab46e7ba53b6e1e1b\"},\n    {file = \"msgpack-1.1.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:115a7af8ee9e8cddc10f87636767857e7e3717b7a2e97379dc2054712693e90f\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:071603e2f0771c45ad9bc65719291c568d4edf120b44eb36324dcb02a13bfddf\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:0f92a83b84e7c0749e3f12821949d79485971f087604178026085f60ce109330\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:4a1964df7b81285d00a84da4e70cb1383f2e665e0f1f2a7027e683956d04b734\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59caf6a4ed0d164055ccff8fe31eddc0ebc07cf7326a2aaa0dbf7a4001cd823e\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0907e1a7119b337971a689153665764adc34e89175f9a34793307d9def08e6ca\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:65553c9b6da8166e819a6aa90ad15288599b340f91d18f60b2061f402b9a4915\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:7a946a8992941fea80ed4beae6bff74ffd7ee129a90b4dd5cf9c476a30e9708d\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:4b51405e36e075193bc051315dbf29168d6141ae2500ba8cd80a522964e31434\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:b4c01941fd2ff87c2a934ee6055bda4ed353a7846b8d4f341c428109e9fcde8c\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-win32.whl\", hash = \"sha256:7c9a35ce2c2573bada929e0b7b3576de647b0defbd25f5139dcdaba0ae35a4cc\"},\n    {file = \"msgpack-1.1.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:bce7d9e614a04d0883af0b3d4d501171fbfca038f12c77fa838d9f198147a23f\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c40ffa9a15d74e05ba1fe2681ea33b9caffd886675412612d93ab17b58ea2fec\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f1ba6136e650898082d9d5a5217d5906d1e138024f836ff48691784bbe1adf96\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e0856a2b7e8dcb874be44fea031d22e5b3a19121be92a1e098f46068a11b0870\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:471e27a5787a2e3f974ba023f9e265a8c7cfd373632247deb225617e3100a3c7\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:646afc8102935a388ffc3914b336d22d1c2d6209c773f3eb5dd4d6d3b6f8c1cb\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:13599f8829cfbe0158f6456374e9eea9f44eee08076291771d8ae93eda56607f\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-win32.whl\", hash = \"sha256:8a84efb768fb968381e525eeeb3d92857e4985aacc39f3c47ffd00eb4509315b\"},\n    {file = \"msgpack-1.1.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:879a7b7b0ad82481c52d3c7eb99bf6f0645dbdec5134a4bddbd16f3506947feb\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:53258eeb7a80fc46f62fd59c876957a2d0e15e6449a9e71842b6d24419d88ca1\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:7e7b853bbc44fb03fbdba34feb4bd414322180135e2cb5164f20ce1c9795ee48\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:f3e9b4936df53b970513eac1758f3882c88658a220b58dcc1e39606dccaaf01c\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:46c34e99110762a76e3911fc923222472c9d681f1094096ac4102c18319e6468\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a706d1e74dd3dea05cb54580d9bd8b2880e9264856ce5068027eed09680aa74\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:534480ee5690ab3cbed89d4c8971a5c631b69a8c0883ecfea96c19118510c846\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:8cf9e8c3a2153934a23ac160cc4cba0ec035f6867c8013cc6077a79823370346\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:3180065ec2abbe13a4ad37688b61b99d7f9e012a535b930e0e683ad6bc30155b\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:c5a91481a3cc573ac8c0d9aace09345d989dc4a0202b7fcb312c88c26d4e71a8\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-win32.whl\", hash = \"sha256:f80bc7d47f76089633763f952e67f8214cb7b3ee6bfa489b3cb6a84cfac114cd\"},\n    {file = \"msgpack-1.1.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:4d1b7ff2d6146e16e8bd665ac726a89c74163ef8cd39fa8c1087d4e52d3a2325\"},\n    {file = \"msgpack-1.1.0.tar.gz\", hash = \"sha256:dd432ccc2c72b914e4cb77afce64aab761c1137cc698be3984eee260bcb2896e\"},\n]\n\n[[package]]\nname = \"mypy\"\nversion = \"1.13.0\"\ndescription = \"Optional static typing for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"mypy-1.13.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:6607e0f1dd1fb7f0aca14d936d13fd19eba5e17e1cd2a14f808fa5f8f6d8f60a\"},\n    {file = \"mypy-1.13.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8a21be69bd26fa81b1f80a61ee7ab05b076c674d9b18fb56239d72e21d9f4c80\"},\n    {file = \"mypy-1.13.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:7b2353a44d2179846a096e25691d54d59904559f4232519d420d64da6828a3a7\"},\n    {file = \"mypy-1.13.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:0730d1c6a2739d4511dc4253f8274cdd140c55c32dfb0a4cf8b7a43f40abfa6f\"},\n    {file = \"mypy-1.13.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:c5fc54dbb712ff5e5a0fca797e6e0aa25726c7e72c6a5850cfd2adbc1eb0a372\"},\n    {file = \"mypy-1.13.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:581665e6f3a8a9078f28d5502f4c334c0c8d802ef55ea0e7276a6e409bc0d82d\"},\n    {file = \"mypy-1.13.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:3ddb5b9bf82e05cc9a627e84707b528e5c7caaa1c55c69e175abb15a761cec2d\"},\n    {file = \"mypy-1.13.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:20c7ee0bc0d5a9595c46f38beb04201f2620065a93755704e141fcac9f59db2b\"},\n    {file = \"mypy-1.13.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:3790ded76f0b34bc9c8ba4def8f919dd6a46db0f5a6610fb994fe8efdd447f73\"},\n    {file = \"mypy-1.13.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:51f869f4b6b538229c1d1bcc1dd7d119817206e2bc54e8e374b3dfa202defcca\"},\n    {file = \"mypy-1.13.0-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:5c7051a3461ae84dfb5dd15eff5094640c61c5f22257c8b766794e6dd85e72d5\"},\n    {file = \"mypy-1.13.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:39bb21c69a5d6342f4ce526e4584bc5c197fd20a60d14a8624d8743fffb9472e\"},\n    {file = \"mypy-1.13.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:164f28cb9d6367439031f4c81e84d3ccaa1e19232d9d05d37cb0bd880d3f93c2\"},\n    {file = \"mypy-1.13.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:a4c1bfcdbce96ff5d96fc9b08e3831acb30dc44ab02671eca5953eadad07d6d0\"},\n    {file = \"mypy-1.13.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:a0affb3a79a256b4183ba09811e3577c5163ed06685e4d4b46429a271ba174d2\"},\n    {file = \"mypy-1.13.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:a7b44178c9760ce1a43f544e595d35ed61ac2c3de306599fa59b38a6048e1aa7\"},\n    {file = \"mypy-1.13.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:5d5092efb8516d08440e36626f0153b5006d4088c1d663d88bf79625af3d1d62\"},\n    {file = \"mypy-1.13.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:de2904956dac40ced10931ac967ae63c5089bd498542194b436eb097a9f77bc8\"},\n    {file = \"mypy-1.13.0-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:7bfd8836970d33c2105562650656b6846149374dc8ed77d98424b40b09340ba7\"},\n    {file = \"mypy-1.13.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:9f73dba9ec77acb86457a8fc04b5239822df0c14a082564737833d2963677dbc\"},\n    {file = \"mypy-1.13.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:100fac22ce82925f676a734af0db922ecfea991e1d7ec0ceb1e115ebe501301a\"},\n    {file = \"mypy-1.13.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:7bcb0bb7f42a978bb323a7c88f1081d1b5dee77ca86f4100735a6f541299d8fb\"},\n    {file = \"mypy-1.13.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:bde31fc887c213e223bbfc34328070996061b0833b0a4cfec53745ed61f3519b\"},\n    {file = \"mypy-1.13.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:07de989f89786f62b937851295ed62e51774722e5444a27cecca993fc3f9cd74\"},\n    {file = \"mypy-1.13.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:4bde84334fbe19bad704b3f5b78c4abd35ff1026f8ba72b29de70dda0916beb6\"},\n    {file = \"mypy-1.13.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:0246bcb1b5de7f08f2826451abd947bf656945209b140d16ed317f65a17dc7dc\"},\n    {file = \"mypy-1.13.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:7f5b7deae912cf8b77e990b9280f170381fdfbddf61b4ef80927edd813163732\"},\n    {file = \"mypy-1.13.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:7029881ec6ffb8bc233a4fa364736789582c738217b133f1b55967115288a2bc\"},\n    {file = \"mypy-1.13.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:3e38b980e5681f28f033f3be86b099a247b13c491f14bb8b1e1e134d23bb599d\"},\n    {file = \"mypy-1.13.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:a6789be98a2017c912ae6ccb77ea553bbaf13d27605d2ca20a76dfbced631b24\"},\n    {file = \"mypy-1.13.0-py3-none-any.whl\", hash = \"sha256:9c250883f9fd81d212e0952c92dbfcc96fc237f4b7c92f56ac81fd48460b3e5a\"},\n    {file = \"mypy-1.13.0.tar.gz\", hash = \"sha256:0291a61b6fbf3e6673e3405cfcc0e7650bebc7939659fdca2702958038bd835e\"},\n]\n\n[package.dependencies]\nmypy-extensions = \">=1.0.0\"\ntomli = {version = \">=1.1.0\", markers = \"python_version < \\\"3.11\\\"\"}\ntyping-extensions = \">=4.6.0\"\n\n[package.extras]\ndmypy = [\"psutil (>=4.0)\"]\nfaster-cache = [\"orjson\"]\ninstall-types = [\"pip\"]\nmypyc = [\"setuptools (>=50)\"]\nreports = [\"lxml\"]\n\n[[package]]\nname = \"mypy-extensions\"\nversion = \"1.0.0\"\ndescription = \"Type system extensions for programs checked with the mypy type checker.\"\noptional = false\npython-versions = \">=3.5\"\nfiles = [\n    {file = \"mypy_extensions-1.0.0-py3-none-any.whl\", hash = \"sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d\"},\n    {file = \"mypy_extensions-1.0.0.tar.gz\", hash = \"sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782\"},\n]\n\n[[package]]\nname = \"packaging\"\nversion = \"24.2\"\ndescription = \"Core utilities for Python packages\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"packaging-24.2-py3-none-any.whl\", hash = \"sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759\"},\n    {file = \"packaging-24.2.tar.gz\", hash = \"sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f\"},\n]\n\n[[package]]\nname = \"paginate\"\nversion = \"0.5.7\"\ndescription = \"Divides large result sets into pages for easier browsing\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"paginate-0.5.7-py2.py3-none-any.whl\", hash = \"sha256:b885e2af73abcf01d9559fd5216b57ef722f8c42affbb63942377668e35c7591\"},\n    {file = \"paginate-0.5.7.tar.gz\", hash = \"sha256:22bd083ab41e1a8b4f3690544afb2c60c25e5c9a63a30fa2f483f6c60c8e5945\"},\n]\n\n[package.extras]\ndev = [\"pytest\", \"tox\"]\nlint = [\"black\"]\n\n[[package]]\nname = \"paramiko\"\nversion = \"3.5.0\"\ndescription = \"SSH2 protocol library\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"paramiko-3.5.0-py3-none-any.whl\", hash = \"sha256:1fedf06b085359051cd7d0d270cebe19e755a8a921cc2ddbfa647fb0cd7d68f9\"},\n    {file = \"paramiko-3.5.0.tar.gz\", hash = \"sha256:ad11e540da4f55cedda52931f1a3f812a8238a7af7f62a60de538cd80bb28124\"},\n]\n\n[package.dependencies]\nbcrypt = \">=3.2\"\ncryptography = \">=3.3\"\npynacl = \">=1.5\"\n\n[package.extras]\nall = [\"gssapi (>=1.4.1)\", \"invoke (>=2.0)\", \"pyasn1 (>=0.1.7)\", \"pywin32 (>=2.1.8)\"]\ngssapi = [\"gssapi (>=1.4.1)\", \"pyasn1 (>=0.1.7)\", \"pywin32 (>=2.1.8)\"]\ninvoke = [\"invoke (>=2.0)\"]\n\n[[package]]\nname = \"parso\"\nversion = \"0.8.4\"\ndescription = \"A Python Parser\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"parso-0.8.4-py2.py3-none-any.whl\", hash = \"sha256:a418670a20291dacd2dddc80c377c5c3791378ee1e8d12bffc35420643d43f18\"},\n    {file = \"parso-0.8.4.tar.gz\", hash = \"sha256:eb3a7b58240fb99099a345571deecc0f9540ea5f4dd2fe14c2a99d6b281ab92d\"},\n]\n\n[package.extras]\nqa = [\"flake8 (==5.0.4)\", \"mypy (==0.971)\", \"types-setuptools (==67.2.0.1)\"]\ntesting = [\"docopt\", \"pytest\"]\n\n[[package]]\nname = \"pathspec\"\nversion = \"0.12.1\"\ndescription = \"Utility library for gitignore style pattern matching of file paths.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pathspec-0.12.1-py3-none-any.whl\", hash = \"sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08\"},\n    {file = \"pathspec-0.12.1.tar.gz\", hash = \"sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\"},\n]\n\n[[package]]\nname = \"pbr\"\nversion = \"6.1.0\"\ndescription = \"Python Build Reasonableness\"\noptional = false\npython-versions = \">=2.6\"\nfiles = [\n    {file = \"pbr-6.1.0-py2.py3-none-any.whl\", hash = \"sha256:a776ae228892d8013649c0aeccbb3d5f99ee15e005a4cbb7e61d55a067b28a2a\"},\n    {file = \"pbr-6.1.0.tar.gz\", hash = \"sha256:788183e382e3d1d7707db08978239965e8b9e4e5ed42669bf4758186734d5f24\"},\n]\n\n[[package]]\nname = \"pexpect\"\nversion = \"4.9.0\"\ndescription = \"Pexpect allows easy control of interactive console applications.\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"pexpect-4.9.0-py2.py3-none-any.whl\", hash = \"sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523\"},\n    {file = \"pexpect-4.9.0.tar.gz\", hash = \"sha256:ee7d41123f3c9911050ea2c2dac107568dc43b2d3b0c7557a33212c398ead30f\"},\n]\n\n[package.dependencies]\nptyprocess = \">=0.5\"\n\n[[package]]\nname = \"pip\"\nversion = \"24.3.1\"\ndescription = \"The PyPA recommended tool for installing Python packages.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pip-24.3.1-py3-none-any.whl\", hash = \"sha256:3790624780082365f47549d032f3770eeb2b1e8bd1f7b2e02dace1afa361b4ed\"},\n    {file = \"pip-24.3.1.tar.gz\", hash = \"sha256:ebcb60557f2aefabc2e0f918751cd24ea0d56d8ec5445fe1807f1d2109660b99\"},\n]\n\n[[package]]\nname = \"platformdirs\"\nversion = \"4.3.6\"\ndescription = \"A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"platformdirs-4.3.6-py3-none-any.whl\", hash = \"sha256:73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb\"},\n    {file = \"platformdirs-4.3.6.tar.gz\", hash = \"sha256:357fb2acbc885b0419afd3ce3ed34564c13c9b95c89360cd9563f73aa5e2b907\"},\n]\n\n[package.extras]\ndocs = [\"furo (>=2024.8.6)\", \"proselint (>=0.14)\", \"sphinx (>=8.0.2)\", \"sphinx-autodoc-typehints (>=2.4)\"]\ntest = [\"appdirs (==1.4.4)\", \"covdefaults (>=2.3)\", \"pytest (>=8.3.2)\", \"pytest-cov (>=5)\", \"pytest-mock (>=3.14)\"]\ntype = [\"mypy (>=1.11.2)\"]\n\n[[package]]\nname = \"pluggy\"\nversion = \"1.5.0\"\ndescription = \"plugin and hook calling mechanisms for python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pluggy-1.5.0-py3-none-any.whl\", hash = \"sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669\"},\n    {file = \"pluggy-1.5.0.tar.gz\", hash = \"sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1\"},\n]\n\n[package.extras]\ndev = [\"pre-commit\", \"tox\"]\ntesting = [\"pytest\", \"pytest-benchmark\"]\n\n[[package]]\nname = \"plumbum\"\nversion = \"1.9.0\"\ndescription = \"Plumbum: shell combinators library\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"plumbum-1.9.0-py3-none-any.whl\", hash = \"sha256:9fd0d3b0e8d86e4b581af36edf3f3bbe9d1ae15b45b8caab28de1bcb27aaa7f5\"},\n    {file = \"plumbum-1.9.0.tar.gz\", hash = \"sha256:e640062b72642c3873bd5bdc3effed75ba4d3c70ef6b6a7b907357a84d909219\"},\n]\n\n[package.dependencies]\npywin32 = {version = \"*\", markers = \"platform_system == \\\"Windows\\\" and platform_python_implementation != \\\"PyPy\\\"\"}\n\n[package.extras]\ndev = [\"coverage[toml]\", \"paramiko\", \"psutil\", \"pytest (>=6.0)\", \"pytest-cov\", \"pytest-mock\", \"pytest-timeout\"]\ndocs = [\"sphinx (>=4.0.0)\", \"sphinx-rtd-theme (>=1.0.0)\"]\nssh = [\"paramiko\"]\ntest = [\"coverage[toml]\", \"paramiko\", \"psutil\", \"pytest (>=6.0)\", \"pytest-cov\", \"pytest-mock\", \"pytest-timeout\"]\n\n[[package]]\nname = \"prompt-toolkit\"\nversion = \"3.0.48\"\ndescription = \"Library for building powerful interactive command lines in Python\"\noptional = false\npython-versions = \">=3.7.0\"\nfiles = [\n    {file = \"prompt_toolkit-3.0.48-py3-none-any.whl\", hash = \"sha256:f49a827f90062e411f1ce1f854f2aedb3c23353244f8108b89283587397ac10e\"},\n    {file = \"prompt_toolkit-3.0.48.tar.gz\", hash = \"sha256:d6623ab0477a80df74e646bdbc93621143f5caf104206aa29294d53de1a03d90\"},\n]\n\n[package.dependencies]\nwcwidth = \"*\"\n\n[[package]]\nname = \"psutil\"\nversion = \"5.9.8\"\ndescription = \"Cross-platform lib for process and system monitoring in Python.\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"\nfiles = [\n    {file = \"psutil-5.9.8-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:26bd09967ae00920df88e0352a91cff1a78f8d69b3ecabbfe733610c0af486c8\"},\n    {file = \"psutil-5.9.8-cp27-cp27m-manylinux2010_i686.whl\", hash = \"sha256:05806de88103b25903dff19bb6692bd2e714ccf9e668d050d144012055cbca73\"},\n    {file = \"psutil-5.9.8-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:611052c4bc70432ec770d5d54f64206aa7203a101ec273a0cd82418c86503bb7\"},\n    {file = \"psutil-5.9.8-cp27-cp27mu-manylinux2010_i686.whl\", hash = \"sha256:50187900d73c1381ba1454cf40308c2bf6f34268518b3f36a9b663ca87e65e36\"},\n    {file = \"psutil-5.9.8-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:02615ed8c5ea222323408ceba16c60e99c3f91639b07da6373fb7e6539abc56d\"},\n    {file = \"psutil-5.9.8-cp27-none-win32.whl\", hash = \"sha256:36f435891adb138ed3c9e58c6af3e2e6ca9ac2f365efe1f9cfef2794e6c93b4e\"},\n    {file = \"psutil-5.9.8-cp27-none-win_amd64.whl\", hash = \"sha256:bd1184ceb3f87651a67b2708d4c3338e9b10c5df903f2e3776b62303b26cb631\"},\n    {file = \"psutil-5.9.8-cp36-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:aee678c8720623dc456fa20659af736241f575d79429a0e5e9cf88ae0605cc81\"},\n    {file = \"psutil-5.9.8-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:8cb6403ce6d8e047495a701dc7c5bd788add903f8986d523e3e20b98b733e421\"},\n    {file = \"psutil-5.9.8-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d06016f7f8625a1825ba3732081d77c94589dca78b7a3fc072194851e88461a4\"},\n    {file = \"psutil-5.9.8-cp36-cp36m-win32.whl\", hash = \"sha256:7d79560ad97af658a0f6adfef8b834b53f64746d45b403f225b85c5c2c140eee\"},\n    {file = \"psutil-5.9.8-cp36-cp36m-win_amd64.whl\", hash = \"sha256:27cc40c3493bb10de1be4b3f07cae4c010ce715290a5be22b98493509c6299e2\"},\n    {file = \"psutil-5.9.8-cp37-abi3-win32.whl\", hash = \"sha256:bc56c2a1b0d15aa3eaa5a60c9f3f8e3e565303b465dbf57a1b730e7a2b9844e0\"},\n    {file = \"psutil-5.9.8-cp37-abi3-win_amd64.whl\", hash = \"sha256:8db4c1b57507eef143a15a6884ca10f7c73876cdf5d51e713151c1236a0e68cf\"},\n    {file = \"psutil-5.9.8-cp38-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:d16bbddf0693323b8c6123dd804100241da461e41d6e332fb0ba6058f630f8c8\"},\n    {file = \"psutil-5.9.8.tar.gz\", hash = \"sha256:6be126e3225486dff286a8fb9a06246a5253f4c7c53b475ea5f5ac934e64194c\"},\n]\n\n[package.extras]\ntest = [\"enum34\", \"ipaddress\", \"mock\", \"pywin32\", \"wmi\"]\n\n[[package]]\nname = \"pt\"\nversion = \"1.0.0\"\ndescription = \"`gdb-pt-dump` is a gdb script to examine the address space of a QEMU-based virtual machine.\"\noptional = false\npython-versions = \"^3.8\"\nfiles = []\ndevelop = false\n\n[package.source]\ntype = \"git\"\nurl = \"https://github.com/martinradev/gdb-pt-dump\"\nreference = \"50227bda0b6332e94027f811a15879588de6d5cb\"\nresolved_reference = \"50227bda0b6332e94027f811a15879588de6d5cb\"\n\n[[package]]\nname = \"ptyprocess\"\nversion = \"0.7.0\"\ndescription = \"Run a subprocess in a pseudo terminal\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"ptyprocess-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35\"},\n    {file = \"ptyprocess-0.7.0.tar.gz\", hash = \"sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220\"},\n]\n\n[[package]]\nname = \"pure-eval\"\nversion = \"0.2.3\"\ndescription = \"Safely evaluate AST nodes without side effects\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"pure_eval-0.2.3-py3-none-any.whl\", hash = \"sha256:1db8e35b67b3d218d818ae653e27f06c3aa420901fa7b081ca98cbedc874e0d0\"},\n    {file = \"pure_eval-0.2.3.tar.gz\", hash = \"sha256:5f4e983f40564c576c7c8635ae88db5956bb2229d7e9237d03b3c0b0190eaf42\"},\n]\n\n[package.extras]\ntests = [\"pytest\"]\n\n[[package]]\nname = \"pwntools\"\nversion = \"4.14.0b1\"\ndescription = \"Pwntools CTF framework and exploit development library.\"\noptional = false\npython-versions = \">=2.7\"\nfiles = [\n    {file = \"pwntools-4.14.0b1-py2.py3-none-any.whl\", hash = \"sha256:cff6e2617c4bb7b0920ff95072fe8bdfe7c599b08a66dd44fd425cb1f453c743\"},\n    {file = \"pwntools-4.14.0b1.tar.gz\", hash = \"sha256:aa170a1b043cbcbea9b180909c931e814460afb3f29977b34be2421836cc0355\"},\n]\n\n[package.dependencies]\ncapstone = \">=3.0.5rc2\"\ncolored-traceback = {version = \"*\", markers = \"python_version >= \\\"3\\\"\"}\nintervaltree = \">=3.0\"\nmako = \">=1.0.0\"\npackaging = \"*\"\nparamiko = \">=1.15.2\"\npip = \">=6.0.8\"\npsutil = \">=3.3.0\"\npyelftools = {version = \">=0.29\", markers = \"python_version >= \\\"3\\\"\"}\npygments = \">=2.0\"\npyserial = \">=2.7\"\npysocks = \"*\"\npython-dateutil = \"*\"\nrequests = \">=2.0\"\nropgadget = \">=5.3\"\nrpyc = \"*\"\nsix = \">=1.12.0\"\nsortedcontainers = \"*\"\nunicorn = \">=2.0.1\"\nunix-ar = {version = \"*\", markers = \"python_version >= \\\"3\\\"\"}\nzstandard = \"*\"\n\n[[package]]\nname = \"pycparser\"\nversion = \"2.22\"\ndescription = \"C parser in Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pycparser-2.22-py3-none-any.whl\", hash = \"sha256:c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc\"},\n    {file = \"pycparser-2.22.tar.gz\", hash = \"sha256:491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6\"},\n]\n\n[[package]]\nname = \"pyelftools\"\nversion = \"0.29\"\ndescription = \"Library for analyzing ELF files and DWARF debugging information\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"pyelftools-0.29-py2.py3-none-any.whl\", hash = \"sha256:519f38cf412f073b2d7393aa4682b0190fa901f7c3fa0bff2b82d537690c7fc1\"},\n    {file = \"pyelftools-0.29.tar.gz\", hash = \"sha256:ec761596aafa16e282a31de188737e5485552469ac63b60cfcccf22263fd24ff\"},\n]\n\n[[package]]\nname = \"pygments\"\nversion = \"2.18.0\"\ndescription = \"Pygments is a syntax highlighting package written in Python.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pygments-2.18.0-py3-none-any.whl\", hash = \"sha256:b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a\"},\n    {file = \"pygments-2.18.0.tar.gz\", hash = \"sha256:786ff802f32e91311bff3889f6e9a86e81505fe99f2735bb6d60ae0c5004f199\"},\n]\n\n[package.extras]\nwindows-terminal = [\"colorama (>=0.4.6)\"]\n\n[[package]]\nname = \"pymdown-extensions\"\nversion = \"10.12\"\ndescription = \"Extension pack for Python Markdown.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pymdown_extensions-10.12-py3-none-any.whl\", hash = \"sha256:49f81412242d3527b8b4967b990df395c89563043bc51a3d2d7d500e52123b77\"},\n    {file = \"pymdown_extensions-10.12.tar.gz\", hash = \"sha256:b0ee1e0b2bef1071a47891ab17003bfe5bf824a398e13f49f8ed653b699369a7\"},\n]\n\n[package.dependencies]\nmarkdown = \">=3.6\"\npyyaml = \"*\"\n\n[package.extras]\nextra = [\"pygments (>=2.12)\"]\n\n[[package]]\nname = \"pynacl\"\nversion = \"1.5.0\"\ndescription = \"Python binding to the Networking and Cryptography (NaCl) library\"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"PyNaCl-1.5.0-cp36-abi3-macosx_10_10_universal2.whl\", hash = \"sha256:401002a4aaa07c9414132aaed7f6836ff98f59277a234704ff66878c2ee4a0d1\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl\", hash = \"sha256:52cb72a79269189d4e0dc537556f4740f7f0a9ec41c1322598799b0bdad4ef92\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a36d4a9dda1f19ce6e03c9a784a2921a4b726b02e1c736600ca9c22029474394\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:0c84947a22519e013607c9be43706dd42513f9e6ae5d39d3613ca1e142fba44d\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:06b8f6fa7f5de8d5d2f7573fe8c863c051225a27b61e6860fd047b1775807858\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:a422368fc821589c228f4c49438a368831cb5bbc0eab5ebe1d7fac9dded6567b\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:61f642bf2378713e2c2e1de73444a3778e5f0a38be6fee0fe532fe30060282ff\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-win32.whl\", hash = \"sha256:e46dae94e34b085175f8abb3b0aaa7da40767865ac82c928eeb9e57e1ea8a543\"},\n    {file = \"PyNaCl-1.5.0-cp36-abi3-win_amd64.whl\", hash = \"sha256:20f42270d27e1b6a29f54032090b972d97f0a1b0948cc52392041ef7831fee93\"},\n    {file = \"PyNaCl-1.5.0.tar.gz\", hash = \"sha256:8ac7448f09ab85811607bdd21ec2464495ac8b7c66d146bf545b0f08fb9220ba\"},\n]\n\n[package.dependencies]\ncffi = \">=1.4.1\"\n\n[package.extras]\ndocs = [\"sphinx (>=1.6.5)\", \"sphinx-rtd-theme\"]\ntests = [\"hypothesis (>=3.27.0)\", \"pytest (>=3.2.1,!=3.3.0)\"]\n\n[[package]]\nname = \"pyserial\"\nversion = \"3.5\"\ndescription = \"Python Serial Port Extension\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"pyserial-3.5-py2.py3-none-any.whl\", hash = \"sha256:c4451db6ba391ca6ca299fb3ec7bae67a5c55dde170964c7a14ceefec02f2cf0\"},\n    {file = \"pyserial-3.5.tar.gz\", hash = \"sha256:3c77e014170dfffbd816e6ffc205e9842efb10be9f58ec16d3e8675b4925cddb\"},\n]\n\n[package.extras]\ncp2110 = [\"hidapi\"]\n\n[[package]]\nname = \"pysocks\"\nversion = \"1.7.1\"\ndescription = \"A Python SOCKS client module. See https://github.com/Anorov/PySocks for more information.\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\nfiles = [\n    {file = \"PySocks-1.7.1-py27-none-any.whl\", hash = \"sha256:08e69f092cc6dbe92a0fdd16eeb9b9ffbc13cadfe5ca4c7bd92ffb078b293299\"},\n    {file = \"PySocks-1.7.1-py3-none-any.whl\", hash = \"sha256:2725bd0a9925919b9b51739eea5f9e2bae91e83288108a9ad338b2e3a4435ee5\"},\n    {file = \"PySocks-1.7.1.tar.gz\", hash = \"sha256:3f8804571ebe159c380ac6de37643bb4685970655d3bba243530d6558b799aa0\"},\n]\n\n[[package]]\nname = \"pytest\"\nversion = \"8.0.2\"\ndescription = \"pytest: simple powerful testing with Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"pytest-8.0.2-py3-none-any.whl\", hash = \"sha256:edfaaef32ce5172d5466b5127b42e0d6d35ebbe4453f0e3505d96afd93f6b096\"},\n    {file = \"pytest-8.0.2.tar.gz\", hash = \"sha256:d4051d623a2e0b7e51960ba963193b09ce6daeb9759a451844a21e4ddedfc1bd\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}\nexceptiongroup = {version = \">=1.0.0rc8\", markers = \"python_version < \\\"3.11\\\"\"}\niniconfig = \"*\"\npackaging = \"*\"\npluggy = \">=1.3.0,<2.0\"\ntomli = {version = \">=1.0.0\", markers = \"python_version < \\\"3.11\\\"\"}\n\n[package.extras]\ntesting = [\"argcomplete\", \"attrs (>=19.2.0)\", \"hypothesis (>=3.56)\", \"mock\", \"nose\", \"pygments (>=2.7.2)\", \"requests\", \"setuptools\", \"xmlschema\"]\n\n[[package]]\nname = \"pytest-cov\"\nversion = \"4.1.0\"\ndescription = \"Pytest plugin for measuring coverage.\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"pytest-cov-4.1.0.tar.gz\", hash = \"sha256:3904b13dfbfec47f003b8e77fd5b589cd11904a21ddf1ab38a64f204d6a10ef6\"},\n    {file = \"pytest_cov-4.1.0-py3-none-any.whl\", hash = \"sha256:6ba70b9e97e69fcc3fb45bfeab2d0a138fb65c4d0d6a41ef33983ad114be8c3a\"},\n]\n\n[package.dependencies]\ncoverage = {version = \">=5.2.1\", extras = [\"toml\"]}\npytest = \">=4.6\"\n\n[package.extras]\ntesting = [\"fields\", \"hunter\", \"process-tests\", \"pytest-xdist\", \"six\", \"virtualenv\"]\n\n[[package]]\nname = \"python-dateutil\"\nversion = \"2.9.0.post0\"\ndescription = \"Extensions to the standard Python datetime module\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\nfiles = [\n    {file = \"python-dateutil-2.9.0.post0.tar.gz\", hash = \"sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"},\n    {file = \"python_dateutil-2.9.0.post0-py2.py3-none-any.whl\", hash = \"sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\"},\n]\n\n[package.dependencies]\nsix = \">=1.5\"\n\n[[package]]\nname = \"pywin32\"\nversion = \"308\"\ndescription = \"Python for Window Extensions\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"pywin32-308-cp310-cp310-win32.whl\", hash = \"sha256:796ff4426437896550d2981b9c2ac0ffd75238ad9ea2d3bfa67a1abd546d262e\"},\n    {file = \"pywin32-308-cp310-cp310-win_amd64.whl\", hash = \"sha256:4fc888c59b3c0bef905ce7eb7e2106a07712015ea1c8234b703a088d46110e8e\"},\n    {file = \"pywin32-308-cp310-cp310-win_arm64.whl\", hash = \"sha256:a5ab5381813b40f264fa3495b98af850098f814a25a63589a8e9eb12560f450c\"},\n    {file = \"pywin32-308-cp311-cp311-win32.whl\", hash = \"sha256:5d8c8015b24a7d6855b1550d8e660d8daa09983c80e5daf89a273e5c6fb5095a\"},\n    {file = \"pywin32-308-cp311-cp311-win_amd64.whl\", hash = \"sha256:575621b90f0dc2695fec346b2d6302faebd4f0f45c05ea29404cefe35d89442b\"},\n    {file = \"pywin32-308-cp311-cp311-win_arm64.whl\", hash = \"sha256:100a5442b7332070983c4cd03f2e906a5648a5104b8a7f50175f7906efd16bb6\"},\n    {file = \"pywin32-308-cp312-cp312-win32.whl\", hash = \"sha256:587f3e19696f4bf96fde9d8a57cec74a57021ad5f204c9e627e15c33ff568897\"},\n    {file = \"pywin32-308-cp312-cp312-win_amd64.whl\", hash = \"sha256:00b3e11ef09ede56c6a43c71f2d31857cf7c54b0ab6e78ac659497abd2834f47\"},\n    {file = \"pywin32-308-cp312-cp312-win_arm64.whl\", hash = \"sha256:9b4de86c8d909aed15b7011182c8cab38c8850de36e6afb1f0db22b8959e3091\"},\n    {file = \"pywin32-308-cp313-cp313-win32.whl\", hash = \"sha256:1c44539a37a5b7b21d02ab34e6a4d314e0788f1690d65b48e9b0b89f31abbbed\"},\n    {file = \"pywin32-308-cp313-cp313-win_amd64.whl\", hash = \"sha256:fd380990e792eaf6827fcb7e187b2b4b1cede0585e3d0c9e84201ec27b9905e4\"},\n    {file = \"pywin32-308-cp313-cp313-win_arm64.whl\", hash = \"sha256:ef313c46d4c18dfb82a2431e3051ac8f112ccee1a34f29c263c583c568db63cd\"},\n    {file = \"pywin32-308-cp37-cp37m-win32.whl\", hash = \"sha256:1f696ab352a2ddd63bd07430080dd598e6369152ea13a25ebcdd2f503a38f1ff\"},\n    {file = \"pywin32-308-cp37-cp37m-win_amd64.whl\", hash = \"sha256:13dcb914ed4347019fbec6697a01a0aec61019c1046c2b905410d197856326a6\"},\n    {file = \"pywin32-308-cp38-cp38-win32.whl\", hash = \"sha256:5794e764ebcabf4ff08c555b31bd348c9025929371763b2183172ff4708152f0\"},\n    {file = \"pywin32-308-cp38-cp38-win_amd64.whl\", hash = \"sha256:3b92622e29d651c6b783e368ba7d6722b1634b8e70bd376fd7610fe1992e19de\"},\n    {file = \"pywin32-308-cp39-cp39-win32.whl\", hash = \"sha256:7873ca4dc60ab3287919881a7d4f88baee4a6e639aa6962de25a98ba6b193341\"},\n    {file = \"pywin32-308-cp39-cp39-win_amd64.whl\", hash = \"sha256:71b3322d949b4cc20776436a9c9ba0eeedcbc9c650daa536df63f0ff111bb920\"},\n]\n\n[[package]]\nname = \"pyyaml\"\nversion = \"6.0.2\"\ndescription = \"YAML parser and emitter for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8824b5a04a04a047e72eea5cec3bc266db09e35de6bdfe34c9436ac5ee27d237\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7c36280e6fb8385e520936c3cb3b8042851904eba0e58d277dca80a5cfed590b\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ec031d5d2feb36d1d1a24380e4db6d43695f3748343d99434e6f5f9156aaa2ed\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:936d68689298c36b53b29f23c6dbb74de12b4ac12ca6cfe0e047bedceea56180\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:23502f431948090f597378482b4812b0caae32c22213aecf3b55325e049a6c68\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-win32.whl\", hash = \"sha256:2e99c6826ffa974fe6e27cdb5ed0021786b03fc98e5ee3c5bfe1fd5015f42b99\"},\n    {file = \"PyYAML-6.0.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:a4d3091415f010369ae4ed1fc6b79def9416358877534caf6a0fdd2146c87a3e\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:cc1c1159b3d456576af7a3e4d1ba7e6924cb39de8f67111c735f6fc832082774\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:1e2120ef853f59c7419231f3bf4e7021f1b936f6ebd222406c3b60212205d2ee\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5d225db5a45f21e78dd9358e58a98702a0302f2659a3c6cd320564b75b86f47c\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5ac9328ec4831237bec75defaf839f7d4564be1e6b25ac710bd1a96321cc8317\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3ad2a3decf9aaba3d29c8f537ac4b243e36bef957511b4766cb0057d32b0be85\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:ff3824dc5261f50c9b0dfb3be22b4567a6f938ccce4587b38952d85fd9e9afe4\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:797b4f722ffa07cc8d62053e4cff1486fa6dc094105d13fea7b1de7d8bf71c9e\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-win32.whl\", hash = \"sha256:11d8f3dd2b9c1207dcaf2ee0bbbfd5991f571186ec9cc78427ba5bd32afae4b5\"},\n    {file = \"PyYAML-6.0.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:e10ce637b18caea04431ce14fabcf5c64a1c61ec9c56b071a4b7ca131ca52d44\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-win32.whl\", hash = \"sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4\"},\n    {file = \"PyYAML-6.0.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:50187695423ffe49e2deacb8cd10510bc361faac997de9efef88badc3bb9e2d1\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0ffe8360bab4910ef1b9e87fb812d8bc0a308b0d0eef8c8f44e0254ab3b07133\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:17e311b6c678207928d649faa7cb0d7b4c26a0ba73d41e99c4fff6b6c3276484\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:41e4e3953a79407c794916fa277a82531dd93aad34e29c2a514c2c0c5fe971cc\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-win32.whl\", hash = \"sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183\"},\n    {file = \"PyYAML-6.0.2-cp313-cp313-win_amd64.whl\", hash = \"sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:24471b829b3bf607e04e88d79542a9d48bb037c2267d7927a874e6c205ca7e9a\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d7fded462629cfa4b685c5416b949ebad6cec74af5e2d42905d41e257e0869f5\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d84a1718ee396f54f3a086ea0a66d8e552b2ab2017ef8b420e92edbc841c352d\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9056c1ecd25795207ad294bcf39f2db3d845767be0ea6e6a34d856f006006083\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:82d09873e40955485746739bcb8b4586983670466c23382c19cffecbf1fd8706\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-win32.whl\", hash = \"sha256:43fa96a3ca0d6b1812e01ced1044a003533c47f6ee8aca31724f78e93ccc089a\"},\n    {file = \"PyYAML-6.0.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:01179a4a8559ab5de078078f37e5c1a30d76bb88519906844fd7bdea1b7729ff\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:688ba32a1cffef67fd2e9398a2efebaea461578b0923624778664cc1c914db5d\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a8786accb172bd8afb8be14490a16625cbc387036876ab6ba70912730faf8e1f\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d8e03406cac8513435335dbab54c0d385e4a49e4945d2909a581c83647ca0290\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f753120cb8181e736c57ef7636e83f31b9c0d1722c516f7e86cf15b7aa57ff12\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3b1fdb9dc17f5a7677423d508ab4f243a726dea51fa5e70992e59a7411c89d19\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:0b69e4ce7a131fe56b7e4d770c67429700908fc0752af059838b1cfb41960e4e\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:a9f8c2e67970f13b16084e04f134610fd1d374bf477b17ec1599185cf611d725\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-win32.whl\", hash = \"sha256:6395c297d42274772abc367baaa79683958044e5d3835486c16da75d2a694631\"},\n    {file = \"PyYAML-6.0.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:39693e1f8320ae4f43943590b49779ffb98acb81f788220ea932a6b6c51004d8\"},\n    {file = \"pyyaml-6.0.2.tar.gz\", hash = \"sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e\"},\n]\n\n[[package]]\nname = \"pyyaml-env-tag\"\nversion = \"0.1\"\ndescription = \"A custom YAML tag for referencing environment variables in YAML files. \"\noptional = false\npython-versions = \">=3.6\"\nfiles = [\n    {file = \"pyyaml_env_tag-0.1-py3-none-any.whl\", hash = \"sha256:af31106dec8a4d68c60207c1886031cbf839b68aa7abccdb19868200532c2069\"},\n    {file = \"pyyaml_env_tag-0.1.tar.gz\", hash = \"sha256:70092675bda14fdec33b31ba77e7543de9ddc88f2e5b99160396572d11525bdb\"},\n]\n\n[package.dependencies]\npyyaml = \"*\"\n\n[[package]]\nname = \"regex\"\nversion = \"2024.11.6\"\ndescription = \"Alternative regular expression module, to replace re.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:ff590880083d60acc0433f9c3f713c51f7ac6ebb9adf889c79a261ecf541aa91\"},\n    {file = \"regex-2024.11.6-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:658f90550f38270639e83ce492f27d2c8d2cd63805c65a13a14d36ca126753f0\"},\n    {file = \"regex-2024.11.6-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:164d8b7b3b4bcb2068b97428060b2a53be050085ef94eca7f240e7947f1b080e\"},\n    {file = \"regex-2024.11.6-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d3660c82f209655a06b587d55e723f0b813d3a7db2e32e5e7dc64ac2a9e86fde\"},\n    {file = \"regex-2024.11.6-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d22326fcdef5e08c154280b71163ced384b428343ae16a5ab2b3354aed12436e\"},\n    {file = \"regex-2024.11.6-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f1ac758ef6aebfc8943560194e9fd0fa18bcb34d89fd8bd2af18183afd8da3a2\"},\n    {file = \"regex-2024.11.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:997d6a487ff00807ba810e0f8332c18b4eb8d29463cfb7c820dc4b6e7562d0cf\"},\n    {file = \"regex-2024.11.6-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:02a02d2bb04fec86ad61f3ea7f49c015a0681bf76abb9857f945d26159d2968c\"},\n    {file = \"regex-2024.11.6-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:f02f93b92358ee3f78660e43b4b0091229260c5d5c408d17d60bf26b6c900e86\"},\n    {file = \"regex-2024.11.6-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:06eb1be98df10e81ebaded73fcd51989dcf534e3c753466e4b60c4697a003b67\"},\n    {file = \"regex-2024.11.6-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:040df6fe1a5504eb0f04f048e6d09cd7c7110fef851d7c567a6b6e09942feb7d\"},\n    {file = \"regex-2024.11.6-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:fdabbfc59f2c6edba2a6622c647b716e34e8e3867e0ab975412c5c2f79b82da2\"},\n    {file = \"regex-2024.11.6-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:8447d2d39b5abe381419319f942de20b7ecd60ce86f16a23b0698f22e1b70008\"},\n    {file = \"regex-2024.11.6-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:da8f5fc57d1933de22a9e23eec290a0d8a5927a5370d24bda9a6abe50683fe62\"},\n    {file = \"regex-2024.11.6-cp310-cp310-win32.whl\", hash = \"sha256:b489578720afb782f6ccf2840920f3a32e31ba28a4b162e13900c3e6bd3f930e\"},\n    {file = \"regex-2024.11.6-cp310-cp310-win_amd64.whl\", hash = \"sha256:5071b2093e793357c9d8b2929dfc13ac5f0a6c650559503bb81189d0a3814519\"},\n    {file = \"regex-2024.11.6-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:5478c6962ad548b54a591778e93cd7c456a7a29f8eca9c49e4f9a806dcc5d638\"},\n    {file = \"regex-2024.11.6-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:2c89a8cc122b25ce6945f0423dc1352cb9593c68abd19223eebbd4e56612c5b7\"},\n    {file = \"regex-2024.11.6-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:94d87b689cdd831934fa3ce16cc15cd65748e6d689f5d2b8f4f4df2065c9fa20\"},\n    {file = \"regex-2024.11.6-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1062b39a0a2b75a9c694f7a08e7183a80c63c0d62b301418ffd9c35f55aaa114\"},\n    {file = \"regex-2024.11.6-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:167ed4852351d8a750da48712c3930b031f6efdaa0f22fa1933716bfcd6bf4a3\"},\n    {file = \"regex-2024.11.6-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2d548dafee61f06ebdb584080621f3e0c23fff312f0de1afc776e2a2ba99a74f\"},\n    {file = \"regex-2024.11.6-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f2a19f302cd1ce5dd01a9099aaa19cae6173306d1302a43b627f62e21cf18ac0\"},\n    {file = \"regex-2024.11.6-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:bec9931dfb61ddd8ef2ebc05646293812cb6b16b60cf7c9511a832b6f1854b55\"},\n    {file = \"regex-2024.11.6-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:9714398225f299aa85267fd222f7142fcb5c769e73d7733344efc46f2ef5cf89\"},\n    {file = \"regex-2024.11.6-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:202eb32e89f60fc147a41e55cb086db2a3f8cb82f9a9a88440dcfc5d37faae8d\"},\n    {file = \"regex-2024.11.6-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:4181b814e56078e9b00427ca358ec44333765f5ca1b45597ec7446d3a1ef6e34\"},\n    {file = \"regex-2024.11.6-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:068376da5a7e4da51968ce4c122a7cd31afaaec4fccc7856c92f63876e57b51d\"},\n    {file = \"regex-2024.11.6-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:ac10f2c4184420d881a3475fb2c6f4d95d53a8d50209a2500723d831036f7c45\"},\n    {file = \"regex-2024.11.6-cp311-cp311-win32.whl\", hash = \"sha256:c36f9b6f5f8649bb251a5f3f66564438977b7ef8386a52460ae77e6070d309d9\"},\n    {file = \"regex-2024.11.6-cp311-cp311-win_amd64.whl\", hash = \"sha256:02e28184be537f0e75c1f9b2f8847dc51e08e6e171c6bde130b2687e0c33cf60\"},\n    {file = \"regex-2024.11.6-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:52fb28f528778f184f870b7cf8f225f5eef0a8f6e3778529bdd40c7b3920796a\"},\n    {file = \"regex-2024.11.6-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:fdd6028445d2460f33136c55eeb1f601ab06d74cb3347132e1c24250187500d9\"},\n    {file = \"regex-2024.11.6-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:805e6b60c54bf766b251e94526ebad60b7de0c70f70a4e6210ee2891acb70bf2\"},\n    {file = \"regex-2024.11.6-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b85c2530be953a890eaffde05485238f07029600e8f098cdf1848d414a8b45e4\"},\n    {file = \"regex-2024.11.6-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:bb26437975da7dc36b7efad18aa9dd4ea569d2357ae6b783bf1118dabd9ea577\"},\n    {file = \"regex-2024.11.6-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:abfa5080c374a76a251ba60683242bc17eeb2c9818d0d30117b4486be10c59d3\"},\n    {file = \"regex-2024.11.6-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:70b7fa6606c2881c1db9479b0eaa11ed5dfa11c8d60a474ff0e095099f39d98e\"},\n    {file = \"regex-2024.11.6-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0c32f75920cf99fe6b6c539c399a4a128452eaf1af27f39bce8909c9a3fd8cbe\"},\n    {file = \"regex-2024.11.6-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:982e6d21414e78e1f51cf595d7f321dcd14de1f2881c5dc6a6e23bbbbd68435e\"},\n    {file = \"regex-2024.11.6-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:a7c2155f790e2fb448faed6dd241386719802296ec588a8b9051c1f5c481bc29\"},\n    {file = \"regex-2024.11.6-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:149f5008d286636e48cd0b1dd65018548944e495b0265b45e1bffecce1ef7f39\"},\n    {file = \"regex-2024.11.6-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:e5364a4502efca094731680e80009632ad6624084aff9a23ce8c8c6820de3e51\"},\n    {file = \"regex-2024.11.6-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:0a86e7eeca091c09e021db8eb72d54751e527fa47b8d5787caf96d9831bd02ad\"},\n    {file = \"regex-2024.11.6-cp312-cp312-win32.whl\", hash = \"sha256:32f9a4c643baad4efa81d549c2aadefaeba12249b2adc5af541759237eee1c54\"},\n    {file = \"regex-2024.11.6-cp312-cp312-win_amd64.whl\", hash = \"sha256:a93c194e2df18f7d264092dc8539b8ffb86b45b899ab976aa15d48214138e81b\"},\n    {file = \"regex-2024.11.6-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:a6ba92c0bcdf96cbf43a12c717eae4bc98325ca3730f6b130ffa2e3c3c723d84\"},\n    {file = \"regex-2024.11.6-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:525eab0b789891ac3be914d36893bdf972d483fe66551f79d3e27146191a37d4\"},\n    {file = \"regex-2024.11.6-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:086a27a0b4ca227941700e0b31425e7a28ef1ae8e5e05a33826e17e47fbfdba0\"},\n    {file = \"regex-2024.11.6-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bde01f35767c4a7899b7eb6e823b125a64de314a8ee9791367c9a34d56af18d0\"},\n    {file = \"regex-2024.11.6-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b583904576650166b3d920d2bcce13971f6f9e9a396c673187f49811b2769dc7\"},\n    {file = \"regex-2024.11.6-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1c4de13f06a0d54fa0d5ab1b7138bfa0d883220965a29616e3ea61b35d5f5fc7\"},\n    {file = \"regex-2024.11.6-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3cde6e9f2580eb1665965ce9bf17ff4952f34f5b126beb509fee8f4e994f143c\"},\n    {file = \"regex-2024.11.6-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0d7f453dca13f40a02b79636a339c5b62b670141e63efd511d3f8f73fba162b3\"},\n    {file = \"regex-2024.11.6-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:59dfe1ed21aea057a65c6b586afd2a945de04fc7db3de0a6e3ed5397ad491b07\"},\n    {file = \"regex-2024.11.6-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:b97c1e0bd37c5cd7902e65f410779d39eeda155800b65fc4d04cc432efa9bc6e\"},\n    {file = \"regex-2024.11.6-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:f9d1e379028e0fc2ae3654bac3cbbef81bf3fd571272a42d56c24007979bafb6\"},\n    {file = \"regex-2024.11.6-cp313-cp313-musllinux_1_2_s390x.whl\", hash = \"sha256:13291b39131e2d002a7940fb176e120bec5145f3aeb7621be6534e46251912c4\"},\n    {file = \"regex-2024.11.6-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:4f51f88c126370dcec4908576c5a627220da6c09d0bff31cfa89f2523843316d\"},\n    {file = \"regex-2024.11.6-cp313-cp313-win32.whl\", hash = \"sha256:63b13cfd72e9601125027202cad74995ab26921d8cd935c25f09c630436348ff\"},\n    {file = \"regex-2024.11.6-cp313-cp313-win_amd64.whl\", hash = \"sha256:2b3361af3198667e99927da8b84c1b010752fa4b1115ee30beaa332cabc3ef1a\"},\n    {file = \"regex-2024.11.6-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:3a51ccc315653ba012774efca4f23d1d2a8a8f278a6072e29c7147eee7da446b\"},\n    {file = \"regex-2024.11.6-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:ad182d02e40de7459b73155deb8996bbd8e96852267879396fb274e8700190e3\"},\n    {file = \"regex-2024.11.6-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:ba9b72e5643641b7d41fa1f6d5abda2c9a263ae835b917348fc3c928182ad467\"},\n    {file = \"regex-2024.11.6-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:40291b1b89ca6ad8d3f2b82782cc33807f1406cf68c8d440861da6304d8ffbbd\"},\n    {file = \"regex-2024.11.6-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:cdf58d0e516ee426a48f7b2c03a332a4114420716d55769ff7108c37a09951bf\"},\n    {file = \"regex-2024.11.6-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a36fdf2af13c2b14738f6e973aba563623cb77d753bbbd8d414d18bfaa3105dd\"},\n    {file = \"regex-2024.11.6-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d1cee317bfc014c2419a76bcc87f071405e3966da434e03e13beb45f8aced1a6\"},\n    {file = \"regex-2024.11.6-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:50153825ee016b91549962f970d6a4442fa106832e14c918acd1c8e479916c4f\"},\n    {file = \"regex-2024.11.6-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:ea1bfda2f7162605f6e8178223576856b3d791109f15ea99a9f95c16a7636fb5\"},\n    {file = \"regex-2024.11.6-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:df951c5f4a1b1910f1a99ff42c473ff60f8225baa1cdd3539fe2819d9543e9df\"},\n    {file = \"regex-2024.11.6-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:072623554418a9911446278f16ecb398fb3b540147a7828c06e2011fa531e773\"},\n    {file = \"regex-2024.11.6-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:f654882311409afb1d780b940234208a252322c24a93b442ca714d119e68086c\"},\n    {file = \"regex-2024.11.6-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:89d75e7293d2b3e674db7d4d9b1bee7f8f3d1609428e293771d1a962617150cc\"},\n    {file = \"regex-2024.11.6-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:f65557897fc977a44ab205ea871b690adaef6b9da6afda4790a2484b04293a5f\"},\n    {file = \"regex-2024.11.6-cp38-cp38-win32.whl\", hash = \"sha256:6f44ec28b1f858c98d3036ad5d7d0bfc568bdd7a74f9c24e25f41ef1ebfd81a4\"},\n    {file = \"regex-2024.11.6-cp38-cp38-win_amd64.whl\", hash = \"sha256:bb8f74f2f10dbf13a0be8de623ba4f9491faf58c24064f32b65679b021ed0001\"},\n    {file = \"regex-2024.11.6-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:5704e174f8ccab2026bd2f1ab6c510345ae8eac818b613d7d73e785f1310f839\"},\n    {file = \"regex-2024.11.6-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:220902c3c5cc6af55d4fe19ead504de80eb91f786dc102fbd74894b1551f095e\"},\n    {file = \"regex-2024.11.6-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:5e7e351589da0850c125f1600a4c4ba3c722efefe16b297de54300f08d734fbf\"},\n    {file = \"regex-2024.11.6-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5056b185ca113c88e18223183aa1a50e66507769c9640a6ff75859619d73957b\"},\n    {file = \"regex-2024.11.6-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2e34b51b650b23ed3354b5a07aab37034d9f923db2a40519139af34f485f77d0\"},\n    {file = \"regex-2024.11.6-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5670bce7b200273eee1840ef307bfa07cda90b38ae56e9a6ebcc9f50da9c469b\"},\n    {file = \"regex-2024.11.6-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:08986dce1339bc932923e7d1232ce9881499a0e02925f7402fb7c982515419ef\"},\n    {file = \"regex-2024.11.6-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:93c0b12d3d3bc25af4ebbf38f9ee780a487e8bf6954c115b9f015822d3bb8e48\"},\n    {file = \"regex-2024.11.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:764e71f22ab3b305e7f4c21f1a97e1526a25ebdd22513e251cf376760213da13\"},\n    {file = \"regex-2024.11.6-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:f056bf21105c2515c32372bbc057f43eb02aae2fda61052e2f7622c801f0b4e2\"},\n    {file = \"regex-2024.11.6-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:69ab78f848845569401469da20df3e081e6b5a11cb086de3eed1d48f5ed57c95\"},\n    {file = \"regex-2024.11.6-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:86fddba590aad9208e2fa8b43b4c098bb0ec74f15718bb6a704e3c63e2cef3e9\"},\n    {file = \"regex-2024.11.6-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:684d7a212682996d21ca12ef3c17353c021fe9de6049e19ac8481ec35574a70f\"},\n    {file = \"regex-2024.11.6-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:a03e02f48cd1abbd9f3b7e3586d97c8f7a9721c436f51a5245b3b9483044480b\"},\n    {file = \"regex-2024.11.6-cp39-cp39-win32.whl\", hash = \"sha256:41758407fc32d5c3c5de163888068cfee69cb4c2be844e7ac517a52770f9af57\"},\n    {file = \"regex-2024.11.6-cp39-cp39-win_amd64.whl\", hash = \"sha256:b2837718570f95dd41675328e111345f9b7095d821bac435aac173ac80b19983\"},\n    {file = \"regex-2024.11.6.tar.gz\", hash = \"sha256:7ab159b063c52a0333c884e4679f8d7a85112ee3078fe3d9004b2dd875585519\"},\n]\n\n[[package]]\nname = \"requests\"\nversion = \"2.32.3\"\ndescription = \"Python HTTP for Humans.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"requests-2.32.3-py3-none-any.whl\", hash = \"sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\"},\n    {file = \"requests-2.32.3.tar.gz\", hash = \"sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"},\n]\n\n[package.dependencies]\ncertifi = \">=2017.4.17\"\ncharset-normalizer = \">=2,<4\"\nidna = \">=2.5,<4\"\nurllib3 = \">=1.21.1,<3\"\n\n[package.extras]\nsocks = [\"PySocks (>=1.5.6,!=1.5.7)\"]\nuse-chardet-on-py3 = [\"chardet (>=3.0.2,<6)\"]\n\n[[package]]\nname = \"rich\"\nversion = \"13.9.4\"\ndescription = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\noptional = false\npython-versions = \">=3.8.0\"\nfiles = [\n    {file = \"rich-13.9.4-py3-none-any.whl\", hash = \"sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90\"},\n    {file = \"rich-13.9.4.tar.gz\", hash = \"sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098\"},\n]\n\n[package.dependencies]\nmarkdown-it-py = \">=2.2.0\"\npygments = \">=2.13.0,<3.0.0\"\ntyping-extensions = {version = \">=4.0.0,<5.0\", markers = \"python_version < \\\"3.11\\\"\"}\n\n[package.extras]\njupyter = [\"ipywidgets (>=7.5.1,<9)\"]\n\n[[package]]\nname = \"ropgadget\"\nversion = \"7.3\"\ndescription = \"This tool lets you search your gadgets on your binaries to facilitate your ROP exploitation.\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"ROPGadget-7.3-py2-none-any.whl\", hash = \"sha256:67e904a0fada60b26c3cfcf3ce53970e8d92704ba895c1751ea4877923761582\"},\n    {file = \"ROPGadget-7.3-py3-none-any.whl\", hash = \"sha256:1e2cb62cc161bc235db09d2a017b5abaabe386e8919a2ee978725aa3382e967a\"},\n    {file = \"ROPGadget-7.3.tar.gz\", hash = \"sha256:4078e70601a2dc869123dfa352812dcc44767a4bbde482b7059d34b33bb67850\"},\n]\n\n[package.dependencies]\ncapstone = \">=5.0.0rc2\"\n\n[[package]]\nname = \"rpyc\"\nversion = \"6.0.1\"\ndescription = \"Remote Python Call (RPyC) is a transparent and symmetric distributed computing library\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"rpyc-6.0.1-py3-none-any.whl\", hash = \"sha256:e4124c81e65efc4e498842624394b86305eeee64d9647e0808a2862212bac803\"},\n    {file = \"rpyc-6.0.1.tar.gz\", hash = \"sha256:8a60f3c4401f309c0eb6e754fb6c4e0442231203907cebf61ae74615b52cd38a\"},\n]\n\n[package.dependencies]\nplumbum = \"*\"\n\n[[package]]\nname = \"ruff\"\nversion = \"0.4.10\"\ndescription = \"An extremely fast Python linter and code formatter, written in Rust.\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"ruff-0.4.10-py3-none-macosx_10_12_x86_64.whl\", hash = \"sha256:5c2c4d0859305ac5a16310eec40e4e9a9dec5dcdfbe92697acd99624e8638dac\"},\n    {file = \"ruff-0.4.10-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:a79489607d1495685cdd911a323a35871abfb7a95d4f98fc6f85e799227ac46e\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b1dd1681dfa90a41b8376a61af05cc4dc5ff32c8f14f5fe20dba9ff5deb80cd6\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:c75c53bb79d71310dc79fb69eb4902fba804a81f374bc86a9b117a8d077a1784\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:18238c80ee3d9100d3535d8eb15a59c4a0753b45cc55f8bf38f38d6a597b9739\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\", hash = \"sha256:d8f71885bce242da344989cae08e263de29752f094233f932d4f5cfb4ef36a81\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:330421543bd3222cdfec481e8ff3460e8702ed1e58b494cf9d9e4bf90db52b9d\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:9e9b6fb3a37b772628415b00c4fc892f97954275394ed611056a4b8a2631365e\"},\n    {file = \"ruff-0.4.10-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0f54c481b39a762d48f64d97351048e842861c6662d63ec599f67d515cb417f6\"},\n    {file = \"ruff-0.4.10-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:67fe086b433b965c22de0b4259ddfe6fa541c95bf418499bedb9ad5fb8d1c631\"},\n    {file = \"ruff-0.4.10-py3-none-musllinux_1_2_armv7l.whl\", hash = \"sha256:acfaaab59543382085f9eb51f8e87bac26bf96b164839955f244d07125a982ef\"},\n    {file = \"ruff-0.4.10-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:3cea07079962b2941244191569cf3a05541477286f5cafea638cd3aa94b56815\"},\n    {file = \"ruff-0.4.10-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:338a64ef0748f8c3a80d7f05785930f7965d71ca260904a9321d13be24b79695\"},\n    {file = \"ruff-0.4.10-py3-none-win32.whl\", hash = \"sha256:ffe3cd2f89cb54561c62e5fa20e8f182c0a444934bf430515a4b422f1ab7b7ca\"},\n    {file = \"ruff-0.4.10-py3-none-win_amd64.whl\", hash = \"sha256:67f67cef43c55ffc8cc59e8e0b97e9e60b4837c8f21e8ab5ffd5d66e196e25f7\"},\n    {file = \"ruff-0.4.10-py3-none-win_arm64.whl\", hash = \"sha256:dd1fcee327c20addac7916ca4e2653fbbf2e8388d8a6477ce5b4e986b68ae6c0\"},\n    {file = \"ruff-0.4.10.tar.gz\", hash = \"sha256:3aa4f2bc388a30d346c56524f7cacca85945ba124945fe489952aadb6b5cd804\"},\n]\n\n[[package]]\nname = \"setuptools\"\nversion = \"70.3.0\"\ndescription = \"Easily download, build, install, upgrade, and uninstall Python packages\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"setuptools-70.3.0-py3-none-any.whl\", hash = \"sha256:fe384da74336c398e0d956d1cae0669bc02eed936cdb1d49b57de1990dc11ffc\"},\n    {file = \"setuptools-70.3.0.tar.gz\", hash = \"sha256:f171bab1dfbc86b132997f26a119f6056a57950d058587841a0082e8830f9dc5\"},\n]\n\n[package.extras]\ndoc = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"pygments-github-lexers (==0.0.5)\", \"pyproject-hooks (!=1.1)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-favicon\", \"sphinx-inline-tabs\", \"sphinx-lint\", \"sphinx-notfound-page (>=1,<2)\", \"sphinx-reredirects\", \"sphinxcontrib-towncrier\"]\ntest = [\"build[virtualenv] (>=1.0.3)\", \"filelock (>=3.4.0)\", \"importlib-metadata\", \"ini2toml[lite] (>=0.14)\", \"jaraco.develop (>=7.21)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"jaraco.test\", \"mypy (==1.10.0)\", \"packaging (>=23.2)\", \"pip (>=19.1)\", \"pyproject-hooks (!=1.1)\", \"pytest (>=6,!=8.1.*)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-home (>=0.5)\", \"pytest-mypy\", \"pytest-perf\", \"pytest-ruff (>=0.3.2)\", \"pytest-subprocess\", \"pytest-timeout\", \"pytest-xdist (>=3)\", \"tomli\", \"tomli-w (>=1.0.0)\", \"virtualenv (>=13.0.0)\", \"wheel\"]\n\n[[package]]\nname = \"six\"\nversion = \"1.16.0\"\ndescription = \"Python 2 and 3 compatibility utilities\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"\nfiles = [\n    {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},\n    {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},\n]\n\n[[package]]\nname = \"smmap\"\nversion = \"5.0.1\"\ndescription = \"A pure Python implementation of a sliding window memory map manager\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"smmap-5.0.1-py3-none-any.whl\", hash = \"sha256:e6d8668fa5f93e706934a62d7b4db19c8d9eb8cf2adbb75ef1b675aa332b69da\"},\n    {file = \"smmap-5.0.1.tar.gz\", hash = \"sha256:dceeb6c0028fdb6734471eb07c0cd2aae706ccaecab45965ee83f11c8d3b1f62\"},\n]\n\n[[package]]\nname = \"sortedcontainers\"\nversion = \"2.4.0\"\ndescription = \"Sorted Containers -- Sorted List, Sorted Dict, Sorted Set\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"sortedcontainers-2.4.0-py2.py3-none-any.whl\", hash = \"sha256:a163dcaede0f1c021485e957a39245190e74249897e2ae4b2aa38595db237ee0\"},\n    {file = \"sortedcontainers-2.4.0.tar.gz\", hash = \"sha256:25caa5a06cc30b6b83d11423433f65d1f9d76c4c6a0c90e3379eaa43b9bfdb88\"},\n]\n\n[[package]]\nname = \"sortedcontainers-stubs\"\nversion = \"2.4.2\"\ndescription = \"Type stubs for sortedcontainers\"\noptional = false\npython-versions = \">=3.8,<4.0\"\nfiles = [\n    {file = \"sortedcontainers_stubs-2.4.2-py3-none-any.whl\", hash = \"sha256:6cdbcf9c71198729dd6c0a8a7dc9742768f25b49384b91965d716a9d16ca7b2a\"},\n    {file = \"sortedcontainers_stubs-2.4.2.tar.gz\", hash = \"sha256:c24e33877effa5a3eb85357112496ba33a0b681c05e0d5d3745664fd3be75d82\"},\n]\n\n[package.dependencies]\nsortedcontainers = \">=2,<3\"\ntyping-extensions = \">=4.1.0,<5.0.0\"\n\n[[package]]\nname = \"stack-data\"\nversion = \"0.6.3\"\ndescription = \"Extract data from python stack frames and tracebacks for informative displays\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"stack_data-0.6.3-py3-none-any.whl\", hash = \"sha256:d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695\"},\n    {file = \"stack_data-0.6.3.tar.gz\", hash = \"sha256:836a778de4fec4dcd1dcd89ed8abff8a221f58308462e1c4aa2a3cf30148f0b9\"},\n]\n\n[package.dependencies]\nasttokens = \">=2.1.0\"\nexecuting = \">=1.2.0\"\npure-eval = \"*\"\n\n[package.extras]\ntests = [\"cython\", \"littleutils\", \"pygments\", \"pytest\", \"typeguard\"]\n\n[[package]]\nname = \"tabulate\"\nversion = \"0.9.0\"\ndescription = \"Pretty-print tabular data\"\noptional = false\npython-versions = \">=3.7\"\nfiles = [\n    {file = \"tabulate-0.9.0-py3-none-any.whl\", hash = \"sha256:024ca478df22e9340661486f85298cff5f6dcdba14f3813e8830015b9ed1948f\"},\n    {file = \"tabulate-0.9.0.tar.gz\", hash = \"sha256:0095b12bf5966de529c0feb1fa08671671b3368eec77d7ef7ab114be2c068b3c\"},\n]\n\n[package.extras]\nwidechars = [\"wcwidth\"]\n\n[[package]]\nname = \"testresources\"\nversion = \"2.0.1\"\ndescription = \"Testresources, a pyunit extension for managing expensive test resources\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"testresources-2.0.1-py2.py3-none-any.whl\", hash = \"sha256:67a361c3a2412231963b91ab04192209aa91a1aa052f0ab87245dbea889d1282\"},\n    {file = \"testresources-2.0.1.tar.gz\", hash = \"sha256:ee9d1982154a1e212d4e4bac6b610800bfb558e4fb853572a827bc14a96e4417\"},\n]\n\n[package.dependencies]\npbr = \">=1.8\"\n\n[package.extras]\ntest = [\"docutils\", \"fixtures\", \"testtools\"]\n\n[[package]]\nname = \"tomli\"\nversion = \"2.1.0\"\ndescription = \"A lil' TOML parser\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"tomli-2.1.0-py3-none-any.whl\", hash = \"sha256:a5c57c3d1c56f5ccdf89f6523458f60ef716e210fc47c4cfb188c5ba473e0391\"},\n    {file = \"tomli-2.1.0.tar.gz\", hash = \"sha256:3f646cae2aec94e17d04973e4249548320197cfabdf130015d023de4b74d8ab8\"},\n]\n\n[[package]]\nname = \"traitlets\"\nversion = \"5.14.3\"\ndescription = \"Traitlets Python configuration system\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"traitlets-5.14.3-py3-none-any.whl\", hash = \"sha256:b74e89e397b1ed28cc831db7aea759ba6640cb3de13090ca145426688ff1ac4f\"},\n    {file = \"traitlets-5.14.3.tar.gz\", hash = \"sha256:9ed0579d3502c94b4b3732ac120375cda96f923114522847de4b3bb98b96b6b7\"},\n]\n\n[package.extras]\ndocs = [\"myst-parser\", \"pydata-sphinx-theme\", \"sphinx\"]\ntest = [\"argcomplete (>=3.0.3)\", \"mypy (>=1.7.0)\", \"pre-commit\", \"pytest (>=7.0,<8.2)\", \"pytest-mock\", \"pytest-mypy-testing\"]\n\n[[package]]\nname = \"types-docutils\"\nversion = \"0.21.0.20241005\"\ndescription = \"Typing stubs for docutils\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types-docutils-0.21.0.20241005.tar.gz\", hash = \"sha256:48f804a2b50da3a1b1681c4ca1b6184416a6e4129e302d15c44e9d97c59b3365\"},\n    {file = \"types_docutils-0.21.0.20241005-py3-none-any.whl\", hash = \"sha256:4d9021422f2f3fca8b0726fb8949395f66a06c0d951479eb3b1387d75b134430\"},\n]\n\n[[package]]\nname = \"types-gdb\"\nversion = \"12.1.4.20240704\"\ndescription = \"Typing stubs for gdb\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types-gdb-12.1.4.20240704.tar.gz\", hash = \"sha256:0b537f6acf8339e82dc92388aad057a30c83d89105cd820cf5dc948d6debce10\"},\n    {file = \"types_gdb-12.1.4.20240704-py3-none-any.whl\", hash = \"sha256:da273ebf395ded84ea12745ef70d0c1560694c26b6d9c04575d500a74929fed1\"},\n]\n\n[[package]]\nname = \"types-psutil\"\nversion = \"5.9.5.20240516\"\ndescription = \"Typing stubs for psutil\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types-psutil-5.9.5.20240516.tar.gz\", hash = \"sha256:bb296f59fc56458891d0feb1994717e548a1bcf89936a2877df8792b822b4696\"},\n    {file = \"types_psutil-5.9.5.20240516-py3-none-any.whl\", hash = \"sha256:83146ded949a10167d9895e567b3b71e53ebc5e23fd8363eab62b3c76cce7b89\"},\n]\n\n[[package]]\nname = \"types-pygments\"\nversion = \"2.18.0.20240506\"\ndescription = \"Typing stubs for Pygments\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types-Pygments-2.18.0.20240506.tar.gz\", hash = \"sha256:4b4c37812c87bbde687dbf27adf5bac593745a321e57f678dbc311571ba2ac9d\"},\n    {file = \"types_Pygments-2.18.0.20240506-py3-none-any.whl\", hash = \"sha256:11c90bc1737c9af55e5569558b88df7c2233e12325cb516215f722271444e91d\"},\n]\n\n[package.dependencies]\ntypes-docutils = \"*\"\ntypes-setuptools = \"*\"\n\n[[package]]\nname = \"types-requests\"\nversion = \"2.32.0.20241016\"\ndescription = \"Typing stubs for requests\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types-requests-2.32.0.20241016.tar.gz\", hash = \"sha256:0d9cad2f27515d0e3e3da7134a1b6f28fb97129d86b867f24d9c726452634d95\"},\n    {file = \"types_requests-2.32.0.20241016-py3-none-any.whl\", hash = \"sha256:4195d62d6d3e043a4eaaf08ff8a62184584d2e8684e9d2aa178c7915a7da3747\"},\n]\n\n[package.dependencies]\nurllib3 = \">=2\"\n\n[[package]]\nname = \"types-setuptools\"\nversion = \"75.5.0.20241122\"\ndescription = \"Typing stubs for setuptools\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types_setuptools-75.5.0.20241122-py3-none-any.whl\", hash = \"sha256:d69c445f7bdd5e49d1b2441aadcee1388febcc9ad9d9d5fd33648b555e0b1c31\"},\n    {file = \"types_setuptools-75.5.0.20241122.tar.gz\", hash = \"sha256:196aaf1811cbc1c77ac1d4c4879d5308b6fdf426e56b73baadbca2a1827dadef\"},\n]\n\n[[package]]\nname = \"types-tabulate\"\nversion = \"0.9.0.20240106\"\ndescription = \"Typing stubs for tabulate\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"types-tabulate-0.9.0.20240106.tar.gz\", hash = \"sha256:c9b6db10dd7fcf55bd1712dd3537f86ddce72a08fd62bb1af4338c7096ce947e\"},\n    {file = \"types_tabulate-0.9.0.20240106-py3-none-any.whl\", hash = \"sha256:0378b7b6fe0ccb4986299496d027a6d4c218298ecad67199bbd0e2d7e9d335a1\"},\n]\n\n[[package]]\nname = \"typing-extensions\"\nversion = \"4.12.2\"\ndescription = \"Backported and Experimental Type Hints for Python 3.8+\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"typing_extensions-4.12.2-py3-none-any.whl\", hash = \"sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d\"},\n    {file = \"typing_extensions-4.12.2.tar.gz\", hash = \"sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\"},\n]\n\n[[package]]\nname = \"tzdata\"\nversion = \"2024.2\"\ndescription = \"Provider of IANA time zone data\"\noptional = false\npython-versions = \">=2\"\nfiles = [\n    {file = \"tzdata-2024.2-py2.py3-none-any.whl\", hash = \"sha256:a48093786cdcde33cad18c2555e8532f34422074448fbc874186f0abd79565cd\"},\n    {file = \"tzdata-2024.2.tar.gz\", hash = \"sha256:7d85cc416e9382e69095b7bdf4afd9e3880418a2413feec7069d533d6b4e31cc\"},\n]\n\n[[package]]\nname = \"unicorn\"\nversion = \"2.1.1\"\ndescription = \"Unicorn CPU emulator engine\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"unicorn-2.1.1-py2.py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:8839c02de1914acb9decb291f89eefb2944148460cf5f09a9a1cde920e32e509\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-macosx_12_7_x86_64.whl\", hash = \"sha256:a52470664a6fe76f735943de5c90865ef049e23522dd1751306fefe2384e5dba\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:13e7fb410a4258522dbc5482d24949f1a89d4f113bc7fd30d523cdad1e543c3f\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-manylinux1_i686.whl\", hash = \"sha256:8b890ad01ec49bae78b6419dbd11caae18c5398a26086c4b0800943efb15963c\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b0f139adb1c9406f57d25cab96ad7a6d3cbb9119f5480ebecedd4f5d7cb024fb\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-manylinux1_x86_64.musllinux_1_2_x86_64.whl\", hash = \"sha256:d4a08dbf222c5481bc909a9aa404b79874f6e67f5ba7c47036d03c68ab7371a7\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-manylinux1_x86_64.whl\", hash = \"sha256:2163d6b2803fbb2f4df79e845ecccc2803c712c200cf8910548d60fd0cbbb18e\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-manylinux2014_aarch64.whl\", hash = \"sha256:06df71752e147107680df7f841360a70cc1ae1f69438dbdc3a87e642fd21eb49\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-win32.whl\", hash = \"sha256:8e995ed3abd508258e8864ec1b002c3e4992ae5dc98c6ac2420935b7c04a0c6b\"},\n    {file = \"unicorn-2.1.1-py2.py3-none-win_amd64.whl\", hash = \"sha256:f0ebcfaba67ef0ebcd05ee3560268f1c6f683bdd08ff496888741a163d29735d\"},\n    {file = \"unicorn-2.1.1.tar.gz\", hash = \"sha256:904f4146b09cd708fdf6b90ebb48d30eaa0ba339382964d4d08c0b9399cf4ba3\"},\n]\n\n[[package]]\nname = \"unix-ar\"\nversion = \"0.2.1\"\ndescription = \"AR file handling\"\noptional = false\npython-versions = \"~=3.6\"\nfiles = [\n    {file = \"unix_ar-0.2.1-py2.py3-none-any.whl\", hash = \"sha256:2acb718bc1308bf80e5b9da2614d8242cc2fe3be4cd8b2fd4719bce189aafcf1\"},\n    {file = \"unix_ar-0.2.1.tar.gz\", hash = \"sha256:bf9328ec70fa3a82f94dc26dc125264dbf62a2d8ffb1a3c8c8a8230175e72c4e\"},\n]\n\n[[package]]\nname = \"urllib3\"\nversion = \"2.2.3\"\ndescription = \"HTTP library with thread-safe connection pooling, file post, and more.\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"urllib3-2.2.3-py3-none-any.whl\", hash = \"sha256:ca899ca043dcb1bafa3e262d73aa25c465bfb49e0bd9dd5d59f1d0acba2f8fac\"},\n    {file = \"urllib3-2.2.3.tar.gz\", hash = \"sha256:e7d814a81dad81e6caf2ec9fdedb284ecc9c73076b62654547cc64ccdcae26e9\"},\n]\n\n[package.extras]\nbrotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\"]\nh2 = [\"h2 (>=4,<5)\"]\nsocks = [\"pysocks (>=1.5.6,!=1.5.7,<2.0)\"]\nzstd = [\"zstandard (>=0.18.0)\"]\n\n[[package]]\nname = \"vermin\"\nversion = \"1.6.0\"\ndescription = \"Concurrently detect the minimum Python versions needed to run code\"\noptional = false\npython-versions = \">=3.0\"\nfiles = [\n    {file = \"vermin-1.6.0-py2.py3-none-any.whl\", hash = \"sha256:f1fa9ee40f59983dc40e0477eb2b1fa8061a3df4c3b2bcf349add462a5610efb\"},\n    {file = \"vermin-1.6.0.tar.gz\", hash = \"sha256:6266ca02f55d1c2aa189a610017c132eb2d1934f09e72a955b1eb3820ee6d4ef\"},\n]\n\n[[package]]\nname = \"watchdog\"\nversion = \"6.0.0\"\ndescription = \"Filesystem events monitoring\"\noptional = false\npython-versions = \">=3.9\"\nfiles = [\n    {file = \"watchdog-6.0.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d1cdb490583ebd691c012b3d6dae011000fe42edb7a82ece80965b42abd61f26\"},\n    {file = \"watchdog-6.0.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:bc64ab3bdb6a04d69d4023b29422170b74681784ffb9463ed4870cf2f3e66112\"},\n    {file = \"watchdog-6.0.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c897ac1b55c5a1461e16dae288d22bb2e412ba9807df8397a635d88f671d36c3\"},\n    {file = \"watchdog-6.0.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:6eb11feb5a0d452ee41f824e271ca311a09e250441c262ca2fd7ebcf2461a06c\"},\n    {file = \"watchdog-6.0.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:ef810fbf7b781a5a593894e4f439773830bdecb885e6880d957d5b9382a960d2\"},\n    {file = \"watchdog-6.0.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:afd0fe1b2270917c5e23c2a65ce50c2a4abb63daafb0d419fde368e272a76b7c\"},\n    {file = \"watchdog-6.0.0-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:bdd4e6f14b8b18c334febb9c4425a878a2ac20efd1e0b231978e7b150f92a948\"},\n    {file = \"watchdog-6.0.0-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:c7c15dda13c4eb00d6fb6fc508b3c0ed88b9d5d374056b239c4ad1611125c860\"},\n    {file = \"watchdog-6.0.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:6f10cb2d5902447c7d0da897e2c6768bca89174d0c6e1e30abec5421af97a5b0\"},\n    {file = \"watchdog-6.0.0-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:490ab2ef84f11129844c23fb14ecf30ef3d8a6abafd3754a6f75ca1e6654136c\"},\n    {file = \"watchdog-6.0.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:76aae96b00ae814b181bb25b1b98076d5fc84e8a53cd8885a318b42b6d3a5134\"},\n    {file = \"watchdog-6.0.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:a175f755fc2279e0b7312c0035d52e27211a5bc39719dd529625b1930917345b\"},\n    {file = \"watchdog-6.0.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:e6f0e77c9417e7cd62af82529b10563db3423625c5fce018430b249bf977f9e8\"},\n    {file = \"watchdog-6.0.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:90c8e78f3b94014f7aaae121e6b909674df5b46ec24d6bebc45c44c56729af2a\"},\n    {file = \"watchdog-6.0.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:e7631a77ffb1f7d2eefa4445ebbee491c720a5661ddf6df3498ebecae5ed375c\"},\n    {file = \"watchdog-6.0.0-pp310-pypy310_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:c7ac31a19f4545dd92fc25d200694098f42c9a8e391bc00bdd362c5736dbf881\"},\n    {file = \"watchdog-6.0.0-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:9513f27a1a582d9808cf21a07dae516f0fab1cf2d7683a742c498b93eedabb11\"},\n    {file = \"watchdog-6.0.0-pp39-pypy39_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:7a0e56874cfbc4b9b05c60c8a1926fedf56324bb08cfbc188969777940aef3aa\"},\n    {file = \"watchdog-6.0.0-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:e6439e374fc012255b4ec786ae3c4bc838cd7309a540e5fe0952d03687d8804e\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_aarch64.whl\", hash = \"sha256:7607498efa04a3542ae3e05e64da8202e58159aa1fa4acddf7678d34a35d4f13\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_armv7l.whl\", hash = \"sha256:9041567ee8953024c83343288ccc458fd0a2d811d6a0fd68c4c22609e3490379\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_i686.whl\", hash = \"sha256:82dc3e3143c7e38ec49d61af98d6558288c415eac98486a5c581726e0737c00e\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_ppc64.whl\", hash = \"sha256:212ac9b8bf1161dc91bd09c048048a95ca3a4c4f5e5d4a7d1b1a7d5752a7f96f\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_ppc64le.whl\", hash = \"sha256:e3df4cbb9a450c6d49318f6d14f4bbc80d763fa587ba46ec86f99f9e6876bb26\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_s390x.whl\", hash = \"sha256:2cce7cfc2008eb51feb6aab51251fd79b85d9894e98ba847408f662b3395ca3c\"},\n    {file = \"watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:20ffe5b202af80ab4266dcd3e91aae72bf2da48c0d33bdb15c66658e685e94e2\"},\n    {file = \"watchdog-6.0.0-py3-none-win32.whl\", hash = \"sha256:07df1fdd701c5d4c8e55ef6cf55b8f0120fe1aef7ef39a1c6fc6bc2e606d517a\"},\n    {file = \"watchdog-6.0.0-py3-none-win_amd64.whl\", hash = \"sha256:cbafb470cf848d93b5d013e2ecb245d4aa1c8fd0504e863ccefa32445359d680\"},\n    {file = \"watchdog-6.0.0-py3-none-win_ia64.whl\", hash = \"sha256:a1914259fa9e1454315171103c6a30961236f508b9b623eae470268bbcc6a22f\"},\n    {file = \"watchdog-6.0.0.tar.gz\", hash = \"sha256:9ddf7c82fda3ae8e24decda1338ede66e1c99883db93711d8fb941eaa2d8c282\"},\n]\n\n[package.extras]\nwatchmedo = [\"PyYAML (>=3.10)\"]\n\n[[package]]\nname = \"wcwidth\"\nversion = \"0.2.13\"\ndescription = \"Measures the displayed width of unicode strings in a terminal\"\noptional = false\npython-versions = \"*\"\nfiles = [\n    {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},\n    {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},\n]\n\n[[package]]\nname = \"zstandard\"\nversion = \"0.23.0\"\ndescription = \"Zstandard bindings for Python\"\noptional = false\npython-versions = \">=3.8\"\nfiles = [\n    {file = \"zstandard-0.23.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:bf0a05b6059c0528477fba9054d09179beb63744355cab9f38059548fedd46a9\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:fc9ca1c9718cb3b06634c7c8dec57d24e9438b2aa9a0f02b8bb36bf478538880\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:77da4c6bfa20dd5ea25cbf12c76f181a8e8cd7ea231c673828d0386b1740b8dc\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b2170c7e0367dde86a2647ed5b6f57394ea7f53545746104c6b09fc1f4223573\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c16842b846a8d2a145223f520b7e18b57c8f476924bda92aeee3a88d11cfc391\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:157e89ceb4054029a289fb504c98c6a9fe8010f1680de0201b3eb5dc20aa6d9e\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:203d236f4c94cd8379d1ea61db2fce20730b4c38d7f1c34506a31b34edc87bdd\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:dc5d1a49d3f8262be192589a4b72f0d03b72dcf46c51ad5852a4fdc67be7b9e4\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:752bf8a74412b9892f4e5b58f2f890a039f57037f52c89a740757ebd807f33ea\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:80080816b4f52a9d886e67f1f96912891074903238fe54f2de8b786f86baded2\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:84433dddea68571a6d6bd4fbf8ff398236031149116a7fff6f777ff95cad3df9\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:ab19a2d91963ed9e42b4e8d77cd847ae8381576585bad79dbd0a8837a9f6620a\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:59556bf80a7094d0cfb9f5e50bb2db27fefb75d5138bb16fb052b61b0e0eeeb0\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:27d3ef2252d2e62476389ca8f9b0cf2bbafb082a3b6bfe9d90cbcbb5529ecf7c\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-win32.whl\", hash = \"sha256:5d41d5e025f1e0bccae4928981e71b2334c60f580bdc8345f824e7c0a4c2a813\"},\n    {file = \"zstandard-0.23.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:519fbf169dfac1222a76ba8861ef4ac7f0530c35dd79ba5727014613f91613d4\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:34895a41273ad33347b2fc70e1bff4240556de3c46c6ea430a7ed91f9042aa4e\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:77ea385f7dd5b5676d7fd943292ffa18fbf5c72ba98f7d09fc1fb9e819b34c23\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:983b6efd649723474f29ed42e1467f90a35a74793437d0bc64a5bf482bedfa0a\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:80a539906390591dd39ebb8d773771dc4db82ace6372c4d41e2d293f8e32b8db\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:445e4cb5048b04e90ce96a79b4b63140e3f4ab5f662321975679b5f6360b90e2\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fd30d9c67d13d891f2360b2a120186729c111238ac63b43dbd37a5a40670b8ca\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d20fd853fbb5807c8e84c136c278827b6167ded66c72ec6f9a14b863d809211c\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:ed1708dbf4d2e3a1c5c69110ba2b4eb6678262028afd6c6fbcc5a8dac9cda68e\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:be9b5b8659dff1f913039c2feee1aca499cfbc19e98fa12bc85e037c17ec6ca5\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:65308f4b4890aa12d9b6ad9f2844b7ee42c7f7a4fd3390425b242ffc57498f48\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:98da17ce9cbf3bfe4617e836d561e433f871129e3a7ac16d6ef4c680f13a839c\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:8ed7d27cb56b3e058d3cf684d7200703bcae623e1dcc06ed1e18ecda39fee003\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:b69bb4f51daf461b15e7b3db033160937d3ff88303a7bc808c67bbc1eaf98c78\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-win32.whl\", hash = \"sha256:f2d4380bf5f62daabd7b751ea2339c1a21d1c9463f1feb7fc2bdcea2c29c3160\"},\n    {file = \"zstandard-0.23.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:62136da96a973bd2557f06ddd4e8e807f9e13cbb0bfb9cc06cfe6d98ea90dfe0\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b4567955a6bc1b20e9c31612e615af6b53733491aeaa19a6b3b37f3b65477094\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:1e172f57cd78c20f13a3415cc8dfe24bf388614324d25539146594c16d78fcc8\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b0e166f698c5a3e914947388c162be2583e0c638a4703fc6a543e23a88dea3c1\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d50d31bfedd53a928fed6707b15a8dbeef011bb6366297cc435accc888b27c20\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:72c68dda124a1a138340fb62fa21b9bf4848437d9ca60bd35db36f2d3345f373\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:53dd9d5e3d29f95acd5de6802e909ada8d8d8cfa37a3ac64836f3bc4bc5512db\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:6a41c120c3dbc0d81a8e8adc73312d668cd34acd7725f036992b1b72d22c1772\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:40b33d93c6eddf02d2c19f5773196068d875c41ca25730e8288e9b672897c105\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:9206649ec587e6b02bd124fb7799b86cddec350f6f6c14bc82a2b70183e708ba\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:76e79bc28a65f467e0409098fa2c4376931fd3207fbeb6b956c7c476d53746dd\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:66b689c107857eceabf2cf3d3fc699c3c0fe8ccd18df2219d978c0283e4c508a\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:9c236e635582742fee16603042553d276cca506e824fa2e6489db04039521e90\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8fffdbd9d1408006baaf02f1068d7dd1f016c6bcb7538682622c556e7b68e35\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-win32.whl\", hash = \"sha256:dc1d33abb8a0d754ea4763bad944fd965d3d95b5baef6b121c0c9013eaf1907d\"},\n    {file = \"zstandard-0.23.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:64585e1dba664dc67c7cdabd56c1e5685233fbb1fc1966cfba2a340ec0dfff7b\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:576856e8594e6649aee06ddbfc738fec6a834f7c85bf7cadd1c53d4a58186ef9\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:38302b78a850ff82656beaddeb0bb989a0322a8bbb1bf1ab10c17506681d772a\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d2240ddc86b74966c34554c49d00eaafa8200a18d3a5b6ffbf7da63b11d74ee2\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2ef230a8fd217a2015bc91b74f6b3b7d6522ba48be29ad4ea0ca3a3775bf7dd5\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:774d45b1fac1461f48698a9d4b5fa19a69d47ece02fa469825b442263f04021f\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6f77fa49079891a4aab203d0b1744acc85577ed16d767b52fc089d83faf8d8ed\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ac184f87ff521f4840e6ea0b10c0ec90c6b1dcd0bad2f1e4a9a1b4fa177982ea\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:c363b53e257246a954ebc7c488304b5592b9c53fbe74d03bc1c64dda153fb847\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7792606d606c8df5277c32ccb58f29b9b8603bf83b48639b7aedf6df4fe8171\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:a0817825b900fcd43ac5d05b8b3079937073d2b1ff9cf89427590718b70dd840\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:9da6bc32faac9a293ddfdcb9108d4b20416219461e4ec64dfea8383cac186690\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:fd7699e8fd9969f455ef2926221e0233f81a2542921471382e77a9e2f2b57f4b\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_s390x.whl\", hash = \"sha256:d477ed829077cd945b01fc3115edd132c47e6540ddcd96ca169facff28173057\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:fa6ce8b52c5987b3e34d5674b0ab529a4602b632ebab0a93b07bfb4dfc8f8a33\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-win32.whl\", hash = \"sha256:a9b07268d0c3ca5c170a385a0ab9fb7fdd9f5fd866be004c4ea39e44edce47dd\"},\n    {file = \"zstandard-0.23.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:f3513916e8c645d0610815c257cbfd3242adfd5c4cfa78be514e5a3ebb42a41b\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:2ef3775758346d9ac6214123887d25c7061c92afe1f2b354f9388e9e4d48acfc\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:4051e406288b8cdbb993798b9a45c59a4896b6ecee2f875424ec10276a895740\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2d1a054f8f0a191004675755448d12be47fa9bebbcffa3cdf01db19f2d30a54\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f83fa6cae3fff8e98691248c9320356971b59678a17f20656a9e59cd32cee6d8\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:32ba3b5ccde2d581b1e6aa952c836a6291e8435d788f656fe5976445865ae045\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2f146f50723defec2975fb7e388ae3a024eb7151542d1599527ec2aa9cacb152\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1bfe8de1da6d104f15a60d4a8a768288f66aa953bbe00d027398b93fb9680b26\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:29a2bc7c1b09b0af938b7a8343174b987ae021705acabcbae560166567f5a8db\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:61f89436cbfede4bc4e91b4397eaa3e2108ebe96d05e93d6ccc95ab5714be512\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:53ea7cdc96c6eb56e76bb06894bcfb5dfa93b7adcf59d61c6b92674e24e2dd5e\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:a4ae99c57668ca1e78597d8b06d5af837f377f340f4cce993b551b2d7731778d\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:379b378ae694ba78cef921581ebd420c938936a153ded602c4fea612b7eaa90d\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:50a80baba0285386f97ea36239855f6020ce452456605f262b2d33ac35c7770b\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:61062387ad820c654b6a6b5f0b94484fa19515e0c5116faf29f41a6bc91ded6e\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-win32.whl\", hash = \"sha256:b8c0bd73aeac689beacd4e7667d48c299f61b959475cdbb91e7d3d88d27c56b9\"},\n    {file = \"zstandard-0.23.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:a05e6d6218461eb1b4771d973728f0133b2a4613a6779995df557f70794fd60f\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:3aa014d55c3af933c1315eb4bb06dd0459661cc0b15cd61077afa6489bec63bb\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0a7f0804bb3799414af278e9ad51be25edf67f78f916e08afdb983e74161b916\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fb2b1ecfef1e67897d336de3a0e3f52478182d6a47eda86cbd42504c5cbd009a\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:837bb6764be6919963ef41235fd56a6486b132ea64afe5fafb4cb279ac44f259\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1516c8c37d3a053b01c1c15b182f3b5f5eef19ced9b930b684a73bad121addf4\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48ef6a43b1846f6025dde6ed9fee0c24e1149c1c25f7fb0a0585572b2f3adc58\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:11e3bf3c924853a2d5835b24f03eeba7fc9b07d8ca499e247e06ff5676461a15\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:2fb4535137de7e244c230e24f9d1ec194f61721c86ebea04e1581d9d06ea1269\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:8c24f21fa2af4bb9f2c492a86fe0c34e6d2c63812a839590edaf177b7398f700\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:a8c86881813a78a6f4508ef9daf9d4995b8ac2d147dcb1a450448941398091c9\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:fe3b385d996ee0822fd46528d9f0443b880d4d05528fd26a9119a54ec3f91c69\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:82d17e94d735c99621bf8ebf9995f870a6b3e6d14543b99e201ae046dfe7de70\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:c7c517d74bea1a6afd39aa612fa025e6b8011982a0897768a2f7c8ab4ebb78a2\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:1fd7e0f1cfb70eb2f95a19b472ee7ad6d9a0a992ec0ae53286870c104ca939e5\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-win32.whl\", hash = \"sha256:43da0f0092281bf501f9c5f6f3b4c975a8a0ea82de49ba3f7100e64d422a1274\"},\n    {file = \"zstandard-0.23.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:f8346bfa098532bc1fb6c7ef06783e969d87a99dd1d2a5a18a892c1d7a643c58\"},\n    {file = \"zstandard-0.23.0.tar.gz\", hash = \"sha256:b2d8c62d08e7255f68f7a740bae85b3c9b8e5466baa9cbf7f57f1cde0ac6bc09\"},\n]\n\n[package.dependencies]\ncffi = {version = \">=1.11\", markers = \"platform_python_implementation == \\\"PyPy\\\"\"}\n\n[package.extras]\ncffi = [\"cffi (>=1.11)\"]\n\n[metadata]\nlock-version = \"2.0\"\npython-versions = \"^3.10\"\ncontent-hash = \"41febebca2114c8e96a377c11698bee3eaf342adbb5e87ecaf9a8dee9d9a7035\"\n"
        },
        {
          "name": "poetry.toml",
          "type": "blob",
          "size": 0.0576171875,
          "content": "[virtualenvs]\nin-project = true\n\n[keyring]\nenabled = false\n"
        },
        {
          "name": "profiling",
          "type": "tree",
          "content": null
        },
        {
          "name": "pwndbg-lldb.py",
          "type": "blob",
          "size": 3.5751953125,
          "content": "#!/usr/bin/env python3\n\nfrom __future__ import annotations\n\nimport os\nimport re\nimport subprocess\nimport sys\nfrom typing import List\n\n\ndef find_lldb_version() -> List[int]:\n    \"\"\"\n    Parses the version string given to us by the LLDB executable.\n    \"\"\"\n    lldb = subprocess.run([\"lldb\", \"--version\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if lldb.returncode != 0:\n        print(f\"Could not find the LLDB Python Path: {lldb.stderr!r}\", file=sys.stderr)\n        sys.exit(1)\n    output = lldb.stdout.decode(\"utf-8\").strip()\n    output = re.sub(\"[^0-9.]\", \"\", output)\n\n    return [int(component) for component in output.split(\".\")]\n\n\ndef find_lldb_python_path() -> str:\n    \"\"\"\n    Finds the Python path pointed to by the LLDB executable.\n    \"\"\"\n    lldb = subprocess.run([\"lldb\", \"-P\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if lldb.returncode != 0:\n        print(f\"Could not find the LLDB Python Path: {lldb.stderr!r}\", file=sys.stderr)\n        sys.exit(1)\n\n    folder = lldb.stdout.decode(\"utf-8\").strip()\n    if not os.path.exists(folder):\n        print(f\"Path pointed to by LLDB ('{folder}') does not exist\", file=sys.stderr)\n        sys.exit(1)\n\n    return folder\n\n\nif __name__ == \"__main__\":\n    debug = \"PWNDBG_LLDB_DEBUG\" in os.environ\n\n    # Find the path for the LLDB Python bindings.\n    path = find_lldb_python_path()\n    sys.path.append(path)\n\n    if debug:\n        print(f\"[-] Launcher: LLDB Python path: {path}\")\n\n    # Older LLDB versions crash newer versions of CPython on import, so check\n    # for it, and stop early with an error message.\n    #\n    # See https://github.com/llvm/llvm-project/issues/70453\n    lldb_version = find_lldb_version()\n\n    if debug:\n        print(f\"[-] Launcher: LLDB version {lldb_version[0]}.{lldb_version[1]}\")\n\n    if sys.version_info.minor >= 12 and lldb_version[0] <= 18:\n        print(\"LLDB 18 and earlier is incompatible with Python 3.12 and later\", file=sys.stderr)\n        sys.exit(1)\n\n    # Start up LLDB and create a new debugger object.\n    import lldb\n\n    lldb.SBDebugger.Initialize()\n    debugger = lldb.SBDebugger.Create()\n\n    # Resolve the location of lldbinit.py based on the environment, if needed.\n    lldbinit_dir = os.path.dirname(sys.argv[0])\n    if \"PWNDBG_LLDBINIT_DIR\" in os.environ:\n        lldbinit_dir = os.environ[\"PWNDBG_LLDBINIT_DIR\"]\n    lldbinit_dir = os.path.abspath(lldbinit_dir)\n    lldbinit_path = os.path.join(lldbinit_dir, \"lldbinit.py\")\n\n    if debug:\n        print(f\"[-] Launcher: Importing main LLDB module at '{lldbinit_path}'\")\n\n    if not os.path.exists(lldbinit_path):\n        print(f\"Could not find '{lldbinit_path}, please specify it with PWNDBG_LLDBINIT_DIR\")\n        sys.exit(1)\n\n    if lldbinit_path not in sys.path:\n        sys.path.append(lldbinit_dir)\n\n    # Load the lldbinit module we just found.\n    debugger.HandleCommand(f\"command script import {lldbinit_path}\")\n\n    # Initialize the debugger, proper.\n    import lldbinit\n\n    if debug:\n        print(\"[-] Launcher: Initializing Pwndbg\")\n    lldbinit.main(debugger, lldb_version[0], lldb_version[1], debug=debug)\n\n    # Run our REPL until the user decides to leave.\n    if len(sys.argv) > 2:\n        print(f\"Usage: {sys.argv[0]} [filename]\", file=sys.stderr)\n        sys.exit(1)\n\n    target = None\n    if len(sys.argv) == 2:\n        target = sys.argv[1]\n\n    from pwndbg.dbg.lldb.repl import run as run_repl\n\n    if debug:\n        print(\"[-] Launcher: Entering Pwndbg CLI\")\n\n    run_repl([f\"target create '{target}'\"] if target else None, debug=debug)\n\n    # Dispose of our debugger and terminate LLDB.\n    lldb.SBDebugger.Destroy(debugger)\n    lldb.SBDebugger.Terminate()\n"
        },
        {
          "name": "pwndbg",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.103515625,
          "content": "[tool.ruff]\nline-length = 100\n\n[tool.ruff.lint]\nignore = [\"A003\", \"E402\", \"E501\", \"E731\", \"F405\", \"F821\", \"W505\"]\n\nselect = [\n    \"A\",      # flake8-builtins\n    \"E\",      # pycodestyle\n    \"F\",      # pyflakes\n    \"W\",      # pycodestyle\n    \"C4\",     # flake8-comprehensions\n    \"ISC\",    # flake8-implicit-str-concat\n    \"SLOT\",   # flake8-slots\n    \"FLY\",    # flynt\n    \"PGH\",    # pygrep-hooks\n    \"RET506\", # flake8-return: superfluous-else-raise\n    \"RET507\", # flake8-return: superfluous-else-continue\n    \"RET508\", # flake8-return: superfluous-else-break\n    # We want to enable the below lints, but they currently return too many errors\n    # \"RET505\", # flake8-return: superfluous-else-return\n    # \"SLF\" # flake8-self\n    # \"SIM\", # flake8-simplify\n    # \"PTH\", # flake8-use-pathlib\n]\n\n[tool.ruff.lint.flake8-builtins]\nbuiltins-ignorelist = [\n    \"all\",\n    \"bin\",\n    \"breakpoint\",\n    \"copyright\",\n    \"dir\",\n    \"exit\",\n    \"format\",\n    \"hex\",\n    \"map\",\n    \"max\",\n    \"min\",\n    \"next\",\n    \"type\",\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\n[tool.mypy]\nstrict_optional = false\ncheck_untyped_defs = true\nallow_untyped_globals = false\nallow_redefinition = true\nallow_any_generics = false\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_no_return = true\n# warn_return_any = true\n# warn_unreachable = true\nshow_error_context = true\npretty = true\nshow_error_codes = true\nincremental = false\ndisable_error_code = [\n    # https://github.com/python/mypy/issues/6232\n    \"assignment\",\n]\n\n[[tool.mypy.overrides]]\nmodule = [\"pwndbg.aglib.elf\"]\ndisable_error_code = [\"name-defined\"]\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"pwndbg.aglib.arch\",\n    \"pwndbg.color.*\",\n    \"pwndbg.commands.context\",\n    \"pwndbg.commands.cymbol\",\n    \"pwndbg.commands.hexdump\",\n    \"pwndbg.commands.procinfo\",\n    \"pwndbg.commands.reload\",\n    \"pwndbg.commands.version\",\n    \"pwndbg.exception\",\n    \"pwndbg.aglib.dynamic\",\n    \"pwndbg.gdblib.events\",\n    \"pwndbg.gdblib.got\",\n    \"pwndbg.gdblib.ptmalloc2_tracking\",\n    \"pwndbg.aglib.heap.*\",\n    \"pwndbg.hexdump\",\n    \"pwndbg.ui\",\n    \"pwndbg.wrappers.*\",\n]\ndisable_error_code = [\"attr-defined\"]\n\n[[tool.mypy.overrides]]\nmodule = [\"pwndbg.commands.telescope\"]\ndisable_error_code = [\"attr-defined\", \"index\"]\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"pwndbg.aglib.nearpc\",\n    \"pwndbg.aglib.typeinfo\",\n]\ndisable_error_code = [\"name-defined\", \"attr-defined\"]\n\n[[tool.mypy.overrides]]\nmodule = [\"pwndbg.aglib.disasm.*\"]\ndisable_error_code = [\"index\", \"name-defined\", \"attr-defined\"]\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"capstone.*\",\n    \"unicorn.*\",\n    \"pwnlib.*\",\n    \"ropgadget.*\",\n    \"elftools.*\",\n    \"ipdb.*\",\n    \"r2pipe\",\n    \"rzpipe\",\n    \"rich.*\",\n    \"pt.*\",\n    \"lldb.*\",\n    \"gnureadline\",\n]\nignore_missing_imports = true\n\n[tool.isort]\nprofile = \"black\"\nforce_single_line = true\nknown_third_party = [\n    \"capstone\",\n    \"unicorn\",\n    \"psutil\",\n    \"pycparser\",\n    \"gdb\",\n    \"lldb\",\n]\nadd_imports = \"from __future__ import annotations\"\n\n[tool.coverage.run]\nbranch = true\nparallel = true\ndisable_warnings = [\"module-not-imported\"]\nsource = [\"${SRC_DIR-.}\"]\nomit = [\"ida_script.py\"]\ndata_file = \".cov/coverage\"\n\n[tool.coverage.report]\nomit = [\"ida_script.py\", \"tests/*\"]\n\n[tool.poetry]\nname = \"pwndbg\"\ndescription = \"Exploit Development and Reverse Engineering with GDB Made Easy\"\nversion = \"2024.08.29\"\nauthors = [\"Dominik 'disconnect3d' Czarnota <dominik.b.czarnota+dc@gmail.com>\"]\nreadme = \"README.md\"\npackages = [{ include = \"pwndbg\" }]\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ncapstone = \"^5.0.3\"\nipython = \"^8.27.0\"\n# Needed by Capstone due to https://github.com/pwndbg/pwndbg/pull/1946#issuecomment-1921603947\nsetuptools = \"^70.0.0\"\npsutil = \"^5.9.8\"\npwntools = \"^4.14.0b0\"\npycparser = \"^2.22\"\npyelftools = \"^0.29\"\npygments = \"^2.18.0\"\nropgadget = \"7.3\"\nsortedcontainers = \"^2.4.0\"\ntabulate = \"^0.9.0\"\ntyping-extensions = \"^4.12.0\"\nunicorn = \"^2.1.1\"\nrequests = \"^2.32.3\"\npt = { git = \"https://github.com/martinradev/gdb-pt-dump\", rev = \"50227bda0b6332e94027f811a15879588de6d5cb\" }\n# Newer versions of bcrypt break NIX. Who need bcrypt: pwntools->paramiko->bcrypt\nbcrypt = \"4.2.0\"\n\n[tool.poetry.group.lldb]\noptional = true\n\n[tool.poetry.group.lldb.dependencies]\n# The LLDB REPL requires readline.\ngnureadline = \"^8.2.10\"\n\n[tool.poetry.group.dev]\noptional = true\n\n[tool.poetry.group.dev.dependencies]\ncoverage = { version = \"^7.5.0\", extras = [\"toml\"] }\nisort = \"^5.13.2\"\nmypy = \"^1.10.0\"\n# Newer versions of pytest break CI on GitHub\npytest = \"8.0.2\"\npytest-cov = \"^4.1.0\"\nrich = \"^13.7.1\"\nruff = \"^0.4.1\"\nsortedcontainers-stubs = \"^2.4.2\"\ntestresources = \"^2.0.1\"\ntomli = \"^2.0.1\"\ntypes-gdb = \"^12.1.4.20240704\"\ntypes-psutil = \"^5.9.5.20240423\"\ntypes-pygments = \"^2.17.0.20240310\"\ntypes-requests = \"^2.31.0.20240406\"\ntypes-tabulate = \"^0.9.0.20240106\"\nvermin = \"^1.6.0\"\n\n[tool.poetry.group.docs]\noptional = true\n\n[tool.poetry.group.docs.dependencies]\nmdutils = \"*\"\nmkdocs = \"*\"\nmkdocs-gen-files = \"*\"\nmkdocs-material = \"*\"\nmkdocs-minify-plugin = \"*\"\nmkdocs-rss-plugin = \"*\"\nmkdocstrings = \"*\"\nmkdocstrings-python = \"*\"\npymdown-extensions = \"*\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n"
        },
        {
          "name": "qemu-tests.sh",
          "type": "blob",
          "size": 0.095703125,
          "content": "#!/usr/bin/env bash\n\n(cd tests && python3 tests.py -t cross-arch $@)\nexit_code=$?\nexit $exit_code\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup-dev.sh",
          "type": "blob",
          "size": 7.611328125,
          "content": "#!/usr/bin/env bash\nset -e\n\necho \"# --------------------------------------\"\necho \"# Install testing tools.\"\necho \"# Only works with Ubuntu / APT or Arch / Pacman.\"\necho \"# --------------------------------------\"\n\nhelp_and_exit() {\n    echo \"Usage: ./setup-dev.sh [--install-only]\"\n    echo \"  --install-only              install only distro dependencies without installing python-venv\"\n    exit 1\n}\n\nUSE_INSTALL_ONLY=0\n\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --install-only)\n            USE_INSTALL_ONLY=1\n            ;;\n        -h | --help)\n            help_and_exit\n            ;;\n        *)\n            help_and_exit\n            ;;\n    esac\n    shift\ndone\n\nhook_script_path=\".git/hooks/pre-push\"\nhook_script=$(\n    cat << 'EOF'\n#!/usr/bin/env bash\n\ndiff_command=\"git diff --no-ext-diff --ignore-submodules\"\n\nold_diff=$($diff_command)\n\n./lint.sh -f\nexit_code=$?\n\nnew_diff=$($diff_command)\n\nif [[ \"$new_diff\" != \"$old_diff\" ]]; then\n   echo \"Files were modified by the linter, amend your commit and try again\"\n   exit 1\nfi\n\nexit $exit_code\nEOF\n)\n\nif [ -t 1 ] && [ ! -f $hook_script_path ]; then\n    echo \"Install a git hook to automatically lint files before pushing? (y/N)\"\n    read yn\n    if [[ \"$yn\" == [Yy]* ]]; then\n        echo \"$hook_script\" > \"$hook_script_path\"\n        # make the hook executable\n        chmod ug+x \"$hook_script_path\"\n        echo \"pre-push hook installed to $hook_script_path and made executable\"\n    fi\nfi\n\n# If we are a root in a container and `sudo` doesn't exist\n# lets overwrite it with a function that just executes things passed to sudo\n# (yeah it won't work for sudo executed with flags)\nif ! hash sudo 2> /dev/null && whoami | grep root; then\n    sudo() {\n        ${*}\n    }\nfi\n\nlinux() {\n    uname | grep -i Linux &> /dev/null\n}\n\nset_zigpath() {\n    if [[ -z \"$ZIGPATH\" ]]; then\n        # If ZIGPATH is not set, set it\n        # In Docker environment this should by default be set to /opt/zig (APT) or /usr/bin (Pacman)\n        export ZIGPATH=\"$1\"\n    fi\n    echo \"ZIGPATH set to $ZIGPATH\"\n}\n\ndownload_zig_binary() {\n    # Install zig to current directory\n    # We use zig to compile some test binaries as it is much easier than with gcc\n\n    ZIG_TAR_URL=\"https://ziglang.org/download/0.10.1/zig-linux-x86_64-0.10.1.tar.xz\"\n    ZIG_TAR_SHA256=\"6699f0e7293081b42428f32c9d9c983854094bd15fee5489f12c4cf4518cc380\"\n    curl --output /tmp/zig.tar.xz \"${ZIG_TAR_URL}\"\n    ACTUAL_SHA256=$(sha256sum /tmp/zig.tar.xz | cut -d' ' -f1)\n    if [ \"${ACTUAL_SHA256}\" != \"${ZIG_TAR_SHA256}\" ]; then\n        echo \"Zig binary checksum mismatch\"\n        echo \"Expected: ${ZIG_TAR_SHA256}\"\n        echo \"Actual: ${ACTUAL_SHA256}\"\n        exit 1\n    fi\n\n    tar -C /tmp -xJf /tmp/zig.tar.xz\n\n    mv /tmp/zig-linux-x86_64-* ${ZIGPATH} &> /dev/null || true\n    echo \"Zig installed to ${ZIGPATH}\"\n}\n\ninstall_apt() {\n    set_zigpath \"$(pwd)/.zig\"\n\n    sudo apt-get update || true\n    sudo apt-get install -y \\\n        nasm \\\n        gcc \\\n        libc6-dev \\\n        curl \\\n        wget \\\n        build-essential \\\n        gdb \\\n        gdb-multiarch \\\n        parallel \\\n        netcat-openbsd \\\n        iproute2 \\\n        qemu-system-x86 \\\n        qemu-system-arm \\\n        qemu-user \\\n        gcc-aarch64-linux-gnu \\\n        gcc-riscv64-linux-gnu \\\n        gcc-arm-linux-gnueabihf \\\n        gcc-mips-linux-gnu \\\n        gcc-mips64-linux-gnuabi64\n\n    # Some tests require i386 libc/ld, eg: test_smallbins_sizes_32bit_big\n    if uname -m | grep -q x86_64; then\n        sudo dpkg --add-architecture i386\n        sudo apt-get update\n        sudo apt-get install -y libc6-dbg:i386 libgcc-s1:i386\n    fi\n\n    if [[ \"$1\" != \"\" ]]; then\n        sudo apt install shfmt\n    fi\n\n    command -v go &> /dev/null || sudo apt-get install -y golang\n\n    download_zig_binary\n}\n\ninstall_pacman() {\n    set_zigpath \"$(pwd)/.zig\"\n\n    # add debug repo for glibc-debug if it doesn't already exist\n    if ! grep -q \"\\[core-debug\\]\" /etc/pacman.conf; then\n        cat << EOF | sudo tee -a /etc/pacman.conf\n        [core-debug]\n        Include = /etc/pacman.d/mirrorlist\nEOF\n    fi\n\n    if ! grep -q \"\\[extra-debug\\]\" /etc/pacman.conf; then\n        cat << EOF | sudo tee -a /etc/pacman.conf\n        [extra-debug]\n        Include = /etc/pacman.d/mirrorlist\nEOF\n    fi\n\n    if ! grep -q \"\\[multilib-debug\\]\" /etc/pacman.conf; then\n        cat << EOF | sudo tee -a /etc/pacman.conf\n        [multilib-debug]\n        Include = /etc/pacman.d/mirrorlist\nEOF\n    fi\n\n    sudo pacman -Syu --noconfirm || true\n    sudo pacman -S --needed --noconfirm \\\n        nasm \\\n        gcc \\\n        glibc-debug \\\n        curl \\\n        wget \\\n        base-devel \\\n        gdb \\\n        parallel\n\n    # check if netcat exists first, as it might it may be installed from some other netcat packages\n    if [ ! -f /usr/bin/nc ]; then\n        sudo pacman -S --needed --noconfirm gnu-netcat\n    fi\n\n    command -v go &> /dev/null || sudo pacman -S --noconfirm go\n\n    download_zig_binary\n}\n\ninstall_dnf() {\n    set_zigpath \"$(pwd)/.zig\"\n\n    sudo dnf upgrade || true\n    sudo dnf install -y \\\n        nasm \\\n        gcc \\\n        curl \\\n        wget \\\n        gdb \\\n        parallel \\\n        qemu-system-arm \\\n        qemu-user\n\n    command -v go &> /dev/null || sudo dnf install -y go\n\n    if [[ \"$1\" != \"\" ]]; then\n        sudo dnf install shfmt\n    fi\n\n    download_zig_binary\n}\n\ninstall_jemalloc() {\n\n    # Install jemalloc version 5.3.0\n    JEMALLOC_TAR_URL=\"https://github.com/jemalloc/jemalloc/releases/download/5.3.0/jemalloc-5.3.0.tar.bz2\"\n    JEMALLOC_TAR_SHA256=\"2db82d1e7119df3e71b7640219b6dfe84789bc0537983c3b7ac4f7189aecfeaa\"\n    curl --location --output /tmp/jemalloc-5.3.0.tar.bz2 \"${JEMALLOC_TAR_URL}\"\n    ACTUAL_SHA256=$(sha256sum /tmp/jemalloc-5.3.0.tar.bz2 | cut -d' ' -f1)\n    if [ \"${ACTUAL_SHA256}\" != \"${JEMALLOC_TAR_SHA256}\" ]; then\n        echo \"Jemalloc binary checksum mismatch\"\n        echo \"Expected: ${JEMALLOC_TAR_SHA256}\"\n        echo \"Actual: ${ACTUAL_SHA256}\"\n        exit 1\n    fi\n\n    tar -C /tmp -xf /tmp/jemalloc-5.3.0.tar.bz2\n\n    # TODO: autoconf needs to be installed with script as well?\n\n    pushd /tmp/jemalloc-5.3.0\n    ./configure\n    make\n    sudo make install\n    popd\n    echo \"Jemalloc installed\"\n\n}\n\nconfigure_venv() {\n    if [[ -z \"${PWNDBG_VENV_PATH}\" ]]; then\n        PWNDBG_VENV_PATH=\"./.venv\"\n    fi\n    echo \"Using virtualenv from path: ${PWNDBG_VENV_PATH}\"\n\n    source \"${PWNDBG_VENV_PATH}/bin/activate\"\n    ~/.local/bin/poetry install --with dev\n\n    # Create a developer marker file\n    DEV_MARKER_PATH=\"${PWNDBG_VENV_PATH}/dev.marker\"\n    touch \"${DEV_MARKER_PATH}\"\n    echo \"Developer marker created at ${DEV_MARKER_PATH}\"\n}\n\nif linux; then\n    distro=$(\n        . /etc/os-release\n        echo ${ID}\n    )\n\n    case $distro in\n        \"ubuntu\")\n            ubuntu_version=$(\n                . /etc/os-release\n                echo ${VERSION_ID}\n            )\n            install_apt $ubuntu_version\n            ;;\n        \"arch\")\n            install_pacman\n            ;;\n        \"fedora\")\n            fedora_version=$(\n                . /etc/os-release\n                echo ${VERSION_ID} version\n            )\n            install_dnf $fedora_verion\n            ;;\n        *) # we can add more install command for each distros.\n            echo \"\\\"$distro\\\" is not supported distro. Will search for 'apt' or 'pacman' package managers.\"\n            if hash apt; then\n                install_apt\n            elif hash pacman; then\n                install_pacman\n            else\n                echo \"\\\"$distro\\\" is not supported and your distro don't have apt or pacman that we support currently.\"\n                exit\n            fi\n            ;;\n    esac\n\n    install_jemalloc\n\n    if [ $USE_INSTALL_ONLY -eq 0 ]; then\n        configure_venv\n    fi\nfi\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 6.451171875,
          "content": "#!/usr/bin/env bash\nset -e\n\n# If we are a root in a container and `sudo` doesn't exist\n# lets overwrite it with a function that just executes things passed to sudo\n# (yeah it won't work for sudo executed with flags)\nif ! hash sudo 2> /dev/null && whoami | grep -q root; then\n    sudo() {\n        ${*}\n    }\nfi\n\n# Helper functions\nlinux() {\n    uname | grep -iqs Linux\n}\nosx() {\n    uname | grep -iqs Darwin\n}\n\ninstall_apt() {\n    sudo apt-get update || true\n    sudo apt-get install -y git gdb gdbserver python3-dev python3-venv python3-setuptools libglib2.0-dev libc6-dbg curl\n\n    if uname -m | grep -q x86_64; then\n        sudo dpkg --add-architecture i386 || true\n        sudo apt-get update || true\n        sudo apt-get install -y libc6-dbg:i386 libgcc-s1:i386 || true\n    fi\n}\n\ninstall_dnf() {\n    sudo dnf update || true\n    sudo dnf -y install gdb gdb-gdbserver python-devel python3-devel glib2-devel make curl\n    sudo dnf -y debuginfo-install glibc\n}\n\ninstall_xbps() {\n    sudo xbps-install -Su\n    sudo xbps-install -Sy gdb gcc python-devel python3-devel glibc-devel make curl\n    sudo xbps-install -Sy glibc-dbg\n}\n\ninstall_swupd() {\n    sudo swupd update || true\n    sudo swupd bundle-add gdb python3-basic make c-basic curl\n}\n\ninstall_zypper() {\n    sudo zypper mr -e repo-oss-debug || sudo zypper mr -e repo-debug\n    sudo zypper refresh || true\n    sudo zypper install -y gdb gdbserver python-devel python3-devel glib2-devel make glibc-debuginfo curl\n    sudo zypper install -y python2-pip || true # skip py2 installation if it doesn't exist\n\n    if uname -m | grep -q x86_64; then\n        sudo zypper install -y glibc-32bit-debuginfo || true\n    fi\n}\n\ninstall_emerge() {\n    sudo emerge --oneshot --deep --newuse --changed-use --changed-deps dev-lang/python dev-debug/gdb\n}\n\ninstall_oma() {\n    sudo oma refresh || true\n    sudo oma install -y gdb gdbserver python-3 glib make glibc-dbg curl\n\n    if uname -m | grep -q x86_64; then\n        sudo oma install -y glibc+32-dbg || true\n    fi\n}\n\ninstall_pacman() {\n    read -p \"Do you want to do a full system update? (y/n) [n] \" answer\n    # user want to perform a full system upgrade\n    answer=${answer:-n} # n is default\n    if [[ \"$answer\" == \"y\" ]]; then\n        sudo pacman -Syu || true\n    fi\n    sudo pacman -S --noconfirm --needed git gdb python which debuginfod curl\n    if [ -z \"$UPDATE_MODE\" ]; then\n        if ! grep -qs \"^set debuginfod enabled on\" ~/.gdbinit; then\n            echo \"set debuginfod enabled on\" >> ~/.gdbinit\n            echo \"[*] Added 'set debuginfod enabled on' to ~/.gdbinit\"\n        fi\n    fi\n}\n\ninstall_freebsd() {\n    sudo pkg install git gdb python py39-pip cmake gmake curl\n    which rustc || sudo pkg install rust\n}\n\nusage() {\n    echo \"Usage: $0 [--update]\"\n    echo \"  --update: Install/update dependencies without checking ~/.gdbinit\"\n}\n\nUPDATE_MODE=\nfor arg in \"$@\"; do\n    case $arg in\n        --update)\n            UPDATE_MODE=1\n            ;;\n        -h | --help)\n            set +x\n            usage\n            exit 0\n            ;;\n        *)\n            set +x\n            echo \"Unknown argument: $arg\"\n            usage\n            exit 1\n            ;;\n    esac\ndone\n\nPYTHON=''\n\nif linux; then\n    distro=$(grep \"^ID=\" /etc/os-release | cut -d'=' -f2 | sed -e 's/\"//g')\n\n    case $distro in\n        \"ubuntu\")\n            install_apt\n            ;;\n        \"fedora\")\n            install_dnf\n            ;;\n        \"clear-linux-os\")\n            install_swupd\n            ;;\n        \"opensuse-leap\" | \"opensuse-tumbleweed\")\n            install_zypper\n            ;;\n        \"arch\" | \"archarm\" | \"endeavouros\" | \"manjaro\" | \"garuda\" | \"cachyos\" | \"archcraft\" | \"artix\")\n            install_pacman\n            echo \"Logging off and in or conducting a power cycle is required to get debuginfod to work.\"\n            echo \"Alternatively you can manually set the environment variable: DEBUGINFOD_URLS=https://debuginfod.archlinux.org\"\n            ;;\n        \"void\")\n            install_xbps\n            ;;\n        \"gentoo\")\n            install_emerge\n            ;;\n        \"freebsd\")\n            install_freebsd\n            ;;\n        \"aosc\")\n            install_oma\n            ;;\n        *) # we can add more install command for each distros.\n            echo \"\\\"$distro\\\" is not supported distro. Will search for 'apt', 'dnf' or 'pacman' package managers.\"\n            if hash apt; then\n                install_apt\n            elif hash dnf; then\n                install_dnf\n            elif hash pacman; then\n                install_pacman\n            else\n                echo \"\\\"$distro\\\" is not supported and your distro don't have a package manager that we support currently.\"\n                exit 2\n            fi\n            ;;\n    esac\nfi\n\nif ! hash gdb; then\n    echo \"Could not find gdb in $PATH\"\n    exit 3\nfi\n\n# Find the Python version used by GDB.\nPYVER=$(gdb -batch -q --nx -ex 'pi import platform; print(\".\".join(platform.python_version_tuple()[:2]))')\nPYTHON+=$(gdb -batch -q --nx -ex 'pi import sys; print(sys.executable)')\n\nif ! osx; then\n    PYTHON+=\"${PYVER}\"\nfi\n\n# Check python version supported: <3.10, 3.99>\nis_supported=$(echo \"$PYVER\" | grep -E '3\\.(10|11|12|13|14|15|16|17|18|19|[2-9][0-9])' || true)\nif [[ -z \"$is_supported\" ]]; then\n    echo \"Your system has unsupported python version. Please use older pwndbg release:\"\n    echo \"'git checkout 2024.08.29' - python3.8, python3.9\"\n    echo \"'git checkout 2023.07.17' - python3.6, python3.7\"\n    exit 4\nfi\n\n# Install Poetry\nif ! command -v poetry &> /dev/null; then\n    echo \"Poetry not found. Installing Poetry...\"\n    curl -sSL https://install.python-poetry.org | python3 -\n    export PATH=\"$HOME/.local/bin:$PATH\"\nelse\n    echo \"Poetry is already installed.\"\nfi\n\n# Create the Python virtual environment and install dependencies using poetry\nif [[ -z \"${PWNDBG_VENV_PATH}\" ]]; then\n    PWNDBG_VENV_PATH=\"./.venv\"\nfi\necho \"Creating virtualenv in path: ${PWNDBG_VENV_PATH}\"\n\n${PYTHON} -m venv -- ${PWNDBG_VENV_PATH}\nsource ${PWNDBG_VENV_PATH}/bin/activate\npoetry install\n\nif [ -z \"$UPDATE_MODE\" ]; then\n    if grep -qs '^[^#]*source.*pwndbg/gdbinit.py' ~/.gdbinit; then\n        echo 'Pwndbg is already sourced in ~/.gdbinit .'\n    else\n        # Load Pwndbg into GDB on every launch.\n        echo \"source $PWD/gdbinit.py\" >> ~/.gdbinit\n        echo \"[*] Added 'source $PWD/gdbinit.py' to ~/.gdbinit so that Pwndbg will be loaded on every launch of GDB.\"\n    fi\n    echo \"Please set the PWNDBG_NO_AUTOUPDATE environment variable to any value to disable the automatic updating of dependencies when Pwndbg is loaded.\"\nfi\n"
        },
        {
          "name": "tests.sh",
          "type": "blob",
          "size": 0.10546875,
          "content": "#!/usr/bin/env bash\n\n# Run integration tests\n(cd tests && python3 tests.py $@)\nexit_code=$?\nexit $exit_code\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "unit-tests.sh",
          "type": "blob",
          "size": 0.28515625,
          "content": "#!/usr/bin/env bash\n\nCOV=0\n# Run unit tests\nfor arg in \"$@\"; do\n    if [ \"$arg\" == \"--cov\" ]; then\n        COV=1\n        break\n    fi\ndone\n\nif [ $COV -eq 1 ]; then\n    coverage run -m pytest tests/unit-tests\nelse\n    pytest tests/unit-tests\nfi\n\nexit_code=$((exit_code + $?))\n\nexit $exit_code\n"
        }
      ]
    }
  ]
}