{
  "metadata": {
    "timestamp": 1736561006049,
    "page": 763,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "davidhalter/jedi-vim",
      "stars": 5301,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1181640625,
          "content": "[run]\nbranch = 1\n# Used by/for neovim-python-client.\nconcurrency = greenlet\n\n[report]\ninclude = pythonx/jedi_*.py,test/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0703125,
          "content": "*~\n*.sw?\n*.py[cod]\n.ropeproject\ndoc/tags\n.pytest-cache\nbuild\n.coverage*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1806640625,
          "content": "[submodule \"jedi\"]\n\tpath = pythonx/jedi\n\turl = https://github.com/davidhalter/jedi.git\n[submodule \"pythonx/parso\"]\n\tpath = pythonx/parso\n\turl = https://github.com/davidhalter/parso.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.69921875,
          "content": "dist: bionic\nlanguage: python\npython: 3.8\nenv:\n  - ENV=test\n  - ENV=check\n  - ENV=test_coverage\ninstall:\n  - |\n    if [ \"$ENV\" = \"test\" ]; then\n      pip install pytest\n    elif [ \"$ENV\" = \"test_coverage\" ]; then\n      sudo add-apt-repository ppa:neovim-ppa/stable -y\n      sudo apt-get update -q\n      sudo apt-get install neovim -y\n\n      pip install pynvim pytest-cov\n      pip list\n      nvim --version\n    else\n      vim --version\n    fi\nscript:\n  - make --keep-going \"$ENV\" BUILD_VIRTUAL_ENV=$VIRTUAL_ENV\n\nafter_script:\n  - |\n    if [ \"$ENV\" = \"test_coverage\" ]; then\n      coverage xml\n      travis_retry bash <(curl -s https://codecov.io/bash) -X fix -f coverage.xml -F py${TRAVIS_PYTHON_VERSION//./}\n    fi\n"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 1.9619140625,
          "content": "Main Authors\n============\n\nDavid Halter (@davidhalter) <davidhalter88@gmail.com>\n\n\nContributors (in order of contributions)\n========================================\n\nPatrice Peterson (@runiq)\ntek (@tek)\nheavenshell (@heavenshell) <heavenshell.jp@gmail.com>\nDanilo Bargen (@dbrgn) <gezuru@gmail.com>\nmattn (@mattn) <mattn.jp@gmail.com>\nEnrico Batista da Luz (@ricobl) <rico.bl@gmail.com>\ncoot (@coot) <mszamot@gmail.com>\nArtur Dryomov (@ming13) <artur.dryomov@gmail.com>\nandviro (@andviro)\nJean-Louis Fuchs (@ganwell) <ganwell@fangorn.ch>\nMathieu Comandon (@strycore) <strider@strycore.com>\nNick Hurley (@todesschaf) <hurley@todesschaf.org>\ngpoulin (@gpoulin)\nAkinori Hattori (@hattya)\nLuper Rouch (@flupke)\nMatthew Moses (@mlmoses) <moses.matthewl@gmail.com>\nTyler Wymer (@twymer)\nArtem Nezvigin (@artnez)\nrogererens (@rogererens)\nEmily Strickland (@emilyst) <mail@emily.st>\nTin Tvrtković (@Tinche) <tinchester@gmail.com>\nZekeriya Koc (@zekzekus) <zekzekus@gmail.com>\nethinx (@ethinx) <eth2net@gmail.com>\nWouter Overmeire (@lodagro) <lodagro@gmail.com>\nStephen J. Fuhry (@fuhrysteve) <fuhrysteve@gmail.com>\nSheng Yun (@ShengYun) <uewing@gmail.com>\nYann Thomas-Gérard (@inside) <inside@gmail.com>\nColin Su (@littleq0903) <littleq0903@gmail.com>\nArthur Jaron (@eyetracker)\nJustin M. Keyes (@justinmk)\nnagev (@np1)\nChris Lasher (@gotgenes) <chris.lasher@gmail.com>\nDoan Thanh Nam (@tndoan)\nMarkus Koller (@toupeira)\nJustin Cheevers @justincheevers\nTalha Ahmed (@talha81) <talha.ahmed@gmail.com>\nMatthew Tylee Atkinson (@matatk)\nPedro Ferrari (@petobens)\nDaniel Hahler (@blueyed)\nDave Honneffer (@pearofducks)\nBagrat Aznauryan (@n9code)\nTomoyuki Kashiro (@kashiro)\nTommy Allen (@tweekmonster)\nMingliang (@Aulddays)\nBrian Mego (@brianmego)\nStevan Milic (@stevanmilic) <stevan.milic@yahoo.com>\nKonstantin Glukhov (@Konstantin-Glukhov)\nSeungchan An (@SeungChan92) <dev.issea1015@gmail.com>\nThomas Blauth (@ThomasBlauth) <thomas.blauth@protonmail.com>\nJames Cherti (@jamescherti)\n\n@something are github user names.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.3603515625,
          "content": "# We <3 pull requests!\n\n 1. Fork the Repo on github.\n 2. Add yourself to AUTHORS.txt\n 3. Add a test if possible.\n 4. Push to your fork and submit a pull request.\n\nPlease use PEP8 as a Python code style. For VIM, just try to style your\ncode similar to the jedi-vim code that is already there.\n\n# Bug reports\nPlease include the output of `:version` and `:JediDebugInfo`.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\n\nCopyright (c) <2013> <David Halter and others, see AUTHORS.txt>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.78125,
          "content": "BUILD_VIRTUAL_ENV:=build/venv\n\ntest:\n\tpytest\n\ntest_nvim:\n\tVSPEC_VIM=nvim pytest\n\ntest_coverage: export PYTEST_ADDOPTS:=--cov pythonx --cov test --cov-report=term-missing:skip-covered\ntest_coverage: test_nvim\n\n$(dir $(BUILD_VIRTUAL_ENV)):\n\tmkdir -p $@\n\n$(BUILD_VIRTUAL_ENV): | $(dir $(BUILD_VIRTUAL_ENV))\n\tpython -m venv $@\n\n$(BUILD_VIRTUAL_ENV)/bin/vint: | $(BUILD_VIRTUAL_ENV)\n\t$|/bin/python -m pip install vim-vint==0.3.21\n\n$(BUILD_VIRTUAL_ENV)/bin/flake8: | $(BUILD_VIRTUAL_ENV)\n\t$|/bin/python -m pip install -q flake8==3.7.8\n\nvint: $(BUILD_VIRTUAL_ENV)/bin/vint\n\t$(BUILD_VIRTUAL_ENV)/bin/vint after autoload ftplugin plugin\n\nflake8: $(BUILD_VIRTUAL_ENV)/bin/flake8\n\t$(BUILD_VIRTUAL_ENV)/bin/flake8 pythonx/jedi_*.py\n\ncheck: vint flake8\n\nclean:\n\trm -rf build\n\n.PHONY: test check clean vint flake8\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 9.3203125,
          "content": ".. image:: https://github.com/davidhalter/jedi-vim/blob/master/doc/logotype-a.svg\n\n#################################################\njedi-vim - awesome Python autocompletion with VIM\n#################################################\n\n.. image:: https://travis-ci.org/davidhalter/jedi-vim.svg?branch=master\n   :target: https://travis-ci.org/davidhalter/jedi-vim\n   :alt: Travis-CI build status\n\njedi-vim is a VIM binding to the autocompletion library\n`Jedi <http://github.com/davidhalter/jedi>`_.\n\nHere are some pictures:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_complete.png\n\nCompletion for almost anything (Ctrl+Space).\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_function.png\n\nDisplay of function/class bodies, docstrings.\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_pydoc.png\n\nDocumentation (Pydoc) support (with highlighting, Shift+k).\n\nThere is also support for goto and renaming.\n\n\nGet the latest from `github <http://github.com/davidhalter/jedi-vim>`_.\n\nDocumentation\n=============\n\nDocumentation is available in your vim: ``:help jedi-vim``. You can also look\nit up `on github <http://github.com/davidhalter/jedi-vim/blob/master/doc/jedi-vim.txt>`_.\n\nYou can read the Jedi library documentation `here <http://jedi.readthedocs.io/en/latest/>`_.\n\nIf you want to report issues, just use the github issue tracker. In case of\nquestions about the software, please use `stackoverflow\n<https://stackoverflow.com/questions/tagged/jedi-vim>`_ and tag your question with ``jedi-vim``.\n\n\nContributing\n============\n\nWe love Pull Requests! Read the instructions in ``CONTRIBUTING.md``.\n\n\nFeatures\n========\n\nThe Jedi library understands most of Python's core features. From decorators to\ngenerators, there is broad support.\n\nApart from that, jedi-vim supports the following commands\n\n- Completion ``<C-Space>``\n- Goto assignment ``<leader>g`` (typical goto function)\n- Goto definition ``<leader>d`` (follow identifier as far as possible,\n  includes imports and statements)\n- Goto (typing) stub ``<leader>s``\n- Show Documentation/Pydoc ``K`` (shows a popup with assignments)\n- Renaming ``<leader>r``\n- Usages ``<leader>n`` (shows all the usages of a name)\n- Open module, e.g. ``:Pyimport os`` (opens the ``os`` module)\n\n\nInstallation\n============\n\nRequirements\n------------\n- **Vim**: You need a VIM version that was compiled with Python 3 or later\n(``+python3``).  You can check this from within VIM using\n``:python3 import sys; print(sys.version)``.\n\n- **Neovim**: You need a python environment with ``pynvim`` installed:\n``pip install pynvim``\n\nthen check your environment is correctly setup from within Neovim using\n``:checkhealth provider.python``\n\nManual installation\n-------------------\n\nYou might want to use `pathogen <https://github.com/tpope/vim-pathogen>`_ or\n`Vundle <https://github.com/gmarik/vundle>`_ to install jedi-vim.\n\nThe first thing you need after that is an up-to-date version of Jedi. Install\n``git submodule update --init --recursive`` in your jedi-vim repository.\n\nExample installation command using Pathogen:\n\n.. code-block:: sh\n\n    git clone --recursive https://github.com/davidhalter/jedi-vim.git ~/.vim/bundle/jedi-vim\n\nExample installation using Vundle:\n\nAdd the following line in your `~/.vimrc`\n    \n.. code-block:: vim\n\n    Plugin 'davidhalter/jedi-vim'\n\nFor installing Jedi, ``pip install jedi`` will also work, but you might run\ninto issues when working in virtual environments. Please use git submodules.\n\n\nInstallation with your distribution\n-----------------------------------\n\nOn Arch Linux, you can also install jedi-vim from official repositories as\n`vim-jedi <https://www.archlinux.org/packages/community/any/vim-jedi/>`__.\nIt is also available on\n`Debian (≥8) <https://packages.debian.org/vim-python-jedi>`__ and\n`Ubuntu (≥14.04) <http://packages.ubuntu.com/vim-python-jedi>`__ as\nvim-python-jedi.\nOn Fedora Linux, it is available as\n`vim-jedi <https://packages.fedoraproject.org/pkgs/vim-jedi/vim-jedi/>`__.\n\nPlease note that this version might be quite old compared to using jedi-vim\nfrom Git.\n\nCaveats\n-------\n\nNote that the `python-mode <https://github.com/klen/python-mode>`_ VIM plugin seems\nto conflict with jedi-vim, therefore you should disable it before enabling\njedi-vim.\n\nTo enjoy the full features of jedi-vim, you should have VIM >= 7.3, compiled with\n``+conceal`` (which is not the case on some platforms, including OS X). If your VIM\ndoes not meet these requirements, the parameter recommendation list may not appear\nwhen you type an open bracket after a function name. Please read\n`the documentation <http://github.com/davidhalter/jedi-vim/blob/master/doc/jedi-vim.txt>`_\nfor details.\n\n\nSettings\n========\n\nJedi is by default automatically initialized. If you don't want that I suggest\nyou disable the auto-initialization in your ``.vimrc``:\n\n.. code-block:: vim\n\n    let g:jedi#auto_initialization = 0\n\nThere are also some VIM options (like ``completeopt`` and key defaults) which\nare automatically initialized, but you can skip this:\n\n.. code-block:: vim\n\n    let g:jedi#auto_vim_configuration = 0\n\n\nYou can make jedi-vim use tabs when going to a definition etc:\n\n.. code-block:: vim\n\n    let g:jedi#use_tabs_not_buffers = 1\n\nIf you are a person who likes to use VIM-splits, you might want to put this in your ``.vimrc``:\n\n.. code-block:: vim\n\n    let g:jedi#use_splits_not_buffers = \"left\"\n\nThis options could be \"left\", \"right\", \"top\", \"bottom\" or \"winwidth\". It will decide the direction where the split open.\n\nJedi automatically starts the completion, if you type a dot, e.g. ``str.``, if\nyou don't want this:\n\n.. code-block:: vim\n\n    let g:jedi#popup_on_dot = 0\n\nJedi selects the first line of the completion menu: for a better typing-flow\nand usually saves one keypress.\n\n.. code-block:: vim\n\n    let g:jedi#popup_select_first = 0\n\nJedi displays function call signatures in insert mode in real-time, highlighting\nthe current argument. The call signatures can be displayed as a pop-up in the\nbuffer (set to 1 by default (with the conceal feature), 2 otherwise),\nwhich has the advantage of being easier to refer to (but is a hack with\nmany drawbacks since it changes the buffer's contents),\nor in Vim's command line aligned with the function call (set to 2), which\ncan improve the integrity of Vim's undo history.\n\n.. code-block:: vim\n\n    let g:jedi#show_call_signatures = \"1\"\n\nHere are a few more defaults for actions, read the docs (``:help jedi-vim``) to\nget more information. If you set them to ``\"\"``, they are not assigned.\n\n.. code-block:: vim\n\n    NOTE: subject to change!\n\n    let g:jedi#goto_command = \"<leader>d\"\n    let g:jedi#goto_assignments_command = \"<leader>g\"\n    let g:jedi#goto_stubs_command = \"<leader>s\"\n    let g:jedi#goto_definitions_command = \"\"\n    let g:jedi#documentation_command = \"K\"\n    let g:jedi#usages_command = \"<leader>n\"\n    let g:jedi#completions_command = \"<C-Space>\"\n    let g:jedi#rename_command = \"<leader>r\"\n    let g:jedi#rename_command_keep_name = \"<leader>R\"\n\nAn example for setting up your project:\n\n.. code-block:: vim\n\n    let g:jedi#environment_path = \"/usr/bin/python3.9\"\n\njedi-vim tries its best to guess your virtual env. If you want to work with a\nspecific virtual environment however, you can point jedi-vim towards it:\n\n.. code-block:: vim\n\n    let g:jedi#environment_path = \"venv\"\n\nFinally, if you don't want completion, but all the other features, use:\n\n.. code-block:: vim\n\n    let g:jedi#completions_enabled = 0\n\nFAQ\n===\n\nI want to use Jedi with a Python 2 Environment, but it's not listed under \"Known environments\"\n----------------------------------------------------------------------------------------------\n\nStarting with version 0.18.0 Jedi dropped support for Python 2.\n\n\nI don't want the docstring window to popup during completion\n------------------------------------------------------------\n\nThis depends on the ``completeopt`` option. Jedi initializes it in its\n``ftplugin``. Add the following line to your ``.vimrc`` to disable it:\n\n.. code-block:: vim\n\n    autocmd FileType python setlocal completeopt-=preview\n\n\nI want <Tab> to do autocompletion\n---------------------------------\n\nDon't even think about changing the Jedi command to ``<Tab>``,\nuse `supertab <https://github.com/ervandew/supertab>`_!\n\n\nThe completion is too slow!\n---------------------------\n\n1. Completion of complex libraries (like Numpy) should only be slow the first\n   time you complete them. After that the results should be cached and very fast.\n\n2. If it is still slow after the initial completion and you have installed the\n   python-mode Vim plugin, try disabling its rope mode:\n\n   .. code-block:: vim\n\n       let g:pymode_rope = 0\n\n   See issue `#163 <https://github.com/davidhalter/jedi-vim/issues/163>`__.\n\n3. You can also use `deoplete-jedi <https://github.com/zchee/deoplete-jedi>`__\n   for completions, which uses Jedi, but does completions asynchronously\n   (requires Neovim).\n   It makes sense to use both jedi-vim and deoplete-jedi, but you should disable\n   jedi-vim's completions then:\n\n   .. code-block:: vim\n   \n       let g:jedi#completions_enabled = 0\n\nTesting\n=======\n\njedi-vim is being tested with a combination of `vspec\n<https://github.com/kana/vim-vspec>`_ and `py.test <http://pytest.org/>`_.\n\nThe tests are in the ``test`` subdirectory, you can run them calling::\n\n    py.test\n\nThe tests are automatically run with `travis\n<https://travis-ci.org/davidhalter/jedi-vim>`_.\n"
        },
        {
          "name": "after",
          "type": "tree",
          "content": null
        },
        {
          "name": "autoload",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.083984375,
          "content": "coverage:\n  status:\n    project: true\n    patch: true\n    changes: true\n\ncomment: off\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ftplugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "pythonx",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0615234375,
          "content": "[tool:pytest]\ntestpaths = test\n\n[flake8]\nmax-line-length = 100\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}