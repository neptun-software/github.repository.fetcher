{
  "metadata": {
    "timestamp": 1736560787323,
    "page": 477,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ml-explore/mlx-examples",
      "stars": 6515,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.826171875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Vim\n*.swp\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# IDE files\n.idea/\n.vscode/\n\n# .DS_Store files\n.DS_Store\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.2333984375,
          "content": "repos:\n-   repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.8.0\n    hooks:\n    -   id: black\n-   repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n    -   id: isort\n        args:\n            - --profile=black\n"
        },
        {
          "name": "ACKNOWLEDGMENTS.md",
          "type": "blob",
          "size": 0.724609375,
          "content": "# Individual Contributors\n\nIf you wish to be acknowledged for your contributions, please list your name\nwith a short description of your contribution(s) below. For example:\n\n- Jane Smith: Added the `foo` example.\n\nMLX Examples was developed with contributions from the following individuals:\n\n- Juarez Bochi: Added support for T5 models.\n- Sarthak Yadav: Added the `cifar` and `speechcommands` examples.\n- Shunta Saito: Added support for PLaMo models.\n- Gabrijel Boduljak: Implemented `CLIP`.\n- Markus Enzweiler: Added the `cvae` examples.\n- Prince Canuma: Helped add support for `Starcoder2` models.\n- Shiyu Li: Added the `Segment Anything Model`.\n- Gökdeniz Gülmez: Added support for `MiniCPM`, `Mamba` and support for `full-fine-tuning`."
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.4140625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[opensource-conduct@group.apple.com](mailto:opensource-conduct@group.apple.com).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2470703125,
          "content": "# Contributing to mlx-examples\n\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\n\n1. Fork and submit pull requests to the repo. \n2. If you've added code that should be tested, add tests.\n3. Every PR should have passing tests and at least one review. \n4. For code formatting install `pre-commit` using something like `pip install pre-commit` and run `pre-commit install`.\n   This should install hooks for running `black` and `clang-format` to ensure\n   consistent style for C++ and python code.\n \n   You can also run the formatters manually as follows on individual files:\n \n     ```bash\n     clang-format -i file.cpp\n     ```\n \n     ```bash\n     black file.py\n     ```\n\n     or,\n\n     ```bash\n     # single file\n     pre-commit run --files file1.py \n\n     # specific files\n     pre-commit run --files file1.py file2.py\n     ```\n \n   or run `pre-commit run --all-files` to check all files in the repo.\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\n## License\n\nBy contributing to mlx-examples, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright © 2023 Apple Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5888671875,
          "content": "# MLX Examples\n\nThis repo contains a variety of standalone examples using the [MLX\nframework](https://github.com/ml-explore/mlx).\n\nThe [MNIST](mnist) example is a good starting point to learn how to use MLX.\n\nSome more useful examples are listed below.\n\n### Text Models \n\n- [MLX LM](llms/README.md) a package for LLM text generation, fine-tuning, and more.\n- [Transformer language model](transformer_lm) training.\n- Minimal examples of large scale text generation with [LLaMA](llms/llama),\n  [Mistral](llms/mistral), and more in the [LLMs](llms) directory.\n- A mixture-of-experts (MoE) language model with [Mixtral 8x7B](llms/mixtral).\n- Parameter efficient fine-tuning with [LoRA or QLoRA](lora).\n- Text-to-text multi-task Transformers with [T5](t5).\n- Bidirectional language understanding with [BERT](bert).\n\n### Image Models \n\n- Generating images\n  - [FLUX](flux)\n  - [Stable Diffusion or SDXL](stable_diffusion)\n- Image classification using [ResNets on CIFAR-10](cifar).\n- Convolutional variational autoencoder [(CVAE) on MNIST](cvae).\n\n### Audio Models\n\n- Speech recognition with [OpenAI's Whisper](whisper).\n- Audio compression and generation with [Meta's EnCodec](encodec).\n\n### Multimodal models\n\n- Joint text and image embeddings with [CLIP](clip).\n- Text generation from image and text inputs with [LLaVA](llava).\n- Image segmentation with [Segment Anything (SAM)](segment_anything).\n\n### Other Models \n\n- Semi-supervised learning on graph-structured data with [GCN](gcn).\n- Real NVP [normalizing flow](normalizing_flow) for density estimation and\n  sampling.\n\n### Hugging Face\n\nNote: You can now directly download a few converted checkpoints from the [MLX\nCommunity](https://huggingface.co/mlx-community) organization on Hugging Face.\nWe encourage you to join the community and [contribute new\nmodels](https://github.com/ml-explore/mlx-examples/issues/155).\n\n## Contributing \n\nWe are grateful for all of [our\ncontributors](ACKNOWLEDGMENTS.md#Individual-Contributors). If you contribute\nto MLX Examples and wish to be acknowledged, please add your name to the list in your\npull request.\n\n## Citing MLX Examples\n\nThe MLX software suite was initially developed with equal contribution by Awni\nHannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert. If you find\nMLX Examples useful in your research and wish to cite it, please use the following\nBibTex entry:\n\n```\n@software{mlx2023,\n  author = {Awni Hannun and Jagrit Digani and Angelos Katharopoulos and Ronan Collobert},\n  title = {{MLX}: Efficient and flexible machine learning on Apple silicon},\n  url = {https://github.com/ml-explore},\n  version = {0.0},\n  year = {2023},\n}\n```\n"
        },
        {
          "name": "bert",
          "type": "tree",
          "content": null
        },
        {
          "name": "cifar",
          "type": "tree",
          "content": null
        },
        {
          "name": "clip",
          "type": "tree",
          "content": null
        },
        {
          "name": "cvae",
          "type": "tree",
          "content": null
        },
        {
          "name": "encodec",
          "type": "tree",
          "content": null
        },
        {
          "name": "flux",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcn",
          "type": "tree",
          "content": null
        },
        {
          "name": "llava",
          "type": "tree",
          "content": null
        },
        {
          "name": "llms",
          "type": "tree",
          "content": null
        },
        {
          "name": "lora",
          "type": "tree",
          "content": null
        },
        {
          "name": "mnist",
          "type": "tree",
          "content": null
        },
        {
          "name": "musicgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "normalizing_flow",
          "type": "tree",
          "content": null
        },
        {
          "name": "segment_anything",
          "type": "tree",
          "content": null
        },
        {
          "name": "speechcommands",
          "type": "tree",
          "content": null
        },
        {
          "name": "stable_diffusion",
          "type": "tree",
          "content": null
        },
        {
          "name": "t5",
          "type": "tree",
          "content": null
        },
        {
          "name": "transformer_lm",
          "type": "tree",
          "content": null
        },
        {
          "name": "whisper",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}