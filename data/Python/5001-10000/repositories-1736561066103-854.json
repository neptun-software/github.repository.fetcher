{
  "metadata": {
    "timestamp": 1736561066103,
    "page": 854,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tebelorg/RPA-Python",
      "stars": 5035,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4384765625,
          "content": "# exclude python packaging files\n/dist\n/MANIFEST\n/tagui.egg-info\n/rpa_package/dist\n/rpa_package/MANIFEST\n/rpa_package/rpa.egg-info\n\n# exclude pycache directory\n/__pycache__\n/rpa_package/__pycache__\n\n# exclude generated .pyc file\n/tagui.pyc\n/rpa_package/rpa.pyc\n\n# exclude entry flow and logs\n/rpa_python\n/rpa_python.log\n/rpa_python.raw\n/rpa_python.js\n\n# exclude entry flow output file\n/rpa_python.txt\n\n# exclude custom js functions \n/tagui_local.js\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.09765625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2019 Tebel.Automation Private Limited\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0546875,
          "content": "include LICENSE.txt\ninclude README.md\ninclude sample.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.744140625,
          "content": "# RPA for Python :snake:\n\n[**v1.50**](https://github.com/tebelorg/RPA-Python/releases)&ensp;•&ensp;[**Use Cases**](#use-cases)&ensp;•&ensp;[**API Reference**](#api-reference)&ensp;•&ensp;[**About & Credits**](#about--credits)&ensp;•&ensp;[**Try on Cloud**](https://colab.research.google.com/drive/1or8DtXZP8ZxJYK52me0dA6O9A1dXKKOE?usp=sharing)&ensp;•&ensp;[**PyCon Video**](https://www.youtube.com/watch?v=F2aQKWx_EAE)&ensp;•&ensp;[**Telegram Chat**](https://t.me/pythonrpa)&ensp;•&ensp;[*中文*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=zh-CN&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*हिन्दी*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=hi&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*Español*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*Français*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=fr&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*عربى*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=ar&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*বাংলা*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=bn&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*Русский*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=ru&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*Português*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=pt&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*Bahasa*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=id&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*Deutsch*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=de&_x_tr_hl=en-US&_x_tr_pto=wapp)&ensp;•&ensp;[*More..*](https://github-com.translate.goog/tebelorg/RPA-Python?_x_tr_sl=en&_x_tr_tl=sr&_x_tr_hl=en-US&_x_tr_pto=wapp)\n\n![RPA for Python demo in Jupyter notebook](https://raw.githubusercontent.com/tebelorg/Tump/master/tagui_python.gif)\n\nTo install this Python package for RPA (robotic process automation) -\n```\npip install rpa\n```\n\nTo use it in Jupyter notebook, Python script or interactive shell -\n```python\nimport rpa as r\n```\n\nNotes on operating systems and optional visual automation mode -\n- :rainbow_flag: **Windows -** if visual automation is faulty, try setting your display zoom level to recommended % or 100%\n- :apple: **macOS -** due to tighter security, [install PHP manually](https://github.com/tebelorg/RPA-Python/issues/335#issuecomment-989470056) and see solutions for [PhantomJS](https://github.com/tebelorg/RPA-Python/issues/79) and [Java popups](https://github.com/tebelorg/RPA-Python/issues/78)\n- :penguin: **Linux -** visual automation mode requires special setup on Linux, see how to [install OpenCV and Tesseract](https://sikulix-2014.readthedocs.io/en/latest/newslinux.html)\n- :grapes: **Raspberry Pi -** [use this setup guide](https://www.techgence.com/d/29-install-rpa-python-on-raspberry-pi-updated-2022) to run the package on Raspberry Pies (low-cost automation servers)\n\n# Use Cases\n\nRPA for Python's simple and powerful API makes robotic process automation fun! You can use it to quickly automate away repetitive time-consuming tasks on websites, desktop applications, or the command line.\n\nAs a token of my appreciation, any new bug reported will be appreciated with a US$200 gift card from your preferred merchant. Any feature suggestion accepted will be appreciated with a US$100 gift card.\n\n#### WEB AUTOMATION\n```python\nr.init()\nr.url('https://duckduckgo.com')\nr.type('//*[@name=\"q\"]', 'decentralisation[enter]')\nr.wait() # ensure results are fully loaded\nr.snap('page', 'results.png')\nr.close()\n```\n\n#### VISUAL AUTOMATION\n```python\nr.init(visual_automation = True)\nr.dclick('outlook_icon.png')\nr.click('new_mail.png')\n...\nr.type('message_box.png', 'Hi Gillian,[enter]This is ...')\nr.click('send_button.png')\nr.close()\n```\n\n#### OCR AUTOMATION\n```python\nr.init(visual_automation = True, chrome_browser = False)\nprint(r.read('pdf_report_window.png'))\nprint(r.read('image_preview.png'))\nr.hover('anchor_element.png')\nprint(r.read(r.mouse_x(), r.mouse_y(), r.mouse_x() + 400, r.mouse_y() + 200))\nr.close()\n```\n\n#### KEYBOARD AUTOMATION\n```python\nr.init(visual_automation = True, chrome_browser = False)\nr.keyboard('[cmd][space]')\nr.keyboard('safari[enter]')\nr.keyboard('[cmd]t')\nr.keyboard('snatcher[enter]')\nr.wait(2.5)\nr.snap('page.png', 'results.png')\nr.close()\n```\n\n#### MOUSE AUTOMATION\n```python\nr.init(visual_automation = True)\nr.type(600, 300, 'neo kobe city')\nr.click(900, 300)\nr.snap('page.png', 'results.png')\nr.hover('button_to_drag.png')\nr.mouse('down')\nr.hover(r.mouse_x() + 300, r.mouse_y())\nr.mouse('up')\nr.close()\n```\n\n#### TELEGRAM NOTIFICATION\n>_first, look up @rpapybot on your Telegram app to approve receiving messages_\n```python\nr.telegram('1234567890', 'ID can be string or number, r.init() is not required')\nr.telegram(1234567890, 'Hello World. Olá Mundo. नमस्ते दुनिया. 안녕하세요 세계. 世界,你好。')\nr.telegram(1234567890, 'Use backslash n for new line\\nThis is line 2 of the message')\n```\n\n#### SECURE TEMPORARY STORAGE\n>_securely share files up to 100 MB on PrivateBin, which will self-destruct after 1 week_\n```python\nbin_url = r.bin('secret_agent_report.pdf', 'optional password')\nr.telegram(1234567890, 'Access confidential report at ' + bin_url)\n```\n\n# API Reference\n\n[**Notes**](#general-notes)&ensp;•&ensp;[**Element Identifiers**](#element-identifiers)&ensp;•&ensp;[**Core Functions**](#core-functions)&ensp;•&ensp;[**Basic Functions**](#basic-functions)&ensp;•&ensp;[**Pro Functions**](#pro-functions)&ensp;•&ensp;[**Helper Functions**](#helper-functions)\n\n---\n\n#### GENERAL NOTES\n\nSee [sample Python script](https://github.com/tebelorg/RPA-Python/blob/master/sample.py), the [RPA Challenge solution](https://github.com/tebelorg/RPA-Python/issues/120#issuecomment-610518196), and [RedMart groceries example](https://github.com/tebelorg/RPA-Python/issues/24). To send a Telegram app notification, simply [look up @rpapybot](https://github.com/tebelorg/RPA-Python/issues/281#issue-942803794) to allow receiving messages. To automate Chrome browser invisibly, use [headless mode](https://github.com/tebelorg/RPA-Python/issues/240#issuecomment-839981773). To run 10X faster instead of normal human speed, use [turbo mode](https://github.com/tebelorg/RPA-Python/issues/297) (read the caveats!). Some CAPTCHAs can be solved using services like [2Captcha](https://2captcha.com), [Capsolver](https://www.capsolver.com) or directly by [replicating user actions](https://github.com/tebelorg/RPA-Python/issues/399#issuecomment-1163879428).\n\n[Securely share files](https://github.com/tebelorg/RPA-Python/issues/396#issuecomment-1169409452) up to 100 MB with built-in temporary online storage, on a dedicated [PrivateBin server](https://tebel.org/bin/). You can even run RPA on your phone browser [using this Colab notebook](https://colab.research.google.com/drive/1or8DtXZP8ZxJYK52me0dA6O9A1dXKKOE?usp=sharing) (eg datascraping with up to 5 Colab sessions). By design this package has [enterprise security](https://github.com/aisingapore/TagUI/blob/master/README.md#enterprise-security-by-design) and you can install, update and use it [without the internet](https://github.com/tebelorg/RPA-Python/issues/36#issuecomment-543670292).\n\nFully control error handling by [setting error(True)](https://github.com/tebelorg/RPA-Python/issues/299#issuecomment-1110361923) to raise Python exception on error, and manage with try-except. For fine-grained control on web browser file download location, use [download_location()](https://github.com/tebelorg/RPA-Python/issues/279#issuecomment-877749880). For overriding default folder location to install and invoke TagUI (a [forked version](https://github.com/tebelorg/TagUI) optimised for rpa package), use [tagui_location()](https://github.com/tebelorg/RPA-Python/issues/257#issuecomment-846602776).\n\nIf you are using non-English operating system and get \"invalid continuation byte\" error, you can set code page to support UTF-8 or change your Python script's encoding to your OS encoding. [See this example for Chinese](https://github.com/tebelorg/RPA-Python/issues/451#issuecomment-1556169481). Use focus() to make Windows/Mac application windows to be in focus (see here for [pywin32 alternative](https://github.com/tebelorg/RPA-Python/issues/478#issuecomment-1653117053)).\n\nSome users might find it interesting or useful to use AI and machine learning (in particular LLM large language models), to help generate a template script, then they make the fine-tuning accordingly. [See this issue](https://github.com/tebelorg/RPA-Python/issues/540) on some questions that I asked Anthropic's Claude 3.5 Sonnet and its responses.\n\n#### ELEMENT IDENTIFIERS\nAn element identifier helps to tell RPA for Python exactly which element on the user interface you want to interact with. For example, //\\*[@id='email'] is an XPath pointing to the webpage element having the id attribute 'email'.\n\n- :globe_with_meridians: For web automation, the web element identifier can be XPath selector, CSS selector, or the following attributes - id, name, class, title, aria-label, text(), href, in decreasing order of priority. Recommend writing XPath manually or simply using attributes. There is automatic waiting for an element to appear before timeout happens, and error is returned that the element cannot be found. To change the default timeout of 10 seconds, use timeout(). PS - if you are using a Chrome extension to read XPaths, use [SelectorsHub](https://chrome.google.com/webstore/detail/selectorshub/ndgimibanhlabgdgjcpbbndiehljcpfh?hl=en).\n\n- :camera_flash: An element identifier can also be a .png or .bmp image snapshot representing the UI element (can be on desktop applications, terminal window or web browser). If the image file specified does not exist, OCR will be used to search for that text on the screen to act on the UI element containing the text, eg r.click('Submit Form.png'). Transparency (0% opacity) is supported in .png images. x, y coordinates of elements on the screen can be used as well. Notes for visually [automating 2 monitors](https://github.com/tebelorg/RPA-Python/issues/252#issuecomment-844277454), and macOS [Retina display issue](https://github.com/tebelorg/RPA-Python/issues/170#issuecomment-843168745).\n\n- :page_facing_up: A further image identifier example is a png image of a window (PDF viewer, MS Word, textbox etc) with the center content of the image set as transparent. This allows using read() and snap() to perform OCR and save snapshots of application windows, containers, frames, textboxes with varying content. See this [image example](https://user-images.githubusercontent.com/10379601/124394598-b59cfd80-dd32-11eb-93bb-68504c91afb9.png) of a PDF frame with content removed to be transparent. For read() and snap(), x1, y1, x2, y2 coordinates pair can be used to define the region of interest on the screen to perform OCR or capture snapshot.\n\n#### CORE FUNCTIONS\nFunction|Parameters|Purpose\n:-------|:---------|:------\n`init()`|`visual_automation=False`,`chrome_browser=True`|start TagUI, auto-setup on first run\n`close()`||close TagUI, Chrome browser, SikuliX\n`pack()`||for deploying package without internet\n`update()`||for updating package without internet\n`error()`|`True` or `False`|set to True to raise exception on error\n`debug()`|`True` or `False` or `text_to_log`|print & log debug info to rpa_python.log\n\n>_by default RPA for Python runs at normal human speed, to run 10X faster use init(turbo_mode = True)_\n\n#### BASIC FUNCTIONS\nFunction|Parameters|Purpose\n:-------|:---------|:------\n`url()`|`webpage_url` (no parameter to return current URL)|go to web URL\n`click()`|`element_identifier` (or x, y using visual automation)| left-click on element\n`rclick()`|`element_identifier` (or x, y using visual automation)|right-click on element\n`dclick()`|`element_identifier` (or x, y using visual automation)|double-click on element\n`hover()`|`element_identifier` (or x, y using visual automation)|move mouse to element\n`type()`|`element_identifier` (or x, y), `text` (`'[enter]'`/`'[clear]'`)|enter text at element\n`select()`|`element_identifier` (or x, y), `value or text` (or x, y)|choose dropdown option\n`read()`|`element_identifier` (`'page'` is web page) (or x1, y1, x2, y2)|return element text\n`snap()`|`element_identifier` (`'page'` is web page), `filename_to_save`|save screenshot to file\n`load()`|`filename_to_load`|return file content\n`dump()`|`text_to_dump`, `filename_to_save`|save text to file\n`write()`|`text_to_write`, `filename_to_save`|append text to file\n`ask()`|`text_to_prompt`|ask & return user input\n\n>_to wait for an element to appear until timeout() value, use hover(). to drag-and-drop, [do it this way](https://github.com/tebelorg/RPA-Python/issues/58#issuecomment-570778431)_\n\n#### PRO FUNCTIONS\nFunction|Parameters|Purpose\n:-------|:---------|:------\n`telegram()`|`telegram_id`, `text_to_send` (first look up @rpapybot)|send Telegram message\n`keyboard()`|`keys_and_modifiers` (using visual automation)|send keystrokes to screen\n`mouse()`|`'down'` or `'up'` (using visual automation)|send mouse event to screen\n`focus()`|`app_to_focus` (full name of app)|make application in focus\n`wait()`|`delay_in_seconds` (default 5 seconds)|explicitly wait for some time\n`table()`|`table number` or `XPath`, `filename_to_save`|save webpage table to CSV\n`bin()`|`file_to_bin`, `password` (optional but recommended)|secure temporary storage\n`upload()`|`element_identifier` (CSS), `filename_to_upload`|upload file to web element\n`download()`|`download_url`, `filename_to_save` (optional)|download from URL to file\n`unzip()`|`file_to_unzip`, `unzip_location` (optional)|unzip zip file to specified location\n`frame()`|`main_frame id or name`, `sub_frame` (optional)|set web frame, frame() to reset\n`popup()`|`string_in_url` (no parameter to reset to main page, especially important when used to control another browser tab)|set context to web popup tab\n`run()`|`command_to_run` (use ; between commands)|run OS command & return output\n`dom()`|`statement_to_run` (JS code to run in browser)|run code in DOM & return output\n`vision()`|`command_to_run` (Python code for SikuliX)|run custom SikuliX commands\n`timeout()`|`timeout_in_seconds` (blank returns current timeout)|change wait timeout (default 10s)\n\nkeyboard() modifiers and special keys -\n>_[shift] [ctrl] [alt] [win] [cmd] [clear] [space] [enter] [backspace] [tab] [esc] [up] [down] [left] [right] [pageup] [pagedown] [delete] [home] [end] [insert] [f1] .. [f15] [printscreen] [scrolllock] [pause] [capslock] [numlock]_\n\n#### HELPER FUNCTIONS\nFunction|Parameters|Purpose\n:-------|:---------|:------\n`exist()`|`element_identifier`|True or False if element shows before timeout\n`present()`|`element_identifier`|return True or False if element is present now\n`count()`|`element_identifier`|return number of web elements as integer\n`clipboard()`|`text_to_put` or no parameter|put text or return clipboard text as string\n`get_text()`|`source_text`,`left`,`right`,`count=1`|return text between left & right markers\n`del_chars()`|`source_text`,`characters`|return text after deleting given characters\n`mouse_xy()`||return '(x,y)' coordinates of mouse as string\n`mouse_x()`||return x coordinate of mouse as integer\n`mouse_y()`||return y coordinate of mouse as integer\n`title()`||return page title of current web page as string\n`text()`||return text content of current web page as string\n`timer()`||return time elapsed in sec between calls as float\n\n>_to type a large amount of text quickly, use clipboard() and keyboard() to paste instead of type()_\n\n# About & Credits\n\nTagUI is a leading open-source RPA software :robot: with tens of thousands of users. It was created in 2016-2017 when I left DBS Bank as a test automation engineer, for a one-year sabbatical to Eastern Europe. Most of its code base was written in Novi Sad Serbia. In 2018, I joined AI Singapore to continue development of TagUI.\n\nOver a few months in 2019, I took on a daddy role full-time, taking care of my newborn baby girl and wife :cowboy_hat_face:🤱. In between nannying, I used my time pockets to create this Python package built on TagUI. I hope `pip install rpa` would make life easier for Python users from different walks of life.\n\nI had been maintaining the package (and a [forked version of TagUI](https://github.com/tebelorg/TagUI) optimised for it) in my personal time. But now, [Marcelo Cecin](https://www.linkedin.com/in/marcelocecin/), [Luis Alejandro](https://www.linkedin.com/in/luis-alejandro/), [Jozsef Fulop](https://www.linkedin.com/in/jozseffulop86/), [Tolani Jaiye-Tikolo](https://www.linkedin.com/in/tolani-jaiye-tikolo/), [Shyan Chua](https://www.linkedin.com/in/shyanchua/), [Laurence Liew](https://www.linkedin.com/in/laurenceliew/), [Bala Ranganathan](https://www.linkedin.com/in/bala-ranganathan/), [myself](https://www.linkedin.com/in/kensoh/) are the new team maintaining this package. We're happy that tens of thousands of people use it :snake:\n\nFor technical info, see its intuitive architecture below and ample comments in this [single-file package](https://github.com/tebelorg/RPA-Python/blob/master/tagui.py).\n\n![RPA for Python architecture](https://raw.githubusercontent.com/tebelorg/Tump/master/TagUI-Python/architecture.png)\n\nI would like to credit and express my appreciation to these amazing open-source contributors below :heart:\n\n- [TagUI](https://github.com/aisingapore/TagUI) - AI Singapore from Singapore / [@aisingapore](https://www.aisingapore.org)\n- [SikuliX](https://github.com/RaiMan/SikuliX1) - Raimund Hocke from Germany / [@RaiMan](https://github.com/RaiMan)\n- [CasperJS](https://github.com/casperjs/casperjs) - Nicolas Perriault from France / [@n1k0](https://github.com/n1k0)\n- [PhantomJS](https://github.com/ariya/phantomjs) - Ariya Hidayat from Indonesia / [@ariya](https://github.com/ariya)\n- [SlimerJS](https://github.com/laurentj/slimerjs) - Laurent Jouanneau from France / [@laurentj](https://github.com/laurentj)\n- [Philip Vollet](https://www.linkedin.com/in/philipvollet) from Germany, for spreading the word. Philip is a veteran in NLP and open-source. His sharing of RPA for Python helps spread the word to the vast and lovely open-source community about [pip install rpa](https://www.linkedin.com/posts/philipvollet_datascience-deeplearning-machinelearning-activity-6884853626183938048-Eqg3).\n\n![Philip's LinkedIn Post](https://raw.githubusercontent.com/tebelorg/Tump/master/philip_vollet.png)\n\n# License\nRPA for Python is open-source software released under Apache 2.0 license\n\n# One Last Thing.. `Mindly`\nI rarely make product recommendations, other than the [amazing OpenRPA software](https://github.com/open-rpa/openrpa), and the open-source RPA tools I personally worked on. I'd like to recommend [Mindly mindmapping app](https://www.mindlyapp.com) available on phone and macOS.\n\nA mindmap is an intuitive way to store, organise and retrieve info, as it mimics how the mind works - relationships between different concepts and memories. It's perfect to make productive use of time pockets on the go.\n\nBelow image is a Mindly example on benefits of coffee. I personally use it to map out my life for the next 13 years, reflect how to be a better husband, keep a list of traditional British foods, store supermarket member barcodes, as well as note-taking on the go. There's even a mindmap for my 3YO daughter to play with, she just enjoys dragging the nodes into the bin. So I created a dummy mindmap on standby that she can destroy.\n\nBest of all, the free version should meet the needs of most users. I have not exceeded the free limit of 100-node per mindmap, but I purchased it quite early on after using it, to support the work of the team behind this app.\n\nPS - I don't know Mindly's team, just recommending the app here because it rocks\n\n![Mindly Mindmapping App](https://raw.githubusercontent.com/tebelorg/Tump/master/mindly_app.png)\n"
        },
        {
          "name": "rpa_package",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample.py",
          "type": "blob",
          "size": 3.0380859375,
          "content": "# Sample script to search on Yahoo, take screenshot of results and visit DuckDuckgo\n\n# RPA for Python's simple and powerful API makes robotic process automation fun!\n# pip install rpa to install, pip install rpa --upgrade to get latest version\n\n# to use in Jupyter notebook, Python script or interactive shell\nimport rpa as r\n\n# use init() to start TagUI, it auto downloads TagUI on first run\n# default init(visual_automation = False, chrome_browser = True)\nr.init()\n\n# use url('your_url') to go to web page, url() returns current URL\nr.url('https://ca.yahoo.com')\n\n# use type() to enter text into an UI element or x, y location\n# '[enter]' = enter key, '[clear]' = clear field\nr.type('ybar-sbq', 'github')\n\n# use read() to fetch and return text from UI element\nsearch_text = r.read('ybar-sbq')\nprint(search_text)\n\n# use click() to click on an UI element or x, y location\n# rclick() = right-click, dclick() = double-click\nr.click('ybar-search')\n\n# use wait() to wait for a number of seconds\n# default wait() is 5 seconds\nr.wait(6.6)\n\n# use snap() to save screenshot of page or UI element\n# page = web page, page.png = computer screen\nr.snap('page', 'results.png')\nr.snap('logo', 'logo.png')\n\n# another example of interacting with a web page\n# include http:// or https:// in URL parameter\nr.url('https://duckduckgo.com')\nr.type('//*[@name=\"q\"]', 'The search engine that doesn\\'t track you.')\nr.snap('page', 'duckduckgo.png')\nr.wait(4.4)\n\n# use close() to close TagUI process and web browser\n# if you forget to close, just close() next time\nr.close()\n\n# in above web automation example, web element identifier can be XPath selector, CSS selector or\n# attributes id, name, class, title, aria-label, text(), href, in decreasing order of priority\n# if you don't mind using ugly and less robust XPath, it can be copied from Chrome inspector\n# otherwise recommend googling on writing XPath manually, or simply make use of attributes\n\n# also supports visual element identifier using .png or .bmp image snapshot\n# representing the UI element (can be on desktop applications or web browser)\n# for eg r.click('start_menu.png'), r.type('username_box.png', 'Sonic')\n\n# if the image file specified does not exist, OCR will be used to search for\n# that text on the screen to interact with the UI element containing that text\n# for eg r.click('Submit Form.png') clicks on a button with text 'Submit Form'\n# this trick also works for hover(), type(), select(), read(), snap() functions\n\n# visual element identifiers can also be x, y coordinates of elements on the screen\n# for eg r.click(600, 300), r.type(600, 300, 'Mario'), r.select(600, 300, 600, 400)\n# another eg is boundary of area of interest x1, y1, x2, y2 for read() and snap()\n# for eg r.read(200, 200, 600, 400), r.snap(200, 200, 600, 400, 'results.png')\n\n# image transparency (0% opacity) is supported, ie images with empty sections\n# eg r.read('image_preview_frame.png'), r.snap('application_window_frame.png')\n# or an element with transparent background to work with varying backgrounds\n# r.click('icon_transparent_background.png'), r.click('button_no_bkgnd.png')\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.544921875,
          "content": "from setuptools import setup\n\nsetup(\n    name='tagui',\n    version='1.50.0',\n    py_modules=['tagui'],\n    author='Ken Soh',\n    author_email='opensource@tebel.org',\n    license='Apache License 2.0',\n    url='https://github.com/tebelorg/RPA-Python',\n    description='RPA for Python is a Python package for RPA (robotic process automation)',\n    long_description='RPA for Python\\'s simple and powerful API makes robotic process automation fun! You can use it to quickly automate away repetitive time-consuming tasks on websites, desktop applications, or the command line.\\n\\nBuilt on AI Singapore\\'s TagUI open-source RPA tool, RPA capabilities out-of-the-box for this package include website automation, computer vision automation, optical character recognition, keyboard & mouse automation.\\n\\nTables can\\'t be displayed here, please refer to RPA for Python homepage for full API - https://github.com/tebelorg/RPA-Python',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: Apache Software License',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'Operating System :: POSIX :: Linux',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n"
        },
        {
          "name": "tagui.py",
          "type": "blob",
          "size": 75.5419921875,
          "content": "\"\"\"INTEGRATION ENGINE OF RPA FOR PYTHON PACKAGE ~ TEBEL.ORG\"\"\"\n# Apache License 2.0, Copyright 2019 Tebel.Automation Private Limited\n# https://github.com/tebelorg/RPA-Python/blob/master/LICENSE.txt\n__author__ = 'Ken Soh <opensource@tebel.org>'\n__version__ = '1.50.0'\n\nimport subprocess\nimport os\nimport sys\nimport time\nimport platform\n\n# required for python 2 usage of io.open\nif sys.version_info[0] < 3: import io\n\n# default timeout in seconds for UI element\n_tagui_timeout = 10.0\n\n# default delay in seconds in while loops\n_tagui_delay = 0.1\n\n# default debug flag to print debug output\n_tagui_debug = False\n\n# error flag to raise exception on error\n_tagui_error = False\n\n# flag to track if tagui session is started\n_tagui_started = False\n\n# flag to track visual automation connected\n_tagui_visual = False\n\n# flag to track chrome browser connected\n_tagui_chrome = False\n\n# id to track instruction count from rpa python to tagui\n_tagui_id = 0\n\n# to track the original directory when init() was called\n_tagui_init_directory = ''\n\n# to track file download directory for web browser\n_tagui_download_directory = ''\n\n# to track location of TagUI (default user home folder)\nif platform.system() == 'Windows':\n    _tagui_location = os.environ['APPDATA']\nelse:\n    _tagui_location = os.path.expanduser('~')\n \n# delete tagui temp output text file to avoid reading old data \nif os.path.isfile('rpa_python.txt'): os.remove('rpa_python.txt')\n\n# define local custom javascript functions for use in tagui\n_tagui_local_js = \\\n\"\"\"// local custom helper function to check if UI element exists\n// keep checking until timeout is reached before return result\n// effect is interacting with element as soon as it appears\n\nfunction exist(element_identifier) {\n\n    var exist_timeout = Date.now() + casper.options.waitTimeout;\n\n    while (Date.now() < exist_timeout) {\n        if (present(element_identifier))\n            return true;\n        else\n           sleep(100);\n    }\n\n    return false;\n\n}\n\n// function to replace add_concat() in tagui_header.js\n// gain - echoing string with single and double quotes\n// loss - no text-like variables usage since Python env\n\nfunction add_concat(source_string) {\n\n    return source_string;\n\n}\n\"\"\"\n\ndef _python2_env():\n    \"\"\"function to check python version for compatibility handling\"\"\"\n    if sys.version_info[0] < 3: return True\n    else: return False\n\ndef _python3_env():\n    \"\"\"function to check python version for compatibility handling\"\"\"\n    return not _python2_env()\n\ndef _py23_decode(input_variable = None):\n    \"\"\"function for python 2 and 3 str-byte compatibility handling\"\"\"\n    if input_variable is None: return None\n    elif _python2_env(): return input_variable\n    else: return input_variable.decode('utf-8')\n\ndef _py23_encode(input_variable = None):\n    \"\"\"function for python 2 and 3 str-byte compatibility handling\"\"\"\n    if input_variable is None: return None\n    elif _python2_env(): return input_variable\n    else: return input_variable.encode('utf-8')\n\ndef _py23_open(target_filename, target_mode = 'r'):\n    \"\"\"function for python 2 and 3 open utf-8 compatibility handling\"\"\"\n    if _python2_env():\n        return io.open(target_filename, target_mode, encoding = 'utf-8')\n    else:\n        return open(target_filename, target_mode, encoding = 'utf-8') \n\ndef _py23_read(input_text = None):\n    \"\"\"function for python 2 and 3 read utf-8 compatibility handling\"\"\"\n    if input_text is None: return None\n    if _python2_env(): return input_text.encode('utf-8')\n    else: return input_text\n\ndef _py23_write(input_text = None):\n    \"\"\"function for python 2 and 3 write utf-8 compatibility handling\"\"\"\n    if input_text is None: return None\n    if _python2_env(): return input_text.decode('utf-8')\n    else: return input_text\n\ndef _tagui_read():\n    \"\"\"function to read from tagui process live mode interface\"\"\"\n    # readline instead of read, not expecting user input to tagui\n    global _process; return _py23_decode(_process.stdout.readline())\n\ndef _tagui_write(input_text = ''):\n    \"\"\"function to write to tagui process live mode interface\"\"\"\n    global _process; _process.stdin.write(_py23_encode(input_text))\n    _process.stdin.flush(); # flush to ensure immediate delivery\n\ndef _tagui_output():\n    \"\"\"function to wait for tagui output file to read and delete it\"\"\"\n    global _tagui_delay, _tagui_init_directory\n\n    # to handle user changing current directory after init() is called\n    init_directory_output_file = os.path.join(_tagui_init_directory, 'rpa_python.txt')\n\n    # sleep to not splurge cpu cycles in while loop\n    while not os.path.isfile('rpa_python.txt'):\n        if os.path.isfile(init_directory_output_file): break\n        time.sleep(_tagui_delay) \n\n    # roundabout implementation to ensure backward compatibility\n    if os.path.isfile('rpa_python.txt'):\n        tagui_output_file = _py23_open('rpa_python.txt', 'r')\n        tagui_output_text = _py23_read(tagui_output_file.read())\n        tagui_output_file.close()\n        os.remove('rpa_python.txt')\n    else:\n        tagui_output_file = _py23_open(init_directory_output_file, 'r')\n        tagui_output_text = _py23_read(tagui_output_file.read())\n        tagui_output_file.close()\n        os.remove(init_directory_output_file)\n\n    return tagui_output_text\n\ndef _esq(input_text = ''):\n    \"\"\"function for selective escape of single quote ' for tagui\"\"\"\n    # [BACKSLASH_QUOTE] marker to work together with send()\n    return input_text.replace(\"'\",'[BACKSLASH_QUOTE]')\n\ndef _sdq(input_text = ''):\n    \"\"\"function to escape ' in xpath for tagui live mode\"\"\"\n    # change identifier single quote ' to double quote \"\n    return input_text.replace(\"'\",'\"')\n\ndef _started():\n    global _tagui_started; return _tagui_started\n\ndef _visual():\n    global _tagui_visual; return _tagui_visual\n\ndef _chrome():\n    global _tagui_chrome; return _tagui_chrome\n\ndef _python_flow():\n    \"\"\"function to create entry tagui flow without visual automation\"\"\"\n    flow_text = '// NORMAL ENTRY FLOW FOR RPA FOR PYTHON ~ TEBEL.ORG\\r\\n\\r\\nlive'\n    flow_file = _py23_open('rpa_python', 'w')\n    flow_file.write(_py23_write(flow_text))\n    flow_file.close()\n\ndef _visual_flow():\n    \"\"\"function to create entry tagui flow with visual automation\"\"\"\n    flow_text = '// VISUAL ENTRY FLOW FOR RPA FOR PYTHON ~ TEBEL.ORG\\r\\n' + \\\n                '// mouse_xy() - dummy trigger for SikuliX integration\\r\\n\\r\\nlive'\n    flow_file = _py23_open('rpa_python', 'w')\n    flow_file.write(_py23_write(flow_text))\n    flow_file.close()\n\ndef _tagui_local():\n    \"\"\"function to create tagui_local.js for custom local functions\"\"\"\n    global _tagui_local_js\n    javascript_file = _py23_open('tagui_local.js', 'w')\n    javascript_file.write(_py23_write(_tagui_local_js))\n    javascript_file.close()\n\ndef _tagui_delta(base_directory = None):\n    \"\"\"function to download stable delta files from tagui cutting edge version\"\"\"\n    global __version__\n    if base_directory is None or base_directory == '': return False\n    # skip downloading if it is already done before for current release\n    if os.path.isfile(base_directory + '/' + 'rpa_python_' + __version__): return True\n\n    # define list of key tagui files to be downloaded and synced locally\n    delta_list = ['tagui', 'tagui.cmd', 'end_processes', 'end_processes.cmd', \n                    'tagui_header.js', 'tagui_parse.php', 'tagui.sikuli/tagui.py']\n\n    for delta_file in delta_list:\n        tagui_delta_url = 'https://raw.githubusercontent.com/tebelorg/Tump/master/TagUI-Python/' + delta_file\n        tagui_delta_file = base_directory + '/' + 'src' + '/' + delta_file\n        if not download(tagui_delta_url, tagui_delta_file): return False\n\n    # make sure execute permission is there for .tagui/src/tagui and end_processes\n    if platform.system() in ['Linux', 'Darwin']:\n        os.system('chmod -R 755 \"' + base_directory + '/' + 'src' + '/' + 'tagui\" > /dev/null 2>&1')\n        os.system('chmod -R 755 \"' + base_directory + '/' + 'src' + '/' + 'end_processes\" > /dev/null 2>&1')\n\n    # create marker file to skip syncing delta files next time for current release\n    delta_done_file = _py23_open(base_directory + '/' + 'rpa_python_' + __version__, 'w')\n    delta_done_file.write(_py23_write('TagUI installation files used by RPA for Python'))\n    delta_done_file.close()\n    return True\n\ndef _patch_macos_pjs():\n    \"\"\"patch PhantomJS to latest v2.1.1 that plays well with new macOS versions\"\"\"\n    if platform.system() == 'Darwin' and not os.path.isdir(tagui_location() + '/.tagui/src/phantomjs_old'):\n        original_directory = os.getcwd(); os.chdir(tagui_location() + '/.tagui/src')\n        print('[RPA][INFO] - downloading latest PhantomJS to fix OpenSSL issue')\n        download('https://github.com/tebelorg/Tump/releases/download/v1.0.0/phantomjs-2.1.1-macosx.zip', 'phantomjs.zip')\n        if not os.path.isfile('phantomjs.zip'):\n            os.chdir(original_directory)\n            show_error('[RPA][ERROR] - unable to download latest PhantomJS v2.1.1')\n            return False\n        unzip('phantomjs.zip'); os.rename('phantomjs', 'phantomjs_old'); os.rename('phantomjs-2.1.1-macosx', 'phantomjs')\n        if os.path.isfile('phantomjs.zip'): os.remove('phantomjs.zip')\n        os.system('chmod -R 755 phantomjs > /dev/null 2>&1')\n        os.chdir(original_directory); return True\n    else:\n        return True\n\ndef _patch_macos_py3():\n    \"\"\"because newer macOS does not have python command only python3 command\"\"\"\n    if platform.system() == 'Darwin' and not os.path.isfile(tagui_location() + '/.tagui/src/py3_patched'):\n        if not os.system('python --version > /dev/null 2>&1') == 0:\n            if os.system('python3 --version > /dev/null 2>&1') == 0:\n                list_of_patch_files = [tagui_location() + '/.tagui/src/casperjs/bin/casperjs',\n                                       tagui_location() + '/.tagui/src/casperjs/tests/clitests/runtests.py',\n                                       tagui_location() + '/.tagui/src/slimerjs/slimerjs.py']\n                for patch_file in list_of_patch_files:\n                    dump(load(patch_file).replace('#!/usr/bin/env python', '#!/usr/bin/env python3'), patch_file)\n                dump('python updated to python 3', tagui_location() + '/.tagui/src/py3_patched')\n    return True\n\ndef coord(x_coordinate = 0, y_coordinate = 0):\n    \"\"\"function to form a coordinate string from x and y integers\"\"\"\n    return '(' + str(x_coordinate) + ',' + str(y_coordinate) + ')'\n\ndef debug(on_off = None):\n    \"\"\"function to set debug mode, eg print debug info\"\"\"\n    global _tagui_debug\n    if on_off is not None:\n        if isinstance(on_off, int):\n            _tagui_debug = on_off\n        else:\n           send('// ' + on_off) \n    return _tagui_debug\n\ndef error(on_off = None):\n    \"\"\"function to set mode to raise exception on error\"\"\"\n    global _tagui_error\n    if on_off is not None: _tagui_error = on_off\n    return _tagui_error\n\ndef show_error(error_message = None):\n    \"\"\"function to raise exception with given message\"\"\"\n    if error_message is None:\n        error_message = '[RPA][ERROR] - unknown error encountered'\n    if not error():\n        print(error_message)\n    else:\n        raise Exception(error_message)\n    return False\n\ndef tagui_location(location = None):\n    \"\"\"function to set location of TagUI installation\"\"\"\n    global _tagui_location\n    if location is not None: _tagui_location = location\n    return _tagui_location\n\ndef unzip(file_to_unzip = None, unzip_location = None):\n    \"\"\"function to unzip zip file to specified location\"\"\"\n    import zipfile\n\n    if file_to_unzip is None or file_to_unzip == '':\n        show_error('[RPA][ERROR] - filename missing for unzip()')\n        return False\n    elif not os.path.isfile(file_to_unzip):\n        show_error('[RPA][ERROR] - file specified missing for unzip()')\n        return False\n\n    zip_file = zipfile.ZipFile(file_to_unzip, 'r')\n\n    if unzip_location is None or unzip_location == '':\n        zip_file.extractall()\n    else:\n        zip_file.extractall(unzip_location)\n\n    zip_file.close()\n    return True\n\ndef setup():\n    \"\"\"function to setup TagUI to user home folder on Linux / macOS / Windows\"\"\"\n\n    # get user home folder location to setup tagui\n    home_directory = tagui_location()\n\n    print('[RPA][INFO] - setting up TagUI for use in your Python environment')\n\n    # special check for macOS - download() will fail due to no SSL certs for Python 3\n    if platform.system() == 'Darwin' and _python3_env():\n        if os.system('/Applications/Python\\ 3.9/Install\\ Certificates.command > /dev/null 2>&1') != 0:\n            if os.system('/Applications/Python\\ 3.8/Install\\ Certificates.command > /dev/null 2>&1') != 0:\n                if os.system('/Applications/Python\\ 3.7/Install\\ Certificates.command > /dev/null 2>&1') != 0:\n                    os.system('/Applications/Python\\ 3.6/Install\\ Certificates.command > /dev/null 2>&1')\n\n    # set tagui zip filename for respective operating systems\n    if platform.system() == 'Linux': tagui_zip_file = 'TagUI_Linux.zip'\n    elif platform.system() == 'Darwin': tagui_zip_file = 'TagUI_macOS.zip'\n    elif platform.system() == 'Windows': tagui_zip_file = 'TagUI_Windows.zip'\n    else:\n        show_error('[RPA][ERROR] - unknown ' + platform.system() + ' operating system to setup TagUI')\n        return False\n    \n    if not os.path.isfile('rpa_python.zip'):\n        # primary installation pathway by downloading from internet, requiring internet access\n        print('[RPA][INFO] - downloading TagUI (~200MB) and unzipping to below folder...')\n        print('[RPA][INFO] - ' + home_directory)\n\n        # set tagui zip download url and download zip for respective operating systems\n        tagui_zip_url = 'https://github.com/tebelorg/Tump/releases/download/v1.0.0/' + tagui_zip_file \n        if not download(tagui_zip_url, home_directory + '/' + tagui_zip_file):\n            # error message is shown by download(), no need for message here \n            return False\n\n        # unzip downloaded zip file to user home folder\n        unzip(home_directory + '/' + tagui_zip_file, home_directory)\n        if not os.path.isfile(home_directory + '/' + 'tagui' + '/' + 'src' + '/' + 'tagui'):\n            show_error('[RPA][ERROR] - unable to unzip TagUI to ' + home_directory)\n            return False\n\n    else:\n        # secondary installation pathway by using the rpa_python.zip generated from pack()\n        print('[RPA][INFO] - unzipping TagUI (~200MB) from rpa_python.zip to below folder...')\n        print('[RPA][INFO] - ' + home_directory)\n\n        import shutil\n        shutil.move('rpa_python.zip', home_directory + '/' + tagui_zip_file)\n\n        if not os.path.isdir(home_directory + '/tagui'): os.mkdir(home_directory + '/tagui')\n        unzip(home_directory + '/' + tagui_zip_file, home_directory + '/tagui')\n        if not os.path.isfile(home_directory + '/' + 'tagui' + '/' + 'src' + '/' + 'tagui'):\n            show_error('[RPA][ERROR] - unable to unzip TagUI to ' + home_directory)\n            return False\n\n    # set correct tagui folder for different operating systems\n    if platform.system() == 'Windows':\n        tagui_directory = home_directory + '/' + 'tagui'\n    else:\n        tagui_directory = home_directory + '/' + '.tagui'\n\n        # overwrite tagui to .tagui folder for Linux / macOS\n\n        # first rename existing .tagui folder to .tagui_previous \n        if os.path.isdir(tagui_directory):\n            os.rename(tagui_directory, tagui_directory + '_previous')\n\n        # next rename extracted tagui folder (verified earlier) to .tagui\n        os.rename(home_directory + '/' + 'tagui', tagui_directory)\n\n        # finally remove .tagui_previous folder if it exists\n        if os.path.isdir(tagui_directory + '_previous'):\n            import shutil\n            shutil.rmtree(tagui_directory + '_previous')\n\n    # after unzip, remove downloaded zip file to save disk space \n    if os.path.isfile(home_directory + '/' + tagui_zip_file):\n        os.remove(home_directory + '/' + tagui_zip_file)\n\n    # download stable delta files from tagui cutting edge version\n    print('[RPA][INFO] - done. syncing TagUI with stable cutting edge version')\n    if not _tagui_delta(tagui_directory): return False\n\n    # perform Linux specific setup actions\n    if platform.system() == 'Linux':\n        # zipfile extractall does not preserve execute permissions\n        # invoking chmod to set all files with execute permissions\n        # and update delta tagui/src/tagui with execute permission\n        if os.system('chmod -R 755 \"' + tagui_directory + '\" > /dev/null 2>&1') != 0:\n            show_error('[RPA][ERROR] - unable to set permissions for .tagui folder')\n            return False \n\n        # check that php, a dependency for tagui, is installed and working\n        if os.system('php --version > /dev/null 2>&1') != 0:\n            print('[RPA][INFO] - PHP is not installed by default on your Linux distribution')\n            print('[RPA][INFO] - google how to install PHP (eg for Ubuntu, apt-get install php)')\n            print('[RPA][INFO] - after that, TagUI ready for use in your Python environment')\n            print('[RPA][INFO] - visual automation (optional) requires special setup on Linux,')\n            print('[RPA][INFO] - see the link below to install OpenCV and Tesseract libraries')\n            print('[RPA][INFO] - https://sikulix-2014.readthedocs.io/en/latest/newslinux.html')\n            return False\n\n        else:\n            print('[RPA][INFO] - TagUI now ready for use in your Python environment')\n            print('[RPA][INFO] - visual automation (optional) requires special setup on Linux,')\n            print('[RPA][INFO] - see the link below to install OpenCV and Tesseract libraries')\n            print('[RPA][INFO] - https://sikulix-2014.readthedocs.io/en/latest/newslinux.html')\n\n    # perform macOS specific setup actions\n    if platform.system() == 'Darwin':\n        # zipfile extractall does not preserve execute permissions\n        # invoking chmod to set all files with execute permissions\n        # and update delta tagui/src/tagui with execute permission\n        if os.system('chmod -R 755 \"' + tagui_directory + '\" > /dev/null 2>&1') != 0:\n            show_error('[RPA][ERROR] - unable to set permissions for .tagui folder')\n            return False\n\n        # patch PhantomJS to solve OpenSSL issue\n        if not _patch_macos_pjs(): return False\n        # patch files to solve no python issue\n        if not _patch_macos_py3(): return False\n        print('[RPA][INFO] - TagUI now ready for use in your Python environment')\n\n    # perform Windows specific setup actions\n    if platform.system() == 'Windows':\n        # check that tagui packaged php is working, it has dependency on MSVCR110.dll\n        if os.system('\"' + tagui_directory + '/' + 'src' + '/' + 'php/php.exe\" -v > nul 2>&1') != 0:\n            print('[RPA][INFO] - now installing missing Visual C++ Redistributable dependency')\n\n            # download from hosted setup file, if not already present when deployed using pack()\n            if not os.path.isfile(tagui_directory + '/vcredist_x86.exe'):\n                vcredist_x86_url = 'https://raw.githubusercontent.com/tebelorg/Tump/master/vcredist_x86.exe'\n                if not download(vcredist_x86_url, tagui_directory + '/vcredist_x86.exe'):\n                    return False\n\n            # run setup to install the MSVCR110.dll dependency (user action required)\n            os.system('\"' + tagui_directory + '/vcredist_x86.exe\"')\n                \n            # check again if tagui packaged php is working, after installing vcredist_x86.exe\n            if os.system('\"' + tagui_directory + '/' + 'src' + '/' + 'php/php.exe\" -v > nul 2>&1') != 0:\n                print('[RPA][INFO] - MSVCR110.dll is still missing, install vcredist_x86.exe from')\n                print('[RPA][INFO] - the vcredist_x86.exe file in ' + home_directory + '\\\\tagui or from')\n                print('[RPA][INFO] - https://www.microsoft.com/en-us/download/details.aspx?id=30679')\n                print('[RPA][INFO] - after that, TagUI ready for use in your Python environment')\n                return False\n\n            else:\n                print('[RPA][INFO] - TagUI now ready for use in your Python environment')\n\n        else:\n            print('[RPA][INFO] - TagUI now ready for use in your Python environment')\n\n    return True\n\ndef init(visual_automation = False, chrome_browser = True, headless_mode = False, turbo_mode = False):\n    \"\"\"start and connect to tagui process by checking tagui live mode readiness\"\"\"\n\n    global _process, _tagui_started, _tagui_id, _tagui_visual, _tagui_chrome, _tagui_init_directory, _tagui_download_directory\n\n    if _tagui_started:\n        show_error('[RPA][ERROR] - use close() before using init() again')\n        return False\n\n    # reset id to track instruction count from rpa python to tagui\n    _tagui_id = 0\n\n    # reset variable to track original directory when init() was called\n    _tagui_init_directory = ''\n\n    # get user home folder location to locate tagui executable\n    if platform.system() == 'Windows':\n        tagui_directory = tagui_location() + '/' + 'tagui'\n    else:\n        tagui_directory = tagui_location() + '/' + '.tagui'\n\n    tagui_executable = tagui_directory + '/' + 'src' + '/' + 'tagui'\n    end_processes_executable = tagui_directory + '/' + 'src' + '/' + 'end_processes'\n\n    # if tagui executable is not found, initiate setup() to install tagui\n    if not os.path.isfile(tagui_executable):\n        if not setup():\n            # error message is shown by setup(), no need for message here\n            return False\n\n    # sync tagui delta files for current release if needed\n    if not _tagui_delta(tagui_directory): return False\n\n    # on macOS, patch PhantomJS to latest v2.1.1 to solve OpenSSL issue\n    if platform.system() == 'Darwin' and not _patch_macos_pjs(): return False\n    # newer macOS has no python command, patch some files header to python3\n    if platform.system() == 'Darwin' and not _patch_macos_py3(): return False\n\n    # create entry flow to launch SikuliX accordingly\n    if visual_automation:\n        # check for working java jdk for visual automation mode\n        if platform.system() == 'Windows':\n            shell_silencer = '> nul 2>&1'\n        else:\n            shell_silencer = '> /dev/null 2>&1'\n\n        # check whether java is installed on the computer\n        if os.system('java -version ' + shell_silencer) != 0:\n            print('[RPA][INFO] - to use visual automation mode, OpenJDK v8 (64-bit) or later is required')\n            print('[RPA][INFO] - download from Amazon Corretto\\'s website - https://aws.amazon.com/corretto')\n            print('[RPA][INFO] - OpenJDK is preferred over Java JDK which is free for non-commercial use only')\n            return False\n        else:\n            # then check whether it is 64-bit required by sikulix\n            os.system('java -version > java_version.txt 2>&1')\n            java_version_info = load('java_version.txt').lower()\n            os.remove('java_version.txt')\n            if '64 bit' not in java_version_info and '64-bit' not in java_version_info:\n                print('[RPA][INFO] - to use visual automation mode, OpenJDK v8 (64-bit) or later is required')\n                print('[RPA][INFO] - download from Amazon Corretto\\'s website - https://aws.amazon.com/corretto')\n                print('[RPA][INFO] - OpenJDK is preferred over Java JDK which is free for non-commercial use only')\n                return False\n            else:\n                # start a dummy first run if never run before, to let sikulix integrate jython \n                sikulix_folder = tagui_directory + '/' + 'src' + '/' + 'sikulix'\n                if os.path.isfile(sikulix_folder + '/' + 'jython-standalone-2.7.1.jar'):\n                    os.system('java -jar \"' + sikulix_folder + '/' + 'sikulix.jar\" -h ' + shell_silencer)\n                _visual_flow()\n    else:\n        _python_flow()\n\n    # create tagui_local.js for custom functions\n    _tagui_local()\n\n    # invoke web browser accordingly with tagui option\n    browser_option = ''\n    if chrome_browser:\n        browser_option = 'chrome'\n    if headless_mode:\n        browser_option = 'headless'\n\n    # special handling for turbo mode to run 10X faster\n    tagui_chrome_php = tagui_directory + '/' + 'src' + '/' + 'tagui_chrome.php'\n    tagui_header_js = tagui_directory + '/' + 'src' + '/' + 'tagui_header.js'\n    tagui_sikuli_py = tagui_directory + '/' + 'src' + '/' + 'tagui.sikuli/tagui.py'\n    if not turbo_mode:\n        dump(load(tagui_chrome_php).replace('$scan_period = 10000;', '$scan_period = 100000;'), tagui_chrome_php)\n        dump(load(tagui_header_js).replace('function sleep(ms) {ms *= 0.1; //', 'function sleep(ms) { //').replace(\"chrome_step('Input.insertText',{text: value});};\", \"for (var character = 0, length = value.length; character < length; character++) {\\nchrome_step('Input.dispatchKeyEvent',{type: 'char', text: value[character]});}};\"), tagui_header_js)\n        dump(load(tagui_sikuli_py).replace('scan_period = 0.05\\n\\n# teleport mouse instead of moving to target\\nSettings.MoveMouseDelay = 0', 'scan_period = 0.5'), tagui_sikuli_py)\n    else:\n        dump(load(tagui_chrome_php).replace('$scan_period = 100000;', '$scan_period = 10000;'), tagui_chrome_php)\n        dump(load(tagui_header_js).replace('function sleep(ms) { //', 'function sleep(ms) {ms *= 0.1; //').replace(\"for (var character = 0, length = value.length; character < length; character++) {\\nchrome_step('Input.dispatchKeyEvent',{type: 'char', text: value[character]});}};\", \"chrome_step('Input.insertText',{text: value});};\"), tagui_header_js)\n        dump(load(tagui_sikuli_py).replace('scan_period = 0.5', 'scan_period = 0.05\\n\\n# teleport mouse instead of moving to target\\nSettings.MoveMouseDelay = 0'), tagui_sikuli_py)\n\n    # entry shell command to invoke tagui process\n    tagui_cmd = '\"' + tagui_executable + '\"' + ' rpa_python ' + browser_option\n\n    # run tagui end processes script to flush dead processes\n    # for eg execution ended with ctrl+c or forget to close()\n    os.system('\"' + end_processes_executable + '\"')\n\n    try:\n        # launch tagui using subprocess\n        _process = subprocess.Popen(\n            tagui_cmd, shell=True,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE\n        )\n\n        # loop until tagui live mode is ready or tagui process has ended\n        while True:\n\n            # failsafe exit if tagui process gets killed for whatever reason\n            if _process.poll() is not None:\n                print('[RPA][ERROR] - following happens when starting TagUI...')\n                print('')\n                print('The following command is executed to start TagUI -')\n                print(tagui_cmd)\n                print('')\n                print('It leads to following output when starting TagUI -')\n                os.system(tagui_cmd)\n                print('')\n                _tagui_visual = False\n                _tagui_chrome = False\n                _tagui_started = False\n                show_error()\n                return False\n\n            # read next line of output from tagui process live mode interface\n            tagui_out = _tagui_read()\n\n            # check that tagui live mode is ready then start listening for inputs\n            if 'LIVE MODE - type done to quit' in tagui_out:\n                # dummy + start line to clear live mode backspace char before listening\n                _tagui_write('echo \"[RPA][STARTED]\"\\n')\n                _tagui_write('echo \"[RPA][' + str(_tagui_id) + '] - listening for inputs\"\\n')\n                _tagui_visual = visual_automation\n                _tagui_chrome = chrome_browser\n                _tagui_started = True\n\n                # loop until tagui live mode is ready and listening for inputs\n                # also check _tagui_started to handle unexpected termination\n                while _tagui_started and not _ready(): pass\n                if not _tagui_started:\n                    show_error('[RPA][ERROR] - TagUI process ended unexpectedly')\n                    return False\n\n                # remove generated tagui flow, js code and custom functions files\n                if os.path.isfile('rpa_python'): os.remove('rpa_python')\n                if os.path.isfile('rpa_python.js'): os.remove('rpa_python.js')\n                if os.path.isfile('rpa_python.raw'): os.remove('rpa_python.raw')\n                if os.path.isfile('tagui_local.js'): os.remove('tagui_local.js')\n\n                # increment id and prepare for next instruction\n                _tagui_id = _tagui_id + 1\n\n                # set variable to track original directory when init() was called\n                _tagui_init_directory = os.getcwd()\n\n                # set variable to track file download directory for web browser \n                _tagui_download_directory = os.getcwd()\n\n                return True\n\n    except Exception as e:\n        _tagui_visual = False\n        _tagui_chrome = False\n        _tagui_started = False\n        show_error('[RPA][ERROR] - ' + str(e))\n        return False\n\ndef pack():\n    \"\"\"function to pack TagUI files for installation on an air-gapped computer without internet\"\"\"\n\n    print('[RPA][INFO] - pack() is to deploy RPA for Python to a computer without internet')\n    print('[RPA][INFO] - update() is to update an existing installation deployed from pack()')\n    print('[RPA][INFO] - detecting and zipping your TagUI installation to rpa_python.zip ...')\n\n    # first make sure TagUI files have been downloaded and synced to latest stable delta files\n    global _tagui_started\n    if _tagui_started:\n        if not close():\n            return False\n    if not init(False, False):\n        return False\n    if not close():\n        return False\n\n    # next download jython to tagui/src/sikulix folder (after init() it can be moved away)\n    if platform.system() == 'Windows':\n        tagui_directory = tagui_location() + '/' + 'tagui'\n        # pack in Visual C++ MSVCR110.dll dependency from PHP for offline installation \n        vcredist_x86_url = 'https://raw.githubusercontent.com/tebelorg/Tump/master/vcredist_x86.exe'\n        if not download(vcredist_x86_url, tagui_directory + '/vcredist_x86.exe'):\n            return False\n    else:\n        tagui_directory = tagui_location() + '/' + '.tagui'\n    sikulix_directory = tagui_directory + '/' + 'src' + '/' + 'sikulix'\n    sikulix_jython_url = 'https://github.com/tebelorg/Tump/releases/download/v1.0.0/jython-standalone-2.7.1.jar'\n    if not download(sikulix_jython_url, sikulix_directory + '/' + 'jython-standalone-2.7.1.jar'):\n        return False\n\n    # finally zip entire TagUI installation and save a copy of tagui.py to current folder\n    import shutil\n    shutil.make_archive('rpa_python', 'zip', tagui_directory)\n    shutil.copyfile(os.path.dirname(__file__) + '/tagui.py', 'rpa.py')\n\n    print('[RPA][INFO] - done. copy rpa_python.zip and rpa.py to your target computer.')\n    print('[RPA][INFO] - then install and use with import rpa as r followed by r.init()')\n    return True\n\ndef update():\n    \"\"\"function to update package and TagUI files on an air-gapped computer without internet\"\"\"\n\n    print('[RPA][INFO] - pack() is to deploy RPA for Python to a computer without internet')\n    print('[RPA][INFO] - update() is to update an existing installation deployed from pack()')\n    print('[RPA][INFO] - downloading latest RPA for Python and TagUI files...')\n\n    # first download updated files to rpa_update folder and zip them to rpa_update.zip\n    if not os.path.isdir('rpa_update'): os.mkdir('rpa_update')\n    if not os.path.isdir('rpa_update/tagui.sikuli'): os.mkdir('rpa_update/tagui.sikuli')\n\n    rpa_python_url = 'https://raw.githubusercontent.com/tebelorg/RPA-Python/master/tagui.py'\n    if not download(rpa_python_url, 'rpa_update' + '/' + 'rpa.py'): return False\n\n    # get version number of latest release for the package to use in generated update.py\n    rpa_python_py = load('rpa_update' + '/' + 'rpa.py')\n    v_front_marker = \"__version__ = '\"; v_back_marker = \"'\"\n    rpa_python_py = rpa_python_py[rpa_python_py.find(v_front_marker) + len(v_front_marker):]\n    rpa_python_py = rpa_python_py[:rpa_python_py.find(v_back_marker)]\n\n    delta_list = ['tagui', 'tagui.cmd', 'end_processes', 'end_processes.cmd',\n                    'tagui_header.js', 'tagui_parse.php', 'tagui.sikuli/tagui.py']\n\n    for delta_file in delta_list:\n        tagui_delta_url = 'https://raw.githubusercontent.com/tebelorg/Tump/master/TagUI-Python/' + delta_file\n        tagui_delta_file = 'rpa_update' + '/' + delta_file\n        if not download(tagui_delta_url, tagui_delta_file): return False\n\n    import shutil\n    shutil.make_archive('rpa_update', 'zip', 'rpa_update')\n\n    # next define string variables for update.py header and footer to be used in next section\n    # indentation formatting has to be removed below, else unwanted indentation added to file\n    update_py_header = \\\n\"\"\"import rpa as r\nimport platform\nimport base64\nimport shutil\nimport os\n\nrpa_update_zip = \\\\\n\"\"\"\n\n    update_py_footer = \\\n\"\"\"\n\n# create update.zip from base64 data embedded in update.py\nupdate_zip_file = open('update.zip','wb')\nupdate_zip_file.write(base64.b64decode(rpa_update_zip))\nupdate_zip_file.close()\n\n# unzip update.zip to tagui folder in user home directory\nif platform.system() == 'Windows':\n    base_directory = os.environ['APPDATA'] + '/tagui'\nelse:\n    base_directory = os.path.expanduser('~') + '/.tagui'\n\n# uncomment below to define and use custom TagUI folder\n#base_directory = 'your_full_path'\n\nr.unzip('update.zip', base_directory + '/src')\nif os.path.isfile('update.zip'): os.remove('update.zip')\n\n# make sure execute permission is there for Linux / macOS\nif platform.system() in ['Linux', 'Darwin']:\n    os.system('chmod -R 755 \"' + base_directory + '/src/tagui\" > /dev/null 2>&1')\n    os.system('chmod -R 755 \"' + base_directory + '/src/end_processes\" > /dev/null 2>&1')\n\n# create marker file to skip syncing for current release\ndelta_done_file = r._py23_open(base_directory + '/' + 'rpa_python_' + __version__, 'w')\ndelta_done_file.write(r._py23_write('TagUI installation files used by RPA for Python'))\ndelta_done_file.close()\n\n# move updated package file rpa.py to package folder\nshutil.move(base_directory + '/src/rpa.py', os.path.dirname(r.__file__) + '/rpa.py')\nprint('[RPA][INFO] - done. RPA for Python updated to version ' + __version__)\n\"\"\"\n\n    # finally create update.py containing python code and zipped data of update in base64\n    try:\n        import base64\n        dump(\"__version__ = '\" + rpa_python_py + \"'\\n\\n\", 'update.py')\n        write(update_py_header, 'update.py')\n        update_zip_file = open('rpa_update.zip','rb')\n        zip_base64_data = (base64.b64encode(update_zip_file.read())).decode('utf-8')\n        update_zip_file.close()\n        write('\"\"\"' + zip_base64_data + '\"\"\"', 'update.py')\n        write(update_py_footer, 'update.py')\n\n        # remove temporary folder and downloaded files, show result and usage message\n        if os.path.isdir('rpa_update'): shutil.rmtree('rpa_update')\n        if os.path.isfile('rpa_update.zip'): os.remove('rpa_update.zip')\n        print('[RPA][INFO] - done. copy or email update.py to your target computer and run')\n        print('[RPA][INFO] - python update.py to update RPA for Python to version ' + rpa_python_py)\n        print('[RPA][INFO] - to use custom TagUI folder, set base_directory in update.py')\n        return True\n\n    except Exception as e:\n        show_error('[RPA][ERROR] - ' + str(e))\n        return False\n\ndef _ready():\n    \"\"\"internal function to check if tagui is ready to receive instructions after init() is called\"\"\"\n\n    global _process, _tagui_started, _tagui_id, _tagui_visual, _tagui_chrome\n\n    if not _tagui_started:\n        # print output error in calling parent function instead\n        return False\n\n    try:\n        # failsafe exit if tagui process gets killed for whatever reason\n        if _process.poll() is not None:\n            # print output error in calling parent function instead\n            _tagui_visual = False\n            _tagui_chrome = False\n            _tagui_started = False\n            return False\n\n        # read next line of output from tagui process live mode interface\n        tagui_out = _tagui_read()\n\n        # print to screen debug output that is saved to rpa_python.log\n        if debug():\n            sys.stdout.write(tagui_out); sys.stdout.flush()\n\n        # check if tagui live mode is listening for inputs and return result\n        if tagui_out.strip().startswith('[RPA][') and tagui_out.strip().endswith('] - listening for inputs'):\n            return True\n        else:\n            return False\n\n    except Exception as e:\n        show_error('[RPA][ERROR] - ' + str(e))\n        return False\n\ndef send(tagui_instruction = None):\n    \"\"\"send next live mode instruction to tagui for processing if tagui is ready\"\"\"\n\n    global _process, _tagui_started, _tagui_id, _tagui_visual, _tagui_chrome\n\n    if not _tagui_started:\n        show_error('[RPA][ERROR] - use init() before using send()')\n        return False\n\n    if tagui_instruction is None or tagui_instruction == '': return True\n\n    try:\n        # failsafe exit if tagui process gets killed for whatever reason\n        if _process.poll() is not None:\n            _tagui_visual = False\n            _tagui_chrome = False\n            _tagui_started = False\n            show_error('[RPA][ERROR] - no active TagUI process to send()')\n            return False\n\n        # escape special characters for them to reach tagui correctly\n        tagui_instruction = tagui_instruction.replace('\\\\','\\\\\\\\')\n        tagui_instruction = tagui_instruction.replace('\\n','\\\\n')\n        tagui_instruction = tagui_instruction.replace('\\r','\\\\r')\n        tagui_instruction = tagui_instruction.replace('\\t','\\\\t')\n        tagui_instruction = tagui_instruction.replace('\\a','\\\\a')\n        tagui_instruction = tagui_instruction.replace('\\b','\\\\b')\n        tagui_instruction = tagui_instruction.replace('\\f','\\\\f')\n\n        # special handling for single quote to work with _esq() for tagui\n        tagui_instruction = tagui_instruction.replace('[BACKSLASH_QUOTE]','\\\\\\'')\n\n        # escape backslash to display source string correctly after echoing\n        echo_safe_instruction = tagui_instruction.replace('\\\\','\\\\\\\\')\n\n        # escape double quote because echo step below uses double quotes \n        echo_safe_instruction = echo_safe_instruction.replace('\"','\\\\\"')\n\n        # echo live mode instruction, after preparing string to be echo-safe\n        _tagui_write('echo \"[RPA][' + str(_tagui_id) + '] - ' + echo_safe_instruction + '\"\\n')\n\n        # send live mode instruction to be executed\n        _tagui_write(tagui_instruction + '\\n')\n\n        # echo marker text to prepare for next instruction\n        _tagui_write('echo \"[RPA][' + str(_tagui_id) + '] - listening for inputs\"\\n')\n\n        # loop until tagui live mode is ready and listening for inputs\n        # also check _tagui_started to handle unexpected termination\n        while _tagui_started and not _ready(): pass\n        if not _tagui_started:\n            show_error('[RPA][ERROR] - TagUI process ended unexpectedly')\n            return False\n\n        # increment id and prepare for next instruction\n        _tagui_id = _tagui_id + 1\n\n        return True\n\n    except Exception as e:\n        show_error('[RPA][ERROR] - ' + str(e))\n        return False\n\ndef close():\n    \"\"\"disconnect from tagui process by sending 'done' trigger instruction\"\"\"\n\n    global _process, _tagui_started, _tagui_id, _tagui_visual, _tagui_chrome, _tagui_init_directory\n\n    if not _tagui_started:\n        show_error('[RPA][ERROR] - use init() before using close()')\n        return False\n\n    try:\n        # failsafe exit if tagui process gets killed for whatever reason\n        if _process.poll() is not None:\n            _tagui_visual = False\n            _tagui_chrome = False\n            _tagui_started = False\n            show_error('[RPA][ERROR] - no active TagUI process to close()')\n            return False\n\n        # send 'done' instruction to terminate live mode and exit tagui\n        _tagui_write('echo \"[RPA][FINISHED]\"\\n')\n        _tagui_write('done\\n')\n\n        # loop until tagui process has closed before returning control\n        while _process.poll() is None: pass\n\n        # remove again generated tagui flow, js code and custom functions files\n        if os.path.isfile('rpa_python'): os.remove('rpa_python')\n        if os.path.isfile('rpa_python.js'): os.remove('rpa_python.js')\n        if os.path.isfile('rpa_python.raw'): os.remove('rpa_python.raw')\n        if os.path.isfile('tagui_local.js'): os.remove('tagui_local.js')\n\n        # to handle user changing current directory after init() is called\n        if os.path.isfile(os.path.join(_tagui_init_directory, 'rpa_python')):\n            os.remove(os.path.join(_tagui_init_directory, 'rpa_python'))\n        if os.path.isfile(os.path.join(_tagui_init_directory, 'rpa_python.js')):\n            os.remove(os.path.join(_tagui_init_directory, 'rpa_python.js'))\n        if os.path.isfile(os.path.join(_tagui_init_directory, 'rpa_python.raw')):\n            os.remove(os.path.join(_tagui_init_directory, 'rpa_python.raw'))\n        if os.path.isfile(os.path.join(_tagui_init_directory, 'tagui_local.js')):\n            os.remove(os.path.join(_tagui_init_directory, 'tagui_local.js'))   \n\n        # remove generated tagui log and data files if not in debug mode\n        if not debug():\n            if os.path.isfile('rpa_python.log'): os.remove('rpa_python.log')\n            if os.path.isfile('rpa_python.txt'): os.remove('rpa_python.txt')\n        \n            # to handle user changing current directory after init() is called\n            if os.path.isfile(os.path.join(_tagui_init_directory, 'rpa_python.log')):\n                os.remove(os.path.join(_tagui_init_directory, 'rpa_python.log'))\n            if os.path.isfile(os.path.join(_tagui_init_directory, 'rpa_python.txt')):\n                os.remove(os.path.join(_tagui_init_directory, 'rpa_python.txt'))\n\n        _tagui_visual = False\n        _tagui_chrome = False\n        _tagui_started = False\n        return True\n\n    except Exception as e:\n        _tagui_visual = False\n        _tagui_chrome = False\n        _tagui_started = False\n        show_error('[RPA][ERROR] - ' + str(e))\n        return False\n\ndef exist(element_identifier = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using exist()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        return False\n\n    # return True for keywords as the computer screen always exists\n    if element_identifier.lower() in ['page.png', 'page.bmp']:\n        if _visual():\n            return True\n        else:\n            show_error('[RPA][ERROR] - page.png / page.bmp requires init(visual_automation = True)')\n            return False\n\n    # pre-emptive checks if image files are specified for visual automation\n    if element_identifier.lower().endswith('.png') or element_identifier.lower().endswith('.bmp'):\n        if not _visual():\n            show_error('[RPA][ERROR] - ' + element_identifier + ' identifier requires init(visual_automation = True)')\n            return False\n\n    # assume that (x,y) coordinates for visual automation always exist\n    if element_identifier.startswith('(') and element_identifier.endswith(')'):\n        if len(element_identifier.split(',')) in [2, 3]:\n            if not any(c.isalpha() for c in element_identifier):\n                if _visual():\n                    return True\n                else:\n                    show_error('[RPA][ERROR] - x, y coordinates require init(visual_automation = True)')\n                    return False\n\n    send('exist_result = exist(\\'' + _sdq(element_identifier) + '\\').toString()')\n    send('dump exist_result to rpa_python.txt')\n    if _tagui_output() == 'true':\n        return True\n    else:\n        return False\n\ndef url(webpage_url = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using url()')\n        return False\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - url() requires init(chrome_browser = True)')\n        return False\n\n    if webpage_url is not None and webpage_url != '':\n        if webpage_url.lower().startswith('www.'): webpage_url = 'https://' + webpage_url \n        if webpage_url.startswith('http://') or webpage_url.startswith('https://'):\n            if not send(_esq(webpage_url)):\n                return False\n            else:\n                return True\n        else:\n            show_error('[RPA][ERROR] - URL does not begin with http:// or https:// ')\n            return False\n\n    else:\n        send('dump url() to rpa_python.txt')\n        url_result = _tagui_output()\n        return url_result\n\ndef click(element_identifier = None, test_coordinate = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using click()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for click()')\n        return False\n\n    if test_coordinate is not None and isinstance(test_coordinate, int):\n        element_identifier = coord(element_identifier, test_coordinate)\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('click ' + _sdq(element_identifier)):\n        return False\n\n    else:\n        return True\n\ndef rclick(element_identifier = None, test_coordinate = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using rclick()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for rclick()')\n        return False\n\n    if test_coordinate is not None and isinstance(test_coordinate, int):\n        element_identifier = coord(element_identifier, test_coordinate)\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('rclick ' + _sdq(element_identifier)):\n        return False\n\n    else:\n        return True\n\ndef dclick(element_identifier = None, test_coordinate = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using dclick()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for dclick()')\n        return False\n\n    if test_coordinate is not None and isinstance(test_coordinate, int):\n        element_identifier = coord(element_identifier, test_coordinate)\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('dclick ' + _sdq(element_identifier)):\n        return False\n\n    else:\n        return True\n\ndef hover(element_identifier = None, test_coordinate = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using hover()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for hover()')\n        return False\n\n    if test_coordinate is not None and isinstance(test_coordinate, int):\n        element_identifier = coord(element_identifier, test_coordinate)\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('hover ' + _sdq(element_identifier)):\n        return False\n\n    else:\n        return True\n\ndef type(element_identifier = None, text_to_type = None, test_coordinate = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using type()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for type()')\n        return False\n\n    if text_to_type is None or text_to_type == '':\n        show_error('[RPA][ERROR] - text missing for type()')\n        return False\n\n    if test_coordinate is not None and isinstance(text_to_type, int):\n        element_identifier = coord(element_identifier, text_to_type)\n        text_to_type = test_coordinate\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('type ' + _sdq(element_identifier) + ' as ' + _esq(text_to_type)):\n        return False\n\n    else:\n        return True\n\ndef select(element_identifier = None, option_value = None, test_coordinate1 = None, test_coordinate2 = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using select()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for select()')\n        return False\n\n    if option_value is None or option_value == '':\n        show_error('[RPA][ERROR] - option value missing for select()')\n        return False\n\n    if element_identifier.lower() in ['page.png', 'page.bmp'] or option_value.lower() in ['page.png', 'page.bmp']:\n        show_error('[RPA][ERROR] - page.png / page.bmp identifiers invalid for select()')\n        return False\n\n    if test_coordinate1 is not None and test_coordinate2 is not None and \\\n    isinstance(option_value, int) and isinstance(test_coordinate2, int):\n        element_identifier = coord(element_identifier, option_value)\n        option_value = coord(test_coordinate1, test_coordinate2) \n\n    # pre-emptive checks if image files are specified for visual automation\n    if element_identifier.lower().endswith('.png') or element_identifier.lower().endswith('.bmp'):\n        if not _visual():\n            show_error('[RPA][ERROR] - ' + element_identifier + ' identifier requires init(visual_automation = True)')\n            return False\n\n    if option_value.lower().endswith('.png') or option_value.lower().endswith('.bmp'):\n        if not _visual():\n            show_error('[RPA][ERROR] - ' + option_value + ' identifier requires init(visual_automation = True)')\n            return False\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('select ' + _sdq(element_identifier) + ' as ' + _esq(option_value)):\n        return False\n\n    else:\n        return True\n\ndef read(element_identifier = None, test_coordinate1 = None, test_coordinate2 = None, test_coordinate3 = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using read()')\n        return ''\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for read()')\n        return ''\n\n    if test_coordinate1 is not None and isinstance(test_coordinate1, int):\n        if test_coordinate2 is not None and isinstance(test_coordinate2, int):\n            if test_coordinate3 is not None and isinstance(test_coordinate3, int):\n                element_identifier = coord(element_identifier, test_coordinate1) + '-'\n                element_identifier = element_identifier + coord(test_coordinate2, test_coordinate3)\n\n    if element_identifier.lower() != 'page' and not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return ''\n\n    else:\n        send('read ' + _sdq(element_identifier) + ' to read_result')\n        send('dump read_result to rpa_python.txt')\n        read_result = _tagui_output()\n        return read_result\n\ndef snap(element_identifier = None, filename_to_save = None, test_coord1 = None, test_coord2 = None, test_coord3 = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using snap()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for snap()')\n        return False\n\n    if filename_to_save is None or filename_to_save == '':\n        show_error('[RPA][ERROR] - filename missing for snap()')\n        return False\n\n    if test_coord2 is not None and test_coord3 is None:\n        show_error('[RPA][ERROR] - filename missing for snap()')\n        return False\n\n    if isinstance(element_identifier, int) and isinstance(filename_to_save, int):\n        if test_coord1 is not None and isinstance(test_coord1, int):\n            if test_coord2 is not None and isinstance(test_coord2, int):\n                if test_coord3 is not None and test_coord3 != '':\n                    element_identifier = coord(element_identifier, filename_to_save) + '-'\n                    element_identifier = element_identifier + coord(test_coord1, test_coord2)\n                    filename_to_save = test_coord3\n\n    if element_identifier.lower() != 'page' and not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('snap ' + _sdq(element_identifier) + ' to ' + _esq(filename_to_save)):\n        return False\n\n    else:\n        return True\n\ndef load(filename_to_load = None):\n    if filename_to_load is None or filename_to_load == '':\n        show_error('[RPA][ERROR] - filename missing for load()')\n        return ''\n\n    elif not os.path.isfile(filename_to_load):\n        show_error('[RPA][ERROR] - cannot load file ' + filename_to_load)\n        return ''\n\n    else:\n        load_input_file = _py23_open(filename_to_load, 'r')\n        load_input_file_text = _py23_read(load_input_file.read())\n        load_input_file.close()\n        return load_input_file_text\n\ndef echo(text_to_echo = ''):\n    print(text_to_echo)\n    return True\n\ndef dump(text_to_dump = None, filename_to_save = None):\n    if text_to_dump is None:\n        show_error('[RPA][ERROR] - text missing for dump()')\n        return False\n\n    elif filename_to_save is None or filename_to_save == '':\n        show_error('[RPA][ERROR] - filename missing for dump()')\n        return False\n\n    else:\n        dump_output_file = _py23_open(filename_to_save, 'w')\n        dump_output_file.write(_py23_write(text_to_dump))\n        dump_output_file.close()\n        return True\n\ndef write(text_to_write = None, filename_to_save = None):\n    if text_to_write is None:\n        show_error('[RPA][ERROR] - text missing for write()')\n        return False\n\n    elif filename_to_save is None or filename_to_save == '':\n        show_error('[RPA][ERROR] - filename missing for write()')\n        return False\n\n    else:\n        write_output_file = _py23_open(filename_to_save, 'a')\n        write_output_file.write(_py23_write(text_to_write))\n        write_output_file.close()\n        return True\n\ndef ask(text_to_prompt = ''):\n    if _chrome():\n        return dom(\"return prompt('\" + _esq(text_to_prompt) + \"')\")\n\n    else:\n        if text_to_prompt == '':\n            space_padding = ''\n        else:\n            space_padding = ' '\n\n        if _python2_env():\n            return raw_input(text_to_prompt + space_padding)\n        else:\n            return input(text_to_prompt + space_padding)\n\ndef telegram(telegram_id = None, text_to_send = None, custom_endpoint = None):\n    if telegram_id is None or telegram_id == '':\n        show_error('[RPA][ERROR] - Telegram ID missing for telegram()')\n        return False\n\n    if text_to_send is None or text_to_send == '':\n        show_error('[RPA][ERROR] - text message missing for telegram()')\n        return False\n\n    # in case number is given instead of string\n    telegram_id = str(telegram_id)\n\n    telegram_endpoint = 'https://tebel.org/rpapybot'\n    telegram_params = {'chat_id': telegram_id, 'text': text_to_send}\n\n    if custom_endpoint is not None and custom_endpoint != '':\n        telegram_endpoint = custom_endpoint\n\n    # handle case where no internet or url is invalid\n    try:\n        if _python2_env():\n            import json; import urllib\n            telegram_endpoint = telegram_endpoint + '/sendMessage.php?' + urllib.urlencode(telegram_params)\n            telegram_response = urllib.urlopen(telegram_endpoint).read()\n            return json.loads(telegram_response)['ok']\n\n        else:\n            import json; import urllib.request; import urllib.parse\n            telegram_endpoint = telegram_endpoint + '/sendMessage.php?' + urllib.parse.urlencode(telegram_params)\n            telegram_response = urllib.request.urlopen(telegram_endpoint).read()\n            return json.loads(telegram_response)['ok']\n\n    except Exception as e:\n        return False\n\ndef keyboard(keys_and_modifiers = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using keyboard()')\n        return False\n\n    if keys_and_modifiers is None or keys_and_modifiers == '':\n        show_error('[RPA][ERROR] - keys to type missing for keyboard()')\n        return False\n\n    if not _visual():\n        show_error('[RPA][ERROR] - keyboard() requires init(visual_automation = True)')\n        return False\n\n    elif not send('keyboard ' + _esq(keys_and_modifiers)):\n        return False\n\n    else:\n        return True\n\ndef mouse(mouse_action = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using mouse()')\n        return False\n\n    if mouse_action is None or mouse_action == '':\n        show_error('[RPA][ERROR] - \\'down\\' / \\'up\\' missing for mouse()')\n        return False\n\n    if not _visual():\n        show_error('[RPA][ERROR] - mouse() requires init(visual_automation = True)')\n        return False\n\n    elif mouse_action.lower() != 'down' and mouse_action.lower() != 'up':\n        show_error('[RPA][ERROR] - \\'down\\' / \\'up\\' missing for mouse()')\n        return False\n\n    elif not send('mouse ' + mouse_action):\n        return False\n\n    else:\n        return True\n\ndef focus(app_to_focus = None):\n    if app_to_focus is None or app_to_focus == '':\n        show_error('[RPA][ERROR] - app to focus missing for focus()')\n        return False\n\n    else:\n        if platform.system() == 'Windows':\n            # download sendKeys.bat if not present\n            if not os.path.isfile('sendKeys.bat'):\n                sendKeys_url = 'https://github.com/tebelorg/Tump/releases/download/v1.0.0/sendKeys.bat'\n                if not download(sendKeys_url, 'sendKeys.bat'):\n                    show_error('[RPA][ERROR] - cannot download sendKeys.bat for focus()')\n                    return False\n            if os.system('sendKeys.bat \"' + app_to_focus + '\" \"\" > nul 2>&1') == 0:\n                return True\n            else:\n                show_error('[RPA][ERROR] - ' + app_to_focus + ' not found for focus()')\n                return False\n\n        elif platform.system() == 'Darwin':\n            if os.system('osascript -e \\'tell application \"' + app_to_focus + '\" to activate\\' > /dev/null 2>&1') == 0:\n                return True\n            else:\n                show_error('[RPA][ERROR] - ' + app_to_focus + ' not found for focus()')\n                return False\n\n        else:\n                show_error('[RPA][ERROR] - Linux not supported for focus()')\n                return False\n \ndef table(element_identifier = None, filename_to_save = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using table()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for table()')\n        return False\n\n    elif filename_to_save is None or filename_to_save == '':\n        show_error('[RPA][ERROR] - filename missing for table()')\n        return False\n\n    element_identifier = str(element_identifier)\n\n    if not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('table ' + _sdq(element_identifier) + ' to ' + _esq(filename_to_save)):\n        return False\n\n    else:\n        return True\n\ndef wait(delay_in_seconds = 5.0):\n    time.sleep(float(delay_in_seconds)); return True\n\ndef check(condition_to_check = None, text_if_true = '', text_if_false = ''):\n    if condition_to_check is None:\n        show_error('[RPA][ERROR] - condition missing for check()')\n        return False\n\n    if condition_to_check:\n        print(text_if_true)\n\n    else:\n        print(text_if_false)\n\n    return True\n\ndef bin(file_to_bin = None, password = None, server = 'https://tebel.org/bin/'):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using bin()')\n        return ''\n\n    if file_to_bin is None or file_to_bin == '':\n        show_error('[RPA][ERROR] - file_to_bin required for bin()')\n        return ''\n\n    else:\n        file_to_bin = os.path.abspath(file_to_bin)\n        if not os.path.isfile(file_to_bin):\n            show_error('[RPA][ERROR] - cannot find ' + file_to_bin)\n            return ''\n\n        original_url = url(); url(server)\n        if not exist('//*[@id = \"message\"]'):\n            show_error('[RPA][ERROR] - cannot connect to ' + server)\n            return ''\n\n        file_head, file_tail = os.path.split(file_to_bin)\n        type('//*[@id = \"message\"]', file_tail)\n        if password is not None:\n            type('//*[@id = \"passwordinput\"]', password)\n        click('//*[@id = \"attach\"]')\n        upload('#file', file_to_bin)\n        click('//*[@id = \"sendbutton\"]')\n\n        bin_url = read('//*[@id = \"pastelink\"]/a/@href')\n        if bin_url == '':\n            show_error('[RPA][ERROR] - failed uploading to ' + server)\n        if original_url != 'about:blank':\n            url(original_url)\n        return bin_url\n\ndef upload(element_identifier = None, filename_to_upload = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using upload()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        show_error('[RPA][ERROR] - target missing for upload()')\n        return False\n\n    elif filename_to_upload is None or filename_to_upload == '':\n        show_error('[RPA][ERROR] - filename missing for upload()')\n        return False\n\n    elif not exist(element_identifier):\n        show_error('[RPA][ERROR] - cannot find ' + element_identifier)\n        return False\n\n    elif not send('upload ' + _sdq(element_identifier) + ' as ' + _esq(filename_to_upload)):\n        return False\n\n    else:\n        return True\n\ndef download(download_url = None, filename_to_save = None):\n    \"\"\"function for python 2/3 compatible file download from url\"\"\"\n\n    if download_url is None or download_url == '':\n        show_error('[RPA][ERROR] - download URL missing for download()')\n        return False\n\n    # if not given, use last part of url as filename to save\n    if filename_to_save is None or filename_to_save == '':\n        download_url_tokens = download_url.split('/')\n        filename_to_save = download_url_tokens[-1]\n\n    # delete existing file if exist to ensure freshness\n    if os.path.isfile(filename_to_save):\n        os.remove(filename_to_save)\n\n    # handle case where url is invalid or has no content\n    try:\n        if _python2_env():\n            import urllib; urllib.urlretrieve(download_url, filename_to_save)\n        else:\n            import urllib.request; urllib.request.urlretrieve(download_url, filename_to_save)\n\n    except Exception as e:\n        print(str(e))\n        show_error('[RPA][ERROR] - failed downloading from ' + download_url + '...')\n        return False\n\n    # take the existence of downloaded file as success\n    if os.path.isfile(filename_to_save):\n        return True\n\n    else:\n        show_error('[RPA][ERROR] - failed downloading to ' + filename_to_save)\n        return False\n\ndef frame(main_frame = None, sub_frame = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using frame()')\n        return False\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - frame() requires init(chrome_browser = True)')\n        return False\n\n    # reset webpage context to document root, by sending custom tagui javascript code\n    send('js chrome_step(\"Runtime.evaluate\", {expression: \"mainframe_context = null\"})')\n    send('js chrome_step(\"Runtime.evaluate\", {expression: \"subframe_context = null\"})')\n    send('js chrome_context = \"document\"; frame_step_offset_x = 0; frame_step_offset_y = 0;')\n\n    # return True if no parameter, after resetting webpage context above\n    if main_frame is None or main_frame == '':\n        return True\n\n    # set webpage context to main frame specified, by sending custom tagui javascript code\n    frame_identifier = '(//frame|//iframe)[@name=\"' + main_frame + '\" or @id=\"' + main_frame + '\"]'\n    if not exist(frame_identifier):\n        show_error('[RPA][ERROR] - cannot find frame with @name or @id as \\'' + main_frame + '\\'')\n        return False\n\n    send('js new_context = \"mainframe_context\"')\n    send('js frame_xpath = \\'(//frame|//iframe)[@name=\"' + main_frame + '\" or @id=\"' + main_frame + '\"]\\'')\n    send('js frame_rect = chrome.getRect(xps666(frame_xpath))')\n    send('js frame_step_offset_x = frame_rect.left; frame_step_offset_y = frame_rect.top;')\n    send('js chrome_step(\"Runtime.evaluate\", {expression: new_context + \" = document.evaluate(\\'\" + frame_xpath + \"\\',\" + chrome_context + \",null,XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,null).snapshotItem(0).contentDocument\"})')\n    send('js chrome_context = new_context')\n\n    # set webpage context to sub frame if specified, by sending custom tagui javascript code\n    if sub_frame is not None and sub_frame != '':\n        frame_identifier = '(//frame|//iframe)[@name=\"' + sub_frame + '\" or @id=\"' + sub_frame + '\"]'\n        if not exist(frame_identifier):\n            show_error('[RPA][ERROR] - cannot find sub frame with @name or @id as \\'' + sub_frame + '\\'')\n            return False\n\n        send('js new_context = \"subframe_context\"')\n        send('js frame_xpath = \\'(//frame|//iframe)[@name=\"' + sub_frame + '\" or @id=\"' + sub_frame + '\"]\\'')\n        send('js frame_rect = chrome.getRect(xps666(frame_xpath))')\n        send('js frame_step_offset_x = frame_rect.left; frame_step_offset_y = frame_rect.top;')\n        send('js chrome_step(\"Runtime.evaluate\", {expression: new_context + \" = document.evaluate(\\'\" + frame_xpath + \"\\',\" + chrome_context + \",null,XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,null).snapshotItem(0).contentDocument\"})')\n        send('js chrome_context = new_context')\n\n    return True\n\ndef popup(string_in_url = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using popup()')\n        return False\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - popup() requires init(chrome_browser = True)')\n        return False\n\n    # reset webpage context to main page, by sending custom tagui javascript code\n    send('js if (chrome_targetid !== \"\") {found_targetid = chrome_targetid; chrome_targetid = \"\"; chrome_step(\"Target.detachFromTarget\", {sessionId: found_targetid});}')\n\n    # return True if no parameter, after resetting webpage context above\n    if string_in_url is None or string_in_url == '':\n        return True\n\n    # set webpage context to the popup tab specified, by sending custom tagui javascript code \n    send('js found_targetid = \"\"; chrome_targets = []; ws_message = chrome_step(\"Target.getTargets\", {});')\n    send('js try {ws_json = JSON.parse(ws_message); if (ws_json.result.targetInfos) chrome_targets = ws_json.result.targetInfos; else chrome_targets = [];} catch (e) {chrome_targets = [];}')\n    send('js chrome_targets.forEach(function(target) {if (target.url.indexOf(\"' + string_in_url + '\") !== -1) found_targetid = target.targetId;})')\n    send('js if (found_targetid !== \"\") {ws_message = chrome_step(\"Target.attachToTarget\", {targetId: found_targetid}); try {ws_json = JSON.parse(ws_message); if (ws_json.result.sessionId !== \"\") found_targetid = ws_json.result.sessionId; else found_targetid = \"\";} catch (e) {found_targetid = \"\";}}')\n    send('js chrome_targetid = found_targetid')\n\n    # check if chrome_targetid is successfully set to sessionid of popup tab\n    send('dump chrome_targetid to rpa_python.txt')\n    popup_result = _tagui_output()\n    if popup_result != '':\n        return True\n    else:\n        show_error('[RPA][ERROR] - cannot find popup tab containing URL string \\'' + string_in_url + '\\'')\n        return False\n\ndef api(url_to_query = None):\n    print('[RPA][INFO] - although TagUI supports calling APIs with headers and body,')\n    print('[RPA][INFO] - recommend using requests package with lots of online docs')\n    return True\n\ndef run(command_to_run = None):\n    if command_to_run is None or command_to_run == '':\n        show_error('[RPA][ERROR] - command(s) missing for run()')\n        return ''\n\n    else:\n        if platform.system() == 'Windows':\n            command_delimiter = ' & '\n        else:\n            command_delimiter = '; '\n        return _py23_decode(subprocess.check_output(\n            command_to_run + command_delimiter + 'exit 0',\n            stderr=subprocess.STDOUT,\n            shell=True))\n\ndef dom(statement_to_run = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using dom()')\n        return ''\n\n    if statement_to_run is None or statement_to_run == '':\n        show_error('[RPA][ERROR] - statement(s) missing for dom()')\n        return ''\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - dom() requires init(chrome_browser = True)')\n        return ''\n\n    else:\n        send('dom ' + statement_to_run)\n        send('dump dom_result to rpa_python.txt')\n        dom_result = _tagui_output()\n        return dom_result\n\ndef vision(command_to_run = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using vision()')\n        return False\n\n    if command_to_run is None or command_to_run == '':\n        show_error('[RPA][ERROR] - command(s) missing for vision()')\n        return False\n\n    if not _visual():\n        show_error('[RPA][ERROR] - vision() requires init(visual_automation = True)')\n        return False\n\n    elif not send('vision ' + command_to_run):\n        return False\n\n    else:\n        return True  \n\ndef timeout(timeout_in_seconds = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using timeout()')\n        return False\n\n    global _tagui_timeout\n\n    if timeout_in_seconds is None:\n        return float(_tagui_timeout)\n\n    else:\n        _tagui_timeout = float(timeout_in_seconds)\n\n    if not send('timeout ' + str(timeout_in_seconds)):\n        return False\n\n    else:\n        return True\n\ndef present(element_identifier = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using present()')\n        return False\n\n    if element_identifier is None or element_identifier == '':\n        return False\n\n    # return True for keywords as the computer screen is always present\n    if element_identifier.lower() in ['page.png', 'page.bmp']:\n        if _visual():\n            return True\n        else:\n            show_error('[RPA][ERROR] - page.png / page.bmp requires init(visual_automation = True)')\n            return False\n\n    # pre-emptive checks if image files are specified for visual automation\n    if element_identifier.lower().endswith('.png') or element_identifier.lower().endswith('.bmp'):\n        if not _visual():\n            show_error('[RPA][ERROR] - ' + element_identifier + ' identifier requires init(visual_automation = True)')\n            return False\n\n    # assume that (x,y) coordinates for visual automation always exist\n    if element_identifier.startswith('(') and element_identifier.endswith(')'):\n        if len(element_identifier.split(',')) in [2, 3]:\n            if not any(c.isalpha() for c in element_identifier):\n                if _visual():\n                    return True\n                else:\n                    show_error('[RPA][ERROR] - x, y coordinates require init(visual_automation = True)')\n                    return False\n\n    send('present_result = present(\\'' + _sdq(element_identifier) + '\\').toString()')\n    send('dump present_result to rpa_python.txt')\n    if _tagui_output() == 'true':\n        return True\n    else:\n        return False\n\ndef count(element_identifier = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using count()')\n        return int(0)\n\n    if element_identifier is None or element_identifier == '':\n        return int(0)\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - count() requires init(chrome_browser = True)')\n        return int(0)\n\n    send('count_result = count(\\'' + _sdq(element_identifier) + '\\').toString()')\n    send('dump count_result to rpa_python.txt')\n    return int(_tagui_output())\n\ndef title():\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using title()')\n        return ''\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - title() requires init(chrome_browser = True)')\n        return ''\n\n    send('dump title() to rpa_python.txt')\n    title_result = _tagui_output()\n    return title_result\n\ndef text():\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using text()')\n        return ''\n\n    if not _chrome():\n        show_error('[RPA][ERROR] - text() requires init(chrome_browser = True)')\n        return ''\n\n    send('dump text() to rpa_python.txt')\n    text_result = _tagui_output()\n    return text_result\n\ndef timer():\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using timer()')\n        return float(0)\n\n    send('dump timer() to rpa_python.txt')\n    timer_result = _tagui_output()\n    return float(timer_result)\n\ndef mouse_xy():\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using mouse_xy()')\n        return ''\n\n    if not _visual():\n        show_error('[RPA][ERROR] - mouse_xy() requires init(visual_automation = True)')\n        return ''\n\n    send('dump mouse_xy() to rpa_python.txt')\n    mouse_xy_result = _tagui_output()\n    return mouse_xy_result\n\ndef mouse_x():\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using mouse_x()')\n        return int(0)\n\n    if not _visual():\n        show_error('[RPA][ERROR] - mouse_x() requires init(visual_automation = True)')\n        return int(0)\n\n    send('dump mouse_x() to rpa_python.txt')\n    mouse_x_result = _tagui_output()\n    return int(mouse_x_result)\n\ndef mouse_y():\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using mouse_y()')\n        return int(0)\n\n    if not _visual():\n        show_error('[RPA][ERROR] - mouse_y() requires init(visual_automation = True)')\n        return int(0)\n\n    send('dump mouse_y() to rpa_python.txt')\n    mouse_y_result = _tagui_output()\n    return int(mouse_y_result)\n\ndef clipboard(text_to_put = None):\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using clipboard()')\n        return False\n\n    if not _visual():\n        show_error('[RPA][ERROR] - clipboard() requires init(visual_automation = True)')\n        return False\n\n    if text_to_put is None:\n        send('dump clipboard() to rpa_python.txt')\n        clipboard_result = _tagui_output()\n        return clipboard_result\n\n    elif not send(\"js clipboard('\" + text_to_put.replace(\"'\",'[BACKSLASH_QUOTE]') + \"')\"):\n        return False\n\n    else:\n        return True\n\ndef download_location(location = None):\n    global _tagui_download_directory\n    if not _started():\n        show_error('[RPA][ERROR] - use init() before using download_location()')\n        return False\n\n    if location is None:\n        return _tagui_download_directory\n\n    if \"'\" in location:\n        show_error('[RPA][ERROR] - single quote in location not supported here')\n        return False\n\n    if platform.system() == 'Windows':\n        location = location.replace('/', '\\\\')\n\n    if not send(\"chrome_step('Page.setDownloadBehavior',{behavior: 'allow', downloadPath: '\" + location + \"'});\"):\n        return False\n\n    else:\n        _tagui_download_directory = location\n        return True\n\ndef get_text(source_text = None, left = None, right = None, count = 1):\n    if source_text is None or left is None or right is None:\n        return ''\n\n    left_position = source_text.find(left)\n    if left_position == -1: return ''\n    right_position = source_text.find(right, left_position + 1)\n    if right_position == -1: return ''\n\n    if count > 1:\n        occurrence_count = 2\n        while occurrence_count <= count:\n            occurrence_count += 1\n            left_position = source_text.find(left, right_position + 1)\n            if left_position == -1: return ''\n            right_position = source_text.find(right, left_position + 1)\n            if right_position == -1: return ''\n\n    return source_text[left_position + len(left) : right_position].strip()\n\ndef del_chars(source_text = None, characters = None):\n    if source_text is None:\n        return ''\n\n    elif characters is None:\n        return source_text\n\n    for character in characters:\n        source_text = source_text.replace(character, '')\n\n    return source_text\n"
        }
      ]
    }
  ]
}