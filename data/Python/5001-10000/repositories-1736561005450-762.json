{
  "metadata": {
    "timestamp": 1736561005450,
    "page": 762,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dsdanielpark/Bard-API",
      "stars": 5305,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0537109375,
          "content": "assets/bardapi.gif filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0498046875,
          "content": "notebook\n\n.gitattributes\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n.idea\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\ntest.ipynb\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "MIT License\n\nCopyright (c) 2024 MinWoo(Daniel) Park\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.0009765625,
          "content": "Development Status :: 7 - Inactive\n\n<br>\n\n\n\n\n[NOTICE] \n# Please, go to <img src=\"https://www.gstatic.com/lamda/images/favicon_v1_150160cddff7f294ce30.svg\" width=\"35px\" alt=\"Gemini Icon\" /> [Gemini API](https://github.com/dsdanielpark/Gemini-API)\n\n\n\nA *unofficial* Python wrapper, [python-gemini-api](https://pypi.org/project/python-gemini-api/), operates through reverse-engineering, utilizing cookie values to interact with [Google Gemini](https://gemini.google.com) for users struggling with frequent authentication problems or unable to authenticate via [Google Authentication](https://developers.google.com/identity/protocols/oauth2?hl=en).\n\n- Gemini API GitHub: https://github.com/dsdanielpark/Gemini-API\n- PyPi: https://pypi.org/project/python-gemini-api/\n\nCollaborated competently with [Antonio Cheong](https://github.com/acheong08).\n\n\n## Installation\n```bash\npip install python-gemini-api\n```\n```bash\npip install git+https://github.com/dsdanielpark/Gemini-API.git\n```\nFor the updated version, use as follows:\n```\npip install -q -U python-gemini-api\n```\n<br><br><br>\n\n***\n\n<br>\nReflection on the Bard API Project https://github.com/dsdanielpark/Bard-API/issues/289\n<br>\n\n# <img src=\"https://www.gstatic.com/lamda/images/favicon_v1_150160cddff7f294ce30.svg\" width=\"35px\" alt=\"Gemini Icon\" /> Google - Bard API\n\n<p align=\"left\">\n<a href=\"https://github.com/dsdanielpark/Bard-API\"><img alt=\"PyPI package\" src=\"https://img.shields.io/badge/pypi-BardAPI-black\"></a>\n<!-- <a href=\"https://img.shields.io/pepy/dt/bardapi?logoColor=black\"><img alt=\"Downloads\" src=\"https://pepy.tech/badge/bardapi\"></a> -->\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/%20downloads-379k-000000.svg\"></a>\n<!-- <a><img alt=\"commit update\" src=\"https://img.shields.io/github/last-commit/dsdanielpark/Bard-API?color=black\"></a> -->\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://github.com/dsdanielpark/Bard-API\"><img src=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fdsdanielpark%2FBARD_API&count_bg=%23000000&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=BardAPI&edge_flat=false\"/></a>\n<a href=\"https://github.com/dsdanielpark/Bard-API/stargazers\"><img src=\"https://img.shields.io/github/stars/dsdanielpark/Bard-API?style=social\"></a>\n<a href=\"https://pypi.org/project/bardapi/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/bardapi\"></a>\n<!-- <a href=\"https://www.buymeacoffee.com/parkminwoo\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/arial-orange.png\" height=\"20px\"></a> -->\n  \n</p>\n\n\n> The python package that returns response of [Google Bard](https://gemini.google.com/) through value of cookie.\n\n![](./assets/bard_api.gif)\n\n\n**Please exercise caution and use this package responsibly. This python package is _UNOFFICIAL_.**\n\nI referred to this github repository([github.com/acheong08/Bard](https://github.com/acheong08/Bard)) where inference process of Bard was reverse engineered. Using `__Secure-1PSID`, you can ask questions and get answers from Google Bard. Please note that the bardapi is not a free service, but rather a tool provided to assist developers with testing certain functionalities due to the delayed development and release of Google Bard's API. It has been designed with a lightweight structure that can easily adapt to the emergence of an official API. Therefore, I strongly discourage using it for any other purposes. If you have access to reliable official [PaLM-2 API](https://blog.google/technology/ai/google-palm-2-ai-large-language-model/) or [Google Generative AI API](https://github.com/GoogleCloudPlatform/generative-ai), replace the provided response with the corresponding official code. Check out https://github.com/dsdanielpark/Bard-API/issues/262.\n\n<br>\n\n- [Google Bard API](#google--bard-api)\n  - [What is Google Bard?](#what-is-google-gemini)\n  - [Install](#install)\n  - [Authentication](#authentication)\n  - [Usage](#usage)\n  - [Further](#further)\n    - [Behind a proxy](#behind-a-proxy)\n    - [Use rotating proxies](#use-rotating-proxies)\n    - [Reusable session object](#reusable-session-object)\n    - [Auto Cookie Bard](#auto-cookie-bard)\n    - [Bard `ask_about_image` method](#bard-ask_about_image-method)\n    - [Text To Speech(TTS) from Bard](#text-to-speechtts-from-bard)\n  - [More features](#more-features)\n  - [Amazing Bard Prompts Is All You Need!](#amazing-bard-prompts-is-all-you-need)\n  - [The Python package hf-transllm](#the-python-package-hf-transllm)\n  - [What is Google ~~Bard~~ Gemini?](#what-is-google-gemini)\n  - [Google PaLM](#google-palm)\n  - [FAQ](#faq)\n\n\n\n\n<br>\n\n## What is Google [Bard](https://gemini.google.com/chat)?\nBard is a conversational generative artificial intelligence chatbot developed by Google, based initially on the LaMDA family of LLMs(Large Language Models) and later the PaLM LLM. Please check official documents for [updates](https://gemini.google.com/updates) on Bard, including [available regions and languages](https://support.google.com/bard/answer/13575153?hl=en).\n\n\n## Install\n```\n$ pip install bardapi\n```\n```\n$ pip install git+https://github.com/dsdanielpark/Bard-API.git\n```\nDue to certain dependency packages that are not compatible with 64bit windows(OS), we are releasing a lightweight alpha release of bard that only returns responses for simple requests. This release is a continuation of the pypi `0.1.18` version, which was maintained with lightweight and simple functionality. See [alpha-release github branch](https://github.com/dsdanielpark/Bard-API/tree/alpha-release) for more details.\n```\n$ pip install bardapi==0.1.23a\n```\n\n<br>\n\n## Authentication\n> **Warning** Do not expose the `__Secure-1PSID`. For testing purposes only; avoid direct application use. Cookie values change periodically (every 15-20 minutes). Frequent session changes may briefly block access; headless mode is challenging. Rate limiting applies and changes often. If the cookie changes, log out of your Google account, close the browser, and enter the new cookie value. Or manually reset the cookie for a new value. See FAQ and issue pages for details.\n1. Visit https://gemini.google.com/\n2. F12 for console\n3. Session: Application → Cookies → Copy the value of  `__Secure-1PSID` cookie. Or try to use `SIDCC` as token.\n\nNote that while I referred to `__Secure-1PSID` or `SIDCC` value as an API key for convenience, it is not an officially provided API key. \nCookie value subject to frequent changes. Verify the value again if an error occurs. Most errors occur when an invalid cookie value is entered.\n\n<br>\n\nIf you need to set multiple cookie values:\n\n- [Multi-cookie Bard](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#multi-cookie-bard) - After confirming that multiple cookie values are required to receive responses reliably in certain countries, I will deploy it for testing purposes. Please debug and create a pull request.\n\n\n<br>\n\n## Usage \n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1zzzlTIh0kt2MdjLzvXRby1rWbHzmog8t?usp=sharing) \n\n\nSimple Usage\n\n```python\nfrom bardapi import Bard\n\ntoken = 'xxxxxxx'\nbard = Bard(token=token)\nbard.get_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")['content']\n```\nOr you can use this\n```python\nfrom bardapi import Bard\nimport os\nos.environ['_BARD_API_KEY'] = \"xxxxxxx\"\n\nBard().get_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")['content']\n```\n\nTo get reponse dictionary\n```python\nimport bardapi\n\n# set your __Secure-1PSID value to key\ntoken = 'xxxxxxx'\n\n# set your input text\ninput_text = \"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\"\n\n# Send an API request and get a response.\nresponse = bardapi.core.Bard(token).get_answer(input_text)\n```\n\n\n\nAddressing errors caused by delayed responses in environments like Google Colab and containers. If an error occurs despite following the proper procedure, utilize the timeout argument.\n```python\nfrom bardapi import Bard\nimport os\nos.environ['_BARD_API_KEY']=\"xxxxxxx\"\n\nbard = Bard(timeout=30) # Set timeout in seconds\nbard.get_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")['content']\n```\n\n<br>\n\n## Further\n### Behind a proxy\nIf you are working behind a proxy, use the following.\n```python\nfrom bardapi import Bard\n\n# Change 'http://proxy.example.com:8080' to your http proxy\n# timeout in seconds\nproxies = {\n    'http': 'http://proxy.example.com:8080',\n    'https': 'https://proxy.example.com:8080'\n}\n\nbard = Bard(token='xxxxxxx', proxies=proxies, timeout=30)\nbard.get_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")['content']\n```\n\n### Use rotating proxies\n\nIf you want to **avoid blocked requests** and bans, then use [Smart Proxy by Crawlbase](https://crawlbase.com/docs/smart-proxy/?utm_source=github_ad&utm_medium=social&utm_campaign=bard_api). It forwards your connection requests to a **randomly rotating IP address** in a pool of proxies before reaching the target website. The combination of AI and ML make it more effective to **avoid CAPTCHAs and blocks**.\n\n```python\nfrom bardapi import Bard\nimport requests\n\n# Get your proxy url at crawlbase https://crawlbase.com/docs/smart-proxy/get/\nproxy_url = \"http://xxxxxxxxxxxxxx:@smartproxy.crawlbase.com:8012\" \nproxies = {\"http\": proxy_url, \"https\": proxy_url}\n\nbard = Bard(token='xxxxxxx', proxies=proxies, timeout=30)\nbard.get_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")['content']\n```\n\n\n### Reusable session object\nYou can continue the conversation using a reusable session. However, this feature is limited, and it is difficult for a package-level feature to perfectly maintain conversation_id and context. You can try to maintain the consistency of conversations same way as other LLM services, such as passing some sort of summary of past conversations to the DB.\n```python\nfrom bardapi import Bard\nimport requests\n# import os\n# os.environ['_BARD_API_KEY'] = 'xxxxxxx'\ntoken = 'xxxxxxx'\n\nsession = requests.Session()\nsession.headers = {\n            \"Host\": \"gemini.google.com\",\n            \"X-Same-Domain\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\",\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n            \"Origin\": \"https://gemini.google.com\",\n            \"Referer\": \"https://gemini.google.com/\",\n        }\n# session.cookies.set(\"__Secure-1PSID\", os.getenv(\"_BARD_API_KEY\")) \nsession.cookies.set(\"__Secure-1PSID\", token) \n\nbard = Bard(token=token, session=session, timeout=30)\nbard.get_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")['content']\n\n# Continued conversation without set new session\nbard.get_answer(\"What is my last prompt??\")['content']\n```\n\n<details>\n<summary>Async Bard Code (Click to expand)</summary>\n\n```python\nfrom httpx import AsyncClient\nfrom bardapi import BardAsync\nimport os\n\n# Uncomment and set your API key as needed\n# os.environ['_BARD_API_KEY'] = 'xxxxxxx'\ntoken = 'xxxxxxx'  # Replace with your actual token\n\nSESSION_HEADERS = {\n    \"Host\": \"gemini.google.com\",\n    \"X-Same-Domain\": \"1\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\",\n    \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    \"Origin\": \"https://gemini.google.com\",\n    \"Referer\": \"https://gemini.google.com/\",\n}\ntimeout = 30  # Example timeout\nproxies = {}  # Replace with your proxies if needed\n\nclient = AsyncClient(\n    http2=True,\n    headers=SESSION_HEADERS,\n    cookies={\"__Secure-1PSID\": token},\n    timeout=timeout,\n    proxies=proxies,\n)\n\nbard_async = BardAsync(token=token, client=client)\n\n# Asynchronous function to get the answer\nasync def get_bard_answer(question):\n    await bard_async.async_setup()  # Ensure async setup is done\n    return await bard_async.get_answer(question)\n\nresponse = await get_bard_answer(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")\nprint(response['content'])\n```\n\n</details>\n\n\n### Auto Cookie Bard\nUsing [browser_cookie3](https://github.com/borisbabic/browser_cookie3) we extract the `__Secure-1PSID` cookie from all browsers, and then we can use the API without passing the token. However, there are still incomplete dependency packages and various variables, so please seek assistance in the following [GitHub Issues](https://github.com/borisbabic/browser_cookie3/issues) or adjust your browser's version.\n- Visit https://gemini.google.com/ in your browser and execute the following command while in the chat-enabled state. Refer to browser_cookie3 for details on how it works. If any issues arise, please restart the browser or log in to your Google account again. \n*Recommended to keep the browser open.*\n```python\nfrom bardapi import Bard\n\nbard = Bard(token_from_browser=True)\nresponse = bard.get_answer(\"Do you like cookies?\")\nprint(response['content'])\n```\n\n### Bard `ask_about_image` method \n*It may not work as it is only available for certain accounts, regions, and other restrictions.*\nAs an experimental feature, it is possible to ask questions with an image. However, this functionality is only available for accounts with image upload capability in Bard's web UI. \n\n```python\nfrom bardapi import Bard\n\nbard = Bard(token='xxxxxxx')\nimage = open('image.jpg', 'rb').read() # (jpeg, png, webp) are supported.\nbard_answer = bard.ask_about_image('What is in the image?', image)\nprint(bard_answer['content'])\n```\n\n### [Text To Speech(TTS)](https://cloud.google.com/text-to-speech?hl=ko) from Bard\nBusiness users and high traffic volume may be subject to account restrictions according to Google's policies. Please use the [Official Google Cloud API](https://cloud.google.com/text-to-speech) for any other purpose. \nThe user is solely responsible for all code, and it is imperative to consult Google's official services and policies. Furthermore, the code in this repository is provided under the MIT license, and it disclaims any liability, including explicit or implied legal responsibilities.\n```python\nfrom bardapi import Bard\n\nbard = Bard(token='xxxxxxx')\naudio = bard.speech('Hello, I am Bard! How can I help you today?')\nwith open(\"speech.ogg\", \"wb\") as f:\n  f.write(bytes(audio['audio']))\n```\n\n<br>\n\n## [More features](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md)\nStarting from version `0.1.18`, the GitHub version of BardAPI will be synchronized with the PyPI version and released simultaneously. However, the version undergoing QA can still be used from the GitHub repository.<br>\n```\n$ pip install git+https://github.com/dsdanielpark/Bard-API.git\n```\n\n- [Multi-cookie Bard](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#multi-cookie-bard)\n- [Auto Cookie Bard](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#auto-cookie-bard)\n- [TTS from Bard](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#text-to-speechtts)\n- [Multi-language Bard API](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#multi-language-bard-api)\n- [Get image links](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#get-image-links)\n- [ChatBard](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#chatbard)\n- [Export Conversation](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#export-conversation)\n- [Export Code to Repl.it](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#export-code-to-replit)\n- [Executing Python code received as a response from Bard](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#chatbard)\n- [Using Bard Asynchronously](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#using-bard-asynchronously)\n- [Bard Cookies](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#bard-which-can-get-cookies)\n- [Fix Coversation ID (Fix Context)](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#fix-conversation-id-fix-context)\n- [Max_token, Max_sentences](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#max_token-max_sentence)\n- [Translation to another programming language](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_DEV.md#translation-to-another-programming-language)\n\n\n<br>\n\n\n\n##  [Amazing Bard Prompts](https://github.com/dsdanielpark/amazing-bard-prompts) Is All You Need!\n- Helpful prompts for Google Bard\n\n<br>\n\n## [The Python package hf-transllm](https://github.com/dsdanielpark/hf-transllm)\nIf you want to comfortably use the open-source LLM models in your native language, which are `released under the Apache License (allowing free commercial use)` in `various languages`, you can try using the [hf-transllm](https://github.com/dsdanielpark/hf-transllm) package. hf-transllm also supports multilingual inference for various LLMs stored in hugging face repository.\n\n### Example code of [hf-transllm](https://github.com/dsdanielpark/hf-transllm)\n<details>\n<summary>In case the Google package is no longer available due to policy restrictions, here's a simple example code for using open-source language models (LLMs) in both English and multiple languages.</summary>\n\n<br>\n\n### Usage\nFor the decoder models provided by Hugging Face, you can easily use them by either following a simple approach or overriding the inference method. You can explore various open-source language models at [this link](https://huggingface.co/models). Through the ranking information from [Open LLM Leader Board Report repository](https://github.com/dsdanielpark/Open-LLM-Leaderboard-Report), you can find information about good models.\n\n#### For LLM that use languages `other than English`\n```python\nfrom transllm import LLMtranslator\n\nopen_llama3b_kor = LLMtranslator('openlm-research/open_llama_3b', target_lang='ko', translator='google') # Korean\n\ntrnaslated_answer = open_llama3b_kor.generate(\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\")\nprint(trnaslated_answer)\n```\n\n#### For LLM that use `English`\nRefer https://github.com/openlm-research/open_llama or using like this:\n```python\nfrom transllm import LLMtranslator\n\nopen_llama3b = LLMtranslator('openlm-research/open_llama_3b) \n\nanswer = open_llama3b.generate(\"Tell me about the Korean girl group Newjeans.\")\nprint(answer)\n```\n\n</details>\n\n<br>\n\n## What is Google [Gemini](https://deepmind.google/technologies/gemini/#introduction)?\n[Gemini](https://deepmind.google/technologies/gemini/#introduction) or formerly knowns as Bard is an advanced, multimodal AI model by [Google DeepMind](https://deepmind.google/), capable of understanding and integrating various information types like text, code, audio, images, and video.\n\n- Paper: https://storage.googleapis.com/deepmind-media/gemini/gemini_1_report.pdf\n- Web: https://blog.google/technology/ai/google-gemini-ai/#capabilities\n- Code Guide: https://ai.google.dev/tutorials/python_quickstart\n- Official API On [Google AI Studio](https://makersuite.google.com/app/apikey).\n\n### Google AI Studio\nGoogle AI Studio creates a new Google Cloud project for each new API key. You also can create an API key in an existing Google Cloud project. All projects are subject to the [Google Cloud Platform Terms of Service](https://cloud.google.com/terms).\n- Web: https://makersuite.google.com/app/apikey\n- Note: The Gemini API is currently in public preview. Production applications are not supported yet.\n\n### Access to Gemini Pro in Bard API package\nThe Bard API, sourcing responses from [Google ~~Bard~~Gemini's official website](https://gemini.google.com/chat), allows you to receive the same responses as the website. So, if Gemini answers are available on the web, you can also accessed Gemini through the Bard API. However, it's important to note that responses might also come from other models, not exclusively Gemini Pro or Ultra. \n- There is no official Bard API or early access/waiting list for Gemini, although the [PaLM2 API](https://github.com/dsdanielpark/Bard-API#google-palm-api) is available.\n  - Google's PaLM2 API differs from Bard, with some aspects of Bard being superior.\n  - It's speculated that after expert review, Bard Advanced lineup will likely provide an official API in 2024.\n- Gemini and previous generative AI model responses are provided randomly on Bard Web.\n- The Bard API, with its imperfect extension features(e.g, `ask_about_image`), occasionally demonstrates Gemini's capabilities. This behavior may vary by region, language, or Google account.\n- More information in the [FAQ](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_FAQ.md).\n\nFor more on Gemini:\n- [Official API](https://makersuite.google.com/app/apikey)\n- [Introducing Gemini: our largest and most capable AI model](https://blog.google/technology/ai/google-gemini-ai/)\n- [How it's made: multimodal prompting](https://developers.googleblog.com/2023/12/how-its-made-gemini-multimodal-prompting.html)\n- [YouTube Demo](https://www.youtube.com/watch?v=UIZAiXYceBI)\n\n<br>\n\n\n\n## Google PaLM\nTry demo at https://makersuite.google.com/app/prompts/new_text.\n```\nwho are you?\n>> I am powered by PaLM 2, which stands for Pathways Language Model 2, a large language model from Google AI.\n```\n\nGoogle Generative AI\n- Official Page: https://blog.google/technology/ai/google-palm-2-ai-large-language-model/\n- GitHub: https://github.com/GoogleCloudPlatform/generative-ai\n- Try Demo: https://makersuite.google.com/app/prompts/new_text.\n- Official Library: https://makersuite.google.com/app/library\n- Get API Key: https://makersuite.google.com/app/apikey\n- Quick Start Tutorial: https://developers.generativeai.google/tutorials/text_quickstart\n\n### Quick Start\n```\n$ pip install -q google-generativeai\n```\n\n```python\nimport pprint\nimport google.generativeai as palm\n\npalm.configure(api_key='YOUR_API_KEY')\n\nmodels = [m for m in palm.list_models() if 'generateText' in m.supported_generation_methods]\nmodel = models[0].name\nprint(model)\n\nprompt = \"Who are you?\"\n\ncompletion = palm.generate_text(\n    model=model,\n    prompt=prompt,\n    temperature=0,\n    # The maximum length of the response\n    max_output_tokens=800,\n)\nprint(completion.result)\n```\n\n<br>\n\n<br>\n\n## Sponsor\n\n<a href=\"https://crawlbase.com/?utm_source=github_ad&utm_medium=social&utm_campaign=bard_api\"><img src=\"./assets/sponsor_ad.png\"></a>\n \n**Use data scraping to train your AI models.** \n\n- Easy to use **API to crawl and scrape** millions of websites\n- Use crawlbase for efficient [data extraction](https://crawlbase.com/generative-ai-data?utm_source=github_ad&utm_medium=social&utm_campaign=bard_api) for your **LLMs**\n- Average **success rate: 98%**\n- Uptime guarantee: **99.9%**\n- [Simple docs](https://crawlbase.com/docs?utm_source=github_ad&utm_medium=social&utm_campaign=bard_api) to get started in minutes\n- **Asynchronous** Crawling **API** if you need massive amounts of data\n- **GDPR** and **CCPA** compliant\n\nUsed by **70k+** developers. \n\n\n## [FAQ](https://github.com/dsdanielpark/Bard-API/blob/main/documents/README_FAQ.md)\nPlease check the FAQ and open issues for similar questions before creating a new issue. Repeated questions will be kept as open issues. Too many requests can trigger a temporary account block (HTTP 429). Maintain proper intervals, using functions like sleep to avoid rate limits. Policies may vary by country and language, so all users could face temporary or permanent errors via the API.\n\n## Scripts\nIn the scripts [folder](./scripts/), I have released a script to help you compare [OpenAI-ChatGPT](./scripts/openai_api.ipynb), [Microsoft-EdgeGPT](./scripts/microsoft_api.ipynb) and [Google-Bard](./scripts/google_api.ipynb). I hope they will help more developers.\n\n## Contributors\nWe would like to express our sincere gratitude to all the contributors.\n\n<a href=\"https://github.com/dsdanielpark/Bard_API/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=dsdanielpark/Bard_API\" />\n</a>\n\n\n<br>\n\n## License\n[MIT](https://opensource.org/license/mit/) <br>\nWe hold no legal responsibility; for more information, please refer to the bottom of the readme file. We just want you to give me and [them](https://github.com/acheong08/Bard) a star. This project is a personal initiative and is not affiliated with or endorsed by Google. It is recommended to use Google's official API.\n```\nThe MIT License (MIT)\n\nCopyright (c) 2023 Minwoo Park\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n## Shifting Service Policies: Bard and Google's Dynamics \nBard's service status and Google's API interfaces are in constant flux. *The number of replies is currently limited, but certain users,* such as those utilizing VPNs or proxy servers, have reported slightly higher message caps. Adaptability is crucial in navigating these dynamic service policies. Please note that the cookie values used in this package are not official API values.\n            \n## Bugs and Issues\nSincerely grateful for any reports on new features or bugs. Your valuable feedback on the code is highly appreciated.\n\n## Contacts\n- Core maintainer:\n  - [Antonio Cheong](https://github.com/acheong08) / teapotv8@proton.me <br>\n  - [Daniel Park](https://github.com/DSDanielPark) / parkminwoo1991@gmail.com\n\n## Reference \n[1] https://github.com/acheong08/Bard <br>\n            \n> **Warning** Important Notice\n  The user assumes all legal responsibilities associated with using the BardAPI package. This Python package merely facilitates easy access to Google Bard for developers. Users are solely responsible for managing data and using the package appropriately. For further information, please consult the Google Bard Official Document.\n    \n> **Warning** Caution\nThis Python package is not an official Google package or API service. It is not affiliated with Google and uses Google account cookies, which means that excessive or commercial usage may result in restrictions on your Google account. The package was created to support developers in testing functionalities due to delays in the official Google package. However, it should not be misused or abused. Please be cautious and refer to the Readme for more information.\n  \n<br><br>\n  \n*Copyright (c) 2023 MinWoo Park, South Korea*<br>\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bardapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "func_test.ipynb",
          "type": "blob",
          "size": 6.4775390625,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import Bard\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"token = 'xxxxxxx'\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"bard = Bard(token=token)\\n\",\n    \"bard.get_answer(\\\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\\\")['content']\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import Bard\\n\",\n    \"\\n\",\n    \"bard = Bard(token=token, language='chinese (simplified)')\\n\",\n    \"res = bard.get_answer(\\\"今天首尔的天气怎么样？\\\")\\n\",\n    \"print(res['content'])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import Bard\\n\",\n    \"bard = Bard(token=token)\\n\",\n    \"res = bard.get_answer(\\\"Find me an image of the main entrance of Stanford University.\\\")\\n\",\n    \"res['links'] # Get image links (list)\\n\",\n    \"res['images'] # Get images (list)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import Bard\\n\",\n    \"bard = Bard(token=token)\\n\",\n    \"res = bard.get_answer(\\\"Find me an image of the main entrance of Stanford University.\\\")\\n\",\n    \"res['links'] # Get image links (list)\\n\",\n    \"res['images'] # Get images (list)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"XQhVqoq8lHTI8oZ09DAdXKBTLGrMiT9xv61UNWs51CE6UmY16Qbs-jPWnMm7ciAXtJPopA.\\n\",\n      \"<class 'str'>\\n\",\n      \"====================================\\n\",\n      \"\\u001b[44m          Welcome to Chatbot        \\u001b[49m\\n\",\n      \"====================================\\n\",\n      \"If you enter quit, q, or stop, the chat will end.\\n\",\n      \"USER: q\\n\",\n      \"====================================\\n\",\n      \"\\u001b[31mChat Ended.\\u001b[39m\\n\",\n      \"\\n\",\n      \"DanielPark's Chat Template\\n\",\n      \"====================================\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from bardapi import ChatBard\\n\",\n    \"    \\n\",\n    \"chat = ChatBard(token='xxxxxxx')\\n\",\n    \"chat.start()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import Bard\\n\",\n    \"    \\n\",\n    \"bard = Bard(token=token, run_code=True)\\n\",\n    \"bard.get_answer(\\\"code a pie chart in python for this data={'blue':25, 'red':30, 'green':30, 'purple':15}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import BardAsync \\n\",\n    \"    \\n\",\n    \"bard = BardAsync(token=token)\\n\",\n    \"res = await bard.get_answer(\\\"What is Metaverse?\\\")\\n\",\n    \"print(res['content'])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from bardapi import Bard, SESSION_HEADERS\\n\",\n    \"import os\\n\",\n    \"import requests\\n\",\n    \"\\n\",\n    \"# Set token\\n\",\n    \"token= token\\n\",\n    \"\\n\",\n    \"# Set session\\n\",\n    \"session = requests.Session()\\n\",\n    \"session.headers = SESSION_HEADERS\\n\",\n    \"session.cookies.set(\\\"__Secure-1PSID\\\", token) \\n\",\n    \"\\n\",\n    \"# Give session and conversation id\\n\",\n    \"bard = Bard(token=token, session=session, conversation_id=\\\"c_1f04f704a788e6e4\\\", timeout=30)\\n\",\n    \"bard.get_answer(\\\"나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘\\\")['content']\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"<re.Match object; span=(772688, 772752), match='https://accounts.google.com/ListAccounts?authuser> <re.Match object; span=(776121, 776186), match='https://accounts.google.com/RotateCookiesPage\\\"],3>\\n\",\n      \"authuser=0&pid=658\\n\",\n      \"og_pid: 658\\n\",\n      \"Values array: [3, 0, 1, 0, 3701177, 0]\\n\",\n      \"rot: 3\\n\",\n      \"exp_id: 3701177\\n\",\n      \"<!DOCTYPE html><html><body><script src='https://www.gstatic.com/_/mss/boq-identity/_/js/k=boq-identity.IdentityRotateCookiesHttp.ko.vFNyU-Lk-tA.es5.O/am=CAM/d=1/rs=AOaEmlFQpSkPkGpokh2AASCcHGhCfPB_lA/m=hfcr' nonce=\\\"fwfOvIr5QKiEzxtYQuaRvg\\\"></script><script nonce=\\\"fwfOvIr5QKiEzxtYQuaRvg\\\">init('-7546079642772715825',  658.0 ,  0.0 ,  0.0 ,  600.0 , false )</script></body></html>\\n\",\n      \"['-7546079642772715825']\\n\",\n      \"New cookies: {'__Secure-1PSIDTS': 'sidts-CjEBNiGH7ldEz633gURuY8PfjdJ4UNDlxnz-8Ii6G_j16helunBkZzzTHkTcyRXfvJvsEAA', 'Domain': '.google.com', 'Expires': 'Thu, 28-Nov-2024 02:01:26 GMT', 'Path': '/', 'Priority': 'HIGH', 'SameParty, __Secure-3PSIDTS': 'sidts-CjEBNiGH7ldEz633gURuY8PfjdJ4UNDlxnz-8Ii6G_j16helunBkZzzTHkTcyRXfvJvsEAA', 'expires': 'Thu, 28-Nov-2024 02:01:26 GMT', 'path': '/', 'domain': '.google.com', 'priority': 'high', 'SameSite': 'none'}\\n\",\n      \"sidts-CjEBNiGH7ldEz633gURuY8PfjdJ4UNDlxnz-8Ii6G_j16helunBkZzzTHkTcyRXfvJvsEAA\\n\",\n      \"None\\n\",\n      \"None\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from bardapi import Bard, SESSION_HEADERS\\n\",\n    \"import requests\\n\",\n    \"session = requests.Session()\\n\",\n    \"token = '-'\\n\",\n    \"session.cookies.set(\\\"__Secure-1PSID\\\", token)\\n\",\n    \"session.cookies.set( \\\"__Secure-1PSIDCC\\\", \\\"-\\\")\\n\",\n    \"session.cookies.set(\\\"__Secure-1PSIDTS\\\", \\\"-\\\")\\n\",\n    \"session.headers = SESSION_HEADERS\\n\",\n    \"bard = Bard(token=token, session=session, timeout=30)\\n\",\n    \"\\n\",\n    \"new_cookies = bard.update_1PSIDTS()\\n\",\n    \"print('New cookies:', new_cookies)\\n\",\n    \"print(new_cookies.get(\\\"__Secure-1PSIDTS\\\"))\\n\",\n    \"print(new_cookies.get(\\\"__Secure-1PSIDCC\\\"))\\n\",\n    \"print(new_cookies.get(\\\"__Secure-3PSIDTS\\\"))\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"cc\",\n   \"language\": \"python\",\n   \"name\": \"cc\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.12\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 0.0947265625,
          "content": "from bardapi import ChatBard\n\n\nif __name__ == \"__main__\":\n    chat = ChatBard()\n    chat.start()\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Automatically generated using PDM. Do not edit manually. \nrequests\ncolorama\nhttpx[http2]>=0.20.0\nlangdetect\ndeep_translator\ngoogle-cloud-translate\nbrowser_cookie3\npython-gemini-api > 2.3.0"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.056640625,
          "content": "# Copyright 2023 Daniel Park, MIT License\n\nimport re\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef get_version():\n    filename = \"bardapi/__init__.py\"\n    with open(filename) as f:\n        match = re.search(r\"\"\"^__version__ = ['\"]([^'\"]*)['\"]\"\"\", f.read(), re.M)\n    if not match:\n        raise RuntimeError(\"{} doesn't contain __version__\".format(filename))\n    version = match.groups()[0]\n    return version\n\n\ndef get_long_description():\n    with open(\"README.md\", encoding=\"UTF-8\") as f:\n        long_description = f.read()\n        return long_description\n\n\nversion = get_version()\n\nsetup(\n    name=\"bardapi\",\n    version=\"1.0.0\",\n    author=\"daniel park\",\n    author_email=\"parkminwoo1991@gmail.com\",\n    description=\"The python package that returns Response of Google Bard through API.\",\n    long_description=get_long_description(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/dsdanielpark/Bard-API\",\n    packages=find_packages(exclude=[]),\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"httpx[http2]>=0.20.0\",\n        \"requests\",\n        \"colorama\",\n        \"python-gemini-api\",\n    ],\n    extras_require={\n        \"translate\": [\n            \"browser_cookie3\",\n            \"deep_translator\",\n            \"google-cloud-translate\",\n            \"langdetect\",\n        ]\n    },\n    keywords=\"Python, API, Bard, Google Bard, Large Language Model, Chatbot API, Google API, Chatbot\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Science/Research\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    entry_points={\"console_scripts\": [\"bard_api=bard_api.cli:main\"]},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "translate_to_other_programming_language",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}