{
  "metadata": {
    "timestamp": 1736561068091,
    "page": 857,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "YaoFANGUK/video-subtitle-remover",
      "stars": 5028,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".condarc",
          "type": "blob",
          "size": 0.390625,
          "content": "channels:\r\n  - defaults\r\nshow_channel_urls: true\r\ndefault_channels:\r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\r\ncustom_channels:\r\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\r\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\r\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.564453125,
          "content": "\n# Created by https://www.toptal.com/developers/gitignore/api/intellij+all,python,pycharm+all,macos,windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=intellij+all,python,pycharm+all,macos,windows\n\n### Intellij+all ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### Intellij+all Patch ###\n# Ignores the whole .idea folder and all .iml files\n# See https://github.com/joeblau/gitignore.io/issues/186 and https://github.com/joeblau/gitignore.io/issues/360\n\n.idea/\n\n# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023\n\n*.iml\nmodules.xml\n.idea/misc.xml\n*.ipr\n\n# Sonarlint plugin\n.idea/sonarlint\n\n### macOS ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### PyCharm+all ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n\n# Generated files\n\n# Sensitive or high-churn files\n\n# Gradle\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\n\n# Mongo Explorer plugin\n\n# File-based project format\n\n# IntelliJ\n\n# mpeltonen/sbt-idea plugin\n\n# JIRA plugin\n\n# Cursive Clojure plugin\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\n\n# Editor-based Rest Client\n\n# Android studio 3.1+ serialized cache file\n\n### PyCharm+all Patch ###\n# Ignores the whole .idea folder and all .iml files\n# See https://github.com/joeblau/gitignore.io/issues/186 and https://github.com/joeblau/gitignore.io/issues/360\n\n\n# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023\n\n\n# Sonarlint plugin\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\npytestdebug.log\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndoc/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#poetry.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n# .env\n.env/\n.venv/\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\npythonenv*\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# operating system-related files\n*.DS_Store #file properties cache/storage on macOS\nThumbs.db #thumbnail cache on Windows\n\n# profiling data\n.prof\n\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/intellij+all,python,pycharm+all,macos,windows\n/backend/models/V2/ch_rec/inference.pdiparams\n/backend/models/V4/ch_det/inference.pdiparams\n/backend/models/big-lama/models/best.ckpt\n/backend/models/sam/sam.pth\n/output/\n/backend/test.py\n/dylib/\n/settings.ini\n/test*.py\n/subtitle.ini\n*_no_sub.mp4\n/backend/ffmpeg/win_x64/ffmpeg.exe\n/test/pic_test/\ndemo*.mp4\nout*.mp4\ntest*.py\ntest_*.mp4\ntest*_no_sub*.mp4\n/test/coods/\n/local_test/\n/backend/models/video/ProPainter.pth\n/backend/models/big-lama/big-lama.pt\n/test/debug/\n/backend/tools/train/release_model/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.064453125,
          "content": "简体中文 | [English](README_en.md)\n\n## 项目简介\n\n![License](https://img.shields.io/badge/License-Apache%202-red.svg)\n![python version](https://img.shields.io/badge/Python-3.8+-blue.svg)\n![support os](https://img.shields.io/badge/OS-Windows/macOS/Linux-green.svg)  \n\nVideo-subtitle-remover (VSR) 是一款基于AI技术，将视频中的硬字幕去除的软件。\n主要实现了以下功能：\n- **无损分辨率**将视频中的硬字幕去除，生成去除字幕后的文件\n- 通过超强AI算法模型，对去除字幕文本的区域进行填充（非相邻像素填充与马赛克去除）\n- 支持自定义字幕位置，仅去除定义位置中的字幕（传入位置）\n- 支持全视频自动去除所有文本（不传入位置）\n- 支持多选图片批量去除水印文本\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo.png\" alt=\"demo.png\"/></p>\n\n**使用说明：**\n\n - 有使用问题请加群讨论，QQ群：806152575（已满）、816881808\n - 直接下载压缩包解压运行，如果不能运行再按照下面的教程，尝试源码安装conda环境运行\n\n**下载地址：**\n\nWindows GPU版本v1.1.0（GPU）：\n\n- 百度网盘:  <a href=\"https://pan.baidu.com/s/1zR6CjRztmOGBbOkqK8R1Ng?pwd=vsr1\">vsr_windows_gpu_v1.1.0.zip</a> 提取码：**vsr1**\n\n- Google Drive:  <a href=\"https://drive.google.com/drive/folders/1NRgLNoHHOmdO4GxLhkPbHsYfMOB_3Elr?usp=sharing\">vsr_windows_gpu_v1.1.0.zip</a> \n\n> 仅供具有Nvidia显卡的用户使用(AMD的显卡不行)\n\n## 演示\n\n- GUI版：\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo2.gif\" alt=\"demo2.gif\"/></p>\n\n- <a href=\"https://b23.tv/guEbl9C\">点击查看演示视频👇</a>\n\n<p style=\"text-align:center;\"><a href=\"https://b23.tv/guEbl9C\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo.gif\" alt=\"demo.gif\"/></a></p>\n\n## 源码使用说明\n\n> **无Nvidia显卡请勿使用本项目**，最低配置：\n>\n> **GPU**：GTX 1060或以上显卡\n> \n> CPU: 支持AVX指令集\n\n#### 1. 下载安装Miniconda \n\n- Windows: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Windows-x86_64.exe\">Miniconda3-py38_4.11.0-Windows-x86_64.exe</a>\n\n- Linux: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Linux-x86_64.sh\">Miniconda3-py38_4.11.0-Linux-x86_64.sh</a>\n\n#### 2. 创建并激活虚机环境\n\n（1）切换到源码所在目录：\n```shell\ncd <源码所在目录>\n```\n> 例如：如果你的源代码放在D盘的tools文件下，并且源代码的文件夹名为video-subtitle-remover，就输入 ```cd D:/tools/video-subtitle-remover-main```\n\n（2）创建激活conda环境\n```shell\nconda create -n videoEnv python=3.8\n```\n\n```shell\nconda activate videoEnv\n```\n\n#### 3. 安装依赖文件\n\n请确保你已经安装 python 3.8+，使用conda创建项目虚拟环境并激活环境 (建议创建虚拟环境运行，以免后续出现问题)\n\n- 安装CUDA和cuDNN\n\n  <details>\n      <summary>Linux用户</summary>\n      <h5>(1) 下载CUDA 11.7</h5>\n      <pre><code>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run</code></pre>\n      <h5>(2) 安装CUDA 11.7</h5>\n      <pre><code>sudo sh cuda_11.7.0_515.43.04_linux.run</code></pre>\n      <p>1. 输入accept</p>\n      <img src=\"https://i.328888.xyz/2023/03/31/iwVoeH.png\" width=\"500\" alt=\"\">\n      <p>2. 选中CUDA Toolkit 11.7（如果你没有安装nvidia驱动则选中Driver，如果你已经安装了nvidia驱动请不要选中driver），之后选中install，回车</p>\n      <img src=\"https://i.328888.xyz/2023/03/31/iwVThJ.png\" width=\"500\" alt=\"\">\n      <p>3. 添加环境变量</p>\n      <p>在 ~/.bashrc 加入以下内容</p>\n      <pre><code># CUDA\n  export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}\n  export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}</code></pre>\n      <p>使其生效</p>\n      <pre><code>source ~/.bashrc</code></pre>\n      <h5>(3) 下载cuDNN 8.4.1</h5>\n      <p>国内：<a href=\"https://pan.baidu.com/s/1Gd_pSVzWfX1G7zCuqz6YYA\">cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</a> 提取码：57mg</p>\n      <p>国外：<a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\">cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</a></p>\n      <h5>(4) 安装cuDNN 8.4.1</h5>\n      <pre><code> tar -xf cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\n   mv cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive cuda\n   sudo cp ./cuda/include/* /usr/local/cuda-11.7/include/\n   sudo cp ./cuda/lib/* /usr/local/cuda-11.7/lib64/\n   sudo chmod a+r /usr/local/cuda-11.7/lib64/*\n   sudo chmod a+r /usr/local/cuda-11.7/include/*</code></pre>\n  </details>\n\n  <details>\n        <summary>Windows用户</summary>\n        <h5>(1) 下载CUDA 11.7</h5>\n        <a href=\"https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_516.01_windows.exe\">cuda_11.7.0_516.01_windows.exe</a>\n        <h5>(2) 安装CUDA 11.7</h5>\n        <h5>(3) 下载cuDNN v8.4.0 (April 1st, 2022), for CUDA 11.x</h5>\n        <p><a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip\">cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip</a></p>\n        <h5>(4) 安装cuDNN 8.4.0</h5>\n        <p>\n           将cuDNN解压后的cuda文件夹中的bin, include, lib目录下的文件复制到C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\\对应目录下\n        </p>\n    </details>\n\n\n- 安装GPU版本Paddlepaddle:\n\n  - windows:\n\n      ```shell \n      python -m pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html\n      ```\n\n  - Linux:\n\n      ```shell\n      python -m pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html\n      ```\n\n- 安装GPU版本Pytorch:\n      \n  ```shell\n  conda install pytorch==2.0.1 torchvision==0.15.2 pytorch-cuda=11.8 -c pytorch -c nvidia\n  ```\n  或者使用\n  ```shell\n  pip install torch==2.0.1 torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cu118\n  ```\n\n- 安装其他依赖:\n\n  ```shell\n  pip install -r requirements.txt\n  ```\n\n\n#### 4. 运行程序\n\n- 运行图形化界面\n\n```shell\npython gui.py\n```\n\n- 运行命令行版本(CLI)\n\n```shell\npython ./backend/main.py\n```\n\n## 常见问题\n1. 提取速度慢怎么办\n\n修改backend/config.py中的参数，可以大幅度提高去除速度\n```python\nMODE = InpaintMode.STTN  # 设置为STTN算法\nSTTN_SKIP_DETECTION = True # 跳过字幕检测，跳过后可能会导致要去除的字幕遗漏或者误伤不需要去除字幕的视频帧\n```\n\n2. 视频去除效果不好怎么办\n\n修改backend/config.py中的参数，尝试不同的去除算法，算法介绍\n\n> - InpaintMode.STTN 算法：对于真人视频效果较好，速度快，可以跳过字幕检测\n> - InpaintMode.LAMA 算法：对于图片效果最好，对动画类视频效果好，速度一般，不可以跳过字幕检测\n> - InpaintMode.PROPAINTER 算法： 需要消耗大量显存，速度较慢，对运动非常剧烈的视频效果较好\n\n- 使用STTN算法\n\n```python\nMODE = InpaintMode.STTN  # 设置为STTN算法\n# 相邻帧数, 调大会增加显存占用，效果变好\nSTTN_NEIGHBOR_STRIDE = 10\n# 参考帧长度, 调大会增加显存占用，效果变好\nSTTN_REFERENCE_LENGTH = 10\n# 设置STTN算法最大同时处理的帧数量，设置越大速度越慢，但效果越好\n# 要保证STTN_MAX_LOAD_NUM大于STTN_NEIGHBOR_STRIDE和STTN_REFERENCE_LENGTH\nSTTN_MAX_LOAD_NUM = 30\n```\n- 使用LAMA算法\n```python\nMODE = InpaintMode.LAMA  # 设置为STTN算法\nLAMA_SUPER_FAST = False  # 保证效果\n```\n\n> 如果对模型去字幕的效果不满意，可以查看design文件夹里面的训练方法，利用backend/tools/train里面的代码进行训练，然后将训练的模型替换旧模型即可\n\n3. CondaHTTPError\n\n将项目中的.condarc放在用户目录下(C:/Users/<你的用户名>)，如果用户目录已经存在该文件则覆盖\n\n解决方案：https://zhuanlan.zhihu.com/p/260034241\n\n4. 7z文件解压错误\n\n解决方案：升级7-zip解压程序到最新版本\n\n5. 4090使用cuda 11.7跑不起来\n\n解决方案：改用cuda 11.8\n\n```shell\npip install torch==2.1.0 torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cu118\n```\n\n## 赞助\n<img src=\"https://i.imgur.com/EMCP5Lv.jpeg\" width=\"600\">\n\n| 捐赠者                       | 累计捐赠金额     | 赞助席位 |\n|---------------------------|------------| --- |\n| 坤V                        | 400.00 RMB | 金牌赞助席位 |\n| Jenkit                        | 200.00 RMB | 金牌赞助席位 |\n| 子车松兰                        | 188.00 RMB | 金牌赞助席位 |\n| 落花未逝                        | 100.00 RMB | 金牌赞助席位 |\n| 张音乐                        | 100.00 RMB | 金牌赞助席位 |\n| 麦格                        | 100.00 RMB | 金牌赞助席位 |\n| 无痕                        | 100.00 RMB | 金牌赞助席位 |\n| wr                        | 100.00 RMB | 金牌赞助席位 |\n| 陈                        | 100.00 RMB | 金牌赞助席位 |\n| TalkLuv                   | 50.00 RMB  | 银牌赞助席位 |\n| 陈凯                        | 50.00 RMB  | 银牌赞助席位 |\n| Tshuang                   | 20.00 RMB  | 银牌赞助席位 |\n| 很奇异                       | 15.00 RMB  | 银牌赞助席位 |\n| 郭鑫                       | 12.00 RMB  | 银牌赞助席位 |\n| 生活不止眼前的苟且                        | 10.00 RMB  | 铜牌赞助席位 |\n| 何斐                        | 10.00 RMB  | 铜牌赞助席位 |\n| 老猫                        | 8.80 RMB   | 铜牌赞助席位 |\n| 伍六七                      | 7.77 RMB   | 铜牌赞助席位 |\n| 长缨在手                      | 6.00 RMB   | 铜牌赞助席位 |\n| 无忌                      | 6.00 RMB   | 铜牌赞助席位 |\n| Stephen                   | 2.00 RMB   | 铜牌赞助席位 |\n| Leo                       | 1.00 RMB   | 铜牌赞助席位 |\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 8.7080078125,
          "content": "[简体中文](README.md) | English\n\n## Project Introduction\n\n![License](https://img.shields.io/badge/License-Apache%202-red.svg)\n![python version](https://img.shields.io/badge/Python-3.8+-blue.svg)\n![support os](https://img.shields.io/badge/OS-Windows/macOS/Linux-green.svg)\n\nVideo-subtitle-remover (VSR) is an AI-based software that removes hardcoded subtitles from videos. It mainly implements the following functionalities:\n\n- **Lossless resolution**: Removes hardcoded subtitles from videos and generates files without subtitles.\n- Fills in the removed subtitle text area using a powerful AI algorithm model (non-adjacent pixel filling and mosaic removal).\n- Supports custom subtitle positions by only removing subtitles in the defined location (input position).\n- Supports automatic removal of all text throughout the entire video (without inputting a position).\n- Supports multi-selection of images for batch removal of watermark text.\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo.png\" alt=\"demo.png\"/></p>\n\n> Download the .zip package directly, extract, and run it. If it cannot run, follow the tutorial below to try installing the conda environment and running the source code.\n\n**Download Links:**\n\nWindows GPU Version v1.1.0 (GPU):\n\n- Baidu Cloud Disk: <a href=\"https://pan.baidu.com/s/1zR6CjRztmOGBbOkqK8R1Ng?pwd=vsr1\">vsr_windows_gpu_v1.1.0.zip</a> Extraction Code: **vsr1**\n\n- Google Drive: <a href=\"https://drive.google.com/drive/folders/1NRgLNoHHOmdO4GxLhkPbHsYfMOB_3Elr?usp=sharing\">vsr_windows_gpu_v1.1.0.zip</a>\n\n> For use only by users with Nvidia graphics cards (AMD graphics cards are not supported).\n\n## Demonstration\n\n- GUI:\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo2.gif\" alt=\"demo2.gif\"/></p>\n\n- <a href=\"https://b23.tv/guEbl9C\">Click to view demo video👇</a>\n\n<p style=\"text-align:center;\"><a href=\"https://b23.tv/guEbl9C\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo.gif\" alt=\"demo.gif\"/></a></p>\n\n## Source Code Usage Instructions\n\n> **Do not use this project without an Nvidia graphics card**. The minimum requirements are:\n>\n> **GPU**: GTX 1060 or higher graphics card\n> \n> CPU: Supports AVX instruction set\n\n#### 1. Download and install Miniconda\n\n- Windows: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Windows-x86_64.exe\">Miniconda3-py38_4.11.0-Windows-x86_64.exe</a>\n\n- Linux: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Linux-x86_64.sh\">Miniconda3-py38_4.11.0-Linux-x86_64.sh</a>\n\n#### 2. Create and activate a virtual environment\n\n(1) Switch to the source code directory:\n\n```shell\ncd <source_code_directory>\n```\n\n> For example, if your source code is in the `tools` folder on drive D, and the source code folder name is `video-subtitle-remover`, enter `cd D:/tools/video-subtitle-remover-main`.\n\n(2) Create and activate the conda environment:\n\n```shell\nconda create -n videoEnv python=3.8\n```\n\n```shell\nconda activate videoEnv\n```\n\n#### 3. Install dependencies\n\nPlease make sure you have already installed Python 3.8+, use conda to create a project virtual environment and activate the environment (it is recommended to create a virtual environment to run to avoid subsequent problems).\n\n  - Install **CUDA** and **cuDNN**\n\n      <details>\n          <summary>Linux</summary>\n          <h5>(1) Download CUDA 11.7</h5>\n          <pre><code>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run</code></pre>\n          <h5>(2) Install CUDA 11.7</h5>\n          <pre><code>sudo sh cuda_11.7.0_515.43.04_linux.run</code></pre>\n          <p>1. Input accept</p>\n          <img src=\"https://i.328888.xyz/2023/03/31/iwVoeH.png\" width=\"500\" alt=\"\">\n          <p>2. make sure CUDA Toolkit 11.7 is chosen (If you have already installed driver, do not select Driver)</p>\n          <img src=\"https://i.328888.xyz/2023/03/31/iwVThJ.png\" width=\"500\" alt=\"\">\n          <p>3. Add environment variables</p>\n          <p>add the following content in  <strong>~/.bashrc</strong></p>\n          <pre><code># CUDA\n      export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}\n      export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}</code></pre>\n          <p>Make sure it works</p>\n          <pre><code>source ~/.bashrc</code></pre>\n          <h5>(3) Download cuDNN 8.4.1</h5>\n          <p><a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\">cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</a></p>\n          <h5>(4) Install cuDNN 8.4.1</h5>\n          <pre><code> tar -xf cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\n     mv cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive cuda\n     sudo cp ./cuda/include/* /usr/local/cuda-11.7/include/\n     sudo cp ./cuda/lib/* /usr/local/cuda-11.7/lib64/\n     sudo chmod a+r /usr/local/cuda-11.7/lib64/*\n     sudo chmod a+r /usr/local/cuda-11.7/include/*</code></pre>\n      </details>\n\n      <details>\n          <summary>Windows</summary>\n          <h5>(1) Download CUDA 11.7</h5>\n          <a href=\"https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_516.01_windows.exe\">cuda_11.7.0_516.01_windows.exe</a>\n          <h5>(2) Install CUDA 11.7</h5>\n          <h5>(3) Download cuDNN 8.4.0</h5>\n          <p><a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip\">cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip</a></p>\n          <h5>(4) Install cuDNN 8.4.0</h5>\n          <p>\n             unzip \"cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip\", then move all files in \"bin, include, lib\" in cuda \n      directory to C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\\\n          </p>\n      </details>\n\n\n- Install GPU version of Paddlepaddle:\n  - windows:\n\n      ```shell \n      python -m pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html\n      ```\n\n  - Linux:\n\n      ```shell\n      python -m pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html\n      ```\n\n- Install GPU version of Pytorch:\n\n  ```shell \n  conda install pytorch==2.1.0 torchvision==0.16.0 pytorch-cuda=11.8 -c pytorch -c nvidia\n  ```\n  or use\n  \n  ```shell \n  pip install torch==2.1.0 torchvision==0.16.0 --index-url https://download.pytorch.org/whl/cu118\n  ```\n\n- Install other dependencies:\n\n  ```shell\n  pip install -r requirements.txt\n  ```\n\n\n#### 4. Run the program\n\n- Run the graphical interface\n\n```shell\npython gui.py\n```\n\n- Run the command line version (CLI)\n\n```shell\npython ./backend/main.py\n```\n\n## Common Issues\n\n1. How to deal with slow removal speed\n\nYou can greatly increase the removal speed by modifying the parameters in backend/config.py:\n\n```python\nMODE = InpaintMode.STTN  # Set to STTN algorithm\nSTTN_SKIP_DETECTION = True # Skip subtitle detection\n```\n\n2. What to do if the video removal results are not satisfactory\n\nModify the values in backend/config.py and try different removal algorithms. Here is an introduction to the algorithms:\n\n> - **InpaintMode.STTN** algorithm: Good for live-action videos and fast in speed, capable of skipping subtitle detection\n> - **InpaintMode.LAMA** algorithm: Best for images and effective for animated videos, moderate speed, unable to skip subtitle detection\n> - **InpaintMode.PROPAINTER** algorithm: Consumes a significant amount of VRAM, slower in speed, works better for videos with very intense movement\n\n- Using the STTN algorithm\n\n```python\nMODE = InpaintMode.STTN  # Set to STTN algorithm\n# Number of neighboring frames, increasing this will increase memory usage and improve the result\nSTTN_NEIGHBOR_STRIDE = 10\n# Length of reference frames, increasing this will increase memory usage and improve the result\nSTTN_REFERENCE_LENGTH = 10\n# Set the maximum number of frames processed simultaneously by the STTN algorithm, a larger value leads to slower processing but better results\n# Ensure that STTN_MAX_LOAD_NUM is greater than STTN_NEIGHBOR_STRIDE and STTN_REFERENCE_LENGTH\nSTTN_MAX_LOAD_NUM = 30\n```\n- Using the LAMA algorithm\n\n```python\nMODE = InpaintMode.LAMA  # Set to LAMA algorithm\nLAMA_SUPER_FAST = False  # Ensure quality\n```\n\n\n3. CondaHTTPError\n\nPlace the .condarc file from the project in the user directory (C:/Users/<your_username>). If the file already exists in the user directory, overwrite it.\n\nSolution: https://zhuanlan.zhihu.com/p/260034241\n\n4. 7z file extraction error\n\nSolution: Upgrade the 7-zip extraction program to the latest version.\n\n```shell\npip install torch==2.1.0 torchvision==0.16.0 --index-url https://download.pytorch.org/whl/cu118\n```\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "design",
          "type": "tree",
          "content": null
        },
        {
          "name": "gui.py",
          "type": "blob",
          "size": 18.978515625,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\n@Author  : Fang Yao\n@Time    : 2023/4/1 6:07 下午\n@FileName: gui.py\n@desc: 字幕去除器图形化界面\n\"\"\"\nimport os\nimport configparser\nimport PySimpleGUI as sg\nimport cv2\nimport sys\nfrom threading import Thread\nimport multiprocessing\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nimport backend.main\nfrom backend.tools.common_tools import is_image_file\n\n\nclass SubtitleRemoverGUI:\n\n    def __init__(self):\n        # 初次运行检查运行环境是否正常\n        from paddle import utils\n        utils.run_check()\n        self.font = 'Arial 10'\n        self.theme = 'LightBrown12'\n        sg.theme(self.theme)\n        self.icon = os.path.join(os.path.dirname(__file__), 'design', 'vsr.ico')\n        self.screen_width, self.screen_height = sg.Window.get_screen_size()\n        self.subtitle_config_file = os.path.join(os.path.dirname(__file__), 'subtitle.ini')\n        print(self.screen_width, self.screen_height)\n        # 设置视频预览区域大小\n        self.video_preview_width = 960\n        self.video_preview_height = self.video_preview_width * 9 // 16\n        # 默认组件大小\n        self.horizontal_slider_size = (120, 20)\n        self.output_size = (100, 10)\n        self.progressbar_size = (60, 20)\n        # 分辨率低于1080\n        if self.screen_width // 2 < 960:\n            self.video_preview_width = 640\n            self.video_preview_height = self.video_preview_width * 9 // 16\n            self.horizontal_slider_size = (60, 20)\n            self.output_size = (58, 10)\n            self.progressbar_size = (28, 20)\n        # 字幕提取器布局\n        self.layout = None\n        # 字幕提取其窗口\n        self.window = None\n        # 视频路径\n        self.video_path = None\n        # 视频cap\n        self.video_cap = None\n        # 视频的帧率\n        self.fps = None\n        # 视频的帧数\n        self.frame_count = None\n        # 视频的宽\n        self.frame_width = None\n        # 视频的高\n        self.frame_height = None\n        # 设置字幕区域高宽\n        self.xmin = None\n        self.xmax = None\n        self.ymin = None\n        self.ymax = None\n        # 字幕提取器\n        self.sr = None\n\n    def run(self):\n        # 创建布局\n        self._create_layout()\n        # 创建窗口\n        self.window = sg.Window(title='Video Subtitle Remover', layout=self.layout,\n                                icon=self.icon)\n        while True:\n            # 循环读取事件\n            event, values = self.window.read(timeout=10)\n            # 处理【打开】事件\n            self._file_event_handler(event, values)\n            # 处理【滑动】事件\n            self._slide_event_handler(event, values)\n            # 处理【运行】事件\n            self._run_event_handler(event, values)\n            # 如果关闭软件，退出\n            if event == sg.WIN_CLOSED:\n                break\n            # 更新进度条\n            if self.sr is not None:\n                self.window['-PROG-'].update(self.sr.progress_total)\n                if self.sr.preview_frame is not None:\n                    self.window['-DISPLAY-'].update(data=cv2.imencode('.png', self._img_resize(self.sr.preview_frame))[1].tobytes())\n                if self.sr.isFinished:\n                    # 1) 打开修改字幕滑块区域按钮\n                    self.window['-Y-SLIDER-'].update(disabled=False)\n                    self.window['-X-SLIDER-'].update(disabled=False)\n                    self.window['-Y-SLIDER-H-'].update(disabled=False)\n                    self.window['-X-SLIDER-W-'].update(disabled=False)\n                    # 2) 打开【运行】、【打开】和【识别语言】按钮\n                    self.window['-RUN-'].update(disabled=False)\n                    self.window['-FILE-'].update(disabled=False)\n                    self.window['-FILE_BTN-'].update(disabled=False)\n                    self.sr = None\n                if len(self.video_paths) >= 1:\n                    # 1) 关闭修改字幕滑块区域按钮\n                    self.window['-Y-SLIDER-'].update(disabled=True)\n                    self.window['-X-SLIDER-'].update(disabled=True)\n                    self.window['-Y-SLIDER-H-'].update(disabled=True)\n                    self.window['-X-SLIDER-W-'].update(disabled=True)\n                    # 2) 关闭【运行】、【打开】和【识别语言】按钮\n                    self.window['-RUN-'].update(disabled=True)\n                    self.window['-FILE-'].update(disabled=True)\n                    self.window['-FILE_BTN-'].update(disabled=True)\n\n    def _create_layout(self):\n        \"\"\"\n        创建字幕提取器布局\n        \"\"\"\n        garbage = os.path.join(os.path.dirname(__file__), 'output')\n        if os.path.exists(garbage):\n            import shutil\n            shutil.rmtree(garbage, True)\n        self.layout = [\n            # 显示视频预览\n            [sg.Image(size=(self.video_preview_width, self.video_preview_height), background_color='black',\n                      key='-DISPLAY-')],\n            # 打开按钮 + 快进快退条\n            [sg.Input(key='-FILE-', visible=False, enable_events=True),\n             sg.FilesBrowse(button_text='Open', file_types=((\n                            'All Files', '*.*'), ('mp4', '*.mp4'),\n                            ('flv', '*.flv'),\n                            ('wmv', '*.wmv'),\n                            ('avi', '*.avi')),\n                            key='-FILE_BTN-', size=(10, 1), font=self.font),\n             sg.Slider(size=self.horizontal_slider_size, range=(1, 1), key='-SLIDER-', orientation='h',\n                       enable_events=True, font=self.font,\n                       disable_number_display=True),\n             ],\n            # 输出区域\n            [sg.Output(size=self.output_size, font=self.font),\n             sg.Frame(title='Vertical', font=self.font, key='-FRAME1-',\n             layout=[[\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           enable_events=True, font=self.font,\n                           pad=((10, 10), (20, 20)),\n                           default_value=0, key='-Y-SLIDER-'),\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           enable_events=True, font=self.font,\n                           pad=((10, 10), (20, 20)),\n                           default_value=0, key='-Y-SLIDER-H-'),\n             ]], pad=((15, 5), (0, 0))),\n             sg.Frame(title='Horizontal', font=self.font, key='-FRAME2-',\n             layout=[[\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           pad=((10, 10), (20, 20)),\n                           enable_events=True, font=self.font,\n                           default_value=0, key='-X-SLIDER-'),\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           pad=((10, 10), (20, 20)),\n                           enable_events=True, font=self.font,\n                           default_value=0, key='-X-SLIDER-W-'),\n             ]], pad=((15, 5), (0, 0)))\n             ],\n\n            # 运行按钮 + 进度条\n            [sg.Button(button_text='Run', key='-RUN-',\n                       font=self.font, size=(20, 1)),\n             sg.ProgressBar(100, orientation='h', size=self.progressbar_size, key='-PROG-', auto_size_text=True)\n             ],\n        ]\n\n    def _file_event_handler(self, event, values):\n        \"\"\"\n        当点击打开按钮时：\n        1）打开视频文件，将画布显示视频帧\n        2）获取视频信息，初始化进度条滑块范围\n        \"\"\"\n        if event == '-FILE-':\n            self.video_paths = values['-FILE-'].split(';')\n            self.video_path = self.video_paths[0]\n            if self.video_path != '':\n                self.video_cap = cv2.VideoCapture(self.video_path)\n            if self.video_cap is None:\n                return\n            if self.video_cap.isOpened():\n                ret, frame = self.video_cap.read()\n                if ret:\n                    for video in self.video_paths:\n                        print(f\"Open Video Success：{video}\")\n                    # 获取视频的帧数\n                    self.frame_count = self.video_cap.get(cv2.CAP_PROP_FRAME_COUNT)\n                    # 获取视频的高度\n                    self.frame_height = self.video_cap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n                    # 获取视频的宽度\n                    self.frame_width = self.video_cap.get(cv2.CAP_PROP_FRAME_WIDTH)\n                    # 获取视频的帧率\n                    self.fps = self.video_cap.get(cv2.CAP_PROP_FPS)\n                    # 调整视频帧大小，使播放器能够显示\n                    resized_frame = self._img_resize(frame)\n                    # resized_frame = cv2.resize(src=frame, dsize=(self.video_preview_width, self.video_preview_height))\n                    # 显示视频帧\n                    self.window['-DISPLAY-'].update(data=cv2.imencode('.png', resized_frame)[1].tobytes())\n                    # 更新视频进度条滑块range\n                    self.window['-SLIDER-'].update(range=(1, self.frame_count))\n                    self.window['-SLIDER-'].update(1)\n                    # 预设字幕区域位置\n                    y_p, h_p, x_p, w_p = self.parse_subtitle_config()\n                    y = self.frame_height * y_p\n                    h = self.frame_height * h_p\n                    x = self.frame_width * x_p\n                    w = self.frame_width * w_p\n                    # 更新视频字幕位置滑块range\n                    # 更新Y-SLIDER范围\n                    self.window['-Y-SLIDER-'].update(range=(0, self.frame_height), disabled=False)\n                    # 更新Y-SLIDER默认值\n                    self.window['-Y-SLIDER-'].update(y)\n                    # 更新X-SLIDER范围\n                    self.window['-X-SLIDER-'].update(range=(0, self.frame_width), disabled=False)\n                    # 更新X-SLIDER默认值\n                    self.window['-X-SLIDER-'].update(x)\n                    # 更新Y-SLIDER-H范围\n                    self.window['-Y-SLIDER-H-'].update(range=(0, self.frame_height - y))\n                    # 更新Y-SLIDER-H默认值\n                    self.window['-Y-SLIDER-H-'].update(h)\n                    # 更新X-SLIDER-W范围\n                    self.window['-X-SLIDER-W-'].update(range=(0, self.frame_width - x))\n                    # 更新X-SLIDER-W默认值\n                    self.window['-X-SLIDER-W-'].update(w)\n                    self._update_preview(frame, (y, h, x, w))\n\n    def __disable_button(self):\n        # 1) 禁止修改字幕滑块区域\n        self.window['-Y-SLIDER-'].update(disabled=True)\n        self.window['-X-SLIDER-'].update(disabled=True)\n        self.window['-Y-SLIDER-H-'].update(disabled=True)\n        self.window['-X-SLIDER-W-'].update(disabled=True)\n        # 2) 禁止再次点击【运行】、【打开】和【识别语言】按钮\n        self.window['-RUN-'].update(disabled=True)\n        self.window['-FILE-'].update(disabled=True)\n        self.window['-FILE_BTN-'].update(disabled=True)\n\n    def _run_event_handler(self, event, values):\n        \"\"\"\n        当点击运行按钮时：\n        1) 禁止修改字幕滑块区域\n        2) 禁止再次点击【运行】和【打开】按钮\n        3) 设定字幕区域位置\n        \"\"\"\n        if event == '-RUN-':\n            if self.video_cap is None:\n                print('Please Open Video First')\n            else:\n                # 禁用按钮\n                self.__disable_button()\n                # 3) 设定字幕区域位置\n                self.xmin = int(values['-X-SLIDER-'])\n                self.xmax = int(values['-X-SLIDER-'] + values['-X-SLIDER-W-'])\n                self.ymin = int(values['-Y-SLIDER-'])\n                self.ymax = int(values['-Y-SLIDER-'] + values['-Y-SLIDER-H-'])\n                if self.ymax > self.frame_height:\n                    self.ymax = self.frame_height\n                if self.xmax > self.frame_width:\n                    self.xmax = self.frame_width\n                if len(self.video_paths) <= 1:\n                    subtitle_area = (self.ymin, self.ymax, self.xmin, self.xmax)\n                else:\n                    print(f\"{'Processing multiple videos or images'}\")\n                    # 先判断每个视频的分辨率是否一致，一致的话设置相同的字幕区域，否则设置为None\n                    global_size = None\n                    for temp_video_path in self.video_paths:\n                        temp_cap = cv2.VideoCapture(temp_video_path)\n                        if global_size is None:\n                            global_size = (int(temp_cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(temp_cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n                        else:\n                            temp_size = (int(temp_cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(temp_cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n                            if temp_size != global_size:\n                                print('not all video/images in same size, processing in full screen')\n                                subtitle_area = None\n                    else:\n                        subtitle_area = (self.ymin, self.ymax, self.xmin, self.xmax)\n                y_p = self.ymin / self.frame_height\n                h_p = (self.ymax - self.ymin) / self.frame_height\n                x_p = self.xmin / self.frame_width\n                w_p = (self.xmax - self.xmin) / self.frame_width\n                self.set_subtitle_config(y_p, h_p, x_p, w_p)\n\n                def task():\n                    while self.video_paths:\n                        video_path = self.video_paths.pop()\n                        if subtitle_area is not None:\n                            print(f\"{'SubtitleArea'}：({self.ymin},{self.ymax},{self.xmin},{self.xmax})\")\n                        self.sr = backend.main.SubtitleRemover(video_path, subtitle_area, True)\n                        self.__disable_button()\n                        self.sr.run()\n                Thread(target=task, daemon=True).start()\n                self.video_cap.release()\n                self.video_cap = None\n\n    def _slide_event_handler(self, event, values):\n        \"\"\"\n        当滑动视频进度条/滑动字幕选择区域滑块时：\n        1) 判断视频是否存在，如果存在则显示对应的视频帧\n        2) 绘制rectangle\n        \"\"\"\n        if event == '-SLIDER-' or event == '-Y-SLIDER-' or event == '-Y-SLIDER-H-' or event == '-X-SLIDER-' or event \\\n                == '-X-SLIDER-W-':\n            # 判断是否时单张图片\n            if is_image_file(self.video_path):\n                img = cv2.imread(self.video_path)\n                self.window['-Y-SLIDER-H-'].update(range=(0, self.frame_height - values['-Y-SLIDER-']))\n                self.window['-X-SLIDER-W-'].update(range=(0, self.frame_width - values['-X-SLIDER-']))\n                # 画字幕框\n                y = int(values['-Y-SLIDER-'])\n                h = int(values['-Y-SLIDER-H-'])\n                x = int(values['-X-SLIDER-'])\n                w = int(values['-X-SLIDER-W-'])\n                self._update_preview(img, (y, h, x, w))\n            elif self.video_cap is not None and self.video_cap.isOpened():\n                frame_no = int(values['-SLIDER-'])\n                self.video_cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)\n                ret, frame = self.video_cap.read()\n                if ret:\n                    self.window['-Y-SLIDER-H-'].update(range=(0, self.frame_height-values['-Y-SLIDER-']))\n                    self.window['-X-SLIDER-W-'].update(range=(0, self.frame_width-values['-X-SLIDER-']))\n                    # 画字幕框\n                    y = int(values['-Y-SLIDER-'])\n                    h = int(values['-Y-SLIDER-H-'])\n                    x = int(values['-X-SLIDER-'])\n                    w = int(values['-X-SLIDER-W-'])\n                    self._update_preview(frame, (y, h, x, w))\n\n    def _update_preview(self, frame, y_h_x_w):\n        y, h, x, w = y_h_x_w\n        # 画字幕框\n        draw = cv2.rectangle(img=frame, pt1=(int(x), int(y)), pt2=(int(x) + int(w), int(y) + int(h)),\n                             color=(0, 255, 0), thickness=3)\n        # 调整视频帧大小，使播放器能够显示\n        resized_frame = self._img_resize(draw)\n        # 显示视频帧\n        self.window['-DISPLAY-'].update(data=cv2.imencode('.png', resized_frame)[1].tobytes())\n\n    def _img_resize(self, image):\n        top, bottom, left, right = (0, 0, 0, 0)\n        height, width = image.shape[0], image.shape[1]\n        # 对长短不想等的图片，找到最长的一边\n        longest_edge = height\n        # 计算短边需要增加多少像素宽度使其与长边等长\n        if width < longest_edge:\n            dw = longest_edge - width\n            left = dw // 2\n            right = dw - left\n        else:\n            pass\n        # 给图像增加边界\n        constant = cv2.copyMakeBorder(image, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[0, 0, 0])\n        return cv2.resize(constant, (self.video_preview_width, self.video_preview_height))\n\n    def set_subtitle_config(self, y, h, x, w):\n        # 写入配置文件\n        with open(self.subtitle_config_file, mode='w', encoding='utf-8') as f:\n            f.write('[AREA]\\n')\n            f.write(f'Y = {y}\\n')\n            f.write(f'H = {h}\\n')\n            f.write(f'X = {x}\\n')\n            f.write(f'W = {w}\\n')\n\n    def parse_subtitle_config(self):\n        y_p, h_p, x_p, w_p = .78, .21, .05, .9\n        # 如果配置文件不存在，则写入配置文件\n        if not os.path.exists(self.subtitle_config_file):\n            self.set_subtitle_config(y_p, h_p, x_p, w_p)\n            return y_p, h_p, x_p, w_p\n        else:\n            try:\n                config = configparser.ConfigParser()\n                config.read(self.subtitle_config_file, encoding='utf-8')\n                conf_y_p, conf_h_p, conf_x_p, conf_w_p = float(config['AREA']['Y']), float(config['AREA']['H']), float(config['AREA']['X']), float(config['AREA']['W'])\n                return conf_y_p, conf_h_p, conf_x_p, conf_w_p\n            except Exception:\n                self.set_subtitle_config(y_p, h_p, x_p, w_p)\n                return y_p, h_p, x_p, w_p\n\n\nif __name__ == '__main__':\n    try:\n        multiprocessing.set_start_method(\"spawn\")\n        # 运行图形化界面\n        subtitleRemoverGUI = SubtitleRemoverGUI()\n        subtitleRemoverGUI.run()\n    except Exception as e:\n        print(f'[{type(e)}] {e}')\n        import traceback\n        traceback.print_exc()\n        msg = traceback.format_exc()\n        err_log_path = os.path.join(os.path.expanduser('~'), 'VSR-Error-Message.log')\n        with open(err_log_path, 'w', encoding='utf-8') as f:\n            f.writelines(msg)\n        import platform\n        if platform.system() == 'Windows':\n            os.system('pause')\n        else:\n            input()\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3515625,
          "content": "albumentations==0.5.2\nfilesplit==3.0.2\nopencv-python==4.8.1.78\nscikit-image==0.17.2\nimgaug==0.4.0\nkornia==0.5.0\npyclipper==1.3.0.post5\nlmdb==1.4.1\nPyYAML==6.0.1\nomegaconf==2.1.2\ntqdm==4.66.1\nPySimpleGUI==4.70.1\neasydict==1.9\nscikit-learn==0.24.2\npandas==2.0.3\nwebdataset==0.2.57\npytorch-lightning==1.2.9\nnumpy==1.23.1\nprotobuf==3.20.0\nav==11.0.0\neinops==0.7.0\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}