{
  "metadata": {
    "timestamp": 1736560668709,
    "page": 312,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "srbhr/Resume-Matcher",
      "stars": 7367,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9619140625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n.DS_store\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n#IntelliJ Idea Files\n.idea\n.idea/*\n\n# Vscode's Files\n.vscode\n.vscode/*\n\nscripts/similarity/config.yml\n\n# Personal Data / Secrets\n*.local.yml\n\n# Processed or local files\n/Data/Processed/*\n*.local.pdf\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.43359375,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: double-quote-string-fixer\n    -   id: name-tests-test\n    -   id: requirements-txt-fixer\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.5.0\n    hooks:\n    -   id: setup-cfg-fmt\n-   repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n    -   id: black\n-   repo: https://github.com/pre-commit/mirrors-isort\n    rev: v5.9.2\n    hooks:\n    -   id: isort\n        args: [\"--profile\", \"black\"]\n-   repo: https://github.com/PyCQA/flake8\n    rev: 7.0.0\n    hooks:\n    -   id: flake8\n-   repo: https://github.com/PyCQA/docformatter\n    rev: v1.7.1\n    hooks:\n    - id: docformatter\n      additional_dependencies: [tomli]\n      args: [--in-place, --config, ./pyproject.toml]\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.8.0\n    hooks:\n    -   id: mypy\n        exclude: ^(docs/|example-plugin/)\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.15.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/pycqa/pydocstyle\n    rev: 6.3.0\n    hooks:\n    - id: pydocstyle\n-   repo: https://github.com/myint/eradicate\n    rev: '2.2.0'\n    hooks:\n    - id: eradicate\n      args: []\n-   repo: https://github.com/hhatto/autopep8\n    rev: v2.1.0\n    hooks:\n    -   id: autopep8\n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3759765625,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[saurabh@resumematcher.fyi](mailto:saurabh@resumematcher.fyi).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.4404296875,
          "content": "# Contributing to Resume-Matcher on GitHub\n\nThank you for taking the time to contribute to [Resume-Matcher](https://github.com/srbhr/Resume-Matcher).\n\nWe want you to have a great experience making your first contribution.\n\nThis contribution could be anything from a small fix to a typo in our\ndocumentation or a full feature.\n\nTell us what you enjoy working on and we would love to help!\n\nIf you would like to contribute, but don't know where to start, check the\nissues that are labeled\n`good first issue`\nor\n`help wanted`.\n\nContributions make the open-source community a fantastic place to learn, inspire, and create. Any contributions you make are greatly appreciated.\n\nThe development branch is `main`. This is the branch where all pull requests should be made.\n\n## Reporting Bugs\n\nPlease try to create bug reports that are:\n\n- Reproducible. Include steps to reproduce the problem.\n- Specific. Include as much detail as possible: which version, what environment, etc.\n- Unique. Do not duplicate existing opened issues.\n- Scoped to a Single Bug. One bug per report.\n\n## Testing\n\nPlease test your changes before submitting the PR.\n\n## Good First Issues\n\nWe have a list of `help wanted` and `good first issue` that contains small features and bugs with a relatively limited scope. Nevertheless, this is a great place to get started, gain experience, and get familiar with our contribution process.\n\n## Development\n\nFollow these steps to set up the environment and run the application.\n\n## How to install\n\n1. Fork the repository [here](https://github.com/srbhr/Resume-Matcher/fork).\n\n2. Clone the forked repository.\n\n   ```bash\n   git clone https://github.com/<YOUR-USERNAME>/Resume-Matcher.git\n   cd Resume-Matcher\n   ```\n\n3. Create a Python Virtual Environment:\n\n   - Using [virtualenv](https://learnpython.com/blog/how-to-use-virtualenv-python/):\n\n     _Note_: Check how to install virtualenv on your system here [link](https://learnpython.com/blog/how-to-use-virtualenv-python/).\n\n     ```bash\n     virtualenv env\n     ```\n\n   **OR**\n\n   - Create a Python Virtual Environment:\n\n     ```bash\n     python -m venv env\n     ```\n\n4. Activate the Virtual Environment.\n\n   - On Windows.\n\n     ```bash\n     env\\Scripts\\activate\n     ```\n\n   - On macOS and Linux.\n\n     ```bash\n     source env/bin/activate\n     ```\n\n    **OPTIONAL (For pyenv users)**\n\n   Run the application with pyenv (Refer to this [article](https://realpython.com/intro-to-pyenv/#installing-pyenv))\n\n   - Build dependencies (on ubuntu)\n      ```\n      sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python openssl\n      ```\n      ```\n\n      sudo apt-get install build-essential zlib1g-dev libffi-dev libssl-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev libncurses-dev\n\n      sudo apt-get install python-tk python3-tk tk-dev\n\n      sudo apt-get install build-essential zlib1g-dev libffi-dev libssl-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev\n\n      ```\n\n        - pyenv installer\n     ```\n        curl https://pyenv.run | bash\n     ```\n   - Install desired python version\n     ```\n       pyenv install -v 3.11.0\n     ```\n\n   - pyenv with virtual enviroment\n     ```\n        pyenv virtualenv 3.11.0 venv\n     ```\n\n   - Activate virtualenv with pyenv\n     ```\n        pyenv activate venv\n     ```\n\n     5. Install Dependencies:\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n6. Prepare Data:\n\n   - Resumes: Place your resumes in PDF format in the `Data/Resumes` folder. Remove any existing contents in this folder.\n   - Job Descriptions: Place your job descriptions in PDF format in the `Data/JobDescription` folder. Remove any existing contents in this folder.\n\n7. Parse Resumes to JSON:\n\n   ```python\n   python run_first.py\n   ```\n\n   8. Run the Application:\n\n   ```python\n   streamlit run streamlit_app.py\n   ```\n\n**Note**: For local versions, you do not need to run \"streamlit_second.py\" as it is specifically for deploying to Streamlit servers.\n\n**Additional Note**: The Vector Similarity part is precomputed to optimize performance due to the resource-intensive nature of sentence encoders that require significant GPU and RAM resources. If you are interested in leveraging this feature in a Google Colab environment for free, refer to the upcoming blog (link to be provided) for further guidance.\n\n<br/>\n\n### Docker\n\n1. Build the image and start application\n\n   ```bash\n       docker-compose up\n   ```\n\n2. Open `localhost:80` on your browser\n\n<br/>\n\n### Running the Web Application\n\nThe full stack Next.js (React and FastAPI) web application allows users to interact with the Resume Matcher tool interactively via a web browser.\n\nTo run the full stack web application (frontend client and backend api servers), follow the instructions over on the [webapp README](/webapp/README.md) file.\n\n## Code Formatting\n\nThis project uses [Black](https://black.readthedocs.io/en/stable/) for code formatting. We believe this helps to keep the code base consistent and reduces the cognitive load when reading code.\n\nBefore submitting your pull request, please make sure your changes are in accordance with the Black style guide. You can format your code by running the following command in your terminal:\n\n```sh\nblack .\n```\n\n## Pre-commit Hooks\n\nWe also use [pre-commit](https://pre-commit.com/) to automatically check for common issues before commits are submitted. This includes checks for code formatting with Black.\n\nIf you haven't already, please install the pre-commit hooks by running the following command in your terminal:\n\n```sh\npip install pre-commit\npre-commit install\n```\n\nNow, the pre-commit hooks will automatically run every time you commit your changes. If any of the hooks fail, the commit will be aborted.\n\n## Join Us, Contribute!\n\nPull Requests & Issues are not just welcomed, they're celebrated! Let's create together.\n\n🎉 Join our lively [Discord](https://dsc.gg/resume-matcher) community and discuss away!\n\n💡 Spot a problem? Create an issue!\n\n👩‍💻 Dive in and help resolve existing [issues](https://github.com/srbhr/Resume-Matcher/issues).\n\n🔔 Share your thoughts in our [Discussions & Announcements](https://github.com/srbhr/Resume-Matcher/discussions).\n\n🚀 Explore and improve our [Landing Page](https://github.com/srbhr/website-for-resume-matcher). PRs always welcome!\n\n📚 Contribute to the [Resume Matcher Docs](https://github.com/srbhr/Resume-Matcher-Docs) and help people get started with using the software.\n"
        },
        {
          "name": "Data",
          "type": "tree",
          "content": null
        },
        {
          "name": "Demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.193359375,
          "content": "<div align=\"center\">\n\n[![Resume Matcher](Assets/img/Resume_Matcher_GitHub_Banner.png)](https://www.resumematcher.fyi)\n\n# Resume Matcher\n\n[𝙹𝚘𝚒𝚗 𝙳𝚒𝚜𝚌𝚘𝚛𝚍](https://dsc.gg/resume-matcher) ✦ [𝚆𝚎𝚋𝚜𝚒𝚝𝚎](https://resumematcher.fyi) ✦ [𝙳𝚎𝚖𝚘](https://resume-matcher.streamlit.app/) ✦ [𝙷𝚘𝚠 𝚝𝚘 𝙸𝚗𝚜𝚝𝚊𝚕𝚕 ](#how-to-install) ✦ [𝙲𝚘𝚗𝚝𝚛𝚒𝚋𝚞𝚝𝚎](#join-us-contribute) ✦ [𝙳𝚘𝚗𝚊𝚝𝚎](#please-support-the-development-by-donating) ✦ [𝚃𝚠𝚒𝚝𝚝𝚎𝚛](https://twitter.com/_srbhr_)\n\n---\n\n\n### Resume Matcher is an AI Based Free & Open Source Tool. To tailor your resume to a job description. Find the matching keywords, improve the readability  and gain deep insights into your resume.\n\n</div>\n\n<br>\n\n<div align=\"center\">\n\n![Stars](https://img.shields.io/github/stars/srbhr/Resume-Matcher?style=flat-square&color=EA1179)\n![Apache 2.0](https://img.shields.io/github/license/srbhr/Resume-Matcher?style=flat-square&color=525FE1) ![Issues](https://img.shields.io/github/issues/srbhr/Resume-Matcher?style=flat-square&color=F86F03) ![Forks](https://img.shields.io/github/forks/srbhr/Resume-Matcher?style=flat-square&color=0079FF) ![Python](https://img.shields.io/badge/Python-3.10+-FFD43B?style=flat-square&logo=python&logoColor=blue)\n\n[![Discord](https://custom-icon-badges.demolab.com/badge/Discord-blue?style=flat-square&logo=discord&color=F0FF42&logoColor=293462)](https://discord.gg/t3Y9HEuV34) [![Twitter](https://img.shields.io/badge/@__srbhr__-000000?style=flat-square&logo=x&logoColor=white)](https://twitter.com/_srbhr_)\n[![Resume Matcher](https://custom-icon-badges.demolab.com/badge/www.resumematcher.fyi-gold?style=flat-square&logo=globe&logoColor=black)](https://www.resumematcher.fyi)\n\nUpvote us on [ProductHunt 🚀](https://www.producthunt.com/products/resume-matcher).\n\n<a href=\"https://www.producthunt.com/posts/resume-matcher?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-resume&#0045;matcher\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=401261&theme=light\" alt=\"Resume&#0032;Matcher - Free&#0032;and&#0032;Open&#0045;Source&#0032;ATS&#0032;Tool&#0032;to&#0032;Match&#0032;Resumes&#0032;to&#0032;Job&#0032;Desc&#0046; | Product Hunt\" style=\"width: 180px; height: 50px;\" width=\"200\" height=\"54\"/></a>\n\n</div>\n\n<div align=\"center\">\n\n**Don't let your resume be a roadblock from getting your next job. Use Resume Matcher!**\n\n![Resume_Matcher_streamlit_demo](Assets/img/Resume_Matcher_Gif.gif)\n\n## How does it work?\n\n</div>\n\nThe Resume Matcher takes your resume and job descriptions as input, parses them using Python, and mimics the functionalities of an ATS, providing you with insights and suggestions to make your resume ATS-friendly.\n\nThe process is as follows:\n\n1. **Parsing**: The system uses Python to parse both your resume and the provided job description, just like an ATS would.\n\n2. **Keyword Extraction**: The tool uses advanced machine learning algorithms to extract the most relevant keywords from the job description. These keywords represent the skills, qualifications, and experiences the employer seeks.\n\n3. **Key Terms Extraction**: Beyond keyword extraction, the tool uses textacy to identify the main key terms or themes in the job description. This step helps in understanding the broader context of what the resume is about.\n\n4. **Vector Similarity Using FastEmbed**: The tool uses [FastEmbed](https://github.com/qdrant/fastembed), a highly efficient embedding system, to measure how closely your resume matches the job description. The more similar they are, the higher the likelihood that your resume will pass the ATS screening.\n\n<br/>\n\n<div align=\"center\">\n\n## How to install\n\n</div>\n\nFollow these steps to set up the environment and run the application.\n\n1. Fork the repository [here](https://github.com/srbhr/Resume-Matcher/fork).\n\n2. Clone the forked repository.\n\n   ```bash\n   git clone https://github.com/<YOUR-USERNAME>/Resume-Matcher.git\n   cd Resume-Matcher\n   ```\n\n3. Create a Python Virtual Environment:\n\n   - Using [virtualenv](https://learnpython.com/blog/how-to-use-virtualenv-python/):\n\n     _Note_: Check how to install virtualenv on your system here [link](https://learnpython.com/blog/how-to-use-virtualenv-python/).\n\n     ```bash\n     virtualenv env\n     ```\n\n   **OR**\n\n   - Create a Python Virtual Environment:\n\n     ```bash\n     python -m venv env\n     ```\n\n4. Activate the Virtual Environment.\n\n   - On Windows.\n\n     ```bash\n     env\\Scripts\\activate\n     ```\n\n   - On macOS and Linux.\n\n     ```bash\n     source env/bin/activate\n     ```\n\n    **OPTIONAL (For pyenv users)**\n\n   Run the application with pyenv (Refer this [article](https://realpython.com/intro-to-pyenv/#installing-pyenv))\n\n   - Build dependencies (on ubuntu)\n      ```\n      sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python openssl\n      ```\n      ```\n\n      sudo apt-get install build-essential zlib1g-dev libffi-dev libssl-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev libncurses-dev\n\n      sudo apt-get install python-tk python3-tk tk-dev\n\n      sudo apt-get install build-essential zlib1g-dev libffi-dev libssl-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev\n\n      ```\n   - pyenv installer\n     ```\n        curl https://pyenv.run | bash\n     ```\n   - Install desired python version\n     ```\n       pyenv install -v 3.11.0\n     ```\n\n   - pyenv with virtual enviroment\n     ```\n        pyenv virtualenv 3.11.0 venv\n     ```\n\n   - Activate virtualenv with pyenv\n     ```\n        pyenv activate venv\n     ```\n\n5. Install Dependencies:\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n6. Prepare Data:\n\n   - Resumes: Place your resumes in PDF format in the `Data/Resumes` folder. Remove any existing contents in this folder.\n   - Job Descriptions: Place your job descriptions in PDF format in the `Data/JobDescription` folder. Remove any existing contents in this folder.\n\n7. Parse Resumes to JSON:\n\n   ```python\n   python run_first.py\n   ```\n\n8. Run the Application:\n\n   ```python\n   streamlit run streamlit_app.py\n   ```\n\n**Note**: For local versions, you do not need to run \"streamlit_second.py\" as it is specifically for deploying to Streamlit servers.\n\n**Additional Note**: The Vector Similarity part is precomputed to optimize performance due to the resource-intensive nature of sentence encoders that require significant GPU and RAM resources. If you are interested in leveraging this feature in a Google Colab environment for free, refer to the upcoming blog (link to be provided) for further guidance.\n\n<br/>\n\n### Docker\n\n1. Build the image and start application\n\n   ```bash\n       docker-compose up\n   ```\n\n2. Open `localhost:80` on your browser\n\n<br/>\n\n### Running the Web Application\n\nThe full stack Next.js (React and FastAPI) web application allows users to interact with the Resume Matcher tool interactively via a web browser.\n\n> [!WARNING]\n> The results returned from through the web app are currently entirely mocked / faked. This means that the results returned are not real and are just for demonstration purposes. This will be implemented with real data results in a future release.\n\nTo run the full stack web application (frontend client and backend api servers), follow the instructions over on the [webapp README](/webapp/README.md) file.\n\n<br/>\n\n### Google Colab\n1. Create an account in ngrok and get you token\n2. ![img_1.png](img_1.png)\n3. Go to archive/resume_matcher_colab.ipynb and run the notebook.\n4. Enter your ngrok token and run the notebook.\n5. Copy the url and open it in your browser.\n6. ![img_2.png](img_2.png)\n\n## Code Formatting\n\nThis project uses [Black](https://black.readthedocs.io/en/stable/) for code formatting. We believe this helps to keep the code base consistent and reduces the cognitive load when reading code.\n\nBefore submitting your pull request, please make sure your changes are in accordance with the Black style guide. You can format your code by running the following command in your terminal:\n\n```sh\nblack .\n```\n\n## Pre-commit Hooks\n\nWe also use [pre-commit](https://pre-commit.com/) to automatically check for common issues before commits are submitted. This includes checks for code formatting with Black.\n\nIf you haven't already, please install the pre-commit hooks by running the following command in your terminal:\n\n```sh\npip install pre-commit\npre-commit install\n```\n\nNow, the pre-commit hooks will automatically run every time you commit your changes. If any of the hooks fail, the commit will be aborted.\n\n\n## Join Us, Contribute!\n\n\nPull Requests & Issues are not just welcomed, they're celebrated! Let's create together.\n\n🎉 Join our lively [Discord](https://dsc.gg/resume-matcher) community and discuss away!\n\n💡 Spot a problem? Create an issue!\n\n👩‍💻 Dive in and help resolve existing [issues](https://github.com/srbhr/Resume-Matcher/issues).\n\n🔔 Share your thoughts in our [Discussions & Announcements](https://github.com/srbhr/Resume-Matcher/discussions).\n\n🚀 Explore and improve our [Landing Page](https://github.com/srbhr/website-for-resume-matcher). PRs always welcome!\n\n📚 Contribute to the [Resume Matcher Docs](https://github.com/srbhr/Resume-Matcher-Docs) and help people get started with using the software.\n\n#### Tech Stack\n\n![Python](https://img.shields.io/badge/Python-FFD43B?style=flat-square&logo=python&logoColor=blue) ![Tailwind CSS](https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=flat-square&logo=tailwind-css&logoColor=white) ![Next JS](https://img.shields.io/badge/Next-black?style=flat-square&logo=next.js&logoColor=white) ![FastAPI](https://img.shields.io/badge/FastAPI-005571?style=flat-square&logo=fastapi) ![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=flat-square&logo=typescript&logoColor=white) ![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=flat-square&logo=html5&logoColor=white) ![CSS3](https://img.shields.io/badge/CSS3-1572B6?style=flat-square&logo=css3&logoColor=white) ![& More](https://custom-icon-badges.demolab.com/badge/And_More-white?style=flat-square&logo=plus&logoColor=black)\n\n<br/>\n\n<div align=\"center\">\n\n## Please support the development by donating.\n\n[![BuyMeACoffee](https://img.shields.io/badge/Buy%20Me%20a%20Coffee-ffdd00?style=for-the-badge&logo=buy-me-a-coffee&logoColor=black)](https://buymeacoffee.com/srbhr)\n[![Sponsor on GitHub](https://img.shields.io/badge/sponsor-30363D?style=for-the-badge&logo=GitHub-Sponsors&logoColor=#white)](https://github.com/sponsors/srbhr)\n\n</div>\n\n---\n\n### Heads Up! 📝\n\nYour support means the world to us 💙. We're nurturing this project with an open-source community spirit, and we have an ambitious roadmap ahead! Here are some ways you could contribute and make a significant impact:\n\n✨ Transform our Streamlit dashboard into something more robust.\n\n💡 Improve our parsing algorithm, making data more accessible.\n\n🖋 Share your insights and experiences in a blog post to help others.\n\nTake the leap, contribute, and let's grow together! 🚀\n\n---\n\n### Our Contributors ✨\n\n<a href=\"https://github.com/srbhr/Resume-Matcher/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=srbhr/Resume-Matcher\" />\n</a>\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.359375,
          "content": "# Responsible Disclosure\n\n## Reporting a Vulnerability\n\nResume-Matcher strives to stay ahead of security vulnerabilities but would love to get the community's help in making us aware of the ones we miss.\n\nPlease contact a maintainer to report security vulnerabilities and exploits.\n\nWe will acknowledge legitimate reports and address them according to their severity.\n"
        },
        {
          "name": "UI-Mockup",
          "type": "tree",
          "content": null
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "build.dockerfile",
          "type": "blob",
          "size": 0.330078125,
          "content": "FROM python:3.11.0-slim\nWORKDIR /data/Resume-Matcher\nRUN apt-get update\nRUN apt-get install -y build-essential python-dev git\nRUN pip install -U pip setuptools wheel\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nCOPY . .\nEXPOSE 8501\nRUN python run_first.py\nENTRYPOINT [ \"streamlit\", \"run\", \"streamlit_app.py\"]"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1552734375,
          "content": "services:\n  resume-matcher:\n      image : resume-matcher\n      build:\n        context: ./\n        dockerfile : build.dockerfile\n      ports:\n        - 80:8501\n"
        },
        {
          "name": "img.png",
          "type": "blob",
          "size": 62.58203125,
          "content": null
        },
        {
          "name": "img_1.png",
          "type": "blob",
          "size": 91.802734375,
          "content": null
        },
        {
          "name": "img_2.png",
          "type": "blob",
          "size": 36.3359375,
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 2.3818359375,
          "content": "altair==5.0.1\nattrs==23.1.0\nbeautifulsoup4==4.12.2\nblinker==1.6.2\nblis==0.7.9\ncachetools==5.3.1\ncatalogue==2.0.8\ncertifi==2024.7.4\ncharset-normalizer==3.2.0\nclick==8.1.5\nconfection==0.1.0\ncontourpy==1.1.0\ncycler==0.11.0\ncymem==2.0.7\ncytoolz==0.12.1\ndecorator==5.1.1\nen-core-web-md @ https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.6.0/en_core_web_md-3.6.0-py3-none-any.whl#sha256=1618fc62e7aedc2b778caa3ea6e9c8280beac3b83fe7b93316cbb9e8f3abe7c5\nen-core-web-sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.6.0/en_core_web_sm-3.6.0-py3-none-any.whl#sha256=83276fc78a70045627144786b52e1f2728ad5e29e5e43916ec37ea9c26a11212\nFaker==19.1.0\nfavicon==0.7.0\nfloret==0.10.3\nfonttools==4.43.0\ngitdb==4.0.10\nGitPython==3.1.41\nhtbuilder==0.6.2\nidna==3.7\nimportlib-metadata==6.8.0\njellyfish==1.0.0\nJinja2==3.1.5\njoblib==1.3.1\njsonschema==4.18.3\njsonschema-specifications==2023.6.1\nkiwisolver==1.4.4\nlangcodes==3.3.0\nlxml==4.9.3\nMarkdown==3.4.3\nmarkdown-it-py==3.0.0\nmarkdownlit==0.0.7\nMarkupSafe==2.1.3\nmatplotlib==3.7.2\nmdurl==0.1.2\nmore-itertools==9.1.0\nmurmurhash==1.0.9\nnetworkx==3.1\nnltk==3.9.1\nnumpy==1.25.1\npackaging==23.1\npandas==2.0.3\npathvalidate==3.2.0\npathy==0.10.2\nPillow==10.3.0\nplotly==5.15.0\npreshed==3.0.8\nprotobuf==4.23.4\npyarrow==14.0.1\npydeck==0.8.1b0\nPygments==2.15.1\npymdown-extensions==10.1\nPympler==1.0.1\npyparsing==3.0.9\npypdf==3.17.0\npyphen==0.14.0\npython-dateutil==2.8.2\npython-multipart==0.0.18\npytz==2023.3\npytz-deprecation-shim==0.1.0.post0\nPyYAML==6.0\nreferencing==0.29.1\nregex==2023.6.3\nrequests==2.32.0\nrich==13.4.2\nrpds-py==0.8.11\nscikit-learn==1.5.0\nscipy==1.11.1\nsix==1.16.0\nsmart-open==6.3.0\nsmmap==5.0.0\nsoupsieve==2.4.1\nspacy==3.6.0\nspacy-legacy==3.0.12\nspacy-loggers==1.0.4\nsrsly==2.4.6\nst-annotated-text==4.0.0\nstreamlit==1.37.0\nstreamlit-camera-input-live==0.2.0\nstreamlit-card==0.0.61\nstreamlit-embedcode==0.1.2\nstreamlit-extras==0.3.2\nstreamlit-faker==0.0.2\nstreamlit-image-coordinates==0.1.5\nstreamlit-keyup==0.2.0\nstreamlit-toggle-switch==1.0.2\nstreamlit-vertical-slider==1.0.2\ntenacity==8.2.2\ntextacy==0.13.0\nthinc==8.1.10\nthreadpoolctl==3.2.0\ntoml==0.10.2\ntoolz==0.12.0\ntornado==6.4.2\ntqdm\ntyper==0.9.0\ntyping_extensions==4.7.1\ntzdata==2023.3\ntzlocal==4.3.1\nuvicorn==0.23.2\nurllib3>=1.26.14\nvalidators==0.20.0\nwasabi==1.1.2\nwatchdog==3.0.0\nzipp==3.19.1\nreportlab==3.6.13\neasygui==0.98.3\nxhtml2pdf==0.2.11\nfastembed~=0.2.2\nqdrant-client==1.9.0\n"
        },
        {
          "name": "resume_matcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_first.py",
          "type": "blob",
          "size": 3.5517578125,
          "content": "import json\nimport logging\nimport os\n\nfrom scripts import JobDescriptionProcessor, ResumeProcessor\nfrom scripts.utils import get_filenames_from_dir, init_logging_config\n\ninit_logging_config()\n\nscript_dir = os.path.dirname(os.path.abspath(__file__))\nPROCESSED_DATA_PATH = os.path.join(script_dir, \"Data\", \"Processed\")\nPROCESSED_RESUMES_PATH = os.path.join(PROCESSED_DATA_PATH, \"Resumes\")\nPROCESSED_JOB_DESCRIPTIONS_PATH = os.path.join(\n    PROCESSED_DATA_PATH, \"JobDescription\"\n)\n\n# check if processed data directory exists\nif not os.path.exists(PROCESSED_DATA_PATH):\n    os.makedirs(PROCESSED_DATA_PATH)\n    os.makedirs(PROCESSED_RESUMES_PATH)\n    os.makedirs(PROCESSED_JOB_DESCRIPTIONS_PATH)\n    logging.info(\"Created necessary directories.\")\n\n\ndef read_json(filename):\n    with open(filename) as f:\n        data = json.load(f)\n    return data\n\n\ndef remove_old_files(files_path):\n    if not os.path.exists(files_path): # Check if the folder exists or not.\n        # Create the folder if it doesn't exist to avoid error in the next step.\n        os.makedirs(files_path)\n\n    for filename in os.listdir(files_path):\n        try:\n            file_path = os.path.join(files_path, filename)\n\n            if os.path.isfile(file_path):\n                os.remove(file_path)\n        except Exception as e:\n            logging.error(f\"Error deleting {file_path}:\\n{e}\")\n\n    logging.info(\"Deleted old files from \" + files_path)\n\n\nlogging.info(\"Started to read from Data/Resumes\")\ntry:\n    # Check if there are resumes present or not.\n    if not os.path.exists(PROCESSED_RESUMES_PATH):\n        # If not present then create one.\n        os.makedirs(PROCESSED_RESUMES_PATH)\n    else:\n        # If present then parse it.\n        remove_old_files(PROCESSED_RESUMES_PATH)\n\n    file_names = get_filenames_from_dir(\"Data/Resumes\")\n    logging.info(\"Reading from Data/Resumes is now complete.\")\nexcept Exception:\n    # Exit the program if there are no resumes.\n    logging.error(\"There are no resumes present in the specified folder.\")\n    logging.error(\"Exiting from the program.\")\n    logging.error(\n        \"Please add resumes in the Data/Resumes folder and try again.\"\n    )\n    exit(1)\n\n# Now after getting the file_names parse the resumes into a JSON Format.\nlogging.info(\"Started parsing the resumes.\")\nfor file in file_names:\n    processor = ResumeProcessor(file)\n    success = processor.process()\nlogging.info(\"Parsing of the resumes is now complete.\")\n\nlogging.info(\"Started to read from Data/JobDescription\")\ntry:\n    # Check if there are resumes present or not.\n    if not os.path.exists(PROCESSED_JOB_DESCRIPTIONS_PATH):\n        # If not present then create one.\n        os.makedirs(PROCESSED_JOB_DESCRIPTIONS_PATH)\n    else:  \n    # If present then parse it.\n        remove_old_files(PROCESSED_JOB_DESCRIPTIONS_PATH)\n\n    file_names = get_filenames_from_dir(\"Data/JobDescription\")\n    logging.info(\"Reading from Data/JobDescription is now complete.\")\nexcept Exception:\n    # Exit the program if there are no resumes.\n    logging.error(\n        \"There are no job-description present in the specified folder.\"\n    )\n    logging.error(\"Exiting from the program.\")\n    logging.error(\n        \"Please add resumes in the Data/JobDescription folder and try again.\"\n    )\n    exit(1)\n\n# Now after getting the file_names parse the resumes into a JSON Format.\nlogging.info(\"Started parsing the Job Descriptions.\")\nfor file in file_names:\n    processor = JobDescriptionProcessor(file)\n    success = processor.process()\nlogging.info(\"Parsing of the Job Descriptions is now complete.\")\nlogging.info(\"Success now run `streamlit run streamlit_second.py`\")\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "streamlit_app.py",
          "type": "blob",
          "size": 9.427734375,
          "content": "import json\nimport os\nfrom typing import List\n\nimport networkx as nx\nimport nltk\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport streamlit as st\nfrom annotated_text import annotated_text, parameters\nfrom streamlit_extras import add_vertical_space as avs\nfrom streamlit_extras.badges import badge\n\nfrom scripts.similarity.get_score import *\nfrom scripts.utils import get_filenames_from_dir\nfrom scripts.utils.logger import init_logging_config\n\n# Set page configuration\nst.set_page_config(\n    page_title=\"Resume Matcher\",\n    page_icon=\"Assets/img/favicon.ico\",\n    initial_sidebar_state=\"auto\",\n)\n\ninit_logging_config()\ncwd = find_path(\"Resume-Matcher\")\nconfig_path = os.path.join(cwd, \"scripts\", \"similarity\")\n\ntry:\n    nltk.data.find(\"tokenizers/punkt_tab\")\nexcept LookupError:\n    nltk.download(\"punkt_tab\")\n\nparameters.SHOW_LABEL_SEPARATOR = False\nparameters.BORDER_RADIUS = 3\nparameters.PADDING = \"0.5 0.25rem\"\n\n\ndef create_star_graph(nodes_and_weights, title):\n    # Create an empty graph\n    G = nx.Graph()\n\n    # Add the central node\n    central_node = \"resume\"\n    G.add_node(central_node)\n\n    # Add nodes and edges with weights to the graph\n    for node, weight in nodes_and_weights:\n        G.add_node(node)\n        G.add_edge(central_node, node, weight=weight * 100)\n\n    # Get position layout for nodes\n    pos = nx.spring_layout(G)\n\n    # Create edge trace\n    edge_x = []\n    edge_y = []\n    for edge in G.edges():\n        x0, y0 = pos[edge[0]]\n        x1, y1 = pos[edge[1]]\n        edge_x.extend([x0, x1, None])\n        edge_y.extend([y0, y1, None])\n\n    edge_trace = go.Scatter(\n        x=edge_x,\n        y=edge_y,\n        line=dict(width=0.5, color=\"#888\"),\n        hoverinfo=\"none\",\n        mode=\"lines\",\n    )\n\n    # Create node trace\n    node_x = []\n    node_y = []\n    for node in G.nodes():\n        x, y = pos[node]\n        node_x.append(x)\n        node_y.append(y)\n\n    node_trace = go.Scatter(\n        x=node_x,\n        y=node_y,\n        mode=\"markers\",\n        hoverinfo=\"text\",\n        marker=dict(\n            showscale=True,\n            colorscale=\"Rainbow\",\n            reversescale=True,\n            color=[],\n            size=10,\n            colorbar=dict(\n                thickness=15,\n                title=\"Node Connections\",\n                xanchor=\"left\",\n                titleside=\"right\",\n            ),\n            line_width=2,\n        ),\n    )\n\n    # Color node points by number of connections\n    node_adjacencies = []\n    node_text = []\n    for node in G.nodes():\n        adjacencies = list(G.adj[node])  # changes here\n        node_adjacencies.append(len(adjacencies))\n        node_text.append(f\"{node}<br># of connections: {len(adjacencies)}\")\n\n    node_trace.marker.color = node_adjacencies\n    node_trace.text = node_text\n\n    # Create the figure\n    fig = go.Figure(\n        data=[edge_trace, node_trace],\n        layout=go.Layout(\n            title=title,\n            titlefont_size=16,\n            showlegend=False,\n            hovermode=\"closest\",\n            margin=dict(b=20, l=5, r=5, t=40),\n            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        ),\n    )\n\n    # Show the figure\n    st.plotly_chart(fig)\n\n\ndef create_annotated_text(\n    input_string: str, word_list: List[str], annotation: str, color_code: str\n):\n    # Tokenize the input string\n    tokens = nltk.word_tokenize(input_string)\n\n    # Convert the list to a set for quick lookups\n    word_set = set(word_list)\n\n    # Initialize an empty list to hold the annotated text\n    annotated_text = []\n\n    for token in tokens:\n        # Check if the token is in the set\n        if token in word_set:\n            # If it is, append a tuple with the token, annotation, and color code\n            annotated_text.append((token, annotation, color_code))\n        else:\n            # If it's not, just append the token as a string\n            annotated_text.append(token)\n\n    return annotated_text\n\n\ndef read_json(filename):\n    with open(filename) as f:\n        data = json.load(f)\n    return data\n\n\ndef tokenize_string(input_string):\n    tokens = nltk.word_tokenize(input_string)\n    return tokens\n\n\n# Display the main title and subheaders\nst.title(\":blue[Resume Matcher]\")\nwith st.sidebar:\n    st.image(\"Assets/img/header_image.png\")\n    st.subheader(\n        \"Free and Open Source ATS to help your resume pass the screening stage.\"\n    )\n    st.markdown(\n        \"Check the website [www.resumematcher.fyi](https://www.resumematcher.fyi/)\"\n    )\n\n    st.markdown(\n        \"Give Resume Matcher a ⭐ on [GitHub](https://github.com/srbhr/resume-matcher)\"\n    )\n\n    badge(type=\"github\", name=\"srbhr/Resume-Matcher\")\n    st.markdown(\"For updates follow me on Twitter.\")\n    badge(type=\"twitter\", name=\"_srbhr_\")\n    st.markdown(\n        \"If you like the project and would like to further help in development please consider 👇\"\n    )\n    badge(type=\"buymeacoffee\", name=\"srbhr\")\n\nst.divider()\navs.add_vertical_space(1)\n\nresume_names = get_filenames_from_dir(\"Data/Processed/Resumes\")\n\n\nst.markdown(\n    f\"##### There are {len(resume_names)} resumes present. Please select one from the menu below:\"\n)\noutput = st.selectbox(f\"\", resume_names)\n\n\navs.add_vertical_space(5)\n\n# st.write(\"You have selected \", output, \" printing the resume\")\nselected_file = read_json(\"Data/Processed/Resumes/\" + output)\n\navs.add_vertical_space(2)\nst.markdown(\"#### Parsed Resume Data\")\nst.caption(\n    \"This text is parsed from your resume. This is how it'll look like after getting parsed by an ATS.\"\n)\nst.caption(\"Utilize this to understand how to make your resume ATS friendly.\")\navs.add_vertical_space(3)\n# st.json(selected_file)\nst.write(selected_file[\"clean_data\"])\n\navs.add_vertical_space(3)\nst.write(\"Now let's take a look at the extracted keywords from the resume.\")\n\nannotated_text(\n    create_annotated_text(\n        selected_file[\"clean_data\"],\n        selected_file[\"extracted_keywords\"],\n        \"KW\",\n        \"#0B666A\",\n    )\n)\n\navs.add_vertical_space(5)\nst.write(\"Now let's take a look at the extracted entities from the resume.\")\n\n# Call the function with your data\ncreate_star_graph(selected_file[\"keyterms\"], \"Entities from Resume\")\n\ndf2 = pd.DataFrame(selected_file[\"keyterms\"], columns=[\"keyword\", \"value\"])\n\n# Create the dictionary\nkeyword_dict = {}\nfor keyword, value in selected_file[\"keyterms\"]:\n    keyword_dict[keyword] = value * 100\n\nfig = go.Figure(\n    data=[\n        go.Table(\n            header=dict(\n                values=[\"Keyword\", \"Value\"], font=dict(size=12), fill_color=\"#070A52\"\n            ),\n            cells=dict(\n                values=[list(keyword_dict.keys()), list(keyword_dict.values())],\n                line_color=\"darkslategray\",\n                fill_color=\"#6DA9E4\",\n            ),\n        )\n    ]\n)\nst.plotly_chart(fig)\n\nst.divider()\n\nfig = px.treemap(\n    df2,\n    path=[\"keyword\"],\n    values=\"value\",\n    color_continuous_scale=\"Rainbow\",\n    title=\"Key Terms/Topics Extracted from your Resume\",\n)\nst.write(fig)\n\navs.add_vertical_space(5)\n\njob_descriptions = get_filenames_from_dir(\"Data/Processed/JobDescription\")\n\n\nst.markdown(\n    f\"##### There are {len(job_descriptions)} job descriptions present. Please select one from the menu below:\"\n)\noutput = st.selectbox(\"\", job_descriptions)\n\n\navs.add_vertical_space(5)\n\nselected_jd = read_json(\"Data/Processed/JobDescription/\" + output)\n\navs.add_vertical_space(2)\nst.markdown(\"#### Job Description\")\nst.caption(\n    \"Currently in the pipeline I'm parsing this from PDF but it'll be from txt or copy paste.\"\n)\navs.add_vertical_space(3)\n# st.json(selected_file)\nst.write(selected_jd[\"clean_data\"])\n\nst.markdown(\"#### Common Words between Job Description and Resumes Highlighted.\")\n\nannotated_text(\n    create_annotated_text(\n        selected_file[\"clean_data\"], selected_jd[\"extracted_keywords\"], \"JD\", \"#F24C3D\"\n    )\n)\n\nst.write(\"Now let's take a look at the extracted entities from the job description.\")\n\n# Call the function with your data\ncreate_star_graph(selected_jd[\"keyterms\"], \"Entities from Job Description\")\n\ndf2 = pd.DataFrame(selected_jd[\"keyterms\"], columns=[\"keyword\", \"value\"])\n\n# Create the dictionary\nkeyword_dict = {}\nfor keyword, value in selected_jd[\"keyterms\"]:\n    keyword_dict[keyword] = value * 100\n\nfig = go.Figure(\n    data=[\n        go.Table(\n            header=dict(\n                values=[\"Keyword\", \"Value\"], font=dict(size=12), fill_color=\"#070A52\"\n            ),\n            cells=dict(\n                values=[list(keyword_dict.keys()), list(keyword_dict.values())],\n                line_color=\"darkslategray\",\n                fill_color=\"#6DA9E4\",\n            ),\n        )\n    ]\n)\nst.plotly_chart(fig)\n\nst.divider()\n\nfig = px.treemap(\n    df2,\n    path=[\"keyword\"],\n    values=\"value\",\n    color_continuous_scale=\"Rainbow\",\n    title=\"Key Terms/Topics Extracted from the selected Job Description\",\n)\nst.write(fig)\n\navs.add_vertical_space(3)\n\nresume_string = \" \".join(selected_file[\"extracted_keywords\"])\njd_string = \" \".join(selected_jd[\"extracted_keywords\"])\nresult = get_score(resume_string, jd_string)\nsimilarity_score = round(result[0].score * 100, 2)\nscore_color = \"green\"\nif similarity_score < 60:\n    score_color = \"red\"\nelif 60 <= similarity_score < 75:\n    score_color = \"orange\"\nst.markdown(\n    f\"Similarity Score obtained for the resume and job description is \"\n    f'<span style=\"color:{score_color};font-size:24px; font-weight:Bold\">{similarity_score}</span>',\n    unsafe_allow_html=True,\n)\n\n# Go back to top\nst.markdown(\"[:arrow_up: Back to Top](#resume-matcher)\")\n"
        },
        {
          "name": "streamlit_interactive.py",
          "type": "blob",
          "size": 18.2724609375,
          "content": "# Import necessary libraries\nimport json\nimport os\nfrom typing import List\n\nimport networkx as nx\nimport nltk\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport streamlit as st\nfrom annotated_text import annotated_text, parameters\nfrom streamlit_extras import add_vertical_space as avs\nfrom streamlit_extras.badges import badge\n\nfrom scripts import JobDescriptionProcessor, ResumeProcessor\nfrom scripts.parsers import ParseJobDesc, ParseResume\nfrom scripts.ReadPdf import read_single_pdf\nfrom scripts.similarity.get_score import *\nfrom scripts.utils import get_filenames_from_dir\n\n# Set page configuration\nst.set_page_config(\n    page_title=\"Resume Matcher\",\n    page_icon=\"Assets/img/favicon.ico\",\n    initial_sidebar_state=\"auto\",\n    layout=\"wide\",\n)\n\n# Find the current working directory and configuration path\ncwd = find_path(\"Resume-Matcher\")\nconfig_path = os.path.join(cwd, \"scripts\", \"similarity\")\n\n# Check if NLTK punkt_tab data is available, if not, download it\ntry:\n    nltk.data.find(\"tokenizers/punkt_tab\")\nexcept LookupError:\n    nltk.download(\"punkt_tab\")\n\n# Set some visualization parameters using the annotated_text library\nparameters.SHOW_LABEL_SEPARATOR = False\nparameters.BORDER_RADIUS = 3\nparameters.PADDING = \"0.5 0.25rem\"\n\n\n# Function to set session state variables\ndef update_session_state(key, val):\n    st.session_state[key] = val\n\n\n# Function to delete all files in a directory\ndef delete_from_dir(filepath: str) -> bool:\n    try:\n        for file in os.scandir(filepath):\n            os.remove(file.path)\n\n        return True\n    except OSError as error:\n        print(f\"Exception: {error}\")\n        return False\n\n\n# Function to create a star-shaped graph visualization\ndef create_star_graph(nodes_and_weights, title):\n    \"\"\"\n    Create a star-shaped graph visualization.\n\n    Args:\n        nodes_and_weights (list): List of tuples containing nodes and their weights.\n        title (str): Title for the graph.\n\n    Returns:\n        None\n    \"\"\"\n    # Create an empty graph\n    graph = nx.Graph()\n\n    # Add the central node\n    central_node = \"resume\"\n    graph.add_node(central_node)\n\n    # Add nodes and edges with weights to the graph\n    for node, weight in nodes_and_weights:\n        graph.add_node(node)\n        graph.add_edge(central_node, node, weight=weight * 100)\n\n    # Get position layout for nodes\n    pos = nx.spring_layout(graph)\n\n    # Create edge trace\n    edge_x = []\n    edge_y = []\n    for edge in graph.edges():\n        x0, y0 = pos[edge[0]]\n        x1, y1 = pos[edge[1]]\n        edge_x.extend([x0, x1, None])\n        edge_y.extend([y0, y1, None])\n\n    edge_trace = go.Scatter(\n        x=edge_x,\n        y=edge_y,\n        line=dict(width=0.5, color=\"#888\"),\n        hoverinfo=\"none\",\n        mode=\"lines\",\n    )\n\n    # Create node trace\n    node_x = []\n    node_y = []\n    for node in graph.nodes():\n        x, y = pos[node]\n        node_x.append(x)\n        node_y.append(y)\n\n    node_trace = go.Scatter(\n        x=node_x,\n        y=node_y,\n        mode=\"markers\",\n        hoverinfo=\"text\",\n        marker=dict(\n            showscale=True,\n            colorscale=\"Rainbow\",\n            reversescale=True,\n            color=[],\n            size=10,\n            colorbar=dict(\n                thickness=15,\n                title=\"Node Connections\",\n                xanchor=\"left\",\n                titleside=\"right\",\n            ),\n            line_width=2,\n        ),\n    )\n\n    # Color node points by number of connections\n    node_adjacencies = []\n    node_text = []\n    for node in graph.nodes():\n        adjacencies = list(graph.adj[node])  # Changes here\n        node_adjacencies.append(len(adjacencies))\n        node_text.append(f\"{node}<br># of connections: {len(adjacencies)}\")\n\n    node_trace.marker.color = node_adjacencies\n    node_trace.text = node_text\n\n    # Create the figure\n    figure = go.Figure(\n        data=[edge_trace, node_trace],\n        layout=go.Layout(\n            title=title,\n            titlefont=dict(size=16),\n            showlegend=False,\n            hovermode=\"closest\",\n            margin=dict(b=20, l=5, r=5, t=40),\n            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        ),\n    )\n\n    # Show the figure\n    st.plotly_chart(figure, use_container_width=True)\n\n\n# Function to create annotated text with highlighting\ndef create_annotated_text(\n    input_string: str, word_list: List[str], annotation: str, color_code: str\n):\n    \"\"\"\n    Create annotated text with highlighted keywords.\n\n    Args:\n        input_string (str): The input text.\n        word_list (List[str]): List of keywords to be highlighted.\n        annotation (str): Annotation label for highlighted keywords.\n        color_code (str): Color code for highlighting.\n\n    Returns:\n        List: Annotated text with highlighted keywords.\n    \"\"\"\n    # Tokenize the input string\n    tokens = nltk.word_tokenize(input_string)\n\n    # Convert the list to a set for quick lookups\n    word_set = set(word_list)\n\n    # Initialize an empty list to hold the annotated text\n    ret_annotated_text = []\n\n    for token in tokens:\n        # Check if the token is in the set\n        if token in word_set:\n            # If it is, append a tuple with the token, annotation, and color code\n            ret_annotated_text.append((token, annotation, color_code))\n        else:\n            # If it's not, just append the token as a string\n            ret_annotated_text.append(token)\n\n    return ret_annotated_text\n\n\n# Function to read JSON data from a file\ndef read_json(filename):\n    \"\"\"\n    Read JSON data from a file.\n\n    Args:\n        filename (str): The path to the JSON file.\n\n    Returns:\n        dict: The JSON data.\n    \"\"\"\n    with open(filename) as f:\n        data = json.load(f)\n    return data\n\n\n# Function to tokenize a string\ndef tokenize_string(input_string):\n    \"\"\"\n    Tokenize a string into words.\n\n    Args:\n        input_string (str): The input string.\n\n    Returns:\n        List[str]: List of tokens.\n    \"\"\"\n    tokens = nltk.word_tokenize(input_string)\n    return tokens\n\n\n# Cleanup processed resume / job descriptions\ndelete_from_dir(os.path.join(cwd, \"Data\", \"Processed\", \"Resumes\"))\ndelete_from_dir(os.path.join(cwd, \"Data\", \"Processed\", \"JobDescription\"))\n\n# Set default session states for first run\nif \"resumeUploaded\" not in st.session_state.keys():\n    update_session_state(\"resumeUploaded\", \"Pending\")\n    update_session_state(\"resumePath\", \"\")\nif \"jobDescriptionUploaded\" not in st.session_state.keys():\n    update_session_state(\"jobDescriptionUploaded\", \"Pending\")\n    update_session_state(\"jobDescriptionPath\", \"\")\n\n# Display the main title and sub-headers\nst.title(\":blue[Resume Matcher]\")\nwith st.sidebar:\n    st.image(\"Assets/img/header_image.png\")\n    st.subheader(\n        \"Free and Open Source ATS to help your resume pass the screening stage.\"\n    )\n    st.markdown(\n        \"Check the website [www.resumematcher.fyi](https://www.resumematcher.fyi/)\"\n    )\n    st.markdown(\n        \"Give Resume Matcher a ⭐ on [GitHub](https://github.com/srbhr/resume-matcher)\"\n    )\n    badge(type=\"github\", name=\"srbhr/Resume-Matcher\")\n    st.markdown(\"For updates follow me on Twitter.\")\n    badge(type=\"twitter\", name=\"_srbhr_\")\n    st.markdown(\n        \"If you like the project and would like to further help in development please consider 👇\"\n    )\n    badge(type=\"buymeacoffee\", name=\"srbhr\")\n\nst.divider()\navs.add_vertical_space(1)\n\nwith st.container():\n    resumeCol, jobDescriptionCol = st.columns(2)\n    with resumeCol:\n        uploaded_Resume = st.file_uploader(\"Choose a Resume\", type=\"pdf\")\n        if uploaded_Resume is not None:\n            if st.session_state[\"resumeUploaded\"] == \"Pending\":\n                save_path_resume = os.path.join(\n                    cwd, \"Data\", \"Resumes\", uploaded_Resume.name\n                )\n\n                with open(save_path_resume, mode=\"wb\") as w:\n                    w.write(uploaded_Resume.getvalue())\n\n                if os.path.exists(save_path_resume):\n                    st.toast(\n                        f\"File {uploaded_Resume.name} is successfully saved!\", icon=\"✔️\"\n                    )\n                    update_session_state(\"resumeUploaded\", \"Uploaded\")\n                    update_session_state(\"resumePath\", save_path_resume)\n        else:\n            update_session_state(\"resumeUploaded\", \"Pending\")\n            update_session_state(\"resumePath\", \"\")\n\n    with jobDescriptionCol:\n        uploaded_JobDescription = st.file_uploader(\n            \"Choose a Job Description\", type=\"pdf\"\n        )\n        if uploaded_JobDescription is not None:\n            if st.session_state[\"jobDescriptionUploaded\"] == \"Pending\":\n                save_path_jobDescription = os.path.join(\n                    cwd, \"Data\", \"JobDescription\", uploaded_JobDescription.name\n                )\n\n                with open(save_path_jobDescription, mode=\"wb\") as w:\n                    w.write(uploaded_JobDescription.getvalue())\n\n                if os.path.exists(save_path_jobDescription):\n                    st.toast(\n                        f\"File {uploaded_JobDescription.name} is successfully saved!\",\n                        icon=\"✔️\",\n                    )\n                    update_session_state(\"jobDescriptionUploaded\", \"Uploaded\")\n                    update_session_state(\"jobDescriptionPath\", save_path_jobDescription)\n        else:\n            update_session_state(\"jobDescriptionUploaded\", \"Pending\")\n            update_session_state(\"jobDescriptionPath\", \"\")\n\nwith st.spinner(\"Please wait...\"):\n    if (\n        uploaded_Resume is not None\n        and st.session_state[\"jobDescriptionUploaded\"] == \"Uploaded\"\n        and uploaded_JobDescription is not None\n        and st.session_state[\"jobDescriptionUploaded\"] == \"Uploaded\"\n    ):\n\n        resumeProcessor = ParseResume(read_single_pdf(st.session_state[\"resumePath\"]))\n        jobDescriptionProcessor = ParseJobDesc(\n            read_single_pdf(st.session_state[\"jobDescriptionPath\"])\n        )\n\n        # Resume / JD output\n        selected_file = resumeProcessor.get_JSON()\n        selected_jd = jobDescriptionProcessor.get_JSON()\n\n        # Add containers for each row to avoid overlap\n\n        # Parsed data\n        with st.container():\n            resumeCol, jobDescriptionCol = st.columns(2)\n            with resumeCol:\n                with st.expander(\"Parsed Resume Data\"):\n                    st.caption(\n                        \"This text is parsed from your resume. This is how it'll look like after getting parsed by an \"\n                        \"ATS.\"\n                    )\n                    st.caption(\n                        \"Utilize this to understand how to make your resume ATS friendly.\"\n                    )\n                    avs.add_vertical_space(3)\n                    st.write(selected_file[\"clean_data\"])\n\n            with jobDescriptionCol:\n                with st.expander(\"Parsed Job Description\"):\n                    st.caption(\n                        \"Currently in the pipeline I'm parsing this from PDF but it'll be from txt or copy paste.\"\n                    )\n                    avs.add_vertical_space(3)\n                    st.write(selected_jd[\"clean_data\"])\n\n        # Extracted keywords\n        with st.container():\n            resumeCol, jobDescriptionCol = st.columns(2)\n            with resumeCol:\n                with st.expander(\"Extracted Keywords\"):\n                    st.write(\n                        \"Now let's take a look at the extracted keywords from the resume.\"\n                    )\n                    annotated_text(\n                        create_annotated_text(\n                            selected_file[\"clean_data\"],\n                            selected_file[\"extracted_keywords\"],\n                            \"KW\",\n                            \"#0B666A\",\n                        )\n                    )\n            with jobDescriptionCol:\n                with st.expander(\"Extracted Keywords\"):\n                    st.write(\n                        \"Now let's take a look at the extracted keywords from the job description.\"\n                    )\n                    annotated_text(\n                        create_annotated_text(\n                            selected_jd[\"clean_data\"],\n                            selected_jd[\"extracted_keywords\"],\n                            \"KW\",\n                            \"#0B666A\",\n                        )\n                    )\n\n        # Star graph visualization\n        with st.container():\n            resumeCol, jobDescriptionCol = st.columns(2)\n            with resumeCol:\n                with st.expander(\"Extracted Entities\"):\n                    st.write(\n                        \"Now let's take a look at the extracted entities from the resume.\"\n                    )\n\n                    # Call the function with your data\n                    create_star_graph(selected_file[\"keyterms\"], \"Entities from Resume\")\n            with jobDescriptionCol:\n                with st.expander(\"Extracted Entities\"):\n                    st.write(\n                        \"Now let's take a look at the extracted entities from the job description.\"\n                    )\n\n                    # Call the function with your data\n                    create_star_graph(\n                        selected_jd[\"keyterms\"], \"Entities from Job Description\"\n                    )\n\n        # Keywords and values\n        with st.container():\n            resumeCol, jobDescriptionCol = st.columns(2)\n            with resumeCol:\n                with st.expander(\"Keywords & Values\"):\n                    df1 = pd.DataFrame(\n                        selected_file[\"keyterms\"], columns=[\"keyword\", \"value\"]\n                    )\n\n                    # Create the dictionary\n                    keyword_dict = {}\n                    for keyword, value in selected_file[\"keyterms\"]:\n                        keyword_dict[keyword] = value * 100\n\n                    fig = go.Figure(\n                        data=[\n                            go.Table(\n                                header=dict(\n                                    values=[\"Keyword\", \"Value\"],\n                                    font=dict(size=12, color=\"white\"),\n                                    fill_color=\"#1d2078\",\n                                ),\n                                cells=dict(\n                                    values=[\n                                        list(keyword_dict.keys()),\n                                        list(keyword_dict.values()),\n                                    ],\n                                    line_color=\"darkslategray\",\n                                    fill_color=\"#6DA9E4\",\n                                ),\n                            )\n                        ]\n                    )\n                    st.plotly_chart(fig, use_container_width=True)\n            with jobDescriptionCol:\n                with st.expander(\"Keywords & Values\"):\n                    df2 = pd.DataFrame(\n                        selected_jd[\"keyterms\"], columns=[\"keyword\", \"value\"]\n                    )\n\n                    # Create the dictionary\n                    keyword_dict = {}\n                    for keyword, value in selected_jd[\"keyterms\"]:\n                        keyword_dict[keyword] = value * 100\n\n                    fig = go.Figure(\n                        data=[\n                            go.Table(\n                                header=dict(\n                                    values=[\"Keyword\", \"Value\"],\n                                    font=dict(size=12, color=\"white\"),\n                                    fill_color=\"#1d2078\",\n                                ),\n                                cells=dict(\n                                    values=[\n                                        list(keyword_dict.keys()),\n                                        list(keyword_dict.values()),\n                                    ],\n                                    line_color=\"darkslategray\",\n                                    fill_color=\"#6DA9E4\",\n                                ),\n                            )\n                        ]\n                    )\n                    st.plotly_chart(fig, use_container_width=True)\n\n        # Treemaps\n        with st.container():\n            resumeCol, jobDescriptionCol = st.columns(2)\n            with resumeCol:\n                with st.expander(\"Key Topics\"):\n                    fig = px.treemap(\n                        df1,\n                        path=[\"keyword\"],\n                        values=\"value\",\n                        color_continuous_scale=\"Rainbow\",\n                        title=\"Key Terms/Topics Extracted from your Resume\",\n                    )\n                    st.plotly_chart(fig, use_container_width=True)\n\n            with jobDescriptionCol:\n                with st.expander(\"Key Topics\"):\n                    fig = px.treemap(\n                        df2,\n                        path=[\"keyword\"],\n                        values=\"value\",\n                        color_continuous_scale=\"Rainbow\",\n                        title=\"Key Terms/Topics Extracted from Job Description\",\n                    )\n                    st.plotly_chart(fig, use_container_width=True)\n\n        avs.add_vertical_space(2)\n        st.markdown(\"#### Similarity Score\")\n        print(\"Config file parsed successfully:\")\n        resume_string = \" \".join(selected_file[\"extracted_keywords\"])\n        jd_string = \" \".join(selected_jd[\"extracted_keywords\"])\n        result = get_score(resume_string, jd_string)\n        similarity_score = round(result[0].score * 100, 2)\n\n        # Default color to green\n        score_color = \"green\"\n        if similarity_score < 60:\n            score_color = \"red\"\n        elif 60 <= similarity_score < 75:\n            score_color = \"orange\"\n\n        st.markdown(\n            f\"Similarity Score obtained for the resume and job description is \"\n            f'<span style=\"color:{score_color};font-size:24px; font-weight:Bold\">{similarity_score}</span>',\n            unsafe_allow_html=True,\n        )\n\n        avs.add_vertical_space(2)\n        with st.expander(\"Common words between Resume and Job Description:\"):\n            annotated_text(\n                create_annotated_text(\n                    selected_file[\"clean_data\"],\n                    selected_jd[\"extracted_keywords\"],\n                    \"JD\",\n                    \"#F24C3D\",\n                )\n            )\n\nst.divider()\n\n# Go back to top\nst.markdown(\"[:arrow_up: Back to Top](#resume-matcher)\")\n"
        },
        {
          "name": "streamlit_second.py",
          "type": "blob",
          "size": 12.9580078125,
          "content": "import json\nfrom typing import List\n\nimport networkx as nx\nimport nltk\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport streamlit as st\nfrom annotated_text import annotated_text, parameters\nfrom streamlit_extras import add_vertical_space as avs\nfrom streamlit_extras.badges import badge\n\nfrom scripts.utils import get_filenames_from_dir\n\n# Set page configuration\nst.set_page_config(\n    page_title=\"Resume Matcher\",\n    page_icon=\"Assets/img/favicon.ico\",\n    initial_sidebar_state=\"auto\",\n)\n\n# Check if NLTK punkt_tab data is available, if not, download it\ntry:\n    nltk.data.find(\"tokenizers/punkt_tab\")\nexcept LookupError:\n    nltk.download(\"punkt_tab\")\n\nparameters.SHOW_LABEL_SEPARATOR = False\nparameters.BORDER_RADIUS = 3\nparameters.PADDING = \"0.5 0.25rem\"\n\n\ndef create_star_graph(nodes_and_weights, title):\n    # Create an empty graph\n    G = nx.Graph()\n\n    # Add the central node\n    central_node = \"resume\"\n    G.add_node(central_node)\n\n    # Add nodes and edges with weights to the graph\n    for node, weight in nodes_and_weights:\n        G.add_node(node)\n        G.add_edge(central_node, node, weight=weight * 100)\n\n    # Get position layout for nodes\n    pos = nx.spring_layout(G)\n\n    # Create edge trace\n    edge_x = []\n    edge_y = []\n    for edge in G.edges():\n        x0, y0 = pos[edge[0]]\n        x1, y1 = pos[edge[1]]\n        edge_x.extend([x0, x1, None])\n        edge_y.extend([y0, y1, None])\n\n    edge_trace = go.Scatter(\n        x=edge_x,\n        y=edge_y,\n        line=dict(width=0.5, color=\"#888\"),\n        hoverinfo=\"none\",\n        mode=\"lines\",\n    )\n\n    # Create node trace\n    node_x = []\n    node_y = []\n    for node in G.nodes():\n        x, y = pos[node]\n        node_x.append(x)\n        node_y.append(y)\n\n    node_trace = go.Scatter(\n        x=node_x,\n        y=node_y,\n        mode=\"markers\",\n        hoverinfo=\"text\",\n        marker=dict(\n            showscale=True,\n            colorscale=\"Rainbow\",\n            reversescale=True,\n            color=[],\n            size=10,\n            colorbar=dict(\n                thickness=15,\n                title=\"Node Connections\",\n                xanchor=\"left\",\n                titleside=\"right\",\n            ),\n            line_width=2,\n        ),\n    )\n\n    # Color node points by number of connections\n    node_adjacencies = []\n    node_text = []\n    for node in G.nodes():\n        adjacencies = list(G.adj[node])  # changes here\n        node_adjacencies.append(len(adjacencies))\n        node_text.append(f\"{node}<br># of connections: {len(adjacencies)}\")\n\n    node_trace.marker.color = node_adjacencies\n    node_trace.text = node_text\n\n    # Create the figure\n    fig = go.Figure(\n        data=[edge_trace, node_trace],\n        layout=go.Layout(\n            title=title,\n            titlefont_size=16,\n            showlegend=False,\n            hovermode=\"closest\",\n            margin=dict(b=20, l=5, r=5, t=40),\n            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        ),\n    )\n\n    # Show the figure\n    st.plotly_chart(fig)\n\n\ndef create_annotated_text(\n    input_string: str, word_list: List[str], annotation: str, color_code: str\n):\n    # Tokenize the input string\n    tokens = nltk.word_tokenize(input_string)\n\n    # Convert the list to a set for quick lookups\n    word_set = set(word_list)\n\n    # Initialize an empty list to hold the annotated text\n    annotated_text = []\n\n    for token in tokens:\n        # Check if the token is in the set\n        if token in word_set:\n            # If it is, append a tuple with the token, annotation, and color code\n            annotated_text.append((token, annotation, color_code))\n        else:\n            # If it's not, just append the token as a string\n            annotated_text.append(token)\n\n    return annotated_text\n\n\ndef read_json(filename):\n    with open(filename) as f:\n        data = json.load(f)\n    return data\n\n\ndef tokenize_string(input_string):\n    tokens = nltk.word_tokenize(input_string)\n    return tokens\n\n\n# Display the main title and subheaders\nst.title(\":blue[Resume Matcher]\")\nwith st.sidebar:\n    st.image(\"Assets/img/header_image.png\")\n    st.subheader(\n        \"Free and Open Source ATS to help your resume pass the screening stage.\"\n    )\n    st.markdown(\n        \"Check the website [www.resumematcher.fyi](https://www.resumematcher.fyi/)\"\n    )\n\n    st.markdown(\n        \"Give Resume Matcher a ⭐ on [GitHub](https://github.com/srbhr/resume-matcher)\"\n    )\n\n    badge(type=\"github\", name=\"srbhr/Resume-Matcher\")\n    st.markdown(\"For updates follow me on Twitter.\")\n    badge(type=\"twitter\", name=\"_srbhr_\")\n    st.markdown(\n        \"If you like the project and would like to further help in development please consider 👇\"\n    )\n    badge(type=\"buymeacoffee\", name=\"srbhr\")\n\nst.divider()\navs.add_vertical_space(1)\n\nresume_names = get_filenames_from_dir(\"Data/Processed/Resumes\")\n\noutput = st.selectbox(\n    f\"There are {len(resume_names)} resumes present. Please select one from the menu below:\",\n    resume_names,\n)\n\navs.add_vertical_space(5)\n\nselected_file = read_json(\"Data/Processed/Resumes/\" + output)\n\navs.add_vertical_space(2)\nst.markdown(\"#### Parsed Resume Data\")\nst.caption(\n    \"This text is parsed from your resume. This is how it'll look like after getting parsed by an ATS.\"\n)\nst.caption(\"Utilize this to understand how to make your resume ATS friendly.\")\navs.add_vertical_space(3)\n# st.json(selected_file)\nst.write(selected_file[\"clean_data\"])\n\navs.add_vertical_space(3)\nst.write(\"Now let's take a look at the extracted keywords from the resume.\")\n\nannotated_text(\n    create_annotated_text(\n        selected_file[\"clean_data\"],\n        selected_file[\"extracted_keywords\"],\n        \"KW\",\n        \"#0B666A\",\n    )\n)\n\navs.add_vertical_space(5)\nst.write(\"Now let's take a look at the extracted entities from the resume.\")\n\n# Call the function with your data\ncreate_star_graph(selected_file[\"keyterms\"], \"Entities from Resume\")\n\ndf2 = pd.DataFrame(selected_file[\"keyterms\"], columns=[\"keyword\", \"value\"])\n\n# Create the dictionary\nkeyword_dict = {}\nfor keyword, value in selected_file[\"keyterms\"]:\n    keyword_dict[keyword] = value * 100\n\nfig = go.Figure(\n    data=[\n        go.Table(\n            header=dict(\n                values=[\"Keyword\", \"Value\"], font=dict(size=12), fill_color=\"#070A52\"\n            ),\n            cells=dict(\n                values=[list(keyword_dict.keys()), list(keyword_dict.values())],\n                line_color=\"darkslategray\",\n                fill_color=\"#6DA9E4\",\n            ),\n        )\n    ]\n)\nst.plotly_chart(fig)\n\nst.divider()\n\nfig = px.treemap(\n    df2,\n    path=[\"keyword\"],\n    values=\"value\",\n    color_continuous_scale=\"Rainbow\",\n    title=\"Key Terms/Topics Extracted from your Resume\",\n)\nst.write(fig)\n\navs.add_vertical_space(5)\n\njob_descriptions = get_filenames_from_dir(\"Data/Processed/JobDescription\")\n\noutput = st.selectbox(\n    f\"There are {len(job_descriptions)} job descriptions present. Please select one from the menu below:\",\n    job_descriptions,\n)\n\navs.add_vertical_space(5)\n\nselected_jd = read_json(\"Data/Processed/JobDescription/\" + output)\n\navs.add_vertical_space(2)\nst.markdown(\"#### Job Description\")\nst.caption(\n    \"Currently in the pipeline I'm parsing this from PDF but it'll be from txt or copy paste.\"\n)\navs.add_vertical_space(3)\n# st.json(selected_file)\nst.write(selected_jd[\"clean_data\"])\n\nst.markdown(\"#### Common Words between Job Description and Resumes Highlighted.\")\n\nannotated_text(\n    create_annotated_text(\n        selected_file[\"clean_data\"], selected_jd[\"extracted_keywords\"], \"JD\", \"#F24C3D\"\n    )\n)\n\nst.write(\"Now let's take a look at the extracted entities from the job description.\")\n\n# Call the function with your data\ncreate_star_graph(selected_jd[\"keyterms\"], \"Entities from Job Description\")\n\ndf2 = pd.DataFrame(selected_jd[\"keyterms\"], columns=[\"keyword\", \"value\"])\n\n# Create the dictionary\nkeyword_dict = {}\nfor keyword, value in selected_jd[\"keyterms\"]:\n    keyword_dict[keyword] = value * 100\n\nfig = go.Figure(\n    data=[\n        go.Table(\n            header=dict(\n                values=[\"Keyword\", \"Value\"], font=dict(size=12), fill_color=\"#070A52\"\n            ),\n            cells=dict(\n                values=[list(keyword_dict.keys()), list(keyword_dict.values())],\n                line_color=\"darkslategray\",\n                fill_color=\"#6DA9E4\",\n            ),\n        )\n    ]\n)\nst.plotly_chart(fig)\n\nst.divider()\n\nfig = px.treemap(\n    df2,\n    path=[\"keyword\"],\n    values=\"value\",\n    color_continuous_scale=\"Rainbow\",\n    title=\"Key Terms/Topics Extracted from the selected Job Description\",\n)\nst.write(fig)\n\navs.add_vertical_space(5)\n\nst.divider()\n\nst.markdown(\"## Vector Similarity Scores\")\nst.caption(\"Powered by Qdrant Vector Search\")\nst.info(\"These are pre-computed queries\", icon=\"ℹ\")\nst.warning(\n    \"Running Qdrant or Sentence Transformers without having capacity is not recommended\",\n    icon=\"⚠\",\n)\n\n\n# Your data\ndata = [\n    {\n        \"text\": \"{'resume': 'Alfred Pennyworth\",\n        \"query\": \"Job Description Product Manager\",\n        \"score\": 0.62658,\n    },\n    {\n        \"text\": \"{'resume': 'Barry Allen\",\n        \"query\": \"Job Description Product Manager\",\n        \"score\": 0.43777737,\n    },\n    {\n        \"text\": \"{'resume': 'Bruce Wayne \",\n        \"query\": \"Job Description Product Manager\",\n        \"score\": 0.39835533,\n    },\n    {\n        \"text\": \"{'resume': 'JOHN DOE\",\n        \"query\": \"Job Description Product Manager\",\n        \"score\": 0.3915512,\n    },\n    {\n        \"text\": \"{'resume': 'Harvey Dent\",\n        \"query\": \"Job Description Product Manager\",\n        \"score\": 0.3519544,\n    },\n    {\n        \"text\": \"{'resume': 'Barry Allen\",\n        \"query\": \"Job Description Senior Full Stack Engineer\",\n        \"score\": 0.6541866,\n    },\n    {\n        \"text\": \"{'resume': 'Alfred Pennyworth\",\n        \"query\": \"Job Description Senior Full Stack Engineer\",\n        \"score\": 0.59806436,\n    },\n    {\n        \"text\": \"{'resume': 'JOHN DOE\",\n        \"query\": \"Job Description Senior Full Stack Engineer\",\n        \"score\": 0.5951386,\n    },\n    {\n        \"text\": \"{'resume': 'Bruce Wayne \",\n        \"query\": \"Job Description Senior Full Stack Engineer\",\n        \"score\": 0.57700855,\n    },\n    {\n        \"text\": \"{'resume': 'Harvey Dent\",\n        \"query\": \"Job Description Senior Full Stack Engineer\",\n        \"score\": 0.38489106,\n    },\n    {\n        \"text\": \"{'resume': 'Barry Allen\",\n        \"query\": \"Job Description Front End Engineer\",\n        \"score\": 0.76813436,\n    },\n    {\n        \"text\": \"{'resume': 'Bruce Wayne'\",\n        \"query\": \"Job Description Front End Engineer\",\n        \"score\": 0.60440844,\n    },\n    {\n        \"text\": \"{'resume': 'JOHN DOE\",\n        \"query\": \"Job Description Front End Engineer\",\n        \"score\": 0.56080043,\n    },\n    {\n        \"text\": \"{'resume': 'Alfred Pennyworth\",\n        \"query\": \"Job Description Front End Engineer\",\n        \"score\": 0.5395049,\n    },\n    {\n        \"text\": \"{'resume': 'Harvey Dent\",\n        \"query\": \"Job Description Front End Engineer\",\n        \"score\": 0.3859515,\n    },\n    {\n        \"text\": \"{'resume': 'JOHN DOE\",\n        \"query\": \"Job Description Java Developer\",\n        \"score\": 0.5449441,\n    },\n    {\n        \"text\": \"{'resume': 'Alfred Pennyworth\",\n        \"query\": \"Job Description Java Developer\",\n        \"score\": 0.53476423,\n    },\n    {\n        \"text\": \"{'resume': 'Barry Allen\",\n        \"query\": \"Job Description Java Developer\",\n        \"score\": 0.5313871,\n    },\n    {\n        \"text\": \"{'resume': 'Bruce Wayne \",\n        \"query\": \"Job Description Java Developer\",\n        \"score\": 0.44446343,\n    },\n    {\n        \"text\": \"{'resume': 'Harvey Dent\",\n        \"query\": \"Job Description Java Developer\",\n        \"score\": 0.3616274,\n    },\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Create different DataFrames based on the query and sort by score\ndf1 = df[df[\"query\"] == \"Job Description Product Manager\"].sort_values(\n    by=\"score\", ascending=False\n)\ndf2 = df[df[\"query\"] == \"Job Description Senior Full Stack Engineer\"].sort_values(\n    by=\"score\", ascending=False\n)\ndf3 = df[df[\"query\"] == \"Job Description Front End Engineer\"].sort_values(\n    by=\"score\", ascending=False\n)\ndf4 = df[df[\"query\"] == \"Job Description Java Developer\"].sort_values(\n    by=\"score\", ascending=False\n)\n\n\ndef plot_df(df, title):\n    fig = px.bar(df, x=\"text\", y=df[\"score\"] * 100, title=title)\n    st.plotly_chart(fig)\n\n\nst.markdown(\"### Bar plots of scores based on similarity to Job Description.\")\n\nst.subheader(\":blue[Legend]\")\nst.text(\"Alfred Pennyworth :  Product Manager\")\nst.text(\"Barry Allen :  Front End Developer\")\nst.text(\"Harvey Dent :  Machine Learning Engineer\")\nst.text(\"Bruce Wayne :  Fullstack Developer (MERN)\")\nst.text(\"John Doe :  Fullstack Developer (Java)\")\n\n\nplot_df(df1, \"Job Description Product Manager 10+ Years of Exper\")\nplot_df(df2, \"Job Description Senior Full Stack Engineer 5+ Year\")\nplot_df(df3, \"Job Description Front End Engineer 2 Years of Expe\")\nplot_df(df4, \"Job Description Java Developer 3 Years of Experien\")\n\n\navs.add_vertical_space(3)\n\n# Go back to top\nst.markdown(\"[:arrow_up: Back to Top](#resume-matcher)\")\n"
        }
      ]
    }
  ]
}