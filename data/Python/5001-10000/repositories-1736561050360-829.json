{
  "metadata": {
    "timestamp": 1736561050360,
    "page": 829,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ethereum/web3.py",
      "stars": 5104,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bumpversion.cfg",
          "type": "blob",
          "size": 0.455078125,
          "content": "[bumpversion]\ncurrent_version = 7.6.1\ncommit = True\ntag = True\nparse = (?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(-(?P<stage>[^.]*)\\.(?P<devnum>\\d+))?\nserialize = \n\t{major}.{minor}.{patch}-{stage}.{devnum}\n\t{major}.{minor}.{patch}\n\n[bumpversion:part:stage]\noptional_value = stable\nfirst_value = stable\nvalues = \n\talpha\n\tbeta\n\tstable\n\n[bumpversion:part:devnum]\n\n[bumpversion:file:setup.py]\nsearch = version=\"{current_version}\",\nreplace = version=\"{new_version}\",\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.8896484375,
          "content": "# Ignore commits that added Black to the codebase\n350126eaf5d36fa0387f0a852b10735b66dbb2f3\n39f4453c2fe31be58ae187669a3f355093bf9361\n69f49ee1ffa8ca98d66d9b960976a490c846c82f\n831ff0f64a6db983cc2695af803942091ea877a1\n826425909cb31f47be9d0790b7912c35b8db8ec8\ndb54c3221a6f097bfc560e31c6e2421dbee82068\nbace32433dc5822bd7ffa05e3a8051ef43bd5e45\nf13bb3911b026aaf85451118f0d8281e06ef8b10\n10edeb1d85817dbf42105128dc15dcc14250142d\nca1dbbd8087e4c79bd77acdf7cb62705fbc07aa4\nc741e55b8ac95fed72a7135e7bb0e9f0d4a40431\nb2cc97561d0cf89ad352e4849b13d71f51106f62\nefecadcdea64f9481fcace558a8ea103462e2923\nda0aff211350b32bb5edbedd70ec1cf95dfb201b\nc68f6564ef85c17c5162ce2493d6db16e755516c\n51b6105c69dbcbe01be552c579c6fc9d66c07188\nfffb936da52d3354191439ef537a11352e85059c\n2bf7e9e21879359834decc2551aa9e1388401152\n917e99e474837f1dffcf623785d1d6ad84286912\n05fb86afc398c3f730bd3fdc574b2d45fdfc45eb\ncdc69f0636524d355af3e489a82129e28c400848\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.60546875,
          "content": "*.py[cod]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\n.build\neggs\n.eggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\npip-wheel-metadata\nvenv*\n.venv*\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Complexity\noutput/*.html\noutput/*/index.html\n\n# Sphinx\ndocs/_build\ndocs/modules.rst\ndocs/web3.auto.rst\ndocs/web3.gas_strategies.rst\ndocs/web3.middleware.rst\ndocs/web3.providers.eth_tester.rst\ndocs/web3.providers.rst\ndocs/web3.providers.rpc.rst\ndocs/web3.providers.persistent.rst\ndocs/web3.rst\ndocs/web3.scripts.release.rst\ndocs/web3.scripts.rst\ndocs/web3.tools.rst\ndocs/*.internal.rst\ndocs/*.utils.rst\ndocs/*._utils.*\n\n# Blockchain\nchains\n\n# Hypothesis Property base testing\n.hypothesis\n\n# tox/pytest cache\n.cache\n.pytest_cache\n\n# pycache\n__pycache__/\n\n# Test output logs\nlogs\n\n# VIM temp files\n*.sw[op]\n\n# mypy\n.mypy_cache\n\n# macOS\n.DS_Store\n\n# pyenv\n.python-version\n\n# vs-code\n.vscode\n\n# jupyter notebook files\n*.ipynb\n\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# For a more precise, explicit template, see:\n# https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n## General\n.idea/*\n.idea_modules/*\n\n## File-based project format:\n*.iws\n\n## IntelliJ\nout/\n\n## Plugin-specific files:\n\n### JIRA plugin\natlassian-ide-plugin.xml\n\n### Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# END JetBrains section\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.931640625,
          "content": "exclude: '.project-template|docs/conf.py|.bumpversion.cfg'\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    -   id: check-yaml\n    -   id: check-toml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.15.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py38-plus]\n-   repo: https://github.com/psf/black\n    rev: 23.9.1\n    hooks:\n    -   id: black\n-   repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n    -   id: flake8\n        additional_dependencies:\n        -   flake8-bugbear==23.9.16\n        exclude: setup.py\n-   repo: https://github.com/PyCQA/autoflake\n    rev: v2.2.1\n    hooks:\n    -   id: autoflake\n-   repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n    -   id: isort\n-   repo: https://github.com/pycqa/pydocstyle\n    rev: 6.3.0\n    hooks:\n    -   id: pydocstyle\n        additional_dependencies:\n        -   tomli  # required until >= python311\n-   repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.17\n    hooks:\n    -   id: mdformat\n        additional_dependencies:\n        -   mdformat-gfm\n-   repo: local\n    hooks:\n    -   id: mypy-local\n        name: run mypy with all dev dependencies present\n        entry: python -m mypy -p web3\n        language: system\n        always_run: true\n        pass_filenames: false\n-   repo: https://github.com/PrincetonUniversity/blocklint\n    rev: v0.2.5\n    hooks:\n    -   id: blocklint\n        exclude: 'normalization_tests.json|docs/(Makefile|release_notes.rst|web3.eth.rst|ens_overview.rst|troubleshooting.rst|transactions.rst|web3.contract.rst)'\n-   repo: local\n    hooks:\n    -   id: check-rst-files\n        name: Check for .rst files in the top-level directory\n        entry: sh -c 'ls *.rst 1>/dev/null 2>&1 && { echo \"found .rst file in top-level folder\"; exit 1; } || exit 0'\n        language: system\n        always_run: true\n        pass_filenames: false\n"
        },
        {
          "name": ".project-template",
          "type": "tree",
          "content": null
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.3818359375,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.9\"\n\nsphinx:\n  configuration: docs/conf.py\n  fail_on_warning: true\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n\n# Build all formats for RTD Downloads - htmlzip, pdf, epub\n# formats: all\n# Turning off pdf for now - won't build due to long line lengths\nformats:\n  - epub\n  - htmlzip\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2578125,
          "content": "# Contributing\n\nThanks for the interest! See the [contributor documentation][contribute]\nto get started, and reach out on [Discord] if you get stuck.\n\n[contribute]: https://web3py.readthedocs.io/en/latest/contributing.html\n[discord]: https://discord.gg/GHryRvPB84\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2685546875,
          "content": "FROM python:3.9\n\n# Set up code directory\nWORKDIR /usr/src/app\n\n# Install Linux dependencies\nRUN apt-get update && apt-get install -y libssl-dev\n\nCOPY web3 ./web3/\nCOPY tests ./tests/\nCOPY ens ./ens/\n\nCOPY setup.py .\nCOPY README.md .\n\nRUN pip install -e .[dev]\n\nWORKDIR /code\n"
        },
        {
          "name": "FUNDING.json",
          "type": "blob",
          "size": 0.2080078125,
          "content": "{\n  \"drips\": {\n    \"ethereum\": {\n      \"ownedBy\": \"0x5597cD8d55D2Db56b10FF4F8fe69C8922BF6C537\"\n    }\n  },\n  \"opRetro\": {\n    \"projectId\": \"0xebe03c3d6d33cad60124b9b05ef6e2ff056293a1de3c5fa51dfbb90c86c14bf7\"\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2024 The Ethereum Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.220703125,
          "content": "include LICENSE\ninclude README.md\n\nrecursive-include ens/specs *\nrecursive-include scripts *\nrecursive-include tests *\n\nglobal-include *.pyi\n\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\nprune .tox\nprune venv*\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.1953125,
          "content": "CURRENT_SIGN_SETTING := $(shell git config commit.gpgSign)\n\n.PHONY: clean-pyc clean-build docs\n\nhelp:\n\t@echo \"clean-build - remove build artifacts\"\n\t@echo \"clean-pyc - remove Python file artifacts\"\n\t@echo \"lint - fix linting issues with pre-commit\"\n\t@echo \"test - run tests quickly with the default Python\"\n\t@echo \"docs - generate docs and open in browser (linux-docs for version on linux)\"\n\t@echo \"autobuild-docs - live update docs when changes are saved\"\n\t@echo \"notes - consume towncrier newsfragments/ and update release notes in docs/\"\n\t@echo \"release - package and upload a release (does not run notes target)\"\n\t@echo \"dist - package\"\n\nclean: clean-build clean-pyc\n\nclean-build:\n\trm -fr build/\n\trm -fr dist/\n\trm -fr *.egg-info\n\nclean-pyc:\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f {} +\n\tfind . -name '__pycache__' -exec rm -rf {} +\n\nlint:\n\t@pre-commit run --all-files --show-diff-on-failure || ( \\\n\t\techo \"\\n\\n\\n * pre-commit should have fixed the errors above. Running again to make sure everything is good...\" \\\n\t\t&& pre-commit run --all-files --show-diff-on-failure \\\n\t)\n\ntest:\n\tpython -m pytest tests/core tests/ens tests/integration\n\nbenchmark:\n\tpython -m tox run -e benchmark\n\nautobuild-docs:\n\tsphinx-autobuild --open-browser docs docs/_build/html\n\nbuild-docs:\n\tsphinx-apidoc -o docs/ . setup.py \"*conftest*\" \"tests\" \"web3/tools/*\"\n\t$(MAKE) -C docs clean\n\t$(MAKE) -C docs html\n\t$(MAKE) -C docs doctest\n\nbuild-docs-ci:\n\t# pdf turned off for now - long line lengths break the build\n\t# $(MAKE) -C docs latexpdf\n\t$(MAKE) -C docs epub\n\nvalidate-newsfragments:\n\tpython ./newsfragments/validate_files.py\n\ttowncrier build --draft --version preview\n\ncheck-docs: build-docs validate-newsfragments\n\ncheck-docs-ci: build-docs build-docs-ci validate-newsfragments\n\ndocs: check-docs\n\topen docs/_build/html/index.html\n\nlinux-docs: check-docs\n\txdg-open docs/_build/html/index.html\n\ncheck-bump:\nifndef bump\n\t$(error bump must be set, typically: major, minor, patch, or devnum)\nendif\n\nnotes: check-bump validate-newsfragments\n\t# Let UPCOMING_VERSION be the version that is used for the current bump\n\t$(eval UPCOMING_VERSION=$(shell bumpversion $(bump) --dry-run --list | grep new_version= | sed 's/new_version=//g'))\n\t# Now generate the release notes to have them included in the release commit\n\ttowncrier build --yes --version $(UPCOMING_VERSION)\n\t# Before we bump the version, make sure that the towncrier-generated docs will build\n\tmake build-docs\n\tgit commit -m \"Compile release notes for v$(UPCOMING_VERSION)\"\n\nrelease: check-bump clean\n\t# require that upstream is configured for ethereum/web3.py\n\t@git remote -v | grep \"upstream[[:space:]]git@github.com:ethereum/web3.py.git (push)\\|upstream[[:space:]]https://github.com/ethereum/web3.py (push)\"\n\t# verify that docs build correctly\n\t./newsfragments/validate_files.py is-empty\n\tmake build-docs\n\tCURRENT_SIGN_SETTING=$(git config commit.gpgSign)\n\tgit config commit.gpgSign true\n\tbumpversion $(bump)\n\tpython -m build\n\tgit push upstream && git push upstream --tags\n\ttwine upload dist/*\n\tgit config commit.gpgSign \"$(CURRENT_SIGN_SETTING)\"\n\ndist: clean\n\tpython -m build\n\tls -l dist\n\npackage: clean\n\tpython -m build\n\tpython web3/scripts/release/test_package.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.787109375,
          "content": "# web3.py\n\n[![Join the conversation on Discord](https://img.shields.io/discord/809793915578089484?color=blue&label=chat&logo=discord&logoColor=white)](https://discord.gg/GHryRvPB84)\n[![Build Status](https://circleci.com/gh/ethereum/web3.py.svg?style=shield)](https://circleci.com/gh/ethereum/web3.py)\n[![PyPI version](https://badge.fury.io/py/web3.svg)](https://badge.fury.io/py/web3)\n[![Python versions](https://img.shields.io/pypi/pyversions/web3.svg)](https://pypi.python.org/pypi/web3)\n[![Docs build](https://readthedocs.org/projects/web3py/badge/?version=latest)](https://web3py.readthedocs.io/en/latest/?badge=latest)\n\n## A Python Library for Interacting with Ethereum\n\nweb3.py allows you to interact with the Ethereum blockchain using Python, enabling you to build decentralized applications, interact with smart contracts, and much more.\n\n- Python 3.8+ support\n\n______________________________________________________________________\n\n## Quickstart\n\n[Get started in 5 minutes](https://web3py.readthedocs.io/en/latest/quickstart.html) or\n[take a tour](https://web3py.readthedocs.io/en/latest/overview.html) of the library.\n\n## Documentation\n\nFor additional guides, examples, and APIs, see the [documentation](https://web3py.readthedocs.io/en/latest/).\n\n## Want to Help?\n\nWant to file a bug, contribute some code, or improve documentation? Excellent! Read up on our\nguidelines for [contributing](https://web3py.readthedocs.io/en/latest/contributing.html),\nthen check out issues that are labeled\n[Good First Issue](https://github.com/ethereum/web3.py/issues?q=is%3Aissue+is%3Aopen+label%3A%22Good+First+Issue%22).\n\n______________________________________________________________________\n\n## Questions on Implementation or Usage?\n\nJoin the conversation in the Ethereum Python Community [Discord](https://discord.gg/GHryRvPB84).\n"
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 2.64453125,
          "content": "import pytest\nimport time\nimport warnings\n\nimport pytest_asyncio\n\nfrom tests.utils import (\n    PollDelayCounter,\n    _async_wait_for_block_fixture_logic,\n    _async_wait_for_transaction_fixture_logic,\n)\nfrom web3._utils.threads import (\n    Timeout,\n)\nfrom web3.main import (\n    Web3,\n)\nfrom web3.providers.eth_tester import (\n    AsyncEthereumTesterProvider,\n    EthereumTesterProvider,\n)\n\n\n@pytest.fixture()\ndef sleep_interval():\n    return PollDelayCounter()\n\n\ndef is_testrpc_provider(provider):\n    return isinstance(provider, EthereumTesterProvider)\n\n\n@pytest.fixture()\ndef skip_if_testrpc():\n    def _skip_if_testrpc(w3):\n        if is_testrpc_provider(w3.provider):\n            pytest.skip()\n\n    return _skip_if_testrpc\n\n\n@pytest.fixture(scope=\"module\")\ndef wait_for_block():\n    def _wait_for_block(w3, block_number=1, timeout=None):\n        if not timeout:\n            timeout = (block_number - w3.eth.block_number) * 3\n        poll_delay_counter = PollDelayCounter()\n        with Timeout(timeout) as timeout:\n            while w3.eth.block_number < block_number:\n                w3.manager.request_blocking(\"evm_mine\", [])\n                timeout.sleep(poll_delay_counter())\n\n    return _wait_for_block\n\n\n@pytest.fixture(scope=\"module\")\ndef wait_for_transaction():\n    def _wait_for_transaction(w3, txn_hash, timeout=120):\n        poll_delay_counter = PollDelayCounter()\n        with Timeout(timeout) as timeout:\n            while True:\n                txn_receipt = w3.eth.get_transaction_receipt(txn_hash)\n                if txn_receipt is not None:\n                    break\n                time.sleep(poll_delay_counter())\n                timeout.check()\n\n        return txn_receipt\n\n    return _wait_for_transaction\n\n\n@pytest.fixture\ndef w3():\n    w3 = Web3(EthereumTesterProvider())\n    w3.eth.default_account = w3.eth.accounts[0]\n    return w3\n\n\n@pytest.fixture(scope=\"module\")\ndef w3_non_strict_abi():\n    w3 = Web3(EthereumTesterProvider())\n    w3.eth.default_account = w3.eth.accounts[0]\n    w3.strict_bytes_type_checking = False\n    return w3\n\n\n@pytest.fixture(autouse=True)\ndef print_warnings():\n    warnings.simplefilter(\"always\")\n\n\n# --- async --- #\n\n\ndef is_async_testrpc_provider(provider):\n    return isinstance(provider, AsyncEthereumTesterProvider)\n\n\n@pytest.fixture()\ndef async_skip_if_testrpc():\n    def _skip_if_testrpc(async_w3):\n        if is_async_testrpc_provider(async_w3.provider):\n            pytest.skip()\n\n    return _skip_if_testrpc\n\n\n@pytest_asyncio.fixture()\nasync def async_wait_for_block():\n    return _async_wait_for_block_fixture_logic\n\n\n@pytest_asyncio.fixture()\nasync def async_wait_for_transaction():\n    return _async_wait_for_transaction_fixture_logic\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.119140625,
          "content": "version: '3'\nservices:\n  sandbox:\n    build:\n      context: .\n    volumes:\n      - .:/code\n    command: tail -f /dev/null\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ens",
          "type": "tree",
          "content": null
        },
        {
          "name": "newsfragments",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.5126953125,
          "content": "[tool.autoflake]\nexclude = \"__init__.py\"\nremove_all_unused_imports = true\n\n[tool.isort]\ncombine_as_imports = true\nextra_standard_library = \"pytest\"\nforce_grid_wrap = 1\nforce_sort_within_sections = true\nhonor_noqa = true\nknown_first_party = \"web3\"\nknown_third_party = \"hypothesis\"\nmulti_line_output = 3\nprofile = \"black\"\nuse_parentheses = true\n# skip `__init__.py` files because sometimes order of initialization is important\nskip=\"__init__.py,web3/main.py,web3/utils/windows.py\"\n\n[tool.mypy]\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_subclassing_any = true\ndisallow_untyped_calls = true\ndisallow_untyped_decorators = false\ndisallow_untyped_defs = true\nignore_missing_imports = true\nstrict_equality = true\nstrict_optional = false\nwarn_redundant_casts = true\nwarn_return_any = false\nwarn_unused_configs = true\nwarn_unused_ignores = true\n\n[tool.pydocstyle]\n# All error codes found here:\n# http://www.pydocstyle.org/en/3.0.0/error_codes.html\n#\n# Ignored:\n# D1 - Missing docstring error codes\n#\n# Selected:\n# D2 - Whitespace error codes\n# D3 - Quote error codes\n# D4 - Content related error codes\nselect = \"D2,D3,D4\"\n\n# Extra ignores:\n# D200 - One-line docstring should fit on one line with quotes\n# D203 - 1 blank line required before class docstring\n# D204 - 1 blank line required after class docstring\n# D205 - 1 blank line required between summary line and description\n# D212 - Multi-line docstring summary should start at the first line\n# D302 - Use u\"\"\" for Unicode docstrings\n# D400 - First line should end with a period\n# D401 - First line should be in imperative mood\n# D412 - No blank lines allowed between a section header and its content\n# D415 - First line should end with a period, question mark, or exclamation point\nadd-ignore = \"D200,D203,D204,D205,D212,D302,D400,D401,D412,D415\"\n\n# Explanation:\n# D400 - Enabling this error code seems to make it a requirement that the first\n# sentence in a docstring is not split across two lines.  It also makes it a\n# requirement that no docstring can have a multi-sentence description without a\n# summary line.  Neither one of those requirements seem appropriate.\n\n[tool.pytest.ini_options]\naddopts = \"-v --showlocals --durations 10\"\nasyncio_mode = \"strict\"\nlog_date_format = \"%m-%d %H:%M:%S\"\nlog_format = \"%(levelname)8s  %(asctime)s  %(filename)20s  %(message)s\"\nxfail_strict = true\n\n[tool.towncrier]\n# Read https://github.com/ethereum/web3.py/blob/main/newsfragments/README.md for instructions\ndirectory = \"newsfragments\"\nfilename = \"docs/release_notes.rst\"\nissue_format = \"`#{issue} <https://github.com/ethereum/web3.py/issues/{issue}>`__\"\npackage = \"web3\"\ntitle_format = \"web3.py v{version} ({project_date})\"\nunderlines = [\"-\", \"~\", \"^\"]\n\n[[tool.towncrier.type]]\ndirectory = \"breaking\"\nname = \"Breaking Changes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"bugfix\"\nname = \"Bugfixes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"deprecation\"\nname = \"Deprecations\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"docs\"\nname = \"Improved Documentation\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"feature\"\nname = \"Features\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"internal\"\nname = \"Internal Changes - for web3.py Contributors\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"misc\"\nname = \"Miscellaneous Changes\"\nshowcontent = false\n\n[[tool.towncrier.type]]\ndirectory = \"performance\"\nname = \"Performance Improvements\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"removal\"\nname = \"Removals\"\nshowcontent = true\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.08984375,
          "content": "#!/usr/bin/env python\nfrom setuptools import (\n    find_packages,\n    setup,\n)\n\nextras_require = {\n    \"tester\": [\n        # Note: ethereum-maintained libraries in this list should be added to the\n        # `install_pre_releases.py` script.\n        \"eth-tester[py-evm]>=0.12.0b1,<0.13.0b1\",\n        \"py-geth>=5.1.0\",\n    ],\n    \"dev\": [\n        \"build>=0.9.0\",\n        \"bumpversion>=0.5.3\",\n        \"ipython\",\n        \"setuptools>=38.6.0\",\n        \"tqdm>4.32\",\n        \"twine>=1.13\",\n        \"wheel\",\n    ],\n    \"docs\": [\n        \"sphinx>=6.0.0\",\n        \"sphinx-autobuild>=2021.3.14\",\n        \"sphinx_rtd_theme>=1.0.0\",\n        \"towncrier>=21,<22\",\n    ],\n    \"test\": [\n        \"pytest-asyncio>=0.18.1,<0.23\",\n        \"pytest-mock>=1.10\",\n        \"pytest-xdist>=2.4.0\",\n        \"pytest>=7.0.0\",\n        \"flaky>=3.7.0\",\n        \"hypothesis>=3.31.2\",\n        \"tox>=4.0.0\",\n        \"mypy==1.10.0\",\n        \"pre-commit>=3.4.0\",\n    ],\n}\n\nextras_require[\"dev\"] = (\n    extras_require[\"dev\"]\n    + extras_require[\"docs\"]\n    + extras_require[\"test\"]\n    + extras_require[\"tester\"]\n)\nextras_require[\"test\"] = extras_require[\"test\"] + extras_require[\"tester\"]\n\n\nwith open(\"./README.md\") as readme:\n    long_description = readme.read()\n\n\nsetup(\n    name=\"web3\",\n    # *IMPORTANT*: Don't manually change the version here. Use `make bump`, as described in readme\n    version=\"7.6.1\",\n    description=\"\"\"web3: A Python library for interacting with Ethereum\"\"\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"The Ethereum Foundation\",\n    author_email=\"snakecharmers@ethereum.org\",\n    url=\"https://github.com/ethereum/web3.py\",\n    include_package_data=True,\n    install_requires=[\n        # Note: ethereum-maintained libraries in this list should be added to the\n        # `install_pre_releases.py` script.\n        \"eth-abi>=5.0.1\",\n        \"eth-account>=0.13.1\",\n        \"eth-hash[pycryptodome]>=0.5.1\",\n        \"eth-typing>=5.0.0\",\n        \"eth-utils>=5.0.0\",\n        \"hexbytes>=1.2.0\",\n        \"aiohttp>=3.7.4.post0\",\n        \"pydantic>=2.4.0\",\n        \"pywin32>=223;platform_system=='Windows'\",\n        \"requests>=2.23.0\",\n        \"typing-extensions>=4.0.1\",\n        \"types-requests>=2.0.0\",\n        \"websockets>=10.0.0,<14.0.0\",\n        \"pyunormalize>=15.0.0\",\n    ],\n    python_requires=\">=3.8, <4\",\n    extras_require=extras_require,\n    py_modules=[\"web3\", \"ens\"],\n    license=\"MIT\",\n    zip_safe=False,\n    keywords=\"ethereum\",\n    packages=find_packages(exclude=[\"scripts\", \"scripts.*\", \"tests\", \"tests.*\"]),\n    package_data={\"web3\": [\"py.typed\"]},\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 2.71875,
          "content": "[tox]\nenvlist=\n    py{38,39,310,311,312,313}-{ens,core,lint,wheel}\n    py{38,39,310,311,312,313}-integration-{goethereum,ethtester}\n    docs\n    benchmark\n    windows-wheel\n\n[flake8]\nexclude= venv*,.tox,docs,build\nextend-ignore=E203,W503\nmax-line-length=88\nper-file-ignores=__init__.py:F401\n\n[blocklint]\nmax_issue_threshold=1\n\n[testenv]\nallowlist_externals=make,pre-commit\ninstall_command=python -m pip install {opts} {packages}\nusedevelop=True\ncommands=\n    core: pytest {posargs:tests/core -m \"not asyncio\"}\n    core_async: pytest {posargs:tests/core -m asyncio}\n    ens: pytest {posargs:tests/ens --ignore=tests/ens/normalization/test_normalize_name_ensip15.py}\n    ensip15: pytest {posargs:tests/ens/normalization/test_normalize_name_ensip15.py -q}\n    integration-goethereum-ipc: pytest {posargs:tests/integration/go_ethereum/test_goethereum_ipc.py -k \"not Async\"}\n    integration-goethereum-ipc_async: pytest {posargs:tests/integration/go_ethereum/test_goethereum_ipc.py -k Async}\n    integration-goethereum-http: pytest {posargs:tests/integration/go_ethereum/test_goethereum_http.py -k \"not Async\"}\n    integration-goethereum-http_async: pytest {posargs:tests/integration/go_ethereum/test_goethereum_http.py -k Async}\n    integration-goethereum-legacy_ws: pytest {posargs:tests/integration/go_ethereum/test_goethereum_legacy_ws.py}\n    integration-goethereum-ws: pytest {posargs:tests/integration/go_ethereum/test_goethereum_ws}\n    integration-ethtester: pytest {posargs:tests/integration/test_ethereum_tester.py}\n    docs: make check-docs-ci\ndeps =\n    .[test]\n    ; install both `docs` and `test` dependencies for the `docs` environment\n    docs: .[docs]\npassenv =\n    GETH_BINARY\n    GOROOT\n    GOPATH\n    WEB3_INFURA_PROJECT_ID\n    WEB3_INFURA_API_SECRET\nbasepython =\n    docs: python\n    windows-wheel: python\n    py38: python3.8\n    py39: python3.9\n    py310: python3.10\n    py311: python3.11\n    py312: python3.12\n    py313: python3.13\n\n[testenv:py{38,39,310,311,312,313}-lint]\ndeps=pre-commit\nextras=dev\ncommands=\n    pre-commit install\n    pre-commit run --all-files --show-diff-on-failure\n\n[testenv:benchmark]\nbasepython=python\ncommands=\n    python {toxinidir}/web3/tools/benchmark/main.py --num-calls 5\n    python {toxinidir}/web3/tools/benchmark/main.py --num-calls 50\n    python {toxinidir}/web3/tools/benchmark/main.py --num-calls 100\n\n\n[testenv:py{38,39,310,311,312,313}-wheel]\ndeps=\n    wheel\n    build[virtualenv]\nallowlist_externals=\n    /bin/rm\n    /bin/bash\ncommands=\n    /bin/bash {toxinidir}/web3/scripts/release/test_wheel_install.sh\nskip_install=true\n\n[testenv:windows-wheel]\ndeps=\n    wheel\n    build[virtualenv]\nallowlist_externals=\n    bash.exe\ncommands=\n    bash.exe {toxinidir}/web3/scripts/release/test_windows_wheel_install.sh\nskip_install=true\n"
        },
        {
          "name": "web3",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}