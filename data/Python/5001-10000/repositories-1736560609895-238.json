{
  "metadata": {
    "timestamp": 1736560609895,
    "page": 238,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lanpa/tensorboardX",
      "stars": 7894,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.5546875,
          "content": "codecov:\n    bot: lanpa\ncoverage:\n  status:\n    project:                   # measuring the overall project coverage\n      default:                 # context, you can create multiple ones with custom titles\n        enabled: yes \n    patch:\n      default:\n        enabled: no\ncomment:\n  layout: \"diff, flags, files\"\n  behavior: default\n  require_changes: false  # if true: only post the comment if coverage changes\n  require_base: no        # [yes :: must have a base report to post]\n  require_head: yes       # [yes :: must have a head report to post]\n  branches: null\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.1201171875,
          "content": "[flake8]\nmax-line-length = 120\nignore = W605,E305,E402,E721,E741,F401,F403,F405,F821,F841,F999\nexclude = tensorboardX/proto"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "proto_src/\nprotoc-*.zip\nprotoc/\n__pycache__\ndocs/_*\nbuild\ndist\n*.egg-info\nruns/*\n*.pyc\nmnist\ntensorboardX/_version.py\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.0068359375,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#    - pdf\n#    - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt\n\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 5.0087890625,
          "content": "History\n=======\n2.6.2.2 (2023-08-20)\n---------------------\n* Added protobuf's lower bound version (>=3.20)\n\n\n2.6.2.1 (2023-08-20)\n---------------------\n* [Yanked because operation miss] Added protobuf's lower bound version (>=3.20)\n\n2.6.2 (2023-07-30)\n-------------------\n* [Yanked because wrong dependency] Removed version limit for protobuf\n\n2.6.1 (2023-06-18)\n-------------------\n* Expose use_strict_trace parameter in add_graph (#694)\n* Upgrade to protobuf 4\n* Fix git based package versioning\n* Fix GCS Connection Error #606 (#686)\n\n2.6 (2023-02-12)\n-------------------\n* Fixed several deprecation warnings\n* Update dependencies\n\n2.5.1 (2022-06-05)\n-------------------\n* Enforce protobuf's version upper bound\n\n2.5 (2022-02-22)\n-----------------\n* Fix deprecation warnings\n* Comet integration improvements (#658)\n\n2.4.1 (2021-11-20)\n-------------------\n* Fix a comet plugin bug if writer is reused. (#639)\n\n2.4 (2021-06-30)\n-----------------\n* Remove a dependency issue. (#631)\n\n2.3 (2021-06-20)\n-----------------\n* Support logging to comet.ml simutaneously.\n\n2.2 (2021-04-03)\n-----------------\n* Support for type hints.\n* Dropped Python 2 support.\n* Bug fixes, see the commit log in Github.\n\n2.1 (2020-07-05)\n-----------------\n* Global SummaryWriter that mimics python's default logger class, concurrent write is supported.\n* 200x speed up for add_audio. Please install the soundfile package for this feature.\n* Supports jax tensors.\n* The add_graph function is delegated to the one in torch.utils.tensorboard.\n* Bug fixes, see the commit log in Github.\n\n2.0 (2019-12-31)\n-----------------\n* Now you can tag Hparams trials with custom name instead of the default epoch time\n* Fixed a bug that add_hparams are rendered incorrectly with non-string values\n* Supports logging to Amazon S3 or Google Cloud Storage\n* Bug fixes and error message for add_embedding function\n* Draw openvino format with add_openvino_graph\n\n1.9 (2019-10-04)\n-----------------\n* Use new JIT backend for pytorch. This works better with pytorch 1.2 and 1.3\n* Supports hparams plugin\n* add_embedding now supports numpy array input\n\n1.8 (2019-07-05)\n-----------------\n* Draw label text on image with bounding box provided.\n* crc32c speed up (optional by installing crc32c manually)\n* Rewrite add_graph. onnx backend is replaced by JIT to support more advanced structure.\n* Now you can add_mesh() to visualize colorful point cloud or meshes.\n\n1.7 (2019-05-19)\n-----------------\n* Able to write to S3\n* Fixed raw histogram issue that nothing is shown in TensorBoard\n* Users can use various image/video dimension permutation by passing 'dataformats' parameter.\n* You can bybass the writer by passing write_to_disk=True to SummaryWriter\n\n\n1.6 (2019-01-02)\n-----------------\n* Many graph related bug is fixed in this version.\n* New function: add_images(). This function accepts 4D iamge tensor. See documentation.\n* Make add_image_with_boxes() usable.\n* API change: add_video now accepts BxTxCxHxW instead of BxCxTxHxW tensor.\n\n1.5 (2018-12-10)\n-----------------\n* Add API for Custom scalar\n* Add support for logging directly to S3\n* Add support for Caffe2 graph\n* Pytorch 1.0.0 JIT graph support (alpha-release)\n\n1.4 (2018-08-09)\n-----------------\n* Made add_text compatible with tensorboard>1.6\n* Fix the issue of strange histogram if default binning method is used\n* Supports passing matplotlib figures to add_image()\n* Resolve namespace confliction with TF tensorboard\n* add_image_boxes function\n* Supports custom timestamp for event\n\n1.2 (2018-04-21)\n-----------------\n* Supports tensorshape information in graph visualization. Drop support for 0.3.1\n* Adds add_video function\n\n1.1 (2018-02-21)\n-----------------\n* Supports pytorch 0.3.1 (hacky)\n\n1.0 (2018-01-18)\n-----------------\n* Supports graph (the pretty one)\n\n0.9 (2017-11-11)\n-----------------\n* Supports markdown for add_text function\n* It's ready to log precision recall curve (needs tensorboard>=0.4)\n* Adds context manager for the SummaryWriter class\n\n0.8 (2017-09-25)\n-----------------\n* Package name renamed to tensorboardX to fix namespace confliction with tensorflow's tensorboard\n* Supports multi-scalars and JSON export\n* Multiple Embeddings in One Experiment \n* Supports Chainer and mxnet\n\n0.7 (2017-08-22)\n-----------------\n* remove tensorflow dependency for embedding function\n* fixed incorrect image<->label pairing in embedding function (#12)\n* unifies API call and adds docstring. Documentation is available at: http://tensorboard-pytorch.readthedocs.io/\n\n0.6.5 (2017-07-30)\n------------------\n* add travis test (py2.7, py3.6)\n* add support for python2 (in PyPI)\n\n0.6 (2017-07-18)\n-----------------\n* supports embedding\n\n0.5 (2017-07-18)\n-----------------\n* supports graph summary\n* fixed np.histogram issue\n\n0.4 (2017-07-12)\n-----------------\n* supports text summary\n\n0.3 (2017-07-03)\n-----------------\n* supports audio summary\n\n0.2 (2017-06-24)\n-----------------\n* simplifies add_image API\n* speed up add_histogram API by 35x\n\n\n0.1 (2017-06-13)\n------------------\n* First commit. Reference:\n\nhttps://github.com/TeamHG-Memex/tensorboard_logger\nhttps://github.com/dmlc/tensorboard\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2025 Tzu-Wei Huang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.205078125,
          "content": "include HISTORY.rst\ninclude LICENSE\ninclude compile.sh\nrecursive-include tensorboardX/proto *\nrecursive-exclude test *\nrecursive-exclude examples *\nrecursive-include tensorboardX/beholder *\nglobal-exclude *.pyc"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.53125,
          "content": "# tensorboardX\n\n[![PyPI version](https://badge.fury.io/py/tensorboardX.svg)](https://badge.fury.io/py/tensorboardX)\n[![Documentation Status](https://readthedocs.org/projects/tensorboardx/badge/?version=latest)](https://tensorboardx.readthedocs.io/en/latest/?badge=latest)\n[![Coverage Status](https://codecov.io/gh/lanpa/tensorboardX/branch/master/graph/badge.svg)](https://codecov.io/gh/lanpa/tensorboardX/)\n\nWrite TensorBoard events with simple function call.\n\nThe current release (v2.6.2.2) is tested on anaconda3, with PyTorch 1.11.0 / torchvision 0.12 / tensorboard 2.9.0.\n\n* Support `scalar`, `image`, `figure`, `histogram`, `audio`, `text`, `graph`, `onnx_graph`, `embedding`, `pr_curve`, `mesh`, `hyper-parameters`\n  and `video` summaries.\n\n* [FAQ](https://github.com/lanpa/tensorboardX/wiki)\n\n\n## Install\n\n`pip install tensorboardX`\n\nor build from source:\n\n`pip install 'git+https://github.com/lanpa/tensorboardX'`\n\nYou can optionally install [`crc32c`](https://github.com/ICRAR/crc32c) to speed up.\n\n`pip install crc32c`\n\nStarting from tensorboardX 2.1, You need to install `soundfile` for the `add_audio()` function (200x speedup).\n\n`pip install soundfile`\n\n## Example\n\n* Clone the files in https://github.com/lanpa/tensorboardX/tree/master/examples\n* Run the demo script: e.g. `python examples/demo.py`\n* Start TensorBoard with `tensorboard --logdir runs`  \n\n\n```python\n# demo.py\n\nimport torch\nimport torchvision.utils as vutils\nimport numpy as np\nimport torchvision.models as models\nfrom torchvision import datasets\nfrom tensorboardX import SummaryWriter\n\nresnet18 = models.resnet18(False)\nwriter = SummaryWriter()\nsample_rate = 44100\nfreqs = [262, 294, 330, 349, 392, 440, 440, 440, 440, 440, 440]\n\nfor n_iter in range(100):\n\n    dummy_s1 = torch.rand(1)\n    dummy_s2 = torch.rand(1)\n    # data grouping by `slash`\n    writer.add_scalar('data/scalar1', dummy_s1[0], n_iter)\n    writer.add_scalar('data/scalar2', dummy_s2[0], n_iter)\n\n    writer.add_scalars('data/scalar_group', {'xsinx': n_iter * np.sin(n_iter),\n                                             'xcosx': n_iter * np.cos(n_iter),\n                                             'arctanx': np.arctan(n_iter)}, n_iter)\n\n    dummy_img = torch.rand(32, 3, 64, 64)  # output from network\n    if n_iter % 10 == 0:\n        x = vutils.make_grid(dummy_img, normalize=True, scale_each=True)\n        writer.add_image('Image', x, n_iter)\n\n        dummy_audio = torch.zeros(sample_rate * 2)\n        for i in range(x.size(0)):\n            # amplitude of sound should in [-1, 1]\n            dummy_audio[i] = np.cos(freqs[n_iter // 10] * np.pi * float(i) / float(sample_rate))\n        writer.add_audio('myAudio', dummy_audio, n_iter, sample_rate=sample_rate)\n\n        writer.add_text('Text', 'text logged at step:' + str(n_iter), n_iter)\n\n        for name, param in resnet18.named_parameters():\n            writer.add_histogram(name, param.clone().cpu().data.numpy(), n_iter)\n\n        # needs tensorboard 0.4RC or later\n        writer.add_pr_curve('xoxo', np.random.randint(2, size=100), np.random.rand(100), n_iter)\n\ndataset = datasets.MNIST('mnist', train=False, download=True)\nimages = dataset.test_data[:100].float()\nlabel = dataset.test_labels[:100]\n\nfeatures = images.view(100, 784)\nwriter.add_embedding(features, metadata=label, label_img=images.unsqueeze(1))\n\n# export scalar data to JSON for external processing\nwriter.export_scalars_to_json(\"./all_scalars.json\")\nwriter.close()\n```\n\n## Screenshots\n\n<img src=\"screenshots/Demo.gif\">\n\n## Using TensorboardX with Comet\n\nTensorboardX now supports logging directly to [Comet](https://www.comet.com/site/products/ml-experiment-tracking/?utm_source=tensorboardx&utm_medium=partner&utm_campaign=partner_tensorboardx_2023). Comet is a **free** cloud based solution that allows you to automatically track, compare and explain your experiments. It adds a lot of functionality on top of tensorboard such as dataset management, diffing experiments, seeing the code that generated the results and more.\n\nThis works out of the box and just require an additional line of code. See a full code example in this [Colab Notebook](https://colab.research.google.com/drive/1cTO3tgZ03nuJQ8kOjZhEiwbB-45tV4lm?usp=sharing)\n\n<p align=\"center\">\n<img src=\"screenshots/comet.gif\" width=\"750\" height=\"400\">\n</p>\n\n## Tweaks\n\nTo add more ticks for the slider (show more image history), check https://github.com/lanpa/tensorboardX/issues/44 or \nhttps://github.com/tensorflow/tensorboard/pull/1138\n\n## Reference\n\n* [TeamHG-Memex/tensorboard_logger](https://github.com/TeamHG-Memex/tensorboard_logger)\n* [dmlc/tensorboard](https://github.com/dmlc/tensorboard)\n"
        },
        {
          "name": "compile.sh",
          "type": "blob",
          "size": 1.3583984375,
          "content": "#!/bin/bash\n\n# Exit on error\n# set -e\n\nDESIRED_PROTO_VERSION=\"22.3\"\n\n# call protoc direclty, if version is not the desired one, download the desired vesrion.\n\n\nif [ -f \"protoc/bin/protoc\" ]; then\n  PROTOC_BIN=\"protoc/bin/protoc\"\nelse\n  PROTOC_BIN=`which protoc`\nfi\n\necho \"using\" $PROTOC_BIN\n\nCURRENT_PROTOC_VER=`${PROTOC_BIN} --version`\nif [ -z ${PROTOC_BIN} ] || [[ \"$CURRENT_PROTOC_VER\" != \"libprotoc \"$DESIRED_PROTO_VERSION ]]; then\n  # Download and use the latest version of protoc.\n  if [ \"$(uname)\" == \"Darwin\" ]; then\n    PROTOC_ZIP=\"protoc-\"$DESIRED_PROTO_VERSION\"-osx-x86_64.zip\"\n  else\n    PROTOC_ZIP=\"protoc-\"$DESIRED_PROTO_VERSION\"-linux-x86_64.zip\"\n  fi\n  WGET_BIN=`which wget`\n  if [[ ! -z ${WGET_BIN} ]]; then\n    ${WGET_BIN} https://github.com/protocolbuffers/protobuf/releases/download/v\"$DESIRED_PROTO_VERSION\"/${PROTOC_ZIP}\n    rm -rf protoc\n    python -c \"import zipfile; zipfile.ZipFile('\"${PROTOC_ZIP}\"','r').extractall('protoc')\"\n    PROTOC_BIN=protoc/bin/protoc\n    chmod +x ${PROTOC_BIN}\n  fi\nfi\n\n# Regenerate\nif [[ ! -z ${PROTOC_BIN} ]]; then\n  # Delete all existing Python protobuf (*_pb2.py) output\n  rm -rf tensorboardX/proto/*pb2*.py\n  ${PROTOC_BIN} tensorboardX/proto/*.proto --python_out=.\n\n  echo \"Done generating tensorboardX/proto/*pb2*.py\"\nelse\n  echo \"protoc not installed so can't regenerate tensorboardX/proto/*pb2*.py, using precompiled version.\"\nfi\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.2021484375,
          "content": "[project]\nname = \"tensorboardx\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.9\"\ndependencies = []\n\n[tool.uv.sources]\ntorch = { index = \"pytorch-cpu\" }\ntorchvision = { index = \"pytorch-cpu\" }\n\n[[tool.uv.index]]\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\nexplicit = true\n\n[dependency-groups]\ndev = [\n    \"pytest-cov>=6.0.0\",\n    \"pytest>=8.3.4\",\n    \"protobuf==4.22.3\",\n    \"torch>=2.5.1\",\n    \"torchvision>=0.20.1\",\n    \"numpy>=2.0.2\",\n    \"tensorboard>=2.18.0\",\n    \"boto3>=1.35.81\",\n    \"matplotlib>=3.9.4\",\n    \"moto<5\",\n    \"soundfile>=0.12.1\",\n    \"visdom>=0.2.4\",\n    \"onnx>=1.17.0\",\n    \"imageio==2.27\",\n    \"ruff>=0.8.4\",\n]\n\n[tool.ruff]\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \"proto\",\n]\n\n[tool.ruff.lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\n# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or\n# McCabe complexity (`C901`) by default.\nselect = [\n    # pycodestyle\n    \"E\",\n    # Pyflakes\n    \"F\",\n    # pyupgrade\n    \"UP\",\n    # flake8-bugbear\n#    \"B\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n]\nignore = [\"F401\", \"E501\", \"E721\", \"E741\"]\n\n"
        },
        {
          "name": "run_pytest.sh",
          "type": "blob",
          "size": 0.3349609375,
          "content": "#!/bin/bash\n\nSCRIPT_DIR=\"$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\n\npip install -r $SCRIPT_DIR/test-requirements.txt\n\nif [ `ps -ef|grep visdom |wc -l` = \"1\" ]\n    then\n    echo `ps|grep visdom |wc -l`\n    echo \"no visdom\"\n    visdom &\n    # kill visdom when done testing\n    trap \"kill -SIGTERM $!\" EXIT\nfi\n\npytest\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.4541015625,
          "content": "[metadata]\nlicense_files = LICENSE\n\n[bdist_wheel]\nuniversal = 1\n\n[tool:pytest]\nfilterwarnings =\n    ignore:Call to deprecated create function FieldDescriptor\n    ignore:Call to deprecated create function Descriptor\n    ignore:Call to deprecated create function EnumDescriptor\n    ignore:Call to deprecated create function EnumValueDescriptor\n    ignore:Call to deprecated create function FileDescriptor\n    ignore:Call to deprecated create function OneofDescriptor\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.0986328125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport subprocess\nimport sys\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\n# Dynamically compile protos\ndef compileProtoBuf():\n    res = subprocess.call(['bash', './compile.sh'])\n    assert res == 0, 'cannot compile protobuf'\n\nclass PostDevelopCommand(develop):\n    \"\"\"Post-installation for development mode.\"\"\"\n    def run(self):\n        develop.run(self)\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        for r in requirements:\n            subprocess.run(f\"pip install '{r}'\", shell=True)\n        install.run(self)\n\nwith open('HISTORY.rst') as history_file:\n    history = history_file.read()\n\nrequirements = [\n    'numpy',\n    'packaging',\n    'protobuf>=3.20',\n]\n\n\nsetup(\n    name='tensorboardX',\n    description='TensorBoardX lets you watch Tensors Flow without Tensorflow',\n    long_description=history,\n    author='Tzu-Wei Huang',\n    author_email='huang.dexter@gmail.com',\n    url='https://github.com/lanpa/tensorboardX',\n    packages=['tensorboardX'],\n    include_package_data=True,\n    install_requires=requirements,\n    use_scm_version={\n        'write_to': \"tensorboardX/_version.py\",\n    },\n    setup_requires=['setuptools_scm'],\n    license='MIT license',\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n\n\n# pypi checklist: \n# update History.rst readme.md\n# git commit -m \"release version ...\"\n# git tag -a v1.0.0 -m \"version 1.0.0\"\n# git push -u origin HEAD --tags\n# go github actions, enter version number v1.0.0 then publish\n\n"
        },
        {
          "name": "tensorboardX",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.150390625,
          "content": "flake8\npytest\ntorch\ntorchvision\nprotobuf==4.22.3\nnumpy\ntensorboard\nboto3\nmatplotlib\nmoto<5\nsoundfile\nvisdom\nonnx\npytest-cov\nimageio==2.27  # moviepy bug\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}