{
  "metadata": {
    "timestamp": 1736560858019,
    "page": 564,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xinntao/ESRGAN",
      "stars": 6117,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0771484375,
          "content": "# folder\n.vscode\n\n# file type\n*.svg\n*.pyc\n*.pth\n*.t7\n*.caffemodel\n*.mat\n*.npy\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LR",
          "type": "tree",
          "content": null
        },
        {
          "name": "QA.md",
          "type": "blob",
          "size": 2.41015625,
          "content": "# Frequently Asked Questions\n\n### 1. How to reproduce your results in the [PIRM18-SR Challenge](https://www.pirm2018.org/PIRM-SR.html) (with low perceptual index)?\n\nFirst, the released ESRGAN model in the GitHub (`RRDB_ESRGAN_x4.pth`) is **different** from the model we submitted in the competition.\nWe found that the lower perceptual index does not always guarantee a better visual quality.\nThe aims for the competition and our ESRGAN work will be a bit different.\nWe think the aim for the competition is the lower perceptual index and the aim for our ESRGAN work is the better visual quality.\n> More analyses can be found in Sec 4.1 and Sec 5 in [PIRM18-SR Chanllenge report](https://arxiv.org/pdf/1809.07517.pdf).\n> It points out that PI (perceptual index) is well correlated with the human-opinion-scores on a coarse scale, but it is not always well-correlated with these scores on a finer scale. This highlights the urgent need for better perceptual quality metrics.)\n\nTherefore, in the PIRM18-SR Challenge competition, we used several tricks for the best perceptual index (see Section 4.5 in the [paper](https://arxiv.org/abs/1809.00219)).\n\nHere, we provid the models and codes used in the competition, which is able to produce the results on the `PIRM test dataset` (we use MATLAB 2016b/2017a):\n\n| Group       | Perceptual index         | RMSE  |\n| ------------- |:-------------:| -----:|\n| SuperSR     | 1.978 | 15.30 |\n\n> 1. Download the model and codes from [GoogleDrive](https://drive.google.com/file/d/1l0gBRMqhVLpL_-7R7aN-q-3hnv5ADFSM/view?usp=sharing)\n> 2. Put LR input images in the `LR` folder\n> 3. Run `python test.py`\n> 4. Run `main_reverse_filter.m` in MATLAB as a post processing\n> 5. The results on my computer are: Perceptual index: **1.9777** and RMSE: **15.304**\n\n\n### 2. How do you get the perceptual index in your ESRGAN paper?\nIn our paper, we provide the perceptual index in two places.\n\n1). In the Fig. 2, the perceptual index on PIRM self validation dataset is obtained with the **model we submitted in the competition**. \nSince the pupose of this figure is to show the perception-distortion plane. And we also use the post-precessing here same as in the competition.\n\n2). In the Fig.7, the perceptual indexs are provided as references and they are tested on the data generated by the released ESRGAN model `RRDB_ESRGAN_x4.pth` in the GiuHub.\nAlso, there is **no** post-processing when testing the ESRGAN model for better visual quality.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.6474609375,
          "content": "## ESRGAN (Enhanced SRGAN) [:rocket: [BasicSR](https://github.com/xinntao/BasicSR)] [[Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN)]\n\n:sparkles: **New Updates.**\n\nWe have extended ESRGAN to [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN), which is a **more practical algorithm for real-world image restoration**. For example, it can also remove annoying JPEG compression artifacts. <br> You are recommended to have a try :smiley:\n\nIn the [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN) repo,\n\n- You can still use the original ESRGAN model or your re-trained ESRGAN model. [The model zoo in Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN#european_castle-model-zoo).\n- We provide a more handy inference script, which supports 1) **tile** inference; 2) images with **alpha channel**; 3) **gray** images; 4) **16-bit** images.\n- We also provide a **Windows executable file** `RealESRGAN-ncnn-vulkan` for easier use without installing the environment. This executable file also includes the original ESRGAN model.\n- The full training codes are also released in the [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN) repo.\n\nWelcome to open issues or open discussions in the [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN) repo.\n\n- If you have any question, you can open an issue in the [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN) repo.\n- If you have any good ideas or demands, please open an issue/discussion in the [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN) repo to let me know.\n- If you have some images that Real-ESRGAN could not well restored, please also open an issue/discussion in the [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN) repo. I will record it (but I cannot guarantee to resolve it😛).\n\nHere are some examples for Real-ESRGAN:\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/assets/teaser.jpg\">\n</p>\n:book: Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data\n\n> [[Paper](https://arxiv.org/abs/2107.10833)] <br>\n> [Xintao Wang](https://xinntao.github.io/), Liangbin Xie, [Chao Dong](https://scholar.google.com.hk/citations?user=OSDCB0UAAAAJ), [Ying Shan](https://scholar.google.com/citations?user=4oXBp9UAAAAJ&hl=en) <br>\n> Applied Research Center (ARC), Tencent PCG<br>\n> Shenzhen Institutes of Advanced Technology, Chinese Academy of Sciences\n\n-----\n\nAs there may be some repos have dependency on this ESRGAN repo, we will not modify this ESRGAN repo (especially the codes).\n\nThe following is the original README:\n\n#### The training codes are in :rocket: [BasicSR](https://github.com/xinntao/BasicSR). This repo only provides simple testing codes, pretrained models and the network interpolation demo.\n\n[BasicSR](https://github.com/xinntao/BasicSR) is an **open source** image and video super-resolution toolbox based on PyTorch (will extend to more restoration tasks in the future). <br>\nIt includes methods such as **EDSR, RCAN, SRResNet, SRGAN, ESRGAN, EDVR**, etc. It now also supports **StyleGAN2**.\n\n### Enhanced Super-Resolution Generative Adversarial Networks\nBy Xintao Wang, [Ke Yu](https://yuke93.github.io/), Shixiang Wu, [Jinjin Gu](http://www.jasongt.com/), Yihao Liu, [Chao Dong](https://scholar.google.com.hk/citations?user=OSDCB0UAAAAJ&hl=en), [Yu Qiao](http://mmlab.siat.ac.cn/yuqiao/), [Chen Change Loy](http://personal.ie.cuhk.edu.hk/~ccloy/)\n\nWe won the first place in [PIRM2018-SR competition](https://www.pirm2018.org/PIRM-SR.html) (region 3) and got the best perceptual index.\nThe paper is accepted to [ECCV2018 PIRM Workshop](https://pirm2018.org/).\n\n:triangular_flag_on_post: Add [Frequently Asked Questions](https://github.com/xinntao/ESRGAN/blob/master/QA.md).\n\n> For instance,\n> 1. How to reproduce your results in the PIRM18-SR Challenge (with low perceptual index)?\n> 2. How do you get the perceptual index in your ESRGAN paper?\n\n#### BibTeX\n\n    @InProceedings{wang2018esrgan,\n        author = {Wang, Xintao and Yu, Ke and Wu, Shixiang and Gu, Jinjin and Liu, Yihao and Dong, Chao and Qiao, Yu and Loy, Chen Change},\n        title = {ESRGAN: Enhanced super-resolution generative adversarial networks},\n        booktitle = {The European Conference on Computer Vision Workshops (ECCVW)},\n        month = {September},\n        year = {2018}\n    }\n\n<p align=\"center\">\n  <img src=\"figures/baboon.jpg\">\n</p>\n\nThe **RRDB_PSNR** PSNR_oriented model trained with DF2K dataset (a merged dataset with [DIV2K](https://data.vision.ee.ethz.ch/cvl/DIV2K/) and [Flickr2K](http://cv.snu.ac.kr/research/EDSR/Flickr2K.tar) (proposed in [EDSR](https://github.com/LimBee/NTIRE2017))) is also able to achive high PSNR performance.\n\n| <sub>Method</sub> | <sub>Training dataset</sub> | <sub>Set5</sub> | <sub>Set14</sub> | <sub>BSD100</sub> | <sub>Urban100</sub> | <sub>Manga109</sub> |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| <sub>[SRCNN](http://mmlab.ie.cuhk.edu.hk/projects/SRCNN.html)</sub>| <sub>291</sub>| <sub>30.48/0.8628</sub> |<sub>27.50/0.7513</sub>|<sub>26.90/0.7101</sub>|<sub>24.52/0.7221</sub>|<sub>27.58/0.8555</sub>|\n| <sub>[EDSR](https://github.com/thstkdgus35/EDSR-PyTorch)</sub> | <sub>DIV2K</sub> | <sub>32.46/0.8968</sub> | <sub>28.80/0.7876</sub> | <sub>27.71/0.7420</sub> | <sub>26.64/0.8033</sub> | <sub>31.02/0.9148</sub> |\n| <sub>[RCAN](https://github.com/yulunzhang/RCAN)</sub> |  <sub>DIV2K</sub> | <sub>32.63/0.9002</sub> | <sub>28.87/0.7889</sub> | <sub>27.77/0.7436</sub> | <sub>26.82/ 0.8087</sub>| <sub>31.22/ 0.9173</sub>|\n|<sub>RRDB(ours)</sub>| <sub>DF2K</sub>| <sub>**32.73/0.9011**</sub> |<sub>**28.99/0.7917**</sub> |<sub>**27.85/0.7455**</sub> |<sub>**27.03/0.8153**</sub> |<sub>**31.66/0.9196**</sub>|\n\n## Quick Test\n#### Dependencies\n- Python 3\n- [PyTorch >= 1.0](https://pytorch.org/) (CUDA version >= 7.5 if installing with CUDA. [More details](https://pytorch.org/get-started/previous-versions/))\n- Python packages:  `pip install numpy opencv-python`\n\n### Test models\n1. Clone this github repo.\n```\ngit clone https://github.com/xinntao/ESRGAN\ncd ESRGAN\n```\n2. Place your own **low-resolution images** in `./LR` folder. (There are two sample images - baboon and comic).\n3. Download pretrained models from [Google Drive](https://drive.google.com/drive/u/0/folders/17VYV_SoZZesU6mbxz2dMAIccSSlqLecY) or [Baidu Drive](https://pan.baidu.com/s/1-Lh6ma-wXzfH8NqeBtPaFQ). Place the models in `./models`. We provide two models with high perceptual quality and high PSNR performance (see [model list](https://github.com/xinntao/ESRGAN/tree/master/models)).\n4. Run test. We provide ESRGAN model and RRDB_PSNR model and you can config in the `test.py`.\n```\npython test.py\n```\n5. The results are in `./results` folder.\n### Network interpolation demo\nYou can interpolate the RRDB_ESRGAN and RRDB_PSNR models with alpha in [0, 1].\n\n1. Run `python net_interp.py 0.8`, where *0.8* is the interpolation parameter and you can change it to any value in [0,1].\n2. Run `python test.py models/interp_08.pth`, where *models/interp_08.pth* is the model path.\n\n<p align=\"center\">\n  <img height=\"400\" src=\"figures/43074.gif\">\n</p>\n\n## Perceptual-driven SR Results\n\nYou can download all the resutls from [Google Drive](https://drive.google.com/drive/folders/1iaM-c6EgT1FNoJAOKmDrK7YhEhtlKcLx?usp=sharing). (:heavy_check_mark: included;  :heavy_minus_sign: not included; :o: TODO)\n\nHR images can be downloaed from [BasicSR-Datasets](https://github.com/xinntao/BasicSR#datasets).\n\n| Datasets |LR | [*ESRGAN*](https://arxiv.org/abs/1809.00219) | [SRGAN](https://arxiv.org/abs/1609.04802) | [EnhanceNet](http://openaccess.thecvf.com/content_ICCV_2017/papers/Sajjadi_EnhanceNet_Single_Image_ICCV_2017_paper.pdf) | [CX](https://arxiv.org/abs/1803.04626) |\n|:---:|:---:|:---:|:---:|:---:|:---:|\n| Set5 |:heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:| :o: |\n| Set14 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:| :o: |\n| BSDS100 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:| :o: |\n| [PIRM](https://pirm.github.io/) <br><sup>(val, test)</sup> | :heavy_check_mark: | :heavy_check_mark: | :heavy_minus_sign: | :heavy_check_mark:| :heavy_check_mark: |\n| [OST300](https://arxiv.org/pdf/1804.02815.pdf) |:heavy_check_mark: | :heavy_check_mark: | :heavy_minus_sign: | :heavy_check_mark:| :o: |\n| urban100 | :heavy_check_mark: | :heavy_check_mark: | :heavy_minus_sign: | :heavy_check_mark:| :o: |\n| [DIV2K](https://data.vision.ee.ethz.ch/cvl/DIV2K/) <br><sup>(val, test)</sup> | :heavy_check_mark: | :heavy_check_mark: | :heavy_minus_sign: | :heavy_check_mark:| :o: |\n\n## ESRGAN\nWe improve the [SRGAN](https://arxiv.org/abs/1609.04802) from three aspects:\n1. adopt a deeper model using Residual-in-Residual Dense Block (RRDB) without batch normalization layers.\n2. employ [Relativistic average GAN](https://ajolicoeur.wordpress.com/relativisticgan/) instead of the vanilla GAN.\n3. improve the perceptual loss by using the features before activation.\n\nIn contrast to SRGAN, which claimed that **deeper models are increasingly difficult to train**, our deeper ESRGAN model shows its superior performance with easy training.\n\n<p align=\"center\">\n  <img height=\"120\" src=\"figures/architecture.jpg\">\n</p>\n<p align=\"center\">\n  <img height=\"180\" src=\"figures/RRDB.png\">\n</p>\n\n## Network Interpolation\nWe propose the **network interpolation strategy** to balance the visual quality and PSNR.\n\n<p align=\"center\">\n  <img height=\"500\" src=\"figures/net_interp.jpg\">\n</p>\n\nWe show the smooth animation with the interpolation parameters changing from 0 to 1.\nInterestingly, it is observed that the network interpolation strategy provides a smooth control of the RRDB_PSNR model and the fine-tuned ESRGAN model.\n\n<p align=\"center\">\n  <img height=\"480\" src=\"figures/81.gif\">\n  &nbsp &nbsp\n  <img height=\"480\" src=\"figures/102061.gif\">\n</p>\n\n## Qualitative Results\nPSNR (evaluated on the Y channel) and the perceptual index used in the PIRM-SR challenge are also provided for reference.\n\n<p align=\"center\">\n  <img src=\"figures/qualitative_cmp_01.jpg\">\n</p>\n<p align=\"center\">\n  <img src=\"figures/qualitative_cmp_02.jpg\">\n</p>\n<p align=\"center\">\n  <img src=\"figures/qualitative_cmp_03.jpg\">\n</p>\n<p align=\"center\">\n  <img src=\"figures/qualitative_cmp_04.jpg\">\n</p>\n\n## Ablation Study\nOverall visual comparisons for showing the effects of each component in\nESRGAN. Each column represents a model with its configurations in the top.\nThe red sign indicates the main improvement compared with the previous model.\n<p align=\"center\">\n  <img src=\"figures/abalation_study.png\">\n</p>\n\n## BN artifacts\nWe empirically observe that BN layers tend to bring artifacts. These artifacts,\nnamely BN artifacts, occasionally appear among iterations and different settings,\nviolating the needs for a stable performance over training. We find that\nthe network depth, BN position, training dataset and training loss\nhave impact on the occurrence of BN artifacts.\n<p align=\"center\">\n  <img src=\"figures/BN_artifacts.jpg\">\n</p>\n\n## Useful techniques to train a very deep network\nWe find that residual scaling and smaller initialization can help to train a very deep network. More details are in the Supplementary File attached in our [paper](https://arxiv.org/abs/1809.00219).\n\n<p align=\"center\">\n  <img height=\"250\" src=\"figures/train_deeper_neta.png\">\n  <img height=\"250\" src=\"figures/train_deeper_netb.png\">\n</p>\n\n## The influence of training patch size\nWe observe that training a deeper network benefits from a larger patch size. Moreover, the deeper model achieves more improvement (∼0.12dB) than the shallower one (∼0.04dB) since larger model capacity is capable of taking full advantage of\nlarger training patch size. (Evaluated on Set5 dataset with RGB channels.)\n<p align=\"center\">\n  <img height=\"250\" src=\"figures/patch_a.png\">\n  <img height=\"250\" src=\"figures/patch_b.png\">\n</p>\n"
        },
        {
          "name": "RRDBNet_arch.py",
          "type": "blob",
          "size": 2.7763671875,
          "content": "import functools\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\ndef make_layer(block, n_layers):\n    layers = []\n    for _ in range(n_layers):\n        layers.append(block())\n    return nn.Sequential(*layers)\n\n\nclass ResidualDenseBlock_5C(nn.Module):\n    def __init__(self, nf=64, gc=32, bias=True):\n        super(ResidualDenseBlock_5C, self).__init__()\n        # gc: growth channel, i.e. intermediate channels\n        self.conv1 = nn.Conv2d(nf, gc, 3, 1, 1, bias=bias)\n        self.conv2 = nn.Conv2d(nf + gc, gc, 3, 1, 1, bias=bias)\n        self.conv3 = nn.Conv2d(nf + 2 * gc, gc, 3, 1, 1, bias=bias)\n        self.conv4 = nn.Conv2d(nf + 3 * gc, gc, 3, 1, 1, bias=bias)\n        self.conv5 = nn.Conv2d(nf + 4 * gc, nf, 3, 1, 1, bias=bias)\n        self.lrelu = nn.LeakyReLU(negative_slope=0.2, inplace=True)\n\n        # initialization\n        # mutil.initialize_weights([self.conv1, self.conv2, self.conv3, self.conv4, self.conv5], 0.1)\n\n    def forward(self, x):\n        x1 = self.lrelu(self.conv1(x))\n        x2 = self.lrelu(self.conv2(torch.cat((x, x1), 1)))\n        x3 = self.lrelu(self.conv3(torch.cat((x, x1, x2), 1)))\n        x4 = self.lrelu(self.conv4(torch.cat((x, x1, x2, x3), 1)))\n        x5 = self.conv5(torch.cat((x, x1, x2, x3, x4), 1))\n        return x5 * 0.2 + x\n\n\nclass RRDB(nn.Module):\n    '''Residual in Residual Dense Block'''\n\n    def __init__(self, nf, gc=32):\n        super(RRDB, self).__init__()\n        self.RDB1 = ResidualDenseBlock_5C(nf, gc)\n        self.RDB2 = ResidualDenseBlock_5C(nf, gc)\n        self.RDB3 = ResidualDenseBlock_5C(nf, gc)\n\n    def forward(self, x):\n        out = self.RDB1(x)\n        out = self.RDB2(out)\n        out = self.RDB3(out)\n        return out * 0.2 + x\n\n\nclass RRDBNet(nn.Module):\n    def __init__(self, in_nc, out_nc, nf, nb, gc=32):\n        super(RRDBNet, self).__init__()\n        RRDB_block_f = functools.partial(RRDB, nf=nf, gc=gc)\n\n        self.conv_first = nn.Conv2d(in_nc, nf, 3, 1, 1, bias=True)\n        self.RRDB_trunk = make_layer(RRDB_block_f, nb)\n        self.trunk_conv = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)\n        #### upsampling\n        self.upconv1 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)\n        self.upconv2 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)\n        self.HRconv = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)\n        self.conv_last = nn.Conv2d(nf, out_nc, 3, 1, 1, bias=True)\n\n        self.lrelu = nn.LeakyReLU(negative_slope=0.2, inplace=True)\n\n    def forward(self, x):\n        fea = self.conv_first(x)\n        trunk = self.trunk_conv(self.RRDB_trunk(fea))\n        fea = fea + trunk\n\n        fea = self.lrelu(self.upconv1(F.interpolate(fea, scale_factor=2, mode='nearest')))\n        fea = self.lrelu(self.upconv2(F.interpolate(fea, scale_factor=2, mode='nearest')))\n        out = self.conv_last(self.lrelu(self.HRconv(fea)))\n\n        return out\n"
        },
        {
          "name": "figures",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "net_interp.py",
          "type": "blob",
          "size": 0.5537109375,
          "content": "import sys\nimport torch\nfrom collections import OrderedDict\n\nalpha = float(sys.argv[1])\n\nnet_PSNR_path = './models/RRDB_PSNR_x4.pth'\nnet_ESRGAN_path = './models/RRDB_ESRGAN_x4.pth'\nnet_interp_path = './models/interp_{:02d}.pth'.format(int(alpha*10))\n\nnet_PSNR = torch.load(net_PSNR_path)\nnet_ESRGAN = torch.load(net_ESRGAN_path)\nnet_interp = OrderedDict()\n\nprint('Interpolating with alpha = ', alpha)\n\nfor k, v_PSNR in net_PSNR.items():\n    v_ESRGAN = net_ESRGAN[k]\n    net_interp[k] = (1 - alpha) * v_PSNR + alpha * v_ESRGAN\n\ntorch.save(net_interp, net_interp_path)\n"
        },
        {
          "name": "results",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 1.1435546875,
          "content": "import os.path as osp\nimport glob\nimport cv2\nimport numpy as np\nimport torch\nimport RRDBNet_arch as arch\n\nmodel_path = 'models/RRDB_ESRGAN_x4.pth'  # models/RRDB_ESRGAN_x4.pth OR models/RRDB_PSNR_x4.pth\ndevice = torch.device('cuda')  # if you want to run on CPU, change 'cuda' -> cpu\n# device = torch.device('cpu')\n\ntest_img_folder = 'LR/*'\n\nmodel = arch.RRDBNet(3, 3, 64, 23, gc=32)\nmodel.load_state_dict(torch.load(model_path), strict=True)\nmodel.eval()\nmodel = model.to(device)\n\nprint('Model path {:s}. \\nTesting...'.format(model_path))\n\nidx = 0\nfor path in glob.glob(test_img_folder):\n    idx += 1\n    base = osp.splitext(osp.basename(path))[0]\n    print(idx, base)\n    # read images\n    img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = img * 1.0 / 255\n    img = torch.from_numpy(np.transpose(img[:, :, [2, 1, 0]], (2, 0, 1))).float()\n    img_LR = img.unsqueeze(0)\n    img_LR = img_LR.to(device)\n\n    with torch.no_grad():\n        output = model(img_LR).data.squeeze().float().cpu().clamp_(0, 1).numpy()\n    output = np.transpose(output[[2, 1, 0], :, :], (1, 2, 0))\n    output = (output * 255.0).round()\n    cv2.imwrite('results/{:s}_rlt.png'.format(base), output)\n"
        },
        {
          "name": "transer_RRDB_models.py",
          "type": "blob",
          "size": 1.796875,
          "content": "import os\nimport torch\nimport RRDBNet_arch as arch\n\npretrained_net = torch.load('./models/RRDB_ESRGAN_x4.pth')\nsave_path = './models/RRDB_ESRGAN_x4.pth'\n\ncrt_model = arch.RRDBNet(3, 3, 64, 23, gc=32)\ncrt_net = crt_model.state_dict()\n\nload_net_clean = {}\nfor k, v in pretrained_net.items():\n    if k.startswith('module.'):\n        load_net_clean[k[7:]] = v\n    else:\n        load_net_clean[k] = v\npretrained_net = load_net_clean\n\nprint('###################################\\n')\ntbd = []\nfor k, v in crt_net.items():\n    tbd.append(k)\n\n# directly copy\nfor k, v in crt_net.items():\n    if k in pretrained_net and pretrained_net[k].size() == v.size():\n        crt_net[k] = pretrained_net[k]\n        tbd.remove(k)\n\ncrt_net['conv_first.weight'] = pretrained_net['model.0.weight']\ncrt_net['conv_first.bias'] = pretrained_net['model.0.bias']\n\nfor k in tbd.copy():\n    if 'RDB' in k:\n        ori_k = k.replace('RRDB_trunk.', 'model.1.sub.')\n        if '.weight' in k:\n            ori_k = ori_k.replace('.weight', '.0.weight')\n        elif '.bias' in k:\n            ori_k = ori_k.replace('.bias', '.0.bias')\n        crt_net[k] = pretrained_net[ori_k]\n        tbd.remove(k)\n\ncrt_net['trunk_conv.weight'] = pretrained_net['model.1.sub.23.weight']\ncrt_net['trunk_conv.bias'] = pretrained_net['model.1.sub.23.bias']\ncrt_net['upconv1.weight'] = pretrained_net['model.3.weight']\ncrt_net['upconv1.bias'] = pretrained_net['model.3.bias']\ncrt_net['upconv2.weight'] = pretrained_net['model.6.weight']\ncrt_net['upconv2.bias'] = pretrained_net['model.6.bias']\ncrt_net['HRconv.weight'] = pretrained_net['model.8.weight']\ncrt_net['HRconv.bias'] = pretrained_net['model.8.bias']\ncrt_net['conv_last.weight'] = pretrained_net['model.10.weight']\ncrt_net['conv_last.bias'] = pretrained_net['model.10.bias']\n\ntorch.save(crt_net, save_path)\nprint('Saving to ', save_path)\n"
        }
      ]
    }
  ]
}