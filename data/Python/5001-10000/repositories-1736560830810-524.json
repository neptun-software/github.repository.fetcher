{
  "metadata": {
    "timestamp": 1736560830810,
    "page": 524,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Ultimaker/Cura",
      "stars": 6303,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8056640625,
          "content": "# Compiled and generated things.\nbuild\n*.pyc\n__pycache__\n*.mo\ndocs/html\n*.log\nresources/i18n/en_US\nresources/i18n/en_7S\nresources/i18n/x-test\nresources/firmware\nresources/materials\nresources/images/whats_new\nresources/texts/whats_new\nCuraEngine.exe\nLC_MESSAGES\n.cache\n*.qmlc\n.mypy_cache\n.pytest_cache\n\n#MacOS\n.DS_Store\n\n# Editors and IDEs.\n*kdev*\n*.kate-swp\n*.lprof\n*~\n*.qm\n.directory\n.idea\ncura.desktop\n*.bak\n\n# Eclipse+PyDev\n.project\n.pydevproject\n.settings\n\n#Externally located plug-ins commonly installed by our devs.\nplugins/BarbarianPlugin\nplugins/cura-big-flame-graph\nplugins/cura-camera-position\nplugins/cura-god-mode-plugin\nplugins/cura-siemensnx-plugin\nplugins/CuraBlenderPlugin\nplugins/CuraCloudPlugin\nplugins/CuraDrivePlugin\nplugins/CuraLiveScriptingPlugin\nplugins/CuraOpenSCADPlugin\nplugins/CuraPrintProfileCreator\nplugins/CuraSolidWorksPlugin\nplugins/CuraVariSlicePlugin\nplugins/Doodle3D-cura-plugin\nplugins/FlatProfileExporter\nplugins/GodMode\nplugins/OctoPrintPlugin\nplugins/ProfileFlattener\nplugins/SettingsGuide\nplugins/SettingsGuide2\nplugins/SVGToolpathReader\nplugins/X3GWriter\nplugins/CuraFlatPack\nplugins/CuraRemoteSupport\nplugins/ModelCutter\nplugins/PrintProfileCreator\nplugins/MultiPrintPlugin\nplugins/CuraOrientationPlugin\n\n#Build stuff\nCMakeCache.txt\nCMakeFiles\nCPackSourceConfig.cmake\nTesting/\nCTestTestfile.cmake\nMakefile*\njunit-pytest-*\nCuraVersion.py\ncmake_install.cmake\n\n#Debug\n*.gcode\nrun.sh\n.scannerwork/\nCuraEngine\n\n/.coverage\n\n#Prevents import failures when plugin running tests\nplugins/__init__.py\n\nvenv/\nbuild/\ndist/\nconaninfo.txt\nconan.lock\nconan_imports_manifest.txt\nconanbuildinfo.txt\ngraph_info.json\nUltimaker-Cura.spec\n.run/\n/printer-linter/src/printerlinter.egg-info/\n/plugins/CuraEngineGradualFlow\n/resources/bundled_packages/bundled_*.json\ncuraengine_plugin_gradual_flow\ncuraengine_plugin_gradual_flow.exe\n"
        },
        {
          "name": ".printer-linter",
          "type": "blob",
          "size": 0.943359375,
          "content": "checks:\n    diagnostic-mesh-file-extension: true\n    diagnostic-mesh-file-size: true\n    diagnostic-definition-redundant-override: true\n    diagnostic-definition-experimental-setting: true\n    diagnostic-resources-macos-app-directory-name: true\n    diagnostic-incorrect-formula: true\n    diagnostic-resource-file-deleted: true\n    diagnostic-material-temperature-defined: false\n    diagnostic-long-profile-names: true\nfixes:\n    diagnostic-definition-redundant-override: true\nformat:\n    format-definition-bracket-newline: true\n    format-definition-paired-coordinate-array: true\n    format-definition-sort-keys: true\n    format-definition-indent: 4\n    format-definition-single-value-single-line: true # Format dicts and lists with a single item on one line \"dict\": { \"value\": 10 }\n    format-profile-space-around-delimiters: true\n    format-profile-sort-keys: true\ndiagnostic-mesh-file-size: 1200000\ndiagnostic-definition-redundant-override-ignore:\n  - machine_.*\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 3.8359375,
          "content": "# Copyright (c) 2019 Ultimaker B.V.\n# This file contains the Pylint rules used in the stardust projects.\n\n# To configure PyLint as an external tool in PyCharm, create a new External Tool with the settings:\n#\n# Name: PyLint\n# Program: Check with 'which pylint'. For example: ~/.local/bin/pylint\n# Arguments: $FileDirName$ --rcfile=.pylintrc --msg-template='{abspath}:{line}:{column}:({symbol}):{msg_id}:{msg}'\n# Working directory: $ContentRoot$\n# Output filters: $FILE_PATH$:$LINE$:$COLUMN$:.*\n#\n# You can add a keyboard shortcut in the keymap settings. To run Pylint to a project, select the module\n# you want to check (e.g. cura folder) before running the external tool.\n#\n# If you find a better way to configure the external tool please edit this file.\n\n[MASTER]\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=pylint_quotes\n\n# We expect double string quotes\nstring-quote=double-avoid-escape\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Add files or directories to the blacklist. They should be base names, not paths.\nignore=tests\n\n[REFACTORING]\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n[MESSAGES CONTROL]\n# C0326: No space allowed around keyword argument assignment\n# C0411: Ignore import order because the rules are different than in PyCharm, so automatic imports break lots of builds\n# C0412: Ignore import order because the rules are different than in PyCharm, so automatic imports break lots of builds\n# C0413: Ignore import order because the rules are different than in PyCharm, so automatic imports break lots of builds\n# R0201: Method could be a function (no-self-use)\n# R0401: Cyclic imports (cyclic-import) are used for typing\n# R0801: Unfortunately the error is triggered for a lot of similar models (duplicate-code)\n# R1710: Either all return statements in a function should return an expression, or none of them should.\n# W0221: Parameters differ from overridden method (tornado http methods have a flexible number of parameters)\n# W0511: Ignore warnings generated for TODOs in the code\n# C0111: We don't use docstring\n# C0303: Trailing whitespace isn't something we care about\n# C4001: You can put \" in a string if you escape it first... \ndisable=C0326,C0411,C0412,C0413,R0201,R0401,R0801,R1710,W0221,W0511, C0111, C0303,C4001\n\n[FORMAT]\n# Maximum number of characters on a single line.\nmax-line-length=120\n\n# Maximum number of lines in a module.\nmax-module-lines=500\n\ngood-names=os\n\n[BASIC]\n# allow modules and functions to use PascalCase\nmodule-rgx=[a-zA-Z0-9_]+$\nfunction-rgx=\n## Allowed methods:\n# getSomething\n# _getSomething\n# __getSomething\n# __new__\n## Disallowed:\n# _GET\n# GetSomething \nmethod-rgx=(_{,2}[a-z][A-Za-z0-9]*_{,2})$\n\n[DESIGN]\n# Maximum number of arguments for function / method.\nmax-args=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=8\n\n# Maximum number of boolean expressions in an if statement.\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (R0903).\n# We set this to 0 because our models and fields do not have methods.\nmin-public-methods=0\n\nignored-argument-names=arg|args|kwargs|_\n\n[CLASSES]\ndefining-attr-methods=__init__,__new__,setUp,initialize\n\n[TYPECHECK]\nignored-classes=NotImplemented\n\n[VARIABLES]\ndummy-variables-rgx=_+[a-z0-9_]{2,30}\n"
        },
        {
          "name": ".run_templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.685546875,
          "content": "# YAML 1.2\n---\ncff-version: 1.2.0\ntype: software\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntitle: Ultimaker Cura\nabstract: >-\n  A state-of-the-art slicer application built on top\n  of the Uranium framework.\nauthors:\n  - name: Ultimaker B.V.\ncontact:\n  - email: info@ultimaker.com\n    name: \"Ultimaker B.V.\"\nurl: \"https://ultimaker.com/software/ultimaker-cura\"\nrepository-code: \"https://github.com/Ultimaker/Cura\"\nlicense: LGPL-3.0\nlicense-url: \"https://github.com/Ultimaker/Cura/blob/main/LICENSE\"\nversion: 5.4.0\ndate-released: \"2023-07-04\"\nkeywords:\n  - Ultimaker\n  - Cura\n  - Slicer\n  - Uranium\n  - Arachne\n  - 3D Printing\n  - Additive Manufacturing\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.208984375,
          "content": "# Copyright (c) 2022 Ultimaker B.V.\n# Cura is released under the terms of the LGPLv3 or higher.\n\n# NOTE: This is only being used for translation scripts.\n\n# For MSVC flags, will be ignored on non-Windows OS's and this project in general. Only needed for cura-build-environment.\ncmake_policy(SET CMP0091 NEW)\nproject(cura)\ncmake_minimum_required(VERSION 3.18)\n\ninclude(GNUInstallDirs)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)\n\nset(URANIUM_DIR \"${CMAKE_SOURCE_DIR}/../Uranium\" CACHE PATH \"The location of the Uranium repository\")\nset(URANIUM_SCRIPTS_DIR \"${URANIUM_DIR}/scripts\" CACHE PATH \"The location of the scripts directory of the Uranium repository\")\n\noption(GENERATE_TRANSLATIONS \"Should the translations be generated?\" ON)\n\nif(NOT ${URANIUM_DIR} STREQUAL \"\")\n    set(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH};${URANIUM_DIR}/cmake\")\nendif()\nif(NOT ${URANIUM_SCRIPTS_DIR} STREQUAL \"\")\n    list(APPEND CMAKE_MODULE_PATH ${URANIUM_DIR}/cmake)\n    include(UraniumTranslationTools)\n    # Extract Strings\n    add_custom_target(extract-messages ${URANIUM_SCRIPTS_DIR}/extract-messages ${CMAKE_SOURCE_DIR} cura)\n    # Build Translations\n    if(${GENERATE_TRANSLATIONS})\n        CREATE_TRANSLATION_TARGETS()\n    endif()\nendif()"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.552734375,
          "content": "Submitting bug reports\n----------------------\nPlease submit bug reports for all of Cura and CuraEngine to the [Cura repository](https://github.com/Ultimaker/Cura/issues). There will be a template there to fill in. Depending on the type of issue, we will usually ask for the [Cura log](https://github.com/Ultimaker/Cura/wiki/Reporting#cura-log) or a project file.\n\nIf a bug report would contain private information, such as a proprietary 3D model, you may also e-mail us. Ask for contact information in the issue.\n\nBugs related to supporting certain types of printers can usually not be solved by the Cura maintainers, since we don't have access to every 3D printer model in the world either. We have to rely on external contributors to fix this. If it's something simple and obvious, such as a mistake in the start g-code, then we can directly fix it for you, but e.g. issues with USB cable connectivity are impossible for us to debug.\n\nRequesting features\n-------------------\nWhen requesting a feature, please describe clearly what you need and why you think this is valuable to users or what problem it solves.\n\nMaking pull requests\n--------------------\nIf you want to propose a change to Cura's source code, please create a pull request in the appropriate repository. Since Cura has multiple repositories that influence it, we've listed the most important ones below:\n* [Cura](https://github.com/Ultimaker/Cura)\n* [Uranium](https://github.com/Ultimaker/Uranium)\n* [CuraEngine](https://github.com/Ultimaker/CuraEngine)\n* [fdm_materials](https://github.com/Ultimaker/fdm_materials)\n* [libArcus](https://github.com/Ultimaker/libArcus)\n* [libSavitar](https://github.com/Ultimaker/libSavitar)\n* [libCharon](https://github.com/Ultimaker/libCharon)\n* [cura-binary-data](https://github.com/Ultimaker/cura-binary-data)) \n\nIf your change requires changes on multiple of these repositories, please link them together so that we know to merge & review them together.\n\nThe style guide for code contributions to Cura and other Ultimaker projects can be found [here](https://github.com/Ultimaker/Meta/blob/master/general/generic_code_conventions.md).\n\nSome of these repositories will have automated tests running when you create a pull request, indicated by green check marks or red crosses in the Github web page. If you see a red cross, that means that a test has failed. If the test doesn't fail on the Main branch but does fail on your branch, that indicates that you've probably made a mistake and you need to do that. Click on the cross for more details, or run the test locally by running `cmake . && ctest --verbose`.\n"
        },
        {
          "name": "CuraVersion.py.jinja",
          "type": "blob",
          "size": 0.708984375,
          "content": "# Copyright (c) 2023 UltiMaker\n# Cura is released under the terms of the LGPLv3 or higher.\n\nCuraAppName = \"{{ cura_app_name }}\"\nCuraAppDisplayName = \"{{ cura_app_display_name  }}\"\nCuraVersion = \"{{ cura_version }}\"\nCuraVersionFull = \"{{ cura_version_full }}\"\nCuraBuildType = \"{{ cura_build_type }}\"\nCuraDebugMode = {{ cura_debug_mode }}\nCuraCloudAPIRoot = \"{{ cura_cloud_api_root }}\"\nCuraCloudAPIVersion = \"{{ cura_cloud_api_version }}\"\nCuraCloudAccountAPIRoot = \"{{ cura_cloud_account_api_root }}\"\nCuraMarketplaceRoot = \"{{ cura_marketplace_root }}\"\nCuraDigitalFactoryURL = \"{{ cura_digital_factory_url }}\"\nCuraLatestURL = \"{{ cura_latest_url }}\"\n\nConanInstalls = {{ conan_installs }}\n\nPythonInstalls = {{ python_installs }}\n"
        },
        {
          "name": "FUNDING.yml",
          "type": "blob",
          "size": 0.01953125,
          "content": "github: [ultimaker]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.4560546875,
          "content": "    GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7919921875,
          "content": "<br>\n\n<div align = center>\n\n[![Badge Issues]][Issues]   \n[![Badge PullRequests]][PullRequests]   \n[![Badge Closed]][Closed]\n\n[![Badge Size]][#]   \n[![Badge License]][License]   \n[![Badge Contributors]][Contributors]\n\n[![Badge Test]][Test]   \n[![Badge Conan]][Conan]   \n[![Badge Downloads]][Downloads]\n<br>\n<br>\n\n![Logo]\n\n# Ultimaker Cura\n\n*State-of-the-art slicer app to prepare* <br>\n*your 3D models for your 3D printer.*\n\n*With hundreds of settings & community-managed print profiles,* <br>\n*Ultimaker Cura is sure to lead your next project to a success.*\n\n**Contribute Printer Profiles?** -- Please [look here](https://github.com/Ultimaker/Cura/wiki/Adding-new-machine-profiles-to-Cura) first. <br>\n**Contribute Translations?** -- Please [look here](https://github.com/Ultimaker/Cura/wiki/Translating-Cura) first.\n\n<br>\n\n[![Button Building]][Building]   \n[![Button Plugins]][Plugins]   \n[![Button Machines]][Machines]\n\n[![Button Report]][Report]   \n[![Button Settings]][Settings]   \n[![Button Localize]][Localize]\n\n<br>\n<br>\n\n<picture>\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"./cura-logo.PNG\">\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"./cura-logo-dark.PNG\">\n  <img alt=\"Shows cura open on the preview screen with a large benchy model in the center.\" src=\"./cura-logo.PNG\">\n</picture>\n\n</div>\n\n<br>\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/Ultimaker/Cura/badge)](https://api.securityscorecards.dev/projects/github.com/Ultimaker/Cura)\n\n<br>\n\n<!----------------------------------------------------------------------------->\n\n[Contributors]: https://github.com/Ultimaker/Cura/graphs/contributors\n[PullRequests]: https://github.com/Ultimaker/Cura/pulls\n[Machines]: https://github.com/Ultimaker/Cura/wiki/Adding-new-machine-profiles-to-Cura\n[Building]: https://github.com/Ultimaker/Cura/wiki/Getting-Started\n[Localize]: https://github.com/Ultimaker/Cura/wiki/Translating-Cura\n[Settings]: https://github.com/Ultimaker/Cura/wiki/Profiles-&-Settings\n[Plugins]: https://github.com/Ultimaker/Cura/wiki/Plugins-And-Packages\n[Closed]: https://github.com/Ultimaker/Cura/issues?q=is%3Aissue+is%3Aclosed\n[Issues]: https://github.com/Ultimaker/Cura/issues\n[Conan]: https://github.com/Ultimaker/Cura/actions/workflows/conan-package.yml\n[Test]: https://github.com/Ultimaker/Cura/actions/workflows/unit-test.yml\n[Downloads]: https://github.com/Ultimaker/Cura/releases/latest\n\n[License]: LICENSE\n[Report]: docs/Report.md\n[Logo]: resources/images/cura-icon.png\n[#]: #\n\n\n<!---------------------------------[ Badges ]---------------------------------->\n\n[Badge Contributors]: https://img.shields.io/github/contributors/ultimaker/cura?style=for-the-badge&logoColor=white&labelColor=db5e8a&color=ab4a6c&logo=GitHub\n[Badge PullRequests]: https://img.shields.io/github/issues-pr/ultimaker/cura?style=for-the-badge&logoColor=white&labelColor=bb9f3e&color=937d31&logo=GitExtensions\n[Badge License]: https://img.shields.io/badge/License-LGPL3-336887.svg?style=for-the-badge&labelColor=458cb5&logoColor=white&logo=GNU\n[Badge Closed]: https://img.shields.io/github/issues-closed/ultimaker/cura?style=for-the-badge&logoColor=white&labelColor=629944&color=446a30&logo=AddThis\n[Badge Issues]: https://img.shields.io/github/issues/ultimaker/cura?style=for-the-badge&logoColor=white&labelColor=c34360&color=933349&logo=AdBlock\n[Badge Conan]: https://img.shields.io/github/actions/workflow/status/Ultimaker/Cura/conan-package.yml?branch=main&style=for-the-badge&logoColor=white&labelColor=6185aa&color=4c6987&logo=Conan&label=Conan%20Package\n[Badge Test]: https://img.shields.io/github/actions/workflow/status/Ultimaker/Cura/unit-test.yml?branch=main&style=for-the-badge&logoColor=white&labelColor=4a999d&color=346c6e&logo=Codacy&label=Unit%20Test\n[Badge Size]: https://img.shields.io/github/repo-size/ultimaker/cura?style=for-the-badge&logoColor=white&labelColor=715a97&color=584674&logo=GoogleAnalytics\n[Badge Downloads]: https://img.shields.io/github/downloads-pre/Ultimaker/Cura/latest/total?style=for-the-badge\n\n\n<!---------------------------------[ Buttons ]--------------------------------->\n\n[Button Localize]: https://img.shields.io/badge/Help_Localize-e2467d?style=for-the-badge&logoColor=white&logo=GoogleTranslate\n[Button Machines]: https://img.shields.io/badge/Adding_Printers-yellow?style=for-the-badge&logoColor=white&logo=CloudFoundry\n[Button Settings]: https://img.shields.io/badge/Configuration-00979D?style=for-the-badge&logoColor=white&logo=CodeReview\n[Button Building]: https://img.shields.io/badge/Building_Cura-blue?style=for-the-badge&logoColor=white&logo=GitBook\n[Button Plugins]: https://img.shields.io/badge/Plugin_Usage-569A31?style=for-the-badge&logoColor=white&logo=ROS\n[Button Report]: https://img.shields.io/badge/Report_Issues-C9284D?style=for-the-badge&logoColor=white&logo=Cliqz\n\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3251953125,
          "content": "# Reporting vulnerabilities\n\nIf you discover a vulnerability, please let us know as soon as possible via `security@ultimaker.com`.\nPlease do not take advantage of the vulnerability and do not reveal the problem to others.\nTo allow us to resolve the issue, please do provide us with sufficient information to reproduce the problem.\n"
        },
        {
          "name": "UltiMaker-Cura.spec.jinja",
          "type": "blob",
          "size": 2.9189453125,
          "content": "# -*- mode: python ; coding: utf-8 -*-\nimport os\nfrom pathlib import Path\nfrom PyInstaller.utils.hooks import collect_all\n\n\ndatas = {{ datas }}\nbinaries = {{ binaries }}\n\nhiddenimports = {{ hiddenimports }}\n\n{% for value in collect_all %}tmp_ret = collect_all('{{ value }}')\ndatas += tmp_ret[0]; binaries += tmp_ret[1]; hiddenimports += tmp_ret[2]\n{% endfor %}\n\n# Add dynamic libs in the venv bin/Script Path. This is needed because we might copy some additional libs\n# e.q.: OpenSSL 1.1.1l in that directory with a separate:\n# `conan install openssl@1.1.1l -g deploy && cp openssl/bin/*.so cura_inst/bin`\nbinaries.extend([(str(bin), \".\") for bin in Path(r\"{{ venv_script_path }}\").glob(\"*.so*\")])\nbinaries.extend([(str(bin), \".\") for bin in Path(r\"{{ venv_script_path }}\").glob(\"*.dll\")])\nbinaries.extend([(str(bin), \".\") for bin in Path(r\"{{ venv_script_path }}\").glob(\"*.dylib\")])\n\nblock_cipher = None\n\na = Analysis(\n    [{{ entrypoint }}],\n    pathex=[],\n    binaries=binaries,\n    datas=datas,\n    hiddenimports=hiddenimports,\n    hookspath=[\"Cura-workflows/runner_scripts/pyinstaller_hooks\"],\n    hooksconfig={},\n    runtime_hooks=[],\n    excludes=[],\n    win_no_prefer_redirects=False,\n    win_private_assemblies=False,\n    cipher=block_cipher,\n    noarchive=False\n)\npyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)\n\nexe = EXE(\n    pyz,\n    a.scripts,\n    [],\n    exclude_binaries=True,\n    name=r'{{ name }}',\n    debug=False,\n    bootloader_ignore_signals=False,\n    strip={{ strip }},\n    upx={{ upx }},\n    console=False,\n    disable_windowed_traceback=False,\n    argv_emulation=False,\n    target_arch={{ target_arch }},\n    codesign_identity=os.getenv('CODESIGN_IDENTITY', None),\n    entitlements_file={{ entitlements_file }},\n    icon={{ icon }},\n    contents_directory='.'\n)\n\ncoll = COLLECT(\n    exe,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    strip=False,\n    upx=True,\n    upx_exclude=[],\n    name=r'{{ name }}'\n)\n\n{% if macos == true %}\napp = BUNDLE(\n    coll,\n    name='{{ display_name }}.app',\n    icon={{ icon }},\n    bundle_identifier={{ osx_bundle_identifier }} + \"_\" + '{{ display_name }}'.replace(\" \", \"_\") + \"_\" {{ short_version }},\n    version={{ version }},\n    info_plist={\n        'CFBundleDisplayName': '{{ display_name }}',\n        'NSPrincipalClass': 'NSApplication',\n        'CFBundleDevelopmentRegion': 'English',\n        'CFBundleExecutable': '{{ name }}',\n        'CFBundleInfoDictionaryVersion': '6.0',\n        'CFBundlePackageType': 'APPL',\n        'CFBundleVersionString': {{ version }},\n        'CFBundleShortVersionString': {{ short_version }},\n        'CFBundleURLTypes': [{\n                'CFBundleURLName': '{{ display_name }}',\n                'CFBundleURLSchemes': ['cura', 'slicer'],\n        }],\n        'CFBundleDocumentTypes': [{\n            'CFBundleTypeRole': 'Viewer',\n            'CFBundleTypeExtensions': ['stl', 'obj', '3mf', 'gcode', 'ufp'],\n            'CFBundleTypeName': 'Model Files',\n        }]\n    },\n)\n{% endif %}\n"
        },
        {
          "name": "conandata.yml",
          "type": "blob",
          "size": 28.8779296875,
          "content": "version: \"5.10.0-alpha.0\"\nrequirements:\n  - \"cura_resources/5.10.0-alpha.0@ultimaker/testing\"\n  - \"uranium/5.10.0-alpha.0@ultimaker/testing\"\n  - \"curaengine/5.10.0-alpha.0@ultimaker/testing\"\n  - \"cura_binary_data/5.10.0-alpha.0@ultimaker/testing\"\n  - \"fdm_materials/5.10.0-alpha.0@ultimaker/testing\"\n  - \"dulcificum/0.2.1@ultimaker/stable\"\n  - \"pysavitar/5.4.0-alpha.0@ultimaker/stable\"\n  - \"pynest2d/5.4.0-alpha.0@ultimaker/stable\"\nrequirements_internal:\n  - \"fdm_materials/5.10.0-alpha.0@internal/testing\"\n  - \"cura_private_data/5.10.0-alpha.0@internal/testing\"\nrequirements_enterprise:\n  - \"native_cad_plugin/2.0.0\"\nurls:\n    default:\n        cloud_api_root: \"https://api.ultimaker.com\"\n        cloud_account_api_root: \"https://account.ultimaker.com\"\n        marketplace_root: \"https://marketplace.ultimaker.com\"\n        digital_factory_url: \"https://digitalfactory.ultimaker.com\"\n        cura_latest_url: \"https://software.ultimaker.com/latest.json\"\n    staging:\n        cloud_api_root: \"https://api-staging.ultimaker.com\"\n        cloud_account_api_root: \"https://account-staging.ultimaker.com\"\n        marketplace_root: \"https://marketplace-staging.ultimaker.com\"\n        digital_factory_url: \"https://digitalfactory-staging.ultimaker.com\"\n        cura_latest_url: \"https://software.ultimaker.com/latest.json\"\n\npyinstaller:\n    runinfo:\n        entrypoint: \"cura_app.py\"\n    datas:\n        cura_plugins:\n            package: \"cura\"\n            src: \"plugins\"\n            dst: \"share/cura/plugins\"\n        native_cad_plugin:\n            package: \"native_cad_plugin\"\n            src: \"res/plugins/NativeCADplugin\"\n            dst: \"share/cura/plugins/NativeCADplugin\"\n            enterprise_only: true\n        native_cad_plugin_bundled:\n            package: \"native_cad_plugin\"\n            src: \"res/bundled_packages\"\n            dst: \"share/cura/resources/bundled_packages\"\n            enterprise_only: true\n        cura_resources:\n            package: \"cura\"\n            src: \"resources\"\n            dst: \"share/cura/resources\"\n        cura_shared_resources:\n            package: \"cura_resources\"\n            src: \"res\"\n            dst: \"share/cura/resources\"\n        cura_private_data:\n            package: \"cura_private_data\"\n            src: \"res\"\n            dst: \"share/cura\"\n            internal: true\n        uranium_plugins:\n            package: \"uranium\"\n            src: \"plugins\"\n            dst: \"share/uranium/plugins\"\n        uranium_resources:\n            package: \"uranium\"\n            src: \"resources\"\n            dst: \"share/uranium/resources\"\n        uranium_um_qt_qml_um:\n            package: \"uranium\"\n            src: \"site-packages/UM/Qt/qml/UM\"\n            dst: \"PyQt6/Qt6/qml/UM\"\n        cura_binary_data:\n            package: \"cura_binary_data\"\n            src: \"resources/cura/resources\"\n            dst: \"share/cura/resources\"\n        uranium_binary_data:\n            package: \"cura_binary_data\"\n            src: \"resources/uranium/resources\"\n            dst: \"share/uranium/resources\"\n        windows_binary_data:\n            package: \"cura_binary_data\"\n            src: \"windows\"\n            dst: \"share/windows\"\n            oses:\n              - \"Windows\"\n        fdm_materials:\n            package: \"fdm_materials\"\n            src: \"res/resources/materials\"\n            dst: \"share/cura/resources/materials\"\n    binaries:\n        curaengine:\n            package: \"curaengine\"\n            src: \"bin\"\n            dst: \".\"\n            binary: \"CuraEngine\"\n    hiddenimports:\n        - \"pySavitar\"\n        - \"pyArcus\"\n        - \"pyDulcificum\"\n        - \"pynest2d\"\n        - \"PyQt6\"\n        - \"PyQt6.QtNetwork\"\n        - \"PyQt6.sip\"\n        - \"logging.handlers\"\n        - \"zeroconf\"\n        - \"fcntl\"\n        - \"stl\"\n        - \"serial\"\n        - \"win32cred\"\n        - \"win32timezone\"\n        - \"pkgutil\"\n    hiddenimports_WINDOWS_ONLY:\n        - \"PyQt6.Qt\"\n        - \"PyQt6.Qt6\"\n    collect_all:\n        - \"cura\"\n        - \"UM\"\n        - \"serial\"\n        - \"Charon\"\n        - \"sqlite3\"\n        - \"trimesh\"\n        - \"win32ctypes\"\n        - \"PyQt6.QtNetwork\"\n        - \"PyQt6.sip\"\n        - \"stl\"\n        - \"keyrings.alt\"\n    collect_all_WINDOWS_ONLY:\n        - \"PyQt6.Qt\"\n        - \"PyQt6.Qt6\"\n    icon:\n        Windows: \"./icons/Cura.ico\"\n        Macos: \"./icons/cura.icns\"\n        Linux: \"./icons/cura-128.png\"\n    blacklist:\n      - [ \"assimp\" ]\n      - [ \"qt\", \"charts\" ]\n      - [ \"qt\", \"coap\" ]\n      - [ \"qt\", \"data\", \"vis\" ]\n      - [ \"qt\", \"lab\", \"animat\" ]\n      - [ \"qt\", \"mqtt\" ]\n      - [ \"qt\", \"net\", \"auth\" ]\n      - [ \"quick3d\" ]\n      - [ \"qt\", \"timeline\" ]\n      - [ \"qt\", \"virt\", \"key\" ]\n      - [ \"qt\", \"wayland\", \"compos\" ]\n      - [ \"qt\", \"5\", \"compat\" ]\n\npycharm_targets:\n  - jinja_path: .run_templates/pycharm_cura_run.run.xml.jinja\n    module_name: Cura\n    name: cura\n    script_name: cura_app.py\n  - jinja_path: .run_templates/pycharm_cura_run.run.xml.jinja\n    module_name: Cura\n    name: cura_external_engine\n    parameters: --external-backend\n    script_name: cura_app.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in tests\n    script_name: tests/\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestBuildVolume.py\n    script_name: tests/TestBuildVolume.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestConvexHullDecorator.py\n    script_name: tests/TestConvexHullDecorator.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestCuraSceneNode.py\n    script_name: tests/TestCuraSceneNode.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestCuraSceneNode.py\n    script_name: tests/TestExtruderManager.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestGCodeListDecorator.py\n    script_name: tests/TestGCodeListDecorator.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestHitChecker.py\n    script_name: tests/TestHitChecker.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestIntentManager.py\n    script_name: tests/TestIntentManager.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestLayer.py\n    script_name: tests/TestLayer.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestMachineAction.py\n    script_name: tests/TestMachineAction.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestMachineManager.py\n    script_name: tests/TestMachineManager.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestOAuth2.py\n    script_name: tests/TestOAuth2.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestObjectsModel.py\n    script_name: tests/TestObjectsModel.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestPrintInformation.py\n    script_name: tests/TestPrintInformation.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestPrintOrderManager.py\n    script_name: tests/TestPrintOrderManager.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestProfileRequirements.py\n    script_name: tests/TestProfileRequirements.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestThemes.py\n    script_name: tests/TestThemes.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestContainerManager.py\n    script_name: tests/Settings/TestContainerManager.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestCuraContainerRegistry.py\n    script_name: tests/Settings/TestCuraContainerRegistry.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestCuraStackBuilder.py\n    script_name: tests/Settings/TestCuraStackBuilder.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestDefinitionContainer.py\n    script_name: tests/Settings/TestDefinitionContainer.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestExtruderStack.py\n    script_name: tests/Settings/TestExtruderStack.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestGlobalStack.py\n    script_name: tests/Settings/TestGlobalStack.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestProfiles.py\n    script_name: tests/Settings/TestProfiles.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestSettingInheritanceManager.py\n    script_name: tests/Settings/TestSettingInheritanceManager.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestSettingOverrideDecorator.py\n    script_name: tests/Settings/TestSettingOverrideDecorator.py\n  - jinja_path: .run_templates/pycharm_cura_test.run.xml.jinja\n    module_name: Cura\n    name: pytest in TestSettingVisibilityPresets.py\n    script_name: tests/Settings/TestSettingVisibilityPresets.py\n\npip_requirements_core:\n  any_os:\n    charon:\n      url: \"git+https://github.com/ultimaker/libcharon@master/s-line#egg=charon\"\n    certifi:\n      version: \"2023.5.7\"\n      hashes:\n        - sha256:c6c2e98f5c7869efca1f8916fed228dd91539f9f1b444c314c06eef02980c716\n        - sha256:0f0d56dc5a6ad56fd4ba36484d6cc34451e1c6548c61daad8c320169f91eddc7\n    zeroconf:\n      version: \"0.31.0\"\n      hashes:\n        - sha256:5a468da018bc3f04bbce77ae247924d802df7aeb4c291bbbb5a9616d128800b0\n        - sha256:53a180248471c6f81bd1fffcbce03ed93d7d8eaf10905c9121ac1ea996d19844\n    importlib-metadata:\n      version: \"4.10.0\"\n      hashes:\n        - sha256:b7cf7d3fef75f1e4c80a96ca660efbd51473d7e8f39b5ab9210febc7809012a4\n        - sha256:92a8b58ce734b2a4494878e0ecf7d79ccd7a128b5fc6014c401e0b61f006f0f6\n    trimesh:\n      version: \"3.9.36\"\n      hashes:\n        - sha256:8ac8bea693b3ee119f11b022fc9b9481c9f1af06cb38bc859bf5d16bbbe49b23\n        - sha256:f01e8edab14d1999700c980c21a1546f37417216ad915a53be649d263130181e\n    setuptools:\n      version: \"75.6.0\"\n      hashes:\n        - sha256:ce74b49e8f7110f9bf04883b730f4765b774ef3ef28f722cce7c273d253aaf7d\n        - sha256:8199222558df7c86216af4f84c30e9b34a61d8ba19366cc914424cdbd28252f6\n    sentry-sdk:\n      version: \"0.13.5\"\n      hashes:\n        - sha256:05285942901d38c7ce2498aba50d8e87b361fc603281a5902dda98f3f8c5e145\n        - sha256:c6b919623e488134a728f16326c6f0bcdab7e3f59e7f4c472a90eea4d6d8fe82\n    pyserial:\n      version: \"3.4\"\n      hashes:\n        - sha256:e0770fadba80c31013896c7e6ef703f72e7834965954a78e71a3049488d4d7d8\n        - sha256:6e2d401fdee0eab996cf734e67773a0143b932772ca8b42451440cfed942c627\n    chardet:\n      version: \"3.0.4\"\n      hashes:\n        - sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\n        - sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\n    idna:\n      version: \"2.8\"\n      hashes:\n        - sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c\n        - sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407\n    attrs:\n      version: \"21.3.0\"\n      hashes:\n        - sha256:8f7335278dedd26b58c38e006338242cc0977f06d51579b2b8b87b9b33bff66c\n        - sha256:50f3c9b216dc9021042f71b392859a773b904ce1a029077f58f6598272432045\n    requests:\n      version: \"2.32.3\"\n      hashes:\n        - sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\n        - sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\n    twisted:\n      version: \"21.2.0\"\n      hashes:\n        - sha256:aab38085ea6cda5b378b519a0ec99986874921ee8881318626b0a3414bb2631e\n        - sha256:77544a8945cf69b98d2946689bbe0c75de7d145cdf11f391dd487eae8fc95a12\n    constantly:\n      version: \"15.1.0\"\n      hashes:\n        - sha256:dd2fa9d6b1a51a83f0d7dd76293d734046aa176e384bf6e33b7e44880eb37c5d\n        - sha256:586372eb92059873e29eba4f9dec8381541b4d3834660707faf8ba59146dfc35\n    hyperlink:\n      version: \"21.0.0\"\n      hashes:\n        - sha256:e6b14c37ecb73e89c77d78cdb4c2cc8f3fb59a885c5b3f819ff4ed80f25af1b4\n        - sha256:427af957daa58bc909471c6c40f74c5450fa123dd093fc53efd2e91d2705a56b\n    incremental:\n      version: \"22.10.0\"\n      hashes:\n        - sha256:b864a1f30885ee72c5ac2835a761b8fe8aa9c28b9395cacf27286602688d3e51\n        - sha256:912feeb5e0f7e0188e6f42241d2f450002e11bbc0937c65865045854c24c0bd0\n    zope.interface:\n      version: \"5.4.0\"\n      hashes:\n        - sha256:7df1e1c05304f26faa49fa752a8c690126cf98b40b91d54e6e9cc3b7d6ffe8b7\n        - sha256:2c98384b254b37ce50eddd55db8d381a5c53b4c10ee66e1e7fe749824f894021\n        - sha256:08f9636e99a9d5410181ba0729e0408d3d8748026ea938f3b970a0249daa8192\n        - sha256:0ea1d73b7c9dcbc5080bb8aaffb776f1c68e807767069b9ccdd06f27a161914a\n        - sha256:273f158fabc5ea33cbc936da0ab3d4ba80ede5351babc4f577d768e057651531\n        - sha256:f7ee479e96f7ee350db1cf24afa5685a5899e2b34992fb99e1f7c1b0b758d263\n        - sha256:b0297b1e05fd128d26cc2460c810d42e205d16d76799526dfa8c8ccd50e74959\n        - sha256:af310ec8335016b5e52cae60cda4a4f2a60a788cbb949a4fbea13d441aa5a09e\n        - sha256:9a9845c4c6bb56e508651f005c4aeb0404e518c6f000d5a1123ab077ab769f5c\n        - sha256:a1e6e96217a0f72e2b8629e271e1b280c6fa3fe6e59fa8f6701bec14e3354325\n        - sha256:877473e675fdcc113c138813a5dd440da0769a2d81f4d86614e5d62b69497155\n        - sha256:0b465ae0962d49c68aa9733ba92a001b2a0933c317780435f00be7ecb959c702\n        - sha256:5dd9ca406499444f4c8299f803d4a14edf7890ecc595c8b1c7115c2342cadc5f\n        - sha256:469e2407e0fe9880ac690a3666f03eb4c3c444411a5a5fddfdabc5d184a79f05\n        - sha256:52de7fc6c21b419078008f697fd4103dbc763288b1406b4562554bd47514c004\n        - sha256:3dd4952748521205697bc2802e4afac5ed4b02909bb799ba1fe239f77fd4e117\n        - sha256:dd93ea5c0c7f3e25335ab7d22a507b1dc43976e1345508f845efc573d3d779d8\n        - sha256:3748fac0d0f6a304e674955ab1365d515993b3a0a865e16a11ec9d86fb307f63\n        - sha256:66c0061c91b3b9cf542131148ef7ecbecb2690d48d1612ec386de9d36766058f\n        - sha256:d0c1bc2fa9a7285719e5678584f6b92572a5b639d0e471bb8d4b650a1a910920\n        - sha256:2876246527c91e101184f63ccd1d716ec9c46519cc5f3d5375a3351c46467c46\n        - sha256:334701327f37c47fa628fc8b8d28c7d7730ce7daaf4bda1efb741679c2b087fc\n        - sha256:71aace0c42d53abe6fc7f726c5d3b60d90f3c5c055a447950ad6ea9cec2e37d9\n        - sha256:5bb3489b4558e49ad2c5118137cfeaf59434f9737fa9c5deefc72d22c23822e2\n        - sha256:1c0e316c9add0db48a5b703833881351444398b04111188069a26a61cfb4df78\n        - sha256:6f0c02cbb9691b7c91d5009108f975f8ffeab5dff8f26d62e21c493060eff2a1\n        - sha256:7d97a4306898b05404a0dcdc32d9709b7d8832c0c542b861d9a826301719794e\n        - sha256:867a5ad16892bf20e6c4ea2aab1971f45645ff3102ad29bd84c86027fa99997b\n        - sha256:5f931a1c21dfa7a9c573ec1f50a31135ccce84e32507c54e1ea404894c5eb96f\n        - sha256:194d0bcb1374ac3e1e023961610dc8f2c78a0f5f634d0c737691e215569e640d\n        - sha256:8270252effc60b9642b423189a2fe90eb6b59e87cbee54549db3f5562ff8d1b8\n        - sha256:15e7d1f7a6ee16572e21e3576d2012b2778cbacf75eb4b7400be37455f5ca8bf\n        - sha256:8892f89999ffd992208754851e5a052f6b5db70a1e3f7d54b17c5211e37a98c7\n        - sha256:2e5a26f16503be6c826abca904e45f1a44ff275fdb7e9d1b75c10671c26f8b94\n        - sha256:0f91b5b948686659a8e28b728ff5e74b1be6bf40cb04704453617e5f1e945ef3\n        - sha256:4de4bc9b6d35c5af65b454d3e9bc98c50eb3960d5a3762c9438df57427134b8e\n        - sha256:bf68f4b2b6683e52bec69273562df15af352e5ed25d1b6641e7efddc5951d1a7\n        - sha256:63b82bb63de7c821428d513607e84c6d97d58afd1fe2eb645030bdc185440120\n        - sha256:db1fa631737dab9fa0b37f3979d8d2631e348c3b4e8325d6873c2541d0ae5a48\n        - sha256:f44e517131a98f7a76696a7b21b164bcb85291cee106a23beccce454e1f433a4\n        - sha256:a9506a7e80bcf6eacfff7f804c0ad5350c8c95b9010e4356a4b36f5322f09abb\n        - sha256:3c02411a3b62668200910090a0dff17c0b25aaa36145082a5a6adf08fa281e54\n        - sha256:0cee5187b60ed26d56eb2960136288ce91bcf61e2a9405660d271d1f122a69a4\n        - sha256:a8156e6a7f5e2a0ff0c5b21d6bcb45145efece1909efcbbbf48c56f8da68221d\n        - sha256:205e40ccde0f37496904572035deea747390a8b7dc65146d30b96e2dd1359a83\n        - sha256:3f24df7124c323fceb53ff6168da70dbfbae1442b4f3da439cd441681f54fe25\n        - sha256:5208ebd5152e040640518a77827bdfcc73773a15a33d6644015b763b9c9febc1\n        - sha256:17776ecd3a1fdd2b2cd5373e5ef8b307162f581c693575ec62e7c5399d80794c\n        - sha256:d4d9d6c1a455d4babd320203b918ccc7fcbefe308615c521062bc2ba1aa4d26e\n        - sha256:0cba8477e300d64a11a9789ed40ee8932b59f9ee05f85276dbb4b59acee5dd09\n        - sha256:5dba5f530fec3f0988d83b78cc591b58c0b6eb8431a85edd1569a0539a8a5a0e\n    automat:\n      version: \"20.2.0\"\n      hashes:\n        - sha256:b6feb6455337df834f6c9962d6ccf771515b7d939bca142b29c20c2376bc6111\n        - sha256:7979803c74610e11ef0c0d68a2942b152df52da55336e0c9d58daf1831cbdf33\n    shapely:\n      version: \"2.0.6\"\n      hashes:\n        - sha256:29a34e068da2d321e926b5073539fd2a1d4429a2c656bd63f0bd4c8f5b236d0b\n        - sha256:e1c84c3f53144febf6af909d6b581bc05e8785d57e27f35ebaa5c1ab9baba13b\n        - sha256:2ad2fae12dca8d2b727fa12b007e46fbc522148a584f5d6546c539f3464dccde\n        - sha256:b3304883bd82d44be1b27a9d17f1167fda8c7f5a02a897958d86c59ec69b705e\n        - sha256:3ec3a0eab496b5e04633a39fa3d5eb5454628228201fb24903d38174ee34565e\n        - sha256:28f87cdf5308a514763a5c38de295544cb27429cfa655d50ed8431a4796090c4\n        - sha256:5aeb0f51a9db176da9a30cb2f4329b6fbd1e26d359012bb0ac3d3c7781667a9e\n        - sha256:9a7a78b0d51257a367ee115f4d41ca4d46edbd0dd280f697a8092dd3989867b2\n        - sha256:f32c23d2f43d54029f986479f7c1f6e09c6b3a19353a3833c2ffb226fb63a855\n        - sha256:b3dc9fb0eb56498912025f5eb352b5126f04801ed0e8bdbd867d21bdbfd7cbd0\n        - sha256:d93b7e0e71c9f095e09454bf18dad5ea716fb6ced5df3cb044564a00723f339d\n        - sha256:c02eb6bf4cfb9fe6568502e85bb2647921ee49171bcd2d4116c7b3109724ef9b\n        - sha256:cec9193519940e9d1b86a3b4f5af9eb6910197d24af02f247afbfb47bcb3fab0\n        - sha256:83b94a44ab04a90e88be69e7ddcc6f332da7c0a0ebb1156e1c4f568bbec983c3\n        - sha256:537c4b2716d22c92036d00b34aac9d3775e3691f80c7aa517c2c290351f42cd8\n        - sha256:98fea108334be345c283ce74bf064fa00cfdd718048a8af7343c59eb40f59726\n        - sha256:42fd4cd4834747e4990227e4cbafb02242c0cffe9ce7ef9971f53ac52d80d55f\n        - sha256:665990c84aece05efb68a21b3523a6b2057e84a1afbef426ad287f0796ef8a48\n        - sha256:42805ef90783ce689a4dde2b6b2f261e2c52609226a0438d882e3ced40bb3013\n        - sha256:6d2cb146191a47bd0cee8ff5f90b47547b82b6345c0d02dd8b25b88b68af62d7\n        - sha256:e3fdef0a1794a8fe70dc1f514440aa34426cc0ae98d9a1027fb299d45741c381\n        - sha256:2c665a0301c645615a107ff7f52adafa2153beab51daf34587170d85e8ba6805\n        - sha256:0334bd51828f68cd54b87d80b3e7cee93f249d82ae55a0faf3ea21c9be7b323a\n        - sha256:d37d070da9e0e0f0a530a621e17c0b8c3c9d04105655132a87cfff8bd77cc4c2\n        - sha256:fa7468e4f5b92049c0f36d63c3e309f85f2775752e076378e36c6387245c5462\n        - sha256:ed5867e598a9e8ac3291da6cc9baa62ca25706eea186117034e8ec0ea4355653\n        - sha256:81d9dfe155f371f78c8d895a7b7f323bb241fb148d848a2bf2244f79213123fe\n        - sha256:fbb7bf02a7542dba55129062570211cfb0defa05386409b3e306c39612e7fbcc\n        - sha256:837d395fac58aa01aa544495b97940995211e3e25f9aaf87bc3ba5b3a8cd1ac7\n        - sha256:c6d88ade96bf02f6bfd667ddd3626913098e243e419a0325ebef2bbd481d1eb6\n        - sha256:8b3b818c4407eaa0b4cb376fd2305e20ff6df757bf1356651589eadc14aab41b\n        - sha256:1bbc783529a21f2bd50c79cef90761f72d41c45622b3e57acf78d984c50a5d13\n        - sha256:2423f6c0903ebe5df6d32e0066b3d94029aab18425ad4b07bf98c3972a6e25a1\n        - sha256:2de00c3bfa80d6750832bde1d9487e302a6dd21d90cb2f210515cefdb616e5f5\n        - sha256:3a82d58a1134d5e975f19268710e53bddd9c473743356c90d97ce04b73e101ee\n        - sha256:392f66f458a0a2c706254f473290418236e52aa4c9b476a072539d63a2460595\n        - sha256:eba5bae271d523c938274c61658ebc34de6c4b33fdf43ef7e938b5776388c1be\n        - sha256:7060566bc4888b0c8ed14b5d57df8a0ead5c28f9b69fb6bed4476df31c51b0af\n        - sha256:b02154b3e9d076a29a8513dffcb80f047a5ea63c897c0cd3d3679f29363cf7e5\n        - sha256:44246d30124a4f1a638a7d5419149959532b99dfa25b54393512e6acc9c211ac\n        - sha256:2b542d7f1dbb89192d3512c52b679c822ba916f93479fa5d4fc2fe4fa0b3c9e8\n        - sha256:997f6159b1484059ec239cacaa53467fd8b5564dabe186cd84ac2944663b0bf6\n    cython:\n      version: \"0.29.26\"\n      hashes:\n        - sha256:c4b003b6b7aa9e74552ef8d4e6009b3e3c3e8fa585710b3a6d062e088e460c1b\n        - sha256:ce804a021c92fea66c8c100781a111706f21bade7a546895c5a9c57fe2df8b24\n        - sha256:93840f2071c1f15e613509eadee1fbcd335e8666772437fe5038e24059edd48c\n        - sha256:10402f0f1564ffc6ecb9c45e07f995771d05bb0b0e1d151e40574638292ee3a5\n        - sha256:8e07121b34221458a2151d37e137b8f5b011a9c51dd38db2499a6198590aa319\n        - sha256:233a87db76941626f1db08f4b25a4a5b425b13b64ed0e673c3641f7b650a48d8\n        - sha256:6773cce9d4b3b6168d8feb2b6f06b658ef1e11cbfec075041745666d8e2a5e45\n        - sha256:c813799d533194b7d85203d881d8b4f567a8c644a67f50d47f1ffbf316df412f\n        - sha256:362fbb9cb4627c7786231429768b54aaba5459a2a0e46c25e59f202ca6155437\n        - sha256:2b834ff6e4d10ba6d7a0d676dd71c1b427a181ddbbbbf79e91d1861557aab59f\n        - sha256:0c3093bc99facfc97e5019f6c5bc39987663792265c1334d9fc9e37c3a3dcd6f\n        - sha256:bbf0149680c1fca07200a3ed372b22e6bad7851d191b717a61f9a68af370e180\n        - sha256:a1cc55db32cd39474081d478263b96e036552cdbbab8831c90ea43fb385a9b66\n        - sha256:ebe32e002a9e6553de399033e259ece72aa17c77f740b265e66f122572a8a278\n        - sha256:6b385f68789c3e8a75b4827e8a4970ff04605ad3cb1c0b41005cc69368dad65d\n        - sha256:1519eb639de308f5763eb0666b4cc7bd3958268f3f6228cc610b7b4d6c94b68b\n        - sha256:e118525defec3f67471d8ee5ce04340d43195410a87e5d7ec8a1a9e953c0066a\n        - sha256:706ea55f58c2722206e51cd9a8754ed0995c4c4231d24b095875d2641d745222\n        - sha256:77913fe27c5e22c995bac090d01e200ff91e5f58aa944e2d2e94cbf67ea2ae34\n        - sha256:51923120f57a42c59f5ee6bba9e89a31a394ae8cd419c753f64d8a3aea1ee8b7\n        - sha256:82881565d04027728d7762edd8c085927a840873af7ee049d703e0ca226bc08d\n        - sha256:531303085503959338e6cdac630626280ef111aecbb22d48321673a8c3897c0a\n        - sha256:0205b685802eb4c039b14f67b7ac3f00c55ff04b9e3871df2249576d3e59ba42\n        - sha256:7df94e56872df8f396ca669466fee60256f69f678654239f706b1e643c2ac4a5\n        - sha256:4b7d04b393d9a4b5fec0cbc4b0f29fe083a9d862d95231a6e7608978bd661d7e\n        - sha256:af91dd63ac5f1f7fc70dc91ea063f727db42b5eb934d1f3832611be18e25171e\n        - sha256:d83dad8dc6c63706cb3178dc79010b3865b1345090727189d2cd61758a825ee8\n        - sha256:ca10e9fde0eaba1407ab353ff07a26daaa3e4dbe356108a149e482d441f070dd\n        - sha256:fec66cd0a48697fab903854566235aecf1084f62e3163d6589ae7335a1b4d448\n        - sha256:b3041e45aefaa4449fd671902132c0ac1f72eedaedac745c0e1a70a13bf990bb\n        - sha256:ed76fb98979f02b5e89079906071983a36f3634d3028b86f935cf0196f24fcaa\n        - sha256:4d868e1a41f5123f51a20c1b8e82f7cb6fa3370c104e98e707f7c910e8cadad1\n        - sha256:868f309095e557f06dc58723ae865e8c65cfedb2646a562bd8080c92d69e4e4b\n        - sha256:be550b566345bf53b95616334793ce42a128cf1d9dcde1e28cbf7ce52ea61d6d\n        - sha256:be13be1e2b9b7395588f2a23bfa692f2f3e6f7936ccf7825c83431b8c8c3452b\n        - sha256:41ee918480371ae5e5851ba9b1ead5a183e24aedb27bf807c7405d124e943f40\n        - sha256:c91b1ba0d43f7f7ccde8121c672207c7891735ddcc83496af1e0ab617ddc4aba\n        - sha256:5ecf5cf5b57086cc6c1cfc76d6353bbd7023e95da32e0883f1302ca50e481c33\n        - sha256:0ffce25bf50fa926ec6bf8d6f29650e7cb33fae445938c9880e1ce9b776353ef\n        - sha256:5041adfef502d67ecd5e291a7cf645a37fed7a9dac557f40d491053f35204d00\n        - sha256:5fd5db458c9d3d2c2abd047f3190624d9cce8a80a8e0ca0baa69cfd133a523bc\n        - sha256:75eaa22911d2ec37a3841f77b710b178c805cd378b5e1c4fb82dbc35620d2062\n        - sha256:3aed8c642e8fb27024bca46830b7f62335a44a92354acf708d6b8d050f945a3a\n        - sha256:b5ca05c2bfba0c2480b5fd390ecffe46b8da574d887d600388d6e3caf3f99a88\n        - sha256:f5e15ff892c8afad64931ee3dd723c4755c2c516606f9aae7613bebfac62b0f6\n        - sha256:af377d543a762867da11fcf6e558f7a4a535ff8693f30cce123fab10c00fa312\n    pybind11:\n      version: \"2.6.2\"\n      hashes:\n        - sha256:2d8aebe1709bc367e34e3b23d8eccbf3f387ee9d5640548c6260d33b59f02405\n        - sha256:d0e0aed9279656f21501243b707eb6e3b951e89e10c3271dedf3ae41c365e5ed\n    wheel:\n      version: \"0.37.1\"\n      hashes:\n        - sha256:4bdcd7d840138086126cd09254dc6195fb4fc6f01c050a1d7236f2630db1d22a\n        - sha256:e9a504e793efbca1b8e0e9cb979a249cf4a0a7b5b8c9e8b65a5e39d49529c1c4\n    ifaddr:\n      version: \"0.1.7\"\n      hashes:\n        - sha256:d1f603952f0a71c9ab4e705754511e4e03b02565bc4cec7188ad6415ff534cd3\n        - sha256:1f9e8a6ca6f16db5a37d3356f07b6e52344f6f9f7e806d618537731669eb1a94\n    pycparser:\n      version: \"2.20\"\n      hashes:\n        - sha256:7582ad22678f0fcd81102833f60ef8d0e57288b6b5fb00323d101be910e35705\n        - sha256:2d475327684562c3a96cc71adf7dc8c4f0565175cf86b6d7a404ff4c771f15f0\n    zipp:\n      version: \"3.5.0\"\n      hashes:\n        - sha256:957cfda87797e389580cb8b9e3870841ca991e2125350677b2ca83a0e99390a3\n        - sha256:f5812b1e007e48cff63449a5e9f4e7ebea716b4111f9c4f9a645f91d579bf0c4\n    urllib3:\n      version: \"2.2.3\"\n      hashes:\n        - sha256:ca899ca043dcb1bafa3e262d73aa25c465bfb49e0bd9dd5d59f1d0acba2f8fac\n        - sha256:e7d814a81dad81e6caf2ec9fdedb284ecc9c73076b62654547cc64ccdcae26e9\n    jeepney:\n      version: \"0.8.0\"\n      hashes:\n        - sha256:c0a454ad016ca575060802ee4d590dd912e35c122fa04e70306de3d076cce755\n        - sha256:5efe48d255973902f6badc3ce55e2aa6c5c3b3bc642059ef3a91247bcfcc5806\n    SecretStorage:\n      version: \"3.3.3\"\n      hashes:\n        - sha256:f356e6628222568e3af06f2eba8df495efa13b3b63081dafd4f7d9a7b7bc9f99\n        - sha256:2403533ef369eca6d2ba81718576c5e0f564d5cca1b58f73a8b23e7d4eeebd77\n    keyring:\n      version: \"25.5.0\"\n      hashes:\n        - sha256:e67f8ac32b04be4714b42fe84ce7dad9c40985b9ca827c592cc303e7c26d9741\n        - sha256:4c753b3ec91717fe713c4edd522d625889d8973a349b0e582622f49766de58e6\n    jaraco.classes:\n      version: \"3.4.0\"\n      hashes:\n        - sha256:f662826b6bed8cace05e7ff873ce0f9283b5c924470fe664fff1c2f00f581790\n        - sha256:47a024b51d0239c0dd8c8540c6c7f484be3b8fcf0b2d85c13825780d3b3f3acd\n    jaraco.functools:\n      version: \"4.1.0\"\n      hashes:\n        - sha256:ad159f13428bc4acbf5541ad6dec511f91573b90fba04df61dafa2a1231cf649\n        - sha256:70f7e0e2ae076498e212562325e805204fc092d7b4c17e0e86c959e249701a9d\n    jaraco.context:\n      version: \"6.0.1\"\n      hashes:\n        - sha256:f797fc481b490edb305122c9181830a3a5b76d84ef6d1aef2fb9b47ab956f9e4\n        - sha256:9bae4ea555cf0b14938dc0aee7c9f32ed303aa20a3b73e7dc80111628792d1b3\n    more_itertools:\n      version: \"10.5.0\"\n      hashes:\n        - sha256:037b0d3203ce90cca8ab1defbbdac29d5f993fc20131f3664dc8d6acfa872aef\n        - sha256:5482bfef7849c25dc3c6dd53a6173ae4795da2a41a80faea6700d9f5846c5da6\n    charset-normalizer:\n      version: \"2.1.0\"\n      hashes:\n        - sha256:5189b6f22b01957427f35b6a08d9a0bc45b46d3788ef5a92e978433c7a35f8a5\n        - sha256:575e708016ff3a5e3681541cb9d79312c416835686d054a23accb873b254f413\n  Windows:\n    twisted-iocpsupport:\n      version: \"1.0.2\"\n      hashes:\n        - sha256:985c06a33f5c0dae92c71a036d1ea63872ee86a21dd9b01e1f287486f15524b4\n        - sha256:81b3abe3527b367da0220482820cb12a16c661672b7bcfcde328902890d63323\n        - sha256:9dbb8823b49f06d4de52721b47de4d3b3026064ef4788ce62b1a21c57c3fff6f\n        - sha256:b9fed67cf0f951573f06d560ac2f10f2a4bbdc6697770113a2fc396ea2cb2565\n        - sha256:b76b4eed9b27fd63ddb0877efdd2d15835fdcb6baa745cb85b66e5d016ac2878\n        - sha256:851b3735ca7e8102e661872390e3bce88f8901bece95c25a0c8bb9ecb8a23d32\n        - sha256:bf4133139d77fc706d8f572e6b7d82871d82ec7ef25d685c2351bdacfb701415\n        - sha256:306becd6e22ab6e8e4f36b6bdafd9c92e867c98a5ce517b27fdd27760ee7ae41\n        - sha256:3c61742cb0bc6c1ac117a7e5f422c129832f0c295af49e01d8a6066df8cfc04d\n        - sha256:b435857b9efcbfc12f8c326ef0383f26416272260455bbca2cd8d8eca470c546\n        - sha256:7d972cfa8439bdcb35a7be78b7ef86d73b34b808c74be56dfa785c8a93b851bf\n        - sha256:72068b206ee809c9c596b57b5287259ea41ddb4774d86725b19f35bf56aa32a9\n    pywin32-ctypes:\n      version: \"0.2.3\"\n      hashes:\n        - sha256:8a1513379d709975552d202d942d9837758905c8d01eb82b8bcc30918929e7b8\n        - sha256:d162dc04946d704503b2edc4d55f3dba5c1d539ead017afa00142c38b9885755\n\npip_requirements_dev:\n  any_os:\n    pytest: {}\n    pyyaml: {}\n    sip: { version: \"6.5.1\" }\n    jinja2: {}\n\npip_requirements_installer:\n  any_os:\n    pyinstaller: { version: \"6.11.1\" }\n    pyinstaller-hooks-contrib: {}\n\npython_translation_source_folders:\n  - cura\n  - plugins\nqml_translation_source_folders:\n  - resources/qml\n  - plugins\n"
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 25.6162109375,
          "content": "import os\nfrom io import StringIO\nfrom pathlib import Path\n\nfrom jinja2 import Template\n\nfrom conan import ConanFile\nfrom conan.tools.files import copy, rmdir, save, mkdir, rm, update_conandata\nfrom conan.tools.microsoft import unix_path\nfrom conan.tools.env import VirtualRunEnv, Environment, VirtualBuildEnv\nfrom conan.tools.scm import Version\nfrom conan.errors import ConanInvalidConfiguration, ConanException\n\nrequired_conan_version = \">=2.7.0\"\n\n\nclass CuraConan(ConanFile):\n    name = \"cura\"\n    license = \"LGPL-3.0\"\n    author = \"UltiMaker\"\n    url = \"https://github.com/Ultimaker/cura\"\n    description = \"3D printer / slicing GUI built on top of the Uranium framework\"\n    topics = (\"conan\", \"python\", \"pyqt6\", \"qt\", \"qml\", \"3d-printing\", \"slicer\")\n    build_policy = \"missing\"\n    exports = \"LICENSE*\", \"*.jinja\"\n    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n    generators = \"VirtualPythonEnv\"\n    tool_requires = \"gettext/0.22.5\"\n\n    # FIXME: Remove specific branch once merged to main\n    python_requires = \"translationextractor/[>=2.2.0]@ultimaker/stable\"\n\n    options = {\n        \"enterprise\": [True, False],\n        \"staging\": [True, False],\n        \"cloud_api_version\": [\"ANY\"],\n        \"display_name\": [\"ANY\"],  # TODO: should this be an option??\n        \"cura_debug_mode\": [True, False],  # FIXME: Use profiles\n        \"internal\": [True, False],\n        \"i18n_extract\": [True, False],\n    }\n    default_options = {\n        \"enterprise\": False,\n        \"staging\": False,\n        \"cloud_api_version\": \"1\",\n        \"display_name\": \"UltiMaker Cura\",\n        \"cura_debug_mode\": False,  # Not yet implemented\n        \"internal\": False,\n        \"i18n_extract\": False,\n    }\n\n    def set_version(self):\n        if not self.version:\n            self.version = self.conan_data[\"version\"]\n\n    @property\n    def _app_name(self):\n        if self.options.enterprise:\n            return str(self.options.display_name) + \" Enterprise\"\n        return str(self.options.display_name)\n\n    @property\n    def _urls(self):\n        if self.options.staging:\n            return \"staging\"\n        return \"default\"\n\n    @property\n    def _root_dir(self):\n        return Path(self.deploy_folder if hasattr(self, \"deploy_folder\") else self.source_folder)\n\n    @property\n    def _base_dir(self):\n        return self._root_dir.joinpath(\"venv\")\n\n    @property\n    def _share_dir(self):\n        return self._base_dir.joinpath(\"share\")\n\n    @property\n    def _script_dir(self):\n        if self.settings.os == \"Windows\":\n            return self._base_dir.joinpath(\"Scripts\")\n        return self._base_dir.joinpath(\"bin\")\n\n    @property\n    def _site_packages(self):\n        if self.settings.os == \"Windows\":\n            return self._base_dir.joinpath(\"Lib\", \"site-packages\")\n        py_version = Version(self.dependencies[\"cpython\"].ref.version)\n        return self._base_dir.joinpath(\"lib\", f\"python{py_version.major}.{py_version.minor}\", \"site-packages\")\n\n    @property\n    def _py_interp(self):\n        py_interp = self._script_dir.joinpath(Path(self.deps_user_info[\"cpython\"].python).name)\n        if self.settings.os == \"Windows\":\n            py_interp = Path(*[f'\"{p}\"' if \" \" in p else p for p in py_interp.parts])\n        return py_interp\n\n    @property\n    def _pyinstaller_spec_arch(self):\n        if self.settings.os == \"Macos\":\n            if self.settings.arch == \"armv8\":\n                return \"'arm64'\"\n            return \"'x86_64'\"\n        return \"None\"\n\n    def _conan_installs(self):\n        self.output.info(\"Collecting conan installs\")\n        conan_installs = {}\n\n        # list of conan installs\n        for dependency in self.dependencies.host.values():\n            conan_installs[dependency.ref.name] = {\n                \"version\": str(dependency.ref.version),\n                \"revision\": dependency.ref.revision\n            }\n        return conan_installs\n\n    def _python_installs(self):\n        self.output.info(\"Collecting python installs\")\n        python_installs = {}\n\n        collect_python_installs = \"collect_python_installs.py\"\n        code = f\"import importlib.metadata;  print(';'.join([(package.metadata['Name']+','+    package.metadata['Version']) for package in importlib.metadata.distributions()]))\"\n        save(self, collect_python_installs, code)\n\n        buffer = StringIO()\n        self.run(f\"\"\"python {collect_python_installs}\"\"\", env = \"virtual_python_env\", stdout = buffer)\n        rm(self, collect_python_installs, \".\")\n\n        packages = str(buffer.getvalue()).strip('\\r\\n').split(\";\")\n        for package in packages:\n            name, version = package.split(\",\")\n            python_installs[name] = {\"version\": version}\n\n        return python_installs\n\n    def _generate_cura_version(self, location):\n        with open(os.path.join(self.recipe_folder, \"CuraVersion.py.jinja\"), \"r\") as f:\n            cura_version_py = Template(f.read())\n\n        # If you want a specific Cura version to show up on the splash screen add the user configuration `user.cura:version=VERSION`\n        # the global.conf, profile, package_info (of dependency) or via the cmd line `-c user.cura:version=VERSION`\n        cura_version = Version(self.conf.get(\"user.cura:version\", default = self.version, check_type = str))\n        pre_tag = f\"-{cura_version.pre}\" if cura_version.pre else \"\"\n        build_tag = f\"+{cura_version.build}\" if cura_version.build else \"\"\n        internal_tag = f\"+internal\" if self.options.internal else \"\"\n        cura_version = f\"{cura_version.major}.{cura_version.minor}.{cura_version.patch}{pre_tag}{build_tag}{internal_tag}\"\n\n        self.output.info(f\"Write CuraVersion.py to {self.recipe_folder}\")\n\n        with open(os.path.join(location, \"CuraVersion.py\"), \"w\") as f:\n            f.write(cura_version_py.render(\n                cura_app_name = self.name,\n                cura_app_display_name = self._app_name,\n                cura_version = cura_version,\n                cura_version_full = self.version,\n                cura_build_type = \"Enterprise\" if self.options.enterprise else \"\",\n                cura_debug_mode = self.options.cura_debug_mode,\n                cura_cloud_api_root = self.conan_data[\"urls\"][self._urls][\"cloud_api_root\"],\n                cura_cloud_api_version = self.options.cloud_api_version,\n                cura_cloud_account_api_root = self.conan_data[\"urls\"][self._urls][\"cloud_account_api_root\"],\n                cura_marketplace_root = self.conan_data[\"urls\"][self._urls][\"marketplace_root\"],\n                cura_digital_factory_url = self.conan_data[\"urls\"][self._urls][\"digital_factory_url\"],\n                cura_latest_url=self.conan_data[\"urls\"][self._urls][\"cura_latest_url\"],\n                conan_installs=self._conan_installs(),\n                python_installs=self._python_installs(),\n            ))\n\n    def _delete_unwanted_binaries(self, root):\n        dynamic_binary_file_exts = [\".so\", \".dylib\", \".dll\", \".pyd\", \".pyi\"]\n        prohibited = [\n            \"qt5compat\",\n            \"qtcharts\",\n            \"qtcoap\",\n            \"qtdatavis3d\",\n            \"qtlottie\",\n            \"qtmqtt\",\n            \"qtnetworkauth\",\n            \"qtquick3d\",\n            \"quick3d\",\n            \"qtquick3dphysics\",\n            \"qtquicktimeline\",\n            \"qtvirtualkeyboard\",\n            \"qtwayland\"\n        ]\n        forbiddens = [x.encode() for x in prohibited]\n        to_remove_files = []\n        to_remove_dirs = []\n        for root, dir_, files in os.walk(root):\n            for filename in files:\n                if not any([(x in filename) for x in dynamic_binary_file_exts]):\n                    continue\n                pathname = os.path.join(root, filename)\n                still_exist = True\n                for forbidden in prohibited:\n                    if forbidden.lower() in str(pathname).lower():\n                        to_remove_files.append(pathname)\n                        still_exist = False\n                        break\n                if not still_exist:\n                    continue\n                with open(pathname, \"rb\") as file:\n                    bytez = file.read().lower()\n                    for forbidden in forbiddens:\n                        if bytez.find(forbidden) >= 0:\n                            to_remove_files.append(pathname)\n            for dirname in dir_:\n                for forbidden in prohibited:\n                    if forbidden.lower() in str(dirname).lower():\n                        pathname = os.path.join(root, dirname)\n                        to_remove_dirs.append(pathname)\n                        break\n        for file in to_remove_files:\n            try:\n                os.remove(file)\n                print(f\"deleted file: {file}\")\n            except Exception as ex:\n                print(f\"WARNING: Attempt to delete file {file} results in: {str(ex)}\")\n        for dir_ in to_remove_dirs:\n            try:\n                rmdir(self, dir_)\n                print(f\"deleted dir_: {dir_}\")\n            except Exception as ex:\n                print(f\"WARNING: Attempt to delete folder {dir_} results in: {str(ex)}\")\n\n    def _generate_pyinstaller_spec(self, location, entrypoint_location, icon_path, entitlements_file, cura_source_folder):\n        pyinstaller_metadata = self.conan_data[\"pyinstaller\"]\n        datas = []\n        for data in pyinstaller_metadata[\"datas\"].values():\n            if (not self.options.internal and data.get(\"internal\", False)) or (not self.options.enterprise and data.get(\"enterprise_only\", False)):\n                continue\n\n            if \"oses\" in data and self.settings.os not in data[\"oses\"]:\n                continue\n\n            if \"package\" in data:  # get the paths from conan package\n                if data[\"package\"] == self.name:\n                    src_path = str(Path(cura_source_folder, data[\"src\"]))\n                else:\n                    if data[\"package\"] not in self.dependencies:\n                        raise ConanException(f\"Required package {data['package']} does not exist as a dependency\")\n\n                    package_folder = self.dependencies[data['package']].package_folder\n                    if package_folder is None:\n                        raise ConanException(f\"Unable to find package_folder for {data['package']}, check that it has not been skipped\")\n\n                    src_path = os.path.join(self.dependencies[data[\"package\"]].package_folder, data[\"src\"])\n            elif \"root\" in data:  # get the paths relative from the install folder\n                src_path = os.path.join(self.install_folder, data[\"root\"], data[\"src\"])\n            else:\n                raise ConanException(\"Misformatted conan data for pyinstaller datas, expected either package or root option\")\n\n            if not Path(src_path).exists():\n                raise ConanException(f\"Missing folder {src_path} for pyinstaller data {data}\")\n\n            datas.append((str(src_path), data[\"dst\"]))\n\n        binaries = []\n        for binary in pyinstaller_metadata[\"binaries\"].values():\n            if \"package\" in binary:  # get the paths from conan package\n                src_path = os.path.join(self.dependencies[binary[\"package\"]].package_folder, binary[\"src\"])\n            elif \"root\" in binary:  # get the paths relative from the sourcefolder\n                src_path = str(Path(self.source_folder, binary[\"root\"], binary[\"src\"]))\n                if self.settings.os == \"Windows\":\n                    src_path = src_path.replace(\"\\\\\", \"\\\\\\\\\")\n            else:\n                raise ConanException(\"Misformatted conan data for pyinstaller binaries, expected either package or root option\")\n\n            if not Path(src_path).exists():\n                raise ConanException(f\"Missing folder {src_path} for pyinstaller binary {binary}\")\n\n            for bin in Path(src_path).glob(binary[\"binary\"] + \"*[.exe|.dll|.so|.dylib|.so.]*\"):\n                binaries.append((str(bin), binary[\"dst\"]))\n            for bin in Path(src_path).glob(binary[\"binary\"]):\n                binaries.append((str(bin), binary[\"dst\"]))\n\n        # Make sure all Conan dependencies which are shared are added to the binary list for pyinstaller\n        for _, dependency in self.dependencies.host.items():\n            for bin_paths in dependency.cpp_info.bindirs:\n                binaries.extend([(f\"{p}\", \".\") for p in Path(bin_paths).glob(\"**/*.dll\")])\n            for lib_paths in dependency.cpp_info.libdirs:\n                binaries.extend([(f\"{p}\", \".\") for p in Path(lib_paths).glob(\"**/*.so*\")])\n                binaries.extend([(f\"{p}\", \".\") for p in Path(lib_paths).glob(\"**/*.dylib*\")])\n\n        # Copy dynamic libs from lib path\n        binaries.extend([(f\"{p}\", \".\") for p in Path(self._base_dir.joinpath(\"lib\")).glob(\"**/*.dylib*\")])\n        binaries.extend([(f\"{p}\", \".\") for p in Path(self._base_dir.joinpath(\"lib\")).glob(\"**/*.so*\")])\n\n        # Collect all dll's from PyQt6 and place them in the root\n        binaries.extend([(f\"{p}\", \".\") for p in Path(self._site_packages, \"PyQt6\", \"Qt6\").glob(\"**/*.dll\")])\n\n        with open(os.path.join(self.recipe_folder, \"UltiMaker-Cura.spec.jinja\"), \"r\") as f:\n            pyinstaller = Template(f.read())\n\n        version = self.conf.get(\"user.cura:version\", default = self.version, check_type = str)\n        cura_version = Version(version)\n\n        # filter all binary files in binaries on the blacklist\n        blacklist = pyinstaller_metadata[\"blacklist\"]\n        filtered_binaries = [b for b in binaries if not any([all([(part in b[0].lower()) for part in parts]) for parts in blacklist])]\n\n        # In case the installer isn't actually pyinstaller (Windows at the moment), outright remove the offending files:\n        specifically_delete = set(binaries) - set(filtered_binaries)\n        for (unwanted_path, _) in specifically_delete:\n            try:\n                os.remove(unwanted_path)\n                print(f\"delete: {unwanted_path}\")\n            except Exception as ex:\n                print(f\"WARNING: Attempt to delete binary {unwanted_path} results in: {str(ex)}\")\n\n        hiddenimports = pyinstaller_metadata[\"hiddenimports\"]\n        collect_all = pyinstaller_metadata[\"collect_all\"]\n        if self.settings.os == \"Windows\":\n            hiddenimports += pyinstaller_metadata[\"hiddenimports_WINDOWS_ONLY\"]\n            collect_all += pyinstaller_metadata[\"collect_all_WINDOWS_ONLY\"]\n\n        # Write the actual file:\n        with open(os.path.join(location, \"UltiMaker-Cura.spec\"), \"w\") as f:\n            f.write(pyinstaller.render(\n                name = str(self.options.display_name).replace(\" \", \"-\"),\n                display_name = self._app_name,\n                entrypoint = entrypoint_location,\n                datas = datas,\n                binaries = filtered_binaries,\n                venv_script_path = str(self._script_dir),\n                hiddenimports = hiddenimports,\n                collect_all = collect_all,\n                icon = icon_path,\n                entitlements_file = entitlements_file,\n                osx_bundle_identifier = \"'nl.ultimaker.cura'\" if self.settings.os == \"Macos\" else \"None\",\n                upx = str(self.settings.os == \"Windows\"),\n                strip = False,  # This should be possible on Linux and MacOS but, it can also cause issues on some distributions. Safest is to disable it for now\n                target_arch = self._pyinstaller_spec_arch,\n                macos = self.settings.os == \"Macos\",\n                version = f\"'{version}'\",\n                short_version = f\"'{cura_version.major}.{cura_version.minor}.{cura_version.patch}'\",\n            ))\n\n    def export(self):\n        update_conandata(self, {\"version\": self.version})\n\n    def export_sources(self):\n        copy(self, \"*\", os.path.join(self.recipe_folder, \"plugins\"), os.path.join(self.export_sources_folder, \"plugins\"))\n        copy(self, \"*\", os.path.join(self.recipe_folder, \"resources\"), os.path.join(self.export_sources_folder, \"resources\"), excludes = \"*.mo\")\n        copy(self, \"*\", os.path.join(self.recipe_folder, \"tests\"), os.path.join(self.export_sources_folder, \"tests\"))\n        copy(self, \"*\", os.path.join(self.recipe_folder, \"cura\"), os.path.join(self.export_sources_folder, \"cura\"), excludes=\"CuraVersion.py\")\n        copy(self, \"*\", os.path.join(self.recipe_folder, \"packaging\"), os.path.join(self.export_sources_folder, \"packaging\"))\n        copy(self, \"*\", os.path.join(self.recipe_folder, \".run_templates\"), os.path.join(self.export_sources_folder, \".run_templates\"))\n        copy(self, \"cura_app.py\", self.recipe_folder, self.export_sources_folder)\n\n    def validate(self):\n        if self.options.i18n_extract and self.settings.os == \"Windows\" and not self.conf.get(\"tools.microsoft.bash:path\", check_type=str):\n            raise ConanInvalidConfiguration(\"Unable to extract translations on Windows without Bash installed\")\n\n    def requirements(self):\n        for req in self.conan_data[\"requirements\"]:\n            if self.options.internal and \"fdm_materials\" in req:\n                continue\n            self.requires(req)\n        if self.options.internal:\n            for req in self.conan_data[\"requirements_internal\"]:\n                self.requires(req)\n        if self.options.enterprise:\n            for req in self.conan_data[\"requirements_enterprise\"]:\n                self.requires(req)\n        self.requires(\"cpython/3.12.2\")\n\n    def layout(self):\n        self.folders.source = \".\"\n        self.folders.build = \"build\"\n        self.folders.generators = os.path.join(self.folders.build, \"generators\")\n\n        self.cpp.package.libdirs = [os.path.join(\"site-packages\", \"cura\")]\n        self.cpp.package.bindirs = [\"bin\"]\n        self.cpp.package.resdirs = [\"resources\", \"plugins\", \"packaging\"]\n\n    def generate(self):\n        copy(self, \"cura_app.py\", self.source_folder, str(self._script_dir))\n\n        self._generate_cura_version(str(Path(self.source_folder, \"cura\")))\n\n        # Copy CuraEngine.exe to bindirs of Virtual Python Environment\n        curaengine = self.dependencies[\"curaengine\"].cpp_info\n        copy(self, \"CuraEngine.exe\", curaengine.bindirs[0], self.source_folder, keep_path = False)\n        copy(self, \"CuraEngine\", curaengine.bindirs[0], self.source_folder, keep_path = False)\n\n        # Copy the external plugins that we want to bundle with Cura\n        if self.options.enterprise:\n            rmdir(self, str(Path(self.source_folder, \"plugins\", \"NativeCADplugin\")))\n            native_cad_plugin = self.dependencies[\"native_cad_plugin\"].cpp_info\n            copy(self, \"*\", native_cad_plugin.resdirs[0], str(Path(self.source_folder, \"plugins\", \"NativeCADplugin\")), keep_path = True)\n            copy(self, \"bundled_*.json\", native_cad_plugin.resdirs[1], str(Path(self.source_folder, \"resources\", \"bundled_packages\")), keep_path = False)\n\n        # Copy resources of cura_binary_data\n        cura_binary_data = self.dependencies[\"cura_binary_data\"].cpp_info\n        copy(self, \"*\", cura_binary_data.resdirs[0], str(self._share_dir.joinpath(\"cura\")), keep_path = True)\n        copy(self, \"*\", cura_binary_data.resdirs[1], str(self._share_dir.joinpath(\"uranium\")), keep_path = True)\n        if self.settings.os == \"Windows\":\n            copy(self, \"*\", cura_binary_data.resdirs[2], str(self._share_dir.joinpath(\"windows\")), keep_path = True)\n\n        for dependency in self.dependencies.host.values():\n            for bindir in dependency.cpp_info.bindirs:\n                self._delete_unwanted_binaries(bindir)\n                copy(self, \"*.dll\", bindir, str(self._site_packages), keep_path = False)\n            for libdir in dependency.cpp_info.libdirs:\n                self._delete_unwanted_binaries(libdir)\n                copy(self, \"*.pyd\", libdir, str(self._site_packages), keep_path = False)\n                copy(self, \"*.pyi\", libdir, str(self._site_packages), keep_path = False)\n                copy(self, \"*.dylib\", libdir, str(self._base_dir.joinpath(\"lib\")), keep_path = False)\n\n        # Copy materials (flat)\n        rmdir(self, str(Path(self.source_folder, \"resources\", \"materials\")))\n        fdm_materials = self.dependencies[\"fdm_materials\"].cpp_info\n        copy(self, \"*\", fdm_materials.resdirs[0], self.source_folder)\n\n        # Copy internal resources\n        if self.options.internal:\n            cura_private_data = self.dependencies[\"cura_private_data\"].cpp_info\n            copy(self, \"*\", cura_private_data.resdirs[0], str(self._share_dir.joinpath(\"cura\")))\n\n        if self.options.i18n_extract:\n            vb = VirtualBuildEnv(self)\n            vb.generate()\n\n            pot = self.python_requires[\"translationextractor\"].module.ExtractTranslations(self)\n            pot.generate()\n\n    def build(self):\n        if self.settings.os == \"Windows\" and not self.conf.get(\"tools.microsoft.bash:path\", check_type=str):\n            self.output.warning(\"Skipping generation of binary translation files because Bash could not be found and is required\")\n            return\n\n        for po_file in Path(self.source_folder, \"resources\", \"i18n\").glob(\"**/*.po\"):\n            mo_file = Path(self.build_folder, po_file.with_suffix('.mo').relative_to(self.source_folder))\n            mo_file = mo_file.parent.joinpath(\"LC_MESSAGES\", mo_file.name)\n            mkdir(self, str(unix_path(self, Path(mo_file).parent)))\n            self.run(f\"msgfmt {po_file} -o {mo_file} -f\", env=\"conanbuild\")\n\n    def deploy(self):\n        ''' Note: this deploy step is actually used to prepare for building a Cura distribution with pyinstaller, which is not\n            the original purpose in the Conan philosophy '''\n\n        copy(self, \"*\", os.path.join(self.package_folder, self.cpp.package.resdirs[2]), os.path.join(self.deploy_folder, \"packaging\"), keep_path = True)\n\n        # Copy resources of Cura (keep folder structure) needed by pyinstaller to determine the module structure\n        copy(self, \"*\", os.path.join(self.package_folder, self.cpp_info.bindirs[0]), str(self._base_dir), keep_path = False)\n        copy(self, \"*\", os.path.join(self.package_folder, self.cpp_info.libdirs[0]), str(self._site_packages.joinpath(\"cura\")), keep_path = True)\n        copy(self, \"*\", os.path.join(self.package_folder, self.cpp_info.resdirs[0]), str(self._share_dir.joinpath(\"cura\", \"resources\")), keep_path = True)\n        copy(self, \"*\", os.path.join(self.package_folder, self.cpp_info.resdirs[1]), str(self._share_dir.joinpath(\"cura\", \"plugins\")), keep_path = True)\n\n        # Copy the cura_resources resources from the package\n        rm(self, \"conanfile.py\", os.path.join(self.package_folder, self.cpp.package.resdirs[0]))\n        cura_resources = self.dependencies[\"cura_resources\"].cpp_info\n        for res_dir in cura_resources.resdirs:\n            copy(self, \"*\", res_dir, str(self._share_dir.joinpath(\"cura\", \"resources\", Path(res_dir).name)), keep_path = True)\n\n        # Copy resources of Uranium (keep folder structure)\n        uranium = self.dependencies[\"uranium\"].cpp_info\n        copy(self, \"*\", uranium.resdirs[0], str(self._share_dir.joinpath(\"uranium\", \"resources\")), keep_path = True)\n        copy(self, \"*\", uranium.resdirs[1], str(self._share_dir.joinpath(\"uranium\", \"plugins\")), keep_path = True)\n        copy(self, \"*\", uranium.libdirs[0], str(self._site_packages.joinpath(\"UM\")), keep_path = True)\n\n        self._generate_cura_version(os.path.join(self._site_packages, \"cura\"))\n\n        self._delete_unwanted_binaries(self._site_packages)\n        self._delete_unwanted_binaries(self.package_folder)\n        self._delete_unwanted_binaries(self._base_dir)\n        self._delete_unwanted_binaries(self._share_dir)\n\n        entitlements_file = \"'{}'\".format(Path(self.deploy_folder, \"packaging\", \"MacOS\", \"cura.entitlements\"))\n        self._generate_pyinstaller_spec(location = self.deploy_folder,\n                                        entrypoint_location = \"'{}'\".format(os.path.join(self.package_folder, self.cpp_info.bindirs[0], self.conan_data[\"pyinstaller\"][\"runinfo\"][\"entrypoint\"])).replace(\"\\\\\", \"\\\\\\\\\"),\n                                        icon_path = \"'{}'\".format(os.path.join(self.package_folder, self.cpp_info.resdirs[2], self.conan_data[\"pyinstaller\"][\"icon\"][str(self.settings.os)])).replace(\"\\\\\", \"\\\\\\\\\"),\n                                        entitlements_file = entitlements_file if self.settings.os == \"Macos\" else \"None\",\n                                        cura_source_folder = self.package_folder)\n\n    def package(self):\n        copy(self, \"cura_app.py\", src = self.source_folder, dst = os.path.join(self.package_folder, self.cpp.package.bindirs[0]))\n        copy(self, \"*\", src = os.path.join(self.source_folder, \"cura\"), dst = os.path.join(self.package_folder, self.cpp.package.libdirs[0]))\n        copy(self, \"*\", src = os.path.join(self.source_folder, \"resources\"), dst = os.path.join(self.package_folder, self.cpp.package.resdirs[0]))\n        copy(self, \"*.mo\", os.path.join(self.build_folder, \"resources\"), os.path.join(self.package_folder, \"resources\"))\n        copy(self, \"*\", src = os.path.join(self.source_folder, \"plugins\"), dst = os.path.join(self.package_folder, self.cpp.package.resdirs[1]))\n        copy(self, \"*\", src = os.path.join(self.source_folder, \"packaging\"), dst = os.path.join(self.package_folder, self.cpp.package.resdirs[2]))\n        copy(self, \"pip_requirements_*.txt\", src = self.generators_folder, dst = os.path.join(self.package_folder, self.cpp.package.resdirs[-1]))\n\n        # Remove the fdm_materials from the package\n        rmdir(self, os.path.join(self.package_folder, self.cpp.package.resdirs[0], \"materials\"))\n\n        # Remove the cura_resources resources from the package\n        rm(self, \"conanfile.py\", os.path.join(self.package_folder, self.cpp.package.resdirs[0]))\n        cura_resources = self.dependencies[\"cura_resources\"].cpp_info\n        for res_dir in cura_resources.resdirs:\n            rmdir(self, os.path.join(self.package_folder, self.cpp.package.resdirs[0], Path(res_dir).name))\n\n    def package_info(self):\n        self.runenv_info.append_path(\"PYTHONPATH\", os.path.join(self.package_folder, \"site-packages\"))\n        self.runenv_info.append_path(\"PYTHONPATH\", os.path.join(self.package_folder, \"plugins\"))\n\n    def package_id(self):\n        self.info.options.rm_safe(\"enable_i18n\")\n"
        },
        {
          "name": "cura-logo-dark.PNG",
          "type": "blob",
          "size": 1200.0107421875,
          "content": null
        },
        {
          "name": "cura-logo.PNG",
          "type": "blob",
          "size": 1038.3388671875,
          "content": null
        },
        {
          "name": "cura.sharedmimeinfo",
          "type": "blob",
          "size": 1.0400390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<mime-info xmlns=\"http://www.freedesktop.org/standards/shared-mime-info\">\n    <mime-type type=\"application/vnd.ms-3mfdocument\">\n        <comment>3D Manufacturing Format Document</comment>\n        <icon name=\"unknown\"/>\n        <glob-deleteall/>\n        <glob pattern=\"*.3mf\"/>\n    </mime-type>\n    <mime-type type=\"model/stl\">\n        <comment>Computer-aided design and manufacturing format</comment>\n        <icon name=\"unknown\"/>\n        <glob-deleteall/>\n        <glob pattern=\"*.stl\"/>\n    </mime-type>\n    <mime-type type=\"application/prs.wavefront-obj\">\n        <sub-class-of type=\"text/plain\"/>\n        <comment>Wavefront 3D Object file</comment>\n        <icon name=\"unknown\"/>\n        <glob-deleteall/>\n        <glob pattern=\"*.obj\"/>\n    </mime-type>\n    <mime-type type=\"text/x-gcode\">\n        <sub-class-of type=\"text/plain\"/>\n        <comment>Gcode file</comment>\n        <icon name=\"unknown\"/>\n        <glob-deleteall/>\n        <glob pattern=\"*.gcode\"/>\n        <glob pattern=\"*.g\"/>\n    </mime-type>\n</mime-info>"
        },
        {
          "name": "cura",
          "type": "tree",
          "content": null
        },
        {
          "name": "cura_app.py",
          "type": "blob",
          "size": 11.3603515625,
          "content": "#!/usr/bin/env python3\n\n# Copyright (c) 2022 Ultimaker B.V.\n# Cura is released under the terms of the LGPLv3 or higher.\n\n# Remove the working directory from sys.path.\n# This fixes a security issue where Cura could import Python packages from the\n# current working directory, and therefore be made to execute locally installed\n# code (e.g. in the user's home directory where AppImages by default run from).\n# See issue CURA-7081.\nimport sys\nif \"\" in sys.path:\n    sys.path.remove(\"\")\n\nimport argparse\nimport faulthandler\nimport os\n\n# set the environment variable QT_QUICK_FLICKABLE_WHEEL_DECELERATION to 5000 as mentioned in qt6.6 update log to overcome scroll related issues\nos.environ[\"QT_QUICK_FLICKABLE_WHEEL_DECELERATION\"] = str(int(os.environ.get(\"QT_QUICK_FLICKABLE_WHEEL_DECELERATION\", \"5000\")))\n\nif sys.platform != \"linux\":  # Turns out the Linux build _does_ use this, but we're not making an Enterprise release for that system anyway.\n    os.environ[\"QT_PLUGIN_PATH\"] = \"\"  # Security workaround: Don't need it, and introduces an attack vector, so set to nul.\n    os.environ[\"QML2_IMPORT_PATH\"] = \"\"  # Security workaround: Don't need it, and introduces an attack vector, so set to nul.\n    os.environ[\"QT_OPENGL_DLL\"] = \"\"  # Security workaround: Don't need it, and introduces an attack vector, so set to nul.\n\nfrom PyQt6.QtNetwork import QSslConfiguration, QSslSocket\n\nfrom UM.Platform import Platform\nfrom cura import ApplicationMetadata\nfrom cura.ApplicationMetadata import CuraAppName\nfrom cura.CrashHandler import CrashHandler\n\ntry:\n    import sentry_sdk\n    with_sentry_sdk = True\nexcept ImportError:\n    with_sentry_sdk = False\n\nparser = argparse.ArgumentParser(prog = \"cura\",\n                                 add_help = False)\nparser.add_argument(\"--debug\",\n                    action = \"store_true\",\n                    default = False,\n                    help = \"Turn on the debug mode by setting this option.\"\n                    )\n\nknown_args = vars(parser.parse_known_args()[0])\n\nif with_sentry_sdk:\n    sentry_env = \"unknown\"  # Start off with a \"IDK\"\n    if hasattr(sys, \"frozen\"):\n        sentry_env = \"production\"  # A frozen build has the possibility to be a \"real\" distribution.\n\n    if ApplicationMetadata.CuraVersion == \"master\":\n        sentry_env = \"development\"  # Master is always a development version.\n    elif \"beta\" in ApplicationMetadata.CuraVersion or \"BETA\" in ApplicationMetadata.CuraVersion:\n        sentry_env = \"beta\"\n    elif \"alpha\" in ApplicationMetadata.CuraVersion or \"ALPHA\" in ApplicationMetadata.CuraVersion:\n        sentry_env = \"alpha\"\n    try:\n        if ApplicationMetadata.CuraVersion.split(\".\")[2] == \"99\":\n            sentry_env = \"nightly\"\n    except IndexError:\n        pass\n\n    # Errors to be ignored by Sentry\n    ignore_errors = [KeyboardInterrupt, MemoryError]\n    try:\n        sentry_sdk.init(\"https://5034bf0054fb4b889f82896326e79b13@sentry.io/1821564\",\n                        before_send = CrashHandler.sentryBeforeSend,\n                        environment = sentry_env,\n                        release = \"cura%s\" % ApplicationMetadata.CuraVersion,\n                        default_integrations = False,\n                        max_breadcrumbs = 300,\n                        server_name = \"cura\",\n                        ignore_errors = ignore_errors)\n    except Exception:\n        with_sentry_sdk = False\n\nif not known_args[\"debug\"]:\n    def get_cura_dir_path():\n        if Platform.isWindows():\n            appdata_path = os.getenv(\"APPDATA\")\n            if not appdata_path: #Defensive against the environment variable missing (should never happen).\n                appdata_path = \".\"\n            return os.path.join(appdata_path, CuraAppName)\n        elif Platform.isLinux():\n            return os.path.expanduser(\"~/.local/share/\" + CuraAppName)\n        elif Platform.isOSX():\n            return os.path.expanduser(\"~/Library/Logs/\" + CuraAppName)\n\n    # Do not redirect stdout and stderr to files if we are running CLI.\n    if hasattr(sys, \"frozen\") and \"cli\" not in os.path.basename(sys.argv[0]).lower():\n        dirpath = get_cura_dir_path()\n        os.makedirs(dirpath, exist_ok = True)\n        sys.stdout = open(os.path.join(dirpath, \"stdout.log\"), \"w\", encoding = \"utf-8\")\n        sys.stderr = open(os.path.join(dirpath, \"stderr.log\"), \"w\", encoding = \"utf-8\")\n\n\n# WORKAROUND: GITHUB-88 GITHUB-385 GITHUB-612\nif Platform.isLinux(): # Needed for platform.linux_distribution, which is not available on Windows and OSX\n    # For Ubuntu: https://bugs.launchpad.net/ubuntu/+source/python-qt4/+bug/941826\n    # The workaround is only needed on Ubuntu+NVidia drivers. Other drivers are not affected, but fine with this fix.\n    try:\n        import ctypes\n        from ctypes.util import find_library\n        libGL = find_library(\"GL\")\n        ctypes.CDLL(libGL, ctypes.RTLD_GLOBAL)\n    except:\n        # GLES-only systems (e.g. ARM Mali) do not have libGL, ignore error\n        pass\n\n# When frozen, i.e. installer version, don't let PYTHONPATH mess up the search path for DLLs.\nif Platform.isWindows() and hasattr(sys, \"frozen\"):\n    try:\n        del os.environ[\"PYTHONPATH\"]\n    except KeyError:\n        pass\n\n# GITHUB issue #6194: https://github.com/Ultimaker/Cura/issues/6194\n# With AppImage 2 on Linux, the current working directory will be somewhere in /tmp/<rand>/usr, which is owned\n# by root. For some reason, QDesktopServices.openUrl() requires to have a usable current working directory,\n# otherwise it doesn't work. This is a workaround on Linux that before we call QDesktopServices.openUrl(), we\n# switch to a directory where the user has the ownership.\nif Platform.isLinux() and hasattr(sys, \"frozen\"):\n    os.chdir(os.path.expanduser(\"~\"))\n\n# WORKAROUND: GITHUB-704 GITHUB-708\n# It looks like setuptools creates a .pth file in\n# the default /usr/lib which causes the default site-packages\n# to be inserted into sys.path before PYTHONPATH.\n# This can cause issues such as having libsip loaded from\n# the system instead of the one provided with Cura, which causes\n# incompatibility issues with libArcus\nif \"PYTHONPATH\" in os.environ.keys():                       # If PYTHONPATH is used\n    PYTHONPATH = os.environ[\"PYTHONPATH\"].split(os.pathsep) # Get the value, split it..\n    PYTHONPATH.reverse()                                    # and reverse it, because we always insert at 1\n    for PATH in PYTHONPATH:                                 # Now beginning with the last PATH\n        PATH_real = os.path.realpath(PATH)                  # Making the the path \"real\"\n        if PATH_real in sys.path:                           # This should always work, but keep it to be sure..\n            sys.path.remove(PATH_real)\n        sys.path.insert(1, PATH_real)                       # Insert it at 1 after os.curdir, which is 0.\n\n\ndef exceptHook(hook_type, value, traceback):\n    from cura.CrashHandler import CrashHandler\n    from cura.CuraApplication import CuraApplication\n    has_started = False\n    if CuraApplication.Created:\n        has_started = CuraApplication.getInstance().started\n\n    #\n    # When the exception hook is triggered, the QApplication may not have been initialized yet. In this case, we don't\n    # have an QApplication to handle the event loop, which is required by the Crash Dialog.\n    # The flag \"CuraApplication.Created\" is set to True when CuraApplication finishes its constructor call.\n    #\n    # Before the \"started\" flag is set to True, the Qt event loop has not started yet. The event loop is a blocking\n    # call to the QApplication.exec(). In this case, we need to:\n    #   1. Remove all scheduled events so no more unnecessary events will be processed, such as loading the main dialog,\n    #      loading the machine, etc.\n    #   2. Start the Qt event loop with exec() and show the Crash Dialog.\n    #\n    # If the application has finished its initialization and was running fine, and then something causes a crash,\n    # we run the old routine to show the Crash Dialog.\n    #\n    from PyQt6.QtWidgets import QApplication\n    if CuraApplication.Created:\n        _crash_handler = CrashHandler(hook_type, value, traceback, has_started)\n        if CuraApplication.splash is not None:\n            CuraApplication.splash.close()\n        if not has_started:\n            CuraApplication.getInstance().removePostedEvents(None)\n            _crash_handler.early_crash_dialog.show()\n            sys.exit(CuraApplication.getInstance().exec())\n        else:\n            _crash_handler.show()\n    else:\n        application = QApplication(sys.argv)\n        application.removePostedEvents(None)\n        _crash_handler = CrashHandler(hook_type, value, traceback, has_started)\n        # This means the QtApplication could be created and so the splash screen. Then Cura closes it\n        if CuraApplication.splash is not None:\n            CuraApplication.splash.close()\n        _crash_handler.early_crash_dialog.show()\n        sys.exit(application.exec())\n\n\n# Set exception hook to use the crash dialog handler\nsys.excepthook = exceptHook\n# Enable dumping traceback for all threads\nif sys.stderr and not sys.stderr.closed:\n    faulthandler.enable(file = sys.stderr, all_threads = True)\nelif sys.stdout and not sys.stdout.closed:\n    faulthandler.enable(file = sys.stdout, all_threads = True)\n\nfrom cura.CuraApplication import CuraApplication\n\n\n# WORKAROUND: CURA-6739\n# The CTM file loading module in Trimesh requires the OpenCTM library to be dynamically loaded. It uses\n# ctypes.util.find_library() to find libopenctm.dylib, but this doesn't seem to look in the \".app\" application folder\n# on Mac OS X. Adding the search path to environment variables such as DYLD_LIBRARY_PATH and DYLD_FALLBACK_LIBRARY_PATH\n# makes it work. The workaround here uses DYLD_FALLBACK_LIBRARY_PATH.\nif Platform.isOSX() and getattr(sys, \"frozen\", False):\n    old_env = os.environ.get(\"DYLD_FALLBACK_LIBRARY_PATH\", \"\")\n    # This is where libopenctm.so is in the .app folder.\n    search_path = os.path.join(CuraApplication.getInstallPrefix(), \"MacOS\")\n    path_list = old_env.split(\":\")\n    if search_path not in path_list:\n        path_list.append(search_path)\n    os.environ[\"DYLD_FALLBACK_LIBRARY_PATH\"] = \":\".join(path_list)\n    import trimesh.exchange.load\n    os.environ[\"DYLD_FALLBACK_LIBRARY_PATH\"] = old_env\n\n# WORKAROUND: CURA-6739\n# Similar CTM file loading fix for Linux, but NOTE THAT this doesn't work directly with Python 3.5.7. There's a fix\n# for ctypes.util.find_library() in Python 3.6 and 3.7. That fix makes sure that find_library() will check\n# LD_LIBRARY_PATH. With Python 3.5, that fix needs to be backported to make this workaround work.\nif Platform.isLinux() and getattr(sys, \"frozen\", False):\n    old_env = os.environ.get(\"LD_LIBRARY_PATH\", \"\")\n    # This is where libopenctm.so is in the AppImage.\n    search_path = os.path.join(CuraApplication.getInstallPrefix(), \"bin\")\n    path_list = old_env.split(\":\")\n    if search_path not in path_list:\n        path_list.append(search_path)\n    os.environ[\"LD_LIBRARY_PATH\"] = \":\".join(path_list)\n    import trimesh.exchange.load\n    os.environ[\"LD_LIBRARY_PATH\"] = old_env\n\n# WORKAROUND: Cura#5488\n# When using the KDE qqc2-desktop-style, the UI layout is completely broken, and\n# even worse, it crashes when switching to the \"Preview\" pane.\nif Platform.isLinux():\n    os.environ[\"QT_QUICK_CONTROLS_STYLE\"] = \"default\"\n    \nif ApplicationMetadata.CuraDebugMode:\n    ssl_conf = QSslConfiguration.defaultConfiguration()\n    ssl_conf.setPeerVerifyMode(QSslSocket.PeerVerifyMode.VerifyNone)\n    QSslConfiguration.setDefaultConfiguration(ssl_conf)\n\napp = CuraApplication()\napp.run()\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "printer-linter",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0712890625,
          "content": "[pytest]\ntestpaths = tests\npython_files = Test*.py\npython_classes = Test\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}