{
  "metadata": {
    "timestamp": 1736560935331,
    "page": 674,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rsalmei/alive-progress",
      "stars": 5644,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.181640625,
          "content": "# .coveragerc to control coverage.py\n[run]\nbranch = True\nomit =\n    alive_progress/styles/*\n    alive_progress/tools/*\n    alive_progress/utils/terminal/*\n\n[report]\nignore_errors = True\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2548828125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n.DS_Store\n.idea/\n.vscode/\n\n# validate unicode graphemes clusters\n.unicode_cache/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.0595703125,
          "content": "# Changelog\n\n## 3.2.0 - Oct 26, 2024\n- print/logging hooks now support multithreading\n- rounded ETAs for long tasks\n- support for zero and even negative bar increments\n- custom offset for enriched print/logging messages\n- improved compatibility with PyInstaller\n- improved compatibility with Celery\n- drop python 3.7 and 3.8, hello 3.12 and 3.13\n\n## 3.1.5 - Nov 08, 2023\n- ignore more errors when trying to set hooks (it seems `pyam` uses `setuptools_scm` which does `assert value is sys.stderr` in `setStream()` for whatever reason)\n\n## 3.1.4 - May 31, 2023\n- support spaces at the start and end of titles and units (removed trim)\n\n## 3.1.3 - May 26, 2023\n- better error handling of invalid `alive_it` calls before iterating it\n- detect nested uses of alive_progress and throw a clearer error message\n\n## 3.1.2 - May 08, 2023\n- fix some exotic ANSI Escape Codes not being printed by supporting terminal [OSC](https://en.wikipedia.org/wiki/ANSI_escape_code#OSC)\n\n## 3.1.1 - Apr 08, 2023\n- support for printing ANSI Escape Codes without extra newlines, like \"set console title\"\n- typing annotations in `alive_it`, so collection types are correctly identified\n\n## 3.1.0 - Mar 23, 2023\n- new resuming computations support with `skipped` items\n- new `max_cols` config setting, the number of columns to use if not possible to fetch it, like in jupyter and other platforms which doesn't support size\n- fix fetching the size of the terminal when using stderr\n- officially supports Python 3.11\n- included [ruff](https://github.com/charliermarsh/ruff) linter before building\n\n## 3.0.1 - Jan 01, 2023\n- fix for logging streams that extend StreamHandler but doesn't allow changing streams (import dill/tensorflow/dask issues)\n\n## 3.0.0 - Dec 22, 2022\n- units with automatic scaling and configurable precision\n- automatic scaling for slow throughputs\n- support for using `stderr` and other files instead of `stdout`\n- smooth out the rate estimation\n- more queries into the currently running widgets' data, including monitor, rate, and ETA\n- new help system on configuration errors\n- support for reusing logging handlers\n- seek support for logging `RotatingFileHandler`\n- fix unknown mode always ending with a warning (!)\n- improved test branch coverage to 89%\n\n## 2.4.1 - Apr 01, 2022\n- fix a crash when dual-line and disabled are set\n\n## 2.4.0 - Mar 21, 2022\n- support dual-line text mode\n- finalize function parameter in alive_it\n- improve logging support, detecting customized ones\n- fix final receipt and truncated bar in jupyter\n- fix default stats_end, which did not follow stats\n- fix `bar.text` assignment not working on alive_it\n\n## 2.3.1 - Feb 11, 2022\n- introduce ctrl_c config param\n- print the final receipt even when interrupted\n\n## 2.3.0 - Feb 07, 2022\n- customizable `monitor`, `elapsed`, and `stats` core widgets\n- new `monitor_end`, `elapsed_end`, and `stats_end` core widgets\n- better support for CTRL+C, which makes `alive_bar` stop prematurely\n\n## 2.2.0 - Feb 02, 2022\n- bar title can be dynamically set, changed or removed\n- new custom fps system, which enables very slow refresh rates (long periods)\n- the final receipt can be hidden (great for special effects)\n- new support for `click.echo()` printing\n- more resilient `text` method which accepts any value, even numbers\n- bar methods like `current` and `pause` are now read-only (read-only data descriptors)\n- bar methods like `text` and `title` now support assigning in addition to calling (data descriptors)\n- faster performance, with optimized flush control\n- detection of terminal columns is safer for exotic environments\n- fix hook manager trimming spaces at the start\n- remove Python 3.6 support\n\n## 2.1.0 - Oct 18, 2021\n- Jupyter notebook support (experimental), Jupyter auto-detection, disable feature and configuration\n- four internal terminal abstractions, to support TTY, JUPYTER, NON_TTY, and VOID\n\n## 2.0.0 - Aug 25, 2021\n\nThis is a major achievement in `alive-progress`!\n- now there's complete support for Emojis 🤩 and exotic Unicode chars in general, which required MAJOR refactoring deep within the project, giving rise to what I called **Cells Architecture** => now all internal components use and generate streams of cells instead of chars, and correctly interprets grapheme clusters — it has enabled to render complex multi-chars symbols as if they were one, thus making them work on any spinners, bars, texts, borders, backgrounds, everything!!! there's even support for wide chars, which are represented with any number of chars, including one, but take two spaces on screen!! pretty advanced stuff 🤓\n- new super cool spinner compiler and runner, which generates complete animations ahead of time, and plays these ready-to-go animations seamlessly, with no overhead at all! 🚀\n- the spinner compiler also includes advanced extra commands to generate and modify animations, like reshape, replace, transpose, or randomize the animation cycles!\n- new powerful and polished `.check()` tools, that compile and beautifully render all frames from all animation cycles of spinners and bars! they can even include complete frame data, internal codepoints, and even their animations! 👏\n- bars engine revamp, with invisible fills, advanced support for multi-char tips (which gradually enter and leave the bar), borders, tips and errors of any length, and underflow errors that can leap into the border if they can't fit!\n- spinners engine revamp, with standardized factory signatures, improved performance, new types, and new features: smoother bouncing spinners (with an additional frame at the edges), optimized scrolling of text messages (which go slower and pause for a moment at the edges), new alongside and sequential spinners, nicer effect in alongside spinners (which use weighted spreading over the available space), smoother animation in scrolling spinners (when the input is longer than the available space)\n- new builtin spinners, bars, and themes, which makes use of the new animation features\n- new showtime that displays themes and is dynamic => it does not scroll the screen when it can't fit either vertically or horizontally, and can even filter for patterns!\n- improved support for logging into files, which gets enriched as the print hook is!\n- several new configuration options for customizing appearance, including support for disabling any `alive-progress` widgets!\n- includes a new iterator adapter `alive_it`, that accepts an iterable and calls `bar()` for you!\n- requires Python 3.6+ (and officially supports Python 3.9 and 3.10)\n\n## 1.6.2 - Jan 7, 2021\n- new `bar.current()` method\n- newlines get printed on vanilla Python REPL\n- bar is truncated to 80 chars on Windows\n\n## 1.6.1 - Jul 11, 2020\n- fix logging support for Python 3.6 and lower\n- support logging for file\n- support for wide Unicode chars, which use 2 columns but have length 1\n\n## 1.6.0 - Jul 9, 2020\n- soft wrapping support\n- hiding cursor support\n- Python logging support\n- exponential smoothing of ETA time series\n- proper bar title, always visible\n- enhanced times representation\n- new `bar.text()` method, to set situational messages at any time without incrementing position (deprecates 'text' parameter in `bar()`)\n- performance optimizations\n\n## 1.5.1 - May 4, 2020\n- fix compatibility with Python 2.7 (should be the last one, version 2 is in the works, with Python 3 support only)\n\n## 1.5.0 - May 2, 2020\n- standard_bar accepts a `background` parameter instead of `blank`, which accepts arbitrarily sized strings and remains fixed in the background, simulating a bar going \"over it\"\n\n## 1.4.4 - Apr 18, 2020\n- restructure internal packages\n- 100% branch coverage of all animations systems, i.e., bars and spinners\n\n## 1.4.3 - Apr 14, 2020\n- protect configuration system against other errors (length='a' for example)\n- first automated tests, 100% branch coverage of configuration system\n\n## 1.4.2 - Apr 13, 2020\n- sanitize text input, keeping '\\n' from entering and replicating the bar on the screen\n\n## 1.4.1 - Mar 7, 2020\n- include a license file in the source distribution\n\n## 1.4.0 - Mar 5, 2020\n- print() enrichment can now be disabled (locally and globally)\n- exhibits now have a real-time fps indicator\n- new exhibit functions `show_spinners` and `show_bars`\n- new utility `print_chars`\n- `show_bars` gains some advanced demonstrations (try it again!)\n\n## 1.3.3 - Jan 26, 2020\n- further improve stream compatibility with isatty\n\n## 1.3.2 - Jan 26, 2020\n- beautifully finalize bar in case of unexpected errors\n\n## 1.3.1 - Jan 26, 2020\n- fix a subtle race condition that could leave artifacts if ended very fast\n- flush print buffer when position changes or bar terminates\n- keep the total argument from unexpected types\n\n## 1.3.0 - Sep 17, 2019\n- new fps calibration system\n- support force_tty and manual options in global configuration\n- multiple increment support in bar handler\n\n## 1.2.0 - Aug 24, 2019\n- filled blanks bar styles\n- clean underflow representation of filled blanks\n\n## 1.1.1 - Aug 21, 2019\n- optional percentage in manual mode\n\n## 1.1.0 - Aug 17, 2019\n- new manual mode\n\n## 1.0.1 - Aug 9, 2019\n- PyCharm console support with force_tty\n- improve compatibility with Python stdio streams\n\n## 1.0.0 - Aug 5, 2019\n- first public release, already very complete and mature\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "MIT License\n\nCopyright (c) 2019 Rogério Sampaio de Almeida\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 67.77734375,
          "content": "[<img align=\"right\" src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" width=\"217px\" height=\"51x\">](https://www.buymeacoffee.com/rsalmei)\n[<img align=\"right\" alt=\"Donate with PayPal button\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\">](https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&no_recurring=0&item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&currency_code=USD)\n\n![alive-progress logo](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-logo.gif)\n\n# alive-progress\n\n[![Maintenance](https://img.shields.io/badge/maintained-yes-brightgreen.svg)](https://gitHub.com/rsalmei/alive-progress/graphs/commit-activity)\n[![PyPI version](https://img.shields.io/pypi/v/alive-progress.svg)](https://pypi.python.org/pypi/alive-progress/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/alive-progress.svg)](https://pypi.python.org/pypi/alive-progress/)\n[![Downloads](https://static.pepy.tech/personalized-badge/alive-progress?period=month&units=international_system&left_color=grey&right_color=orange&left_text=downloads/month)](https://pepy.tech/project/alive-progress)\n[![Downloads](https://static.pepy.tech/personalized-badge/alive-progress?period=total&units=international_system&left_color=grey&right_color=orange&left_text=downloads)](https://pepy.tech/project/alive-progress)\n![GitHub Sponsors](https://img.shields.io/github/sponsors/rsalmei)\n\nHave you ever wondered where your lengthy processing was at, and when would it finish? Do you usually hit `RETURN` several times to make sure it didn't crash, or the SSH connection didn't freeze? Have you ever thought it'd be awesome to be able to _pause some processing_ without hassle, return to the Python prompt to manually fix some items, then _seamlessly resume_ it? I did...\n\nI've started this new progress bar thinking about all that, behold the **alive-progress**! 😃\n\n![alive-progress demo](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-demo.gif)\n\nIntroducing the newest concept in progress bars for Python! `alive-progress` is in a class of its own, with an array of cool features that set it apart. Here are a few highlights:\n\n- A mesmerizing **live spinner** that reacts to your actual processing speed, i.e., it dynamically gets faster or slower with your throughput, and clearly shows a lengthy task is in progress, i.e., did not crash even if taking too long (and your SSH connection did not freeze if remote).\n- An efficient **multithreaded** bar that updates itself at a fraction of the actual processing speed to keep **CPU usage low** and avoid terminal spamming (1,000,000 iterations per second equates to roughly 60 updates per second), and you can also calibrate it to your liking.\n- An accurate **ETA** (Expected Time of Arrival) with an intelligent _Exponential Smoothing Algorithm_ that shows the time to completion, allowing you to plan your time and manage your workload more effectively.\n- Automatic **print** and **logging** hooks that provide seamless and efortless integration with any code, even enriching these outputs with the current bar position when they occurred.\n- It prints a nice **final receipt** when your processing ends, including the total items, the elapsed time, and the observed throughput.\n- It detects **under** and **overflows**, enabling you to track hits, misses, or any desired counts, not necessarily the actually performed iterations.\n- You can **suspend** it! That's right, you heard it here first! No other progress bar anywhere in any language has this feature! You can suspend your processing and get back to the Python prompt, adjust or fix some items, and then get back into the same processing as if it had never stopped!\n- It is **highly customizable**, with a smorgasbord of ready-to-use spinner and bar styles, as well as several factories to easily create yours! There's even a super powerful `check()` tool that helps you design your own animations! You can see how the generated frames and animation cycles will look like, exploded on your screen, and even see it _alive_ before installing in `alive-progress`! It's the coolest tool in the world! Unleash your creativity!\n\n---\n\n## Table of contents\n\nThis README is always evolving, so do take a more comprehensive look from time to time... You might find great new details in other sections! 😊\n\n<!-- TOC -->\n* [alive-progress](#alive-progress)\n  * [Table of contents](#table-of-contents)\n  * [📌 What's new in 3.2 series](#-whats-new-in-32-series)\n    * [Previous releases](#previous-releases)\n  * [Using `alive-progress`](#using-alive-progress)\n    * [Get it](#get-it)\n    * [Try it](#try-it)\n    * [Awake it](#awake-it)\n    * [Master it](#master-it)\n  * [Displaying messages](#displaying-messages)\n  * [Auto-iterating](#auto-iterating)\n  * [Modes of operation](#modes-of-operation)\n    * [Auto and Unknown: Counter](#auto-and-unknown-counter)\n    * [Manual: Percentage](#manual-percentage)\n    * [Widgets available](#widgets-available)\n    * [The different `bar()` handlers](#the-different-bar-handlers)\n  * [Styles](#styles)\n  * [Configuration](#configuration)\n  * [Create your own animations](#create-your-own-animations)\n    * [Intro: How do they work?](#intro-how-do-they-work)\n    * [A Spinner Compiler, really?](#a-spinner-compiler-really)\n    * [Spinner Factories](#spinner-factories)\n    * [Bar Factories](#bar-factories)\n  * [Advanced](#advanced)\n    * [The Pause Mechanism](#the-pause-mechanism)\n    * [Loop-less use](#loop-less-use)\n    * [FPS Calibration](#fps-calibration)\n    * [Forcing animations on PyCharm, Jupyter, etc.](#forcing-animations-on-pycharm-jupyter-etc)\n  * [Interesting facts](#interesting-facts)\n  * [To do](#to-do)\n  * [Python End of Life notice](#python-end-of-life-notice)\n    * [For Python 2.7 and 3.5](#for-python-27-and-35)\n    * [For Python 3.6](#for-python-36)\n    * [For Python 3.7 and 3.8](#for-python-37-and-38)\n  * [License](#license)\n<!-- TOC -->\n\n## 📌 What's new in 3.2 series\n\nAfter about a year of reassuring stability, the new `alive-progress` has finally landed!\n\nThe main features and improvements are:\n\n- The print/logging hooks now support multithreading => a highly requested feature: everything is synchronized now so you can print from different threads without issues! No more queues to send messages to the main thread!\n- Rounded ETAs for long tasks => now the ETA automatically decreases its precision the higher it gets, making it smoother and easier to read!\n- Support for zero and even negative bar increments => now on par with the manual mode, you can call `bar()` with `0` and even `-N` to make it go backwards! Useful when you couldn't make any progress in an iteration or had to roll back something!\n\nAnd more!\n\n- Custom offset for the enriched print/logging messages => now you can specify a custom `enrich_offset` to use for printed or logged messages, allowing you to start with `on 1:` or continue where you left from previous computations!\n- Improved compatibility with PyInstaller => now custom bars, unknown bars, and spinners work when bundled!\n- Improved compatibility with Celery => it will just work within Celery tasks!\n- drop python 3.7 and 3.8, hello 3.12 and 3.13!\n\n### Previous releases\n\n<details>\n<summary>New in 3.1 series</summary>\n\nA very cool update here! In addition to polishing things up and improving terminal support, now `alive-progress` supports resuming computations!\n\nWhen processing huge datasets or things that take a long time, you might either use batches or cache partial results. Then, in case it stops and is restarted, you end up skipping all those already done items very quickly, which makes the `alive_bar` think you're processing thousands of items per second, which in turn completely ruins the ETA... But not anymore! Just tell `bar()` that you've skipped items... 👏\n\nYou can use it in two ways:\n\n<strong>1.</strong> If you do know where you've stopped:\n\n```python\nwith alive_bar(120000) as bar:\n    bar(60000, skipped=True)\n    for i in range(60000, 120000):\n        # process item\n        bar()\n```\n\nYep, just call `bar(N, skipped=True)` once, with the number of items.\n\n<strong>2.</strong> If you do not know or the items are scattered:\n\n```python\nwith alive_bar(120000) as bar:\n    for i in range(120000):\n        if done(i):\n            bar(skipped=True)\n            continue\n\n        # process item\n        bar()\n```\n\nYep, it's as simple as that! Just call `bar(skipped=True)` when an item is already done, or `bar()` as usual otherwise. You could also share a single `bar(skipped=?)` call at the end, with a bool saying whether you did skip that item or not. Cool, huh?\n\nAlso in this version:\n\n- new `max_cols` config setting, the number of columns to use if not possible to fetch it, like in jupyter and other platforms which doesn't support size\n- fix fetching the size of the terminal when using stderr\n- officially supports Python 3.11\n- included [ruff](https://github.com/charliermarsh/ruff) linter before building\n\n</details>\n\n<details>\n<summary>New in 3.0 series</summary>\n\nYep, I could finally get this version out! These are the new goodies:\n\n- Units support! You can now label the data you're processing, like `B`, `bytes`, or even `°C`!\n- Automatic scaling! With support for SI (base 1000), IEC (base 1024), and even an alternate SI with base 1024, you'll be well served!\n- Configurable precision! When your numbers are scaled, you get to choose how many decimals they display!\n- Automatic stats scaling for slow throughputs! If your processing takes minutes or more, now you'll see rates per minute, per hour, and even per day! (It works within the auto-scaling system!)\n- Support for using `sys.stderr` and other files instead of `sys.stdout`!\n- Smoothed out the rate estimation with the same Exponential Smoothing Algorithm that powers the ETA, so the bar returns a more realistic ETA!\n- Query the currently running widgets' data, like the monitor, rate, and ETA!\n- New help system on configuration errors, which explains why a value was not accepted, and what were the expected ones!\n\nHighly anticipated fixes:\n\n- Support for reusing logging handlers! No more `TypeError: unhashable type: 'types.SimpleNamespace'`.\n- Support for logging when using `RotatingFileHandler`s! Yep, seek support is here.\n- Fix unknown mode always ending with a warning (!)\n\nAnd last but not least, a more polished layout for you to enjoy your progress!\n![alive-progress 3.0](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive3.0.png)\n</details>\n\n<details>\n<summary>New in 2.4 series</summary>\n\nNow, `alive_bar` supports *Dual Line* text mode!\n\nIf you ever wanted to include longer situational messages within the bar, you probably felt squeezed into one line. You had to shrink the beautifully animated bar or, even worse, remove widgets (!) to be able to see what you needed...\n<br>Not anymore!! You can now make the bar *Dual Line*, and put text below it!\n\nYes, there's a message below the whole bar, and any other print/logging messages scroll above it!\n\n```python\nletters = [chr(ord('A') + x) for x in range(26)]\nwith alive_bar(26, dual_line=True, title='Alphabet') as bar:\n    for c in letters:\n        bar.text = f'-> Teaching the letter: {c}, please wait...'\n        if c in 'HKWZ':\n            print(f'fail \"{c}\", retry later')\n        time.sleep(0.3)\n        bar()\n```\n\nOutput:\n\n```\non 7: fail \"H\", retry later\non 10: fail \"K\", retry later\nAlphabet |███████████████████████████▊            | ▃▅▇ 18/26 [69%] in 6s (3.2/s, eta: 3s)\n-> Teaching the letter: S, please wait...\n```\n\nThere's also a new `finalize` function parameter in `alive_it` which enables you to set the title and/or text of the final receipt, and improved logging support which detects customized loggers.\n</details>\n\n<details>\n<summary>New in 2.3 series</summary>\n\nThis is all about customization; the core widgets can now be changed:\n\n- send a string to the `monitor`, `elapsed`, and `stats` widgets to make them look anyway you want!\n\n> It's incredible that these strings support all Python format features, so you can e.g., `{percent:.1%}` 😉.\n\nThey can be further customized when on the **final receipt**!\n\n- new `monitor_end`, `elapsed_end`, and `stats_end`, with dynamic formats inherited from the standard ones!\n\n> If you've hidden some widgets before, just so they wouldn't appear on the receipt, now you can see them in all their running glory, and hide just the receipt ones! Or the other way around 😜\n\nAnother addition, now `alive-progress` beautifully renders its cool final receipt whenever it is stopped, even if you CTRL+C it prematurely! I don't know why I haven't thought about that before...\n\n```\nDownload |██████████████████⚠︎                     | (!) 45/100 [45%] in 4.8s (9.43/s)\n```\n\nAnd finally, you can choose to disable CTRL+C at all! The default is the safer `ctrl_c=True`, which does make CTRL-C work as usual.\n<br>Disable it `ctrl_c=False`, to make your interactive `alive_bar` much smoother to use (there are no stack traces if you stop it), and/or if it is at the top-level of your program!\n\n> Beware: If it is e.g. inside a for-loop, it will just continue to the next iteration, which may or may not be what you want...\n\n```python\nfor i in range(10):\n    with alive_bar(100, ctrl_c=False, title=f'Download {i}') as bar:\n        for i in range(100):\n            time.sleep(0.02)\n            bar()\n```\n\nOutput:\n\n```\nDownload 0 |████████▊⚠︎                              | (!) 22/100 [22%] in 0.6s (36.40/s)\nDownload 1 |████████████████▊⚠︎                      | (!) 42/100 [42%] in 1.0s (41.43/s)\nDownload 2 |██████▍⚠︎                                | (!) 16/100 [16%] in 0.4s (39.29/s)\nDownload 3 |█████▋⚠︎                                 | (!) 14/100 [14%] in 0.4s (33.68/s)\nDownload 4 |█████████████▎⚠︎                         | (!) 33/100 [33%] in 0.8s (39.48/s)\nDownload 5 |███████▎⚠︎                               | (!) 18/100 [18%] in 0.5s (37.69/s)\nDownload 6 |█████▎⚠︎                                 | (!) 13/100 [13%] in 0.3s (37.28/s)\nDownload 7 |████████████⚠︎                           | (!) 30/100 [30%] in 0.8s (38.43/s)\nDownload 8 |██████⚠︎                                 | (!) 15/100 [15%] in 0.4s (36.26/s)\n...\n```\n\n</details>\n\n<details>\n<summary>New in 2.2 series</summary>\n\nSome major new features, often requested, have finally landed!\n\n- bar title can be dynamically set, changed, or even removed after being displayed\n- new custom fps system, which enables very slow refresh rates (to let it run on those k8s for long periods)\n- the final receipt can be totally hidden (great for special effects, like using the cool spinners standalone)\n- new support for `click.echo()` printing\n- terminal columns detection is safer for exotic environments\n- requires Python 3.7+\n\n</details>\n\n<details>\n<summary>New in 2.1 series</summary>\n\nYES! Now `alive-progress` has support for Jupyter Notebooks and also includes a _Disabled_ state! Both were highly sought after, and have finally landed!\n<br>And better, I've implemented an auto-detection mechanism for jupyter notebooks, so it just works, out of the box, without any changes in your code!!\n\nSee for yourself:\n\n![alive-progress demo](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-jupyter.gif)\n\n> It seems to work very well, but at this moment, it should be considered **experimental**.\n> <br>There were instances in which some visual glitches have appeared, like two `alive_bar` refreshes being concatenated together instead of over one another... And it's something I think I can't possibly work around: it seems Jupyter sometimes refresh the canvas at odd times, which makes it lose some data. Please let me know on the issues if something funnier arises.\n</details>\n\n<details>\n<summary>New in 2.0 series</summary>\n\nThis is a major breakthrough in `alive-progress`!\n<br>I took 1 year developing it, and I'm very proud of what I've accomplished \\o/\n\n- now, there's complete support for Emojis 🤩 and exotic Unicode chars in general, which required MAJOR refactoring deep within the project, giving rise to what I called \"**Cell Architecture**\" => now, all internal components use and generate streams of cells instead of characters, and correctly interpret grapheme clusters — those so-called wide chars, which are encoded with a variable number of chars, but always take two cells on screen!! This has enabled us to render complex multi-chars symbols as if they were one, thus making them work on any spinners, bars, texts, borders and backgrounds, even when fractured!!! Pretty advanced stuff 🤓\n- new super cool spinner compiler and runner, which generates complete animations ahead of time, and plays these ready-to-go animations seamlessly, with no overhead at all! 🚀\n- the spinner compiler also includes advanced extra commands to generate and modify animations, like reshape, replace, transpose, or randomize the animation cycles!\n- new powerful and polished `.check()` tools that compile and beautifully render all frames from all animation cycles of spinners and bars! they can even include complete frame data, internal codepoints, and even their animations! 👏\n- bars engine revamp, with invisible fills, advanced support for multi-char tips (which gradually enter and leave the bar), borders, tips and errors of any length, and underflow errors that can leap into the border if they can't fit!\n- spinners engine revamp, with standardized factory signatures, improved performance, new types, and new features: smoother bouncing spinners (with an additional frame at the edges), optimized scrolling of text messages (which go slower and pause for a moment at the edges), new alongside and sequential spinners, nicer effect in alongside spinners (which use weighted spreading over the available space), smoother animation in scrolling spinners (when the input is longer than the available space)\n- new builtin spinners, bars, and themes, which make use of the new animation features\n- new showtime that displays themes and is dynamic => it does not scroll the screen when it can't fit vertically or horizontally, and can even filter for patterns!\n- improved support for logging into files, which gets enriched as the print hook is!\n- several new configuration options for customizing appearance, including support for disabling any `alive-progress` widgets!\n- includes a new iterator adapter, `alive_it`, that accepts an iterable and calls `bar()` for you!\n- requires Python 3.6+ (and officially supports Python 3.9 and 3.10)\n\n> Since this is a major version change, direct backward compatibility is not guaranteed. If something does not work at first, just check the new imports and functions' signatures, and you should be good to go. All previous features should still work here! 👍\n</details>\n\n---\n\n## Using `alive-progress`\n\n### Get it\n\nJust install with pip:\n\n```sh\n❯ pip install alive-progress\n```\n\n### Try it\n\nIf you're wondering what styles are builtin, it's `showtime`! ;)\n\n```python\nfrom alive_progress.styles import showtime\n\nshowtime()\n```\n\n> Note: Please disregard the path in the animated gif below, the correct one is above. These long gifs are very time-consuming to generate, so I can't make another on every single change. Thanks for your understanding.\n\n![alive-progress spinners](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/showtime-spinners.gif)\n\nI've made these styles just to try all the animation factories I've created, but I think some of them ended up very, very cool! Use them at will, and mix them to your heart's content!\n\nDo you want to see actual `alive-progress` bars gloriously running in your system before trying them yourself?\n\n```sh\n❯ python -m alive_progress.tools.demo\n```\n\n![alive-progress demo-tool](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-demo-tool.png)\n\n### Awake it\n\nCool, huh?? Now enter an `ipython` REPL and try this:\n\n```python\nfrom alive_progress import alive_bar\nimport time\n\nfor x in 1000, 1500, 700, 0:\n    with alive_bar(x) as bar:\n        for i in range(1000):\n            time.sleep(.005)\n            bar()\n```\n\nYou'll see something like this, with cool animations throughout the process 😜:\n\n```\n|████████████████████████████████████████| 1000/1000 [100%] in 5.8s (171.62/s)\n|██████████████████████████▋⚠︎            | (!) 1000/1500 [67%] in 5.8s (172.62/s)\n|████████████████████████████████████████✗︎ (!) 1000/700 [143%] in 5.8s (172.06/s)\n|████████████████████████████████████████| 1000 in 5.8s (172.45/s)\n```\n\nNice, huh? Loved it? I knew you would, thank you 😊.\n\nTo actually use it, just wrap your normal loop in an `alive_bar` context manager like this:\n\n```python\nwith alive_bar(total) as bar:  # declare your expected total\n    for item in items:  # <<-- your original loop\n        print(item)  # process each item\n        bar()  # call `bar()` at the end\n```\n\nAnd it's alive! 👏\n\nSo, in a nutshell: retrieve the items as always, enter the `alive_bar` context manager with the number of items, and then iterate/process those items, calling `bar()` at the end! It's that simple! :)\n\n### Master it\n\n- `items` can be any iterable, like for example, a queryset;\n- the first argument of the `alive_bar` is the expected total, like `qs.count()` for querysets, `len(items)` for iterables with length, or even a static number;\n- the call `bar()` is what makes the bar go forward — you usually call it in every iteration, just after finishing an item;\n- if you call `bar()` too much (or too few at the end), the bar will graphically render that deviation from the expected `total`, making it very easy to notice overflows and underflows;\n- to retrieve the current bar count or percentage, call `bar.current`.\n\n> You can get creative! Since the bar only goes forward when you call `bar()`, it is **independent of the loop**! So you can use it to monitor anything you want, like pending transactions, broken items, etc., or even call it more than once in the same iteration! So, in the end, you'll get to know how many of those \"special\" events there were, including their percentage relative to the total!\n\n## Displaying messages\n\nWhile inside an `alive_bar` context, you can effortlessly display messages tightly integrated with the current progress bar being displayed! It won't break in any way and will even enrich your message!\n\n- the cool `bar.text('message')` and `bar.text = 'message'` set a situational message right within the bar, where you can display something about the current item or the phase the processing is in;\n- the (📌 new) dynamic title, which can be set right at the start, but also be changed anytime with `bar.title('Title')` and `bar.title = 'Title'` — mix with `title_length` to keep the bar from changing its length;\n- the usual Python `print()` statement, where `alive_bar` nicely cleans up the line, prints your message alongside the current bar position at the time, and continues the bar right below it;\n- the standard Python `logging` framework, including file outputs, is also enriched exactly like the previous one;\n- if you're using click CLI lib, you can even use `click.echo()` to print styled text.\n\nAwesome right? And all of these work just the same in a terminal or in a Jupyter notebook!\n\n![alive-progress printing messages](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/print-hook.gif)\n\n## Auto-iterating\n\nYou now have a quicker way to monitor anything! Here, the items are automatically tracked for you!\n<br>Behold the `alive_it` => the `alive_bar` iterator adapter!\n\nSimply wrap your items with it, and loop over them as usual!\n<br>The bar will just work; it's that simple!\n\n```python\nfrom alive_progress import alive_it\n\nfor item in alive_it(items):  # <<-- wrapped items\n    print(item)  # process each item\n```\n\nHOW COOL IS THAT?! 😜\n\nAll `alive_bar` parameters apply but `total`, which is smarter (if not supplied, it will be auto-inferred from your data using `len` or `length_hint`), and `manual` that does not make sense here.\n\nNote there isn't any `bar` handle at all in there. But what if you do want it, e.g. to set text messages or retrieve the current progress?\n<br>You can interact with the internal `alive_bar` by just assigning `alive_it` to a variable like this:\n\n```python\nbar = alive_it(items)  # <<-- bar with wrapped items\nfor item in bar:  # <<-- iterate on bar\n    print(item)  # process each item\n    bar.text(f'ok: {item}')  # WOW, it works!\n```\n\nNote that this is a slightly special `bar`, which does not support `bar()`, since the iterator adapter tracks items automatically for you. Also, it supports `finalize`, which enables you to set the title and/or text of the final receipt:\n\n```python\nalive_it(items, finalize=lambda bar: bar.text('Success!'))\n...\n```\n\n> In a nutshell:\n> - full use is always `with alive_bar() as bar`, where you iterate and call `bar()` whenever you want;\n> - quick adapter use is `for item in alive_it(items)`, where items are automatically tracked;\n> - full adapter use is `bar = alive_it(items)`, where in addition to items being automatically tracked, you get a special iterable `bar` able to customize the inner `alive_progress` however you want.\n\n## Modes of operation\n\n### Auto and Unknown: Counter\n\nThe default modes are **auto** and **unknown**, which use internally a **counter** to track the progress. They count the number of items processed, and use it to update the progress bar accordingly.\n\nThe `total` argument is optional. If you do provide it, the bar enters in **auto mode**. In this mode, the progress of the operation is automatically tracked, and all the widgets `alive-progress` has to offer are available: precise bar, spinner, percentage, counter, throughput, and ETA.\n\nIf you don't provide `total`, the bar enters in **unknown mode**. In this mode, the progress is indeterminable, and therefore the ETA, so the whole progress bar is continuously animated. The widgets available are: animated bar, spinner, counter, and throughput.\n> The cool spinner runs completely independently of the animated bar, both running their own animations concurrently, rendering a unique show in your terminal! 😜\n\nLast but not least, the **auto** mode has a unique ability: mark items as skipped, making the throughput and ETA much more accurate! More on that later.\n\n### Manual: Percentage\n\nThe **manual mode**, manually activated by the `manual=True` argument, uses internally a **percentage** to track the progress. It enables you to get complete control of the bar position. It's usually used to monitor processes that only feed you a percentage of completion, or to generate some random special effects.\n\nYou can use it directly with `alive_bar` or via `config_handler`, and it allows you to send percentages to the `bar()` handler! For example, to set it to 15% completion, just call `bar(0.15)` — which is 15 / 100.\n\nYou can also provide `total` here. If you do, `alive-progress` will automatically infer an internal counter, and will thus be able to offer you all the same widgets available in auto mode!\n\nIf you don't provide `total`, you'll at least get rough versions of the throughput and ETA widgets, computed as \"%/s\" (percentage per second) and until 100%, respectively. Neither of them are very accurate, but they are better than nothing.\n\n### Widgets available\n\nWhen `total` is provided all is cool:\n\n|  mode  |    counter    |  percentage  | throughput | ETA | over/underflow |\n|:------:|:-------------:|:------------:|:----------:|:---:|:--------------:|\n|  auto  | ✅ (user tick) | ✅ (inferred) |     ✅      |  ✅  |       ✅        |\n| manual | ✅ (inferred)  | ✅ (user set) |     ✅      |  ✅  |       ✅        |\n\nWhen it isn't, some compromises have to be made:\n\n|  mode   |    counter    |  percentage  |  throughput  |    ETA     | over/underflow |\n|:-------:|:-------------:|:------------:|:------------:|:----------:|:--------------:|\n| unknown | ✅ (user tick) |      ❌       |      ✅       |     ❌      |       ❌        |\n| manual  |       ❌       | ✅ (user set) | ⚠️ (simpler) | ⚠️ (rough) |       ✅        |\n\nBut it's actually simple to understand: you do not need to think about which mode you should use!\n- Just always send the `total` if you have it, and use `manual` if you need it!\n\nThat's it! It will just work the best it can! 👏 \\o/\n\n### The different `bar()` handlers\n\nThe `bar()` handlers support either relative or absolute semantics, depending on the mode:\n\n- _auto_ and _unknown_ modes use **optional relative** positioning, so you can just call `bar()` to increment the counter by one, or send any other increment like `bar(200)` to increment by 200 at once;\n  > they even support `bar(0)` and `bar(-5)` to hold or decrement if needed!\n- _manual_ mode uses **mandatory absolute** positioning, so you can call `bar(0.35)` to make the bar instantly jump to 35% progress.\n\n> Both modes enable you to get creative! Since you can just make the bar go instantly to whatever position you want, you can:\n> - make it go backwards — e.g. to graphically display the timeout of something;\n> - create special effects — e.g. to mimic a real-time analog gauge of some sort.\n\nYou can call `bar()` as many times as you want! The terminal refresh rate will always be asynchronously computed according to the current throughput and progress, so you won't risk spamming the terminal with more updates than needed.\n\nIn any case, to retrieve the current counter/percentage, just call: `bar.current`:\n\n- in _auto_ and _unknown_ modes, this provides an **integer** — the actual internal counter;\n- in _manual_ mode, this provides a **float** in the interval [0, 1] — the last percentage set.\n\nFinally, the `bar()` handler leverages the **auto** mode unique ability: just call `bar(skipped=True)` or `bar(N, skipped=True)` to use it. When `skipped` is set to=`True`, the associated item(s) are excluded from throughput calculations, preventing skipped items from inaccurately affecting the ETA.\n\n---\nMaintaining an open source project is hard and time-consuming, and I've put much ❤️ and effort into this.\n\nIf you've appreciated my work, you can back me up with a donation! Thank you 😊\n\n[<img align=\"right\" src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" width=\"217px\" height=\"51x\">](https://www.buymeacoffee.com/rsalmei)\n[<img align=\"right\" alt=\"Donate with PayPal button\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\">](https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&no_recurring=0&item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&currency_code=USD)\n\n---\n\n## Styles\n\nThe `showtime` exhibit has an optional argument to choose which show to present, `Show.SPINNERS` (default), `Show.BARS` or `Show.THEMES`, do take a look at them! ;)\n\n```python\nfrom alive_progress.styles import showtime, Show\n\nshowtime(Show.BARS)\nshowtime(Show.THEMES)\n```\n\n> Note: Please disregard the path in the animated gif below, the correct one is above. These long gifs are very time-consuming to generate, so I can't make another on every single change. Thanks for your understanding.\n\n![alive-progress bars](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/showtime-bars.gif)\n\nAnd the themes one (📌 new in 2.0):\n\n![alive-progress themes](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/showtime-themes.gif)\n\nThe `showtime` exhibit also accepts some customization options:\n\n- **fps**: the frames per second rate refresh rate, default is 15;\n- **length**: the length of the bars, default is 40;\n- **pattern**: a filter to choose which ones to display.\n\nFor example to get a marine show, you can `showtime(pattern='boat|fish|crab')`:\n\n![alive-progress filtered spinners](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/showtime-marine-spinners.gif)\n\n> You can also access these shows with the shorthands `show_bars()`, `show_spinners()`, and `show_themes()`!\n\n> There's also a small utility called `print_chars()`, to help find that cool character to put in your customized spinners and bars, or to determine if your terminal does support Unicode characters.\n\n## Configuration\n\nThere are several options to customize both appearance and behavior!\n<br>All of them can be set both directly in the `alive_bar` or globally in the `config_handler`!\n\nThese are the options - default values in brackets:\n\n- `title`: an optional, always visible bar title\n- `length`: [`40`] the number of cols to render the animated progress bar\n- `max_cols`: [`80`] the maximum cols to use if not possible to fetch it, like in jupyter\n- `spinner`: the spinner style to be rendered next to the bar\n  <br> ↳ accepts a predefined spinner name, a custom spinner factory, or None\n- `bar`: the bar style to be rendered in known modes\n  <br> ↳ accepts a predefined bar name, a custom bar factory, or None\n- `unknown`: the bar style to be rendered in the unknown mode\n  <br> ↳ accepts a predefined spinner name, or a custom spinner factory (cannot be None)\n- `theme`: [`'smooth'`] a set of matching spinner, bar, and unknown\n  <br> ↳ accepts a predefined theme name\n- `force_tty`: [`None`] forces animations to be on, off, or according to the tty (more details [here](#forcing-animations-on-pycharm-jupyter-etc))\n  <br> ↳ None -> auto select, according to the terminal/Jupyter\n  <br> ↳ True -> unconditionally enables animations, but still auto-detects Jupyter Notebooks\n  <br> ↳ False -> unconditionally disables animations, keeping only the final receipt\n- `file`: [`sys.stdout`] the file object to use: `sys.stdout`, `sys.stderr`, or a similar `TextIOWrapper`\n- `disable`: [`False`] if True, completely disables all output, do not install hooks\n- `manual`: [`False`] set to manually control the bar position\n- `enrich_print`: [`True`] enriches print() and logging messages with the bar position\n- `enrich_offset`: [`0`] the offset to apply to enrich_print\n- `receipt`: [`True`] prints the nice final receipt, disables if False\n- `receipt_text`: [`False`] set to repeat the last text message in the final receipt\n- `monitor` (bool|str): [`True`] configures the monitor widget `152/200 [76%]`\n  <br> ↳ send a string with `{count}`, `{total}` and `{percent}` to customize it\n- `elapsed` (bool|str): [`True`] configures the elapsed time widget `in 12s`\n  <br> ↳ send a string with `{elapsed}` to customize it\n- `stats` (bool|str): [`True`] configures the stats widget `(123.4/s, eta: 12s)`\n  <br> ↳ send a string with `{rate}` and `{eta}` to customize it\n- `monitor_end` (bool|str): [`True`] configures the monitor widget within final receipt\n  <br> ↳ same as monitor, the default format is dynamic, it inherits `monitor`'s one\n- `elapsed_end` (bool|str): [`True`] configures the elapsed time widget within final receipt\n  <br> ↳ same as elapsed, the default format is dynamic, it inherits `elapsed`'s one\n- `stats_end` (bool|str): [`True`] configures the stats widget within final receipt\n  <br> ↳ send a string with `{rate}` to customize it (no relation to stats)\n- `title_length`: [`0`] fixes the length of titles, or 0 for unlimited\n  <br> ↳ title will be truncated if longer, and a cool ellipsis \"…\" will appear at the end\n- `spinner_length`: [`0`] forces the spinner length, or `0` for its natural one\n- `refresh_secs`: [`0`] forces the refresh period to this, `0` is the reactive visual feedback\n- `ctrl_c`: [`True`] if False, disables CTRL+C (captures it)\n- `dual_line`: [`False`] if True, places the text below the bar\n- `unit`: any text that labels your entities\n- `scale`: the scaling to apply to units: `None`, `SI`, `IEC`, or `SI2`\n  <br> ↳ supports aliases: `False` or `''` -> `None`, `True` -> `SI`, `10` or `'10'` -> `SI`, `2` or `'2'` -> `IEC`\n- `precision`: [`1`] how many decimals do display when scaling\n\nAnd there's also one that can only be set locally in the `alive_bar` context:\n\n- `calibrate`: maximum theoretical throughput to calibrate the animation speed (more details [here](#fps-calibration))\n\nTo set them locally, just send them as keyword arguments to `alive_bar`:\n\n```python\nwith alive_bar(total, title='Processing', length=20, bar='halloween') as bar:\n    ...\n```\n\nTo use them globally, send them to `config_handler`, and any `alive_bar` created after that will include those options! And you can mix and match them, local options always have precedence over global ones:\n\n```python\nfrom alive_progress import config_handler\n\nconfig_handler.set_global(length=20, spinner='wait')\n\nwith alive_bar(total, bar='blocks', spinner='twirls') as bar:\n    # the length is 20, the bar is 'blocks' and the spinner is 'twirls'.\n    ...\n```\n\n## Create your own animations\n\nYes, you can assemble your own spinners! And it's easy!\n<br>I've created a plethora of special effects, so you can just mix and match them any way you want! There are frames, scrolling, bouncing, sequential, alongside, and delayed spinners! Get creative! 😍\n\n### Intro: How do they work?\n\nThe spinners' animations are engineered by very advanced generator expressions, deep within several layers of meta factories, factories and generators 🤯!\n\n- the meta factory (public interface) receives the styling parameters from you, the user, and processes/stores them inside a closure to create the actual factory => this is the object you'll send to both `alive_bar` and `config_handler`;\n- internally it still receives other operating parameters (like for instance the rendition length), to assemble the actual generator expression of the animation cycles of some effect, within yet another closure;\n- this, for each cycle, assembles another generator expression for the animation frames of the same effect;\n- these generators together finally produce the streams of cycles and frames of the cool animations we see on the screen! Wow! 😜👏\n\nThese generators are capable of multiple different animation cycles according to the spinner behavior, e.g. a bouncing spinner can run one cycle to smoothly bring a subject into the scene, then repeatedly reposition it until the other side, then make it smoothly disappear off the scene => and this is all only one cycle! Then it can be followed by another cycle to make it all again but backwards!\nAnd bouncing spinners also accept _different_ and _alternating_ patterns in both the right and left directions, which makes them generate the cartesian product of all the combinations, possibly producing dozens of different cycles until they start repeating them!! 🤯\n\nAnd there's more, I think one of the most impressive achievements I got in this animation system (besides the spinner compiler itself)... They only yield more animation frames until the current cycle is not exhausted, then **they halt themselves**! Yep, the next cycle does not start just yet! This behavior creates natural breaks in exactly the correct spots, where the animations are not disrupted, so I can smoothly link with whatever other animation I want!!\n<br>This has all kinds of cool implications: the cycles can have different frame counts, different screen lengths, they do not need to be synchronized, they can create long different sequences by themselves, they can cooperate to play cycles in sequence or alongside, and I can amaze you displaying several totally distinct animations at the same time without any interferences whatsoever!\n\n> It's almost like they were... _alive_!! 😄\n> <br>==> Yes, that's where this project's name came from! 😉\n\n### A Spinner Compiler, really?\n\nNow, these generators of cycles and frames are fully consumed ahead of time by the **Spinner Compiler**! This is a very cool new processor that I made inside the _Cell Architecture_ effort, to make all these animations work even in the presence of wide chars or complex grapheme clusters! It was very hard to make these clusters gradually enter and exit frames, smoothly, while keeping them from breaking the Unicode encoding and especially maintain their original lengths in all frames! Yes, several chars in sequence can represent another completely different symbol, so they cannot ever be split! They have to enter and exit the frame always together, all at once, or the grapheme won't show up at all (an Emoji for instance)!! Enter the **Spinner Compiler**......\n\nThis has made possible some incredible things!! Since this Compiler generates the whole spinner frame data beforehand:\n\n- the grapheme fixes can be applied only once;\n- the animations do not need to be calculated again!\n> So, I can just collect all that _ready to play_ animations and be done with it, **no runtime overhead** at all!! 👏\n\nAlso, with the complete frame data compiled and persisted, I could create several commands to **refactor** that data, like changing shapes, replacing chars, adding visual pauses (frame repetitions), generating bouncing effects on-demand over any content, and even transposing cycles with frames!!\n\nBut how can you see these effects? Does the effect you created look good? Or is it not working as you thought? YES, now you can see all generated cycles and frames analytically, in a very beautiful rendition!!\n<br>I love what I've achieved here 😊, it's probably THE most beautiful tool I've ever created... Behold the `check` tool!!\n\n![alive-progress check tool](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-spinner-check.png)\n\nIt's awesome if I say so myself, isn't it? And a very complex piece of software I'm proud of, [take a look at its code](alive_progress/animations/spinner_compiler.py) if you'd like.\n\nAnd the `check` tool is much more powerful! For instance, you can see the codepoints of the frames!!! And maybe have a glimpse of why this version was so, so very hard and complex to make...\n\n![alive-progress check tool](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-spinner-check-codepoints.png)\n\nIn red, you see the grapheme clusters, that occupy one or two \"logical positions\", regardless of their actual sizes... These are the \"Cells\" of the new _Cell Architecture_...\n<br>Look how awesome an Emoji Flag is represented:\n\n![alive-progress check tool](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-spinner-check-codepoints-flag.png)\n\nThe flag seems to move so smoothly because it uses \"half-characters\"! Since it is a wide char, `alive-progress` knows it will be rendered with \"two visible chars\", and the animations consider this, but compose with spaces, which occupy only one. When one uses mixed backgrounds, the situation is much more complex...\n\n### Spinner Factories\n\nThe types of factories I've created are:\n\n- `frames`: draws any sequence of characters at will, that will be played frame by frame in sequence;\n- `scrolling`: generates a smooth flow from one side to the other, hiding behind or wrapping upon invisible borders — allows using subjects one at a time, generating several cycles of distinct characters;\n- `bouncing`: similar to `scrolling`, but makes the animations bounce back to the start, hiding behind or immediately bouncing upon invisible borders;\n- `sequential` get a handful of factories and play them one after the other sequentially! allows to intermix them or not;\n- `alongside` get a handful of factories and play them alongside simultaneously, why choose when you can have them all?! allows to choose the pivot of the animation;\n- `delayed`: get any other factory and copy it multiple times, increasingly skipping some frames on each one! very cool effects are made here!\n\nFor more details please look at their docstrings, which are very complete.\n\n### Bar Factories\n\nCustomizing bars is nowhere near that involved. Let's say they are \"immediate\", passive objects. They do not support animations, i.e. they will always generate the same rendition given the same parameters. Remember spinners are infinite generators, capable of generating long and complex sequences.\n\nWell, bars also have a meta factory, use closures to store the styling parameters, and receive additional operating parameters, but then the actual factory can't generate any content by itself. It still needs an extra parameter, a floating-point number between 0 and 1, which is the percentage to render itself.\n\n> `alive_bar` calculates this percentage automatically based on the counter and total, but you can send it yourself when in the `manual` mode!\n\nBars also do not have a Bar Compiler, but they **do provide the check tool**!! 🎉\n\n![alive-progress check tool](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-bar-check.png)\n\nYou can even mix and match wide chars and normal chars just like in spinners! (and everything keeps perfectly aligned 😅)\n\n![alive-progress check tool](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-bar-check-mix.png)\n\n> Use the check tools to your heart's content!! They have even more goodies awaiting you, even real-time animations!\n\n> Create the wildest and coolest animations you can and send them to me!\n> <br>I'm thinking about creating some kind of `contrib` package, with user-contributed spinners and bars!\n\nWow, if you've read everything till here, you should now have a sound knowledge about using `alive-progress`! 👏\n<br>But brace yourself because there is even more, exciting stuff lies ahead!\n\n---\nMaintaining an open source project is hard and time-consuming, and I've put much ❤️ and effort into this.\n\nIf you've appreciated my work, you can back me up with a donation! Thank you 😊\n\n[<img align=\"right\" src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" width=\"217px\" height=\"51x\">](https://www.buymeacoffee.com/rsalmei)\n[<img align=\"right\" alt=\"Donate with PayPal button\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\">](https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&no_recurring=0&item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&currency_code=USD)\n\n---\n\n## Advanced\n\n### The Pause Mechanism\n\nOh, you want to pause it altogether, I hear? This is an amazing novel concept, not found anywhere AFAIK.\n<br>With this you get to act on some items **manually**, at will, right in the middle of an ongoing processing!!\n<br>YES, you can return to the prompt and fix, change, submit things, and the bar will just \"remember\" where it was...\n\nSuppose you need to reconcile payment transactions (been there, done that). You need to iterate over thousands of them, detect somehow the faulty ones, and fix them. This fix is not simple nor deterministic, you need to study each one to understand what to do. They could be missing a recipient, or have the wrong amount, or not be synced with the server, etc., it's hard to even imagine all possibilities.\n\nTypically, you would have to let the detection process run until completion, appending to a list each inconsistency it finds and waiting, potentially a long time, until you can finally start fixing them... You could of course mitigate that by processing in chunks, or printing them and acting via another shell, etc., but those have their own shortcomings... 😓\n<br>Now, there's a better way! Simply pause the actual detection process for a while! Then you just have to wait till the next fault is found, and act in near real-time!\n\nTo use the pause mechanism you just have to write a function, so the code can `yield` the items you want to interact with. You most probably already use one in your code, but in the `ipython` shell or another REPL you probably don't. So just wrap your debug code in a function, then enter within a `bar.pause()` context!!\n\n```python\ndef reconcile_transactions():\n    qs = Transaction.objects.filter()  # django example, or in sqlalchemy: session.query(Transaction).filter()\n    with alive_bar(qs.count()) as bar:\n        for transaction in qs:\n            if faulty(transaction):\n                with bar.pause():\n                    yield transaction\n            bar()\n```\n\nThat's it! It's that simple! \\o/\n<br>Now run `gen = reconcile_transactions()` to instantiate the generator, and whenever you want the next faulty transaction, just call `next(gen, None)`! I love it...\n<br>The `alive-progress` bar will start and run as usual, but as soon as any inconsistency is found, the bar will pause itself, turning off the refresh thread and remembering its exact state, and yield the transaction to you directly on the prompt! It's almost magic! 😃\n\n```text\nIn [11]: gen = reconcile_transactions()\n\nIn [12]: next(gen, None)\n|█████████████████████                   | 105/200 [52%] in 5s (18.8/s, eta: 4s)\nOut[12]: Transaction<#123>\n```\n\nYou can then inspect the transaction with the usual `_` shortcut of `ipython` (or just directly assign it with `t = next(gen, None)`), and you're all set to fix it!\n<br>When you're done, just reactivate the bar with the same `next` call as before!! The bar reappears, turns everything back on, and continues **like it had never stopped**!! Ok, it is magic 😜\n\n```text\nIn [21]: next(gen, None)\n|█████████████████████                   | ▁▃▅ 106/200 [52%] in 5s (18.8/s, eta: 4s)\n```\n\nRinse and repeat till the final receipt appears, and there'll be no faulty transactions anymore. 😄\n\n### Loop-less use\n\nSo, you need to monitor a fixed operation, without any loops, right?\n<br>It'll work for sure! Here is a naive example (we'll do better in a moment):\n\n```python\nwith alive_bar(4) as bar:\n    corpus = read_file(file)\n    bar()  # file was read, tokenizing\n    tokens = tokenize(corpus)\n    bar()  # tokens generated, processing\n    data = process(tokens)\n    bar()  # process finished, sending response\n    resp = send(data)\n    bar()  # we're done! four bar calls with `total=4`\n```\n\nIt's naive because it assumes all steps take the same amount of time, but actually, each one may take a very different time to complete. Think `read_file` and `tokenize` may be extremely fast, which makes the percentage skyrocket to 50%, then stopping for a long time in the `process` step... You get the point, it can ruin the user experience and create a very misleading ETA.\n\nTo improve upon that you need to distribute the steps' percentages accordingly! Since you told `alive_bar` there were four steps, when the first one was completed it understood 1/4 or 25% of the whole processing was complete... Thus, you need to measure how long your steps actually take and use the **manual mode** to increase the bar percentage by the right amount at each step!\n\nYou can use my other open source project [about-time](https://github.com/rsalmei/about-time) to easily measure these durations! Just try to simulate with some representative inputs, to get better results. Something like:\n\n```python\nfrom about_time import about_time\n\nwith about_time() as t_total:  # this about_time will measure the whole time of the block.\n    with about_time() as t1:  # the other four will get the relative timings within the whole.\n        corpus = read_file(file)  # `about_time` supports several calling conventions, including one-liners.\n    with about_time() as t2:  # see its documentation for more details.\n        tokens = tokenize(corpus)\n    with about_time() as t3:\n        data = process(tokens)\n    with about_time() as t4:\n        resp = send(data)\n\nprint(f'percentage1 = {t1.duration / t_total.duration}')\nprint(f'percentage2 = {t2.duration / t_total.duration}')\nprint(f'percentage3 = {t3.duration / t_total.duration}')\nprint(f'percentage4 = {t4.duration / t_total.duration}')\n```\n\nThere you go! Now you know the relative timings of all the steps, and can use them to improve your original code! Just get the cumulative timings and put them within a manual mode `alive_bar`!\n\nFor example, if the timings you found were 10%, 30%, 20%, and 40%, you'd use 0.1, 0.4, 0.6, and 1.0 (the last one should always be 1.0):\n\n```python\nwith alive_bar(4, manual=True) as bar:\n    corpus = read_big_file()\n    bar(0.1)  # 10%\n    tokens = tokenize(corpus)\n    bar(0.4)  # 30% + 10% from previous steps\n    data = process(tokens)\n    bar(0.6)  # 20% + 40% from previous steps\n    resp = send(data)\n    bar(1.)  # always 1. in the last step\n```\n\nThat's it! The user experience and ETA should be greatly improved now.\n\n### FPS Calibration\n\nYes, you can calibrate the spinner speed!\n\nThe `alive-progress` bars have cool visual feedback of the current throughput, so you can actually **see** how fast your processing is, as the spinner runs faster or slower with it.\n<br>For this to happen, I've put together and implemented a few fps curves to empirically find which one gave the best feel of speed:\n\n<p align=\"center\"><img alt=\"alive-progress fps curves\" src=\"https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-bar_fps.png\" width=\"80%\" height=\"80%\"></p>\n<p align=\"center\">(interactive version [here](https://www.desmos.com/calculator/ema05elsux))</p>\n\nThe graph shows the logarithmic (red), parabolic (blue) and linear (green) curves, these are the ones I started with. It was not an easy task, I've made dozens of tests, and never found one that really inspired that feel of speed I was looking for. The best one seemed to be the logarithmic one, but it reacted poorly with small numbers.\nI know I could make it work with a few twists for those small numbers, so I experimented a lot and adjusted the logarithmic curve (dotted orange) until I finally found the behavior I expected! It is the one that seemed to provide the best all-around perceived speed changes throughout the whole spectrum from a few to billions...\nThat is the curve I've settled with, and it's the one used in all modes and conditions. In the future and if someone would find it useful, that curve could be configurable.\n\nWell, the default `alive-progress` calibration is **1,000,000** in bounded modes, i.e., it takes 1 million iterations per second for the bar to refresh itself at 60 frames per second. In the manual unbounded mode, it is **1.0** (100%). Both enable a vast operating range and generally work quite well.\n\nFor example, take a look at the effect these very different calibrations have, running the very same code at the very same speed! Notice the feel the spinner passes to the user, is this processing going slow or going fast? And remember that isn't only the spinner refreshing but the whole line, complete with the bar rendition and all widgets, so everything gets smoother or sluggish:\n\n![alive-progress calibration](https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/alive-calibration.gif)\n\n> So, if your processing hardly gets to 20 items per second, and you think `alive-progress` is rendering sluggish, you could increase that sense of speed by calibrating it to let's say `40`, and it will be running waaaay faster... It is better to always leave some headroom and calibrate it to something between 50% and 100% more, and then tweak it from there to find the one you like the most! :)\n\n### Forcing animations on PyCharm, Jupyter, etc.\n\nDo these astonishing `alive-progress` animations refuse to display?\n\nPyCharm is awesome, I love it! But I'll never understand why they've disabled emulating a terminal by default... If you do use PyCharm's output console, please enable this on all your Run Configurations:\n<p align=\"center\"><img alt=\"alive-progress in pycharm\" src=\"https://raw.githubusercontent.com/rsalmei/alive-progress/main/img/pycharm-terminal.png\"></p>\n\n> I even recommend you go into `File` > `New Projects Setup` > `Run Configuration Templates`, select `Python`, and also enable it there, so any new ones you create will already have this set.\n\nIn addition to that, some terminals report themselves as \"non-interactive\", like when running out of a real terminal (PyCharm and Jupyter for example), in shell pipelines (`cat file.txt | python program.py`), or in background processes (not connected to a tty).\n\nWhen `alive-progress` finds itself in a non-interactive terminal, it automatically disables all kinds of animations, printing only the final receipt. This is made in order to avoid both messing up the pipeline output and spamming your log file with thousands of `alive-progress` refreshes.\n\nSo, when you know it's safe, you can force them to see `alive-progress` in all its glory! Here is the `force_tty` argument:\n\n```python\nwith alive_bar(1000, force_tty=True) as bar:\n    for i in range(1000):\n        time.sleep(.01)\n        bar()\n```\n\nThe values accepted are:\n\n- `force_tty=True` -> always enables animations, and auto-detects Jupyter Notebooks!\n- `force_tty=False` -> always disables animations, keeping only the final receipt\n- `force_tty=None` (default) -> auto detect, according to the terminal's tty state\n\nYou can also set it system-wide using `config_handler`, so you don't need to pass it manually anymore.\n\n> Do note that PyCharm's console and Jupyter notebooks are heavily instrumented and thus have much more overhead, so the outcome may not be as fluid as you would expect. On top of that, Jupyter notebooks do not support ANSI Escape Codes, so I had to develop some workarounds to emulate functions like \"clear the line\" and \"clear from cursor\"... To see the fluid and smooth `alive_bar` animations as I intended, always prefer a full-fledged terminal.\n\n## Interesting facts\n\n- This whole project was implemented in functional style;\n- It uses extensively (and very creatively) Python _Closures_ and _Generators_, e.g. all [spinners](https://github.com/rsalmei/alive-progress/blob/main/alive_progress/animations/spinners.py#L10) are made with cool _Generator Expressions_! Besides it, there are other cool examples like the [exhibit](https://github.com/rsalmei/alive-progress/blob/main/alive_progress/styles/exhibit.py#L42) module, and the core [spinner player](https://github.com/rsalmei/alive-progress/blob/main/alive_progress/animations/utils.py#L10-L17)/[spinner runner](https://github.com/rsalmei/alive-progress/blob/main/alive_progress/animations/spinner_compiler.py#L233) generators; 😜\n- Until 2.0, `alive-progress` hadn't had any dependency. Now it has two: one is [about-time](https://github.com/rsalmei/about-time) (another interesting project of mine, if I say so myself), which is used to track the time it takes for the spinner compilation, and to generate its human-friendly renditions. The other is [grapheme](https://github.com/alvinlindstam/grapheme), to detect grapheme cluster breaks (I've opened an [issue](https://github.com/alvinlindstam/grapheme/issues/13) there asking about the future and correctness of it, and the author guarantees he intends to update the project on every new Unicode version);\n- Also, until 2.0, `alive-progress` hadn't had a single Python class! Now it has a few tiny ones for very specific reasons (change callables, iterator adapters, and some descriptors for the `alive_bar` widgets).\n- Everything else is either a function or a closure, which generate other closures internally with some state on the parent context. I've used them to create spinner factories, bar factories, the global configuration, the system hooks, the spinner compiler (which is also a big _Function Decorator_), etc.! Even `alive_bar` itself is just a function! Although, to be fair, it is \"just\" a function where I dynamically plug several closures from within into itself (remember that Python functions have a `__dict__` just like classes do 😝).\n\n## To do\n\n- enable multiple simultaneous bars for nested or multiple activities (the most requested feature, but very complex).\n- reset a running bar context, i.e. run in unknown mode while \"quantifying\" the work, then switch to the auto mode.\n- dynamic bar width rendition, which notices terminal size changes and shrink or expand the bar as needed (currently `alive_bar` does notice terminal size changes, but just truncates the line accordingly).\n- improve test coverage, currently at 87% branch coverage (but it's very hard since it's multithreaded, full of stateful closures, and includes system print hooks).\n- create a `contrib` system somehow, to allow a simple way to share cool spinners and bars from users.\n- support colors in spinners and bars (it's very hard, since color codes alter string sizes, which makes it tricky to synchronize animations and correctly slicing, reversing, and iterating fragments of strings while _still keeping color codes_--which is very, very complex) --> probably simpler now with the new _Cell Architecture_.\n- any other ideas are welcome!\n\n<details>\n<summary>Noteworthy features already done ✅</summary>\n\n- resuming computations support with `skipped` items\n- help system on configuration errors\n- readable widgets to extract information\n- exponential smoothing algorithm for the rate\n- support for using `stderr` and other files instead of `stdout`\n- units with automatic scaling\n- dual-line mode\n- customize final receipt widgets\n- customize widgets rendition like `monitor`, `elapsed`, `stats`\n- bar title can be dynamically set, changed or removed\n- exponential smoothing algorithm for the ETA\n- jupyter notebook support, which works the same as in the terminal, animations and everything\n- create an unknown mode for bars (without a known total and eta)\n- implement a pausing mechanism\n- change spinner styles\n- change bar styles\n- include a global configuration system\n- create customizable generators for scrolling, bouncing, delayed, and compound spinners\n- create an exhibition for spinners and bars, to see them all in motion\n- include theme support in configuration\n- soft wrapping support\n- hiding cursor support\n- Python logging support\n- exponential smoothing of ETA time series\n- create an exhibition for themes\n\n</details>\n\n<details>\n<summary>Changelog highlights</summary>\n\n<br>Complete [here](https://github.com/rsalmei/alive-progress/blob/main/CHANGELOG.md).\n\n- 3.2.0: print/logging hooks now support multithreading, rounded ETAs for long tasks, support for zero and negative bar increments, custom offset for enriched print/logging messages, improved compatibility with PyInstaller and Celery, drop 3.7 and 3.8, hello 3.12 and 3.13\n- 3.1.4: support spaces at the start and end of titles and units\n- 3.1.3: better error handling of invalid `alive_it` calls, detect nested uses of alive_progress and throw a clearer error message\n- 3.1.2: fix some exotic ANSI Escape Codes not being printed (OSC)\n- 3.1.1: support for printing ANSI Escape Codes without extra newlines, typing annotations in `alive_it`\n- 3.1.0: new resuming computations support with `skipped` items, new `max_cols` config setting for jupyter, fix fetching the size of the terminal when using stderr, officially supports Python 3.11\n- 3.0.1: fix for logging streams that extend StreamHandler but doesn't allow changing streams\n- 3.0.0: units support with automatic and configurable scaling and precision, automatic stats scaling for slow throughputs, support for using `sys.stderr` and other files instead of `sys.stdout`, smoothed out the rate estimation, more queries into the currently running widgets' data, help system in configuration errors\n- 2.4.1: fix a crash when dual-line and disabled are set\n- 2.4.0: support dual line text mode; finalize function parameter in alive_it; improve logging support, detecting customized ones\n- 2.3.1: introduce ctrl_c config param; print the final receipt even when interrupted\n- 2.3.0: customizable `monitor`, `elapsed`, and `stats` core widgets, new `monitor_end`, `elapsed_end`, and `stats_end` core widgets, better support for CTRL+C, which makes `alive_bar` stop prematurely\n- 2.2.0: bar title can be dynamically set, changed or removed; customizable refresh rates; final receipt can be hidden; `click.echo()` support; faster performance; safer detection of terminal columns; `bar.current` acts like a property; remove Python 3.6\n- 2.1.0: Jupyter notebook support (experimental), Jupyter auto-detection, disable feature and configuration\n- 2.0.0: new system-wide Cell Architecture with grapheme clusters support; super cool spinner compiler and runner; `.check()` tools in both spinners and bars; bars and spinners engines revamp; new animation modes in alongside and sequential spinners; new builtin spinners, bars, and themes; dynamic showtime with themes, scroll protection and filter patterns; improved logging for files; several new configuration options for customizing appearance; new iterator adapter `alive_it`; uses `time.perf_counter()` high-resolution clock; requires Python 3.6+ (and officially supports Python 3.9 and 3.10)\n- 1.6.2: new `bar.current()` method; newlines get printed on vanilla Python REPL; the bar is truncated to 80 chars on Windows\n- 1.6.1: fix logging support for Python 3.6 and lower; support logging for file; support for wide Unicode chars, which use 2 columns but have length 1\n- 1.6.0: soft wrapping support; hiding cursor support; Python logging support; exponential smoothing of ETA time series; proper bar title, always visible; enhanced times representation; new `bar.text()` method, to set situational messages at any time, without incrementing position (deprecates 'text' parameter in `bar()`); performance optimizations\n- 1.5.1: fix compatibility with Python 2.7 (should be the last one, version 2 is in the works, with Python 3 support only)\n- 1.5.0: standard_bar accepts a `background` parameter instead of `blank`, which accepts arbitrarily sized strings and remains fixed in the background, simulating a bar going \"over it\"\n- 1.4.4: restructure internal packages; 100% branch coverage of all animations systems, i.e., bars and spinners\n- 1.4.3: protect configuration system against other errors (length='a' for example); first automated tests, 100% branch coverage of configuration system\n- 1.4.2: sanitize text input, keeping \\n from entering and replicating bar on the screen\n- 1.4.1: include license file in the source distribution\n- 1.4.0: print() enrichment can now be disabled (locally and globally), exhibits now have a real-time fps indicator, new exhibit functions `show_spinners` and `show_bars`, new utility `print_chars`, `show_bars` gain some advanced demonstrations (try it again!)\n- 1.3.3: further improve stream compatibility with isatty\n- 1.3.2: beautifully finalize bar in case of unexpected errors\n- 1.3.1: fix a subtle race condition that could leave artifacts if ended very fast, flush print buffer when position changes or bar terminates, keep the total argument from unexpected types\n- 1.3.0: new fps calibration system, support force_tty and manual options in global configuration, multiple increment support in bar handler\n- 1.2.0: filled blanks bar styles, clean underflow representation of filled blanks\n- 1.1.1: optional percentage in manual mode\n- 1.1.0: new manual mode\n- 1.0.1: pycharm console support with force_tty, improve compatibility with Python stdio streams\n- 1.0.0: first public release, already very complete and mature\n\n</details>\n\n## Python End of Life notice\n\n`alive_progress` will always try to keep up with Python, so starting from version 2.0, I'll drop support for all Python versions which enter EoL. See their schedule [here](https://endoflife.date/python).\n\nBut don't worry if you can't migrate just yet: `alive_progress` versions are perennial, so just keep using the one that works for you and you're good.\n<br>I just strongly recommend setting older `alive_progress` packages in a requirements.txt file with the following formats. These will always fetch the latest build releases previous to a given version, so, if I ever release bug fixes, you'll get them too.\n\n### For Python 2.7 and 3.5\n\n```sh\n❯ pip install -U \"alive_progress<2\"\n```\n\n### For Python 3.6\n\n```sh\n❯ pip install -U \"alive_progress<2.2\"\n```\n\n### For Python 3.7 and 3.8\n\n```sh\n❯ pip install -U \"alive_progress<3.2\"\n```\n\n## License\n\nThis software is licensed under the MIT License. See the LICENSE file in the top distribution directory for the full license text.\n\n\n---\nMaintaining an open source project is hard and time-consuming, and I've put much ❤️ and effort into this.\n\nIf you've appreciated my work, you can back me up with a donation! Thank you 😊\n\n[<img align=\"right\" src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" width=\"217px\" height=\"51x\">](https://www.buymeacoffee.com/rsalmei)\n[<img align=\"right\" alt=\"Donate with PayPal button\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\">](https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&no_recurring=0&item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&currency_code=USD)\n\n---\n"
        },
        {
          "name": "alive_progress",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 0.802734375,
          "content": "# coverage related\n\ncov := \"--cov=alive_progress --cov-branch --cov-report=term-missing\"\n\nall:\n    @just --list\n\ninstall:\n    pip install -r requirements/dev.txt -r requirements/test.txt -e .\n\nclean: clean-build clean-pyc\n\nclean-build:\n    rm -rf build dist alive_progress.egg-info\n\nclean-pyc:\n    find . -type f -name *.pyc -delete\n\nlint:\n    ruff check alive_progress --line-length 100\n\nbuild: lint clean\n    python setup.py sdist bdist_wheel\n\nrelease: build && tag\n    twine upload dist/*\n\ntag:\n    #!/usr/bin/env zsh\n    tag=$(python -c 'import alive_progress; print(\"v\" + alive_progress.__version__)')\n    git tag -a $tag -m \"Details: https://github.com/rsalmei/alive-progress/blob/main/CHANGELOG.md\"\n    git push origin $tag\n\ntest:\n    pytest {{ cov }}\n\nptw:\n    ptw -- {{ cov }}\n\ncov-report:\n    coverage report -m\n"
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 0.177734375,
          "content": "import nox\n\n\n@nox.session(python=['3.9', '3.10', '3.11', '3.12', '3.13'])\ndef tests(session):\n    session.install('-r', 'requirements/test.txt', '-e', '.')\n    session.run('pytest')\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.353515625,
          "content": "from distutils.core import setup\n\nfrom setuptools import find_packages\n\nimport alive_progress\n\n\ndef get_readme():\n    with open('README.md', encoding='utf-8') as readme_file:\n        return readme_file.read()\n\n\nsetup(\n    name='alive-progress',\n    version=alive_progress.__version__,\n    description=alive_progress.__description__,\n    long_description=get_readme(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/rsalmei/alive-progress',\n    author=alive_progress.__author__,\n    author_email=alive_progress.__email__,\n    license='MIT',\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 5 - Production/Stable',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Environment :: Console',\n        'Natural Language :: English',\n\n        # Pick your license as you wish (should match \"license\" above)\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        # 'Programming Language :: Python :: 2',\n        # 'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        # 'Programming Language :: Python :: 3.2',\n        # 'Programming Language :: Python :: 3.3',\n        # 'Programming Language :: Python :: 3.4',\n        # 'Programming Language :: Python :: 3.5',\n        # 'Programming Language :: Python :: 3.6',\n        # 'Programming Language :: Python :: 3.7',\n        # 'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: 3.13',\n    ],\n    keywords='progress bar progress-bar progressbar spinner eta monitoring python terminal '\n             'multi-threaded REPL alive animated visual feedback simple live efficient monitor '\n             'stats elapsed time throughput'.split(),\n    packages=find_packages(exclude=['tests*']),\n    data_files=[('', ['LICENSE'])],\n    python_requires='>=3.9, <4',\n    install_requires=['about_time==4.2.1', 'grapheme==0.6.0'],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}