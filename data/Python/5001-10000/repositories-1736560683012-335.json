{
  "metadata": {
    "timestamp": 1736560683012,
    "page": 335,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/HunyuanVideo",
      "stars": 7236,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "__pycache__\n/ckpts/**/"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 14.9443359375,
          "content": "TENCENT HUNYUAN COMMUNITY LICENSE AGREEMENT\nTencent HunyuanVideo Release Date: December 3, 2024\nTHIS LICENSE AGREEMENT DOES NOT APPLY IN THE EUROPEAN UNION, UNITED KINGDOM AND SOUTH KOREA AND IS EXPRESSLY LIMITED TO THE TERRITORY, AS DEFINED BELOW.\nBy clicking to agree or by using, reproducing, modifying, distributing, performing or displaying any portion or element of the Tencent Hunyuan Works, including via any Hosted Service, You will be deemed to have recognized and accepted the content of this Agreement, which is effective immediately.\n1.\tDEFINITIONS.\na.\t“Acceptable Use Policy” shall mean the policy made available by Tencent as set forth in the Exhibit A.\nb.\t“Agreement” shall mean the terms and conditions for use, reproduction, distribution, modification, performance and displaying of Tencent Hunyuan Works or any portion or element thereof set forth herein.\nc.\t“Documentation” shall mean the specifications, manuals and documentation for Tencent Hunyuan made publicly available by Tencent.\nd.\t“Hosted Service” shall mean a hosted service offered via an application programming interface (API), web access, or any other electronic or remote means.\ne.\t“Licensee,” “You” or “Your” shall mean a natural person or legal entity exercising the rights granted by this Agreement and/or using the Tencent Hunyuan Works for any purpose and in any field of use.\nf.\t“Materials” shall mean, collectively, Tencent’s proprietary Tencent Hunyuan and Documentation (and any portion thereof) as made available by Tencent under this Agreement.\ng.\t“Model Derivatives” shall mean all: (i) modifications to Tencent Hunyuan or any Model Derivative of Tencent Hunyuan; (ii) works based on Tencent Hunyuan or any Model Derivative of Tencent Hunyuan; or (iii) any other machine learning model which is created by transfer of patterns of the weights, parameters, operations, or Output of Tencent Hunyuan or any Model Derivative of Tencent Hunyuan, to that model in order to cause that model to perform similarly to Tencent Hunyuan or a Model Derivative of Tencent Hunyuan, including distillation methods, methods that use intermediate data representations, or methods based on the generation of synthetic data Outputs by Tencent Hunyuan or a Model Derivative of Tencent Hunyuan for training that model. For clarity, Outputs by themselves are not deemed Model Derivatives.\nh.\t“Output” shall mean the information and/or content output of Tencent Hunyuan or a Model Derivative that results from operating or otherwise using Tencent Hunyuan or a Model Derivative, including via a Hosted Service.\ni.\t“Tencent,” “We” or “Us” shall mean THL A29 Limited.\nj.\t“Tencent Hunyuan” shall mean the large language models, text/image/video/audio/3D generation models, and multimodal large language models and their software and algorithms, including trained model weights, parameters (including optimizer states), machine-learning model code, inference-enabling code, training-enabling code, fine-tuning enabling code and other elements of the foregoing made publicly available by Us, including, without limitation to, Tencent HunyuanVideo released at [https://github.com/Tencent/HunyuanVideo].\nk.\t“Tencent Hunyuan Works” shall mean: (i) the Materials; (ii) Model Derivatives; and (iii) all derivative works thereof.\nl.\t“Territory” shall mean the worldwide territory, excluding the territory of the European Union, United Kingdom and South Korea. \nm.\t“Third Party” or “Third Parties” shall mean individuals or legal entities that are not under common control with Us or You.\nn.\t“including” shall mean including but not limited to.\n2.\tGRANT OF RIGHTS.\nWe grant You, for the Territory only, a non-exclusive, non-transferable and royalty-free limited license under Tencent’s intellectual property or other rights owned by Us embodied in or utilized by the Materials to use, reproduce, distribute, create derivative works of (including Model Derivatives), and make modifications to the Materials, only in accordance with the terms of this Agreement and the Acceptable Use Policy, and You must not violate (or encourage or permit anyone else to violate) any term of this Agreement or the Acceptable Use Policy.\n3.\tDISTRIBUTION.\nYou may, subject to Your compliance with this Agreement, distribute or make available to Third Parties the Tencent Hunyuan Works, exclusively in the Territory, provided that You meet all of the following conditions:\na.\tYou must provide all such Third Party recipients of the Tencent Hunyuan Works or products or services using them a copy of this Agreement;\nb.\tYou must cause any modified files to carry prominent notices stating that You changed the files;\nc.\tYou are encouraged to: (i) publish at least one technology introduction blogpost or one public statement expressing Your experience of using the Tencent Hunyuan Works; and (ii) mark the products or services developed by using the Tencent Hunyuan Works to indicate that the product/service is “Powered by Tencent Hunyuan”; and\nd.\tAll distributions to Third Parties (other than through a Hosted Service) must be accompanied by a “Notice” text file that contains the following notice: “Tencent Hunyuan is licensed under the Tencent Hunyuan Community License Agreement, Copyright © 2024 Tencent. All Rights Reserved. The trademark rights of “Tencent Hunyuan” are owned by Tencent or its affiliate.”\nYou may add Your own copyright statement to Your modifications and, except as set forth in this Section and in Section 5, may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Model Derivatives as a whole, provided Your use, reproduction, modification, distribution, performance and display of the work otherwise complies with the terms and conditions of this Agreement (including as regards the Territory). If You receive Tencent Hunyuan Works from a Licensee as part of an integrated end user product, then this Section 3 of this Agreement will not apply to You.\n4.\tADDITIONAL COMMERCIAL TERMS.\nIf, on the Tencent Hunyuan version release date, the monthly active users of all products or services made available by or for Licensee is greater than 100 million monthly active users in the preceding calendar month, You must request a license from Tencent, which Tencent may grant to You in its sole discretion, and You are not authorized to exercise any of the rights under this Agreement unless or until Tencent otherwise expressly grants You such rights.\n5.\tRULES OF USE.\na.\tYour use of the Tencent Hunyuan Works must comply with applicable laws and regulations (including trade compliance laws and regulations) and adhere to the Acceptable Use Policy for the Tencent Hunyuan Works, which is hereby incorporated by reference into this Agreement. You must include the use restrictions referenced in these Sections 5(a) and 5(b) as an enforceable provision in any agreement (e.g., license agreement, terms of use, etc.) governing the use and/or distribution of Tencent Hunyuan Works and You must provide notice to subsequent users to whom You distribute that Tencent Hunyuan Works are subject to the use restrictions in these Sections 5(a) and 5(b).\nb.\tYou must not use the Tencent Hunyuan Works or any Output or results of the Tencent Hunyuan Works to improve any other AI model (other than Tencent Hunyuan or Model Derivatives thereof).\nc.\tYou must not use, reproduce, modify, distribute, or display the Tencent Hunyuan Works, Output or results of the Tencent Hunyuan Works outside the Territory. Any such use outside the Territory is unlicensed and unauthorized under this Agreement.\n6.\tINTELLECTUAL PROPERTY.\na.\tSubject to Tencent’s ownership of Tencent Hunyuan Works made by or for Tencent and intellectual property rights therein, conditioned upon Your compliance with the terms and conditions of this Agreement, as between You and Tencent, You will be the owner of any derivative works and modifications of the Materials and any Model Derivatives that are made by or for You.\nb.\tNo trademark licenses are granted under this Agreement, and in connection with the Tencent Hunyuan Works, Licensee may not use any name or mark owned by or associated with Tencent or any of its affiliates, except as required for reasonable and customary use in describing and distributing the Tencent Hunyuan Works. Tencent hereby grants You a license to use “Tencent Hunyuan” (the “Mark”) in the Territory solely as required to comply with the provisions of Section 3(c), provided that You comply with any applicable laws related to trademark protection. All goodwill arising out of Your use of the Mark will inure to the benefit of Tencent.\nc.\tIf You commence a lawsuit or other proceedings (including a cross-claim or counterclaim in a lawsuit) against Us or any person or entity alleging that the Materials or any Output, or any portion of any of the foregoing, infringe any intellectual property or other right owned or licensable by You, then all licenses granted to You under this Agreement shall terminate as of the date such lawsuit or other proceeding is filed. You will defend, indemnify and hold harmless Us from and against any claim by any Third Party arising out of or related to Your or the Third Party’s use or distribution of the Tencent Hunyuan Works.\nd.\tTencent claims no rights in Outputs You generate. You and Your users are solely responsible for Outputs and their subsequent uses.\n7.\tDISCLAIMERS OF WARRANTY AND LIMITATIONS OF LIABILITY.\na.\tWe are not obligated to support, update, provide training for, or develop any further version of the Tencent Hunyuan Works or to grant any license thereto.\nb.\tUNLESS AND ONLY TO THE EXTENT REQUIRED BY APPLICABLE LAW, THE TENCENT HUNYUAN WORKS AND ANY OUTPUT AND RESULTS THEREFROM ARE PROVIDED “AS IS” WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES OF ANY KIND INCLUDING ANY WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, COURSE OF DEALING, USAGE OF TRADE, OR FITNESS FOR A PARTICULAR PURPOSE. YOU ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USING, REPRODUCING, MODIFYING, PERFORMING, DISPLAYING OR DISTRIBUTING ANY OF THE TENCENT HUNYUAN WORKS OR OUTPUTS AND ASSUME ANY AND ALL RISKS ASSOCIATED WITH YOUR OR A THIRD PARTY’S USE OR DISTRIBUTION OF ANY OF THE TENCENT HUNYUAN WORKS OR OUTPUTS AND YOUR EXERCISE OF RIGHTS AND PERMISSIONS UNDER THIS AGREEMENT.\nc.\tTO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL TENCENT OR ITS AFFILIATES BE LIABLE UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT, NEGLIGENCE, PRODUCTS LIABILITY, OR OTHERWISE, FOR ANY DAMAGES, INCLUDING ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, EXEMPLARY, CONSEQUENTIAL OR PUNITIVE DAMAGES, OR LOST PROFITS OF ANY KIND ARISING FROM THIS AGREEMENT OR RELATED TO ANY OF THE TENCENT HUNYUAN WORKS OR OUTPUTS, EVEN IF TENCENT OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF ANY OF THE FOREGOING.\n8.\tSURVIVAL AND TERMINATION.\na.\tThe term of this Agreement shall commence upon Your acceptance of this Agreement or access to the Materials and will continue in full force and effect until terminated in accordance with the terms and conditions herein.\nb.\tWe may terminate this Agreement if You breach any of the terms or conditions of this Agreement. Upon termination of this Agreement, You must promptly delete and cease use of the Tencent Hunyuan Works. Sections 6(a), 6(c), 7 and 9 shall survive the termination of this Agreement.\n9.\tGOVERNING LAW AND JURISDICTION.\na.\tThis Agreement and any dispute arising out of or relating to it will be governed by the laws of the Hong Kong Special Administrative Region of the People’s Republic of China, without regard to conflict of law principles, and the UN Convention on Contracts for the International Sale of Goods does not apply to this Agreement.\nb.\tExclusive jurisdiction and venue for any dispute arising out of or relating to this Agreement will be a court of competent jurisdiction in the Hong Kong Special Administrative Region of the People’s Republic of China, and Tencent and Licensee consent to the exclusive jurisdiction of such court with respect to any such dispute.\n \nEXHIBIT A\nACCEPTABLE USE POLICY\n\nTencent reserves the right to update this Acceptable Use Policy from time to time.\nLast modified: November 5, 2024\n\nTencent endeavors to promote safe and fair use of its tools and features, including Tencent Hunyuan. You agree not to use Tencent Hunyuan or Model Derivatives:\n1.\tOutside the Territory;\n2.\tIn any way that violates any applicable national, federal, state, local, international or any other law or regulation;\n3.\tTo harm Yourself or others;\n4.\tTo repurpose or distribute output from Tencent Hunyuan or any Model Derivatives to harm Yourself or others; \n5.\tTo override or circumvent the safety guardrails and safeguards We have put in place;\n6.\tFor the purpose of exploiting, harming or attempting to exploit or harm minors in any way;\n7.\tTo generate or disseminate verifiably false information and/or content with the purpose of harming others or influencing elections;\n8.\tTo generate or facilitate false online engagement, including fake reviews and other means of fake online engagement;\n9.\tTo intentionally defame, disparage or otherwise harass others;\n10.\tTo generate and/or disseminate malware (including ransomware) or any other content to be used for the purpose of harming electronic systems;\n11.\tTo generate or disseminate personal identifiable information with the purpose of harming others;\n12.\tTo generate or disseminate information (including images, code, posts, articles), and place the information in any public context (including –through the use of bot generated tweets), without expressly and conspicuously identifying that the information and/or content is machine generated;\n13.\tTo impersonate another individual without consent, authorization, or legal right;\n14.\tTo make high-stakes automated decisions in domains that affect an individual’s safety, rights or wellbeing (e.g., law enforcement, migration, medicine/health, management of critical infrastructure, safety components of products, essential services, credit, employment, housing, education, social scoring, or insurance);\n15.\tIn a manner that violates or disrespects the social ethics and moral standards of other countries or regions;\n16.\tTo perform, facilitate, threaten, incite, plan, promote or encourage violent extremism or terrorism;\n17.\tFor any use intended to discriminate against or harm individuals or groups based on protected characteristics or categories, online or offline social behavior or known or predicted personal or personality characteristics;\n18.\tTo intentionally exploit any of the vulnerabilities of a specific group of persons based on their age, social, physical or mental characteristics, in order to materially distort the behavior of a person pertaining to that group in a manner that causes or is likely to cause that person or another person physical or psychological harm;\n19.\tFor military purposes;\n20.\tTo engage in the unauthorized or unlicensed practice of any profession including, but not limited to, financial, legal, medical/health, or other professional practices.\n"
        },
        {
          "name": "Notice",
          "type": "blob",
          "size": 18.5302734375,
          "content": "Usage and Legal Notices:\n\nTencent is pleased to support the open source community by making Tencent HunyuanVideo available.\n\nCopyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved. The below software and/or models in this distribution may have been modified by THL A29 Limited (\"Tencent Modifications\"). All Tencent Modifications are Copyright (C) THL A29 Limited.\n\nTencent HunyuanVideo is licensed under the TENCENT HUNYUAN COMMUNITY LICENSE AGREEMENT except for the third-party components listed below. Tencent HunyuanVideo does not impose any additional limitations beyond what is outlined in the repsective licenses of these third-party components. Users must comply with all terms and conditions of original licenses of these third-party components and must ensure that the usage of the third party components adheres to all relevant laws and regulations. \n\nFor avoidance of doubts, Tencent HunyuanVideo means the large language models and their software and algorithms, including trained model weights, parameters (including optimizer states), machine-learning model code, inference-enabling code, training-enabling code, fine-tuning enabling code and other elements of the foregoing may be made publicly available by Tencent in accordance with TENCENT HUNYUAN COMMUNITY LICENSE AGREEMENT.\n\n\nOther dependencies and licenses:\n\n\nOpen Source Model Licensed under the Apache License Version 2.0:\nThe below software in this distribution may have been modified by THL A29 Limited (\"Tencent Modifications\"). All Tencent Modifications are Copyright (C) 2024 THL A29 Limited.\n--------------------------------------------------------------------\n1. diffusers\nCopyright (c) diffusers original author and authors\nPlease note this software has been modified by Tencent in this distribution.\n\n2. transformers\nCopyright (c) transformers original author and authors\n\n3. safetensors\nCopyright (c) safetensors original author and authors\n\n4. flux\nCopyright (c) flux original author and authors\n\n\nTerms of the Apache License Version 2.0:\n--------------------------------------------------------------------\nApache License \n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/ \n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and \n\nYou must cause any modified files to carry prominent notices stating that You changed the files; and \n\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and \n\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. \n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. \n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\n\n\nOpen Source Software Licensed under the BSD 2-Clause License:\n--------------------------------------------------------------------\n1. imageio\nCopyright (c) 2014-2022, imageio developers\nAll rights reserved.\n\n\nTerms of the BSD 2-Clause License:\n--------------------------------------------------------------------\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\nOpen Source Software Licensed under the BSD 3-Clause License:\n--------------------------------------------------------------------\n1. torchvision\nCopyright (c) Soumith Chintala 2016, \nAll rights reserved.\n\n2. flash-attn\nCopyright (c) 2022, the respective contributors, as shown by the AUTHORS file.\nAll rights reserved.\n\n\nTerms of the BSD 3-Clause License:\n--------------------------------------------------------------------\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\nOpen Source Software Licensed under the BSD 3-Clause License and Other Licenses of the Third-Party Components therein:\n--------------------------------------------------------------------\n1. torch\nCopyright (c) 2016-     Facebook, Inc            (Adam Paszke)\nCopyright (c) 2014-     Facebook, Inc            (Soumith Chintala)\nCopyright (c) 2011-2014 Idiap Research Institute (Ronan Collobert)\nCopyright (c) 2012-2014 Deepmind Technologies    (Koray Kavukcuoglu)\nCopyright (c) 2011-2012 NEC Laboratories America (Koray Kavukcuoglu)\nCopyright (c) 2011-2013 NYU                      (Clement Farabet)\nCopyright (c) 2006-2010 NEC Laboratories America (Ronan Collobert, Leon Bottou, Iain Melvin, Jason Weston)\nCopyright (c) 2006      Idiap Research Institute (Samy Bengio)\nCopyright (c) 2001-2004 Idiap Research Institute (Ronan Collobert, Samy Bengio, Johnny Mariethoz)\n\n\nA copy of the BSD 3-Clause is included in this file.\n\nFor the license of other third party components, please refer to the following URL:\nhttps://github.com/pytorch/pytorch/tree/v2.1.1/third_party\n\n\nOpen Source Software Licensed under the BSD 3-Clause License and Other Licenses of the Third-Party Components therein:\n--------------------------------------------------------------------\n1. pandas\nCopyright (c) 2008-2011, AQR Capital Management, LLC, Lambda Foundry, Inc. and PyData Development Team\nAll rights reserved.\n\nCopyright (c) 2011-2023, Open source contributors.\n\n\nA copy of the BSD 3-Clause is included in this file.\n\nFor the license of other third party components, please refer to the following URL:\nhttps://github.com/pandas-dev/pandas/tree/v2.0.3/LICENSES\n\n\nOpen Source Software Licensed under the BSD 3-Clause License and Other Licenses of the Third-Party Components therein:\n--------------------------------------------------------------------\n1. numpy\nCopyright (c) 2005-2022, NumPy Developers.\nAll rights reserved.\n\n\nA copy of the BSD 3-Clause is included in this file.\n\nFor the license of other third party components, please refer to the following URL:\nhttps://github.com/numpy/numpy/blob/v1.24.4/LICENSES_bundled.txt\n\n\nOpen Source Software Licensed under the MIT License:\n--------------------------------------------------------------------\n1. einops\nCopyright (c) 2018 Alex Rogozhnikov\n\n2. loguru\nCopyright (c) 2017\n\n\nTerms of the MIT License:\n--------------------------------------------------------------------\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nOpen Source Software Licensed under the MIT License and Other Licenses of the Third-Party Components therein:\n--------------------------------------------------------------------\n1. tqdm\nCopyright (c) 2013 noamraph\n\n\nA copy of the MIT is included in this file.\n\nFor the license of other third party components, please refer to the following URL:\nhttps://github.com/tqdm/tqdm/blob/v4.66.2/LICENCE\n\n\n\nOpen Source Model Licensed under the MIT License:\n--------------------------------------------------------------------\n1. clip-large\nCopyright (c) 2021 OpenAI\n\n\nA copy of the MIT is included in this file.\n\n\n--------------------------------------------------------------------\nWe may also use other third-party components:\n\n1. llava-llama3\n\nCopyright (c) llava-llama3 original author and authors\n\nURL: https://huggingface.co/xtuner/llava-llama-3-8b-v1_1-transformers#model"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.5908203125,
          "content": "<!-- ## **HunyuanVideo** -->\n\n[中文阅读](./README_zh.md)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/logo.png\"  height=100>\n</p>\n\n# HunyuanVideo: A Systematic Framework For Large Video Generation Model\n\n<div align=\"center\">\n  <a href=\"https://github.com/Tencent/HunyuanVideo\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo Code&message=Github&color=blue\"></a> &ensp;\n  <a href=\"https://aivideo.hunyuan.tencent.com\"><img src=\"https://img.shields.io/static/v1?label=Project%20Page&message=Web&color=green\"></a> &ensp;\n  <a href=\"https://video.hunyuan.tencent.com\"><img src=\"https://img.shields.io/static/v1?label=Playground&message=Web&color=green\"></a>\n</div>\n<div align=\"center\">\n  <a href=\"https://arxiv.org/abs/2412.03603\"><img src=\"https://img.shields.io/static/v1?label=Tech Report&message=Arxiv&color=red\"></a> &ensp;\n  <a href=\"https://aivideo.hunyuan.tencent.com/hunyuanvideo.pdf\"><img src=\"https://img.shields.io/static/v1?label=Tech Report&message=High-Quality Version (~350M)&color=red\"></a>\n</div>\n<div align=\"center\">\n  <a href=\"https://huggingface.co/tencent/HunyuanVideo\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo&message=HuggingFace&color=yellow\"></a> &ensp;\n  <a href=\"https://huggingface.co/docs/diffusers/main/api/pipelines/hunyuan_video\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo&message=Diffusers&color=yellow\"></a> &ensp;\n  <a href=\"https://huggingface.co/tencent/HunyuanVideo-PromptRewrite\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo-PromptRewrite&message=HuggingFace&color=yellow\"></a>\n\n\n [![Replicate](https://replicate.com/zsxkib/hunyuan-video/badge)](https://replicate.com/zsxkib/hunyuan-video)\n</div>\n\n<p align=\"center\">\n    👋 Join our <a href=\"assets/WECHAT.md\" target=\"_blank\">WeChat</a> and <a href=\"https://discord.gg/V8V6JK4f\" target=\"_blank\">Discord</a> \n</p>\n<p align=\"center\">\n\n-----\n\nThis repo contains PyTorch model definitions, pre-trained weights and inference/sampling code for our paper exploring HunyuanVideo. You can find more visualizations on our [project page](https://aivideo.hunyuan.tencent.com).\n\n> [**HunyuanVideo: A Systematic Framework For Large Video Generation Model**](https://arxiv.org/abs/2412.03603) <be>\n\n\n\n## 🔥🔥🔥 News!!\n\n* Dec 18, 2024: 🏃‍♂️ We release the [FP8 model weights](https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8.pt) of HunyuanVideo to save more GPU memory.\n* Dec 17, 2024: 🤗 HunyuanVideo has been integrated into [Diffusers](https://huggingface.co/docs/diffusers/main/api/pipelines/hunyuan_video).\n* Dec 7, 2024: 🚀 We release the parallel inference code for HunyuanVideo powered by [xDiT](https://github.com/xdit-project/xDiT).\n* Dec 3, 2024: 👋 We release the inference code and model weights of HunyuanVideo. [Download](https://github.com/Tencent/HunyuanVideo/blob/main/ckpts/README.md).\n\n\n\n## 🎥 Demo\n\n<div align=\"center\">\n  <video src=\"https://github.com/user-attachments/assets/22440764-0d7e-438e-a44d-d0dad1006d3d\" width=\"70%\" poster=\"./assets/video_poster.png\"> </video>\n</div>\n\n\n## 🧩 Community Contributions\n\nIf you develop/use HunyuanVideo in your projects, welcome to let us know.\n\n- ComfyUI-Kijai (FP8 Inference, V2V and IP2V Generation): [ComfyUI-HunyuanVideoWrapper](https://github.com/kijai/ComfyUI-HunyuanVideoWrapper) by [Kijai](https://github.com/kijai)\n- ComfyUI-Native (Native Support): [ComfyUI-HunyuanVideo](https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_video/) by [ComfyUI Official](https://github.com/comfyanonymous/ComfyUI)\n\n- FastVideo (Consistency Distilled Model): [FastVideo](https://github.com/hao-ai-lab/FastVideo) by [Hao AI Lab](https://hao-ai-lab.github.io/)\n- HunyuanVideo-gguf (GGUF Version and Quantization): [HunyuanVideo-gguf](https://huggingface.co/city96/HunyuanVideo-gguf) by [city96](https://huggingface.co/city96)\n- Enhance-A-Video (Better Generated Video for Free): [Enhance-A-Video](https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video) by [NUS-HPC-AI-Lab](https://ai.comp.nus.edu.sg/)\n- TeaCache (Cache-based Accelerate): [TeaCache](https://github.com/LiewFeng/TeaCache) by [Feng Liu](https://github.com/LiewFeng)\n\n\n\n\n## 📑 Open-source Plan\n\n- HunyuanVideo (Text-to-Video Model)\n  - [x] Inference \n  - [x] Checkpoints\n  - [x] Multi-gpus Sequence Parallel inference (Faster inference speed on more gpus)\n  - [x] Web Demo (Gradio)\n  - [x] Diffusers \n  - [x] FP8 Quantified weight\n  - [ ] Penguin Video Benchmark\n  - [ ] ComfyUI\n  - [ ] Multi-gpus PipeFusion inference (Low memory requirements)\n- HunyuanVideo (Image-to-Video Model)\n  - [ ] Inference \n  - [ ] Checkpoints \n\n\n\n## Contents\n- [HunyuanVideo: A Systematic Framework For Large Video Generation Model](#hunyuanvideo-a-systematic-framework-for-large-video-generation-model)\n  - [🎥 Demo](#-demo)\n  - [🔥🔥🔥 News!!](#-news)\n  - [🧩 Community Contributions](#-community-contributions)\n  - [📑 Open-source Plan](#-open-source-plan)\n  - [Contents](#contents)\n  - [**Abstract**](#abstract)\n  - [**HunyuanVideo Overall Architecture**](#hunyuanvideo-overall-architecture)\n  - [🎉 **HunyuanVideo Key Features**](#-hunyuanvideo-key-features)\n    - [**Unified Image and Video Generative Architecture**](#unified-image-and-video-generative-architecture)\n    - [**MLLM Text Encoder**](#mllm-text-encoder)\n    - [**3D VAE**](#3d-vae)\n    - [**Prompt Rewrite**](#prompt-rewrite)\n  - [📈 Comparisons](#-comparisons)\n  - [📜 Requirements](#-requirements)\n  - [🛠️ Dependencies and Installation](#️-dependencies-and-installation)\n    - [Installation Guide for Linux](#installation-guide-for-linux)\n  - [🧱 Download Pretrained Models](#-download-pretrained-models)\n  - [🔑 Single-gpu Inference](#-single-gpu-inference)\n    - [Using Command Line](#using-command-line)\n    - [Run a Gradio Server](#run-a-gradio-server)\n    - [More Configurations](#more-configurations)\n  - [🚀 Parallel Inference on Multiple GPUs by xDiT](#-parallel-inference-on-multiple-gpus-by-xdit)\n    - [Using Command Line](#using-command-line-1)\n  - [🚀  FP8 Inference](#--fp8-inference)\n    - [Using Command Line](#using-command-line-2)\n  - [🔗 BibTeX](#-bibtex)\n  - [Acknowledgements](#acknowledgements)\n  - [Star History](#star-history)\n---\n\n## **Abstract**\nWe present HunyuanVideo, a novel open-source video foundation model that exhibits performance in video generation that is comparable to, if not superior to, leading closed-source models. In order to train HunyuanVideo model, we adopt several key technologies for model learning, including data curation, image-video joint model training, and an efficient infrastructure designed to facilitate large-scale model training and inference. Additionally, through an effective strategy for scaling model architecture and dataset, we successfully trained a video generative model with over 13 billion parameters, making it the largest among all open-source models. \n\nWe conducted extensive experiments and implemented a series of targeted designs to ensure high visual quality, motion diversity, text-video alignment, and generation stability. According to professional human evaluation results, HunyuanVideo outperforms previous state-of-the-art models, including Runway Gen-3, Luma 1.6, and 3 top-performing Chinese video generative models. By releasing the code and weights of the foundation model and its applications, we aim to bridge the gap between closed-source and open-source video foundation models. This initiative will empower everyone in the community to experiment with their ideas, fostering a more dynamic and vibrant video generation ecosystem. \n\n\n\n## **HunyuanVideo Overall Architecture**\n\nHunyuanVideo is trained on a spatial-temporally\ncompressed latent space, which is compressed through a Causal 3D VAE. Text prompts are encoded\nusing a large language model, and used as the conditions. Taking Gaussian noise and the conditions as\ninput, our generative model produces a output latent, which is then decoded to images or videos through\nthe 3D VAE decoder.\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/overall.png\"  height=300>\n</p>\n\n\n## 🎉 **HunyuanVideo Key Features**\n\n### **Unified Image and Video Generative Architecture**\nHunyuanVideo introduces the Transformer design and employs a Full Attention mechanism for unified image and video generation. \nSpecifically, we use a \"Dual-stream to Single-stream\" hybrid model design for video generation. In the dual-stream phase, video and text\ntokens are processed independently through multiple Transformer blocks, enabling each modality to learn its own appropriate modulation mechanisms without interference. In the single-stream phase, we concatenate the video and text\ntokens and feed them into subsequent Transformer blocks for effective multimodal information fusion.\nThis design captures complex interactions between visual and semantic information, enhancing\noverall model performance.\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/backbone.png\"  height=350>\n</p>\n\n### **MLLM Text Encoder**\nSome previous text-to-video models typically use pre-trained CLIP and T5-XXL as text encoders where CLIP uses Transformer Encoder and T5 uses an Encoder-Decoder structure. In contrast, we utilize a pre-trained Multimodal Large Language Model (MLLM) with a Decoder-Only structure as our text encoder, which has the following advantages: (i) Compared with T5, MLLM after visual instruction finetuning has better image-text alignment in the feature space, which alleviates the difficulty of the instruction following in diffusion models; (ii)\nCompared with CLIP, MLLM has demonstrated superior ability in image detail description\nand complex reasoning; (iii) MLLM can play as a zero-shot learner by following system instructions prepended to user prompts, helping text features pay more attention to key information. In addition, MLLM is based on causal attention while T5-XXL utilizes bidirectional attention that produces better text guidance for diffusion models. Therefore, we introduce an extra bidirectional token refiner to enhance text features.\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/text_encoder.png\"  height=275>\n</p>\n\n### **3D VAE**\nHunyuanVideo trains a 3D VAE with CausalConv3D (Partially referred to [Open-Sora-Plan](https://github.com/PKU-YuanGroup/Open-Sora-Plan) ) to compress pixel-space videos and images into a compact latent space. We set the compression ratios of video length, space, and channel to 4, 8, and 16 respectively. This can significantly reduce the number of tokens for the subsequent diffusion transformer model, allowing us to train videos at the original resolution and frame rate.\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/3dvae.png\"  height=150>\n</p>\n\n### **Prompt Rewrite**\nTo address the variability in linguistic style and length of user-provided prompts, we fine-tune the [Hunyuan-Large model](https://github.com/Tencent/Tencent-Hunyuan-Large) as our prompt rewrite model to adapt the original user prompt to model-preferred prompt.\n\nWe provide two rewrite modes: Normal mode and Master mode, which can be called using different prompts. The prompts are shown [here](hyvideo/prompt_rewrite.py). The Normal mode is designed to enhance the video generation model's comprehension of user intent, facilitating a more accurate interpretation of the instructions provided. The Master mode enhances the description of aspects such as composition, lighting, and camera movement, which leans towards generating videos with a higher visual quality. However, this emphasis may occasionally result in the loss of some semantic details. \n\nThe Prompt Rewrite Model can be directly deployed and inferred using the [Hunyuan-Large original code](https://github.com/Tencent/Tencent-Hunyuan-Large). We release the weights of the Prompt Rewrite Model [here](https://huggingface.co/Tencent/HunyuanVideo-PromptRewrite).\n\n\n\n## 📈 Comparisons\n\nTo evaluate the performance of HunyuanVideo, we selected five strong baselines from closed-source video generation models. In total, we utilized 1,533 text prompts, generating an equal number of video samples with HunyuanVideo in a single run. For a fair comparison, we conducted inference only once, avoiding any cherry-picking of results. When comparing with the baseline methods, we maintained the default settings for all selected models, ensuring consistent video resolution. Videos were assessed based on three criteria: Text Alignment, Motion Quality, and Visual Quality. More than 60 professional evaluators performed the evaluation. Notably, HunyuanVideo demonstrated the best overall performance, particularly excelling in motion quality. Please note that the evaluation is based on Hunyuan Video's high-quality version. This is different from the currently released fast version.\n\n<p align=\"center\">\n<table> \n<thead> \n<tr> \n    <th rowspan=\"2\">Model</th> <th rowspan=\"2\">Open Source</th> <th>Duration</th> <th>Text Alignment</th> <th>Motion Quality</th> <th rowspan=\"2\">Visual Quality</th> <th rowspan=\"2\">Overall</th>  <th rowspan=\"2\">Ranking</th>\n</tr> \n</thead> \n<tbody> \n<tr> \n    <td>HunyuanVideo (Ours)</td> <td> ✔ </td> <td>5s</td> <td>61.8%</td> <td>66.5%</td> <td>95.7%</td> <td>41.3%</td> <td>1</td>\n</tr> \n<tr> \n    <td>CNTopA (API)</td> <td> &#10008 </td> <td>5s</td> <td>62.6%</td> <td>61.7%</td> <td>95.6%</td> <td>37.7%</td> <td>2</td>\n</tr> \n<tr> \n    <td>CNTopB (Web)</td> <td> &#10008</td> <td>5s</td> <td>60.1%</td> <td>62.9%</td> <td>97.7%</td> <td>37.5%</td> <td>3</td>\n</tr> \n<tr> \n    <td>GEN-3 alpha (Web)</td> <td>&#10008</td> <td>6s</td> <td>47.7%</td> <td>54.7%</td> <td>97.5%</td> <td>27.4%</td> <td>4</td> \n</tr> \n<tr> \n    <td>Luma1.6 (API)</td><td>&#10008</td> <td>5s</td> <td>57.6%</td> <td>44.2%</td> <td>94.1%</td> <td>24.8%</td> <td>5</td>\n</tr>\n<tr> \n    <td>CNTopC (Web)</td> <td>&#10008</td> <td>5s</td> <td>48.4%</td> <td>47.2%</td> <td>96.3%</td> <td>24.6%</td> <td>6</td>\n</tr> \n</tbody>\n</table>\n</p>\n\n\n## 📜 Requirements\n\nThe following table shows the requirements for running HunyuanVideo model (batch size = 1) to generate videos:\n\n|     Model    |  Setting<br/>(height/width/frame) | GPU Peak Memory  |\n|:------------:|:--------------------------------:|:----------------:|\n| HunyuanVideo   |        720px1280px129f          |       60GB        |\n| HunyuanVideo   |        544px960px129f           |       45GB        |\n\n* An NVIDIA GPU with CUDA support is required. \n  * The model is tested on a single 80G GPU.\n  * **Minimum**: The minimum GPU memory required is 60GB for 720px1280px129f and 45G for 544px960px129f.\n  * **Recommended**: We recommend using a GPU with 80GB of memory for better generation quality.\n* Tested operating system: Linux\n\n\n\n## 🛠️ Dependencies and Installation\n\nBegin by cloning the repository:\n```shell\ngit clone https://github.com/tencent/HunyuanVideo\ncd HunyuanVideo\n```\n\n### Installation Guide for Linux\n\nWe recommend CUDA versions 12.4 or 11.8 for the manual installation.\n\nConda's installation instructions are available [here](https://docs.anaconda.com/free/miniconda/index.html).\n\n```shell\n# 1. Create conda environment\nconda create -n HunyuanVideo python==3.10.9\n\n# 2. Activate the environment\nconda activate HunyuanVideo\n\n# 3. Install PyTorch and other dependencies using conda\n# For CUDA 11.8\nconda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=11.8 -c pytorch -c nvidia\n# For CUDA 12.4\nconda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=12.4 -c pytorch -c nvidia\n\n# 4. Install pip dependencies\npython -m pip install -r requirements.txt\n\n# 5. Install flash attention v2 for acceleration (requires CUDA 11.8 or above)\npython -m pip install ninja\npython -m pip install git+https://github.com/Dao-AILab/flash-attention.git@v2.6.3\n\n# 6. Install xDiT for parallel inference (It is recommended to use torch 2.4.0 and flash-attn 2.6.3)\npython -m pip install xfuser==0.4.0\n```\n\nIn case of running into float point exception(core dump) on the specific GPU type, you may try the following solutions:\n\n```shell\n# Option 1: Making sure you have installed CUDA 12.4, CUBLAS>=12.4.5.8, and CUDNN>=9.00 (or simply using our CUDA 12 docker image).\npip install nvidia-cublas-cu12==12.4.5.8\nexport LD_LIBRARY_PATH=/opt/conda/lib/python3.8/site-packages/nvidia/cublas/lib/\n\n# Option 2: Forcing to explictly use the CUDA 11.8 compiled version of Pytorch and all the other packages\npip uninstall -r requirements.txt  # uninstall all packages\npip uninstall -y xfuser\npip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu118\npip install -r requirements.txt\npip install ninja\npip install git+https://github.com/Dao-AILab/flash-attention.git@v2.6.3\npip install xfuser==0.4.0\n```\n\nAdditionally, HunyuanVideo also provides a pre-built Docker image. Use the following command to pull and run the docker image.\n\n```shell\n# For CUDA 12.4 (updated to avoid float point exception)\ndocker pull hunyuanvideo/hunyuanvideo:cuda_12\ndocker run -itd --gpus all --init --net=host --uts=host --ipc=host --name hunyuanvideo --security-opt=seccomp=unconfined --ulimit=stack=67108864 --ulimit=memlock=-1 --privileged hunyuanvideo/hunyuanvideo:cuda_12\n\n# For CUDA 11.8\ndocker pull hunyuanvideo/hunyuanvideo:cuda_11\ndocker run -itd --gpus all --init --net=host --uts=host --ipc=host --name hunyuanvideo --security-opt=seccomp=unconfined --ulimit=stack=67108864 --ulimit=memlock=-1 --privileged hunyuanvideo/hunyuanvideo:cuda_11\n```\n\n\n## 🧱 Download Pretrained Models\n\nThe details of download pretrained models are shown [here](ckpts/README.md).\n\n\n\n## 🔑 Single-gpu Inference\n\nWe list the height/width/frame settings we support in the following table.\n\n|      Resolution       |           h/w=9:16           |    h/w=16:9     |     h/w=4:3     |     h/w=3:4     |     h/w=1:1     |\n|:---------------------:|:----------------------------:|:---------------:|:---------------:|:---------------:|:---------------:|\n|         540p          |        544px960px129f        |  960px544px129f | 624px832px129f  |  832px624px129f |  720px720px129f |\n| 720p (recommended)    |       720px1280px129f        | 1280px720px129f | 1104px832px129f | 832px1104px129f | 960px960px129f  |\n\n### Using Command Line\n\n```bash\ncd HunyuanVideo\n\npython3 sample_video.py \\\n    --video-size 720 1280 \\\n    --video-length 129 \\\n    --infer-steps 50 \\\n    --prompt \"A cat walks on the grass, realistic style.\" \\\n    --flow-reverse \\\n    --use-cpu-offload \\\n    --save-path ./results\n```\n\n### Run a Gradio Server\n```bash\npython3 gradio_server.py --flow-reverse\n\n# set SERVER_NAME and SERVER_PORT manually\n# SERVER_NAME=0.0.0.0 SERVER_PORT=8081 python3 gradio_server.py --flow-reverse\n```\n\n### More Configurations\n\nWe list some more useful configurations for easy usage:\n\n|        Argument        |  Default  |                Description                |\n|:----------------------:|:---------:|:-----------------------------------------:|\n|       `--prompt`       |   None    |   The text prompt for video generation    |\n|     `--video-size`     | 720 1280  |      The size of the generated video      |\n|    `--video-length`    |    129    |     The length of the generated video     |\n|    `--infer-steps`     |    50     |     The number of steps for sampling      |\n| `--embedded-cfg-scale` |    6.0    |    Embedded  Classifier free guidance scale       |\n|     `--flow-shift`     |    7.0    | Shift factor for flow matching schedulers |\n|     `--flow-reverse`   |    False  | If reverse, learning/sampling from t=1 -> t=0 |\n|        `--seed`        |     None  |   The random seed for generating video, if None, we init a random seed    |\n|  `--use-cpu-offload`   |   False   |    Use CPU offload for the model load to save more memory, necessary for high-res video generation    |\n|     `--save-path`      | ./results |     Path to save the generated video      |\n\n\n\n## 🚀 Parallel Inference on Multiple GPUs by xDiT\n\n[xDiT](https://github.com/xdit-project/xDiT) is a Scalable Inference Engine for Diffusion Transformers (DiTs) on multi-GPU Clusters.\nIt has successfully provided low-latency parallel inference solutions for a variety of DiTs models, including mochi-1, CogVideoX, Flux.1, SD3, etc. This repo adopted the [Unified Sequence Parallelism (USP)](https://arxiv.org/abs/2405.07719) APIs for parallel inference of the HunyuanVideo model.\n\n### Using Command Line\n\nFor example, to generate a video with 8 GPUs, you can use the following command:\n\n```bash\ncd HunyuanVideo\n\ntorchrun --nproc_per_node=8 sample_video.py \\\n    --video-size 1280 720 \\\n    --video-length 129 \\\n    --infer-steps 50 \\\n    --prompt \"A cat walks on the grass, realistic style.\" \\\n    --flow-reverse \\\n    --seed 42 \\\n    --ulysses-degree 8 \\\n    --ring-degree 1 \\\n    --save-path ./results\n```\n\nYou can change the `--ulysses-degree` and `--ring-degree` to control the parallel configurations for the best performance. The valid parallel configurations are shown in the following table.\n\n<details>\n<summary>Supported Parallel Configurations (Click to expand)</summary>\n\n|     --video-size     | --video-length | --ulysses-degree x --ring-degree | --nproc_per_node |\n|----------------------|----------------|----------------------------------|------------------|\n| 1280 720 or 720 1280 | 129            | 8x1,4x2,2x4,1x8                  | 8                |\n| 1280 720 or 720 1280 | 129            | 1x5                              | 5                |\n| 1280 720 or 720 1280 | 129            | 4x1,2x2,1x4                      | 4                |\n| 1280 720 or 720 1280 | 129            | 3x1,1x3                          | 3                |\n| 1280 720 or 720 1280 | 129            | 2x1,1x2                          | 2                |\n| 1104 832 or 832 1104 | 129            | 4x1,2x2,1x4                      | 4                |\n| 1104 832 or 832 1104 | 129            | 3x1,1x3                          | 3                |\n| 1104 832 or 832 1104 | 129            | 2x1,1x2                          | 2                |\n| 960 960              | 129            | 6x1,3x2,2x3,1x6                  | 6                |\n| 960 960              | 129            | 4x1,2x2,1x4                      | 4                |\n| 960 960              | 129            | 3x1,1x3                          | 3                |\n| 960 960              | 129            | 1x2,2x1                          | 2                |\n| 960 544 or 544 960   | 129            | 6x1,3x2,2x3,1x6                  | 6                |\n| 960 544 or 544 960   | 129            | 4x1,2x2,1x4                      | 4                |\n| 960 544 or 544 960   | 129            | 3x1,1x3                          | 3                |\n| 960 544 or 544 960   | 129            | 1x2,2x1                          | 2                |\n| 832 624 or 624 832   | 129            | 4x1,2x2,1x4                      | 4                |\n| 624 832 or 624 832   | 129            | 3x1,1x3                          | 3                |\n| 832 624 or 624 832   | 129            | 2x1,1x2                          | 2                |\n| 720 720              | 129            | 1x5                              | 5                |\n| 720 720              | 129            | 3x1,1x3                          | 3                |\n\n</details>\n\n\n<p align=\"center\">\n<table align=\"center\">\n<thead>\n<tr>\n    <th colspan=\"4\">Latency (Sec) for 1280x720 (129 frames 50 steps) on 8xGPU</th>\n</tr>\n<tr>\n    <th>1</th>\n    <th>2</th>\n    <th>4</th>\n    <th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <th>1904.08</th>\n    <th>934.09 (2.04x)</th>\n    <th>514.08 (3.70x)</th>\n    <th>337.58 (5.64x)</th>\n</tr>\n\n</tbody>\n</table>\n</p>\n\n\n\n## 🚀  FP8 Inference\n\nUsing HunyuanVideo with FP8 quantized weights, which saves about 10GB of GPU memory. You can download the [weights](https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8.pt) and [weight scales](https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8_map.pt) from Huggingface.\n\n### Using Command Line\n\nHere, you must explicitly specify the FP8 weight path. For example, to generate a video with fp8 weights, you can use the following command:\n\n```bash\ncd HunyuanVideo\n\nDIT_CKPT_PATH={PATH_TO_FP8_WEIGHTS}/{WEIGHT_NAME}_fp8.pt\n\npython3 sample_video.py \\\n    --dit-weight ${DIT_CKPT_PATH} \\\n    --video-size 1280 720 \\\n    --video-length 129 \\\n    --infer-steps 50 \\\n    --prompt \"A cat walks on the grass, realistic style.\" \\\n    --seed 42 \\\n    --embedded-cfg-scale 6.0 \\\n    --flow-shift 7.0 \\\n    --flow-reverse \\\n    --use-cpu-offload \\\n    --use-fp8 \\\n    --save-path ./results\n```\n\n\n\n## 🔗 BibTeX\n\nIf you find [HunyuanVideo](https://arxiv.org/abs/2412.03603) useful for your research and applications, please cite using this BibTeX:\n\n```BibTeX\n@misc{kong2024hunyuanvideo,\n      title={HunyuanVideo: A Systematic Framework For Large Video Generative Models}, \n      author={Weijie Kong, Qi Tian, Zijian Zhang, Rox Min, Zuozhuo Dai, Jin Zhou, Jiangfeng Xiong, Xin Li, Bo Wu, Jianwei Zhang, Kathrina Wu, Qin Lin, Aladdin Wang, Andong Wang, Changlin Li, Duojun Huang, Fang Yang, Hao Tan, Hongmei Wang, Jacob Song, Jiawang Bai, Jianbing Wu, Jinbao Xue, Joey Wang, Junkun Yuan, Kai Wang, Mengyang Liu, Pengyu Li, Shuai Li, Weiyan Wang, Wenqing Yu, Xinchi Deng, Yang Li, Yanxin Long, Yi Chen, Yutao Cui, Yuanbo Peng, Zhentao Yu, Zhiyu He, Zhiyong Xu, Zixiang Zhou, Zunnan Xu, Yangyu Tao, Qinglin Lu, Songtao Liu, Daquan Zhou, Hongfa Wang, Yong Yang, Di Wang, Yuhong Liu, and Jie Jiang, along with Caesar Zhong},\n      year={2024},\n      archivePrefix={arXiv preprint arXiv:2412.03603},\n      primaryClass={cs.CV},\n      url={https://arxiv.org/abs/2412.03603}, \n}\n```\n\n\n\n## Acknowledgements\n\nWe would like to thank the contributors to the [SD3](https://huggingface.co/stabilityai/stable-diffusion-3-medium), [FLUX](https://github.com/black-forest-labs/flux), [Llama](https://github.com/meta-llama/llama), [LLaVA](https://github.com/haotian-liu/LLaVA), [Xtuner](https://github.com/InternLM/xtuner), [diffusers](https://github.com/huggingface/diffusers) and [HuggingFace](https://huggingface.co) repositories, for their open research and exploration.\nAdditionally, we also thank the Tencent Hunyuan Multimodal team for their help with the text encoder. \n\n\n\n## Star History\n\n<a href=\"https://star-history.com/#Tencent/HunyuanVideo&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&type=Date\" />\n </picture>\n</a>\n"
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 24.443359375,
          "content": "<!-- ## **HunyuanVideo** -->\n\n[English](./README.md)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/logo.png\"  height=100>\n</p>\n\n# HunyuanVideo: A Systematic Framework For Large Video Generation Model\n\n<div align=\"center\">\n  <a href=\"https://github.com/Tencent/HunyuanVideo\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo Code&message=Github&color=blue\"></a> &ensp;\n  <a href=\"https://aivideo.hunyuan.tencent.com\"><img src=\"https://img.shields.io/static/v1?label=Project%20Page&message=Web&color=green\"></a> &ensp;\n  <a href=\"https://video.hunyuan.tencent.com\"><img src=\"https://img.shields.io/static/v1?label=Playground&message=Web&color=green\"></a>\n</div>\n<div align=\"center\">\n  <a href=\"https://arxiv.org/abs/2412.03603\"><img src=\"https://img.shields.io/static/v1?label=Tech Report&message=Arxiv&color=red\"></a> &ensp;\n  <a href=\"https://aivideo.hunyuan.tencent.com/hunyuanvideo.pdf\"><img src=\"https://img.shields.io/static/v1?label=Tech Report&message=High-Quality Version (~350M)&color=red\"></a>\n</div>\n<div align=\"center\">\n  <a href=\"https://huggingface.co/tencent/HunyuanVideo\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo&message=HuggingFace&color=yellow\"></a> &ensp;\n  <a href=\"https://huggingface.co/docs/diffusers/main/api/pipelines/hunyuan_video\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo&message=Diffusers&color=yellow\"></a> &ensp;\n  <a href=\"https://huggingface.co/tencent/HunyuanVideo-PromptRewrite\"><img src=\"https://img.shields.io/static/v1?label=HunyuanVideo-PromptRewrite&message=HuggingFace&color=yellow\"></a>\n\n\n [![Replicate](https://replicate.com/zsxkib/hunyuan-video/badge)](https://replicate.com/zsxkib/hunyuan-video)\n</div>\n\n\n<p align=\"center\">\n    👋 加入我们的 <a href=\"assets/WECHAT.md\" target=\"_blank\">WeChat</a> 和 <a href=\"https://discord.gg/GpARqvrh\" target=\"_blank\">Discord</a> \n</p>\n\n\n\n-----\n\n本仓库包含了 HunyuanVideo 项目的 PyTorch 模型定义、预训练权重和推理/采样代码。参考我们的项目页面 [project page](https://aivideo.hunyuan.tencent.com) 查看更多内容。\n\n> [**HunyuanVideo: A Systematic Framework For Large Video Generation Model**](https://arxiv.org/abs/2412.03603) <br>\n\n\n\n## 🔥🔥🔥 更新!!\n\n* 2024年12月18日: 🏃‍♂️ 开源 HunyuanVideo [FP8 模型权重](https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8.pt)，节省更多 GPU 显存。\n* 2024年12月17日: 🤗 HunyuanVideo已经集成到[Diffusers](https://huggingface.co/docs/diffusers/main/api/pipelines/hunyuan_video)中。\n* 2024年12月03日: 🚀 开源 HunyuanVideo 多卡并行推理代码，由[xDiT](https://github.com/xdit-project/xDiT)提供。\n* 2024年12月03日: 👋 开源 HunyuanVideo 文生视频的推理代码和模型权重。\n\n\n\n## 🎥 作品展示\n\n<div align=\"center\">\n  <video width=\"70%\" src=\"https://github.com/user-attachments/assets/22440764-0d7e-438e-a44d-d0dad1006d3d\" poster=\"./assets/video_poster.png\"> </video>\n</div>\n\n\n## 🧩 社区贡献\n\n如果您的项目中有开发或使用 HunyuanVideo，欢迎告知我们。\n\n- ComfyUI (支持FP8推理、V2V和IP2V生成): [ComfyUI-HunyuanVideoWrapper](https://github.com/kijai/ComfyUI-HunyuanVideoWrapper) by [Kijai](https://github.com/kijai)\n\n- ComfyUI-Native (ComfyUI官方原生支持): [ComfyUI-HunyuanVideo](https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_video/) by [ComfyUI Official](https://github.com/comfyanonymous/ComfyUI)\n\n- FastVideo (一致性蒸馏模型): [FastVideo](https://github.com/hao-ai-lab/FastVideo) by [Hao AI Lab](https://hao-ai-lab.github.io/)\n\n- HunyuanVideo-gguf (GGUF、量化): [HunyuanVideo-gguf](https://huggingface.co/city96/HunyuanVideo-gguf) by [city96](https://huggingface.co/city96)\n\n- Enhance-A-Video (生成更高质量的视频): [Enhance-A-Video](https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video) by [NUS-HPC-AI-Lab](https://ai.comp.nus.edu.sg/)\n\n- TeaCache (基于缓存的加速采样): [TeaCache](https://github.com/LiewFeng/TeaCache) by [Feng Liu](https://github.com/LiewFeng)\n\n\n\n## 📑 开源计划\n\n- HunyuanVideo (文生视频模型)\n  - [x] 推理代码\n  - [x] 模型权重 \n  - [x] 多GPU序列并行推理（GPU 越多，推理速度越快）\n  - [x] Web Demo (Gradio) \n  - [x] Diffusers \n  - [x] FP8 量化版本\n  - [ ] Penguin Video 基准测试集 \n  - [ ] ComfyUI\n  - [ ] 多GPU PipeFusion并行推理 (更低显存需求)\n- HunyuanVideo (图生视频模型)\n  - [ ] 推理代码 \n  - [ ] 模型权重 \n\n\n\n## 目录\n\n- [HunyuanVideo: A Systematic Framework For Large Video Generation Model](#hunyuanvideo-a-systematic-framework-for-large-video-generation-model)\n  - [🎥 作品展示](#-作品展示)\n  - [🔥🔥🔥 更新!!](#-更新)\n  - [🧩 社区贡献](#-社区贡献)\n  - [📑 开源计划](#-开源计划)\n  - [目录](#目录)\n  - [**摘要**](#摘要)\n  - [**HunyuanVideo 的架构**](#hunyuanvideo-的架构)\n  - [🎉 **亮点**](#-亮点)\n    - [**统一的图视频生成架构**](#统一的图视频生成架构)\n    - [**MLLM 文本编码器**](#mllm-文本编码器)\n    - [**3D VAE**](#3d-vae)\n    - [**Prompt 改写**](#prompt-改写)\n  - [📈 能力评估](#-能力评估)\n  - [📜 运行配置](#-运行配置)\n  - [🛠️ 安装和依赖](#️-安装和依赖)\n    - [Linux 安装指引](#linux-安装指引)\n  - [🧱 下载预训练模型](#-下载预训练模型)\n  - [🔑 单卡推理](#-单卡推理)\n    - [使用命令行](#使用命令行)\n    - [运行gradio服务](#运行gradio服务)\n    - [更多配置](#更多配置)\n  - [🚀 使用 xDiT 实现多卡并行推理](#-使用-xdit-实现多卡并行推理)\n    - [使用命令行](#使用命令行-1)\n  - [🚀   FP8 Inference](#---fp8-inference)\n    - [Using Command Line](#using-command-line)\n  - [🔗 BibTeX](#-bibtex)\n  - [致谢](#致谢)\n  - [Star 趋势](#star-趋势)\n---\n\n\n\n## **摘要**\n\nHunyuanVideo 是一个全新的开源视频生成大模型，具有与领先的闭源模型相媲美甚至更优的视频生成表现。为了训练 HunyuanVideo，我们采用了一个全面的框架，集成了数据整理、图像-视频联合模型训练和高效的基础设施以支持大规模模型训练和推理。此外，通过有效的模型架构和数据集扩展策略，我们成功地训练了一个拥有超过 130 亿参数的视频生成模型，使其成为最大的开源视频生成模型之一。\n\n我们在模型结构的设计上做了大量的实验以确保其能拥有高质量的视觉效果、多样的运动、文本-视频对齐和生成稳定性。根据专业人员的评估结果，HunyuanVideo 在综合指标上优于以往的最先进模型，包括 Runway Gen-3、Luma 1.6 和 3 个中文社区表现最好的视频生成模型。**通过开源基础模型和应用模型的代码和权重，我们旨在弥合闭源和开源视频基础模型之间的差距，帮助社区中的每个人都能够尝试自己的想法，促进更加动态和活跃的视频生成生态。**\n\n\n\n## **HunyuanVideo 的架构**\n\nHunyuanVideo 是一个隐空间模型，训练时它采用了 3D VAE 压缩时间维度和空间维度的特征。文本提示通过一个大语言模型编码后作为条件输入模型，引导模型通过对高斯噪声的多步去噪，输出一个视频的隐空间表示。最后，推理时通过 3D VAE 解码器将隐空间表示解码为视频。\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/overall.png\"  height=300>\n</p>\n\n\n## 🎉 **亮点**\n\n### **统一的图视频生成架构**\n\nHunyuanVideo 采用了 Transformer 和 Full Attention 的设计用于视频生成。具体来说，我们使用了一个“双流到单流”的混合模型设计用于视频生成。在双流阶段，视频和文本 token 通过并行的 Transformer Block 独立处理，使得每个模态可以学习适合自己的调制机制而不会相互干扰。在单流阶段，我们将视频和文本 token 连接起来并将它们输入到后续的 Transformer Block 中进行有效的多模态信息融合。这种设计捕捉了视觉和语义信息之间的复杂交互，增强了整体模型性能。\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/backbone.png\"  height=350>\n</p>\n\n### **MLLM 文本编码器**\n过去的视频生成模型通常使用预训练的 CLIP 和 T5-XXL 作为文本编码器，其中 CLIP 使用 Transformer Encoder，T5 使用 Encoder-Decoder 结构。HunyuanVideo 使用了一个预训练的 Multimodal Large Language Model (MLLM) 作为文本编码器，它具有以下优势：\n* 与 T5 相比，MLLM 基于图文数据指令微调后在特征空间中具有更好的图像-文本对齐能力，这减轻了扩散模型中的图文对齐的难度；\n* 与 CLIP 相比，MLLM 在图像的细节描述和复杂推理方面表现出更强的能力；\n* MLLM 可以通过遵循系统指令实现零样本生成，帮助文本特征更多地关注关键信息。\n\n由于 MLLM 是基于 Causal Attention 的，而 T5-XXL 使用了 Bidirectional Attention 为扩散模型提供更好的文本引导。因此，我们引入了一个额外的 token 优化器来增强文本特征。\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/text_encoder.png\"  height=275>\n</p>\n\n### **3D VAE**\n我们的 VAE 采用了 CausalConv3D 作为 HunyuanVideo 的编码器和解码器，用于压缩视频的时间维度和空间维度，其中时间维度压缩 4 倍，空间维度压缩 8 倍，压缩为 16 channels。这样可以显著减少后续 Transformer 模型的 token 数量，使我们能够在原始分辨率和帧率下训练视频生成模型。\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/3dvae.png\"  height=150>\n</p>\n\n### **Prompt 改写**\n为了解决用户输入文本提示的多样性和不一致性的困难，我们微调了 [Hunyuan-Large model](https://github.com/Tencent/Tencent-Hunyuan-Large) 模型作为我们的 prompt 改写模型，将用户输入的提示词改写为更适合模型偏好的写法。\n\n我们提供了两个改写模式：正常模式和导演模式。两种模式的提示词见[这里](hyvideo/prompt_rewrite.py)。正常模式旨在增强视频生成模型对用户意图的理解，从而更准确地解释提供的指令。导演模式增强了诸如构图、光照和摄像机移动等方面的描述，倾向于生成视觉质量更高的视频。注意，这种增强有时可能会导致一些语义细节的丢失。\n\nPrompt 改写模型可以直接使用 [Hunyuan-Large](https://github.com/Tencent/Tencent-Hunyuan-Large) 部署和推理. 我们开源了 prompt 改写模型的权重，见[这里](https://huggingface.co/Tencent/HunyuanVideo-PromptRewrite).\n\n\n\n## 📈 能力评估\n\n为了评估 HunyuanVideo 的能力，我们选择了四个闭源视频生成模型作为对比。我们总共使用了 1,533 个 prompt，每个 prompt 通过一次推理生成了相同数量的视频样本。为了公平比较，我们只进行了一次推理以避免任何挑选。在与其他方法比较时，我们保持了所有选择模型的默认设置，并确保了视频分辨率的一致性。视频根据三个标准进行评估：文本对齐、运动质量和视觉质量。在 60 多名专业评估人员评估后，HunyuanVideo 在综合指标上表现最好，特别是在运动质量方面表现较为突出。\n\n<p align=\"center\">\n<table> \n<thead> \n<tr> \n    <th rowspan=\"2\">模型</th> <th rowspan=\"2\">是否开源</th> <th>时长</th> <th>文本对齐</th> <th>运动质量</th> <th rowspan=\"2\">视觉质量</th> <th rowspan=\"2\">综合评价</th>  <th rowspan=\"2\">排序</th>\n</tr> \n</thead> \n<tbody> \n<tr> \n    <td>HunyuanVideo (Ours)</td> <td> ✔ </td> <td>5s</td> <td>61.8%</td> <td>66.5%</td> <td>95.7%</td> <td>41.3%</td> <td>1</td>\n</tr> \n<tr> \n    <td>国内模型 A (API)</td> <td> &#10008 </td> <td>5s</td> <td>62.6%</td> <td>61.7%</td> <td>95.6%</td> <td>37.7%</td> <td>2</td>\n</tr> \n<tr> \n    <td>国内模型 B (Web)</td> <td> &#10008</td> <td>5s</td> <td>60.1%</td> <td>62.9%</td> <td>97.7%</td> <td>37.5%</td> <td>3</td>\n</tr> \n<tr> \n    <td>GEN-3 alpha (Web)</td> <td>&#10008</td> <td>6s</td> <td>47.7%</td> <td>54.7%</td> <td>97.5%</td> <td>27.4%</td> <td>4</td> \n</tr> \n<tr> \n    <td>Luma1.6 (API)</td><td>&#10008</td> <td>5s</td> <td>57.6%</td> <td>44.2%</td> <td>94.1%</td> <td>24.8%</td> <td>5</td>\n</tr>\n</tbody>\n</table>\n</p>\n\n\n## 📜 运行配置\n\n下表列出了运行 HunyuanVideo 模型使用文本生成视频的推荐配置（batch size = 1）：\n\n|     模型      | 分辨率<br/>(height/width/frame) | 峰值显存  |\n|:--------------:|:--------------------------------:|:----------------:|\n| HunyuanVideo   |         720px1280px129f          |       60G        |\n| HunyuanVideo   |          544px960px129f          |       45G        |\n\n* 本项目适用于使用 NVIDIA GPU 和支持 CUDA 的设备\n  * 模型在单张 80G GPU 上测试\n  * 运行 720px1280px129f 的最小显存要求是 60GB，544px960px129f 的最小显存要求是 45GB。\n* 测试操作系统：Linux\n\n\n\n## 🛠️ 安装和依赖\n\n首先克隆 git 仓库:\n```shell\ngit clone https://github.com/tencent/HunyuanVideo\ncd HunyuanVideo\n```\n\n### Linux 安装指引\n\n我们推荐使用 CUDA 12.4 或 11.8 的版本。\n\nConda 的安装指南可以参考[这里](https://docs.anaconda.com/free/miniconda/index.html)。\n\n```shell\n# 1. Create conda environment\nconda create -n HunyuanVideo python==3.10.9\n\n# 2. Activate the environment\nconda activate HunyuanVideo\n\n# 3. Install PyTorch and other dependencies using conda\n# For CUDA 11.8\nconda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=11.8 -c pytorch -c nvidia\n# For CUDA 12.4\nconda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=12.4 -c pytorch -c nvidia\n\n# 4. Install pip dependencies\npython -m pip install -r requirements.txt\n\n# 5. Install flash attention v2 for acceleration (requires CUDA 11.8 or above)\npython -m pip install ninja\npython -m pip install git+https://github.com/Dao-AILab/flash-attention.git@v2.6.3\n\n# 6. Install xDiT for parallel inference (It is recommended to use torch 2.4.0 and flash-attn 2.6.3)\npython -m pip install xfuser==0.4.0\n```\n\n如果在特定 GPU 型号上遭遇 float point exception(core dump) 问题，可尝试以下方案修复：\n\n```shell\n#选项1：确保已正确安装 CUDA 12.4, CUBLAS>=12.4.5.8, 和 CUDNN>=9.00 (或直接使用我们提供的CUDA12镜像)\npip install nvidia-cublas-cu12==12.4.5.8\nexport LD_LIBRARY_PATH=/opt/conda/lib/python3.8/site-packages/nvidia/cublas/lib/\n\n#选项2：强制显式使用 CUDA11.8 编译的 Pytorch 版本以及其他所有软件包\npip uninstall -r requirements.txt  # 确保卸载所有依赖包\npip uninstall -y xfuser\npip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu118\npip install -r requirements.txt\npip install ninja\npip install git+https://github.com/Dao-AILab/flash-attention.git@v2.6.3\npip install xfuser==0.4.0\n```\n\n另外，我们提供了一个预构建的 Docker 镜像，可以使用如下命令进行拉取和运行。\n```shell\n# 用于 CUDA 12.4 (已更新避免 float point exception)\ndocker pull hunyuanvideo/hunyuanvideo:cuda_12\ndocker run -itd --gpus all --init --net=host --uts=host --ipc=host --name hunyuanvideo --security-opt=seccomp=unconfined --ulimit=stack=67108864 --ulimit=memlock=-1 --privileged hunyuanvideo/hunyuanvideo:cuda_12\n\n# 用于 CUDA 11.8\ndocker pull hunyuanvideo/hunyuanvideo:cuda_11\ndocker run -itd --gpus all --init --net=host --uts=host --ipc=host --name hunyuanvideo --security-opt=seccomp=unconfined --ulimit=stack=67108864 --ulimit=memlock=-1 --privileged hunyuanvideo/hunyuanvideo:cuda_11\n```\n\n## 🧱 下载预训练模型\n\n下载预训练模型参考[这里](ckpts/README.md)。\n\n\n\n## 🔑 单卡推理\n\n我们在下表中列出了支持的高度/宽度/帧数设置。\n\n|      分辨率       |           h/w=9:16           |    h/w=16:9     |     h/w=4:3     |     h/w=3:4     |     h/w=1:1     |\n|:---------------------:|:----------------------------:|:---------------:|:---------------:|:---------------:|:---------------:|\n|         540p          |        544px960px129f        |  960px544px129f | 624px832px129f  |  832px624px129f |  720px720px129f |\n| 720p (推荐)    |       720px1280px129f        | 1280px720px129f | 1104px832px129f | 832px1104px129f | 960px960px129f  |\n\n### 使用命令行\n\n```bash\ncd HunyuanVideo\n\npython3 sample_video.py \\\n    --video-size 720 1280 \\\n    --video-length 129 \\\n    --infer-steps 50 \\\n    --prompt \"A cat walks on the grass, realistic style.\" \\\n    --flow-reverse \\\n    --use-cpu-offload \\\n    --save-path ./results\n```\n\n### 运行gradio服务\n```bash\npython3 gradio_server.py --flow-reverse\n\n# set SERVER_NAME and SERVER_PORT manually\n# SERVER_NAME=0.0.0.0 SERVER_PORT=8081 python3 gradio_server.py --flow-reverse\n```\n\n### 更多配置\n\n下面列出了更多关键配置项：\n\n|        参数        |  默认值  |                描述                |\n|:----------------------:|:---------:|:-----------------------------------------:|\n|       `--prompt`       |   None    |   用于生成视频的 prompt    |\n|     `--video-size`     | 720 1280  |      生成视频的高度和宽度      |\n|    `--video-length`    |    129    |     生成视频的帧数     |\n|    `--infer-steps`     |    50     |     生成时采样的步数      |\n| `--embedded-cfg-scale` |    6.0    |    文本的控制强度       |\n|     `--flow-shift`     |    7.0    | 推理时 timestep 的 shift 系数，值越大，高噪区域采样步数越多 |\n|     `--flow-reverse`   |    False  | If reverse, learning/sampling from t=1 -> t=0 |\n|     `--neg-prompt`     |   None    | 负向词  |\n|        `--seed`        |     0     |   随机种子    |\n|  `--use-cpu-offload`   |   False   |    启用 CPU offload，可以节省显存    |\n|     `--save-path`      | ./results |     保存路径      |\n\n\n\n## 🚀 使用 xDiT 实现多卡并行推理\n\n[xDiT](https://github.com/xdit-project/xDiT) 是一个针对多 GPU 集群的扩展推理引擎，用于扩展 Transformers（DiTs）。\n它成功为各种 DiT 模型（包括 mochi-1、CogVideoX、Flux.1、SD3 等）提供了低延迟的并行推理解决方案。该存储库采用了 [Unified Sequence Parallelism (USP)](https://arxiv.org/abs/2405.07719) API 用于混元视频模型的并行推理。\n\n### 使用命令行\n\n例如，可用如下命令使用8张GPU卡完成推理\n\n```bash\ncd HunyuanVideo\n\ntorchrun --nproc_per_node=8 sample_video_parallel.py \\\n    --video-size 1280 720 \\\n    --video-length 129 \\\n    --infer-steps 50 \\\n    --prompt \"A cat walks on the grass, realistic style.\" \\\n    --flow-reverse \\\n    --seed 42 \\\n    --ulysses_degree 8 \\\n    --ring_degree 1 \\\n    --save-path ./results\n```\n\n可以配置`--ulysses-degree`和`--ring-degree`来控制并行配置，可选参数如下。\n\n<details>\n<summary>支持的并行配置 (点击查看详情)</summary>\n\n|     --video-size     | --video-length | --ulysses-degree x --ring-degree | --nproc_per_node |\n|----------------------|----------------|----------------------------------|------------------|\n| 1280 720 或 720 1280 | 129            | 8x1,4x2,2x4,1x8                  | 8                |\n| 1280 720 或 720 1280 | 129            | 1x5                              | 5                |\n| 1280 720 或 720 1280 | 129            | 4x1,2x2,1x4                      | 4                |\n| 1280 720 或 720 1280 | 129            | 3x1,1x3                          | 3                |\n| 1280 720 或 720 1280 | 129            | 2x1,1x2                          | 2                |\n| 1104 832 或 832 1104 | 129            | 4x1,2x2,1x4                      | 4                |\n| 1104 832 或 832 1104 | 129            | 3x1,1x3                          | 3                |\n| 1104 832 或 832 1104 | 129            | 2x1,1x2                          | 2                |\n| 960 960              | 129            | 6x1,3x2,2x3,1x6                  | 6                |\n| 960 960              | 129            | 4x1,2x2,1x4                      | 4                |\n| 960 960              | 129            | 3x1,1x3                          | 3                |\n| 960 960              | 129            | 1x2,2x1                          | 2                |\n| 960 544 或 544 960   | 129            | 6x1,3x2,2x3,1x6                  | 6                |\n| 960 544 或 544 960   | 129            | 4x1,2x2,1x4                      | 4                |\n| 960 544 或 544 960   | 129            | 3x1,1x3                          | 3                |\n| 960 544 或 544 960   | 129            | 1x2,2x1                          | 2                |\n| 832 624 或 624 832   | 129            | 4x1,2x2,1x4                      | 4                |\n| 624 832 或 624 832   | 129            | 3x1,1x3                          | 3                |\n| 832 624 或 624 832   | 129            | 2x1,1x2                          | 2                |\n| 720 720              | 129            | 1x5                              | 5                |\n| 720 720              | 129            | 3x1,1x3                          | 3                |\n\n</details>\n\n<p align=\"center\">\n<table align=\"center\">\n<thead>\n<tr>\n    <th colspan=\"4\">在 8xGPU上生成1280x720 (129 帧 50 步)的时耗 (秒)  </th>\n</tr>\n<tr>\n    <th>1</th>\n    <th>2</th>\n    <th>4</th>\n    <th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <th>1904.08</th>\n    <th>934.09 (2.04x)</th>\n    <th>514.08 (3.70x)</th>\n    <th>337.58 (5.64x)</th>\n</tr>\n\n</tbody>\n</table>\n</p>\n\n\n\n## 🚀   FP8 Inference\n\n使用FP8量化后的HunyuanVideo模型能够帮您节省大概10GB显存。 使用前需要从 Huggingface 下载[FP8权重](https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8.pt)和每层量化权重的[scale参数](https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8_map.pt).\n\n### Using Command Line\n\n这里，您必须显示地指定FP8的权重路径。例如，可用如下命令使用FP8模型推理\n\n```bash\ncd HunyuanVideo\n\nDIT_CKPT_PATH={PATH_TO_FP8_WEIGHTS}/{WEIGHT_NAME}_fp8.pt\n\npython3 sample_video.py \\\n    --dit-weight ${DIT_CKPT_PATH} \\\n    --video-size 1280 720 \\\n    --video-length 129 \\\n    --infer-steps 50 \\\n    --prompt \"A cat walks on the grass, realistic style.\" \\\n    --seed 42 \\\n    --embedded-cfg-scale 6.0 \\\n    --flow-shift 7.0 \\\n    --flow-reverse \\\n    --use-cpu-offload \\\n    --use-fp8 \\\n    --save-path ./results\n```\n\n\n\n## 🔗 BibTeX\n\n如果您认为 [HunyuanVideo](https://arxiv.org/abs/2412.03603) 给您的研究和应用带来了一些帮助，可以通过下面的方式来引用:\n\n```BibTeX\n@misc{kong2024hunyuanvideo,\n      title={HunyuanVideo: A Systematic Framework For Large Video Generative Models}, \n      author={Weijie Kong, Qi Tian, Zijian Zhang, Rox Min, Zuozhuo Dai, Jin Zhou, Jiangfeng Xiong, Xin Li, Bo Wu, Jianwei Zhang, Kathrina Wu, Qin Lin, Aladdin Wang, Andong Wang, Changlin Li, Duojun Huang, Fang Yang, Hao Tan, Hongmei Wang, Jacob Song, Jiawang Bai, Jianbing Wu, Jinbao Xue, Joey Wang, Junkun Yuan, Kai Wang, Mengyang Liu, Pengyu Li, Shuai Li, Weiyan Wang, Wenqing Yu, Xinchi Deng, Yang Li, Yanxin Long, Yi Chen, Yutao Cui, Yuanbo Peng, Zhentao Yu, Zhiyu He, Zhiyong Xu, Zixiang Zhou, Zunnan Xu, Yangyu Tao, Qinglin Lu, Songtao Liu, Dax Zhou, Hongfa Wang, Yong Yang, Di Wang, Yuhong Liu, and Jie Jiang, along with Caesar Zhong},\n      year={2024},\n      archivePrefix={arXiv preprint arXiv:2412.03603},\n      primaryClass={cs.CV}\n}\n```\n\n\n\n## 致谢\n\nHunyuanVideo 的开源离不开诸多开源工作，这里我们特别感谢 [SD3](https://huggingface.co/stabilityai/stable-diffusion-3-medium), [FLUX](https://github.com/black-forest-labs/flux), [Llama](https://github.com/meta-llama/llama), [LLaVA](https://github.com/haotian-liu/LLaVA), [Xtuner](https://github.com/InternLM/xtuner), [diffusers](https://github.com/huggingface/diffusers) and [HuggingFace](https://huggingface.co) 的开源工作和探索。另外，我们也感谢腾讯混元多模态团队对 HunyuanVideo 适配多种文本编码器的支持。\n\n\n\n## Star 趋势\n\n<a href=\"https://star-history.com/#Tencent/HunyuanVideo&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&type=Date\" />\n </picture>\n</a>\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "ckpts",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradio_server.py",
          "type": "blob",
          "size": 5.216796875,
          "content": "import os\nimport time\nfrom pathlib import Path\nfrom loguru import logger\nfrom datetime import datetime\nimport gradio as gr\nimport random\n\nfrom hyvideo.utils.file_utils import save_videos_grid\nfrom hyvideo.config import parse_args\nfrom hyvideo.inference import HunyuanVideoSampler\nfrom hyvideo.constants import NEGATIVE_PROMPT\n\ndef initialize_model(model_path):\n    args = parse_args()\n    models_root_path = Path(model_path)\n    if not models_root_path.exists():\n        raise ValueError(f\"`models_root` not exists: {models_root_path}\")\n    \n    hunyuan_video_sampler = HunyuanVideoSampler.from_pretrained(models_root_path, args=args)\n    return hunyuan_video_sampler\n\ndef generate_video(\n    model,\n    prompt,\n    resolution,\n    video_length,\n    seed,\n    num_inference_steps,\n    guidance_scale,\n    flow_shift,\n    embedded_guidance_scale\n):\n    seed = None if seed == -1 else seed\n    width, height = resolution.split(\"x\")\n    width, height = int(width), int(height)\n    negative_prompt = \"\" # not applicable in the inference\n\n    outputs = model.predict(\n        prompt=prompt,\n        height=height,\n        width=width, \n        video_length=video_length,\n        seed=seed,\n        negative_prompt=negative_prompt,\n        infer_steps=num_inference_steps,\n        guidance_scale=guidance_scale,\n        num_videos_per_prompt=1,\n        flow_shift=flow_shift,\n        batch_size=1,\n        embedded_guidance_scale=embedded_guidance_scale\n    )\n    \n    samples = outputs['samples']\n    sample = samples[0].unsqueeze(0)\n    \n    save_path = os.path.join(os.getcwd(), \"gradio_outputs\")\n    os.makedirs(save_path, exist_ok=True)\n    \n    time_flag = datetime.fromtimestamp(time.time()).strftime(\"%Y-%m-%d-%H:%M:%S\")\n    video_path = f\"{save_path}/{time_flag}_seed{outputs['seeds'][0]}_{outputs['prompts'][0][:100].replace('/','')}.mp4\"\n    save_videos_grid(sample, video_path, fps=24)\n    logger.info(f'Sample saved to: {video_path}')\n    \n    return video_path\n\ndef create_demo(model_path, save_path):\n    model = initialize_model(model_path)\n    \n    with gr.Blocks() as demo:\n        gr.Markdown(\"# Hunyuan Video Generation\")\n        \n        with gr.Row():\n            with gr.Column():\n                prompt = gr.Textbox(label=\"Prompt\", value=\"A cat walks on the grass, realistic style.\")\n                with gr.Row():\n                    resolution = gr.Dropdown(\n                        choices=[\n                            # 720p\n                            (\"1280x720 (16:9, 720p)\", \"1280x720\"),\n                            (\"720x1280 (9:16, 720p)\", \"720x1280\"), \n                            (\"1104x832 (4:3, 720p)\", \"1104x832\"),\n                            (\"832x1104 (3:4, 720p)\", \"832x1104\"),\n                            (\"960x960 (1:1, 720p)\", \"960x960\"),\n                            # 540p\n                            (\"960x544 (16:9, 540p)\", \"960x544\"),\n                            (\"544x960 (9:16, 540p)\", \"544x960\"),\n                            (\"832x624 (4:3, 540p)\", \"832x624\"), \n                            (\"624x832 (3:4, 540p)\", \"624x832\"),\n                            (\"720x720 (1:1, 540p)\", \"720x720\"),\n                        ],\n                        value=\"1280x720\",\n                        label=\"Resolution\"\n                    )\n                    video_length = gr.Dropdown(\n                        label=\"Video Length\",\n                        choices=[\n                            (\"2s(65f)\", 65),\n                            (\"5s(129f)\", 129),\n                        ],\n                        value=129,\n                    )\n                num_inference_steps = gr.Slider(1, 100, value=50, step=1, label=\"Number of Inference Steps\")\n                show_advanced = gr.Checkbox(label=\"Show Advanced Options\", value=False)\n                with gr.Row(visible=False) as advanced_row:\n                    with gr.Column():\n                        seed = gr.Number(value=-1, label=\"Seed (-1 for random)\")\n                        guidance_scale = gr.Slider(1.0, 20.0, value=1.0, step=0.5, label=\"Guidance Scale\")\n                        flow_shift = gr.Slider(0.0, 10.0, value=7.0, step=0.1, label=\"Flow Shift\") \n                        embedded_guidance_scale = gr.Slider(1.0, 20.0, value=6.0, step=0.5, label=\"Embedded Guidance Scale\")\n                show_advanced.change(fn=lambda x: gr.Row(visible=x), inputs=[show_advanced], outputs=[advanced_row])\n                generate_btn = gr.Button(\"Generate\")\n            \n            with gr.Column():\n                output = gr.Video(label=\"Generated Video\")\n        \n        generate_btn.click(\n            fn=lambda *inputs: generate_video(model, *inputs),\n            inputs=[\n                prompt,\n                resolution,\n                video_length,\n                seed,\n                num_inference_steps,\n                guidance_scale,\n                flow_shift,\n                embedded_guidance_scale\n            ],\n            outputs=output\n        )\n    \n    return demo\n\nif __name__ == \"__main__\":\n    os.environ[\"GRADIO_ANALYTICS_ENABLED\"] = \"False\"\n    server_name = os.getenv(\"SERVER_NAME\", \"0.0.0.0\")\n    server_port = int(os.getenv(\"SERVER_PORT\", \"8081\"))\n    args = parse_args()\n    print(args)\n    demo = create_demo(args.model_base, args.save_path)\n    demo.launch(server_name=server_name, server_port=server_port)"
        },
        {
          "name": "hyvideo",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.234375,
          "content": "opencv-python==4.9.0.80\ndiffusers==0.31.0\ntransformers==4.46.3\ntokenizers==0.20.3\naccelerate==1.1.1\npandas==2.0.3\nnumpy==1.24.4\neinops==0.7.0\ntqdm==4.66.2\nloguru==0.7.2\nimageio==2.34.0\nimageio-ffmpeg==0.5.1\nsafetensors==0.4.3\ngradio==5.0.0\n"
        },
        {
          "name": "sample_video.py",
          "type": "blob",
          "size": 1.9931640625,
          "content": "import os\nimport time\nfrom pathlib import Path\nfrom loguru import logger\nfrom datetime import datetime\n\nfrom hyvideo.utils.file_utils import save_videos_grid\nfrom hyvideo.config import parse_args\nfrom hyvideo.inference import HunyuanVideoSampler\n\n\ndef main():\n    args = parse_args()\n    print(args)\n    models_root_path = Path(args.model_base)\n    if not models_root_path.exists():\n        raise ValueError(f\"`models_root` not exists: {models_root_path}\")\n    \n    # Create save folder to save the samples\n    save_path = args.save_path if args.save_path_suffix==\"\" else f'{args.save_path}_{args.save_path_suffix}'\n    if not os.path.exists(args.save_path):\n        os.makedirs(save_path, exist_ok=True)\n\n    # Load models\n    hunyuan_video_sampler = HunyuanVideoSampler.from_pretrained(models_root_path, args=args)\n    \n    # Get the updated args\n    args = hunyuan_video_sampler.args\n\n    # Start sampling\n    # TODO: batch inference check\n    outputs = hunyuan_video_sampler.predict(\n        prompt=args.prompt, \n        height=args.video_size[0],\n        width=args.video_size[1],\n        video_length=args.video_length,\n        seed=args.seed,\n        negative_prompt=args.neg_prompt,\n        infer_steps=args.infer_steps,\n        guidance_scale=args.cfg_scale,\n        num_videos_per_prompt=args.num_videos,\n        flow_shift=args.flow_shift,\n        batch_size=args.batch_size,\n        embedded_guidance_scale=args.embedded_cfg_scale\n    )\n    samples = outputs['samples']\n    \n    # Save samples\n    if 'LOCAL_RANK' not in os.environ or int(os.environ['LOCAL_RANK']) == 0:\n        for i, sample in enumerate(samples):\n            sample = samples[i].unsqueeze(0)\n            time_flag = datetime.fromtimestamp(time.time()).strftime(\"%Y-%m-%d-%H:%M:%S\")\n            save_path = f\"{save_path}/{time_flag}_seed{outputs['seeds'][i]}_{outputs['prompts'][i][:100].replace('/','')}.mp4\"\n            save_videos_grid(sample, save_path, fps=24)\n            logger.info(f'Sample save to: {save_path}')\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}