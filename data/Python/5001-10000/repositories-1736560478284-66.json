{
  "metadata": {
    "timestamp": 1736560478284,
    "page": 66,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "seatgeek/fuzzywuzzy",
      "stars": 9236,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# .editorconfig\n# http://editorconfig.org/\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.bat]\nend_of_line = crlf\n\n[*.go]\nindent_size = 4\nindent_style = tab\n\n[*.html]\nindent_size = 4\n\n[*Makefile]\nindent_size = 4\nindent_style = tab\n\n[*.php]\nindent_size = 4\n\n[*.py]\nindent_size = 4\n\n[*.xml]\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.333984375,
          "content": "*.py[oc]\n\n# Temp files\n*~\n~*\n.*~\n\\#*\n.#*\n*#\n\n# Build files\nbuild\ndist\npkg\n*.egg\n*.egg-info\n\n# Debian Files\ndebian/files\ndebian/python-beaver*\n\n# Sphinx build\ndoc/_build\n\n# Generated man page\ndoc/aws_hostname.1\n\n# tox\n.tox\n\n# Hypothesis - keep the examples database\n.hypothesis/tmp\n.hypothesis/unicodedata\n\n# py.test\n.cache/\n\n# Pycharm\n.idea/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.64453125,
          "content": "language: python\nmatrix:\n  include:\n  - python: \"2.7\"\n    env: TEST_SUITE=py.test\n  - python: \"3.4\"\n    env: TEST_SUITE=py.test\n  - python: \"3.5\"\n    env: TEST_SUITE=py.test\n  - python: \"3.6\"\n    env: TEST_SUITE=py.test\n  - python: \"pypy\"\n    env: TEST_SUITE=py.test\n  - python: \"pypy3.5-5.8.0\"\n    env: TEST_SUITE=\"py.test test_fuzzywuzzy.py test_fuzzywuzzy_pytest.py\"\n  - python: 3.6\n    env: TEST_SUITE=\"python setup.py check --restructuredtext --strict --metadata\"\ninstall:\n  - pip install -U pip setuptools wheel\n  - pip install pytest==3.2.5 pycodestyle docutils Pygments hypothesis\nscript:\n  - $TEST_SUITE\nnotifications:\n  on_success: always\ncache: pip\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 20.349609375,
          "content": "Changelog\n=========\n\n0.17.0 (2018-08-20)\n-------------------\n\n- Make benchmarks script Py3 compatible. [Stefan Behnel]\n\n- Add Go lang port. [iddober]\n\n- Add reference to C# port. [ericcoleman]\n\n- Chore: remove license header from files. [Jose Diaz-Gonzalez]\n\n  The files should all inherit the projects license.\n\n\n- Fix README title style. [Thomas Grainger]\n\n- Add readme check. [Thomas Grainger]\n\n  install docutils and Pygments\n\n\n- Cache pip. [Thomas Grainger]\n\n- Upgrade pip/setuptools for hypothesis. [Thomas Grainger]\n\n- Feat: drop py26 and py33 support from tox. [Jose Diaz-Gonzalez]\n\n- Feat: drop support for 2.6 in test_fuzzywuzzy.py. [Jose Diaz-Gonzalez]\n\n- Feat: drop reference to 2.4 from readme. [Jose Diaz-Gonzalez]\n\n- Feat: drop py2.6 and py3.3 classifiers. [Jose Diaz-Gonzalez]\n\n- Feat: drop 2.6 and 3.3 support. [Jose Diaz-Gonzalez]\n\n  These are no longer supported. Please upgrade your python version if you are using either version.\n\n- Fuzz: _token_sort: check for equivalence. [Ralf Ramsauer]\n\n  If we don't have to full_process the strings, we can safely assume to\n  return 100 in case both candidates equal.\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n- Test: add more test cases. [Ralf Ramsauer]\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n- Utils: add and use check_for_equivalence decorator. [Ralf Ramsauer]\n\n  And decorate basic scoring functions.\n\n  The check_for_equivalence decorator MUST be used after the\n  check_for_none decorator, as otherwise ratio(None, None) will get a\n  score of 100.\n\n  This fixes the first part of the recently introduced changes in the test\n  set.\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n- Tests: add some corner cases. [Ralf Ramsauer]\n\n  '' and '' are equal, so are '{' and '{'. Test if fuzzywuzzy gives them a\n  score of 100.\n\n  For the moment, this patch breaks tests, fixes in fuzzywuzzy follow.\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n- Utils: remove superfluous check. [Ralf Ramsauer]\n\n  Decorators make sure that only non None-values are passed. We can safely\n  assume that None will never get here.\n\n  Other than that, None's shouldn't simply be ignored and erroneously\n  changed to empty strings. Better let users fail.\n\n  This commit doesn't break any tests.\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n- README: add missing requirements. [Ralf Ramsauer]\n\n  pycodestyle and hypothesis are required for automatic testing. Add them\n  to README's requirement section.\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n- Remove empty document. [Ralf Ramsauer]\n\n  Signed-off-by: Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n\n\n0.16.0 (2017-12-18)\n-------------------\n\n- Add punctuation characters back in so process does something.\n  [davidcellis]\n\n- Simpler alphabet and even fewer examples. [davidcellis]\n\n- Fewer examples and larger deadlines for Hypothesis. [davidcellis]\n\n- Slightly more examples. [davidcellis]\n\n- Attempt to fix the failing 2.7 and 3.6 python tests. [davidcellis]\n\n- Readme: add link to C++ port. [Lizard]\n\n- Fix tests on Python 3.3. [Jon Banafato]\n\n  Modify tox.ini and .travis.yml to install enum34 when running with\n  Python 3.3 to allow hypothesis tests to pass.\n\n\n- Normalize Python versions. [Jon Banafato]\n\n  - Enable Travis-CI tests for Python 3.6\n  - Enable tests for all supported Python versions in tox.ini\n  - Add Trove classifiers for Python 3.4 - 3.6 to setup.py\n\n  ---\n\n  Note: Python 2.6 and 3.3 are no longer supported by the Python core\n  team. Support for these can likely be dropped, but that's out of scope\n  for this change set.\n\n\n- Fix typos. [Sven-Hendrik Haase]\n\n0.15.1 (2017-07-19)\n-------------------\n\n- Fix setup.py (addresses #155) [Paul O'Leary McCann]\n\n- Merge remote-tracking branch 'upstream/master' into\n  extract_optimizations. [nolan]\n\n- Seed random before generating benchmark strings. [nolan]\n\n- Cleaner implementation of same idea without new param, but adding\n  existing full_process param to Q,W,UQ,UW. [nolan]\n\n- Fix benchmark only generate list once. [nolan]\n\n- Only run util.full_process once on query when using extract functions,\n  add new benchmarks. [nolan]\n\n0.15.0 (2017-02-20)\n-------------------\n\n- Add extras require to install python-levenshtein optionally. [Rolando\n  Espinoza]\n\n  This allows to install python-levenshtein as dependency.\n\n\n- Fix link formatting in the README. [Alex Chan]\n\n- Add fuzzball.js JavaScript port link. [nolan]\n\n- Added Rust Port link. [Logan Collins]\n\n- Validate_string docstring. [davidcellis]\n\n- For full comparisons test that ONLY exact matches (after processing)\n  are added. [davidcellis]\n\n- Add detailed docstrings to WRatio and QRatio comparisons.\n  [davidcellis]\n\n0.14.0 (2016-11-04)\n-------------------\n\n- Possible PEP-8 fix + make pep-8 warnings appear in test. [davidcellis]\n\n- Possible PEP-8 fix. [davidcellis]\n\n- Possible PEP-8 fix. [davidcellis]\n\n- Test for stderr log instead of warning. [davidcellis]\n\n- Convert warning.warn to logging.warning. [davidcellis]\n\n- Additional details for empty string warning from process.\n  [davidcellis]\n\n  String formatting fix for python 2.6\n\n\n- Enclose warnings.simplefilter() inside a with statement. [samkennerly]\n\n0.13.0 (2016-11-01)\n-------------------\n\n- Support alternate git status output. [Jose Diaz-Gonzalez]\n\n- Split warning test into new test file, added to travis execution on\n  2.6 / pypy3. [davidcellis]\n\n- Remove hypothesis examples database from gitignore. [davidcellis]\n\n- Add check for warning to tests. [davidcellis]\n\n  Reordered test imports\n\n\n- Check processor and warn before scorer may remove processor.\n  [davidcellis]\n\n- Renamed test - tidied docstring. [davidcellis]\n\n- Add token ratios to the list of scorers that skip running full_process\n  as a processor. [davidcellis]\n\n- Added tokex_sort, token_set to test. [davidcellis]\n\n- Test docstrings/comments. [davidcellis]\n\n  Removed redundant check from test.\n\n\n- Added py.test .cache/ removed duplicated build from gitignore.\n  [davidcellis]\n\n- Added default_scorer, default_processor parameters to make it easier\n  to change in the future. [davidcellis]\n\n  Added warning if the processor reduces the input query to an empty string.\n\n\n- Rewrote extracts to explicitly use default values for processor and\n  scorer. [davidcellis]\n\n- Changed Hypothesis tests to use pytest parameters. [davidcellis]\n\n- Added Hypothesis based tests for identical strings. [Ducksual]\n\n  Added support for hypothesis to travis config.\n  Hypothesis based tests are skipped on Python 2.6 and pypy3.\n\n  Added .hypothesis/ folder to gitignore\n\n\n- Added test for simple 'a, b' string on process.extractOne. [Ducksual]\n\n- Process the query in process.extractWithoutOrder when using a scorer\n  which does not do so. [Ducksual]\n\n  Closes 139\n\n\n- Mention that difflib and levenshtein results may differ. [Jose Diaz-\n  Gonzalez]\n\n  Closes #128\n\n0.12.0 (2016-09-14)\n-------------------\n\n- Declare support for universal wheels. [Thomas Grainger]\n\n- Clarify that license is GPLv2. [Gareth Tan]\n\n0.11.1 (2016-07-27)\n-------------------\n\n- Add editorconfig. [Jose Diaz-Gonzalez]\n\n- Added tox.ini cofig file for easy local multi-environment testing\n  changed travis config to use py.test like tox updated use of pep8\n  module to pycodestyle. [Pedro Rodrigues]\n\n0.11.0 (2016-06-30)\n-------------------\n\n- Clean-up. [desmaisons_david]\n\n- Improving performance. [desmaisons_david]\n\n- Performance Improvement. [desmaisons_david]\n\n- Fix link to Levenshtein. [Brian J. McGuirk]\n\n- Fix readme links. [Brian J. McGuirk]\n\n- Add license to StringMatcher.py. [Jose Diaz-Gonzalez]\n\n  Closes #113\n\n0.10.0 (2016-03-14)\n-------------------\n\n- Handle None inputs same as empty string (Issue #94) [Nick Miller]\n\n0.9.0 (2016-03-07)\n------------------\n\n- Pull down all keys when updating local copy. [Jose Diaz-Gonzalez]\n\n0.8.2 (2016-02-26)\n------------------\n\n- Remove the warning for \"slow\" sequence matcher on PyPy. [Julian\n  Berman]\n\n  where it's preferable to use the pure-python implementation.\n\n0.8.1 (2016-01-25)\n------------------\n\n- Minor release changes. [Jose Diaz-Gonzalez]\n\n- Clean up wiki link in readme. [Ewan Oglethorpe]\n\n0.8.0 (2015-11-16)\n------------------\n\n- Refer to Levenshtein distance in readme. Closes #88. [Jose Diaz-\n  Gonzalez]\n\n- Added install step for travis to have pep8 available. [Pedro\n  Rodrigues]\n\n- Added a pep8 test. The way I add the error 501 to the ignore tuple is\n  probably wrong but from the docs and source code of pep8 I could not\n  find any other way. [Pedro Rodrigues]\n\n  I also went ahead and removed the pep8 call from the release file.\n\n\n- Added python 3.5, pypy, and ypyp3 to the travis config file. [Pedro\n  Rodrigues]\n\n- Added another step to the release file to run the tests before\n  releasing. [Pedro Rodrigues]\n\n- Fixed a few pep8 errors Added a verification step in the release\n  automation file. This step should probably be somewhere at git level.\n  [Pedro Rodrigues]\n\n- Pep8. [Pedro Rodrigues]\n\n- Leaving TODOs in the code was never a good idea. [Pedro Rodrigues]\n\n- Changed return values to be rounded integers. [Pedro Rodrigues]\n\n- Added a test with the recovered data file. [Pedro Rodrigues]\n\n- Recovered titledata.csv. [Pedro Rodrigues]\n\n- Move extract test methods into the process test. [Shale Craig]\n\n  Somehow, they ended up in the `RatioTest`, despite asserting that the\n  `ProcessTest` works.\n\n\n0.7.0 (2015-10-02)\n------------------\n\n- Use portable syntax for catching exception on tests. [Luis Madrigal]\n\n- [Fix] test against correct variable. [Luis Madrigal]\n\n- Add unit tests for validator decorators. [Luis Madrigal]\n\n- Move validators to decorator functions. [Luis Madrigal]\n\n  This allows easier composition and IMO makes the functions more readable\n\n\n- Fix typo: dictionery -> dictionary. [shale]\n\n- FizzyWuzzy -> FuzzyWuzzy typo correction. [shale]\n\n- Add check for gitchangelog. [Jose Diaz-Gonzalez]\n\n0.6.2 (2015-09-03)\n------------------\n\n- Ensure the rst-lint binary is available. [Jose Diaz-Gonzalez]\n\n0.6.1 (2015-08-07)\n------------------\n\n- Minor whitespace changes for PEP8. [Jose Diaz-Gonzalez]\n\n0.6.0 (2015-07-20)\n------------------\n\n- Added link to a java port. [Andriy Burkov]\n\n- Patched \"name 'unicode' is not defined\" python3. [Carlos Garay]\n\n  https://github.com/seatgeek/fuzzywuzzy/issues/80\n\n- Make process.extract accept {dict, list}-like choices. [Nathan\n  Typanski]\n\n  Previously, process.extract expected lists or dictionaries, and tested\n  this with isinstance() calls. In keeping with the spirit of Python (duck\n  typing and all that), this change enables one to use extract() on any\n  dict-like object for dict-like results, or any list-like object for\n  list-like results.\n\n  So now we can (and, indeed, I've added tests for these uses) call\n  extract() on things like:\n\n  - a generator of strings (\"any iterable\")\n  - a UserDict\n  - custom user-made classes that \"look like\" dicts\n    (or, really, anything with a .items() method that behaves like a dict)\n  - plain old lists and dicts\n\n  The behavior is exactly the same for previous use cases of\n  lists-and-dicts.\n\n  This change goes along nicely with PR #68, since those docs suggest\n  dict-like behavior is valid, and this change makes that true.\n\n\n- Merge conflict. [Adam Cohen]\n\n- Improve docs for fuzzywuzzy.process. [Nathan Typanski]\n\n  The documentation for this module was dated and sometimes inaccurate.\n  This overhauls the docs to accurately describe the current module,\n  including detailing optional arguments that were not previously\n  explained - e.g., limit argument to extract().\n\n  This change follows the Google Python Style Guide, which may be found\n  at:\n\n  <https://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments>\n\n\n0.5.0 (2015-02-04)\n------------------\n\n- FIX: 0.4.0 is released, no need to specify 0.3.1 in README. [Josh\n  Warner (Mac)]\n\n- Fixed a small typo. [Rostislav Semenov]\n\n- Reset `processor` and `scorer` defaults to None with argument\n  checking. [foxxyz]\n\n- Catch generators without lengths. [Jeremiah Lowin]\n\n- Fixed python3 issue and deprecated assertion method. [foxxyz]\n\n- Fixed some docstrings, typos, python3 string method compatibility,\n  some errors that crept in during rebase. [foxxyz]\n\n- [mod] The lamdba in extract is not needed. [Olivier Le Thanh Duong]\n\n  [mod] Pass directly the defaults functions in the args\n\n  [mod] itertools.takewhile() can handle empty list just fine no need to test for it\n\n  [mod] Shorten extractOne by removing double if\n\n  [mod] Use a list comprehention in extract()\n\n  [mod] Autopep8 on process.py\n\n  [doc] Document make_type_consistent\n\n  [mod] bad_chars shortened\n\n  [enh] Move regex compilation outside the method, otherwhise we don't get the benefit from it\n\n  [mod] Don't need all the blah just to redefine method from string module\n\n  [mod] Remove unused import\n\n  [mod] Autopep8 on string_processing.py\n\n  [mod] Rewrote asciidammit without recursion to make it more readable\n\n  [mod] Autopep8 on utils.py\n\n  [mod] Remove unused import\n\n  [doc] Add some doc to fuzz.py\n\n  [mod] Move the code to sort string in a separate function\n\n  [doc] Docstrings for WRatio, UWRatio\n\n\n- Add note on which package to install. Closes #67. [Jose Diaz-Gonzalez]\n\n0.4.0 (2014-10-31)\n------------------\n\n- In extarctBests() and extractOne() use '>=' instead of '>' [Юрий\n  Пайков]\n\n- Fixed python3 issue with SequenceMatcher import. [Юрий Пайков]\n\n0.3.3 (2014-10-22)\n------------------\n\n- Fixed issue #59 - \"partial\" parameter for `_token_set()` is now\n  honored. [Юрий Пайков]\n\n- Catch generators without lengths. [Jeremiah Lowin]\n\n- Remove explicit check for lists. [Jeremiah Lowin]\n\n  The logic in `process.extract()` should support any Python sequence/iterable. The explicit check for lists is unnecessary and limiting (for example, it forces conversion of generators and other iterable classes to lists).\n\n0.3.2 (2014-09-12)\n------------------\n\n- Make release command an executable. [Jose Diaz-Gonzalez]\n\n- Simplify MANIFEST.in. [Jose Diaz-Gonzalez]\n\n- Add a release script. [Jose Diaz-Gonzalez]\n\n- Fix readme codeblock. [Jose Diaz-Gonzalez]\n\n- Minor formatting. [Jose Diaz-Gonzalez]\n\n- Use __version__ from fuzzywuzzy package. [Jose Diaz-Gonzalez]\n\n- Set __version__ constant in __init__.py. [Jose Diaz-Gonzalez]\n\n- Rename LICENSE to LICENSE.txt. [Jose Diaz-Gonzalez]\n\n0.3.0 (2014-08-24)\n------------------\n\n- Test dict input to extractOne() [jamesnunn]\n\n- Remove whitespace. [jamesnunn]\n\n- Choices parameter for extract() accepts both dict and list objects.\n  [jamesnunn]\n\n- Enable automated testing with Python 3.4. [Corey Farwell]\n\n- Fixed typo: lettters -> letters. [Tal Einat]\n\n- Fixing LICENSE and README's license info. [Dallas Gutauckis]\n\n- Proper ordered list. [Jeff Paine]\n\n- Convert README to rst. [Jeff Paine]\n\n- Add requirements.txt per discussion in #44. [Jeff Paine]\n\n- Add LICENSE TO MANIFEST.in. [Jeff Paine]\n\n- Rename tests.py to more common test_fuzzywuzzy.py. [Jeff Paine]\n\n- Add proper MANIFEST template. [Jeff Paine]\n\n- Remove MANIFEST file Not meant to be kept in version control. [Jeff\n  Paine]\n\n- Remove unused file. [Jeff Paine]\n\n- Pep8. [Jeff Paine]\n\n- Pep8 formatting. [Jeff Paine]\n\n- Pep8 formatting. [Jeff Paine]\n\n- Pep8 indentations. [Jeff Paine]\n\n- Pep8 cleanup. [Jeff Paine]\n\n- Pep8. [Jeff Paine]\n\n- Pep8 cleanup. [Jeff Paine]\n\n- Pep8 cleanup. [Jeff Paine]\n\n- Pep8 import style. [Jeff Paine]\n\n- Pep8 import ordering. [Jeff Paine]\n\n- Pep8 import ordering. [Jeff Paine]\n\n- Remove unused module. [Jeff Paine]\n\n- Pep8 import ordering. [Jeff Paine]\n\n- Remove unused module. [Jeff Paine]\n\n- Pep8 import ordering. [Jeff Paine]\n\n- Remove unused imports. [Jeff Paine]\n\n- Remove unused module. [Jeff Paine]\n\n- Remove import * where present. [Jeff Paine]\n\n- Avoid import * [Jeff Paine]\n\n- Add Travis CI badge. [Jeff Paine]\n\n- Remove python 2.4, 2.5 from Travis (not supported) [Jeff Paine]\n\n- Add python 2.4 and 2.5 to Travis. [Jeff Paine]\n\n- Add all supported python versions to travis. [Jeff Paine]\n\n- Bump minor version number. [Jeff Paine]\n\n- Add classifiers for python versions. [Jeff Paine]\n\n- Added note about python-Levenshtein speedup. Closes #34. [Jose Diaz-\n  Gonzalez]\n\n- Fixed tests on 2.6. [Grigi]\n\n- Fixed py2.6. [Grigi]\n\n- Force bad_chars to ascii. [Grigi]\n\n- Since importing unicode_literals, u decorator not required on strings\n  from py2.6 and up. [Grigi]\n\n- Py3 support without 2to3. [Grigi]\n\n- Created: Added .travis.yml. [futoase]\n\n- [enh] Add docstrings to process.py. [Olivier Le Thanh Duong]\n\n  Turn the existings comments into docstrings so they can be seen via introspection\n\n\n- Don't condense multiple punctuation characters to a single whitespace.\n  this is a behavioral change. [Adam Cohen]\n\n- UQRatio and UWRatio shorthands. [Adam Cohen]\n\n- Version 0.2. [Adam Cohen]\n\n- Unicode/string comparison bug. [Adam Cohen]\n\n- To maintain backwards compatibility, default is to force_ascii as\n  before. [Adam Cohen]\n\n- Fix merge conflict. [Adam Cohen]\n\n- New process function: extractBests. [Flávio Juvenal]\n\n- More readable reverse sorting. [Flávio Juvenal]\n\n- Further honoring of force_ascii. [Adam Cohen]\n\n- Indentation fix. [Adam Cohen]\n\n- Handle force_ascii in fuzz methods. [Adam Cohen]\n\n- Add back relevant tests. [Adam Cohen]\n\n- Utility method to make things consistent. [Adam Cohen]\n\n- Re-commit asciidammit and add a parameter to full_process to determine\n  behavior. [Adam Cohen]\n\n- Added a test for non letters/digits replacements. [Tristan Launay]\n\n- ENG-741 fixed benchmark line length. [Laurent Erignoux]\n\n- Fixed Unicode flag for tests. [Tristan Launay]\n\n- ENG-741 commented code removed not erased for review from creator.\n  [Laurent Erignoux]\n\n- ENG-741 cut long lines in fuzzy wizzy benchmark. [Laurent Erignoux]\n\n- Re-upped the limit on benchmark, now that performance is not an issue\n  anymore. [Tristan Launay]\n\n- Fixed comment. [Tristan Launay]\n\n- Simplified processing of strings with built-in regex code in python.\n  Also fixed empty string detection in token_sort_ratio. [Tristan\n  Launay]\n\n- Proper benchmark display. Introduce methods to explicitly do all the\n  unicode preprocessing *before* using fuzz lib. [Tristan Launay]\n\n- ENG-741: having a true benchmark, to see when we improve stuff.\n  [Benjamin Combourieu]\n\n- Unicode support in benchmark.py. [Benjamin Combourieu]\n\n- Added file for processing strings. [Tristan Launay]\n\n- Uniform treatment of strings in Unicode. Non-ASCII chars are now\n  considered in strings, which allows for matches in Cyrillic, Chinese,\n  Greek, etc. [Tristan Launay]\n\n- Fixed bug in _token_set. [Michael Edward]\n\n- Removed reference to PR. [Jose Diaz-Gonzalez]\n\n- Sadist build and virtualenv dirs are not part of the project. [Pedro\n  Rodrigues]\n\n- Fixes https://github.com/seatgeek/fuzzywuzzy/issues/10 and correctly\n  points to README.textile. [Pedro Rodrigues]\n\n- Info on the pull request. [Pedro Rodrigues]\n\n- Pullstat.us button. [Pedro Rodrigues]\n\n- Fuzzywuzzy really needs better benchmarks. [Pedro Rodrigues]\n\n- Moved tests and benchmarks out of the package. [Pedro Rodrigues]\n\n- Report better ratio()s redundant import try. [Pedro Rodrigues]\n\n- AssertGreater did not exist in python 2.4. [Pedro Rodrigues]\n\n- Remove debug output. [Adam Cohen]\n\n- Looks for python-Levenshtein package, and if present, uses that\n  instead of difflib. 10x speedup if present. add benchmarks. [Adam\n  Cohen]\n\n- Add gitignore. [Adam Cohen]\n\n- Fix a bug in WRatio, as well as an issue in full_process, which was\n  failing on strings with all unicode characters. [Adam Cohen]\n\n- Error in partial_ratio. closes #7. [Adam Cohen]\n\n- Adding some real-life event data for benchmarking. [Adam Cohen]\n\n- Cleaned up utils.py. [Pedro Rodrigues]\n\n- Optimized speed for full_process() [Pedro Rodrigues]\n\n- Speed improvements to asciidammit. [Pedro Rodrigues]\n\n- Removed old versions of validate_string() and remove_ponctuation()\n  kept from previous commits. [Pedro Rodrigues]\n\n- Issue #6 from github updated license headers to match MIT license.\n  [Pedro Rodrigues]\n\n- Clean up. [Pedro Rodrigues]\n\n- Changes to utils.validate_string() and benchmarks. [Pedro Rodrigues]\n\n- Some benchmarks to test the changes made to remove_punctuation. [Pedro\n  Rodrigues]\n\n- Faster remove_punctuation. [Pedro Rodrigues]\n\n- AssertIsNone did not exist in Python 2.4. [Pedro Rodrigues]\n\n- Just adding some simple install instructions for pip. [Chris Dary]\n\n- Check for null/empty strings in QRatio and WRatio. Add tests. Closes\n  #3. [Adam Cohen]\n\n- More README. [Adam Cohen]\n\n- README. [Adam Cohen]\n\n- README. [Adam Cohen]\n\n- Slight change to README. [Adam Cohen]\n\n- Some readme. [Adam Cohen]\n\n- Distutils. [Adam Cohen]\n\n- Change directory structure. [Adam Cohen]\n\n- Initial commit. [Adam Cohen]\n\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 17.66015625,
          "content": "\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n    59 Temple Place, Suite 330, Boston, MA 02111 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n        Appendix: How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) 19yy  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) 19yy name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0537109375,
          "content": "include *.txt\ninclude *.rst\ninclude test_fuzzywuzzy.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.353515625,
          "content": "\n## This project has been renamed and moved to https://github.com/seatgeek/thefuzz\n\n\n**[TheFuzz](https://github.com/seatgeek/thefuzz)** version 0.19.0 correlates with this project's 0.18.0 version with `thefuzz` replacing all instances of this project's name.\n\nPRs and issues here will need to be resubmitted to **[TheFuzz](https://github.com/seatgeek/thefuzz)**"
        },
        {
          "name": "benchmarks.py",
          "type": "blob",
          "size": 4.337890625,
          "content": "# -*- coding: utf8 -*-\n\nfrom timeit import timeit\nimport math\nimport csv\n\niterations = 100000\n\n\nreader = csv.DictReader(open('data/titledata.csv'), delimiter='|')\ntitles = [i['custom_title'] for i in reader]\ntitle_blob = '\\n'.join(titles)\n\n\ncirque_strings = [\n    \"cirque du soleil - zarkana - las vegas\",\n    \"cirque du soleil \",\n    \"cirque du soleil las vegas\",\n    \"zarkana las vegas\",\n    \"las vegas cirque du soleil at the bellagio\",\n    \"zarakana - cirque du soleil - bellagio\"\n]\n\nchoices = [\n    \"\",\n    \"new york yankees vs boston red sox\",\n    \"\",\n    \"zarakana - cirque du soleil - bellagio\",\n    None,\n    \"cirque du soleil las vegas\",\n    None\n]\n\nmixed_strings = [\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n    \"C\\\\'est la vie\",\n    u\"Ça va?\",\n    u\"Cães danados\",\n    u\"\\xacCamarões assados\",\n    u\"a\\xac\\u1234\\u20ac\\U00008000\"\n]\n\ncommon_setup = \"from fuzzywuzzy import fuzz, utils; \"\nbasic_setup = \"from fuzzywuzzy.string_processing import StringProcessor;\"\n\n\ndef print_result_from_timeit(stmt='pass', setup='pass', number=1000000):\n    \"\"\"\n    Clean function to know how much time took the execution of one statement\n    \"\"\"\n    units = [\"s\", \"ms\", \"us\", \"ns\"]\n    duration = timeit(stmt, setup, number=int(number))\n    avg_duration = duration / float(number)\n    thousands = int(math.floor(math.log(avg_duration, 1000)))\n\n    print(\"Total time: %fs. Average run: %.3f%s.\" % (\n        duration, avg_duration * (1000 ** -thousands), units[-thousands]))\n\n\nfor s in choices:\n    print('Test validate_string for: \"%s\"' % s)\n    print_result_from_timeit('utils.validate_string(\\'%s\\')' % s, common_setup, number=iterations)\n\nprint('')\n\nfor s in mixed_strings + cirque_strings + choices:\n    print('Test full_process for: \"%s\"' % s)\n    print_result_from_timeit('utils.full_process(u\\'%s\\')' % s,\n                             common_setup + basic_setup, number=iterations)\n\n# benchmarking the core matching methods...\n\nfor s in cirque_strings:\n    print('Test fuzz.ratio for string: \"%s\"' % s)\n    print('-------------------------------')\n    print_result_from_timeit('fuzz.ratio(u\\'cirque du soleil\\', u\\'%s\\')' % s,\n                             common_setup + basic_setup, number=iterations / 100)\n\nfor s in cirque_strings:\n    print('Test fuzz.partial_ratio for string: \"%s\"' % s)\n    print('-------------------------------')\n    print_result_from_timeit('fuzz.partial_ratio(u\\'cirque du soleil\\', u\\'%s\\')'\n                             % s, common_setup + basic_setup, number=iterations / 100)\n\nfor s in cirque_strings:\n    print('Test fuzz.WRatio for string: \"%s\"' % s)\n    print('-------------------------------')\n    print_result_from_timeit('fuzz.WRatio(u\\'cirque du soleil\\', u\\'%s\\')' % s,\n                             common_setup + basic_setup, number=iterations / 100)\n\nprint('Test process.exract(scorer =  fuzz.QRatio) for string: \"%s\"' % s)\nprint('-------------------------------')\nprint_result_from_timeit('process.extract(u\\'cirque du soleil\\', choices, scorer =  fuzz.QRatio)',\n                             common_setup + basic_setup + \" from fuzzywuzzy import process; import string,random; random.seed(18);\"\n                             \" choices = [\\'\\'.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(30)) for s in range(5000)]\",\n                              number=10)\n\nprint('Test process.exract(scorer =  fuzz.WRatio) for string: \"%s\"' % s)\nprint('-------------------------------')\nprint_result_from_timeit('process.extract(u\\'cirque du soleil\\', choices, scorer =  fuzz.WRatio)',\n                             common_setup + basic_setup + \" from fuzzywuzzy import process; import string,random; random.seed(18);\"\n                             \" choices = [\\'\\'.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(30)) for s in range(5000)]\",\n                              number=10)\n\n\n# let me show you something\n\ns = 'New York Yankees'\n\ntest = 'import functools\\n'\ntest += 'title_blob = \"\"\"%s\"\"\"\\n' % title_blob\ntest += 'title_blob = title_blob.strip()\\n'\ntest += 'titles = title_blob.split(\"\\\\n\")\\n'\n\nprint('Real world ratio(): \"%s\"' % s)\nprint('-------------------------------')\ntest += 'prepared_ratio = functools.partial(fuzz.ratio, \"%s\")\\n' % s\ntest += 'titles.sort(key=prepared_ratio)\\n'\nprint_result_from_timeit(test,\n                         common_setup + basic_setup,\n                         number=100)\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzzywuzzy",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "blob",
          "size": 5.033203125,
          "content": "#!/usr/bin/env bash\nset -eo pipefail; [[ $RELEASE_TRACE ]] && set -x\n\nPACKAGE_NAME='fuzzywuzzy'\nINIT_PACKAGE_NAME='fuzzywuzzy'\nPUBLIC=\"true\"\n\n# Colors\nCOLOR_OFF=\"\\033[0m\"   # unsets color to term fg color\nRED=\"\\033[0;31m\"      # red\nGREEN=\"\\033[0;32m\"    # green\nYELLOW=\"\\033[0;33m\"   # yellow\nMAGENTA=\"\\033[0;35m\"  # magenta\nCYAN=\"\\033[0;36m\"     # cyan\n\n# ensure wheel is available\npip install wheel > /dev/null\n\n# ensure Pygment is available\npip install Pygments > /dev/null\n\ncommand -v gitchangelog >/dev/null 2>&1 || {\n    echo -e \"${RED}WARNING: Missing gitchangelog binary, please run: pip install gitchangelog==2.2.0${COLOR_OFF}\\n\"\n    exit 1\n}\n\ncommand -v rst-lint > /dev/null || {\n    echo -e \"${RED}WARNING: Missing rst-lint binary, please run: pip install restructuredtext_lint${COLOR_OFF}\\n\"\n    exit 1\n}\n\nset +e;\npython test_fuzzywuzzy.py &> /dev/null  # run the tests\nif [ ! $? -eq 0 ]; then\n    echo -e \"${RED}WARNING: The tests are failing.${COLOR_OFF}\"\n    exit 1\nfi\nset -e;\n\nif [[ \"$@\" != \"major\" ]] && [[ \"$@\" != \"minor\" ]] && [[ \"$@\" != \"patch\" ]]; then\n    echo -e \"${RED}WARNING: Invalid release type, must specify 'major', 'minor', or 'patch'${COLOR_OFF}\\n\"\n    exit 1\nfi\n\necho -e \"\\n${GREEN}STARTING RELEASE PROCESS${COLOR_OFF}\\n\"\n\nset +e;\ngit status | grep -Eo \"working (directory|tree) clean\" &> /dev/null\nif [ ! $? -eq 0 ]; then # working directory is NOT clean\n    echo -e \"${RED}WARNING: You have uncomitted changes, you may have forgotten something${COLOR_OFF}\\n\"\n    exit 1\nfi\nset -e;\n\necho -e \"${YELLOW}--->${COLOR_OFF} Updating local copy\"\ngit pull -q origin master\ngit fetch --tags > /dev/null\n\necho -e \"${YELLOW}--->${COLOR_OFF} Retrieving release versions\"\n\ncurrent_version=$(cat ${INIT_PACKAGE_NAME}/__init__.py |grep '__version__ ='|sed 's/[^0-9.]//g')\nmajor=$(echo $current_version | awk '{split($0,a,\".\"); print a[1]}')\nminor=$(echo $current_version | awk '{split($0,a,\".\"); print a[2]}')\npatch=$(echo $current_version | awk '{split($0,a,\".\"); print a[3]}')\n\nif [[ \"$@\" == \"major\" ]]; then\n    major=$(($major + 1));\n    minor=\"0\"\n    patch=\"0\"\nelif [[ \"$@\" == \"minor\" ]]; then\n    minor=$(($minor + 1));\n    patch=\"0\"\nelif [[ \"$@\" == \"patch\" ]]; then\n    patch=$(($patch + 1));\nfi\n\nnext_version=\"${major}.${minor}.${patch}\"\n\necho -e  \"${YELLOW}   >${COLOR_OFF} ${MAGENTA}${current_version}${COLOR_OFF} -> ${MAGENTA}${next_version}${COLOR_OFF}\"\n\necho -e \"${YELLOW}--->${COLOR_OFF} Ensuring readme passes lint checks (if this fails, run rst-lint)\"\nrst-lint README.rst > /dev/null\n\necho -e \"${YELLOW}--->${COLOR_OFF} Creating necessary temp file\"\ntempfoo=$(basename $0)\nTMPFILE=$(mktemp /tmp/${tempfoo}.XXXXXX) || {\n    echo -e \"${RED}WARNING: Cannot create temp file using mktemp in /tmp dir ${COLOR_OFF}\\n\"\n    exit 1\n}\n\nfind_this=\"__version__ = '$current_version'\"\nreplace_with=\"__version__ = '$next_version'\"\n\necho -e \"${YELLOW}--->${COLOR_OFF} Updating ${INIT_PACKAGE_NAME}/__init__.py\"\nsed \"s/$find_this/$replace_with/\" ${INIT_PACKAGE_NAME}/__init__.py > $TMPFILE && mv $TMPFILE ${INIT_PACKAGE_NAME}/__init__.py\n\necho -e \"${YELLOW}--->${COLOR_OFF} Updating README.rst\"\nfind_this=\"${PACKAGE_NAME}.git@$current_version\"\nreplace_with=\"${PACKAGE_NAME}.git@$next_version\"\nsed \"s/$find_this/$replace_with/\" README.rst > $TMPFILE && mv $TMPFILE README.rst\nfind_this=\"${PACKAGE_NAME}==$current_version\"\nreplace_with=\"${PACKAGE_NAME}==$next_version\"\nsed \"s/$find_this/$replace_with/\" README.rst > $TMPFILE && mv $TMPFILE README.rst\n\nif [ -f docs/conf.py ]; then\n    echo -e \"${YELLOW}--->${COLOR_OFF} Updating docs\"\n    find_this=\"version = '${current_version}'\"\n    replace_with=\"version = '${next_version}'\"\n    sed \"s/$find_this/$replace_with/\" docs/conf.py > $TMPFILE && mv $TMPFILE docs/conf.py\n\n    find_this=\"release = '${current_version}'\"\n    replace_with=\"release = '${next_version}'\"\n    sed \"s/$find_this/$replace_with/\" docs/conf.py > $TMPFILE && mv $TMPFILE docs/conf.py\nfi\n\necho -e \"${YELLOW}--->${COLOR_OFF} Updating CHANGES.rst for new release\"\nversion_header=\"$next_version ($(date +%F))\"\nset +e; dashes=$(yes '-'|head -n ${#version_header}|tr -d '\\n') ; set -e\ngitchangelog |sed \"4s/.*/$version_header/\"|sed \"5s/.*/$dashes/\" > $TMPFILE && mv $TMPFILE CHANGES.rst\n\necho -e \"${YELLOW}--->${COLOR_OFF} Adding changed files to git\"\ngit add CHANGES.rst README.rst ${INIT_PACKAGE_NAME}/__init__.py\nif [ -f docs/conf.py ]; then git add docs/conf.py; fi\n\necho -e \"${YELLOW}--->${COLOR_OFF} Creating release\"\ngit commit -q -m \"Release version $next_version\"\n\necho -e \"${YELLOW}--->${COLOR_OFF} Tagging release\"\ngit tag -a $next_version -m \"Release version $next_version\"\n\necho -e \"${YELLOW}--->${COLOR_OFF} Pushing release and tags to github\"\ngit push -q origin master && git push -q --tags\n\nif [[ \"$PUBLIC\" == \"true\" ]]; then\n    echo -e \"${YELLOW}--->${COLOR_OFF} Creating python release\"\n    cp README.rst README\n    python setup.py sdist bdist_wheel upload > /dev/null\n    rm README\nelse\n    echo -e \"${YELLOW}--->${COLOR_OFF} Creating local python dist and wheel for manual release\"\n    python setup.py sdist bdist_wheel > /dev/null\nfi\n\necho -e \"\\n${CYAN}RELEASED VERSION ${next_version}${COLOR_OFF}\\n\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.025390625,
          "content": "[bdist_wheel]\nuniversal=1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.150390625,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (c) 2014 SeatGeek\n\n# This file is part of fuzzywuzzy.\n\nfrom fuzzywuzzy import __version__\nimport os\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\ndef open_file(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname))\n\nsetup(\n    name='fuzzywuzzy',\n    version=__version__,\n    author='Adam Cohen',\n    author_email='adam@seatgeek.com',\n    packages=['fuzzywuzzy'],\n    extras_require={'speedup': ['python-levenshtein>=0.12']},\n    url='https://github.com/seatgeek/fuzzywuzzy',\n    license=\"GPLv2\",\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n    description='Fuzzy string matching in python',\n    long_description=open_file('README.rst').read(),\n    zip_safe=True,\n)\n"
        },
        {
          "name": "test_fuzzywuzzy.py",
          "type": "blob",
          "size": 18.1298828125,
          "content": "# -*- coding: utf8 -*-\nfrom __future__ import unicode_literals\nimport unittest\nimport re\nimport sys\nimport pycodestyle\n\nfrom fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\nfrom fuzzywuzzy import utils\nfrom fuzzywuzzy.string_processing import StringProcessor\n\nif sys.version_info[0] == 3:\n    unicode = str\n\n\nclass StringProcessingTest(unittest.TestCase):\n    def test_replace_non_letters_non_numbers_with_whitespace(self):\n        strings = [\"new york mets - atlanta braves\", \"Cães danados\",\n                   \"New York //// Mets $$$\", \"Ça va?\"]\n        for string in strings:\n            proc_string = StringProcessor.replace_non_letters_non_numbers_with_whitespace(string)\n            regex = re.compile(r\"(?ui)[\\W]\")\n            for expr in regex.finditer(proc_string):\n                self.assertEqual(expr.group(), \" \")\n\n    def test_dont_condense_whitespace(self):\n        s1 = \"new york mets - atlanta braves\"\n        s2 = \"new york mets atlanta braves\"\n        p1 = StringProcessor.replace_non_letters_non_numbers_with_whitespace(s1)\n        p2 = StringProcessor.replace_non_letters_non_numbers_with_whitespace(s2)\n        self.assertNotEqual(p1, p2)\n\n\nclass UtilsTest(unittest.TestCase):\n    def setUp(self):\n        self.s1 = \"new york mets\"\n        self.s1a = \"new york mets\"\n        self.s2 = \"new YORK mets\"\n        self.s3 = \"the wonderful new york mets\"\n        self.s4 = \"new york mets vs atlanta braves\"\n        self.s5 = \"atlanta braves vs new york mets\"\n        self.s6 = \"new york mets - atlanta braves\"\n        self.mixed_strings = [\n            \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n            \"C'est la vie\",\n            \"Ça va?\",\n            \"Cães danados\",\n            \"\\xacCamarões assados\",\n            \"a\\xac\\u1234\\u20ac\\U00008000\",\n            \"\\u00C1\"\n        ]\n\n    def tearDown(self):\n        pass\n\n    def test_asciidammit(self):\n        for s in self.mixed_strings:\n            utils.asciidammit(s)\n\n    def test_asciionly(self):\n        for s in self.mixed_strings:\n            # ascii only only runs on strings\n            s = utils.asciidammit(s)\n            utils.asciionly(s)\n\n    def test_fullProcess(self):\n        for s in self.mixed_strings:\n            utils.full_process(s)\n\n    def test_fullProcessForceAscii(self):\n        for s in self.mixed_strings:\n            utils.full_process(s, force_ascii=True)\n\n\nclass RatioTest(unittest.TestCase):\n\n    def setUp(self):\n        self.s1 = \"new york mets\"\n        self.s1a = \"new york mets\"\n        self.s2 = \"new YORK mets\"\n        self.s3 = \"the wonderful new york mets\"\n        self.s4 = \"new york mets vs atlanta braves\"\n        self.s5 = \"atlanta braves vs new york mets\"\n        self.s6 = \"new york mets - atlanta braves\"\n        self.s7 = 'new york city mets - atlanta braves'\n        # test silly corner cases\n        self.s8 = '{'\n        self.s8a = '{'\n        self.s9 = '{a'\n        self.s9a = '{a'\n        self.s10 = 'a{'\n        self.s10a = '{b'\n\n        self.cirque_strings = [\n            \"cirque du soleil - zarkana - las vegas\",\n            \"cirque du soleil \",\n            \"cirque du soleil las vegas\",\n            \"zarkana las vegas\",\n            \"las vegas cirque du soleil at the bellagio\",\n            \"zarakana - cirque du soleil - bellagio\"\n        ]\n\n        self.baseball_strings = [\n            \"new york mets vs chicago cubs\",\n            \"chicago cubs vs chicago white sox\",\n            \"philladelphia phillies vs atlanta braves\",\n            \"braves vs mets\",\n        ]\n\n    def tearDown(self):\n        pass\n\n    def testEqual(self):\n        self.assertEqual(fuzz.ratio(self.s1, self.s1a), 100)\n        self.assertEqual(fuzz.ratio(self.s8, self.s8a), 100)\n        self.assertEqual(fuzz.ratio(self.s9, self.s9a), 100)\n\n    def testCaseInsensitive(self):\n        self.assertNotEqual(fuzz.ratio(self.s1, self.s2), 100)\n        self.assertEqual(fuzz.ratio(utils.full_process(self.s1), utils.full_process(self.s2)), 100)\n\n    def testPartialRatio(self):\n        self.assertEqual(fuzz.partial_ratio(self.s1, self.s3), 100)\n\n    def testTokenSortRatio(self):\n        self.assertEqual(fuzz.token_sort_ratio(self.s1, self.s1a), 100)\n\n    def testPartialTokenSortRatio(self):\n        self.assertEqual(fuzz.partial_token_sort_ratio(self.s1, self.s1a), 100)\n        self.assertEqual(fuzz.partial_token_sort_ratio(self.s4, self.s5), 100)\n        self.assertEqual(fuzz.partial_token_sort_ratio(self.s8, self.s8a, full_process=False), 100)\n        self.assertEqual(fuzz.partial_token_sort_ratio(self.s9, self.s9a, full_process=True), 100)\n        self.assertEqual(fuzz.partial_token_sort_ratio(self.s9, self.s9a, full_process=False), 100)\n        self.assertEqual(fuzz.partial_token_sort_ratio(self.s10, self.s10a, full_process=False), 50)\n\n    def testTokenSetRatio(self):\n        self.assertEqual(fuzz.token_set_ratio(self.s4, self.s5), 100)\n        self.assertEqual(fuzz.token_set_ratio(self.s8, self.s8a, full_process=False), 100)\n        self.assertEqual(fuzz.token_set_ratio(self.s9, self.s9a, full_process=True), 100)\n        self.assertEqual(fuzz.token_set_ratio(self.s9, self.s9a, full_process=False), 100)\n        self.assertEqual(fuzz.token_set_ratio(self.s10, self.s10a, full_process=False), 50)\n\n    def testPartialTokenSetRatio(self):\n        self.assertEqual(fuzz.partial_token_set_ratio(self.s4, self.s7), 100)\n\n    def testQuickRatioEqual(self):\n        self.assertEqual(fuzz.QRatio(self.s1, self.s1a), 100)\n\n    def testQuickRatioCaseInsensitive(self):\n        self.assertEqual(fuzz.QRatio(self.s1, self.s2), 100)\n\n    def testQuickRatioNotEqual(self):\n        self.assertNotEqual(fuzz.QRatio(self.s1, self.s3), 100)\n\n    def testWRatioEqual(self):\n        self.assertEqual(fuzz.WRatio(self.s1, self.s1a), 100)\n\n    def testWRatioCaseInsensitive(self):\n        self.assertEqual(fuzz.WRatio(self.s1, self.s2), 100)\n\n    def testWRatioPartialMatch(self):\n        # a partial match is scaled by .9\n        self.assertEqual(fuzz.WRatio(self.s1, self.s3), 90)\n\n    def testWRatioMisorderedMatch(self):\n        # misordered full matches are scaled by .95\n        self.assertEqual(fuzz.WRatio(self.s4, self.s5), 95)\n\n    def testWRatioUnicode(self):\n        self.assertEqual(fuzz.WRatio(unicode(self.s1), unicode(self.s1a)), 100)\n\n    def testQRatioUnicode(self):\n        self.assertEqual(fuzz.WRatio(unicode(self.s1), unicode(self.s1a)), 100)\n\n    def testEmptyStringsScore100(self):\n        self.assertEqual(fuzz.ratio(\"\", \"\"), 100)\n        self.assertEqual(fuzz.partial_ratio(\"\", \"\"), 100)\n\n    def testIssueSeven(self):\n        s1 = \"HSINCHUANG\"\n        s2 = \"SINJHUAN\"\n        s3 = \"LSINJHUANG DISTRIC\"\n        s4 = \"SINJHUANG DISTRICT\"\n\n        self.assertTrue(fuzz.partial_ratio(s1, s2) > 75)\n        self.assertTrue(fuzz.partial_ratio(s1, s3) > 75)\n        self.assertTrue(fuzz.partial_ratio(s1, s4) > 75)\n\n    def testRatioUnicodeString(self):\n        s1 = \"\\u00C1\"\n        s2 = \"ABCD\"\n        score = fuzz.ratio(s1, s2)\n        self.assertEqual(0, score)\n\n    def testPartialRatioUnicodeString(self):\n        s1 = \"\\u00C1\"\n        s2 = \"ABCD\"\n        score = fuzz.partial_ratio(s1, s2)\n        self.assertEqual(0, score)\n\n    def testWRatioUnicodeString(self):\n        s1 = \"\\u00C1\"\n        s2 = \"ABCD\"\n        score = fuzz.WRatio(s1, s2)\n        self.assertEqual(0, score)\n\n        # Cyrillic.\n        s1 = \"\\u043f\\u0441\\u0438\\u0445\\u043e\\u043b\\u043e\\u0433\"\n        s2 = \"\\u043f\\u0441\\u0438\\u0445\\u043e\\u0442\\u0435\\u0440\\u0430\\u043f\\u0435\\u0432\\u0442\"\n        score = fuzz.WRatio(s1, s2, force_ascii=False)\n        self.assertNotEqual(0, score)\n\n        # Chinese.\n        s1 = \"\\u6211\\u4e86\\u89e3\\u6570\\u5b66\"\n        s2 = \"\\u6211\\u5b66\\u6570\\u5b66\"\n        score = fuzz.WRatio(s1, s2, force_ascii=False)\n        self.assertNotEqual(0, score)\n\n    def testQRatioUnicodeString(self):\n        s1 = \"\\u00C1\"\n        s2 = \"ABCD\"\n        score = fuzz.QRatio(s1, s2)\n        self.assertEqual(0, score)\n\n        # Cyrillic.\n        s1 = \"\\u043f\\u0441\\u0438\\u0445\\u043e\\u043b\\u043e\\u0433\"\n        s2 = \"\\u043f\\u0441\\u0438\\u0445\\u043e\\u0442\\u0435\\u0440\\u0430\\u043f\\u0435\\u0432\\u0442\"\n        score = fuzz.QRatio(s1, s2, force_ascii=False)\n        self.assertNotEqual(0, score)\n\n        # Chinese.\n        s1 = \"\\u6211\\u4e86\\u89e3\\u6570\\u5b66\"\n        s2 = \"\\u6211\\u5b66\\u6570\\u5b66\"\n        score = fuzz.QRatio(s1, s2, force_ascii=False)\n        self.assertNotEqual(0, score)\n\n    def testQratioForceAscii(self):\n        s1 = \"ABCD\\u00C1\"\n        s2 = \"ABCD\"\n\n        score = fuzz.QRatio(s1, s2, force_ascii=True)\n        self.assertEqual(score, 100)\n\n        score = fuzz.QRatio(s1, s2, force_ascii=False)\n        self.assertLess(score, 100)\n\n    def testQRatioForceAscii(self):\n        s1 = \"ABCD\\u00C1\"\n        s2 = \"ABCD\"\n\n        score = fuzz.WRatio(s1, s2, force_ascii=True)\n        self.assertEqual(score, 100)\n\n        score = fuzz.WRatio(s1, s2, force_ascii=False)\n        self.assertLess(score, 100)\n\n    def testTokenSetForceAscii(self):\n        s1 = \"ABCD\\u00C1 HELP\\u00C1\"\n        s2 = \"ABCD HELP\"\n\n        score = fuzz._token_set(s1, s2, force_ascii=True)\n        self.assertEqual(score, 100)\n\n        score = fuzz._token_set(s1, s2, force_ascii=False)\n        self.assertLess(score, 100)\n\n    def testTokenSortForceAscii(self):\n        s1 = \"ABCD\\u00C1 HELP\\u00C1\"\n        s2 = \"ABCD HELP\"\n\n        score = fuzz._token_sort(s1, s2, force_ascii=True)\n        self.assertEqual(score, 100)\n\n        score = fuzz._token_sort(s1, s2, force_ascii=False)\n        self.assertLess(score, 100)\n\n\nclass ValidatorTest(unittest.TestCase):\n    def setUp(self):\n        self.testFunc = lambda *args, **kwargs: (args, kwargs)\n\n    def testCheckForNone(self):\n        invalid_input = [\n            (None, None),\n            ('Some', None),\n            (None, 'Some')\n        ]\n        decorated_func = utils.check_for_none(self.testFunc)\n        for i in invalid_input:\n            self.assertEqual(decorated_func(*i), 0)\n\n        valid_input = ('Some', 'Some')\n        actual = decorated_func(*valid_input)\n        self.assertNotEqual(actual, 0)\n\n    def testCheckEmptyString(self):\n        invalid_input = [\n            ('', ''),\n            ('Some', ''),\n            ('', 'Some')\n        ]\n        decorated_func = utils.check_empty_string(self.testFunc)\n        for i in invalid_input:\n            self.assertEqual(decorated_func(*i), 0)\n\n        valid_input = ('Some', 'Some')\n        actual = decorated_func(*valid_input)\n        self.assertNotEqual(actual, 0)\n\n\nclass ProcessTest(unittest.TestCase):\n\n    def setUp(self):\n        self.s1 = \"new york mets\"\n        self.s1a = \"new york mets\"\n        self.s2 = \"new YORK mets\"\n        self.s3 = \"the wonderful new york mets\"\n        self.s4 = \"new york mets vs atlanta braves\"\n        self.s5 = \"atlanta braves vs new york mets\"\n        self.s6 = \"new york mets - atlanta braves\"\n\n        self.cirque_strings = [\n            \"cirque du soleil - zarkana - las vegas\",\n            \"cirque du soleil \",\n            \"cirque du soleil las vegas\",\n            \"zarkana las vegas\",\n            \"las vegas cirque du soleil at the bellagio\",\n            \"zarakana - cirque du soleil - bellagio\"\n        ]\n\n        self.baseball_strings = [\n            \"new york mets vs chicago cubs\",\n            \"chicago cubs vs chicago white sox\",\n            \"philladelphia phillies vs atlanta braves\",\n            \"braves vs mets\",\n        ]\n\n    def testGetBestChoice1(self):\n        query = \"new york mets at atlanta braves\"\n        best = process.extractOne(query, self.baseball_strings)\n        self.assertEqual(best[0], \"braves vs mets\")\n\n    def testGetBestChoice2(self):\n        query = \"philadelphia phillies at atlanta braves\"\n        best = process.extractOne(query, self.baseball_strings)\n        self.assertEqual(best[0], self.baseball_strings[2])\n\n    def testGetBestChoice3(self):\n        query = \"atlanta braves at philadelphia phillies\"\n        best = process.extractOne(query, self.baseball_strings)\n        self.assertEqual(best[0], self.baseball_strings[2])\n\n    def testGetBestChoice4(self):\n        query = \"chicago cubs vs new york mets\"\n        best = process.extractOne(query, self.baseball_strings)\n        self.assertEqual(best[0], self.baseball_strings[0])\n\n    def testWithProcessor(self):\n        events = [\n            [\"chicago cubs vs new york mets\", \"CitiField\", \"2011-05-11\", \"8pm\"],\n            [\"new york yankees vs boston red sox\", \"Fenway Park\", \"2011-05-11\", \"8pm\"],\n            [\"atlanta braves vs pittsburgh pirates\", \"PNC Park\", \"2011-05-11\", \"8pm\"],\n        ]\n        query = [\"new york mets vs chicago cubs\", \"CitiField\", \"2017-03-19\", \"8pm\"],\n\n        best = process.extractOne(query, events, processor=lambda event: event[0])\n        self.assertEqual(best[0], events[0])\n\n    def testWithScorer(self):\n        choices = [\n            \"new york mets vs chicago cubs\",\n            \"chicago cubs at new york mets\",\n            \"atlanta braves vs pittsbugh pirates\",\n            \"new york yankees vs boston red sox\"\n        ]\n\n        choices_dict = {\n            1: \"new york mets vs chicago cubs\",\n            2: \"chicago cubs vs chicago white sox\",\n            3: \"philladelphia phillies vs atlanta braves\",\n            4: \"braves vs mets\"\n        }\n\n        # in this hypothetical example we care about ordering, so we use quick ratio\n        query = \"new york mets at chicago cubs\"\n        scorer = fuzz.QRatio\n\n        # first, as an example, the normal way would select the \"more\n        # 'complete' match of choices[1]\"\n\n        best = process.extractOne(query, choices)\n        self.assertEqual(best[0], choices[1])\n\n        # now, use the custom scorer\n\n        best = process.extractOne(query, choices, scorer=scorer)\n        self.assertEqual(best[0], choices[0])\n\n        best = process.extractOne(query, choices_dict)\n        self.assertEqual(best[0], choices_dict[1])\n\n    def testWithCutoff(self):\n        choices = [\n            \"new york mets vs chicago cubs\",\n            \"chicago cubs at new york mets\",\n            \"atlanta braves vs pittsbugh pirates\",\n            \"new york yankees vs boston red sox\"\n        ]\n\n        query = \"los angeles dodgers vs san francisco giants\"\n\n        # in this situation, this is an event that does not exist in the list\n        # we don't want to randomly match to something, so we use a reasonable cutoff\n\n        best = process.extractOne(query, choices, score_cutoff=50)\n        self.assertTrue(best is None)\n        # self.assertIsNone(best) # unittest.TestCase did not have assertIsNone until Python 2.7\n\n        # however if we had no cutoff, something would get returned\n\n        # best = process.extractOne(query, choices)\n        # self.assertIsNotNone(best)\n\n    def testWithCutoff2(self):\n        choices = [\n            \"new york mets vs chicago cubs\",\n            \"chicago cubs at new york mets\",\n            \"atlanta braves vs pittsbugh pirates\",\n            \"new york yankees vs boston red sox\"\n        ]\n\n        query = \"new york mets vs chicago cubs\"\n        # Only find 100-score cases\n        res = process.extractOne(query, choices, score_cutoff=100)\n        self.assertTrue(res is not None)\n        best_match, score = res\n        self.assertTrue(best_match is choices[0])\n\n    def testEmptyStrings(self):\n        choices = [\n            \"\",\n            \"new york mets vs chicago cubs\",\n            \"new york yankees vs boston red sox\",\n            \"\",\n            \"\"\n        ]\n\n        query = \"new york mets at chicago cubs\"\n\n        best = process.extractOne(query, choices)\n        self.assertEqual(best[0], choices[1])\n\n    def testNullStrings(self):\n        choices = [\n            None,\n            \"new york mets vs chicago cubs\",\n            \"new york yankees vs boston red sox\",\n            None,\n            None\n        ]\n\n        query = \"new york mets at chicago cubs\"\n\n        best = process.extractOne(query, choices)\n        self.assertEqual(best[0], choices[1])\n\n    def test_list_like_extract(self):\n        \"\"\"We should be able to use a list-like object for choices.\"\"\"\n        def generate_choices():\n            choices = ['a', 'Bb', 'CcC']\n            for choice in choices:\n                yield choice\n        search = 'aaa'\n        result = [(value, confidence) for value, confidence in\n                  process.extract(search, generate_choices())]\n        self.assertTrue(len(result) > 0)\n\n    def test_dict_like_extract(self):\n        \"\"\"We should be able to use a dict-like object for choices, not only a\n        dict, and still get dict-like output.\n        \"\"\"\n        try:\n            from UserDict import UserDict\n        except ImportError:\n            from collections import UserDict\n        choices = UserDict({'aa': 'bb', 'a1': None})\n        search = 'aaa'\n        result = process.extract(search, choices)\n        self.assertTrue(len(result) > 0)\n        for value, confidence, key in result:\n            self.assertTrue(value in choices.values())\n\n    def test_dedupe(self):\n        \"\"\"We should be able to use a list-like object for contains_dupes\n        \"\"\"\n        # Test 1\n        contains_dupes = ['Frodo Baggins', 'Tom Sawyer', 'Bilbo Baggin', 'Samuel L. Jackson', 'F. Baggins', 'Frody Baggins', 'Bilbo Baggins']\n\n        result = process.dedupe(contains_dupes)\n        self.assertTrue(len(result) < len(contains_dupes))\n\n        # Test 2\n        contains_dupes = ['Tom', 'Dick', 'Harry']\n\n        # we should end up with the same list since no duplicates are contained in the list (e.g. original list is returned)\n        deduped_list = ['Tom', 'Dick', 'Harry']\n\n        result = process.dedupe(contains_dupes)\n        self.assertEqual(result, deduped_list)\n\n    def test_simplematch(self):\n        basic_string = 'a, b'\n        match_strings = ['a, b']\n\n        result = process.extractOne(basic_string, match_strings, scorer=fuzz.ratio)\n        part_result = process.extractOne(basic_string, match_strings, scorer=fuzz.partial_ratio)\n\n        self.assertEqual(result, ('a, b', 100))\n        self.assertEqual(part_result, ('a, b', 100))\n\n\nclass TestCodeFormat(unittest.TestCase):\n    def test_pep8_conformance(self):\n        pep8style = pycodestyle.StyleGuide(quiet=False)\n        pep8style.options.ignore = pep8style.options.ignore + tuple(['E501'])\n        pep8style.input_dir('fuzzywuzzy')\n        result = pep8style.check_files()\n        self.assertEqual(result.total_errors, 0, \"PEP8 POLICE - WOOOOOWOOOOOOOOOO\")\n\nif __name__ == '__main__':\n    unittest.main()         # run all tests\n"
        },
        {
          "name": "test_fuzzywuzzy_hypothesis.py",
          "type": "blob",
          "size": 5.0029296875,
          "content": "from itertools import product\nfrom functools import partial\nfrom string import ascii_letters, digits, punctuation\n\nfrom hypothesis import given, assume, settings\nimport hypothesis.strategies as st\nimport pytest\n\nfrom fuzzywuzzy import fuzz, process, utils\n\n\nHYPOTHESIS_ALPHABET = ascii_letters + digits + punctuation\n\n\ndef scorers_processors():\n    \"\"\"\n    Generate a list of (scorer, processor) pairs for testing\n\n    :return: [(scorer, processor), ...]\n    \"\"\"\n    scorers = [fuzz.ratio,\n               fuzz.partial_ratio]\n    processors = [lambda x: x,\n                  partial(utils.full_process, force_ascii=False),\n                  partial(utils.full_process, force_ascii=True)]\n    splist = list(product(scorers, processors))\n    splist.extend(\n        [(fuzz.WRatio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.QRatio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.UWRatio, partial(utils.full_process, force_ascii=False)),\n         (fuzz.UQRatio, partial(utils.full_process, force_ascii=False)),\n         (fuzz.token_set_ratio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.token_sort_ratio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.partial_token_set_ratio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.partial_token_sort_ratio, partial(utils.full_process, force_ascii=True))]\n    )\n\n    return splist\n\n\ndef full_scorers_processors():\n    \"\"\"\n    Generate a list of (scorer, processor) pairs for testing for scorers that use the full string only\n\n    :return: [(scorer, processor), ...]\n    \"\"\"\n    scorers = [fuzz.ratio]\n    processors = [lambda x: x,\n                  partial(utils.full_process, force_ascii=False),\n                  partial(utils.full_process, force_ascii=True)]\n    splist = list(product(scorers, processors))\n    splist.extend(\n        [(fuzz.WRatio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.QRatio, partial(utils.full_process, force_ascii=True)),\n         (fuzz.UWRatio, partial(utils.full_process, force_ascii=False)),\n         (fuzz.UQRatio, partial(utils.full_process, force_ascii=False))]\n    )\n\n    return splist\n\n\n@pytest.mark.parametrize('scorer,processor',\n                         scorers_processors())\n@given(data=st.data())\n@settings(max_examples=20, deadline=5000)\ndef test_identical_strings_extracted(scorer, processor, data):\n    \"\"\"\n    Test that identical strings will always return a perfect match.\n\n    :param scorer:\n    :param processor:\n    :param data:\n    :return:\n    \"\"\"\n    # Draw a list of random strings\n    strings = data.draw(\n        st.lists(\n            st.text(min_size=10, max_size=100, alphabet=HYPOTHESIS_ALPHABET),\n            min_size=1,\n            max_size=10\n        )\n    )\n    # Draw a random integer for the index in that list\n    choiceidx = data.draw(st.integers(min_value=0, max_value=(len(strings) - 1)))\n\n    # Extract our choice from the list\n    choice = strings[choiceidx]\n\n    # Check process doesn't make our choice the empty string\n    assume(processor(choice) != '')\n\n    # Extract all perfect matches\n    result = process.extractBests(choice,\n                                  strings,\n                                  scorer=scorer,\n                                  processor=processor,\n                                  score_cutoff=100,\n                                  limit=None)\n\n    # Check we get a result\n    assert result != []\n\n    # Check the original is in the list\n    assert (choice, 100) in result\n\n\n@pytest.mark.parametrize('scorer,processor',\n                         full_scorers_processors())\n@given(data=st.data())\n@settings(max_examples=20, deadline=5000)\ndef test_only_identical_strings_extracted(scorer, processor, data):\n    \"\"\"\n    Test that only identical (post processing) strings score 100 on the test.\n\n    If two strings are not identical then using full comparison methods they should\n    not be a perfect (100) match.\n\n    :param scorer:\n    :param processor:\n    :param data:\n    :return:\n    \"\"\"\n    # Draw a list of random strings\n    strings = data.draw(\n        st.lists(\n            st.text(min_size=10, max_size=100, alphabet=HYPOTHESIS_ALPHABET),\n            min_size=1,\n            max_size=10)\n    )\n    # Draw a random integer for the index in that list\n    choiceidx = data.draw(st.integers(min_value=0, max_value=(len(strings) - 1)))\n\n    # Extract our choice from the list\n    choice = strings[choiceidx]\n\n    # Check process doesn't make our choice the empty string\n    assume(processor(choice) != '')\n\n    # Extract all perfect matches\n    result = process.extractBests(choice,\n                                  strings,\n                                  scorer=scorer,\n                                  processor=processor,\n                                  score_cutoff=100,\n                                  limit=None)\n\n    # Check we get a result\n    assert result != []\n\n    # Check THE ONLY result(s) we get are a perfect match for the (processed) original data\n    pchoice = processor(choice)\n    for r in result:\n        assert pchoice == processor(r[0])\n"
        },
        {
          "name": "test_fuzzywuzzy_pytest.py",
          "type": "blob",
          "size": 0.484375,
          "content": "from fuzzywuzzy import process\n\n\ndef test_process_warning(capsys):\n    \"\"\"Check that a string reduced to 0 by processor logs a warning to stderr\"\"\"\n\n    query = ':::::::'\n    choices = [':::::::']\n\n    _ = process.extractOne(query, choices)\n\n    out, err = capsys.readouterr()\n\n    outstr = (\"WARNING:root:Applied processor reduces \"\n              \"input query to empty string, \"\n              \"all comparisons will have score 0. \"\n              \"[Query: ':::::::']\\n\")\n\n    assert err == outstr\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.1689453125,
          "content": "[tox]\nenvlist = py27, py34, py35, py36, pypy, pypy3\nskip_missing_interpreters = True\n\n[testenv]\ndeps = pytest==3.2.5\n       pycodestyle\n       hypothesis\ncommands = py.test\n"
        }
      ]
    }
  ]
}