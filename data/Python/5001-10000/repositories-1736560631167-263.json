{
  "metadata": {
    "timestamp": 1736560631167,
    "page": 263,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "taojy123/KeymouseGo",
      "stars": 7723,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7353515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nvenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\nscripts/\n\n.idea/\n\n# Custom configue file\n*.ini\nplugins/\nlogs/\n!assets/\n"
        },
        {
          "name": "Event",
          "type": "tree",
          "content": null
        },
        {
          "name": "Internationalizing.pro",
          "type": "blob",
          "size": 0.1494140625,
          "content": "SOURCES         = UIView.py UIFileDialogView.py\nFORMS           = UIView.ui UIFileDialogView.ui\nTRANSLATIONS    = assets/i18n/en.ts assets/i18n/zh-cn.ts\n"
        },
        {
          "name": "KeymouseGo.py",
          "type": "blob",
          "size": 4.5380859375,
          "content": "import os\nimport sys\nimport math\nfrom PySide6.QtWidgets import QApplication, QWidget, QSpinBox\nfrom PySide6.QtCore import Qt, Slot, QRect\n\nimport UIFunc\nimport argparse\nfrom Event import ScriptEvent\nfrom loguru import logger\n\nfrom assets.plugins.ProcessException import *  # noqa: F403\n\n\ndef add_lib_path(libpaths):\n    for libpath in libpaths:\n        if os.path.exists(libpath) and (libpath not in sys.path):\n            sys.path.append(libpath)\n\n\ndef to_abs_path(*args):\n    return os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), *args)\n\n\nadd_lib_path([os.path.join(to_abs_path('plugins'))])\n\n\ndef resize_layout(ui, ratio_w, ratio_h):\n    ui.resize(ui.width() * ratio_w, ui.height() * ratio_h)\n\n    for q_widget in ui.findChildren(QWidget):\n        q_widget.setGeometry(QRect(q_widget.x() * ratio_w,\n                                   q_widget.y() * ratio_h,\n                                   q_widget.width() * ratio_w,\n                                   q_widget.height() * ratio_h))\n        q_widget.setStyleSheet('font-size: ' + str(\n                                math.ceil(9 * min(ratio_h, ratio_w))) + 'px')\n        if isinstance(q_widget, QSpinBox):\n            q_widget.setStyleSheet('padding-left: 7px')\n\n\ndef main():\n\n    app = QApplication(sys.argv)\n    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)\n    ui = UIFunc.UIFunc(app)\n\n    ui.setFixedSize(ui.width(), ui.height())\n    ui.show()\n    sys.exit(app.exec())\n\n\n@logger.catch\ndef single_run(script_path, run_times=1, speed=100, module_name='Extension'):\n    @Slot(ScriptEvent)\n    def on_keyboard_event(event):\n        key_name = event.action[1].lower()\n        stop_name = 'f9'\n        if key_name == stop_name:\n            logger.debug('break exit!')\n            os._exit(0)\n        return True\n\n    UIFunc.Recorder.setuphook(commandline=True)\n    UIFunc.Recorder.set_callback(on_keyboard_event)\n\n    try:\n        for path in script_path:\n            logger.info('Script path:%s' % path)\n            events, smodule_name, labeldict = UIFunc.RunScriptClass.parsescript(path, \n                                                                     speed=speed)\n            extension = UIFunc.RunScriptClass.getextension(\n                smodule_name if smodule_name is not None else module_name,\n                runtimes=run_times,\n                speed=speed)\n            j = 0\n            extension.onbeginp()\n            while j < extension.runtimes or extension.runtimes == 0:\n                logger.info('=========== %d ===========' % j)\n                try:\n                    if extension.onbeforeeachloop(j):\n                        UIFunc.RunScriptClass.run_script_once(events, extension, labeldict=labeldict)\n                    extension.onaftereachloop(j)\n                    j += 1\n                except BreakProcess:\n                    logger.debug('Break')\n                    j += 1\n                    continue\n                except EndProcess:\n                    logger.debug('End')\n                    break\n            extension.onendp()\n            logger.info('%s run finish' % path)\n        logger.info('Scripts run finish!')\n    except Exception as e:\n        logger.error(e)\n        raise e\n    finally:\n        os._exit(0)\n\n\nif __name__ == '__main__':\n    logger.debug(sys.argv)\n    if len(sys.argv) > 1:\n        parser = argparse.ArgumentParser()\n        parser.add_argument('scripts',\n                            help='Path for the scripts',\n                            type=str,\n                            nargs='+'\n                            )\n        parser.add_argument('-rt', '--runtimes',\n                            help='Run times for the script',\n                            type=int,\n                            default=1\n                            )\n        parser.add_argument('-sp', '--speed',\n                            help='Run speed for the script, input in percentage form',\n                            type=int,\n                            default=100\n                            )\n        parser.add_argument('-m', '--module',\n                            help='Extension for the program',\n                            type=str,\n                            default='Extension'\n                            )\n        args = vars(parser.parse_args())\n        logger.debug(args)\n        if args['speed'] <= 0:\n            logger.warning('Unsupported speed')\n        else:\n            single_run(args['scripts'],\n                       run_times=args['runtimes'],\n                       speed=args['speed'],\n                       module_name=args['module']\n                       )\n    else:\n        main()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.6044921875,
          "content": "GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n"
        },
        {
          "name": "Mondrian.ico",
          "type": "blob",
          "size": 98.2890625,
          "content": null
        },
        {
          "name": "Mondrian.png",
          "type": "blob",
          "size": 0.181640625,
          "content": null
        },
        {
          "name": "Preview.png",
          "type": "blob",
          "size": 17.0458984375,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.212890625,
          "content": "<div align=\"center\">\n\n# KeymouseGo\n\n<br>\n<img src=\"Preview.png\" width=\"50%\" height=\"50%\" />\n\n<div>\n    <img alt=\"platform\" src=\"https://img.shields.io/badge/platform-Windows%20%7C%20Linux%20%7C%20macOS-blueviolet\">\n</div>\n<div>\n    <img alt=\"license\" src=\"https://img.shields.io/github/license/taojy123/KeymouseGo\">\n    <img alt=\"language\" src=\"https://img.shields.io/badge/python-%3E%3D%203.7-green\">\n    <img alt=\"stars\" src=\"https://img.shields.io/github/stars/taojy123/KeymouseGo?style=social\">\n</div>\n\n<br>\n\n[简体中文](README.md) | [English](README_en-US.md)\n\n</div>\n\n功能：记录用户的鼠标键盘操作，通过触发按钮自动执行之前记录的操作，可设定执行的次数，可以理解为 `精简绿色版` 的 `按键精灵`。\n\n用途：在进行某些操作简单、单调重复的工作时，使用本软件就可以很省力了。自己只要做一遍，然后接下来就让电脑来做。\n\n\n# 目录\n\n+ [安装](#安装)\n+ [使用方法](#使用方法)\n  + [基本操作](#基本操作)\n  + [提示](#提示)\n  + [脚本语法说明](#脚本语法说明)\n  + [自定义扩展](#自定义扩展)\n+ [关于作者](#关于作者)\n+ [开源贡献者](#开源贡献者)\n+ [更新说明](#更新说明)\n\n# 安装\n\n该软件通过 `Python` 语言编写，已打包为可执行文件，未安装 `Python` 的用户可直接下载 [release](https://github.com/taojy123/KeymouseGo/releases) 版本 ，直接点击 `KeymouseGo` 运行\n\n### 源码打包可执行文件\n\n+ Windows\n```\n1. 安装 Python3\n2. pip install -r requirements-windows.txt\n3. pip install pyinstaller\n4. pyinstaller -F -w --add-data \"./assets;assets\" KeymouseGo.py\n```\n\n+ Linux或Mac\n```\n1. 安装 Python3\n2. pip3 install -r requirements-universal.txt\n3. pip3 install pyinstaller\n4. pyinstaller -F -w --add-data \"./assets:assets\" KeymouseGo.py\n```\n\n# 使用方法\n\n## 基本操作\n\n### 桌面模式\n\n1、点击 `录制` 按钮，开始录制。\n\n2、在计算机上进行任意操作，如点击鼠标、键盘输入，这部分的动作会被记录下来。\n\n3、点击 `结束` 按钮，结束录制。\n\n4、点击 `启动` 按钮，计算机会重复执行一遍第2步中所录制的动作。\n\n### 命令行模式\n\n直接运行指定脚本:\n```\n> ./KeymouseGo scripts/0314_1452.txt\n```\n\n运行指定脚本3次:\n```\n> ./KeymouseGo scripts/0314_1452.txt -rt 3\n> ./KeymouseGo scripts/0314_1452.txt --runtimes 3\n```\n\n以200%的速度运行指定脚本:\n```\n> ./KeymouseGo scripts/0314_1452.txt -sp 200\n> ./KeymouseGo scripts/0314_1452.txt --speed 200\n```\n\n加载自定义扩展`MyExtension`运行指定脚本:\n```\n> ./KeymouseGo scripts/0314_1452.txt -m MyExtension\n> ./KeymouseGo scripts/0314_1452.txt --module MyExtension\n```\n\n## 提示\n\n1、可设置脚本重复执行的次数，如果为 `0` 即为无限循环。\n\n2、默认启动热键为 `F6`，功能等同于 `启动` 按钮；默认终止热键为 `F9`，按下后将会停止正在运行的脚本。\n\n3、录制时只记录鼠标点击动作和键盘动作，不记录鼠标移动轨迹。\n\n4、每次录制结束后都会在 `scripts` 目前下生成一个新的脚本文件。\n\n5、运行前可以在列表中选择一个需要执行的脚本。\n\n6、`scripts` 下的脚本文件内容可以修改，修改时可参考如下所述 `脚本格式说明`。\n\n7、热键设置中的`Middle`指代鼠标中键，`XButton`指代鼠标侧键\n\n8、由于程序速度受限，当输入的鼠标速度大于一定值时脚本将无法以预期的输入速度执行\n\n部分系统环境中，可能出现无法录制完整的鼠标事件的情况，请以管理员身份/root身份运行此工具即可正常使用。\n\n使用Mac的用户，需要确保程序在辅助功能白名单，如果使用打包的exec文件，则还需要确保终端也在辅助功能白名单。 如果app程序闪退，请尝试给予`~/.qt_material`目录下文件的写权限:\n```bash\nchmod -R 770 ~/.qt_material\n```\n\n## 脚本语法说明\n> 演示屏幕分辨率为`1920 * 1080`\n\n```\n[\n [3000, \"EM\", \"mouse right down\", [\"0.05208%\", \"0.1852%\"]],    // 开始运行 `3000ms` 后，在屏幕相对坐标 `(0.05208, 0.1852)`即 `(100,200)` 处 `按下鼠标右键`；\n [50,   \"EM\", \"mouse right up\",   [\"0.05208%\", \"0.1852%\"]],    // 等待 `50ms` 后在相同位置 `抬起鼠标右键`；\n [1000, \"EK\", \"key down\",         [70, \"F\", 0]],                                   // 等待 `1000ms` 后 `按下f键`；\n [50,   \"EK\", \"key up\",           [70, \"F\", 0]],                                   // 等待 `50ms` 后 `抬起f键`；\n [100,  \"EM\", \"mouse left down\",  [\"0.2604%\", \"0.4630%\"]],      // 等待 `100ms` 后，在屏幕相对坐标 `(0.2604, 0.4630)`即 `(500, 500)` 处 `按下鼠标左键`；\n [100,  \"EM\", \"mouse move\",       [\"0.2604%\", \"0.5556%\"]],       // 等待 `100ms` 后，鼠标移动至相对坐标 `(0.2604, 0.5556)`即 `(500, 600)` 位置；\n [100,  \"EM\", \"mouse left up\",  [\"0.3125%\", \"0.5556%\"]],                   // 等待 `100ms` 后，在屏幕相对坐标 `(0.3125, 0.5556)`即 `(600, 600)` 处 `抬起鼠标左键`；\n [100,  \"EX\", \"input\",            \"你好 world\"],                                   // 等待 `100ms` 后，在当前位置输入 `你好 world` 文字。\n]\n```\n\n脚本为 `json` 格式，每一行代表一次动作：\n+ 每行的第 1 个元素表示时间间隔，指的是本次动作与上一次动作之间相隔的时间，单位为毫秒。\n+ 每行的第 2 个元素表示鼠标动作或是键盘动作：`EM` 为鼠标，`EK` 为键盘，`EX` 为其他拓展动作。\n+ 每行的第 3 个元素表示动作的类型：\n  + `mouse left down` 为鼠标左键按下，`mouse left up` 为鼠标左键抬起，\n  + `mouse right down` 为鼠标右键按下，`mouse right up` 为鼠标右键抬起，\n  + `mouse middle down` 为鼠标中键按下， `mouse middle up` 为鼠标中键抬起，\n  + `mouse wheel up` 为鼠标滚轮上滑， `mouse wheel down` 为鼠标滚轮下滑，\n  + `key down` 为键盘按键按下，`key up` 为键盘按键抬起，\n  + `mouse move` 为鼠标滑过，`input` 输入文字。\n+ 每行的第 4 个元素表示具体的动作参数\n  + 当为鼠标动作时，由两个子元素构成，分别为鼠标所在的屏幕位置的横纵坐标，\n  + 当为键盘动作时，由三个子元素构成，分别是（按键编号, 按键名, 拓展标记)，\n  + 当为输入文字动作时，为要输入的文字内容。\n+ 每行 `//` 后的部分为注释内容。\n+ 修改时请严格遵守格式，否则可能导致脚本无法运行，建议修改前先备份一下。\n+ 横纵坐标为[-1, -1]时，表示在鼠标当前所在位置执行操作。\n\n\n## 自定义扩展\n\n功能的使用详见[wiki](https://github.com/taojy123/KeymouseGo/wiki/文档#扩展)\n\n\n# 关于作者\n\n我是陶佳元，热爱代码，怀旧，在互联网上常用的 ID 有 taojy123 、tao.py。\n\n我的个人站点 [tslow.cn](https://tslow.cn) 整理并罗列了一些 `个人项目` 和 `小工具` 合集。\n\n你可以在 [简书](http://jianshu.tslow.cn) 浏览我最新发布的文章，还可以在 [B站](https://space.bilibili.com/145137942) 观看我的技术分享和生活纪实。\n\n我的邮箱: taojy123@163.com\n\n----------------------\n\n# 开源贡献者\n\n如果您是开发爱好者，并对本项目感兴趣，欢迎参与项目的共同建设，您可以通过本项目的[**dev**](https://github.com/taojy123/KeymouseGo/tree/dev)分支查看目前的进度，并且可以向本项目的[**dev**](https://github.com/taojy123/KeymouseGo/tree/dev)分支提交 Pull request 来贡献代码。\n\n在此，特别感谢积极贡献者：\n\n<a href=\"https://github.com/Monomux\"><img src=\"https://avatars.githubusercontent.com/u/70839036?s=80&v=4\" height=\"80\"></a>\n<a href=\"https://github.com/ZutJoe\"><img src=\"https://avatars.githubusercontent.com/u/54732130?s=80&v=4\" height=\"80\"></a>\n\n\n感谢 JetBrains 免费提供开发工具\n\n<a href=\"https://www.jetbrains.com/?from=KeymouseGo\"><img src=\"https://raw.githubusercontent.com/taojy123/KeymouseGo/master/jetbrains-variant-2.png\" height=\"80\"></a>\n\n----------------------\n\n# 更新说明\n\n暂时没法打包 `x86` 版本，32 位系统的同学请自行源码编译，或 [下载v1.5老版本](https://github.com/taojy123/KeymouseGo/releases/tag/v1.5) 使用\n\n## v5.1\n\n+ 支持在Linux和Mac环境下运行\n+ 支持在多屏环境下运行(仅Windows)\n+ 修复程序在执行连点操作时有概率崩溃的问题\n+ 修复文件选择器选择脚本后选项卡未更新的问题\n\n## v5.0\n\n+ 初步实现自定义扩展功能\n+ 可调整提示音音量\n+ 增加脚本重命名/编辑子窗口\n+ 添加英文文档\n+ 增加简单日志窗口\n+ 适应高分辨率(在高分辨率情况下放大窗口)\n\n## v4.1\n\n+ 添加 命令行运行能力\n\n\n## v4.0\n\n+ 使用 PySide2 重写 UI\n+ 快捷键支持鼠标中键与侧键\n+ 相关 issue 提出的功能需求实现\n+ 4.0 代码基本由 <a href=\"https://github.com/Monomux\">Monomux</a> 贡献，KeymouseGo 的整体品质有了较大提升。感谢付出！\n  \n\n## v3.2.2\n\n+ 修复了 input 事件无法输入内容的 bug\n\n## v3.2.1\n\n+ 修复了中文注释无法解析的 bug\n\n\n## v3.2\n\n+ 脚本文件中可使用 `//` 进行内容注释\n+ 可录制鼠标轨迹（`mouse move` 事件），并可在软件中设置轨迹精度，填 0 即不录制轨迹。\n\n\n## v3.1\n\n针对这个 issue(https://github.com/taojy123/KeymouseGo/issues/39) 增加了两个功能点\n\n+ 命令行启动模式中可以随时按下 `F9` 热键，来终止脚本运行\n+ 模拟鼠标点击的脚本语句中可以设定坐标点为 `[-1, -1]`, 用以表示在鼠标当前位置直接点击\n\n\n## v3.0\n\n因为兼容 macOS 遇到的很大的阻碍，最终放弃跨平台，血泪史可参看这两个 issue:\nhttps://github.com/taojy123/KeymouseGo/issues/24\nhttps://github.com/moses-palmer/pynput/issues/55\n\n+ 改回使用 `win32api` 来模拟事件，只支持 windows 系统\n+ 解决了 `shift` + `上下左右` 的回放问题，见 https://github.com/taojy123/KeymouseGo/issues/27\n+ 增加了录制鼠标路径功能，需求来源 https://github.com/taojy123/KeymouseGo/issues/33\n+ 增加了文字输入功能，需求来源 https://github.com/taojy123/KeymouseGo/issues/34\n+ 因为使用了 `win32api`，不需要再手动设置屏幕缩放比例了\n+ 录制脚本语法有部分改动，不向前兼容\n\n\n## v2.2\n+ 优化了脚本格式，将动作时间间隔，放到每行脚本的首位，逻辑更加合理\n+ 默认录制的第一个动作不加时间间隔，即按下启动按钮后立即执行第一个动作\n+ 如果重复多次执行，可修改脚本中第一个动作的时间（单位毫秒）来决定每轮动作之间的相隔时间\n\n\n## v2.1\n+ 增加了屏幕缩放配置，兼容了修改过屏幕缩放比例的 win10 系统\n+ 优化代码，兼容 `Python3`\n\n## v2.0\n+ 代码优化重构\n+ 使用 `pynput` 实现动作捕捉和执行，不再需要安装 `pywin32` 和 `pyhook`\n+ 兼容 macOS (需要在隐私设置中允许程序控制电脑)\n+ `pynput` 似乎不兼容 WinXP，暂时没法打包 `x86` 版本\n\n## v1.5\n+ 修复自定义缩放后录制定位偏移 Bug\n\n## v1.4\n+ 增加命令行运行方式\n\n## v1.3\n+ Bug 修复\n\n## v1.2\n+ UI 更新\n+ 移除了 `后台模式`\n+ 简化了录制脚本，增强了可读性\n+ 脚本文件名优化，可录制多个脚本，避免误操作覆盖了辛辛苦苦录制的脚本\n+ 可自定义 `启动热键` 和 `终止热键`\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "README_en-US.md",
          "type": "blob",
          "size": 8.046875,
          "content": "<div align=\"center\">\n\n# KeymouseGo\n\n<br>\n<img src=\"Preview.png\" width=\"50%\" height=\"50%\" />\n<div>\n    <img alt=\"platform\" src=\"https://img.shields.io/badge/platform-Windows%20%7C%20Linux%20%7C%20macOS-blueviolet\">\n</div>\n<div>\n    <img alt=\"license\" src=\"https://img.shields.io/github/license/taojy123/KeymouseGo\">\n    <img alt=\"language\" src=\"https://img.shields.io/badge/python-%3E%3D%203.7-green\">\n    <img alt=\"stars\" src=\"https://img.shields.io/github/stars/taojy123/KeymouseGo?style=social\">\n</div>\n<br>\n\n[简体中文](README.md) | [English](README_en-US.md)\n\n</div>\n\nFeatures:\n  + Record mouse/keyboard operations\n  + Reproduce operations recorded before\n  + Can be regarded as simplified *Quick Macro*\n\nUsage:\n  + Free users away from works that are simple and repetitive\n  + You can record the necessary operations once and left the rest of works to computer\n\n\n# Table of content\n\n- [KeymouseGo](#keymousego)\n- [Table of content](#table-of-content)\n- [Installation](#installation)\n    - [Bundle with source code](#bundle-with-source-code)\n- [Usage](#usage)\n  - [Basic operation](#basic-operation)\n    - [Desktop mode](#desktop-mode)\n    - [Command line mode](#command-line-mode)\n  - [Tips](#tips)\n  - [Grammar of scripts](#grammar-of-scripts)\n  - [Extensions](#extensions)\n- [About me](#about-me)\n- [Contributors](#contributors)\n\n# Installation\n\nThis program is written in `Python` and packed as executable file. You can download [release version](https://github.com/taojy123/KeymouseGo/releases) directly without installation of Python.\n\n### Bundle with source code\n\n+ Windows\n```\n1. Install Python 3\n2. pip install -r requirements-windows.txt\n3. pip install pyinstaller\n4. pyinstaller -F -w --add-data \"./assets;assets\" KeymouseGo.py\n```\n\n+ Linux or Mac\n```\n1. Install Python 3\n2. pip3 install -r requirements-universal.txt\n3. pip3 install pyinstaller\n4. pyinstaller -F -w --add-data \"./assets:assets\" KeymouseGo.py\n```\n\n# Usage\n\n## Basic operation\n\n### Desktop mode\n\n1. Click `Record` button to start recording\n\n2. Do anything like clicking mouse or tapping keyboard, which will be recorded\n\n3. Click `Finish` button to stop recording\n\n4. Click `Launch` button to reproduce the operation recorded in step 2\n\n### Command line mode\n\nRun specific script\n```\n> ./KeymouseGo scripts/0314_1452.txt\n```\n\nRun specific script for 3 times\n```\n> ./KeymouseGo scripts/0314_1452.txt -rt 3\n> ./KeymouseGo scripts/0314_1452.txt --runtimes 3\n```\n\nRun specific script at the speed of 200%\n```\n> ./KeymouseGo scripts/0314_1452.txt -sp 200\n> ./KeymouseGo scripts/0314_1452.txt --speed 200\n```\n\nRun specific script with extension `MyExtension`\n```\n> ./KeymouseGo scripts/0314_1452.txt -m MyExtension\n> ./KeymouseGo scripts/0314_1452.txt --module MyExtension\n```\n\n## Tips\n\n1. The program will endlessly run the script if run times is set to `0`\n\n2. The default launch hotkey is `F6`, which functions the same as the launch button. The default stop hotkey is `F9`, which will terminate the running script\n\n3. Only mouse click operation and keyboard operation will be recorded. Mouse trail won't be recorded.\n\n4. A new script file will be generated in directory `scripts` at the end of recording.\n\n5. You can choose the script to run in choice list.\n\n6. The content of script can be edited with reference of `Grammar of script`.\n\n7. In hotkey setting, `Middle` refers mouse middle button and `XButton` refers mouse side button.\n\n8. Due to the limitation of execution speed, the running speed cannot be set too high.\n\nIn some system environment, there may be circumstances that the mouse events cannot be fully recorded. To settle this, you can run this program as administrator/root.\n\nFor mac users, make sure that application must be white listed under Enable access for assistive devices. You may also need to whitelist terminal application if running from terminal. If the app crashes, you may try to give write permission for directory `~/.qt_material`.\n```bash\nchmod -R 770 ~/.qt_material\n```\n\n## Grammar of scripts\n> Assume that the resolution of screen is `1920 * 1080`\n\n```\n[\n [3000, \"EM\", \"mouse right down\", [\"0.05208%\", \"0.1852%\"]],    // Press mouse right button at the relative coordinates `(0.05208, 0.1852)`(i.e. absolute coordinates `(100,200)`) after 3000ms\n [50,   \"EM\", \"mouse right up\",   [\"0.05208%\", \"0.1852%\"]],    // Release mouse right button at the coordinates after 50ms\n [1000, \"EK\", \"key down\",         [70, \"F\", 0]],                                   // Press key 'f' after 1000ms\n [50,   \"EK\", \"key up\",           [70, \"F\", 0]],                                   // Release key 'f' after 50ms\n [100,  \"EM\", \"mouse left down\",  [\"0.2604%\", \"0.4630%\"]],      // Press mouse left button at the relative coordinates `(0.2604, 0.4630)`(i.e. absolute coordinates `(500,500)`) after 100ms\n [100,  \"EM\", \"mouse move\",       [\"0.2604%\", \"0.5556%\"]],       // Move mouse to the relative coordinates `(0.2604, 0.4630)`(i.e. absolute coordinates `(500,500)`) after 100ms\n [100,  \"EM\", \"mouse left up\",  [\"0.3125%\", \"0.5556%\"]],                   // Release mouse left button at the relative coordinates `(0.3125, 0.5556)`(i.e. absolute coordinates `(600,600)`) after 100ms\n [100,  \"EX\", \"input\",            \"Hello world\"],                                   // Input 'Hello world' at current coordinate after 100ms\n]\n```\n\nThe script is saved in `json` format, in which each line represents a operation\n+ The first element of each line is time interval(ms), indicating the interval to previous operation\n+ The second element of each line is operation type. `EM` represents mouse, `EK` represents keyboard, `EX` represents extended operation\n+ The third element of each line is detailed operation type, including\n  + `mouse left down` :press mouse left button `mouse left up` release mouse left button\n  + `mouse right down` press mouse right button`mouse right up` release mouse right button\n  + `mouse middle down` press mouse middle button `mouse middle up` release mouse middle button\n  + `mouse wheel up` mouse wheel slide up `mouse wheel down` mouse wheel slide down\n  + `key down` press key `key up` release key\n  + `mouse move` move mouse to `input` input text\n+ The fourth element of each line is action type\n  + If operation type is `EM`, it is consisted of coordinates of mouse.(Both relative coordinates and absolute coordinates are supported)\n  + If operation type is `EK`, it is consisted of coordinates of (key number, key name, extension flag)\n  + If detailed operation type is `Input`, it is the text to input\n+ In each line, comment can be added after `//`\n+ It is recommended to back up script before editing. And make sure to follow the format while editing, otherwise it may result in failure of execution.\n+ The mouse event will execute on the position that the cursor is currently in when the coordinate is set to [-1, -1]\n\n## Extensions\n\nThe usage of exetensions is illustrated in [wiki](https://github.com/taojy123/KeymouseGo/wiki/Document#extension)\n\n# About me\n\nI'm Tao Jiayuan, with commonly used id taojy123, tao.py on Internet\n\nMy personal site [tslow.cn](https://tslow.cn) organizes and lists a collection of 'personal projects' and 'gadgets'.\n\nYou can refer my newly published articles on [jianshu](http://jianshu.tslow.cn) and watch my technology sharing and life documentary on [bilibili](https://space.bilibili.com/145137942)\n\nMy Email: taojy123@163.com\n\n----------------------\n\n# Contributors\n\nIf you are a developer and interested in this project, you can check the progress in branch [**dev**](https://github.com/taojy123/KeymouseGo/tree/dev). and you are welcomed to participating by opening pull request to branch [**dev**](https://github.com/taojy123/KeymouseGo/tree/dev). \n\nThanks to contributor:\n\n<a href=\"https://github.com/Monomux\"><img src=\"https://avatars.githubusercontent.com/u/70839036?s=80&v=4\" height=\"80\"></a> \n<a href=\"https://github.com/ZutJoe\"><img src=\"https://avatars.githubusercontent.com/u/54732130?s=80&v=4\" height=\"80\"></a>\n\n\nThanks to free develop tool provided by JetBrains\n\n<a href=\"https://www.jetbrains.com/?from=KeymouseGo\"><img src=\"https://raw.githubusercontent.com/taojy123/KeymouseGo/master/jetbrains-variant-2.png\" height=\"80\"></a>\n\n----------------------\n\n\n\n\n\n"
        },
        {
          "name": "Recorder",
          "type": "tree",
          "content": null
        },
        {
          "name": "UIFileDialogFunc.py",
          "type": "blob",
          "size": 3.7255859375,
          "content": "import os\nimport re\nimport platform\nimport subprocess\n\nfrom PySide6.QtCore import QCoreApplication\nfrom PySide6.QtWidgets import QDialog, QFileDialog, QInputDialog\nfrom PySide6.QtWidgets import QMainWindow, QMessageBox\n\nfrom UIFileDialogView import Ui_Dialog\nfrom UIFunc import scripts, scripts_map\n\nfrom KeymouseGo import to_abs_path\n\n\nclass FileDialog(Ui_Dialog):\n    def __init__(self):\n        self.dialog = QDialog()\n        self.setupUi(self.dialog)\n        self.dialog.setFixedSize(self.dialog.width(), self.dialog.height())\n        self.choice.clicked.connect(self.choice_file)\n        self.edit.clicked.connect(self.edit_file)\n        self.rename.clicked.connect(self.rename_file)\n\n        self.main_window = QMainWindow()\n        self.filename = scripts[scripts_map['current_index']]\n        self.lineEdit.setText(self.filename)\n        self.path = os.path.join(to_abs_path(\"scripts\"))\n        \n        self.dialog.setWindowTitle(QCoreApplication.translate('Dialog', 'File Manage', None))\n        self.file_name.setText(QCoreApplication.translate('Dialog', 'file name', None))\n        self.choice.setText(QCoreApplication.translate('Dialog', 'choice', None))\n        self.edit.setText(QCoreApplication.translate('Dialog', 'edit', None))\n        self.rename.setText(QCoreApplication.translate('Dialog', 'rename', None))\n    \n\n    def choice_file(self):\n        file = QFileDialog.getOpenFileName(self.main_window, \"选择文件\", dir=to_abs_path('scripts'), filter='*.txt')[0]\n        file_name = re.split(r'\\\\|\\/', file)[-1]\n        if file_name != '':\n            scripts_map['current_index'] = scripts_map[file_name]\n            if file_name.strip() != '' and file_name is not None:\n                self.lineEdit.setText(file_name)\n\n\n    def edit_file(self):\n        user_platform = platform.system()\n        try:\n            if user_platform == 'Linux':\n                subprocess.call(['xdg-open', os.path.join(self.path, self.lineEdit.text())])\n            elif user_platform == 'Darwin':\n                # mac\n                subprocess.call(['open', os.path.join(self.path, self.lineEdit.text())])\n            else:\n                os.startfile(os.path.join(self.path, self.lineEdit.text()))\n        except FileNotFoundError:\n            QMessageBox().warning(self.main_window, \"warning\", QCoreApplication.translate('Dialog', 'FNF', None))\n            self.lineEdit.setText('')\n\n\n    def rename_file(self):\n        new_file_name = str(QInputDialog.getText(self.main_window, \n                                                 QCoreApplication.translate('Dialog', 'rename', None), \n                                                 QCoreApplication.translate('Dialog', 'PINFN', None))[0])\n\n        if new_file_name != None and new_file_name.strip() != '':\n            if not new_file_name.endswith('.txt'):\n                new_file_name = new_file_name + '.txt'\n\n            try:\n                os.rename(os.path.join(self.path, self.lineEdit.text()), os.path.join(self.path, new_file_name))\n                QMessageBox().information(self.main_window, 'info', QCoreApplication.translate('Dialog', 'Success', None))\n                # 更新\n                filename = self.lineEdit.text()\n                index = scripts_map.get(filename)\n                scripts_map.pop(filename)\n                scripts_map[new_file_name] = index\n                scripts[index] = new_file_name\n                self.lineEdit.setText(new_file_name)\n            except FileNotFoundError:\n                QMessageBox.warning(self.main_window, 'warning', QCoreApplication.translate('Dialog', 'FNF', None))\n        else:\n            QMessageBox.warning(self.main_window, 'warning', QCoreApplication.translate('Dialog', 'FNCBEOS', None))\n\n\n    def show(self):\n        self.dialog.show()\n        self.dialog.exec_()\n        \n"
        },
        {
          "name": "UIFileDialogView.py",
          "type": "blob",
          "size": 2.96484375,
          "content": "# -*- coding: utf-8 -*-\n\n################################################################################\n## Form generated from reading UI file 'file_manage.ui'\n##\n## Created by: Qt User Interface Compiler version 5.15.2\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\n\nfrom PySide6.QtCore import *\nfrom PySide6.QtGui import *\nfrom PySide6.QtWidgets import *\n\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        if not Dialog.objectName():\n            Dialog.setObjectName(u\"Dialog\")\n        Dialog.resize(313, 111)\n        Dialog.setWindowTitle('File Manage')\n        icon = QIcon()\n        icon.addFile(u\":/pic/Mondrian.png\", QSize(), QIcon.Normal, QIcon.Off)\n        Dialog.setWindowIcon(icon)\n        self.formLayoutWidget = QWidget(Dialog)\n        self.formLayoutWidget.setObjectName(u\"formLayoutWidget\")\n        self.formLayoutWidget.setGeometry(QRect(10, 10, 291, 41))\n        self.formLayout = QFormLayout(self.formLayoutWidget)\n        self.formLayout.setObjectName(u\"formLayout\")\n        self.formLayout.setContentsMargins(0, 0, 0, 0)\n        self.file_name = QLabel(self.formLayoutWidget)\n        self.file_name.setObjectName(u\"file_name\")\n\n        self.formLayout.setWidget(0, QFormLayout.LabelRole, self.file_name)\n\n        self.lineEdit = QLineEdit(self.formLayoutWidget)\n        self.lineEdit.setObjectName(u\"lineEdit\")\n\n        self.formLayout.setWidget(0, QFormLayout.FieldRole, self.lineEdit)\n\n        self.horizontalLayoutWidget = QWidget(Dialog)\n        self.horizontalLayoutWidget.setObjectName(u\"horizontalLayoutWidget\")\n        self.horizontalLayoutWidget.setGeometry(QRect(10, 60, 291, 31))\n        self.horizontalLayout = QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setObjectName(u\"horizontalLayout\")\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.choice = QPushButton(self.horizontalLayoutWidget)\n        self.choice.setObjectName(u\"choice\")\n\n        self.horizontalLayout.addWidget(self.choice)\n\n        self.edit = QPushButton(self.horizontalLayoutWidget)\n        self.edit.setObjectName(u\"edit\")\n\n        self.horizontalLayout.addWidget(self.edit)\n\n        self.rename = QPushButton(self.horizontalLayoutWidget)\n        self.rename.setObjectName(u\"rename\")\n\n        self.horizontalLayout.addWidget(self.rename)\n\n\n        self.retranslateUi(Dialog)\n\n        QMetaObject.connectSlotsByName(Dialog)\n    # setupUi\n\n    def retranslateUi(self, Dialog):\n        Dialog.setWindowTitle(QCoreApplication.translate(\"Dialog\", u\"Dialog\", None))\n        self.file_name.setText(QCoreApplication.translate(\"Dialog\", u\"file name\", None))\n        self.lineEdit.setText(\"\")\n        self.choice.setText(QCoreApplication.translate(\"Dialog\", u\"choice\", None))\n        self.edit.setText(QCoreApplication.translate(\"Dialog\", u\"edit\", None))\n        self.rename.setText(QCoreApplication.translate(\"Dialog\", u\"rename\", None))\n    # retranslateUi\n\n"
        },
        {
          "name": "UIFileDialogView.ui",
          "type": "blob",
          "size": 1.8916015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ui version=\"4.0\">\n <class>Dialog</class>\n <widget class=\"QDialog\" name=\"Dialog\">\n  <property name=\"geometry\">\n   <rect>\n    <x>0</x>\n    <y>0</y>\n    <width>313</width>\n    <height>111</height>\n   </rect>\n  </property>\n  <property name=\"windowTitle\">\n   <string>File Manage</string>\n  </property>\n  <property name=\"windowIcon\">\n   <iconset resource=\"assets.qrc\">\n    <normaloff>:/pic/Mondrian.png</normaloff>:/pic/Mondrian.png</iconset>\n  </property>\n  <widget class=\"QWidget\" name=\"formLayoutWidget\">\n   <property name=\"geometry\">\n    <rect>\n     <x>10</x>\n     <y>10</y>\n     <width>291</width>\n     <height>41</height>\n    </rect>\n   </property>\n   <layout class=\"QFormLayout\" name=\"formLayout\">\n    <item row=\"0\" column=\"0\">\n     <widget class=\"QLabel\" name=\"file_name\">\n      <property name=\"text\">\n       <string>file name</string>\n      </property>\n     </widget>\n    </item>\n    <item row=\"0\" column=\"1\">\n     <widget class=\"QLineEdit\" name=\"lineEdit\">\n      <property name=\"text\">\n       <string/>\n      </property>\n     </widget>\n    </item>\n   </layout>\n  </widget>\n  <widget class=\"QWidget\" name=\"horizontalLayoutWidget\">\n   <property name=\"geometry\">\n    <rect>\n     <x>10</x>\n     <y>60</y>\n     <width>291</width>\n     <height>31</height>\n    </rect>\n   </property>\n   <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n    <item>\n     <widget class=\"QPushButton\" name=\"choice\">\n      <property name=\"text\">\n       <string>choice</string>\n      </property>\n     </widget>\n    </item>\n    <item>\n     <widget class=\"QPushButton\" name=\"edit\">\n      <property name=\"text\">\n       <string>edit</string>\n      </property>\n     </widget>\n    </item>\n    <item>\n     <widget class=\"QPushButton\" name=\"rename\">\n      <property name=\"text\">\n       <string>rename</string>\n      </property>\n     </widget>\n    </item>\n   </layout>\n  </widget>\n </widget>\n <resources/>\n <connections/>\n</ui>\n"
        },
        {
          "name": "UIFunc.py",
          "type": "blob",
          "size": 29.1142578125,
          "content": "# -*- encoding:utf-8 -*-\nimport datetime\nimport json\nimport os\nimport re\nimport sys\nimport threading\nimport traceback\nimport platform\nimport locale\nimport Recorder\nfrom importlib.machinery import SourceFileLoader\n\nfrom PySide6.QtGui import QTextCursor\nfrom qt_material import list_themes, QtStyleTools\nfrom PySide6.QtCore import *\nfrom PySide6.QtWidgets import QMainWindow, QApplication\nfrom PySide6.QtMultimedia import QSoundEffect\nfrom loguru import logger\n\nfrom Event import ScriptEvent, flag_multiplemonitor\nfrom UIView import Ui_UIView\nfrom assets.plugins.ProcessException import *\n\nfrom KeymouseGo import to_abs_path\n\nmutex = QMutex()\ncond = QWaitCondition()\n\nos.environ['QT_ENABLE_HIGHDPI_SCALING'] = \"1\"\nif platform.system() == 'Windows':\n    HOT_KEYS = ['F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12',\n                'XButton1', 'XButton2', 'Middle']\nelse:\n    HOT_KEYS = ['F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12',\n                'Middle']\n\nlogger.remove()\nif sys.stdout is not None:\n    logger.add(sys.stdout, backtrace=True, diagnose=True,\n               level='DEBUG')\nlogger.add(to_abs_path('logs', '{time}.log'), rotation='20MB', backtrace=True, diagnose=True,\n           level='INFO')\n\n\ndef get_assets_path(*paths):\n    # pyinstaller -F --add-data ./assets;assets KeymouseGo.py\n    try:\n        root = sys._MEIPASS\n    except:\n        root = os.getcwd()\n    return os.path.join(root, 'assets', *paths)\n\n\nscripts = []\nscripts_map = {'current_index': 0, 'choice_language': '简体中文'}\n\n\ndef get_script_list_from_dir():\n    global scripts\n\n    if not os.path.exists(to_abs_path('scripts')):\n        os.mkdir(to_abs_path('scripts'))\n    scripts = os.listdir(to_abs_path('scripts'))[::-1]\n    scripts = list(filter(lambda s: s.endswith('.txt'), scripts))\n\n\ndef update_script_map():\n    global scripts_map\n    \n    for (i, item) in enumerate(scripts):\n        scripts_map[item] = i\n\n\nclass UIFunc(QMainWindow, Ui_UIView, QtStyleTools):\n    def __init__(self, app):\n        global scripts\n\n        super(UIFunc, self).__init__()\n\n        logger.info('assets root:{0}'.format(get_assets_path()))\n\n        self.setupUi(self)\n\n        self.app = app\n\n        self.config = self.loadconfig()\n\n        self.setFocusPolicy(Qt.NoFocus)\n\n        self.trans = QTranslator(self)\n        self.choice_language.addItems(['简体中文', 'English'])\n        self.choice_language.currentTextChanged.connect(self.onchangelang)\n\n        # 获取默认的地区设置\n        language = '简体中文' if locale.getdefaultlocale()[0] == 'zh_CN' else 'English'\n        self.choice_language.setCurrentText(language)\n        self.onchangelang()\n\n        get_script_list_from_dir()\n        update_script_map()\n        self.scripts = scripts\n        self.choice_script.addItems(self.scripts)\n        if self.scripts:\n            self.choice_script.setCurrentIndex(0)\n\n        self.choice_extension.addItems(['Extension'])\n        if not os.path.exists(to_abs_path('plugins')):\n            os.mkdir(to_abs_path('plugins'))\n        for i in os.listdir(to_abs_path('plugins')):\n            if i[-3:] == '.py':\n                self.choice_extension.addItems([i[:-3]])\n\n        self.choice_theme.addItems(list_themes())\n        self.choice_start.addItems(HOT_KEYS)\n        self.choice_stop.addItems(HOT_KEYS)\n        self.choice_record.addItems(HOT_KEYS)\n        self.choice_start.setCurrentIndex(int(self.config.value(\"Config/StartHotKeyIndex\")))\n        self.choice_stop.setCurrentIndex(int(self.config.value(\"Config/StopHotKeyIndex\")))\n        self.choice_record.setCurrentIndex(int(self.config.value(\"Config/RecordHotKeyIndex\")))\n        self.stimes.setValue(int(self.config.value(\"Config/LoopTimes\")))\n        self.mouse_move_interval_ms.setValue(int(self.config.value(\"Config/Precision\")))\n        self.execute_speed.setValue(int(self.config.value(\"Config/ExecuteSpeed\")))\n        self.choice_extension.setCurrentText(self.config.value(\"Config/Extension\"))\n        self.choice_theme.setCurrentText(self.config.value(\"Config/Theme\"))\n        if self.config.value('Config/Script') is not None and self.config.value('Config/Script') in self.scripts:\n            self.choice_script.setCurrentText(self.config.value('Config/Script'))\n        self.choice_start.currentIndexChanged.connect(self.onconfigchange)\n        self.choice_stop.currentIndexChanged.connect(self.onconfigchange)\n        self.choice_record.currentIndexChanged.connect(self.onconfigchange)\n        self.stimes.valueChanged.connect(self.onconfigchange)\n        self.execute_speed.valueChanged.connect(self.onconfigchange)\n        self.mouse_move_interval_ms.valueChanged.connect(self.onconfigchange)\n        self.mouse_move_interval_ms.valueChanged.connect(Recorder.set_interval)\n        self.choice_extension.currentIndexChanged.connect(self.onconfigchange)\n        self.choice_theme.currentTextChanged.connect(self.onchangetheme)\n        self.choice_script.currentTextChanged.connect(self.onconfigchange)\n\n        self.onchangetheme()\n\n        self.textlog.textChanged.connect(lambda: self.textlog.moveCursor(QTextCursor.End))\n\n        # For tune playing\n        self.player = QSoundEffect()\n        self.volumeSlider.setValue(50)\n        self.volumeSlider.valueChanged.connect(\n            lambda: self.player.setVolume(\n                self.volumeSlider.value()/100.0))\n\n        self.running = False\n        self.recording = False\n        self.record = []\n\n        # for pause-resume feature\n        self.paused = False\n\n        # Pause-Resume Record\n        self.pauserecord = False\n\n        self.actioncount = 0\n\n        # For better thread control\n        self.runthread = None\n        self.is_broken_or_finish = True\n\n        self.btrun.clicked.connect(self.OnBtrunButton)\n        self.btrecord.clicked.connect(self.OnBtrecordButton)\n        self.btpauserecord.clicked.connect(self.OnPauseRecordButton)\n        self.bt_open_script_files.clicked.connect(self.OnBtOpenScriptFilesButton)\n        self.choice_record.installEventFilter(self)\n        self.choice_language.installEventFilter(self)\n        self.choice_stop.installEventFilter(self)\n        self.choice_script.installEventFilter(self)\n        self.choice_start.installEventFilter(self)\n        self.btrun.installEventFilter(self)\n        self.btrecord.installEventFilter(self)\n        self.btpauserecord.installEventFilter(self)\n        self.bt_open_script_files.installEventFilter(self)\n        self.choice_extension.installEventFilter(self)\n\n        self.extension = None\n\n        # 热键响应逻辑\n        def hotkeymethod(key_name):\n            start_index = self.choice_start.currentIndex()\n            stop_index = self.choice_stop.currentIndex()\n            record_index = self.choice_record.currentIndex()\n            # Predict potential conflict\n            if start_index == stop_index:\n                stop_index = (stop_index + 1) % len(HOT_KEYS)\n                self.choice_stop.setCurrentIndex(stop_index)\n            if start_index == record_index:\n                record_index = (record_index + 1) % len(HOT_KEYS)\n                if record_index == stop_index:\n                    record_index = (record_index + 1) % len(HOT_KEYS)\n                self.choice_record.setCurrentIndex(record_index)\n            start_name = HOT_KEYS[start_index].lower()\n            stop_name = HOT_KEYS[stop_index].lower()\n            record_name = HOT_KEYS[record_index].lower()\n\n            if key_name == start_name and not self.running and not self.recording:\n                logger.info('Script start')\n                self.textlog.clear()\n                self.runthread = RunScriptClass(self)\n                self.runthread.start()\n                self.is_broken_or_finish = False\n                logger.debug('{0} host start'.format(key_name))\n            elif key_name == start_name and self.running and not self.recording:\n                if self.paused:\n                    logger.info('Script resume')\n                    self.paused = False\n                    self.runthread.resume()\n                    logger.debug('{0} host resume'.format(key_name))\n                else:\n                    logger.info('Script pause')\n                    self.paused = True\n                    self.runthread.eventPause = True\n                    logger.debug('{0} host pause'.format(key_name))\n            elif key_name == stop_name and self.running and not self.recording:\n                logger.info('Script stop')\n                self.tnumrd.setText('broken')\n                self.is_broken_or_finish = True\n                if self.paused:\n                    self.paused = False\n                self.runthread.resume()\n                logger.debug('{0} host stop'.format(key_name))\n            elif key_name == stop_name and self.recording:\n                self.recordMethod()\n                logger.info('Record stop')\n                logger.debug('{0} host stop record'.format(key_name))\n            elif key_name == record_name and not self.running:\n                if not self.recording:\n                    self.recordMethod()\n                    # logger.info('Record start')\n                    logger.debug('{0} host start record'.format(key_name))\n                else:\n                    self.pauseRecordMethod()\n                    # logger.info('Record pause')\n                    logger.debug('{0} host pause record'.format(key_name))\n            return key_name in [start_name, stop_name, record_name]\n\n        @Slot(ScriptEvent)\n        def on_record_event(event: ScriptEvent):\n            # 判断mouse热键\n            if event.event_type == \"EM\":\n                name = event.message\n                if 'mouse x1 down' == name and hotkeymethod('xbutton1'):\n                    return\n                elif 'mouse x2 down' == name and hotkeymethod('xbutton2'):\n                    return\n                elif 'mouse middle down' == name and hotkeymethod('middle'):\n                    return\n            else:\n                key_name = event.action[1]\n                if event.message == 'key down':\n                    # listen for start/stop script\n                    # start_name = 'f6'  # as default\n                    # stop_name = 'f9'  # as default\n                    hotkeymethod(key_name.lower())\n                # 不录制热键\n                if key_name in HOT_KEYS:\n                    return\n            # 录制事件\n            if not (not self.recording or self.running or self.pauserecord):\n                if self.extension.onrecord(event, self.actioncount):\n                    if event.event_type == 'EM' and not flag_multiplemonitor:\n                        record = [event.delay, event.event_type, event.message]\n                        tx, ty = event.action\n                        record.append(['{0}%'.format(tx), '{0}%'.format(ty)])\n                    else:\n                        record = [event.delay, event.event_type, event.message,\n                                  event.action]\n                    if event.addon:\n                        record.append(event.addon)\n                    self.record.append(record)\n                    self.actioncount = self.actioncount + 1\n                    text = '%d actions recorded' % self.actioncount\n                    logger.debug('Recorded %s' % event)\n                    self.tnumrd.setText(text)\n        logger.debug('Initialize at thread ' + str(threading.currentThread()))\n        Recorder.setuphook()\n        Recorder.set_callback(on_record_event)\n        Recorder.set_interval(self.mouse_move_interval_ms.value())\n\n    def eventFilter(self, watched, event: QEvent):\n        et: QEvent.Type = event.type()\n        # print(event, et)\n        if et == QEvent.KeyPress or et == QEvent.KeyRelease:\n            return True\n        return super(UIFunc, self).eventFilter(watched, event)\n\n    def onconfigchange(self):\n        self.config.setValue(\"Config/StartHotKeyIndex\", self.choice_start.currentIndex())\n        self.config.setValue(\"Config/StopHotKeyIndex\", self.choice_stop.currentIndex())\n        self.config.setValue(\"Config/RecordHotKeyIndex\", self.choice_record.currentIndex())\n        self.config.setValue(\"Config/LoopTimes\", self.stimes.value())\n        self.config.setValue(\"Config/Precision\", self.mouse_move_interval_ms.value())\n        self.config.setValue(\"Config/ExecuteSpeed\", self.execute_speed.value())\n        self.config.setValue(\"Config/Extension\", self.choice_extension.currentText())\n        self.config.setValue(\"Config/Theme\", self.choice_theme.currentText())\n        self.config.setValue(\"Config/Script\", self.choice_script.currentText())\n\n    def onchangelang(self):\n        global scripts_map\n\n        if self.choice_language.currentText() == '简体中文':\n            self.trans.load(get_assets_path('i18n', 'zh-cn'))\n            _app = QApplication.instance()\n            _app.installTranslator(self.trans)\n            self.retranslateUi(self)\n        elif self.choice_language.currentText() == 'English':\n            self.trans.load(get_assets_path('i18n', 'en'))\n            _app = QApplication.instance()\n            _app.installTranslator(self.trans)\n            self.retranslateUi(self)\n        self.retranslateUi(self)\n\n    def onchangetheme(self):\n        self.apply_stylesheet(self.app, theme=self.choice_theme.currentText())\n        self.config.setValue(\"Config/Theme\", self.choice_theme.currentText())\n\n    def playtune(self, filename: str):\n        self.player.setSource(QUrl.fromLocalFile(get_assets_path('sounds', filename)))\n        self.player.play()\n\n    def closeEvent(self, event):\n        self.config.sync()\n        if self.running:\n            self.is_broken_or_finish = True\n            if self.paused:\n                self.paused = False\n            self.runthread.resume()\n        event.accept()\n\n    def loadconfig(self):\n        if not os.path.exists(to_abs_path('config.ini')):\n            with open(to_abs_path('config.ini'), 'w', encoding='utf-8') as f:\n                f.write('[Config]\\n'\n                        'StartHotKeyIndex=3\\n'\n                        'StopHotKeyIndex=6\\n'\n                        'RecordHotKeyIndex=7\\n'\n                        'LoopTimes=1\\n'\n                        'Precision=200\\n'\n                        'ExecuteSpeed=100\\n'\n                        'Language=zh-cn\\n'\n                        'Extension=Extension\\n'\n                        'Theme=light_cyan_500.xml\\n')\n        return QSettings(to_abs_path('config.ini'), QSettings.IniFormat)\n\n    def get_script_path(self):\n        i = self.choice_script.currentIndex()\n        if i < 0:\n            return ''\n        script = self.scripts[i]\n        path = os.path.join(to_abs_path('scripts'), script)\n        logger.info('Script path: {0}'.format(path))\n        return path\n\n    def new_script_path(self):\n        now = datetime.datetime.now()\n        script = '%s.txt' % now.strftime('%m%d_%H%M')\n        if script in self.scripts:\n            script = '%s.txt' % now.strftime('%m%d_%H%M%S')\n        self.scripts.insert(0, script)\n        update_script_map()\n        self.choice_script.clear()\n        self.choice_script.addItems(self.scripts)\n        self.choice_script.setCurrentIndex(0)\n        return self.get_script_path()\n\n    def pauseRecordMethod(self):\n        if self.pauserecord:\n            logger.info('Record resume')\n            self.pauserecord = False\n            self.btpauserecord.setText(QCoreApplication.translate(\"UIView\", 'Pause', None))\n        else:\n            logger.info('Record pause')\n            self.pauserecord = True\n            self.btpauserecord.setText(QCoreApplication.translate(\"UIView\", 'Continue', None))\n            self.tnumrd.setText('record paused')\n\n    def OnPauseRecordButton(self):\n        self.pauseRecordMethod()\n\n    def OnBtOpenScriptFilesButton(self):\n        global scripts_map\n\n        import UIFileDialogFunc\n\n        scripts_map['current_index'] = self.choice_script.currentIndex()\n        file_dialog = UIFileDialogFunc.FileDialog()\n        self.bt_open_script_files.setDisabled(True)\n        self.btrecord.setDisabled(True)\n        self.btrun.setDisabled(True)\n        file_dialog.show()\n        self.bt_open_script_files.setDisabled(False)\n        self.btrecord.setDisabled(False)\n        self.btrun.setDisabled(False)\n        # 重新设置的为点击按钮时, 所处的位置\n        self.choice_script.clear()\n        self.choice_script.addItems(scripts)\n        self.choice_script.setCurrentIndex(scripts_map['current_index'])\n\n    def recordMethod(self):\n        if self.recording:\n            logger.info('Record stop')\n            self.recording = False\n            output = json.dumps(self.record, indent=1, ensure_ascii=False)\n            output = output.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n            output = output.replace('\\n   ', '').replace('\\n  ', '')\n            output = output.replace('\\n ]', ']')\n            with open(self.new_script_path(), 'w', encoding='utf-8') as f:\n                f.write(output)\n            self.btrecord.setText(QCoreApplication.translate(\"UIView\", 'Record', None))\n            self.tnumrd.setText('finished')\n            self.record = []\n            self.btpauserecord.setEnabled(False)\n            self.btrun.setEnabled(True)\n            self.actioncount = 0\n            self.pauserecord = False\n            self.choice_script.setCurrentIndex(0)\n            self.btpauserecord.setText(QCoreApplication.translate(\"UIView\", 'Pause Record', None))\n        else:\n            self.extension = RunScriptClass.getextension(self.choice_extension.currentText(),\n                                                         runtimes=self.stimes.value(),\n                                                         speed=self.execute_speed.value())\n            logger.info('Record start')\n            self.textlog.clear()\n            self.recording = True\n            status = self.tnumrd.text()\n            if 'running' in status or 'recorded' in status:\n                return\n            self.btrecord.setText(QCoreApplication.translate(\"UIView\", 'Finish', None))\n            self.tnumrd.setText('0 actions recorded')\n            self.record = []\n            self.btpauserecord.setEnabled(True)\n            self.btrun.setEnabled(False)\n\n    def OnBtrecordButton(self):\n        if self.recording:\n            self.record = self.record[:-2]\n        self.recordMethod()\n\n    def OnBtrunButton(self):\n        logger.info('Script start')\n        logger.debug('Script start by btn')\n        self.textlog.clear()\n        self.runthread = RunScriptClass(self)\n        self.runthread.start()\n        self.is_broken_or_finish = False\n\n\nclass RunScriptClass(QThread):\n    logSignal = Signal(str)\n    tnumrdSignal = Signal(str)\n    btnSignal = Signal(bool)\n\n    def __init__(self, frame: UIFunc):\n        super().__init__()\n        logger.debug('Thread created at thread' + str(threading.currentThread()))\n        self.frame = frame\n        self.eventPause = False\n\n        # 更新控件的槽函数\n        self.logSignal.connect(frame.textlog.append)\n        self.tnumrdSignal.connect(frame.tnumrd.setText)\n        self.btnSignal.connect(frame.btrun.setEnabled)\n        self.btnSignal.connect(frame.btrecord.setEnabled)\n\n    def pause(self):\n        mutex.lock()\n        cond.wait(mutex)\n        mutex.unlock()\n\n    def sleep(self, msecs: int):\n        mutex.lock()\n        cond.wait(mutex, QDeadlineTimer(int(msecs)))\n        mutex.unlock()\n\n    def resume(self):\n        self.eventPause = False\n        mutex.lock()\n        cond.wakeAll()\n        mutex.unlock()\n\n    def wait_if_pause(self):\n        if self.eventPause:\n            self.pause()\n        else:\n            self.resume()\n\n    @logger.catch\n    def run(self):\n        status = self.frame.tnumrd.text()\n        if self.frame.running or self.frame.recording:\n            return\n\n        if 'running' in status or 'recorded' in status:\n            return\n\n        script_path = self.frame.get_script_path()\n        if not script_path:\n            self.tnumrdSignal.emit('script not found, please self.record first!')\n            logger.warning('Script not found, please record first!')\n            return\n\n        self.frame.running = True\n\n        self.btnSignal.emit(False)\n        try:\n            self.running_text = '%s running..' % script_path.split('/')[-1].split('\\\\')[-1]\n            self.tnumrdSignal.emit(self.running_text)\n            logger.info('%s running..' % script_path.split('/')[-1].split('\\\\')[-1])\n\n            # 解析脚本，返回事件集合与扩展类对象\n            logger.debug('Parse script..')\n            try:\n                events, module_name, labeldict = RunScriptClass.parsescript(script_path,\n                                                                            speed=self.frame.execute_speed.value())\n            except Exception as e:\n                logger.error(e)\n                self.logSignal.emit('==============\\nAn error occurred while parsing script')\n                self.logSignal.emit(str(e))\n                self.logSignal.emit('==============')\n            extension = RunScriptClass.getextension(\n                module_name if module_name is not None else self.frame.choice_extension.currentText(),\n                runtimes=self.frame.stimes.value(),\n                speed=self.frame.execute_speed.value(),\n                thd=self\n            )\n\n            self.j = 0\n            nointerrupt = True\n            logger.debug('Run script..')\n            extension.onbeginp()\n            self.frame.playtune('start.wav')\n            while (self.j < extension.runtimes or extension.runtimes == 0) and nointerrupt:\n                logger.debug('===========%d==============' % self.j)\n                current_status = self.frame.tnumrd.text()\n                if current_status in ['broken', 'finished']:\n                    self.frame.running = False\n                    break\n                self.tnumrdSignal.emit('{0}... Looptimes [{1}/{2}]'.format(\n                    self.running_text, self.j + 1, extension.runtimes))\n                try:\n                    if extension.onbeforeeachloop(self.j):\n                        nointerrupt = nointerrupt and RunScriptClass.run_script_once(events, extension, thd=self,\n                                                                                     labeldict=labeldict)\n                    else:\n                        nointerrupt = True\n                    extension.onaftereachloop(self.j)\n                    self.j += 1\n                except BreakProcess:\n                    logger.debug('Break')\n                    self.j += 1\n                    continue\n                except EndProcess:\n                    logger.debug('End')\n                    break\n            extension.onendp()\n            self.frame.playtune('end.wav')\n            if nointerrupt:\n                self.tnumrdSignal.emit('finished')\n                logger.info('Script run finish')\n            else:\n                logger.info('Script run interrupted')\n            self.frame.running = False\n\n        except Exception as e:\n            logger.error('Run error: {0}'.format(e))\n            traceback.print_exc()\n            self.logSignal.emit('==============\\nAn error occurred during runtime')\n            self.logSignal.emit(str(e))\n            self.logSignal.emit('==============')\n            self.logSignal.emit('failed')\n            self.frame.running = False\n        finally:\n            self.btnSignal.emit(True)\n\n    # 获取扩展实例\n    @classmethod\n    @logger.catch\n    def getextension(cls, module_name='Extension', runtimes=1, speed=100, thd=None, swap=None):\n        if module_name == 'Extension':\n            module = SourceFileLoader(module_name, get_assets_path('plugins', 'Extension.py')).load_module()\n        else:\n            module = SourceFileLoader(module_name,\n                                      os.path.join(to_abs_path('plugins', '%s.py' % module_name))).load_module()\n        module_cls = getattr(module, module_name)\n        logger.info('Load plugin class {0} in module {1}'.format(module_cls, module_name))\n        return module_cls(runtimes, speed, thd, swap)\n\n    # 解析脚本内容，转换为ScriptEvent集合\n    @classmethod\n    def parsescript(cls, script_path, speed=100):\n        content = ''\n        lines = []\n        try:\n            with open(script_path, 'r', encoding='utf8') as f:\n                lines = f.readlines()\n        except Exception as e:\n            logger.warning(e)\n            try:\n                with open(script_path, 'r', encoding='gbk') as f:\n                    lines = f.readlines()\n            except Exception as e:\n                logger.error(e)\n\n        for line in lines:\n            # 去注释\n            if '//' in line:\n                index = line.find('//')\n                line = line[:index]\n            # 去空字符\n            line = line.strip()\n            content += line\n\n        # 去最后一个元素的逗号（如有）\n        content = content.replace('],\\n]', ']\\n]').replace('],]', ']]')\n\n        logger.debug('Script content')\n        logger.debug(content)\n        s = json.loads(content)\n        steps = len(s)\n\n        events = []\n        startindex = 0\n        module_name = None\n        if steps >= 1 and re.match('\\[.+\\]', str(s[0])) is None:\n            module_name = s[0]\n            startindex = 1\n        numoflabels = 0\n        labeldict = {'Start': 0}\n        # 识别标签或脚本语句\n        for i in range(startindex, steps):\n            if type(s[i]) == str:\n                labeldict[s[i]] = i - numoflabels - startindex\n                numoflabels = numoflabels + 1\n            else:\n                delay = s[i][0] / (speed / 100)\n                event_type = s[i][1].upper()\n                message = s[i][2].lower()\n                action = s[i][3]\n                addon = None\n                if len(s[i]) > 4:\n                    addon = s[i][4]\n                events.append(ScriptEvent({\n                    'delay': delay,\n                    'event_type': event_type,\n                    'message': message,\n                    'action': action,\n                    'addon': addon\n                }))\n        return events, module_name, labeldict\n\n    @classmethod\n    def run_sub_script(cls, extension, scriptpath: str, subextension_name: str = 'Extension',\n                        runtimes: int = 1, speed: int = 100, thd=None, labeldict=None):\n        newevents, module_name, label_dict = RunScriptClass.parsescript(scriptpath, speed=speed)\n        if labeldict is None:\n            labeldict = label_dict\n        newextension = RunScriptClass.getextension(\n            module_name if module_name is not None else subextension_name,\n            runtimes=runtimes,\n            speed=speed,\n            swap=extension.swap,\n            thd=thd\n            )\n        logger.info('Script path:%s' % scriptpath)\n        k = 0\n        nointerrupt = True\n        while (k < newextension.runtimes or newextension.runtimes == 0) and nointerrupt:\n            logger.debug('========%d========' % k)\n            try:\n                if newextension.onbeforeeachloop(k):\n                    nointerrupt = nointerrupt and RunScriptClass.run_script_once(newevents, newextension, thd=thd, labeldict=labeldict)\n                newextension.onaftereachloop(k)\n                k += 1\n            except BreakProcess:\n                logger.debug('Break')\n                k += 1\n                continue\n            except EndProcess:\n                logger.debug('End')\n                break\n        newextension.onendp()\n        extension.swap = newextension.swap\n        if nointerrupt:\n            logger.info('Subscript run finish')\n        else:\n            logger.info('Subscript run interrupted at loop %d' % k)\n\n    # 执行集合中的ScriptEvent\n    @classmethod\n    def run_script_once(cls, events, extension, thd=None, labeldict=None):\n        steps = len(events)\n        i = 0\n        while i < steps:\n            if thd:\n                if thd.frame.is_broken_or_finish:\n                    logger.info('Broken at [%d/%d]' % (i, steps))\n                    return False\n                thd.wait_if_pause()\n                logger.trace(\n                    '%s  [%d/%d %d/%d] %d%%' % (thd.running_text, i + 1, steps, thd.j + 1, extension.runtimes, extension.speed))\n                thd.logSignal.emit('{0} [{1}/{2}]'.format(\n                            events[i].summarystr(), i + 1, steps))\n\n            event = events[i]\n\n            try:\n                flag = extension.onrunbefore(event, i)\n                if flag:\n                    logger.debug(event)\n                    event.execute(thd)\n                else:\n                    logger.debug('Skipped %d' % i)\n                extension.onrunafter(event, i)\n                i = i + 1\n            except JumpProcess as jp:\n                if labeldict is not None:\n                    index = labeldict.get(jp.index, None)\n                    if index is not None:\n                        logger.debug('Jump at label %s, i.e. line %i' % (jp.index, index))\n                        jp.index = index\n                    else:\n                        logger.error('Invalid Jump Label')\n                        raise Exception('Invalid Jump Label')\n                if jp.index < 0:\n                    logger.error('Jump index out of range: %d' % jp.index)\n                elif jp.index >= steps:\n                    logger.warning('Jump index exceed events range: %d/%d, ends current loop' % (jp.index, steps))\n                    break\n                else:\n                    i = jp.index\n                    if labeldict is None:\n                        logger.debug('Jump at %d' % i)\n                    continue\n        return True\n"
        },
        {
          "name": "UIView.py",
          "type": "blob",
          "size": 13.1416015625,
          "content": "# -*- coding: utf-8 -*-\n\n################################################################################\n## Form generated from reading UI file 'UIView.ui'\n##\n## Created by: Qt User Interface Compiler version 5.15.2\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\n\nfrom PySide6.QtCore import *\nfrom PySide6.QtGui import *\nfrom PySide6.QtWidgets import *\n\n\nclass Ui_UIView(object):\n    def setupUi(self, UIView):\n        if not UIView.objectName():\n            UIView.setObjectName(u\"UIView\")\n        UIView.resize(652, 476)\n        icon = QIcon()\n        icon.addFile(u\":/pic/Mondrian.png\", QSize(), QIcon.Normal, QIcon.Off)\n        UIView.setWindowIcon(icon)\n        self.centralwidget = QWidget(UIView)\n        self.centralwidget.setObjectName(u\"centralwidget\")\n        self.groupBox = QGroupBox(self.centralwidget)\n        self.groupBox.setObjectName(u\"groupBox\")\n        self.groupBox.setGeometry(QRect(370, 10, 271, 191))\n        self.gridLayout_3 = QGridLayout(self.groupBox)\n        self.gridLayout_3.setObjectName(u\"gridLayout_3\")\n        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)\n        self.choice_stop = QComboBox(self.groupBox)\n        self.choice_stop.setObjectName(u\"choice_stop\")\n        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.choice_stop.sizePolicy().hasHeightForWidth())\n        self.choice_stop.setSizePolicy(sizePolicy)\n\n        self.gridLayout_3.addWidget(self.choice_stop, 2, 1, 1, 1)\n\n        self.choice_extension = QComboBox(self.groupBox)\n        self.choice_extension.setObjectName(u\"choice_extension\")\n        sizePolicy.setHeightForWidth(self.choice_extension.sizePolicy().hasHeightForWidth())\n        self.choice_extension.setSizePolicy(sizePolicy)\n\n        self.gridLayout_3.addWidget(self.choice_extension, 4, 1, 1, 1)\n\n        self.label_stop = QLabel(self.groupBox)\n        self.label_stop.setObjectName(u\"label_stop\")\n\n        self.gridLayout_3.addWidget(self.label_stop, 2, 0, 1, 1)\n\n        self.label_language = QLabel(self.groupBox)\n        self.label_language.setObjectName(u\"label_language\")\n\n        self.gridLayout_3.addWidget(self.label_language, 3, 0, 1, 1)\n\n        self.choice_start = QComboBox(self.groupBox)\n        self.choice_start.setObjectName(u\"choice_start\")\n        sizePolicy.setHeightForWidth(self.choice_start.sizePolicy().hasHeightForWidth())\n        self.choice_start.setSizePolicy(sizePolicy)\n\n        self.gridLayout_3.addWidget(self.choice_start, 0, 1, 1, 1)\n\n        self.choice_record = QComboBox(self.groupBox)\n        self.choice_record.setObjectName(u\"choice_record\")\n        sizePolicy.setHeightForWidth(self.choice_record.sizePolicy().hasHeightForWidth())\n        self.choice_record.setSizePolicy(sizePolicy)\n\n        self.gridLayout_3.addWidget(self.choice_record, 1, 1, 1, 1)\n\n        self.label_record = QLabel(self.groupBox)\n        self.label_record.setObjectName(u\"label_record\")\n\n        self.gridLayout_3.addWidget(self.label_record, 1, 0, 1, 1)\n\n        self.choice_language = QComboBox(self.groupBox)\n        self.choice_language.setObjectName(u\"choice_language\")\n        sizePolicy.setHeightForWidth(self.choice_language.sizePolicy().hasHeightForWidth())\n        self.choice_language.setSizePolicy(sizePolicy)\n\n        self.gridLayout_3.addWidget(self.choice_language, 3, 1, 1, 1)\n\n        self.label_extension = QLabel(self.groupBox)\n        self.label_extension.setObjectName(u\"label_extension\")\n\n        self.gridLayout_3.addWidget(self.label_extension, 4, 0, 1, 1)\n\n        self.label_start_key = QLabel(self.groupBox)\n        self.label_start_key.setObjectName(u\"label_start_key\")\n\n        self.gridLayout_3.addWidget(self.label_start_key, 0, 0, 1, 1)\n\n        self.horizontalLayoutWidget = QWidget(self.centralwidget)\n        self.horizontalLayoutWidget.setObjectName(u\"horizontalLayoutWidget\")\n        self.horizontalLayoutWidget.setGeometry(QRect(10, 210, 361, 41))\n        self.horizontalLayout = QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setObjectName(u\"horizontalLayout\")\n        self.horizontalLayout.setSizeConstraint(QLayout.SetDefaultConstraint)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.btrecord = QPushButton(self.horizontalLayoutWidget)\n        self.btrecord.setObjectName(u\"btrecord\")\n        sizePolicy.setHeightForWidth(self.btrecord.sizePolicy().hasHeightForWidth())\n        self.btrecord.setSizePolicy(sizePolicy)\n\n        self.horizontalLayout.addWidget(self.btrecord)\n\n        self.btrun = QPushButton(self.horizontalLayoutWidget)\n        self.btrun.setObjectName(u\"btrun\")\n        sizePolicy.setHeightForWidth(self.btrun.sizePolicy().hasHeightForWidth())\n        self.btrun.setSizePolicy(sizePolicy)\n\n        self.horizontalLayout.addWidget(self.btrun)\n\n        self.btpauserecord = QPushButton(self.horizontalLayoutWidget)\n        self.btpauserecord.setObjectName(u\"btpauserecord\")\n        self.btpauserecord.setEnabled(False)\n        sizePolicy.setHeightForWidth(self.btpauserecord.sizePolicy().hasHeightForWidth())\n        self.btpauserecord.setSizePolicy(sizePolicy)\n\n        self.horizontalLayout.addWidget(self.btpauserecord)\n\n        self.verticalLayoutWidget = QWidget(self.centralwidget)\n        self.verticalLayoutWidget.setObjectName(u\"verticalLayoutWidget\")\n        self.verticalLayoutWidget.setGeometry(QRect(10, 260, 631, 161))\n        self.verticalLayout = QVBoxLayout(self.verticalLayoutWidget)\n        self.verticalLayout.setObjectName(u\"verticalLayout\")\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.tnumrd = QLabel(self.verticalLayoutWidget)\n        self.tnumrd.setObjectName(u\"tnumrd\")\n\n        self.verticalLayout.addWidget(self.tnumrd)\n\n        self.textlog = QTextEdit(self.verticalLayoutWidget)\n        self.textlog.setObjectName(u\"textlog\")\n        self.textlog.setEnabled(True)\n        sizePolicy.setHeightForWidth(self.textlog.sizePolicy().hasHeightForWidth())\n        self.textlog.setSizePolicy(sizePolicy)\n        self.textlog.setReadOnly(True)\n\n        self.verticalLayout.addWidget(self.textlog)\n\n        self.formLayoutWidget_3 = QWidget(self.centralwidget)\n        self.formLayoutWidget_3.setObjectName(u\"formLayoutWidget_3\")\n        self.formLayoutWidget_3.setGeometry(QRect(420, 220, 221, 31))\n        self.formLayout_3 = QFormLayout(self.formLayoutWidget_3)\n        self.formLayout_3.setObjectName(u\"formLayout_3\")\n        self.formLayout_3.setContentsMargins(0, 0, 0, 0)\n        self.label_volume = QLabel(self.formLayoutWidget_3)\n        self.label_volume.setObjectName(u\"label_volume\")\n\n        self.formLayout_3.setWidget(0, QFormLayout.LabelRole, self.label_volume)\n\n        self.volumeSlider = QSlider(self.formLayoutWidget_3)\n        self.volumeSlider.setObjectName(u\"volumeSlider\")\n        self.volumeSlider.setOrientation(Qt.Horizontal)\n\n        self.formLayout_3.setWidget(0, QFormLayout.FieldRole, self.volumeSlider)\n\n        self.groupBox_2 = QGroupBox(self.centralwidget)\n        self.groupBox_2.setObjectName(u\"groupBox_2\")\n        self.groupBox_2.setGeometry(QRect(10, 10, 348, 191))\n        self.gridLayout_4 = QGridLayout(self.groupBox_2)\n        self.gridLayout_4.setObjectName(u\"gridLayout_4\")\n        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)\n        self.choice_theme = QComboBox(self.groupBox_2)\n        self.choice_theme.setObjectName(u\"choice_theme\")\n        sizePolicy.setHeightForWidth(self.choice_theme.sizePolicy().hasHeightForWidth())\n        self.choice_theme.setSizePolicy(sizePolicy)\n\n        self.gridLayout_4.addWidget(self.choice_theme, 4, 1, 1, 1)\n\n        self.label_execute_interval = QLabel(self.groupBox_2)\n        self.label_execute_interval.setObjectName(u\"label_execute_interval\")\n\n        self.gridLayout_4.addWidget(self.label_execute_interval, 2, 0, 1, 1)\n\n        self.label_execute_speed = QLabel(self.groupBox_2)\n        self.label_execute_speed.setObjectName(u\"label_execute_speed\")\n\n        self.gridLayout_4.addWidget(self.label_execute_speed, 3, 0, 1, 1)\n\n        self.label_run_times = QLabel(self.groupBox_2)\n        self.label_run_times.setObjectName(u\"label_run_times\")\n\n        self.gridLayout_4.addWidget(self.label_run_times, 1, 0, 1, 1)\n\n        self.label_theme = QLabel(self.groupBox_2)\n        self.label_theme.setObjectName(u\"label_theme\")\n\n        self.gridLayout_4.addWidget(self.label_theme, 4, 0, 1, 1)\n\n        self.label_script = QLabel(self.groupBox_2)\n        self.label_script.setObjectName(u\"label_script\")\n\n        self.gridLayout_4.addWidget(self.label_script, 0, 0, 1, 1)\n\n        self.execute_speed = QSpinBox(self.groupBox_2)\n        self.execute_speed.setObjectName(u\"execute_speed\")\n        sizePolicy.setHeightForWidth(self.execute_speed.sizePolicy().hasHeightForWidth())\n        self.execute_speed.setSizePolicy(sizePolicy)\n        self.execute_speed.setMinimum(20)\n        self.execute_speed.setMaximum(500)\n        self.execute_speed.setValue(100)\n\n        self.gridLayout_4.addWidget(self.execute_speed, 3, 1, 1, 1)\n\n        self.mouse_move_interval_ms = QSpinBox(self.groupBox_2)\n        self.mouse_move_interval_ms.setObjectName(u\"mouse_move_interval_ms\")\n        sizePolicy.setHeightForWidth(self.mouse_move_interval_ms.sizePolicy().hasHeightForWidth())\n        self.mouse_move_interval_ms.setSizePolicy(sizePolicy)\n        self.mouse_move_interval_ms.setMinimum(1)\n        self.mouse_move_interval_ms.setMaximum(1000)\n        self.mouse_move_interval_ms.setValue(100)\n\n        self.gridLayout_4.addWidget(self.mouse_move_interval_ms, 2, 1, 1, 1)\n\n        self.stimes = QSpinBox(self.groupBox_2)\n        self.stimes.setObjectName(u\"stimes\")\n        sizePolicy.setHeightForWidth(self.stimes.sizePolicy().hasHeightForWidth())\n        self.stimes.setSizePolicy(sizePolicy)\n        self.stimes.setMaximum(99999)\n        self.stimes.setValue(1)\n\n        self.gridLayout_4.addWidget(self.stimes, 1, 1, 1, 1)\n\n        self.gridLayout = QGridLayout()\n        self.gridLayout.setObjectName(u\"gridLayout\")\n        self.gridLayout.setSizeConstraint(QLayout.SetMinimumSize)\n        self.choice_script = QComboBox(self.groupBox_2)\n        self.choice_script.setObjectName(u\"choice_script\")\n        sizePolicy.setHeightForWidth(self.choice_script.sizePolicy().hasHeightForWidth())\n        self.choice_script.setSizePolicy(sizePolicy)\n\n        self.gridLayout.addWidget(self.choice_script, 0, 0, 1, 1)\n\n        self.bt_open_script_files = QPushButton(self.groupBox_2)\n        self.bt_open_script_files.setObjectName(u\"bt_open_script_files\")\n        sizePolicy.setHeightForWidth(self.bt_open_script_files.sizePolicy().hasHeightForWidth())\n        self.bt_open_script_files.setSizePolicy(sizePolicy)\n\n        self.gridLayout.addWidget(self.bt_open_script_files, 0, 1, 1, 1)\n\n        self.gridLayout.setColumnStretch(0, 3)\n        self.gridLayout.setColumnStretch(1, 1)\n\n        self.gridLayout_4.addLayout(self.gridLayout, 0, 1, 1, 1)\n\n        UIView.setCentralWidget(self.centralwidget)\n        self.menubar = QMenuBar(UIView)\n        self.menubar.setObjectName(u\"menubar\")\n        self.menubar.setGeometry(QRect(0, 0, 652, 26))\n        UIView.setMenuBar(self.menubar)\n        self.statusbar = QStatusBar(UIView)\n        self.statusbar.setObjectName(u\"statusbar\")\n        UIView.setStatusBar(self.statusbar)\n\n        self.retranslateUi(UIView)\n\n        QMetaObject.connectSlotsByName(UIView)\n    # setupUi\n\n    def retranslateUi(self, UIView):\n        UIView.setWindowTitle(QCoreApplication.translate(\"UIView\", u\"KeymouseGo v5.1\", None))\n        self.groupBox.setTitle(QCoreApplication.translate(\"UIView\", u\"Hotkeys\", None))\n        self.label_stop.setText(QCoreApplication.translate(\"UIView\", u\"Terminate\", None))\n        self.label_language.setText(QCoreApplication.translate(\"UIView\", u\"Language\", None))\n        self.choice_start.setCurrentText(\"\")\n        self.label_record.setText(QCoreApplication.translate(\"UIView\", u\"Record/Pause\", None))\n        self.label_extension.setText(QCoreApplication.translate(\"UIView\", u\"Extension\", None))\n        self.label_start_key.setText(QCoreApplication.translate(\"UIView\", u\"Launch/Pause\", None))\n        self.btrecord.setText(QCoreApplication.translate(\"UIView\", u\"Record\", None))\n        self.btrun.setText(QCoreApplication.translate(\"UIView\", u\"Launch\", None))\n        self.btpauserecord.setText(QCoreApplication.translate(\"UIView\", u\"Pause Record\", None))\n        self.tnumrd.setText(QCoreApplication.translate(\"UIView\", u\"Ready...\", None))\n        self.label_volume.setText(QCoreApplication.translate(\"UIView\", u\"Volume\", None))\n        self.groupBox_2.setTitle(QCoreApplication.translate(\"UIView\", u\"Config\", None))\n        self.label_execute_interval.setText(QCoreApplication.translate(\"UIView\", u\"Mouse precision\", None))\n        self.label_execute_speed.setText(QCoreApplication.translate(\"UIView\", u\"Running speed(%)\", None))\n        self.label_run_times.setText(QCoreApplication.translate(\"UIView\", u\"Run times\", None))\n        self.label_theme.setText(QCoreApplication.translate(\"UIView\", u\"Theme\", None))\n        self.label_script.setText(QCoreApplication.translate(\"UIView\", u\"Script\", None))\n        self.bt_open_script_files.setText(QCoreApplication.translate(\"UIView\", u\"...\", None))\n    # retranslateUi\n\n"
        },
        {
          "name": "UIView.ui",
          "type": "blob",
          "size": 11.810546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ui version=\"4.0\">\n <class>UIView</class>\n <widget class=\"QMainWindow\" name=\"UIView\">\n  <property name=\"geometry\">\n   <rect>\n    <x>0</x>\n    <y>0</y>\n    <width>652</width>\n    <height>476</height>\n   </rect>\n  </property>\n  <property name=\"windowTitle\">\n   <string>KeymouseGo v5.1</string>\n  </property>\n  <property name=\"windowIcon\">\n   <iconset resource=\"assets.qrc\">\n    <normaloff>:/pic/Mondrian.png</normaloff>:/pic/Mondrian.png</iconset>\n  </property>\n  <widget class=\"QWidget\" name=\"centralwidget\">\n   <widget class=\"QGroupBox\" name=\"groupBox\">\n    <property name=\"geometry\">\n     <rect>\n      <x>370</x>\n      <y>10</y>\n      <width>271</width>\n      <height>191</height>\n     </rect>\n    </property>\n    <property name=\"title\">\n     <string>Hotkeys</string>\n    </property>\n    <layout class=\"QGridLayout\" name=\"gridLayout_3\">\n     <property name=\"leftMargin\">\n      <number>0</number>\n     </property>\n     <property name=\"topMargin\">\n      <number>0</number>\n     </property>\n     <property name=\"rightMargin\">\n      <number>0</number>\n     </property>\n     <property name=\"bottomMargin\">\n      <number>0</number>\n     </property>\n     <item row=\"2\" column=\"1\">\n      <widget class=\"QComboBox\" name=\"choice_stop\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n      </widget>\n     </item>\n     <item row=\"4\" column=\"1\">\n      <widget class=\"QComboBox\" name=\"choice_extension\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n      </widget>\n     </item>\n     <item row=\"2\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_stop\">\n       <property name=\"text\">\n        <string>Terminate</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"3\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_language\">\n       <property name=\"text\">\n        <string>Language</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"0\" column=\"1\">\n      <widget class=\"QComboBox\" name=\"choice_start\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"currentText\">\n        <string/>\n       </property>\n      </widget>\n     </item>\n     <item row=\"1\" column=\"1\">\n      <widget class=\"QComboBox\" name=\"choice_record\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n      </widget>\n     </item>\n     <item row=\"1\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_record\">\n       <property name=\"text\">\n        <string>Record/Pause</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"3\" column=\"1\">\n      <widget class=\"QComboBox\" name=\"choice_language\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n      </widget>\n     </item>\n     <item row=\"4\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_extension\">\n       <property name=\"text\">\n        <string>Extension</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"0\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_start_key\">\n       <property name=\"text\">\n        <string>Launch/Pause</string>\n       </property>\n      </widget>\n     </item>\n    </layout>\n   </widget>\n   <widget class=\"QWidget\" name=\"horizontalLayoutWidget\">\n    <property name=\"geometry\">\n     <rect>\n      <x>10</x>\n      <y>210</y>\n      <width>361</width>\n      <height>41</height>\n     </rect>\n    </property>\n    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n     <property name=\"sizeConstraint\">\n      <enum>QLayout::SetDefaultConstraint</enum>\n     </property>\n     <item>\n      <widget class=\"QPushButton\" name=\"btrecord\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"text\">\n        <string>Record</string>\n       </property>\n      </widget>\n     </item>\n     <item>\n      <widget class=\"QPushButton\" name=\"btrun\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"text\">\n        <string>Launch</string>\n       </property>\n      </widget>\n     </item>\n     <item>\n      <widget class=\"QPushButton\" name=\"btpauserecord\">\n       <property name=\"enabled\">\n        <bool>false</bool>\n       </property>\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"text\">\n        <string>Pause Record</string>\n       </property>\n      </widget>\n     </item>\n    </layout>\n   </widget>\n   <widget class=\"QWidget\" name=\"verticalLayoutWidget\">\n    <property name=\"geometry\">\n     <rect>\n      <x>10</x>\n      <y>260</y>\n      <width>631</width>\n      <height>161</height>\n     </rect>\n    </property>\n    <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n     <item>\n      <widget class=\"QLabel\" name=\"tnumrd\">\n       <property name=\"text\">\n        <string>Ready...</string>\n       </property>\n      </widget>\n     </item>\n     <item>\n      <widget class=\"QTextEdit\" name=\"textlog\">\n       <property name=\"enabled\">\n        <bool>true</bool>\n       </property>\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"readOnly\">\n        <bool>true</bool>\n       </property>\n      </widget>\n     </item>\n    </layout>\n   </widget>\n   <widget class=\"QWidget\" name=\"formLayoutWidget_3\">\n    <property name=\"geometry\">\n     <rect>\n      <x>420</x>\n      <y>220</y>\n      <width>221</width>\n      <height>31</height>\n     </rect>\n    </property>\n    <layout class=\"QFormLayout\" name=\"formLayout_3\">\n     <item row=\"0\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_volume\">\n       <property name=\"text\">\n        <string>Volume</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"0\" column=\"1\">\n      <widget class=\"QSlider\" name=\"volumeSlider\">\n       <property name=\"orientation\">\n        <enum>Qt::Horizontal</enum>\n       </property>\n      </widget>\n     </item>\n    </layout>\n   </widget>\n   <widget class=\"QGroupBox\" name=\"groupBox_2\">\n    <property name=\"geometry\">\n     <rect>\n      <x>10</x>\n      <y>10</y>\n      <width>348</width>\n      <height>191</height>\n     </rect>\n    </property>\n    <property name=\"title\">\n     <string>Config</string>\n    </property>\n    <layout class=\"QGridLayout\" name=\"gridLayout_4\">\n     <property name=\"leftMargin\">\n      <number>0</number>\n     </property>\n     <property name=\"topMargin\">\n      <number>0</number>\n     </property>\n     <property name=\"rightMargin\">\n      <number>0</number>\n     </property>\n     <property name=\"bottomMargin\">\n      <number>0</number>\n     </property>\n     <item row=\"4\" column=\"1\">\n      <widget class=\"QComboBox\" name=\"choice_theme\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n      </widget>\n     </item>\n     <item row=\"2\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_execute_interval\">\n       <property name=\"text\">\n        <string>Mouse precision</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"3\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_execute_speed\">\n       <property name=\"text\">\n        <string>Running speed(%)</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"1\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_run_times\">\n       <property name=\"text\">\n        <string>Run times</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"4\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_theme\">\n       <property name=\"text\">\n        <string>Theme</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"0\" column=\"0\">\n      <widget class=\"QLabel\" name=\"label_script\">\n       <property name=\"text\">\n        <string>Script</string>\n       </property>\n      </widget>\n     </item>\n     <item row=\"3\" column=\"1\">\n      <widget class=\"QSpinBox\" name=\"execute_speed\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"minimum\">\n        <number>20</number>\n       </property>\n       <property name=\"maximum\">\n        <number>500</number>\n       </property>\n       <property name=\"value\">\n        <number>100</number>\n       </property>\n      </widget>\n     </item>\n     <item row=\"2\" column=\"1\">\n      <widget class=\"QSpinBox\" name=\"mouse_move_interval_ms\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"minimum\">\n        <number>1</number>\n       </property>\n       <property name=\"maximum\">\n        <number>1000</number>\n       </property>\n       <property name=\"value\">\n        <number>100</number>\n       </property>\n      </widget>\n     </item>\n     <item row=\"1\" column=\"1\">\n      <widget class=\"QSpinBox\" name=\"stimes\">\n       <property name=\"sizePolicy\">\n        <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n         <horstretch>0</horstretch>\n         <verstretch>0</verstretch>\n        </sizepolicy>\n       </property>\n       <property name=\"maximum\">\n        <number>99999</number>\n       </property>\n       <property name=\"value\">\n        <number>1</number>\n       </property>\n      </widget>\n     </item>\n     <item row=\"0\" column=\"1\">\n      <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"3,1\">\n       <property name=\"sizeConstraint\">\n        <enum>QLayout::SetMinimumSize</enum>\n       </property>\n       <item row=\"0\" column=\"0\">\n        <widget class=\"QComboBox\" name=\"choice_script\">\n         <property name=\"sizePolicy\">\n          <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n           <horstretch>0</horstretch>\n           <verstretch>0</verstretch>\n          </sizepolicy>\n         </property>\n        </widget>\n       </item>\n       <item row=\"0\" column=\"1\">\n        <widget class=\"QPushButton\" name=\"bt_open_script_files\">\n         <property name=\"sizePolicy\">\n          <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Minimum\">\n           <horstretch>0</horstretch>\n           <verstretch>0</verstretch>\n          </sizepolicy>\n         </property>\n         <property name=\"text\">\n          <string>...</string>\n         </property>\n        </widget>\n       </item>\n      </layout>\n     </item>\n    </layout>\n   </widget>\n  </widget>\n  <widget class=\"QMenuBar\" name=\"menubar\">\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>\n     <y>0</y>\n     <width>652</width>\n     <height>26</height>\n    </rect>\n   </property>\n  </widget>\n  <widget class=\"QStatusBar\" name=\"statusbar\"/>\n </widget>\n <resources>\n  <include location=\"assets.qrc\"/>\n </resources>\n <connections/>\n</ui>\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "archived",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets.qrc",
          "type": "blob",
          "size": 0.0830078125,
          "content": "<RCC>\n  <qresource prefix=\"pic\">\n    <file>Mondrian.png</file>\n  </qresource>\n</RCC>\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets_rc.py",
          "type": "blob",
          "size": 1.7548828125,
          "content": "# Resource object code (Python 3)\n# Created by: object code\n# Created by: The Resource Compiler for Qt version 5.15.2\n# WARNING! All changes made in this file will be lost!\n\nfrom PySide2 import QtCore\n\nqt_resource_data = b\"\\\n\\x00\\x00\\x00\\xba\\\n\\x89\\\nPNG\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0dIHDR\\x00\\\n\\x00\\x00 \\x00\\x00\\x00 \\x08\\x06\\x00\\x00\\x00szz\\xf4\\\n\\x00\\x00\\x00\\x04sBIT\\x08\\x08\\x08\\x08|\\x08d\\x88\\\n\\x00\\x00\\x00qIDATX\\x85\\xed\\xd6;\\x0a\\x800\\\n\\x10E\\xd1{\\xc5\\x8d\\xb9r\\x97\\x16\\x0b\\xad$\\x8a\\x82:\\\n\\x16o\\xda\\x84pB2\\x1f\\x81Fa\\x8c\\x9c\\x08\\x04Z\\\n{\\xcf\\xa72\\xbcv\\xfa\\xc5\\x08 \\x80r\\x80\\xfc\\xa2\\x0e\\\n\\x1c\\xe4\\xba\\xfaX\\x1d\\xd0\\xde]S\\x07\\x02\\xd8>\\xe1w\\\na-`\\x9fQ\\xe9\\x86\\x01\\x04\\x10\\x00\\x5c(Dk\\x1b\\\n-\\x04\\xdc\\x1d\\x07\\x14\\x98;\\x0bS\\x7f\\x7f\\xf9\\x13\\x04\\x10\\\n@\\xf9X\\xbe\\x00\\xc9 \\x14K\\xc1<={\\x00\\x00\\x00\\\n\\x00IEND\\xaeB`\\x82\\\n\"\n\nqt_resource_name = b\"\\\n\\x00\\x03\\\n\\x00\\x00v\\xf3\\\n\\x00p\\\n\\x00i\\x00c\\\n\\x00\\x0c\\\n\\x06\\x0d\\xc0G\\\n\\x00M\\\n\\x00o\\x00n\\x00d\\x00r\\x00i\\x00a\\x00n\\x00.\\x00p\\x00n\\x00g\\\n\"\n\nqt_resource_struct = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x01\\x80\\x8e\\x02\\xff\\x81\\\n\"\n\nicon = b\"\\\niVBORw0KGgoAAAANSUhEUgAAAC\\\nAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAHFJREFUWIXt1j\\\nsKgDAQRdF7xY25cpcWC60kioI6Fm/ahHBCMh+BRmGMnAgEWnvPpzK8dv\\\nrFCCCAcoD8og4c5Lr6WB3Q3l1TBwLYPuF3YS1gn1HphgEEEABcKERrGy\\\n0E3B0HFJg7C1N/f/kTBBBA+Vi+AMkgFEvBPD17AAAAAElFTkSuQmCC\\\n\"\n\n\ndef qInitResources():\n    QtCore.qRegisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\n\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\n\nqInitResources()\n"
        },
        {
          "name": "buildcmd.txt",
          "type": "blob",
          "size": 0.0576171875,
          "content": " pyinstaller -Fw --add-data './assets;assets' KeymouseGo.py"
        },
        {
          "name": "jetbrains-variant-2.png",
          "type": "blob",
          "size": 148.1240234375,
          "content": null
        },
        {
          "name": "requirements-universal.txt",
          "type": "blob",
          "size": 0.12109375,
          "content": "# Python3.10\n\npynput==1.7.6\npyperclip==1.8.0\npyautogui==0.9.53\nfuture==0.18.3\nPySide6==6.4.3\nqt-material==2.11\nloguru==0.6.0"
        },
        {
          "name": "requirements-windows.txt",
          "type": "blob",
          "size": 0.119140625,
          "content": "# Python3.10\n\npywin32==302\npyWinhook==1.6.2\npyperclip==1.8.0\nfuture==0.18.3\nPySide6==6.4.3\nqt-material==2.11\nloguru==0.6.0"
        }
      ]
    }
  ]
}