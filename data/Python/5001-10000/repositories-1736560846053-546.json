{
  "metadata": {
    "timestamp": 1736560846053,
    "page": 546,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "snare/voltron",
      "stars": 6180,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.353515625,
          "content": "### Python ###\n*.py[cod]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n__pycache__\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.1767578125,
          "content": "language: python\n\nmatrix:\n  include:\n    - os: linux\n      sudo: required\n      dist: trusty\n      python: \"3.3\"\n    # - os: linux\n    #   sudo: required\n    #   dist: trusty\n    #   python: \"3.4\"\n    # - os: linux\n    #   sudo: required\n    #   dist: trusty\n    #   python: \"3.5\"\n    # - os: osx\n    #   osx_image: xcode7.2\n    #   language: generic\n\naddons:\n  apt:\n    packages:\n      - build-essential\n      - gdb\n\nbefore_install:\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update ; brew install python ; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update -qq ; sudo apt-get install lldb-3.4 ; fi\n\ninstall:\n  - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then pip install mock pexpect nose ; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then pip install mock pexpect nose  --user; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then pip install . ; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then pip install . --user; fi\n\nscript:\n  - python --version\n  - mkdir ~/.voltron\n  - echo '{\"general\":{\"debug_logging\":true}}' >~/.voltron/config\n  - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then python -m nose -sv tests/gdb_cli_tests.py ; fi\n  - python -m nose -sv tests/lldb_cli_tests.py\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 snare\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.61328125,
          "content": "Voltron\n=======\n\n[![build](https://travis-ci.org/snare/voltron.svg?branch=master)](https://travis-ci.org/snare/voltron/)\n\nVoltron is an extensible debugger UI toolkit written in Python. It aims to improve the user experience of various debuggers (LLDB, GDB, VDB and WinDbg) by enabling the attachment of utility views that can retrieve and display data from the debugger host. By running these views in other TTYs, you can build a customised debugger user interface to suit your needs.\n\nVoltron does not aim to be everything to everyone. It's not a wholesale replacement for your debugger's CLI. Rather, it aims to complement your existing setup and allow you to extend your CLI debugger as much or as little as you like. If you just want a view of the register contents in a window alongside your debugger, you can do that. If you want to go all out and have something that looks more like OllyDbg, you can do that too.\n\nBuilt-in views are provided for:\n\n- Registers\n- Disassembly\n- Stack\n- Memory\n- Breakpoints\n- Backtrace\n\nThe author's setup looks something like this:\n\n![voltron example LLDB](http://i.imgur.com/9nukztA.png)\n\nAny debugger command can be split off into a view and highlighted with a specified Pygments lexer:\n\n![command views](http://i.imgur.com/RbYQYXp.png)\n\nMore screenshots are [here](https://github.com/snare/voltron/wiki/Screenshots).\n\nSupport\n-------\n\nVoltron supports LLDB, GDB, VDB and WinDbg/CDB (via [PyKD](https://pykd.codeplex.com/)) and runs on macOS, Linux and Windows.\n\nWinDbg support is still fairly new, please [open an issue](https://github.com/snare/voltron/issues) if you have problems.\n\nThe following architectures are supported:\n\n|         | lldb | gdb | vdb | windbg |\n|---------|------|-----|-----|--------|\n| x86     | ✓    | ✓   | ✓   | ✓      |\n| x86_64  | ✓    | ✓   | ✓   | ✓      |\n| arm     | ✓    | ✓   | ✓   | ✗      |\n| arm64   | ✓    | ✗   | ✗   | ✗      |\n| powerpc | ✗    | ✓   | ✗   | ✗      |\n\nInstallation\n------------\n\n**Note:** Only macOS and Debian derivatives are fully supported by the install script. It should hopefully not fail on other Linux distros, but it won't try to install package dependencies. If you're using another distro, have a look at `install.sh` to work out what dependencies you might need to install before running it.\n\nDownload the source and run the install script:\n\n    $ git clone https://github.com/snare/voltron\n    $ cd voltron\n    $ ./install.sh\n\nBy default, the install script will install into the user's `site-packages` directory. If you want to install into the system `site-packages`, use the `-s` flag:\n\n    $ ./install.sh -s\n\nYou can also install into a virtual environment (for LLDB only) like this:\n\n    $ ./install.sh -v /path/to/venv -b lldb\n\nIf you are on Windows without a shell, have problems installing, or would prefer to install manually, please see the [manual installation documentation](https://github.com/snare/voltron/wiki/Installation).\n\nQuick Start\n-----------\n\n1. If your debugger has an init script (`.lldbinit` for LLDB or `.gdbinit` for GDB) configure it to load Voltron when it starts by sourcing the `entry.py` entry point script. The full path will be inside the `voltron` package. For example, on macOS it might be */Library/Python/2.7/site-packages/voltron/entry.py*. The `install.sh` script will add this to your `.gdbinit` or `.lldbinit` file automatically if it detects GDB or LLDB in your path.\n\n    LLDB:\n\n        command script import /path/to/voltron/entry.py\n\n    GDB:\n\n        source /path/to/voltron/entry.py\n\n2. Start your debugger and initialise Voltron manually if necessary.\n\n    On recent versions of LLDB you do not need to initialise Voltron manually:\n\n        $ lldb target_binary\n\n    On older versions of LLDB you need to call `voltron init` after you load the inferior:\n\n        $ lldb target_binary\n        (lldb) voltron init\n\n    GDB:\n\n        $ gdb target_binary\n\n    VDB:\n\n        $ ./vdbbin target_binary\n        > script /path/to/voltron/entry.py\n\n    WinDbg/CDB is only supported run via Bash with a Linux userland. The author tests with [Git Bash](https://git-for-windows.github.io) and [ConEmu](http://conemu.github.io). PyKD and Voltron can be loaded in one command when launching the debugger:\n\n        $ cdb -c '.load C:\\path\\to\\pykd.pyd ; !py --global C:\\path\\to\\voltron\\entry.py' target_binary\n\n3. In another terminal (I use iTerm panes) start one of the UI views. On LLDB, WinDbg and GDB the views will update immediately. On VDB they will not update until the inferior stops (at a breakpoint, after a step, etc):\n\n        $ voltron view register\n        $ voltron view stack\n        $ voltron view disasm\n        $ voltron view backtrace\n\n4. Set a breakpoint and run your inferior.\n\n        (*db) b main\n        (*db) run\n\n5. When the debugger hits the breakpoint, the views will be updated to reflect the current state of registers, stack, memory, etc. Views are updated after each command is executed in the debugger CLI, using the debugger's \"stop hook\" mechanism. So each time you step, or continue and hit a breakpoint, the views will update.\n\nDocumentation\n-------------\n\nSee the [wiki](https://github.com/snare/voltron/wiki) on github.\n\nFAQ\n---\n\n**Q.** Why am I getting an `ImportError` loading Voltron?\n\n**A.** You might have multiple versions of Python installed and have installed Voltron using the wrong one. See the more detailed [installation instructions](https://github.com/snare/voltron/wiki/Installation).\n\n**Q.** [GEF](https://github.com/hugsy/gef)? [PEDA](https://github.com/longld/peda)? [PwnDbg](https://github.com/pwndbg/pwndbg)? [fG's gdbinit](https://github.com/gdbinit/gdbinit)?\n\n**A.** All super great extensions for GDB. These tools primarily provide sets of additional commands for exploitation tasks, but each also provides a \"context\" display with a view of registers, stack, code, etc, like Voltron. These tools print their context display in the debugger console each time the debugger stops. Voltron takes a different approach by embedding an RPC server implant in the debugger and enabling the attachment of views from other terminals (or even web browsers, or now [synchronising with Binary Ninja](https://github.com/snare/binja)), which allows the user to build a cleaner multi-window interface to their debugger. Voltron works great alongside all of these tools. You can just disable the context display in your GDB extension of choice and hook up some Voltron views, while still getting all the benefits of the useful commands added by these tools.\n\nBugs and Errata\n---------------\n\nSee the [issue tracker](https://github.com/snare/voltron/issues) on github for more information or to submit issues.\n\nIf you're experiencing an `ImportError` loading Voltron, please ensure you've followed the [installation instructions](https://github.com/snare/voltron/wiki/Installation) for your platform.\n\n### LLDB\n\nOn older versions of LLDB, the `voltron init` command must be run manually after loading the debug target, as a target must be loaded before Voltron's hooks can be installed. Voltron will attempt to automatically register its event handler, and it will inform the user if `voltron init` is required.\n\n### WinDbg\n\nMore information about WinDbg/CDB support [here](https://github.com/snare/voltron/wiki/Installation#windbg).\n\n### Misc\n\nThe authors primarily use Voltron with the most recent version of LLDB on macOS. We will try to test everything on as many platforms and architectures as possible before releases, but LLDB/macOS/x64 is going to be by far the most frequently-used combination. Hopefully Voltron doesn't set your pets on fire, but YMMV.\n\nLicense\n-------\n\nSee the [LICENSE](https://github.com/snare/voltron/blob/master/LICENSE) file.\n\nIf you use this and don't hate it, buy me a beer at a conference some time. This license also extends to other contributors - [richo](http://github.com/richo) definitely deserves a few beers for his contributions.\n\nCredits\n-------\n\nThanks to my former employers Assurance and Azimuth Security for giving me time to spend working on this.\n\nProps to [richo](http://github.com/richo) for all his contributions to Voltron.\n\n[fG!](http://github.com/gdbinit)'s gdbinit was the original inspiration for this project.\n\nThanks to [Willi](http://github.com/williballenthin) for implementing the VDB support.\n\nVoltron now uses [Capstone](http://www.capstone-engine.org) for disassembly as well as the debugger hosts' internal disassembly mechanism. [Capstone](http://www.capstone-engine.org) is a powerful, open source, multi-architecture disassembler upon which the next generation of reverse engineering and debugging tools are being built. Check it out.\n\nThanks to [grazfather](http://github.com/grazfather) for ongoing contributions.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 10.2275390625,
          "content": "#!/bin/bash\n#\n# Install Voltron for whichever debuggers are detected (only GDB and LLDB so\n# far).\n#\n\nfunction usage {\n    cat <<END\nVoltron installer script.\n\nThis script will attempt to find GDB/LLDB, infer the correct Python to use, and\ninstall Voltron. By default it will attempt to detect a single version of each\nGDB  and LLDB, and will install into the user's site-packages directory. The\noptions below can be used to change this behaviour.\n\nUsage: ./install.sh [ -s -d -S ] [ -v virtualenv ] [ -b BACKEND ]\n  -s            Install to system's site-packages directory\n  -d            Install in developer mode (-e flag passed to pip)\n  -v venv       Install into a virtualenv (only for LLDB)\n  -b debugger   Select debugger backend (\"\", \"gdb\", \"lldb\", or \"gdb,lldb\") for\n                which to install\n  -S            Skip package manager (apt/yum) update\nEND\n    exit 1\n}\n\nGDB=$(command -v gdb)\nLLDB=$(command -v lldb)\nAPT_GET=$(command -v apt-get)\nYUM_YUM=$(command -v yum)\nYUM_DNF=$(command -v dnf)\n\n# Default to --user install without sudo\nUSER_MODE='--user'\nSUDO=''\n\n#Old versions of pip default to pypi.python.org and fail to install anything\nPYPI_URL=\"https://pypi.org/simple\"\nPIP_MIN_VER=\"10.0\"\nPIP_BOOTSTRAP_URL=\"https://bootstrap.pypa.io/get-pip.py\"\n\n[[ -z \"${GDB}\" ]]\nBACKEND_GDB=$?\n[[ -z \"${LLDB}\" ]]\nBACKEND_LLDB=$?\n\nif [ -z \"${LLDB}\" ]; then\n    for i in `seq 6 8`; do\n        LLDB=$(command -v lldb-3.$i)\n        if [ -n \"${LLDB}\" ]; then\n            break\n        fi\n    done\nfi\n\nwhile getopts \":dsSb:v:\" opt; do\n  case $opt in\n    s)\n      USER_MODE=''\n      SUDO=$(command -v sudo)\n      ;;\n    d)\n      DEV_MODE=\"-e\"\n      ;;\n    v)\n      VENV=\"${OPTARG}\"\n      USER_MODE=''\n      SUDO=''\n      ;;\n    S)\n      SKIP_UPDATE='-s'\n      ;;\n    b)\n      [[ ! \"${OPTARG}\" =~ \"gdb\" ]]\n      BACKEND_GDB=$?\n      \n      [[ ! \"${OPTARG}\" =~ \"lldb\" ]]\n      BACKEND_LLDB=$?\n      ;;\n    \\?)\n      usage\n      ;;\n  esac\ndone\n\nif [ \"${BACKEND_GDB}\" -eq 1 ] && [ -z \"${GDB}\" ]; then\n    echo \"Requested to install voltron for gdb, but gdb not present on the system\"\n    exit 1\nfi\nif [ \"${BACKEND_LLDB}\" -eq 1 ] && [ -z \"${LLDB}\" ]; then\n    echo \"Requested to install voltron for lldb, but lldb not present on the system\"\n    exit 1\nfi\n\nfunction quit {\n    if [ $# -gt 1 ];\n    then\n        echo \"$1\"\n        shift\n    fi\n    exit $1\n}\n\nset -ex\n\nfunction install_apt {\n    if [ -n \"${APT_GET}\" ]; then\n        if [ -z \"${SKIP_UPDATE}\" ]; then\n            sudo apt-get update\n        fi\n        if echo $PYVER|grep \"3\\.\"; then\n            sudo apt-get -y install libreadline6-dev python3-dev python3-setuptools python3-yaml python3-pip\n        else\n            sudo apt-get -y install libreadline6-dev python-dev python-setuptools python-yaml python-pip\n        fi\n    fi\n}\n\nfunction install_yum {\n    local CMD=\"\"\n    if [ -n \"${YUM_DNF}\" ]; then\n        CMD=$YUM_DNF\n    else\n        if [ -n \"${YUM_YUM}\" ]; then\n            CMD=$YUM_YUM\n\tfi\n    fi\n\n    if [ \"${CMD}\" != \"\" ]; then\n        local PARAMS=\"--assumeyes\"\n        if [ -z \"${SKIP_UPDATE}\" ]; then\n            PARAMS=\"$PARAMS --refresh\"\n        fi\n\n        if echo $PYVER|grep \"3\\.\"; then\n            sudo $CMD $PARAMS install readline-devel python3-devel python3-setuptools python3-yaml python3-pip\n        else\n            sudo $CMD $PARAMS install readline-devel python-devel python-setuptools python-yaml python-pip\n        fi\n    fi\n}\n\nfunction install_packages {\n    install_apt\n    install_yum\n}\n\nfunction curl_get_pip {\n    echo \"Attempting to curl pip bootstrapt script from $PIP_BOOTSTRAP_URL\"\n    curl \"$PIP_BOOTSTRAP_URL\" | ${SUDO} ${LLDB_PYTHON} - --upgrade \"$USER_MODE\" || return $?\n}\n\nfunction ensure_pip {\n    # Check if pip is installed already\n    ${LLDB_PYTHON} -m pip --version >/dev/null 2>&1\n    if [ $? -ne 0 ];\n    then\n        # If not, attempt to install it using ensurepip\n        echo \"Attempting to install pip using 'ensurepip'.\"\n        ${SUDO} ${LLDB_PYTHON} -m ensurepip $USER_MODE || return $?\n    fi\n    # Some really old pip installations default to the old pypi.python.org, which no longer works.\n    echo \"Attempting to upgrade pip.\"\n    ${SUDO} ${LLDB_PYTHON} -m pip install \"pip>=$PIP_MIN_VER\" $USER_MODE -U --index-url \"$PYPI_URL\"\n    if [ $? != 0 ];\n    then\n        # We may still fail here due to TLS incompatibility\n        # TLS 1.x got turned off 2018-04-11\n        # https://status.python.org/incidents/hdx7w97m5hr8\n        # Curl may be new enough to support TLS 1.2, so try to curl the pip installer from pypa.io\n        # It's able to download and install pip without TLS errors somehow\n        echo \"Failed to upgrade pip.\"\n        echo \"Attempting to fall back to installation via curl.\"\n        curl_get_pip || return $?\n    fi\n}\n\nfunction get_lldb_python_exe {\n    # Find the Python version used by LLDB\n    local lldb_pyver=$(${LLDB} -Q -x -b --one-line 'script import platform; print(\".\".join(platform.python_version_tuple()[:2]))'|tail -1)\n    local lldb_python=$(${LLDB} -Q -x -b --one-line 'script import sys; print(sys.executable)'|tail -1)\n    \n    lldb_python=$(${LLDB} -Q -x -b --one-line 'script import sys; print(sys.executable)'|tail -1)\n    local lldb_python_basename=$(basename \"${lldb_python}\")\n    if [ \"python\" = \"$lldb_python_basename\" ];\n    then\n        lldb_python=\"${lldb_python/%$lldb_pyver/}${lldb_pyver}\"\n    elif [ \"lldb\" = \"$lldb_python_basename\" ];\n    then\n        # newer lldb versions report sys.path as /path/to/lldb instead of python\n        # sys.exec_path still appears to be the parent path of bin/python though\n        local lldb_python_exec_prefix=$(${LLDB} -Q -x -b --one-line 'script import sys; print(sys.exec_prefix)'|tail -1)\n        lldb_python=\"$lldb_python_exec_prefix/bin/python\"\n        lldb_python=\"${lldb_python/%$lldb_pyver/}${lldb_pyver}\"\n    fi\n\n    echo \"$lldb_python\"\n\n}\n\nif [ \"${BACKEND_GDB}\" -eq 1 ]; then\n    # Find the Python version used by GDB\n    GDB_PYVER=$(${GDB} -batch -q --nx -ex 'pi import platform; print(\".\".join(platform.python_version_tuple()[:2]))')\n    GDB_PYTHON=$(${GDB} -batch -q --nx -ex 'pi import sys; print(sys.executable)')\n    GDB_PYTHON=\"${GDB_PYTHON/%$GDB_PYVER/}${GDB_PYVER}\"\n\n    install_packages\n\n    if [ -z $USER_MODE ]; then\n        GDB_SITE_PACKAGES=$(${GDB} -batch -q --nx -ex 'pi import site; print(site.getsitepackages()[0])')\n    else\n        GDB_SITE_PACKAGES=$(${GDB} -batch -q --nx -ex 'pi import site; print(site.getusersitepackages())')\n    fi\n\n    # Install Voltron and dependencies\n    ${SUDO} ${GDB_PYTHON} -m pip install -U $USER_MODE $DEV_MODE .\n\n    # Add Voltron to gdbinit\n    GDB_INIT_FILE=\"${HOME}/.gdbinit\"\n    if [ -e ${GDB_INIT_FILE} ]; then\n        sed -i.bak '/voltron/d' ${GDB_INIT_FILE}\n    fi\n\n    if [ -z $DEV_MODE ]; then\n        GDB_ENTRY_FILE=\"$GDB_SITE_PACKAGES/voltron/entry.py\"\n    else\n        GDB_ENTRY_FILE=\"$(pwd)/voltron/entry.py\"\n    fi\n    echo \"source $GDB_ENTRY_FILE\" >> ${GDB_INIT_FILE}\nfi\n\nif [ \"${BACKEND_LLDB}\" -eq 1 ]; then\n\n    LLDB_PYTHON=$(get_lldb_python_exe) || quit \"Failed to locate python interpreter.\" 1\n    ensure_pip || quit \"Failed to install pip.\" 1\n    ${LLDB_PYTHON} -m pip install --user --upgrade six || quit \"Failed to install or upgrade 'six' python package.\" 1\n\n    if [ -n \"${VENV}\" ]; then\n        echo \"Creating virtualenv...\"\n        ${LLDB_PYTHON} -m pip install --user virtualenv\n        ${LLDB_PYTHON} -m virtualenv \"${VENV}\"\n        LLDB_PYTHON=\"${VENV}/bin/python\"\n        LLDB_SITE_PACKAGES=$(find \"${VENV}\" -name site-packages)\n    elif [ -z \"${USER_MODE}\" ]; then\n        LLDB_SITE_PACKAGES=$(${LLDB} -Q -x -b --one-line 'script import site; print(site.getsitepackages()[0])'|tail -1) || quit \"Failed to locate site-packages.\" 1\n    else\n        LLDB_SITE_PACKAGES=$(${LLDB} -Q -x -b --one-line 'script import site; print(site.getusersitepackages())'|tail -1) || quit \"Failed to locate site-packages.\" 1\n    fi\n\n    install_packages || quit \"Failed to install packages.\" 1\n\n    if [ \"$LLDB_SITE_PACKAGES\" == \"$GDB_SITE_PACKAGES\" ]; then\n        echo \"Skipping installation for LLDB - same site-packages directory\"\n    else\n        # Install Voltron and dependencies\n        ${SUDO} ${LLDB_PYTHON} -m pip install -U $USER_MODE $DEV_MODE . || quit \"Failed to install voltron.\" 1\n    fi\n\n    # Add Voltron to lldbinit\n    LLDB_INIT_FILE=\"${HOME}/.lldbinit\"\n    if [ -e ${LLDB_INIT_FILE} ]; then\n        sed -i.bak '/voltron/d' ${LLDB_INIT_FILE}\n    fi\n\n    if [ -z \"${DEV_MODE}\" ]; then\n        LLDB_ENTRY_FILE=\"$LLDB_SITE_PACKAGES/voltron/entry.py\"\n    else\n        LLDB_ENTRY_FILE=\"$(pwd)/voltron/entry.py\"\n    fi\n\n    if [ -n \"${VENV}\" ]; then\n        echo \"script import sys;sys.path.append('${LLDB_SITE_PACKAGES}')\" >> ${LLDB_INIT_FILE}\n    fi\n    echo \"command script import $LLDB_ENTRY_FILE\" >> ${LLDB_INIT_FILE}\nfi\n\nif [ \"${BACKEND_GDB}\" -ne 1 ] && [ \"${BACKEND_LLDB}\" -ne 1 ]; then\n    # Find system Python\n    PYTHON=$(command -v python)\n    PYVER=$(${PYTHON} -c 'import platform; print(\".\".join(platform.python_version_tuple()[:2]))')\n    if [ -z $USER_MODE ]; then\n        PYTHON_SITE_PACKAGES=$(${PYTHON} -c 'import site; print(site.getsitepackages()[0])')\n    else\n        PYTHON_SITE_PACKAGES=$(${PYTHON} -c 'import site; print(site.getusersitepackages())')\n    fi\n\n    install_packages\n\n    # Install Voltron and dependencies\n    ${SUDO} ${PYTHON} -m pip install -U $USER_MODE $DEV_MODE .\nfi\n\nset +x\necho \"==============================================================\"\nif [ \"${BACKEND_GDB}\" -eq 1 ]; then\n    echo \"Installed for GDB (${GDB}):\"\n    echo \"  Python:             $GDB_PYTHON\"\n    echo \"  Packages directory: $GDB_SITE_PACKAGES\"\n    echo \"  Added voltron to:   $GDB_INIT_FILE\"\n    echo \"  Entry point:        $GDB_ENTRY_FILE\"\nfi\nif [ \"${BACKEND_LLDB}\" -eq 1 ]; then\n    echo \"Installed for LLDB (${LLDB}):\"\n    echo \"  Python:             $LLDB_PYTHON\"\n    echo \"  Packages directory: $LLDB_SITE_PACKAGES\"\n    echo \"  Added voltron to:   $LLDB_INIT_FILE\"\n    echo \"  Entry point:        $LLDB_ENTRY_FILE\"\nfi\nif [ \"${BACKEND_GDB}\" -ne 1 ] && [ \"${BACKEND_LLDB}\" -ne 1 ]; then\n    if [ -z \"${GDB}\" ] && [ -z \"${LLDB}\" ]; then\n        echo -n \"Couldn't find any debuggers. \"\n    else\n        echo -n \"No debuggers selected. \"\n    fi\n\n    echo \"Installed using the Python in your path:\"\n    echo \"  Python:             $PYTHON\"\n    echo \"  Packages directory: $PYTHON_SITE_PACKAGES\"\n    echo \"  Did not add Voltron to any debugger init files.\"\nfi\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1015625,
          "content": "[bdist_wheel]\nuniversal=1\n\n[flake8]\nper-file-ignores =\n    dbg_lldb.py:E272,E722,E241\n    disasm.py:E722"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.591796875,
          "content": "from __future__ import print_function\n\nimport sys\nimport platform\nimport textwrap\nfrom subprocess import check_output\nfrom setuptools import setup, find_packages\n\n\ndef check_install():\n    \"\"\"\n    Try to detect the two most common installation errors:\n\n    1. Installing on macOS using a Homebrew version of Python\n    2. Installing on Linux using Python 2 when GDB is linked with Python 3\n    \"\"\"\n    if platform.system() == 'Darwin' and sys.executable != '/usr/bin/python':\n        print(\"*\" * 79)\n        print(textwrap.fill(\n            \"WARNING: You are not using the version of Python included with \"\n            \"macOS. If you intend to use Voltron with the LLDB included \"\n            \"with Xcode, or GDB installed with Homebrew, it will not work \"\n            \"unless it is installed using the system's default Python. If \"\n            \"you intend to use Voltron with a debugger installed by some \"\n            \"other method, it may be safe to ignore this warning. See the \"\n            \"following documentation for more detailed installation \"\n            \"instructions: \"\n            \"https://github.com/snare/voltron/wiki/Installation\", 79))\n        print(\"*\" * 79)\n    elif platform.system() == 'Linux':\n        try:\n            output = check_output([\n                \"gdb\", \"-batch\", \"-q\", \"--nx\", \"-ex\",\n                \"pi print(sys.version_info.major)\"\n            ]).decode(\"utf-8\")\n            gdb_python = int(output)\n\n            if gdb_python != sys.version_info.major:\n                print(\"*\" * 79)\n                print(textwrap.fill(\n                    \"WARNING: You are installing Voltron using Python {0}.x \"\n                    \"and GDB is linked with Python {1}.x. GDB will not be \"\n                    \"able to load Voltron. Please install using Python {1} \"\n                    \"if you intend to use Voltron with the copy of GDB that \"\n                    \"is installed. See the following documentation for more \"\n                    \"detailed installation instructions: \"\n                    \"https://github.com/snare/voltron/wiki/Installation\"\n                    .format(sys.version_info.major, gdb_python), 79))\n                print(\"*\" * 79)\n        except:\n            pass\n\n\ncheck_install()\n\n\nrequirements = [\n    'scruffington>=0.3.6',\n    'flask',\n    'flask_restful',\n    'blessed',\n    'pygments',\n    'requests',\n    'requests_unixsocket',\n    'six',\n    'pysigset',\n    'pygments',\n]\nif sys.platform == 'win32':\n    requirements.append('cursor')\n\n\nsetup(\n    name=\"voltron\",\n    version=\"0.1.7\",\n    author=\"snare\",\n    author_email=\"snare@ho.ax\",\n    description=\"A debugger UI\",\n    license=\"MIT\",\n    keywords=\"voltron debugger ui gdb lldb vdb \"\n             \"vivisect vtrace windbg cdb pykd\",\n    url=\"https://github.com/snare/voltron\",\n    packages=find_packages(exclude=['tests', 'examples']),\n    install_requires=requirements,\n    package_data={'voltron': ['config/*']},\n    entry_points={\n        'console_scripts': ['voltron=voltron:main'],\n        'pygments.lexers': [\n            'lldb_intel = voltron.lexers:LLDBIntelLexer',\n            'lldb_att = voltron.lexers:LLDBATTLexer',\n            'gdb_intel = voltron.lexers:GDBIntelLexer',\n            'gdb_att = voltron.lexers:GDBATTLexer',\n            'vdb_intel = voltron.lexers:VDBIntelLexer',\n            'vdb_att = voltron.lexers:VDBATTLexer',\n            'windbg_intel = voltron.lexers:WinDbgIntelLexer',\n            'windbg_att = voltron.lexers:WinDbgATTLexer',\n            'capstone_intel = voltron.lexers:CapstoneIntelLexer',\n        ],\n        'pygments.styles': [\n            'volarized = voltron.styles:VolarizedStyle',\n        ]\n    },\n    zip_safe=False\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "voltron",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}