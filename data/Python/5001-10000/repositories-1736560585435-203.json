{
  "metadata": {
    "timestamp": 1736560585435,
    "page": 203,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "graphql-python/graphene",
      "stars": 8129,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.041015625,
          "content": "[run]\nomit = graphene/pyutils/*,*/tests/*\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1875,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{py,rst,ini}]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.083984375,
          "content": "# Created by https://www.gitignore.io\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n.pytest_cache\nnosetests.xml\ncoverage.xml\n*.cover\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# VirtualEnv\n.env\n.venv\nenv/\nvenv/\n\n# Typing\n.mypy_cache/\n\n/tests/django.sqlite\n\n/graphene/index.json\n/graphene/meta.json\n\n/meta.json\n/index.json\n\n/docs/playground/graphene-js/pypyjs-release-nojit/\n/docs/static/playground/lib\n\n/docs/static/playground\n\n# PyCharm\n.idea\n*.iml\n\n# Databases\n*.sqlite3\n.vscode\n.mypy_cache\n.ruff_cache\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.6845703125,
          "content": "default_language_version:\n  python: python3.10\n\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.3.0\n    hooks:\n    -   id: check-merge-conflict\n    -   id: check-json\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: end-of-file-fixer\n        exclude: ^docs/.*$\n    -   id: pretty-format-json\n        args:\n        - --autofix\n    -   id: trailing-whitespace\n        exclude: README.md\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v2.37.3\n    hooks:\n    -   id: pyupgrade\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.5.0\n    hooks:\n        - id: ruff\n        - id: ruff-format\n          args: [ --check ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-Present Syrus Akbary\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1220703125,
          "content": "global-exclude tests/*\nrecursive-exclude tests *\nrecursive-exclude tests_py35 *\nrecursive-exclude examples *\ninclude LICENSE\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.6884765625,
          "content": ".PHONY: help\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@grep -E '^\\.PHONY: [a-zA-Z_-]+ .*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \"(: |##)\"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$2, $$3}'\n\n.PHONY: install-dev ## Install development dependencies\ninstall-dev:\n\tpip install -e \".[dev]\"\n\n.PHONY: test ## Run tests\ntest:\n\tpy.test graphene examples\n\n.PHONY: docs ## Generate docs\ndocs: install-dev\n\tcd docs && make install && make html\n\n.PHONY: docs-live ## Generate docs with live reloading\ndocs-live: install-dev\n\tcd docs && make install && make livehtml\n\n.PHONY: format\nformat:\n\tblack graphene examples setup.py\n\n.PHONY: lint\nlint:\n\tflake8 graphene examples setup.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9990234375,
          "content": "# ![Graphene Logo](http://graphene-python.org/favicon.png) [Graphene](http://graphene-python.org)  [![PyPI version](https://badge.fury.io/py/graphene.svg)](https://badge.fury.io/py/graphene) [![Coverage Status](https://coveralls.io/repos/graphql-python/graphene/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql-python/graphene?branch=master) [![](https://dcbadge.vercel.app/api/server/T6Gp6NFYHe?style=flat)](https://discord.gg/T6Gp6NFYHe)\n\n[💬 Join the community on Discord](https://discord.gg/T6Gp6NFYHe)\n\n**We are looking for contributors**! Please check the current issues to see how you can help ❤️\n\n## Introduction\n\n[Graphene](http://graphene-python.org) is an opinionated Python library for building GraphQL schemas/types fast and easily.\n\n- **Easy to use:** Graphene helps you use GraphQL in Python without effort.\n- **Relay:** Graphene has builtin support for Relay.\n- **Data agnostic:** Graphene supports any kind of data source: SQL (Django, SQLAlchemy), Mongo, custom Python objects, etc.\n  We believe that by providing a complete API you could plug Graphene anywhere your data lives and make your data available\n  through GraphQL.\n\n## Integrations\n\nGraphene has multiple integrations with different frameworks:\n\n| integration       | Package                                                                                 |\n| ----------------- | --------------------------------------------------------------------------------------- |\n| SQLAlchemy        | [graphene-sqlalchemy](https://github.com/graphql-python/graphene-sqlalchemy/)           |\n| Mongo             | [graphene-mongo](https://github.com/graphql-python/graphene-mongo/)                     |\n| Apollo Federation | [graphene-federation](https://github.com/graphql-python/graphene-federation/)           |\n| Django            | [graphene-django](https://github.com/graphql-python/graphene-django/)                   |\n\nAlso, Graphene is fully compatible with the GraphQL spec, working seamlessly with all GraphQL clients, such as [Relay](https://github.com/facebook/relay), [Apollo](https://github.com/apollographql/apollo-client) and [gql](https://github.com/graphql-python/gql).\n\n## Installation\n\nTo install `graphene`, just run this command in your shell\n\n```bash\npip install \"graphene>=3.1\"\n```\n\n## Examples\n\nHere is one example for you to get started:\n\n```python\nimport graphene\n\nclass Query(graphene.ObjectType):\n    hello = graphene.String(description='A typical hello world')\n\n    def resolve_hello(self, info):\n        return 'World'\n\nschema = graphene.Schema(query=Query)\n```\n\nThen Querying `graphene.Schema` is as simple as:\n\n```python\nquery = '''\n    query SayHello {\n      hello\n    }\n'''\nresult = schema.execute(query)\n```\n\nIf you want to learn even more, you can also check the following [examples](examples/):\n\n- **Basic Schema**: [Starwars example](examples/starwars)\n- **Relay Schema**: [Starwars Relay example](examples/starwars_relay)\n\n## Documentation\n\nDocumentation and links to additional resources are available at\nhttps://docs.graphene-python.org/en/latest/\n\n## Contributing\n\nAfter cloning this repo, create a [virtualenv](https://virtualenv.pypa.io/en/stable/) and ensure dependencies are installed by running:\n\n```sh\nvirtualenv venv\nsource venv/bin/activate\npip install -e \".[test]\"\n```\n\nWell-written tests and maintaining good test coverage is important to this project. While developing, run new and existing tests with:\n\n```sh\npytest graphene/relay/tests/test_node.py # Single file\npytest graphene/relay # All tests in directory\n```\n\nAdd the `-s` flag if you have introduced breakpoints into the code for debugging.\nAdd the `-v` (\"verbose\") flag to get more detailed test output. For even more detailed output, use `-vv`.\nCheck out the [pytest documentation](https://docs.pytest.org/en/latest/) for more options and test running controls.\n\nRegularly ensure your `pre-commit` hooks are up to date and enabled:\n\n```sh\npre-commit install\n```\n\nYou can also run the benchmarks with:\n\n```sh\npytest graphene --benchmark-only\n```\n\nGraphene supports several versions of Python. To make sure that changes do not break compatibility with any of those versions, we use `tox` to create virtualenvs for each Python version and run tests with that version. To run against all Python versions defined in the `tox.ini` config file, just run:\n\n```sh\ntox\n```\n\nIf you wish to run against a specific version defined in the `tox.ini` file:\n\n```sh\ntox -e py39\n```\n\nTox can only use whatever versions of Python are installed on your system. When you create a pull request, GitHub Actions pipelines will also be running the same tests and report the results, so there is no need for potential contributors to try to install every single version of Python on their own system ahead of time. We appreciate opening issues and pull requests to make graphene even more stable & useful!\n\n### Building Documentation\n\nThe documentation is generated using the excellent [Sphinx](http://www.sphinx-doc.org/) and a custom theme.\n\nAn HTML version of the documentation is produced by running:\n\n```sh\nmake docs\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.564453125,
          "content": "# Security Policy\n\n## Supported Versions\n\nSupport for security issues is currently provided for Graphene 3.0 and above. Support on earlier versions cannot be guaranteed by the maintainers of this library, but community PRs may be accepted in critical cases.\nThe preferred mitigation strategy is via an upgrade to Graphene 3.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.x     | :white_check_mark: |\n| <3.x    | :x:                |\n\n## Reporting a Vulnerability\n\nPlease use responsible disclosure by contacting a core maintainer via Discord or E-Mail.\n"
        },
        {
          "name": "UPGRADE-v1.0.md",
          "type": "blob",
          "size": 4.82421875,
          "content": "# v1.0 Upgrade Guide\n\nBig changes from v0.10.x to 1.0. While on the surface a lot of this just looks like shuffling around API, the entire codebase has been rewritten to handle some really great use cases and improved performance.\n\n## Backwards Compatibility and Deprecation Warnings\n\nThis has been a community project from the start, we need your help making the upgrade as smooth as possible for everybody!\nWe have done our best to provide backwards compatibility with deprecated APIs.\n\n## Deprecations\n\n- `with_context` is no longer needed. Resolvers now always take the context argument.\n  Before:\n\n  ```python\n  def resolve_xxx(root, args, info):\n      # ...\n  ```\n\n  With 1.0:\n\n  ```python\n  def resolve_xxx(root, args, context, info):\n      # ...\n  ```\n\n- `ObjectType` and `Interface` no longer accept the `abstract` option in the `Meta`.\n  Inheriting fields should be now achieved using `AbstractType` inheritance.\n\n  Before:\n\n  ```python\n  class MyBaseQuery(graphene.ObjectType):\n      my_field = String()\n      class Meta:\n          abstract = True\n\n  class Query(MyBaseQuery):\n      pass\n\n  ```\n\n  With 1.0:\n\n  ```python\n  class MyBaseQuery(graphene.AbstractType):\n      my_field = String()\n\n  class Query(MyBaseQuery, graphene.ObjectType):\n      pass\n  ```\n\n- The `type_name` option in the Meta in types is now `name`\n\n- Type references no longer work with strings, but with functions.\n\n  Before:\n\n  ```python\n  class Query(graphene.ObjectType):\n      user = graphene.Field('User')\n      users = graphene.List('User')\n  ```\n\n  With 1.0:\n\n  ```python\n  class Query(graphene.ObjectType):\n      user = graphene.Field(lambda: User)\n      users = graphene.List(lambda: User)\n  ```\n\n## Schema\n\nSchemas in graphene `1.0` are `Immutable`, that means that once you create a `graphene.Schema` any\nchange in their attributes will not have any effect.\nThe `name` argument is removed from the Schema.\n\nThe arguments `executor` and `middlewares` are also removed from the `Schema` definition.\nYou can still use them, but by calling explicitly in the `execute` method in `graphql`.\n\n```python\n# Old way\nschema = graphene.Schema(name='My Schema')\nschema.query = Query\nschema.mutation = Mutation\n\n# New way\nschema = graphene.Schema(\n    query=Query,\n    mutation=Mutation\n)\n```\n\n## Interfaces\n\nFor implementing an Interface in an ObjectType, you have to add it onto `Meta.interfaces`.\n\nLike:\n\n```python\nfrom graphene import Interface, ObjectType, String\n\nclass Character(Interface):\n    name = String()\n\nclass Human(Character): # Old way, Human will still be an Interface\n    pass\n\nclass Droid(ObjectType): # New way, you have to specify the ObjectType\n    class Meta:\n        interfaces = (Character, )\n```\n\n## Mutations\n\nMutation fields have changed the way of usage, before if you have the mutation `MyMutation` you\nonly have to reference with `graphene.Field(MyMutation)` now it's simply `MyMutation.Field()`\n\nExample:\n\n```python\nfrom graphene import ObjectType, Mutation, String\n\nclass ReverseString(Mutation):\n    class Input:\n        input = String(required=True)\n\n    reversed = String()\n\n    def mutate(root, args, context, info):\n        reversed = args.get('input')[::-1]\n        return ReverseString(reversed=reversed)\n\nclass Query(ObjectType):\n    reverse_string = graphene.Field(ReverseString) # Old way, will not include the mutation arguments by default\n    reverse_string = ReverseString.Field()\n```\n\n## Nodes\n\nApart from implementing as shown in the previous section, to use the node field you have to\nspecify the node Type.\n\nExample:\n\n```python\nfrom graphene import ObjectType, relay\n\nclass Query(ObjectType):\n    node = relay.NodeField() # Old way, NodeField no longer exists. Use Node.Field\n    node = relay.Node.Field() # New way\n```\n\nAlso, if you wanted to create an `ObjectType` that implements `Node`, you have to do it\nexplicitly.\n\n## Django\n\nThe Django integration with Graphene now has an independent package: `graphene-django`.\nFor installing, you have to replace the old `graphene[django]` with `graphene-django`.\n\n- As the package is now independent, you now have to import from `graphene_django`.\n- **DjangoNode no longer exists**, please use `relay.Node` instead:\n\n  ```python\n  from graphene.relay import Node\n  from graphene_django import DjangoObjectType\n\n  class Droid(DjangoObjectType):\n      class Meta:\n          interfaces = (Node, )\n  ```\n\n## SQLAlchemy\n\nThe SQLAlchemy integration with Graphene now has an independent package: `graphene-sqlalchemy`.\nFor installing, you have to replace the old `graphene[sqlalchemy]` with `graphene-sqlalchemy`.\n\n- As the package is now independent, you have to import now from `graphene_sqlalchemy`.\n- **SQLAlchemyNode no longer exists**, please use `relay.Node` instead:\n\n  ```python\n  from graphene.relay import Node\n  from graphene_sqlalchemy import SQLAlchemyObjectType\n\n  class Droid(SQLAlchemyObjectType):\n      class Meta:\n          interfaces = (Node, )\n  ```\n"
        },
        {
          "name": "UPGRADE-v2.0.md",
          "type": "blob",
          "size": 7.96875,
          "content": "# v2.0 Upgrade Guide\n\n`ObjectType`, `Interface`, `InputObjectType`, `Scalar` and `Enum` implementations\nhave been quite simplified, without the need to define a explicit Metaclass for each subtype.\n\nIt also improves the field resolvers, [simplifying the code](#simpler-resolvers) the\ndeveloper has to write to use them.\n\n**Deprecations:**\n\n- [`AbstractType`](#abstracttype-deprecated)\n- [`resolve_only_args`](#resolve_only_args)\n- [`Mutation.Input`](#mutationinput)\n\n**Breaking changes:**\n\n- [`Simpler Resolvers`](#simpler-resolvers)\n- [`Node Connections`](#node-connections)\n\n**New Features!**\n\n- [`InputObjectType`](#inputobjecttype)\n- [`Meta as Class arguments`](#meta-as-class-arguments) (_only available for Python 3_)\n\n> The type metaclasses are now deleted as they are no longer necessary. If your code was depending\n> on this strategy for creating custom attrs, see an [example on how to do it in 2.0](https://github.com/graphql-python/graphene/blob/v2.0.0/graphene/tests/issues/test_425.py).\n\n## Deprecations\n\n### AbstractType deprecated\n\nAbstractType is deprecated in graphene 2.0, you can now use normal inheritance instead.\n\nBefore:\n\n```python\nclass CommonFields(AbstractType):\n    name = String()\n\nclass Pet(CommonFields, Interface):\n    pass\n```\n\nWith 2.0:\n\n```python\nclass CommonFields(object):\n    name = String()\n\nclass Pet(CommonFields, Interface):\n    pass\n```\n\n### resolve_only_args\n\n`resolve_only_args` is now deprecated as the resolver API has been simplified.\n\nBefore:\n\n```python\nclass User(ObjectType):\n    name = String()\n\n    @resolve_only_args\n    def resolve_name(root):\n        return root.name\n```\n\nWith 2.0:\n\n```python\nclass User(ObjectType):\n    name = String()\n\n    def resolve_name(root, info):\n        return root.name\n```\n\n### Mutation.Input\n\n`Mutation.Input` is now deprecated in favor of using `Mutation.Arguments` (`ClientIDMutation` still uses `Input`).\n\nBefore:\n\n```python\nclass User(Mutation):\n    class Input:\n        name = String()\n```\n\nWith 2.0:\n\n```python\nclass User(Mutation):\n    class Arguments:\n        name = String()\n```\n\n## Breaking Changes\n\n### Simpler resolvers\n\nAll the resolvers in graphene have been simplified.\nPrior to Graphene `2.0`, all resolvers required four arguments: `(root, args, context, info)`.\nNow, resolver `args` are passed as keyword arguments to the function, and `context` argument dissapeared in favor of `info.context`.\n\nBefore:\n\n```python\nmy_field = graphene.String(my_arg=graphene.String())\n\ndef resolve_my_field(root, args, context, info):\n    my_arg = args.get('my_arg')\n    return ...\n```\n\nWith 2.0:\n\n```python\nmy_field = graphene.String(my_arg=graphene.String())\n\ndef resolve_my_field(root, info, my_arg):\n    return ...\n```\n\n**PS.: Take care with receiving args like `my_arg` as above. This doesn't work for optional (non-required) arguments as standard `Connection`'s arguments (first, last, after, before).**\nYou may need something like this:\n\n```python\ndef resolve_my_field(root, info, known_field1, known_field2, **args): ## get other args with: args.get('arg_key')\n```\n\nAnd, if you need the context in the resolver, you can use `info.context`:\n\n```python\nmy_field = graphene.String(my_arg=graphene.String())\n\ndef resolve_my_field(root, info, my_arg):\n    context = info.context\n    return ...\n```\n\n### Node Connections\n\nNode types no longer have a `Connection` by default.\nIn 2.0 and onwards `Connection`s should be defined explicitly.\n\nBefore:\n\n```python\nclass User(ObjectType):\n    class Meta:\n        interfaces = [relay.Node]\n    name = String()\n\nclass Query(ObjectType):\n    user_connection = relay.ConnectionField(User)\n```\n\nWith 2.0:\n\n```python\nclass User(ObjectType):\n    class Meta:\n        interfaces = [relay.Node]\n    name = String()\n\nclass UserConnection(relay.Connection):\n    class Meta:\n        node = User\n\nclass Query(ObjectType):\n    user_connection = relay.ConnectionField(UserConnection)\n```\n\n## Node.get_node\n\nThe method `get_node` in `ObjectTypes` that have `Node` as interface, changes its API.\nFrom `def get_node(cls, id, context, info)` to `def get_node(cls, info, id)`.\n\n```python\nclass MyObject(ObjectType):\n    class Meta:\n        interfaces = (Node, )\n\n    @classmethod\n    def get_node(cls, id, context, info):\n        return ...\n```\n\nTo:\n\n```python\nclass MyObject(ObjectType):\n    class Meta:\n        interfaces = (Node, )\n\n    @classmethod\n    def get_node(cls, info, id):\n        return ...\n```\n\n## Node.get_node_from_global_id\n\nThe parameters' order of `get_node_from_global_id` method has changed. You may need to adjust your [Node Root Field](http://docs.graphene-python.org/en/latest/relay/nodes/#node-root-field) and maybe other places that uses this method to obtain an object.\n\nBefore:\n\n```python\nclass RootQuery(object):\n    ...\n    node = Field(relay.Node, id=ID(required=True))\n\n    def resolve_node(root, args, context, info):\n        node = relay.Node.get_node_from_global_id(args['id'], context, info)\n        return node\n```\n\nNow:\n\n```python\nclass RootQuery(object):\n    ...\n    node = Field(relay.Node, id=ID(required=True))\n\n    def resolve_node(root, info, id):\n        node = relay.Node.get_node_from_global_id(info, id)\n        return node\n```\n\n## Mutation.mutate\n\nNow only receives (`root`, `info`, `**kwargs`) and is not a @classmethod\n\nBefore:\n\n```python\nclass SomeMutation(Mutation):\n    ...\n\n    @classmethod\n    def mutate(cls, instance, args, context, info):\n        ...\n```\n\nWith 2.0:\n\n```python\nclass SomeMutation(Mutation):\n    ...\n\n    def mutate(root, info, **args):\n        ...\n```\n\nWith 2.0 you can also get your declared (as above) `args` this way:\n\n```python\nclass SomeMutation(Mutation):\n    class Arguments:\n        first_name = String(required=True)\n        last_name = String(required=True)\n    ...\n\n    def mutate(root, info, first_name, last_name):\n        ...\n```\n\n## ClientIDMutation.mutate_and_get_payload\n\nNow only receives (`root`, `info`, `**input`)\n\n### Middlewares\n\nIf you are using Middelwares, you need to some adjustments:\n\nBefore:\n\n```python\nclass MyGrapheneMiddleware(object):\n    def resolve(self, next_mw, root, args, context, info):\n\n        ## Middleware code\n\n        return next_mw(root, args, context, info)\n```\n\nWith 2.0:\n\n```python\nclass MyGrapheneMiddleware(object):\n    def resolve(self, next_mw, root, info, **args):\n        context = info.context\n\n        ## Middleware code\n\n        info.context = context\n        return next_mw(root, info, **args)\n```\n\n## New Features\n\n### InputObjectType\n\nIf you are using `InputObjectType`, you now can access\nits fields via `getattr` (`my_input.myattr`) when resolving, instead of\nthe classic way `my_input['myattr']`.\n\nAnd also use custom defined properties on your input class.\n\nExample. Before:\n\n```python\nclass UserInput(InputObjectType):\n    id = ID(required=True)\n\ndef is_valid_input(input):\n    return input.get('id').startswith('userid_')\n\nclass Query(ObjectType):\n    user = graphene.Field(User, input=UserInput())\n\n    @resolve_only_args\n    def resolve_user(root, input):\n        user_id = input.get('id')\n        if is_valid_input(user_id):\n            return get_user(user_id)\n```\n\nWith 2.0:\n\n```python\nclass UserInput(InputObjectType):\n    id = ID(required=True)\n\n    @property\n    def is_valid(root):\n        return root.id.startswith('userid_')\n\nclass Query(ObjectType):\n    user = graphene.Field(User, input=UserInput())\n\n    def resolve_user(root, info, input):\n        if input.is_valid:\n            return get_user(input.id)\n```\n\n### Meta as Class arguments\n\nNow you can use the meta options as class arguments (**ONLY PYTHON 3**).\n\nBefore:\n\n```python\nclass Dog(ObjectType):\n    class Meta:\n        interfaces = [Pet]\n    name = String()\n```\n\nWith 2.0:\n\n```python\nclass Dog(ObjectType, interfaces=[Pet]):\n    name = String()\n```\n\n### Abstract types\n\nNow you can create abstact types super easily, without the need of subclassing the meta.\n\n```python\nclass Base(ObjectType):\n    class Meta:\n        abstract = True\n\n    id = ID()\n\n    def resolve_id(root, info):\n        return f\"{root.__class__.__name__}_{root.id}\"\n```\n\n### UUID Scalar\n\nIn Graphene 2.0 there is a new dedicated scalar for UUIDs, `UUID`.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphene",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.2861328125,
          "content": "[mypy]\nignore_missing_imports = True\n\n[mypy-graphene.pyutils.*]\nignore_errors = True\n\n[mypy-graphene.types.scalars]\nignore_errors = True\n\n[mypy-graphene.types.generic]\nignore_errors = True\n\n[mypy-graphene.types.tests.*]\nignore_errors = True\n\n[mypy-graphene.relay.tests.*]\nignore_errors = True\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1015625,
          "content": "[coverage:run]\nomit = graphene/pyutils/*,*/tests/*,graphene/types/scalars.py\n\n[bdist_wheel]\nuniversal=1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.6044921875,
          "content": "import ast\nimport codecs\nimport re\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.test import test as TestCommand\n\n_version_re = re.compile(r\"VERSION\\s+=\\s+(.*)\")\n\nwith open(\"graphene/__init__.py\", \"rb\") as f:\n    version = ast.literal_eval(_version_re.search(f.read().decode(\"utf-8\")).group(1))\n\npath_copy = sys.path[:]\n\nsys.path.append(\"graphene\")\ntry:\n    from pyutils.version import get_version\n\n    version = get_version(version)\nexcept Exception:\n    version = \".\".join([str(v) for v in version])\n\nsys.path[:] = path_copy\n\n\nclass PyTest(TestCommand):\n    user_options = [(\"pytest-args=\", \"a\", \"Arguments to pass to py.test\")]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = []\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = []\n        self.test_suite = True\n\n    def run_tests(self):\n        # import here, cause outside the eggs aren't loaded\n        import pytest\n\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n\n\ntests_require = [\n    \"pytest>=8,<9\",\n    \"pytest-benchmark>=4,<5\",\n    \"pytest-cov>=5,<6\",\n    \"pytest-mock>=3,<4\",\n    \"pytest-asyncio>=0.16,<2\",\n    \"coveralls>=3.3,<5\",\n]\n\ndev_requires = [\n    \"ruff==0.5.0\",\n    \"types-python-dateutil>=2.8.1,<3\",\n    \"mypy>=1.10,<2\",\n] + tests_require\n\nsetup(\n    name=\"graphene\",\n    version=version,\n    description=\"GraphQL Framework for Python\",\n    long_description=codecs.open(\n        \"README.md\", \"r\", encoding=\"ascii\", errors=\"replace\"\n    ).read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/graphql-python/graphene\",\n    author=\"Syrus Akbary\",\n    author_email=\"me@syrusakbary.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n    ],\n    keywords=\"api graphql protocol rest relay graphene\",\n    packages=find_packages(exclude=[\"examples*\"]),\n    install_requires=[\n        \"graphql-core>=3.1,<3.3\",\n        \"graphql-relay>=3.1,<3.3\",\n        \"python-dateutil>=2.7.0,<3\",\n        \"typing-extensions>=4.7.1,<5\",\n    ],\n    tests_require=tests_require,\n    extras_require={\"test\": tests_require, \"dev\": dev_requires},\n    cmdclass={\"test\": PyTest},\n)\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.462890625,
          "content": "[tox]\nenvlist = py3{8,9,10,11,12,13}, mypy, pre-commit\nskipsdist = true\n\n[testenv]\ndeps =\n    .[test]\ncommands =\n    pytest --cov=graphene graphene --cov-report=term --cov-report=xml examples {posargs}\n\n[testenv:pre-commit]\nbasepython = python3.10\ndeps =\n    pre-commit>=3.7,<4\nsetenv =\n    LC_CTYPE=en_US.UTF-8\ncommands =\n    pre-commit run --all-files --show-diff-on-failure\n\n[testenv:mypy]\nbasepython = python3.10\ndeps =\n    .[dev]\ncommands =\n    mypy graphene\n\n[pytest]\n"
        }
      ]
    }
  ]
}