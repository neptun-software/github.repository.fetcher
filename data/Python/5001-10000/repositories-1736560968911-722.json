{
  "metadata": {
    "timestamp": 1736560968911,
    "page": 722,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ricequant/rqalpha",
      "stars": 5450,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1298828125,
          "content": "[html]\ndirectory = rqalpha_test_coverage_report\ntitle = rqalpha_coverage_report\n\n[run]\nsource = rqalpha\n\n[report]\nomit = */examples/*"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0322265625,
          "content": "rqalpha/_version.py export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2138671875,
          "content": "/*.egg-info\n.cache/\ndist/\n.idea\n__pycache__\nalgoengine.iml\nrqalpha.system.log\n*.bcolz\n*.pk\n*.h5\n.vscode\n*.c\n*.so\n*.pyc\nbuild/\nbundle/\nbundle\npersist/\n.coverage\n.tox\nrqalpha_test_coverage_report/\n.tmp.pkl\n.env\n.DS_Store\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.4775390625,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: docs/requirements.txt\n    - method: pip\n      path: .\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.6\"\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.9013671875,
          "content": "language: python\ndist: trusty\nsudo: required\nbranches:\n  only:\n    - develop\n    - master\nmatrix:\n  include:\n    - python: 3.6\n    - python: 3.7\n      dist: xenial\n      sudo: true\n    - python: 3.8\n      dist: xenial\n      sudo: true\n\ninstall:\n  # Install TA-Lib\n  - wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz\n  - tar -xzvf ta-lib-0.4.0-src.tar.gz\n  - cd ta-lib\n  - ./configure --prefix=/usr\n  - make\n  - sudo make install\n  - cd ..\n\n  # Install Test Deps\n  - pip install -U pip\n  - pip install \"numpy>=1.15.4\"\n  - pip install TA-Lib\n  - pip install coveralls\n  - pip install -U setuptools\n  - pip install ipython==5.3.0\n  - pip install --prefer-binary .\nscript:\n  - ls -al $HOME/.rqalpha/\n  - ls -al $HOME/.rqalpha/bundle/\n  - rqalpha download-bundle\n  - coverage run --source=rqalpha test.py\ncache:\n  directories:\n    - $HOME/.cache/pip\n    - $HOME/.rqalpha/bundle\nafter_success:\n  coveralls\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 60.9462890625,
          "content": "==================\nCHANGELOG\n==================\n\n5.3.3\n==================\n- 修复平今数量的计算异常\n\n5.3.2\n==================\n- 修复导出的分析报告出现乱码的异常\n\n5.3.1\n==================\n- 新增检查基准上市时段是否满足回测时间范围\n- 修复分钟回测中挂单在非交易时间内被拒单的异常\n\n5.3.0\n==================\n- 策略参数配置 extra 下 新增 log_file 用于将日志输出到文件\n- 修复期货分钟回测open_auction拿到的最新价有误(signal模式)\n\n5.2.1\n==================\n- 修复期货分钟回测open_auction拿到的最新价有误\n- 修复当日无成交量时算法单有误\n\n5.2.0\n==================\n- report年度指标新增超额夏普比率\n- 调整默认印花税为万5\n- order_target_portfolio支持可转债\n- 修复bundle更新时进度条跟不上任务完成进度\n- 修复合约交割时权益计算有误\n- 修复current_snapshot在open_auction中获取时last为close,应为open\n\n5.1.2\n==================\n- 修复analyser中计算个股权重的异常\n- 修复分钟回测中挂单在非交易时间内被拒单的异常\n\n5.1.1\n==================\n- 调整API参数;更新文档\n\n5.1.0\n==================\n- 新增个股权重检测, summary报告中新增了表格\n- 新增api futures.get_dominant_price,支持动态复权\n- 修复pandas1.5.0以下无法产生report\n- 修复在日内回转交易时trading_pnl计算错误\n\n5.0.0\n==================\n- 适配pandas2.0\n- 交易指数标的时，不检查上市日期，根据行情数据有无决定\n- 撮合时屏蔽已完成的订单\n- 修复get_prev_settlement取不到第一天的，采用prev_settlement字段\n- 新增算法单：VWAPOrder 和 TWAPOrder\n\n4.16.2\n==================\n- 修复bundle更新异常\n- 限制pandas版本为 < 2.0.0\n- sys_analyser检查基准合法性\n- sys_accounts支持分别设置股票、期货佣金倍率\n\n4.16.1\n==================\n- 修正文档\n\n4.16.0\n==================\n- 新增check-bundle检查日线bundle命令\n- report年度指标sheet新增指标\n- 修复tick回测和获取无风险收益率的异常\n- 改善order_target_portfolio并完善api文档\n\n4.15.0\n==================\n- 修复python3.10在Ubuntu和Centos下更新数据异常\n- 期货回测支持使用结算价进行结算\n- 修正报告中跟踪误差，使用年化跟踪误差\n- 修改超额收益相关指标的计算，具体公式可参考rqrisk\n\n4.14.1\n==================\n- ricequant报告图模版调整超额收益曲线，公式改为每日的超额收益率的累计\n- 改善summary报告中数据的展示格式并新增部分指标\n\n4.14.0\n==================\n- 分析报告新增UlcerIndex(累计回撤深度)和UlcerPerformanceIndex(累计回撤夏普率)相关指标\n- 修复多次输出plot图时水印异常\n\n4.13.1\n==================\n- 适配次主力合约(88A2)和次次主力合约(88A3)\n\n4.13.0\n==================\n- analyser plot 新增报告图模版功能\n- account 弃用 equity 改为 position_equity\n- INSTRUMENT_TYPE 新增 Fund 类型\n\n4.12.1\n==================\n- 修正日志\n\n4.12.0\n==================\n- 调整分析指标中部分指标的显示格式为百分比\n- 将分析指标中的超额收益波动率从日度改为年化\n- 入金支持延迟到账\n\n4.11.3\n==================\n- 分析指标新增胜率和盈亏比，调整了作图中指标的布局\n- 修复当本地语言为中文但无中文字体时基准名称显示的异常\n- 修复输出report时账户未记录清仓手续费的异常\n- 修复前一个交易日发生除息,当前交易日在before_trading时 position.last_price 未进行复权的异常\n\n4.11.2\n==================\n- 修复 physical_time api接口的导出，策略编写不在需要显式导出\n- 修复 更新base数据时window系统下出现内存错误的异常\n\n4.11.1\n==================\n- 新增取消rqdatac init 开关, config base rqdatac_uri 可设置为 'disabled' 或 'DISABLED'\n- 修正关于888前复权合约的数据问题\n- 调整默认撮合方式, matching_type 为 None 则表示根据回测频率自动选择。日/分钟回测下为 current_bar , tick 回测下为 last\n- 修复性能分析\n\n4.11.0\n==================\n- 针对股票和ETF新增融资功能，新增 finance 和 repay API\n- Account 新增 cash_liabilities(现金负债) 属性\n- sys_account 新增 financing_rate(融资利率/年) 和 financing_stocks_restriction_enabled(是否开启融资可买股票池限制) 配置项\n- 优化回测报告，在图例中显示基准的名称\n\n4.10.1\n==================\n- 优化回测报告及返回值输出情况，增加最长回撤持续期相关指标\n\n4.10.0\n==================\n- 将DefaultMatcher划分DefaultBarMatcher和DefaultTickMatcher\n- Tick回测支持成交量限制，成交量限制为两个tick的成交量之差乘以volume_percent\n- Tick回测handle_bar支持盘前的tick\n- Tick回测不再支持open_auction接口，集合竞价时段内成交一律使用last\n- 修复get_open_auction_bar获取非交易日时的异常\n\n4.9.2\n==================\n- 修改get_pit_financials_ex接口中count参数的含义为当前标的已发布财报的数量\n\n4.9.1\n==================\n- 修复get_pit_financials_ex接口的bug\n\n4.9.0\n==================\n- 定时器新增期货应用场景\n- 改善tick回测性能\n\n4.8.1\n==================\n- 改善回测输出的summary和净值图，新增超额累计收益指标\n\n4.8.0\n==================\n- Position类移除了 _today_quantity 属性，新增 _quantity 属性\n- 部分接口新增了缓存\n- Environment类新增submit_order接口\n- Interface中AbstractPosition移除了margin接口\n- order_target_portfolio接口支持 limit order\n- rqalpha_mod_sys_analyser组件报表新增excel格式\n- 提升框架的整体性能\n\n4.7.1\n==================\n- 补全类型提示\n- 优化翻译和错误提示\n- 全面支持Python3.10\n\n4.7.0\n==================\n- 重构绘制策略收益图的逻辑。增加绘制买卖点的选项，周度收益曲线和指标改为通过配置项激活\n- 调整 Signal 模式的逻辑。现在在 Signal 模式下开启 price_limit 选项时，超出涨跌停价格范围的订单将会被拒绝\n- 重构国际化逻辑。现在 RQAlpha 将自动检测操作系统的语言设置从而在中英文间进行切换（而不是强制使用中文）\n- 优化部分日志和错误信息的中文翻译\n- 调整了部分在 Python3.10 下会报错的代码\n\n\n4.6.0\n==================\n- 策略运行结束后绘制的收益图中加入超额收益曲线、周度收益曲线，加入部分超额收益和周度风险指标\n- 策略运行结束后输出的结果中加入部分超额收益和周度风险指标\n\n\n4.5.2\n==================\n- 放宽 :code:`BaseDataSource.get_open_auction_bar` 方法对于 bundle 数据字段的要求\n\n\n4.5.1\n==================\n\n- :code:`Instrument` 对象增加 :code:`trading_code` 字段，意为该标的在交易所的代码\n- 修复 :code:`get_pit_financials_ex` 的异常行为\n- :code:`get_positions` 接口不再返回数量为 0 的持仓对象\n- 修复了在分红未到账时平仓会导致分红金额始终不到账的问题\n- 修复了 :code:`get_open_orders` 取不到集合竞价阶段挂单的问题及其导致的冻结资金异常问题\n- 修复了个别情况下持仓盈亏和交易盈亏计算错误的问题\n\n\n4.5.0\n==================\n\n- 新增逐档撮合，该撮合方式会根据 tick 行情中的多档挂单信息逐步撮合订单。可在 tick 回测中设置 matching_type 为 :code:`counterparty_offer` 以启用。\n- 修复挂单进入终结状态时解冻资金金额异常的问题\n\n\n4.4.2\n==================\n\n- **RQAlpha 从该版本开始不再提供对 Python3.5 的支持**\n- :code:`get_financials` 被标记为废弃，请使用 :code:`get_pit_financials_ex`\n- 修复了在未设置基准的情况下，部分不应产生结果的风险指标出现异常计算结果的问题\n- 修复因浮点数精度问题导致的股票拆分数量错误\n\n\n4.4.1\n==================\n\n- 修复了调取 :code:`history_bars` 获取到错误的复权价的问题\n\n\n4.4.0\n==================\n\n- :code:`DataSource` interface 增加了 :code:`get_open_auction_bar` 接口。通过实现该接口，模拟交易可提供在集合竞价阶段获取 bar 的功能。\n- 修复了 Windows 下导出 csv 报告格式异常的问题\n- 修复了其他 bug\n\n\n4.3.3\n==================\n\n- 回测和模拟交易的 :code:`--matching-type` 参数支持传入 :code:`vwap` 以启用成交量加权平均价撮合\n- 股票下单 API 中限制散股交易的逻辑针对科创板股票进行了适配\n\n\n4.3.2\n==================\n\n- **新增**\n\n  - :code:`history_bars` 的 frequency 参数支持传入 :code`'1w'` 以获取周线\n\n- **修复**\n\n  - 修复 :code:`Order` 对象从持久化中恢复出错的问题\n  - 修复通过策略内配置项配置股票分红再投资参数无效的问题\n  - 修复合约在某些日期无行情导致基准收益曲线计算有误的问题\n  - 修复 :code:`Order` 对象 :code:`avg_price` 字段计算有误的问题\n  - 修复通过 :code:`order_target_portfolio` API 发出的订单验资风控异常的问题\n\n\n4.3.0\n==================\n\n- **新增**\n\n  - 新增出入金 API :code:`withdraw` 和 :code:`deposit`，用于为指定账户出金/入金\n  - 新增使用资产收益加权作为基准的功能，参数形如 :code:`--benchmark 000300.XSHG:0.5,510050.XSHG:-1`\n  - 新增按日簿记账户管理费用的功能，参数形如 :code:`--management-fee stock 0.0002`\n  - :code:`Trade` 类的构造函数增加了关键字参数\n\n- **重构**\n\n  - 重构了 :code:`BaseDataSource` 所使用的 :code:`InstrumentStore`，使得通过 mod 扩展支持的资产品种变得更加容易\n  - 重构了 :code:`AbstractDataSource` 中的 instruments 的相关接口\n  - 不再支持在日级别回测中使用\"下一个 bar 撮合\"\n\n\n4.2.5\n==================\n\n- 修复了访问持仓对象 :code:`closable` 字段会抛出异常的 bug\n\n\n4.2.4\n==================\n\n- :code:`rqalpha-mod-sys-simulation` 增加配置项 :code:`inactive_limit`，开启该选项可禁止订单在成交量为 0 的 bar 成交\n- :code:`rqalpha-mod-sys-transaction-cost` 增加 :code:`tax_multiplier` 配置项，用于设置印花税倍率\n- :code:`Order` 类的构造函数增加关键字参数\n- 移除 :code:`AbstractAccount` 接口\n- 移动部分 module 至 :code:`rqalpha.core` package\n\n\n4.2.1\n==================\n\n- 移除了 :code:`--disable-user-log` 及 :code:`--disable-user-system-log` 命令行参数\n- 修复了 :code:`index_weights` 抛出异常的 bug\n- 修复了安装某些版本 rqdatac 时更新 bundle 出现异常的问题\n- 移除了部分兼容 python2 的代码、重构了 :code:`BaseDataSource` 的部分代码\n\n\n4.1.4\n==================\n\n- 增加了通过环境变量 RQALPHA_PROXY 设置代理的功能\n- 修复了设置初始仓位后会抛出异常的 bug\n- 修复了股票拆分后持仓收益计算错误的 bug\n\n\n4.1.3\n==================\n\n- 修复了在部分 windows 计算机上打开 bundle 时报错的问题\n\n\n4.1.2\n==================\n\n- 修复了 base_data_source 导致的债券回测报错的问题\n\n\n4.1.1\n==================\n\n- 修复了部分期货下单 API 平今仓会报错的问题\n- 回测输出的收益图改为使用结算后的累计收益绘制（之前版本为 after_trading 后的累计收益）\n\n\n4.1.0\n==================\n\n**[For 开发/运行策略的用户]**\n\n- 移除了回测报告中的 Excel 文件，所有信息均可在 csv 文件中找到\n- 使用 IDE 编写策略的用户可通过执行 :code:`from rqalpha.apis import *` 以获得大部分 API 的代码提示\n- 修复了若干 4.0.0 版本引入的 bug\n\n**[For Mod 开发者]**\n\n- 下单 API 加入了 \"singledispatch\" 功能，mod 可为这些 API 针对不同的合约类型注册不同的实现，用法可参考 `sys_mod_accounts.api`_\n- :code:`SimulationBroker` 增加 :code:`register_matcher` 方法，mod 可为不同类型的合约注册不同撮合器已实现多样化的撮合逻辑\n- 重构 :code:`rqalpha.portfolio.position.Position` 类，自定义的持仓类只要继承该类并重写 :code:`__instrument_types__` 属性便可自动注册持仓类，可参考 `sys_mod_accounts.position_model`_\n- 为 :code:`Instrument` 类添加 :code:`account_type` property，Instrument 子类可通过重写该 property 标明该 Instrument 的持仓归属于哪个账户\n\n.. _sys_mod_accounts.api: https://github.com/ricequant/rqalpha/tree/master/rqalpha/mod/rqalpha_mod_sys_accounts/api\n.. _sys_mod_accounts.position_model: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_accounts/position_model.py\n\n4.0.0\n==================\n\n\n**[For 开发/运行策略的用户]**\n\n对于开发/运行策略的用户，RQAlpha 4.x 版本改动的核心是加强与 `RQDatac`_ 之间的联动，拥有 RQDatac license 的用户可以更及时地更新 bundle，\n亦可以在开源的 RQAlpha 框架下直接调用从前在 Ricequant 网站或终端产品中才能使用的扩展 API。\n\n- **新增**\n\n  - 新增集合竞价函数 :code:`open_auction` ，您可以在该函数内发单以实现开盘成交，详见 :ref:`api-base-api`\n  - 新增扩展 API 的实现，现在您可以在开源的 rqalpha 框架下直接调用扩展 API，详见 :ref:`api-extend-api`\n  - 新增股票下单 API，``order_target_portfolio``，使用该 API 可以根据给定的目标组合仓位批量下单，详见 :ref:`api-base-api-order-api`\n\n- **变更**\n\n  - ``rqalpha update-bundle`` 命令的功能改为使用 RQDatac 更新已存在的数据 bundle，新增 ``rqalpha download-bundle`` 和 ``rqalpha create-bundle`` 命令用于下载和创建 bundle，详见 :ref:`intro-install-get-data`\n  - ``line-profiler`` 库不再是 RQAlpha 的硬性依赖，如果您需要性能分析功能，则需要手动安装 ``line-profiler``，详见 :ref:`intro-faq`\n  - 配置项中股票和期货验券风控的开关 ``validate_stock_position`` 和 ``validate_future_position`` 移动到了 :code:`rqalpha_mod_sys_accounts`，详见 `rqalpha_mod_sys_accounts`_\n  - 传入 ``--report`` 参数后输出的策略报告文件将直接生成于 ``--report`` 参数值给定的目录下，不再在该目录下新建以策略名为名称的文件夹\n\n- **废弃**\n\n  - 不再支持 Python2.7\n  - ``context.portfolio.positions`` 可能会在未来版本中废弃，推荐使用 ``get_position`` 和 ``get_positions`` API 获取仓位信息，详见 :ref:`api-position-api`\n  - ``context`` 对象的部分老旧属性已移除，如 ``stock_portfolio``、``future_portfolio``、``slippage``、``benchmark``、``margin_rate``、``commission`` 等，详见 :ref:`api-base-types`\n\n\n**[For Mod 开发者]**\n\nRQAlpha 4.x 相对于 3.x 版本进行了部分重构，重构的核心目标是 Mod 开发者可以更方便地对接不同品种的金融工具。\n\n- :code:`BaseDataSource` 新增 ``register_day_bar_store``、``register_instruments_store``、``register_dividend_store``、``register_split_store``、``register_calendar_store`` 方法，用于在不重载 :code:`DataSource` 的情况下对接更丰富的行情及基础数据\n- 移除 ``rqalpha mod install/uninstall`` 命令，您可以使用 ``pip install/uninstall`` 命令替代，详见 :ref:`development-mod`\n- :code:`Environment` 移除 ``set_account_model``、``get_account_model`` 方法，默认的 :code:`Account` 类现在可以支持挂载不同类型的金融工具持仓，大多数情况下无需重载 :code:`Account` 类\n- :code:`Environment` 移除 ``set_position_model``、``get_position_model`` 方法，重载的 :code:`Position` 类型可以调用 :code:`Portfolio.register_instrument_type` 注册\n- 重构了 :code:`AbstractPosition` 接口，现在的 :code:`Position` 对象仅表征单个方向的持仓，而非包含多空两方向的持仓，详见 :ref:`development-basic-concept`\n- 移除了 :code:`BenchmarkProvider` 接口，基准相关的逻辑转移到 :code:`rqalpha_mod_sys_analyser` 内部\n- :code:`BaseDataSource` 使用的 bundle 格式由 bcolz 替换为 hdf5\n- 移除 Mod: ``rqalpha_mod_sys_funcat``、``rqalpha_mod_sys_benchmark``\n- :code:`Instrument` 新增 ``calc_cash_occupation`` 方法，该方法被风控等模块用于计算订单需要占用的资金量，对接新品种的金融工具应重载该方法\n- 移除了以下冗余的 logger 对象：``user_detail_log``、``basic_system_log``、``std_log``\n\n.. _RQDatac: https://www.ricequant.com/welcome/rqdata\n.. _rqalpha_mod_sys_accounts: https://github.com/ricequant/rqalpha/tree/master/rqalpha/mod/rqalpha_mod_sys_accounts\n\n\n3.4.4\n==================\n\n- **修复**\n\n  - 修复 ``rqalpha mod install/uninstall`` 命令与 pip 19.3.1 的兼容性问题\n\n- **变更**\n\n  - :code:`history_bars` 取不到行情时返回空 ndarray 而非 None\n\n\n3.4.2\n==================\n\n- **变更**\n\n  - 移除代码中硬编码的期货交易时间、佣金费率等信息，期货新品种上市不再需要更新 RQAlpha 版本，只需更新 bundle 数据（:ref:`intro-install-get-data`）\n  - 变更 :code:`rqalpha.data` 的目录结构\n  - :code:`rqalpha.utils.get_trading_period` 和 :code:`rqalpha.utils.is_night_trading` 函数变更为 :code:`DataProxy` 的方法\n  - 调整下载 bundle 的 URL\n\n- **新增**\n\n  - :code:`Instrument` 对象新增交易时间相关的 :code:`trading_hours` 和 :code:`trade_at_night` property\n\n\n3.4.1\n==================\n\n- **新增**\n\n  - 对期货 SS, EB 的支持\n\n- **变更**\n\n  - 调整下载 bundle 的 URL，提高 bundle 下载速度\n\n- **修复**\n\n  - 股票/期货上市首日调用 pnl 相关属性抛出异常的问题\n  - 股票股权登记日和分红到账日间隔多个交易日时分红计算错误的问题\n\n\n3.4.0\n==================\n\n- **新增**\n\n  - 股票下单 API 加入资金不足时自动转为使用所有剩余资金下单的功能，见 `rqalpha_mod_sys_accounts <https://github.com/ricequant/rqalpha/tree/master/rqalpha/mod/rqalpha_mod_sys_accounts>`_\n\n- **变更**\n\n  - 重构 :code:`rqalpha_mod_sys_accounts` 中的账户、持仓类，主要变化如下：\n\n    - 持仓类拆分为两层，核心同时兼容期货和股票的逻辑，上层兼容绝大部分旧有 API\n    - 期货保证金的计算逻辑改为跟随行情变化的动态保证金、不再维护持仓序列\n    - 新增 :code:`position_pnl` 昨仓盈亏、:code:`trading_pnl` 交易盈亏字段\n    - 删除 :code:`holding_pnl` 持仓盈亏、:code:`realized_pnl` 实现盈亏字段\n    - 降低账户类和持仓类之间的耦合程度\n\n  - 去掉配置项 :code:`base.resume_mode` 和 :code:`extra.force_run_init_when_pt_resume`，相关判断移交给 :code:`PersistProvider` 实现\n  - 去掉 :code:`Booking` 类，相关逻辑合并至持仓类\n\n\n3.3.3\n==================\n\n- **新增**\n\n  - 对期货 NR、UR、RR 的支持\n\n- **修复**\n\n  - Python2.7 环境下依赖的 numpy 版本不正确的问题\n  - 进程启动后初次触发 settlement 事件时框架内部时间可能不正确的问题\n  - 期货下单 API 未拒绝不足一手的下单请求的问题\n\n\n3.3.2\n==================\n\n- **新增**\n\n  - :code:`SelfTradeValidator` 模块，用于拦截策略可能产生自成交的订单\n  - :code:`buy_close`、:code:`sell_close` API 将订单拆分成多个时给出 WARNING 提示\n  - 对股票更换代码这一行为的支持\n  - 对期货 CJ 品种的支持\n\n\n- **变更**\n\n  - 不再支持 Python3.4\n\n\n- **修复**\n\n  - :code:`Booking` 持久化逻辑错误的问题\n  - 指数的 :code:`Bar` 对象获取 :code:`limit_up`、:code:`limit_down` 字段报错的问题\n  - 策略订阅的合约交易时间与基准合约交易时间不一致会导致模拟交易报错退出的问题\n  - 股票在同一个交易日出现多次分红时计算有误的问题\n  - :code:`order_value` 等 API 在市价单时计算下单量有误的问题\n  - 信号模式下仍然会拦截在标的涨跌停时下出的订单\n\n\n3.3.1\n==================\n\n- **新增**\n\n  - 对期货 SP, EG 品种的支持。\n  - 加入 python3.7 环境下的自动化测试。\n  - 使用 :code:`run_func` 运行的策略不再需要显式地执行 :code:`from rqalpha.api import *`。\n  - :code:`update-bundle` 命令增加中断重试功能。\n  - 增加 :code:`MinuteBarObject` 对象，当分钟线数据不包含涨跌停价时该对象的涨跌停字段改为从日线获取。\n\n\n- **变更**\n\n  - 年化（如收益率）的计算改为使用交易日而非是自然日。\n  - 基准收益率不再使用全仓买入基准合约模拟，改为直接使用前复权价格序列计算。\n  - 策略使用 :code:`subscribe_event` 注册的回调函数改为接收两个参数 :code:`context`, :code:`event`。\n  - 重构了 :code:`Booking` 的计算逻辑，增加了 :code:`trading_pnl`, :code:`position_pnl` 两个字段。\n  - 抽离 :code:`risk.py` 为 `rqrisk <https://github.com/ricequant/rqrisk>`_ 项目。\n  - :code:`order_value` 等使用价值计算股数的下单 API 计算股数时增加对税费的考虑（即计算包含税费的情况下花费一定数量的现金可以交易多少合约）。\n\n\n- **修复**\n\n  - 净值为负的情况下 :code:`Portfolio` 年化收益率计算有误的问题。\n  - :code:`Portfolio` 对象不存在的情况下某些 API 的报错信息不明确的问题。\n  - :code:`RunInfo` 对象中的 :code:`commission_multiplier` 字段不正确的问题。\n  - 期货 tick 回测/模拟交易下滑点计算报错的问题。\n  - 模拟交易和实盘中调用 :code:`submit_order` 发送代码中包含 \"88\" 的股票订单报错的问题。\n  - 限价单 round price 的精度问题。\n  - 策略使用 :code:`subscribe_event` 注册的回调函数和框架内部逻辑触发顺序不可控的问题。\n  - 回测和模拟交易中股票市价单冻结和解冻的资金可能出现不一致的问题。\n\n\n3.2.0\n==================\n\n- **配置和命令**\n\n  - :code:`rqalpha run` 命令增加参数 :code:`-mk/--market`，用来标识策略交易标的所在的市场，如 cn、hk 等。\n  - :code:`rqalpha update_bundle` 更改为 :code:`rqalpha update-bundle`。\n\n- **接口和 Mod**\n\n  - 增加新接口 :code:`AbstractTransactionCostDecider`，在 :code:`Environment` 中注册该接口的实现可以自定义不同合约品种、不同市场的税费计算逻辑。\n  - 增加新 Mod :code:`sys_transaction_cost` 实现上述接口，抽离了原 :code:`sys_simulation` Mod 中的税费计算逻辑，并加入了对港股税费计算的支持。\n  - 移除 :code:`sys_booking` Mod，booking 相关逻辑移入框架中，:code:`Booking` 与 :code:`Portfolio` 类地位相当。\n  - 移除 :code:`sys_stock_realtime` Mod，该 Mod 被移到了单独的仓库 `rqalpha-mod-stock-realtime <https://github.com/ricequant/rqalpha-mod-stock-realtime>`_ ，不再与框架一同维护。\n  - 移除 :code:`sys_stock_incremental` Mod，该 Mod 被移到了单独的仓库 `rqalpha-mod-incremental <https://github.com/ricequant/rqalpha-mod-incremental>`_ ，不再与框架一同维护。\n\n\n- **类型和 Api**\n\n  - 增加 :code:`SimulationBooking` 类，实现了 :code:`Booking` 类相同的方法，用于在回测和模拟交易中兼容实盘 :code:`Booking` 相关的 Api。\n  - 增加 Api :code:`get_position` 和 :code:`get_positions`，用来获取策略持仓的 :code:`BookingPosition` 对象。\n  - 增加 Api :code:`subscribe_event`，策略可以通过该 Api 注册回调函数，订阅框架内部事件。\n  - :code:`DEFAULT_ACCOUNT_TYPE` 枚举类增加债券 :code:`BOND` 类型。\n  - :code:`history_bars` 在 :code:`before_trading` 中调用时可以取到当日日线数据。\n  - 重构 :code:`Instrument` 类，该类所需的字段现在以 property 的形式写明，方便对 Instrument 对象的调用及对接第三方数据源。\n  - :code:`Instrument` 类型新增字段 :code:`market_tplus`，用来标识合约对平仓时间的限制，例如有 T+1 限制的 A 股该字段值为1，港股为 0。\n\n\n- **逻辑**\n\n  - 更改 Benchmark 的买入逻辑，不再对买入数量进行取整，避免初始资金较小时 Benchmark 空仓的问题。\n  - 修正画图时最大回撤的计算逻辑。\n  - 修正年化收益的计算逻辑，年化的天数的计算使用 :code:`start_date`、:code:`end_date`，而非根据交易日历调整后的日期。\n  - 下单冻结资金时考虑税费。\n  - 前端风控验资时考虑税费。\n  - 修复了 :code:`before_trading` 中更新订阅池会可能会导致开盘收到错误 tick 的 Bug。\n  - 修复 beta 值为 0 时 plot result 出错的问题。\n  - 重构 A 股 T+1 的相关逻辑，移除 hard code。\n  - 滑点计算增加对涨跌停价的判断，现在有涨跌停价的合约滑点不会超出涨跌停价的范围。\n  - 修复在取不到行情时下单可能会抛出 RuntimeError 的 Bug。\n\n\n- **依赖**\n\n  - 在 Python2.7 和 Python3.4 环境中限制 Matplotlib 的版本。\n  - 移除了测试用例对 Pandas 的版本依赖。\n  - 不再限制 Pandas 的版本上限。\n  - 移除对 colorama 库的依赖。\n  - 限制 click 库的版本下限为 7.0。\n\n\n- **其他**\n\n  - 加入对期货 TS 品种的支持。\n  - 模拟交易和实盘中支持持久化自定义类型（可被 pickle 的自定义类型）。\n  - 增加了单元测试框架并添加了少量测试用例。\n\n3.1.2\n==================\n\n- 修复上个版本打包时包含异常文件的问题。\n\n3.1.1\n==================\n\n- 修复 :code:`rqalpha mod uninstall` 命令不兼容 pip 10.0 以上版本的bug。\n- 不再限制 logbook 库的版本上限。\n- python 2.7/3.5/3.6 环境下不再限制 bcolz 的版本上限。\n\n3.1.0\n==================\n\n- Api\n\n  - 增加 :code:`symbol(order_book_id, split=\", \")` 扩展Api，用于获取合约简称。\n  - 修改 :code:`current_snapshot(id_or_symbol)`，该 Api 支持在 before_trading/after_trading 中调用。\n  - 修改 :code:`history_bars`，增加对 :code:`frequency` 参数的检查。\n  - 修正 :code:`order(order_book_id, quantity, price=None, style=None)` 函数期货下单的逻辑。\n  - 修改股票下单接口，允许一次性申报卖出非100股整倍数的股票。\n  - 修改下单接口，当因参数检查或前端风控等原因创建订单失败时，接口返回 None 或空 list，并打印 warn。\n\n\n- 接口\n\n  - :code:`AbstractDataSource` 接口增加 :code:`get_tick_size(instrument)` 方法，:code:`BaseDataSource` 实现了该方法。\n  - :code:`AbstractDataSource` 接口增加 :code:`history_ticks(instrument, count, fields, dt)` 方法，支持 tick 级别策略运行的 DataSource 应实现该方法。\n  - 增加通用下单接口 :code:`submit_order(id_or_ins, amount, side, price=None, position_effect=None)`，策略可以通过该接口自由选择参数下单。\n\n\n- 类\n\n  - :code:`Instrument` 类新增 :code:`tick_size()` 方法。\n  - :code:`PersistHelper` 类新增 :code:`unregister(key)` 方法，可以调用该方法注销已经注册了持久化服务的模块。\n  - 新增 :code:`TickObject` 类，替代原 :code:`Tick` 类和 :code:`SnapshotObject` 类。可通过 :code:`TickObject` 对象的 asks, bids, ask_vols, bid_bols 四个属性获取买卖报盘。\n\n- 配置\n\n  - 增加 :code:`base.round_price` 参数，开启后现价单价格会被调整为最小价格变动单位的整倍数，对应的命令行参数为 :code:`--round-price`。\n  - :code:`sys_simulation Mod` 增加滑点模型 :code:`slippage_model` 参数，滑点不再限制为价格的比率，亦可使用基于最小价格变动单位的滑点模型，甚至加载自定义的滑点模型。\n  - :code:`sys_simulation Mod` 增加股票最小手续费 :code:`stock_min_commission` 参数，用于控制回测和模拟交易中单笔股票交易收取的最小手续费，对应的命令行参数为 :code:`--stock-min-commission 5`\n  - :code:`sys_account Mod` 增加 :code:`future_forced_liquidation` 参数，开启后期货账户在爆仓时会被强平。\n\n- 其他\n\n  - Fix `Issue 224 <https://github.com/ricequant/rqalpha/issues/224>`_ ， 解决了展示图像时图像不能被保存的问题。\n  - 策略运行失败时 return code 为 1。\n  - 开启 :code:`force_run_init_when_pt_resume` 参数时，策略启动前将会清空 universe。\n  - 移除对 `better-exceptions <https://github.com/Qix-/better-exceptions>`_ 库的依赖，可以通过安装并设置环境变量的方式获得更详细的错误栈。\n  - 修复 :code:`StockPosition` 类中股票卖空买回时计算平均开仓价格错误的 bug。\n  - 修复画图时最大回撤计算错误的 bug。\n  - 重构 :code:`Executor`，现在 EventSource 不再需要发出 SETTLEMENT 事件，框架会在第二个交易日 BEFORE_TRAINDG 事件前先发出 SETTLEMENT 事件，如果 EventSource 未发出 BEFORE_TRAINDG 事件，该事件会在第一个行情事件到来时被框架发出。\n  - 加入新 Mod :code:`rqalpha_mod_sys_incremental`，启用该 Mod 可以增量运行回测，方便长期跟踪策略而不必反复运行跑过的日期，详情参考文档 `sys_incremental Mod README <https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_incremental/README.rst>`_。\n  - 加入新 Mod :code:`rqalpha_mod_sys_booking`，该 Mod 用于从外部加载仓位作为实盘交易的初始仓位，详情参考文档 `sys_booking Mod README <https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_booking/README.rst>`_。\n\n3.0.10\n==================\n\n- 支持期货合约：苹果（AP）、棉纱（CY）、原油（SC）\n- 限制 :code:`better-exceptions`、:code:`bcolz` 库的版本\n- 支持 pip 10.x\n- 修复 tick 回测中夜盘前 before_trading 无法获取白天数据的问题\n- 当 :code:`force_run_init_when_pt_resume` 开启时会清空 persist 的 universe\n- 增加资金风控中对佣金的考虑\n- 修复文档中若干 typo\n\n3.0.9\n==================\n\n- 限制 pandas 的版本为 0.18 ~ 0.20 ，因为 0.21 和 matplotlib 有些不兼容。\n\n3.0.8\n==================\n\n- 修复 :code:`rqalpha run --config` 参数\n- 增加 ON_NORMAL_EXIT 的持久化模式，在 RQAlpha 成功运行完毕后进行 persist 。可以在盘后快速地根据昨日持久化数据继续运行回测来增量回测。\n- 增加 :code:`rqalpha run --logger` 参数可以单独设置特定的 logger 的 level\n- 增加 persist_provider 的检查\n- 修复 :code:`get_prev_close`\n- 打印 mod 的启动状态信息，方便 debug\n- 增加 :code:`is_valid_price` 工具函数来判断价格是否有效\n- 修复期货账户因为保证金变化导致total_value计算错误\n- 重构股票账户 :code:`last_price` 更新\n- 修复期货下单拒单是错误信息typo\n- 当启动LIVE_TRADING模式的时候，跳过simulation_mod的初始化\n- 增加 :code:`rqalpha run --position` 来设置初始仓位的功能\n-\n\n3.0.6\n==================\n\n- import 修改相对引用为绝对引用\n- 重构配置文件读取功能，分为默认配置，用户配置，项目配置\n- 重构 `main()` 的 `tear_down` 的调用\n- get_previous_trading_date(date, n=1) 增加参数 n\n- 增加公募基金数据处理相关逻辑\n- 修改 `mod.tear_down` ，如果单个 mod 在 tear_down 抛异常后，不影响其他 mod 继续 tear_down\n- scheduler bugfix\n- 处理 persist 遇到的异常\n- 修复 order get_state / set_state 缺失 transaction_cost, avg_price\n- 修复 mod_sys_stock_realtime\n\n3.0.2\n==================\n\n- 取消在股票下单函数中对 `order_book_id` 类型的检查，现在您可以交易 `ETF`, `LOF`, `FenjiMu`, `FenjiA`, `FenjiB`, `INDX` 了\n- Merge `PR 170 <https://github.com/ricequant/rqalpha/pull/170>`_ 解决自定义 `volume limit` 时显示数值不正确的问题。\n- Fix `Issue 148 <https://github.com/ricequant/rqalpha/issues/148>`_ `get_dividend()方法返回的类型是numpy.ndarray，而非pandas.DataFrame`\n- Fix `Issue 169 <https://github.com/ricequant/rqalpha/issues/169>`_ 执行 `rqalpha mod install ctp==0.2.0dev0` 时错误的记录了库信息的问题\n- Fix `Issue 158 <https://github.com/ricequant/rqalpha/issues/158>`_ 多次循环 `run_file` / `run_code` 时导致的内存泄漏的问题\n- Enhance `Issue 166 <https://github.com/ricequant/rqalpha/issues/166>`_ 启动参数支持 `--no-stock-t1` 来屏蔽股票 T + 1 导致今仓的限制\n- 性能提升: 使用 `bisect_right` 代替 `searchsorted`\n\n3.0.0\n==================\n\n**[For 开发/运行策略的用户]**\n\n3.x 相比 2.x 进行了如下更改，如果您升级到 3.x 版本，请务必阅读以下内容，保证您的策略可以顺利启动和执行:\n\n- 命令行参数做出如下调整\n\n  - 不再使用 :code:`-sc/--stock-starting-cash` 参数\n  - 不再使用 :code:`-fc/--future-starting-cash` 参数\n  - 不再使用 :code:`-i/--init-cash` 参数\n  - 不再使用 :code:`-s/--security` 参数\n  - 不再使用 :code:`-k/--kind` 参数\n  - 不再使用 :code:`--strategy-type` 参数\n  - **使用** :code:`--account` 来替代，具体用法如下\n\n.. code-block:: bash\n\n  # 策略通过命令行运行，设置可交易类型是股票，起始资金为 10000\n  $ rqalpha run --account stock 10000\n  # 策略通过命令行运行，设置可交易类型为期货，起始资金为 50000\n  $ rqalpha run --account future 50000\n  # 策略通过命令行运行，设置可交易类型为期货和股票，起始资金分别为 股票 10000, 期货 50000\n  $ rqalpha run --account stock 10000 --account future 50000\n  # 如果您通过 Mod 扩展，自定义了一种可交易类型(假设是huobi)，您也可以增加对于火币的支持和起始资金设置\n  $ rqalpha run --account stock 10000 --account future 50000 --account huobi 20000\n\n- 相应，如果您通过 :code:`run_file | run_code | run_func` 来启动策略，配置文件及配置信息也做了对应的调整:\n\n  - 不再使用 :code:`base.stock_starting_cash`\n  - 不再使用 :code:`base.future_starting_cash`\n  - 不再使用 :code:`base.securities`\n  - **使用** :code:`base.accounts` 来替代，具体用法如下:\n\n.. code-block:: python\n\n  # 策略通过配置，设置可交易类型是股票，起始资金为 10000\n  config = {\n    \"base\": {\n      \"start_date\": \"...\",\n      \"end_date\": \"...\",\n      \"frequency\": \"...\",\n      \"matching_type\": \"...\",\n      \"benchmark\": \"...\",\n      \"accounts\": {\n        \"stock\": 10000\n      }\n    }\n  }\n  # 策略通过配置，设置可交易类型是期货，起始资金为 50000\n  config = {\n    \"base\": {\n      \"start_date\": \"...\",\n      \"end_date\": \"...\",\n      \"frequency\": \"...\",\n      \"matching_type\": \"...\",\n      \"benchmark\": \"...\",\n      \"accounts\": {\n        \"future\": 50000\n      }\n    }\n  }\n  # 策略通过配置，设置可交易类型为期货和股票，起始资金分别为 股票 10000, 期货 50000\n  config = {\n    \"base\": {\n      \"start_date\": \"...\",\n      \"end_date\": \"...\",\n      \"frequency\": \"...\",\n      \"matching_type\": \"...\",\n      \"benchmark\": \"...\",\n      \"accounts\": {\n        \"stock\": 10000,\n        \"future\": 50000\n      }\n    }\n  }\n  # 如果您通过 Mod 扩展，自定义了一种可交易类型(假设是huobi)，您也可以增加对于火币的支持和起始资金设置\n  config = {\n    \"base\": {\n      \"start_date\": \"...\",\n      \"end_date\": \"...\",\n      \"frequency\": \"...\",\n      \"matching_type\": \"...\",\n      \"benchmark\": \"...\",\n      \"accounts\": {\n        \"stock\": 10000,\n        \"future\": 50000,\n        \"huobi\": 20000\n      }\n    }\n  }\n\n\n\n**[For Mod developer]**\n\n本次更新可能导致已实现 Mod 无法正常使用，请按照文档升级您的 Mod，或者使用 2.2.x 版本 RQAlpha\n\n在通过 Mod 扩展 RQAlpha 的时候，由于 RQAlpha 直接定义了 `Account` 和 `Position` 相关的 Model, 增加新的 `account` 和 `position` 变得非常的困难，想扩展更多类型是一件很麻烦的事情，因此我们决定重构该模块从而解决这些问题。\n\n详情请查看: https://github.com/ricequant/rqalpha/issues/160\n\n主要进行如下更改:\n\n- 增加 :code:`AbstractAccount` 和 :code:`AbstractPosition`, 用户可以基于该抽象类进行扩展。\n- :code:`const.ACCOUNT_TYPE` 修改为 :code:`const.DEFAULT_ACCOUNT_TYPE`，并且不再直接使用，您可以通过 :code:`Environment.get_instance().account_type_dict` 来获取包括 Mod 注入的账户类型。\n- 原先所有使用 `ACCOUNT_TYPE` 作为 key 的地方，不再使用 Enum 类型作为 Key, 而是修改为对应 Enum 的 name 作为key。比如说原本使用 :code:`portfolio.accounts[ACCOUNT_TYPE.STOCK]` 更改为 :code:`portfolio.accounts['STOCK']`\n- :code:`Environment` 提供 :code:`set_account_model` | :code:`get_account_model` | :code:`set_position_model` | :code:`get_position_model` API 来注入 自定义Model。\n- :code:`Environment` 提供 :code:`set_smart_order` API 来注入自定义账户类型的智能下单函数，从而通过通用的 :code:`order` | :code:`order_to` API 便可以交易对应自定义账户类型。\n- RQAlpha 将已有的 AccountModel, PositionModel 和 API 抽离至 `rqalpha_mod_sys_accounts` 中，通过如下方式注入:\n\n.. code-block:: python\n\n  from .account_model import *\n  from .position_model import *\n  from .api import api_future, api_stock\n\n\n  class AccountMod(AbstractMod):\n\n      def start_up(self, env, mod_config):\n\n          # 注入 Account\n          env.set_account_model(DEFAULT_ACCOUNT_TYPE.STOCK.name, StockAccount)\n          env.set_account_model(DEFAULT_ACCOUNT_TYPE.FUTURE.name, FutureAccount)\n          env.set_account_model(DEFAULT_ACCOUNT_TYPE.BENCHMARK.name, BenchmarkAccount)\n\n          # 注入 Position\n          env.set_position_model(DEFAULT_ACCOUNT_TYPE.STOCK.name, StockPosition)\n          env.set_position_model(DEFAULT_ACCOUNT_TYPE.FUTURE.name, FuturePosition)\n          env.set_position_model(DEFAULT_ACCOUNT_TYPE.BENCHMARK.name, StockPosition)\n\n          # 注入 API\n          if DEFAULT_ACCOUNT_TYPE.FUTURE.name in env.config.base.accounts:\n              # 注入期货API\n              for export_name in api_future.__all__:\n                  export_as_api(getattr(api_future, export_name))\n              # 注入 smart order\n              env.set_smart_order(DEFAULT_ACCOUNT_TYPE.FUTURE.name, api_future.smart_order)\n          if DEFAULT_ACCOUNT_TYPE.STOCK.name in env.config.base.accounts:\n              # 注入股票API\n              for export_name in api_stock.__all__:\n                  export_as_api(getattr(api_stock, export_name))\n              # 注入 smart order\n              env.set_smart_order(DEFAULT_ACCOUNT_TYPE.STOCK.name, api_stock.smart_order)\n\n      def tear_down(self, code, exception=None):\n          pass\n\n\n2.2.7\n==================\n\n- 解决当存在无效 Mod 时，RQAlpha 崩溃无法启动的问题\n- 修复期货下单函数默认 style 为 None 导致报错退出的问题\n\n2.2.5\n==================\n\n- 增加 IPython Magic 方便在 IPython 中运行回测 `run-rqalpha-in-ipython.ipynb <https://github.com/ricequant/rqalpha/blob/master/docs/source/notebooks/run-rqalpha-in-ipython.ipynb>`_ 。运行完回测后，会将所有的 mod 的输出结果保存在 results 变量中，并且会将回测报告存储在 report 对象中。\n- 修复系统异常、用户异常的区分判断\n- 增加 :code:`--source-code` 参数可以直接在命令行中传入策略源代码进行回测，这个选项目前主要给 IPython 使用。\n- 对于 :code:`history_bars` 当 fields 为 None 的时候，指定为 [\"datetime\", \"open\", \"high\", \"low\", \"close\", \"volume\"] 。\n- 重构 rqalpha_mod_sys_funcat 的数据获取\n- 修复 order 的 set_state 的 bug\n- 优化分红计算\n- 提取 inject_mod_commands 给 click 参数注入\n\n.. code-block:: python\n\n  # 加载 rqalpha 插件\n  %load_ext rqalpha\n\n  # 运行回测\n  %% rqalpha -s 20160101 -e 20170101 -sc 100000\n\n2.2.4\n==================\n\n- 所有的下单函数进行了扩展，扩展如下:\n\n.. code-block:: python\n\n  # 以 order_shares 举例，其他的下单函数同理。\n  # 原本的下单方式: 以 200 元的价格下单 100 股 000001.XSHE\n  order_shares(\"000001.XSHE\", 100, style=LimitOrder(200))\n  # 下单的如下方式都OK:\n  order_shares(\"000001.XSHE\", 100, 200)\n  order_shares(\"000001.XSHE\", 100, LimitOrder(200))\n  order_shares(\"000001.XSHE\", 100, price=200)\n  order_shares(\"000001.XSHE\", 100, style=LimitOrder(200))\n\n- :code:`buy_close` 和 :code:`sell_close` API 增加 :code:`close_today` 参数，现在您现在可以指定发平今单了。\n- Breaking Change: 原本期货中的 :code:`buy_close` 和 :code:`sell_close` API 返回的 :code:`Order` 对象。但实际交易过程中，涉及到昨仓今仓的时候，可能会存在发单被拒单的情况，RQAlpha 进行平昨/平今智能拆单的处理，因此在一些情况下会生成多个订单，对应也会返回一个订单列表。期货平仓更新的内容请参考 `Issue 116 <https://github.com/ricequant/rqalpha/issues/116>`_\n- Breaking Change: 取消 :code:`Order` | :code:`Trade` 对应的 :code:`__from_create__` 函数中 :code:`calendar_dt` 和 :code:`trading_dt` 的传入，对接第三方交易源，构建订单和成交的 Mod 可能会产生影响，需要进行修改.\n\n.. code-block:: python\n\n  # 原先的构建方式\n  Order.__from_create__(\n    calendar_dt,\n    trading_dt,\n    order_book_id,\n    amount,\n    side,\n    style,\n    position_effect\n  )\n  #修改为\n  Order.__from_create__(\n    order_book_id,\n    amount,\n    side,\n    style,\n    position_effect\n  )\n\n- `iPython` 更新至 6.0 版本以后不再支持 `Python 2.x` 导致在 `Python 2.x` 下安装RQAlpha 因为 `line-profiler` 依赖 `iPython` 的缘故而报错。目前增加了在 `Python 2.x` 下依赖 `iPython 5.3.0` 版本解决此问题。\n- 不再提供 `rqalpha-cmd` 命令的扩展和注入，目前只有一个 entry point: `rqalpha` 第三方 Mod 可以扩展 `rqalpha` 命令。\n- 增加 :code:`from rqalpha import subscribe_event` 来支持事件订阅(暂时不增加到API中，您如果想在策略里使用，也需要主动 import 该函数), 如下示例所示:\n\n.. code-block:: python\n\n  from rqalpha.api import *\n  from rqalpha import subscribe_event\n\n\n  def on_trade_handler(event):\n      trade = event.trade\n      order = event.order\n      account = event.account\n      logger.info(\"*\" * 10 + \"Trade Handler\" + \"*\" * 10)\n      logger.info(trade)\n      logger.info(order)\n      logger.info(account)\n\n\n  def on_order_handler(event):\n      order = event.order\n      logger.info(\"*\" * 10 + \"Order Handler\" + \"*\" * 10)\n      logger.info(order)\n\n\n  def init(context):\n      logger.info(\"init\")\n      context.s1 = \"000001.XSHE\"\n      update_universe(context.s1)\n      context.fired = False\n      subscribe_event(EVENT.TRADE, on_trade_handler)\n      subscribe_event(EVENT.ORDER_CREATION_PASS, on_order_handler)\n\n\n  def before_trading(context):\n      pass\n\n\n  def handle_bar(context, bar_dict):\n      if not context.fired:\n          order_percent(context.s1, 1)\n          context.fired = True\n\n  # rqalpha run -f ./rqalpha/examples/subscribe_event.py -s 2016-06-01 -e 2016-12-01 --stock-starting-cash 100000 --benchmark 000300.XSHG\n\n- `sys_stock_realtime` 提供了一个行情下载服务，启动该服务，会实时往 redis 中写入全市场股票行情数据。多个 RQAlpha 可以连接该 redis 获取实时盘口数据，就不需要重复获取数据。详情参考文档 `sys stock realtime mod README <https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_stock_realtime/README.rst>`_\n- 解决期货策略持仓到交割导致可用资金计算不准确的问题\n- 解决 `--plot` 时候会报错退出的问题\n\n\n2.2.2\n==================\n\n- 增加 :code:`run_file` | :code:`run_code` | :code:`run_func` API, 详情请参见 `多种方式运行策略 <http://rqalpha.io/zh_CN/latest/intro/run_algorithm.html>`_\n- Breaking Change: 更改 :code:`AbstractStrategyLoader:load` 函数的传入参数，现在不需要 :code:`strategy` 了。\n- 增加 :code:`UserFuncStrategyLoader` 类\n- 根据 `Issue 116 <https://github.com/ricequant/rqalpha/issues/116>`_ 增加如下内容:\n\n  - :code:`POSITION_EFFECT` 增加 :code:`CLOSE_TODAY` 类型\n  - 增加调仓函数 :code:`order(order_book_id, quantity, price=None)` API\n\n    - 如果不传入 price 则认为执行的是 MarketOrder 类型订单，否则下 LimitOrder 订单\n    - 期货\n\n      - quantity > 0: 往 BUY 方向调仓 quantity 手\n      - quantity < 0: 往 SELL 方向调仓 quantity 手\n\n    - 股票\n\n      - 相当于 order_shares 函数\n\n  - 增加调仓函数 :code:`order_to(order_book_id, quantity, price=None)` API\n\n    - 基本逻辑和 :code:`order` 函数一致\n    - 区别在于 quantity 表示调仓对应的最终仓位\n\n  - 现有所有下单函数，增加 `price` option，具体行为和 :code:`order` | :code:`order_to` 一致\n\n- Fix bug in :code:`all_instruments` `PR 123 <https://github.com/ricequant/rqalpha/pull/123>`_\n- Fix \"运行不满一天的情况下 sys_analyser 报 KeyError\" `PR 118 <https://github.com/ricequant/rqalpha/pull/118>`_\n- sys_analyser 生成 report 对应的字段进行调整，具体调整内容请查看 commit `d9d19f <https://github.com/ricequant/rqalpha/commit/f6e4c24fde2f086cc09b45b2cc4d2cfe0cd9d19f>`_\n\n2.2.0\n==================\n\n- 增加 :code:`order` 和 :code:`order_to` 高阶下单函数\n- 更新数据源，现在使用原始数据和复权因子的方式进行回测\n- 不再使用 `ruamel.yaml` 该库在某些情况下无法正确解析 yml 配置文件\n- 解决 `six` 库依赖多次引用导致安装出错的问题\n- 解决 :code:`rqalpha run` 的时候指定 :code:`-st` | :code:`--kind` 时报错的问题\n- :code:`--security` / :code:`-st` 现在支持多种模式，可以使用 :code:`-st stock -st future` 也可以使用 :code:`-st stock_future` 来设置security\n- 更新 BarDictPriceBoard `Issue 115 <https://github.com/ricequant/rqalpha/issues/115>`_\n- 解决 :code:`print(context.portfolio)` 时因为调用了 `abandon property` 会报 warning 的问题 `Issue 114 <https://github.com/ricequant/rqalpha/issues/114>`_\n- 解决 :code:`rqalpha mod install xx` 不存在的 Mod 也会导致 mod_config.yml 更新的问题 `Issue 111 <https://github.com/ricequant/rqalpha/issues/111>`_\n- 解决 :code:`rqalpha plot` 无法画图的问题 `Issue 109 <https://github.com/ricequant/rqalpha/issues/109>`_\n\n2.1.4\n==================\n\n- 解决 history_bars 在 before_trading 获取的是未来数据的问题\n- 解决 before_trading 获取结算价是当前交易日结算价的问题\n- 增加 RQAlpha 向前兼容(0.3.x) `Issue 100 <https://github.com/ricequant/rqalpha/issues/100>`_\n- 期货增加强平机制: 及当前账户权益<=0时，清空仓位，资金置0 `Issue 108 <https://github.com/ricequant/rqalpha/issues/108>`_\n- 解决回测时只有一个交易日时，只有回测数据显示的问题\n\n2.1.3\n==================\n\n- Fix `Issue 101 <https://github.com/ricequant/rqalpha/issues/101>`_\n- Fix `Issue 105 <https://github.com/ricequant/rqalpha/issues/105>`_\n- 解决运行 RQAlpha 时缺少 `six` | `requests` 库依赖的问题\n- 解决安装RQAlpha时在某些情况下报错的问题\n- 解决第三方 Mod 安装后配置文件路径有误的问题\n- 现在可以通过 `rqalpha mod install -e .` 的方式来安装依赖 Mod 了\n- 现在运行策略时会检测当前目录是否存在 `config.yml` 或者 `config.json` 来作为配置文件\n- 解决股票下单就存在 `position` 的问题，现在只有成交后才会产生 `position` 了。\n- 修复 `portfolio` 和 `future_account` 计算逻辑的一些问题\n- 修复 `transaction_cost` 在某个 position 清空以后计算不准确的问题\n- 在信号模式下 `price_limit` 表示是否输出涨跌停买入/卖出的报警信息，但不会阻止其买入/卖出\n\n2.1.2\n==================\n\n- 提供 :code:`from rqalpha import cli` 方便第三方 Mod 扩展 `rqalpha` command\n- :code:`history_bars` 增加 :code:`include_now` option\n- Fix `Issue 90 <https://github.com/ricequant/rqalpha/issues/90>`_\n- Fix `Issue 94 <https://github.com/ricequant/rqalpha/issues/94>`_\n\n2.1.0\n==================\n\n- Fix `Issue 87 <https://github.com/ricequant/rqalpha/issues/87>`_\n- Fix `Issue 89 <https://github.com/ricequant/rqalpha/pull/89>`_\n- Fix 无法通过 :code:`env.config.mod` 获取全部 `mod` 的配置信息\n- 增加 :code:`context.config` 来获取配置信息\n- 提供 :code:`from rqalpha import export_as_api` 接口，方便扩展自定义 API\n\n2.0.9\n==================\n\n- Fix `Issue 79 <https://github.com/ricequant/rqalpha/issues/79>`_\n- Fix `Issue 82 <https://github.com/ricequant/rqalpha/issues/82>`_\n- Fix :code:`rqalpha cmd` 失效\n\n2.0.8\n==================\n\n- Fix `Issue 81 <https://github.com/ricequant/rqalpha/issues/81>`_\n- 解决 `mod_config.yml` 文件解析出错以后，所有的命令报错的问题\n- 默认在 Python 2.x 下 `sys.setdefaultencoding(\"utf-8\")`\n- 优化 `UNIVERSE_CHANGED` 事件，现在只有在universe真正变化时才触发\n\n2.0.7\n==================\n\n- Fix `Issue 78 <https://github.com/ricequant/rqalpha/issues/78>`_\n- `is_st_stock` | `is_suspended` 支持 `count` 参数\n- 解决大量 Python 2.x 下中文乱码问题\n\n2.0.6\n==================\n\n- 解决在 Python 2.x 下安装 RQAlpha 提示 `requirements-py2.txt Not Found` 的问题\n- 解决 `Benchmark` 无法显示的问题\n- 解决 `rqalpha mod list` 显示不正确的问题\n- 现在可以通过配置 `base.extra_vars` 向策略中预定义变量了。用法如下:\n\n.. code-block:: python3\n\n    from rqalpha import run\n\n    config = {\n      \"base\": {\n        \"strategy_file\": \"strategy.py\",\n        \"start_date\": \"2016-06-01\",\n        \"end_date\": \"2016-07-01\",\n        \"stock_starting_cash\":100000,\n        \"benchmark\": '000300.XSHG'\n      },\n      \"extra\":{\n        \"context_vars\":{\n          \"short\":5,\n          \"middle\":10,\n          \"long\":21\n        }\n      }\n    }\n\n    result_dict = run(config)\n\n    # 以下是策略代码:\n\n    def handle_bar(context):\n        print(context.short)    # 5\n        print(context.middle)   # 10\n        print(context.long)     # 21\n\n2.0.1\n==================\n\n- 修改配置的读取方式，不再从 `~/.rqalpha/config.yml` 读取自定义配置信息，而是默认从当前路径读取 `config.yml`，如果没找到，则会读取系统默认配置信息\n- 现在不再对自定义信息进行版本检查\n- :code:`rqalpha generate_config` 现在会生成包含所有默认系统配置信息的 `config.yml` 文件。\n- :code:`RUN_TYPE` 增加 :code:`LIVE_TRADING`\n- 修复 :code:`history_bars` 获取日期错误产生的问题\n- 修复执行 :code:`context.run_info` 会报错的问题\n- 修复持久化报错的问题\n- 增加 Order Persist 相关内容\n\n\n2.0.0\n==================\n\n2.0.0 详细修改内容请访问：`RQAlpha 2.0.0 <https://github.com/ricequant/rqalpha/issues/65>`_\n\n**Portfolio/Account/Position 相关**\n\n- 重新定义了 :code:`Portfolio`, :code:`Account` 和 :code:`Position` 的角色和关系\n- 删除大部分累计计算的属性，重新实现股票和期货的计算逻辑\n- 现在只有在 :code:`Portfolio` 层级进行净值/份额的计算，Account级别不再进行净值/份额/收益/相关的计算\n- 账户的恢复和初始化现在只需要 :code:`total_cash`, :code:`positions` 和 :code:`backward_trade_set` 即可完成\n- 精简 :code:`Position` 的初始化，可以从 :code:`real_broker` 直接进行恢复\n- :code:`Account` 提供 :code:`fast_forward` 函数，账户现在可以从任意时刻通过 :code:`orders` 和 :code:`trades` 快速前进至最新状态\n- 如果存在 Benchmark， 则创建一个 :code:`benchmark_portfolio`, 其包含一个 :code:`benchmark_account`\n- 策略在调用 :code:`context.portfolio.positions[some_security]` 时候，如果 position 不存在，不再每次都创建临时仓位，而是会缓存，从而提高回测速度和性能\n- 不再使用 :code:`clone` 方法\n- 不再使用 :code:`PortfolioProxy` 和 :code:`PositionProxy`\n\n**Event 相关**\n\n- 规范 Event 的生成和相应逻辑, 使用 Event object 来替换原来的 Enum\n- 抽离事件执行相关逻辑为 :code:`Executor` 模块\n\n**Mod 相关**\n\n- 规范化 Mod 命名规则，需要以 `rqalpha_mod_xxx` 作为 Mod 依赖库命名\n- 抽离 :code:`slippage` 相关业务逻辑至 :code:`simulation mod`\n- 抽离 :code:`commission` 相关业务逻辑至 :code:`simulation mod`\n- 抽离 :code:`tax` 相关业务逻辑至 :code:`simulation mod`\n- `rqalpha mod list` 命令现在可以格式化显示 Mod 当前的状态了\n\n**Environment 和 ExecutionContext 相关**\n\n- 现在 :code:`ExecutionContext` 只负责上下文相关的内容，不再可以通过 :code:`ExecutionContext` 访问其他成员变量。\n- 扩展了 :code:`Environment` 的功能，RQAlpha 及 Mod 均可以直接通过 :code:`Environment.get_instance()` 来获取到环境中核心模块的引用\n- :code:`Environment` 还提供了很多常用的方法，具体请直接参考代码\n\n**配置及参数相关**\n\n- 重构了配置相关的内容，`~/.rqalpha/config.yml` 现在类似于 Sublime/Atom 的用户配置文件，用于覆盖默认配置信息，因此只需要增加自定义配置项即可，不需要全部的配置内容都存在\n- 将Mod自己的默认配置从配置文件中删除，放在Mod中自行管理和维护\n- 独立存在 `~/.rqalpha/.mod_conifg.yml`, 提供 `rqalpha mod install/uninstall/enable/disable/list` 命令，RQAlpha 会通过该配置文件来对Mod进行管理。\n- 抽离 :code:`rqalpha run` 的参数，将其中属于 `Mod` 的参数全部删除，取代之为Mod提供了参数注入机制，所以现在 `Mod` 可以自行决定是否要注入参数或者命令来扩展 RQAlpha 的功能\n- 提供了 :code:`rqalpha-cmd` 命令，`Mod` 推荐在该命令下注入自己的命令来实现功能扩展\n- 不再使用 `--strategy-type`， 改为使用 `--security` 选项\n- `--output-file` | `--report` | `--plot` | `--plot-save`参数 转移至 `sys_analyser` Mod 中\n- `plot` | `report` 命令，转移至 `sys_analyser` Mod 中\n- `--signal` | `--slippage` | `--commission-multiplier` | `--matching-type` | `--rid` 转移至 `sys_simulation` Mod 中\n\n**Risk 计算**\n\n- 修复 `tracking error <https://www.ricequant.com/api/python/chn#backtest-results-factors>`_ 计算错误\n- 修改 `sharpe <https://www.ricequant.com/api/python/chn#backtest-results-risk-adjusted-returns>`_ , `sortino <https://www.ricequant.com/api/python/chn#backtest-results-risk-adjusted-returns>`_ , `information ratio <https://www.ricequant.com/api/python/chn#backtest-results-risk-adjusted-returns>`_ , `alpha <https://www.ricequant.com/api/python/chn#backtest-results-returns>`_ 计算逻辑。参考 `晨星 <https://gladmainnew.morningstar.com/directhelp/Methodology_StDev_Sharpe.pdf>`_ 的方法, 先计算单日级别指标, 再进行年化。与原本直接基于年化值计算相比, 在分析时间较短的情况下, 新的指标计算结果会系统性低于原指标结果。\n- 引入单日无风险利率作为中间变量计算上述指标。单日无风险利率为通过 `中国债券信息网 <http://yield.chinabond.com.cn/cbweb-mn/yield_main>`_ 获取得到对应期限的年化国债到期收益率除以244得到\n- 修改指标说明若干\n\n**其他**\n\n- 修改了 :code:`Order` 和 :code:`Trade` 的字段和函数，使其更通用\n- 为 :code:`RqAttrDict` 类增加 :code:`update` 方法，现在支持动态更新了\n- :code:`arg_checker` 增加 :code:`is_greater_or_equal_than` 和 :code:`is_less_or_equal_than` 函数\n- 删除 :code:`DEFAULT_FUTURE_INFO` 变量，现在可以直接通过 :code:`data_proxy` 获取相关数据\n- 通过 `better_exceptions <https://github.com/Qix-/better-exceptions>`_ 提供更好的错误堆栈提示体验\n- 对字符串的处理进行了优化，现在可以正确在 Python2.x/3.x 下显示中文了\n- 修复 :code:`update_bundle` 直接在代码中调用会报错的问题\n- 增加对于下单量为0的订单过滤，不再会创建订单，也不再会输出警报日志\n- 增加 :code:`is_suspended` 和 :code:`is_st_stock` API 的支持\n\n0.3.14\n==================\n\n- Hotfix :code:`UnboundLocalError: local variable 'signature' referenced before assignment`\n\n0.3.13\n==================\n\n- 增加股票裸做空的配置参数 :code:`--short-stock`\n- :code:`POSITION_EFFECT` 增加 :code:`CLOSE_TODAY`\n- :code:`ExecutionContext` 增加 :code:`get_current_close_price` :code:`get_future_commission_info`  :code:`get_future_margin` :code:`get_future_info` 函数\n- 增加 :code:`RQInvalidArgument` 来处理用户策略代码异常的问题\n- 现在可以正确提示期货主力连续合约和指数连续合约在回测和模拟中的报错信息了\n- 现在以 :code:`handle_tick(context, tick)` 的方式支持tick级别的API支持(未来可能会修改)\n- 现在回测时的 :code:`before_trading` 函数输出的时间提前到开盘前半小时\n\n0.3.12\n==================\n\n- 优化 `setup.py` 脚本，只有在 python 2 环境下才安装兼容性依赖库\n- 增加 :code:`rqalpha install/uninstall/list/enable/disable` 命令\n- 增加 :code:`EVENT.POST_SYSTEM_RESTORED` 事件\n- 增加 净值和份额的支持，现在的收益和Analyser的计算都是基于净值了。\n- 在 AnalyserMod 输出的 Trade 中增加 :code:`side` 和 :code:`position_effect`\n- 修复 :code:`total_orders` 计算错误\n- 修复 :code:`inpsect.signature` 在 python 2.x 报错的问题。\n\n0.3.11\n==================\n\n- 更新本地化翻译，修改系统提示，支持多语言\n- 增加 :code:`--locale` 默认为 :code:`cn` (中文), 支持 :code:`cn | en` (中文 | 英文)\n- 修复 :code:`main.run` 返回值中 :code:`stock_position` 为 :code:`None` 的问题\n- 修复 Windows Python 2.7 下中文显示乱码的问题\n\n0.3.10\n==================\n\n- 增加 :code:`config.yml` 的版本号检查及相关流程\n- 增加 :code:`plot` 关于中文字体的校验，如果系统没有中文字体，则显示英文字段\n- 修正 :code:`Benchmark` 在不设置时某些情况下会导致运行失败的错误\n- 修正 :code:`inspect.unwrap` 在 Python 2.7 下不支持的兼容性问题\n- 修正 :code:`numpy` 在某些平台下没有 `float128` 引起的报错问题\n\n0.3.9\n==================\n\n- 增加 :code:`--disable-user-system-log` 参数，可以独立关闭回测过程中因策略而产生的系统日志\n- :code:`--log-level` 现在可以正确区分不同类型的日志，同时增加 :code:`none` 类型，用来关闭全部日志信息。\n- 在不指定配置文件的情况下，默认会调用 :code:`~/.rqalpha/config.yml` 文件\n- 支持 :code:`rqalpha generate_config` 命令来获取默认配置文件\n- 指定策略类型不再使用 :code:`--kind` 参数，替换为 :code:`--strategy-type` 和配置文件呼应\n- 重构 :code:`events.py`，现在可以更好的支持基于事件的模块编写了\n- 将风险指标计算独立成 :code:`analyser` Mod\n- 将事前风控相关内容独立成 :code:`risk_manager` Mod\n- 将 `回测` 和 `实盘模拟` 相关功能独立成 :code:`simulation` Mod\n\n0.3.8\n==================\n\n- 增加几个 technical analysis 的 examples 和自动化测试\n- 修复一些在 Python 2 下运行的 bug\n\n0.3.7\n==================\n\n- 增加 :code:`-mc` / :code:`--mod-config` 参数来传递参数到 mod 中\n- 增加了 simple_stock_realtime_trade, progressive_output_csv，funcat_api 几个 DEMO mod 供开发者参考开发自己的 mod\n- :code:`update_bundle` 移到 :code:`main.py` 中，方便直接从代码中调用 :code:`update_bundle`\n- 增加了一些自动化的测试用例\n\n0.3.6\n==================\n\n- support auto test with Travis [python 2.7 3.4 3.5 3.6]\n- :code:`rqalpha.run` 现在支持直接传入 :code:`source_code` 了\n- 支持 :code:`rqalpha.update_bundle` 函数\n\n0.3.5\n==================\n\n- 增加 :code:`from rqalpha import run` 接口，现在可以很方便的直接在程序中调用RQAlpha 回测了。\n\n0.3.4\n==================\n\n- 本地化模块更具有扩展性\n- 修改 :code:`rqalpha update_bundle` 的目录结构，现在是在指定目录下生成一个 bundle 文件，而不再会直接删除当前文件夹内容了。\n\n0.3.3\n==================\n\n- 解决 :code:`rqalpha examples -d .` 无样例策略生成的问题\n\n0.3.2\n==================\n\n- 解决 Windows 10 下 matplotlib 中文字体显示乱码的问题\n- 解决 Windows 下 set_locale error 的问题\n\n0.3.1\n==================\n\n- 增加 Python 2 的支持\n\n0.3.0\n==================\n\n- 支持多周期回测扩展(虽然只有日线数据，但是结构上是支持不同周期的回测和实盘的)\n- 支持期货策略\n- 支持混合策略(股票和期货混合)\n- 支持多种参数配置方式\n- 抽离接口层，数据源、事件源、撮合引擎、下单模块全部可以替换或扩展。\n- 完善事件定义，采取 pub/sub 模式，可以非常简答的在 RQAlpha 中添加 hook。\n- 增加 Mod 机制，极大的增加了 RQAlpha 的扩展性，使其可以轻松完成程序化交易过程中所产生的的特定需求。\n\n0.0.53\n==================\n\n- 完善了回测结果显示\n- 修正了 Risk 计算和 Benchmark 计算\n\n\n0.0.20\n==================\n\n- 增加会回测进度显示开关\n- 完善了回测结果显示\n\n0.0.19\n==================\n\n- 在 :code:`handle_bar` 前用当前的数据更新 portfolio 和 position，因为 ricequant.com 是这样做的。\n\n0.0.18\n==================\n\n- 修复了分红计算\n\n0.0.16\n==================\n\n- 用户可以通过 context 设置 slippage/commission/benchmark\n- 增加了 scheduler\n\n0.0.15\n==================\n\n- 修复 history 在 before_trading 调用\n- 增加 api 的 phase 检查\n\n0.0.14\n==================\n\n- 修改支持 python2\n\n0.0.12\n==================\n\n- 修正了 Risk 计算，使用合理的年化收益计算方法\n- 格式化代码符合 pep8\n- 更新 requirements.txt\n\n\n0.0.9\n==================\n\n- 增加了数据下载\n- 修正了 Risk 计算\n- 增加了 instrument\n- 增加了 position 的 :code:`market_value` 和 :code:`value_percent`\n\n\n0.0.2\n==================\n\n- 增加了日线回测\n- 去掉了涨跌停检查\n- 增加了分红处理\n- 运行参数如下:\n\n.. code-block:: python3\n\n  # 生成sample策略\n  rqalpha generate_examples -d ./\n\n  # 运行回测\n  rqalpha run -f examples/simple_macd.py -s 2013-01-01 -e 2015-01-04 -o /tmp/a.pkl\n\n0.0.1\n==================\n\n- 搭建基本的框架，增加基本的 unittest\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.41015625,
          "content": "版权所有 2019 深圳米筐科技有限公司（下称“米筐科技”）\n\n除非遵守当前许可，否则不得使用本软件。\n\n    * 非商业用途（非商业用途指个人出于非商业目的使用本软件，或者高校、研究所等非营利机构出于教育、科研等目的使用本软件）：\n        遵守 Apache License 2.0（下称“Apache 2.0 许可”），您可以在以下位置获得 Apache 2.0 许可的副本：http://www.apache.org/licenses/LICENSE-2.0。\n        除非法律有要求或以书面形式达成协议，否则本软件分发时需保持当前许可“原样”不变，且不得附加任何条件。\n\n    * 商业用途（商业用途指个人出于任何商业目的使用本软件，或者法人或其他组织出于任何目的使用本软件）：\n        未经米筐科技授权，任何个人不得出于任何商业目的使用本软件（包括但不限于向第三方提供、销售、出租、出借、转让本软件、本软件的衍生产品、引用或借鉴了本软件功能或源代码的产品或服务），任何法人或其他组织不得出于任何目的使用本软件，否则米筐科技有权追究相应的知识产权侵权责任。\n        在此前提下，对本软件的使用同样需要遵守 Apache 2.0 许可，Apache 2.0 许可与本许可冲突之处，以本许可为准。\n        详细的授权流程，请联系 public@ricequant.com 获取。\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.29296875,
          "content": "recursive-include rqalpha/resource *.png\ninclude versioneer.py\ninclude rqalpha/_version.py\ninclude README.rst\ninclude CHANGELOG.rst\ninclude LICENSE\ninclude rqalpha/utils/translations/zh_Hans_CN/LC_MESSAGES/*\ninclude rqalpha/mod/rqalpha_mod_sys_analyser/report/templates/*.xlsx\ngraft rqalpha/examples\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 11.0732421875,
          "content": "=======\nRQAlpha\n=======\n\n..  image:: https://raw.githubusercontent.com/ricequant/rq-resource/master/rqalpha/logo.jpg\n\n..  image:: https://github.com/ricequant/rqalpha/workflows/Test/badge.svg\n    :target: https://github.com/ricequant/rqalpha/actions?query=workflow%3ATest\n    :alt: GitHub Actions status for master branch\n\n..  image:: https://coveralls.io/repos/github/ricequant/rqalpha/badge.svg?branch=master\n    :target: https://coveralls.io/github/ricequant/rqalpha?branch=master\n\n..  image:: https://readthedocs.org/projects/rqalpha/badge/?version=latest\n    :target: http://rqalpha.readthedocs.io/zh_CN/latest/?badge=latest\n    :alt: Documentation Status\n\n..  image:: https://img.shields.io/pypi/v/rqalpha.svg\n    :target: https://pypi.python.org/pypi/rqalpha\n    :alt: PyPI Version\n\n..  image:: https://img.shields.io/pypi/pyversions/rqalpha.svg\n    :target: https://pypi.python.org/pypi/rqalpha\n    :alt: Python Version Support\n\n\n..  image:: https://img.shields.io/pypi/dm/rqalpha?label=pypi%20downloads\n    :target: https://pypi.python.org/pypi/rqalpha\n    :alt: PyPI - Downloads\n\n\nRQAlpha 从数据获取、算法交易、回测引擎，实盘模拟，实盘交易到数据分析，为程序化交易者提供了全套解决方案。\n\n**仅限非商业使用。如需商业使用，请联系我们：public@ricequant.com**\n\nRQAlpha 具有灵活的配置方式，强大的扩展性，用户可以非常容易地定制专属于自己的程序化交易系统。\n\nRQAlpha 所有的策略都可以直接在 `Ricequant`_ 上进行回测和实盘模拟，并且可以通过微信和邮件实时推送您的交易信号。\n\n`Ricequant`_ 是一个开放的量化算法交易社区，为程序化交易者提供免费的回测和实盘模拟环境，并且会不间断举行实盘资金投入的量化比赛。\n\n特点\n============================\n\n======================    =================================================================================\n易于使用                    让您集中于策略的开发，一行简单的命令就可以执行您的策略。\n完善的文档                   您可以直接访问 `RQAlpha 文档`_ 或者 `Ricequant 文档`_ 来获取您需要的信息。\n活跃的社区                   您可以通过访问 `Ricequant 社区`_ 获取和询问有关 RQAlpha 的一切问题，有很多优秀的童鞋会解答您的问题。\n稳定的环境                   每天都有会大量的算法交易在 Ricequant 上运行，无论是 RQAlpha，还是数据，我们能会做到问题秒处理，秒解决。\n灵活的配置                   您可以使用多种方式来配置和运行策略，只需简单的配置就可以构建适合自己的交易系统。\n强大的扩展性                 开发者可以基于我们提供的 Mod Hook 接口来进行扩展。\n======================    =================================================================================\n\n快速指引\n============================\n\n*   `RQAlpha 介绍`_\n*   `安装指南`_\n*   `10分钟学会 RQAlpha`_\n*   `策略示例`_\n\nAPI 手册\n============================\n\n*   `API`_ : RQAlpha API 手册\n\n更新记录\n============================\n\n*   `CHANGELOG`_ RQALPHA 更新记录\n\nMod\n============================\n\nRQAlpha 提供了极具拓展性的 Mod Hook 接口，这意味着开发者可以非常容易的对接第三方库。\n\n您可以通过如下方式使用 安装和使用Mod:\n\n..  code-block:: bash\n\n    # 查看当前安装的 Mod 列表及状态\n    $ rqalpha mod list\n    # 启用 Mod\n    $ rqalpha mod enable xxx\n    # 禁用 Mod\n    $ rqalpha mod disable xxx\n\n以下是目前已经集成的 Mod 列表:\n\n=======================    ==================================================================================\nMod名                       说明\n=======================    ==================================================================================\n`sys_accounts`_            提供了股票、期货的下单 API 实现及持仓模型的实现\n`sys_analyser`_            记录每天的下单、成交、投资组合、持仓等信息，并计算风险度指标，并以csv、plot图标等形式输出分析结果\n`sys_progress`_            在控制台输出当前策略的回测进度。\n`sys_risk`_                对订单进行事前风控校验\n`sys_scheduler`_           提供了定时器，即按照特定周期执行指定逻辑的功能\n`sys_simulation`_          提供了模拟撮合引擎及回测事件源等模块，为回测和模拟交易提供支持\n`sys_transaction_cost`_    实现了股票、期货的交易税费计算逻辑\n=======================    ==================================================================================\n\n如果您基于 RQAlpha 进行了 Mod 扩展，欢迎告知我们，在审核通过后，会在 Mod 列表中添加您的 Mod 信息和链接。\n\n\n关于 4.x 版本数据 bundle 变更的说明\n================================\n\nRQAlpha 于近期更新了 4.0.0 版本，4.0.0 添加了大量功能改进和体验改善。\n\n其中一点需要您额外注意：我们在 4.0.0 版本中重构了数据 bundle 的格式，原 3.x 版本的 bundle 已停止更新，您需要更新 RQAlpha 至 4.x 以使用优化过的 bundle。\n另外，为了平衡您的使用体验与我们的维护成本，4.x 版本提供下载的 bundle 改为月度更新，但您仍可以使用 `RQData`_ 在本地 **随时** 使用最新数据更新 bundle，\n具体操作可查看 `RQAlpha 文档 <https://rqalpha.readthedocs.io/zh_CN/latest/intro/install.html#intro-install-get-data>`_ 。\n\n\nRQData数据本地化服务\n====================\n\n为专业投资者提供便利易用的金融数据方案，免除数据整理、清洗及运维的困扰，使投研人员及策略开发者可以更专注于投研及模型开发等关键环节。米筐RQData金融数据API可无缝对接RQAlpha，您只需在策略中import rqdatac，即可通过API本地调用以下数据：\n\n=============================       ==================================================================================\n**合约信息**                              中国A股、指数、场内场外基金、期货、场内债券的基本合约信息\n**A股基础信息**                           交易日、股票拆分和分红、停牌、ST股判断等数据\n**行情数据**                              A股2005年至今及实时行情数据（含连续竞价时间段）；指数快照行情、历史权重、指数估值指标等\n**基金数据**                              基础数据、净值数据、报告披露、持仓数据等\n**期货、期权和现货数据**                   全市场期权数据；期货历史及快照行情数据等；期货主力连续合约；期货会员持仓排名及仓单\n**可转债数据**                            可转债基础合约；可转债股价、转债导致规模变化、现金等数据\n**A股上市以来的所有财务数据**               基础财务数据、营运、盈利能力、估值等；财务快报及业绩预告、TTM滚动财务数据等；支持财务数据Point in Time API\n**行业、板块、概念分类**                   股票资金现金流入流出、换手率\n**风格因子数据**                          风格因子暴露度、收益率、协方差和特异风险。（每个交易日8:30开始更新增量数据）\n**宏观经济数据**                          存款准备金率、货币供应量、大量宏观因子等数据\n**电商数据**                              天猫、淘宝、京东三大平台（日更新）。注：与超对称科技合作提供\n**舆情数据**                              雪球与东方财富股吧。注：与数据合作方合作提供\n=============================       ==================================================================================\n\n目前RQData已正式上线，支持Python API、Matlab API及Excel插件等多种调取方式，欢迎 `免费试用 <https://www.ricequant.com/welcome/rqdata>`_ 和 `咨询私有化部署 <https://www.ricequant.com/welcome/pricing>`_ 。\n\n加入开发\n============================\n\n*   `如何贡献代码`_\n*   `基本概念`_\n*   `RQAlpha 基于 Mod 进行扩展`_\n\n获取帮助\n============================\n\n关于RQAlpha的任何问题可以通过以下途径来获取帮助\n\n*  可以通过 `索引`_ 或者使用搜索功能来查找特定问题\n*  在 `Github Issues`_ 中提交issue\n*  RQAlpha 交流群「487188429」\n\n\n.. _Github Issues: https://github.com/ricequant/rqalpha/issues\n.. _Ricequant: https://www.ricequant.com/algorithms\n.. _RQAlpha 文档: http://rqalpha.readthedocs.io/zh_CN/latest/\n.. _Ricequant 文档: https://www.ricequant.com/api/python/chn\n.. _Ricequant 社区: https://www.ricequant.com/community/category/all/\n.. _FAQ: http://rqalpha.readthedocs.io/zh_CN/latest/faq.html\n.. _索引: http://rqalpha.readthedocs.io/zh_CN/latest/genindex.html\n.. _RQPro: https://www.ricequant.com/rqpro_propaganda/?utm_source=github\n.. _专业级本地终端RQPro: https://www.ricequant.com/rqpro_propaganda/?utm_source=github\n\n.. _RQAlpha 介绍: http://rqalpha.readthedocs.io/zh_CN/latest/intro/overview.html\n.. _安装指南: http://rqalpha.readthedocs.io/zh_CN/latest/intro/install.html\n.. _10分钟学会 RQAlpha: http://rqalpha.readthedocs.io/zh_CN/latest/intro/tutorial.html\n.. _策略示例: http://rqalpha.readthedocs.io/zh_CN/latest/intro/examples.html\n\n.. _API: http://rqalpha.readthedocs.io/zh_CN/latest/api/base_api.html\n\n.. _如何贡献代码: http://rqalpha.readthedocs.io/zh_CN/latest/development/make_contribute.html\n.. _基本概念: http://rqalpha.readthedocs.io/zh_CN/latest/development/basic_concept.html\n.. _RQAlpha 基于 Mod 进行扩展: http://rqalpha.readthedocs.io/zh_CN/latest/development/mod.html\n.. _History: http://rqalpha.readthedocs.io/zh_CN/latest/history.html\n.. _TODO: https://github.com/ricequant/rqalpha/blob/master/TODO.md\n.. _develop 分支: https://github.com/ricequant/rqalpha/tree/develop\n.. _master 分支: https://github.com/ricequant/rqalpha\n.. _rqalpha_mod_tushare: https://github.com/ricequant/rqalpha-mod-tushare\n.. _通过 Mod 扩展 RQAlpha: http://rqalpha.io/zh_CN/latest/development/mod.html\n.. _sys_analyser: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_analyser/README.rst\n.. _sys_scheduler: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_scheduler/README.rst\n.. _sys_progress: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_progress/README.rst\n.. _sys_risk: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_risk/README.rst\n.. _sys_simulation: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_simulation/README.rst\n.. _sys_accounts: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_accounts/README.rst\n.. _sys_transaction_cost: https://github.com/ricequant/rqalpha/blob/master/rqalpha/mod/rqalpha_mod_sys_transaction_cost/README.rst\n.. _RQData数据本地化服务: https://www.ricequant.com/doc/rqdata-institutional\n.. _点击链接免费开通: https://ricequant.mikecrm.com/h7ZFJnT\n.. _RQData: https://www.ricequant.com/welcome/rqdata\n.. _CHANGELOG: https://rqalpha.readthedocs.io/zh_CN/latest/history.html\n"
        },
        {
          "name": "babel.cfg",
          "type": "blob",
          "size": 0.333984375,
          "content": "# For RQAlpha\n\n# pybabel extract -F babel.cfg --input-dirs rqalpha/ -o messages.pot\n# pybabel init -i messages.pot -d rqalpha/utils/translations -l zh_Hans_CN\n# pybabel update -i messages.pot -d rqalpha/utils/translations\n# pybabel compile -d rqalpha/utils/translations\n\n\n# Extraction from Python source files\n[python: **.py]\nencoding = utf-8"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "messages.pot",
          "type": "blob",
          "size": 28.54296875,
          "content": "# Translations template for PROJECT.\n# Copyright (C) 2024 ORGANIZATION\n# This file is distributed under the same license as the PROJECT project.\n# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.\n#\n#, fuzzy\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PROJECT VERSION\\n\"\n\"Report-Msgid-Bugs-To: EMAIL@ADDRESS\\n\"\n\"POT-Creation-Date: 2024-11-25 10:04+0800\\n\"\n\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=utf-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Generated-By: Babel 2.13.1\\n\"\n\n#: rqalpha/environment.py:76\nmsgid \"\"\n\"Environment has not been created. Please Use `Environment.get_instance()`\"\n\" after RQAlpha init\"\nmsgstr \"\"\n\n#: rqalpha/environment.py:182\nmsgid \"No such transaction cost decider, order_book_id = {}\"\nmsgstr \"\"\n\n#: rqalpha/main.py:60\nmsgid \"\"\n\"There is no data between {start_date} and {end_date}. Please check your \"\n\"data bundle or select other backtest period.\"\nmsgstr \"\"\n\n#: rqalpha/main.py:79\nmsgid \"\"\n\"Missing persist provider. You need to set persist_provider before use \"\n\"persist\"\nmsgstr \"\"\n\n#: rqalpha/main.py:129\nmsgid \"rqdatac init failed, some apis will not function properly: {}\"\nmsgstr \"\"\n\n#: rqalpha/main.py:222\nmsgid \"system restored\"\nmsgstr \"\"\n\n#: rqalpha/main.py:252\nmsgid \"strategy run successfully, normal exit\"\nmsgstr \"\"\n\n#: rqalpha/main.py:257\nmsgid \"strategy execute exception\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_base.py:69 rqalpha/apis/api_base.py:283\n#: rqalpha/apis/api_base.py:319\nmsgid \"unsupported order_book_id type\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_base.py:164\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:60\nmsgid \"Main Future contracts[88] are not supported in paper trading.\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_base.py:168\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:62\nmsgid \"Index Future contracts[99] are not supported in paper trading.\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_base.py:173\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:66\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:105\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:143\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:346\nmsgid \"Order Creation Failed: [{order_book_id}] No market data\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:50\nmsgid \"rqdatac is not available, extension apis will not function properly\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:106\nmsgid \"in get_split, start_date {} is no earlier than the previous test day {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:144\nmsgid \"in index_components, date {} is no earlier than test date {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:191\nmsgid \"in index_weights, date {} is no earlier than previous test date {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:398\nmsgid \"in get_price, end_date {} is no earlier than the previous test day {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:406\nmsgid \"in get_price, start_date {} is no earlier than the previous test day {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:411\nmsgid \"in get_price, start_date {} > end_date {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:873\nmsgid \"'{0}' future does not exist\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:1159\nmsgid \"in get_fundamentals entry_date {} is no earlier than test date {}\"\nmsgstr \"\"\n\n#: rqalpha/apis/api_rqdatac.py:1193 rqalpha/apis/api_rqdatac.py:1258\n#: rqalpha/utils/arg_checker.py:320\nmsgid \"\"\n\"function {}: invalid {} argument, quarter should be in form of '2012q3', \"\n\"got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:35\nmsgid \"create bundle using RQDatac\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:45\nmsgid \"\"\n\"rqdatac is required to create bundle. you can visit \"\n\"https://www.ricequant.com/welcome/rqdata to get rqdatac, or use \\\"rqalpha\"\n\" download-bundle\\\" to download monthly updated bundle.\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:56 rqalpha/cmds/bundle.py:85\nmsgid \"rqdatac init failed with error: {}\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:64\nmsgid \"Update bundle using RQDatac\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:74\nmsgid \"\"\n\"rqdatac is required to update bundle. you can visit \"\n\"https://www.ricequant.com/welcome/rqdata to get rqdatac, or use \\\"rqalpha\"\n\" download-bundle\\\" to download monthly updated bundle.\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:89\nmsgid \"bundle not exist, use \\\"rqalpha create-bundle\\\" command instead\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:98\nmsgid \"Download bundle (monthly updated)\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:109\nmsgid \"\"\n\"\\n\"\n\"    [WARNING]\\n\"\n\"    Target bundle path {data_bundle_path} is not empty.\\n\"\n\"    The content of this folder will be REMOVED before updating.\\n\"\n\"    Are you sure to continue?\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:127\nmsgid \"Data bundle download successfully in {bundle_path}\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:130\nmsgid \"Check bundle\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:144\nmsgid \"try {} ...\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:156\nmsgid \"downloading ...\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:170\nmsgid \"\"\n\"\\n\"\n\"Download failed, retry in {} seconds.\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:191\nmsgid \"corrupted files\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:192\nmsgid \"remove files\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:195\nmsgid \"remove success\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:197\nmsgid \"corrupted files not remove\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:199\nmsgid \"input error\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:201\nmsgid \"bundle's day bar is incomplete, please update bundle\"\nmsgstr \"\"\n\n#: rqalpha/cmds/bundle.py:203\nmsgid \"good bundle's day bar\"\nmsgstr \"\"\n\n#: rqalpha/cmds/misc.py:26\nmsgid \"Generate example strategies to target folder\"\nmsgstr \"\"\n\n#: rqalpha/cmds/misc.py:41\nmsgid \"Output Version Info\"\nmsgstr \"\"\n\n#: rqalpha/cmds/misc.py:48\nmsgid \"Generate default config file\"\nmsgstr \"\"\n\n#: rqalpha/cmds/mod.py:29\nmsgid \"Mod management command\"\nmsgstr \"\"\n\n#: rqalpha/cmds/run.py:27\nmsgid \"Run a strategy\"\nmsgstr \"\"\n\n#: rqalpha/core/execution_context.py:111\n#, python-format\nmsgid \"You cannot call %s when executing %s\"\nmsgstr \"\"\n\n#: rqalpha/core/strategy.py:36\nmsgid \"not run {}({}, {}) because strategy is hold\"\nmsgstr \"\"\n\n#: rqalpha/core/strategy.py:53\nmsgid \"deprecated parameter[bar_dict] in before_trading function.\"\nmsgstr \"\"\n\n#: rqalpha/data/bundle.py:550\nmsgid \"\"\n\"File {} update failed, if it is using, please update later, or you can \"\n\"delete then update again\"\nmsgstr \"\"\n\n#: rqalpha/data/base_data_source/storages.py:81\nmsgid \"\"\n\"The bundle data you are using is too old, please update it to lastest \"\n\"before using\"\nmsgstr \"\"\n\n#: rqalpha/data/base_data_source/storages.py:97\n#: rqalpha/data/base_data_source/storages.py:124\nmsgid \"unsupported future instrument {}\"\nmsgstr \"\"\n\n#: rqalpha/data/base_data_source/storages.py:195\n#: rqalpha/data/base_data_source/storages.py:205\nmsgid \"\"\n\"open data bundle failed, you can remove {} and try to regenerate bundle: \"\n\"{}\"\nmsgstr \"\"\n\n#: rqalpha/mod/__init__.py:53\nmsgid \"loading mod {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/__init__.py:71\nmsgid \"\"\n\"mod start_up [START] {}\\n\"\n\"{}\"\nmsgstr \"\"\n\n#: rqalpha/mod/__init__.py:73\nmsgid \"mod start_up [END]   {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/__init__.py:79\nmsgid \"mod tear_down [START] {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/__init__.py:81\nmsgid \"mod tear_down [END]   {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/position_model.py:318\nmsgid \"{order_book_id} is expired, close all positions by system\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/position_validator.py:40\nmsgid \"\"\n\"Order Creation Failed: not enough today position {order_book_id} to \"\n\"close, target quantity is {quantity}, closable today quantity is \"\n\"{closable}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/position_validator.py:49\nmsgid \"\"\n\"Order Creation Failed: not enough position {order_book_id} to close or \"\n\"exercise, target sell quantity is {quantity}, closable quantity is \"\n\"{closable}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:50\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:115\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:160\nmsgid \"Order Creation Failed: 0 order quantity, order_book_id={order_book_id}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:56\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:102\nmsgid \"Limit order price should not be nan.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:76\nmsgid \"\"\n\"Order Creation Failed: close today amount {amount} is larger than today \"\n\"closable quantity {quantity}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:88\nmsgid \"\"\n\"Order Creation Failed: close amount {amount} is larger than position \"\n\"quantity {quantity}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_future.py:111\nmsgid \"\"\n\"Order was separated, original order: {original_order_repr}, new orders: \"\n\"[{new_orders_repr}]\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:68\nmsgid \"\"\n\"order_book_id: {order_book_id} needs stock account, please set and try \"\n\"again!\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:122\nmsgid \"insufficient cash, use all remaining cash({}) to create order\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:335\nmsgid \"\"\n\"function order_target_portfolio: invalid keys of target_portfolio, \"\n\"expected order_book_ids or Instrument objects, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:340\nmsgid \"\"\n\"function order_target_portfolio: invalid instrument type, excepted \"\n\"CS/ETF/LOF/INDX, got {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:354\nmsgid \"\"\n\"function order_target_portfolio: invalid values of target_portfolio, \"\n\"excepted float between 0 and 1, got {} (key: {})\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:363\nmsgid \"total percent should be lower than 1, current: {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:393\nmsgid \"\"\n\"Adjust position of {id_or_ins} Failed: Invalid close/open price \"\n\"{close_price}/{open_price}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_accounts/api/api_stock.py:719\nmsgid \"in get_dividend, start_date {} is later than the previous test day {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:66\nmsgid \"[sys_analyser] save report\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:71\nmsgid \"[sys_analyser] output result pickle file\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:76\nmsgid \"[sys_analyser] plot result\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:81\nmsgid \"[sys_analyser] save plot to file\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:86\nmsgid \"[sys_analyser] order_book_id of benchmark\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:91\nmsgid \"[sys_analyser] show open close points on plot\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:96\nmsgid \"[sys_analyser] show weekly indicators and return curve on plot\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:100\nmsgid \"[sys_analyser] Plot from strategy output file\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:103\nmsgid \"save plot result to file\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:104\nmsgid \"show open close points on plot\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:105\nmsgid \"show weekly indicators and return curve on plot\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/__init__.py:115\nmsgid \"[sys_analyser] Generate report from strategy output file\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/mod.py:111\nmsgid \"\"\n\"config 'base.benchmark' is deprecated, use 'mod.sys_analyser.benchmark' \"\n\"instead\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/mod.py:149\nmsgid \"benchmark {} not exists, please entry correct order_book_id\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/mod.py:161\nmsgid \"benchmark {} missing data between backtest start date {} and end date {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/mod.py:173\nmsgid \"\"\n\"benchmark {} available data start date {} >= backtest start date {} or \"\n\"end date {} <= backtest end date {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/mod.py:241\nmsgid \"invalid init benchmark {}, should be in format 'order_book_id:weight'\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/mod.py:246\nmsgid \"invalid weight for instrument {order_book_id}: {weight}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:60\nmsgid \"Strategy\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:61\nmsgid \"Benchmark\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:62\nmsgid \"Excess\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:63\nmsgid \"Weekly\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:64\nmsgid \"BenchmarkWeekly\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:66\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:123\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:170\nmsgid \"MaxDrawDown\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:67\nmsgid \"MaxDDD\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:68\nmsgid \"Open\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:69\nmsgid \"Close\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:103\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:155\nmsgid \"TotalReturns\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:104\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:156\nmsgid \"AnnualReturns\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:105\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:157\nmsgid \"Alpha\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:106\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:158\nmsgid \"Beta\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:107\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:161\nmsgid \"Sharpe\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:108\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:165\nmsgid \"Sortino\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:109\nmsgid \"WeeklyUlcerIndex\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:111\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:175\nmsgid \"BenchmarkReturns\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:112\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:176\nmsgid \"BenchmarkAnnual\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:113\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:167\nmsgid \"Volatility\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:114\nmsgid \"TrackingError\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:115\nmsgid \"DownsideRisk\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:116\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:164\nmsgid \"InformationRatio\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:117\nmsgid \"WeeklyUlcerPerformanceIndex\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:119\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:179\nmsgid \"ExcessCumReturns\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:120\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:159\nmsgid \"WinRate\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:121\nmsgid \"WeeklyWinRate\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:122\nmsgid \"ProfitLossRate\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:124\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:171\nmsgid \"MaxDD/MaxDDD\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:125\nmsgid \"WeeklyExcessUlcerIndex\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:129\nmsgid \"WeeklyAlpha\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:130\nmsgid \"WeeklyBeta\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:131\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:162\nmsgid \"WeeklySharpe\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:132\nmsgid \"WeeklyInfoRatio\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:133\nmsgid \"WeeklyTrackingError\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:134\nmsgid \"WeeklyMaxDrawdown\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:138\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:177\nmsgid \"ExcessReturns\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:139\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:178\nmsgid \"ExcessAnnual\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:140\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:181\nmsgid \"ExcessSharpe\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:141\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:182\nmsgid \"ExcessVolatility\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:142\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:184\nmsgid \"ExcessMaxDD\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:143\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:185\nmsgid \"ExcessMaxDD/ExcessMaxDDD\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:144\nmsgid \"WeeklyExcessUlcerPerformanceIndex\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:163\nmsgid \"MonthlySharpe\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:168\nmsgid \"WeeklyVolatility\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:169\nmsgid \"MonthlyVolatility\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_analyser/plot/consts.py:183\nmsgid \"ExcessWinRate\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_risk/validators/cash_validator.py:34\nmsgid \"\"\n\"Order Creation Failed: not enough money to buy {order_book_id}, needs \"\n\"{cost_money:.2f}, cash {cash:.2f}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_risk/validators/is_trading_validator.py:35\nmsgid \"Order Creation Failed: {order_book_id} is not listing!\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_risk/validators/is_trading_validator.py:40\nmsgid \"Order Creation Failed: security {order_book_id} is suspended on {date}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_risk/validators/price_validator.py:36\nmsgid \"\"\n\"Order Creation Failed: limit order price {limit_price} is higher than \"\n\"limit up {limit_up}, order_book_id={order_book_id}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_risk/validators/price_validator.py:48\nmsgid \"\"\n\"Order Creation Failed: limit order price {limit_price} is lower than \"\n\"limit down {limit_down}, order_book_id={order_book_id}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_risk/validators/self_trade_validator.py:34\nmsgid \"\"\n\"Create order failed, there are active orders leading to the risk of self-\"\n\"trade: [{}...]\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:119\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:348\n#: rqalpha/mod/rqalpha_mod_sys_simulation/signal_broker.py:69\nmsgid \"\"\n\"Order Cancelled: current security [{order_book_id}] can not be traded in \"\n\"listed date [{listed_date}]\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:126\nmsgid \"Order Cancelled: {order_book_id} miss market data or bar no volume.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:151\n#: rqalpha/mod/rqalpha_mod_sys_simulation/signal_broker.py:95\nmsgid \"Order Cancelled: current bar [{order_book_id}] reach the limit_up price.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:157\n#: rqalpha/mod/rqalpha_mod_sys_simulation/signal_broker.py:104\nmsgid \"Order Cancelled: current bar [{order_book_id}] reach the limit_down price.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:166\n#: rqalpha/mod/rqalpha_mod_sys_simulation/signal_broker.py:86\nmsgid \"Order Cancelled: {order_book_id} bar no volume\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:179\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:436\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:591\nmsgid \"\"\n\"Order Cancelled: market order {order_book_id} volume {order_volume} due \"\n\"to volume limit\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:218\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:474\nmsgid \"\"\n\"Order Cancelled: not enough money to buy {order_book_id}, needs \"\n\"{cost_money:.2f}, cash {cash:.2f}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:230\nmsgid \"\"\n\"Order Cancelled: market order {order_book_id} volume {order_volume} is \"\n\"larger than {volume_percent_limit} percent of current bar volume, fill \"\n\"{filled_volume} actually\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:356\nmsgid \"Order Cancelled: current tick [{order_book_id}] miss market data.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:387\nmsgid \"Order Cancelled: current tick [{order_book_id}] reach the limit_up price.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:393\nmsgid \"\"\n\"Order Cancelled: current tick [{order_book_id}] reach the limit_down \"\n\"price.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:400\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:406\nmsgid \"Order Cancelled: [{order_book_id}] has no liquidity.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:486\nmsgid \"\"\n\"Order Cancelled: market order {order_book_id} volume {order_volume} is \"\n\"larger than {volume_percent_limit} percent of current tick volume, fill \"\n\"{filled_volume} actually\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/matcher.py:635\nmsgid \"\"\n\"Order Cancelled: market order {order_book_id} fill {filled_volume} \"\n\"actually\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/mod.py:42\nmsgid \"invalid margin multiplier value: value range is (0, +∞]\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/mod.py:51\n#: rqalpha/mod/rqalpha_mod_sys_simulation/mod.py:58\nmsgid \"Not supported matching type {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/mod.py:62\nmsgid \"\"\n\"matching_type = 'next_bar' is abandoned when frequency == '1d',Current \"\n\"matching_type is 'current_bar'.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/mod.py:119\nmsgid \"NO account_type = ({}) in {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/signal_broker.py:56\nmsgid \"cancel_order function is not supported in signal mode\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/signal_broker.py:75\nmsgid \"Order Cancelled: current bar [{order_book_id}] miss market data.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/simulation_broker.py:108\nmsgid \"unsupported position_effect {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/simulation_broker.py:129\nmsgid \"{order_id} order has been cancelled by user.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/simulation_broker.py:145\nmsgid \"Order Rejected: {order_book_id} can not match. Market close.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/simulation_broker.py:185\nmsgid \"{order_book_id} should be subscribed when frequency is tick.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/simulation_event_source.py:46\nmsgid \"Current universe is empty. Please use subscribe function before trade\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/simulation_event_source.py:202\nmsgid \"Frequency {} is not support.\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/slippage.py:46\nmsgid \"Missing SlippageModel {}\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/slippage.py:67\nmsgid \"invalid slippage rate value: value range is [0, 1)\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/slippage.py:90\nmsgid \"invalid slippage rate value: value range is greater than 0\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_simulation/slippage.py:101\nmsgid \"invalid slippage rate value {} which cause price <= 0\"\nmsgstr \"\"\n\n#: rqalpha/mod/rqalpha_mod_sys_transaction_cost/mod.py:42\nmsgid \"\"\n\"invalid commission multiplier or tax multiplier value: value range is [0,\"\n\" +∞)\"\nmsgstr \"\"\n\n#: rqalpha/model/bar.py:372\nmsgid \"id_or_symbols {} does not exist\"\nmsgstr \"\"\n\n#: rqalpha/model/trade.py:60\nmsgid \"\"\n\"price, amount, commission, tax and frozen_price of trade {trade_id} is \"\n\"not supposed to be nan, current_value is {price}, {amount}, {commission},\"\n\" {tax}, {frozen_price}\"\nmsgstr \"\"\n\n#: rqalpha/portfolio/__init__.py:71\nmsgid \"invalid init position {order_book_id}: no valid price at {date}\"\nmsgstr \"\"\n\n#: rqalpha/portfolio/__init__.py:278 rqalpha/portfolio/__init__.py:291\nmsgid \"invalid account type {}, choose in {}\"\nmsgstr \"\"\n\n#: rqalpha/portfolio/__init__.py:282\nmsgid \"Cash add {}. units {} become to {}\"\nmsgstr \"\"\n\n#: rqalpha/portfolio/account.py:350\nmsgid \"Futures account's cash turns negative after settlement\"\nmsgstr \"\"\n\n#: rqalpha/portfolio/account.py:356\nmsgid \"Trigger Forced Liquidation, current total_value is 0\"\nmsgstr \"\"\n\n#: rqalpha/portfolio/account.py:506 rqalpha/portfolio/account.py:525\nmsgid \"insufficient cash, current {}, target withdrawal {}\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:51\nmsgid \"\"\n\"function {}: invalid {} argument, expect a value of type {}, got {} \"\n\"(type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:59\nmsgid \"valid order_book_id/instrument\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:62\nmsgid \"valid stock order_book_id/instrument\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:65\nmsgid \"valid future order_book_id/instrument\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:68\nmsgid \"listed order_book_id/instrument\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:71\nmsgid \"function {}: invalid {} argument, expected a {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:97\nmsgid \"\"\n\"function {}: invalid {} argument, expected instrument with types {}, got \"\n\"instrument with type {}\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:137\nmsgid \"function {}: invalid {} argument, expect a number, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:160\nmsgid \"function {}: invalid {} argument, valid: {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:174\nmsgid \"function {}: invalid {} argument, valid fields are {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:186\nmsgid \"function {}: invalid field {}, valid fields are {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:192 rqalpha/utils/arg_checker.py:207\nmsgid \"\"\n\"function {}: invalid {} argument, expect a string or a list of string, \"\n\"got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:234 rqalpha/utils/arg_checker.py:239\nmsgid \"function {}: invalid {} argument, expect a valid date, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:250\nmsgid \"function {}: invalid {} argument, expect a value >= {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:260\nmsgid \"function {}: invalid {} argument, expect a value > {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:270\nmsgid \"function {}: invalid {} argument, expect a value <= {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:281\nmsgid \"function {}: invalid {} argument, expect a value < {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:298\nmsgid \"\"\n\"function {}: invalid {} argument, interval should be in form of '1d', \"\n\"'3m', '4q', '2y', got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:334\nmsgid \"\"\n\"function {}: invalid {} argument, should be entity like \"\n\"Fundamentals.balance_sheet.total_equity, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/arg_checker.py:353\nmsgid \"\"\n\"function {}: invalid {} argument, frequency should be in form of '1m', \"\n\"'5m', '1d', '1w' got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/class_helper.py:23\nmsgid \"\"\n\"\\\"{}\\\" is deprecated, please use \\\"{}\\\" instead, check the document for \"\n\"more information\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:106\nmsgid \"in parse_user_config, exception: {e}\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:196\nmsgid \"Invalid future info: underlying_symbol {} is illegal.\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:211\nmsgid \"\"\n\"Invalid future info: commission_type is suppose to be BY_MONEY or \"\n\"BY_VOLUME\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:215\nmsgid \"Invalid future info: field {} is not valid\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:245\nmsgid \"invalid init position {}, should be in format 'order_book_id:quantity'\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:250\nmsgid \"invalid quantity for instrument {order_book_id}: {quantity}\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:265\nmsgid \"unknown run type: {}\"\nmsgstr \"\"\n\n#: rqalpha/utils/config.py:278\nmsgid \"unknown persist mode: {}\"\nmsgstr \"\"\n\n#: rqalpha/utils/functools.py:50\nmsgid \"\"\n\"function {}: invalid {} argument, expected an order_book_id or instrument\"\n\" with types {}, got {} (type: {})\"\nmsgstr \"\"\n\n#: rqalpha/utils/functools.py:55\nmsgid \"function {} is not supported, please check your account or mod config\"\nmsgstr \"\"\n\n"
        },
        {
          "name": "performance",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2978515625,
          "content": "requests\nnumpy < 2.0.0\npandas >=0.18.1\npython-dateutil >=2.5.3\nsix >=1.10.0\nlogbook >=1.0.0\nclick >=7.0\njsonpickle ==0.9.4\nsimplejson >=3.10.0\ndill ==0.2.5\nPyYAML >=3.12\ntabulate\nrqrisk >=1.0.9\nh5py\nmatplotlib >=1.5.1 ; python_version >= '3.6'\nmatplotlib >=1.5.1,<=3.0.3 ; python_version == '3.5'\nfilelock"
        },
        {
          "name": "requirements_dev.txt",
          "type": "blob",
          "size": 0.2822265625,
          "content": "requests\nnumpy\npandas >=0.18.1\npython-dateutil >=2.5.3\nsix >=1.10.0\nlogbook >=1.0.0\nclick >=7.0\njsonpickle ==0.9.4\nsimplejson >=3.10.0\ndill ==0.2.5\nPyYAML >=3.12\ntabulate\nrqrisk >=0.0.9\nh5py\nmatplotlib >=1.5.1 ; python_version >= '3.6'\nmatplotlib >=1.5.1,<=3.0.3 ; python_version == '3.5'\n"
        },
        {
          "name": "rqalpha",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3818359375,
          "content": "\n# See the docstring in versioneer.py for instructions. Note that you must\n# re-run 'versioneer.py setup' after changing this section, and commit the\n# resulting files.\n\n[metadata]\nname = rqalpha\nversion = 5.5.0\n\n[versioneer]\nVCS = git\nstyle = pep440-ricequant\nversionfile_source = rqalpha/_version.py\nversionfile_build = rqalpha/_version.py\ntag_prefix = release/\nparentdir_prefix = rqalpha\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.4892578125,
          "content": "# -*- coding: utf-8 -*-\n# 版权所有 2019 深圳米筐科技有限公司（下称“米筐科技”）\n#\n# 除非遵守当前许可，否则不得使用本软件。\n#\n#     * 非商业用途（非商业用途指个人出于非商业目的使用本软件，或者高校、研究所等非营利机构出于教育、科研等目的使用本软件）：\n#         遵守 Apache License 2.0（下称“Apache 2.0 许可”），您可以在以下位置获得 Apache 2.0 许可的副本：http://www.apache.org/licenses/LICENSE-2.0。\n#         除非法律有要求或以书面形式达成协议，否则本软件分发时需保持当前许可“原样”不变，且不得附加任何条件。\n#\n#     * 商业用途（商业用途指个人出于任何商业目的使用本软件，或者法人或其他组织出于任何目的使用本软件）：\n#         未经米筐科技授权，任何个人不得出于任何商业目的使用本软件（包括但不限于向第三方提供、销售、出租、出借、转让本软件、本软件的衍生产品、引用或借鉴了本软件功能或源代码的产品或服务），任何法人或其他组织不得出于任何目的使用本软件，否则米筐科技有权追究相应的知识产权侵权责任。\n#         在此前提下，对本软件的使用同样需要遵守 Apache 2.0 许可，Apache 2.0 许可与本许可冲突之处，以本许可为准。\n#         详细的授权流程，请联系 public@ricequant.com 获取。\nimport sys\nfrom setuptools import find_packages, setup\nimport versioneer\n\nrequirements = [\n    'requests',\n    'numpy < 2.0.0',\n    'pandas >=1.0.5',\n    'python-dateutil',\n    'six',\n    'logbook',\n    'click >=7.0.0',\n    'jsonpickle',\n    'simplejson',\n    'PyYAML',\n    'tabulate',\n    'rqrisk >=1.0.6',\n    'h5py',\n    'matplotlib >=3.1.0',\n    \"openpyxl\",\n    \"methodtools\",\n    \"filelock\"\n]\n\nif sys.version_info < (3, 5):\n    requirements.append('typing')\n\nif sys.version_info.major == 2 and sys.version_info.minor == 7:\n    requirements.extend([\n        \"enum34\",\n        \"fastcache\",\n        \"funcsigs\",\n        \"backports.tempfile\",\n    ])\n\nsetup(\n    name='rqalpha',\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    description='Ricequant Algorithm Trading System',\n    packages=find_packages(exclude=[]),\n    author='ricequant',\n    author_email='public@ricequant.com',\n    license='Apache License v2',\n    include_package_data=True,\n    package_data={\n        'rqalpha': ['*.yml',\n                    'examples/*.*', 'examples/data_source/*.*', 'examples/extend_api/*.*',\n                    'resource/*.*', 'utils/translations/zh_Hans_CN/LC_MESSAGES/*',\n                    \"mod/rqalpha_mod_sys_analyser/report/templates/*.xlsx\",\n                    ],\n    },\n    url='https://github.com/ricequant/rqalpha',\n    install_requires=requirements,\n    extras_require={\n        'profiler': [\"line_profiler\"],\n    },\n    zip_safe=False,\n    entry_points={\n        \"console_scripts\": [\n            \"rqalpha = rqalpha.__main__:entry_point\"\n        ]\n    },\n    classifiers=[\n        'Programming Language :: Python',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n    ],\n    python_requires=\">=3.6\"\n)\n"
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 8.4521484375,
          "content": "# -*- coding: utf-8 -*-\n# 版权所有 2019 深圳米筐科技有限公司（下称“米筐科技”）\n#\n# 除非遵守当前许可，否则不得使用本软件。\n#\n#     * 非商业用途（非商业用途指个人出于非商业目的使用本软件，或者高校、研究所等非营利机构出于教育、科研等目的使用本软件）：\n#         遵守 Apache License 2.0（下称“Apache 2.0 许可”），您可以在以下位置获得 Apache 2.0 许可的副本：http://www.apache.org/licenses/LICENSE-2.0。\n#         除非法律有要求或以书面形式达成协议，否则本软件分发时需保持当前许可“原样”不变，且不得附加任何条件。\n#\n#     * 商业用途（商业用途指个人出于任何商业目的使用本软件，或者法人或其他组织出于任何目的使用本软件）：\n#         未经米筐科技授权，任何个人不得出于任何商业目的使用本软件（包括但不限于向第三方提供、销售、出租、出借、转让本软件、本软件的衍生产品、引用或借鉴了本软件功能或源代码的产品或服务），任何法人或其他组织不得出于任何目的使用本软件，否则米筐科技有权追究相应的知识产权侵权责任。\n#         在此前提下，对本软件的使用同样需要遵守 Apache 2.0 许可，Apache 2.0 许可与本许可冲突之处，以本许可为准。\n#         详细的授权流程，请联系 public@ricequant.com 获取。\n\n\nimport pickle\nimport sys\nimport os\nimport csv\nfrom datetime import datetime\n\nfrom six import iteritems\nimport pandas as pd\nfrom pandas.testing import assert_frame_equal\nimport numpy as np\nimport coverage\n\nfrom rqalpha import run, run_func\n\nTEST_DIR = os.path.abspath(\"./tests/\")\nTEST_OUT = os.path.abspath(\"./tests/outs/\")\n\npd.set_option(\"display.width\", 160)\n\n\ndef run_tests(file_path=None):\n    tests = {f.replace(\".py\", \"\"): f for f in (\n        (file_path, ) if file_path else (f for f in os.listdir(TEST_DIR) if f.find(\"test\") == 0)\n    )}\n    error_map = {}\n    for name, filename in tests.items():\n        err = run_test(filename)\n        if err is not None:\n            error_map[name] = err\n    for filename, err in iteritems(error_map):\n        print(u\"*\" * 20, u\"[{}]did not pass!\".format(filename), u\"*\" * 20)\n        print(err)\n    print(u\"=\" * 40)\n    print(\"[{}|{}] strategies has been passed!\".format(len(tests) - len(error_map), len(tests)))\n    return len(error_map)\n\n\ndef run_test(filename):\n    config = {\"base\": {\"strategy_file\": os.path.join(TEST_DIR, filename)}}\n    print(u\"Start test: \" + str(config[\"base\"][\"strategy_file\"]))\n    result_dict = run(config)[\"sys_analyser\"]\n\n    old_pickle_file = os.path.join(TEST_OUT, filename.replace(\".py\", \".pkl\"))\n\n    if not os.path.exists(old_pickle_file):\n        if not os.path.exists(TEST_OUT):\n            os.makedirs(TEST_OUT)\n        pickle.dump(result_dict, open(old_pickle_file, \"wb\"), protocol=2)\n        return\n    else:\n        old_result_dict = pd.read_pickle(old_pickle_file)\n\n        # 比较 portfolios\n        old_df = old_result_dict[\"portfolio\"].replace([np.nan, np.inf, -np.inf], 0).round(0)\n        df = result_dict[\"portfolio\"].replace([np.nan, np.inf, -np.inf], 0).round(0)\n        try:\n            del old_df[\"dividend_receivable\"]\n            del df[\"dividend_receivable\"]\n        except:\n            pass\n\n        result = df.eq(old_df)\n        if not result.all().all():\n            return result.all()\n\n        # 比较 summary\n        old_df = (\n            pd.DataFrame(\n                data=[{\"val\": val} for val in old_result_dict[\"summary\"].values()],\n                index=old_result_dict[\"summary\"].keys(),\n            )\n            .sort_index()\n            .T.fillna(0)\n        )\n        df = (\n            pd.DataFrame(\n                data=[{\"val\": val} for val in result_dict[\"summary\"].values()],\n                index=result_dict[\"summary\"].keys(),\n            )\n            .sort_index()\n            .T.fillna(0)\n        )\n        try:\n            del old_df[\"daily_pnl\"]\n            del old_df[\"daily_returns\"]\n            del old_df[\"dividend_receivable\"]\n            del old_df[\"strategy_file\"]\n            del df[\"strategy_file\"]\n        except:\n            pass\n        try:\n            del old_df[\"strategy_file\"]\n            del df[\"strategy_file\"]\n        except:\n            pass\n        try:\n            assert_frame_equal(df, old_df, atol=1e-8, rtol=1e-5)\n        except AssertionError as e:\n            return str(e)\n\n\ndef is_enable_coverage():\n    return os.environ.get(\"COVERAGE\") == \"enabled\"\n\n\ndef test_api(specific_test=None):\n    # FIXME: Error msg is hard to understand @zjuguxi\n    print(u\"Testing API......\")\n\n    # from tests.api import test_strategies as test_api_strategies\n    # from tests.mod import test_strategies as test_mod_strategies\n    from tests.api_tests import strategies\n\n    for strategy in strategies:\n        if specific_test and strategy[\"name\"] != specific_test:\n            continue\n        print(\"running\", strategy[\"name\"])\n        run_func(**strategy)\n\n    print(u\"API test ends.\")\n\n\ndef test_strategy():\n    run_tests()\n\n\ndef write_csv(path, fields):\n    old_test_times = []\n    if not os.path.exists(path):\n        with open(path, \"w\") as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fields)\n            writer.writeheader()\n    with open(path) as csv_file:\n        reader = csv.DictReader(csv_file)\n        for row in reader:\n            old_test_times.append(row)\n\n    if performance_path is not None:\n        if (\n            0 < len(old_test_times) < 5\n            and time_spend\n            > float(sum(float(i[\"time_spend\"]) for i in old_test_times))\n            / len(old_test_times)\n            * 1.1\n        ):\n            print(\n                \"Average time of last 5 runs:\",\n                float(sum(float(i[\"time_spend\"]) for i in old_test_times))\n                / len(old_test_times),\n            )\n            print(\"Now time spend:\", time_spend)\n            raise RuntimeError(\"Performance regresses!\")\n        elif (\n            len(old_test_times) >= 5\n            and time_spend\n            > float(sum(float(i[\"time_spend\"]) for i in old_test_times[-5:])) / 5 * 1.1\n        ):\n            print(\n                \"Average time of last 5 runs:\",\n                float(sum(float(i[\"time_spend\"]) for i in old_test_times[-5:])) / 5,\n            )\n            print(\"Now time spend:\", time_spend)\n            raise RuntimeError(\"Performance regresses!\")\n        else:\n            with open(path, \"a\") as csv_file:\n                writer = csv.DictWriter(csv_file, fieldnames=fields)\n                writer.writerow({\"date_time\": end_time, \"time_spend\": time_spend})\n\n\ndef run_unit_tests():\n    from unittest import TextTestRunner\n\n    from tests.unittest import load_tests\n\n    result = TextTestRunner(verbosity=2).run(load_tests())\n    if not result.wasSuccessful():\n        raise RuntimeError(\"Unittest failed.\")\n\n\nif __name__ == \"__main__\":\n    if is_enable_coverage():\n        print(\"enable coverage\")\n        cov = coverage.Coverage()\n        cov.start()\n\n    performance_path = None\n    field_names = [\"date_time\", \"time_spend\"]\n\n    start_time = datetime.now()\n\n    if len(sys.argv) >= 2:\n        if sys.argv[1] == \"api\":\n            try:\n                test_api(sys.argv[2])\n            except IndexError:\n                test_api()\n            end_time = datetime.now()\n\n        elif sys.argv[1] == \"strategy\":\n            test_strategy()\n            end_time = datetime.now()\n\n        elif sys.argv[1] == \"performance\":\n            # test_api()\n            test_strategy()\n            end_time = datetime.now()\n            performance_path = sys.argv[2]\n            time_spend = (end_time - start_time).total_seconds()\n            write_csv(performance_path, field_names)\n\n        elif sys.argv[1] == \"unittest\":\n            run_unit_tests()\n            end_time = datetime.now()\n\n        else:\n            target_file = sys.argv[1]\n            run_tests(target_file)\n            end_time = datetime.now()\n\n    else:\n        run_unit_tests()\n        test_api()\n        error_count = run_tests()\n        end_time = datetime.now()\n        if error_count == 0:\n            time_csv_file_path = os.path.join(TEST_OUT, \"time.csv\")\n            time_spend = (end_time - start_time).total_seconds()\n            write_csv(time_csv_file_path, field_names)\n\n        else:\n            print(\"Failed!\")\n            sys.exit(-1)\n    if is_enable_coverage():\n        cov.stop()\n        cov.save()\n        cov.html_report()\n\n    print(\"Total Spend: \", end_time - start_time)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "versioneer.py",
          "type": "blob",
          "size": 84.6884765625,
          "content": "# Version: 0.28\n\n\"\"\"The Versioneer - like a rocketeer, but for versions.\n\nThe Versioneer\n==============\n\n* like a rocketeer, but for versions!\n* https://github.com/python-versioneer/python-versioneer\n* Brian Warner\n* License: Public Domain (Unlicense)\n* Compatible with: Python 3.7, 3.8, 3.9, 3.10 and pypy3\n* [![Latest Version][pypi-image]][pypi-url]\n* [![Build Status][travis-image]][travis-url]\n\nThis is a tool for managing a recorded version number in setuptools-based\npython projects. The goal is to remove the tedious and error-prone \"update\nthe embedded version string\" step from your release process. Making a new\nrelease should be as easy as recording a new tag in your version-control\nsystem, and maybe making new tarballs.\n\n\n## Quick Install\n\nVersioneer provides two installation modes. The \"classic\" vendored mode installs\na copy of versioneer into your repository. The experimental build-time dependency mode\nis intended to allow you to skip this step and simplify the process of upgrading.\n\n### Vendored mode\n\n* `pip install versioneer` to somewhere in your $PATH\n   * A [conda-forge recipe](https://github.com/conda-forge/versioneer-feedstock) is\n     available, so you can also use `conda install -c conda-forge versioneer`\n* add a `[tool.versioneer]` section to your `pyproject.toml` or a\n  `[versioneer]` section to your `setup.cfg` (see [Install](INSTALL.md))\n   * Note that you will need to add `tomli; python_version < \"3.11\"` to your\n     build-time dependencies if you use `pyproject.toml`\n* run `versioneer install --vendor` in your source tree, commit the results\n* verify version information with `python setup.py version`\n\n### Build-time dependency mode\n\n* `pip install versioneer` to somewhere in your $PATH\n   * A [conda-forge recipe](https://github.com/conda-forge/versioneer-feedstock) is\n     available, so you can also use `conda install -c conda-forge versioneer`\n* add a `[tool.versioneer]` section to your `pyproject.toml` or a\n  `[versioneer]` section to your `setup.cfg` (see [Install](INSTALL.md))\n* add `versioneer` (with `[toml]` extra, if configuring in `pyproject.toml`)\n  to the `requires` key of the `build-system` table in `pyproject.toml`:\n  ```toml\n  [build-system]\n  requires = [\"setuptools\", \"versioneer[toml]\"]\n  build-backend = \"setuptools.build_meta\"\n  ```\n* run `versioneer install --no-vendor` in your source tree, commit the results\n* verify version information with `python setup.py version`\n\n## Version Identifiers\n\nSource trees come from a variety of places:\n\n* a version-control system checkout (mostly used by developers)\n* a nightly tarball, produced by build automation\n* a snapshot tarball, produced by a web-based VCS browser, like github's\n  \"tarball from tag\" feature\n* a release tarball, produced by \"setup.py sdist\", distributed through PyPI\n\nWithin each source tree, the version identifier (either a string or a number,\nthis tool is format-agnostic) can come from a variety of places:\n\n* ask the VCS tool itself, e.g. \"git describe\" (for checkouts), which knows\n  about recent \"tags\" and an absolute revision-id\n* the name of the directory into which the tarball was unpacked\n* an expanded VCS keyword ($Id$, etc)\n* a `_version.py` created by some earlier build step\n\nFor released software, the version identifier is closely related to a VCS\ntag. Some projects use tag names that include more than just the version\nstring (e.g. \"myproject-1.2\" instead of just \"1.2\"), in which case the tool\nneeds to strip the tag prefix to extract the version identifier. For\nunreleased software (between tags), the version identifier should provide\nenough information to help developers recreate the same tree, while also\ngiving them an idea of roughly how old the tree is (after version 1.2, before\nversion 1.3). Many VCS systems can report a description that captures this,\nfor example `git describe --tags --dirty --always` reports things like\n\"0.7-1-g574ab98-dirty\" to indicate that the checkout is one revision past the\n0.7 tag, has a unique revision id of \"574ab98\", and is \"dirty\" (it has\nuncommitted changes).\n\nThe version identifier is used for multiple purposes:\n\n* to allow the module to self-identify its version: `myproject.__version__`\n* to choose a name and prefix for a 'setup.py sdist' tarball\n\n## Theory of Operation\n\nVersioneer works by adding a special `_version.py` file into your source\ntree, where your `__init__.py` can import it. This `_version.py` knows how to\ndynamically ask the VCS tool for version information at import time.\n\n`_version.py` also contains `$Revision$` markers, and the installation\nprocess marks `_version.py` to have this marker rewritten with a tag name\nduring the `git archive` command. As a result, generated tarballs will\ncontain enough information to get the proper version.\n\nTo allow `setup.py` to compute a version too, a `versioneer.py` is added to\nthe top level of your source tree, next to `setup.py` and the `setup.cfg`\nthat configures it. This overrides several distutils/setuptools commands to\ncompute the version when invoked, and changes `setup.py build` and `setup.py\nsdist` to replace `_version.py` with a small static file that contains just\nthe generated version data.\n\n## Installation\n\nSee [INSTALL.md](./INSTALL.md) for detailed installation instructions.\n\n## Version-String Flavors\n\nCode which uses Versioneer can learn about its version string at runtime by\nimporting `_version` from your main `__init__.py` file and running the\n`get_versions()` function. From the \"outside\" (e.g. in `setup.py`), you can\nimport the top-level `versioneer.py` and run `get_versions()`.\n\nBoth functions return a dictionary with different flavors of version\ninformation:\n\n* `['version']`: A condensed version string, rendered using the selected\n  style. This is the most commonly used value for the project's version\n  string. The default \"pep440\" style yields strings like `0.11`,\n  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the \"Styles\" section\n  below for alternative styles.\n\n* `['full-revisionid']`: detailed revision identifier. For Git, this is the\n  full SHA1 commit id, e.g. \"1076c978a8d3cfc70f408fe5974aa6c092c949ac\".\n\n* `['date']`: Date and time of the latest `HEAD` commit. For Git, it is the\n  commit date in ISO 8601 format. This will be None if the date is not\n  available.\n\n* `['dirty']`: a boolean, True if the tree has uncommitted changes. Note that\n  this is only accurate if run in a VCS checkout, otherwise it is likely to\n  be False or None\n\n* `['error']`: if the version string could not be computed, this will be set\n  to a string describing the problem, otherwise it will be None. It may be\n  useful to throw an exception in setup.py if this is set, to avoid e.g.\n  creating tarballs with a version string of \"unknown\".\n\nSome variants are more useful than others. Including `full-revisionid` in a\nbug report should allow developers to reconstruct the exact code being tested\n(or indicate the presence of local changes that should be shared with the\ndevelopers). `version` is suitable for display in an \"about\" box or a CLI\n`--version` output: it can be easily compared against release notes and lists\nof bugs fixed in various releases.\n\nThe installer adds the following text to your `__init__.py` to place a basic\nversion in `YOURPROJECT.__version__`:\n\n    from ._version import get_versions\n    __version__ = get_versions()['version']\n    del get_versions\n\n## Styles\n\nThe setup.cfg `style=` configuration controls how the VCS information is\nrendered into a version string.\n\nThe default style, \"pep440\", produces a PEP440-compliant string, equal to the\nun-prefixed tag name for actual releases, and containing an additional \"local\nversion\" section with more detail for in-between builds. For Git, this is\nTAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags\n--dirty --always`. For example \"0.11+2.g1076c97.dirty\" indicates that the\ntree is like the \"1076c97\" commit but has uncommitted changes (\".dirty\"), and\nthat this commit is two revisions (\"+2\") beyond the \"0.11\" tag. For released\nsoftware (exactly equal to a known tag), the identifier will only contain the\nstripped tag, e.g. \"0.11\".\n\nOther styles are available. See [details.md](details.md) in the Versioneer\nsource tree for descriptions.\n\n## Debugging\n\nVersioneer tries to avoid fatal errors: if something goes wrong, it will tend\nto return a version of \"0+unknown\". To investigate the problem, run `setup.py\nversion`, which will run the version-lookup code in a verbose mode, and will\ndisplay the full contents of `get_versions()` (including the `error` string,\nwhich may help identify what went wrong).\n\n## Known Limitations\n\nSome situations are known to cause problems for Versioneer. This details the\nmost significant ones. More can be found on Github\n[issues page](https://github.com/python-versioneer/python-versioneer/issues).\n\n### Subprojects\n\nVersioneer has limited support for source trees in which `setup.py` is not in\nthe root directory (e.g. `setup.py` and `.git/` are *not* siblings). The are\ntwo common reasons why `setup.py` might not be in the root:\n\n* Source trees which contain multiple subprojects, such as\n  [Buildbot](https://github.com/buildbot/buildbot), which contains both\n  \"master\" and \"slave\" subprojects, each with their own `setup.py`,\n  `setup.cfg`, and `tox.ini`. Projects like these produce multiple PyPI\n  distributions (and upload multiple independently-installable tarballs).\n* Source trees whose main purpose is to contain a C library, but which also\n  provide bindings to Python (and perhaps other languages) in subdirectories.\n\nVersioneer will look for `.git` in parent directories, and most operations\nshould get the right version string. However `pip` and `setuptools` have bugs\nand implementation details which frequently cause `pip install .` from a\nsubproject directory to fail to find a correct version string (so it usually\ndefaults to `0+unknown`).\n\n`pip install --editable .` should work correctly. `setup.py install` might\nwork too.\n\nPip-8.1.1 is known to have this problem, but hopefully it will get fixed in\nsome later version.\n\n[Bug #38](https://github.com/python-versioneer/python-versioneer/issues/38) is tracking\nthis issue. The discussion in\n[PR #61](https://github.com/python-versioneer/python-versioneer/pull/61) describes the\nissue from the Versioneer side in more detail.\n[pip PR#3176](https://github.com/pypa/pip/pull/3176) and\n[pip PR#3615](https://github.com/pypa/pip/pull/3615) contain work to improve\npip to let Versioneer work correctly.\n\nVersioneer-0.16 and earlier only looked for a `.git` directory next to the\n`setup.cfg`, so subprojects were completely unsupported with those releases.\n\n### Editable installs with setuptools <= 18.5\n\n`setup.py develop` and `pip install --editable .` allow you to install a\nproject into a virtualenv once, then continue editing the source code (and\ntest) without re-installing after every change.\n\n\"Entry-point scripts\" (`setup(entry_points={\"console_scripts\": ..})`) are a\nconvenient way to specify executable scripts that should be installed along\nwith the python package.\n\nThese both work as expected when using modern setuptools. When using\nsetuptools-18.5 or earlier, however, certain operations will cause\n`pkg_resources.DistributionNotFound` errors when running the entrypoint\nscript, which must be resolved by re-installing the package. This happens\nwhen the install happens with one version, then the egg_info data is\nregenerated while a different version is checked out. Many setup.py commands\ncause egg_info to be rebuilt (including `sdist`, `wheel`, and installing into\na different virtualenv), so this can be surprising.\n\n[Bug #83](https://github.com/python-versioneer/python-versioneer/issues/83) describes\nthis one, but upgrading to a newer version of setuptools should probably\nresolve it.\n\n\n## Updating Versioneer\n\nTo upgrade your project to a new release of Versioneer, do the following:\n\n* install the new Versioneer (`pip install -U versioneer` or equivalent)\n* edit `setup.cfg` and `pyproject.toml`, if necessary,\n  to include any new configuration settings indicated by the release notes.\n  See [UPGRADING](./UPGRADING.md) for details.\n* re-run `versioneer install --[no-]vendor` in your source tree, to replace\n  `SRC/_version.py`\n* commit any changed files\n\n## Future Directions\n\nThis tool is designed to make it easily extended to other version-control\nsystems: all VCS-specific components are in separate directories like\nsrc/git/ . The top-level `versioneer.py` script is assembled from these\ncomponents by running make-versioneer.py . In the future, make-versioneer.py\nwill take a VCS name as an argument, and will construct a version of\n`versioneer.py` that is specific to the given VCS. It might also take the\nconfiguration arguments that are currently provided manually during\ninstallation by editing setup.py . Alternatively, it might go the other\ndirection and include code from all supported VCS systems, reducing the\nnumber of intermediate scripts.\n\n## Similar projects\n\n* [setuptools_scm](https://github.com/pypa/setuptools_scm/) - a non-vendored build-time\n  dependency\n* [minver](https://github.com/jbweston/miniver) - a lightweight reimplementation of\n  versioneer\n* [versioningit](https://github.com/jwodder/versioningit) - a PEP 518-based setuptools\n  plugin\n\n## License\n\nTo make Versioneer easier to embed, all its code is dedicated to the public\ndomain. The `_version.py` that it creates is also in the public domain.\nSpecifically, both are released under the \"Unlicense\", as described in\nhttps://unlicense.org/.\n\n[pypi-image]: https://img.shields.io/pypi/v/versioneer.svg\n[pypi-url]: https://pypi.python.org/pypi/versioneer/\n[travis-image]:\nhttps://img.shields.io/travis/com/python-versioneer/python-versioneer.svg\n[travis-url]: https://travis-ci.com/github/python-versioneer/python-versioneer\n\n\"\"\"\n# pylint:disable=invalid-name,import-outside-toplevel,missing-function-docstring\n# pylint:disable=missing-class-docstring,too-many-branches,too-many-statements\n# pylint:disable=raise-missing-from,too-many-lines,too-many-locals,import-error\n# pylint:disable=too-few-public-methods,redefined-outer-name,consider-using-with\n# pylint:disable=attribute-defined-outside-init,too-many-arguments\n\nimport configparser\nimport errno\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\nimport functools\n\n\nfrom pkg_resources import parse_version\n\nhave_tomllib = True\nif sys.version_info >= (3, 11):\n    import tomllib\nelse:\n    try:\n        import tomli as tomllib\n    except ImportError:\n        have_tomllib = False\n\n\nclass VersioneerConfig:\n    \"\"\"Container for Versioneer configuration parameters.\"\"\"\n\n\ndef get_root():\n    \"\"\"Get the project root directory.\n\n    We require that all commands are run from the project root, i.e. the\n    directory that contains setup.py, setup.cfg, and versioneer.py .\n    \"\"\"\n    root = os.path.realpath(os.path.abspath(os.getcwd()))\n    setup_py = os.path.join(root, \"setup.py\")\n    versioneer_py = os.path.join(root, \"versioneer.py\")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        # allow 'python path/to/setup.py COMMAND'\n        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\n        setup_py = os.path.join(root, \"setup.py\")\n        versioneer_py = os.path.join(root, \"versioneer.py\")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        err = (\"Versioneer was unable to run the project root directory. \"\n               \"Versioneer requires setup.py to be executed from \"\n               \"its immediate directory (like 'python setup.py COMMAND'), \"\n               \"or in a way that lets it use sys.argv[0] to find the root \"\n               \"(like 'python path/to/setup.py COMMAND').\")\n        raise VersioneerBadRootError(err)\n    try:\n        # Certain runtime workflows (setup.py install/develop in a setuptools\n        # tree) execute all dependencies in a single python process, so\n        # \"versioneer\" may be imported multiple times, and python's shared\n        # module-import table will cache the first one. So we can't use\n        # os.path.dirname(__file__), as that will find whichever\n        # versioneer.py was first imported, even in later projects.\n        my_path = os.path.realpath(os.path.abspath(__file__))\n        me_dir = os.path.normcase(os.path.splitext(my_path)[0])\n        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\n        if me_dir != vsr_dir and \"VERSIONEER_PEP518\" not in globals():\n            print(\"Warning: build in %s is using versioneer.py from %s\"\n                  % (os.path.dirname(my_path), versioneer_py))\n    except NameError:\n        pass\n    return root\n\n\ndef get_config_from_root(root):\n    \"\"\"Read the project setup.cfg file to determine Versioneer config.\"\"\"\n    # This might raise OSError (if setup.cfg is missing), or\n    # configparser.NoSectionError (if it lacks a [versioneer] section), or\n    # configparser.NoOptionError (if it lacks \"VCS=\"). See the docstring at\n    # the top of versioneer.py for instructions on writing your setup.cfg .\n    pyproject_toml = os.path.join(root, \"pyproject.toml\")\n    setup_cfg = os.path.join(root, \"setup.cfg\")\n    section = None\n    if os.path.exists(pyproject_toml) and have_tomllib:\n        try:\n            with open(pyproject_toml, 'rb') as fobj:\n                pp = tomllib.load(fobj)\n            section = pp['tool']['versioneer']\n        except (tomllib.TOMLDecodeError, KeyError):\n            pass\n    if not section:\n        parser = configparser.ConfigParser()\n        with open(setup_cfg) as cfg_file:\n            parser.read_file(cfg_file)\n        parser.get(\"versioneer\", \"VCS\")  # raise error if missing\n\n        section = parser[\"versioneer\"]\n\n    cfg = VersioneerConfig()\n    cfg.VCS = section['VCS']\n    cfg.style = section.get(\"style\", \"\")\n    cfg.versionfile_source = section.get(\"versionfile_source\")\n    cfg.versionfile_build = section.get(\"versionfile_build\")\n    cfg.tag_prefix = section.get(\"tag_prefix\")\n    if cfg.tag_prefix in (\"''\", '\"\"', None):\n        cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = section.get(\"parentdir_prefix\")\n    cfg.verbose = section.get(\"verbose\")\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\n# these dictionaries contain VCS-specific tools\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    \"\"\"Call the given command(s).\"\"\"\n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        # This hides the console window if pythonw.exe is used\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            process = subprocess.Popen([command] + args, cwd=cwd, env=env,\n                                       stdout=subprocess.PIPE,\n                                       stderr=(subprocess.PIPE if hide_stderr\n                                               else None), **popen_kwargs)\n            break\n        except OSError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(\"unable to find command, tried %s\" % (commands,))\n        return None, None\n    stdout = process.communicate()[0].strip().decode('utf-8')\n    if process.returncode != 0:\n        if verbose:\n            print(\"unable to run %s (error)\" % dispcmd)\n            print(\"stdout was %s\" % stdout)\n        return None, process.returncode\n    return stdout, process.returncode\n\n\nLONG_VERSION_PY['git'] = r'''\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain.\n# Generated by versioneer-0.28\n# https://github.com/python-versioneer/python-versioneer\n\n\"\"\"Git implementation of _version.py.\"\"\"\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\nimport functools\n\n\ndef get_keywords():\n    \"\"\"Get the keywords needed to look up the version information.\"\"\"\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = \"%(DOLLAR)sFormat:%%d%(DOLLAR)s\"\n    git_full = \"%(DOLLAR)sFormat:%%H%(DOLLAR)s\"\n    git_date = \"%(DOLLAR)sFormat:%%ci%(DOLLAR)s\"\n    keywords = {\"refnames\": git_refnames, \"full\": git_full, \"date\": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    \"\"\"Container for Versioneer configuration parameters.\"\"\"\n\n\ndef get_config():\n    \"\"\"Create, populate and return the VersioneerConfig() object.\"\"\"\n    # these strings are filled in when 'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"%(STYLE)s\"\n    cfg.tag_prefix = \"%(TAG_PREFIX)s\"\n    cfg.parentdir_prefix = \"%(PARENTDIR_PREFIX)s\"\n    cfg.versionfile_source = \"%(VERSIONFILE_SOURCE)s\"\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n    def decorate(f):\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    \"\"\"Call the given command(s).\"\"\"\n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        # This hides the console window if pythonw.exe is used\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            process = subprocess.Popen([command] + args, cwd=cwd, env=env,\n                                       stdout=subprocess.PIPE,\n                                       stderr=(subprocess.PIPE if hide_stderr\n                                               else None), **popen_kwargs)\n            break\n        except OSError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %%s\" %% dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(\"unable to find command, tried %%s\" %% (commands,))\n        return None, None\n    stdout = process.communicate()[0].strip().decode()\n    if process.returncode != 0:\n        if verbose:\n            print(\"unable to run %%s (error)\" %% dispcmd)\n            print(\"stdout was %%s\" %% stdout)\n        return None, process.returncode\n    return stdout, process.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    \"\"\"Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    \"\"\"\n    rootdirs = []\n\n    for _ in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {\"version\": dirname[len(parentdir_prefix):],\n                    \"full-revisionid\": None,\n                    \"dirty\": False, \"error\": None, \"date\": None}\n        rootdirs.append(root)\n        root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(\"Tried directories %%s but none started with prefix %%s\" %%\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(\"rootdir doesn't start with parentdir_prefix\")\n\n\n@register_vcs_handler(\"git\", \"get_keywords\")\ndef git_get_keywords(versionfile_abs):\n    \"\"\"Extract version information from the given file.\"\"\"\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don't want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        with open(versionfile_abs, \"r\") as fobj:\n            for line in fobj:\n                if line.strip().startswith(\"git_refnames =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"refnames\"] = mo.group(1)\n                if line.strip().startswith(\"git_full =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"full\"] = mo.group(1)\n                if line.strip().startswith(\"git_date =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"date\"] = mo.group(1)\n    except OSError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(\"git\", \"keywords\")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    \"\"\"Get version information from git keywords.\"\"\"\n    if \"refnames\" not in keywords:\n        raise NotThisMethod(\"Short version file found\")\n    date = keywords.get(\"date\")\n    if date is not None:\n        # Use only the last line.  Previous lines may contain GPG signature\n        # information.\n        date = date.splitlines()[-1]\n\n        # git-2.2.0 added \"%%cI\", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer \"%%ci\" (which expands to an \"ISO-8601\n        # -like\" string, which we must then edit to make compliant), because\n        # it's been around since git-1.5.3, and it's too difficult to\n        # discover which version we're using, or to work around using an\n        # older one.\n        date = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n    refnames = keywords[\"refnames\"].strip()\n    if refnames.startswith(\"$Format\"):\n        if verbose:\n            print(\"keywords are unexpanded, not using\")\n        raise NotThisMethod(\"unexpanded keywords, not a git-archive tarball\")\n    refs = {r.strip() for r in refnames.strip(\"()\").split(\",\")}\n    # starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of\n    # just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.\n    TAG = \"tag: \"\n    tags = {r[len(TAG):] for r in refs if r.startswith(TAG)}\n    if not tags:\n        # Either we're using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %%d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like \"release\" and\n        # \"stabilization\", as well as \"HEAD\" and \"master\".\n        tags = {r for r in refs if re.search(r'\\d', r)}\n        if verbose:\n            print(\"discarding '%%s', no digits\" %% \",\".join(refs - tags))\n    if verbose:\n        print(\"likely tags: %%s\" %% \",\".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. \"2.0\" over \"2.0rc1\"\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            # Filter out refs that exactly match prefix or that don't start\n            # with a number once the prefix is stripped (mostly a concern\n            # when prefix is '')\n            if not re.match(r'\\d', r):\n                continue\n            if verbose:\n                print(\"picking %%s\" %% r)\n            return {\"version\": r,\n                    \"full-revisionid\": keywords[\"full\"].strip(),\n                    \"dirty\": False, \"error\": None,\n                    \"date\": date}\n    # no suitable tags, so version is \"0+unknown\", but full hex is still there\n    if verbose:\n        print(\"no suitable tags, using unknown + full revision id\")\n    return {\"version\": \"0+unknown\",\n            \"full-revisionid\": keywords[\"full\"].strip(),\n            \"dirty\": False, \"error\": \"no suitable tags\", \"date\": None}\n\n\n@register_vcs_handler(\"git\", \"pieces_from_vcs\")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, runner=run_command):\n    \"\"\"Get version from 'git describe' in the root of the source tree.\n\n    This only gets called if the git-archive 'subst' keywords were *not*\n    expanded, and _version.py hasn't already been rewritten with a short\n    version string, meaning we're inside a checked out source tree.\n    \"\"\"\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n\n    # GIT_DIR can interfere with correct operation of Versioneer.\n    # It may be intended to be passed to the Versioneer-versioned project,\n    # but that should not change where we get our version from.\n    env = os.environ.copy()\n    env.pop(\"GIT_DIR\", None)\n    runner = functools.partial(runner, env=env)\n\n    _, rc = runner(GITS, [\"rev-parse\", \"--git-dir\"], cwd=root,\n                   hide_stderr=not verbose)\n    if rc != 0:\n        if verbose:\n            print(\"Directory %%s not under git control\" %% root)\n        raise NotThisMethod(\"'git rev-parse --git-dir' returned error\")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn't one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = runner(GITS, [\n        \"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\",\n        \"--match\", \"{}[[:digit:]]*\".format(tag_prefix)\n    ], cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(\"'git describe' failed\")\n    describe_out = describe_out.strip()\n    full_out, rc = runner(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(\"'git rev-parse' failed\")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[\"long\"] = full_out\n    pieces[\"short\"] = full_out[:7]  # maybe improved later\n    pieces[\"error\"] = None\n\n    branch_name, rc = runner(GITS, [\"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n                             cwd=root)\n    # --abbrev-ref was added in git-1.6.3\n    if rc != 0 or branch_name is None:\n        raise NotThisMethod(\"'git rev-parse --abbrev-ref' returned error\")\n    branch_name = branch_name.strip()\n\n    if branch_name == \"HEAD\":\n        # If we aren't exactly on a branch, pick a branch which represents\n        # the current commit. If all else fails, we are on a branchless\n        # commit.\n        branches, rc = runner(GITS, [\"branch\", \"--contains\"], cwd=root)\n        # --contains was added in git-1.5.4\n        if rc != 0 or branches is None:\n            raise NotThisMethod(\"'git branch --contains' returned error\")\n        branches = branches.split(\"\\n\")\n\n        # Remove the first line if we're running detached\n        if \"(\" in branches[0]:\n            branches.pop(0)\n\n        # Strip off the leading \"* \" from the list of branches.\n        branches = [branch[2:] for branch in branches]\n        if \"master\" in branches:\n            branch_name = \"master\"\n        elif not branches:\n            branch_name = None\n        else:\n            # Pick the first branch that is returned. Good or bad.\n            branch_name = branches[0]\n\n    pieces[\"branch\"] = branch_name\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(\"-dirty\")\n    pieces[\"dirty\"] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(\"-dirty\")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if \"-\" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r'^(.+)-(\\d+)-g([0-9a-f]+)$', git_describe)\n        if not mo:\n            # unparsable. Maybe git-describe is misbehaving?\n            pieces[\"error\"] = (\"unable to parse git-describe output: '%%s'\"\n                               %% describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = \"tag '%%s' doesn't start with prefix '%%s'\"\n                print(fmt %% (full_tag, tag_prefix))\n            pieces[\"error\"] = (\"tag '%%s' doesn't start with prefix '%%s'\"\n                               %% (full_tag, tag_prefix))\n            return pieces\n        pieces[\"closest-tag\"] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[\"distance\"] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[\"short\"] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[\"closest-tag\"] = None\n        out, rc = runner(GITS, [\"rev-list\", \"HEAD\", \"--left-right\"], cwd=root)\n        pieces[\"distance\"] = len(out.split())  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = runner(GITS, [\"show\", \"-s\", \"--format=%%ci\", \"HEAD\"], cwd=root)[0].strip()\n    # Use only the last line.  Previous lines may contain GPG signature\n    # information.\n    date = date.splitlines()[-1]\n    pieces[\"date\"] = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a .\"\"\"\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n\n\ndef render_pep440(pieces):\n    \"\"\"Build up version string, with post-release \"local version identifier\".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += plus_or_dot(pieces)\n            rendered += \"%%d.g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0+untagged.%%d.g%%s\" %% (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_branch(pieces):\n    \"\"\"TAG[[.dev0]+DISTANCE.gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch. Note that .dev0 sorts backwards\n    (a feature branch will appear \"older\" than the master branch).\n\n    Exceptions:\n    1: no tags. 0[.dev0]+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"%%d.g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0\"\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+untagged.%%d.g%%s\" %% (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef pep440_split_post(ver):\n    \"\"\"Split pep440 version string at the post-release segment.\n\n    Returns the release segments before the post-release and the\n    post-release version number (or -1 if no post-release segment is present).\n    \"\"\"\n    vc = str.split(ver, \".post\")\n    return vc[0], int(vc[1] or 0) if len(vc) == 2 else None\n\n\ndef render_pep440_pre(pieces):\n    \"\"\"TAG[.postN.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post0.devDISTANCE\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        if pieces[\"distance\"]:\n            # update the post release segment\n            tag_version, post_version = pep440_split_post(pieces[\"closest-tag\"])\n            rendered = tag_version\n            if post_version is not None:\n                rendered += \".post%%d.dev%%d\" %% (post_version + 1, pieces[\"distance\"])\n            else:\n                rendered += \".post0.dev%%d\" %% (pieces[\"distance\"])\n        else:\n            # no commits, use the tag as the version\n            rendered = pieces[\"closest-tag\"]\n    else:\n        # exception #1\n        rendered = \"0.post0.dev%%d\" %% pieces[\"distance\"]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The \".dev0\" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear \"older\" than the corresponding clean one),\n    but you shouldn't be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%%d\" %% pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%%s\" %% pieces[\"short\"]\n    else:\n        # exception #1\n        rendered = \"0.post%%d\" %% pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n        rendered += \"+g%%s\" %% pieces[\"short\"]\n    return rendered\n\n\ndef render_pep440_post_branch(pieces):\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%%d\" %% pieces[\"distance\"]\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%%s\" %% pieces[\"short\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0.post%%d\" %% pieces[\"distance\"]\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+g%%s\" %% pieces[\"short\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    \"\"\"TAG[.postDISTANCE[.dev0]] .\n\n    The \".dev0\" means dirty.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%%d\" %% pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n    else:\n        # exception #1\n        rendered = \"0.post%%d\" %% pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n    return rendered\n\n\ndef render_git_describe(pieces):\n    \"\"\"TAG[-DISTANCE-gHEX][-dirty].\n\n    Like 'git describe --tags --dirty --always'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"]:\n            rendered += \"-%%d-g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    \"\"\"TAG-DISTANCE-gHEX[-dirty].\n\n    Like 'git describe --tags --dirty --always -long'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        rendered += \"-%%d-g%%s\" %% (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render(pieces, style):\n    \"\"\"Render the given version pieces into the requested style.\"\"\"\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(\"unknown style '%%s'\" %% style)\n\n    return {\"version\": rendered, \"full-revisionid\": pieces[\"long\"],\n            \"dirty\": pieces[\"dirty\"], \"error\": None,\n            \"date\": pieces.get(\"date\")}\n\n\ndef get_versions():\n    \"\"\"Get version information or return default if unable to do so.\"\"\"\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for _ in cfg.versionfile_source.split('/'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {\"version\": \"0+unknown\", \"full-revisionid\": None,\n                \"dirty\": None,\n                \"error\": \"unable to find root of source tree\",\n                \"date\": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {\"version\": \"0+unknown\", \"full-revisionid\": None,\n            \"dirty\": None,\n            \"error\": \"unable to compute version\", \"date\": None}\n'''\n\n\n@register_vcs_handler(\"git\", \"get_keywords\")\ndef git_get_keywords(versionfile_abs):\n    \"\"\"Extract version information from the given file.\"\"\"\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don't want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        with open(versionfile_abs, \"r\") as fobj:\n            for line in fobj:\n                if line.strip().startswith(\"git_refnames =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"refnames\"] = mo.group(1)\n                if line.strip().startswith(\"git_full =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"full\"] = mo.group(1)\n                if line.strip().startswith(\"git_date =\"):\n                    mo = re.search(r'=\\s*\"(.*)\"', line)\n                    if mo:\n                        keywords[\"date\"] = mo.group(1)\n    except OSError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(\"git\", \"keywords\")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    \"\"\"Get version information from git keywords.\"\"\"\n    if \"refnames\" not in keywords:\n        raise NotThisMethod(\"Short version file found\")\n    date = keywords.get(\"date\")\n    if date is not None:\n        # Use only the last line.  Previous lines may contain GPG signature\n        # information.\n        date = date.splitlines()[-1]\n\n        # git-2.2.0 added \"%cI\", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer \"%ci\" (which expands to an \"ISO-8601\n        # -like\" string, which we must then edit to make compliant), because\n        # it's been around since git-1.5.3, and it's too difficult to\n        # discover which version we're using, or to work around using an\n        # older one.\n        date = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n    refnames = keywords[\"refnames\"].strip()\n    if refnames.startswith(\"$Format\"):\n        if verbose:\n            print(\"keywords are unexpanded, not using\")\n        raise NotThisMethod(\"unexpanded keywords, not a git-archive tarball\")\n    refs = {r.strip() for r in refnames.strip(\"()\").split(\",\")}\n    # starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of\n    # just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.\n    TAG = \"tag: \"\n    tags = {r[len(TAG):] for r in refs if r.startswith(TAG)}\n    if not tags:\n        # Either we're using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like \"release\" and\n        # \"stabilization\", as well as \"HEAD\" and \"master\".\n        tags = {r for r in refs if re.search(r'\\d', r)}\n        if verbose:\n            print(\"discarding '%s', no digits\" % \",\".join(refs - tags))\n    if verbose:\n        print(\"likely tags: %s\" % \",\".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. \"2.0\" over \"2.0rc1\"\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            # Filter out refs that exactly match prefix or that don't start\n            # with a number once the prefix is stripped (mostly a concern\n            # when prefix is '')\n            if not re.match(r'\\d', r):\n                continue\n            if verbose:\n                print(\"picking %s\" % r)\n            return {\"version\": r,\n                    \"full-revisionid\": keywords[\"full\"].strip(),\n                    \"dirty\": False, \"error\": None,\n                    \"date\": date}\n    # no suitable tags, so version is \"0+unknown\", but full hex is still there\n    if verbose:\n        print(\"no suitable tags, using unknown + full revision id\")\n    return {\"version\": \"0+unknown\",\n            \"full-revisionid\": keywords[\"full\"].strip(),\n            \"dirty\": False, \"error\": \"no suitable tags\", \"date\": None}\n\n\ndef git_tracking_branch():\n    GITS = [\"git\"]\n    branch_out, rc = run_command(GITS, [\"rev-parse\", \"--abbrev-ref\", \"--symbolic-full-name\", \"@{u}\"], hide_stderr=True)\n    if rc != 0:\n        return \"notrack\"\n    return branch_out\n\n\n@register_vcs_handler(\"git\", \"pieces_from_vcs\")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, runner=run_command):\n    \"\"\"Get version from 'git describe' in the root of the source tree.\n\n    This only gets called if the git-archive 'subst' keywords were *not*\n    expanded, and _version.py hasn't already been rewritten with a short\n    version string, meaning we're inside a checked out source tree.\n    \"\"\"\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n\n    # GIT_DIR can interfere with correct operation of Versioneer.\n    # It may be intended to be passed to the Versioneer-versioned project,\n    # but that should not change where we get our version from.\n    env = os.environ.copy()\n    env.pop(\"GIT_DIR\", None)\n    runner = functools.partial(runner, env=env)\n\n    _, rc = runner(GITS, [\"rev-parse\", \"--git-dir\"], cwd=root,\n                   hide_stderr=not verbose)\n    if rc != 0:\n        if verbose:\n            print(\"Directory %s not under git control\" % root)\n        raise NotThisMethod(\"'git rev-parse --git-dir' returned error\")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn't one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = runner(GITS, [\n        \"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\",\n        \"--match\", \"{}[[:digit:]]*\".format(tag_prefix)\n    ], cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(\"'git describe' failed\")\n    describe_out = describe_out.strip()\n    full_out, rc = runner(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(\"'git rev-parse' failed\")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[\"long\"] = full_out\n    pieces[\"short\"] = full_out[:7]  # maybe improved later\n    pieces[\"error\"] = None\n\n    branch_name, rc = runner(GITS, [\"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n                             cwd=root)\n    # --abbrev-ref was added in git-1.6.3\n    if rc != 0 or branch_name is None:\n        raise NotThisMethod(\"'git rev-parse --abbrev-ref' returned error\")\n    branch_name = branch_name.strip()\n\n    if branch_name == \"HEAD\":\n        # If we aren't exactly on a branch, pick a branch which represents\n        # the current commit. If all else fails, we are on a branchless\n        # commit.\n        branches, rc = runner(GITS, [\"branch\", \"--contains\"], cwd=root)\n        # --contains was added in git-1.5.4\n        if rc != 0 or branches is None:\n            raise NotThisMethod(\"'git branch --contains' returned error\")\n        branches = branches.split(\"\\n\")\n\n        # Remove the first line if we're running detached\n        if \"(\" in branches[0]:\n            branches.pop(0)\n\n        # Strip off the leading \"* \" from the list of branches.\n        branches = [branch[2:] for branch in branches]\n        if \"master\" in branches:\n            branch_name = \"master\"\n        elif not branches:\n            branch_name = None\n        else:\n            # Pick the first branch that is returned. Good or bad.\n            branch_name = branches[0]\n\n    pieces[\"branch\"] = branch_name\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(\"-dirty\")\n    pieces[\"dirty\"] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(\"-dirty\")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if \"-\" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r'^(.+)-(\\d+)-g([0-9a-f]+)$', git_describe)\n        if not mo:\n            # unparsable. Maybe git-describe is misbehaving?\n            pieces[\"error\"] = (\"unable to parse git-describe output: '%s'\"\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = \"tag '%s' doesn't start with prefix '%s'\"\n                print(fmt % (full_tag, tag_prefix))\n            pieces[\"error\"] = (\"tag '%s' doesn't start with prefix '%s'\"\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[\"closest-tag\"] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[\"distance\"] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[\"short\"] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[\"closest-tag\"] = None\n        out, rc = runner(GITS, [\"rev-list\", \"HEAD\", \"--left-right\"], cwd=root)\n        pieces[\"distance\"] = len(out.split())  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = runner(GITS, [\"show\", \"-s\", \"--format=%ci\", \"HEAD\"], cwd=root)[0].strip()\n    # Use only the last line.  Previous lines may contain GPG signature\n    # information.\n    date = date.splitlines()[-1]\n    pieces[\"date\"] = date.strip().replace(\" \", \"T\", 1).replace(\" \", \"\", 1)\n\n    return pieces\n\n\ndef do_vcs_install(versionfile_source, ipy):\n    \"\"\"Git-specific installation logic for Versioneer.\n\n    For Git, this means creating/changing .gitattributes to mark _version.py\n    for export-subst keyword substitution.\n    \"\"\"\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n    files = [versionfile_source]\n    if ipy:\n        files.append(ipy)\n    if \"VERSIONEER_PEP518\" not in globals():\n        try:\n            my_path = __file__\n            if my_path.endswith((\".pyc\", \".pyo\")):\n                my_path = os.path.splitext(my_path)[0] + \".py\"\n            versioneer_file = os.path.relpath(my_path)\n        except NameError:\n            versioneer_file = \"versioneer.py\"\n        files.append(versioneer_file)\n    present = False\n    try:\n        with open(\".gitattributes\", \"r\") as fobj:\n            for line in fobj:\n                if line.strip().startswith(versionfile_source):\n                    if \"export-subst\" in line.strip().split()[1:]:\n                        present = True\n                        break\n    except OSError:\n        pass\n    if not present:\n        with open(\".gitattributes\", \"a+\") as fobj:\n            fobj.write(\"{} export-subst\\n\".format(versionfile_source))\n        files.append(\".gitattributes\")\n    run_command(GITS, [\"add\", \"--\"] + files)\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    \"\"\"Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    \"\"\"\n    rootdirs = []\n\n    for _ in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {\"version\": dirname[len(parentdir_prefix):],\n                    \"full-revisionid\": None,\n                    \"dirty\": False, \"error\": None, \"date\": None}\n        rootdirs.append(root)\n        root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(\"Tried directories %s but none started with prefix %s\" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(\"rootdir doesn't start with parentdir_prefix\")\n\n\nSHORT_VERSION_PY = \"\"\"\n# This file was generated by 'versioneer.py' (0.28) from\n# revision-control system data, or from the parent directory name of an\n# unpacked source archive. Distribution tarballs contain a pre-generated copy\n# of this file.\n\nimport json\n\nversion_json = '''\n%s\n'''  # END VERSION_JSON\n\n\ndef get_versions():\n    return json.loads(version_json)\n\"\"\"\n\n\ndef versions_from_file(filename):\n    \"\"\"Try to determine the version from _version.py if present.\"\"\"\n    try:\n        with open(filename) as f:\n            contents = f.read()\n    except OSError:\n        raise NotThisMethod(\"unable to read _version.py\")\n    mo = re.search(r\"version_json = '''\\n(.*)'''  # END VERSION_JSON\",\n                   contents, re.M | re.S)\n    if not mo:\n        mo = re.search(r\"version_json = '''\\r\\n(.*)'''  # END VERSION_JSON\",\n                       contents, re.M | re.S)\n    if not mo:\n        raise NotThisMethod(\"no version_json in _version.py\")\n    return json.loads(mo.group(1))\n\n\ndef write_to_version_file(filename, versions):\n    \"\"\"Write the given version number to the given _version.py file.\"\"\"\n    os.unlink(filename)\n    contents = json.dumps(versions, sort_keys=True,\n                          indent=1, separators=(\",\", \": \"))\n    with open(filename, \"w\") as f:\n        f.write(SHORT_VERSION_PY % contents)\n\n    print(\"set %s to '%s'\" % (filename, versions[\"version\"]))\n\n\ndef plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a .\"\"\"\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n\n\ndef render_pep440(pieces):\n    \"\"\"Build up version string, with post-release \"local version identifier\".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += plus_or_dot(pieces)\n            rendered += \"%d.g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0+untagged.%d.g%s\" % (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_branch(pieces):\n    \"\"\"TAG[[.dev0]+DISTANCE.gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch. Note that .dev0 sorts backwards\n    (a feature branch will appear \"older\" than the master branch).\n\n    Exceptions:\n    1: no tags. 0[.dev0]+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"%d.g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0\"\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+untagged.%d.g%s\" % (pieces[\"distance\"],\n                                          pieces[\"short\"])\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef pep440_split_post(ver):\n    \"\"\"Split pep440 version string at the post-release segment.\n\n    Returns the release segments before the post-release and the\n    post-release version number (or -1 if no post-release segment is present).\n    \"\"\"\n    vc = str.split(ver, \".post\")\n    return vc[0], int(vc[1] or 0) if len(vc) == 2 else None\n\n\ndef render_pep440_pre(pieces):\n    \"\"\"TAG[.postN.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post0.devDISTANCE\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        if pieces[\"distance\"]:\n            # update the post release segment\n            tag_version, post_version = pep440_split_post(pieces[\"closest-tag\"])\n            rendered = tag_version\n            if post_version is not None:\n                rendered += \".post%d.dev%d\" % (post_version + 1, pieces[\"distance\"])\n            else:\n                rendered += \".post0.dev%d\" % (pieces[\"distance\"])\n        else:\n            # no commits, use the tag as the version\n            rendered = pieces[\"closest-tag\"]\n    else:\n        # exception #1\n        rendered = \"0.post0.dev%d\" % pieces[\"distance\"]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The \".dev0\" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear \"older\" than the corresponding clean one),\n    but you shouldn't be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%d\" % pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%s\" % pieces[\"short\"]\n    else:\n        # exception #1\n        rendered = \"0.post%d\" % pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n        rendered += \"+g%s\" % pieces[\"short\"]\n    return rendered\n\n\ndef render_pep440_post_branch(pieces):\n    \"\"\"TAG[.postDISTANCE[.dev0]+gHEX[.dirty]] .\n\n    The \".dev0\" means not master branch.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%d\" % pieces[\"distance\"]\n            if pieces[\"branch\"] != \"master\":\n                rendered += \".dev0\"\n            rendered += plus_or_dot(pieces)\n            rendered += \"g%s\" % pieces[\"short\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = \"0.post%d\" % pieces[\"distance\"]\n        if pieces[\"branch\"] != \"master\":\n            rendered += \".dev0\"\n        rendered += \"+g%s\" % pieces[\"short\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered\n\n\ndef render_pep440_ricequant(pieces):\n    tag = pieces[\"closest-tag\"]\n    parsed_tag = parse_version(tag) if tag else None\n\n    working = working_version()\n    parsed_working = parse_version(working)\n\n    rendered = working\n\n    if tag:\n        # 当前开发系列正式版如果小于最近的tag，那么该tag肯定就是该系列的post版本了\n        # 当前开发版本应该总是大于最近的tag，那么当前到commit必须大于等于最近的commit\n        if parsed_working < parsed_tag:\n            if parsed_working.base_version == parsed_tag.base_version:\n                if not parsed_tag.is_postrelease:\n                    raise Exception(\"Only post release tag allowed, tag %s\" % tag)\n                if parsed_tag._version.post[0] != \"post\":\n                    raise Exception(\"Only post release tag allowed, tag %s\" % tag)\n                if pieces[\"distance\"] > 0:\n                    rendered += \".post%d\" % (parsed_tag._version.post[1] + 1)\n                    rendered += \".dev%d\" % (pieces[\"distance\"])\n                elif pieces[\"distance\"] == 0:\n                    rendered += \".post%d\" % parsed_tag._version.post[1]\n            else:\n                raise Exception(\"Developing version can not go back in time: %s < %s\" % (working, tag))\n        # 如果最近的tag是正式版tag，那么就是在开发该系列的.post1\n        elif parsed_working == parsed_tag:\n            if pieces[\"distance\"] > 0:\n                rendered += \".post1.dev%d\" % (pieces[\"distance\"])\n        # 如果正在开发到是一个新的系列，那么就从该系列的.dev0开始\n        else:\n            if pieces[\"distance\"] >= 0:\n                rendered += \".dev%d\" % (pieces[\"distance\"])\n    # 没有最近的tag等价于正在开发到是一个新的系列，那么就从该系列的.dev0开始\n    else:\n        if pieces[\"distance\"] >= 0:\n            rendered += \".dev%d\" % pieces[\"distance\"]\n\n    tracking_branch = git_tracking_branch()\n    # # 如果是dev和master分支或者hotfix分支来的，或者是一个tag，那就用pep440的版本号，否则带上git commit id\n    if tracking_branch in [\"origin/develop\", \"origin/master\"] or tracking_branch.startswith(\"origin/hotfix/\") or pieces[\n        \"distance\"] == 0:\n        return rendered\n\n    rendered += \"+%s\" % format(pieces[\"short\"])\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    \"\"\"TAG[.postDISTANCE[.dev0]] .\n\n    The \".dev0\" means dirty.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += \".post%d\" % pieces[\"distance\"]\n            if pieces[\"dirty\"]:\n                rendered += \".dev0\"\n    else:\n        # exception #1\n        rendered = \"0.post%d\" % pieces[\"distance\"]\n        if pieces[\"dirty\"]:\n            rendered += \".dev0\"\n    return rendered\n\n\ndef render_git_describe(pieces):\n    \"\"\"TAG[-DISTANCE-gHEX][-dirty].\n\n    Like 'git describe --tags --dirty --always'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"]:\n            rendered += \"-%d-g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    \"\"\"TAG-DISTANCE-gHEX[-dirty].\n\n    Like 'git describe --tags --dirty --always -long'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        rendered += \"-%d-g%s\" % (pieces[\"distance\"], pieces[\"short\"])\n    else:\n        # exception #1\n        rendered = pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \"-dirty\"\n    return rendered\n\n\ndef render(pieces, style):\n    \"\"\"Render the given version pieces into the requested style.\"\"\"\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-ricequant\":\n        rendered = render_pep440_ricequant(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(\"unknown style '%s'\" % style)\n\n    return {\"version\": rendered, \"full-revisionid\": pieces[\"long\"],\n            \"dirty\": pieces[\"dirty\"], \"error\": None,\n            \"date\": pieces.get(\"date\")}\n\n\nclass VersioneerBadRootError(Exception):\n    \"\"\"The project root directory is unknown or missing key files.\"\"\"\n\n\ndef get_versions(verbose=False):\n    \"\"\"Get the project version from whatever source is available.\n\n    Returns dict with two keys: 'version' and 'full'.\n    \"\"\"\n    if \"versioneer\" in sys.modules:\n        # see the discussion in cmdclass.py:get_cmdclass()\n        del sys.modules[\"versioneer\"]\n\n    root = get_root()\n    cfg = get_config_from_root(root)\n\n    assert cfg.VCS is not None, \"please set [versioneer]VCS= in setup.cfg\"\n    handlers = HANDLERS.get(cfg.VCS)\n    assert handlers, \"unrecognized VCS '%s'\" % cfg.VCS\n    verbose = verbose or cfg.verbose\n    assert cfg.versionfile_source is not None, \\\n        \"please set versioneer.versionfile_source\"\n    assert cfg.tag_prefix is not None, \"please set versioneer.tag_prefix\"\n\n    versionfile_abs = os.path.join(root, cfg.versionfile_source)\n\n    # extract version from first of: _version.py, VCS command (e.g. 'git\n    # describe'), parentdir. This is meant to work for developers using a\n    # source checkout, for users of a tarball created by 'setup.py sdist',\n    # and for users of a tarball/zipball created by 'git archive' or github's\n    # download-from-tag feature or the equivalent in other VCSes.\n\n    get_keywords_f = handlers.get(\"get_keywords\")\n    from_keywords_f = handlers.get(\"keywords\")\n    if get_keywords_f and from_keywords_f:\n        try:\n            keywords = get_keywords_f(versionfile_abs)\n            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)\n            if verbose:\n                print(\"got version from expanded keyword %s\" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        ver = versions_from_file(versionfile_abs)\n        if verbose:\n            print(\"got version from file %s %s\" % (versionfile_abs, ver))\n        return ver\n    except NotThisMethod:\n        pass\n\n    from_vcs_f = handlers.get(\"pieces_from_vcs\")\n    if from_vcs_f:\n        try:\n            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)\n            ver = render(pieces, cfg.style)\n            if verbose:\n                print(\"got version from VCS %s\" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        if cfg.parentdir_prefix:\n            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n            if verbose:\n                print(\"got version from parentdir %s\" % ver)\n            return ver\n    except NotThisMethod:\n        pass\n\n    if verbose:\n        print(\"unable to compute version\")\n\n    return {\"version\": \"0+unknown\", \"full-revisionid\": None,\n            \"dirty\": None, \"error\": \"unable to compute version\",\n            \"date\": None}\n\n\ndef get_version():\n    \"\"\"Get the short version string for this project.\"\"\"\n    return get_versions()[\"version\"]\n\n\ndef get_cmdclass(cmdclass=None):\n    \"\"\"Get the custom setuptools subclasses used by Versioneer.\n\n    If the package uses a different cmdclass (e.g. one from numpy), it\n    should be provide as an argument.\n    \"\"\"\n    if \"versioneer\" in sys.modules:\n        del sys.modules[\"versioneer\"]\n        # this fixes the \"python setup.py develop\" case (also 'install' and\n        # 'easy_install .'), in which subdependencies of the main project are\n        # built (using setup.py bdist_egg) in the same python process. Assume\n        # a main project A and a dependency B, which use different versions\n        # of Versioneer. A's setup.py imports A's Versioneer, leaving it in\n        # sys.modules by the time B's setup.py is executed, causing B to run\n        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a\n        # sandbox that restores sys.modules to it's pre-build state, so the\n        # parent is protected against the child's \"import versioneer\". By\n        # removing ourselves from sys.modules here, before the child build\n        # happens, we protect the child from the parent's versioneer too.\n        # Also see https://github.com/python-versioneer/python-versioneer/issues/52\n\n    cmds = {} if cmdclass is None else cmdclass.copy()\n\n    # we add \"version\" to setuptools\n    from setuptools import Command\n\n    class cmd_version(Command):\n        description = \"report generated version string\"\n        user_options = []\n        boolean_options = []\n\n        def initialize_options(self):\n            pass\n\n        def finalize_options(self):\n            pass\n\n        def run(self):\n            vers = get_versions(verbose=True)\n            print(\"Version: %s\" % vers[\"version\"])\n            print(\" full-revisionid: %s\" % vers.get(\"full-revisionid\"))\n            print(\" dirty: %s\" % vers.get(\"dirty\"))\n            print(\" date: %s\" % vers.get(\"date\"))\n            if vers[\"error\"]:\n                print(\" error: %s\" % vers[\"error\"])\n    cmds[\"version\"] = cmd_version\n\n    # we override \"build_py\" in setuptools\n    #\n    # most invocation pathways end up running build_py:\n    #  distutils/build -> build_py\n    #  distutils/install -> distutils/build ->..\n    #  setuptools/bdist_wheel -> distutils/install ->..\n    #  setuptools/bdist_egg -> distutils/install_lib -> build_py\n    #  setuptools/install -> bdist_egg ->..\n    #  setuptools/develop -> ?\n    #  pip install:\n    #   copies source tree to a tempdir before running egg_info/etc\n    #   if .git isn't copied too, 'git describe' will fail\n    #   then does setup.py bdist_wheel, or sometimes setup.py install\n    #  setup.py egg_info -> ?\n\n    # pip install -e . and setuptool/editable_wheel will invoke build_py\n    # but the build_py command is not expected to copy any files.\n\n    # we override different \"build_py\" commands for both environments\n    if 'build_py' in cmds:\n        _build_py = cmds['build_py']\n    else:\n        from setuptools.command.build_py import build_py as _build_py\n\n    class cmd_build_py(_build_py):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_py.run(self)\n            if getattr(self, \"editable_mode\", False):\n                # During editable installs `.py` and data files are\n                # not copied to build_lib\n                return\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if cfg.versionfile_build:\n                target_versionfile = os.path.join(self.build_lib,\n                                                  cfg.versionfile_build)\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n    cmds[\"build_py\"] = cmd_build_py\n\n    if 'build_ext' in cmds:\n        _build_ext = cmds['build_ext']\n    else:\n        from setuptools.command.build_ext import build_ext as _build_ext\n\n    class cmd_build_ext(_build_ext):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_ext.run(self)\n            if self.inplace:\n                # build_ext --inplace will only build extensions in\n                # build/lib<..> dir with no _version.py to write to.\n                # As in place builds will already have a _version.py\n                # in the module dir, we do not need to write one.\n                return\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if not cfg.versionfile_build:\n                return\n            target_versionfile = os.path.join(self.build_lib,\n                                              cfg.versionfile_build)\n            if not os.path.exists(target_versionfile):\n                print(\"Warning: {} does not exist, skipping \"\n                      \"version update. This can happen if you are running build_ext \"\n                      \"without first running build_py.\".format(target_versionfile))\n                return\n            print(\"UPDATING %s\" % target_versionfile)\n            write_to_version_file(target_versionfile, versions)\n    cmds[\"build_ext\"] = cmd_build_ext\n\n    if \"cx_Freeze\" in sys.modules:  # cx_freeze enabled?\n        from cx_Freeze.dist import build_exe as _build_exe\n        # nczeczulin reports that py2exe won't like the pep440-style string\n        # as FILEVERSION, but it can be used for PRODUCTVERSION, e.g.\n        # setup(console=[{\n        #   \"version\": versioneer.get_version().split(\"+\", 1)[0], # FILEVERSION\n        #   \"product_version\": versioneer.get_version(),\n        #   ...\n\n        class cmd_build_exe(_build_exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _build_exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, \"w\") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {\"DOLLAR\": \"$\",\n                             \"STYLE\": cfg.style,\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                             })\n        cmds[\"build_exe\"] = cmd_build_exe\n        del cmds[\"build_py\"]\n\n    if 'py2exe' in sys.modules:  # py2exe enabled?\n        try:\n            from py2exe.setuptools_buildexe import py2exe as _py2exe\n        except ImportError:\n            from py2exe.distutils_buildexe import py2exe as _py2exe\n\n        class cmd_py2exe(_py2exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(\"UPDATING %s\" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _py2exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, \"w\") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {\"DOLLAR\": \"$\",\n                             \"STYLE\": cfg.style,\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                             })\n        cmds[\"py2exe\"] = cmd_py2exe\n\n    # sdist farms its file list building out to egg_info\n    if 'egg_info' in cmds:\n        _egg_info = cmds['egg_info']\n    else:\n        from setuptools.command.egg_info import egg_info as _egg_info\n\n    class cmd_egg_info(_egg_info, object):\n        def find_sources(self):\n            # egg_info.find_sources builds the manifest list and writes it\n            # in one shot\n            super(cmd_egg_info, self).find_sources()\n\n            # Modify the filelist and normalize it\n            root = get_root()\n            cfg = get_config_from_root(root)\n            self.filelist.append('versioneer.py')\n            if cfg.versionfile_source:\n                # There are rare cases where versionfile_source might not be\n                # included by default, so we must be explicit\n                self.filelist.append(cfg.versionfile_source)\n            self.filelist.sort()\n            self.filelist.remove_duplicates()\n\n            # The write method is hidden in the manifest_maker instance that\n            # generated the filelist and was thrown away\n            # We will instead replicate their final normalization (to unicode,\n            # and POSIX-style paths)\n            from setuptools import unicode_utils\n            normalized = [unicode_utils.filesys_decode(f).replace(os.sep, '/')\n                          for f in self.filelist.files]\n\n            manifest_filename = os.path.join(self.egg_info, 'SOURCES.txt')\n            with open(manifest_filename, 'w') as fobj:\n                fobj.write('\\n'.join(normalized))\n\n    cmds['egg_info'] = cmd_egg_info\n\n    # we override different \"sdist\" commands for both environments\n    if 'sdist' in cmds:\n        _sdist = cmds['sdist']\n    else:\n        from setuptools.command.sdist import sdist as _sdist\n\n    class cmd_sdist(_sdist):\n        def run(self):\n            versions = get_versions()\n            self._versioneer_generated_versions = versions\n            # unless we update this, the command will keep using the old\n            # version\n            self.distribution.metadata.version = versions[\"version\"]\n            return _sdist.run(self)\n\n        def make_release_tree(self, base_dir, files):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            _sdist.make_release_tree(self, base_dir, files)\n            # now locate _version.py in the new base_dir directory\n            # (remembering that it may be a hardlink) and replace it with an\n            # updated value\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n            print(\"UPDATING %s\" % target_versionfile)\n            write_to_version_file(target_versionfile,\n                                  self._versioneer_generated_versions)\n    cmds[\"sdist\"] = cmd_sdist\n\n    return cmds\n\n\nCONFIG_ERROR = \"\"\"\nsetup.cfg is missing the necessary Versioneer configuration. You need\na section like:\n\n [versioneer]\n VCS = git\n style = pep440\n versionfile_source = src/myproject/_version.py\n versionfile_build = myproject/_version.py\n tag_prefix =\n parentdir_prefix = myproject-\n\nYou will also need to edit your setup.py to use the results:\n\n import versioneer\n setup(version=versioneer.get_version(),\n       cmdclass=versioneer.get_cmdclass(), ...)\n\nPlease read the docstring in ./versioneer.py for configuration instructions,\nedit setup.cfg, and re-run the installer or 'python versioneer.py setup'.\n\"\"\"\n\nSAMPLE_CONFIG = \"\"\"\n# See the docstring in versioneer.py for instructions. Note that you must\n# re-run 'versioneer.py setup' after changing this section, and commit the\n# resulting files.\n\n[versioneer]\n#VCS = git\n#style = pep440\n#versionfile_source =\n#versionfile_build =\n#tag_prefix =\n#parentdir_prefix =\n\n\"\"\"\n\nOLD_SNIPPET = \"\"\"\nfrom ._version import get_versions\n__version__ = get_versions()['version']\ndel get_versions\n\"\"\"\n\nINIT_PY_SNIPPET = \"\"\"\nfrom . import {0}\n__version__ = {0}.get_versions()['version']\n\"\"\"\n\n\ndef do_setup():\n    \"\"\"Do main VCS-independent setup function for installing Versioneer.\"\"\"\n    root = get_root()\n    try:\n        cfg = get_config_from_root(root)\n    except (OSError, configparser.NoSectionError,\n            configparser.NoOptionError) as e:\n        if isinstance(e, (OSError, configparser.NoSectionError)):\n            print(\"Adding sample versioneer config to setup.cfg\")\n            with open(os.path.join(root, \"setup.cfg\"), \"a\") as f:\n                f.write(SAMPLE_CONFIG)\n        print(CONFIG_ERROR)\n        return 1\n\n    print(\" creating %s\" % cfg.versionfile_source)\n    with open(cfg.versionfile_source, \"w\") as f:\n        LONG = LONG_VERSION_PY[cfg.VCS]\n        f.write(LONG % {\"DOLLAR\": \"$\",\n                        \"STYLE\": cfg.style,\n                        \"TAG_PREFIX\": cfg.tag_prefix,\n                        \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n                        \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n                        })\n\n    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),\n                       \"__init__.py\")\n    if os.path.exists(ipy):\n        try:\n            with open(ipy, \"r\") as f:\n                old = f.read()\n        except OSError:\n            old = \"\"\n        module = os.path.splitext(os.path.basename(cfg.versionfile_source))[0]\n        snippet = INIT_PY_SNIPPET.format(module)\n        if OLD_SNIPPET in old:\n            print(\" replacing boilerplate in %s\" % ipy)\n            with open(ipy, \"w\") as f:\n                f.write(old.replace(OLD_SNIPPET, snippet))\n        elif snippet not in old:\n            print(\" appending to %s\" % ipy)\n            with open(ipy, \"a\") as f:\n                f.write(snippet)\n        else:\n            print(\" %s unmodified\" % ipy)\n    else:\n        print(\" %s doesn't exist, ok\" % ipy)\n        ipy = None\n\n    # Make VCS-specific changes. For git, this means creating/changing\n    # .gitattributes to mark _version.py for export-subst keyword\n    # substitution.\n    do_vcs_install(cfg.versionfile_source, ipy)\n    return 0\n\n\ndef scan_setup_py():\n    \"\"\"Validate the contents of setup.py against Versioneer's expectations.\"\"\"\n    found = set()\n    setters = False\n    errors = 0\n    with open(\"setup.py\", \"r\") as f:\n        for line in f.readlines():\n            if \"import versioneer\" in line:\n                found.add(\"import\")\n            if \"versioneer.get_cmdclass()\" in line:\n                found.add(\"cmdclass\")\n            if \"versioneer.get_version()\" in line:\n                found.add(\"get_version\")\n            if \"versioneer.VCS\" in line:\n                setters = True\n            if \"versioneer.versionfile_source\" in line:\n                setters = True\n    if len(found) != 3:\n        print(\"\")\n        print(\"Your setup.py appears to be missing some important items\")\n        print(\"(but I might be wrong). Please make sure it has something\")\n        print(\"roughly like the following:\")\n        print(\"\")\n        print(\" import versioneer\")\n        print(\" setup( version=versioneer.get_version(),\")\n        print(\"        cmdclass=versioneer.get_cmdclass(),  ...)\")\n        print(\"\")\n        errors += 1\n    if setters:\n        print(\"You should remove lines like 'versioneer.VCS = ' and\")\n        print(\"'versioneer.versionfile_source = ' . This configuration\")\n        print(\"now lives in setup.cfg, and should be removed from setup.py\")\n        print(\"\")\n        errors += 1\n    return errors\n\n\ndef setup_command():\n    \"\"\"Set up Versioneer and exit with appropriate error code.\"\"\"\n    errors = do_setup()\n    errors += scan_setup_py()\n    sys.exit(1 if errors else 0)\n\n\ndef get_metadata():\n    setup_cfg = os.path.join(get_root(), \"setup.cfg\")\n    parser = configparser.RawConfigParser()\n    with open(setup_cfg, \"r\") as f:\n        parser.read_file(f)\n\n    def get(section, parser, name):\n        if parser.has_option(section, name):\n            return parser.get(section, name)\n        return None\n\n    return {\n        \"name\": parser.get(\"metadata\", \"name\"),\n        \"version\": parser.get(\"metadata\", \"version\")\n    }\n\n\ndef package_name():\n    return get_metadata()[\"name\"]\n\n\ndef working_version():\n    return get_metadata()[\"version\"]\n\nif __name__ == \"__main__\":\n    cmd = sys.argv[1]\n    if cmd == \"setup\":\n        setup_command()\n"
        }
      ]
    }
  ]
}