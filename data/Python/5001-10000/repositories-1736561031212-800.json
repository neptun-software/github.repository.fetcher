{
  "metadata": {
    "timestamp": 1736561031212,
    "page": 800,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trustedsec/ptf",
      "stars": 5199,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bashrc",
          "type": "blob",
          "size": 0.5107421875,
          "content": "# ~/.bashrc: executed by bash(1) for non-login shells.\n\nPS1='${debian_chroot:+($debian_chroot)}\\h:\\w\\$ '\numask 022\n\n# You may uncomment the following lines if you want `ls' to be colorized:\nexport LS_OPTIONS='--color=auto'\neval \"`dircolors`\"\nalias ls='ls $LS_OPTIONS'\nalias ll='ls $LS_OPTIONS -l'\nalias l='ls $LS_OPTIONS -lA'\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "*.pyc\nconfig/ptf.config\n\nptf-output.log\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2490234375,
          "content": "FROM debian\nLABEL version=\"1.1\"\nLABEL description=\"Dockerized version of Trustedsec PTF - Penetration Testing Framework\"\nLABEL author=\"Jacobo Avariento Gimeno\"\nCOPY .bashrc /root/.bashrc\nCOPY bootstrap.sh /root/bootstrap.sh\nRUN bash -c /root/bootstrap.sh\n"
        },
        {
          "name": "README.docker.md",
          "type": "blob",
          "size": 0.8203125,
          "content": "# Docker support for PTF\n\nTo be able to use the principle Security-in-a-box and run constantly penetration testing and vulnerability assessment against our applications and infrastructure, I developed a quick hack to be able to run PTF framework inside a Docker container.\n\n\nFirst of all, build and compile all the tools and the image itself (~2 hours).\nInside this folder run the following:\n```\ndocker build --rm -t spinfoo/ptf:1.1 .\n```\n\n\nAfter, you can run PTF anytime with:\n```\ndocker run --rm -it spinfoo/ptf:1.1 /bin/bash -c 'cd /root/ptf && ./ptf'\n```\n\n\n# TODO\n* Run install checks after modules update/install (go through /usr/local/bin and check successful execution)\n* Check automatically for dependencies, improve efficiency\n\n\n# Credits\nDavid Kennedy/Trustedsec PTF project and Jacobo Avariento (spinfoo) for the docker support.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4736328125,
          "content": "\nThe PenTesters Framework (PTF)\n===\n\n#### A TrustedSec Project - Copyright 2022\n\n### Written by: David Kennedy (@HackingDave)\n\nhttps://www.trustedsec.com\n\n### Twitter: @TrustedSec, @HackingDave\n\nThe PenTesters Framework (PTF) is a Python script designed for Debian/Ubuntu/ArchLinux based distributions to create a similar and familiar distribution for Penetration Testing. As pentesters, we've been accustom to the /pentest/ directories or our own toolsets that we want to keep up-to-date all of the time. We have those \"go to\" tools that we use on a regular basis, and using the latest and greatest is important.\n\nPTF attempts to install all of your penetration testing tools (latest and greatest), compile them, build them, and make it so that you can install/update your distribution on any machine. Everything is organized in a fashion that is cohesive to the Penetration Testing Execution Standard (PTES) and eliminates a lot of things that are hardly used. PTF simplifies installation and packaging and creates an entire pentest framework for you. Since this is a framework, you can configure and add as you see fit. We commonly see internally developed repos that you can use as well as part of this framework. It's all up to you.\n\nThe ultimate goal is for community support on this project. We want new tools added to the github repository. Submit your modules. It's super simple to configure and add them and only takes a few minute.\n\n### Installation\n\nPTF requires python-pexpect in order to work appropriately. \n\nRun the following command below:\n\n```\npip install -r requirements.txt\n./ptf\n```\n\n### Instructions:\n\nFirst check out the config/ptf.config file which contains the base location of where to install everything. By default this will install in the /pentest directory. Once you have that configured, move to running PTF by typing `./ptf` (or python ptf).\n\nThis will put you in a Metasploitesque type shell which has a similar look and feel for consistency. Show modules, use `<modules>`, etc. are all accepted commands. First things first, always type help or `?` to see a full list of commands.\n\nFor a video tutorial on how to use PTF, check out our Vimeo page here: https://vimeo.com/137133837\n\n### Update EVERYTHING!\n\nIf you want to install and/or update everything, simply do the following:\n```\n./ptf\nuse modules/install_update_all\nyes\n```\n\nThis will install all of the tools inside of PTF. If they are already installed, this will iterate through and update everything for you automatically.\n\nYou can also individually install each module, then use the  use modules/update_installed which will only update what you've previously installed.\n\nFor example:\n\n```\n./ptf\nuse modules/update_installed\n```\n\nThis will only update previous ones you've installed.\n\nYou can also show options to change information about the modules.\n\nIf you only want to install only for example exploitation tools, you can run:\n\n```\n./ptf\nuse modules/exploitation/install_update_all\n```\n\nThis will only install the exploitation modules. You can do this for any module category.\n\n### Customize your own installed tools\n\nYou can install only the tools you want to by going to the modules/custom_list/list.txt section. Modify the list.txt file and add the tools you only want to install or update.\n\nExample list.txt file:\n\nmodules/exploitation/metasploit\nmodules/post-exploitation/unicorn\n\nThen when in PTF:\n\n```\n./ptf\nuse modules/custom_list/list\nyes\n```\n\nThis allows you to carry your module configuration over and only install the tools that you want and keep them updated.\n\nYou can also simply specify a module without using the category:\n\n```\n./ptf\nuse trevorc2\nyes\n```\n\n### Modules:\n\nFirst, head over to the modules/ directory, inside of there are sub directories based on the Penetration Testing Execution Standard (PTES) phases. Go into those phases and look at the different modules. As soon as you add a new one, for example testing.py, it will automatically be imported next time you launch PTF. There are a few key components when looking at a module that must be completed.\n\nBelow is a sample module\n\n```\nAUTHOR=\"David Kennedy (ReL1K)\"\n\nDESCRIPTION=\"This module will install/update the Browser Exploitation Framework (BeEF)\"\n\nINSTALL_TYPE=\"GIT\"\n\nREPOSITORY_LOCATION=\"https://github.com/beefproject/beef\"\n\nX64_LOCATION=\"https://github.com/something_thats_x64_instead_of_x86\n\nINSTALL_LOCATION=\"beef\"\n\nDEBIAN=\"ruby1.9.3,sqlite3,ruby-sqlite3\"\n\nARCHLINUX = \"arch-module,etc\"\n\nBYPASS_UPDATE=\"NO\"\n\nAFTER_COMMANDS=\"cd {INSTALL_LOCATION},ruby install-beef\"\n\nLAUNCHER=\"beef\"\n\nTOOL_DEPEND=\"modules/exploitation/metasploit\"\n```\n\n### Module Development:\n\nAll of the fields are pretty easy, on the repository locations, you can use GIT, SVN FILE, OR TAGS. Fill in the depends, and where you want the install location to be. PTF will take where the python file is located (for example exploitation) and move it to what you specify in the PTF config (located under config). By default it installs all your tools to `/pentest/PTES_PHASE/TOOL_FOLDER`\n\nNote in modules, you can specify after commands `{INSTALL_LOCATION}`. This will append where you want the install location to go when using after commands.\n\nYou can also specify `{PTF_LOCATION}` which will pull the base path for your PTF installation.\n\nYou also have the ability for repository locations to specify both a 32 bit and 64 bit location. Repository location should always be the x86 download path. To add a 64 bit path for a tool, specify X64_LOCATION and give it a URL. When PTF launches it will automatically detect the architecture and attempt to use the x64 link instead of the x86.\n\nNote that ArchLinux packages are also supported, it needs to be specified for both DEBIAN and ARCH in order for it to be properly installed on either platform in the module\n\nWhen using the TAGS mode, this will allow you to use a github project that utilizes tags to pull the latest version (usually compiled applications) and automatically download. In order to use the TAGS method, take a look at the structure under modules/intelligence-gathering/teamfiltration.py. In this example, there is no need for a repository_location, but you will need to know the project owner, project name/repo, and the filename to download. In the example of TeamFiltration, it is located at: https://github.com/Flangvik/TeamFiltration. The owner would be Flangvik, the project/tool would be TeamFiltration. If you navigate to releases: https://github.com/Flangvik/TeamFiltration/releases/, we can see here that the name of the file we want to download is \"TeamFiltration_Linux\". These are under the OWNER, REPOHOME, and FILENAME. Specifying these, PTF will automatically detect the latest release of the tool and install them.\n\n### GITLAB Support\n\nYou can create your own modules and PTF also supports gitlab access. Instead of specifying git, wget, etc., simply specify gitlab and point to your own internal gitlab tools for modules.\n\n### BYPASS UPDATES:\n\nWhen using traditional git or svn as a main method, what will happen after a module is installed is it will just go and grab the latest version of the tool. With after commands, normally when installing, you may need to run the after commands after each time you update. If you specify bypass updates to YES (`BYPASS_UPDATE=\"YES\"`), each time the tool is run, it will check out the latest version and still run after commands. If this is marked to no, it will only git pull the latest version of the system. For `FILE` options, it is recommended to always use `BYPASS_UPDATE=\"YES\"` so that it will overwrite the files each time.\n\n### After Commands:\n\nAfter commands are commands that you can insert after an installation. This could be switching to a directory and kicking off additional commands to finish the installation. For example in the BEEF scenario, you need to run ruby install-beef afterwards. Below is an example of after commands using the `{INSTALL_LOCATION}` flag.\n```\nAFTER_COMMANDS=\"cp config/dict/rockyou.txt {INSTALL_LOCATION}\"\n```\nFor `AFTER_COMMANDS` that do self install (don't need user interaction).\n\n### Automatic Launchers\n\nThe flag LAUNCHER= in modules is optional. If you add `LAUNCHER=\"setoolkit\"` for example, PTF will automatically create a launcher for the tool under `/usr/local/bin/`. In the setoolkit example, when run - PTF will automatically create a file under `/usr/local/bin/setoolkit` so you can launch SET from anywhere by simply typing setoolkit. All files will still be installed under the appropriate categories, for example `/pentest/exploitation/setoolkit` however an automatic launcher will be created.\n\nYou can have multiple launchers for an application. For example, for Metasploit you may want msfconsole, msfvenom, etc. In order to add multiple launchers, simply put a `,` between them. For example `LAUNCHER=\"msfconsole,msfvenom\"`. This would create launchers for both.\n\n### Automatic Command Line\n\nYou can also just run `./ptf --update-all` and it will automatically update everything for you without having to go into the framework.\n\n### Running Unattended\n\nIf you're running `ptf` in an automatic build, you can use a [heredoc](http://tldp.org/LDP/abs/html/here-docs.html) so you don't have to interactively type the modules you wish to install. Example:\n\n```\n./ptf <<EOF\nuse modules/exploitation/metasploit\nrun\nuse modules/password-recovery/johntheripper\nrun\nEOF\n```\n\n### TOOL DEPENDS\n\nSome tools such as Veil, SET, etc. require tools such as the Metasploit Framework. You can add in the module `TOOL_DEPEND=\"modules/exploitation/metasploit,module/exploitation/set\"` and multiple other tools if there is a tool required to be installed prior to installing the tool. This will force PTF to install the required tool first, then install the module that requires it. Example:\n\n`TOOL_DEPEND=\"modules/exploitation/metasploit\"`\n\nThis will install Metasploit first or ensured its installed first prior to installing the application.\n\n### IGNORE Modules or Categories\n\nThe `IGNORE_THESE_MODULES=` config option can be found under config/ptf.config in the PTF root directory. This will ignore modules and not install them - everything is comma separated and based on name - example: `modules/exploitation/metasploit,modules/exploitation/set` or entire module categories, like `/modules/code-audit/*,/modules/reporting/*`\n\n### IGNORE Modules from Update/Install All\n\nThe `IGNORE_UPDATE_ALL_MODULES=` config option can be found under config/ptf.config in the PTF root directory. This will ignore modules only when doing install_update_all which are used when you want to install all tools. This could be for large applications that take substantial time, ones that require user interaction, or open up a number of ports and protocols on the system. This works very similar in the IGNORE_THESE_MODULES, except that they can be manually installed and updated through the modules/update_installed. These are comma deliminated, so for example modules/exploitation/tool1,modules/exploitation/tool2, when running install_update_all, this would not install the tools unless you went to use modules/exploitation/tool1 and installed via that method. \n\n### INCLUDE_ONLY_THESE_MODULES\n\nThe `INCLUDE_ONLY_THESE_MODULES` in the config option under config/ptf.config will only install and include specific modules that are specified here. This is good for baselining the tools that you want and install only them.\n\n\n### LAUNCH PTF WITH NO BANNER\n\nYou can launch PTF with no banner message if you want. Simply specify:\n\n```\n./ptf --no-banner\n\nor \n\n./ptf -nb\n```\n\n### CHECK FOR INSTALLED PROGRAMS THROUGH PTF\n\nYou can check to see what applications you've already installed through PTF by typing the following:\n\n```\nptf>show installed\n```\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 1.2958984375,
          "content": "#!/bin/bash\n#\n# Commands run by Docker when building the docker container with PTF framework\n#\n# Author: Jacobo Avariento Gimeno\n#\n\nexport DEBIAN_FRONTEND=noninteractive\necho \"docker-ptf\" > /etc/hostname\napt-get update\napt-get install -y --no-install-recommends apt-utils\napt-get upgrade -y\necho \"deb http://downloads.metasploit.com/data/releases/metasploit-framework/apt lucid main\" >/etc/apt/sources.list.d/metasploit-framework.list\napt -y install gnupg gnupg2 gnupg1 --fix-missing \napt-get install -y wget python3 git sudo locate vim python3-pip tcpdump net-tools flex #libgmp3-dev:i386\n# apt download metasploit-framework --print-uris 'http://downloads.metasploit.com/data/releases/metasploit-framework/apt/pool/main/m/metasploit-framework/metasploit-framework_4.14.18+20170516093030~1rapid7-1_amd64.deb' metasploit-framework_4.14.18+20170516093030~1rapid7-1_amd64.deb 173065244 SHA256:adbd4692555b2ca9a1b4526bf8d649ccb634244c5104f6bdeeb82e4de6bc62a2 \ncd /tmp\nwget http://http.kali.org/pool/main/u/unicornscan/unicornscan_0.4.7-1kali2_amd64.deb\ndpkg -i ./unicornscan_0.4.7-1kali2_amd64.deb\ncd /root\ngit clone https://github.com/trustedsec/ptf.git\ncd ptf\npip3 install -r requirements.txt\necho -en \"use modules/install_update_all\\nyes\\n\" | python3 ptf\necho\necho\necho \"** DONE **\"\necho \"PTF is built and ready to use.\"\nexit 0\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "ptf",
          "type": "blob",
          "size": 4.462890625,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nThe PenTesters Framework (PTF) - Automatic Penetration Testing Platform Creation\nWritten by: David Kennedy (ReL1K)\nTwitter: @TrustedSec, @HackingDave\nWebsite: https://www.trustedsec.com\n\"\"\"\n\nimport sys\nimport subprocess\nimport os\nimport socket\n\n# Import PTF internal logging module\nfrom src.ptflogger import info, error, debug, log\n\n# temp fix for python3 conversion - will remove as everyone moves over to python3\nsubprocess.Popen(\"find . -iname *.pyc -delete\", shell=True).wait()\n\n# force https for git\ndef git_https_force():\n    subprocess.Popen('git config --global url.\"https://github.com/\".insteadOf git@github.com:;git config --global url.\"https://\".insteadOf git://', shell=True).wait()\n\ndef create_launcher():\n    \"\"\"\n    Create a launcher to execute PTF from the commandline.\n    \"\"\"\n    info(\"Creating automatic launcher\")\n    cwd = os.getcwd()\n    filewrite = open(\"/usr/local/bin/ptf\", \"w\")\n    filewrite.write('#!/bin/sh\\ncd %s\\nchmod +x ptf\\n./ptf \"$@\"' % (cwd))\n    filewrite.close()\n    subprocess.Popen(\"chmod +x /usr/local/bin/ptf\", shell=True).wait()\n    info(\"Automatic launcher created\")\n\ndef check_internet():\n    \"\"\"\n    Check for internet access.\n    \"\"\"\n    try:\n        print_status(\"You can always type ./ptf --no-network-connection to skip the Internet check..\")\n        print_status(\"Checking for an Internet connection...\")\n        rhost = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        rhost.connect(('google.com', 0))\n        rhost.settimeout(2)\n        return 1\n\n    except Exception:\n        return 0\n\n\nif __name__ == \"__main__\":\n    # only imports we actually need\n    from src.core import print_warning, print_status, print_error\n\n    # some OS doesn't have /usr/local/bin create them if not\n    if not os.path.isdir(\"/usr/local/bin/\"):\n        os.makedirs(\"/usr/local/bin/\")\n\n    if os.geteuid() != 0:\n        error(\"PTF was not run with higher privileges (root)\")\n        print(\"\\nThe Pentesters Framework (PTF) - by David Kennedy (ReL1K)\")\n        print(\"\\nThis needs to be run as root. Please sudo it up! Exiting...\")\n        exit()\n\n    try:\n        # Bypass network check with argument\n        if \"--no-network-connection\" not in sys.argv[1:]:\n            # check internet connection\n            if check_internet() == 0:\n                error(\"No internet detected...exiting PTF\")\n                print_warning(\"Unable to detect Internet connection. Needed for PTF.\")\n                print_warning(\"We will now exit PTF. Launch again when you got a connection.\")\n                print_warning(\"You can also run ptf with the --no-network-connection argument to bypass the network check.\")\n                sys.exit()\n\n            # force https\n            git_https_force()\n\n            # try to update ourself first\n            info(\"Grabbing latest updates from github repository trustedsec/ptf\")\n            print_status(\"Trying to update myself first.. Then starting framework.\")\n            subprocess.Popen(\"git pull\", shell=True).wait()\n\n            # create automatic launcher\n            create_launcher()\n\n        # pull in the framework\n        import src.framework\n\n        info(\"User commands passed through arguments:\")\n        info(sys.argv)\n        # if we want to skip going into module\n        if  \"--update-all\" in sys.argv[1:]:\n            if \"-y\" in sys.argv[1:]:\n                src.framework.handle_prompt(\"use modules/install_update_all\", True)\n            else:\n                src.framework.handle_prompt(\"use modules/install_update_all\")\n        elif \"--update-installed\" in sys.argv[1:]:\n            src.framework.handle_prompt(\"use modules/update_installed\")\n        # Show the available options and then run the prompt\n        elif \"--help\" in sys.argv:\n            src.core.show_help_menu()\n            print(\"\\n\")\n            src.framework.mainloop()\n        else:\n            # or just ask what you want\n            src.framework.mainloop()\n\n    except KeyboardInterrupt:\n        print(\"\\n\")\n        info(\"User aborted operation ctrl+c\")\n        print_status(\"Exiting PTF - the easy pentest platform creation framework.\")\n        exit()\n        sys.exit()\n\n    except Exception as e:\n        error(\"Jumped to exception in 'ptf' script\")\n        error(e)\n        print_error(\"[!] DANGER WILL ROBINSON. DANGER WILL ROBINSON. Error has occurred.\")\n        print_error(\"[!] It's not possible its due to my coding skillz, it must be you? :-)\")\n        print_error((\"[!] Printing that error. Get that error. You get it: [\" + str(e) + \"]\"))\n"
        },
        {
          "name": "readme",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0146484375,
          "content": "pexpect\nlogger\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}