{
  "metadata": {
    "timestamp": 1736560434609,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "benoitc/gunicorn",
      "stars": 9933,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2724609375,
          "content": "*.egg\n*.egg-info\n*.pyc\n*.so\n.coverage\n.pytest_cache\n.tox\n__pycache__\nbuild\ndocs/_build\ncoverage.xml\ndist\nexamples/frameworks/django/testing/testdb.sql\nexamples/frameworks/pylonstest/PasteScript*\nexamples/frameworks/pylonstest/pylonstest.egg-info/\nMANIFEST\nnohup.out\nsetuptools-*\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 1.1103515625,
          "content": "[MASTER]\n\nignore=\n    build,\n    docs,\n    examples,\n    scripts,\n    _compat.py,\n    _gaiohttp.py,\n\n[MESSAGES CONTROL]\n\ndisable=\n    attribute-defined-outside-init,\n    bad-mcs-classmethod-argument,\n    bare-except,\n    broad-except,\n    duplicate-bases,\n    duplicate-code,\n    eval-used,\n    fixme,\n    import-error,\n    import-outside-toplevel,\n    import-self,\n    inconsistent-return-statements,\n    invalid-name,\n    missing-docstring,\n    no-else-return,\n    no-member,\n    no-self-argument,\n    no-staticmethod-decorator,\n    not-callable,\n    protected-access,\n    raise-missing-from,\n    redefined-outer-name,\n    too-few-public-methods,\n    too-many-arguments,\n    too-many-branches,\n    too-many-instance-attributes,\n    too-many-lines,\n    too-many-locals,\n    too-many-nested-blocks,\n    too-many-public-methods,\n    too-many-statements,\n    wrong-import-position,\n    wrong-import-order,\n    ungrouped-imports,\n    unused-argument,\n    useless-object-inheritance,\n    useless-import-alias,\n    comparison-with-callable,\n    try-except-raise,\n    consider-using-with,\n    consider-using-f-string,\n    unspecified-encoding\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.5703125,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# We recommend specifying your dependencies to enable reproducible builds:\n# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\n# python:\n#   install:\n#   - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.025390625,
          "content": "# Contributing to Gunicorn\n\nWant to hack on Gunicorn? Awesome! Here are instructions to get you\nstarted. They are probably not perfect, please let us know if anything\nfeels wrong or incomplete.\n\n## Contribution guidelines\n\n### Pull requests are always welcome\n\nWe are always thrilled to receive pull requests, and do our best to\nprocess them as fast as possible. Not sure if that typo is worth a pull\nrequest? Do it! We will appreciate it.\n\nIf your pull request is not accepted on the first try, don't be\ndiscouraged! If there's a problem with the implementation, hopefully you\nreceived feedback on what to improve.\n\nWe're trying very hard to keep Gunicorn lean and focused. We don't want it\nto do everything for everybody. This means that we might decide against\nincorporating a new feature. However, there might be a way to implement\nthat feature *on top of* Gunicorn.\n\n### Discuss your design on the mailing list\n\nWe recommend discussing your plans [on the mailing\nlist](http://gunicorn.org/#community) before starting to code -\nespecially for more ambitious contributions.  This gives other\ncontributors a chance to point you in the right direction, give feedback\non your design, and maybe point out if someone else is working on the\nsame thing.\n\n### Create issues...\n\nAny significant improvement should be documented as [a github\nissue](https://github.com/benoitc/gunicorn/issues) before anybody starts\nworking on it.\n\n### ...but check for existing issues first!\n\nPlease take a moment to check that an issue doesn't already exist\ndocumenting your bug report or improvement proposal. If it does, it\nnever hurts to add a quick \"+1\" or \"I have this problem too\". This will\nhelp prioritize the most common problems and requests.\n\n\n### Conventions\n\nDon't comment on closed issues or PRs, instead open a new issue and link it to\nthe old one.\n\nFork the repo and make changes on your fork in a feature branch:\n\n- If it's a bugfix branch, name it XXX-something where XXX is the number\n  of the issue\n- If it's a feature branch, create an enhancement issue to announce your\n  intentions, and name it XXX-something where XXX is the number of the\nissue.\n\nSubmit unit tests for your changes. Python has a great test framework built\nin; use it! Take a look at existing tests for inspiration. Run the full\ntest suite on your branch before submitting a pull request.\n\nMake sure you include relevant updates or additions to documentation\nwhen creating or modifying features.\n\nIf you are adding a new configuration option or updating an existing one,\nplease do it in `gunicorn/config.py`, then run `make -C docs html` to update\n`docs/source/settings.rst`.\n\nWrite clean code.\n\nPull requests descriptions should be as clear as possible and include a\nreference to all the issues that they address.\n\nCode review comments may be added to your pull request. Discuss, then\nmake the suggested modifications and push additional commits to your\nfeature branch. Be sure to post a comment after pushing. The new commits\nwill show up in the pull request automatically, but the reviewers will\nnot be notified unless you comment.\n\nBefore the pull request is merged, make sure that you squash your\ncommits into logical units of work using `git rebase -i` and `git push\n-f`. After every commit the test suite should be passing. Include\ndocumentation changes in the same commit so that a revert would remove\nall traces of the feature or fix.\n\nCommits that fix or close an issue should include a reference like\n`Closes #XXX` or `Fixes #XXX`, which will automatically close the issue\nwhen merged.\n\nAdd your name to the THANKS file, but make sure the list is sorted and\nyour name and email address match your git configuration. The THANKS\nfile is regenerated occasionally from the git commit history, so a\nmismatch may result in your changes being overwritten.\n\n\n## Decision process\n\n### How are decisions made?\n\nShort answer: with pull requests to the gunicorn repository.\n\nGunicorn is an open-source project under the MIT License with an open\ndesign philosophy. This means that the repository is the source of truth\nfor EVERY aspect of the project, including its philosophy, design,\nroadmap and APIs. *If it's part of the project, it's in the repo. It's\nin the repo, it's part of the project.*\n\nAs a result, all decisions can be expressed as changes to the\nrepository. An implementation change is a change to the source code. An\nAPI change is a change to the API specification. A philosophy change is\na change to the relevant documentation. And so on.\n\nAll decisions affecting gunicorn, big and small, follow the same 3 steps:\n\n* Step 1: Open a pull request. Anyone can do this.\n\n* Step 2: Discuss the pull request. Anyone can do this.\n\n* Step 3: Accept or refuse a pull request. The relevant maintainer does this (see below \"Who decides what?\")\n\n\n### Who decides what?\n\nSo all decisions are pull requests, and the relevant maintainer makes\nthe decision by accepting or refusing the pull request.  But how do we\nidentify the relevant maintainer for a given pull request?\n\nGunicorn follows the timeless, highly efficient and totally unfair system\nknown as [Benevolent dictator for\nlife](http://en.wikipedia.org/wiki/Benevolent_Dictator_for_Life), with\nBenoit Chesneau (aka benoitc), in the role of BDFL.  This means that all\ndecisions are made by default by me. Since making every decision myself\nwould be highly unscalable, in practice decisions are spread across\nmultiple maintainers.\n\nThe relevant maintainer for a pull request is assigned in 3 steps:\n\n* Step 1: Determine the subdirectory affected by the pull request. This might be src/registry, docs/source/api, or any other part of the repo.\n\n* Step 2: Find the MAINTAINERS file which affects this directory. If the directory itself does not have a MAINTAINERS file, work your way up the repo hierarchy until you find one.\n\n* Step 3: The first maintainer listed is the primary maintainer who is assigned the Pull Request. The primary maintainer can reassign a Pull Request to other listed maintainers.\n\n\n### I'm a maintainer, should I make pull requests too?\n\nPrimary maintainers are not required to create pull requests when\nchanging their own subdirectory, but secondary maintainers are.\n\n### Who assigns maintainers?\n\nbenoitc.\n\n### How can I become a maintainer?\n\n* Step 1: learn the component inside out\n* Step 2: make yourself useful by contributing code, bugfixes, support etc.\n* Step 3: volunteer on the irc channel (#gunicorn@freenode)\n\nDon't forget: being a maintainer is a time investment. Make sure you\nwill have time to make yourself available.  You don't have to be a\nmaintainer to make a difference on the project!\n\n### What are a maintainer's responsibility?\n\nIt is every maintainer's responsibility to:\n\n* 1) Expose a clear roadmap for improving their component.\n* 2) Deliver prompt feedback and decisions on pull requests.\n* 3) Be available to anyone with questions, bug reports, criticism etc. on their component. This includes irc, github requests and the mailing list.\n* 4) Make sure their component respects the philosophy, design and roadmap of the project.\n\n### How is this process changed?\n\nJust like everything else: by making a pull request :)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.109375,
          "content": "2009-2024 (c) Benoît Chesneau <benoitc@gunicorn.org>\n2009-2015 (c) Paul J. Davis <paul.joseph.davis@gmail.com>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.623046875,
          "content": "Core maintainers\n================\n\nBenoit Chesneau <benoitc@gunicorn.org>\nKonstantin Kapustin <sirkonst@gmail.com>\nRandall Leeds <randall.leeds@gmail.com>\nBerker Peksağ <berker.peksag@gmail.com>\nJason Madden <jason@nextthought.com>\nBrett Randall <javabrett@gmail.com>\n\nAlumni\n======\n\nThis list contains maintainers that are no longer active on the project.\nIt is thanks to these people that the project has become what it is today.\nThank you!\n\n\nPaul J. Davis <paul.joseph.davis@gmail.com>\nKenneth Reitz <me@kennethreitz.com>\nNikolay Kim <fafhrd91@gmail.com>\nAndrew Svetlov <andrew.svetlov@gmail.com>\nStéphane Wirtel <stephane@wirtel.be>"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4111328125,
          "content": "include .gitignore\ninclude LICENSE\ninclude NOTICE\ninclude README.rst\ninclude THANKS\ninclude requirements_dev.txt\ninclude requirements_test.txt\ninclude tox.ini\ninclude .pylintrc\nrecursive-include tests *\nrecursive-include examples *\nrecursive-include docs *\nrecursive-include examples/frameworks *\nrecursive-exclude * __pycache__\nrecursive-exclude docs/build *\nrecursive-exclude docs/_build *\nrecursive-exclude * *.py[co]\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3642578125,
          "content": "build:\n\tvirtualenv venv\n\tvenv/bin/pip install -e .\n\tvenv/bin/pip install -r requirements_dev.txt\n\ntest:\n\tvenv/bin/python setup.py test\n\ncoverage:\n\tvenv/bin/python setup.py test --cov\n\nclean:\n\t@rm -rf .Python MANIFEST build dist venv* *.egg-info *.egg\n\t@find . -type f -name \"*.py[co]\" -delete\n\t@find . -type d -name \"__pycache__\" -delete\n\n.PHONY: build clean coverage test\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 3.6884765625,
          "content": "Gunicorn\n\n2009-2024 (c) Benoît Chesneau <benoitc@gunicorn.org>\n2009-2015 (c) Paul J. Davis <paul.joseph.davis@gmail.com>\n\nGunicorn is released under the MIT license. See the LICENSE\nfile for the complete license.\n\ngunicorn.logging_config\n-----------------------\nCopyright 2001-2005 by Vinay Sajip. All Rights Reserved.\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Vinay Sajip\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\n\nVINAY SAJIP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\nVINAY SAJIP BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR\nANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\nIN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\ngunicorn.debug\n--------------\n\nBased on eventlet.debug module under MIT license:\n\nUnless otherwise noted, the files in Eventlet are under the following MIT license:\n\nCopyright (c) 2005-2006, Bob Ippolito\nCopyright (c) 2007-2010, Linden Research, Inc.\nCopyright (c) 2008-2010, Eventlet Contributors (see Eventlet AUTHORS)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\ngunicorn.reloader\n-----------------\n\nBased on greins.reloader module under MIT license:\n\n2010 (c) Meebo, Inc.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\nutil/unlink.py\n--------------\n\nbackport from python3 Lib/test/support.py\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.94140625,
          "content": "Gunicorn\n--------\n\n.. image:: https://img.shields.io/pypi/v/gunicorn.svg?style=flat\n    :alt: PyPI version\n    :target: https://pypi.python.org/pypi/gunicorn\n\n.. image:: https://img.shields.io/pypi/pyversions/gunicorn.svg\n    :alt: Supported Python versions\n    :target: https://pypi.python.org/pypi/gunicorn\n\n.. image:: https://github.com/benoitc/gunicorn/actions/workflows/tox.yml/badge.svg\n    :alt: Build Status\n    :target: https://github.com/benoitc/gunicorn/actions/workflows/tox.yml\n\n.. image:: https://github.com/benoitc/gunicorn/actions/workflows/lint.yml/badge.svg\n    :alt: Lint Status\n    :target: https://github.com/benoitc/gunicorn/actions/workflows/lint.yml\n\nGunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX. It's a pre-fork\nworker model ported from Ruby's Unicorn_ project. The Gunicorn server is broadly\ncompatible with various web frameworks, simply implemented, light on server\nresource usage, and fairly speedy.\n\nFeel free to join us in `#gunicorn`_ on `Libera.chat`_.\n\nDocumentation\n-------------\n\nThe documentation is hosted at https://docs.gunicorn.org.\n\nInstallation\n------------\n\nGunicorn requires **Python 3.x >= 3.7**.\n\nInstall from PyPI::\n\n    $ pip install gunicorn\n\n\nUsage\n-----\n\nBasic usage::\n\n    $ gunicorn [OPTIONS] APP_MODULE\n\nWhere ``APP_MODULE`` is of the pattern ``$(MODULE_NAME):$(VARIABLE_NAME)``. The\nmodule name can be a full dotted path. The variable name refers to a WSGI\ncallable that should be found in the specified module.\n\nExample with test app::\n\n    $ cd examples\n    $ gunicorn --workers=2 test:app\n\n\nContributing\n------------\n\nSee `our complete contributor's guide <CONTRIBUTING.md>`_ for more details.\n\n\nLicense\n-------\n\nGunicorn is released under the MIT License. See the LICENSE_ file for more\ndetails.\n\n.. _Unicorn: https://bogomips.org/unicorn/\n.. _`#gunicorn`: https://web.libera.chat/?channels=#gunicorn\n.. _`Libera.chat`: https://libera.chat/\n.. _LICENSE: https://github.com/benoitc/gunicorn/blob/master/LICENSE\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.09765625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\n**Please note that public Github issues are open for everyone to see!**\n\nIf you believe you are found a problem in Gunicorn software, examples or documentation, we encourage you to send your\n report privately via [email](mailto:security@gunicorn.org?subject=Security%20issue%20in%20Gunicorn), or via Github\n using the *Report a vulnerability* button in the [Security](https://github.com/benoitc/gunicorn/security) section.\n\n## Supported Releases\n\nAt this time, **only the latest release** receives any security attention whatsoever.\n\nPlease target reports against :white_check_mark: or current master. Please understand that :x: will\n not receive further security attention.\n\n| Version | Status          |\n| ------- | ------------------ |\n| 23.0.0  | :white_check_mark: |\n| 22.0.0  | :x: |\n| 21.2.0  | :x: |\n| 20.0.0  | :x: |\n| < 20.0  | :x: |\n\n## Python Versions\n\nGunicorn runs on Python 3.7+, we *highly recommend* the latest release of a \n[supported series](https://devguide.python.org/versions/) and will not prioritize issues exclusively \naffecting in EoL environments.\n"
        },
        {
          "name": "THANKS",
          "type": "blob",
          "size": 6.8056640625,
          "content": "Gunicorn THANKS\n===============\n\nA number of people have contributed to Gunicorn by reporting problems,\nsuggesting improvements or submitting changes. Some of these people are:\n\n414nch4n <chanfung032@gmail.com>\nAaron Kavlie <akavlie@gmail.com>\naartur <asiekielski@soldevelo.com>\nAdnane Belmadiaf <adnane002@gmail.com>\nAdrien CLERC <adrien@antipoul.fr>\nAlasdair Nicol <alasdair@thenicols.net>\nAlex Conrad <alexandre.conrad@gmail.com>\nAlex Gaynor <alex.gaynor@gmail.com>\nAlex Robbins <alexander.j.robbins@gmail.com>\nAlexandre Zani <alexandre.zani@gmail.com>\nAlexis Le-Quoc <alq@datadoghq.com>\nAnand Chitipothu <anandology@gmail.com>\nAndreas Stührk <andy-python@hammerhartes.de>\nAndrew Burdo <zeezooz@gmail.com>\nAndrew Svetlov <andrew.svetlov@gmail.com>\nAnil V <avaitla16@gmail.com>\nAntoine Girard <antoine.girard.dev@gmail.com>\nAnton Vlasenko <antares.spica@gmail.com>\nArtur Kruchinin <arturkruchinin@gmail.com>\nBartosz Oler <bartosz@bzimage.us>\nBen Cochran <bcochran@gmail.com>\nBen Oswald <ben.oswald@root-space.de>\nBenjamin Gilbert <bgilbert@backtick.net>\nBenny Mei <meibenny@gmail.com>\nBenoit Chesneau <bchesneau@gmail.com>\nBerker Peksag <berker.peksag@gmail.com>\nbninja <andrew@poundpay.com>\nBob Hagemann <bob+code@twilio.com>\nBobby Beckmann <bobby@macs-MacBook-Pro.local>\nBrett Randall <javabrett@gmail.com>\nBrian Rosner <brosner@gmail.com>\nBruno Bigras <bigras.bruno@gmail.com>\nCaleb Brown <git@calebbrown.id.au>\nChris Adams <chris@improbable.org>\nChris Forbes <chrisf@ijw.co.nz>\nChris Lamb <lamby@debian.org>\nChris Streeter <chris@chrisstreeter.com>\nChristian Clauss <cclauss@me.com>\nChristoph Heer <Christoph.Heer@gmail.com>\nChristos Stavrakakis <cstavr@grnet.gr>\nCMGS <ilskdw@mspil.edu.cn>\nCurt Micol <asenchi@asenchi.com>\nDan Callaghan <dcallagh@redhat.com>\nDan Sully <daniel-github@electricrain.com>\nDaniel Quinn <code@danielquinn.org>\nDariusz Suchojad <dsuch-github@m.zato.io>\nDavid Black <github@dhb.is>\nDavid Vincelli <david@freshbooks.com>\nDavid Wolever <david@wolever.net>\nDenis Bilenko <denis.bilenko@gmail.com>\nDiego Oliveira <contact@diegoholiveira.com>\nDima Barsky <github@kappa.ac93.org>\nDjoume Salvetti <djoume@freshbooks.com>\nDmitry Medvinsky <me@dmedvinsky.name>\nDustin Ingram <di@users.noreply.github.com>\nEd Morley <edmorley@users.noreply.github.com>\nEric Florenzano <floguy@gmail.com>\nEric Shull <eric@elevenbasetwo.com>\nEugene Obukhov <irvind25@gmail.com>\nEvan Mezeske <evan@meebo-inc.com>\nFlorian Apolloner <florian@apolloner.eu>\nGaurav Kumar <gauravkumar37@gmail.com>\nGeorge Kollias <georgioskollias@gmail.com>\nGeorge Notaras <gnot@g-loaded.eu>\nGerman Larrain <germanlarrainm@gmail.com>\nGraham Dumpleton <Graham.Dumpleton@gmail.com>\nGraham Dumpleton <graham@newrelic.com>\nGreg McGuire <greg-github@greganem.com>\nGreg Taylor <gtaylor@duointeractive.com>\nHasan Ramezani <hasan.r67@gmail.com>\nHebert J <hebert@mail.ru>\nHobson Lane <shopper@totalgood.com>\nHugo van Kemenade <hugovk@users.noreply.github.com>\nIgor Petrov <igor.s.petrov@gmail.com>\nINADA Naoki <methane@users.noreply.github.com>\nJakub Paweł Głazik <zytek@nuxi.pl>\nJan-Philip Gehrcke <jgehrcke@googlemail.com>\nJannis Leidel <jannis@leidel.info>\nJason Madden <jason@nextthought.com>\njean-philippe serafin <serafinjp@gmail.com>\nJeremy Volkman <jeremy@jvolkman.com>\nJeryn Mathew <jerynmathew@gmail.com>\nJet Sun <jet.joins.sun@gmail.com>\nJim Garrison <jim@garrison.cc>\nJohan Bergström <bugs@bergstroem.nu>\nJohn Hensley <john@fairviewcomputing.com>\nJonas Haag <jonas@lophus.org>\nJonas Nockert <jonasnockert@gmail.com>\nJorge Niedbalski <jorge@nimbic.com>\nJorge Niedbalski R <niedbalski@gmail.com>\nJustin Quick <justquick@gmail.com>\nkeakon <keakon@gmail.com>\nKeegan Carruthers-Smith <keegan.csmith@gmail.com>\nKenneth Reitz <me@kennethreitz.org>\nKevin Gessner <kevin@kevingessner.com>\nKevin Littlejohn <kevin@littlejohn.id.au>\nKevin Luikens <kluikens@gmail.com>\nKirill Zaborsky <qrilka@gmail.com>\nKonstantin Kapustin <sirkonst@gmail.com>\nkracekumar <kracethekingmaker@gmail.com>\nKristian Glass <git@doismellburning.co.uk>\nKristian Øllegaard <kristian.ollegaard@divio.ch>\nKrystian <chrisjozwik@outlook.com>\nKrzysztof Urbaniak <urban@fail.pl>\nKyle Kelley <rgbkrk@gmail.com>\nKyle Mulka <repalviglator@yahoo.com>\nLars Hansson <romabysen@gmail.com>\nLeonardo Santagada <santagada@gmail.com>\nLevi Gross <levi@levigross.com>\nlicunlong <shenxiaogll@163.com>\nŁukasz Kucharski <lkucharski@leon.pl>\nMahmoud Hashemi <mahmoudrhashemi@gmail.com>\nMalthe Borch <mborch@gmail.com>\nMarc Abramowitz <marc@marc-abramowitz.com>\nMarc Abramowitz <msabramo@gmail.com>\nMark Adams <mark@markadams.me>\nMatt Behrens <askedrelic@gmail.com>\nMatt Billenstein <mattb@flingo.tv>\nMatt Good <matt@matt-good.net>\nMatt Robenolt <m@robenolt.com>\nMaxim Kamenkov <mkamenkov@gmail.com>\nMazdak Rezvani <mazdak@mac.com>\nMichael Schurter <m@schmichael.com>\nMieszko <mieszko.chowaniec@gmail.com>\nMike Tigas <mike@tig.as>\nMoriyoshi Koizumi <mozo@mozo.jp>\nmpaolini <markopaolini@gmail.com>\nNeil Chintomby <nchintomby@gmail.com>\nNeil Williams <neil@reddit.com>\nNick Pillitteri <nick@tshlabs.org>\nNik Nyby <nnyby@columbia.edu>\nNikolay Kim <fafhrd91@gmail.com>\nOliver Bristow <evilumbrella+github@gmail.com>\nOliver Tonnhofer <olt@bogosoft.com>\nOmer Katz <omer.drow@gmail.com>\nPA Parent <paparent@paparent.me>\nPaul Davis <davisp@neb.com>\nPaul J. Davis <paul.joseph.davis@gmail.com>\nPaul Smith <paulsmith@pobox.com>\nPhil Schanely <phil@daylife.com>\nPhilip Cristiano <philipcristiano@gmail.com>\nPhilipp Saveliev <fsfeel@gmail.com>\nPrateek Singh Paudel <pratykschingh@gmail.com>\npy <py@douban.com>\nQiangning Hong <hongqn@douban.com>\nRandall Leeds <randall.leeds@gmail.com>\nRandall Leeds <randall@bleeds.info>\nRandall Leeds <randall@meebo-inc.com>\nRaphaël Slinckx <rslinckx@gmail.com>\nRhys Powell <rhys@rhyspowell.com>\nRik <rvachterberg@gmail.com>\nRonan Amicel <ronan.amicel@gmail.com>\nRyan Peck <ryan@rypeck.com>\nSaeed Gharedaghi <saeed.ghx68@gmail.com>\nSamuel Matos <samypr100@users.noreply.github.com>\nSergey Rublev <narma.nsk@gmail.com>\nShane Reustle <me@shanereustle.com>\nshouse-cars <shouse@cars.com>\nsib <andrew.sibley@gmail.com>\nSimon Lundmark <simon.lundmark@gmail.com>\nStephane Wirtel <stephane@wirtel.be>\nStephen DiCato <Locker537@gmail.com>\nStephen Holsapple <sholsapp@gmail.com>\nSteven Cummings <estebistec@gmail.com>\nSébastien Fievet <zyegfryed@gmail.com>\nTal Einat <532281+taleinat@users.noreply.github.com>\nTalha Malik <talham7391@hotmail.com>\nTedWantsMore <TedWantsMore@gmx.com>\nTeko012 <112829523+Teko012@users.noreply.github.com>\nThomas Grainger <tagrain@gmail.com>\nThomas Steinacher <tom@eggdrop.ch>\nTravis Cline <travis.cline@gmail.com>\nTravis Swicegood <development@domain51.com>\nTrey Long <trey@ktrl.com>\nW. Trevor King <wking@tremily.us>\nWojtek <wojtek@monodev.com>\nWolfgang Schnerring <wosc@wosc.de>\nWoLpH <Rick@Fawo.nl>\nwong2 <wonderfuly@gmail.com>\nWooParadog <guohaochuan@gmail.com>\nXie Shi <xieshi@douban.com>\nYue Du <ifduyue@gmail.com>\nzakdances <zakdances@gmail.com>\nEmile Fugulin <emilefugulin@hotmail.com>\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.4970703125,
          "content": "version: '{branch}.{build}'\nenvironment:\n  matrix:\n    - TOXENV: lint\n      PYTHON: \"C:\\\\Python38-x64\"\n    - TOXENV: docs-lint\n      PYTHON: \"C:\\\\Python38-x64\"\n    - TOXENV: pycodestyle\n      PYTHON: \"C:\\\\Python38-x64\"\n    # Windows cannot even import the module when they unconditionally import, see below.\n    #- TOXENV: run-module\n    #  PYTHON: \"C:\\\\Python38-x64\"\n    #- TOXENV: run-entrypoint\n    #  PYTHON: \"C:\\\\Python38-x64\"\n    # Windows is not ready for testing!!!\n    # Python's fcntl, grp, pwd, os.geteuid(), and socket.AF_UNIX are all Unix-only.\n    #- TOXENV: py35\n    #  PYTHON: \"C:\\\\Python35-x64\"\n    #- TOXENV: py36\n    #  PYTHON: \"C:\\\\Python36-x64\"\n    #- TOXENV: py37\n    #  PYTHON: \"C:\\\\Python37-x64\"\n    #- TOXENV: py38\n    #  PYTHON: \"C:\\\\Python38-x64\"\n    #- TOXENV: py39\n    #  PYTHON: \"C:\\\\Python39-x64\"\n    #- TOXENV: py310\n    #  PYTHON: \"C:\\\\Python310-x64\"\n    #- TOXENV: py311\n    #  PYTHON: \"C:\\\\Python311-x64\"\n    #- TOXENV: py312\n    #  PYTHON: \"C:\\\\Python312-x64\"\nmatrix:\n  allow_failures:\n    - TOXENV: py35\n    - TOXENV: py36\n    - TOXENV: py37\n    - TOXENV: py38\n    - TOXENV: py39\ninit:\n  - SET \"PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\ninstall:\n  - pip install tox\nbuild: false\ntest_script:\n  - tox\ncache:\n  # Not including the .tox directory since it takes longer to download/extract\n  # the cache archive than for tox to clean install from the pip cache.\n  - '%LOCALAPPDATA%\\pip\\Cache -> tox.ini'\nnotifications:\n  - provider: Email\n    on_build_success: false\n    on_build_status_changed: false\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gunicorn",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.78125,
          "content": "[build-system]\nrequires = [\"setuptools>=61.2\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\n# see https://packaging.python.org/en/latest/specifications/pyproject-toml/\nname = \"gunicorn\"\nauthors = [{name = \"Benoit Chesneau\", email = \"benoitc@gunicorn.org\"}]\nlicense = {text = \"MIT\"}\ndescription = \"WSGI HTTP Server for UNIX\"\nreadme = \"README.rst\"\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Other Environment\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: MacOS :: MacOS X\",\n    \"Operating System :: POSIX\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Topic :: Internet\",\n    \"Topic :: Utilities\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Internet :: WWW/HTTP\",\n    \"Topic :: Internet :: WWW/HTTP :: WSGI\",\n    \"Topic :: Internet :: WWW/HTTP :: WSGI :: Server\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n]\nrequires-python = \">=3.7\"\ndependencies = [\n    'importlib_metadata; python_version<\"3.8\"',\n    \"packaging\",\n]\ndynamic = [\"version\"]\n\n[project.urls]\nHomepage = \"https://gunicorn.org\"\nDocumentation = \"https://docs.gunicorn.org\"\n\"Issue tracker\" = \"https://github.com/benoitc/gunicorn/issues\"\n\"Source code\" = \"https://github.com/benoitc/gunicorn\"\nChangelog = \"https://docs.gunicorn.org/en/stable/news.html\"\n\n[project.optional-dependencies]\ngevent = [\"gevent>=1.4.0\"]\neventlet = [\"eventlet>=0.24.1,!=0.36.0\"]\ntornado = [\"tornado>=0.2\"]\ngthread = []\nsetproctitle = [\"setproctitle\"]\ntesting = [\n    \"gevent\",\n    \"eventlet\",\n    \"coverage\",\n    \"pytest\",\n    \"pytest-cov\",\n]\n\n[project.scripts]\n# duplicates \"python -m gunicorn\" handling in __main__.py\ngunicorn = \"gunicorn.app.wsgiapp:run\"\n\n# note the quotes around \"paste.server_runner\" to escape the dot\n[project.entry-points.\"paste.server_runner\"]\nmain = \"gunicorn.app.pasterapp:serve\"\n\n[tool.pytest.ini_options]\n# # can override these: python -m pytest --override-ini=\"addopts=\"\nnorecursedirs = [\"examples\", \"lib\", \"local\", \"src\"]\ntestpaths = [\"tests/\"]\naddopts = \"--assert=plain --cov=gunicorn --cov-report=xml\"\n\n[tool.setuptools]\nzip-safe = false\ninclude-package-data = true\nlicense-files = [\"LICENSE\"]\n\n[tool.setuptools.packages]\nfind = {namespaces = false}\n\n[tool.setuptools.dynamic]\nversion = {attr = \"gunicorn.__version__\"}\n"
        },
        {
          "name": "requirements_dev.txt",
          "type": "blob",
          "size": 0.2080078125,
          "content": "-r requirements_test.txt\n\n# setuptools v68.0 fails hard on invalid pyproject.toml\n# which a developer would want to know\n# otherwise, oldest known-working version is 61.2\nsetuptools>=68.0\n\nsphinx\nsphinx_rtd_theme\n"
        },
        {
          "name": "requirements_test.txt",
          "type": "blob",
          "size": 0.048828125,
          "content": "gevent\neventlet\ncoverage\npytest>=7.2.0\npytest-cov\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.763671875,
          "content": "[tox]\nenvlist =\n  py{37,38,39,310,311,312,py3},\n  lint,\n  docs-lint,\n  pycodestyle,\n  run-entrypoint,\n  run-module,\n\n[testenv]\npackage = editable\ncommands = pytest --cov=gunicorn {posargs}\ndeps =\n  -rrequirements_test.txt\n\n[testenv:run-entrypoint]\npackage = wheel\ndeps =\n# entry point: console script (provided by setuptools from pyproject.toml)\ncommands = python -c 'import subprocess; cmd_out = subprocess.check_output([\"gunicorn\", \"--version\"])[:79].decode(\"utf-8\", errors=\"replace\"); print(cmd_out); assert cmd_out.startswith(\"gunicorn \")'\n\n[testenv:run-module]\npackage = wheel\ndeps =\n# runpy (provided by module.__main__)\ncommands = python -c 'import sys,subprocess; cmd_out = subprocess.check_output([sys.executable, \"-m\", \"gunicorn\", \"--version\"])[:79].decode(\"utf-8\", errors=\"replace\"); print(cmd_out); assert cmd_out.startswith(\"gunicorn \")'\n\n[testenv:lint]\nno_package = true\ncommands =\n  pylint -j0 \\\n    --max-line-length=120 \\\n    gunicorn \\\n    tests/test_arbiter.py \\\n    tests/test_config.py \\\n    tests/test_http.py \\\n    tests/test_invalid_requests.py \\\n    tests/test_logger.py \\\n    tests/test_pidfile.py \\\n    tests/test_sock.py \\\n    tests/test_ssl.py \\\n    tests/test_statsd.py \\\n    tests/test_systemd.py \\\n    tests/test_util.py \\\n    tests/test_valid_requests.py\ndeps =\n  pylint==2.17.4\n\n[testenv:docs-lint]\nno_package = true\nallowlist_externals =\n  rst-lint\n  bash\n  grep\ndeps =\n  restructuredtext_lint\n  pygments\ncommands =\n  rst-lint README.rst docs/README.rst\n  bash -c \"(set -o pipefail; rst-lint --encoding utf-8 docs/source/*.rst | grep -v 'Unknown interpreted text role\\|Unknown directive type'); test $? == 1\"\n\n[testenv:pycodestyle]\nno_package = true\ncommands =\n  pycodestyle gunicorn\ndeps =\n  pycodestyle\n\n[pycodestyle]\nmax-line-length = 120\nignore = E129,W503,W504,W606\n"
        }
      ]
    }
  ]
}