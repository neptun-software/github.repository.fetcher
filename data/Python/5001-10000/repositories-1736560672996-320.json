{
  "metadata": {
    "timestamp": 1736560672996,
    "page": 320,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stanfordnlp/stanza",
      "stars": 7334,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5908203125,
          "content": "# kept from original\n.DS_Store\n*.tmp\n*.pkl\n*.conllu\n*.lem\n*.toklabels\n\n# also data w/o any slash to account for symlinks\ndata\ndata/\nstanza_resources/\nstanza_test/\nsaved_models/\nlogs/\nlog/\n*_test_treebanks\nwandb/\n\nparams/*/*.json\n!params/*/default.json\n\n# emacs backup files\n*~\n# VI backup files?\n*py.swp\n\n# standard github python project gitignore\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# IDE-related\n.vscode/\n\n.idea/vcs.xml\n.idea/inspectionProfiles/profiles_settings.xml\n.idea/workspace.xml\n\n# Jekyll stuff, triggered by running the docs locally\n.jekyll-cache/\n.jekyll-metadata\n_site/\n\n# symlink / directory for data files\nextern_data\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8125,
          "content": "language: python\npython:\n  - 3.6.5\nnotifications:\n  email: false\ninstall:\n  - pip install --quiet .\n  - export CORENLP_HOME=~/corenlp-latest CORENLP_VERSION=stanford-corenlp-latest\n  - export CORENLP_URL=\"http://nlp.stanford.edu/software/${CORENLP_VERSION}.zip\"\n  - wget $CORENLP_URL -O corenlp-latest.zip\n  - unzip corenlp-latest.zip > unzip.log\n  - export CORENLP_UNZIP=`grep creating unzip.log | head -n 1 | cut -d \":\" -f 2`\n  - mv $CORENLP_UNZIP $CORENLP_HOME\n  - mkdir ~/stanza_test\n  - mkdir ~/stanza_test/in\n  - mkdir ~/stanza_test/out\n  - mkdir ~/stanza_test/scripts\n  - cp tests/data/external_server.properties ~/stanza_test/scripts\n  - cp tests/data/example_french.json ~/stanza_test/out\n  - cp tests/data/tiny_emb.* ~/stanza_test/in\n  - export STANZA_TEST_HOME=~/stanza_test\nscript:\n  - python -m pytest -m travis tests/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5673828125,
          "content": "# Contributing to Stanza\n\nWe would love to see contributions to Stanza from the community! Contributions that we welcome include bugfixes and enhancements. If you want to report a bug or suggest a feature but don't intend to fix or implement it by yourself, please create a corresponding issue on [our issues page](https://github.com/stanfordnlp/stanza/issues). If you plan to contribute a bugfix or enhancement, please read the following.\n\n## üõ†Ô∏è Bugfixes\n\nFor bugfixes, please follow these steps:\n\n- Make sure a fix does not already exist, by searching through existing [issues](https://github.com/stanfordnlp/stanza/issues) (including closed ones) and [pull requests](https://github.com/stanfordnlp/stanza/pulls).\n- Confirm the bug with us by creating a bug-report issue. In your issue, you should at least include the platform and environment that you are running with, and a minimal code snippet that will reproduce the bug.\n- Once the bug is confirmed, you can go ahead with implementing the bugfix, and create a pull request **against the `dev` branch**.\n\n## üí° Enhancements\n\nFor enhancements, please follow these steps:\n\n- Make sure a similar enhancement suggestion does not already exist, by searching through existing [issues](https://github.com/stanfordnlp/stanza/issues).\n- Create a feature-request issue and discuss about this enhancement with us. We'll need to make sure this enhancement won't break existing user interface and functionalities.\n- Once the enhancement is confirmed with us, you can go ahead with implementing it, and create a pull request **against the `dev` branch**.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5888671875,
          "content": "Copyright 2019 The Board of Trustees of The Leland Stanford Junior University\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.0703125,
          "content": "<div align=\"center\"><img src=\"https://github.com/stanfordnlp/stanza/raw/dev/images/stanza-logo.png\" height=\"100px\"/></div>\n\n<h2 align=\"center\">Stanza: A Python NLP Library for Many Human Languages</h2>\n\n<div align=\"center\">\n    <a href=\"https://github.com/stanfordnlp/stanza/actions\">\n       <img alt=\"Run Tests\" src=\"https://github.com/stanfordnlp/stanza/actions/workflows/stanza-tests.yaml/badge.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/stanza?color=blue\">\n    </a>\n    <a href=\"https://anaconda.org/stanfordnlp/stanza\">\n        <img alt=\"Conda Versions\" src=\"https://img.shields.io/conda/vn/stanfordnlp/stanza?color=blue&label=conda\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/stanza?colorB=blue\">\n    </a>\n</div>\n\nThe Stanford NLP Group's official Python NLP library. It contains support for running various accurate natural language processing tools on 60+ languages and for accessing the Java Stanford CoreNLP software from Python. For detailed information please visit our [official website](https://stanfordnlp.github.io/stanza/).\n\nüî• &nbsp;A new collection of **biomedical** and **clinical** English model packages are now available, offering seamless experience for syntactic analysis and named entity recognition (NER) from biomedical literature text and clinical notes. For more information, check out our [Biomedical models documentation page](https://stanfordnlp.github.io/stanza/biomed.html).\n\n### References\n\nIf you use this library in your research, please kindly cite our [ACL2020 Stanza system demo paper](https://arxiv.org/abs/2003.07082):\n\n```bibtex\n@inproceedings{qi2020stanza,\n    title={Stanza: A {Python} Natural Language Processing Toolkit for Many Human Languages},\n    author={Qi, Peng and Zhang, Yuhao and Zhang, Yuhui and Bolton, Jason and Manning, Christopher D.},\n    booktitle = \"Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics: System Demonstrations\",\n    year={2020}\n}\n```\n\nIf you use our biomedical and clinical models, please also cite our [Stanza Biomedical Models description paper](https://arxiv.org/abs/2007.14640):\n\n```bibtex\n@article{zhang2021biomedical,\n    author = {Zhang, Yuhao and Zhang, Yuhui and Qi, Peng and Manning, Christopher D and Langlotz, Curtis P},\n    title = {Biomedical and clinical {E}nglish model packages for the {S}tanza {P}ython {NLP} library},\n    journal = {Journal of the American Medical Informatics Association},\n    year = {2021},\n    month = {06},\n    issn = {1527-974X}\n}\n```\n\nThe PyTorch implementation of the neural pipeline in this repository is due to [Peng Qi](http://qipeng.me) (@qipeng), [Yuhao Zhang](http://yuhao.im) (@yuhaozhang), and [Yuhui Zhang](https://cs.stanford.edu/~yuhuiz/) (@yuhui-zh15), with help from [Jason Bolton](mailto:jebolton@stanford.edu) (@j38), [Tim Dozat](https://web.stanford.edu/~tdozat/) (@tdozat) and [John Bauer](https://www.linkedin.com/in/john-bauer-b3883b60/) (@AngledLuffa). Maintenance of this repo is currently led by [John Bauer](https://www.linkedin.com/in/john-bauer-b3883b60/).\n\nIf you use the CoreNLP software through Stanza, please cite the CoreNLP software package and the respective modules as described [here](https://stanfordnlp.github.io/CoreNLP/#citing-stanford-corenlp-in-papers) (\"Citing Stanford CoreNLP in papers\"). The CoreNLP client is mostly written by [Arun Chaganty](http://arun.chagantys.org/), and [Jason Bolton](mailto:jebolton@stanford.edu) spearheaded merging the two projects together.\n\nIf you use the Semgrex or Ssurgeon part of CoreNLP, please cite [our GURT paper on Semgrex and Ssurgeon](https://aclanthology.org/2023.tlt-1.7/):\n\n```bibtex\n@inproceedings{bauer-etal-2023-semgrex,\n    title = \"Semgrex and Ssurgeon, Searching and Manipulating Dependency Graphs\",\n    author = \"Bauer, John  and\n      Kiddon, Chlo{\\'e}  and\n      Yeh, Eric  and\n      Shan, Alex  and\n      D. Manning, Christopher\",\n    booktitle = \"Proceedings of the 21st International Workshop on Treebanks and Linguistic Theories (TLT, GURT/SyntaxFest 2023)\",\n    month = mar,\n    year = \"2023\",\n    address = \"Washington, D.C.\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2023.tlt-1.7\",\n    pages = \"67--73\",\n    abstract = \"Searching dependency graphs and manipulating them can be a time consuming and challenging task to get right. We document Semgrex, a system for searching dependency graphs, and introduce Ssurgeon, a system for manipulating the output of Semgrex. The compact language used by these systems allows for easy command line or API processing of dependencies. Additionally, integration with publicly released toolkits in Java and Python allows for searching text relations and attributes over natural text.\",\n}\n```\n\n## Issues and Usage Q&A\n\nTo ask questions, report issues or request features ü§î, please use the [GitHub Issue Tracker](https://github.com/stanfordnlp/stanza/issues). Before creating a new issue, please make sure to search for existing issues that may solve your problem, or visit the [Frequently Asked Questions (FAQ) page](https://stanfordnlp.github.io/stanza/faq.html) on our website.\n\n## Contributing to Stanza\n\nWe welcome community contributions to Stanza in the form of bugfixes üõ†Ô∏è and enhancements üí°! If you want to contribute, please first read [our contribution guideline](CONTRIBUTING.md).\n\n## Installation\n\n### pip\n\nStanza supports Python 3.6 or later. We recommend that you install Stanza via [pip](https://pip.pypa.io/en/stable/installing/), the Python package manager. To install, simply run:\n```bash\npip install stanza\n```\nThis should also help resolve all of the dependencies of Stanza, for instance [PyTorch](https://pytorch.org/) 1.3.0 or above.\n\nIf you currently have a previous version of `stanza` installed, use:\n```bash\npip install stanza -U\n```\n\n### Anaconda\n\nTo install Stanza via Anaconda, use the following conda command:\n\n```bash\nconda install -c stanfordnlp stanza\n```\n\nNote that for now installing Stanza via Anaconda does not work for Python 3.10. For Python 3.10 please use pip installation.\n\n### From Source\n\nAlternatively, you can also install from source of this git repository, which will give you more flexibility in developing on top of Stanza. For this option, run\n```bash\ngit clone https://github.com/stanfordnlp/stanza.git\ncd stanza\npip install -e .\n```\n\n## Running Stanza\n\n### Getting Started with the neural pipeline\n\nTo run your first Stanza pipeline, simply following these steps in your Python interactive interpreter:\n\n```python\n>>> import stanza\n>>> stanza.download('en')       # This downloads the English models for the neural pipeline\n>>> nlp = stanza.Pipeline('en') # This sets up a default neural pipeline in English\n>>> doc = nlp(\"Barack Obama was born in Hawaii.  He was elected president in 2008.\")\n>>> doc.sentences[0].print_dependencies()\n```\n\nIf you encounter `requests.exceptions.ConnectionError`, please try to use a proxy:\n\n```python\n>>> import stanza\n>>> proxies = {'http': 'http://ip:port', 'https': 'http://ip:port'}\n>>> stanza.download('en', proxies=proxies)  # This downloads the English models for the neural pipeline\n>>> nlp = stanza.Pipeline('en')             # This sets up a default neural pipeline in English\n>>> doc = nlp(\"Barack Obama was born in Hawaii.  He was elected president in 2008.\")\n>>> doc.sentences[0].print_dependencies()\n```\n\nThe last command will print out the words in the first sentence in the input string (or [`Document`](https://stanfordnlp.github.io/stanza/data_objects.html#document), as it is represented in Stanza), as well as the indices for the word that governs it in the Universal Dependencies parse of that sentence (its \"head\"), along with the dependency relation between the words. The output should look like:\n\n```\n('Barack', '4', 'nsubj:pass')\n('Obama', '1', 'flat')\n('was', '4', 'aux:pass')\n('born', '0', 'root')\n('in', '6', 'case')\n('Hawaii', '4', 'obl')\n('.', '4', 'punct')\n```\n\nSee [our getting started guide](https://stanfordnlp.github.io/stanza/installation_usage.html#getting-started) for more details.\n\n### Accessing Java Stanford CoreNLP software\n\nAside from the neural pipeline, this package also includes an official wrapper for accessing the Java Stanford CoreNLP software with Python code.\n\nThere are a few initial setup steps.\n\n* Download [Stanford CoreNLP](https://stanfordnlp.github.io/CoreNLP/) and models for the language you wish to use\n* Put the model jars in the distribution folder\n* Tell the Python code where Stanford CoreNLP is located by setting the `CORENLP_HOME` environment variable (e.g., in *nix): `export CORENLP_HOME=/path/to/stanford-corenlp-4.5.3`\n\nWe provide [comprehensive examples](https://stanfordnlp.github.io/stanza/corenlp_client.html) in our documentation that show how one can use CoreNLP through Stanza and extract various annotations from it.\n\n### Online Colab Notebooks\n\nTo get your started, we also provide interactive Jupyter notebooks in the `demo` folder. You can also open these notebooks and run them interactively on [Google Colab](https://colab.research.google.com). To view all available notebooks, follow these steps:\n\n* Go to the [Google Colab website](https://colab.research.google.com)\n* Navigate to `File` -> `Open notebook`, and choose `GitHub` in the pop-up menu\n* Note that you do **not** need to give Colab access permission to your GitHub account\n* Type `stanfordnlp/stanza` in the search bar, and click enter\n\n### Trained Models for the Neural Pipeline\n\nWe currently provide models for all of the [Universal Dependencies](https://universaldependencies.org/) treebanks v2.8, as well as NER models for a few widely-spoken languages. You can find instructions for downloading and using these models [here](https://stanfordnlp.github.io/stanza/models.html).\n\n### Batching To Maximize Pipeline Speed\n\nTo maximize speed performance, it is essential to run the pipeline on batches of documents. Running a for loop on one sentence at a time will be very slow. The best approach at this time is to concatenate documents together, with each document separated by a blank line (i.e., two line breaks `\\n\\n`).  The tokenizer will recognize blank lines as sentence breaks. We are actively working on improving multi-document processing.\n\n## Training your own neural pipelines\n\nAll neural modules in this library can be trained with your own data. The tokenizer, the multi-word token (MWT) expander, the POS/morphological features tagger, the lemmatizer and the dependency parser require [CoNLL-U](https://universaldependencies.org/format.html) formatted data, while the NER model requires the BIOES format. Currently, we do not support model training via the `Pipeline` interface. Therefore, to train your own models, you need to clone this git repository and run training from the source.\n\nFor detailed step-by-step guidance on how to train and evaluate your own models, please visit our [training documentation](https://stanfordnlp.github.io/stanza/training.html).\n\n## LICENSE\n\nStanza is released under the Apache License, Version 2.0. See the [LICENSE](https://github.com/stanfordnlp/stanza/blob/master/LICENSE) file for more details.\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.0244140625,
          "content": "# Always prefer setuptools over distutils\nimport re\n\nfrom setuptools import setup, find_packages\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# read the version from stanza/_version.py\nversion_file_contents = open(path.join(here, 'stanza/_version.py'), encoding='utf-8').read()\nVERSION = re.compile('__version__ = \\\"(.*)\\\"').search(version_file_contents).group(1)\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='stanza',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=VERSION,\n\n    description='A Python NLP Library for Many Human Languages, by the Stanford NLP Group',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    # The project's main homepage.\n    url='https://github.com/stanfordnlp/stanza',\n\n    # Author details\n    author='Stanford Natural Language Processing Group',\n    author_email='jebolton@stanford.edu',\n\n    # Choose your license\n    license='Apache License 2.0',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 4 - Beta',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'Intended Audience :: Information Technology',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'Topic :: Text Processing',\n        'Topic :: Text Processing :: Linguistic',\n        'Topic :: Software Development',\n        'Topic :: Software Development :: Libraries',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n    ],\n\n    # What does your project relate to?\n    keywords='natural-language-processing nlp natural-language-understanding stanford-nlp deep-learning',\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=['data', 'docs', 'extern_data', 'figures', 'saved_models']),\n\n    # List run-time dependencies here.  These will be installed by pip when\n    # your project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=[\n        'emoji', \n        'numpy', \n        'protobuf>=3.15.0',\n        'requests', \n        'networkx',\n        'tomli;python_version<\"3.11\"',\n        'torch>=1.3.0',\n        'tqdm',\n    ],\n\n    # List required Python versions\n    python_requires='>=3.8',\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). You can install these using the following syntax,\n    # for example:\n    # $ pip install -e .[dev,test]\n    extras_require={\n        'dev': [\n            'check-manifest',\n        ],\n        'test': [\n            'coverage', \n            'pytest',\n        ],\n        'transformers': [\n            'transformers>=3.0.0',\n            'peft>=0.6.1',\n        ],\n        'datasets': [\n            'datasets',\n        ],\n        'tokenizers': [\n            'jieba',\n            'pythainlp',\n            'python-crfsuite',\n            'spacy',\n            'sudachidict_core',\n            'sudachipy',\n        ],\n        'visualization': [\n            'spacy',\n            'streamlit',\n            'ipython',\n        ],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    package_data={\n        \"\": [\"*.pl\"],\n    },\n\n    include_package_data=True,\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[],\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    entry_points={\n    },\n)\n"
        },
        {
          "name": "stanza",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}