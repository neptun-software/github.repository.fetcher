{
  "metadata": {
    "timestamp": 1736560637021,
    "page": 271,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HypothesisWorks/hypothesis",
      "stars": 7669,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.5849609375,
          "content": "[flake8]\n\nexclude =\n    test_reflection.py,\n    test_imports.py,\n    test_lambda_formatting.py\nignore =\n    # `black` creates these ones\n    E203,E501,W503,\n    # ambiguous variable name, e.g. 'l'\n    E741,\n    # Various codes from flake8-docstrings we don't care for\n    D1,D205,D209,D213,D301,D400,D401,D402,D412,D413,D999,D202,\n    # flake8-bugbear options we disagree with\n    B008,B011,\n    # flake8-bandit security warnings we disagree with or don't mind\n    S101,S102,S105,S110,S307,S311,S404,S6\nextend-select =\n    # enable checks for self-or-cls param name, use of raise-from\n    B902,B904\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.123046875,
          "content": "*    text eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.gif binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.173828125,
          "content": "# misc (editors, file systems, etc)\n\n*.swo\n*.swp\n.idea\n.vagrant\n.DS_Store\n.hypothesis\n.vscode/\n\n# generic build components\n\n.runtimes\n/hypothesis-python/branch-check*\n/pythonpython3.*\n/pythonpypy3.*\n.pyodide-xbuildenv\n\n# python\n\n*.pyc\n*.pyo\nvenv*\n.cache\n.pytest_cache\n.mypy_cache\ndocs/_build\n*.egg-info\n_build\n.tox\n.coverage\n.pypirc\nhtmlcov\nbuild\ndist\n.doctrees/\n.v*/\n\n# encrypted files\nsecrets.tar\nsecrets\n\n# Rust build targets\ntarget\n\n_site/\n.sass-cache/\n.docker\n\n# =========================\n# Operating System Files\n# =========================\n\n# OSX\n# =========================\n\n.AppleDouble\n.LSOverride\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Windows\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\nsftp-config.json\n\n# Vim files\n\n*.sw*\n\n__pycache__\n\n.jekyll-metadata\n\nHypothesisWorks.github.io.iml\njekyll.log\n/website/output/\n/t.py\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.5986328125,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats:\n  - htmlzip\n  - epub\n  # - pdf  # busted by latex crash on unicode U+030A combining ring above, in text() docs\n\n# Optionally set the version of Python and requirements required to build your docs\nbuild:\n   os: ubuntu-22.04\n   tools:\n      python: \"3.10\"\npython:\n   install:\n      - requirements: requirements/tools.txt\n      - path: hypothesis-python/\n        extra_requirements:\n           - all\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 11.62109375,
          "content": "--------------------\nList of Contributors\n--------------------\n\nThe primary author for most of Hypothesis is David R. MacIver (me). However the following\npeople have also contributed work. As well as my thanks, they also have copyright over\ntheir individual contributions.\n\n.. NOTE - this list is in alphabetical order by first name (or handle).\n\n* `Aaron Meurer <https://github.com/asmeurer>`_\n* `Adam Johnson <https://github.com/adamchainz>`_\n* `Adam Matan <https://github.com/adamatan/adamatan>_`\n* `Adam Sven Johnson <https://www.github.com/pkqk>`_\n* `Afrida Tabassum <https://github.com/oxfordhalfblood>`_ (afrida@gmail.com)\n* `Afonso Silva <https://github.com/ajcerejeira>`_ (ajcerejeira@gmail.com)\n* `Agustín Covarrubias <https://github.com/agucova>`_ (gh@agucova.dev)\n* `Akash Suresh <https://www.github.com/akash-suresh>`_ (akashsuresh36@gmail.com)\n* `Alex Gaynor <https://github.com/alex>`_\n* `Alex Stapleton <https://www.github.com/public>`_\n* `Alex Willmer <https://github.com/moreati>`_ (alex@moreati.org.uk)\n* `Andrea Pierré <https://www.github.com/kir0ul>`_\n* `Andrea Reina <https://www.github.com/andreareina>`_\n* `Andrew Sansom <https://www.github.com/qthequartermasterman>`_\n* `Anne Archibald <https://www.github.com/td-anne>`_\n* `Ben Anhalt <https://github.com/benanhalt>`_\n* `Ben Peterson <https://github.com/killthrush>`_ (killthrush@hotmail.com)\n* `Benjamin Lee <https://github.com/Benjamin-Lee>`_ (benjamindlee@me.com)\n* `Benjamin Palmer <https://github.com/benjpalmer>`_\n* `Bex Dunn <https://github.com/BexDunn>`_ (bex.dunn@gmail.com)\n* `Bill Tucker <https://github.com/imbilltucker>`_ (imbilltucker@gmail.com)\n* `Brandon Chinn <https://github.com/brandonchinn178>`_\n* `Bryant Eisenbach <https://github.com/fubuloubu>`_\n* `Buck Evan, copyright Google LLC <https://github.com/bukzor>`_\n* `Cameron McGill <https://www.github.com/Cameron-JM>`_\n* `Carl Meyer <https://www.github.com/carljm>`_\n* `Charles O'Farrell <https://www.github.com/charleso>`_\n* `Charlie Tanksley <https://www.github.com/charlietanksley>`_\n* `Chase Garner <https://www.github.com/chasegarner>`_ (chase@garner.red)\n* `Cheuk Ting Ho <https://github.com/Cheukting>`_\n* `Chris Down  <https://chrisdown.name>`_\n* `Chris van Dronkelaar <https://github.com/Chrisvandr>`_\n* `Christopher Martin <https://www.github.com/chris-martin>`_ (ch.martin@gmail.com)\n* `Claudio Jolowicz <https://github.com/cjolowicz>`_\n* `Conrad Ho <https://www.github.com/conradho>`_ (conrad.alwin.ho@gmail.com)\n* `Cory Benfield <https://www.github.com/Lukasa>`_\n* `Cristi Cobzarenco <https://github.com/cristicbz>`_ (cristi@reinfer.io)\n* `Damon Francisco <https://github.com/dtfrancisco>`_ (damontfrancisco@yahoo.com)\n* `Daniel J. West <https://github.com/danieljwest>`_\n* `Daniel Knell <https://github.com/danielknell>`_ (contact@danielknell.co.uk)\n* `David Bonner <https://github.com/rascalking>`_ (dbonner@gmail.com)\n* `David Chudzicki <https://github.com/dchudz>`_ (dchudz@gmail.com)\n* `David Mascharka <https://github.com/davidmascharka>`_\n* `Dawn E. Collett <https://github.com/lisushka>`_\n* `Derek Gustafson <https://www.github.com/degustaf>`_\n* `Dion Misic <https://www.github.com/kingdion>`_ (dion.misic@gmail.com)\n* `Dmitry Dygalo <https://www.github.com/Stranger6667>`_\n* `Ed Rogers <https://www.github.com/edrogers>`-\n* `Eduardo Enriquez <https://www.github.com/eduzen>`_ (eduardo.a.enriquez@gmail.com)\n* `El Awbery <https://www.github.com/ElAwbery>`_\n* `Emmanuel Leblond <https://www.github.com/touilleMan>`_\n* `Evan Tey <https://github.com/evantey14>`_\n* `Felix Divo <https://www.github.com/felixdivo>`_\n* `Felix Grünewald <https://www.github.com/fgruen>`_\n* `Felix Sheldon <https://www.github.com/darkpaw>`_\n* `Florian Bruhin <https://www.github.com/The-Compiler>`_\n* `follower <https://www.github.com/follower>`_\n* `Francesc Elies <https://www.github.com/FrancescElies>`_\n* `Gabe Joseph <https://github.com/gjoseph92>`_\n* `Gary Donovan <https://www.github.com/garyd203>`_\n* `George Macon <https://www.github.com/gmacon>`_\n* `Glenn Lehman <https://www.github.com/glnnlhmn>`_\n* `Graham Williamson <https://github.com/00willo>`_\n* `Grant David Bachman <https://github.com/grantbachman>`_ (grantbachman@gmail.com)\n* `Gregory Petrosyan <https://github.com/flyingmutant>`_\n* `Grzegorz Zieba <https://github.com/gzaxel>`_ (g.zieba@erax.pl)\n* `Grigorios Giannakopoulos <https://github.com/grigoriosgiann>`_\n* `Hal Blackburn <https://github.com/h4l>`_\n* `Hugo van Kemenade <https://github.com/hugovk>`_\n* `Humberto Rocha <https://github.com/humrochagf>`_\n* `Ilya Lebedev <https://github.com/melevir>`_ (melevir@gmail.com)\n* `Israel Fruchter <https://github.com/fruch>`_\n* `Ivan Tham <https://github.com/pickfire>`_\n* `Jack Massey <https://github.com/massey101>`_\n* `Jakub Nabaglo <https://github.com/nbgl>`_ (j@nab.gl)\n* `James Lamb <https://github.com/jameslamb>`_\n* `Jenny Rouleau <https://github.com/jennyrou>`_\n* `Jens Heinrich <https://github.com/JensHeinrich>`_\n* `Jens Tröger <https://github.com/jenstroeger>`_\n* `Jeremy Thurgood <https://github.com/jerith>`_\n* `J.J. Green <http://soliton.vm.bytemark.co.uk/pub/jjg/>`_\n* `JP Viljoen <https://github.com/froztbyte>`_ (froztbyte@froztbyte.net)\n* `Jochen Müller <https://github.com/jomuel>`_\n* `Joseph Weston <https://github.com/jbweston>`_\n* `Joey Tuong <https://github.com/tetrapus>`_\n* `Jonathan Gayvallet <https://github.com/Meallia>`_ (jonathan.gayvallet@orange.com)\n* `Jonty Wareing <https://www.github.com/Jonty>`_ (jonty@jonty.co.uk)\n* `Joshua Boone <https://www.github.com/patchedwork>`_ (joshuaboone4190@gmail.com)\n* `Joshua Munn <https://www.github.com/jams2>`_ (public@elysee-munn.family)\n* `jmhsi <https://www.github.com/jmhsi>`_\n* `Justus Magin <https://github.com/keewis>`_\n* `jwg4 <https://www.github.com/jwg4>`_\n* `Kai Chen <https://www.github.com/kx-chen>`_ (kaichen120@gmail.com)\n* `Karthikeyan Singaravelan <https://www.github.com/tirkarthi>`_ (tir.karthi@gmail.com)\n* `Katelyn Gigante <https://github.com/silasary>`_\n* `Katrina Durance <https://github.com/kdurance>`_\n* `kbara <https://www.github.com/kbara>`_\n* `Keeri Tramm <keerilynn>`_\n* `Kristian Glass <https://www.github.com/doismellburning>`_\n* `Krzysztof Przybyła <https://github.com/kprzybyla>`_\n* `Kyle Reeve <https://www.github.com/kreeve>`_ (krzw92@gmail.com)\n* `Lampros Mountrakis <https://www.github.com/lmount>`_\n* `Lea Provenzano <https://github.com/leaprovenzano>`_\n* `Lee Begg <https://www.github.com/llnz2>`_\n* `Liam DeVoe <https://github.com/tybug>`_\n* `Libor Martínek <https://github.com/bibajz>`_\n* `Lisa Goeller <https://www.github.com/lgoeller>`_\n* `Louis Taylor <https://github.com/kragniz>`_\n* `Luke Barone-Adesi <https://github.com/baluke>`_\n* `Lundy Bernard <https://github.com/lundybernard>`_\n* `Marco Sirabella <https://www.github.com/mjsir911>`_\n* `marekventur <https://www.github.com/marekventur>`_\n* `Marius Gedminas <https://www.github.com/mgedmin>`_ (marius@gedmin.as)\n* `Markus Unterwaditzer <https://github.com/untitaker>`_ (markus@unterwaditzer.net)\n* `Mateusz Sokół <https://github.com/mtsokol>`_\n* `Mathieu Paturel <https://github.com/math2001>`_ (mathieu.paturel@gmail.com)\n* `Matt Bachmann <https://www.github.com/bachmann1234>`_ (bachmann.matt@gmail.com)\n* `Matthew Barber <https://www.github.com/honno>`_ (quitesimplymatt@gmail.com)\n* `Max Nordlund <https://www.github.com/maxnordlund>`_ (max.nordlund@gmail.com)\n* `Maxim Kulkin <https://www.github.com/maximkulkin>`_ (maxim.kulkin@gmail.com)\n* `Mel Seto <https://github.com/mel-seto>`_\n* `Michel Alexandre Salim <https://github.com/michel-slm>`_ (michel@michel-slm.name)\n* `mulkieran <https://www.github.com/mulkieran>`_\n* `Munir Abdinur <https://www.github.com/mabdinur>`_\n* `Nathan Goldbaum <https://www/github.com/ngoldbaum>`_\n* `Nicholas Chammas <https://www.github.com/nchammas>`_\n* `Nick Anyos <https://www.github.com/NickAnyos>`_\n* `Nick Collins <https://github.com/nickcollins>` _\n* `Nick Muoh <https://github.com/OdinTech3>`_ (nickspirit3@gmail.com)\n* `Nicolas Erni <https://www.github.com/ThunderKey>`_\n* `Nikita Sobolev <https://github.com/sobolevn>`_ (mail@sobolevn.me)\n* `Oleg Höfling <https://github.com/hoefling>`_ (oleg.hoefling@gmail.com)\n* `Paul Ganssle <https://ganssle.io>`_ (paul@ganssle.io)\n* `Paul Kehrer <https://github.com/reaperhulk>`_\n* `Paul Lorett Amazona <https://github.com/whatevergeek>`_\n* `Paul Stiverson <https://github.com/thismatters>`_\n* `Pax (R. Margret) W. <https://github.com/paxcodes>`_\n* `Peadar Coyle <https://github.com/springcoil>`_ (peadarcoyle@gmail.com)\n* `Petr Viktorin <https://github.com/encukou>`_\n* `Phillip Schanely <https://github.com/pschanely>`_ (pschanely@gmail.com)\n* `Pierre-Jean Campigotto <https://github.com/PJCampi>`_\n* `Przemek Konopko <https://github.com/soutys>`_\n* `Reagan Lee <https://github.com/reaganjlee>`_\n* `Richard Boulton <https://www.github.com/rboulton>`_ (richard@tartarus.org)\n* `Richard Scholtens <https://github.com/richardscholtens>`_ (richardscholtens2@gmail.com)\n* `Robert Howlett <https://github.com/jebob>`_\n* `Robert Knight <https://github.com/robertknight>`_ (robertknight@gmail.com)\n* `Rodrigo Girão Serrão <https://github.com/rodrigogiraoserrao>`_ (rodrigo@mathspp.com)\n* `Rónán Carrigan <https://www.github.com/rcarriga>`_ (rcarriga@tcd.ie)\n* `Ruben Opdebeeck <https://github.com/ROpdebee>`_\n* `Ryan Soklaski <https://www.github.com/rsokl>`_ (rsoklaski@gmail.com)\n* `Ryan Turner <https://github.com/rdturnermtl>`_ (ryan.turner@uber.com)\n* `Sam Bishop (TechDragon) <https://github.com/techdragon>`_ (sam@techdragon.io)\n* `Sam Clamons <https://github.com/sclamons>`_ (sclamons@gmail.com)\n* `Sam Hames <https://www.github.com/SamHames>`_\n* `Sam Watts <https://www.github.com/sam-watts>`_\n* `Sangarshanan <https://www.github.com/sangarshanan>`_ (sangarshanan1998@gmail.com)\n* `Sanyam Khurana <https://github.com/CuriousLearner>`_\n* `Saul Shanabrook <https://www.github.com/saulshanabrook>`_ (s.shanabrook@gmail.com)\n* `Sebastiaan Zeeff <https://github.com/SebastiaanZ>`_ (sebastiaan.zeeff@ordina.nl)\n* `Sharyar Memon <https://github.com/sharyar>`_ (smemon.cal@gmail.com)\n* `Shlok Gandhi <https://github.com/shlok57>`_ (shlok.gandhi@gmail.com)\n* `Sogata Ray <https://github.com/rayardinanda>`_ (rayardinanda@gmail.com)\n* `Stuart Cook <https://www.github.com/Zalathar>`_\n* `SuperStormer <https://github.com/SuperStormer>`_\n* `Sushobhit <https://github.com/sushobhit27>`_ (sushobhitsolanki@gmail.com)\n* `Tariq Khokhar <https://www.github.com/tkb>`_ (tariq@khokhar.net)\n* `Tessa Bradbury <https://www.github.com/tessereth>`_\n* `Thea Koutsoukis <https://www.github.com/theakaterina>`_\n* `Thomas Ball <https://www.github.com/bomtall>`_ (bomtall1@hotmail.com)\n* `Thomas Grainge <https://www.github.com/tgrainge>`_\n* `Thomas Kluyver <https://www.github.com/takluyver>`_ (thomas@kluyver.me.uk)\n* `Tim Martin <https://www.github.com/timmartin>`_ (tim@asymptotic.co.uk)\n* `Tom McDermott <https://www.github.com/sponster-au>`_ (sponster@gmail.com)\n* `Tom Milligan <https://www.github.com/tommilligan>`_ (code@tommilligan.net)\n* `Tyler Gibbons <https://www.github.com/kavec>`_ (tyler.gibbons@flexport.com)\n* `Tyler Nickerson <https://www.github.com/nmbrgts>`_\n* `Vidya Rani <https://www.github.com/vidyarani-dg>`_ (vidyarani.d.g@gmail.com)\n* `Vince Reuter <https://github.com/vreuter>`_ (vince.reuter@gmail.com)\n* `Vincent Michel <https://www.github.com/vxgmichel>`_ (vxgmichel@gmail.com)\n* `Viorel Pluta <https://github.com/viopl>`_ (viopluta@gmail.com)\n* `Vytautas Strimaitis <https://www.github.com/vstrimaitis>`_\n* `Will Hall <https://www.github.com/wrhall>`_ (wrsh07@gmail.com)\n* `Will Thompson <https://www.github.com/wjt>`_ (will@willthompson.co.uk)\n* `Wilfred Hughes <https://www.github.com/wilfred>`_\n* `Yiyang Zhan <https://www.github.com/zhanpon>`_\n* `Zac Hatfield-Dodds <https://www.github.com/Zac-HD>`_ (zac.hatfield.dodds@gmail.com)\n* `Zebulun Arendsee <https://www.github.com/arendsee>`_ (zbwrnz@gmail.com)\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 2.13671875,
          "content": "cff-version: 1.2.0\nmessage: |\n  If you use Hypothesis as part of a published research project,\n  please cite our paper in the Journal of Open Source Software:\n\n  Text:\n\n  MacIver et al., (2019). Hypothesis: A new approach to property-based testing.\n  Journal of Open Source Software, 4(43), 1891, https://doi.org/10.21105/joss.01891\n\n  BibTeX:\n\n  @article{MacIver2019Hypothesis,\n    journal = {Journal of Open Source Software},\n    doi = {10.21105/joss.01891},\n    issn = {2475-9066},\n    number = {43},\n    publisher = {The Open Journal},\n    title = {Hypothesis: A new approach to property-based testing},\n    url = {http://dx.doi.org/10.21105/joss.01891},\n    volume = {4},\n    author = {MacIver, David and Hatfield-Dodds, Zac and Contributors, Many},\n    pages = {1891},\n    date = {2019-11-21},\n    year = {2019},\n    month = {11},\n    day = {21},\n  }\n\n  To reference a particular version of Hypothesis as a software artifact,\n  you can use the version-specific DOIs we create for each release under\n  https://doi.org/10.5281/zenodo.1412597\n\n\npreferred-citation:\n  title: 'Hypothesis: A new approach to property-based testing'\n  date-released: 2019-11-21\n  type: article\n  doi: 10.21105/joss.01891\n  authors:\n    - family-names: MacIver\n      given-names: David R.\n      orcid: https://orcid.org/0000-0002-8635-3223\n      affiliation: Imperial College London\n    - family-names: Hatfield-Dodds\n      given-names: Zac\n      orcid: https://orcid.org/0000-0002-8646-8362\n      affiliation: Australian National University\n    - name: \"many other contributors\"\n\n# Citation metadata for the software itself, as required by the CFF spec\ndoi: 10.5281/zenodo.1412597  # Version-independent DOI for the software archive\ntitle: 'Hypothesis: Property-Based Testing for Python'\nrepository-code: https://github.com/HypothesisWorks/hypothesis\nlicense: MPL-2.0\nauthors:\n  - family-names: MacIver\n    given-names: David R.\n    orcid: https://orcid.org/0000-0002-8635-3223\n    affiliation: Imperial College London\n  - family-names: Hatfield-Dodds\n    given-names: Zac\n    orcid: https://orcid.org/0000-0002-8646-8362\n    affiliation: Australian National University\n  - name: \"many other contributors\"\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.3544921875,
          "content": "# Engine changes need to be approved by Zac-HD, as per\n# https://github.com/HypothesisWorks/hypothesis/blob/master/guides/review.rst#engine-changes\n/hypothesis-python/src/hypothesis/internal/conjecture/ @DRMacIver @Zac-HD \n\n# Changes to the paper also need to be approved by DRMacIver or Zac, as authors\n/paper.md @DRMacIver @Zac-HD\n/paper.bib @DRMacIver @Zac-HD\n"
        },
        {
          "name": "CODE_OF_CONDUCT.rst",
          "type": "blob",
          "size": 2.5693359375,
          "content": "---------------\nCode of conduct\n---------------\n\nHypothesis's community is an inclusive space, and everyone in it is expected to abide by a code of conduct.\nThis applies in issues, pull requests, etc. as well as in the various Hypothesis community spaces.\n\nAt the high level the code of conduct goes like this:\n\n1. Be kind\n2. Be respectful\n3. Be helpful\n\nWhile it is impossible to enumerate everything that is unkind, disrespectful or unhelpful, here are some specific things that are definitely against the code of conduct:\n\n1. -isms and -phobias (e.g. racism, sexism, transphobia and homophobia) are unkind, disrespectful *and* unhelpful. Just don't.\n2. All software is broken. This is not a moral failing on the part of the authors. Don't give people a hard time for bad code.\n3. It's OK not to know things. Everybody was a beginner once, nobody should be made to feel bad for it.\n4. It's OK not to *want* to know something. If you think someone's question is fundamentally flawed, you should still ask permission before explaining what they should actually be asking.\n5. Note that \"I was just joking\" is not a valid defence.\n6. Don't suggest violence as a response to things, e.g. \"People who do/think X should be Y-ed\".\n   Even if you think it is obvious hyperbole and that it's very clear that no actual threat is meant,\n   it still contributes to a culture that makes people feel unsafe.\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~\nResolution of Violations\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nDavid R. MacIver (the project lead) acts as the main point of contact and enforcer for code of conduct violations.\nYou can email him at david@drmaciver.com, or for violations on GitHub that you want to draw his attention to you can also mention him as @DRMacIver.\n\nOther people (especially Hypothesis team members) should feel free to call people on code of conduct violations when they see them,\nand it is appreciated but not required (especially if doing so would make you feel uncomfortable or unsafe).\n\nWe don't currently have a formal policy for resolutions and it's mostly based on subjective judgement calls,\nbut the high level intent is as follows:\n\n* minor one-off infractions will just be met with a request not to repeat the behaviour and, where it would be useful,\n  for an apology.\n* Major infractions and repeat offenders will be banned from the community.\n\nIf you disagree with David's judgement on any particular event, please feel free to tell him so.\n\nAlso, people who have a track record of bad behaviour outside of the Hypothesis community may be banned even\nif they obey all these rules if their presence is making people uncomfortable.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 10.66015625,
          "content": "=============\nContributing\n=============\n\nFirst off: It's great that you want to contribute to Hypothesis! Thanks!\n\n---------------------------------------\nJust tell me how to make a pull request\n---------------------------------------\n\n1. Make your change and ensure it has adequate tests\n2. Create ``hypothesis-python/RELEASE.rst`` with ``RELEASE_TYPE: patch``\n   for small bugfixes, or ``minor`` for new features.  See ``RELEASE-sample.rst``\n   as an example.\n3. Add yourself to the list in ``AUTHORS.rst`` and open a PR!\n\nFor more detail, read on; for even more, continue to the ``guides/`` directory!\n\n------------------\nWays to Contribute\n------------------\n\nHypothesis is a mature yet active project. This means that there are many\nways in which you can contribute.\n\nFor example, it's super useful and highly appreciated if you do any of:\n\n* Submit bug reports\n* Submit feature requests\n* Write about Hypothesis\n* Give a talk about Hypothesis\n* Build libraries and tools on top of Hypothesis outside the main repo\n* Submit PRs\n\nIf you build a Hypothesis strategy that you would like to be more widely known\nplease add it to the list of external strategies by preparing a PR against\nthe docs/strategies.rst file.\n\nIf you find an error in the documentation, please feel free to submit a PR that\nfixes the error. Spot a tyop? Fix it up and send us a PR!\nYou can read more about how we document Hypothesis in ``guides/documentation.rst``\n\nThe process for submitting source code PRs is generally more involved\n(don't worry, we'll help you through it), so do read the rest of this document.\nIf you're planning a larger change, the contributor guides (in the ``guides/``\ndirectory) will make sure you're on the right track.\n\n----------------------------------\nInstalling from source and testing\n----------------------------------\n\nIf you want to install directly from the source code (e.g. because you want to\nmake changes and install the changed version) you can do this with:\n\n.. code:: bash\n\n  pip install -r requirements/test.in\n  pip install -r requirements/tools.in\n  pip install -e hypothesis-python/\n\n  # You don't need to run the tests, but here's the command:\n  pytest hypothesis-python/tests/cover/\n\nYou may wish to do all of this in a\n`virtualenv <https://docs.python.org/3/library/venv.html>`_. For example:\n\n.. code:: bash\n\n  python3 -m venv .venv\n  source .venv/bin/activate\n  pip install hypothesis\n\nWill create an isolated environment where you can install and try out\nHypothesis without affecting your system packages.\n\n-----------------------\nCopyright and Licensing\n-----------------------\n\nIt's important to make sure that you own the rights to the work you are submitting.\nIf it is done on work time, or you have a particularly onerous contract, make sure\nyou've checked with your employer.\n\nAll work in Hypothesis is licensed under the terms of the\n`Mozilla Public License, version 2.0 <https://mozilla.org/MPL/2.0/>`_. By\nsubmitting a contribution you are agreeing to licence your work under those\nterms.\n\nFinally, if it is not there already, add your name (and a link to your GitHub\nand email address if you want) to the list of contributors found in\nAUTHORS.rst, in alphabetical order. It doesn't have to be your\n\"real\" name (whatever that means), any sort of public identifier\nis fine. In particular a GitHub account is sufficient.\n\n-----------------------\nThe actual contribution\n-----------------------\n\nOK, so you want to make a contribution and have sorted out the legalese. What now?\n\nFirst off: If you're planning on implementing a new feature, talk to us\nfirst! Come `join us on the mailing list <https://hypothesis.readthedocs.io/en/latest/community.html#community>`_,\nor open an issue. If it's really small feel free to open a work in progress pull request sketching\nout the idea, but it's best to get feedback from the Hypothesis maintainers\nbefore sinking a bunch of work into it.\nIf you're working on an existing issue, leave a comment so we can try to avoid\nduplicating your work before you open a pull request.\n\nIn general work-in-progress pull requests are totally welcome if you want early feedback\nor help with some of the tricky details. Don't be afraid to ask for help.\n\nIn order to get merged, a pull request will have to have a green build (naturally) and\nto be approved by a Hypothesis maintainer (and, depending on what it is, possibly specifically\nby DRMacIver).  Most pull requests will also need to `write a changelog entry in\nhypothesis-python/RELEASE.rst <guides/documentation.rst#changelog-entries>`_.\n\nThe review process is the same one that all changes to Hypothesis go through, regardless of\nwhether you're an established maintainer or entirely new to the project. It's very much\nintended to be a collaborative one: It's not us telling you what we think is wrong with\nyour code, it's us working with you to produce something better together.\n\nWe have `a lengthy check list <guides/review.rst>`_ of things we look for in a review. Feel\nfree to have a read of it in advance and go through it yourself if you'd like to. It's not\nrequired, but it might speed up the process.\n\nOnce your pull request has a green build and has passed review, it will be merged to\nmaster fairly promptly. This will immediately trigger a release! Don't be scared. If that\nbreaks things, that's our fault not yours - the whole point of this process is to ensure\nthat problems get caught before we merge rather than after.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPull request or external package?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNew strategies can be added to Hypothesis, or published as an external package\non PyPI - either is fine for most strategies.  If in doubt, ask!\n\nIt's generally much easier to get things working outside, because there's\nmore freedom to experiment and fewer requirements in stability and API style.\nWe're happy to review and help with external packages as well as pull requests;\nseveral parts of Hypothesis started life outside and were integrated later\n(with permission, of course).\n\nTo help people find your package, please use the `Framework :: Hypothesis\n<https://pypi.org/search/?c=Framework+%3A%3A+Hypothesis>`__ `trove classifier\n<https://pypi.org/classifiers/>`__.  We also recommend naming your package\nin the pattern of ``hypothesis-graphql`` and ``hypothesis-protobuf`` on PyPI.\n\nOn the other hand, being inside gets you access to some deeper implementation\nfeatures (if you need them) and better long-term guarantees about maintenance.\nWe particularly encourage pull requests for new composable primitives that\nmake implementing other strategies easier, or for widely used types in the\nPython standard library.  Strategies for other things are also welcome;\nanything with external dependencies just goes in ``hypothesis.extra``.\n\n~~~~~~~~~\nThe build\n~~~~~~~~~\n\nThe build is driven by a ``build.sh`` shell script, which delegates to a custom Python-based build system.\nActually running the tests is managed by `tox <https://tox.readthedocs.io/en/latest/>`_, but the build system\nwill call out to the relevant tox environments so you mostly don't have to know anything about that\nunless you want to make changes to the test config. You also mostly don't need to know anything about the build system\nexcept to type ``./build.sh`` followed by the name of the task you want to run.\n\nAll of it will be checked on CI so you don't *have* to run anything locally, but you might\nfind it useful to do so: A full CI run can take up to twenty minutes,\nso running a smaller set of tests locally can be helpful.\n\nThe build system should be \"fairly\" portable, but is currently only known to work on Linux or OS X. It *might* work\non a BSD or on Windows with cygwin installed, but it hasn't been tried.  Windows with WSL does work,\nas for Linux, and since OS-specific issues are rare for Hypothesis that's pretty useful.\nIf you try it and find it doesn't work, please do submit patches to fix that.\n\nSome notable commands:\n\n``./build.sh check-coverage`` will verify 100% code coverage by running a\ncurated subset of the test suite.\n\n``./build.sh check-py311`` (etc.) will run most of the test suite against a\nparticular python version.\n\n``./build.sh format`` will reformat your code according to the Hypothesis coding style. You should use this before each\ncommit ideally, but you only really have to use it when you want your code to be ready to merge.\n\nYou can also use ``./build.sh check-format``, which will run format and some linting and will then error if you have a\ngit diff. Note: This will error even if you started with a git diff, so if you've got any uncommitted changes\nthis will necessarily report an error.\n\nRun ``./build.sh tasks`` for a list of all supported build task names.\n\nNote: The build requires a lot of different versions of python, so rather than have you install them yourself,\nthe build system will install them itself in a local directory. This means that the first time you run a task you\nmay have to wait a while as the build downloads and installs the right version of python for you.\n\n~~~~~~~~~~~~~\nRunning Tests\n~~~~~~~~~~~~~\n\nThe tasks described above will run all of the tests (e.g. ``check-py311``). But\nthe ``tox`` task will give finer-grained control over the test runner. At a\nhigh level, the task takes the form:\n\n.. code-block::\n\n    ./build.sh tox py311-custom 3.11.3 [tox args] -- [pytest args]\n\nNamely, first provide the tox environment (see ``tox.ini``), then the python\nversion to test with, then any ``tox`` or ``pytest`` args as needed. For\nexample, to run all of the tests in the file\n``tests/nocover/test_conjecture_engine.py`` with python 3.12:\n\n.. code-block::\n\n    ./build.sh tox py312-custom 3.12.7 -- tests/nocover/test_conjecture_engine.py\n\nSee the ``tox`` docs and ``pytest`` docs for more information:\n* https://docs.pytest.org/en/latest/how-to/usage.html\n* https://tox.wiki/en/latest/config.html#cli\n\n^^^^^^^^^^^\nTest Layout\n^^^^^^^^^^^\n\nSee ``hypothesis-python/tests/README.rst``\n\n^^^^^^^^^^^^^^^^\nUseful Arguments\n^^^^^^^^^^^^^^^^\n\nSome useful arguments to pytest include:\n\n* You can pass ``-n 0`` to turn off ``pytest-xdist``'s parallel test execution.\n  Sometimes for running just a small number of tests its startup time is longer\n  than the time it saves (this will vary from system to system), so this can\n  be helpful if you find yourself waiting on test runners to start a lot.\n* You can use ``-k`` to select a subset of tests to run. This matches on substrings\n  of the test names. For example ``-kfoo`` will only run tests that have \"foo\" as\n  a substring of their name. You can also use composite expressions here.\n  e.g. ``-k'foo and not bar'`` will run anything containing foo that doesn't\n  also contain bar.  `More information on how to select tests to run can be found\n  in the pytest documentation <https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests>`__.\n\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.404296875,
          "content": "Copyright (c) 2013, David R. MacIver\n\nAll code in this repository except where explicitly noted otherwise is released\nunder the Mozilla Public License v 2.0. You can obtain a copy at https://mozilla.org/MPL/2.0/.\n\nSome code in this repository comes from other projects. Where applicable, the\noriginal copyright and license are noted and any modifications made are released\ndual licensed with the original license.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.236328125,
          "content": "# You don't need to use this Makefile and should use build.sh instead. This is\n# just here so that us poor souls who remember the Make based system and keep\n# typing \"make target\" can ease our transition to the new system.\n\n%:\n\t./build.sh $@\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.4208984375,
          "content": "==========\nHypothesis\n==========\n\nHypothesis is a family of testing libraries which let you write tests parametrized\nby a source of examples. A Hypothesis implementation then generates simple and\ncomprehensible examples that make your tests fail.\nThis simplifies writing your tests and makes them more powerful at the same time,\nby letting software automate the boring bits and do them to a higher standard than a human would,\nfreeing you to focus on the higher level test logic.\n\nThis sort of testing is often called \"property-based testing\",\nand the most widely known implementation of the concept is the Haskell\nlibrary `QuickCheck <https://hackage.haskell.org/package/QuickCheck>`_,\nbut Hypothesis differs significantly from QuickCheck and is designed to fit\nidiomatically and easily into existing styles of testing that you are used to,\nwith absolutely no familiarity with Haskell or functional programming needed.\n\n`Hypothesis for Python <hypothesis-python>`_ is the original implementation,\nand the only one that is currently fully production ready and actively maintained.\n\n------------------------------\nHypothesis for Other Languages\n------------------------------\n\nThe core ideas of Hypothesis are language agnostic and in principle it is\nsuitable for any language. We are interested in developing and supporting\nimplementations for a wide variety of languages, but currently lack the\nresources to do so, so our porting efforts are mostly prototypes.\n\nThe two prototype implementations of Hypothesis for other languages are:\n\n* `Hypothesis for Ruby <hypothesis-ruby>`_\n  is a reasonable start on a port of Hypothesis to Ruby.\n* `Hypothesis for Java <https://github.com/HypothesisWorks/hypothesis-java>`_\n  is a prototype written some time ago. It's far from feature complete and is\n  not under active development, but was intended to prove the viability of the\n  concept.\n\nAdditionally there is a port of the core engine of Hypothesis, Conjecture, to\nRust. It is not feature complete but in the long run we are hoping to move\nmuch of the existing functionality to Rust and rebuild Hypothesis for Python\non top of it, greatly lowering the porting effort to other languages.\n\nAny or all of these could be turned into full fledged implementations with relatively\nlittle effort (no more than a few months of full time work), but as well as the\ninitial work this would require someone prepared to provide or fund ongoing\nmaintenance efforts for them in order to be viable.\n"
        },
        {
          "name": "brand",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.541015625,
          "content": "#!/usr/bin/env bash\n\n# This script is here to bootstrap the Hypothesis build process into a working\n# version of Python, then hand over to the actual Hypothesis build runner (which\n# is written in Python instead of bash).\n\nif [ -n \"${CI:-}\" ] ; then echo \"::group::Build setup\" ; fi\n\nset -o xtrace\nset -o errexit\nset -o nounset\n\nROOT=\"$(git -C \"$(dirname \"$0\")\" rev-parse --show-toplevel)\"\n\nexport HYPOTHESIS_ROOT=\"$ROOT\"\n\nSCRIPTS=\"$ROOT/tooling/scripts\"\n\n# shellcheck source=tooling/scripts/common.sh\nsource \"$SCRIPTS/common.sh\"\n\nif [ -n \"${GITHUB_ACTIONS-}\" ] || [ -n \"${CODESPACES-}\" ] ; then\n    # We're on GitHub Actions or Codespaces and already set up a suitable Python\n    PYTHON=$(command -v python)\nelse\n    # Otherwise, we install it from scratch\n    # NOTE: tooling keeps this version in sync with ci_version in tooling\n    \"$SCRIPTS/ensure-python.sh\" 3.10.16\n    PYTHON=$(pythonloc 3.10.16)/bin/python\nfi\n\nTOOL_REQUIREMENTS=\"$ROOT/requirements/tools.txt\"\n\nTOOL_HASH=$(\"$PYTHON\" \"$SCRIPTS/tool-hash.py\" < \"$TOOL_REQUIREMENTS\")\n\nTOOL_VIRTUALENV=\"$VIRTUALENVS/build-$TOOL_HASH\"\nTOOL_PYTHON=\"$TOOL_VIRTUALENV/bin/python\"\n\nexport PYTHONPATH=\"$ROOT/tooling/src\"\n\nif ! \"$TOOL_PYTHON\" -m hypothesistooling check-installed ; then\n  rm -rf \"$TOOL_VIRTUALENV\"\n  \"$PYTHON\" -m pip install --upgrade pip\n  \"$PYTHON\" -m pip install --upgrade virtualenv\n  \"$PYTHON\" -m virtualenv \"$TOOL_VIRTUALENV\"\n  \"$TOOL_PYTHON\" -m pip install --no-warn-script-location -r requirements/tools.txt\nfi\n\nif [ -n \"${CI:-}\" ] ; then echo \"::endgroup::\" ; fi\n\n\"$TOOL_PYTHON\" -m hypothesistooling \"$@\"\n"
        },
        {
          "name": "conjecture-rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "guides",
          "type": "tree",
          "content": null
        },
        {
          "name": "hypothesis-python",
          "type": "tree",
          "content": null
        },
        {
          "name": "hypothesis-ruby",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper.bib",
          "type": "blob",
          "size": 10.9501953125,
          "content": "@inproceedings{DBLP:conf/icfp/ClaessenH00,\n  author    = {Koen Claessen and\n               John Hughes},\n  title     = {QuickCheck: a lightweight tool for random testing of {H}askell programs},\n  booktitle = {{Proceedings of the Fifth ACM SIGPLAN International Conference\n               on Functional Programming (ICFP '00)}},\n  pages     = {268--279},\n  year      = {2000},\n  crossref  = {DBLP:conf/icfp/2000},\n  url       = {https://doi.org/10.1145/351240.351266},\n  doi       = {10.1145/351240.351266},\n  timestamp = {Tue, 06 Nov 2018 16:59:25 +0100},\n  biburl    = {https://dblp.org/rec/bib/conf/icfp/ClaessenH00},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@proceedings{DBLP:conf/icfp/2000,\n  editor    = {Martin Odersky and\n               Philip Wadler},\n  title     = {{Proceedings of the Fifth ACM SIGPLAN International Conference\n               on Functional Programming (ICFP '00)}},\n  publisher = {{ACM}},\n  year      = {2000},\n  isbn      = {1-58113-202-6},\n  timestamp = {Tue, 11 Jun 2013 13:51:25 +0200},\n  biburl    = {https://dblp.org/rec/bib/conf/icfp/2000},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@inproceedings{DBLP:conf/erlang/ArtsHJW06,\n  author    = {Thomas Arts and\n               John Hughes and\n               Joakim Johansson and\n               Ulf T. Wiger},\n  title     = {Testing telecoms software with quviq {QuickCheck}},\n  booktitle = {{Proceedings of the 2006 ACM SIGPLAN Workshop on Erlang}},\n  pages     = {2--10},\n  year      = {2006},\n  crossref  = {DBLP:conf/erlang/2006},\n  url       = {https://doi.org/10.1145/1159789.1159792},\n  doi       = {10.1145/1159789.1159792},\n  timestamp = {Tue, 06 Nov 2018 16:59:37 +0100},\n  biburl    = {https://dblp.org/rec/bib/conf/erlang/ArtsHJW06},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@proceedings{DBLP:conf/erlang/2006,\n  editor    = {Marc Feeley and\n               Philip W. Trinder},\n  title     = {{Proceedings of the 2006 ACM SIGPLAN Workshop on Erlang}},\n  publisher = {{ACM}},\n  year      = {2006},\n  isbn      = {1-59593-490-1},\n  timestamp = {Wed, 02 Apr 2008 10:59:25 +0200},\n  biburl    = {https://dblp.org/rec/bib/conf/erlang/2006},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@misc{PraiseOfPBT,\n  title = {In Praise of Property-Based Testing},\n  howpublished = {\\url{https://increment.com/testing/in-praise-of-property-based-testing/}},\n  year={2019},\n  author={David R. MacIver},\n}\n\n@article{DBLP:journals/tse/ZellerH02,\n  author    = {Andreas Zeller and\n               Ralf Hildebrandt},\n  title     = {Simplifying and Isolating Failure-Inducing Input},\n  journal   = {{IEEE} Trans. Software Eng.},\n  volume    = {28},\n  number    = {2},\n  pages     = {183--200},\n  year      = {2002},\n  url       = {https://doi.org/10.1109/32.988498},\n  doi       = {10.1109/32.988498},\n  timestamp = {Wed, 14 Nov 2018 10:49:20 +0100},\n  biburl    = {https://dblp.org/rec/bib/journals/tse/ZellerH02},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@inproceedings{DBLP:conf/pldi/RegehrCCEEY12,\n  author    = {John Regehr and\n               Yang Chen and\n               Pascal Cuoq and\n               Eric Eide and\n               Chucky Ellison and\n               Xuejun Yang},\n  title     = {Test-case reduction for {C} compiler bugs},\n  booktitle = {{ACM SIGPLAN Conference on Programming Language Design and Implementation,\n               (PLDI '12)}},\n  pages     = {335--346},\n  year      = {2012},\n  crossref  = {DBLP:conf/pldi/2012},\n  url       = {https://doi.org/10.1145/2254064.2254104},\n  doi       = {10.1145/2254064.2254104},\n  timestamp = {Wed, 14 Nov 2018 10:54:59 +0100},\n  biburl    = {https://dblp.org/rec/bib/conf/pldi/RegehrCCEEY12},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@proceedings{DBLP:conf/pldi/2012,\n  editor    = {Jan Vitek and\n               Haibo Lin and\n               Frank Tip},\n  title     = {{ACM SIGPLAN Conference on Programming Language Design and Implementation,\n               (PLDI '12)}},\n  publisher = {{ACM}},\n  year      = {2012},\n  url       = {http://dl.acm.org/citation.cfm?id=2254064},\n  isbn      = {978-1-4503-1205-9},\n  timestamp = {Tue, 12 Jun 2012 19:17:55 +0200},\n  biburl    = {https://dblp.org/rec/bib/conf/pldi/2012},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n\n@article{astropy:2013,\nAdsnote = {Provided by the SAO/NASA Astrophysics Data System},\nAdsurl = {http://adsabs.harvard.edu/abs/2013A%26A...558A..33A},\nArchiveprefix = {arXiv},\nAuthor = {{Astropy Collaboration} and {Robitaille}, T.~P. and {Tollerud}, E.~J. and {Greenfield}, P. and {Droettboom}, M. and {Bray}, E. and {Aldcroft}, T. and {Davis}, M. and {Ginsburg}, A. and {Price-Whelan}, A.~M. and {Kerzendorf}, W.~E. and {Conley}, A. and {Crighton}, N. and {Barbary}, K. and {Muna}, D. and {Ferguson}, H. and {Grollier}, F. and {Parikh}, M.~M. and {Nair}, P.~H. and {Unther}, H.~M. and {Deil}, C. and {Woillez}, J. and {Conseil}, S. and {Kramer}, R. and {Turner}, J.~E.~H. and {Singer}, L. and {Fox}, R. and {Weaver}, B.~A. and {Zabalza}, V. and {Edwards}, Z.~I. and {Azalee Bostroem}, K. and {Burke}, D.~J. and {Casey}, A.~R. and {Crawford}, S.~M. and {Dencheva}, N. and {Ely}, J. and {Jenness}, T. and {Labrie}, K. and {Lim}, P.~L. and {Pierfederici}, F. and {Pontzen}, A. and {Ptak}, A. and {Refsdal}, B. and {Servillat}, M. and {Streicher}, O.},\nDoi = {10.1051/0004-6361/201322068},\nEid = {A33},\nEprint = {1307.6212},\nJournal = {\\aap},\nKeywords = {methods: data analysis, methods: miscellaneous, virtual observatory tools},\nMonth = oct,\nPages = {A33},\nPrimaryclass = {astro-ph.IM},\nTitle = {{Astropy: A community Python package for astronomy}},\nVolume = 558,\nYear = 2013,\nBdsk-Url-1 = {https://dx.doi.org/10.1051/0004-6361/201322068}}\n\n@article{astropy:2018,\nAdsnote = {Provided by the SAO/NASA Astrophysics Data System},\nAdsurl = {https://ui.adsabs.harvard.edu/#abs/2018AJ....156..123T},\nAuthor = {{Price-Whelan}, A.~M. and {Sip{\\H{o}}cz}, B.~M. and {G{\\\"u}nther}, H.~M. and {Lim}, P.~L. and {Crawford}, S.~M. and {Conseil}, S. and {Shupe}, D.~L. and {Craig}, M.~W. and {Dencheva}, N. and {Ginsburg}, A. and {VanderPlas}, J.~T. and {Bradley}, L.~D. and {P{\\'e}rez-Su{\\'a}rez}, D. and {de Val-Borro}, M. and {Paper Contributors}, (Primary and {Aldcroft}, T.~L. and {Cruz}, K.~L. and {Robitaille}, T.~P. and {Tollerud}, E.~J. and {Coordination Committee}, (Astropy and {Ardelean}, C. and {Babej}, T. and {Bach}, Y.~P. and {Bachetti}, M. and {Bakanov}, A.~V. and {Bamford}, S.~P. and {Barentsen}, G. and {Barmby}, P. and {Baumbach}, A. and {Berry}, K.~L. and {Biscani}, F. and {Boquien}, M. and {Bostroem}, K.~A. and {Bouma}, L.~G. and {Brammer}, G.~B. and {Bray}, E.~M. and {Breytenbach}, H. and {Buddelmeijer}, H. and {Burke}, D.~J. and {Calderone}, G. and {Cano Rodr{\\'\\i}guez}, J.~L. and {Cara}, M. and {Cardoso}, J.~V.~M. and {Cheedella}, S. and {Copin}, Y. and {Corrales}, L. and {Crichton}, D. and {D{\\textquoteright}Avella}, D. and {Deil}, C. and {Depagne}, {\\'E}. and {Dietrich}, J.~P. and {Donath}, A. and {Droettboom}, M. and {Earl}, N. and {Erben}, T. and {Fabbro}, S. and {Ferreira}, L.~A. and {Finethy}, T. and {Fox}, R.~T. and {Garrison}, L.~H. and {Gibbons}, S.~L.~J. and {Goldstein}, D.~A. and {Gommers}, R. and {Greco}, J.~P. and {Greenfield}, P. and {Groener}, A.~M. and {Grollier}, F. and {Hagen}, A. and {Hirst}, P. and {Homeier}, D. and {Horton}, A.~J. and {Hosseinzadeh}, G. and {Hu}, L. and {Hunkeler}, J.~S. and {Ivezi{\\'c}}, {\\v{Z}}. and {Jain}, A. and {Jenness}, T. and {Kanarek}, G. and {Kendrew}, S. and {Kern}, N.~S. and {Kerzendorf}, W.~E. and {Khvalko}, A. and {King}, J. and {Kirkby}, D. and {Kulkarni}, A.~M. and {Kumar}, A. and {Lee}, A. and {Lenz}, D. and {Littlefair}, S.~P. and {Ma}, Z. and {Macleod}, D.~M. and {Mastropietro}, M. and {McCully}, C. and {Montagnac}, S. and {Morris}, B.~M. and {Mueller}, M. and {Mumford}, S.~J. and {Muna}, D. and {Murphy}, N.~A. and {Nelson}, S. and {Nguyen}, G.~H. and {Ninan}, J.~P. and {N{\\\"o}the}, M. and {Ogaz}, S. and {Oh}, S. and {Parejko}, J.~K. and {Parley}, N. and {Pascual}, S. and {Patil}, R. and {Patil}, A.~A. and {Plunkett}, A.~L. and {Prochaska}, J.~X. and {Rastogi}, T. and {Reddy Janga}, V. and {Sabater}, J. and {Sakurikar}, P. and {Seifert}, M. and {Sherbert}, L.~E. and {Sherwood-Taylor}, H. and {Shih}, A.~Y. and {Sick}, J. and {Silbiger}, M.~T. and {Singanamalla}, S. and {Singer}, L.~P. and {Sladen}, P.~H. and {Sooley}, K.~A. and {Sornarajah}, S. and {Streicher}, O. and {Teuben}, P. and {Thomas}, S.~W. and {Tremblay}, G.~R. and {Turner}, J.~E.~H. and {Terr{\\'o}n}, V. and {van Kerkwijk}, M.~H. and {de la Vega}, A. and {Watkins}, L.~L. and {Weaver}, B.~A. and {Whitmore}, J.~B. and {Woillez}, J. and {Zabalza}, V. and {Contributors}, (Astropy},\nDoi = {10.3847/1538-3881/aabc4f},\nEid = {123},\nJournal = {\\aj},\nKeywords = {methods: data analysis, methods: miscellaneous, methods: statistical, reference systems, Astrophysics - Instrumentation and Methods for Astrophysics},\nMonth = Sep,\nPages = {123},\nPrimaryclass = {astro-ph.IM},\nTitle = {{The Astropy Project: Building an Open-science Project and Status of the v2.0 Core Package}},\nVolume = {156},\nYear = 2018,\nBdsk-Url-1 = {https://doi.org/10.3847/1538-3881/aabc4f}}\n\n@article{DBLP:journals/cse/WaltCV11,\n  author    = {St{\\'{e}}fan van der Walt and\n               S. Chris Colbert and\n               Ga{\\\"{e}}l Varoquaux},\n  title     = {The {NumPy} Array: {A} Structure for Efficient Numerical Computation},\n  journal   = {Computing in Science and Engineering},\n  volume    = {13},\n  number    = {2},\n  pages     = {22--30},\n  year      = {2011},\n  url       = {https://doi.org/10.1109/MCSE.2011.37},\n  doi       = {10.1109/MCSE.2011.37},\n  timestamp = {Wed, 14 Nov 2018 10:48:31 +0100},\n  biburl    = {https://dblp.org/rec/bib/journals/cse/WaltCV11},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@inproceedings{DBLP:conf/issta/LoscherS17,\n  author    = {Andreas L{\\\"{o}}scher and\n               Konstantinos Sagonas},\n  title     = {Targeted property-based testing},\n  booktitle = {{Proceedings of the 26th ACM SIGSOFT International Symposium on\n               Software Testing and Analysis}},\n  pages     = {46--56},\n  year      = {2017},\n  crossref  = {DBLP:conf/issta/2017},\n  url       = {https://doi.org/10.1145/3092703.3092711},\n  doi       = {10.1145/3092703.3092711},\n  timestamp = {Wed, 25 Sep 2019 18:08:21 +0200},\n  biburl    = {https://dblp.org/rec/bib/conf/issta/LoscherS17},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n@proceedings{DBLP:conf/issta/2017,\n  editor    = {Tevfik Bultan and\n               Koushik Sen},\n  title     = {{Proceedings of the 26th ACM SIGSOFT International Symposium on\n               Software Testing and Analysis}},\n  publisher = {{ACM}},\n  year      = {2017},\n  url       = {https://doi.org/10.1145/3092703},\n  doi       = {10.1145/3092703},\n  isbn      = {978-1-4503-5076-1},\n  timestamp = {Tue, 06 Nov 2018 16:57:30 +0100},\n  biburl    = {https://dblp.org/rec/bib/conf/issta/2017},\n  bibsource = {dblp computer science bibliography, https://dblp.org}\n}\n\n\n"
        },
        {
          "name": "paper.md",
          "type": "blob",
          "size": 6.5927734375,
          "content": "---\ntitle: 'Hypothesis: A new approach to property-based testing'\ndate: 1 November 2019\nbibliography: paper.bib\ntags:\n    - Python\n    - testing\n    - test-case reduction\n    - test-case generation\n    - property-based testing\nauthors:\n    - name: David R. MacIver\n      orcid: 0000-0002-8635-3223\n      affiliation: 1\n    - name: Zac Hatfield-Dodds\n      orcid: 0000-0002-8646-8362\n      affiliation: 2\n    - name: many other contributors\n      affiliation: 3\naffiliations:\n    - name: Imperial College London\n      index: 1\n    - name: Australian National University\n      index: 2\n    - name: Various\n      index: 3\n---\n\n# Summary\n\n*Property-based testing* is a style of testing popularised by the QuickCheck family of libraries,\nfirst in Haskell [@DBLP:conf/icfp/ClaessenH00] and later in Erlang [@DBLP:conf/erlang/ArtsHJW06],\nwhich integrates generated test cases into existing software testing workflows:\nInstead of tests that provide examples of a single concrete behaviour,\ntests specify properties that hold for a wide range of inputs,\nwhich the testing library then attempts to generate test cases to refute.\nFor a general introduction to property-based testing, see [@PraiseOfPBT].\n\nHypothesis is a mature and widely used property-based testing library for Python.\nIt has over 100,000 downloads per week^[https://pypistats.org/packages/hypothesis], thousands of open source projects use it^[https://github.com/HypothesisWorks/hypothesis/network/dependents],\nand in 2018 more than 4% of Python users surveyed by the PSF reported using it^[https://www.jetbrains.com/research/python-developers-survey-2018/].\nIt will be of interest both to researchers using Python for developing scientific software,\nand to software testing researchers as a platform for research in its own right.\n\n# Hypothesis for Testing Scientific Software\n\nPython has a rich and thriving ecosystem of scientific software, and Hypothesis is helpful for ensuring its correctness.\nAny researcher who tests their software in Python can benefit from these facilities,\nbut it is particularly useful for improving the correctness foundational libraries on which the scientific software ecosystem is built.\nFor example, it has found bugs in astropy [@astropy:2018]^[e.g. https://github.com/astropy/astropy/pull/9328, https://github.com/astropy/astropy/pull/9532] and numpy [@DBLP:journals/cse/WaltCV11]^[e.g. https://github.com/numpy/numpy/issues/10930, https://github.com/numpy/numpy/issues/13089, https://github.com/numpy/numpy/issues/14239].\n\nAdditionally, Hypothesis is easily extensible, and has a number of third-party extensions for specific research applications.\nFor example, hypothesis-networkx^[https://pypi.org/project/hypothesis-networkx/] generates graph data structures,\nand hypothesis-bio^[https://pypi.org/project/hypothesis-bio/] generates formats suitable for bioinformatics.\nAs it is used by more researchers, the number of research applications will only increase.\n\nBy lowering the barrier to effective testing, Hypothesis makes testing of research software written in Python much more compelling,\nand has the potential to significantly improve the quality of the associated scientific research as a result.\n\n# Hypothesis for Software Testing Research\n\nHypothesis is a powerful platform for software testing research,\nboth because of the wide array of software that can be easily tested with it,\nand because it has a novel implementation that solves a major difficulty faced by prior software testing research.\n\nMuch of software testing research boils down to variants on the following problem:\nGiven some interestingness condition (e.g., that it triggers a bug in some software),\nhow do we generate a \"good\" test case that satisfies that condition?\n\nParticular sub-problems of this are:\n\n1. How do we generate test cases that satisfy difficult interestingness conditions?\n2. How do we ensure we generate only valid test cases? (the *test-case validity problem* - see @DBLP:conf/pldi/RegehrCCEEY12)\n3. How do we generate human readable test cases?\n\nTraditionally property-based testing has adopted random test-case generation to find interesting test cases,\nfollowed by test-case reduction (see @DBLP:conf/pldi/RegehrCCEEY12, @DBLP:journals/tse/ZellerH02) to turn them into more human readable ones,\nrequiring the users to manually specify a *validity oracle* (a predicate that identifies if an arbitrary test case is valid) to avoid invalid test cases.\n\nThe chief limitations of this from a user's point of view are:\n\n* Writing correct validity oracles is difficult and annoying.\n* Random generation, while often much better than hand-written examples, is not especially good at satisfying difficult properties.\n* Writing test-case reducers that work well for your problem domain is a specialised skill that few people have or want to acquire.\n\nThe chief limitation from a researcher's point of view is that trying to improve on random generation's ability to find bugs will typically require modification of existing tests to support new ways of generating data,\nand typically these modifications are significantly more complex than writing the random generator would have been.\nUsers are rarely going to be willing to undertake the work themselves,\nwhich leaves researchers in the unfortunate position of having to put in a significant amount of work per project to understand how to test it.\n\nHypothesis avoids both of these problems by using a single universal representation for test cases.\nEnsuring that test cases produced from this format are valid is relatively easy, no more difficult than ensuring that randomly generated tests cases are valid,\nand improvements to the generation process can operate solely on this universal representation rather than requiring adapting to each test.\n\nCurrently Hypothesis uses this format to support two major use cases:\n\n1. It is the basis of its approach to test-case reduction, allowing it to support more powerful test-case reduction than is found in most property-based testing libraries with no user intervention.\n2. It supports Targeted Property-Based Testing [@DBLP:conf/issta/LoscherS17], which uses a score to guide testing towards a particular goal (e.g., maximising an error term). In the original implementation this would require custom mutation operators per test,\n   but in Hypothesis this mutation is transparent to the user and they need only specify the goal.\n\nThe internal format is flexible and contains rich information about the structure of generated test cases,\nso it is likely future versions of the software will see other features built on top of it,\nand we hope researchers will use it as a vehicle to explore other interesting possibilities for test-case generation.\n\n# References\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.408203125,
          "content": "[tool.ruff]\nline-length = 125\ntarget-version = \"py38\"\n\n[tool.ruff.lint]\nselect = [\n  \"ASYNC\",  # flake8-async\n  \"B\",      # flake8-bugbear\n  \"C4\",     # flake8-comprehensions\n  \"COM\",    # flake8-commas\n  \"DJ\",     # flake8-django\n  \"E\",      # pycodestyle\n  \"F\",      # Pyflakes\n  \"FBT\",    # flake8-boolean-trap\n  \"FLY\",    # flynt\n  \"G\",      # flake8-logging-format\n  \"INT\",    # flake8-gettext\n  \"ISC\",    # flake8-implicit-str-concat\n  \"NPY\",    # NumPy-specific rules\n  \"PD\",     # pandas-vet\n  \"PIE\",    # flake8-pie\n  \"PLE\",    # Pylint errors\n  \"PT\",     # flake8-pytest-style\n  \"RET504\", # flake8-return\n  \"RSE\",    # flake8-raise\n  \"SIM\",    # flake8-simplify\n  \"T10\",    # flake8-debugger\n  \"TID\",    # flake8-tidy-imports\n  \"UP\",     # pyupgrade\n  \"W\",      # pycodestyle\n  \"YTT\",    # flake8-2020\n  \"RUF\",    # Ruff-specific rules\n]\nignore = [\n  \"B008\",\n  \"B018\",\n  \"C408\",\n  \"COM812\",\n  \"DJ007\",\n  \"DJ008\",\n  \"E721\",\n  \"E731\",\n  \"E741\",\n  \"FBT003\",\n  \"PD011\",\n  \"PD901\",\n  \"PIE790\",  # See https://github.com/astral-sh/ruff/issues/10538\n  \"PT001\",\n  \"PT003\",\n  \"PT006\",\n  \"PT007\",\n  \"PT009\",\n  \"PT011\",\n  \"PT012\",\n  \"PT013\",\n  \"PT017\",\n  \"PT019\",\n  \"PT023\",\n  \"PT027\",\n  \"RUF001\",  # don't break our tests by rewriting confusables\n  \"RUF005\",\n  \"RUF017\",\n  \"SIM102\",\n  \"SIM105\",\n  \"SIM108\",\n  \"SIM114\",\n  \"SIM117\",\n  \"SIM300\",\n  \"UP031\",\n  \"UP037\",\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"hypothesis-python/src/hypothesis/core.py\" = [\"B030\", \"B904\", \"FBT001\"]\n\"hypothesis-python/src/hypothesis/internal/compat.py\" = [\"F401\"]\n\"hypothesis-python/src/hypothesis/internal/conjecture/data.py\" = [\"FBT001\"]\n\"hypothesis-python/src/hypothesis/internal/conjecture/datatree.py\" = [\"FBT001\"]\n\"hypothesis-python/tests/nocover/test_imports.py\" = [\"F403\", \"F405\"]\n\"hypothesis-python/tests/numpy/test_randomness.py\" = [\"NPY002\"]\n\"hypothesis-python/src/hypothesis/internal/conjecture/*\" = [\"B023\"]\n\"hypothesis-python/tests/conjecture/test_data_tree.py\" = [\"B023\"]\n\"hypothesis-python/tests/conjecture/test_test_data.py\" = [\"FBT001\"]\n\n[tool.mypy]\npython_version = \"3.10\"\nplatform = \"linux\"\n\nallow_redefinition = true\ndisallow_untyped_decorators = true\ndisallow_incomplete_defs = true\nno_implicit_optional = true\nno_implicit_reexport = true\n\nfollow_imports = \"silent\"\nignore_missing_imports = true\n\nstrict_equality = true\nwarn_no_return = true\nwarn_unused_ignores = true\nwarn_unused_configs = true\nwarn_redundant_casts = true\n\ndisable_error_code = \"annotation-unchecked\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 1.24609375,
          "content": "[pytest]\n\n# -rfEX :: Print a summary of failures, errors, and xpasses (xfails that pass).\naddopts =\n    -rfEX\n    --strict-markers\n    --tb=native\n    -p pytester\n    -p no:legacypath\n    --runpytest=subprocess\n    --durations=20\n    --durations-min=1.0\nxfail_strict = True\nfilterwarnings =\n    error\n    # https://github.com/pandas-dev/pandas/issues/41199\n    default:Creating a LegacyVersion has been deprecated and will be removed in the next major release:DeprecationWarning\n    default:distutils Version classes are deprecated\\. Use packaging\\.version instead:DeprecationWarning\n    # https://github.com/pandas-dev/pandas/issues/32056 (?)\n    default:numpy\\.ufunc size changed, may indicate binary incompatibility\\. Expected 216 from C header, got 232 from PyObject:RuntimeWarning\n    # https://github.com/pandas-dev/pandas/issues/34848\n    default:`np\\.bool` is a deprecated alias for the builtin `bool`:DeprecationWarning\n    default:`np\\.complex` is a deprecated alias for the builtin `complex`:DeprecationWarning\n    default:`np\\.object` is a deprecated alias for the builtin `object`:DeprecationWarning\n    # pytest-cov can't see into subprocesses; we'll see <100% covered if this is an issue\n    ignore:Module hypothesis.* was previously imported, but not measured\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tooling",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        },
        {
          "name": "whole_repo_tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}