{
  "metadata": {
    "timestamp": 1736560648270,
    "page": 287,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vitalik/django-ninja",
      "stars": 7575,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "*.pyc\n.venv*\n.vscode\n.mypy_cache\n.coverage\nhtmlcov\n\ndist\ntest.py\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "*.pyc\n.venv*\n.vscode\n.mypy_cache\n.coverage\nhtmlcov\n/coverage.xml\n\ndist\ntest.py\n\ndocs/site\n\n.DS_Store\n.idea\n.python-version\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5263671875,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.2.0\n    hooks:\n      - id: check-yaml\n      # - id: end-of-file-fixer\n      # - id: trailing-whitespace\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.7.1\n    hooks:\n      - id: mypy\n        additional_dependencies: [\"django-stubs\", \"pydantic\"]\n        exclude: (tests|docs)/\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.4.2\n    hooks:\n      - id: ruff-format\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2275390625,
          "content": "# Contributing\n\nDjango Ninja uses Flit to build, package and publish the project.\n\nto install it use:\n\n```\npip install flit\n```\n\nOnce you have it - to install all dependencies required for development and testing  use this command:\n\n\n```\nflit install --deps develop --symlink\n```\n\nOnce done you can check if all works with \n\n```\npytest .\n```\n\nor using Makefile:\n\n```\nmake test\n```\n\nNow you are ready to make your contribution\n\n\nWhen you're done please make sure you to test your functionality \nand check the coverage of your contribution.\n\n```\npytest --cov=ninja --cov-report term-missing tests\n```\n\nor using Makefile:\n\n```\nmake test-cov\n```\n \n## Code style\n\nDjango Ninja uses `ruff`, and `mypy` for style checks.\n\nRun `pre-commit install` to create a git hook to fix your styles before you commit.\n\nAlternatively, manually check your code with:\n\n```\nruff format --check ninja tests\nruff check ninja tests\nmypy ninja\n```\n\nor using Makefile:\n\n```\nmake lint\n```\n\nOr reformat your code with:\n\n```\nruff format ninja tests\nruff check ninja tests --fix\n```\n\nor using Makefile:\n\n```\nmake fmt\n```\n \n## Docs\nPlease do not forget to document your contribution\n\nDjango Ninja uses `mkdocs`:\n\n```\ncd docs/\nmkdocs serve\n```\nand go to browser to see changes in real time\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2025 Vitaliy Kucheryaviy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7900390625,
          "content": ".DEFAULT_GOAL := help\n\n.PHONY: help\nhelp:\n\t@fgrep -h \"##\" $(MAKEFILE_LIST) | fgrep -v fgrep | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n.PHONY: install\ninstall: ## Install dependencies\n\tflit install --deps develop --symlink\n\n.PHONY: lint\nlint: ## Run code linters\n\truff format --preview --check ninja tests\n\truff check --preview ninja tests\n\tmypy ninja\n\n.PHONY: fmt format\nfmt format: ## Run code formatters\n\truff format --preview ninja tests\n\truff check --preview --fix ninja tests \n\n.PHONY: test\ntest: ## Run tests\n\tpytest .\n\n.PHONY: test-cov\ntest-cov: ## Run tests with coverage\n\tpytest --cov=ninja --cov-report term-missing tests\n\n.PHONY: docs\ndocs: ## Serve documentation locally\n\tpip install -r docs/requirements.txt\n\tcd docs && mkdocs serve -a localhost:8090\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.49609375,
          "content": "<a href=\"https://github.com/vitalik/django-ninja/issues/383\"><img width=\"814\" alt=\"SCR-20230123-m1t\" src=\"https://user-images.githubusercontent.com/95222/214056666-585c0479-c122-4cb3-add4-b8844088ccdd.png\"></a>\n\n\n\n<a href=\"https://github.com/vitalik/django-ninja/issues/383\">^ Please read ^</a>\n\n\n\n\n<p align=\"center\">\n  <a href=\"https://django-ninja.dev/\"><img src=\"https://django-ninja.dev/img/logo-big.png\"></a>\n</p>\n<p align=\"center\">\n    <em>Fast to learn, fast to code, fast to run</em>\n</p>\n\n\n![Test](https://github.com/vitalik/django-ninja/actions/workflows/test_full.yml/badge.svg)\n![Coverage](https://img.shields.io/codecov/c/github/vitalik/django-ninja)\n[![PyPI version](https://badge.fury.io/py/django-ninja.svg)](https://badge.fury.io/py/django-ninja)\n[![Downloads](https://static.pepy.tech/personalized-badge/django-ninja?period=month&units=international_system&left_color=black&right_color=brightgreen&left_text=downloads/month)](https://pepy.tech/project/django-ninja)\n\n# Django Ninja - Fast Django REST Framework\n\n**Django Ninja** is a web framework for building APIs with **Django** and Python 3.6+ **type hints**.\n\n\n **Key features:**\n\n  - **Easy**: Designed to be easy to use and intuitive.\n  - **FAST execution**: Very high performance thanks to **<a href=\"https://pydantic-docs.helpmanual.io\" target=\"_blank\">Pydantic</a>** and **<a href=\"/docs/docs/guides/async-support.md\">async support</a>**.\n  - **Fast to code**: Type hints and automatic docs lets you focus only on business logic.\n  - **Standards-based**: Based on the open standards for APIs: **OpenAPI** (previously known as Swagger) and **JSON Schema**.\n  - **Django friendly**: (obviously) has good integration with the Django core and ORM.\n  - **Production ready**: Used by multiple companies on live projects (If you use django-ninja and would like to publish your feedback, please email ppr.vitaly@gmail.com).\n\n\n\n![Django Ninja REST Framework](docs/docs/img/benchmark.png)\n\n**Documentation**: https://django-ninja.dev\n\n---\n\n## Installation\n\n```\npip install django-ninja\n```\n\n\n\n## Usage\n\n\nIn your django project next to urls.py create new `api.py` file:\n\n```Python\nfrom ninja import NinjaAPI\n\napi = NinjaAPI()\n\n\n@api.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n```\n\n\nNow go to `urls.py` and add the following:\n\n\n```Python hl_lines=\"3 7\"\n...\nfrom .api import api\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),  # <---------- !\n]\n```\n\n**That's it !**\n\nNow you've just created an API that:\n\n - receives an HTTP GET request at `/api/add`\n - takes, validates and type-casts GET parameters `a` and `b`\n - decodes the result to JSON\n - generates an OpenAPI schema for defined operation\n\n### Interactive API docs\n\nNow go to <a href=\"http://127.0.0.1:8000/api/docs\" target=\"_blank\">http://127.0.0.1:8000/api/docs</a>\n\nYou will see the automatic interactive API documentation (provided by <a href=\"https://github.com/swagger-api/swagger-ui\" target=\"_blank\">Swagger UI</a> or <a href=\"https://github.com/Redocly/redoc\" target=\"_blank\">Redoc</a>):\n\n\n![Swagger UI](docs/docs/img/index-swagger-ui.png)\n\n## What next?\n\n - Read the full documentation here - https://django-ninja.dev\n - To support this project, please give star it on Github. ![github star](docs/docs/img/github-star.png)\n - Share it [via Twitter](https://twitter.com/intent/tweet?text=Check%20out%20Django%20Ninja%20-%20Fast%20Django%20REST%20Framework%20-%20https%3A%2F%2Fdjango-ninja.dev)\n - If you already using django-ninja, please share your feedback to ppr.vitaly@gmail.com\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.42578125,
          "content": "[mypy]\npython_version = 3.8\n\nshow_column_numbers = True\nshow_error_codes = True\n\nfollow_imports = normal\nignore_missing_imports = True\n\n# be strict\ndisallow_untyped_calls = True\nwarn_return_any = True\nstrict_optional = True\nwarn_no_return = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\n\ndisallow_untyped_defs = True\ncheck_untyped_defs = True\nno_implicit_reexport = True\n\n[mypy-ninja.compatibility.*]\nignore_errors = True\n"
        },
        {
          "name": "ninja",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.8134765625,
          "content": "[build-system]\nrequires = [\"flit_core >=2,<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.metadata]\nmodule = \"ninja\"\ndist-name = \"django-ninja\"\nauthor = \"Vitaliy Kucheryaviy\"\nauthor-email = \"ppr.vitaly@gmail.com\"\nhome-page = \"https://django-ninja.dev\"\nclassifiers = [\n    \"Intended Audience :: Information Technology\",\n    \"Intended Audience :: System Administrators\",\n    \"Operating System :: OS Independent\",\n    \"Development Status :: 5 - Production/Stable\",\n    \"Topic :: Internet\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Software Development\",\n    \"Typing :: Typed\",\n    \"Environment :: Web Environment\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Framework :: Django\",\n    \"Framework :: Django :: 3.1\",\n    \"Framework :: Django :: 3.2\",\n    \"Framework :: Django :: 4.1\",\n    \"Framework :: Django :: 4.2\",\n    \"Framework :: Django :: 5.0\",\n    \"Framework :: Django :: 5.1\",\n    \"Framework :: AsyncIO\",\n    \"Topic :: Internet :: WWW/HTTP :: HTTP Servers\",\n    \"Topic :: Internet :: WWW/HTTP\",\n]\n\nrequires = [\"Django >=3.1\", \"pydantic >=2.0,<3.0.0\"]\ndescription-file = \"README.md\"\nrequires-python = \">=3.7\"\n\n\n[tool.flit.metadata.urls]\nDocumentation = \"https://django-ninja.dev\"\nRepository = \"https://github.com/vitalik/django-ninja\"\n\n\n[tool.flit.metadata.requires-extra]\ntest = [\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-django\",\n    \"pytest-asyncio\",\n    \"psycopg2-binary\",\n    \"mypy==1.7.1\",\n    \"ruff==0.5.7\",\n    \"django-stubs\",\n]\ndoc = [\"mkdocs\", \"mkdocs-material\", \"markdown-include\", \"mkdocstrings\"]\ndev = [\"pre-commit\"]\n\n\n[tool.ruff]\ntarget-version = \"py37\"\n\n[tool.ruff.lint]\nselect = [\n    \"B\",    # flake8-bugbear\n    \"C\",    # flake8-comprehensions\n    \"E\",    # pycodestyle errors\n    \"F\",    # pyflakes\n    \"FURB\", # refurb\n    \"I\",    # isort\n    \"PTH\",  # flake8-use-pathlib\n    \"UP\",   # pyupgrade\n    \"W\",    # pycodestyle warnings\n]\nignore = [\n    \"E501\", # line too long, handled by black\n    \"B008\", # do not perform function calls in argument defaults\n    \"C901\", # too complex\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"ninja/compatibility/datastructures.py\" = [\"C416\"]\n\"ninja/utils.py\" = [\"B004\"]\n\"tests/*\" = [\"C408\"]\n\n\n[tool.coverage.run]\nomit = [\"ninja/compatibility/*\"]\nbranch = true\n\n[tool.coverage.report]\nfail_under = 100\nskip_covered = true\nshow_missing = true\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}