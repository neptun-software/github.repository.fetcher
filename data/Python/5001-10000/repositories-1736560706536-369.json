{
  "metadata": {
    "timestamp": 1736560706536,
    "page": 369,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HIPS/autograd",
      "stars": 7087,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.66015625,
          "content": "__pycache__/\n*.py[cod]\n*$py.class\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\ncoverage.*\n*.cover\n.hypothesis/\nnosetests.xml\n.pytest_cache/\njunit-report.xml\n\n# pyenv\n.python-version\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# mypy\n.mypy_cache/\n\n# OS and IDE config files\n.DS_Store\n.idea/\n\n# project-specific\ndata/\n*.so\n*.c\nscratch/\nexamples/data\n\n.asv/\nasv.conf.json\nbenchmarks/asv.conf.js\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.9130859375,
          "content": "ci:\n  autoupdate_commit_msg: \"chore: update pre-commit hooks\"\n  autofix_commit_msg: \"style: pre-commit fixes\"\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-added-large-files\n      - id: check-case-conflict\n      - id: check-merge-conflict\n      - id: check-yaml\n        exclude: conda_recipe/conda.yaml\n      - id: debug-statements\n      - id: end-of-file-fixer\n      - id: mixed-line-ending\n      - id: trailing-whitespace\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: \"v0.8.6\"\n    hooks:\n      - id: ruff\n        args: [\"--fix\", \"--show-fixes\"]\n      - id: ruff-format\n\n  - repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n      - id: python-check-blanket-type-ignore\n        exclude: ^src/vector/backends/_numba_object.py$\n      - id: rst-backticks\n      - id: rst-directive-colons\n      - id: rst-inline-touching-normal\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.447265625,
          "content": "# Contributing\n\nUse [Nox](https://nox.thea.codes/en/stable/) to run tests and linting, e.g.,\n\n```shell\npip install nox\n```\n\n`nox` will run all checks in an isolated virtual environment with Autograd and its dependencies, including its optional dependencies, installed.\n\n## Run tests, linting, packaging checks\n\n| Command                   | Description                                                                                                                                                     |\n| ------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `nox --list`              | Lists all available Nox sessions, including selected ones                                                                                                       |\n| `nox -s lint`             | Runs code style checks with pre-commit and pre-commit hooks as listed in `.pre-commit-config.yaml`. Accepts posargs to pass additional arguments to the linter. |\n| `nox -s tests`            | Runs tests with your default Python interpreter. Accepts posargs to pass additional arguments and configuration to `pytest`.                                    |\n| `nox -s nightly-tests`    | Similar to `nox -s tests`, except that it runs tests with nightly versions of dependencies (NumPy, SciPy, etc.).                                                |\n| `nox -s validate-package` | Builds a source distribution and a wheel using `pypa/build` and checks the package with `twine` in strict mode.                                                 |\n| `nox`                     | Runs all selected sessions, as listed in `nox.options.sessions` in `noxfile.py`.                                                                                |\n\nAdditionally, `nox` supports tags to run specific sessions, e.g., `nox --tags tests` runs all sessions tagged with `tests`.\n\nMake sure all tests pass before you push your changes to GitHub.\nGH Actions will run the tests across all supported Python versions.\n\n## Using positional arguments (reformat, upload package, help)\n\nYou can use additional arguments for the tools (`pytest`, `pre-commit`, etc.) called by Nox by\nseparating them from the Nox arguments by a double-hyphen `--`, e.g.,\n\n- `nox -s tests -- --tests/test_tuple.py` runs just the tests listed `tests/test_tuple.py`.\n- `nox -s lint -- --fix` runs the linter with the `--fix` flag.\n- and so on.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.66796875,
          "content": "# Autograd  [![Checks status][checks-badge]][checks-url] [![Tests status][tests-badge]][tests-url] [![Publish status][publish-badge]][publish-url] [![asv][asv-badge]](#)\n\n[publish-badge]: https://github.com/HIPS/autograd/actions/workflows/publish.yml/badge.svg\n[checks-badge]: https://github.com/HIPS/autograd/actions/workflows/check.yml/badge.svg\n[tests-badge]: https://github.com/HIPS/autograd/actions/workflows/test.yml/badge.svg\n[asv-badge]: http://img.shields.io/badge/benchmarked%20by-asv-green.svg?style=flat\n[publish-url]: https://github.com/HIPS/autograd/actions/workflows/publish.yml\n[checks-url]: https://github.com/HIPS/autograd/actions/workflows/check.yml\n[tests-url]: https://github.com/HIPS/autograd/actions/workflows/test.yml\n\nAutograd can automatically differentiate native Python and Numpy code. It can\nhandle a large subset of Python's features, including loops, ifs, recursion and\nclosures, and it can even take derivatives of derivatives of derivatives. It\nsupports reverse-mode differentiation (a.k.a. backpropagation), which means it\ncan efficiently take gradients of scalar-valued functions with respect to\narray-valued arguments, as well as forward-mode differentiation, and the two can\nbe composed arbitrarily. The main intended application of Autograd is\ngradient-based optimization. For more information, check out the\n[tutorial](docs/tutorial.md) and the [examples directory](examples/).\n\nExample use:\n\n```python\n>>> import autograd.numpy as np  # Thinly-wrapped numpy\n>>> from autograd import grad    # The only autograd function you may ever need\n>>>\n>>> def tanh(x):                 # Define a function\n...     return (1.0 - np.exp((-2 * x))) / (1.0 + np.exp(-(2 * x)))\n...\n>>> grad_tanh = grad(tanh)       # Obtain its gradient function\n>>> grad_tanh(1.0)               # Evaluate the gradient at x = 1.0\nnp.float64(0.419974341614026)\n>>> (tanh(1.0001) - tanh(0.9999)) / 0.0002  # Compare to finite differences\nnp.float64(0.41997434264973155)\n```\n\nWe can continue to differentiate as many times as we like, and use numpy's\nvectorization of scalar-valued functions across many different input values:\n\n```python\n>>> from autograd import elementwise_grad as egrad  # for functions that vectorize over inputs\n>>> import matplotlib.pyplot as plt\n>>> x = np.linspace(-7, 7, 700)\n>>> plt.plot(x, tanh(x),\n...          x, egrad(tanh)(x),                                     # first  derivative\n...          x, egrad(egrad(tanh))(x),                              # second derivative\n...          x, egrad(egrad(egrad(tanh)))(x),                       # third  derivative\n...          x, egrad(egrad(egrad(egrad(tanh))))(x),                # fourth derivative\n>>> plt.show()\n```\n\n<img src=\"examples/tanh.png\" width=\"600\">\n\nSee the [tanh example file](examples/tanh.py) for the code.\n\n## Documentation\n\nYou can find a tutorial [here.](docs/tutorial.md)\n\n## End-to-end examples\n\n* [Simple neural net](examples/neural_net.py)\n* [Convolutional neural net](examples/convnet.py)\n* [Recurrent neural net](examples/rnn.py)\n* [LSTM](examples/lstm.py)\n* [Neural Turing Machine](https://github.com/DoctorTeeth/diffmem/blob/512aadeefd6dbafc1bdd253a64b6be192a435dc3/ntm/ntm.py)\n* [Backpropagating through a fluid simulation](examples/fluidsim/fluidsim.py)\n\n<img src=\"examples/fluidsim/animated.gif\" width=\"400\">\n\n* [Variational inference in Bayesian neural network](examples/bayesian_neural_net.py)\n* [Gaussian process regression](examples/gaussian_process.py)\n* [Sampyl, a pure Python MCMC package with HMC and NUTS](https://github.com/mcleonard/sampyl)\n\n## How to install\n\nInstall Autograd using Pip:\n\n```shell\npip install autograd\n```\n\nSome features require SciPy, which you can install separately or as an\noptional dependency along with Autograd:\n\n```shell\npip install \"autograd[scipy]\"\n```\n\n## Authors and maintainers\n\nAutograd was written by [Dougal Maclaurin](https://dougalmaclaurin.com),\n[David Duvenaud](https://www.cs.toronto.edu/~duvenaud/),\n[Matt Johnson](http://people.csail.mit.edu/mattjj/),\n[Jamie Townsend](https://github.com/j-towns)\nand many other contributors. The package is currently being maintained by\n[Agriya Khetarpal](https://github.com/agriyakhetarpal),\n[Fabian Joswig](https://github.com/fjosw) and\n[Jamie Townsend](https://github.com/j-towns).\nPlease feel free to submit any bugs or\nfeature requests. We'd also love to hear about your experiences with Autograd\nin general. Drop us an email!\n\nWe want to thank Jasper Snoek and the rest of the HIPS group (led by Prof. Ryan\nP. Adams) for helpful contributions and advice; Barak Pearlmutter for\nfoundational work on automatic differentiation and for guidance on our\nimplementation; and Analog Devices Inc. (Lyric Labs) and Samsung Advanced Institute\nof Technology for their generous support.\n"
        },
        {
          "name": "autograd",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "conda_recipe",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.0908203125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2025 by the President and Fellows of Harvard University\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 2.12109375,
          "content": "import platform\n\nimport nox\n\nNIGHTLY_INDEX_URL = \"https://pypi.anaconda.org/scientific-python-nightly-wheels/simple\"\nUV_NIGHTLY_ENV_VARS = {\n    \"UV_INDEX_URL\": NIGHTLY_INDEX_URL,\n    \"UV_PRERELEASE\": \"allow\",\n    \"UV_INDEX_STRATEGY\": \"first-index\",\n    \"UV_NO_CACHE\": \"true\",\n}\n\nnox.needs_version = \">=2024.4.15\"\nnox.options.default_venv_backend = \"uv|virtualenv\"\nnox.options.reuse_existing_virtualenvs = False\nnox.options.error_on_external_run = True\n# nox.options.sessions = [\"lint\", \"validate-package\", \"tests\"]\nnox.options.sessions = [\"tests\"]\n\n\n@nox.session(name=\"validate-package\")\ndef check(session):\n    \"\"\"Build source distribution, wheel, and check their metadata\"\"\"\n    session.install(\"build\", \"twine\", silent=False)\n    session.run(\"python\", \"-m\", \"build\")\n    session.run(\"twine\", \"check\", \"--strict\", \"dist/*\")\n\n\n@nox.session(name=\"tests\", tags=[\"tests\"])\ndef run_tests(session):\n    \"\"\"Run unit tests and generate a coverage report\"\"\"\n    # SciPy doesn't have wheels on PyPy\n    if platform.python_implementation() == \"PyPy\":\n        session.install(\"-e\", \".[test]\", silent=False)\n    else:\n        session.install(\"-e\", \".[test,scipy]\", silent=False)\n    session.run(\"pytest\", \"--cov=autograd\", \"--cov-report=xml\", \"--cov-append\", *session.posargs)\n\n\n@nox.session(name=\"lint\", reuse_venv=True)\ndef ruff(session):\n    \"\"\"Lightning-fast linting for Python\"\"\"\n    session.install(\"pre-commit\", silent=False)\n    session.run(\"pre-commit\", \"run\", \"--all-files\", \"--show-diff-on-failure\")\n\n\n@nox.session(name=\"nightly-tests\", tags=[\"tests\"])\ndef run_nightly_tests(session):\n    \"\"\"Run tests against nightly versions of dependencies\"\"\"\n    session.install(\"-e\", \".[test]\", silent=False)\n    # SciPy doesn't have wheels on PyPy\n    if platform.python_implementation() == \"PyPy\":\n        session.install(\n            \"numpy\", \"--upgrade\", \"--only-binary\", \":all:\", silent=False, env=UV_NIGHTLY_ENV_VARS\n        )\n    else:\n        session.install(\n            \"numpy\", \"scipy\", \"--upgrade\", \"--only-binary\", \":all:\", silent=False, env=UV_NIGHTLY_ENV_VARS\n        )\n    session.run(\"pytest\", \"--cov=autograd\", \"--cov-report=xml\", \"--cov-append\", *session.posargs)\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.08984375,
          "content": "[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"autograd\"\nversion = \"1.7.0\"\nrequires-python = \">=3.9\"\ndescription = \"Efficiently computes derivatives of NumPy code.\"\nreadme = \"README.md\"\nlicense = {file = \"license.txt\"}\nauthors = [\n  {name = \"Dougal Maclaurin\", email = \"maclaurin@physics.harvard.edu\"},\n  {name = \"David Duvenaud\", email = \"duvenaud@cs.toronto.edu\"},\n  {name = \"Matthew Johnson\", email = \"mattjj@csail.mit.edu\"},\n  {name = \"Jamie Townsend\", email = \"j.h.n.townsend@uva.nl\"},\n]\nmaintainers = [\n  {name = \"Jamie Townsend\", email = \"j.h.n.townsend@uva.nl\"},\n  {name = \"Fabian Joswig\", email = \"fabian.joswig@uni-muenster.de\"},\n  {name = \"Agriya Khetarpal\", email = \"agriyakhetarpal@outlook.com\"},\n]\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Intended Audience :: Information Technology\",\n  \"Intended Audience :: Science/Research\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Topic :: Scientific/Engineering\",\n]\nkeywords = [\n  \"Automatic differentiation\",\n  \"backpropagation\",\n  \"gradients\",\n  \"machine learning\",\n  \"optimization\",\n  \"neural networks\",\n  \"Python\",\n  \"NumPy\",\n  \"SciPy\",\n]\ndependencies = [\n  \"numpy<3\",\n]\n# dynamic = [\"version\"]\n\n[project.urls]\nSource = \"https://github.com/HIPS/autograd\"\n\n[project.optional-dependencies]\nscipy = [\n  \"scipy\",\n]\ntest = [\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-xdist\",\n]\n\n[tool.coverage.run]\nsource = [\"autograd\"]\n\n[tool.coverage.report]\nshow_missing = true\n\n[tool.pytest.ini_options]\nrequired_plugins = [\"pytest-cov\", \"pytest-xdist\"]\n# TODO: generate HTML report, upload to CodeCov\naddopts = \"--color=yes -sra -n auto --cov=autograd --cov-report=xml --cov-report=term\"\n\n[tool.ruff]\nextend-exclude = []\n# TODO: not ignore them\nlint.extend-ignore = [\n  \"E731\",\n  \"F401\",\n  \"F403\",\n  \"F841\",\n  \"F821\",\n  \"E721\",\n  \"E722\",\n  \"E741\",\n  \"E402\",\n  \"F811\"\n]\nlint.extend-select = [\"I\", \"W\"]\nline-length = 109\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}