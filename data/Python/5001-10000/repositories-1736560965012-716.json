{
  "metadata": {
    "timestamp": 1736560965012,
    "page": 716,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xxh/xxh",
      "stars": 5472,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.392578125,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# http://editorconfig.org\n\nroot = true\n\n[*.js]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.py]\nindent_size = 4\n\n[*.yml]\nindent_size = 4\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03515625,
          "content": "*.xsh text linguist-language=Python\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.244140625,
          "content": "xxh-shell-*\nsquashfs-root\n*.build\n*.pyc\n*.out\n*.xcf\n*.egg\n.eggs/\n.pytest_cache/\nbuild/\ndist/\nxxh_xxh.egg-info/\nvenv/\n\n# temporary files from vim and emacs\n*~\n*#\n.#*\n*.swp\n*.swo\n\n# Editor project files\n*.komodo*\n.cache\n.idea\n.vscode/\n\n# Mac\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2822265625,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2020, xxh\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.015625,
          "content": "include LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.5048828125,
          "content": "<p align=\"center\">You stuffed your command shell with aliases, tools, and colors but you lose it all when using ssh. The mission of xxh is to bring your favorite shell wherever you go through ssh without root access or system installations. Xonsh shell, fish, zsh, osquery and so on.</p>\n\n<p align=\"center\">  \nIf you like the idea of xxh click ‚≠ê on the repo and <a href=\"https://twitter.com/intent/tweet?text=Bring%20your%20favorite%20shell%20wherever%20you%20go%20through%20the%20ssh.&url=https://github.com/xxh/xxh\" target=\"_blank\">tweet</a>.\n</p>\n\n<a href='https://github.com/xxh/xxh#installation-methods'><img alt='[xxh demo]' src='https://raw.githubusercontent.com/xxh/static/master/xxh-demo2.gif'></a>\n\n<table border=\"0\" width=\"100%\">\n<col style=\"width:33%\">\n<col style=\"width:33%\">\n<col style=\"width:33%\">\n<tbody>\n<tr style=\"border: 0px !important;\">\n<td valign=\"top\" style=\"border: 0px !important;\"><b>Portable</b>. Preparing portable shells and plugins occurs locally, and then xxh uploads the result to the host. No installations or root access on the host required. Security and host environment are a prime focus.</td>\n<td valign=\"top\" style=\"border: 0px !important;\"><b>Hermetic</b>. Deleting the <code>~/.xxh</code> directory from the remote host will make the remote environment function as if xxh was never there. By default your home is the <code>.xxh</code> directory and you can <a href=\"https://github.com/xxh/xxh/wiki#how-to-set-homeuser-as-home-on-host\">choose the hermetic level of your xxh session</a>.</td>\n<td valign=\"top\" style=\"border: 0px !important;\"><b>Careful</b>. No blindfolded copying config files from local to remote host. Following privacy and repeatability practices, the best way is to fork the xxh plugin or shell example and pack your configs into it. </td>\n</tr>\n<tr style=\"border: 0px !important;\">\n<td valign=\"top\" style=\"border: 0px !important;\"><b>Be open and fork-ready</b>. Every xxh repo could be forked, customized, and reused without waiting for a package management system, xxh release, or any third party packages. Five shells are currently supported and more could be added by the community.</td>\n<td valign=\"top\" style=\"border: 0px !important;\"><b>Do more</b>. The xxh packages are not only about shells. Any type of tool or code could be behind an entrypoint. If you want to run <a href=\"https://github.com/browsh-org/browsh\">browsh</a> or <a href=\"https://github.com/juftin/browsr\">browsr</a> on the remote host, just put its portable version as an entrypoint in the xxh-shell.</td>\n<td valign=\"top\" style=\"border: 0px !important;\"><b>Chameleon</b>. Switching shells is as easy as possible and you don't have to be locked in to one shell. Choose your current shell based on the task you want to solve: <code>xxh anyhost +s xonsh</code> for a Python environment, osquery for simple querying, fish for modern features or time-tested zsh and bash for speed. </td>   \n</tr>\n</tbody>\n</table>\n \n## Installation methods\n#### [PyPi 3](https://pypi.org/project/xxh-xxh/) \n```shell script\npip install xxh-xxh\n# OR from repo: pip install git+https://github.com/xxh/xxh\n```\n\n#### [pipx](https://pipxproject.github.io/pipx/) - good alternative to brew and pip, read [comparison](https://pipxproject.github.io/pipx/comparisons/)\n```shell script\npipx install xxh-xxh\n```\n\n#### [xonsh](https://xon.sh/) shell\n\n```xsh\nxpip install xxh-xxh\n```\n\n#### [Conda-forge](https://conda-forge.org/) [feedstock](https://github.com/conda-forge/xxh-xxh-feedstock)\n```shell script\nconda config --add channels conda-forge\nconda install xxh-xxh\n```\n\n#### [Homebrew](https://brew.sh/)\n```shell script\nbrew install xxh\n```\n\n#### [Macports](https://www.macports.org/)\n```shell script\nsudo port install xxh\n```\n\n#### Linux portable binary\n```shell script\nmkdir ~/xxh && cd ~/xxh\nwget https://github.com/xxh/xxh/releases/download/0.8.12/xxh-portable-musl-alpine-Linux-x86_64.tar.gz\ntar -xzf xxh-portable-musl-alpine-Linux-x86_64.tar.gz\n./xxh\n```\n\n#### Linux [AppImage](https://appimage.org/)\n```shell script\nmkdir ~/xxh && cd ~/xxh\nwget -O xxh https://github.com/xxh/xxh/releases/download/0.8.12/xxh-x86_64.AppImage\nchmod +x xxh && ./xxh\n```\nTo run AppImage on Alpine Linux [install](https://github.com/sgerrand/alpine-pkg-glibc/issues/153#issuecomment-795334536) [alpine-pkg-glibc](https://github.com/sgerrand/alpine-pkg-glibc) with [localedef](https://github.com/sgerrand/alpine-pkg-glibc#locales).\n\n## Shells\n\nCurrently supported OS for the target host is Linux on x86_64.\n\n| xxh-shell                                                             | status     | [xxh-plugins](https://github.com/xxh/xxh/wiki#plugins) | [seamless](https://github.com/xxh/xxh/wiki#seamless-mode) | demo |\n|-----------------------------------------------------------------------|------------|-------------|---------|------|\n| **[xonsh](https://github.com/xxh/xxh-shell-xonsh)**                   | stable     | [autojump](https://github.com/xxh/xxh-plugin-xonsh-autojump), [[+]](https://github.com/xxh/xxh-plugin-xonsh-example) | `xxh.xsh` | <a href=\"https://asciinema.org/a/osSEzqnmH9pMYEZibNe2K7ZL7\" target=\"_blank\">demo</a> | \n| **[zsh](https://github.com/xxh/xxh-shell-zsh)**                       | stable     | [ohmyzsh](https://github.com/xxh/xxh-plugin-zsh-ohmyzsh), [p10k](https://github.com/xxh/xxh-plugin-zsh-powerlevel10k), [[+]](https://github.com/xxh/xxh-plugin-zsh-example)  | `xxh.zsh`   |  <a href=\"https://asciinema.org/a/rCiT9hXQ5IdwqOwg6rifyFZzb\" target=\"_blank\">demo</a> |\n| **[fish](https://github.com/xxh/xxh-shell-fish)**                     | stable     | [ohmyfish](https://github.com/xxh/xxh-plugin-fish-ohmyfish), [fisher](https://github.com/xxh/xxh-plugin-fish-fisher), [userconfig](https://github.com/xxh/xxh-plugin-fish-userconfig), [[+]](https://github.com/xxh/xxh-plugin-fish-example) | [todo](https://github.com/xxh/xxh/issues/74) |\n| **[bash](https://github.com/xxh/xxh-shell-bash)**                     | stable     | [ohmybash](https://github.com/xxh/xxh-plugin-bash-ohmybash), [[+]](https://github.com/xxh/xxh-plugin-bash-example) | `xxh.bash`  | <a href=\"https://asciinema.org/a/314508\" target=\"_blank\">demo</a> |\n| **[osquery](https://github.com/xxh/xxh-shell-osquery)**               | beta       |             | | |\n| **[fish-appimage](https://github.com/xxh/xxh-shell-fish-appimage)**   | alpha      |             | | |\n| **[elvish](https://github.com/krageon/xxh-shell-elvish)**   | alpha      |             | | |\n\n[Search xxh shell on Github](https://github.com/search?q=xxh-shell&type=Repositories) or [Bitbucket](https://bitbucket.org/repo/all?name=xxh-shell) or [create your shell entrypoint](https://github.com/xxh/xxh-shell-example) to use another portable shell.  \n\n### Prerun plugins\n[Prerun plugins](https://github.com/xxh/xxh/wiki#plugins) allow you to bring any portable tools, dotfiles, or aliases to your xxh session before running the shell. \n\nPinned plugins: **[core](https://github.com/xxh/xxh-plugin-prerun-core)** (xxh-sudo, xxh-screen, xxh-tmux), **[dotfiles](https://github.com/xxh/xxh-plugin-prerun-dotfiles)**, **[docker](https://github.com/xxh/xxh-plugin-prerun-docker)**, **[python](https://github.com/xxh/xxh-plugin-prerun-python)**, **[xxh](https://github.com/xxh/xxh-plugin-prerun-xxh)**, **[vim](https://github.com/xxh/xxh-plugin-prerun-vim)**, **[zoxide](https://github.com/xxh/xxh-plugin-prerun-zoxide)**, **[starship](https://github.com/izissise/xxh-plugin-prerun-starship)**. There is [cookiecutter template to create a prerun plugin](https://github.com/xxh/cookiecutter-xxh-plugin-prerun).\n\n## Usage\nUse `xxh` instead of `ssh` when connecting to Linux hosts without changing ssh arguments:\n```\nxxh <host from ~/.ssh/config>\nxxh [ssh arguments] [user@]host[:port] [xxh arguments]\nxxh local [xxh arguments]\n```\n\nCommon examples (use `xxh --help` to get info about arguments):\n```yaml\nxxh anyhost                                       # Connect to the host\nxxh -i id_rsa -p 2222 anyhost                     # Using ssh arguments: port and key\nxxh user@host +c et                               # Using EternalTerminal (https://github.com/MisterTea/EternalTerminal)\nxxh anyhost +s zsh +i                             # Set the shell and install it without yes/no question\nxxh anyhost +s xonsh +hhh \"~\"                     # Set /home/user as home directory (read Q&A)\nxxh anyhost +s bash +I xxh-plugin-bash-vim        # Preinstall a plugin\nxxh anyhost +if +q                                # Force reinstall xxh on the host in quiet mode\nxxh anyhost +hh /tmp/xxh +hhr                     # Upload xxh to /tmp/xxh and remove when disconnecting\nsource xxh.zsh anyhost +I xxh-plugin-zsh-ohmyzsh  # Connect in seamless mode with ohmyzsh plugin\nxxh local +s xonsh                                # Experimental: build xxh environment inplace and without ssh\n```\nFor reusing arguments and simplifying xxh usage (like shortening to `xxh anyhost`), there is a [config file](https://github.com/xxh/xxh/wiki#config-file).\n\n**Why the plus sign for the xxh arguments?** The xxh is using the plus sign for xxh arguments to preserve the ability to use the minus sign for the original ssh arguments. This allows just replacing the first two letters in the `ssh` command to convert it to the `xxh` command. Also see the [discussion](https://github.com/xxh/xxh/issues/129).\n \n### Installing xxh packages\n```bash\nxxh [+I xxh-package +I ...] [+L] [+RI xxh-package +RI ...] [+R xxh-package +R ...]\n```\nDifferent ways to set the xxh package source:\n```yaml\nxxh +I xxh-shell-example                                         # install from https://github.com/xxh\nxxh +I https://github.com/xxh/xxh-shell-example                  # short url for github only, for other sources use examples below or add support\nxxh +I https://github.com/xxh/xxh-shell-example/tree/mybranch    # short url for github only, for other sources use examples below or add support\nxxh +I xxh-shell-example+git+https://github.com/xxh/xxh-shell-example                 # long url for any git repo\nxxh +I xxh-shell-example+git+https://github.com/xxh/xxh-shell-example/tree/mybranch   # github only branch support\nxxh +I xxh-shell-example+git+git@github.com:githubuser/xxh-shell-example.git          # install from private repository using ssh\nxxh +I xxh-shell-example+path+/home/user/my-xxh-dev/xxh-shell-example                 # install from local path\n```\n\n### Using xxh inplace without ssh connection\n\nThis is experimental magic. Please read the text below twice.\n\nIf you have shell access on the host or you're in a docker container and you can't ssh to it \nthen you can download and build a hermetic xxh environment inplace. The `xxh local` command works \nexactly like `xxh remote_host` and creates a hermetic environment in `~/.xxh` by default.\n\nAt this time we don't have portable build tools like `git`, `wget`, `curl`, `tar` and others which \ncould be required by some xxh package build scripts. When running `xxh local` it is expected that the tools are present on the host.\n\nTo run xxh inplace on Linux x86_64 just copy and paste these bash commands:\n```bash\nXH=~/.xxh \\\n && XD=https://github.com/xxh/xxh-portable/raw/master/result/xxh-portable-musl-alpine-Linux-x86_64.tar.gz \\\n && mkdir -p $XH && cd $XH \\\n && ( [[ -x $(command -v curl) ]] && curl -L $XD || wget -O- $XD ) | tar zxf - xxh \\\n && echo 'Usage: ./xxh local [+s xonsh/zsh/fish/osquery/bash]'\n```\nNext time you're on the host just run `~/.xxh/xxh local` and you will enter your xxh environment. \n\n## Examples of use cases\n### Python with pip everywhere without installation\n#### Way 1. Using xonsh\n```\nxxh anyhost +s xonsh\n\nanyhost> python --version\nPython 3.8.2\n```\nYou'll get python-powered [xonsh](https://xon.sh) shell with portable python and pip on the host without any system installations on the host. \nYou can install PyPi packages manually or bring them with you automatically by using [xxh-plugin-prerun-dotfiles](https://github.com/xxh/xxh-plugin-prerun-dotfiles). Also, don't forget about xxh-plugins like [zoxide](https://github.com/xxh/xxh-plugin-prerun-zoxide).\n\n#### Way 2. Using portable python on any xxh shell\n```\nxxh +RI xxh-plugin-prerun-python\nxxh anyhost +s zsh\n\nanyhost> python --version\nPython 3.8.2\nanyhost> pip install pandas\n```\nUsing [xxh-plugin-prerun-python](https://github.com/xxh/xxh-plugin-prerun-python) you'll get a portable \nPython AppImage which can be used on a host without python and with any xxh shell.\n\n### Using docker on host without root access\n\nTry [xxh-plugin-prerun-docker](https://github.com/xxh/xxh-plugin-prerun-docker):\n```\nxxh +RI xxh-plugin-prerun-docker\nxxh anyhost +if\n\nanyhost> xxh-docker-run\nanyhost> docker ps                                                                                                                                                                                                                            \nCONTAINER ID        IMAGE               COMMAND\nanyhost> docker run --rm hello-world | grep Hello\nHello from Docker!\nanyhost> xxh-docker-stop\n```\n\n### Bring dotfiles to xxh session\n\nThere is the [xxh-plugin-prerun-dotfiles](https://github.com/xxh/xxh-plugin-prerun-dotfiles) plugin which creates config files \nwhen you go to the host using xxh. You can fork it and create your cozy settings once and forever.\n\n### Seamless Oh My Zsh ([demo](https://asciinema.org/a/rCiT9hXQ5IdwqOwg6rifyFZzb))\n```shell script\nsource xxh.zsh anyhost +I xxh-plugin-zsh-ohmyzsh +if +q \n```\nThis command brings your current Oh My Zsh session theme to the xxh session. If you need more complex settings just fork \nthe [xxh-plugin-zsh-ohmyzsh](https://github.com/xxh/xxh-plugin-zsh-ohmyzsh) and hack it.\n\n### Read host as a table with [osquery](https://github.com/xxh/xxh-shell-osquery)\n```\n$ xxh anyhost +s osquery\nosquery> SELECT * FROM users WHERE username='news';\n+-----+-----+----------+-------------+-----------------+-------------------+\n| uid | gid | username | description | directory       | shell             |\n+-----+-----+----------+-------------+-----------------+-------------------+\n| 9   | 9   | news     | news        | /var/spool/news | /usr/sbin/nologin |\n+-----+-----+----------+-------------+-----------------+-------------------+\n```   \n\n### All-in-one portable home\nxxh is very agile. You can create your own `xxh-shell` (the shell part means it has an entrypoint), which can have any portable tools\nthat could help you on the host. [Bash](https://github.com/xxh/xxh-shell-bash) xxh-shell is one of these \nplatforms that could be forked and stuffed.\n\n## [Questions and answers](https://github.com/xxh/xxh/wiki)\n\n- [Welcome to xxh family](https://github.com/xxh/xxh/wiki#welcome-to-xxh-family)\n  * [How it works](https://github.com/xxh/xxh/wiki#how-it-works)\n    + [Simple answer](https://github.com/xxh/xxh/wiki#simple-answer)\n    + [Detailed workflow with code](https://github.com/xxh/xxh/wiki#detailed-workflow-with-code)\n  * [Plugins](https://github.com/xxh/xxh/wiki#plugins)\n  * [Connection speed](https://github.com/xxh/xxh/wiki#connection-speed)\n  * [Seamless mode](https://github.com/xxh/xxh/wiki#seamless-mode)\n  * [Config file](https://github.com/xxh/xxh/wiki#config-file)\n- [Packages for xxh](https://github.com/xxh/xxh/wiki#packages-for-xxh)\n  * [Install shells and plugins](https://github.com/xxh/xxh/wiki#install-shells-and-plugins)\n- [Advanced](https://github.com/xxh/xxh/wiki#advanced)\n  * [How to set /home/user as home on host](https://github.com/xxh/xxh/wiki#how-to-set-homeuser-as-home-on-host)\n  * [Using sudo](https://github.com/xxh/xxh/wiki#using-sudo)\n  * [Using xxh in xxh session](https://github.com/xxh/xxh/wiki#using-xxh-in-xxh-session)\n  * [Target host is behind another host](https://github.com/xxh/xxh/wiki#target-host-is-behind-another-host)\n  * [Environment variables](https://github.com/xxh/xxh/wiki#environment-variables)\n- [Development and contribution](https://github.com/xxh/xxh/wiki#development-and-contribution)\n  * [The easiest way to debug shell and plugins](https://github.com/xxh/xxh/wiki#the-easiest-way-to-debug-shell-and-plugins)\n  * [Prerun plugins](https://github.com/xxh/xxh/wiki#prerun-plugins)\n  * [Change plugin run order](https://github.com/xxh/xxh/wiki#change-plugin-run-order)\n- [New questions](https://github.com/xxh/xxh/wiki#new-questions)\n\n## Development\n\n### xxh Development Environment\n\nIn the [xxh development environment](https://github.com/xxh/xxh/tree/master/xde) there is a full [dockerised](https://www.docker.com/) environment\nfor development, testing, and contribution. The process of testing and development is orchestrated by `xde` tool and is as \neasy as possible.\n\n### Vagrant based Plugin Development\n\nTo develop plugins, [Vagrant](https://www.vagrantup.com) supports starting [many configurations](https://app.vagrantup.com/boxes/search) of virtual machines using Virtualbox.\n\nSee [the Plugin Development folder](./plugin-development) for more details\n\n### We have teams\n\nIf you're in a team it does not mean you have an obligation to do something. The main goal of teams is to create groups\nof passionate people who could help or support solving complex problems. Some people could be an expert in one shell and a\nnewbie in another shell and mutual assistance is the key to xxh evolution. [Ask to join.](https://github.com/xxh/xxh/issues/50)\n\n## Thanks\n* **niess** for great [python-appimage](https://github.com/niess/python-appimage).\n* **probonopd** and **TheAssassin** for hard-working [AppImage](https://github.com/AppImage).\n* **Anthony Scopatz**, **Gil Forsyth**, **Jamie Bliss**, **David Strobach**, **Morten Enemark Lund** and **@xore** for amazing [xonsh shell](https://github.com/xonsh/xonsh).\n* **Roman Perepelitsa** for incredible [statically-linked, hermetic, relocatable Zsh](https://github.com/romkatv/zsh-bin).\n* **Johannes Altmanninger** and **Fabian Homborg** for extensive and portable [fish shell](https://github.com/fish-shell/fish-shell).\n"
        },
        {
          "name": "appimage",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin-development",
          "type": "tree",
          "content": null
        },
        {
          "name": "portable-musl-alpine",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.1611328125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"xxh-xxh\"\nauthors = [\n    { name=\"xxh\", email=\"author@example.com\" },\n]\ndescription = \"Bring your favorite shell wherever you go through the ssh\"\nreadme = \"README.md\"\ndynamic = [\"version\"]\nrequires-python = \">=3.6\"\nlicense = {text = \"BSD\"}\ndependencies = [\n    'pexpect >= 4.8.0',\n    'pyyaml',\n]\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Unix Shell\",\n    \"Topic :: System :: Shells\",\n    \"Topic :: System :: System Shells\",\n    \"Topic :: Terminals\",\n    \"Topic :: System :: Networking\",\n    \"License :: OSI Approved :: BSD License\",\n]\n\n[project.urls]\n\"Documentation\" = \"https://github.com/xxh/xxh/blob/master/README.md\"\n\"Code\" = \"https://github.com/xxh/xxh\"\n\"Issue tracker\" = \"https://github.com/xxh/xxh/issues\"\n\n[tool.setuptools]\npackages = ['xxh_xxh']\npackage-dir = {'xxh_xxh' = 'xxh/xxh_xxh'}\nscript-files = [\"xxh/xxh\", \"xxh/xxh_xxh/xxh.zsh\", \"xxh/xxh_xxh/xxh.xsh\", \"xxh/xxh_xxh/xxh.bash\"]\n\n[tool.setuptools.package-data]\nxxh_xxh = [\"*.py\", \"*.xxhc\", \"xxh.*\"]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"xxh.xxh_xxh.__version__\"}"
        },
        {
          "name": "xde",
          "type": "tree",
          "content": null
        },
        {
          "name": "xxh-appimage-build.xsh",
          "type": "blob",
          "size": 0.1494140625,
          "content": "#!/usr/bin/env xonsh\n\nmkdir -p build\ndocker build . -f xxh-appimage.Dockerfile -t tmp/xxh-appimage\ndocker run --rm -v $PWD/build:/result tmp/xxh-appimage"
        },
        {
          "name": "xxh-appimage.Dockerfile",
          "type": "blob",
          "size": 0.4130859375,
          "content": "FROM python:3.8-slim-buster\nVOLUME /result\n\nRUN apt update && apt install -y git file gpg && pip install git+https://github.com/niess/python-appimage\n\nADD . /xxh\nRUN mkdir -p /result\n\nWORKDIR /xxh/appimage\nRUN echo '/xxh' > requirements.txt && cat pre-requirements.txt >> requirements.txt\n\nWORKDIR /xxh\nRUN python -m python_appimage build app -p 3.8 /xxh/appimage\nCMD cp /xxh/xxh-x86_64.AppImage /result && ls -sh1 /result\n"
        },
        {
          "name": "xxh-portable-musl-alpine-build.xsh",
          "type": "blob",
          "size": 0.208984375,
          "content": "#!/usr/bin/env xonsh\n\nmkdir -p build\ndocker build . -f xxh-portable-musl-alpine.Dockerfile -t tmp/xxh-portable-musl-alpine  #--no-cache --force-rm\ndocker run --rm -v $PWD/build:/result tmp/xxh-portable-musl-alpine\n"
        },
        {
          "name": "xxh-portable-musl-alpine.Dockerfile",
          "type": "blob",
          "size": 1.140625,
          "content": "FROM alpine:3.13.3\nVOLUME /result\n\nADD . /xxh\n\nENV PYTHON_VER 3.8.2\nENV PYTHON_LIB_VER 3.8\n\nRUN apk update && apk add --update musl-dev gcc patchelf python3-dev py3-pip chrpath git vim mc wget make openssh-client\nRUN pip3 install -U pip\nRUN pip3 install -U \"https://github.com/Nuitka/Nuitka/archive/factory.zip\"\nRUN pip3 install pexpect pyyaml\n\nRUN mkdir /build /package\n\nWORKDIR /build\n\nRUN wget https://www.python.org/ftp/python/$PYTHON_VER/Python-$PYTHON_VER.tgz && tar -xzf Python-$PYTHON_VER.tgz\nWORKDIR Python-$PYTHON_VER\nRUN cp /xxh/portable-musl-alpine/Setup.local Modules/\nRUN ./configure LDFLAGS=\"-static\" --disable-shared\nRUN make LDFLAGS=\"-static\" LINKFORSHARED=\" \"\nRUN cp libpython$PYTHON_LIB_VER.a /usr/lib\n\nRUN echo 'Add xxh'\n\nWORKDIR /xxh\nENV LDFLAGS \"-static -l:libpython3.8.a\"\nRUN nuitka3 --python-flag=no_site --python-flag=no_warnings --show-progress --standalone --follow-imports xxh/xxh\nRUN ls -la\n\nWORKDIR xxh.dist\nRUN ls -la\nRUN ./xxh.bin -V\nRUN cp xxh.bin /package/xxh && cp /xxh/xxh/xxh_xxh/xxh.*sh /xxh/xxh/xxh_xxh/*.xxhc /package\nWORKDIR /package\nCMD tar -zcf /result/xxh-portable-musl-alpine-`uname`-`uname -m`.tar.gz * && ls -sh1 /result\n"
        },
        {
          "name": "xxh",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}