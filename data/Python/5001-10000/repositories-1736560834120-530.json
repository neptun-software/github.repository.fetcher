{
  "metadata": {
    "timestamp": 1736560834120,
    "page": 530,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gevent/gevent",
      "stars": 6288,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 2.001953125,
          "content": "[run]\n# In coverage 4.0b3, concurrency=gevent is exactly equivalent to\n# concurrency=greenlet, except it causes coverage itself to import\n# gevent. That messes up our coverage numbers for top-level\n# statements, so we use greenlet instead. See https://github.com/gevent/gevent/pull/655#issuecomment-141198002\n# See also .coveragerc-pypy\nconcurrency = greenlet\nparallel = True\nsource = gevent\nomit =\n    # This is for <= 2.7.8, which we don't test\n    */gevent/_ssl2.py\n    */gevent/libev/_corecffi_build.py\n    */gevent/libuv/_corecffi_build.py\n    */gevent/win32util.py\n    # having concurrency=greenlet means that the Queue class\n    # which is used from multiple real threads doesn't\n    # properly get covered.\n    */gevent/_threading.py\n    # local.so sometimes gets included, and it can't be parsed\n    # as source, so it fails the whole process.\n    *.so\n    */gevent/libev/*.so\n    */gevent/libuv/*.so\n    */gevent/resolver/*.so\n# New in 5.0; required for the GHA coveralls submission.\n# Perhaps this obsoletes the source section in [paths]?\nrelative_files = True\n\n[report]\n# Coverage is run on Linux under cPython 2/3 and pypy\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n    except ImportError:\n    if __name__ == .__main__.:\n    if sys.platform == 'win32':\n    if mswindows:\n    if is_windows:\n    if WIN:\n    self.fail\nomit =\n    # local.so sometimes gets included, and it can't be parsed\n    # as source, so it fails the whole process.\n    # coverage 4.5 needs this specified here, 4.4.2 needed it in [run]\n    *.so\n    /tmp/test_*\n    # Third-party vendored code\n    src/gevent/_tblib.py\n\n# [paths]\n# # Combine source and paths from the Travis CI installs so they all get\n# # collapsed during combining. Otherwise, coveralls.io reports\n# # many different files (/lib/pythonX.Y/site-packages/gevent/...) and we don't\n# # get a good aggregate number.\n# source =\n#      src/\n#      */lib/*/site-packages/\n#      */pypy*/site-packages/\n\n# Local Variables:\n# mode: conf\n# End:\n"
        },
        {
          "name": ".coveragerc-pypy",
          "type": "blob",
          "size": 0.9697265625,
          "content": "[run]\n# This is just like .coveragerc, but\n# used for PyPy running. pypy doesn't support concurrency=greenlet\nparallel = True\nsource = gevent\nomit =\n    # This is for <= 2.7.8, which we don't test\n    src/gevent/_ssl2.py\n    src/gevent/libev/_corecffi_build.py\n    src/gevent/libuv/_corecffi_build.py\n\tsrc/gevent/win32util.py\n    # having concurrency=greenlet means that the Queue class\n    # which is used from multiple real threads doesn't\n    # properly get covered.\n\tsrc/gevent/_threading.py\n    test_*\n    # local.so sometimes gets included, and it can't be parsed\n    # as source, so it fails the whole process.\n    *.so\n\n\n[report]\n# Coverage is run on Linux under cPython 2/3 and pypy, so\n# exclude branches that are windows specific or pypy\n# specific\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n    except ImportError:\n    if __name__ == .__main__.:\n    if sys.platform == 'win32':\n    if mswindows:\n    if is_windows:\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5830078125,
          "content": "*.py[cod]\nbuild/\n.runtimes\n.tox/\n*.so\n*.o\n*.egg-info\ngevent.*.[ch]\nsrc/gevent/__pycache__\n# Things generated by cython\nsrc/gevent/_semaphore.c\nsrc/gevent/local.c\nsrc/gevent/greenlet.c\nsrc/gevent/_ident.c\nsrc/gevent/_imap.c\nsrc/gevent/event.c\nsrc/gevent/_hub_local.c\nsrc/gevent/_waiter.c\nsrc/gevent/_tracer.c\nsrc/gevent/queue.c\nsrc/gevent/_hub_primitives.c\nsrc/gevent/_greenlet_primitives.c\nsrc/gevent/_abstract_linkable.c\nsrc/gevent/libev/corecext.c\nsrc/gevent/libev/corecext.h\nsrc/gevent/libev/_corecffi.c\nsrc/gevent/libev/_corecffi.o\nsrc/gevent/resolver/cares.c\nsrc/gevent/_generated_include/*.h\n\n# Cython annotations\nsrc/gevent/*.html\nsrc/gevent/libev/*.html\nsrc/gevent/resolver/*.html\n\nMakefile.ext\nMANIFEST\n*_flymake.py\n\n.coverage\\.*\nhtmlcov/\n.coverage\n\ndocs/_build\ndocs/__pycache__\n\n# Artifacts of configuring in place\ndeps/c-ares/config.log\ndeps/c-ares/config.status\ndeps/c-ares/config.cache\ndeps/c-ares/stamp-h1\ndeps/c-ares/stamp-h2\ndeps/c-ares/ares_build.h.orig\ndeps/c-ares/ares_config.h\ndeps/c-ares/ares_build.h\ndeps/c-ares/.libs\ndeps/c-ares/*.o\ndeps/c-ares/*.lo\ndeps/c-ares/*.la\ndeps/c-ares/.deps\ndeps/c-ares/acountry\ndeps/c-ares/adig\ndeps/c-ares/ahost\ndeps/c-ares/Makefile\ndeps/c-ares/libtool\ndeps/c-ares/libcares.pc\ndeps/c-ares/test/.deps\ndeps/c-ares/test/Makefile\ndeps/c-ares/test/config.log\ndeps/c-ares/test/config.status\ndeps/c-ares/test/libtool\ndeps/c-ares/test/stamp-h1\ndeps/c-ares/include/Makefile\ndeps/c-ares/include/stamp-h2\ndeps/c-ares/src/Makefile\ndeps/c-ares/src/lib/Makefile\ndeps/c-ares/src/lib/ares_config.h\ndeps/c-ares/src/lib/stamp-h1\ndeps/c-ares/src/tools/Makefile\n\ndeps/c-ares/autom4te.cache/\ndeps/c-ares/configure~\ndeps/c-ares/src/lib/.deps/\ndeps/c-ares/src/lib/ares_config.h.in~\ndeps/c-ares/src/lib/dsa/.deps/\ndeps/c-ares/src/lib/dsa/.dirstamp\ndeps/c-ares/src/lib/event/.deps/\ndeps/c-ares/src/lib/event/.dirstamp\ndeps/c-ares/src/lib/legacy/.deps/\ndeps/c-ares/src/lib/legacy/.dirstamp\ndeps/c-ares/src/lib/record/.deps/\ndeps/c-ares/src/lib/record/.dirstamp\ndeps/c-ares/src/lib/str/.deps/\ndeps/c-ares/src/lib/str/.dirstamp\ndeps/c-ares/src/lib/util/.deps/\ndeps/c-ares/src/lib/util/.dirstamp\ndeps/c-ares/src/tools/.deps/\n\ndeps/libev/.deps\ndeps/libev/Makefile\ndeps/libev/config.log\ndeps/libev/config.h\ndeps/libev/config.status\ndeps/libev/config.cache\ndeps/libev/configure-output.txt\ndeps/libev/libtool\ndeps/libev/stamp-h1\ndeps/libev/.libs\ndeps/libev/*.lo\ndeps/libev/*.la\ndeps/libev/*.o\n\ndeps/libuv/.deps\ndeps/libuv/Makefile\ndeps/libuv/config.log\ndeps/libuv/config.h\ndeps/libuv/config.status\ndeps/libev/config.cache\ndeps/libduv/libtool\ndeps/libuv/stamp-h1\ndeps/libuv/.libs\ndeps/libuv/*.lo\ndeps/libuv/*.la\ndeps/libuv/*.o\n"
        },
        {
          "name": ".landscape.yml",
          "type": "blob",
          "size": 3.828125,
          "content": "doc-warnings: no # experimental, raises an exception\ntest-warnings: no\nstrictness: veryhigh\nmax-line-length: 160\n# We don't use any of the auto-detected things, and\n# auto-detection slows down startup\nautodetect: false\nrequirements:\n    - dev-requirements.txt\n\npython-targets:\n  - 2\n#  - 3 # landscape.io seems to fail if we run both py2 and py3?\nignore-paths:\n  - examples/webchat/\n  - deps/libuv/\n  - doc/\n  - build/\n  - deps/\n  - dist\n  - .eggs\n  # util creates lots of warnings. ideally they should be fixed,\n  # but that code doesn't change often\n  - util\n  # likewise with scripts\n  - scripts/\n  # This file has invalid syntax for Python 3, which is how\n  # landscape.io runs things...\n  - src/gevent/_util_py2.py\n  # ...and this file has invalid syntax for Python 2, which is how\n  # travis currently runs things. sigh.\n  - src/gevent/_socket3.py\n  # This is vendored with minimal changes\n  - src/gevent/_tblib.py\n  # likewise\n  - src/greentest/_six.py\n  # This triggers https://github.com/PyCQA/pylint/issues/846 on Travis,\n  # but the file is really small, so it's better to skip this one\n  # file than disable that whole check.\n  - src/gevent/core.py\n  # sadly, this one is complicated\n  - setup.py\n  # This crashes (infinite recursion) trying to get the mro() of a class that extends\n  # build_ext\n  - _setuputils.py\n  - src/greentest/getaddrinfo_module.py\nignore-patterns:\n  # disabled code\n  - ^src/greentest/xtest_.*py\n  # standard library code\n  - ^src/greentest/2.*\n  - ^src/greentest/3.*\n  # benchmarks that aren't used/changed much\n  - ^src/greentest/bench_.*py\n\npyroma:\n  run: true\n\nmccabe:\n  # We have way too many violations of the complexity measure.\n  # We should enable this and fix them one at a time, but that's\n  # more refactoring than I want to do initially.\n  run: false\n\npyflakes:\n  disable:\n    # F821: undefined name; caught better by pylint, where it can be\n    # controlled for the whole file/per-line\n    - F821\n    # F401: unused import; same story\n    - F401\n    # F811: redefined function; same story\n    - F811\n    # F403: wildcard import; same story\n    - F403\n\npep8:\n  disable:\n    # N805: first arg should be self; fails on metaclasses and\n    # classmethods; pylint does a better job\n    - N805\n    # N802: function names should be lower-case; comes from Windows\n    # funcs and unittest-style asserts and factory funcs\n    - N802\n    # N801: class names should use CapWords\n    - N801\n    # N803: argument name should be lower-case; comes up with using\n    # the class name as a keyword-argument\n    - N803\n    # N813: camelCase imported as lowercase; socketcommon\n    - N813\n    # N806: variable in function should be lowercase; but sometimes we\n    # want constant-looking names, especially for closures\n    - N806\n    # N812: lowercase imported as non-lowercase; from greenlet import\n    # greenlet as RawGreenlet\n    - N812\n    # E261: at least two spaces before inline comment. Really? Who does\n    # that?\n    - E261\n    # E265: Block comment should start with \"# \". This arises from\n    # commenting out individual lines of code.\n    - E265\n    # N806: variable in function should be lowercase; but sometimes we\n    # want constant-looking names, especially for closures\n    - N806\n    # W503 line break before binary operator (I like and/or on the\n    # next line, it makes more sense)\n    - W503\n    # E266: too many leading '#' for block comment. (Multiple # can\n    # set off blocks)\n    - E266\n    # E402 module level import not at top of file. (happens in\n    # setup.py, some test cases)\n    - E402\n    # E702: multiple expressions on one line semicolon\n    # (happens for monkey-patch))\n    - E702\n    # E731: do not assign a lambda expression, use a def\n    # simpler than a def sometimes, and prevents redefinition warnings\n    - E731\n    # E302/303: Too many/too few blank lines (between classes, etc)\n    # This is *really* nitpicky.\n    - E302\n    - E303\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 8.9033203125,
          "content": "[MASTER]\nload-plugins=pylint.extensions.bad_builtin,\n   pylint.extensions.code_style,\n   pylint.extensions.dict_init_mutate,\n   pylint.extensions.dunder,\n   pylint.extensions.comparison_placement,\n   pylint.extensions.confusing_elif,\n   pylint.extensions.for_any_all,\n   pylint.extensions.consider_refactoring_into_while_condition,\n   pylint.extensions.check_elif,\n   pylint.extensions.eq_without_hash,\n   pylint.extensions.overlapping_exceptions,\n\n#    pylint.extensions.comparetozero,\n# Takes out ``if x == 0:`` and wants you to write ``if not x:``\n# but in many cases, the == 0 is actually much more clear.\n\n#    pylint.extensions.mccabe,\n# We have too many too-complex methods. We should enable this and fix them\n# one by one.\n\n#    pylint.extensions.redefined_variable_type,\n# We use that pattern during initialization.\n\n# magic_value wants you to not use arbitrary strings and numbers\n# inline in the code. But it's overzealous and has way too many false\n# positives. Trust people to do the most readable thing.\n#   pylint.extensions.magic_value\n\n# Empty comment would be good, except it detects blank lines within\n# a single comment block.\n#\n# Those are often used to separate paragraphs, like here.\n#   pylint.extensions.empty_comment,\n\n# consider_ternary_expression is a nice check, but is also overzealous.\n# Trust the human to do the readable thing.\n#    pylint.extensions.consider_ternary_expression,\n\n# redefined_loop_name tends to catch us with things like\n# for name in (a, b, c): name = name + '_column' ...\n#    pylint.extensions.redefined_loop_name,\n\n# This wants you to turn ``x in (1, 2)`` into ``x in {1, 2}``.\n# They both result in the LOAD_CONST bytecode, one a tuple one a\n# frozenset. In theory a set lookup using hashing is faster than\n# a linear scan of a tuple; but if the tuple is small, it can often\n# actually be faster to scan the tuple.\n#   pylint.extensions.set_membership,\n\n# Fix zope.cachedescriptors.property.Lazy; the property-classes doesn't seem to\n# do anything.\n# https://stackoverflow.com/questions/51160955/pylint-how-to-specify-a-self-defined-property-decorator-with-property-classes\n# For releases prior to 2.14.2, this needs to be a one-line, quoted string. After that,\n# a multi-line string.\n# - Make zope.cachedescriptors.property.Lazy look like a property;\n#   fixes pylint thinking it is a method.\n# - Run in Pure Python mode (ignore C extensions that respect this);\n#   fixes some issues with zope.interface, like IFoo.providedby(ob)\n#   claiming not to have the right number of parameters...except no, it does not.\ninit-hook =\n    import astroid.bases\n    astroid.bases.POSSIBLE_PROPERTIES.add('Lazy')\n    astroid.bases.POSSIBLE_PROPERTIES.add('LazyOnClass')\n    astroid.bases.POSSIBLE_PROPERTIES.add('readproperty')\n    astroid.bases.POSSIBLE_PROPERTIES.add('non_overridable')\n    import os\n    os.environ['PURE_PYTHON'] = (\"1\")\n    # Ending on a quoted string\n    # breaks pylint 2.14.5 (it strips the trailing quote. This is\n    # probably because it tries to handle one-line quoted strings as well as multi-blocks).\n    # The parens around it fix the issue.\n\nextension-pkg-whitelist=gevent.greenlet,gevent.libuv._corecffi,gevent.libev._corecffi,gevent.libev._corecffi.lib,gevent.local,gevent._ident\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\n# gevent: The changes for Python 3.7 in _ssl3.py lead to infinite recursion\n# in pylint 2.3.1/astroid 2.2.5 in that file unless we this this to 1\n# from the default of 100.\nlimit-inference-results=1\n\n[MESSAGES CONTROL]\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once).\n# NOTE: comments must go ABOVE the statement. In Python 2, mixing in\n# comments disables all directives that follow, while in Python 3, putting\n# comments at the end of the line does the same thing (though Py3 supports\n# mixing)\n\n\n# invalid-name, ; We get lots of these, especially in scripts. should fix many of them\n# protected-access, ; We have many cases of this; legit ones need to be examinid and commented, then this removed\n# no-self-use, ; common in superclasses with extension points\n# too-few-public-methods, ; Exception and marker classes get tagged with this\n# exec-used, ; should tag individual instances with this, there are some but not too many\n# global-statement,     ; should tag individual instances\n# multiple-statements, ; \"from gevent import monkey; monkey.patch_all()\"\n# locally-disabled, ; yes, we know we're doing this. don't replace one warning with another\n# cyclic-import, ; most of these are deferred imports\n# too-many-arguments, ; these are almost always because that's what the stdlib does\n# redefined-builtin, ; likewise: these tend to be keyword arguments like len= in the stdlib\n# undefined-all-variable,     ; XXX: This crashes with pylint 1.5.4 on Travis (but not locally on Py2/3\n#     ; or landscape.io on Py3). The file causing the problem is unclear. UPDATE: identified and disabled\n#   that file.\n#   see https://github.com/PyCQA/pylint/issues/846\n# useless-suppression: the only way to avoid repeating it for specific statements everywhere that we\n#   do Py2/Py3 stuff is to put it here. Sadly this means that we might get better but not realize it.\n# duplicate-code: Yeah, the compatibility ssl modules are much the same\n# In pylint 1.8.0, inconsistent-return-statements are created for the wrong reasons.\n# This code raises it, even though there's only one return (the implicit 'return None' is presumably\n# what triggers it):\n#  def foo():\n#    if baz:\n#      return 1\n# In Pylint 2dev1, needed for Python 3.7, we get spurious 'useless return' errors:\n# @property\n# def foo(self):\n#   return None # generates useless-return\n# Pylint 2.4 adds import-outside-toplevel. But we do that a lot to defer imports because of patching.\n# Pylint 2.4 adds self-assigning-variable. But we do *that* to avoid unused-import when we\n# \"export\" the variable and don't have a __all__.\n# Pylint 2.6+ adds some python-3-only things that don't apply: raise-missing-from, super-with-arguments, consider-using-f-string, redundant-u-string-prefix\n# unnecessary-lambda-assignment: New check introduced in v2.14.0\n# unnecessary-dunder-call: New check introduced in v2.14.0\n# consider-using-assignment-expr: wants you to use the walrus operator.\n#   It hits way too much and its not clear they would be improvements.\n# confusing-consecutive-elif: Are they though?\ndisable=wrong-import-position,\n    wrong-import-order,\n    missing-docstring,\n    ungrouped-imports,\n    invalid-name,\n    protected-access,\n    too-few-public-methods,\n    exec-used,\n    global-statement,\n    multiple-statements,\n    locally-disabled,\n    cyclic-import,\n    too-many-arguments,\n    redefined-builtin,\n    useless-suppression,\n    duplicate-code,\n    undefined-all-variable,\n    inconsistent-return-statements,\n    useless-return,\n    useless-object-inheritance,\n    import-outside-toplevel,\n    self-assigning-variable,\n    raise-missing-from,\n    super-with-arguments,\n    consider-using-f-string,\n    consider-using-assignment-expr,\n    redundant-u-string-prefix,\n    unnecessary-lambda-assignment,\n    unnecessary-dunder-call,\n    use-dict-literal,\n    confusing-consecutive-elif,\n\n\nenable=consider-using-augmented-assign\n\n[FORMAT]\n# duplicated from setup.cfg\nmax-line-length=160\nmax-module-lines=1100\n\n[MISCELLANEOUS]\n# List of note tags to take in consideration, separated by a comma.\n#notes=FIXME,XXX,TODO\n# Disable that, we don't want them in the report (???)\nnotes=\n\n[VARIABLES]\n\ndummy-variables-rgx=_.*\n\n[TYPECHECK]\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\n# gevent: this is helpful for py3/py2 code.\ngenerated-members=exc_clear\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set). This can work\n# with qualified names.\n#ignored-classes=SSLContext, SSLSocket, greenlet, Greenlet, parent, dead\n\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=gevent._corecffi,gevent.os,os,greenlet,threading,gevent.libev.corecffi,gevent.socket,gevent.core,gevent.testing.support\n\n[DESIGN]\nmax-attributes=12\nmax-parents=10\n# XXX: Eww!\nmax-positional-arguments=20\n\n[BASIC]\nbad-functions=input\n# Prospector turns ot unsafe-load-any-extension by default, but\n# pylint leaves it off. This is the proximal cause of the\n# undefined-all-variable crash.\nunsafe-load-any-extension = yes\n\n# Local Variables:\n# mode: conf\n# End:\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.6982421875,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Some things can only be configured on the RTD dashboard.\n# Those that we may have changed from the default include:\n\n# Analytics code:\n# Show Version Warning: False\n# Single Version: True\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  builder: html\n  configuration: docs/conf.py\n\n# Set the version of Python and requirements required to build your\n# docs\n\nbuild:\n  # os is required for some reason\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.2724609375,
          "content": "Gevent is written and maintained by\n\n  Denis Bilenko\n  Matt Iversen\n  Steffen Prince\n  Jason Madden\n\nand the contributors (ordered by the date of first contribution):\n\n  Jason Toffaletti\n  Mike Barton\n  Ludvig Ericson\n  Marcus Cavanaugh\n  Matt Goodall\n  Ralf Schmitt\n  Daniele Varrazzo\n  Nicholas Piël\n  Örjan Persson\n  Uriel Katz\n  Ted Suzman\n  Randall Leeds\n  Erik Näslund\n  Alexey Borzenkov\n  David Hain\n  Dmitry Chechik\n  Ned Rockson\n  Tommie Gannert\n  Shaun Lindsay\n  Andreas Blixt\n  Nick Barkas\n  Galfy Pundee\n  Alexander Boudkar\n  Damien Churchill\n  Tom Lynn\n  Shaun Cutts\n  David LaBissoniere\n  Alexandre Kandalintsev\n  Geert Jansen\n  Vitaly Kruglikov\n  Saúl Ibarra Corretgé\n  Oliver Beattie\n  Bobby Powers\n  Anton Patrushev\n  Jan-Philip Gehrcke\n  Alex Gaynor\n  陈小玉\n  Philip Conrad\n  Heungsub Lee\n  Ron Rothman\n\n  See https://github.com/gevent/gevent/graphs/contributors for more info.\n\nGevent is inspired by and uses some code from eventlet which was written by\n\n  Bob Ipollito\n  Donovan Preston\n\nThe win32util module is taken from Twisted. The tblib module is taken from python-tblib by Ionel Cristian Mărieș.\n\nSome modules (local, ssl) contain code from the Python standard library.\n\nIf your code is used in gevent and you are not mentioned above, please contact the maintainer.\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 29.2587890625,
          "content": "===========\n Changelog\n===========\n\n.. currentmodule:: gevent\n\n.. towncrier release notes start\n\n24.11.1 (2024-11-11)\n====================\n\n\nBugfixes\n--------\n\n- Remove some legacy code that supported Python 2 for compatibility with\n  the upcoming releases of Cython 3.1.\n\n  Also, the ``PeriodicMonitorThreadStartedEvent`` now properly\n  implements the ``IPeriodicMonitorThreadStartedEvent`` interface.\n  The ``EventLoopBlocked`` event includes the hub which was blocked,\n  and it is notified before the report is printed so that event\n  listeners can modify the report.\n  See :issue:`2076`.\n\n\n24.10.3 (2024-10-18)\n====================\n\n\nBugfixes\n--------\n\n- Fix clearing stack frames on Python 3.13. This is invoked when you\n  fork after having used the thread pool.\n  See :issue:`2067`.\n- Distribute manylinux2014 wheels for x86_64.\n  See :issue:`2068`.\n- Stop switching to the hub in the after fork hook in a child process. This could lead to strange behaviour, and is different than what all other versions of Python do.\n\n\n\n24.10.2 (2024-10-11)\n====================\n\n\nBugfixes\n--------\n\n- Workaround a Cython bug compiling on GCC14.\n  See :issue:`2049`.\n\n\n24.10.1 (2024-10-09)\n====================\n\n\nFeatures\n--------\n\n- Update the bundled c-ares to 1.33.1.\n\n- Add support for Python 3.13.\n\n  - The functions and classes in ``gevent.subprocess`` no longer accept\n    ``stdout=STDOUT`` and raise a ``ValueError``.\n\n  Several additions and changes to the ``queue`` module, including:\n\n  - ``Queue.shutdown`` is available on all versions of Python.\n  - ``LifoQueue`` is now a joinable queue.\n\n- gevent.monkey changed from a module to a package. The public API\n  remains the same.\n\n  For this release, private APIs (undocumented, marked internal, or\n  beginning with an underscore) are also preserved. However, these may\n  be changed or removed at any time in the future. If you are using one\n  of these APIs and cannot replace it, please contact the gevent team.\n\n\n\nBugfixes\n--------\n\n- For platforms that don't have ``socketpair``, upgrade our fallback\n  code to avoid a security issue.\n  See :issue:`2048`.\n\n\nDeprecations and Removals\n-------------------------\n\n- Remove support for Python 3.8, which has reached the end of its\n  support lifecycle.\n  See :issue:`remove_py38`.\n\n\n24.2.1 (2024-02-14)\n===================\n\n\nBugfixes\n--------\n\n- Add support for Python patch releases 3.11.8 and 3.12.2, which changed\n  internal details of threading.\n\n  As a result of these changes, note that it is no longer possible to\n  change the ``__class__`` of a ``gevent.threading._DummyThread``\n  object on those versions.\n\n  See :issue:`2020`.\n\nOther\n-----\n\nOther updates for compatibility with the standard library include:\n\n  - Errors raised from ``subprocess.Popen`` may not have a filename set.\n  - ``SSLSocket.recv_into`` and ``SSLSocket.read`` no longer require the\n    buffer to implement ``len`` and now work with buffers whose size is\n    not 1.\n  - gh-108310: Fix CVE-2023-40217: Check for & avoid the ssl pre-close\n    flaw.\n\nIn addition:\n\n  - Drop ``setuptools`` to a soft test dependency.\n  - Drop support for very old versions of CFFI.\n  - Update bundled c-ares from 1.19.1 to 1.26.0.\n  - Locks created by gevent, but acquired from multiple different\n    threads (not recommended), no longer spin to implement timeouts\n    and interruptible blocking. Instead, they use the native\n    functionality of the Python 3 lock. This may improve some scenarios.\n    See :issue:`2013`.\n\n\n\n23.9.1 (2023-09-12)\n===================\n\n\nBugfixes\n--------\n\n- Require greenlet 3.0 on Python 3.11 and Python 3.12; greenlet 3.0 is\n  recommended for all platforms. This fixes a number of obscure crashes\n  on all versions of Python, as well as fixing a fairly common problem\n  on Python 3.11+ that could manifest as either a crash or as a\n  ``SystemError``.\n  See :issue:`1985`.\n\n\n----\n\n\n23.9.0.post1 (2023-09-02)\n=========================\n\n- Fix Windows wheel builds.\n- Fix macOS wheel builds.\n\n23.9.0 (2023-09-01)\n===================\n\n\nBugfixes\n--------\n\n- Make ``gevent.select.select`` accept arbitrary iterables, not just\n  sequences. That is, you can now pass in a generator of file\n  descriptors instead of a realized list. Internally, arbitrary\n  iterables are copied into lists. This better matches what the standard\n  library does. Thanks to David Salvisberg.\n  See :issue:`1979`.\n- On Python 3.11 and newer, opt out of Cython's fast exception\n  manipulation, which *may* be causing problems in certain circumstances\n  when combined with greenlets.\n\n  On all versions of Python, adjust some error handling in the default\n  C-based loop. This fixes several assertion failures on debug versions\n  of CPython. Hopefully it has a positive impact under real conditions.\n  See :issue:`1985`.\n- Make ``gevent.pywsgi`` comply more closely with the HTTP specification\n  for chunked transfer encoding. In particular, we are much stricter\n  about trailers, and trailers that are invalid (too long or featuring\n  disallowed characters) forcibly close the connection to the client\n  *after* the results have been sent.\n\n  Trailers otherwise continue to be ignored and are not available to the\n  WSGI application.\n\n  Previously, carefully crafted invalid trailers in chunked requests on\n  keep-alive connections might appear as two requests to\n  ``gevent.pywsgi``. Because this was handled exactly as a normal\n  keep-alive connection with two requests, the WSGI application should\n  handle it normally. However, if you were counting on some upstream\n  server to filter incoming requests based on paths or header fields,\n  and the upstream server simply passed trailers through without\n  validating them, then this embedded second request would bypass those\n  checks. (If the upstream server validated that the trailers meet the\n  HTTP specification, this could not occur, because characters that are\n  required in an HTTP request, like a space, are not allowed in\n  trailers.) CVE-2023-41419 was reserved for this.\n\n  Our thanks to the original reporters, Keran Mu\n  (mkr22@mails.tsinghua.edu.cn) and Jianjun Chen\n  (jianjun@tsinghua.edu.cn), from Tsinghua University and Zhongguancun\n  Laboratory.\n  See :issue:`1989`.\n\n\n----\n\n\n23.7.0 (2023-07-11)\n===================\n\n\nFeatures\n--------\n\n- Add preliminary support for Python 3.12, using greenlet 3.0a1. This\n  is somewhat tricky to build from source at this time, and there is\n  one known issue: On Python 3.12b3, dumping tracebacks of greenlets\n  is not available.\n  :issue:`1969`.\n- Update the bundled c-ares version to 1.19.1.\n  See :issue:`1947`.\n\n\nBugfixes\n--------\n\n- Fix an edge case connecting a non-blocking ``SSLSocket`` that could result\n  in an AttributeError. In a change to match the standard library,\n  calling ``sock.connect_ex()`` on a subclass of ``socket`` no longer\n  calls the subclass's ``connect`` method.\n\n  Initial fix by Priyankar Jain.\n  See :issue:`1932`.\n- Make gevent's ``FileObjectThread`` (mostly used on Windows) implement\n  ``readinto`` cooperatively. PR by Kirill Smelkov.\n  See :issue:`1948`.\n- Work around an ``AttributeError`` during cyclic garbage collection\n  when Python finalizers (``__del__`` and the like) attempt to use\n  gevent APIs. This is not a recommended practice, and it is unclear if\n  catching this ``AttributeError`` will fix any problems or just shift\n  them. (If we could determine the root situation that results in this\n  cycle, we might be able to solve it.)\n  See :issue:`1961`.\n\n\nDeprecations and Removals\n-------------------------\n\n- Remove support for obsolete Python versions. This is everything prior\n  to 3.8.\n\n  Related changes include:\n\n  - Stop using ``pkg_resources`` to find entry points (plugins).\n    Instead, use ``importlib.metadata``.\n  - Honor ``sys.unraisablehook`` when a callback function produces an\n    exception, and handling the exception in the hub *also* produces an\n    exception. In older versions, these would be simply printed.\n  - ``setup.py`` no longer includes the ``setup_requires`` keyword.\n    Installation with a tool that understands ``pyproject.toml`` is\n    recommended.\n  - The bundled tblib has been updated to version 2.0.\n\n\n----\n\n\n22.10.2 (2022-10-31)\n====================\n\n\nBugfixes\n--------\n\n- Update to greenlet 2.0. This fixes a deallocation issue that required\n  a change in greenlet's ABI. The design of greenlet 2.0 is intended to\n  prevent future fixes and enhancements from requiring an ABI change,\n  making it easier to update gevent and greenlet independently.\n\n  .. caution::\n\n     greenlet 2.0 requires a modern-ish C++ compiler. This may mean\n     certain older platforms are no longer supported.\n     See :issue:`1909`.\n\n\n----\n\n\n22.10.1 (2022-10-14)\n====================\n\n\nFeatures\n--------\n\n- Update bundled libuv to 1.44.2.\n  See :issue:`1913`.\n\n\nMisc\n----\n\n- See :issue:`1898`., See :issue:`1910`., See :issue:`1915`.\n\n\n----\n\n\n22.08.0 (2022-10-08)\n====================\n\n\nFeatures\n--------\n\n- Windows: Test and provide binary wheels for PyPy3.7.\n\n  Note that there may be issues with subprocesses, signals, and it may\n  be slow.\n  See :issue:`1798`.\n- Upgrade embedded c-ares to 1.18.1.\n  See :issue:`1847`.\n- Upgrade bundled libuv to 1.42.0 from 1.40.0.\n  See :issue:`1851`.\n- Added preliminary support for Python 3.11 (rc2 and later).\n\n  Some platforms may or may not have binary wheels at this time.\n\n  .. important:: Support for legacy versions of Python, including 2.7\n                 and 3.6, will be ending soon. The\n                 maintenance burden has become too great and the\n                 maintainer's time is too limited.\n\n                 Ideally, there will be a release of gevent compatible\n                 with a final release of greenlet 2.0 that still\n                 supports those legacy versions, but that may not be\n                 possible; this may be the final release to support them.\n\n  :class:`gevent.threadpool.ThreadPool` can now optionally expire idle\n  threads. This is used by default in the implicit thread pool used for\n  DNS requests and other user-submitted tasks; other uses of a\n  thread-pool need to opt-in to this.\n  See :issue:`1867`.\n\n\nBugfixes\n--------\n\n- Truly disable the effects of compiling with ``-ffast-math``.\n  See :issue:`1864`.\n\n\n----\n\n\n21.12.0 (2021-12-11)\n====================\n\n\nFeatures\n--------\n\n- Update autoconf files for Apple Silicon Macs. Note that while there\n  are reports of compiling gevent on Apple Silicon Macs now, this is\n  *not* a tested configuration. There may be some remaining issues with\n  CFFI on some systems as well.\n  See :issue:`1721`.\n- Build and upload CPython 3.10 binary manylinux wheels.\n\n  Unfortunately, this required us to stop building and uploading CPython\n  2.7 binary manylinux wheels. Binary wheels for 2.7 continue to be\n  available for Windows and macOS.\n  See :issue:`1822`.\n- Test and distribute musllinux_1_1 wheels.\n  See :issue:`1837`.\n- Update the tested versions of PyPy2 and PyPy3. For PyPy2, there should\n  be no user visible changes, but for PyPy3, support has moved from\n  Python 3.6 to Python 3.7.\n  See :issue:`1843`.\n\n\nBugfixes\n--------\n\n- Try to avoid linking to two different Python runtime DLLs on Windows.\n  See :issue:`1814`.\n- Stop compiling manylinux wheels with ``-ffast-math.`` This was\n  implicit in ``-Ofast``, but could alter the global state of the\n  process. Analysis and fix thanks to Ilya Konstantinov.\n  See :issue:`1820`.\n- Fix hanging the interpreter on shutdown if gevent monkey patching\n  occurred on a non-main thread in Python 3.9.8 and above. (Note that\n  this is not a recommended practice.)\n  See :issue:`1839`.\n\n\n----\n\n\n21.8.0 (2021-08-05)\n===================\n\n\nFeatures\n--------\n\n- Update the embedded c-ares from 1.16.1 to 1.17.1.\n  See :issue:`1758`.\n- Add support for Python 3.10rc1 and newer.\n\n  As part of this, the minimum required greenlet version was increased\n  to 1.1.0 (on CPython), and the minimum version of Cython needed to\n  build gevent from a source checkout is 3.0a9.\n\n  Note that the dnspython resolver is not available on Python 3.10.\n  See :issue:`1790`.\n- Update from Cython 3.0a6 to 3.0a9.\n  See :issue:`1801`.\n\n\nMisc\n----\n\n- See :issue:`1789`.\n\n\n----\n\n\n21.1.2 (2021-01-20)\n===================\n\n\nFeatures\n--------\n\n- Update the embedded libev from 4.31 to 4.33.\n  See :issue:`1754`.\n- Update the embedded libuv from 1.38.0 to 1.40.0.\n  See :issue:`1755`.\n\n\nMisc\n----\n\n- See :issue:`1753`.\n\n\n----\n\n\n21.1.1 (2021-01-18)\n===================\n\nBugfixes\n--------\n\nFix a ``TypeError`` on startup on Python 2 with ``zope.schema``\ninstalled. Reported by Josh Zuech.\n\n\n21.1.0 (2021-01-15)\n===================\n\nBugfixes\n--------\n\n- Make gevent ``FileObjects`` more closely match the semantics of native\n  file objects for the ``name`` attribute:\n\n  - Objects opened from a file descriptor integer have that integer as\n    their ``name.`` (Note that this is the Python 3 semantics; Python 2\n    native file objects returned from ``os.fdopen()`` have the string\n    \"<fdopen>\" as their name , but here gevent always follows Python 3.)\n  - The ``name`` remains accessible after the file object is closed.\n\n  Thanks to Dan Milon.\n  See :issue:`1745`.\n\n\nMisc\n----\n\nMake ``gevent.event.AsyncResult`` print a warning when it detects improper\ncross-thread usage instead of hanging.\n\n``AsyncResult`` has *never* been safe to use from multiple threads.\nIt, like most gevent objects, is intended to work with greenlets from\na single thread. Using ``AsyncResult`` from multiple threads has\nundefined semantics. The safest way to communicate between threads is\nusing an event loop async watcher.\n\nThose undefined semantics changed in recent gevent versions, making it\nmore likely that an abused ``AsyncResult`` would misbehave in ways\nthat could cause the program to hang.\n\nNow, when ``AsyncResult`` detects a situation that would hang, it\nprints a warning to stderr. Note that this is best-effort, and hangs\nare still possible, especially under PyPy 7.3.3.\n\nAt the same time, ``AsyncResult`` is tuned to behave more like it did\nin older versions, meaning that the hang is once again much less\nlikely. If you were getting lucky and using ``AsyncResult``\nsuccessfully across threads, this may restore your luck. In addition,\ncross-thread wakeups are faster. Note that the gevent hub now uses an\nextra file descriptor to implement this.\n\nSimilar changes apply to ``gevent.event.Event`` (see :issue:`1735`).\n\nSee :issue:`1739`.\n\n\n----\n\n\n20.12.1 (2020-12-27)\n====================\n\n\nFeatures\n--------\n\n- Make :class:`gevent.Greenlet` objects function as context managers.\n  When the ``with`` suite finishes, execution doesn't continue until the\n  greenlet is finished. This can be a simpler alternative to a\n  :class:`gevent.pool.Group` when the lifetime of greenlets can be\n  lexically scoped.\n\n  Suggested by André Caron.\n  See :issue:`1324`.\n\n\nBugfixes\n--------\n\n- Make gevent's ``Semaphore`` objects properly handle native thread\n  identifiers larger than can be stored in a C ``long`` on Python 3,\n  instead of raising an ``OverflowError``.\n\n  Reported by TheYOSH.\n  See :issue:`1733`.\n\n\n----\n\n\n20.12.0 (2020-12-22)\n====================\n\n\nFeatures\n--------\n\n- Make worker threads created by :class:`gevent.threadpool.ThreadPool` install\n  the :func:`threading.setprofile` and :func:`threading.settrace` hooks\n  while tasks are running. This provides visibility to profiling and\n  tracing tools like yappi.\n\n  Reported by Suhail Muhammed.\n  See :issue:`1678`.\n\n- Drop support for Python 3.5.\n\nBugfixes\n--------\n\n- Incorrectly passing an exception *instance* instead of an exception\n  *type* to `gevent.Greenlet.kill` or `gevent.killall` no longer prints\n  an exception to stderr.\n  See :issue:`1663`.\n- Make destroying a hub try harder to more forcibly stop loop processing\n  when there are outstanding callbacks or IO operations scheduled.\n\n  Thanks to Josh Snyder (:issue:`1686`) and Jan-Philip Gehrcke\n  (:issue:`1669`).\n  See :issue:`1686`.\n- Improve the ability to use monkey-patched locks, and\n  `gevent.lock.BoundedSemaphore`, across threads, especially when the\n  various threads might not have a gevent hub or any other active\n  greenlets. In particular, this handles some cases that previously\n  raised ``LoopExit`` or would hang. Note that this may not be reliable\n  on PyPy on Windows; such an environment is not currently recommended.\n\n  The semaphore tries to avoid creating a hub if it seems unnecessary,\n  automatically creating one in the single-threaded case when it would\n  block, but not in the multi-threaded case. While the differences\n  should be correctly detected, it's possible there are corner cases\n  where they might not be.\n\n  If your application appears to hang acquiring semaphores, but adding a\n  call to ``gevent.get_hub()`` in the thread attempting to acquire the\n  semaphore before doing so fixes it, please file an issue.\n  See :issue:`1698`.\n- Make error reporting when a greenlet suffers a `RecursionError` more\n  reliable.\n\n  Reported by Dan Milon.\n  See :issue:`1704`.\n- gevent.pywsgi: Avoid printing an extra traceback (\"TypeError: not\n  enough arguments for format string\") to standard error on certain\n  invalid client requests.\n\n  Reported by Steven Grimm.\n  See :issue:`1708`.\n- Add support for PyPy2 7.3.3.\n  See :issue:`1709`.\n- Python 2: Make ``gevent.subprocess.Popen.stdin`` objects have a\n  ``write`` method that guarantees to write the entire argument in\n  binary, unbuffered mode. This may require multiple trips around the\n  event loop, but more closely matches the behaviour of the Python 2\n  standard library (and gevent prior to 1.5). The number of bytes\n  written is still returned (instead of ``None``).\n  See :issue:`1711`.\n- Make `gevent.pywsgi` stop trying to enforce the rules for reading chunked input or\n  ``Content-Length`` terminated input when the connection is being\n  upgraded, for example to a websocket connection. Likewise, if the\n  protocol was switched by returning a ``101`` status, stop trying to\n  automatically chunk the responses.\n\n  Reported by Kavindu Santhusa.\n  See :issue:`1712`.\n- Remove the ``__dict__`` attribute from `gevent.socket.socket` objects. The\n  standard library socket do not have a ``__dict__``.\n\n  Noticed by Carson Ip.\n\n  As part of this refactoring, share more common socket code between Python 2\n  and Python 3.\n  See :issue:`1724`.\n\n----\n\n\n20.9.0 (2020-09-22)\n===================\n\n\nFeatures\n--------\n\n- The embedded libev is now asked to detect the availability of\n  ``clock_gettime`` and use the realtime and/or monotonic clocks, if\n  they are available.\n\n  On Linux, this can reduce the number of system calls libev makes.\n  Originally provided by Josh Snyder.\n  See :issue:`1648`.\n\n\nBugfixes\n--------\n\n- On CPython, depend on greenlet >= 0.4.17. This version is binary\n  incompatible with earlier releases on CPython 3.7 and later.\n\n  On Python 3.7 and above, the module ``gevent.contextvars`` is no\n  longer monkey-patched into the standard library. contextvars are now\n  both greenlet and asyncio task local. See :issue:`1656`.\n  See :issue:`1674`.\n- The ``DummyThread`` objects created automatically by certain\n  operations when the standard library threading module is\n  monkey-patched now match the naming convention the standard library\n  uses (\"Dummy-12345\"). Previously (since gevent 1.2a2) they used\n  \"DummyThread-12345\".\n  See :issue:`1659`.\n- Fix compatibility with dnspython 2.\n\n  .. caution:: This currently means that it can be imported. But it\n               cannot yet be used. gevent has a pinned dependency on\n               dnspython < 2 for now.\n\n  See :issue:`1661`.\n\n\n----\n\n\n20.6.2 (2020-06-16)\n===================\n\n\nFeatures\n--------\n\n- It is now possible to build and use the embedded libuv on a Cygwin\n  platform.\n\n  Note that Cygwin is not an officially supported platform of upstream\n  libuv and is not tested by gevent, so the actual working status is\n  unknown, and this may bitrot in future releases.\n\n  Thanks to berkakinci for the patch.\n  See :issue:`1645`.\n\n\nBugfixes\n--------\n\n- Relax the version constraint for psutil on PyPy.\n\n  Previously it was pinned to 5.6.3 for PyPy2, except for on Windows,\n  where it was excluded. It is now treated the same as CPython again.\n  See :issue:`1643`.\n\n\n----\n\n\n20.6.1 (2020-06-10)\n===================\n\n\nFeatures\n--------\n\n- gevent's CI is now tested on Ubuntu 18.04 (Bionic), an upgrade from\n  16.04 (Xenial).\n  See :issue:`1623`.\n\n\nBugfixes\n--------\n\n- On Python 2, the dnspython resolver can be used without having\n  selectors2 installed. Previously, an ImportError would be raised.\n  See :issue:`1641`.\n- Python 3 ``gevent.ssl.SSLSocket`` objects no longer attempt to catch\n  ``ConnectionResetError`` and treat it the same as an ``SSLError`` with\n  ``SSL_ERROR_EOF`` (typically by suppressing it).\n\n  This was a difference from the way the standard library behaved (which\n  is to raise the exception). It was added to gevent during early\n  testing of OpenSSL 1.1 and TLS 1.3.\n  See :issue:`1637`.\n\n\n----\n\n\n20.6.0 (2020-06-06)\n===================\n\n\nFeatures\n--------\n\n- Add ``gevent.selectors`` containing ``GeventSelector``. This selector\n  implementation uses gevent details to attempt to reduce overhead when\n  polling many file descriptors, only some of which become ready at any\n  given time.\n\n  This is monkey-patched as ``selectors.DefaultSelector`` by default.\n\n  This is available on Python 2 if the ``selectors2`` backport is\n  installed. (This backport is installed automatically using the\n  ``recommended`` extra.) When monkey-patching, ``selectors`` is made\n  available as an alias to this module.\n  See :issue:`1532`.\n- Depend on greenlet >= 0.4.16. This is required for CPython 3.9 and 3.10a0.\n  See :issue:`1627`.\n- Add support for Python 3.9.\n\n  No binary wheels are available yet, however.\n  See :issue:`1628`.\n\n\nBugfixes\n--------\n\n- ``gevent.socket.create_connection`` and\n  ``gevent.socket.socket.connect`` no longer ignore IPv6 scope IDs.\n\n  Any IP address (IPv4 or IPv6) is no longer subject to an extra call to\n  ``getaddrinfo``. Depending on the resolver in use, this is likely to\n  change the number and order of greenlet switches. (On Windows, in\n  particular test cases when there are no other greenlets running, it has\n  been observed to lead to ``LoopExit`` in scenarios that didn't produce\n  that before.)\n  See :issue:`1634`.\n\n\n----\n\n\n20.5.2 (2020-05-28)\n===================\n\n\nBugfixes\n--------\n\n- Forking a process that had use the threadpool to run tasks that\n  created their own hub would fail to clean up the threadpool by raising\n  ``greenlet.error``.\n  See :issue:`1631`.\n\n\n----\n\n\n20.5.1 (2020-05-26)\n===================\n\n\nFeatures\n--------\n\n- Waiters on Event and Semaphore objects that call ``wait()`` or\n  ``acquire()``, respectively, that find the Event already set, or the\n  Semaphore available, no longer \"cut in line\" and run before any\n  previously scheduled greenlets. They now run in the order in which\n  they arrived, just as waiters that had to block in those methods do.\n  See :issue:`1520`.\n- Update tested PyPy version from 7.3.0 to 7.3.1 on Linux.\n  See :issue:`1569`.\n- Make ``zope.interface``, ``zope.event`` and (by extension)\n  ``setuptools`` required dependencies. The ``events`` install extra now\n  does nothing and will be removed in 2021.\n  See :issue:`1619`.\n- Update bundled libuv from 1.36.0 to 1.38.0.\n  See :issue:`1621`.\n- Update bundled c-ares from 1.16.0 to 1.16.1.\n\n  On macOS, stop trying to adjust c-ares headers to make them\n  universal.\n  See :issue:`1624`.\n\n\nBugfixes\n--------\n\n- Make gevent locks that are monkey-patched usually work across native\n  threads as well as across greenlets within a single thread. Locks that\n  are only used in a single thread do not take a performance hit. While\n  cross-thread locking is relatively expensive, and not a recommended\n  programming pattern, it can happen unwittingly, for example when\n  using the threadpool and ``logging``.\n\n  Before, cross-thread lock uses might succeed, or, if the lock was\n  contended, raise ``greenlet.error``. Now, in the contended case, if\n  the lock has been acquired by the main thread at least once, it should\n  correctly block in any thread, cooperating with the event loop of both\n  threads. In certain (hopefully rare) cases, it might be possible for\n  contended case to raise ``LoopExit`` when previously it would have\n  raised ``greenlet.error``; if these cases are a practical concern,\n  please open an issue.\n\n  Also, the underlying Semaphore always behaves in an atomic fashion (as\n  if the GIL was not released) when PURE_PYTHON is set. Previously, it\n  only correctly did so on PyPy.\n  See :issue:`1437`.\n- Rename gevent's C accelerator extension modules using a prefix to\n  avoid clashing with other C extensions.\n  See :issue:`1480`.\n- Using ``gevent.wait`` on an ``Event`` more than once, when that Event\n  is already set, could previously raise an AssertionError.\n\n  As part of this, exceptions raised in the main greenlet will now\n  include a more complete traceback from the failing greenlet.\n  See :issue:`1540`.\n- Avoid closing the same Python libuv watcher IO object twice. Under\n  some circumstances (only seen on Windows), that could lead to program\n  crashes.\n  See :issue:`1587`.\n- gevent can now be built using Cython 3.0a5 and newer. The PyPI\n  distribution uses this version.\n\n  The libev extension was incompatible with this. As part of this,\n  certain internal, undocumented names have been changed.\n\n  (Technically, gevent can be built with Cython 3.0a2 and above.\n  However, up through 3.0a4 compiling with Cython 3 results in\n  gevent's test for memory leaks failing. See `this Cython issue\n  <https://github.com/cython/cython/issues/3578>`_.)\n  See :issue:`1599`.\n- Destroying a hub after joining it didn't necessarily clean up all\n  resources associated with the hub, especially if the hub had been\n  created in a secondary thread that was exiting. The hub and its parent\n  greenlet could be kept alive.\n\n  Now, destroying a hub drops the reference to the hub and ensures it\n  cannot be switched to again. (Though using a new blocking API call may\n  still create a new hub.)\n\n  Joining a hub also cleans up some (small) memory resources that might\n  have stuck around for longer before as well.\n  See :issue:`1601`.\n- Fix some potential crashes under libuv when using\n  ``gevent.signal_handler``. The crashes were seen running the test\n  suite and were non-deterministic.\n  See :issue:`1606`.\n\n\n----\n\n\n20.5.0 (2020-05-01)\n===================\n\n\nFeatures\n--------\n\n- Update bundled c-ares to version 1.16.0. `Changes <https://c-ares.haxx.se/changelog.html>`_.\n  See :issue:`1588`.\n- Update all the bundled ``config.guess`` and ``config.sub`` scripts.\n  See :issue:`1589`.\n- Update bundled libuv from 1.34.0 to 1.36.0.\n  See :issue:`1597`.\n\n\nBugfixes\n--------\n\n- Use ``ares_getaddrinfo`` instead of a manual lookup.\n\n  This requires c-ares 1.16.0.\n\n  Note that this may change the results, in particular their order.\n\n  As part of this, certain parts of the c-ares extension were adapted to\n  use modern Cython idioms.\n\n  A few minor errors and discrepancies were fixed as well, such as\n  ``gethostbyaddr('localhost')`` working on Python 3 and failing on\n  Python 2. The DNSpython resolver now raises the expected TypeError in\n  more cases instead of an AttributeError.\n  See :issue:`1012`.\n- The c-ares and DNSPython resolvers now raise exceptions much more\n  consistently with the standard resolver. Types and errnos are\n  substantially more likely to match what the standard library produces.\n\n  Depending on the system and configuration, results may not match\n  exactly, at least with DNSPython. There are still some rare cases\n  where the system resolver can raise ``herror`` but DNSPython will\n  raise ``gaierror`` or vice versa. There doesn't seem to be a\n  deterministic way to account for this. On PyPy, ``getnameinfo`` can\n  produce results when CPython raises ``socket.error``, and gevent's\n  DNSPython resolver also raises ``socket.error``.\n\n  In addition, several other small discrepancies were addressed,\n  including handling of localhost and broadcast host names.\n\n  .. note:: This has been tested on Linux (CentOS and Ubuntu), macOS,\n            and Windows. It hasn't been tested on other platforms, so\n            results are unknown for them. The c-ares support, in\n            particular, is using some additional socket functions and\n            defines. Please let the maintainers know if this introduces\n            issues.\n\n  See :issue:`1459`.\n\n\n----\n\n\n20.04.0 (2020-04-22)\n====================\n\n\nFeatures\n--------\n\n- Let CI (Travis and Appveyor) build and upload release wheels for\n  Windows, macOS and manylinux. As part of this, (a subset of) gevent's\n  tests can run if the standard library's ``test.support`` module has\n  been stripped.\n  See :issue:`1555`.\n- Update tested PyPy version from 7.2.0 on Windows to 7.3.1.\n  See :issue:`1569`.\n\n\nBugfixes\n--------\n\n- Fix a spurious warning about watchers and resource leaks on libuv on\n  Windows. Reported by Stéphane Rainville.\n  See :issue:`1564`.\n- Make monkey-patching properly remove ``select.epoll`` and\n  ``select.kqueue``. Reported by Kirill Smelkov.\n  See :issue:`1570`.\n- Make it possible to monkey-patch :mod:`contextvars` before Python 3.7\n  if a non-standard backport that uses the same name as the standard\n  library does is installed. Previously this would raise an error.\n  Reported by Simon Davy.\n  See :issue:`1572`.\n- Fix destroying the libuv default loop and then using the default loop\n  again.\n  See :issue:`1580`.\n- libuv loops that have watched children can now exit. Previously, the\n  SIGCHLD watcher kept the loop alive even if there were no longer any\n  watched children.\n  See :issue:`1581`.\n\n\nDeprecations and Removals\n-------------------------\n\n- PyPy no longer uses the Python allocation functions for libuv and\n  libev allocations.\n  See :issue:`1569`.\n\n\nMisc\n----\n\n- See :issue:`1367`.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.0283203125,
          "content": "========================\n Contributing to gevent\n========================\n\nPlease see `contribution-guide.org\n<http://www.contribution-guide.org/>`_ for general details on what we\nneed from contributors.\n\nIf you're filing a bug that needs a code example, please be sure it's\na `Short, Self Contained, Correct, Example <http://sscce.org>`_\n\nThanks!\n\n\ngevent-specific details\n=======================\n\nFor information on building gevent, and adding and updating test\ncases, see `the development documentation\n<http://www.gevent.org/contents.html#contents-developing>`_.\n\nThere are a number of systems in place to help ensure gevent is of the\nhighest possible quality:\n\n- A test suite is run for every push and pull request submitted.\n  Github Actions is used to test on Linux and macOS, and `AppVeyor`_ runs the builds on\n  Windows. Pull requests with tests that don't pass will be\n  automatically failed.\n\n.. image:: https://github.com/gevent/gevent/workflows/gevent%20testing/badge.svg\n   :target: https://github.com/gevent/gevent/actions\n\n  .. image:: https://ci.appveyor.com/api/projects/status/q4kl21ng2yo2ixur?svg=true\n     :target: https://ci.appveyor.com/project/denik/gevent\n\n- Builds on Github Actions automatically submit updates to `coveralls.io`_ to\n  monitor test coverage. Pull requests that don't feature adequate test\n  coverage will be automatically failed.\n\n  .. image:: https://coveralls.io/repos/gevent/gevent/badge.svg?branch=master&service=github\n     :target: https://coveralls.io/github/gevent/gevent?branch=master\n\n- Github Actions builds also run `pylint\n  <https://pylint.readthedocs.io/en/latest/>`_ to enforce code quality\n  conventions (PEP8 compliance and the like).\n\n\n.. _coveralls.io: https://coveralls.io/github/gevent/gevent\n.. _AppVeyor: https://ci.appveyor.com/project/denik/gevent\n\nPull requests that don't pass those checks will be automatically\nfailed. But don't worry, it's all about context. Most of the time\nfailing checks are easy to fix, and occasionally a PR will be accepted\neven with failing checks to be fixed by the maintainers.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2060546875,
          "content": "MIT License\n\nExcept when otherwise stated (look at the beginning of each file) the software\nand the documentation in this project are copyrighted by:\n\n  Denis Bilenko and the contributors, http://www.gevent.org\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 2.1962890625,
          "content": "recursive-include src/greentest *\nrecursive-include examples *\nrecursive-include src/gevent *\nrecursive-include docs *\nrecursive-include deps *\n\n\ninclude LICENSE\ninclude NOTICE\ninclude README.rst\ninclude CONTRIBUTING.rst\ninclude TODO\ninclude changelog.rst\ninclude MANIFEST.in\ninclude AUTHORS\ninclude Makefile.ext\ninclude known_failures.py\ninclude *.yml\ninclude *.txt\ninclude _setup*.py\ninclude CHANGES.rst\ninclude pyproject.toml\ninclude .coveragerc\ninclude .coveragerc-pypy\n\ninclude tox.ini\ninclude .pep8\ninclude .pylintrc\nrecursive-include .github *.md\nrecursive-include benchmarks *.sh *.py\nrecursive-include appveyor *.cmd\nrecursive-include appveyor *.ps1\nrecursive-include scripts *.sh *.py\ninclude scripts/releases/make-manylinux\n\n### Artifacts of configuring/building in place\n# These we want, they come from the Makefile step\n#- recursive-exclude gevent corecext.pyx *.c *.h\n# This we want if we're on PyPy it's moved there ahead of time\n# by setup.py\n#- prune gevent/libev\nprune */__pycache__\nglobal-exclude *.so\nglobal-exclude *.o\nglobal-exclude *.lo\nglobal-exclude *.la\nglobal-exclude .dirstamp\nglobal-exclude config.log config.status config.cache\nprune docs/_build\nglobal-exclude *.pyc\nrecursive-exclude src/greentest .coverage\nprune src/greentest/htmlcov\nrecursive-exclude deps/c-ares stamp-h? ares_build.h.orig\n\n# This is the output of _corecffi_build.py and may be particular\n# to each CFFI version/platform\nrecursive-exclude src/gevent _corecffi.c\nexclude configure-output\nexclude configure-output.txt\nexclude deps/TAGS\nexclude deps/libev/configure-output.txt\n\nexclude deps/c-ares/ares_build.h\nexclude deps/c-ares/ares_config.h\nexclude deps/c-ares/libcares.pc\nexclude deps/c-ares/libtool\nexclude deps/c-ares/Makefile\n\nprune deps/c-ares/.deps\nprune deps/c-ares/.libs\n\nprune deps/libev/.deps\nprune deps/libev/.libs\nrecursive-exclude deps/libev Makefile libtool stamp-h? config.h\n\nprune deps/libuv/.deps\nprune deps/libuv/.libs\nprune deps/libuv/src/.deps\nprune deps/libuv/src/unix/.deps\nprune deps/libuv/src/win/.deps\nprune deps/libuv/test/.deps\nprune deps/libuv/autom4te.cache\nprune deps/libuv/m4\nrecursive-exclude deps/libuv Makefile Makefile.in ar-lib aclocal.m4 compile configure depcomp install-sh libtool libuv.pc ltmain.sh missing\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 3.91015625,
          "content": "gevent is licensed under the MIT license. See the LICENSE file for the\ncomplete license.\n\nPortions of this software may have other licenses.\n\n=============================================\n\ngreentest/2.7\ngreentest/2.7.8\ngreentest/2.7pypy\ngreentest/3.3\ngreentest/3.4\ngreentest/3.5\n-----------------\n\nCopyright (c) 2001-2016 Python Software Foundation; All Rights Reserved\n\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n--------------------------------------------\n\n1. This LICENSE AGREEMENT is between the Python Software Foundation\n(\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using this software (\"Python\") in source or binary form and\nits associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative version,\nprovided, however, that PSF's License Agreement and PSF's notice of copyright,\ni.e., \"Copyright (c) 2001-2016 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version prepared\nby Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python.\n\n4. PSF is making Python available to Licensee on an \"AS IS\"\nbasis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any\nrelationship of agency, partnership, or joint venture between PSF and\nLicensee.  This License Agreement does not grant permission to use PSF\ntrademarks or trade name in a trademark sense to endorse or promote\nproducts or services of Licensee, or any third party.\n\n8. By copying, installing or otherwise using Python, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n============================================\n\ngevent/libuv/_corecffi_source.c\ngevent/libuv/_corecffi_cdef.c\n\nOriginally based on code from https://github.com/veegee/guv\n\nCopyright (c) 2014 V G\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\n===========================================\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 0.958984375,
          "content": "========\n gevent\n========\n\n.. image:: https://github.com/gevent/gevent/workflows/gevent%20testing/badge.svg\n   :target: https://github.com/gevent/gevent/actions\n\n.. image:: https://ci.appveyor.com/api/projects/status/bqxl88yhpho223jg?svg=true\n   :target: https://ci.appveyor.com/project/denik/gevent\n\n.. image:: https://coveralls.io/repos/gevent/gevent/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/gevent/gevent?branch=master\n\n.. include:: docs/_about.rst\n\nRead the documentation online at http://www.gevent.org.\n\nPost issues on the `bug tracker`_, discuss and ask open ended\nquestions on the `mailing list`_, and find announcements and\ninformation on the blog_ and `twitter (@gevent)`_.\n\n.. include:: docs/install.rst\n\n.. _bug tracker: https://github.com/gevent/gevent/issues\n.. _mailing list: http://groups.google.com/group/gevent\n.. _blog: https://dev.nextthought.com/blog/categories/gevent.html\n.. _twitter (@gevent): http://twitter.com/gevent\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.0693359375,
          "content": "The issue tracker is hosted at https://github.com/gevent/gevent/issues\n"
        },
        {
          "name": "_setupares.py",
          "type": "blob",
          "size": 4.328125,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\nsetup helpers for c-ares.\n\"\"\"\n\nfrom __future__ import print_function, absolute_import, division\n\nimport os\nimport os.path\nimport shutil\nimport sys\n\nfrom _setuputils import Extension\n\nimport distutils.sysconfig  # to get CFLAGS to pass into c-ares configure script pylint:disable=import-error\n\nfrom _setuputils import WIN\nfrom _setuputils import quoted_dep_abspath\nfrom _setuputils import system\nfrom _setuputils import should_embed\nfrom _setuputils import LIBRARIES\nfrom _setuputils import DEFINE_MACROS\nfrom _setuputils import glob_many\nfrom _setuputils import dep_abspath\nfrom _setuputils import RUNNING_ON_CI\nfrom _setuputils import RUNNING_FROM_CHECKOUT\nfrom _setuputils import cythonize1\nfrom _setuputils import get_include_dirs\n\n\nCARES_EMBED = should_embed('c-ares')\n\n# See #616, trouble building for a 32-bit python on a 64-bit platform\n# (Linux).\n_distutils_cflags = distutils.sysconfig.get_config_var(\"CFLAGS\") or ''\ncflags = _distutils_cflags + ((' ' + os.environ['CFLAGS']) if os.environ.get(\"CFLAGS\") else '')\ncflags = ('CFLAGS=\"%s\"' % (cflags,)) if cflags else ''\n\n\n# Use -r, not -e, for support of old solaris. See\n# https://github.com/gevent/gevent/issues/777\nares_configure_command = ' '.join([\n    \"(cd \", quoted_dep_abspath('c-ares'),\n    \" && if [ -r include/ares_build.h ]; then cp include/ares_build.h include/ares_build.h.orig; fi \",\n    \" && sh ./configure --disable-dependency-tracking --disable-tests -C \" + cflags,\n    \" && cp src/lib/ares_config.h include/ares_build.h \\\"$OLDPWD\\\" \",\n    \" && cat include/ares_build.h \",\n    \" && if [ -r include/ares_build.h.orig ]; then mv include/ares_build.h.orig include/ares_build.h; fi)\",\n    \"> configure-output.txt\"\n])\n\nif 'GEVENT_MANYLINUX' in os.environ:\n    # Assumes that c-ares is pre-configured.\n    ares_configure_command = '(echo preconfigured) > configure-output.txt'\n\n\n\ndef configure_ares(bext, ext):\n    print(\"Embedding c-ares\", bext, ext)\n    bdir = os.path.join(bext.build_temp, 'c-ares', 'include')\n    ext.include_dirs.insert(0, bdir)\n    print(\"Inserted \", bdir, \"in include dirs\", ext.include_dirs)\n\n    if not os.path.isdir(bdir):\n        os.makedirs(bdir)\n\n    if WIN:\n        src = \"deps\\\\c-ares\\\\include\\\\ares_build.h.dist\"\n        dest = os.path.join(bdir, \"ares_build.h\")\n        print(\"Copying %r to %r\" % (src, dest))\n        shutil.copy(src, dest)\n        return\n\n    cwd = os.getcwd()\n    os.chdir(bdir)\n    try:\n        if os.path.exists('ares_config.h') and os.path.exists('ares_build.h'):\n            return\n        try:\n            system(ares_configure_command)\n        except:\n            with open('configure-output.txt', 'r') as t:\n                print(t.read(), file=sys.stderr)\n            raise\n    finally:\n        os.chdir(cwd)\n\n\nARES = Extension(\n    name='gevent.resolver.cares',\n    sources=[\n        'src/gevent/resolver/cares.pyx'\n    ],\n    include_dirs=get_include_dirs(*(\n        [os.path.join(dep_abspath('c-ares'), 'include'),\n         os.path.join(dep_abspath('c-ares'), 'src', 'lib')]\n        if CARES_EMBED\n        else [])),\n    libraries=list(LIBRARIES),\n    define_macros=list(DEFINE_MACROS),\n    depends=glob_many(\n        'src/gevent/resolver/cares_*.[ch]')\n)\n\nares_required = RUNNING_ON_CI and RUNNING_FROM_CHECKOUT\nARES.optional = not ares_required\n\n\nif CARES_EMBED:\n    ARES.sources += glob_many('deps/c-ares/src/lib/*.c')\n    ARES.sources += glob_many('deps/c-ares/src/lib/dsa/*.c')\n    ARES.sources += glob_many('deps/c-ares/src/lib/str/*.c')\n    ARES.sources += glob_many('deps/c-ares/src/lib/record/*.c')\n    ARES.sources += glob_many('deps/c-ares/src/lib/util/*.c')\n    ARES.sources += glob_many('deps/c-ares/src/lib/event/*.c')\n    ARES.sources += glob_many('deps/c-ares/src/lib/legacy/*.c')\n    ARES.configure = configure_ares\n    if WIN:\n        ARES.libraries += ['advapi32']\n        ARES.define_macros += [('CARES_STATICLIB', '')]\n    else:\n        ARES.define_macros += [('HAVE_CONFIG_H', '')]\n        if sys.platform != 'darwin':\n            ARES.libraries += ['rt']\n        else:\n            # libresolv dependency introduced in\n            # c-ares 1.16.1.\n            ARES.libraries += ['resolv']\n    ARES.define_macros += [('CARES_EMBED', '1')]\nelse:\n    ARES.libraries.append('cares')\n    ARES.define_macros += [('HAVE_NETDB_H', '')]\n    ARES.configure = lambda bext, ext: print(\"c-ares not embedded, not configuring\", bext, ext)\n\nARES = cythonize1(ARES)\n"
        },
        {
          "name": "_setuplibev.py",
          "type": "blob",
          "size": 4.6455078125,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\nsetup helpers for libev.\n\nImporting this module should have no side-effects; in particular,\nit shouldn't attempt to cythonize anything.\n\"\"\"\n\nfrom __future__ import print_function, absolute_import, division\n\nimport os.path\n\nfrom _setuputils import Extension\n\nfrom _setuputils import system\nfrom _setuputils import dep_abspath\nfrom _setuputils import quoted_dep_abspath\nfrom _setuputils import WIN\nfrom _setuputils import LIBRARIES\nfrom _setuputils import DEFINE_MACROS\nfrom _setuputils import glob_many\nfrom _setuputils import should_embed\nfrom _setuputils import get_include_dirs\n\n\nLIBEV_EMBED = should_embed('libev')\n\n# Configure libev in place\nlibev_configure_command = ' '.join([\n    \"(cd \", quoted_dep_abspath('libev'),\n    \" && sh ./configure -C > configure-output.txt\",\n    \")\",\n])\n\n\ndef configure_libev(build_command=None, extension=None): # pylint:disable=unused-argument\n    # build_command is an instance of ConfiguringBuildExt.\n    # extension is an instance of the setuptools Extension object.\n    #\n    # This is invoked while `build_command` is in the middle of its `run()`\n    # method.\n\n    # Both of these arguments are unused here so that we can use this function\n    # both from a build command and from libev/_corecffi_build.py\n\n    if WIN:\n        return\n\n    libev_path = dep_abspath('libev')\n    config_path = os.path.join(libev_path, 'config.h')\n    if os.path.exists(config_path):\n        print(\"Not configuring libev, 'config.h' already exists\")\n        return\n\n    system(libev_configure_command)\n\n\ndef build_extension():\n    # Return the un-cythonized extension.\n    # This can be used to access things like `libraries` and `include_dirs`\n    # and `define_macros` so we DRY.\n    include_dirs = get_include_dirs()\n    include_dirs.append(os.path.abspath(os.path.join('src', 'gevent', 'libev')))\n    if LIBEV_EMBED:\n        include_dirs.append(dep_abspath('libev'))\n    CORE = Extension(name='gevent.libev.corecext',\n                     sources=[\n                         'src/gevent/libev/corecext.pyx',\n                         'src/gevent/libev/callbacks.c',\n                     ],\n                     include_dirs=include_dirs,\n                     libraries=list(LIBRARIES),\n                     define_macros=list(DEFINE_MACROS),\n                     depends=glob_many('src/gevent/libev/callbacks.*',\n                                       'src/gevent/libev/stathelper.c',\n                                       'src/gevent/libev/libev*.h',\n                                       'deps/libev/*.[ch]'))\n    # While we don't actually use periodic watchers,\n    # on Windows we need to enable them to work around an issue\n    # in libev 4.33 where ``have_monotonic`` is not defined.\n    EV_PERIODIC_ENABLE = \"0\"\n    if WIN:\n        CORE.define_macros.append(('EV_STANDALONE', '1'))\n        EV_PERIODIC_ENABLE = \"1\"\n    # QQQ libev can also use -lm, however it seems to be added implicitly\n\n    if LIBEV_EMBED:\n        CORE.define_macros += [\n            ('LIBEV_EMBED', '1'),\n            # we don't use void* data in the cython implementation;\n            # the CFFI implementation does and removes this line.\n            ('EV_COMMON', ''),\n            # libev watchers that we don't use currently:\n            ('EV_CLEANUP_ENABLE', '0'),\n            ('EV_EMBED_ENABLE', '0'),\n            (\"EV_PERIODIC_ENABLE\", EV_PERIODIC_ENABLE),\n            # Time keeping. If possible, use the realtime and/or monotonic\n            # clocks. On Linux, this can reduce the number of observable syscalls.\n            # On older linux, such as the version in manylinux2010, this requires\n            # linking to lib rt. We handle this in make-manylinux. Newer versions\n            # generally don't need that.\n            (\"EV_USE_REALTIME\", \"1\"),\n            (\"EV_USE_MONOTONIC\", \"1\"),\n            # use the builtin floor() function. Every modern platform should\n            # have this, right?\n            (\"EV_USE_FLOOR\", \"1\"),\n        ]\n        CORE.configure = configure_libev\n        if os.environ.get('GEVENTSETUP_EV_VERIFY') is not None:\n            CORE.define_macros.append(\n                ('EV_VERIFY', os.environ['GEVENTSETUP_EV_VERIFY']))\n            # EV_VERIFY is implemented using assert(), which only works if\n            # NDEBUG is *not* defined. distutils likes to define NDEBUG by default,\n            # meaning that we get no verification in embedded mode. Since that's the\n            # most common testing configuration, that's not good.\n            CORE.undef_macros.append('NDEBUG')\n    else:\n        CORE.define_macros += [('LIBEV_EMBED', '0')]\n        CORE.libraries.append('ev')\n        CORE.configure = lambda *args: print(\"libev not embedded, not configuring\")\n\n    return CORE\n"
        },
        {
          "name": "_setuputils.py",
          "type": "blob",
          "size": 18.9267578125,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\ngevent build utilities.\n\"\"\"\n\nfrom __future__ import print_function, absolute_import, division\n\nimport re\nimport os\nimport os.path\nimport sys\nimport sysconfig\nfrom distutils import sysconfig as dist_sysconfig\nfrom subprocess import check_call\nfrom glob import glob\n\nfrom setuptools import Extension as _Extension\nfrom setuptools.command.build_ext import build_ext\n\nTHIS_DIR = os.path.dirname(__file__)\n\n## Exported configurations\n\nPYPY = hasattr(sys, 'pypy_version_info')\nWIN = sys.platform.startswith('win')\nPY311 = sys.version_info[:2] >= (3, 11)\nPY312 = sys.version_info[:2] >= (3, 12)\n\n\nRUNNING_ON_TRAVIS = os.environ.get('TRAVIS')\nRUNNING_ON_APPVEYOR = os.environ.get('APPVEYOR')\nRUNNING_ON_GITHUB_ACTIONS = os.environ.get('GITHUB_ACTIONS')\nRUNNING_ON_CI = RUNNING_ON_TRAVIS or RUNNING_ON_APPVEYOR or RUNNING_ON_GITHUB_ACTIONS\nRUNNING_FROM_CHECKOUT = os.path.isdir(os.path.join(THIS_DIR, \".git\"))\n\n\nLIBRARIES = []\nDEFINE_MACROS = []\n\n\nif WIN:\n    LIBRARIES += ['ws2_32']\n    DEFINE_MACROS += [('FD_SETSIZE', '1024'), ('_WIN32', '1')]\n\n### File handling\n\ndef quoted_abspath(*segments):\n    return '\"' + os.path.abspath(os.path.join(*segments)) + '\"'\n\ndef read(*names):\n    \"\"\"Read a file path relative to this file.\"\"\"\n    with open(os.path.join(THIS_DIR, *names)) as f:\n        return f.read()\n\ndef read_version(name=\"src/gevent/__init__.py\"):\n    contents = read(name)\n    version = re.search(r\"__version__\\s*=\\s*'(.*)'\", contents, re.M).group(1)\n    assert version, \"could not read version\"\n    return version\n\ndef dep_abspath(depname, *extra):\n    return os.path.abspath(os.path.join('deps', depname, *extra))\n\ndef quoted_dep_abspath(depname):\n    return quoted_abspath(dep_abspath(depname))\n\ndef glob_many(*globs):\n    \"\"\"\n    Return a list of all the glob patterns expanded.\n    \"\"\"\n    result = []\n    for pattern in globs:\n        result.extend(glob(pattern))\n    return sorted(result)\n\n\n## Configuration\n\n# Environment variables that are intended to be used outside of our own\n# CI should be documented in ``installing_from_source.rst``.\n# They should all begin with ``GEVENTSETUP_``\n\n\ndef bool_from_environ(key):\n    value = os.environ.get(key)\n    if not value:\n        return\n    value = value.lower().strip()\n    if value in ('1', 'true', 'on', 'yes'):\n        return True\n    if value in ('0', 'false', 'off', 'no'):\n        return False\n    raise ValueError('Environment variable %r has invalid value %r. '\n                     'Please set it to 1, 0 or an empty string' % (key, value))\n\n\ndef _check_embed(key, defkey, path=None, warn=False):\n    \"\"\"\n    Find a boolean value, configured in the environment at *key* or\n    *defkey* (typically, *defkey* will be shared by several calls). If\n    those don't exist, then check for the existence of *path* and return\n    that (if path is given)\n    \"\"\"\n    value = bool_from_environ(key)\n    if value is None:\n        value = bool_from_environ(defkey)\n    if value is not None:\n        if warn:\n            print(\"Warning: gevent setup: legacy environment key %s or %s found\"\n                  % (key, defkey))\n        return value\n    return os.path.exists(path) if path is not None else None\n\ndef should_embed(dep_name):\n    \"\"\"\n    Check the configuration for the dep_name and see if it should be\n    embedded. Environment keys are derived from the dep name: libev\n    becomes GEVENTSETUP_EMBED_LIBEV and c-ares becomes\n    GEVENTSETUP_EMBED_CARES.\n    \"\"\"\n    path = dep_abspath(dep_name)\n    normal_dep_key = dep_name.replace('-', '').upper()\n\n    default_key = 'GEVENTSETUP_EMBED'\n    dep_key = default_key + '_' + normal_dep_key\n\n    result = _check_embed(dep_key, default_key)\n    if result is not None:\n        return result\n\n    # Not defined, check legacy settings, and fallback to the path\n\n    legacy_default_key = 'EMBED'\n    legacy_dep_key = normal_dep_key + '_' + legacy_default_key\n\n\n    return _check_embed(legacy_dep_key, legacy_default_key, path,\n                        warn=True)\n\n## Headers\n\ndef get_include_dirs(*extra_paths):\n    \"\"\"\n    Return additional include directories that might be needed to\n    compile extensions. Specifically, we need the greenlet.h header\n    in many of our extensions.\n    \"\"\"\n    # setuptools will put the normal include directory for Python.h on the\n    # include path automatically. We don't want to override that with\n    # a different Python.h if we can avoid it: On older versions of Python,\n    # that can cause issues with debug builds (see https://github.com/gevent/gevent/issues/1461)\n    # so order matters here.\n    #\n    # sysconfig.get_path('include') will return the path to the main include\n    # directory. In a virtual environment, that's a symlink to the main\n    # Python installation include directory:\n    #   sysconfig.get_path('include') -> /path/to/venv/include/python3.8\n    #   /path/to/venv/include/python3.7 -> /pythondir/include/python3.8\n    #\n    # distutils.sysconfig.get_python_inc() returns the main Python installation\n    # include directory:\n    #   distutils.sysconfig.get_python_inc() -> /pythondir/include/python3.8\n    #\n    # Neither sysconfig dir is not enough if we're in a virtualenv; the greenlet.h\n    # header goes into a site/ subdir. See https://github.com/pypa/pip/issues/4610\n    dist_inc_dir = os.path.abspath(dist_sysconfig.get_python_inc()) # 1\n    sys_inc_dir = os.path.abspath(sysconfig.get_path(\"include\")) # 2\n    venv_include_dir = os.path.join(\n        sys.prefix, 'include', 'site',\n        'python' + sysconfig.get_python_version()\n    )\n    venv_include_dir = os.path.abspath(venv_include_dir)\n\n    # If we're installed via buildout, and buildout also installs\n    # greenlet, we have *NO* access to greenlet.h at all. So include\n    # our own copy as a fallback.\n    dep_inc_dir = os.path.abspath('deps') # 3\n\n    return [\n        p\n        for p in (dist_inc_dir, sys_inc_dir, dep_inc_dir) + extra_paths\n        if os.path.exists(p)\n    ]\n\n\n## Processes\n\ndef _system(cmd, cwd=None, env=None, **kwargs):\n    sys.stdout.write('Running %r in %s\\n' % (cmd, cwd or os.getcwd()))\n    sys.stdout.flush()\n    if 'shell' not in kwargs:\n        kwargs['shell'] = True\n    env = env or os.environ.copy()\n    return check_call(cmd, cwd=cwd, env=env, **kwargs)\n\n\ndef system(cmd, cwd=None, env=None, **kwargs):\n    if _system(cmd, cwd=cwd, env=env, **kwargs):\n        sys.exit(1)\n\n\n###\n# Cython\n###\n\nCOMMON_UTILITY_INCLUDE_DIR = \"src/gevent/_generated_include\"\n\n# Based on code from\n# http://cython.readthedocs.io/en/latest/src/reference/compilation.html#distributing-cython-modules\ndef _dummy_cythonize(extensions, **_kwargs):\n    for extension in extensions:\n        sources = []\n        for sfile in extension.sources:\n            path, ext = os.path.splitext(sfile)\n            if ext in ('.pyx', '.py'):\n                ext = '.c'\n                sfile = path + ext\n            sources.append(sfile)\n        extension.sources[:] = sources\n    return extensions\n\ntry:\n    from Cython.Build import cythonize\nexcept ImportError:\n    # The .c files had better already exist.\n    cythonize = _dummy_cythonize\n\ndef cythonize1(ext):\n    # All the directories we have .pxd files\n    # and .h files that are included regardless of\n    # embed settings.\n    standard_include_paths = [\n        'src/gevent',\n        'src/gevent/libev',\n        'src/gevent/resolver',\n        # This is for generated include files; see below.\n        '.',\n    ]\n    if PY311:\n        # The \"fast\" code is Cython for manipulating\n        # exceptions is, unfortunately, broken, at least in 3.0.2.\n        # The implementation of __Pyx__GetException() doesn't properly set\n        # tstate->current_exception when it normalizes exceptions,\n        # causing assertion errors.\n        # This definitely seems to be a problem on 3.12, and MAY\n        # be a problem on 3.11 (#1985)\n        ext.define_macros.append(('CYTHON_FAST_THREAD_STATE', '0'))\n    try:\n        new_ext = cythonize(\n            [ext],\n            include_path=standard_include_paths,\n            annotate=True,\n            compiler_directives={\n                'language_level': '3str',\n                'always_allow_keywords': False,\n                'infer_types': True,\n                'nonecheck': False,\n            },\n            # XXX: Cython developers say: \"Please use C macros instead\n            # of Pyrex defines. Taking this kind of decision based on\n            # the runtime environment of the build is wrong, it needs\n            # to be taken at C compile time.\"\n            #\n            # They also say, \"The 'IF' statement is deprecated and\n            # will be removed in a future Cython version. Consider\n            # using runtime conditions or C macros instead. See\n            # https://github.com/cython/cython/issues/4310\"\n            #\n            # And: \" The 'DEF' statement is deprecated and will be\n            # removed in a future Cython version. Consider using\n            # global variables, constants, and in-place literals\n            # instead.\"\n            #compile_time_env={\n            #\n            #},\n            # The common_utility_include_dir (not well documented)\n            # causes Cython to emit separate files for much of the\n            # static support code. Each of the modules then includes\n            # the static files they need. They have hash names based\n            # on digest of all the relevant compiler directives,\n            # including those set here and those set in the file. It's\n            # worth monitoring to be sure that we don't start to get\n            # divergent copies; make sure files declare the same\n            # options.\n            #\n            # The value used here must be listed in the above ``include_path``,\n            # and included in sdists. Files will be included based on this\n            # full path, so its parent directory, ``.``, must be on the runtime\n            # include path.\n            common_utility_include_dir=COMMON_UTILITY_INCLUDE_DIR,\n            # The ``cache`` argument is not well documented, but causes Cython to\n            # cache to disk some intermediate results. In the past, this was\n            # incompatible with ``common_utility_include_dir``, but not anymore.\n            # However, it seems to only function on posix (it spawns ``du``).\n            # It doesn't seem to buy us much speed, and results in a bunch of\n            # ResourceWarnings about unclosed files.\n            # cache=\"build/cycache\",\n        )[0]\n    except ValueError:\n        # 'invalid literal for int() with base 10: '3str'\n        # This is seen when an older version of Cython is installed.\n        # It's a bit of a chicken-and-egg, though, because installing\n        # from dev-requirements first scans this egg for its requirements\n        # before doing any updates.\n        import traceback\n        traceback.print_exc()\n        new_ext = _dummy_cythonize([ext])[0]\n\n    for optional_attr in ('configure', 'optional'):\n        if hasattr(ext, optional_attr):\n            setattr(new_ext, optional_attr,\n                    getattr(ext, optional_attr))\n    new_ext.extra_compile_args.extend(IGNORE_THIRD_PARTY_WARNINGS)\n    new_ext.include_dirs.extend(standard_include_paths)\n    return new_ext\n\n# A tuple of arguments to add to ``extra_compile_args``\n# to ignore warnings from third-party code we can't do anything\n# about.\nIGNORE_THIRD_PARTY_WARNINGS = ()\nif sys.platform == 'darwin':\n    # macos, or other platforms using clang\n    # (TODO: How to detect clang outside those platforms?)\n    IGNORE_THIRD_PARTY_WARNINGS += (\n        # If clang is old and doesn't support the warning, these\n        # are ignored, albeit not silently.\n        # The first two are all over the place from Cython.\n        '-Wno-unreachable-code',\n        '-Wno-deprecated-declarations',\n        # generic, started with some xcode update\n        '-Wno-incompatible-sysroot',\n        # libuv\n        '-Wno-tautological-compare',\n        '-Wno-implicit-function-declaration',\n        # libev\n        '-Wno-unused-value',\n        '-Wno-macro-redefined',\n    )\n\n## Distutils extensions\nclass BuildFailed(Exception):\n    pass\n\nfrom distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError # pylint:disable=no-name-in-module,import-error\next_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError, IOError)\n\n\nclass ConfiguringBuildExt(build_ext):\n\n    # CFFI subclasses this class with its own, that overrides run()\n    # and invokes a `pre_run` method, if defined. The run() method is\n    # called only once from setup.py (this class is only instantiated\n    # once per invocation of setup()); run() in turn calls\n    # `build_extension` for every defined extension.\n\n    # For extensions we control, we let them define a `configure`\n    # callable attribute, and we invoke that before building. But we\n    # can't control the Extension object that CFFI creates. The best\n    # we can do is provide a global hook that we can invoke in pre_run().\n\n    gevent_pre_run_actions = ()\n\n    @classmethod\n    def gevent_add_pre_run_action(cls, action):\n        # Actions should be idempotent.\n        cls.gevent_pre_run_actions += (action,)\n\n    def finalize_options(self):\n        # Setting parallel to true can break builds when we need to configure\n        # embedded libraries, which we do by changing directories. If that\n        # happens while we're compiling, we may not be able to find source code.\n        build_ext.finalize_options(self)\n\n    def gevent_prepare(self, ext):\n        configure = getattr(ext, 'configure', None)\n        if configure:\n            configure(self, ext)\n\n    def build_extension(self, ext):\n        self.gevent_prepare(ext)\n        try:\n            return build_ext.build_extension(self, ext)\n        except ext_errors:\n            if getattr(ext, 'optional', False):\n                raise BuildFailed()\n            raise\n\n    def pre_run(self, *_args):\n        # Called only from CFFI.\n        # With mulitple extensions, this probably gets called multiple\n        # times.\n        for action in self.gevent_pre_run_actions:\n            action()\n\n\nclass Extension(_Extension):\n    # This class has a few functions:\n    #\n    #    1. Make pylint happy in terms of attributes we use.\n    #    2. Add default arguments, often platform specific.\n\n    def __init__(self, *args, **kwargs):\n        self.libraries = []\n        self.define_macros = []\n        # Python 2 has this as an old-style class for some reason\n        # so super() doesn't work.\n        _Extension.__init__(self, *args, **kwargs) # pylint:disable=no-member,non-parent-init-called\n\n\nfrom distutils.command.clean import clean # pylint:disable=no-name-in-module,import-error\nfrom distutils import log # pylint:disable=no-name-in-module\nfrom distutils.dir_util import remove_tree # pylint:disable=no-name-in-module,import-error\n\nclass GeventClean(clean):\n\n    BASE_GEVENT_SRC = os.path.join('src', 'gevent')\n\n    def __find_directories_in(self, top, named=None):\n        \"\"\"\n        Iterate directories, beneath and including *top* ignoring '.'\n        entries.\n        \"\"\"\n        for dirpath, dirnames, _ in os.walk(top):\n            # Modify dirnames in place to prevent walk from\n            # recursing into hidden directories.\n            dirnames[:] = [x for x in dirnames if not x.startswith('.')]\n            for dirname in dirnames:\n                if named is None or named == dirname:\n                    yield os.path.join(dirpath, dirname)\n\n    def __glob_under(self, base, file_pat):\n        return glob_many(\n            os.path.join(base, file_pat),\n            *(os.path.join(x, file_pat)\n              for x in\n              self.__find_directories_in(base)))\n\n    def __remove_dirs(self, remove_file):\n\n        dirs_to_remove = [\n            'htmlcov',\n            '.eggs',\n            COMMON_UTILITY_INCLUDE_DIR,\n        ]\n        if self.all:\n            dirs_to_remove += [\n                # tox\n                '.tox',\n                # instal.sh for pyenv\n                '.runtimes',\n                # Built wheels from manylinux\n                'wheelhouse',\n                # Doc build\n                os.path.join('.', 'docs', '_build'),\n            ]\n        dir_finders = [\n            # All python cache dirs\n            (self.__find_directories_in, '.', '__pycache__'),\n        ]\n\n        for finder in dir_finders:\n            func = finder[0]\n            args = finder[1:]\n            dirs_to_remove.extend(func(*args))\n\n        for f in sorted(dirs_to_remove):\n            remove_file(f)\n\n    def run(self):\n        clean.run(self)\n\n        if self.dry_run:\n            def remove_file(f):\n                if os.path.isdir(f):\n                    remove_tree(f, dry_run=self.dry_run)\n                elif os.path.exists(f):\n                    log.info(\"Would remove '%s'\", f)\n        else:\n            def remove_file(f):\n                if os.path.isdir(f):\n                    remove_tree(f, dry_run=self.dry_run)\n                elif os.path.exists(f):\n                    log.info(\"Removing '%s'\", f)\n                    os.remove(f)\n\n        # Remove directories first before searching for individual files\n        self.__remove_dirs(remove_file)\n\n        def glob_gevent(file_path):\n            return glob(os.path.join(self.BASE_GEVENT_SRC, file_path))\n\n        def glob_gevent_and_under(file_pat):\n            return self.__glob_under(self.BASE_GEVENT_SRC, file_pat)\n\n        def glob_root_and_under(file_pat):\n            return self.__glob_under('.', file_pat)\n\n        files_to_remove = [\n            '.coverage',\n            # One-off cython-generated code that doesn't\n            # follow a globbale-pattern\n            os.path.join(self.BASE_GEVENT_SRC, 'libev', 'corecext.c'),\n            os.path.join(self.BASE_GEVENT_SRC, 'libev', 'corecext.h'),\n            os.path.join(self.BASE_GEVENT_SRC, 'resolver', 'cares.c'),\n            os.path.join(self.BASE_GEVENT_SRC, 'resolver', 'cares.c'),\n        ]\n\n        def dep_configure_artifacts(dep):\n            for f in (\n                    'config.h',\n                    'config.log',\n                    'config.status',\n                    'config.cache',\n                    'configure-output.txt',\n                    '.libs'\n            ):\n                yield os.path.join('deps', dep, f)\n\n        file_finders = [\n            # The base gevent directory contains\n            # only generated .c code. Remove it.\n            (glob_gevent, \"*.c\"),\n            # Any .html files found in the gevent directory\n            # are the result of Cython annotations. Remove them.\n            (glob_gevent_and_under, \"*.html\"),\n            # Any compiled binaries have to go\n            (glob_gevent_and_under, \"*.so\"),\n            (glob_gevent_and_under, \"*.pyd\"),\n            (glob_root_and_under, \"*.o\"),\n            # Compiled python files too\n            (glob_gevent_and_under, \"*.pyc\"),\n            (glob_gevent_and_under, \"*.pyo\"),\n\n            # Artifacts of building dependencies in place\n            (dep_configure_artifacts, 'libev'),\n            (dep_configure_artifacts, 'libuv'),\n            (dep_configure_artifacts, 'c-ares'),\n        ]\n\n        for func, pat in file_finders:\n            files_to_remove.extend(func(pat))\n\n        for f in sorted(files_to_remove):\n            remove_file(f)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 7.6787109375,
          "content": "clone_depth: 50\nmax_jobs: 8\nshallow_clone: true\nbuild:\n  parallel: true\n  verbosity: minimal\nimage: Visual Studio 2022\n\nenvironment:\n  global:\n    APPVEYOR_SAVE_CACHE_ON_ERROR: \"true\"\n    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the\n    # /E:ON and /V:ON options are not enabled in the batch script interpreter\n    # See: http://stackoverflow.com/a/13751649/163740\n    CMD_IN_ENV: \"cmd /E:ON /V:ON /C .\\\\appveyor\\\\run_with_env.cmd\"\n    # Use a fixed hash seed for reproducability\n    PYTHONHASHSEED: 8675309\n    # Disable tests that use external network resources;\n    # too often we get failures to resolve DNS names or failures\n    # to connect on AppVeyor.\n    GEVENTTEST_USE_RESOURCES: \"-network\"\n    # Don't get warnings about Python 2 support being deprecated. We\n    # know.\n    PIP_NO_PYTHON_VERSION_WARNING: 1\n    PIP_UPGRADE_STRATEGY: eager\n    # Stay on the legacy implementation of editable installs.\n    # Recent versions of setuptools has changed how editable installs work,\n    # which broke Appveyor builds.\n    # For a relevant upstream issue, see https://github.com/pypa/setuptools/issues/3557\n    SETUPTOOLS_ENABLE_FEATURES: \"legacy-editable\"\n    # Enable this if debugging a resource leak. Otherwise\n    # it slows things down.\n    # PYTHONTRACEMALLOC: 10\n    ##\n    # Upload settings for twine.\n    TWINE_USERNAME: \"__token__\"\n    TWINE_PASSWORD:\n      secure: uXZ6Juhz2hElaTsaJ2Hnemm+YoYbjpkoT5NFFlj4xxSlZvUrjoiOdvPqxxCaNYozWIRM5QmXlj1nOF8nZDpzx7oAyVIMT2x3z9iI0C/G5r4G8uvbJJq6wpJRI5HQ3sE39qLK2MCPZJ3BTu/uvVgWWqQ6wInKXxNqDGyf9IgZOv3/sCd4CwD7bEqlwHzyeh9a2o17a5J1YMhL03LVRcrlmjN8/Ds642FtnF/e+VAhUdtZvU1ze8rfeR7KCe4ehOmy18dh5joPX8TJKbg/AJlIYQ==\n\n\n  matrix:\n    # http://www.appveyor.com/docs/installed-software#python\n\n    # Fully supported 64-bit versions, with testing. This should be\n    # all the current (non EOL) versions.\n    - PYTHON: \"C:\\\\Python313-x64\"\n      PYTHON_VERSION: \"3.13.0\"\n      PYTHON_ARCH: \"64\"\n      PYTHON_EXE: python\n\n    - PYTHON: \"C:\\\\Python312-x64\"\n      PYTHON_VERSION: \"3.12.0b\"\n      PYTHON_ARCH: \"64\"\n      PYTHON_EXE: python\n\n    # 64-bit\n    - PYTHON: \"C:\\\\Python311-x64\"\n      PYTHON_VERSION: \"3.11.0\"\n      PYTHON_ARCH: \"64\"\n      PYTHON_EXE: python\n\n    # TODO: What's the latest pypy?\n    # - PYTHON: \"C:\\\\pypy3.7-v7.3.7-win64\"\n    #   PYTHON_ID: \"pypy3\"\n    #   PYTHON_EXE: pypy3w\n    #   PYTHON_VERSION: \"3.7.x\"\n    #   PYTHON_ARCH: \"64\"\n    #   APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n\n    - PYTHON: \"C:\\\\Python310-x64\"\n      PYTHON_VERSION: \"3.10.0\"\n      PYTHON_ARCH: \"64\"\n      PYTHON_EXE: python\n\n    - PYTHON: \"C:\\\\Python39-x64\"\n      PYTHON_VERSION: \"3.9.x\"\n      PYTHON_ARCH: \"64\"\n      PYTHON_EXE: python\n\n\n    # 32-bit, wheel only (no testing)\n    - PYTHON: \"C:\\\\Python39\"\n      PYTHON_VERSION: \"3.9.x\"\n      PYTHON_ARCH: \"32\"\n      PYTHON_EXE: python\n      GWHEEL_ONLY: true\n\n\n    # Also test a Python version not pre-installed\n    # See: https://github.com/ogrisel/python-appveyor-demo/issues/10\n\n    # - PYTHON: \"C:\\\\Python266\"\n    #   PYTHON_VERSION: \"2.6.6\"\n    #   PYTHON_ARCH: \"32\"\n    #   PYTHON_EXE: python\n\n# matrix:\n#   allow_failures:\n#     - PYTHON_ID: \"pypy\"\n\ninstall:\n  # If there is a newer build queued for the same PR, cancel this one.\n  # The AppVeyor 'rollout builds' option is supposed to serve the same\n  # purpose but it is problematic because it tends to cancel builds pushed\n  # directly to master instead of just PR builds (or the converse).\n  # credits: JuliaLang developers.\n  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `\n        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `\n        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `\n          throw \"There are newer queued builds for this pull request, failing early.\" }\n  - ECHO \"Filesystem root:\"\n  - ps: \"ls \\\"C:/\\\"\"\n\n  - ECHO \"Installed SDKs:\"\n  - ps: \"if(Test-Path(\\\"C:/Program Files/Microsoft SDKs/Windows\\\")) {ls \\\"C:/Program Files/Microsoft SDKs/Windows\\\";}\"\n\n  # Install Python (from the official .msi of http://python.org) and pip when\n  # not already installed.\n  # PyPy portion based on https://github.com/wbond/asn1crypto/blob/master/appveyor.yml\n  - ps:\n      $env:PYTMP = \"${env:TMP}\\py\";\n      if (!(Test-Path \"$env:PYTMP\")) {\n        New-Item -ItemType directory -Path \"$env:PYTMP\" | Out-Null;\n      }\n      if (\"${env:PYTHON_ID}\" -eq \"pypy\") {\n        if (!(Test-Path \"${env:PYTMP}\\pypy2-v7.3.6-win64.zip\")) {\n          (New-Object Net.WebClient).DownloadFile('https://downloads.python.org/pypy/pypy2.7-v7.3.6-win64.zip', \"${env:PYTMP}\\pypy2-v7.3.6-win64.zip\");\n        }\n        7z x -y \"${env:PYTMP}\\pypy2-v7.3.6-win64.zip\" -oC:\\ | Out-Null;\n      }\n      elseif (\"${env:PYTHON_ID}\" -eq \"pypy3\") {\n        if (!(Test-Path \"${env:PYTMP}\\pypy3.7-v7.3.7-win64.zip\")) {\n          (New-Object Net.WebClient).DownloadFile(\"https://downloads.python.org/pypy/pypy3.7-v7.3.7-win64.zip\", \"${env:PYTMP}\\pypy3.7-v7.3.7-win64.zip\");\n        }\n        7z x -y \"${env:PYTMP}\\pypy3.7-v7.3.7-win64.zip\" -oC:\\ | Out-Null;\n      }\n      elseif (-not(Test-Path($env:PYTHON))) {\n        & appveyor\\install.ps1;\n      }\n\n  # Prepend newly installed Python to the PATH of this build (this cannot be\n  # done from inside the powershell script as it would require to restart\n  # the parent CMD process).\n  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PYTHON%\\\\bin;%PATH%\"\n  - \"SET PYEXE=%PYTHON%\\\\%PYTHON_EXE%.exe\"\n\n  # Check that we have the expected version and architecture for Python\n  - \"%PYEXE% --version\"\n  - \"%PYEXE% -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n\n  # Upgrade to the latest version of pip to avoid it displaying warnings\n  # about it being out of date. Do this here instead of above in\n  # powershell because the annoying 'DEPRECATION:blahblahblah 2.7 blahblahblah'\n  # breaks powershell.\n  - \"%CMD_IN_ENV% %PYEXE% -mensurepip -U --user\"\n  - \"%CMD_IN_ENV% %PYEXE% -mpip install -U --user pip\"\n\n  - ps: \"if(Test-Path(\\\"${env:PYTHON}\\\\bin\\\")) {ls ${env:PYTHON}\\\\bin;}\"\n  - ps: \"if(Test-Path(\\\"${env:PYTHON}\\\\Scripts\\\")) {ls ${env:PYTHON}\\\\Scripts;}\"\n\ncache:\n  - \"%TMP%\\\\py\\\\\"\n  - '%LOCALAPPDATA%\\pip\\Cache -> appveyor.yml,setup.py'\n\nbuild_script:\n  # Build the compiled extension\n  - \"%CMD_IN_ENV% %PYEXE% -m pip install -U wheel\"\n  - \"%CMD_IN_ENV% %PYEXE% -m pip install -U setuptools\"\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -m pip install -U -e .[test]\n\ntest_script:\n  # Run the project tests\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -c \"import greenlet; print(greenlet, greenlet.__version__)\"\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -c \"import gevent.core; print(gevent.core.loop)\"\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -c \"import gevent; print(gevent.config.settings['resolver'].get_options())\"\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -c \"from gevent._compat import get_clock_info; print(get_clock_info('perf_counter'))\"\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -mgevent.tests.known_failures\n  - if not \"%GWHEEL_ONLY%\"==\"true\" %PYEXE% -mgevent.tests --second-chance --config known_failures.py\n\nafter_test:\n  # pycparser can't be built correctly in an isolated environment.\n  # See\n  # https://ci.appveyor.com/project/denik/gevent/builds/23810605/job/83aw4u67artt002b#L602\n  # So we violate DRY and repeate some requirements in order to use\n  # --no-build-isolation\n  - \"%CMD_IN_ENV% %PYEXE% -m pip install wheel cython setuptools cffi twine\"\n  - \"%CMD_IN_ENV% %PYEXE% -m pip wheel --no-build-isolation . -w dist\"\n  - ps: \"ls dist\"\n\nartifacts:\n  # Archive the generated wheel package in the ci.appveyor.com build report.\n  - path: dist\\gevent*whl\n\n\ndeploy_script:\n  - ps: if ($env:APPVEYOR_REPO_TAG -eq $TRUE) { twine upload --skip-existing dist/gevent* }\n\ndeploy: on\n"
        },
        {
          "name": "appveyor",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.7265625,
          "content": "# For viewing README.rst (restview --long-description),\n# CONTRIBUTING.rst, etc.\n# https://github.com/mgedmin/restview\nrestview\n\npylint>=1.8.0 ; python_version < \"3.4\"\n# pylint 2 needs astroid 2; unfortunately, it uses `typed_ast`\n# which has a C extension that doesn't build on PyPy\npylint >= 2.5.0 ; python_version >= \"3.4\"  and platform_python_implementation == \"CPython\"\nastroid >= 2.4.0 ; python_version >= \"3.4\" and platform_python_implementation == \"CPython\"\n\n# backport of faulthandler\nfaulthandler ; python_version == \"2.7\"  and platform_python_implementation == \"CPython\"\n\n# For generating CHANGES.rst\ntowncrier\n# For making releases\nzest.releaser[recommended]\n\n# benchmarks use this\npyperf >= 1.6.1\n\ngreenlet >= 1.0\n\n-e .[test,docs]\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.0517578125,
          "content": "[build-system]\nbuild-backend = \"setuptools.build_meta\"\n# Build dependencies. Remember to change these in make-manylinux and appveyor.yml\n# if you add/remove/change them.\nrequires = [\n     \"setuptools >= 40.8.0\",\n\n     # Python 3.7 requires at least Cython 0.27.3.\n     # 0.28 is faster, and (important!) lets us specify the target module\n     # name to be created so that we can have both foo.py and _foo.so\n     # at the same time. 0.29 fixes some issues with Python 3.7,\n     # and adds the 3str mode for transition to Python 3. 0.29.14+ is\n     # required for Python 3.8. 3.0a2 introduced a change that prevented\n     # us from compiling (https://github.com/gevent/gevent/issues/1599)\n     # but once that was fixed, 3.0a4 led to all of our leak tests\n     # failing in Python 2 (https://travis-ci.org/github/gevent/gevent/jobs/683782800);\n     # This was fixed in 3.0a5 (https://github.com/cython/cython/issues/3578)\n     # 3.0a6 fixes an issue cythonizing source on 32-bit platforms.\n     # 3.0a9 is needed for Python 3.10.\n     # Python 3.12 requires at least 3.0rc2.\n     \"Cython >= 3.0.11\",\n     # See version requirements in setup.py\n     \"cffi >= 1.17.1 ; platform_python_implementation == 'CPython'\",\n     # Python 3.7 requires at least 0.4.14, which is ABI incompatible with earlier\n     # releases. Python 3.9 and 3.10 require 0.4.16;\n     # 0.4.17 is ABI incompatible with earlier releases, but compatible with 1.0\n     # 1.1.3 is needed for CPython 3.11.\n     # 2.0 is not ABI compatible with earlier releases, but with luck it won't\n     # have to break the ABI again.\n     # 3.0 is ABI compatible with earlier releases, so we can switch back and\n     # forth between 2 and 3 without recompiling. 3.0 is required for\n     # Python 3.12, and it fixes some serious bugs in Python 3.11.\n     \"greenlet >= 3.0.3 ; platform_python_implementation == 'CPython'\",\n]\n\n[tool.towncrier]\ndirectory = \"docs/changes\"\nfilename = \"CHANGES.rst\"\npackage = \"gevent\"\npackage_dir = \"src\"\nissue_format = \"See :issue:`{issue}`.\"\ntitle_format = false\ntemplate = \"docs/_templates/hr-between-versions.rst.tmpl\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.4794921875,
          "content": "[bdist_wheel]\nuniversal = 0\n\n[zest.releaser]\npython-file-with-version = src/gevent/__init__.py\ncreate-wheel = no\nprereleaser.middle =\n    gevent._util.prereleaser_middle\npostreleaser.before =\n    gevent._util.postreleaser_before\n\n[metadata]\nlong_description_content_type = text/x-rst\n\n[check-manifest]\nignore =\n    src/gevent/*.c\n    src/gevent/*.html\n    src/gevent/libev/corecext.h\n    src/gevent/libev/corecext.html\n    src/gevent/_generated_include/*.h\n    src/gevent/_generated_include\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 17.0234375,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"gevent build & installation script\"\"\"\nfrom __future__ import print_function\nimport sys\nimport os\nimport os.path\n\n\n# setuptools is *required* on Windows\n# (https://bugs.python.org/issue23246) and for PyPy. No reason not to\n# use it everywhere. v24.2.0 is needed for python_requires\nfrom setuptools import Extension, setup\nfrom setuptools import find_packages\n\n#\n# We import other files that are siblings of this file as modules. In\n# the past, setuptools guaranteed that this directory was on the path\n# (typically, the working directory) but in a PEP517 world, that's no\n# longer guaranteed to be the case. setuptools provides a PEP517\n# backend (``setuptools.build_meta:__legacy__``) that *does* guarantee\n# that, and we used it for a long time. But downstream packagers have begun\n# complaining about using it. So we futz with the path ourself.\n# (This is also an issue on Python3.11+ with $PYTHONSAFEPATH=1)\nsys.path.insert(0, os.path.dirname(__file__))\n\nfrom _setuputils import read\nfrom _setuputils import read_version\nfrom _setuputils import PYPY, WIN\nfrom _setuputils import ConfiguringBuildExt\nfrom _setuputils import GeventClean\nfrom _setuputils import BuildFailed\nfrom _setuputils import cythonize1\nfrom _setuputils import get_include_dirs\nfrom _setuputils import bool_from_environ\n\n# Environment variables that are intended to be used outside of our own\n# CI should be documented in ``installing_from_source.rst``\n\nif WIN:\n    # Make sure the env vars that make.cmd needs are set\n    if not os.environ.get('PYTHON_EXE'):\n        os.environ['PYTHON_EXE'] = 'pypy' if PYPY else 'python'\n    if not os.environ.get('PYEXE'):\n        os.environ['PYEXE'] = os.environ['PYTHON_EXE']\n\n\n__version__ = read_version()\n\n\nfrom _setuplibev import build_extension as build_libev_extension\nfrom _setupares import ARES\n\nCORE = cythonize1(build_libev_extension())\n\n# Modules that we cythonize for performance.\n# Be careful not to use simple names for these modules,\n# as the non-static symbols cython generates do not include\n# the module name. Thus an extension of 'gevent._queue'\n# results in symbols like 'PyInit__queue', which is the same\n# symbol used by the standard library _queue accelerator module.\n# The name of the .pxd file must match the local name of the accelerator\n# extension; however, sadly, the generated .c and .html files will\n# still use the same name as the .py source.\n\nSEMAPHORE = Extension(name=\"gevent._gevent_c_semaphore\",\n                      sources=[\"src/gevent/_semaphore.py\"],\n                      depends=['src/gevent/_gevent_c_semaphore.pxd'],\n                      include_dirs=get_include_dirs())\n\n\nLOCAL = Extension(name=\"gevent._gevent_clocal\",\n                  sources=[\"src/gevent/local.py\"],\n                  depends=['src/gevent/_gevent_clocal.pxd'],\n                  include_dirs=get_include_dirs())\n\n\nGREENLET = Extension(name=\"gevent._gevent_cgreenlet\",\n                     sources=[\n                         \"src/gevent/greenlet.py\",\n                     ],\n                     depends=[\n                         'src/gevent/_gevent_cgreenlet.pxd',\n                         'src/gevent/_gevent_c_ident.pxd',\n                         'src/gevent/_ident.py'\n                     ],\n                     include_dirs=get_include_dirs())\n\nABSTRACT_LINKABLE = Extension(name=\"gevent._gevent_c_abstract_linkable\",\n                              sources=[\"src/gevent/_abstract_linkable.py\"],\n                              depends=['src/gevent/_gevent_c_abstract_linkable.pxd'],\n                              include_dirs=get_include_dirs())\n\n\nIDENT = Extension(name=\"gevent._gevent_c_ident\",\n                  sources=[\"src/gevent/_ident.py\"],\n                  depends=['src/gevent/_gevent_c_ident.pxd'],\n                  include_dirs=get_include_dirs())\n\n\nIMAP = Extension(name=\"gevent._gevent_c_imap\",\n                 sources=[\"src/gevent/_imap.py\"],\n                 depends=['src/gevent/_gevent_c_imap.pxd'],\n                 include_dirs=get_include_dirs())\n\nEVENT = Extension(name=\"gevent._gevent_cevent\",\n                  sources=[\"src/gevent/event.py\"],\n                  depends=['src/gevent/_gevent_cevent.pxd'],\n                  include_dirs=get_include_dirs())\n\nQUEUE = Extension(name=\"gevent._gevent_cqueue\",\n                  sources=[\"src/gevent/queue.py\"],\n                  depends=['src/gevent/_gevent_cqueue.pxd'],\n                  include_dirs=get_include_dirs())\n\nHUB_LOCAL = Extension(name=\"gevent._gevent_c_hub_local\",\n                      sources=[\"src/gevent/_hub_local.py\"],\n                      depends=['src/gevent/_gevent_c_hub_local.pxd'],\n                      include_dirs=get_include_dirs())\n\nWAITER = Extension(name=\"gevent._gevent_c_waiter\",\n                   sources=[\"src/gevent/_waiter.py\"],\n                   depends=['src/gevent/_gevent_c_waiter.pxd'],\n                   include_dirs=get_include_dirs())\n\nHUB_PRIMITIVES = Extension(name=\"gevent._gevent_c_hub_primitives\",\n                           sources=[\"src/gevent/_hub_primitives.py\"],\n                           depends=['src/gevent/_gevent_c_hub_primitives.pxd'],\n                           include_dirs=get_include_dirs())\n\nGLT_PRIMITIVES = Extension(name=\"gevent._gevent_c_greenlet_primitives\",\n                           sources=[\"src/gevent/_greenlet_primitives.py\"],\n                           depends=['src/gevent/_gevent_c_greenlet_primitives.pxd'],\n                           include_dirs=get_include_dirs())\n\nTRACER = Extension(name=\"gevent._gevent_c_tracer\",\n                   sources=[\"src/gevent/_tracer.py\"],\n                   depends=['src/gevent/_gevent_c_tracer.pxd'],\n                   include_dirs=get_include_dirs())\n\n\n_to_cythonize = [\n    GLT_PRIMITIVES,\n    HUB_PRIMITIVES,\n    HUB_LOCAL,\n    WAITER,\n    GREENLET,\n    TRACER,\n\n    ABSTRACT_LINKABLE,\n    SEMAPHORE,\n    LOCAL,\n\n    IDENT,\n    IMAP,\n    EVENT,\n    QUEUE,\n]\n\nEXT_MODULES = [\n    CORE,\n    ARES,\n    ABSTRACT_LINKABLE,\n    SEMAPHORE,\n    LOCAL,\n    GREENLET,\n    IDENT,\n    IMAP,\n    EVENT,\n    QUEUE,\n    HUB_LOCAL,\n    WAITER,\n    HUB_PRIMITIVES,\n    GLT_PRIMITIVES,\n    TRACER,\n]\n\nif bool_from_environ('GEVENTSETUP_DISABLE_ARES'):\n    print(\"c-ares module disabled, not building\")\n    EXT_MODULES.remove(ARES)\n\nLIBEV_CFFI_MODULE = 'src/gevent/libev/_corecffi_build.py:ffi'\nLIBUV_CFFI_MODULE = 'src/gevent/libuv/_corecffi_build.py:ffi'\ncffi_modules = []\n\nif not WIN:\n    # We can't properly handle (hah!) file-descriptors and\n    # handle mapping on Windows/CFFI with libev, because the file needed,\n    # libev_vfd.h, can't be included, linked, and used: it uses\n    # Python API functions, and you're not supposed to do that from\n    # CFFI code. Plus I could never get the libraries= line to ffi.compile()\n    # correct to make linking work.\n    # Also, we use the type `nlink_t`, which is not defined on Windows.\n    cffi_modules.append(\n        LIBEV_CFFI_MODULE\n    )\n\ncffi_modules.append(LIBUV_CFFI_MODULE)\n\ngreenlet_requires = [\n    # We need to watch our greenlet version fairly carefully,\n    # since we compile cython code that extends the greenlet object.\n    # Binary compatibility would break if the greenlet struct changes.\n    # (Which it did in 0.4.14 for Python 3.7 and again in 0.4.17; with\n    # the release of 1.0a1 it began promising ABI stability with SemVer\n    # so we can add an upper bound).\n    # 1.1.0 is required for 3.10; it has a new ABI, but only on 1.1.0.\n    # 1.1.3 is needed for 3.11, and supports everything 1.1.0 did.\n    # 2.0.0 supports everything 1.1.3 did, but breaks the ABI in a way that hopefully\n    # won't break again.\n    # 3.0 is ABI compatible and adds support for Python 3.12 (but right\n    # now it's RC pending additional testing, so we only require it on 3.12)\n    'greenlet >= 3.1.1 ; platform_python_implementation==\"CPython\"',\n]\n\n# Note that we don't add cffi to install_requires, it's\n# optional. We tend to build and distribute wheels with the CFFI\n# modules built and they can be imported if CFFI is installed.\n# We need cffi 1.4.0 for new style callbacks;\n# we need cffi 1.11.3 (on CPython 3) to avoid test errors.\n\n# The exception is on Windows, where we want the libuv backend we distribute\n# to be the default, and that requires cffi; but don't try to install it\n# on PyPy or it messes up the build\nCFFI_DEP = \"cffi >= 1.17.1 ; platform_python_implementation == 'CPython'\"\nCFFI_REQUIRES = [\n    CFFI_DEP + \" and sys_platform == 'win32'\"\n]\n\n\ninstall_requires = greenlet_requires + CFFI_REQUIRES + [\n    # For event notification.\n    'zope.event',\n    # For event definitions, and our own interfaces; those should\n    # ultimately be published, but at this writing only the event\n    # interfaces are.\n    'zope.interface',\n]\n\n\nif PYPY:\n    # These use greenlet/greenlet.h, which doesn't exist on PyPy\n    EXT_MODULES.remove(LOCAL)\n    EXT_MODULES.remove(GREENLET)\n    EXT_MODULES.remove(SEMAPHORE)\n    EXT_MODULES.remove(ABSTRACT_LINKABLE)\n\n    # As of PyPy 5.10, this builds, but won't import (missing _Py_ReprEnter)\n    EXT_MODULES.remove(CORE)\n\n    # This uses PyWeakReference and doesn't compile on PyPy\n    EXT_MODULES.remove(IDENT)\n\n    _to_cythonize.remove(LOCAL)\n    _to_cythonize.remove(GREENLET)\n    _to_cythonize.remove(SEMAPHORE)\n    _to_cythonize.remove(IDENT)\n    _to_cythonize.remove(ABSTRACT_LINKABLE)\n\n    EXT_MODULES.remove(IMAP)\n    _to_cythonize.remove(IMAP)\n\n    EXT_MODULES.remove(EVENT)\n    _to_cythonize.remove(EVENT)\n\n    EXT_MODULES.remove(QUEUE)\n    _to_cythonize.remove(QUEUE)\n\n    EXT_MODULES.remove(HUB_LOCAL)\n    _to_cythonize.remove(HUB_LOCAL)\n\n    EXT_MODULES.remove(WAITER)\n    _to_cythonize.remove(WAITER)\n\n    EXT_MODULES.remove(GLT_PRIMITIVES)\n    _to_cythonize.remove(GLT_PRIMITIVES)\n\n    EXT_MODULES.remove(HUB_PRIMITIVES)\n    _to_cythonize.remove(HUB_PRIMITIVES)\n\n    EXT_MODULES.remove(TRACER)\n    _to_cythonize.remove(TRACER)\n\n\nfor mod in _to_cythonize:\n    EXT_MODULES.remove(mod)\n    EXT_MODULES.append(cythonize1(mod))\ndel _to_cythonize\n\n\n## Extras\n\nEXTRA_DNSPYTHON = [\n    # We're not currently compatible with 2.0, and dnspython 1.x isn't\n    # compatible weth Python 3.10 because of the removal of ``collections.MutableMapping``.\n    'dnspython >= 1.16.0, < 2.0; python_version < \"3.10\"',\n    'idna; python_version < \"3.10\"',\n]\nEXTRA_EVENTS = [\n    # No longer does anything, but the extra must stay around\n    # to avoid breaking install scripts.\n    # Remove this in 2021.\n]\n\nEXTRA_PSUTIL_DEPS = [\n    # Versions of PyPy2 prior to 7.3.1 (maybe?) are incompatible with\n    # psutil >= 5.6.4. 5.7.0 seems to work.\n    # https://github.com/giampaolo/psutil/issues/1659\n    # PyPy on Windows can't build psutil, it fails to link with the missing symbol\n    # PyErr_SetFromWindowsErr.\n    'psutil >= 5.7.0; sys_platform != \"win32\" or platform_python_implementation == \"CPython\"',\n]\n\nEXTRA_MONITOR = [\n] + EXTRA_PSUTIL_DEPS\n\nEXTRA_RECOMMENDED = [\n    # We need this at runtime to use the libev-CFFI and libuv backends\n    CFFI_DEP,\n] + EXTRA_DNSPYTHON + EXTRA_EVENTS + EXTRA_MONITOR\n\n\ndef make_long_description():\n    readme = read('README.rst')\n    about = read('docs', '_about.rst')\n    install = read('docs', 'install.rst')\n    readme = readme.replace('.. include:: docs/_about.rst',\n                            about)\n    readme = readme.replace('.. include:: docs/install.rst',\n                            install)\n\n    return readme\n\n\ndef run_setup(ext_modules):\n    setup(\n        name='gevent',\n        version=__version__,\n        description='Coroutine-based network library',\n        long_description=make_long_description(),\n        license='MIT',\n        keywords='greenlet coroutine cooperative multitasking light threads monkey',\n        author='Denis Bilenko',\n        author_email='denis.bilenko@gmail.com',\n        maintainer='Jason Madden',\n        maintainer_email='jason@nextthought.com',\n        url='http://www.gevent.org/',\n        project_urls={\n            'Bug Tracker': 'https://github.com/gevent/gevent/issues',\n            'Source Code': 'https://github.com/gevent/gevent/',\n            'Documentation': 'http://www.gevent.org',\n            'Changes': 'https://www.gevent.org/changelog.html',\n        },\n        package_dir={'': 'src'},\n        packages=find_packages('src'),\n        # Using ``include_package_data`` causes our generated ``.c``\n        # and ``.h`` files to be included in the installation. Those\n        # aren't needed at runtime (the ``.html`` files generated by\n        # Cython's annotation are much nicer to browse anyway, but we\n        # don't want to include those either), and downstream\n        # distributors have complained about them, so we don't want to\n        # include them. Nor do we want to include ``.pyx`` or ``.pxd``\n        # files that aren't considered public; the only ``.pxd`` files\n        # that ever offered the required Cython annotations to produce\n        # stable APIs weere in the libev cext backend; all of the\n        # internal optimizations provided by Cython compiling existing\n        # ``.py`` files using a matching ``.pxd`` do not. Furthermore,\n        # there are ABI issues that make distributing those extremely\n        # fragile. So do not use ``include_package_data``, explicitly\n        # spell out what we need. See https://github.com/gevent/gevent/issues/1568.\n        package_data={\n            # For any package\n            '': [\n                # Include files needed to run tests\n                '*.pem',\n                '*.crt',\n                '*.txt',\n                '*.key',\n                # We have a few .py files that aren't technically in packages;\n                # This one enables coverage for testing.\n                'coveragesite/*.py',\n            ]\n        },\n        ext_modules=ext_modules,\n        cmdclass={\n            'build_ext': ConfiguringBuildExt,\n            'clean': GeventClean,\n        },\n        install_requires=install_requires,\n        extras_require={\n            # Each extra intended for end users must be documented in install.rst\n            'dnspython': EXTRA_DNSPYTHON,\n            'events': EXTRA_EVENTS,\n            'monitor': EXTRA_MONITOR,\n            'recommended': EXTRA_RECOMMENDED,\n            # End end-user extras\n            'docs': [\n                # our custom theme has problems on sphinx 7;\n                # For now, we have switched to the furo theme.\n                'sphinx',\n                'furo',\n                'repoze.sphinx.autointerface',\n                'sphinxcontrib-programoutput',\n                'zope.schema',\n            ],\n            # To the extent possible, we should work to make sure\n            # our tests run, at least a basic set, without any of\n            # these extra dependencies (i.e., skip things when they are\n            # missing). This helps serve as a smoketest for users.\n            'test': EXTRA_RECOMMENDED + [\n                # examples, called from tests, use this\n                'requests',\n\n                # We don't run coverage on Windows, and pypy can't build it there\n                # anyway (coveralls -> cryptopgraphy -> openssl).\n                # coverage 5 needs coveralls 1.11\n                'coverage >= 5.0 ; sys_platform != \"win32\"',\n\n                # leak checks. previously we had a hand-rolled version.\n                'objgraph',\n            ],\n        },\n        # It's always safe to pass the CFFI keyword, even if\n        # cffi is not installed: it's just ignored in that case.\n        cffi_modules=cffi_modules,\n        zip_safe=False,\n        test_suite=\"greentest.testrunner\",\n        classifiers=[\n            \"License :: OSI Approved :: MIT License\",\n            \"Programming Language :: Python :: 3 :: Only\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: 3.11\",\n            \"Programming Language :: Python :: 3.12\",\n            \"Programming Language :: Python :: 3.13\",\n            \"Programming Language :: Python :: Implementation :: CPython\",\n            \"Programming Language :: Python :: Implementation :: PyPy\",\n            \"Operating System :: MacOS :: MacOS X\",\n            \"Operating System :: POSIX\",\n            \"Operating System :: Microsoft :: Windows\",\n            \"Topic :: Internet\",\n            \"Topic :: Software Development :: Libraries :: Python Modules\",\n            \"Intended Audience :: Developers\",\n            \"Development Status :: 4 - Beta\"\n        ],\n        python_requires=\">=3.9\",\n        entry_points={\n            'gevent.plugins.monkey.will_patch_all': [\n                \"signal_os_incompat = gevent.monkey:_subscribe_signal_os\",\n            ],\n        },\n    )\n\n# Tools like pyroma expect the actual call to `setup` to be performed\n# at the top-level at import time, so don't stash it away behind 'if\n# __name__ == __main__'\n\nif os.getenv('READTHEDOCS'):\n    # Sometimes RTD fails to put our virtualenv bin directory\n    # on the PATH, meaning we can't run cython. Fix that.\n    new_path = os.environ['PATH'] + os.pathsep + os.path.dirname(sys.executable)\n    os.environ['PATH'] = new_path\n\ntry:\n    run_setup(EXT_MODULES)\nexcept BuildFailed:\n    if ARES not in EXT_MODULES or not ARES.optional:\n        raise\n    sys.stderr.write('\\nWARNING: The gevent.ares extension has been disabled.\\n')\n    EXT_MODULES.remove(ARES)\n    run_setup(EXT_MODULES)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.7333984375,
          "content": "[tox]\nenvlist =\n    py38,py39,py310,py311,py311-cffi,py311-libuv,py312,pypy3,lint,leak\n\n[testenv]\nusedevelop = true\nextras =\n    test\n    events\n    dnspython\ndeps =\n    cffi\nwhitelist_externals =\n    *\ncommands =\n    python -m gevent.tests\n\n[testenv:lint]\nskip_install = true\nskipsdist = true\nbasepython =\n    python3.11\ndeps =\n    cffi\n    pylint\ncommands =\n    pylint --rcfile=.pylintrc src/gevent\n\n[testenv:py311-cffi]\nbasepython =\n    python3.11\nsetenv =\n\tGEVENT_LOOP=libev-cffi\n\n[testenv:py311-libuv]\nbasepython =\n    python3.11\nsetenv =\n\tGEVENT_LOOP=libuv-cffi\n\n\n[testenv:leak]\nbasepython =\n    python3.11\ncommands =\n    GEVENTTEST_LEAKCHECK=1 python -mgevent.tests --config known_failures.py --quiet --ignore tests_that_dont_do_leakchecks.txt\n"
        }
      ]
    }
  ]
}