{
  "metadata": {
    "timestamp": 1736560870198,
    "page": 582,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reorx/httpstat",
      "stars": 6015,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Mac #\n.DS_Store\n\n# Vim swap files #\n*.sw[po]\n\n# Byte-compiled\n*.py[cod]\n\n# Distribution / packaging\n/build/\n/dist/\n*.egg-info/\n\n# Sphinx documentation\ndocs/_build/\n\n# Others #\n.virtualenv\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Xiao Meng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2197265625,
          "content": ".PHONY: test build\n\ntest:\n\t@bash httpstat_test.sh\n\nclean:\n\trm -rf build dist *.egg-info\n\nbuild:\n\tpython setup.py build\n\nbuild-dist:\n\tpython setup.py sdist bdist_wheel\n\npublish: clean build-dist\n\tpython -m twine upload dist/*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4814453125,
          "content": "# httpstat\n\n![screenshot](screenshot.png)\n\nhttpstat visualizes `curl(1)` statistics in a way of beauty and clarity.\n\nIt is a **single file🌟** Python script that has **no dependency👏** and is compatible with **Python 3🍻**.\n\n\n## Installation\n\nThere are three ways to get `httpstat`:\n\n- Download the script directly: `wget https://raw.githubusercontent.com/reorx/httpstat/master/httpstat.py`\n\n- Through pip: `pip install httpstat`\n\n- Through homebrew (macOS only): `brew install httpstat`\n\n> For Windows users, @davecheney's [Go version](https://github.com/davecheney/httpstat) is suggested. → [download link](https://github.com/davecheney/httpstat/releases)\n\n## Usage\n\nSimply:\n\n```bash\npython httpstat.py httpbin.org/get\n```\n\nIf installed through pip or brew, you can use `httpstat` as a command:\n\n```bash\nhttpstat httpbin.org/get\n```\n\n### cURL Options\n\nBecause `httpstat` is a wrapper of cURL, you can pass any cURL supported option after the url (except for `-w`, `-D`, `-o`, `-s`, `-S` which are already used by `httpstat`):\n\n```bash\nhttpstat httpbin.org/post -X POST --data-urlencode \"a=b\" -v\n```\n\n### Environment Variables\n\n`httpstat` has a bunch of environment variables to control its behavior.\nHere are some usage demos, you can also run `httpstat --help` to see full explanation.\n\n- <strong><code>HTTPSTAT_SHOW_BODY</code></strong>\n\n  Set to `true` to show response body in the output, note that body length\n  is limited to 1023 bytes, will be truncated if exceeds. Default is `false`.\n\n- <strong><code>HTTPSTAT_SHOW_IP</code></strong>\n\n  By default httpstat shows remote and local IP/port address.\n  Set to `false` to disable this feature. Default is `true`.\n\n- <strong><code>HTTPSTAT_SHOW_SPEED</code></strong>\n\n  Set to `true` to show download and upload speed.  Default is `false`.\n\n  ```bash\n  HTTPSTAT_SHOW_SPEED=true httpstat http://cachefly.cachefly.net/10mb.test\n  \n  ...\n  speed_download: 3193.3 KiB/s, speed_upload: 0.0 KiB/s\n  ```\n\n- <strong><code>HTTPSTAT_SAVE_BODY</code></strong>\n\n  By default httpstat stores body in a tmp file,\n  set to `false` to disable this feature. Default is `true`\n\n- <strong><code>HTTPSTAT_CURL_BIN</code></strong>\n\n  Indicate the cURL bin path to use. Default is `curl` from current shell $PATH.\n\n  This exampe uses brew installed cURL to make HTTP2 request:\n\n  ```bash\n  HTTPSTAT_CURL_BIN=/usr/local/Cellar/curl/7.50.3/bin/curl httpstat https://http2.akamai.com/ --http2\n  \n  HTTP/2 200\n  ...\n  ```\n\n  > cURL must be compiled with nghttp2 to enable http2 feature\n  > ([#12](https://github.com/reorx/httpstat/issues/12)).\n\n- <strong><code>HTTPSTAT_METRICS_ONLY</code></strong>\n\n  If set to `true`, httpstat will only output metrics in json format,\n  this is useful if you want to parse the data instead of reading it.\n\n- <strong><code>HTTPSTAT_DEBUG</code></strong>\n\n  Set to `true` to see debugging logs. Default is `false`\n\n\nFor convenience, you can export these environments in your `.zshrc` or `.bashrc`,\nexample:\n\n```bash\nexport HTTPSTAT_SHOW_IP=false\nexport HTTPSTAT_SHOW_SPEED=true\nexport HTTPSTAT_SAVE_BODY=false\n```\n\n## Related Projects\n\nHere are some implementations in various languages:\n\n\n- Go: [davecheney/httpstat](https://github.com/davecheney/httpstat)\n\n  This is the Go alternative of httpstat, it's written in pure Go and relies no external programs. Choose it if you like solid binary executions (actually I do).\n\n- Go (library): [tcnksm/go-httpstat](https://github.com/tcnksm/go-httpstat)\n\n  Other than being a cli tool, this project is used as library to help debugging latency of HTTP requests in Go code, very thoughtful and useful, see more in this [article](https://medium.com/@deeeet/trancing-http-request-latency-in-golang-65b2463f548c#.mm1u8kfnu)\n\n- Bash: [b4b4r07/httpstat](https://github.com/b4b4r07/httpstat)\n\n  This is what exactly I want to do at the very beginning, but gave up due to not confident in my bash skill, good job!\n\n- Node: [yosuke-furukawa/httpstat](https://github.com/yosuke-furukawa/httpstat)\n\n  [b4b4r07](https://twitter.com/b4b4r07) mentioned this in his [article](https://tellme.tokyo/post/2016/09/25/213810), could be used as a HTTP client also.\n\n- PHP: [talhasch/php-httpstat](https://github.com/talhasch/php-httpstat)\n\n  The PHP implementation by @talhasch\n\nSome code blocks in `httpstat` are copied from other projects of mine, have a look:\n\n- [reorx/python-terminal-color](https://github.com/reorx/python-terminal-color) Drop-in single file library for printing terminal color.\n\n- [reorx/getenv](https://github.com/reorx/getenv) Environment variable definition with type.\n"
        },
        {
          "name": "httpstat.py",
          "type": "blob",
          "size": 11.2216796875,
          "content": "#!/usr/bin/env python\n# coding: utf-8\n# References:\n# man curl\n# https://curl.haxx.se/libcurl/c/curl_easy_getinfo.html\n# https://curl.haxx.se/libcurl/c/easy_getinfo_options.html\n# http://blog.kenweiner.com/2014/11/http-request-timings-with-curl.html\n\nfrom __future__ import print_function\n\nimport os\nimport json\nimport sys\nimport logging\nimport tempfile\nimport subprocess\n\n\n__version__ = '1.3.2'\n\n\nPY3 = sys.version_info >= (3,)\n\nif PY3:\n    xrange = range\n\n\n# Env class is copied from https://github.com/reorx/getenv/blob/master/getenv.py\nclass Env(object):\n    prefix = 'HTTPSTAT'\n    _instances = []\n\n    def __init__(self, key):\n        self.key = key.format(prefix=self.prefix)\n        Env._instances.append(self)\n\n    def get(self, default=None):\n        return os.environ.get(self.key, default)\n\n\nENV_SHOW_BODY = Env('{prefix}_SHOW_BODY')\nENV_SHOW_IP = Env('{prefix}_SHOW_IP')\nENV_SHOW_SPEED = Env('{prefix}_SHOW_SPEED')\nENV_SAVE_BODY = Env('{prefix}_SAVE_BODY')\nENV_CURL_BIN = Env('{prefix}_CURL_BIN')\nENV_METRICS_ONLY = Env('{prefix}_METRICS_ONLY')\nENV_DEBUG = Env('{prefix}_DEBUG')\n\n\ncurl_format = \"\"\"{\n\"time_namelookup\": %{time_namelookup},\n\"time_connect\": %{time_connect},\n\"time_appconnect\": %{time_appconnect},\n\"time_pretransfer\": %{time_pretransfer},\n\"time_redirect\": %{time_redirect},\n\"time_starttransfer\": %{time_starttransfer},\n\"time_total\": %{time_total},\n\"speed_download\": %{speed_download},\n\"speed_upload\": %{speed_upload},\n\"remote_ip\": \"%{remote_ip}\",\n\"remote_port\": \"%{remote_port}\",\n\"local_ip\": \"%{local_ip}\",\n\"local_port\": \"%{local_port}\"\n}\"\"\"\n\nhttps_template = \"\"\"\n  DNS Lookup   TCP Connection   TLS Handshake   Server Processing   Content Transfer\n[   {a0000}  |     {a0001}    |    {a0002}    |      {a0003}      |      {a0004}     ]\n             |                |               |                   |                  |\n    namelookup:{b0000}        |               |                   |                  |\n                        connect:{b0001}       |                   |                  |\n                                    pretransfer:{b0002}           |                  |\n                                                      starttransfer:{b0003}          |\n                                                                                 total:{b0004}\n\"\"\"[1:]\n\nhttp_template = \"\"\"\n  DNS Lookup   TCP Connection   Server Processing   Content Transfer\n[   {a0000}  |     {a0001}    |      {a0003}      |      {a0004}     ]\n             |                |                   |                  |\n    namelookup:{b0000}        |                   |                  |\n                        connect:{b0001}           |                  |\n                                      starttransfer:{b0003}          |\n                                                                 total:{b0004}\n\"\"\"[1:]\n\n\n# Color code is copied from https://github.com/reorx/python-terminal-color/blob/master/color_simple.py\nISATTY = sys.stdout.isatty()\n\n\ndef make_color(code):\n    def color_func(s):\n        if not ISATTY:\n            return s\n        tpl = '\\x1b[{}m{}\\x1b[0m'\n        return tpl.format(code, s)\n    return color_func\n\n\nred = make_color(31)\ngreen = make_color(32)\nyellow = make_color(33)\nblue = make_color(34)\nmagenta = make_color(35)\ncyan = make_color(36)\n\nbold = make_color(1)\nunderline = make_color(4)\n\ngrayscale = {(i - 232): make_color('38;5;' + str(i)) for i in xrange(232, 256)}\n\n\ndef quit(s, code=0):\n    if s is not None:\n        print(s)\n    sys.exit(code)\n\n\ndef print_help():\n    help = \"\"\"\nUsage: httpstat URL [CURL_OPTIONS]\n       httpstat -h | --help\n       httpstat --version\n\nArguments:\n  URL     url to request, could be with or without `http(s)://` prefix\n\nOptions:\n  CURL_OPTIONS  any curl supported options, except for -w -D -o -S -s,\n                which are already used internally.\n  -h --help     show this screen.\n  --version     show version.\n\nEnvironments:\n  HTTPSTAT_SHOW_BODY    Set to `true` to show response body in the output,\n                        note that body length is limited to 1023 bytes, will be\n                        truncated if exceeds. Default is `false`.\n  HTTPSTAT_SHOW_IP      By default httpstat shows remote and local IP/port address.\n                        Set to `false` to disable this feature. Default is `true`.\n  HTTPSTAT_SHOW_SPEED   Set to `true` to show download and upload speed.\n                        Default is `false`.\n  HTTPSTAT_SAVE_BODY    By default httpstat stores body in a tmp file,\n                        set to `false` to disable this feature. Default is `true`\n  HTTPSTAT_CURL_BIN     Indicate the curl bin path to use. Default is `curl`\n                        from current shell $PATH.\n  HTTPSTAT_DEBUG        Set to `true` to see debugging logs. Default is `false`\n\"\"\"[1:-1]\n    print(help)\n\n\ndef main():\n    args = sys.argv[1:]\n    if not args:\n        print_help()\n        quit(None, 0)\n\n    # get envs\n    show_body = 'true' in ENV_SHOW_BODY.get('false').lower()\n    show_ip = 'true' in ENV_SHOW_IP.get('true').lower()\n    show_speed = 'true'in ENV_SHOW_SPEED.get('false').lower()\n    save_body = 'true' in ENV_SAVE_BODY.get('true').lower()\n    curl_bin = ENV_CURL_BIN.get('curl')\n    metrics_only = 'true' in ENV_METRICS_ONLY.get('false').lower()\n    is_debug = 'true' in ENV_DEBUG.get('false').lower()\n\n    # configure logging\n    if is_debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    logging.basicConfig(level=log_level)\n    lg = logging.getLogger('httpstat')\n\n    # log envs\n    lg.debug('Envs:\\n%s', '\\n'.join('  {}={}'.format(i.key, i.get('')) for i in Env._instances))\n    lg.debug('Flags: %s', dict(\n        show_body=show_body,\n        show_ip=show_ip,\n        show_speed=show_speed,\n        save_body=save_body,\n        curl_bin=curl_bin,\n        is_debug=is_debug,\n    ))\n\n    # get url\n    url = args[0]\n    if url in ['-h', '--help']:\n        print_help()\n        quit(None, 0)\n    elif url == '--version':\n        print('httpstat {}'.format(__version__))\n        quit(None, 0)\n\n    curl_args = args[1:]\n\n    # check curl args\n    exclude_options = [\n        '-w', '--write-out',\n        '-D', '--dump-header',\n        '-o', '--output',\n        '-s', '--silent',\n    ]\n    for i in exclude_options:\n        if i in curl_args:\n            quit(yellow('Error: {} is not allowed in extra curl args'.format(i)), 1)\n\n    # tempfile for output\n    bodyf = tempfile.NamedTemporaryFile(delete=False)\n    bodyf.close()\n\n    headerf = tempfile.NamedTemporaryFile(delete=False)\n    headerf.close()\n\n    # run cmd\n    cmd_env = os.environ.copy()\n    cmd_env.update(\n        LC_ALL='C',\n    )\n    cmd_core = [curl_bin, '-w', curl_format, '-D', headerf.name, '-o', bodyf.name, '-s', '-S']\n    cmd = cmd_core + curl_args + [url]\n    lg.debug('cmd: %s', cmd)\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=cmd_env)\n    out, err = p.communicate()\n    if PY3:\n        out, err = out.decode(), err.decode()\n    lg.debug('out: %s', out)\n\n    # print stderr\n    if p.returncode == 0:\n        if err:\n            print(grayscale[16](err))\n    else:\n        _cmd = list(cmd)\n        _cmd[2] = '<output-format>'\n        _cmd[4] = '<tempfile>'\n        _cmd[6] = '<tempfile>'\n        print('> {}'.format(' '.join(_cmd)))\n        quit(yellow('curl error: {}'.format(err)), p.returncode)\n\n    # parse output\n    try:\n        d = json.loads(out)\n    except ValueError as e:\n        print(yellow('Could not decode json: {}'.format(e)))\n        print('curl result:', p.returncode, grayscale[16](out), grayscale[16](err))\n        quit(None, 1)\n\n    # convert time_ metrics from seconds to milliseconds\n    for k in d:\n        if k.startswith('time_'):\n            v = d[k]\n            # Convert time_ values to milliseconds in int\n            if isinstance(v, float):\n                # Before 7.61.0, time values are represented as seconds in float\n                d[k] = int(v * 1000)\n            elif isinstance(v, int):\n                # Starting from 7.61.0, libcurl uses microsecond in int\n                # to return time values, references:\n                # https://daniel.haxx.se/blog/2018/07/11/curl-7-61-0/\n                # https://curl.se/bug/?i=2495\n                d[k] = int(v / 1000)\n            else:\n                raise TypeError('{} value type is invalid: {}'.format(k, type(v)))\n\n    # calculate ranges\n    d.update(\n        range_dns=d['time_namelookup'],\n        range_connection=d['time_connect'] - d['time_namelookup'],\n        range_ssl=d['time_pretransfer'] - d['time_connect'],\n        range_server=d['time_starttransfer'] - d['time_pretransfer'],\n        range_transfer=d['time_total'] - d['time_starttransfer'],\n    )\n\n    # print json if metrics_only is enabled\n    if metrics_only:\n        print(json.dumps(d, indent=2))\n        quit(None, 0)\n\n    # ip\n    if show_ip:\n        s = 'Connected to {}:{} from {}:{}'.format(\n            cyan(d['remote_ip']), cyan(d['remote_port']),\n            d['local_ip'], d['local_port'],\n        )\n        print(s)\n        print()\n\n    # print header & body summary\n    with open(headerf.name, 'r') as f:\n        headers = f.read().strip()\n    # remove header file\n    lg.debug('rm header file %s', headerf.name)\n    os.remove(headerf.name)\n\n    for loop, line in enumerate(headers.split('\\n')):\n        if loop == 0:\n            p1, p2 = tuple(line.split('/'))\n            print(green(p1) + grayscale[14]('/') + cyan(p2))\n        else:\n            pos = line.find(':')\n            print(grayscale[14](line[:pos + 1]) + cyan(line[pos + 1:]))\n\n    print()\n\n    # body\n    if show_body:\n        body_limit = 1024\n        with open(bodyf.name, 'r') as f:\n            body = f.read().strip()\n        body_len = len(body)\n\n        if body_len > body_limit:\n            print(body[:body_limit] + cyan('...'))\n            print()\n            s = '{} is truncated ({} out of {})'.format(green('Body'), body_limit, body_len)\n            if save_body:\n                s += ', stored in: {}'.format(bodyf.name)\n            print(s)\n        else:\n            print(body)\n    else:\n        if save_body:\n            print('{} stored in: {}'.format(green('Body'), bodyf.name))\n\n    # remove body file\n    if not save_body:\n        lg.debug('rm body file %s', bodyf.name)\n        os.remove(bodyf.name)\n\n    # print stat\n    if url.startswith('https://'):\n        template = https_template\n    else:\n        template = http_template\n\n    # colorize template first line\n    tpl_parts = template.split('\\n')\n    tpl_parts[0] = grayscale[16](tpl_parts[0])\n    template = '\\n'.join(tpl_parts)\n\n    def fmta(s):\n        return cyan('{:^7}'.format(str(s) + 'ms'))\n\n    def fmtb(s):\n        return cyan('{:<7}'.format(str(s) + 'ms'))\n\n    stat = template.format(\n        # a\n        a0000=fmta(d['range_dns']),\n        a0001=fmta(d['range_connection']),\n        a0002=fmta(d['range_ssl']),\n        a0003=fmta(d['range_server']),\n        a0004=fmta(d['range_transfer']),\n        # b\n        b0000=fmtb(d['time_namelookup']),\n        b0001=fmtb(d['time_connect']),\n        b0002=fmtb(d['time_pretransfer']),\n        b0003=fmtb(d['time_starttransfer']),\n        b0004=fmtb(d['time_total']),\n    )\n    print()\n    print(stat)\n\n    # speed, originally bytes per second\n    if show_speed:\n        print('speed_download: {:.1f} KiB/s, speed_upload: {:.1f} KiB/s'.format(\n            d['speed_download'] / 1024, d['speed_upload'] / 1024))\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "httpstat_test.sh",
          "type": "blob",
          "size": 2.7490234375,
          "content": "#!/bin/bash\n\nfunction assert_exit() {\n    rc=$?\n    expect=$1\n    if [ \"$rc\" -eq \"$expect\" ]; then\n        echo OK\n    else\n        echo \"Failed, expect $expect, got $rc\"\n        exit 1\n    fi\n}\n\nfunction title() {\n    echo\n    echo \"Test $1 ...\"\n}\n\nfunction check_url() {\n    url=$1\n    echo \"Checking $url ...\"\n    if curl -s --head \"$url\" >/dev/null; then\n        echo \"URL $url is accessible\"\n    else\n        echo \"URL $url is not accessible\"\n        exit 1\n    fi\n}\n\nhttp_url=\"www.gstatic.com/generate_204\"\nhttps_url=\"https://http2.akamai.com\"\n\ncheck_url \"$http_url\"\ncheck_url \"$https_url\"\n    \nfor pybin in python python3; do\n#for pybin in python; do\n    echo\n    echo \"# Test in $pybin\"\n\n    function main() {\n        $pybin httpstat.py $@ 2>&1\n    }\n\n    function main_silent() {\n        $pybin httpstat.py $@ >/dev/null 2>&1\n    }\n\n    title \"basic\"\n    main_silent $http_url\n    assert_exit 0\n\n    title \"https site ($https_url)\"\n    main_silent $https_url\n    assert_exit 0\n\n    title \"comma decimal language (ru_RU)\"\n    LC_ALL=ru_RU main_silent $http_url\n    assert_exit 0\n\n    title \"HTTPSTAT_DEBUG\"\n    HTTPSTAT_DEBUG=true main $http_url | grep -q 'HTTPSTAT_DEBUG=true'\n    assert_exit 0\n\n    title \"HTTPSTAT_SHOW_SPEED\"\n    HTTPSTAT_SHOW_SPEED=true main $http_url | grep -q 'speed_download'\n    assert_exit 0\n\n    title \"HTTPSTAT_CURL_BIN\"\n    HTTPSTAT_CURL_BIN=/usr/bin/curl HTTPSTAT_DEBUG=true main $http_url | grep -q '/usr/bin/curl'\n    assert_exit 0\n\n    title \"HTTPSTAT_SHOW_IP\"\n    HTTPSTAT_SHOW_IP=\"true\" main $http_url | grep -q 'Connected'\n    assert_exit 0\n\n    title \"HTTPSTAT_SHOW_BODY=true, -G --data-urlencode \\\"a=中文\\\"\"\n    HTTPSTAT_SHOW_BODY=\"true\" main_silent httpbin.org/get -G --data-urlencode \"a=中文\"\n    assert_exit 0\n\n    title \"HTTPSTAT_SHOW_BODY=true, -G --data-urlencode \\\"a=中文\\\"\"\n    HTTPSTAT_SHOW_BODY=\"true\" main_silent httpbin.org/post -X POST --data-urlencode \"a=中文\"\n    assert_exit 0\n\n    title \"HTTPSTAT_SAVE_BODY=true\"\n    HTTPSTAT_SAVE_BODY=true main $http_url | grep -q 'stored in'\n    assert_exit 0\n\n    title \"HTTPSTAT_SAVE_BODY=false\"\n    HTTPSTAT_SAVE_BODY=false HTTPSTAT_DEBUG=true main $http_url | grep -q 'rm body file'\n    assert_exit 0\n\n    title \"HTTPSTAT_SHOW_BODY=true HTTPSTAT_SAVE_BODY=true, has 'is truncated, has 'stored in'\"\n    out=$(HTTPSTAT_SHOW_BODY=true HTTPSTAT_SAVE_BODY=true \\\n        main $https_url)\n    echo \"$out\" | grep -q 'is truncated'\n    assert_exit 0\n\n    echo \"$out\" | grep -q 'stored in'\n    assert_exit 0\n\n    title \"HTTPSTAT_SHOW_BODY=true HTTPSTAT_SAVE_BODY=false, has 'is truncated', no 'stored in'\"\n    out=$(HTTPSTAT_SHOW_BODY=true HTTPSTAT_SAVE_BODY=false \\\n        main $https_url)\n    echo \"$out\" | grep -q 'is truncated'\n    assert_exit 0\n\n    echo \"$out\" | grep -q 'stored in'\n    assert_exit 1\ndone\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 92.958984375,
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.958984375,
          "content": "#!/usr/bin/env python\n# coding=utf-8\n\nfrom setuptools import setup\n\n\npackage_name = 'httpstat'\nfilename = package_name + '.py'\n\n\ndef get_version():\n    import ast\n\n    with open(filename) as input_file:\n        for line in input_file:\n            if line.startswith('__version__'):\n                return ast.parse(line).body[0].value.s\n\n\ndef get_long_description():\n    try:\n        with open('README.md', 'r') as f:\n            return f.read()\n    except IOError:\n        return ''\n\n\nsetup(\n    name=package_name,\n    version=get_version(),\n    author='reorx',\n    author_email='novoreorx@gmail.com',\n    description='curl statistics made simple',\n    url='https://github.com/reorx/httpstat',\n    long_description=get_long_description(),\n    long_description_content_type='text/markdown',\n    py_modules=[package_name],\n    entry_points={\n        'console_scripts': [\n            'httpstat = httpstat:main'\n        ]\n    },\n    license='License :: OSI Approved :: MIT License',\n)\n"
        }
      ]
    }
  ]
}