{
  "metadata": {
    "timestamp": 1736560937989,
    "page": 679,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vi3k6i5/flashtext",
      "stars": 5604,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.037109375,
          "content": "[run]\nomit = \n    test/*\n    setup.py\n"
        },
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2294921875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n*.ipynb\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\nhow_to_test_setup_deploy.txt\n\n# pycharm\n.idea\n\n# Unit test / coverage reports\n.coverage\n.tox\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.33984375,
          "content": "language: python\npython:\n  - \"2.7\"\n  - \"3.5\"\n  - \"3.6\"\nsudo: false\ninstall:\n  - pip install pytest\n  - pip install pytest-cov\n  - pip install coveralls\n  - python setup.py install\nscript:\n  - python setup.py test\n  - py.test --cov-config .coveragerc --cov=flashtext test/ --doctest-modules -v --cov-report term-missing\nafter_success:\n  - coveralls\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "MIT License\n\nCopyright (c) 2017 Vikash Singh (vikash.duliajan@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.052734375,
          "content": "include README.rst LICENSE\nrecursive-include test *.py"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 8.9677734375,
          "content": "=========\nFlashText\n=========\n\n.. image:: https://api.travis-ci.org/vi3k6i5/flashtext.svg?branch=master\n   :target: https://travis-ci.org/vi3k6i5/flashtext\n   :alt: Build Status\n\n.. image:: https://readthedocs.org/projects/flashtext/badge/?version=latest\n   :target: http://flashtext.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://badge.fury.io/py/flashtext.svg\n   :target: https://badge.fury.io/py/flashtext\n   :alt: Version\n\n.. image:: https://coveralls.io/repos/github/vi3k6i5/flashtext/badge.svg?branch=master\n   :target: https://coveralls.io/github/vi3k6i5/flashtext?branch=master\n   :alt: Test coverage\n\n.. image:: https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000\n   :target: https://github.com/vi3k6i5/flashtext/blob/master/LICENSE\n   :alt: license\n\n\nThis module can be used to replace keywords in sentences or extract keywords from sentences. It is based on the `FlashText algorithm <https://arxiv.org/abs/1711.00046>`_.\n\n\nInstallation\n------------\n::\n\n    $ pip install flashtext\n\n\nAPI doc\n-------\n\nDocumentation can be found at `FlashText Read the Docs\n<http://flashtext.readthedocs.io/>`_.\n\n\nUsage\n-----\nExtract keywords\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> # keyword_processor.add_keyword(<unclean name>, <standardised name>)\n    >>> keyword_processor.add_keyword('Big Apple', 'New York')\n    >>> keyword_processor.add_keyword('Bay Area')\n    >>> keywords_found = keyword_processor.extract_keywords('I love Big Apple and Bay Area.')\n    >>> keywords_found\n    >>> # ['New York', 'Bay Area']\n\nReplace keywords\n    >>> keyword_processor.add_keyword('New Delhi', 'NCR region')\n    >>> new_sentence = keyword_processor.replace_keywords('I love Big Apple and new delhi.')\n    >>> new_sentence\n    >>> # 'I love New York and NCR region.'\n\nCase Sensitive example\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor(case_sensitive=True)\n    >>> keyword_processor.add_keyword('Big Apple', 'New York')\n    >>> keyword_processor.add_keyword('Bay Area')\n    >>> keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.')\n    >>> keywords_found\n    >>> # ['Bay Area']\n\nSpan of keywords extracted\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_processor.add_keyword('Big Apple', 'New York')\n    >>> keyword_processor.add_keyword('Bay Area')\n    >>> keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.', span_info=True)\n    >>> keywords_found\n    >>> # [('New York', 7, 16), ('Bay Area', 21, 29)]\n\nGet Extra information with keywords extracted\n    >>> from flashtext import KeywordProcessor\n    >>> kp = KeywordProcessor()\n    >>> kp.add_keyword('Taj Mahal', ('Monument', 'Taj Mahal'))\n    >>> kp.add_keyword('Delhi', ('Location', 'Delhi'))\n    >>> kp.extract_keywords('Taj Mahal is in Delhi.')\n    >>> # [('Monument', 'Taj Mahal'), ('Location', 'Delhi')]\n    >>> # NOTE: replace_keywords feature won't work with this.\n\nNo clean name for Keywords\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_processor.add_keyword('Big Apple')\n    >>> keyword_processor.add_keyword('Bay Area')\n    >>> keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.')\n    >>> keywords_found\n    >>> # ['Big Apple', 'Bay Area']\n\nAdd Multiple Keywords simultaneously\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_dict = {\n    >>>     \"java\": [\"java_2e\", \"java programing\"],\n    >>>     \"product management\": [\"PM\", \"product manager\"]\n    >>> }\n    >>> # {'clean_name': ['list of unclean names']}\n    >>> keyword_processor.add_keywords_from_dict(keyword_dict)\n    >>> # Or add keywords from a list:\n    >>> keyword_processor.add_keywords_from_list([\"java\", \"python\"])\n    >>> keyword_processor.extract_keywords('I am a product manager for a java_2e platform')\n    >>> # output ['product management', 'java']\n\nTo Remove keywords\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_dict = {\n    >>>     \"java\": [\"java_2e\", \"java programing\"],\n    >>>     \"product management\": [\"PM\", \"product manager\"]\n    >>> }\n    >>> keyword_processor.add_keywords_from_dict(keyword_dict)\n    >>> print(keyword_processor.extract_keywords('I am a product manager for a java_2e platform'))\n    >>> # output ['product management', 'java']\n    >>> keyword_processor.remove_keyword('java_2e')\n    >>> # you can also remove keywords from a list/ dictionary\n    >>> keyword_processor.remove_keywords_from_dict({\"product management\": [\"PM\"]})\n    >>> keyword_processor.remove_keywords_from_list([\"java programing\"])\n    >>> keyword_processor.extract_keywords('I am a product manager for a java_2e platform')\n    >>> # output ['product management']\n\nTo check Number of terms in KeywordProcessor\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_dict = {\n    >>>     \"java\": [\"java_2e\", \"java programing\"],\n    >>>     \"product management\": [\"PM\", \"product manager\"]\n    >>> }\n    >>> keyword_processor.add_keywords_from_dict(keyword_dict)\n    >>> print(len(keyword_processor))\n    >>> # output 4\n\nTo check if term is present in KeywordProcessor\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_processor.add_keyword('j2ee', 'Java')\n    >>> 'j2ee' in keyword_processor\n    >>> # output: True\n    >>> keyword_processor.get_keyword('j2ee')\n    >>> # output: Java\n    >>> keyword_processor['colour'] = 'color'\n    >>> keyword_processor['colour']\n    >>> # output: color\n\nGet all keywords in dictionary\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_processor.add_keyword('j2ee', 'Java')\n    >>> keyword_processor.add_keyword('colour', 'color')\n    >>> keyword_processor.get_all_keywords()\n    >>> # output: {'colour': 'color', 'j2ee': 'Java'}\n\nFor detecting Word Boundary currently any character other than this `\\\\w` `[A-Za-z0-9_]` is considered a word boundary.\n\nTo set or add characters as part of word characters\n    >>> from flashtext import KeywordProcessor\n    >>> keyword_processor = KeywordProcessor()\n    >>> keyword_processor.add_keyword('Big Apple')\n    >>> print(keyword_processor.extract_keywords('I love Big Apple/Bay Area.'))\n    >>> # ['Big Apple']\n    >>> keyword_processor.add_non_word_boundary('/')\n    >>> print(keyword_processor.extract_keywords('I love Big Apple/Bay Area.'))\n    >>> # []\n\n\nTest\n----\n::\n\n    $ git clone https://github.com/vi3k6i5/flashtext\n    $ cd flashtext\n    $ pip install pytest\n    $ python setup.py test\n\n\nBuild Docs\n----------\n::\n\n    $ git clone https://github.com/vi3k6i5/flashtext\n    $ cd flashtext/docs\n    $ pip install sphinx\n    $ make html\n    $ # open _build/html/index.html in browser to view it locally\n\n\nWhy not Regex?\n--------------\n\nIt's a custom algorithm based on `Aho-Corasick algorithm\n<https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm>`_ and `Trie Dictionary\n<https://en.wikipedia.org/wiki/Trie Dictionary>`_.\n\n.. image:: https://github.com/vi3k6i5/flashtext/raw/master/benchmark.png\n   :target: https://twitter.com/RadimRehurek/status/904989624589803520\n   :alt: Benchmark\n\n\nTime taken by FlashText to find terms in comparison to Regex.\n\n.. image:: https://thepracticaldev.s3.amazonaws.com/i/xruf50n6z1r37ti8rd89.png\n\n\nTime taken by FlashText to replace terms in comparison to Regex.\n\n.. image:: https://thepracticaldev.s3.amazonaws.com/i/k44ghwp8o712dm58debj.png\n\nLink to code for benchmarking the `Find Feature <https://gist.github.com/vi3k6i5/604eefd92866d081cfa19f862224e4a0>`_ and `Replace Feature <https://gist.github.com/vi3k6i5/dc3335ee46ab9f650b19885e8ade6c7a>`_.\n\nThe idea for this library came from the following `StackOverflow question\n<https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster>`_.\n\n\nCitation\n----------\n\nThe original paper published on `FlashText algorithm <https://arxiv.org/abs/1711.00046>`_.\n\n::\n\n    @ARTICLE{2017arXiv171100046S,\n       author = {{Singh}, V.},\n        title = \"{Replace or Retrieve Keywords In Documents at Scale}\",\n      journal = {ArXiv e-prints},\n    archivePrefix = \"arXiv\",\n       eprint = {1711.00046},\n     primaryClass = \"cs.DS\",\n     keywords = {Computer Science - Data Structures and Algorithms},\n         year = 2017,\n        month = oct,\n       adsurl = {http://adsabs.harvard.edu/abs/2017arXiv171100046S},\n      adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n    }\n\nThe article published on `Medium freeCodeCamp <https://medium.freecodecamp.org/regex-was-taking-5-days-flashtext-does-it-in-15-minutes-55f04411025f>`_.\n\n\nContribute\n----------\n\n- Issue Tracker: https://github.com/vi3k6i5/flashtext/issues\n- Source Code: https://github.com/vi3k6i5/flashtext/\n\n\nLicense\n-------\n\nThe project is licensed under the MIT license.\n"
        },
        {
          "name": "benchmark.png",
          "type": "blob",
          "size": 76.2705078125,
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.0439453125,
          "content": "version: '2.0'\n\nservices:\n    pytest-python2.7:\n      image: python:2.7\n      command: bash -c \"pip install pytest; python setup.py test\"\n      volumes:\n        - .:/app\n      working_dir: /app\n\n    pytest-python3.3:\n      image: python:3.3\n      command: bash -c \"pip install pytest; python setup.py test\"\n      volumes:\n        - .:/app\n      working_dir: /app\n\n    pytest-python3.5:\n      image: python:3.5\n      command: bash -c \"pip install pytest; python setup.py test\"\n      volumes:\n        - .:/app\n      working_dir: /app\n\n    pytest-python2.7-i386:\n      image: i386/python:2.7\n      command: bash -c \"pip install pytest; python setup.py test\"\n      volumes:\n        - .:/app\n      working_dir: /app\n\n    pytest-python3.3-i386:\n      image: i386/python:3.3\n      command: bash -c \"pip install pytest; python setup.py test\"\n      volumes:\n        - .:/app\n      working_dir: /app\n\n    pytest-python3.5-i386:\n      image: i386/python:3.5\n      command: bash -c \"pip install pytest; python setup.py test\"\n      volumes:\n        - .:/app\n      working_dir: /app\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flashtext",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0263671875,
          "content": "[bdist_wheel]\nuniversal = 1"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.419921875,
          "content": "from setuptools import setup, Command\nimport subprocess\n\n\nclass PyTest(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        errno = subprocess.call(['py.test'])\n        raise SystemExit(errno)\n\nname = 'flashtext'\nversion = '2.7'\n\ncmdclass = {'test': PyTest}\n\ntry:\n    from sphinx.setup_command import BuildDoc\n    cmdclass['build_sphinx'] = BuildDoc\nexcept ImportError:\n    print('WARNING: sphinx not available, not building docs')\n\nsetup(\n    name=name,\n    version=version,\n    url='http://github.com/vi3k6i5/flashtext',\n    author='Vikash Singh',\n    author_email='vikash.duliajan@gmail.com',\n    description='Extract/Replaces keywords in sentences.',\n    long_description=open('README.rst').read(),\n    packages=['flashtext'],\n    install_requires=[],\n    platforms='any',\n    cmdclass=cmdclass,\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Operating System :: OS Independent',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n    ],\n    command_options={\n        'build_sphinx': {\n            'project': ('setup.py', name),\n            'version': ('setup.py', version),\n            'release': ('setup.py', version)\n        }\n    }\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}