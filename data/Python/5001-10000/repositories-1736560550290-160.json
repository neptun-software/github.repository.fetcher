{
  "metadata": {
    "timestamp": 1736560550290,
    "page": 160,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "conan-io/conan",
      "stars": 8424,
      "defaultBranch": "develop2",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# https://editorconfig.org/\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\n\n# Docstrings and comments use max_line_length = 79\n[*.py]\nmax_line_length = 101\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.333984375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nvenv/\n*.egg-info/\n.installed.cfg\n*.egg\npip-wheel-metadata/\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nIcon?\nehthumbs.db\nThumbs.db\n\n.pydev*\n.project\n\n# IDEs #\n########\n.metadata\n.idea\n.history/\n\nconan.conf\n*default_package_folder\n\n#Eclipse folder\n.settings\n\n#VScode folder\n.vscode\n\n#Generated certificate file\ncacert.pem\n\n#linux backup and vim files\n*~\n.*.sw?\nSession.vim\n\n#Pyinstaller generated binaries\n/pyinstaller\n\n# Run tests in docker in current dir\n.bash_history\n.conan_server/\n.sudo_as_admin_successful\n.noseids\n\n# add excluded\n!conans/client/build\n!conan/tools/build\n!test/unittests/client/build\n!test/unittests/tools/build\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 JFrog LTD\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.017578125,
          "content": "include LICENSE.md"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.103515625,
          "content": "<picture>\n  <!-- These are also used for https://github.com/conan-io/.github/blob/main/profile/README.md -->\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/conan-io/conan/develop2/.github/conan2-logo-for-dark.svg\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/conan-io/conan/develop2/.github/conan2-logo-for-light.svg\">\n  <img alt=\"JFrog | Conan 2.0 Logo\" src=\"https://raw.githubusercontent.com/conan-io/conan/develop2/.github/conan2-logo-with-bg.svg\">\n</picture>\n\n# Conan\n\nDecentralized, open-source (MIT), C/C++ package manager.\n\n- Homepage: https://conan.io/\n- Github: https://github.com/conan-io/conan\n- Docs: https://docs.conan.io\n- Slack: https://cpplang.slack.com (#conan channel. Please, click [here](https://join.slack.com/t/cpplang/shared_invite/zt-1snzdn6rp-rOUxF3166oz1_11Tr5H~xg) to get an invitation)\n- Twitter: https://twitter.com/conan_io\n- Blog: https://blog.conan.io\n- Security reports: https://jfrog.com/trust/report-vulnerability\n\n\nConan is a package manager for C and C++ developers:\n\n- It is fully decentralized. Users can host their packages on their servers, privately. Integrates with Artifactory and Bintray.\n- Portable. Works across all platforms, including Linux, OSX, Windows (with native and first-class support, WSL, MinGW),\n  Solaris, FreeBSD, embedded and cross-compiling, docker, WSL\n- Manage binaries. It can create, upload and download binaries for any configuration and platform,\n  even cross-compiling, saving lots of time in development and continuous integration. The binary compatibility can be configured\n  and customized. Manage all your artifacts in the same way on all platforms.\n- Integrates with any build system, including any proprietary and custom one. Provides tested support for major build systems\n  (CMake, MSBuild, Makefiles, Meson, etc).\n- Extensible: Its Python-based recipes, together with extension points allow for great power and flexibility.\n- Large and active community, especially in GitHub (https://github.com/conan-io/conan) and Slack (https://cppalliance.org/slack/ #conan channel).\n  This community also creates and maintains packages in ConanCenter and Bincrafters repositories in Bintray.\n- Stable. Used in production by many companies, since 1.0 there is a commitment not to break package recipes and documented behavior.\n\n\nThis is the **developer/maintainer** documentation. For user documentation, go to https://docs.conan.io\n\n\n## Setup\n\nYou can run Conan from source in Windows, MacOS, and Linux:\n\n- **Install pip following** [pip docs](https://pip.pypa.io/en/stable/installation/).\n\n- **Clone Conan repository:**\n\n  ```bash\n  $ git clone https://github.com/conan-io/conan.git conan-io\n  ```\n\n  > **Note**: repository directory name matters, some directories are known to be problematic to run tests (e.g. `conan`). `conan-io` directory name was tested and guaranteed to be working.\n\n- **Install in editable mode**\n\n  ```bash\n  $ cd conan-io && sudo pip install -e .\n  ```\n\n  If you are in Windows, using ``sudo`` is not required. Some Linux distros won't allow you to put Python packages in editable mode in the root Python installation, and creating a virtual environment ``venv`` first, is mandatory.\n\n- **You are ready, try to run Conan:**\n\n  ```bash\n  $ conan --help\n\n  Consumer commands\n    install    Installs the requirements specified in a recipe (conanfile.py or conanfile.txt).\n    ...\n\n    Conan commands. Type \"conan <command> -h\" for help\n  ```\n\n## Contributing to the project\n\n\nFeedback and contribution are always welcome in this project.\nPlease read our [contributing guide](https://github.com/conan-io/conan/blob/develop2/.github/CONTRIBUTING.md).\nAlso, if you plan to contribute, please add some testing for your changes. You can read the [Conan\ntests guidelines section](https://github.com/conan-io/conan/blob/develop2/test/README.md) for\nsome advice on how to write tests for Conan.\n\n### Running the tests\n\n\n**Install Python requirements**\n\n```bash\n$ python -m pip install -r conans/requirements.txt\n$ python -m pip install -r conans/requirements_server.txt\n$ python -m pip install -r conans/requirements_dev.txt\n```\n\nIf you are not on Windows and you are not using a Python virtual environment, you will need to run these\ncommands using `sudo`.\n\nBefore you can run the tests, you need to set a few environment variables first.\n\n```bash\n$ export PYTHONPATH=$PYTHONPATH:$(pwd)\n```\n\nOn Windows it would be (while being in the Conan root directory):\n\n```bash\n$ set PYTHONPATH=.\n```\n\nConan test suite defines and configures some required tools (CMake, Ninja, etc) in the\n``conftest.py`` and allows to define a custom ``conftest_user.py``.\nSome specific versions, like cmake>=3.15 are necessary.\n\n\nYou can run the tests like this:\n\n```bash\n$ python -m pytest .\n```\n\nA few minutes later it should print ``OK``:\n\n```bash\n............................................................................................\n----------------------------------------------------------------------\nRan 146 tests in 50.993s\n\nOK\n```\n\nTo run specific tests, you can specify the test name too, something like:\n\n```bash\n$ python -m pytest test/functional/command/export_test.py::TestRevisionModeSCM::test_revision_mode_scm -s\n```\n\nThe `-s` argument can be useful to see some output that otherwise is captured by *pytest*.\n\nAlso, you can run tests against an instance of Artifactory. Those tests should add the attribute\n`artifactory_ready`.\n\n```bash\n$ python -m pytest . -m artifactory_ready\n```\n\nSome environment variables have to be defined to run them. For example, for an\nArtifactory instance that is running on the localhost with default user and password configured, the\nvariables could take the values:\n\n```bash\n$ export CONAN_TEST_WITH_ARTIFACTORY=1\n$ export ARTIFACTORY_DEFAULT_URL=http://localhost:8081/artifactory\n$ export ARTIFACTORY_DEFAULT_USER=admin\n$ export ARTIFACTORY_DEFAULT_PASSWORD=password\n```\n\n`ARTIFACTORY_DEFAULT_URL` is the base URL for the Artifactory repo, not one for a specific\nrepository. Running the tests with a real Artifactory instance will create repos on the fly so please\nuse a separate server for testing purposes.\n\n## License\n\n[MIT LICENSE](LICENSE.md)\n"
        },
        {
          "name": "conan",
          "type": "tree",
          "content": null
        },
        {
          "name": "conans",
          "type": "tree",
          "content": null
        },
        {
          "name": "contributors.txt",
          "type": "blob",
          "size": 1.087890625,
          "content": "Contributors\n-------------\n\nThis is a very partial list of contributors to this project source code, in alphabetical order, those who\nexplicitly wanted to add details here. For the whole list (+220), refer to https://github.com/conan-io/conan/graphs/contributors\n\nMany thanks to all of them!\n\n- Bocanegra Algarra, Raul (raul.bocanegra.algarra@gmail.com)\n- Cicholewski, Adrian (et666@t-online.de)\n- Dauphin, Loïc (astralien3000@yahoo.fr, @astralien3000)\n- Díaz Más, Luis (piponazo@gmail, @pipotux)\n- Dragly, Svenn-Arne (dragly.org)\n- Ford, Andrew (andrewford55139@gmail.com)\n- Hieta, Tobias (tobias@plex.tv, @tobiashieta)\n- Hochstedler, Reid\n- Ivek, Tomislav (tomislav.ivek@gmail.com, @tomivek)\n- Koch, Marco (marco-koch@t-online.de, @MarcoKoch)\n- Kourkoulis, Dimitri (@dimi309)\n- Lee, Jeongseok (jslee02@gmail.com, @jslee02)\n- Lord, Matthew( @luckielordie )\n- Márki, Róbert (gsmiko@gmail.com, @robertmrk)\n- Ray, Chris (chris@xaltotun.com)\n- Ries, Uilian (uilianries@gmail.com, @uilianries)\n- Sechet, Olivier (osechet@gmail.com)\n- Sturm, Fabian (f@rtfs.org, @sturmf)\n- Williams, Jordan (jordan@jwillikers.com)\n"
        },
        {
          "name": "pyinstaller.py",
          "type": "blob",
          "size": 5.97265625,
          "content": "\"\"\"\nThis file is able to create a self contained Conan executable that contains all it needs,\nincluding the Python interpreter, so it wouldnt be necessary to have Python installed\nin the system\nIt is important to install the dependencies and the project first with \"pip install -e .\"\nwhich configures the project as \"editable\", that is, to run from the current source folder\nAfter creating the executable, it can be pip uninstalled\n\n$ pip install -e .\n$ python pyinstaller.py\n\nThis has to run in the same platform that will be using the executable, pyinstaller does\nnot cross-build\n\nThe resulting executable can be put in the system PATH of the running machine\n\"\"\"\n\nimport argparse\nimport os\nimport platform\nimport shutil\nimport sys\n\nfrom conan import __version__\n\n\ndef _run_bin(pyinstaller_path):\n    # run the binary to test if working\n    conan_bin = os.path.join(pyinstaller_path, 'dist', 'conan', 'conan')\n    if platform.system() == 'Windows':\n        conan_bin = '\"' + conan_bin + '.exe' + '\"'\n    retcode = os.system(conan_bin)\n    if retcode != 0:\n        raise Exception(\"Binary not working\")\n\n\ndef _windows_version_file(version):\n    template = \"\"\"# UTF-8\n#\n# For more details about fixed file info 'ffi' see:\n# http://msdn.microsoft.com/en-us/library/ms646997.aspx\nVSVersionInfo(\n  ffi=FixedFileInfo(\n    # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)\n    # Set not needed items to zero 0.\n    filevers={version_tuple},\n    prodvers={version_tuple},\n    # Contains a bitmask that specifies the valid bits 'flags'r\n    mask=0x3f,\n    # Contains a bitmask that specifies the Boolean attributes of the file.\n    flags=0x0,\n    # The operating system for which this file was designed.\n    # 0x4 - NT and there is no need to change it.\n    OS=0x4,\n    # The general type of file.\n    # 0x1 - the file is an application.\n    fileType=0x1,\n    # The function of the file.\n    # 0x0 - the function is not defined for this fileType\n    subtype=0x0,\n    # Creation date and time stamp.\n    date=(0, 0)\n    ),\n  kids=[\n    StringFileInfo(\n      [\n      StringTable(\n        u'000004b0',\n        [StringStruct(u'Comments', u'This executable was created with pyinstaller'),\n        StringStruct(u'CompanyName', u'JFrog'),\n        StringStruct(u'FileDescription', u'Conan C, C++ Open Source Package Manager'),\n        StringStruct(u'FileVersion', u'{version}'),\n        StringStruct(u'LegalCopyright', u'Copyright 2020 JFrog'),\n        StringStruct(u'ProductName', u'Conan'),\n        StringStruct(u'ProductVersion', u'{version}')])\n      ]),\n    VarFileInfo([VarStruct(u'Translation', [0, 1200])])\n  ]\n)\"\"\"\n    if \"-\" in version:\n        version, _ = version.split(\"-\")\n    version_tuple = tuple([int(v) for v in version.split(\".\")] + [0])\n    return template.format(version=version, version_tuple=version_tuple)\n\n\ndef pyinstall(source_folder, onefile=False):\n    try:\n        import PyInstaller.__main__  # noqa  Pyinstaller is not in the default requirements.txt\n    except ImportError:\n        print(f\"ERROR: PyInstaller not found. Please install it with \"\n              f\"'python -m pip install pyinstaller'\")\n        sys.exit(-1)\n\n    pyinstaller_path = os.path.join(os.getcwd(), 'pyinstaller')\n    if not os.path.exists(pyinstaller_path):\n        os.mkdir(pyinstaller_path)\n    try:\n        shutil.rmtree(os.path.join(pyinstaller_path))\n    except Exception as e:\n        print(\"Unable to remove old folder\", e)\n\n    conan_path = os.path.join(source_folder, 'conans', 'conan.py')\n    hidden = (\"--hidden-import=glob \"  # core stdlib\n              \"--hidden-import=pathlib \"\n              # Modules that can be imported in ConanFile conan.tools and errors\n              \"--collect-submodules=conan.cli.commands \"\n              \"--hidden-import=conan.errors \"\n              \"--hidden-import=conan.tools.microsoft \"\n              \"--hidden-import=conan.tools.gnu --hidden-import=conan.tools.cmake \"\n              \"--hidden-import=conan.tools.meson --hidden-import=conan.tools.apple \"\n              \"--hidden-import=conan.tools.build --hidden-import=conan.tools.env \"\n              \"--hidden-import=conan.tools.files \"\n              \"--hidden-import=conan.tools.google --hidden-import=conan.tools.intel \"\n              \"--hidden-import=conan.tools.layout --hidden-import=conan.tools.premake \"\n              \"--hidden-import=conan.tools.qbs --hidden-import=conan.tools.scm \"\n              \"--hidden-import=conan.tools.system --hidden-import=conan.tools.system.package_manager\")\n\n    if not os.path.exists(pyinstaller_path):\n        os.mkdir(pyinstaller_path)\n\n    if platform.system() != \"Windows\":\n        hidden += \" --hidden-import=setuptools.msvc\"\n        win_ver = \"\"\n    else:\n        win_ver_file = os.path.join(pyinstaller_path, 'windows-version-file')\n        content = _windows_version_file(__version__)\n        with open(win_ver_file, 'w') as file:\n            file.write(content)\n        win_ver = [\"--version-file\", win_ver_file]\n\n\n    if onefile:\n        distpath = os.path.join(pyinstaller_path, \"dist\", \"conan\")\n    else:\n        distpath = os.path.join(pyinstaller_path, \"dist\")\n\n    command_args = [conan_path, \"--noconfirm\", f\"--paths={source_folder}\",\n                    \"--console\", f\"--distpath={distpath}\"]\n    command_args.extend(hidden.split(\" \"))\n    if win_ver:\n        command_args.extend(win_ver)\n    if onefile:\n        command_args.append(\"--onefile\")\n\n    PyInstaller.__main__.run(command_args)\n\n    _run_bin(pyinstaller_path)\n\n    return os.path.abspath(os.path.join(pyinstaller_path, 'dist', 'conan'))\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--onefile', action='store_true')\n    parser.set_defaults(onefile=False)\n    args = parser.parse_args()\n\n    src_folder = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))\n    output_folder = pyinstall(src_folder, args.onefile)\n    print(\"\\n**************Conan binaries created!******************\\n\"\n          \"\\nAppend this folder to your system PATH: '%s'\\n\"\n          \"Feel free to move the whole folder to another location.\" % output_folder)\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.087890625,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.1708984375,
          "content": "[pytest]\nnorecursedirs = '.*', 'dist', 'CVS', '_darcs', '{arch}', '*.egg', 'venv', 'assets'\ntestpaths = 'test'\nmarkers = docker_runner: Mark tests that require Docker to run.\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0615234375,
          "content": "[pep8]\ncount = False\nmax-line-length = 100\nstatistics = False\n\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.861328125,
          "content": "\"\"\"A setuptools based setup module.\nSee:\nhttps://packaging.python.org/en/latest/distributing.html\nhttps://github.com/pypa/sampleproject\n\"\"\"\n\n# Always prefer setuptools over distutils\nfrom setuptools import find_packages, setup\n\nimport os\nimport re\nfrom os import path\n\n\n# The tests utils are used by conan-package-tools\nhere = path.abspath(path.dirname(__file__))\nexcluded_test_packages = [\"test*\"]\n\n\ndef get_requires(filename):\n    requirements = []\n    with open(filename, \"rt\") as req_file:\n        for line in req_file.read().splitlines():\n            if not line.strip().startswith(\"#\"):\n                requirements.append(line)\n    return requirements\n\n\ndef load_version():\n    \"\"\" Loads a file content \"\"\"\n    filename = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                            \"conan\", \"__init__.py\"))\n    with open(filename, \"rt\") as version_file:\n        conan_init = version_file.read()\n        version = re.search(r\"__version__ = '([0-9a-z.-]+)'\", conan_init).group(1)\n        return version\n\n\ndef generate_long_description_file():\n    this_directory = path.abspath(path.dirname(__file__))\n    with open(path.join(this_directory, 'README.md')) as f:\n        long_description = f.read()\n    return long_description\n\n\nproject_requirements = get_requires(\"conans/requirements.txt\")\ndev_requirements = get_requires(\"conans/requirements_dev.txt\")\nrunners_requirements = get_requires(\"conans/requirements_runner.txt\")\nexcluded_server_packages = [\"conans.server*\"]\nexclude = excluded_test_packages + excluded_server_packages\n\n\nsetup(\n    name='conan',\n    python_requires='>=3.6',\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=load_version(),  # + \".rc1\",\n\n    description='Conan C/C++ package manager',\n    long_description=generate_long_description_file(),\n    long_description_content_type='text/markdown',\n\n    # The project's main homepage.\n    url='https://conan.io',\n    project_urls={\n        'Documentation': 'https://docs.conan.io',\n        'Source': 'https://github.com/conan-io/conan',\n        'Tracker': 'https://github.com/conan-io/conan/issues',\n    },\n\n    # Author details\n    author='JFrog LTD',\n    author_email='luism@jfrog.com',\n\n    # Choose your license\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8'\n    ],\n\n    # What does your project relate to?\n    keywords=['C/C++', 'package', 'libraries', 'developer', 'manager',\n              'dependency', 'tool', 'c', 'c++', 'cpp'],\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=exclude),\n\n    # Alternatively, if you want to distribute just a my_module.py, uncomment\n    # this:\n    #   py_modules=[\"my_module\"],\n\n    # List run-time dependencies here.  These will be installed by pip when\n    # your project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=project_requirements,\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). You can install these using the following syntax,\n    # for example:\n    # $ pip install -e .[dev,test,runners]\n    extras_require={\n        'dev': dev_requirements,\n        'test': dev_requirements,\n        'runners': runners_requirements\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    package_data={\n        'conans': ['*.txt'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    # data_files=[('my_data', ['data/data_file'])],\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    entry_points={\n        'console_scripts': [\n            'conan=conans.conan:run',\n        ],\n    },\n)\n"
        },
        {
          "name": "setup_server.py",
          "type": "blob",
          "size": 4.6328125,
          "content": "\"\"\"A setuptools based setup module.\nSee:\nhttps://packaging.python.org/en/latest/distributing.html\nhttps://github.com/pypa/sampleproject\n\"\"\"\n\n# To use a consistent encoding\nfrom os import path\n\n# Always prefer setuptools over distutils\nfrom setuptools import find_packages, setup\n\nimport os\nimport re\nfrom os import path\n\n\n# The tests utils are used by conan-package-tools\nhere = path.abspath(path.dirname(__file__))\nexcluded_test_packages = [\"test\"]\n\n\ndef get_requires(filename):\n    requirements = []\n    with open(filename, \"rt\") as req_file:\n        for line in req_file.read().splitlines():\n            if not line.strip().startswith(\"#\"):\n                requirements.append(line)\n    return requirements\n\n\ndef load_version():\n    \"\"\" Loads a file content \"\"\"\n    filename = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                            \"conan\", \"__init__.py\"))\n    with open(filename, \"rt\") as version_file:\n        conan_init = version_file.read()\n        version = re.search(r\"__version__ = '([0-9a-z.-]+)'\", conan_init).group(1)\n        return version\n\n\ndef generate_long_description_file():\n    this_directory = path.abspath(path.dirname(__file__))\n    with open(path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n        long_description = f.read()\n    return long_description\n\n\nproject_requirements = get_requires(\"conans/requirements.txt\")\nproject_requirements.extend(get_requires(\"conans/requirements_server.txt\"))\ndev_requirements = get_requires(\"conans/requirements_dev.txt\")\n\n\nsetup(\n    name='conan_server',\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=load_version(),  # + \".rc1\",\n\n    description='Conan Server of Conan C/C++ package manager',\n    long_description=generate_long_description_file(),\n    long_description_content_type='text/markdown',\n\n    # The project's main homepage.\n    url='https://conan.io',\n\n    # Author details\n    author='JFrog LTD',\n    author_email='luism@jfrog.com',\n\n    # Choose your license\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8'\n    ],\n\n    # What does your project relate to?\n    keywords=['C/C++', 'package', 'libraries', 'developer', 'manager',\n              'dependency', 'tool', 'c', 'c++', 'cpp'],\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=excluded_test_packages + [\"./setup.py\"]),\n\n    # Alternatively, if you want to distribute just a my_module.py, uncomment\n    # this:\n    #   py_modules=[\"my_module\"],\n\n    # List run-time dependencies here.  These will be installed by pip when\n    # your project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=project_requirements,\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). You can install these using the following syntax,\n    # for example:\n    # $ pip install -e .[dev,test]\n    extras_require={\n        'dev': dev_requirements,\n        'test': dev_requirements,\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    package_data={\n        'conans': ['*.txt'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    # data_files=[('my_data', ['data/data_file'])],\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    entry_points={\n        'console_scripts': [\n            'conan_server=conans.conan_server:run'\n        ],\n    },\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}