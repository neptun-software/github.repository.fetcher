{
  "metadata": {
    "timestamp": 1736561054464,
    "page": 835,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pywinauto/pywinauto",
      "stars": 5090,
      "defaultBranch": "atspi",
      "files": [
        {
          "name": ".checkignore",
          "type": "blob",
          "size": 0.0693359375,
          "content": "apps/*\nci/*\ndoc_src/*\nsandbox/*\npywinauto/six.py\npywinauto/unittests/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8359375,
          "content": "# Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nenv/\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.coverage\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\nCoverage_report/*\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\nref_controls.xml\r\n\r\n# Django stuff:\r\n*.log\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\ndocs/_sources/\r\n\r\n# PyBuilder\r\ntarget/\r\n/.idea\r\n\r\n# Vim\r\n*.*~\r\n*.swp\r\n\r\n# Unit tests screenshots\r\n__main__.*.jpg\r\n"
        },
        {
          "name": ".landscape.yml",
          "type": "blob",
          "size": 0.2783203125,
          "content": "doc-warnings: yes\r\ntest-warnings: no\r\nstrictness: medium\r\nmax-line-length: 120\r\nautodetect: yes\r\nrequirements:\r\n    - dev-requirements.txt\r\nignore-paths:\r\n    - apps\r\n    - sandbox\r\n    - docs\r\n    - pywinauto/unittests\r\n\r\npep257:\r\n    disable:\r\n        - D211  # conflicts with D203\r\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.1708984375,
          "content": "dist: xenial\nlanguage: cpp\nnotifications:\n  email: false\nservices:\n  xvfb\n\nlanguage: python\n\npython:\n  - \"2.7\"\n  - \"3.4\"\n  - \"3.6\"\n  - \"3.7\"\n  - \"3.8\"\nos:\n  - linux\nbefore_install:\n  - sudo add-apt-repository -y ppa:beineri/opt-qt58-xenial\n\ninstall:\n  - pip install python-xlib codecov coverage\n  # All this dependencies only to build tests application. No real dependency of this packages\n  - sudo apt-get update\n  - sudo apt-get -y install at-spi2-core\n  - sudo apt-get install -qq qt58base;\n  - sudo apt-get -y install qt58declarative qt58tools\n  - sudo apt-get install xsel\n  - sudo apt-get install libgtk-3-dev libgtk2.0-dev\n  - sudo apt-get install -y python3-gi\n  - sudo apt-get install --reinstall libgl1-mesa-dev\n  - source /opt/qt58/bin/qt58-env.sh;\n  \nbefore_script:\n  - xauth generate :99.0 . trusted\n  # Clone test apps\n  - git init apps\n  - cd apps\n  - git remote add -f origin https://github.com/pywinauto/PywinautoTestapps/\n  - git config core.sparseCheckout true\n  - echo \"MouseTester/source\" >> .git/info/sparse-checkout\n  - echo \"SendKeysTester/source\" >> .git/info/sparse-checkout\n  - git pull origin master\n  # Build test apps\n  - cd MouseTester/source\n  - qmake\n  - make\n  - chmod a+x mousebuttons\n  - cp mousebuttons ../\n  - cd $TRAVIS_BUILD_DIR\n  - cd apps/SendKeysTester/source\n  - qmake\n  - make\n  - chmod a+x send_keys_test_app\n  - cp send_keys_test_app ../\n  - cd $TRAVIS_BUILD_DIR\n  - chmod a+x $TRAVIS_BUILD_DIR/apps/Gtk_samples/gtk_example.py\n\nscript:\n  - coverage run -a --include=pywinauto/mouse.py pywinauto/unittests/test_mouse.py\n  - coverage run -a --include=pywinauto/linux/keyboard.py pywinauto/unittests/test_keyboard.py\n  - coverage run -a --include=pywinauto/linux/clipboard.py pywinauto/unittests/test_clipboard_linux.py\n  - coverage run -a --include=pywinauto/linux/application.py pywinauto/unittests/test_application_linux.py\n  - coverage run -a --source=pywinauto/linux,pywinauto/controls pywinauto/unittests/test_atspi_element_info.py\n  - coverage run -a --source=pywinauto/linux,pywinauto/controls pywinauto/unittests/test_atspi_wrapper.py\n  - coverage run -a --source=pywinauto/linux,pywinauto/controls pywinauto/unittests/test_atspi_controls.py\n\nafter_success:\n  - codecov\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.46875,
          "content": "Copyright (c) 2017, Mark Mc Mahon and Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name of pywinauto nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4697265625,
          "content": "include Readme.txt\r\ninclude docs\\*.txt\r\ninclude LICENSE\r\ninclude setup.cfg\r\ninclude setup.py\r\n\r\ninclude pywinauto\\controls\\*.py\r\ninclude pywinauto\\tests\\*.py\r\ninclude pywinauto\\unittests\\*.py\r\ninclude pywinauto\\linux\\*.py\r\n\r\n# include the examples - but not Watsup or .svn directories\r\ninclude examples\\*.py\r\nexclude examples\\examples_watsup\\*.py\r\n\r\n# include all the website folder and make sure that\r\n# the sub version files are not included\r\nexclude pywinauto\\docs\\.doctrees\\*\r\n"
        },
        {
          "name": "MakeBackup.bat",
          "type": "blob",
          "size": 1.2939453125,
          "content": "<<<<<<< HEAD\n@echo off\r\nif (%1)==() goto VersionNotGiven\r\n\r\nmd previousReleases\\%1\r\n\r\nif not exist previousReleases\\%1 goto FolderNotCreated\r\n\r\nmd previousReleases\\%1\\DlgCheck2\r\nif not exist previousReleases\\%1 goto FolderTwoNotCreated\r\n\r\ncopy *.py previousReleases\\%1\r\ncopy dlgCheck2 previousReleases\\%1\\DlgCheck2\r\n\r\n\r\ngoto finished\r\n\r\n:FolderNotCreated\r\necho.\r\necho Could not create the folder \"previousReleases\\%1\"\r\necho.\r\ngoto finished\r\n\r\n:FolderTwoNotCreated\r\necho.\r\necho Could not create the folder \"previousReleases\\%1\\DlgCheck2\"\r\necho.\r\ngoto finished\r\n\r\n\r\nVersionNotGiven\r\necho.\r\necho please specify the version of the backup\r\necho.\r\ngoto finished\r\n\r\n:finished\r\n=======\n@echo off\nif (%1)==() goto VersionNotGiven\n\nmd previousReleases\\%1\n\nif not exist previousReleases\\%1 goto FolderNotCreated\n\nmd previousReleases\\%1\\DlgCheck2\nif not exist previousReleases\\%1 goto FolderTwoNotCreated\n\ncopy *.py previousReleases\\%1\ncopy dlgCheck2 previousReleases\\%1\\DlgCheck2\n\n\ngoto finished\n\n:FolderNotCreated\necho.\necho Could not create the folder \"previousReleases\\%1\"\necho.\ngoto finished\n\n:FolderTwoNotCreated\necho.\necho Could not create the folder \"previousReleases\\%1\\DlgCheck2\"\necho.\ngoto finished\n\n\nVersionNotGiven\necho.\necho please specify the version of the backup\necho.\ngoto finished\n\n:finished\n>>>>>>> pywinauto64master\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.15234375,
          "content": "[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UGXPL6AD29PHW)\n[![Join the chat at https://gitter.im/pywinauto/pywinauto](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pywinauto/pywinauto?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Documentation Status](https://readthedocs.org/projects/pywinauto/badge/?version=latest)](http://pywinauto.readthedocs.org/en/latest/?badge=latest)\n[![Windows Tests](https://ci.appveyor.com/api/projects/status/ykk30v7vcvkmpnoq/branch/master?svg=true&passingText=Windows%20tests%20-%20OK&pendingText=Windows%20tests%20-%20running&failingText=Windows%20tests%20-%20fail)](https://ci.appveyor.com/project/pywinauto/pywinauto)\n[![Linux Tests](https://travis-ci.org/pywinauto/pywinauto.svg?branch=master)](https://travis-ci.org/pywinauto/pywinauto)\n[![codecov.io](http://codecov.io/github/pywinauto/pywinauto/coverage.svg?branch=master)](http://codecov.io/github/pywinauto/pywinauto?branch=master)\n[![Code Health](https://landscape.io/github/pywinauto/pywinauto/master/landscape.svg?style=flat)](https://landscape.io/github/pywinauto/pywinauto/master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b823b31c0f2b48d6873326d038c5a516)](https://www.codacy.com/app/pywinauto/pywinauto?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=pywinauto/pywinauto&amp;utm_campaign=Badge_Grade)\n[![Code Quality: Python](https://img.shields.io/lgtm/grade/python/g/pywinauto/pywinauto.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/pywinauto/pywinauto/context:python)\n[![Total Alerts](https://img.shields.io/lgtm/alerts/g/pywinauto/pywinauto.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/pywinauto/pywinauto/alerts)\n\npywinauto\n============\npywinauto is a set of python modules to automate the Microsoft Windows GUI. \nAt its simplest it allows you to send mouse and keyboard actions to windows \ndialogs and controls, but it has support for more complex actions like getting text data.\n\nSupported technologies under the hood: Win32 API (`backend=\"win32\"`; used by default),\nMS UI Automation (`backend=\"uia\"`). User input emulation modules\n `mouse` and `keyboard` work on both Windows and Linux.\n\n### Enjoying this?\nJust star the repo or make a donation.\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UGXPL6AD29PHW)\n\nYour help is valuable since this is a hobby project for all of us: we do \n[new features](https://github.com/pywinauto/pywinauto/issues?q=is%3Aissue+is%3Aopen+label%3A%22New+Feature%22) development during out-of-office hours.\n * In general the library **tends to be cross-platform** in the near future (Linux in 2018, macOS in 2019).\n * Reliable text based **\"record-replay\"** generator is also a high priority feature under development.\n * More feature requests and discusions are welcome in [the issues](https://github.com/pywinauto/pywinauto/issues).\n\n### Setup\n* run `pip install -U pywinauto` (dependencies will be installed automatically)\n\n### Documentation / Help\n* [Short Intro on ReadTheDocs](https://pywinauto.readthedocs.io/en/latest/)\n* [Getting Started Guide](https://pywinauto.readthedocs.io/en/latest/getting_started.html) (core concept, Spy/Inspect tools etc.)\n* [StackOverflow tag](https://stackoverflow.com/questions/tagged/pywinauto) for questions\n* [Mailing list](https://sourceforge.net/p/pywinauto/mailman/)\n\n### Simple Example\nIt is simple and the resulting scripts are very readable. How simple?\n\n```python\nfrom pywinauto.application import Application\napp = Application().start(\"notepad.exe\")\n\napp.UntitledNotepad.menu_select(\"Help->About Notepad\")\napp.AboutNotepad.OK.click()\napp.UntitledNotepad.Edit.type_keys(\"pywinauto Works!\", with_spaces = True)\n```\n\n### MS UI Automation Example\nMore detailed example for `explorer.exe`:\n\n```python\nfrom pywinauto import Desktop, Application\n\nApplication().start('explorer.exe \"C:\\\\Program Files\"')\n\n# connect to another process spawned by explorer.exe\n# Note: make sure the script is running as Administrator!\napp = Application(backend=\"uia\").connect(path=\"explorer.exe\", title=\"Program Files\")\n\napp.ProgramFiles.set_focus()\ncommon_files = app.ProgramFiles.ItemsView.get_item('Common Files')\ncommon_files.right_click_input()\napp.ContextMenu.Properties.invoke()\n\n# this dialog is open in another process (Desktop object doesn't rely on any process id)\nProperties = Desktop(backend='uia').Common_Files_Properties\nProperties.print_control_identifiers()\nProperties.Cancel.click()\nProperties.wait_not('visible') # make sure the dialog is closed\n```\n\n### Dependencies (if install manually)\n* Windows:\n  - [pyWin32](https://github.com/mhammond/pywin32/)\n  - [comtypes](https://github.com/enthought/comtypes)\n  - [six](https://pypi.python.org/pypi/six)\n* Linux:\n  - [python-xlib](https://github.com/python-xlib/python-xlib)\n  - [six](https://pypi.python.org/pypi/six)\n* Optional packages:\n  - Install [Pillow](https://pypi.python.org/pypi/Pillow) (by `pip install -U Pillow`) to be able to call `capture_as_image()` method for making a control's snapshot.\n\n### Packages required for running unit tests\n* [Pillow](https://pypi.python.org/pypi/Pillow)\n* [coverage](https://pypi.python.org/pypi/coverage)\n\nRun all the tests: `python ./pywinauto/unittests/testall.py`\n\n### Contribution\nPull requests are very welcome. Read [Contribution Guide](https://github.com/pywinauto/pywinauto/wiki/Contribution-Guide-(draft)) for more details about unit tests, coding conventions, etc.\n\n### Copyrights\nPywinauto for native Windows GUI was initially written by **Mark Mc Mahon**. \nMark brought many great ideas into the life using power of Python. \nFurther contributors are inspired of the nice API so that the development continues.\n\nStarting from 0.6.0 pywinauto is distributed under the BSD 3-clause license.\nPywinauto 0.5.4 and before was distributed under the LGPL v2.1 or later.\n* (c) [The Open Source Community](https://github.com/pywinauto/pywinauto/graphs/contributors), 2015-2018 (0.6.0+ development)\n* (c) Intel Corporation, 2015 (0.5.x maintenance)\n* (c) Michael Herrmann, 2012-2013 (0.4.2)\n* (c) Mark Mc Mahon, 2006-2010 (0.4.0 and before)\n"
        },
        {
          "name": "Readme.txt",
          "type": "blob",
          "size": 3.8427734375,
          "content": "pywinauto\r\n(c) Mark Mc Mahon 2006-2010, Intel Corporation 2015-2016, Open Source community 2016-2019\r\nReleased under BSD 3-clause license\r\n\r\n\r\nWhat is it\r\n----------\r\npywinauto is a set of python modules to automate the Microsoft Windows GUI. \r\nAt its simplest it allows you to send mouse and keyboard actions to windows \r\ndialogs and controls.\r\n\r\n\r\nManual Installation\r\n------------\r\nInstall the following Python packages\r\n(Required) pyWin32      http://sourceforge.net/projects/pywin32/files/pywin32/\r\n(Required) comtypes     https://github.com/enthought/comtypes\r\n(Optional) PIL          http://www.pythonware.com/products/pil/index.htm\r\nUnzip the pywinauto zip file to a folder.\r\nRun \"python setup.py install\"\r\n\r\nTo check you have it installed correctly\r\nrun in Python REPL:\r\n>>> from pywinauto import Application\r\n>>> app = Application(backend=\"uia\").start(\"notepad.exe\")\r\n>>> app.UntitledNotepad.type_keys(\"%FX\")\r\n\r\nInstallation in silent mode (Python 2.7, 3.3+)\r\n------------\r\n Just run \"pip install -U pywinauto\"\r\n\r\n\r\nWhere to start\r\n--------------\r\nThe Getting Started Guide: https://pywinauto.readthedocs.io/en/latest/getting_started.html\r\nIt explains the core concept, how to choose appropriate backend, spy tools and many other things.\r\n\r\nWe also have several examples installed along with the pywinauto demonstrating the work with\r\nNotepad, MSPaint, WireShark, explorer.exe and etc.\r\nhttps://github.com/pywinauto/pywinauto/tree/master/examples\r\nAll the examples designed to work only on a system with English as OS interface language.\r\n\r\n\r\nHow does it work\r\n----------------\r\nA lot is done through attribute access (__getattr__) for each class. For instance,\r\nwhen you get the attribute of an Application or Dialog object it looks for a \r\ndialog or control (respectively).\r\n\r\nmyapp.Notepad # looks for a Window/Dialog of your app that has a title 'similar'\r\n              # to \"Notepad\"\r\n              \r\nmyapp.PageSetup.OK # looks first for a dialog with a title like \"PageSetup\"\r\n                   # then it looks for a control on that dialog with a title\r\n                   # like \"OK\"\r\n                   \r\nThe attribute resolution is delayed (at the present with a hard coded time limit) until\r\nit succeeds. So for example, if you select a menu option and then look for the\r\nresulting dialog e.g. with the following code:\r\n\r\napp.Notepad.menu_select(\"File->SaveAs\")\r\napp.SaveAs.ComboBox5.select(\"UTF-8\")\r\napp.SaveAs.edit1.set_text(\"Example-utf8.txt\")\r\napp.SaveAs.Save.click()\r\n\r\nAt the 2nd line the SaveAs dialog might not be open by the time this line is\r\nexecuted. So what happens is that we wait until we have a control to resolve \r\nbefore resolving the dialog. At that point, if we can't find a SaveAs dialog with\r\na ComboBox5 control we wait a short period of time and try again. \r\nThe procedure repeats up to a maximum time limit (currently 5 second!)\r\n\r\nThis internal waiting loop is to avoid the user having to use time.sleep or\r\nimplementing a custom \"wait_for_dialog\" function.\r\n\r\nHowever, if your application performs particularly long-standing operations, it can\r\nstill take time for a new dialog to appear or disappear. In that case, you could\r\nwait for the transition to a new state like so ::\r\n\r\n  app.Open.Open.click() # opening large file\r\n  app.Open.wait_not('visible') # make sure \"Open\" dialog became invisible\r\n  # wait up to 30 seconds until data.txt is loaded\r\n  app.window(title='data.txt - Notepad').wait('ready', timeout=30)\r\n\r\n\r\nSeveral similar tools for comparison\r\n------------------------------------\r\nSee rating of competitors in the open source field (updated every month):\r\nhttps://github.com/pywinauto/pywinauto/wiki/UI-Automation-tools-ratings\r\n\r\n* Other free tools\r\n\r\n  - See a collection at: https://github.com/atinfo/awesome-test-automation\r\n\r\n* Commercial tools\r\n\r\n  - TestComplete\r\n  - Squish\r\n  - HP UFT (former QTP)\r\n  - LeanFT\r\n  - WinRunner\r\n  - SilkTest\r\n  - Many Others\r\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.9814453125,
          "content": "# Based on https://github.com/ogrisel/python-appveyor-demo\n# and https://github.com/jjhelmus/appveyor-build-conda-pyart\n#\n# Hint: before committing any changes in the yaml file verify it in \n# the yaml online parser: http://yaml-online-parser.appspot.com/\n#\n\n# fetch repository as a zip archive\nshallow_clone: true                 # default is \"false\"\n\nenvironment:\n\n  matrix:\n\n    - PYTHON: \"C:\\\\Python27\"\n      PYTHON_VERSION: \"2.7\"\n      PYTHON_ARCH: \"32\"\n      UIA_SUPPORT: \"NO\"\n\n    - PYTHON: \"C:\\\\Python27-x64\"\n      PYTHON_VERSION: \"2.7\"\n      PYTHON_ARCH: \"64\"\n      UIA_SUPPORT: \"YES\"\n\n    - PYTHON: \"C:\\\\Python35\"\n      PYTHON_VERSION: \"3.5\"\n      PYTHON_ARCH: \"32\"\n      UIA_SUPPORT: \"YES\"\n\n    - PYTHON: \"C:\\\\Python37\"\n      PYTHON_VERSION: \"3.7\"\n      PYTHON_ARCH: \"32\"\n      UIA_SUPPORT: \"NO\"\n\n    - PYTHON: \"C:\\\\Python37-x64\"\n      PYTHON_VERSION: \"3.7\"\n      PYTHON_ARCH: \"64\"\n      UIA_SUPPORT: \"YES\"\n\n    - PYTHON: \"C:\\\\Python38-x64\"\n      PYTHON_VERSION: \"3.8\"\n      PYTHON_ARCH: \"64\"\n      UIA_SUPPORT: \"YES\"\n\n    - PYTHON: \"C:\\\\Python39\"\n      PYTHON_VERSION: \"3.9\"\n      PYTHON_ARCH: \"32\"\n      UIA_SUPPORT: \"YES\"\n\n    - PYTHON: \"C:\\\\Python310-x64\"\n      PYTHON_VERSION: \"3.10\"\n      PYTHON_ARCH: \"64\"\n      UIA_SUPPORT: \"YES\"\n\n    - PYTHON: \"C:\\\\Python311-x64\"\n      PYTHON_VERSION: \"3.11\"\n      PYTHON_ARCH: \"64\"\n      UIA_SUPPORT: \"YES\"\n\n#init:\n  # Enable RDP.\n  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n\ninstall:\n  # Some listings for debug only\n  #- ECHO \"Filesystem root:\"\n  #- ps: \"ls \\\"C:/\\\"\"\n  #- ECHO \"Notepad location \"\n  #- ps: \"ls C:\\\\Windows\\\\System32\\\\notepad.exe\"\n\n  # install the appropriate Miniconda (Py2/Py3, 32/64 bit),\n  # as well as pywin32, pillow and coverage\n  - \"powershell ./ci/install.ps1\"\n  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n\n  # Install the build dependencies of the project. If some dependencies contain\n  # compiled extensions and are not provided as pre-built wheel packages,\n  # pip will build them from source using the MSVC compiler matching the\n  # target Python version and architecture\n  - \"%CMD_IN_ENV% pip install -r dev-requirements.txt\"\n\n  # Enable desktop (for correct screenshots).\n  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-desktop.ps1'))\n\nbuild: false  # Not a C# project, build stuff at the test step instead.\n\ntest_script:\n  # run the tests\n  - \"powershell ./ci/runTestsuite.ps1\"\n\n\nafter_test:\n  # Generate coverage report on codecov.io (token is not required for AppVeyor)\n  - codecov\n  - coverage xml\n  #- python-codacy-coverage -d %APPVEYOR_BUILD_FOLDER%  -c %APPVEYOR_REPO_COMMIT% -r coverage.xml\n\nartifacts:\n  # Archive the generated coverage report in the ci.appveyor.com build report.\n  - path: Coverage_report\n\n#on_success:\n#  - TODO: \n#\n\n#on_failure:\n  # Collect screenshots.\n  #- \"7z a screenshots.zip %APPVEYOR_BUILD_FOLDER%\\\\scr-*.jpg\"\n  #- \"appveyor PushArtifact screenshots.zip\"\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.1962890625,
          "content": "codecov:\n  notify:\n    require_ci_to_pass: no\ncoverage:\n  precision: 1\ncomment:\n  layout: header, changes, diff\ncoverage:\n  ignore:\n  - pywinauto/unittests/.*\n  - examples/.*\n  status:\n    patch: false"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.2451171875,
          "content": "pywin32==301 ; python_version == '3.6' and sys_platform == \"win32\"\npywin32 ; python_version != '3.6' and sys_platform == \"win32\"\nsix\npillow>=6.2.0\ncoverage\nnose\ncodecov\nrst2pdf\nSphinx\nmock==2.0.0\ncodacy-coverage\nPyQt5==5.15.4 ; python_version >= '3.6'"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "makedocs.bat",
          "type": "blob",
          "size": 0.2236328125,
          "content": "@echo off\r\n\r\npython docs\\build_autodoc_files.py\r\n\r\nsphinx-build -w warnings.txt -E -b html .\\docs .\\html_docs 1>sphinx_build_log.txt 2>&1\r\n::sphinx-build -w warnings.txt -E -b latex .\\docs .\\pdf_docs 1>sphinx_build_log.txt 2>&1\r\n"
        },
        {
          "name": "pywinauto",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0556640625,
          "content": "Babel==1.3\nmock==2.0.0\nrst2pdf\nsix==1.10.0\nSphinx==1.4.1\n"
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1904296875,
          "content": "#[sdist]\r\n#force-manifest=1\r\n[flake8]\r\nmax-line-length = 120\r\nignore =\r\n    # E265: block comment should start with '# '...\r\n    E265,\r\n#    # F812: list comprehension redefines ...\r\n#    F812,\r\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.00390625,
          "content": "# GUI Application automation and testing library\r\n# Copyright (C) 2006-2018 Mark Mc Mahon and Contributors\r\n# https://github.com/pywinauto/pywinauto/graphs/contributors\r\n# http://pywinauto.readthedocs.io/en/latest/credits.html\r\n# All rights reserved.\r\n#\r\n# Redistribution and use in source and binary forms, with or without\r\n# modification, are permitted provided that the following conditions are met:\r\n#\r\n# * Redistributions of source code must retain the above copyright notice, this\r\n#   list of conditions and the following disclaimer.\r\n#\r\n# * Redistributions in binary form must reproduce the above copyright notice,\r\n#   this list of conditions and the following disclaimer in the documentation\r\n#   and/or other materials provided with the distribution.\r\n#\r\n# * Neither the name of pywinauto nor the names of its\r\n#   contributors may be used to endorse or promote products derived from\r\n#   this software without specific prior written permission.\r\n#\r\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n\"\"\"Install and build pywinauto distributions\"\"\"\r\n\r\nfrom __future__ import print_function\r\n\r\nfrom setuptools import setup\r\n\r\nimport os.path\r\nimport sys\r\n\r\n# We need the path to setup.py to be able to run\r\n# the setup from a different folder\r\ndef setup_path(path = \"\"):\r\n    # get the path to the setup file\r\n    setup_path = os.path.abspath(os.path.split(__file__)[0])\r\n\r\n    return os.path.join(setup_path, path)\r\n\r\n# add it to the system path\r\nsys.path.append(setup_path())\r\n\r\n# make sure the documentation is in the correct place for building\r\n# todo: see how to build the website\r\n#if \"sdist\" in sys.argv:\r\n#    import shutil\r\n#    if not os.path.exists(setup_path(\"docs\")):\r\n#        shutil.move(setup_path(\"website\"), setup_path(\"docs\"))\r\n\r\nif sys.platform == 'win32':\r\n    install_requires = ['six', 'comtypes']\r\n    try:\r\n        import win32api # check if it was already installed manually\r\n    except ImportError:\r\n        install_requires.append('pywin32')\r\n    packages = [\"pywinauto\", \"pywinauto.tests\", \"pywinauto.controls\", \"pywinauto.windows\"]\r\nelif sys.platform.startswith('linux'):\r\n    install_requires = ['six', 'python-xlib']\r\n    packages = [\"pywinauto\", \"pywinauto.linux\", \"pywinauto.controls\"]\r\nelif sys.platform == 'darwin':\r\n    install_requires = ['six']\r\n    packages = [\"pywinauto\", \"pywinauto.controls\"]\r\nelse:\r\n    install_requires = ['six', 'python-xlib']\r\n    packages = [\"pywinauto\", \"pywinauto.linux\", \"pywinauto.controls\"]\r\n\r\nsetup(name='pywinauto',\r\n    version = '0.6.8',\r\n    description = 'A set of Python modules to automate the Microsoft Windows GUI',\r\n    keywords = \"windows gui automation GuiAuto testing test desktop mouse keyboard\",\r\n    url = \"http://pywinauto.github.io/\",\r\n    project_urls = {\r\n        \"Source\": \"https://github.com/pywinauto/pywinauto\",\r\n    },\r\n    author = 'Mark Mc Mahon and Contributors',\r\n    author_email = 'pywinauto-users@lists.sourceforge.net',\r\n    long_description = \"\"\"\r\nAt it's simplest it allows you to send mouse and keyboard\r\nactions to windows dialogs and controls, but It has support for more complex\r\ncontrols also.\r\n\r\nUseful links\r\n-------------\r\n- Home page: http://pywinauto.github.io/\r\n- Docs Intro: https://pywinauto.readthedocs.io/en/latest/\r\n- Getting Started Guide: https://pywinauto.readthedocs.io/en/latest/getting_started.html\r\n- StackOverflow tag: https://stackoverflow.com/questions/tagged/pywinauto\r\n\"\"\",\r\n    platforms=['win32'],\r\n\r\n    packages = packages,\r\n\r\n    license = \"BSD 3-clause\",\r\n    classifiers=[\r\n        'Development Status :: 5 - Production/Stable',\r\n        'Environment :: Console',\r\n        'Intended Audience :: Developers',\r\n        'License :: OSI Approved :: BSD License',\r\n        'Operating System :: Microsoft :: Windows',\r\n        'Programming Language :: Python',\r\n        'Programming Language :: Python :: 2.7',\r\n        'Programming Language :: Python :: 3.5',\r\n        'Programming Language :: Python :: 3.6',\r\n        'Programming Language :: Python :: 3.7',\r\n        'Programming Language :: Python :: Implementation :: CPython',\r\n        'Topic :: Software Development :: Libraries :: Python Modules',\r\n        'Topic :: Software Development :: Testing',\r\n        'Topic :: Software Development :: User Interfaces',\r\n        'Topic :: Software Development :: Quality Assurance',\r\n        ],\r\n    install_requires=install_requires,\r\n    )\r\n"
        }
      ]
    }
  ]
}