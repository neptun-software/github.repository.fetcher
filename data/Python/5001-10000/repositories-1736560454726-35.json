{
  "metadata": {
    "timestamp": 1736560454726,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cupy/cupy",
      "stars": 9670,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[run]\nplugins = Cython.Coverage\ninclude = cupy/*,cupyx/*,examples/*\n\n[report]\nexclude_lines =\n    if __name__ == .__main__.:\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.267578125,
          "content": "*~\n*.egg/\n*.pyc\n*.pyo\n*.pyd\n*.cpp\n*.so\nbuild\n\\#*\\#\n.\\#*\n.coverage\n.eggs/\n.mypy_cache\n_readthedocs_build\n/TAGS\n/docs/source/reference/**/generated\n/tags\n*.egg-info/\ndist/\nhtmlcov/\n.idea/\n.vs/\n.cache/\n.pytest_cache/\ncupy/.data/\ncupy/cuda/thrust.h\ncupy/_core/numpy_allocator.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.294921875,
          "content": "[submodule \"third_party/cccl\"]\n\tpath = third_party/cccl\n\turl = https://github.com/cupy/cccl.git\n[submodule \"third_party/jitify\"]\n\tpath = third_party/jitify\n\turl = https://github.com/NVIDIA/jitify.git\n[submodule \"third_party/dlpack\"]\n\tpath = third_party/dlpack\n\turl = https://github.com/dmlc/dlpack.git\n"
        },
        {
          "name": ".mergify.yml",
          "type": "blob",
          "size": 0.208984375,
          "content": "pull_request_rules:\n  - name: Notify conflict\n    conditions:\n      - conflict\n      - -closed\n    actions:\n      comment:\n        message: This pull request is now in conflicts. Could you fix it @{{author}}? üôè\n"
        },
        {
          "name": ".pfnci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.59375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      # Git\n      - id: check-added-large-files\n      - id: no-commit-to-branch\n        name: \"ensure no direct commit to main/vXX branch\"\n        args: [--branch, \"main\", --pattern, \"v\\\\d+\"]\n      - id: check-case-conflict\n      # Contents\n      - id: mixed-line-ending\n      - id: fix-byte-order-marker\n      - id: check-yaml\n\n  - repo: https://github.com/hhatto/autopep8\n    rev: v2.3.1\n    hooks:\n      - id: autopep8\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.3\n    hooks:\n      - id: ruff\n\n  - repo: https://github.com/MarcoGorelli/cython-lint\n    rev: v0.16.6\n    hooks:\n      - id: cython-lint\n        args: [\"--max-line-length\", \"79\"]\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.13.0\n    hooks:\n      - id: mypy\n        # Keep in sync with the list in setup.cfg\n        files: \"^(cupy|cupyx|cupy_backends|.github|.pfnci)/\"\n        additional_dependencies: [numpy, types-setuptools, types-PyYAML]\n      - id: mypy\n        name: \"mypy (install)\"\n        files: \"^install/\"\n        args: [--config-file, \"install/mypy.ini\"]\n        additional_dependencies: [numpy, types-setuptools, types-PyYAML]\n\n  - repo: local\n    hooks:\n      - id: ci-generate\n        name: \"check CI files are up-to-date (.pfnci/generate.py)\"\n        files: .pfnci/\n        entry: .pfnci/generate.py --dry-run\n        pass_filenames: false\n        language: python\n        additional_dependencies: [PyYAML]\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.345703125,
          "content": "# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\nsubmodules:\n    include: all\n    recursive: true\nbuild:\n    os: ubuntu-22.04\n    tools:\n        python: \"3.12\"\nformats: all\nsphinx:\n    configuration: docs/source/conf.py\npython:\n    install:\n    - requirements: docs/requirements.txt\n    - method: pip\n      path: .\n"
        },
        {
          "name": ".ruff.toml",
          "type": "blob",
          "size": 0.44140625,
          "content": "# TODO: Move to pyproject.toml once ready\ntarget-version = \"py39\"\nline-length = 79\nextend-exclude = [\n  \"cupy/array_api\",\n  \"docs/source\",\n  \"tests/cupy_tests/array_api_tests\",\n  \"third_party\",\n]\n\n[lint]\nselect = [\"E\", \"F\", \"W\"]\n\n[lint.per-file-ignores]\n\"cupyx/scipy/special/_gammainc.py\" = [\n  \"E501\", # line-too-long (table of constants)\n]\n\"tests/typing_tests/cupy_tests/creation_tests/test_basic.pyi\" = [\n  \"E501\", # line-too-long (long comments)\n]\n"
        },
        {
          "name": "CITATION.bib",
          "type": "blob",
          "size": 0.490234375,
          "content": "@inproceedings{cupy_learningsys2017,\n  author       = \"Okuta, Ryosuke and Unno, Yuya and Nishino, Daisuke and Hido, Shohei and Loomis, Crissman\",\n  title        = \"CuPy: A NumPy-Compatible Library for NVIDIA GPU Calculations\",\n  booktitle    = \"Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)\",\n  year         = \"2017\",\n  url          = \"http://learningsys.org/nips17/assets/papers/paper_16.pdf\"\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.296875,
          "content": "# CuPy Code of Conduct\n\nCuPy follows the [NumFOCUS Code of Conduct][homepage] available at https://numfocus.org/code-of-conduct.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at `dlfw@preferred.jp`.\n\n[homepage]: https://numfocus.org/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.091796875,
          "content": "Copyright (c) 2015 Preferred Infrastructure, Inc.\nCopyright (c) 2015 Preferred Networks, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.458984375,
          "content": "# Contents of sdist. See also `setup.py`.\nrecursive-include cupy *.h *.hpp\nrecursive-include cupy *.pyx *.pxd *.pxi\nrecursive-include cupy_backends *.h *.hpp\nrecursive-include cupy_backends *.pyx *.pxd *.pxi\n\n# Fail-safe to avoid including Cythoinzed sources in sdist.\nrecursive-exclude cupy *.cpp\nrecursive-exclude cupy_backends *.cpp\n\n# Installers\nrecursive-include install *.py\nrecursive-include tests *.py\n\n# Licenses\ninclude LICENSE\ninclude docs/source/license.rst\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3291015625,
          "content": "<div align=\"center\"><img src=\"https://raw.githubusercontent.com/cupy/cupy/main/docs/image/cupy_logo_1000px.png\" width=\"400\"/></div>\n\n# CuPy : NumPy & SciPy for GPU\n\n[![pypi](https://img.shields.io/pypi/v/cupy)](https://pypi.python.org/pypi/cupy)\n[![Conda](https://img.shields.io/badge/conda--forge-cupy-blue)](https://anaconda.org/conda-forge/cupy)\n[![GitHub license](https://img.shields.io/github/license/cupy/cupy)](https://github.com/cupy/cupy)\n[![Matrix](https://img.shields.io/matrix/cupy_community:gitter.im?server_fqdn=matrix.org)](https://gitter.im/cupy/community)\n[![Twitter](https://img.shields.io/twitter/follow/CuPy_Team?label=%40CuPy_Team)](https://twitter.com/CuPy_Team)\n[![Medium](https://img.shields.io/badge/Medium-CuPy-teal)](https://medium.com/cupy-team)\n\n[**Website**](https://cupy.dev/)\n| [**Install**](https://docs.cupy.dev/en/stable/install.html)\n| [**Tutorial**](https://docs.cupy.dev/en/stable/user_guide/basic.html)\n| [**Examples**](https://github.com/cupy/cupy/tree/main/examples)\n| [**Documentation**](https://docs.cupy.dev/en/stable/)\n| [**API Reference**](https://docs.cupy.dev/en/stable/reference/)\n| [**Forum**](https://groups.google.com/forum/#!forum/cupy)\n\nCuPy is a NumPy/SciPy-compatible array library for GPU-accelerated computing with Python.\nCuPy acts as a [drop-in replacement](https://docs.cupy.dev/en/stable/reference/comparison.html) to run existing NumPy/SciPy code on NVIDIA CUDA or AMD ROCm platforms.\n\n```py\n>>> import cupy as cp\n>>> x = cp.arange(6).reshape(2, 3).astype('f')\n>>> x\narray([[ 0.,  1.,  2.],\n       [ 3.,  4.,  5.]], dtype=float32)\n>>> x.sum(axis=1)\narray([  3.,  12.], dtype=float32)\n```\n\nCuPy also provides access to low-level CUDA features.\nYou can pass `ndarray` to existing CUDA C/C++ programs via [RawKernels](https://docs.cupy.dev/en/stable/user_guide/kernel.html#raw-kernels), use [Streams](https://docs.cupy.dev/en/stable/reference/cuda.html) for performance, or even call [CUDA Runtime APIs](https://docs.cupy.dev/en/stable/reference/cuda.html#runtime-api) directly.\n\n## Installation\n\n### Pip\n\nBinary packages (wheels) are available for Linux and Windows on [PyPI](https://pypi.org/org/cupy/).\nChoose the right package for your platform.\n\n| Platform              | Architecture      | Command                                                       |\n| --------------------- | ----------------- | ------------------------------------------------------------- |\n| CUDA 11.x (11.2+)     | x86_64 / aarch64  | `pip install cupy-cuda11x`                                    |\n| CUDA 12.x             | x86_64 / aarch64  | `pip install cupy-cuda12x`                                    |\n| ROCm 4.3 (*[experimental](https://docs.cupy.dev/en/latest/install.html#using-cupy-on-amd-gpu-experimental)*)          | x86_64            | `pip install cupy-rocm-4-3`                                   |\n| ROCm 5.0 (*[experimental](https://docs.cupy.dev/en/latest/install.html#using-cupy-on-amd-gpu-experimental)*)          | x86_64            | `pip install cupy-rocm-5-0`                                   |\n\n> [!NOTE]\\\n> To install pre-releases, append `--pre -U -f https://pip.cupy.dev/pre` (e.g., `pip install cupy-cuda11x --pre -U -f https://pip.cupy.dev/pre`).\n\n### Conda\n\nBinary packages are also available for Linux and Windows on [Conda-Forge](https://anaconda.org/conda-forge/cupy).\n\n| Platform              | Architecture                | Command                                                       |\n| --------------------- | --------------------------- | ------------------------------------------------------------- |\n| CUDA                  | x86_64 / aarch64 / ppc64le  | `conda install -c conda-forge cupy`                           |\n\nIf you need a slim installation (without also getting CUDA dependencies installed), you can do `conda install -c conda-forge cupy-core`.\n\nIf you need to use a particular CUDA version (say 12.0), you can use the `cuda-version` metapackage to select the version, e.g. `conda install -c conda-forge cupy cuda-version=12.0`.\n\n> [!NOTE]\\\n> If you encounter any problem with CuPy installed from `conda-forge`, please feel free to report to [cupy-feedstock](https://github.com/conda-forge/cupy-feedstock/issues), and we will help investigate if it is just a packaging issue in `conda-forge`'s recipe or a real issue in CuPy.\n\n### Docker\n\nUse [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html) to run [CuPy container images](https://hub.docker.com/r/cupy/cupy).\n\n```\n$ docker run --gpus all -it cupy/cupy\n```\n\n## Resources\n\n- [Installation Guide](https://docs.cupy.dev/en/stable/install.html) - instructions on building from source\n- [Release Notes](https://github.com/cupy/cupy/releases)\n- [Projects using CuPy](https://github.com/cupy/cupy/wiki/Projects-using-CuPy)\n- [Contribution Guide](https://docs.cupy.dev/en/stable/contribution.html)\n- [GPU Acceleration in Python using CuPy and Numba (GTC November 2021 Technical Session)](https://www.nvidia.com/en-us/on-demand/session/gtcfall21-a31149/)\n- [GPU-Acceleration of Signal Processing Workflows using CuPy and cuSignal[^1] (ICASSP'21 Tutorial)](https://github.com/awthomp/cusignal-icassp-tutorial)\n\n[^1]: cuSignal is now part of CuPy starting v13.0.0.\n\n## License\n\nMIT License (see `LICENSE` file).\n\nCuPy is designed based on NumPy's API and SciPy's API (see `docs/source/license.rst` file).\n\nCuPy is being developed and maintained by [Preferred Networks](https://www.preferred.jp/en/) and [community contributors](https://github.com/cupy/cupy/graphs/contributors).\n\n## Reference\n\nRyosuke Okuta, Yuya Unno, Daisuke Nishino, Shohei Hido and Crissman Loomis.\n**CuPy: A NumPy-Compatible Library for NVIDIA GPU Calculations.**\n*Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)*, (2017).\n[[PDF](http://learningsys.org/nips17/assets/papers/paper_16.pdf)]\n\n```bibtex\n@inproceedings{cupy_learningsys2017,\n  author       = \"Okuta, Ryosuke and Unno, Yuya and Nishino, Daisuke and Hido, Shohei and Loomis, Crissman\",\n  title        = \"CuPy: A NumPy-Compatible Library for NVIDIA GPU Calculations\",\n  booktitle    = \"Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)\",\n  year         = \"2017\",\n  url          = \"http://learningsys.org/nips17/assets/papers/paper_16.pdf\"\n}\n```\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.3125,
          "content": "comment: false\ngithub_checks:\n  annotations: false\n\ncoverage:\n  status:\n    # Disable coverage measurement for overall codebase.\n    project: off\n    # Enable coverage measurement for diff introduced in the pull-request,\n    # but do not mark \"X\" on commit status for now.\n    patch:\n      default:\n        target: '0%'\n"
        },
        {
          "name": "cupy",
          "type": "tree",
          "content": null
        },
        {
          "name": "cupy_backends",
          "type": "tree",
          "content": null
        },
        {
          "name": "cupyx",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.6689453125,
          "content": "[metadata]\nlicense_files = docs/source/license.rst\n\n[flake8]  # for autopep8\n# Exclude patterns need to match with absolute/relative file/directory path.\nexclude = *.git*, *.eggs*, *cupy/array_api*, *tests/cupy_tests/array_api_tests*, *docs/source*\nper-file-ignores =\n    # ignore long lines containing arrays of numerical constants\n    cupyx/scipy/special/_gammainc.py:E501\n\n[mypy]\n# Keep in sync with the list in .pre-commit-config.yaml\nfiles = cupy, cupyx, cupy_backends, .github, .pfnci\nignore_missing_imports = True\ndisable_error_code = attr-defined\n\n[tool:pytest]\naddopts = --strict-markers\nmarkers =\n    slow\n    multi_gpu\nfilterwarnings =\n    error::FutureWarning\n    # ignore FutureWarning from cupy._util.experimental\n    ignore:.* is experimental\\.:FutureWarning:cupy\n    ignore::UserWarning\n    error::DeprecationWarning\n    error::PendingDeprecationWarning\n    error::cupy.exceptions.VisibleDeprecationWarning\n    error::cupy.exceptions.ComplexWarning\n    # distutils (Python 3.10)\n    ignore:The distutils(.+) is deprecated:DeprecationWarning\n    ignore:dep_util is Deprecated:DeprecationWarning\n    # pkg_resources\n    ignore::DeprecationWarning:pkg_resources\n    ignore:pkg_resources is deprecated\n    # importing old SciPy is warned because it tries to\n    # import nose via numpy.testing\n    ignore::DeprecationWarning:scipy\\._lib\\._numpy_compat\n    # importing stats from old SciPy is warned because it tries to\n    # import numpy.testing.decorators\n    ignore::DeprecationWarning:scipy\\.stats\\.morestats\n    # Using `scipy.sparse` against NumPy 1.15+ raises warning\n    # as it uses `np.matrix` which is pending deprecation.\n    # Also exclude `numpy.matrixlib.defmatrix` as SciPy and our\n    # test code uses `np.asmatrix`, which internally calls\n    # `np.matrix`.\n    ignore::PendingDeprecationWarning:scipy\\.sparse\\.\\w+\n    ignore::PendingDeprecationWarning:numpy\\.matrixlib\\.defmatrix\n    # pyreadline (dependency from optuna -> cliff -> cmd2) uses deprecated ABCs\n    ignore:Using or importing the ABCs from:DeprecationWarning:pyreadline\n    # Ignore warnings from Optuna 3.0 internal code\n    # TODO(kmaehashi): Remove after the issue is fixed in Optuna.\n    ignore:(.+?) has been deprecated in v3.0.0:FutureWarning:optuna\n    # Ignore warnings from SQLAlchemy on which Optuna depends\n    ignore:Deprecated API features detected! These feature\\(s\\) are not compatible with SQLAlchemy 2\\.0\\.:DeprecationWarning:optuna\n    ignore:(.+?)SQLAlchemy 2\\.0(.+?):DeprecationWarning\n    # setuptools 65+\n    # TODO(kmaehashi): Remove distutils from cupy_builder to remove this\n    ignore:Absolute path '(.+?)' is being replaced with a relative path '(.+?)' for outputs:DeprecationWarning:distutils\nxfail_strict=true\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.2890625,
          "content": "#!/usr/bin/env python\n\nimport glob\nimport os\nfrom setuptools import setup, find_packages\nimport sys\n\nsource_root = os.path.abspath(os.path.dirname(__file__))\nsys.path.append(os.path.join(source_root, 'install'))\n\nimport cupy_builder  # NOQA\nfrom cupy_builder import cupy_setup_build  # NOQA\n\nctx = cupy_builder.Context(source_root)\ncupy_builder.initialize(ctx)\nif not cupy_builder.preflight_check(ctx):\n    sys.exit(1)\n\n\n# TODO(kmaehashi): migrate to pyproject.toml (see #4727, #4619)\nsetup_requires = [\n    'Cython>=0.29.22,<3',\n    'fastrlock>=0.5',\n]\ninstall_requires = [\n    'numpy>=1.24,<2.4',\n    'fastrlock>=0.5',\n]\nextras_require = {\n    'all': [\n        'scipy>=1.10,<1.17',  # see #4773\n        'Cython>=0.29.22,<3',\n        'optuna>=2.0',\n    ],\n    'test': [\n        # 4.2 <= pytest < 6.2 is slow collecting tests and times out on CI.\n        # pytest < 7.2 has some different behavior that makes our CI fail\n        'packaging',\n        'pytest>=7.2',\n        'hypothesis>=6.37.2,<6.55.0',\n        'mpmath'\n    ],\n}\ntests_require = extras_require['test']\n\n\n# List of files that needs to be in the distribution (sdist/wheel).\n# Notes:\n# - Files only needed in sdist should be added to `MANIFEST.in`.\n# - The following glob (`**`) ignores items starting with `.`.\n# - libcudacxx's test files exceed the default path length limit on Windows, so\n#   we have to exclude them so as to avoid asking users to touch the registry.\ncupy_package_data = [\n    'cupy/cuda/cupy_thrust.cu',\n    'cupy/cuda/cupy_cub.cu',\n    'cupy/cuda/cupy_cufftXt.cu',  # for cuFFT callback\n    'cupy/cuda/cupy_cufftXt.h',  # for cuFFT callback\n    'cupy/cuda/cupy_cufft.h',  # for cuFFT callback\n    'cupy/cuda/cufft.pxd',  # for cuFFT callback\n    'cupy/cuda/cufft.pyx',  # for cuFFT callback\n    'cupy/random/cupy_distributions.cu',\n    'cupy/random/cupy_distributions.cuh',\n    'cupyx/scipy/ndimage/cuda/LICENSE',\n    'cupyx/scipy/ndimage/cuda/pba_kernels_2d.h',\n    'cupyx/scipy/ndimage/cuda/pba_kernels_3d.h',\n] + [\n    x for x in glob.glob('cupy/_core/include/cupy/**', recursive=True)\n    if os.path.isfile(x)\n]\n\npackage_data = {\n    'cupy': [\n        os.path.relpath(x, 'cupy') for x in cupy_package_data\n    ],\n}\n\npackage_data['cupy'] += cupy_setup_build.prepare_wheel_libs(ctx)\n\n\nif len(sys.argv) < 2 or sys.argv[1] == 'egg_info':\n    # Extensions are unnecessary for egg_info generation as all sources files\n    # can be enumerated via MANIFEST.in.\n    ext_modules = []\nelse:\n    ext_modules = cupy_setup_build.get_ext_modules(True, ctx)\n\n\n# Get __version__ variable\nwith open(os.path.join(source_root, 'cupy', '_version.py')) as f:\n    exec(f.read())\n\nlong_description = None\nif ctx.long_description_path is not None:\n    with open(ctx.long_description_path) as f:\n        long_description = f.read()\n\n\nCLASSIFIERS = \"\"\"\\\nDevelopment Status :: 5 - Production/Stable\nIntended Audience :: Science/Research\nIntended Audience :: Developers\nLicense :: OSI Approved :: MIT License\nProgramming Language :: Python\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: 3.9\nProgramming Language :: Python :: 3.10\nProgramming Language :: Python :: 3.11\nProgramming Language :: Python :: 3.12\nProgramming Language :: Python :: 3 :: Only\nProgramming Language :: Cython\nTopic :: Software Development\nTopic :: Scientific/Engineering\nOperating System :: POSIX\nOperating System :: Microsoft :: Windows\n\"\"\"\n\n\nsetup(\n    name=ctx.package_name,\n    version=__version__,  # NOQA\n    description='CuPy: NumPy & SciPy for GPU',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author='Seiya Tokui',\n    author_email='tokui@preferred.jp',\n    maintainer='CuPy Developers',\n    url='https://cupy.dev/',\n    license='MIT License',\n    project_urls={\n        \"Bug Tracker\": \"https://github.com/cupy/cupy/issues\",\n        \"Documentation\": \"https://docs.cupy.dev/\",\n        \"Source Code\": \"https://github.com/cupy/cupy\",\n    },\n    classifiers=[_f for _f in CLASSIFIERS.split('\\n') if _f],\n    packages=find_packages(exclude=['install', 'tests']),\n    package_data=package_data,\n    zip_safe=False,\n    python_requires='>=3.9',\n    setup_requires=setup_requires,\n    install_requires=install_requires,\n    tests_require=tests_require,\n    extras_require=extras_require,\n    ext_modules=ext_modules,\n    cmdclass={'build_ext': cupy_builder._command.custom_build_ext},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}