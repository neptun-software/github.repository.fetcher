{
  "metadata": {
    "timestamp": 1736560745611,
    "page": 424,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "joerick/pyinstrument",
      "stars": 6766,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[html_renderer/**]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2421875,
          "content": "# virtualenv\nenv/\nenv2/\nenv3*/\n.Python\n/env\n\n# python\n*.pyc\n__pycache__/\n\n# C extensions\n*.so\n*.pyd\n\n# distribution\ndist/\n*.egg-info/\nbuild\n.eggs\n\n# testing\n.cache\n.pytest_cache\n\n# editor\n*.code-workspace\n.history\n.vscode\n.idea\n\n# docs\ndocs/_build\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.5244140625,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n\n-   repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n    -   id: isort\n        name: isort (python)\n\n-   repo: https://github.com/psf/black\n    rev: 24.4.2\n    hooks:\n    -   id: black\n        language_version: python3\n\n-   repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n    -   id: codespell\n        exclude: \"\\\\.(json)$|docs/_static/preview\"\n        args:\n        -   --ignore-words-list=vas\n\n-   repo: https://github.com/RobertCraigie/pyright-python\n    rev: v1.1.373\n    hooks:\n    -   id: pyright\n        additional_dependencies:\n        -   pytest\n        -   ipython == 8.12.3\n        -   django\n        -   flask\n        -   trio\n        -   flaky\n        -   numpy\n        -   nox\n        -   requests\n        -   greenlet\n        -   types-click\n        -   types-requests\n        -   falcon\n        -   litestar\n\n\n-   repo: local\n    hooks:\n    -   id: build\n        name: build js bundle\n        entry: bin/build_js_bundle.py --force\n        files: html_renderer/.*\n        language: node\n        pass_filenames: false\n\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.17.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py37-plus]\n        stages: [manual]\n        exclude: ^pyinstrument/vendor/\n\nexclude: ^pyinstrument/renderers/html_resources/app.js$|^pyinstrument/vendor\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.1630859375,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nsphinx:\n   configuration: docs/conf.py\n\npython:\n   install:\n   - requirements: requirements-dev.txt\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4697265625,
          "content": "Copyright (c) 2014-2020, Joe Rickerby and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 0.1181640625,
          "content": "# Releasing\n\n```\nbin/bump_version.py\ngit push && git push --tags\n```\n\nDeployment to PyPI is performed in GitHub Actions.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2607421875,
          "content": "prune **\n\ngraft pyinstrument\ngraft test\ngraft bin\ngraft html_renderer\nprune html_renderer/node_modules\nprune html_renderer/dist\n\ninclude LICENSE README.md pyproject.toml setup.py setup.cfg noxfile.py requirements-dev.txt\n\nglobal-exclude __pycache__ *.py[cod] .* dist\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.7578125,
          "content": "pyinstrument\n============\n\n[![PyPI version](https://badge.fury.io/py/pyinstrument.svg)](https://badge.fury.io/py/pyinstrument)\n[![.github/workflows/test.yml](https://github.com/joerick/pyinstrument/actions/workflows/test.yml/badge.svg)](https://github.com/joerick/pyinstrument/actions/workflows/test.yml)\n[![Build wheels](https://github.com/joerick/pyinstrument/actions/workflows/wheels.yml/badge.svg)](https://github.com/joerick/pyinstrument/actions/workflows/wheels.yml)\n\n[Documentation](https://pyinstrument.readthedocs.io/)\n\n<!-- MARK intro start -->\n\n[![Screenshot](https://github.com/joerick/pyinstrument/raw/main/docs/img/screenshot.jpg)](https://github.com/joerick/pyinstrument/raw/main/docs/img/screenshot.jpg)\n\nPyinstrument is a Python profiler. A profiler is a tool to help you optimize\nyour code - make it faster. To get the biggest speed increase you should\n[focus on the slowest part of your program](https://en.wikipedia.org/wiki/Amdahl%27s_law).\nPyinstrument helps you find it!\n\n> ☕️ Not sure where to start? Check out this [video tutorial from calmcode.io](https://calmcode.io/pyinstrument/introduction.html)!\n\n<!-- MARK intro end -->\n\nInstallation\n------------\n\n<!-- MARK installation start -->\n\n    pip install pyinstrument\n\nPyinstrument supports Python 3.8+.\n\n<!-- MARK installation end -->\n\n> To run Pyinstrument from a git checkout, there's a build step.\nTake a look at [Contributing](#contributing) for more info.\n\nDocumentation\n-------------\n\nTo learn how to use pyinstrument, or to check the reference, head to the\n[documentation](https://pyinstrument.readthedocs.io/).\n\nKnown issues\n------------\n\n- Profiling code inside a Docker container can cause some strange results,\n  because the gettimeofday syscall that pyinstrument uses is slow in that\n  environment. See [#83](https://github.com/joerick/pyinstrument/issues/83)\n- When using `pyinstrument script.py` where `script.py` contains a class\n  serialized with `pickle`, you might encounter errors because the\n  serialisation machinery doesn't know where `__main__` is. [See this issue\n  for workarounds](https://github.com/joerick/pyinstrument/issues/109#issuecomment-722276263)\n\nChangelog\n---------\n\n### v5.0.0\n\n_11 October 2024_\n\nLoads of improvements to the HTML renderer!\n\n-   Timeline mode - see and zoom into an interactive linear timeline!\n\n    ![timeline mode](docs/img/timeline.png)\n-   HTML mode now has interactive options, rather than needing to set the upfront.\n-   Streamlined the design of the HTML page header.\n-   HTML Call stack view supports arrow key navigation.\n-   The way ‘library’ code is detected has been changed. Previously, if the string ‘/lib/’ occurred in the file path, that was considered library code (and collapsed by default). Now, pyinstrument captures the paths of the Python install and any active virtualenv/conda env at profile time. Files that are stored there are considered library. That should give fewer false positives.\n-   Calls to profiler.start() can now pass a target_description parameter, which is displayed in the profile readout.\n\nCheck my [blog post](https://joerick.me/posts/2024/10/3/pyinstrument-5/) for more info on the new features.\n\n### v4.7.3\n\n_6 September 2024_\n\n-   Fix a bug introduced in 4.7.0 which would cause the profiler to crash when profiling code with unusual locals, notably some pytest extensions (#332)\n-   Fix a bug that causes pyinstrument to fail to import packages like `glom` on Python 3.12 or later, which mutate the locals() dict. (#336)\n-   Fix a bug that caused a `UnicodeDecodeError` on some platforms (#330)\n-   Fix a DivideByZero error that occurs in some situations\n-   The IPython integration takes greater step to ensure a clean profile output, by ensuring internal frames are trimmed before printing. (#321)\n\n### v4.7.2\n\n_5 August 2024_\n\n-   Add CPython 3.13 wheels\n-   Fix a bug that caused the HTML output to fail to render in some browser contexts (#328)\n\n### v4.7.1\n\n_2 August 2024_\n\n-   Fix issue with PyPI upload\n\n### v4.7.0\n\n_1 August 2024_\n\n-   Adds a new, convenient API for [profiling chunks of Python code](https://pyinstrument.readthedocs.io/en/latest/guide.html#profile-a-specific-chunk-of-code)! You can now profile simply using a `with` block, or a function/method decorator. This will profile the code and print a short readout into the terminal. (#327)\n-   Adds new, lower overhead timing options. Pyinstrument calls timers on every Python function call, which is fine on systems with fast timing available, but it adds significant overhead on systems that require a syscall for each, such as some Docker environments. Pyinstrument will now detect slow timers present a warning with two choices. You can enable a 'timing thread', which offloads the timing workload from the profiled thread, or, if you're happy with lower resolution, you can opt to use a 'coarse' timer, which is provided on some Linux systems. (#273)\n-   Alt-click rows in the HTML output to collapse/expand the whole tree (#325)\n-   Adds a `flat` argument to the console output, to present a flat list of functions (#294)\n-   Adds a Litestar example config and docs (#284)\n-   Preliminary Python 3.13 support (#322)\n\n### v4.6.2\n\n_26 January 2024_\n\n-   Fixes a bug with the pstats renderer, where additional frames could be seen in the output. (#287)\n-   Adds `show_all` option to [Profiler.output_html](https://pyinstrument.readthedocs.io/en/latest/reference.html#pyinstrument.Profiler.output_html)\n\n### v4.6.1\n\n_8 November 2023_\n\n-   Fixes a bug with unwanted variable expansion in the IPython magics `%pyinstrument` (#278)\n\n### v4.6.0\n\n_12 October 2023_\n\n-   Adds a feature `-c`, which allows profiling code directly from the command line, like `python -c`. (#271)\n-   Adds a convenience method [`Profiler.write_html`](https://pyinstrument.readthedocs.io/en/latest/reference.html#pyinstrument.Profiler.write_html), for writing HTML output to a file directly. (#266)\n\n### v4.5.3\n\n_7 September 2023_\n\n-   Fix a problem in the packaging process that prevented upload to PyPI\n\n### v4.5.2\n\n_1 September 2023_\n\n-   Show the program name in the header of the HTML output (#260)\n-   Improve program name capture through resilience to other programs modifying sys.argv (#258)\n-   Add support for Python 3.12 (#246)\n\n### v4.5.1\n\n_22 July 2023_\n\n-   Fix a bug that caused `[X frames hidden]` in the output when frames were deleted due to `__tracebackhide__` (#255)\n-   Fix a bug causing built-in code to display the filepath `None` in the console output (#254)\n-   Some docs improvements (#251)\n\n### v4.5.0\n\n_5 June 2023_\n\n-   Adds a flat mode to the console renderer, which can be enabled by passing `-p flat` on the command line. This mode shows the heaviest frame as measured by self-time, which can be useful in some codebases. (#240)\n-   Adds the ability to save `pstats` files. This is the file format used by cprofile in the stdlib. It's less detailed than pyinstrument profiles, but it's compatible with more tools. (#236)\n-   Fixes a detail of the `--show-all` option - pyinstrument will no longer remove Python-internal frames when this option is supplied. (#239)\n-   Internally to the HTML renderer, it now uses Svelte to render the frontend, meaning profile HTML files bundle less javascript and so are smaller. (#222)\n\n### v4.4.0\n\n_5 November 2022_\n\n-   Adds the class name to methods in the console & HTML outputs (#203)\n-   Fix a bug that caused pyinstrument machinery to appear at the start of a profile (#215)\n-   Frames that set a `__traceback_hide__` local variable will now be removed from the output (#217)\n-   Jupyter/IPython magic now supports async/await, if you run with a `--async_mode=enabled` flag. (#212)\n-   Fix a crash when more than one root frame is captured in a thread - this can happen with gevent.\n-   A big refactor to the backend, allowing more than just static information to be captured. This currently is just powering the class name feature, but more is to come!\n\n### v4.3.0\n\n_21 August 2022_\n\n-   Adds buttons in the HTML output to switch between absolute and\n    proportional (percentage) time.\n-   Adds a command line flag `--interval` (seconds, default 0.001) to change the interval that\n    pyinstrument samples a program. This is useful for long-running programs,\n    where increasing the interval reduces the memory overhead.\n-   Includes wheels for CPython 3.11.\n\n### v4.2.0\n\n-   Adds a command-line option `-p` `--render-option` that allows arbitrary\n    setting of render options. This lets you set options like\n    `filter_threshold` from the command line, by doing something like\n    `pyinstrument -p processor_options.filter_threshold=0`.\n\n    Here's the help output for the option:\n    ```\n      -p RENDER_OPTION, --render-option=RENDER_OPTION\n                        options to pass to the renderer, in the format\n                        'flag_name' or 'option_name=option_value'. For\n                        example, to set the option 'time', pass '-p\n                        time=percent_of_total'. To pass multiple options, use\n                        the -p option multiple times. You can set processor\n                        options using dot-syntax, like '-p\n                        processor_options.filter_threshold=0'. option_value is\n                        parsed as a JSON value or a string.\n    ```\n-   Adds the ability to view times in the console output as percentages,\n    rather than absolute times. Use the ConsoleRenderer option\n    `time='percent_of_total'`, or on the command line, use `-p`, like\n    `pyinstrument -p time=percent_of_total`.\n-   Adds command line options for loading and saving pyinstrument sessions.\n    You can save the raw data for a pyinstrument session with `-r session`,\n    like `pyinstrument -r session -o session.pyisession myscript.py`. Loading\n    is via `--load`, e.g. `pyinstrument --load session.pyisession`.\n-   Command line output format is inferred from the `-o` output file\n    extension. So if you do `pyinstrument -o profile.html myscript.py`, you\n    don't need to supply `-r html`, pyinstrument will automatically use the\n    HTML renderer. Or if you do\n    `pyinstrument -o profile.pyisession myscript.py`, it will save a raw\n    session object.\n-   Adds [usage examples for FastAPI and pytest](https://pyinstrument.readthedocs.io/en/latest/guide.html#profile-a-web-request-in-fastapi) to the documentation.\n-   Fixes a bug causing NotImplementedError when using `async_mode=strict`.\n-   Adds support for Python 3.11\n\n### v4.1.1\n\n-   Fixed an issue causing PYINSTRUMENT_PROFILE_DIR_RENDERER to output the\n    wrong file extension when used with the speedscope renderer.\n\n### v4.1.0\n\n-   You can now use pyinstrument natively in an IPython notebook! Just use\n    `%load_ext pyinstrument` at the top of your notebook, and then\n    `%%pyinstrument` in the cell you want to profile.\n-   Added support for the [speedscope](https://www.speedscope.app/) format.\n    This provides a way to view interactive flamecharts using pyinstrument. To\n    use, profile with `pyinstrument -r speedscope`, and upload to the\n    speedscope web app.\n-   You can now configure renderers for the Django middleware file output,\n    using the `PYINSTRUMENT_PROFILE_DIR_RENDERER` option.\n-   Added wheels for Linux aarch64 (64-bit ARM).\n\n### v4.0.4\n\n-   Fix a packaging issue where a package called 'test' was installed\n    alongside pyinstrument\n-   Use more modern C APIs to resolve deprecation warnings on Python 3.10.\n-   Minor docs fixes\n\n### v4.0.3\n\n-   CPython 3.10 support\n-   Improve error messages when trying to use Profiler from multiple threads\n-   Fix crash when rendering sessions that contain a module in a FrameGroup\n\n### v4.0.2\n\n-   Fix some packaging issues\n\n### v4.0.0\n\n-   Async support! Pyinstrument now detects when an async task hits an await,\n    and tracks time spent outside of the async context under this await.\n\n    So, for example, here's a simple script with an async task that does a\n    sleep:\n\n    ```python\n    import asyncio\n    from pyinstrument import Profiler\n\n    async def main():\n        p = Profiler(async_mode='disabled')\n\n        with p:\n            print('Hello ...')\n            await asyncio.sleep(1)\n            print('... World!')\n\n        p.print()\n\n    asyncio.run(main())\n    ```\n\n    Before Pyinstrument 4.0.0, we'd see only time spent in the run loop, like\n    this:\n\n    ```\n      _     ._   __/__   _ _  _  _ _/_   Recorded: 18:33:03  Samples:  2\n     /_//_/// /_\\ / //_// / //_'/ //     Duration: 1.006     CPU time: 0.001\n    /   _/                      v3.4.2\n\n    Program: examples/async_example_simple.py\n\n    1.006 _run_once  asyncio/base_events.py:1784\n    └─ 1.005 select  selectors.py:553\n          [3 frames hidden]  selectors, <built-in>\n             1.005 kqueue.control  <built-in>:0\n    ```\n\n    Now, with pyinstrument 4.0.0, we get:\n\n          _     ._   __/__   _ _  _  _ _/_   Recorded: 18:30:43  Samples:  2\n         /_//_/// /_\\ / //_// / //_'/ //     Duration: 1.007     CPU time: 0.001\n        /   _/                      v4.0.0\n\n        Program: examples/async_example_simple.py\n\n        1.006 main  async_example_simple.py:4\n        └─ 1.005 sleep  asyncio/tasks.py:641\n              [2 frames hidden]  asyncio\n                 1.005 [await]\n\n    For more information, check out the [async profiling documentation] and\n    the [Profiler.async_mode] property.\n\n-   Pyinstrument has a [documentation site], including full Python API docs!\n\n[async profiling documentation]: https://pyinstrument.readthedocs.io/en/latest/how-it-works.html#async-profiling\n[Profiler.async_mode]: https://pyinstrument.readthedocs.io/en/latest/reference.html#pyinstrument.Profiler.async_mode\n[documentation site]: https://pyinstrument.readthedocs.io\n\n### v3.4.2\n\n- Fix a bug that caused `--show`, `--show-regex`, `--show-all` to be ignored\n  on the command line.\n\n### v3.4.1\n\n- Under-the-hood modernisation\n\n### v3.4.0\n\n- Added `timeline` option (boolean) to Profiler methods `output_html()` and\n  `open_in_browser()`.\n\n### v3.3.0\n\n- Fixed issue with `pyinstrument -m module`, where pyinstrument wouldn't find\n  modules in the current directory.\n- Dropped support for Python 2.7 and 3.5. Old versions will remain available\n  on PyPI, and pip should choose the correct one automatically.\n\n### v3.2.0\n\n- Added the ability to track time in C functions. Minor note - Pyinstrument\n  will record time spent C functions as 'leaf' functions, due to a limitation\n  in how Python records frames. `Python -> C -> Python` is recorded as\n  `Python -> Python`, but `Python -> Python -> C` will be attributed correctly.\n  (#103)\n\n### v3.1.2\n\n- Fix `<__array_function__ internals>` frames appearing as app code in reports\n\n### v3.1.1\n\n- Added support for timeline mode on HTML and JSON renderers\n- Released as a tarball as well as a universal wheel\n\n### v3.1.0\n\n- Added PYINSTRUMENT_SHOW_CALLBACK option on the Django middleware to\n  add a condition to showing the profile (could be used to run pyinstrument\n  on a live server!)\n- Fixed bug in the Django middleware where file would not be written because\n  of a unicode error\n\n### v3.0.3\n\n- Fixed bug with the Django middleware on Windows where profiling would fail\n  because we were trying to put an illegal character '?' in the profile path.\n  (#66)\n\n### v3.0.2\n\n- Add `--show` and `--show-regex` options, to mark certain files to be\n  displayed. This helps to profile inside specific modules, while hiding\n  others. For example, `pyinstrument --show '*/sympy/*' script.py`.\n\n### v3.0.1\n\n- Fix #60: pass all arguments after -m module_name to the called module\n- Fix crash during HTML/JSON output when no frames were captured.\n\n### v3.0.0\n\n- Pyinstrument will now hide traces through libraries that you're using by default. So instead of showing you loads of frames going through the internals of something external e.g. urllib, it lets you focus on your code.\n\n    | Before | After |\n    | --- | ---\n    | ![image](https://user-images.githubusercontent.com/1244307/50928250-1e50db00-1452-11e9-9164-6050a3c950ed.png) | ![image](https://user-images.githubusercontent.com/1244307/50928326-4c361f80-1452-11e9-91e8-cea735584806.png) |\n\n  To go back to the old behaviour, use `--show-all` on the command line.\n\n- 'Entry' frames of hidden groups are shown, so you know which call is the problem\n- Really slow frames in the groups are shown too, e.g. the 'read' call on the socket\n- Application code is highlighted in the console\n- Additional metrics are shown at the top of the trace - timestamp, number of samples, duration, CPU time\n- Hidden code is controlled by the `--hide` or `--hide-regex` options - matching on the path of the code files.\n  ```\n    --hide=EXPR           glob-style pattern matching the file paths whose\n                          frames to hide. Defaults to '*/lib/*'.\n    --hide-regex=REGEX    regex matching the file paths whose frames to hide.\n                          Useful if --hide doesn't give enough control.\n  ```\n\n- Outputting a timeline is supported from the command line.\n\n  ```\n    -t, --timeline        render as a timeline - preserve ordering and don't\n                          condense repeated calls\n  ```\n\n- Because there are a few rendering options now, you can load a previous profiling session using `--load-prev` - pyinstrument keeps the last 10 sessions.\n\n- Hidden groups can also call back into application code, that looks like this:\n\n    ![image](https://user-images.githubusercontent.com/1244307/50928591-fca42380-1452-11e9-8320-3c851cf5210e.png)\n\n- (internal) When recording timelines, frame trees are completely linear now, allowing\n  for the creation of super-accurate frame charts.\n\n- (internal) The HTML renderer has been rewritten as a Vue.js app. All the console improvements apply to the HTML output too, plus it's interactive.\n\n- (internal) A lot of unit and integration tests added!\n\nYikes! See #49 for the gory details. I hope you like it.\n\n### v2.3.0\n\n-   Big refactor!\n    -   `Recorders` have been removed. The frame recording is now internal to the `Profiler` object.\n        This means the 'frame' objects are more general-purpose, which paves the way for...\n    -   Processors! These are functions that mutate the tree to sculpt the output.\n        They are used by the renderers to filter the output to the correct form. Now, instead of\n        a time-aggregating recorder, the profiler just uses timeline-style recording (this is\n        lower-overhead anyway) and the aggregation is done as a processing step.\n    -   The upshot of this is that it's now way easier to alter the tree to filter stuff out, and\n        do more advanced things like combining frames that we don't care about. More features to\n        come that use this in v3.0!\n-   Importlib frames are removed - you won't see them at all. Their children are retained, so\n    imports are just transparent.\n-   Django profile file name is now limited to a hundred of characters (#50)\n-   Fix bug with --html option (#53)\n-   Add `--version` command line option\n\n### v2.2.1\n\n-   Fix crash when using on the command line.\n\n### v2.2.0\n\n-   Added support for JSON output. Use `pyinstrument --renderer=json scriptfile.py`.\n    [PR](https://github.com/joerick/pyinstrument/pull/46)\n-   [@iddan](https://github.com/iddan) has put together an\n    [interactive viewer](https://python-flame-chart.netlify.com/) using the JSON output!\n\n    ![image](https://user-images.githubusercontent.com/1244307/44622790-3ca9a600-a8b8-11e8-8dc2-f33ce433c03d.png)\n\n-   When running `pyinstrument --html` and you don't pipe the output to a file, pyinstrument will write the console output to a temp file and open that in a browser.\n\n### v2.1.0\n\n-   Added support for running modules with pyinstrument via the command line. The new syntax\n    is the `-m` flag e.g. `pyinstrument -m module_name`! [PR](https://github.com/joerick/pyinstrument/pull/45#pullrequestreview-143383557)\n\n### v2.0.4\n\n-   Fix crashes due to multi-threaded use of pyinstrument. The fix is in the C extension,\n    over at https://github.com/joerick/pyinstrument_cext/pull/3\n\n### v2.0.3\n\n-   Pyinstrument can now be used in a `with` block.\n\n    For example:\n\n\t\tprofiler = pyinstrument.Profiler()\n\t\twith profiler:\n\t\t    # do some work here...\n\t\tprint(profiler.output_text())\n-   Middleware fix for older versions of Django\n\n### v2.0.2\n\n-   Fix for max recursion error when used to profile programs with a lot of frames on the stack.\n\n### v2.0.1\n\n-   Ensure license is included in the sdist.\n\n### v2.0.0\n\n-   **Pyinstrument uses a new profiling mode**. Rather than using\n    signals, pyintrument uses a new statistical profiler built on\n    PyEval_SetProfile. This means no more main thread restriction, no more\n    IO errors when using Pyinstrument, and no need for a separate more\n    'setprofile' mode!\n\n-   **Renderers**. Users can customize Pyinstrument to use alternative renderers\n    with the `renderer` argument on `Profiler.output()`, or using the `--renderer`\n    argument on the command line.\n\n-   **Recorders**. To support other use cases of Pyinstrument (e.g. flame charts),\n    pyinstrument now has a 'timeline' recorder mode. This mode records captured\n    frames in a linear way, so the program execution can be viewed on a\n    timeline.\n\n### v0.13\n\n-   `pyinstrument` command. You can now profile python scripts from the shell\n    by running `$ pyinstrument script.py`. This is now equivalent to\n    `python -m pyinstrument`. Thanks @asmeurer!\n\n### v0.12\n\n-   Application code is highlighted in HTML traces to make it easier to spot\n\n-   Added `PYINSTRUMENT_PROFILE_DIR` option to the Django interface, which\n    will log profiles of all requests to a file the specified folder. Useful\n    for profiling API calls.\n\n-   Added `PYINSTRUMENT_USE_SIGNAL` option to the Django interface, for use\n    when signal mode presents problems.\n\nContributing\n------------\n\nTo setup a dev environment:\n\n    virtualenv --python=python3 env\n    . env/bin/activate\n    pip install --upgrade pip\n    pip install -r requirements-dev.txt\n    pre-commit install --install-hooks\n\nTo get some sample output:\n\n    pyinstrument examples/wikipedia_article_word_count.py\n\nTo run the tests:\n\n    pytest\n\nTo run linting checks locally:\n\n    pre-commit run --all-files\n\nSome of the pre-commit checks, like `isort` or `black`, will auto-fix\nthe problems they find. So if the above command returns an error, try\nrunning it again, it might succeed the second time :)\n\nRunning all the checks can be slow, so you can also run checks\nindividually, e.g., to format source code that fails `isort` or `black`\nchecks:\n\n    pre-commit run --all-files isort\n    pre-commit run --all-files black\n\nTo diagnose why `pyright` checks are failing:\n\n    pre-commit run --all-files pyright\n\n### The HTML renderer Vue.js app\n\nThe HTML renderer works by embedding a JSON representation of the sample with\na Javascript 'bundle' inside an HTML file that can be viewed in any web\nbrowser.\n\nTo edit the html renderer style, do:\n\n    cd html_renderer\n    npm ci\n    npm run serve\n\nWhen launched without a top-level `window.profileSession` object, it will\nfetch a sample profile so you can work with it.\n\nTo compile the JS app and bundle it back into the pyinstrument python tool:\n\n    bin/build_js_bundle.py [--force]\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "html_renderer",
          "type": "tree",
          "content": null
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 1.87109375,
          "content": "import os\n\nimport nox\n\nnox.needs_version = \">=2024.4.15\"\nnox.options.default_venv_backend = \"uv|virtualenv\"\n\n\n@nox.session(python=[\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"])\ndef test(session):\n    session.env[\"UV_PRERELEASE\"] = \"allow\"\n    session.install(\"-e\", \".[test]\", \"setuptools\")\n    session.run(\"python\", \"setup.py\", \"build_ext\", \"--inplace\")\n    session.run(\"pytest\")\n\n\n@nox.session()\ndef docs(session):\n    session.env[\"UV_PRERELEASE\"] = \"allow\"\n    session.install(\"-e\", \".[docs]\")\n    session.run(\"make\", \"-C\", \"docs\", \"html\")\n\n\n@nox.session(default=False)\ndef livedocs(session):\n    session.env[\"UV_PRERELEASE\"] = \"allow\"\n    session.install(\"-e\", \".[docs]\")\n    session.run(\"make\", \"-C\", \"docs\", \"livehtml\")\n\n\n@nox.session(default=False, python=False)\ndef htmldev(session):\n    with session.chdir(\"html_renderer\"):\n        session.run(\"npm\", \"install\")\n        session.run(\"npm\", \"run\", \"dev\")\n\n\n@nox.session(default=False, python=False)\ndef watchbuild(session):\n    # this doesn't use nox's environment isolation, because we want to build\n    # the python version of the activated venv\n    # we pass --force because the build_ext command doesn't rebuild if the\n    # headers change\n    session.run(\"python\", \"setup.py\", \"build_ext\", \"--inplace\", \"--force\")\n    session.run(\n        \"pipx\",\n        \"run\",\n        \"--spec\",\n        \"watchdog\",\n        \"watchmedo\",\n        \"shell-command\",\n        \"--patterns=*.h;*.c;setup.py;setup.cfg\",\n        \"--recursive\",\n        \"--command=python setup.py build_ext --inplace --force\",\n        \"pyinstrument\",\n    )\n\n\n@nox.session(python=False, default=False)\ndef watch(session):\n    session.run(\n        \"npx\",\n        \"concurrently\",\n        \"--kill-others\",\n        \"--names\",\n        \"bext,html,docs\",\n        \"--prefix-colors\",\n        \"bgBlue,bgGreen,bgMagenta\",\n        \"nox -s watchbuild\",\n        \"nox -s htmldev\",\n        \"nox -s livedocs\",\n    )\n"
        },
        {
          "name": "pyinstrument",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.29296875,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.black]\nline-length = 100\n\n[tool.pyright]\ninclude = [\"pyinstrument\", \"test\"]\nignore = [\"pyinstrument/vendor\"]\npythonVersion = \"3.8\"\n\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\nline_length = 100\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0341796875,
          "content": "-e .[test,bin,docs,examples,types]\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0546875,
          "content": "[aliases]\ntest = pytest\n\n[tool:pytest]\ntestpaths = test\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.3427734375,
          "content": "import os\nfrom pathlib import Path\n\nfrom setuptools import Extension, find_namespace_packages, setup\n\nPROJECT_ROOT = Path(__file__).parent\nlong_description = (PROJECT_ROOT / \"README.md\").read_text(encoding=\"utf8\")\n\nsetup(\n    name=\"pyinstrument\",\n    packages=find_namespace_packages(include=[\"pyinstrument*\"]),\n    version=\"5.0.0\",\n    ext_modules=[\n        Extension(\n            \"pyinstrument.low_level.stat_profile\",\n            sources=[\n                \"pyinstrument/low_level/stat_profile.c\",\n                \"pyinstrument/low_level/pyi_floatclock.c\",\n                \"pyinstrument/low_level/pyi_timing_thread.c\",\n            ],\n        )\n    ],\n    description=\"Call stack profiler for Python. Shows you why your code is slow!\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Joe Rickerby\",\n    author_email=\"joerick@mac.com\",\n    url=\"https://github.com/joerick/pyinstrument\",\n    keywords=[\"profiling\", \"profile\", \"profiler\", \"cpu\", \"time\", \"sampling\"],\n    install_requires=[],\n    extras_require={\n        \"test\": [\n            \"pytest\",\n            \"flaky\",\n            \"trio\",\n            \"cffi >= 1.17.0\",\n            \"greenlet>=3\",\n            # pinned to an older version due to an incompatibility with flaky\n            \"pytest-asyncio==0.23.8\",\n            \"ipython\",\n        ],\n        \"bin\": [\n            \"click\",\n            \"nox\",\n        ],\n        \"docs\": [\n            \"sphinx==7.4.7\",\n            \"myst-parser==3.0.1\",\n            \"furo==2024.7.18\",\n            \"sphinxcontrib-programoutput==0.17\",\n            \"sphinx-autobuild==2024.4.16\",\n        ],\n        \"examples\": [\n            \"numpy\",\n            \"django\",\n            \"litestar\",\n        ],\n        \"types\": [\n            \"typing_extensions\",\n        ],\n    },\n    include_package_data=True,\n    python_requires=\">=3.8\",\n    entry_points={\"console_scripts\": [\"pyinstrument = pyinstrument.__main__:main\"]},\n    zip_safe=False,\n    classifiers=[\n        \"Environment :: Console\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: MacOS\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX\",\n        \"Topic :: Software Development :: Debuggers\",\n        \"Topic :: Software Development :: Testing\",\n    ],\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}