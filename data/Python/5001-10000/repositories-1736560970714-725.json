{
  "metadata": {
    "timestamp": 1736560970714,
    "page": 725,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mininet/mininet",
      "stars": 5446,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0166015625,
          "content": "*.py diff=python\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.103515625,
          "content": "mnexec\n*.pyc\n*~\n*.1\n*.xcodeproj\n*.xcworkspace\n\\#*\\#\nmininet.egg-info\nbuild\ndist\ndoc/html\ndoc/latex\ntrunk\n\n"
        },
        {
          "name": ".pylint",
          "type": "blob",
          "size": 9.3095703125,
          "content": "# lint Python modules using external checkers.\n#\n# This is the main checker controlling the other ones and the reports\n# generation. It is itself both a raw checker and an astng checker in order\n# to:\n# * handle message activation / deactivation at the module level\n# * handle some basic but necessary stats'data (number of classes, methods...)\n#\n[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Profiled execution.\n#profile=no\n\n# Add <file or directory> to the black list. It should be a base name, not a\n# path. You may set this option multiple times.\nignore=CVS\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n\n[MESSAGES CONTROL]\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once).\n#\n# Note: we may want to re-enable some of these at some point, but many of them\n# are just style issues rather than errors.\n#\ndisable=invalid-name, super-init-not-called, fixme,\n        too-many-instance-attributes, too-few-public-methods,\n        too-many-locals, too-many-public-methods, duplicate-code,\n        locally-disabled,\n        useless-object-inheritance, unnecessary-pass, no-else-return,\n        no-else-raise, no-else-continue, super-with-arguments,\n        consider-using-f-string, unspecified-encoding\n\n# bad-continuation, wrong-import-order\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html\noutput-format=colorized\nmsg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}'\n\n# Include message's id in output\n# include-ids=yes\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\n# files-output=no\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highes\n# note). You have access to the variables errors warning, statement which\n# respectivly contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation repor\n# (R0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Add a comment according to your evaluation note. This is used by the global\n# evaluation report (R0004).\n#comment=no\n\n# Enable the report(s) with the given id(s).\n#enable-report=\n\n# Disable the report(s) with the given id(s).\n#disable-report=\n\n\n# checks for :\n# * doc strings\n# * modules / classes / functions / methods / arguments / variables name\n# * number of arguments, local variables, branchs, returns and statements in\n# functions, methods\n# * required module attributes\n# * dangerous default values as arguments\n# * redefinition of function / method / class\n# * uses of the global statemen\n#\n[BASIC]\n\n# Required attributes for module, separated by a comma\n#required-attributes=\n\n# Regular expression which should only match functions or classes name which do\n# not require a docstring\nno-docstring-rgx=__.*__\n\n# Regular expression which should only match correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression which should only match correct module level names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression which should only match correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression which should only match correct function names\nfunction-rgx=[a-z_][a-z0-9]{2,30}$\n\n# Regular expression which should only match correct method names\nmethod-rgx=[a-z_][a-z0-9]{2,30}$\n\n# Regular expression which should only match correct instance attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression which should only match correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression which should only match correct variable names\nvariable-rgx=[a-z_][a-z0-9]{2,30}$\n\n# Regular expression which should only match correct list comprehension /\n# generator expression variable names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# List of builtins function names that should not be used, separated by a comma\n#bad-functions=map,filter,apply,inpu\n\n\n# try to find bugs in the code using type inference\n#\n[TYPECHECK]\n\n# Tells wether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamicaly set).\nignored-classes=SQLObjec\n\n# When zope mode is activated, add a predefined set of Zope acquired attributes\n# to generated-members.\n#zope=no\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E0201 when accessed.\ngenerated-members=REQUEST,acl_users,aq_paren\n\n\n# checks for\n# * unused variables / imports\n# * undefined variables\n# * redefinition of variable from builtins or from an outer scope\n# * use of variable before assigmen\n#\n[VARIABLES]\n\n# Tells wether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching names used for dummy variables (i.e. not used).\ndummy-variables-rgx=_|dummy\n\n# List of additional names supposed to be defined in builtins. Remember tha\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n\n# checks for :\n# * methods without self as first argumen\n# * overridden methods signature\n# * access only to existant members via self\n# * attributes not defined in the __init__ method\n# * supported interfaces implementation\n# * unreachable code\n#\n[CLASSES]\n\n# List of interface methods to ignore, separated by a comma. This is used for\n# instance to not check methods defines in Zope's Interface base class.\n#ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp,build\n\n\n# checks for sign of poor/misdesign:\n# * number of methods, attributes, local variables...\n# * size, complexity of functions, methods\n#\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\n#max-branchs=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n\n# checks for\n# * external modules dependencies\n# * relative / wildcard imports\n# * cyclic imports\n# * uses of deprecated modules\n#\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,string,TERMIOS,Bastion,rexec\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report R0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report R0402 mus\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report R0402 mus\n# not be disabled)\nint-import-graph=\n\n\n# checks for :\n# * unauthorized constructions\n# * strict indentation\n# * line length\n# * use of <> instead of !=\n#\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n\n# Maximum number of lines in a module\n# XXX 1500 -> 4000 for miniedit.py\nmax-module-lines=4000\n\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n\n# checks for:\n# * warning notes in the code like FIXME, XXX\n# * PEP 263: source code with non ascii character but no encoding declaration\n#\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n# checks for similarities and duplicated code. This computation may be\n# memory / CPU intensive, so you should disable it if you experiments some\n# problems.\n#\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.3037109375,
          "content": "Mininet Contributors\n\nMininet is an open source project and we gratefully acknowledge\nthe many contributions to the project! If you have contributed\ncode into the project and are not on this list, please let us know\nor send a pull request.\n\nContributors include:\n\nMininet Core Team (and alumni)\n\nBob Lantz\nBrandon Heller\nNikhil Handigol\nVimal Jeyakumar\nBrian O'Connor\nCody Burkard\n\nAdditional Mininet Contributors\n\nJoseph Beshay\nM S Vishwanath Bhat\nMuhammad Umair Bhatti\nArie Bregman\nTomasz Buchert\nFernando Cappi\nHW Chiu\nRyan Cox\nShaun Crampton\nJason Croft\nHantao Cui\nNirmoy Das\nLenoardo D'avila\nGiuseppe Di Lena\nDavid Erickson\nJuan Gascon\nGlen Gibb\nAndrew Ferguson\nEder Leao Fernandes\nJulian Filter\nBen Frankel\nTim Gates\nGregory Gee\nJon Hall\nRoan Huang\nVitaly Ivanov\nTheo Jepsen\nMathieu Jadin\nBabis Kaidos\nRich Lane\nRémy Léone\nXiaozhou Li\nZi Shen Lim\nDavid Mahler\nFelix Maurer\nMurphy McCauley\nAlex Moijes\nFelician Nemeth\nJosé Pedro Oliveira\nJames Page\nGustavo Pantuza Coelho Pinto\nRamon Pujianto\nStempha Reiter\nDamien Saucez\nShan Sikdar\nAngad Singh\nPiyush Srivastava\nEd Swierk\nDarshan Thaker\nOlivier Tl]ilmans\nNiels van Adrichem\nBrad Walker\nAndreas Wundsam\nVikas Yadav\nIsaku Yamahata\nBaohua Yang\nZhuo\n\nThanks also to everyone who has submitted issues and pull\nrequests on github, and to our friendly mininet-discuss\nmailing list!\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 6.4443359375,
          "content": "\nMininet Installation/Configuration Notes\n----------------------------------------\n\nMininet 2.3.1b4\n---\n\nThe supported installation methods for Mininet are 1) using a\npre-built VM image, and 2) native installation on Ubuntu. You can also\neasily create your own Mininet VM image (4).\n\n(Other distributions may be supported in the future - if you would\nlike to contribute an installation script, we would welcome it!)\n\n1. Easiest \"installation\" - use our pre-built VM image!\n\n   The easiest way to get Mininet running is to start with one of our\n   pre-built virtual machine images from <http://mininet.org/>\n\n   Boot up the VM image, log in, and follow the instructions on the\n   Mininet web site.\n\n   One advantage of using the VM image is that it doesn't mess with\n   your native OS installation or damage it in any way.\n\n   Although a single Mininet instance can simulate multiple networks\n   with multiple controllers, only one Mininet instance may currently\n   be run at a time, and Mininet requires root access in the machine\n   it's running on.  Therefore, if you have a multiuser system, you\n   may wish to consider running Mininet in a VM.\n\n2. Next-easiest option: use our Ubuntu package!\n\n   To install Mininet itself (i.e. `mn` and the Python API) on Ubuntu\n   16.04+:\n\n        sudo apt-get install mininet\n\n   Note: this may install an older version of Mininet which may not\n   support Python 3. If you would like the latest version of Mininet,\n   consider installing from source as described in the next section.\n\n3. Native installation from source\n\n   If you are running Ubuntu, Debian, or Fedora, you may be able to use\n   our handy `install.sh` script, which is in `util/`. Please read the\n   following sections first.\n\n3.1. Obtaining the Mininet source code\n\n   If you're reading this, you've probably already done so, but the\n   command to download the Mininet source code is:\n\n        git clone https://github.com/mininet/mininet.git\n\n   Note that the above git command will check out the latest and greatest\n   Mininet (which we recommend!) If you want to run the last\n   tagged/released version of Mininet, you can look at the release tags\n   using\n\n        cd mininet\n        git tag\n\n    and then\n\n        git checkout <release tag>\n\n   where <release tag> is the release you want to check out.\n\n3.1.1 *CAUTION: USE AT YOUR OWN RISK!*\n\n   `install.sh` can be a bit intrusive and may possibly damage your OS\n   and/or home directory, by creating/modifying several directories\n   such as `mininet`, `openflow`, `oftest`, `pox`, etc.. We recommend\n   trying it in a VM before trying it on a system you use from day to\n   day.\n\n   Although we hope it won't do anything completely terrible, you may\n   want to look at the script before you run it, and you should make\n   sure your system and home directory are backed up just in case!\n\n   You can change the directory where the dependencies are installed\n   using the -s <directory> flag.\n\n        util/install.sh -s <directory> ...\n\n3.1.2 Running `install.sh`\n\n   Installing a \"minimal\" version of Mininet with Open vSwitch should\n   be reasonably non-perturbing since it should not create directories\n   for other tools:\n\n       util/install.sh -nv\n\n   Note this will not install a controller, so you will have to either\n   install your own controller, or use a switch such OVSBridge that does\n   not require a controller:\n\n       sudo mn --switch ovsbr --test pingall\n\n   To install Mininet itself, the OpenFlow reference controller, and\n   Open vSwitch, you may use:\n\n        util/install.sh -fnv\n\n   This should be reasonably quick, and the following command should\n   work after the installation:\n\n        sudo mn --test pingall\n\n3.1.3 Python 3 and Python 2 support\n\n   Mininet supports Python 3 and Python 2. By default, `install.sh`\n   will use whatever `python` is on your system.  To specify a\n   specific version of Python, you can set the PYTHON environment\n   variable:\n\n       PYTHON=python3 util/install.sh -fnv\n\n   You can install Mininet for both Python 3 and Python 2:\n\n       PYTHON=python2 util/install.sh -fnv\n       PYTHON=python3 util/install.sh -n\n\n   Whichever version was installed last will be the default for `mn`.\n   As long as Mininet is installed for the appropriate version of\n   Python, you can run it using that version of Python:\n\n       python3 `which mn`\n       python2 `which mn`\n\n   To install ALL of the software which we use for OpenFlow tutorials,\n   including POX, the OpenFlow WireShark dissector, the `oftest`\n   framework, and other potentially useful software, you may use:\n\n        util/install.sh -a\n\n   This takes about 4 minutes on our test system.\n\n3.2. (Experimental) Native installation from source on Fedora:\n\n   As root execute the following operations:\n\n    * install git\n\n        yum install git\n\n    * clone the Mininet repository\n\n        git clone https://github.com/mininet/mininet.git\n\n    * install Mininet, the OpenFlow reference implementation, and\n      Open vSwitch\n\n        util/install.sh -fnv\n\n    * enable and start openvswitch\n\n        sudo systemctl enable openvswitch\n        sudo systemctl start openvswitch\n\n    * test the mininet installation\n\n        sudo mn --test pingall\n\n    Note that `install.sh -fnv `may not install all dependencies on Fedora,\n    and many tests may still fail.\n\n4. Creating your own Mininet/OpenFlow tutorial VM on Ubuntu/Debian\n\n   Creating your own Ubuntu Mininet VM for use with the OpenFlow tutorial\n   is easy! First, create a new Ubuntu VM. Next, run two commands in it:\n\n        wget https://raw.github.com/mininet/mininet/master/util/vm/install-mininet-vm.sh\n        time install-mininet-vm.sh\n\n   Finally, verify that Mininet is installed and working in the VM:\n\n        sudo mn --test pingall\n\n5. Installation on other Linux distributions\n\n   Although we don't support other Linux distributions directly, it\n   should be possible to install and run Mininet with some degree of\n   manual effort. People have even gotten `mn --switch user` to run\n   in a ChromeOS container.\n\n   In general, you must have:\n\n   * A Linux kernel compiled with network namespace support enabled\n\n   * An compatible software switch such as Open vSwitch or\n     the Linux bridge.\n\n   * Python, `bash`, `ping`, `iperf`, etc.\n\n   * Root privileges (required for network device access)\n\n   We encourage contribution of patches to the `install.sh` script to\n   support other Linux distributions.\n\n\nAs always, please feel free to submit issues or pull requests for\ninstallation-related features.\n\nGood luck, and have fun!\n\nMininet Developers\n\n---\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.6357421875,
          "content": "BSD 3-Clause License (original Mininet authors: Bob Lantz and Brandon Heller)\n\nCopyright (c) 2013-2022 Open Networking Foundation\nCopyright (c) 2009-2012 Bob Lantz and The Board of Trustees of The Leland Stanford Junior University\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.1298828125,
          "content": "MININET = mininet/*.py\nTEST = mininet/test/*.py\nEXAMPLES = mininet/examples/*.py\nMN = bin/mn\nPYTHON ?= python\nPYMN = $(PYTHON) -B bin/mn\nBIN = $(MN)\nPYSRC = $(MININET) $(TEST) $(EXAMPLES) $(BIN)\nMNEXEC = mnexec\nMANPAGES = mn.1 mnexec.1\nP8IGN = E251,E201,E302,E202,E126,E127,E203,E226,E402,W504,W503,E731\nPREFIX ?= /usr\nBINDIR ?= $(PREFIX)/bin\nMANDIR ?= $(PREFIX)/share/man/man1\nDOCDIRS = doc/html doc/latex\nPDF = doc/latex/refman.pdf\nCC ?= cc\n\nCFLAGS += -Wall -Wextra\n\nall: codecheck test\n\nclean:\n\trm -rf build dist *.egg-info *.pyc $(MNEXEC) $(MANPAGES) $(DOCDIRS)\n\ncodecheck: $(PYSRC)\n\t-echo \"Running code check\"\n\tutil/versioncheck.py\n\tpyflakes3 $(PYSRC) || pyflakes $(PYSRC)\n\tpylint --rcfile=.pylint $(PYSRC)\n#\tExclude miniedit from pep8 checking for now\n\tpep8 --repeat --ignore=$(P8IGN) `ls $(PYSRC) | grep -v miniedit.py`\n\nerrcheck: $(PYSRC)\n\t-echo \"Running check for errors only\"\n\tpyflakes3 $(PYSRC) || pyflakes $(PYSRC)\n\tpylint -E --rcfile=.pylint $(PYSRC)\n\ntest: $(MININET) $(TEST)\n\t-echo \"Running tests\"\n\tmininet/test/test_nets.py\n\tmininet/test/test_hifi.py\n\nslowtest: $(MININET)\n\t-echo \"Running slower tests (walkthrough, examples)\"\n\tmininet/test/test_walkthrough.py -v\n\tmininet/examples/test/runner.py -v\n\nmnexec: mnexec.c $(MN) mininet/net.py\n\t$(CC) $(CFLAGS) $(LDFLAGS) \\\n\t-DVERSION=\\\"`PYTHONPATH=. $(PYMN) --version 2>&1`\\\" $< -o $@\n\ninstall-mnexec: $(MNEXEC)\n\tinstall -D $(MNEXEC) $(BINDIR)/$(MNEXEC)\n\ninstall-manpages: $(MANPAGES)\n\tinstall -D -t $(MANDIR) $(MANPAGES)\n\ninstall: install-mnexec install-manpages\n#\tThis seems to work on all pip versions\n\t$(PYTHON) -m pip uninstall -y mininet || true\n\t$(PYTHON) -m pip install .\n\ndevelop: $(MNEXEC) $(MANPAGES)\n# \tPerhaps we should link these as well\n\tinstall $(MNEXEC) $(BINDIR)\n\tinstall $(MANPAGES) $(MANDIR)\n\t$(PYTHON) -m pip uninstall -y mininet || true\n\t$(PYTHON) -m pip install -e . --no-binary :all:\n\nman: $(MANPAGES)\n\nmn.1: $(MN)\n\tPYTHONPATH=. help2man -N -n \"create a Mininet network.\" \\\n\t--no-discard-stderr \"$(PYMN)\" -o $@\n\nmnexec.1: mnexec\n\thelp2man -N -n \"execution utility for Mininet.\" \\\n\t-h \"-h\" -v \"-v\" --no-discard-stderr ./$< -o $@\n\n.PHONY: doc\n\ndoc: man\n\tdoxygen doc/doxygen.cfg\n\tmake -C doc/latex\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.580078125,
          "content": "Mininet: Rapid Prototyping for Software Defined Networks\n========================================================\n*The best way to emulate almost any network on your laptop!*\n\nMininet 2.3.1b4\n\n[![Build Status][1]](https://github.com/mininet/mininet/actions)\n\n\n### What is Mininet?\n\nMininet emulates a complete network of hosts, links, and switches\non a single machine.  To create a sample two-host, one-switch network,\njust run:\n\n  `sudo mn`\n\nMininet is useful for interactive development, testing, and demos,\nespecially those using OpenFlow and SDN.  OpenFlow-based network\ncontrollers prototyped in Mininet can usually be transferred to\nhardware with minimal changes for full line-rate execution.\n\n### How does it work?\n\nMininet creates virtual networks using process-based virtualization\nand network namespaces - features that are available in recent Linux\nkernels.  In Mininet, hosts are emulated as `bash` processes running in\na network namespace, so any code that would normally run on a Linux\nserver (like a web server or client program) should run just fine\nwithin a Mininet \"Host\".  The Mininet \"Host\" will have its own private\nnetwork interface and can only see its own processes.  Switches in\nMininet are software-based switches like Open vSwitch or the OpenFlow\nreference switch.  Links are virtual ethernet pairs, which live in the\nLinux kernel and connect our emulated switches to emulated hosts\n(processes).\n\n### Features\n\nMininet includes:\n\n* A command-line launcher (`mn`) to instantiate networks.\n\n* A handy Python API for creating networks of varying sizes and\n  topologies.\n\n* Examples (in the `examples/` directory) to help you get started.\n\n* Full API documentation via Python `help()` docstrings, as well as\n  the ability to generate PDF/HTML documentation with `make doc`.\n\n* Parametrized topologies (`Topo` subclasses) using the Mininet\n  object.  For example, a tree network may be created with the\n  command:\n\n  `mn --topo tree,depth=2,fanout=3`\n\n* A command-line interface (`CLI` class) which provides useful\n  diagnostic commands (like `iperf` and `ping`), as well as the\n  ability to run a command to a node. For example,\n\n  `mininet> h11 ifconfig -a`\n\n  tells host h11 to run the command `ifconfig -a`\n\n* A \"cleanup\" command to get rid of junk (interfaces, processes, files\n  in /tmp, etc.) which might be left around by Mininet or Linux. Try\n  this if things stop working!\n\n  `mn -c`\n\n### Python 3 Support\n\n- Mininet 2.3.1b4 supports Python 3 and Python 2\n\n- You can install both the Python 3 and Python 2 versions of\nMininet side by side, but the most recent installation will\ndetermine which Python version is used by default by `mn`.\n\n- You can run `mn` directly with Python 2 or Python 3,\n  as long as the appropriate version of Mininet is installed,\n  e.g.\n\n      $ sudo python2 `which mn`\n\n- More information regarding Python 3 and Python 2 support\n  may be found in the release notes on http://docs.mininet.org.\n\n### Other Enhancements and Information\n\n- Support for Ubuntu 22.04 LTS (and 20.04)\n\n- More reliable testing and CI via github actions\n\n- Preliminary support for cgroups v2 (and v1)\n\n- Minor bug fixes (2.3.1)\n\n- Additional information about this release and previous releases\n  may be found in the release notes on http://docs.mininet.org.\n\n### Installation\n\nSee `INSTALL` for installation instructions and details.\n\n### Documentation\n\nIn addition to the API documentation (`make doc`), much useful\ninformation, including a Mininet walkthrough and an introduction\nto the Python API, is available on the\n[Mininet Web Site](http://mininet.org).\nThere is also a wiki which you are encouraged to read and to\ncontribute to, particularly the Frequently Asked Questions\n(FAQ) at http://faq.mininet.org.\n\n### Support\n\nMininet is community-supported. We encourage you to join the\nMininet mailing list, `mininet-discuss` at:\n\n<https://mailman.stanford.edu/mailman/listinfo/mininet-discuss>\n\n### Join Us\n\nThanks again to all of the Mininet contributors and users!\n\nMininet is an open source project and is currently hosted\nat <https://github.com/mininet>. You are encouraged to download,\nexamine, and modify the code, and to submit bug reports, bug fixes,\nfeature requests, new features, and other issues and pull requests.\nThanks to everyone who has contributed code to the Mininet project\n(see CONTRIBUTORS for more info!) It is because of everyone's\nhard work that Mininet continues to grow and improve.\n\n### Enjoy Mininet\n\nHave fun! We look forward to seeing what you will do with Mininet\nto change the networking world.\n\nBob Lantz,\non behalf of the Mininet Contributors\n\n[1]: https://github.com/mininet/mininet/workflows/mininet-tests/badge.svg\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "custom",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mininet",
          "type": "tree",
          "content": null
        },
        {
          "name": "mnexec.c",
          "type": "blob",
          "size": 6.236328125,
          "content": "/* mnexec: execution utility for mininet\n *\n * Starts up programs and does things that are slow or\n * difficult in Python, including:\n *\n *  - closing all file descriptors except stdin/out/error\n *  - detaching from a controlling tty using setsid\n *  - running in network and mount namespaces\n *  - printing out the pid of a process so we can identify it later\n *  - attaching to a namespace and cgroup\n *  - setting RT scheduling\n *\n * Partially based on public domain setsid(1)\n*/\n\n#define _GNU_SOURCE\n#include <stdio.h>\n#include <linux/sched.h>\n#include <unistd.h>\n#include <limits.h>\n#include <syscall.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <sched.h>\n#include <ctype.h>\n#include <sys/mount.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <dirent.h>\n\n#if !defined(VERSION)\n#define VERSION \"(devel)\"\n#endif\n\nvoid usage(char *name)\n{\n    printf(\"Execution utility for Mininet\\n\\n\"\n           \"Usage: %s [-cdnp] [-a pid] [-g group] [-r rtprio] cmd args...\\n\\n\"\n           \"Options:\\n\"\n           \"  -c: close all file descriptors except stdin/out/error\\n\"\n           \"  -d: detach from tty by calling setsid()\\n\"\n           \"  -n: run in new network and mount namespaces\\n\"\n           \"  -p: print ^A + pid\\n\"\n           \"  -a pid: attach to pid's network and mount namespaces\\n\"\n           \"  -g group: add to cgroup\\n\"\n           \"  -r rtprio: run with SCHED_RR (usually requires -g)\\n\"\n           \"  -v: print version\\n\",\n           name);\n}\n\n\nint setns(int fd, int nstype)\n{\n    return syscall(__NR_setns, fd, nstype);\n}\n\n/* Validate alphanumeric path foo1/bar2/baz */\nvoid validate(char *path)\n{\n    char *s;\n    for (s=path; *s; s++) {\n        if (!isalnum(*s) && *s != '/') {\n            fprintf(stderr, \"invalid path: %s\\n\", path);\n            exit(1);\n        }\n    }\n}\n\n/* Add our pid to cgroup */\nvoid cgroup(char *gname)\n{\n    static char path[PATH_MAX];\n    static char *groups[] = {\n        \"cpu\", \"cpuacct\", \"cpuset\", NULL\n    };\n    char **gptr;\n    pid_t pid = getpid();\n    int count = 0;\n    validate(gname);\n    for (gptr = groups; *gptr; gptr++) {\n        FILE *f;\n        snprintf(path, PATH_MAX, \"/sys/fs/cgroup/%s/%s/tasks\",\n                 *gptr, gname);\n        f = fopen(path, \"w\");\n        if (f) {\n            count++;\n            fprintf(f, \"%d\\n\", pid);\n            fclose(f);\n        }\n    }\n    if (!count) {\n        fprintf(stderr, \"cgroup: could not add to cgroup %s\\n\",\n            gname);\n        exit(1);\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    int c;\n    int fd;\n    DIR *dir;\n    struct dirent *de;\n    char path[PATH_MAX];\n    int nsid;\n    int pid;\n    char *cwd = get_current_dir_name();\n    static struct sched_param sp;\n\n    while ((c = getopt(argc, argv, \"+cdnpa:g:r:vh\")) != -1)\n        switch(c) {\n        case 'c':\n            /* close file descriptors except stdin/out/error */\n            if ((dir = opendir(\"/proc/self/fd\"))) {\n                while ((de = readdir(dir)))\n                    if ((fd = atoi(de->d_name)) > 2)\n                        close(fd);\n            }\n            /* fall back to old method if needed */\n            else for (fd = getdtablesize(); fd > 2; fd--)\n                     close(fd);\n            break;\n        case 'd':\n            /* detach from tty */\n            if (getpgrp() == getpid()) {\n                switch(fork()) {\n                    case -1:\n                        perror(\"fork\");\n                        return 1;\n                    case 0:     /* child */\n                        break;\n                    default:    /* parent */\n                        return 0;\n                }\n            }\n            setsid();\n            break;\n        case 'n':\n            /* run in network and mount namespaces */\n            if (unshare(CLONE_NEWNET|CLONE_NEWNS) == -1) {\n                perror(\"unshare\");\n                return 1;\n            }\n\n            /* Mark our whole hierarchy recursively as private, so that our\n             * mounts do not propagate to other processes.\n             */\n\n            if (mount(\"none\", \"/\", NULL, MS_REC|MS_PRIVATE, NULL) == -1) {\n                perror(\"remount\");\n                return 1;\n            }\n\n            /* mount sysfs to pick up the new network namespace */\n            if (mount(\"sysfs\", \"/sys\", \"sysfs\", MS_MGC_VAL, NULL) == -1) {\n                perror(\"mount\");\n                return 1;\n            }\n            break;\n        case 'p':\n            /* print pid */\n            printf(\"\\001%d\\n\", getpid());\n            fflush(stdout);\n            break;\n        case 'a':\n            /* Attach to pid's network namespace and mount namespace */\n            pid = atoi(optarg);\n            sprintf(path, \"/proc/%d/ns/net\", pid);\n            nsid = open(path, O_RDONLY);\n            if (nsid < 0) {\n                perror(path);\n                return 1;\n            }\n            if (setns(nsid, 0) != 0) {\n                perror(\"setns\");\n                return 1;\n            }\n            /* Plan A: call setns() to attach to mount namespace */\n            sprintf(path, \"/proc/%d/ns/mnt\", pid);\n            nsid = open(path, O_RDONLY);\n            if (nsid < 0 || setns(nsid, 0) != 0) {\n                /* Plan B: chroot/chdir into pid's root file system */\n                sprintf(path, \"/proc/%d/root\", pid);\n                if (chroot(path) < 0) {\n                    perror(path);\n                    return 1;\n                }\n            }\n            /* chdir to correct working directory */\n            if (chdir(cwd) != 0) {\n                perror(cwd);\n                return 1;\n            }\n            break;\n        case 'g':\n            /* Attach to cgroup */\n            cgroup(optarg);\n            break;\n        case 'r':\n            /* Set RT scheduling priority */\n            sp.sched_priority = atoi(optarg);\n            if (sched_setscheduler(getpid(), SCHED_RR, &sp) < 0) {\n                perror(\"sched_setscheduler\");\n                return 1;\n            }\n            break;\n        case 'v':\n            printf(\"%s\\n\", VERSION);\n            exit(0);\n        case 'h':\n            usage(argv[0]);\n            exit(0);\n        default:\n            usage(argv[0]);\n            exit(1);\n        }\n\n    if (optind < argc) {\n        execvp(argv[optind], &argv[optind]);\n        perror(argv[optind]);\n        return 1;\n    }\n\n    usage(argv[0]);\n\n    return 0;\n}\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.173828125,
          "content": "#!/usr/bin/env python\n\n\"Setuptools params\"\n\nfrom setuptools import setup\nfrom os.path import join\n\n# Get version number from source tree\nimport sys\nsys.path.append( '.' )\nfrom mininet.net import VERSION\n\nscripts = [ join( 'bin', filename ) for filename in [ 'mn' ] ]\n\nmodname = distname = 'mininet'\n\nsetup(\n    name=distname,\n    version=VERSION,\n    description='Process-based OpenFlow emulator',\n    author='Bob Lantz',\n    author_email='rlantz@cs.stanford.edu',\n    packages=[ 'mininet', 'mininet.examples' ],\n    long_description=\"\"\"\n        Mininet is a network emulator which uses lightweight\n        virtualization to create virtual networks for rapid\n        prototyping of Software-Defined Network (SDN) designs\n        using OpenFlow. http://mininet.org\n        \"\"\",\n    classifiers=[\n          \"License :: OSI Approved :: BSD License\",\n          \"Programming Language :: Python\",\n          \"Development Status :: 5 - Production/Stable\",\n          \"Intended Audience :: Developers\",\n          \"Topic :: System :: Emulators\",\n    ],\n    keywords='networking emulator protocol Internet OpenFlow SDN',\n    license='BSD',\n    install_requires=[\n        'setuptools'\n    ],\n    scripts=scripts,\n)\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}