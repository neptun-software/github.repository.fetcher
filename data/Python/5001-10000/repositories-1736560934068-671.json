{
  "metadata": {
    "timestamp": 1736560934068,
    "page": 671,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deepchem/deepchem",
      "stars": 5654,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.751953125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\nAUTHORS\nChangeLog\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IDE files\n.idea\n*.iml\n\n# Vim swap\n*.swp\n\n# Weights & Biases\nwandb/\n\n# Dataset files\ndatasets/2008-2011_USPTO_reactionSmiles_filtered.zip\ndatasets/2008-2011_USPTO_reactionSmiles_filtered/\ndatasets/autodock_vina_1_1_2_mac_catalina_64bit/\ndatasets/chembl_25-featurized/\ndatasets/chembl_25.csv.gz\ndatasets/delaney-featurized/  \ndatasets/from-pdbbind/\ndatasets/kinase/\ndatasets/pdbbind/\ndatasets/pdbbind_v2015.tar.gz\ndatasets/qm7-featurized/ \ndatasets/qm7.csv\ndatasets/qm7.mat\ndatasets/sider-featurized/\ndatasets/sider.csv.gz\ndatasets/sweet-featurized/\ndatasets/sweet.csv.gz\ndatasets/tox21-featurized/\ndatasets/toxcast-featurized/\ndatasets/toxcast_data.csv.gz\ndatasets/gdb8.tar.gz\ndatasets/qm8-featurized/\ndatasets/qm8.sdf\ndatasets/qm8.sdf.csv\ndatasets/PDBbind_2019_plain_text_index.tar.gz\ndatasets/pdbbind_v2019_NL.tar.gz\ndatasets/pdbbind_v2019_PN.tar.gz\ndatasets/pdbbind_v2019_PP.tar.gz\ndatasets/pdbbind_v2019_other_PL.tar.gz\ndatasets/pdbbind_v2019_refined.tar.gz\ndatasets/qm8.csv\n\n.vscode/\nenv.yml\n.python-version\n**/*.ipynb_checkpoints/\n\n.database/"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5458984375,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.4.0\n    hooks:\n      - id: check-merge-conflict\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n\n-   repo: https://github.com/pre-commit/mirrors-yapf\n    rev: v0.32.0\n    hooks:\n    -   id: yapf\n\n-   repo: https://github.com/PyCQA/flake8\n    rev: 3.8.4\n    hooks:\n    -   id: flake8\n        args: [--count]\n\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v0.790\n    hooks:\n    -   id: mypy\n        args: [--ignore-missing-imports]\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.529296875,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.9\"\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".yapfignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "#no need to format .npy files\n*.npy\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at rbharath@stanford.edu. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.0888671875,
          "content": "# Table of Contents\n\n<!-- toc -->\n- [Contributing to Deepchem](#contributing-to-deepchem)\n  - [Getting Started](#getting-started)\n  - [Pull Request Process](#pull-request-process)\n  - [Coding Conventions](#coding-conventions)\n  - [Documentation Conventions](#documentation-conventions)\n- [The Agreement](#the-agreement)\n- [Deepchem Technical Steering Committee](#deepchem-technical-steering-committee)\n<!-- tocstop -->\n\n## Contributing to DeepChem\n\nWe actively encourage community contributions to DeepChem. The first\nplace to start getting involved is\n[the tutorials](https://deepchem.readthedocs.io/en/latest/get_started/tutorials.html).\nAfterwards, we encourage contributors to give a shot to improving our documentation.\nWhile we take effort to provide good docs, there's plenty of room\nfor improvement. All docs are hosted on Github, either in `README.md`\nfile, or in the `docs/` directory.\n\nOnce you've got a sense of how the package works, we encourage the use\nof Github issues to discuss more complex changes, raise requests for\nnew features or propose changes to the global architecture of DeepChem.\nOnce consensus is reached on the issue, please submit a PR with proposed\nmodifications. All contributed code to DeepChem will be reviewed by a member\nof the DeepChem team, so please make sure your code style and documentation\nstyle match our guidelines!\n\n### Getting Started\n\nTo develop DeepChem on your machine, we recommend using Anaconda for managing\npackages. If you want to manage multiple builds of DeepChem, you can make use of\n[conda environments](https://conda.io/projects/conda/en/latest/user-guide/concepts/environments.html)\nto maintain seperate Python package environments, each of which can be tied\nto a specific build of DeepChem. Here are some tips to get started:\n\n1. Fork the [DeepChem](https://github.com/deepchem/deepchem/) repository\nand clone the forked repository\n\n```bash\ngit clone https://github.com/YOUR-USERNAME/deepchem.git\ncd deepchem\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; 1.1. If you already have DeepChem from source, update it by running\n```bash\ngit fetch upstream\ngit rebase upstream/master\n```\n\n2. Set up a new conda environment for DeepChem\n\n```bash\nconda create -n deepchem python=3.8\nconda activate deepchem\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; 2.1. DeepChem provides backend support for deep\nlearning using tensorflow, pytorch or jax. By default, the deep learning frameworks\ngets installed in CPU. If GPU support is required, make sure CUDA is installed\nand then install the desired deep learning framework before installing DeepChem:\n- [tensorflow](https://www.tensorflow.org/install)\n- [pytorch](https://pytorch.org/get-started/locally/#start-locally)\n- [jax](https://github.com/google/jax#installation)\n\n3. Install DeepChem in `develop` mode\n\n```bash\npython setup.py develop\n```\n\nThis mode will symlink the Python files from current local source tree into\nthe Python install. Hence, if you modify a Python file, you do not need to\nreinstall DeepChem again and again.\n\nIn case you need to reinstall, uninstall DeepChem first by running\n`pip uninstall deepchem` until you see `Warning: Skipping deepchem\nas it is not installed`; run `python setup.py clean` and install in `develop` mode again.\n\nSome other tips:\n- Every contribution must pass the unit tests. Some tests are\n[marked](https://docs.pytest.org/en/6.2.x/example/markers.html) with custom\nmarkers like `@pytest.mark.tensorflow`. This helps mainly in two ways: 1) restricting the tests only\nto the part of code marked with the marker 2) giving\n[flexibility](https://docs.pytest.org/en/6.2.x/example/markers.html) in running\nthe unit tests depending on the environment.\n- DeepChem has a number of soft requirements which can be found [here](https://deepchem.readthedocs.io/en/latest/get_started/requirements.html).\n- If a commit is simple and doesn't affect any code (keep in mind that some\ndocstrings contain code that is used in tests), you can add `[skip ci]`\n(case sensitive) somewhere in your commit message to [skip all build /\ntest steps](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/). Note that changing the pull request body or title on GitHub itself has no effect.\n\n\n### Pull Request Process\n\nEvery contribution, must be a pull request and must have adequate time for\nreview by other committers.\n\nA member of the Technical Steering Committee will review the pull request.\nThe default path of every contribution should be to merge. The discussion,\nreview, and merge process should be designed as corrections that move the\ncontribution into the path to merge. Once there are no more corrections,\n(dissent) changes should merge without further process.\n\nOn successful merge the author will be added as a member of the DeepChem organization.\n\n### Coding Conventions\n\nDeepChem uses these tools or styles for keeping our codes healthy.\n\n- [YAPF](https://github.com/google/yapf) (code format)\n- [Flake8](https://flake8.pycqa.org/en/latest/) (code style check)\n- [mypy](http://mypy-lang.org/) (type check)\n- [doctest](https://docs.python.org/3/library/doctest.html) (interactive examples)\n- [pytest](https://docs.pytest.org/en/6.2.x/index.html) (unit testing)\n\nBefore making a PR, please check your codes using them.\nYou can confirm how to check your codes from [Coding Conventions](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html).\n\n### Document Conventions\n\nDeepChem uses [Sphinx](https://www.sphinx-doc.org/en/master/) to build\n[the document](https://deepchem.readthedocs.io/en/latest/index.html).\nThe document is automatically built by\n[Numpy style docstrings](https://numpydoc.readthedocs.io/en/latest/format.html#numpydoc-docstring-guide)\nin source codes and [Napoleon extension](http://www.sphinx-doc.org/en/stable/ext/napoleon.html).\nFor any changes or modification to source code in a PR, please don't forget to add or modify Numpy style docstrings.\n\n## The Agreement\n\nContributor offers to license certain software (a “Contribution” or multiple\n“Contributions”) to DeepChem, and DeepChem agrees to accept said Contributions,\nunder the terms of the open source license [The MIT License](https://opensource.org/licenses/MIT)\n\nThe Contributor understands and agrees that DeepChem shall have the\nirrevocable and perpetual right to make and distribute copies of any Contribution, as\nwell as to create and distribute collective works and derivative works of any Contribution,\nunder [The MIT License](https://opensource.org/licenses/MIT).\n\nDeepChem understands and agrees that Contributor retains copyright in its Contributions.\nNothing in this Contributor Agreement shall be interpreted to prohibit Contributor\nfrom licensing its Contributions under different terms from the\n[The MIT License](https://opensource.org/licenses/MIT) or this Contributor Agreement.\n\n## DeepChem Technical Steering Committee\n\nThe Technical Steering Committee admits and oversees all top-level of DeepChem.\n\nThe TSC exercises autonomy in setting up and maintaining procedures, policies,\nand management and administrative structures as it deems appropriate for the\nmaintenance and operation of these projects and resources.\n\nIncluded in the responsibilities of the TSC are:\n\n* Managing code and documentation creation and changes for the listed projects and resources\n* Performing code reviews on incoming pull requests and merging suitable code changes.\n* Setting and maintaining standards covering contributions of code, documentation and other materials\n* Managing code and binary releases: types, schedules, frequency, delivery mechanisms\n* Making decisions regarding dependencies of DeepChem, including what those\ndependencies are and how they are bundled with source code and releases\n* Creating new repositories and projects under the deepchem GitHub organization as required\n* Setting overall technical direction for the DeepChem project, including \nhigh-level goals and low-level specifics regarding features and functionality\n* Setting and maintaining appropriate standards for community discourse via the various\nmediums under TSC control (gitter, facebook, blog)\n\nMembers of the TSC will meet regularly (over phone or video conferencing)\nto coordinate efforts. Minutes from the TSC meetings will be published publicly on an ongoing basis.\nThe current members of the TSC are (alphabetically)\n* Peter Eastman\n* Karl Leswing\n* Bharath Ramsundar\n* Zhenqin Wu\n\nIf you want to join the technical steering committee, you will need to\nsubmit an application. The application process is relatively lightweight: submit\na one page document discussing your past contributions to DeepChem and\npropose potential projects you could commit to working on as a member of the\nsteering committee. Note that steering committee membership comes with responsibilities.\nIn particular, you will need to commit to spending about 10 hours a\nweek working on DeepChem. The committee will review your application, and\nif suitable, will accept you as a probationary member of the TSC. Your\napplication will be posted publicly to the DeepChem blog if accepted. Membership\non the committee will be confirmed after 6 months if you’ve successfully\nimplemented some of your proposed projects and demonstrated your ability\nto meet the necessary time commitment.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0224609375,
          "content": "Copyright 2017 PandeLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.166015625,
          "content": "﻿# DeepChem\r\n\r\n[![Anaconda-Server Badge](https://anaconda.org/conda-forge/deepchem/badges/version.svg)](https://anaconda.org/conda-forge/deepchem)\r\n[![PyPI version](https://badge.fury.io/py/deepchem.svg)](https://pypi.org/project/deepchem/)\r\n[![Documentation Status](https://readthedocs.org/projects/deepchem/badge/?version=latest)](https://deepchem.readthedocs.io/en/latest/?badge=latest)  \r\n[![Test for DeepChem Core](https://github.com/deepchem/deepchem/workflows/Test%20for%20DeepChem%20Core/badge.svg)](https://github.com/deepchem/deepchem/actions?query=workflow%3A%22Test+for+DeepChem+Core%22)\r\n[![Test for documents](https://github.com/deepchem/deepchem/workflows/Test%20for%20documents/badge.svg)](https://github.com/deepchem/deepchem/actions?query=workflow%3A%22Test+for+documents%22)\r\n[![Test for build scripts](https://github.com/deepchem/deepchem/workflows/Test%20for%20build%20scripts/badge.svg)](https://github.com/deepchem/deepchem/actions?query=workflow%3A%22Test+for+build+scripts%22)\r\n[![codecov](https://codecov.io/gh/deepchem/deepchem/branch/master/graph/badge.svg?token=5rOZB2BY3h)](https://codecov.io/gh/deepchem/deepchem)  \r\n\r\n[Website](https://deepchem.io/) | [Documentation](https://deepchem.readthedocs.io/en/latest/) | [Colab Tutorial](https://github.com/deepchem/deepchem/tree/master/examples/tutorials) | [Discussion Forum](https://forum.deepchem.io/) | [Discord](https://discord.gg/cGzwCdrUqS) | [Model Wishlist](https://github.com/deepchem/deepchem/issues/2680) | [Tutorial Wishlist](https://github.com/deepchem/deepchem/issues/2907)\r\n\r\nDeepChem aims to provide a high quality open-source toolchain\r\nthat democratizes the use of deep-learning in drug discovery,\r\nmaterials science, quantum chemistry, and biology.\r\n\r\n### Table of contents:\r\n\r\n- [Requirements](#requirements)\r\n- [Installation](#installation)\r\n  - [Stable version](#stable-version)\r\n  - [Nightly build version](#nightly-build-version)\r\n  - [Docker](#docker)\r\n  - [From source](#from-source)\r\n  - [From source lightweight](#from-source-lightweight)\r\n- [Getting Started](#getting-started)\r\n  - [Discord](#discord)\r\n- [About Us](#about-us)\r\n- [Contributing to DeepChem](/CONTRIBUTING.md)\r\n- [Citing DeepChem](#citing-deepchem)\r\n\r\n## Requirements\r\n\r\nDeepChem currently supports Python 3.7 through 3.10 and requires these packages on any condition.\r\n\r\n- [joblib](https://pypi.python.org/pypi/joblib)\r\n- [NumPy](https://numpy.org/)\r\n- [pandas](http://pandas.pydata.org/)\r\n- [scikit-learn](https://scikit-learn.org/stable/)\r\n- [SciPy](https://www.scipy.org/)\r\n- [rdkit](https://www.rdkit.org/)\r\n\r\n### Soft Requirements\r\n\r\nDeepChem has a number of \"soft\" requirements.\r\nIf you face some errors like `ImportError: This class requires XXXX`, you may need to install some packages.\r\n\r\nPlease check [the document](https://deepchem.readthedocs.io/en/latest/requirements.html#soft-requirements) about soft requirements.\r\n\r\n## Installation\r\n\r\n### Stable version\r\n\r\nDeepChem stable version can be installed using pip or conda as\r\n\r\n```bash\r\npip install deepchem\r\n```\r\nor \r\n```\r\nconda install -c conda-forge deepchem\r\n```\r\n\r\nDeepchem provides support for tensorflow, pytorch, jax and each require\r\na individual pip Installation.\r\n\r\nFor using models with tensorflow dependencies, you install using\r\n\r\n```bash\r\npip install deepchem[tensorflow]\r\n```\r\nFor using models with torch dependencies, you install using\r\n\r\n```bash\r\npip install deepchem[torch]\r\n```\r\nFor using models with jax dependencies, you install using\r\n\r\n```bash\r\npip install deepchem[jax]\r\n```\r\nIf GPU support is required, then make sure CUDA is installed and then install the desired deep learning framework using the links below before installing deepchem\r\n\r\n1. tensorflow - just cuda installed\r\n2. pytorch - https://pytorch.org/get-started/locally/#start-locally\r\n3. jax - https://github.com/google/jax#pip-installation-gpu-cuda\r\n\r\nIn `zsh` square brackets are used for globbing/pattern matching. This means you\r\nneed to escape the square brackets in the above installation. You can do so\r\nby including the dependencies in quotes like `pip install --pre 'deepchem[jax]'`\r\n\r\n### Nightly build version\r\nThe nightly version is built by the HEAD of DeepChem. It can be installed using\r\n\r\n```bash\r\npip install --pre deepchem\r\n```\r\n\r\n### Docker\r\n\r\nIf you want to install deepchem using a docker, you can pull two kinds of images.  \r\nDockerHub : https://hub.docker.com/repository/docker/deepchemio/deepchem\r\n\r\n- `deepchemio/deepchem:x.x.x`\r\n  - Image built by using a conda (x.x.x is a version of deepchem)\r\n  - The x.x.x image is built when we push x.x.x. tag\r\n  - Dockerfile is put in `docker/tag` directory\r\n- `deepchemio/deepchem:latest`\r\n  - Image built from source codes\r\n  - The latest image is built every time we commit to the master branch\r\n  - Dockerfile is put in `docker/nightly` directory\r\n\r\nYou pull the image like this.\r\n\r\n```bash\r\ndocker pull deepchemio/deepchem:2.4.0\r\n```\r\n\r\nIf you want to know docker usages with deepchem in more detail, please check [the document](https://deepchem.readthedocs.io/en/latest/installation.html#docker).\r\n\r\n### From source\r\n\r\nIf you try install all soft dependencies at once or contribute to deepchem, we recommend you should install deepchem from source.\r\n\r\nPlease check [this introduction](https://deepchem.readthedocs.io/en/latest/installation.html#from-source-with-conda).\r\n\r\n## Getting Started\r\n\r\nThe DeepChem project maintains an extensive collection of [tutorials](https://github.com/deepchem/deepchem/tree/master/examples/tutorials). All tutorials are designed to be run on Google colab (or locally if you prefer). Tutorials are arranged in a suggested learning sequence which will take you from beginner to proficient at molecular machine learning and computational biology more broadly.\r\n\r\nAfter working through the tutorials, you can also go through other [examples](https://github.com/deepchem/deepchem/tree/master/examples). To apply `deepchem` to a new problem, try starting from one of the existing examples or tutorials and modifying it step by step to work with your new use-case. If you have questions or comments you can raise them on our [gitter](https://gitter.im/deepchem/Lobby).\r\n\r\n### Supported Integrations\r\n\r\n- [Weights & Biases](https://docs.wandb.ai/guides/integrations/other/deepchem): Track your DeepChem model's training and evaluation metrics.\r\n\r\n### Discord\r\n\r\nThe DeepChem [Discord](https://discord.gg/cGzwCdrUqS) hosts a number of scientists, developers, and enthusiasts interested in deep learning for the life sciences. Probably the easiest place to ask simple questions or float requests for new features.\r\n\r\n## About Us\r\n\r\nDeepChem is managed by a team of open source contributors. Anyone is free to join and contribute!\r\n\r\n## Citing DeepChem\r\n\r\nIf you have used DeepChem in the course of your research, we ask that you cite the \"Deep Learning for the Life Sciences\" book by the DeepChem core team.\r\n\r\nTo cite this book, please use this bibtex entry:\r\n\r\n```\r\n@book{Ramsundar-et-al-2019,\r\n    title={Deep Learning for the Life Sciences},\r\n    author={Bharath Ramsundar and Peter Eastman and Patrick Walters and Vijay Pande and Karl Leswing and Zhenqin Wu},\r\n    publisher={O'Reilly Media},\r\n    note={\\url{https://www.amazon.com/Deep-Learning-Life-Sciences-Microscopy/dp/1492039837}},\r\n    year={2019}\r\n}\r\n```\r\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "datasets",
          "type": "tree",
          "content": null
        },
        {
          "name": "deepchem",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.326171875,
          "content": "[tool:pytest]\nmarkers =\n    jax: marks tests for deepchem-jax only (deselect with '-m \"not jax\"')\n    torch: marks tests for deepchem-torch only (deselect with '-m \"not torch\"')\n    tensorflow: marks tests for deepchem-torch only (deselect with '-m \"not tensorflow\"')\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    serial\n    dqc: marks tests for deepchem-dqc only (deselect with '-m \"not dqc\"')\n[mypy]\nignore_missing_imports = True\n\n[mypy-yaml.*]\nignore_missing_imports = True\n\n[flake8]\nignore =\n    # Indentation is not a multiple of four\n    E111,\n    # Indentation is not a multiple of four (comment)\n    E114,\n    # continuation line under-indented for hanging indent\n    E121,\n    # Closing bracket does not match visual indentation\n    E124,\n    # continuation line over-indented for hanging indent\n    E126,\n    # Continuation line with same indent as next logical line\n    E125,\n    # Continuation line over-indented for visual indent\n    E127,\n    # Visually indented line with same indent as next logical line\n    E129,\n    # the backslash is redundant between bracket\n    E502,\n    # Line break before binary operator\n    W503,\n    # Line break after binary operator\n    W504,\n    # invalid escape sequence\n    W605,\n    # do not user bare except\n    E722\nmax-line-length = 300\n\n[yapf]\nbased_on_style = google\nindent_width = 4\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.6923828125,
          "content": "import sys\nimport time\nfrom setuptools import setup, find_packages\n\nif '--release' in sys.argv:\n    IS_RELEASE = True\n    sys.argv.remove('--release')\nelse:\n    # Build a nightly package by default.\n    IS_RELEASE = False\n\n# Environment-specific dependencies.\nextras = {\n    'jax': ['jax', 'jaxlib', 'dm-haiku', 'optax'],\n    'torch': ['torch==2.2.1', 'torchvision', 'pytorch-lightning', 'dgl<2.2.1', 'dgllife'],\n    'tensorflow': ['tensorflow', 'tensorflow_probability', 'tensorflow_addons'],\n    'dqc': ['dqc', 'xitorch', 'torch==2.2.1', 'pylibxc2']\n}\n\n\n# get the version from deepchem/__init__.py\ndef _get_version():\n    with open('deepchem/__init__.py') as fp:\n        for line in fp:\n            if line.startswith('__version__'):\n                g = {}\n                exec(line, g)\n                base = g['__version__']\n                if IS_RELEASE:\n                    return base\n                else:\n                    # nightly version : .devYearMonthDayHourMinute\n                    if base.endswith('.dev') is False:\n                        # Force to add `.dev` if `--release` option isn't passed when building\n                        base += '.dev'\n                    return base + time.strftime(\"%Y%m%d%H%M%S\")\n\n        raise ValueError('`__version__` not defined in `deepchem/__init__.py`')\n\n\nsetup(name='deepchem',\n      version=_get_version(),\n      url='https://github.com/deepchem/deepchem',\n      maintainer='DeepChem contributors',\n      classifiers=[\n          'Development Status :: 4 - Beta',\n          'Environment :: Console',\n          'Intended Audience :: Developers',\n          'Intended Audience :: Information Technology',\n          'License :: OSI Approved :: MIT License',\n          'Operating System :: OS Independent',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: 3.9',\n          'Programming Language :: Python :: 3.10',\n          'Programming Language :: Python :: 3.11',\n      ],\n      license='MIT',\n      description='Deep learning models for drug discovery, \\\n        quantum chemistry, and the life sciences.',\n      keywords=[\n          'deepchem',\n          'chemistry',\n          'biology',\n          'materials-science',\n          'life-science',\n          'drug-discovery',\n      ],\n      packages=find_packages(exclude=[\"*.tests\"]),\n      project_urls={\n          'Documentation': 'https://deepchem.readthedocs.io/en/latest/',\n          'Source': 'https://github.com/deepchem/deepchem',\n      },\n      install_requires=[\n          'joblib',\n          'numpy<2',\n          'pandas',\n          'scikit-learn',\n          'sympy',\n          'scipy>=1.10.1',\n          'rdkit',\n      ],\n      extras_require=extras,\n      python_requires='>=3.7,<3.12')\n"
        }
      ]
    }
  ]
}