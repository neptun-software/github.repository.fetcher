{
  "metadata": {
    "timestamp": 1736560518217,
    "page": 113,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arrow-py/arrow",
      "stars": 8766,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.607421875,
          "content": "README.rst.new\n\n# Small entry point file for debugging tasks\ntest.py\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nlocal/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n.idea/\n.vscode/\n\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.6123046875,
          "content": "default_language_version:\n  python: python3\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: check-ast\n      - id: check-yaml\n      - id: check-case-conflict\n      - id: check-docstring-first\n      - id: check-merge-conflict\n      - id: check-builtin-literals\n      - id: debug-statements\n      - id: end-of-file-fixer\n      - id: fix-encoding-pragma\n        args: [--remove]\n      - id: requirements-txt-fixer\n        args: [requirements/requirements.txt, requirements/requirements-docs.txt, requirements/requirements-tests.txt]\n      - id: trailing-whitespace\n  - repo: https://github.com/timothycrosley/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.16.0\n    hooks:\n      - id: pyupgrade\n        args: [--py36-plus]\n  - repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n      - id: python-no-eval\n      - id: python-check-blanket-noqa\n      - id: python-check-mock-methods\n      - id: python-use-type-annotations\n      - id: rst-backticks\n      - id: rst-directive-colons\n      - id: rst-inline-touching-normal\n      - id: text-unicode-replacement-char\n  - repo: https://github.com/psf/black\n    rev: 23.9.1\n    hooks:\n      - id: black\n        args: [--safe, --quiet, --target-version=py36]\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.1.0\n    hooks:\n      - id: flake8\n        additional_dependencies: [flake8-bugbear,flake8-annotations]\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.10.0\n    hooks:\n      - id: mypy\n        additional_dependencies: [types-python-dateutil]\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.8427734375,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#    - pdf\n#    - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n  - requirements: requirements/requirements-docs.txt\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 32.1748046875,
          "content": "Changelog\n=========\n\n1.3.0 (2023-09-30)\n------------------\n\n- [ADDED] Added official support for Python 3.11 and 3.12.\n- [ADDED] Added dependency on ``types-python-dateutil`` to improve Arrow mypy compatibility. `PR #1102 <https://github.com/arrow-py/arrow/pull/1102>`_\n- [FIX] Updates to Italian, Romansh, Hungarian, Finish and Arabic locales.\n- [FIX] Handling parsing of UTC prefix in timezone strings.\n- [CHANGED] Update documentation to improve readability.\n- [CHANGED] Dropped support for Python 3.6 and 3.7, which are end-of-life.\n- [INTERNAL] Migrate from ``setup.py``/Twine to ``pyproject.toml``/Flit for packaging and distribution.\n- [INTERNAL] Adopt ``.readthedocs.yaml`` configuration file for continued ReadTheDocs support.\n\n1.2.3 (2022-06-25)\n------------------\n\n- [NEW] Added Amharic, Armenian, Georgian, Laotian and Uzbek locales.\n- [FIX] Updated Danish locale and associated tests.\n- [INTERNAL] Small fixes to CI.\n\n1.2.2 (2022-01-19)\n------------------\n\n- [NEW] Added Kazakh locale.\n- [FIX] The Belarusian, Bulgarian, Czech, Macedonian, Polish, Russian, Slovak and Ukrainian locales now support ``dehumanize``.\n- [FIX] Minor bug fixes and improvements to ChineseCN, Indonesian, Norwegian, and Russian locales.\n- [FIX] Expanded testing for multiple locales.\n- [INTERNAL] Started using ``xelatex`` for pdf generation in documentation.\n- [INTERNAL] Split requirements file into ``requirements.txt``, ``requirements-docs.txt`` and ``requirements-tests.txt``.\n- [INTERNAL] Added ``flake8-annotations`` package for type linting in ``pre-commit``.\n\n1.2.1 (2021-10-24)\n------------------\n\n- [NEW] Added quarter granularity to humanize, for example:\n\n.. code-block:: python\n\n    >>> import arrow\n    >>> now = arrow.now()\n    >>> four_month_shift = now.shift(months=4)\n    >>> now.humanize(four_month_shift, granularity=\"quarter\")\n    'a quarter ago'\n    >>> four_month_shift.humanize(now, granularity=\"quarter\")\n    'in a quarter'\n    >>> thirteen_month_shift = now.shift(months=13)\n    >>> thirteen_month_shift.humanize(now, granularity=\"quarter\")\n    'in 4 quarters'\n    >>> now.humanize(thirteen_month_shift, granularity=\"quarter\")\n    '4 quarters ago'\n\n- [NEW] Added Sinhala and Urdu locales.\n- [NEW] Added official support for Python 3.10.\n- [CHANGED] Updated Azerbaijani, Hebrew, and Serbian locales and added tests.\n- [CHANGED] Passing an empty granularity list to ``humanize`` now raises a ``ValueError``.\n\n1.2.0 (2021-09-12)\n------------------\n\n- [NEW] Added Albanian, Tamil and Zulu locales.\n- [NEW] Added support for ``Decimal`` as input to ``arrow.get()``.\n- [FIX] The Estonian, Finnish, Nepali and Zulu locales now support ``dehumanize``.\n- [FIX] Improved validation checks when using parser tokens ``A`` and ``hh``.\n- [FIX] Minor bug fixes to Catalan, Cantonese, Greek and Nepali locales.\n\n1.1.1 (2021-06-24)\n------------------\n\n- [NEW] Added Odia, Maltese, Serbian, Sami, and Luxembourgish locales.\n- [FIXED] All calls to ``arrow.get()`` should now properly pass the ``tzinfo`` argument to the Arrow constructor. See PR `#968 <https://github.com/arrow-py/arrow/pull/968/>`_ for more info.\n- [FIXED] Humanize output is now properly truncated when a locale class overrides ``_format_timeframe()``.\n- [CHANGED] Renamed ``requirements.txt`` to ``requirements-dev.txt`` to prevent confusion with the dependencies in ``setup.py``.\n- [CHANGED] Updated Turkish locale and added tests.\n\n1.1.0 (2021-04-26)\n------------------\n\n- [NEW] Implemented the ``dehumanize`` method for ``Arrow`` objects. This takes human readable input and uses it to perform relative time shifts, for example:\n\n.. code-block:: python\n\n    >>> arw\n    <Arrow [2021-04-26T21:06:14.256803+00:00]>\n    >>> arw.dehumanize(\"8 hours ago\")\n    <Arrow [2021-04-26T13:06:14.256803+00:00]>\n    >>> arw.dehumanize(\"in 4 days\")\n    <Arrow [2021-04-30T21:06:14.256803+00:00]>\n    >>> arw.dehumanize(\"in an hour 34 minutes 10 seconds\")\n    <Arrow [2021-04-26T22:40:24.256803+00:00]>\n    >>> arw.dehumanize(\"hace 2 años\", locale=\"es\")\n    <Arrow [2019-04-26T21:06:14.256803+00:00]>\n\n- [NEW] Made the start of the week adjustable when using ``span(\"week\")``, for example:\n\n.. code-block:: python\n\n    >>> arw\n    <Arrow [2021-04-26T21:06:14.256803+00:00]>\n    >>> arw.isoweekday()\n    1 # Monday\n    >>> arw.span(\"week\")\n    (<Arrow [2021-04-26T00:00:00+00:00]>, <Arrow [2021-05-02T23:59:59.999999+00:00]>)\n    >>> arw.span(\"week\", week_start=4)\n    (<Arrow [2021-04-22T00:00:00+00:00]>, <Arrow [2021-04-28T23:59:59.999999+00:00]>)\n\n- [NEW] Added Croatian, Latin, Latvian, Lithuanian and Malay locales.\n- [FIX] Internally standardize locales and improve locale validation. Locales should now use the ISO notation of a dash (``\"en-gb\"``) rather than an underscore (``\"en_gb\"``) however this change is backward compatible.\n- [FIX] Correct type checking for internal locale mapping by using ``_init_subclass``. This now allows subclassing of locales, for example:\n\n.. code-block:: python\n\n    >>> from arrow.locales import EnglishLocale\n    >>> class Klingon(EnglishLocale):\n    ...     names = [\"tlh\"]\n    ...\n    >>> from arrow import locales\n    >>> locales.get_locale(\"tlh\")\n    <__main__.Klingon object at 0x7f7cd1effd30>\n\n- [FIX] Correct type checking for ``arrow.get(2021, 3, 9)`` construction.\n- [FIX] Audited all docstrings for style, typos and outdated info.\n\n1.0.3 (2021-03-05)\n------------------\n\n- [FIX] Updated internals to avoid issues when running ``mypy --strict``.\n- [FIX] Corrections to Swedish locale.\n- [INTERNAL] Lowered required coverage limit until ``humanize`` month tests are fixed.\n\n1.0.2 (2021-02-28)\n------------------\n\n- [FIXED] Fixed an ``OverflowError`` that could occur when running Arrow on a 32-bit OS.\n\n1.0.1 (2021-02-27)\n------------------\n\n- [FIXED] A ``py.typed`` file is now bundled with the Arrow package to conform to PEP 561.\n\n1.0.0 (2021-02-26)\n------------------\n\nAfter 8 years we're pleased to announce Arrow v1.0. Thanks to the entire Python community for helping make Arrow the amazing package it is today!\n\n- [CHANGE] Arrow has **dropped support** for Python 2.7 and 3.5.\n- [CHANGE] There are multiple **breaking changes** with this release, please see the `migration guide <https://github.com/arrow-py/arrow/issues/832>`_ for a complete overview.\n- [CHANGE] Arrow is now following `semantic versioning <https://semver.org/>`_.\n- [CHANGE] Made ``humanize`` granularity=\"auto\" limits more accurate to reduce strange results.\n- [NEW] Added support for Python 3.9.\n- [NEW] Added a new keyword argument \"exact\" to ``span``, ``span_range`` and ``interval`` methods. This makes timespans begin at the start time given and not extend beyond the end time given, for example:\n\n.. code-block:: python\n\n    >>> start = Arrow(2021, 2, 5, 12, 30)\n    >>> end = Arrow(2021, 2, 5, 17, 15)\n    >>> for r in arrow.Arrow.span_range('hour', start, end, exact=True):\n    ...     print(r)\n    ...\n    (<Arrow [2021-02-05T12:30:00+00:00]>, <Arrow [2021-02-05T13:29:59.999999+00:00]>)\n    (<Arrow [2021-02-05T13:30:00+00:00]>, <Arrow [2021-02-05T14:29:59.999999+00:00]>)\n    (<Arrow [2021-02-05T14:30:00+00:00]>, <Arrow [2021-02-05T15:29:59.999999+00:00]>)\n    (<Arrow [2021-02-05T15:30:00+00:00]>, <Arrow [2021-02-05T16:29:59.999999+00:00]>)\n    (<Arrow [2021-02-05T16:30:00+00:00]>, <Arrow [2021-02-05T17:14:59.999999+00:00]>)\n\n- [NEW] Arrow now natively supports PEP 484-style type annotations.\n- [FIX] Fixed handling of maximum permitted timestamp on Windows systems.\n- [FIX] Corrections to French, German, Japanese and Norwegian locales.\n- [INTERNAL] Raise more appropriate errors when string parsing fails to match.\n\n0.17.0 (2020-10-2)\n-------------------\n\n- [WARN] Arrow will **drop support** for Python 2.7 and 3.5 in the upcoming 1.0.0 release. This is the last major release to support Python 2.7 and Python 3.5.\n- [NEW] Arrow now properly handles imaginary datetimes during DST shifts. For example:\n\n.. code-block:: python\n\n    >>> just_before = arrow.get(2013, 3, 31, 1, 55, tzinfo=\"Europe/Paris\")\n    >>> just_before.shift(minutes=+10)\n    <Arrow [2013-03-31T03:05:00+02:00]>\n\n.. code-block:: python\n\n    >>> before = arrow.get(\"2018-03-10 23:00:00\", \"YYYY-MM-DD HH:mm:ss\", tzinfo=\"US/Pacific\")\n    >>> after = arrow.get(\"2018-03-11 04:00:00\", \"YYYY-MM-DD HH:mm:ss\", tzinfo=\"US/Pacific\")\n    >>> result=[(t, t.to(\"utc\")) for t in arrow.Arrow.range(\"hour\", before, after)]\n    >>> for r in result:\n    ...     print(r)\n    ...\n    (<Arrow [2018-03-10T23:00:00-08:00]>, <Arrow [2018-03-11T07:00:00+00:00]>)\n    (<Arrow [2018-03-11T00:00:00-08:00]>, <Arrow [2018-03-11T08:00:00+00:00]>)\n    (<Arrow [2018-03-11T01:00:00-08:00]>, <Arrow [2018-03-11T09:00:00+00:00]>)\n    (<Arrow [2018-03-11T03:00:00-07:00]>, <Arrow [2018-03-11T10:00:00+00:00]>)\n    (<Arrow [2018-03-11T04:00:00-07:00]>, <Arrow [2018-03-11T11:00:00+00:00]>)\n\n- [NEW] Added ``humanize`` week granularity translation for Tagalog.\n- [CHANGE] Calls to the ``timestamp`` property now emit a ``DeprecationWarning``. In a future release, ``timestamp`` will be changed to a method to align with Python's datetime module. If you would like to continue using the property, please change your code to use the ``int_timestamp`` or ``float_timestamp`` properties instead.\n- [CHANGE] Expanded and improved Catalan locale.\n- [FIX] Fixed a bug that caused ``Arrow.range()`` to incorrectly cut off ranges in certain scenarios when using month, quarter, or year endings.\n- [FIX] Fixed a bug that caused day of week token parsing to be case sensitive.\n- [INTERNAL] A number of functions were reordered in arrow.py for better organization and grouping of related methods. This change will have no impact on usage.\n- [INTERNAL] A minimum tox version is now enforced for compatibility reasons. Contributors must use tox >3.18.0 going forward.\n\n0.16.0 (2020-08-23)\n-------------------\n\n- [WARN] Arrow will **drop support** for Python 2.7 and 3.5 in the upcoming 1.0.0 release. The 0.16.x and 0.17.x releases are the last to support Python 2.7 and 3.5.\n- [NEW] Implemented `PEP 495 <https://www.python.org/dev/peps/pep-0495/>`_ to handle ambiguous datetimes. This is achieved by the addition of the ``fold`` attribute for Arrow objects. For example:\n\n.. code-block:: python\n\n    >>> before = Arrow(2017, 10, 29, 2, 0, tzinfo='Europe/Stockholm')\n    <Arrow [2017-10-29T02:00:00+02:00]>\n    >>> before.fold\n    0\n    >>> before.ambiguous\n    True\n    >>> after = Arrow(2017, 10, 29, 2, 0, tzinfo='Europe/Stockholm', fold=1)\n    <Arrow [2017-10-29T02:00:00+01:00]>\n    >>> after = before.replace(fold=1)\n    <Arrow [2017-10-29T02:00:00+01:00]>\n\n- [NEW] Added ``normalize_whitespace`` flag to ``arrow.get``. This is useful for parsing log files and/or any files that may contain inconsistent spacing. For example:\n\n.. code-block:: python\n\n    >>> arrow.get(\"Jun 1 2005     1:33PM\", \"MMM D YYYY H:mmA\", normalize_whitespace=True)\n    <Arrow [2005-06-01T13:33:00+00:00]>\n    >>> arrow.get(\"2013-036 \\t  04:05:06Z\", normalize_whitespace=True)\n    <Arrow [2013-02-05T04:05:06+00:00]>\n\n0.15.8 (2020-07-23)\n-------------------\n\n- [WARN] Arrow will **drop support** for Python 2.7 and 3.5 in the upcoming 1.0.0 release. The 0.15.x, 0.16.x, and 0.17.x releases are the last to support Python 2.7 and 3.5.\n- [NEW] Added ``humanize`` week granularity translation for Czech.\n- [FIX] ``arrow.get`` will now pick sane defaults when weekdays are passed with particular token combinations, see `#446 <https://github.com/arrow-py/arrow/issues/446>`_.\n- [INTERNAL] Moved arrow to an organization. The repo can now be found `here <https://github.com/arrow-py/arrow>`_.\n- [INTERNAL] Started issuing deprecation warnings for Python 2.7 and 3.5.\n- [INTERNAL] Added Python 3.9 to CI pipeline.\n\n0.15.7 (2020-06-19)\n-------------------\n\n- [NEW] Added a number of built-in format strings. See the `docs <https://arrow.readthedocs.io/#built-in-formats>`_ for a complete list of supported formats. For example:\n\n.. code-block:: python\n\n    >>> arw = arrow.utcnow()\n    >>> arw.format(arrow.FORMAT_COOKIE)\n    'Wednesday, 27-May-2020 10:30:35 UTC'\n\n- [NEW] Arrow is now fully compatible with Python 3.9 and PyPy3.\n- [NEW] Added Makefile, tox.ini, and requirements.txt files to the distribution bundle.\n- [NEW] Added French Canadian and Swahili locales.\n- [NEW] Added ``humanize`` week granularity translation for Hebrew, Greek, Macedonian, Swedish, Slovak.\n- [FIX] ms and μs timestamps are now normalized in ``arrow.get()``, ``arrow.fromtimestamp()``, and ``arrow.utcfromtimestamp()``. For example:\n\n.. code-block:: python\n\n    >>> ts = 1591161115194556\n    >>> arw = arrow.get(ts)\n    <Arrow [2020-06-03T05:11:55.194556+00:00]>\n    >>> arw.timestamp\n    1591161115\n\n- [FIX] Refactored and updated Macedonian, Hebrew, Korean, and Portuguese locales.\n\n0.15.6 (2020-04-29)\n-------------------\n\n- [NEW] Added support for parsing and formatting `ISO 8601 week dates <https://en.wikipedia.org/wiki/ISO_week_date>`_ via a new token ``W``, for example:\n\n.. code-block:: python\n\n    >>> arrow.get(\"2013-W29-6\", \"W\")\n    <Arrow [2013-07-20T00:00:00+00:00]>\n    >>> utc=arrow.utcnow()\n    >>> utc\n    <Arrow [2020-01-23T18:37:55.417624+00:00]>\n    >>> utc.format(\"W\")\n    '2020-W04-4'\n\n- [NEW] Formatting with ``x`` token (microseconds) is now possible, for example:\n\n.. code-block:: python\n\n    >>> dt = arrow.utcnow()\n    >>> dt.format(\"x\")\n    '1585669870688329'\n    >>> dt.format(\"X\")\n    '1585669870'\n\n- [NEW] Added ``humanize`` week granularity translation for German, Italian, Polish & Taiwanese locales.\n- [FIX] Consolidated and simplified German locales.\n- [INTERNAL] Moved testing suite from nosetest/Chai to pytest/pytest-mock.\n- [INTERNAL] Converted xunit-style setup and teardown functions in tests to pytest fixtures.\n- [INTERNAL] Setup GitHub Actions for CI alongside Travis.\n- [INTERNAL] Help support Arrow's future development by donating to the project on `Open Collective <https://opencollective.com/arrow>`_.\n\n0.15.5 (2020-01-03)\n-------------------\n\n- [WARN] Python 2 reached EOL on 2020-01-01. arrow will **drop support** for Python 2 in a future release to be decided (see `#739 <https://github.com/arrow-py/arrow/issues/739>`_).\n- [NEW] Added bounds parameter to ``span_range``, ``interval`` and ``span`` methods. This allows you to include or exclude the start and end values.\n- [NEW] ``arrow.get()`` can now create arrow objects from a timestamp with a timezone, for example:\n\n.. code-block:: python\n\n    >>> arrow.get(1367900664, tzinfo=tz.gettz('US/Pacific'))\n    <Arrow [2013-05-06T21:24:24-07:00]>\n\n- [NEW] ``humanize`` can now combine multiple levels of granularity, for example:\n\n.. code-block:: python\n\n    >>> later140 = arrow.utcnow().shift(seconds=+8400)\n    >>> later140.humanize(granularity=\"minute\")\n    'in 139 minutes'\n    >>> later140.humanize(granularity=[\"hour\", \"minute\"])\n    'in 2 hours and 19 minutes'\n\n- [NEW] Added Hong Kong locale (``zh_hk``).\n- [NEW] Added ``humanize`` week granularity translation for Dutch.\n- [NEW] Numbers are now displayed when using the seconds granularity in ``humanize``.\n- [CHANGE] ``range`` now supports both the singular and plural forms of the ``frames`` argument (e.g. day and days).\n- [FIX] Improved parsing of strings that contain punctuation.\n- [FIX] Improved behaviour of ``humanize`` when singular seconds are involved.\n\n0.15.4 (2019-11-02)\n-------------------\n\n- [FIX] Fixed an issue that caused package installs to fail on Conda Forge.\n\n0.15.3 (2019-11-02)\n-------------------\n\n- [NEW] ``factory.get()`` can now create arrow objects from a ISO calendar tuple, for example:\n\n.. code-block:: python\n\n    >>> arrow.get((2013, 18, 7))\n    <Arrow [2013-05-05T00:00:00+00:00]>\n\n- [NEW] Added a new token ``x`` to allow parsing of integer timestamps with milliseconds and microseconds.\n- [NEW] Formatting now supports escaping of characters using the same syntax as parsing, for example:\n\n.. code-block:: python\n\n    >>> arw = arrow.now()\n    >>> fmt = \"YYYY-MM-DD h [h] m\"\n    >>> arw.format(fmt)\n    '2019-11-02 3 h 32'\n\n- [NEW] Added ``humanize`` week granularity translations for Chinese, Spanish and Vietnamese.\n- [CHANGE] Added ``ParserError`` to module exports.\n- [FIX] Added support for midnight at end of day. See `#703 <https://github.com/arrow-py/arrow/issues/703>`_ for details.\n- [INTERNAL] Created Travis build for macOS.\n- [INTERNAL] Test parsing and formatting against full timezone database.\n\n0.15.2 (2019-09-14)\n-------------------\n\n- [NEW] Added ``humanize`` week granularity translations for Portuguese and Brazilian Portuguese.\n- [NEW] Embedded changelog within docs and added release dates to versions.\n- [FIX] Fixed a bug that caused test failures on Windows only, see `#668 <https://github.com/arrow-py/arrow/issues/668>`_ for details.\n\n0.15.1 (2019-09-10)\n-------------------\n\n- [NEW] Added ``humanize`` week granularity translations for Japanese.\n- [FIX] Fixed a bug that caused Arrow to fail when passed a negative timestamp string.\n- [FIX] Fixed a bug that caused Arrow to fail when passed a datetime object with ``tzinfo`` of type ``StaticTzInfo``.\n\n0.15.0 (2019-09-08)\n-------------------\n\n- [NEW] Added support for DDD and DDDD ordinal date tokens. The following functionality is now possible: ``arrow.get(\"1998-045\")``, ``arrow.get(\"1998-45\", \"YYYY-DDD\")``, ``arrow.get(\"1998-045\", \"YYYY-DDDD\")``.\n- [NEW] ISO 8601 basic format for dates and times is now supported (e.g. ``YYYYMMDDTHHmmssZ``).\n- [NEW] Added ``humanize`` week granularity translations for French, Russian and Swiss German locales.\n- [CHANGE] Timestamps of type ``str`` are no longer supported **without a format string** in the ``arrow.get()`` method. This change was made to support the ISO 8601 basic format and to address bugs such as `#447 <https://github.com/arrow-py/arrow/issues/447>`_.\n\nThe following will NOT work in v0.15.0:\n\n.. code-block:: python\n\n    >>> arrow.get(\"1565358758\")\n    >>> arrow.get(\"1565358758.123413\")\n\nThe following will work in v0.15.0:\n\n.. code-block:: python\n\n    >>> arrow.get(\"1565358758\", \"X\")\n    >>> arrow.get(\"1565358758.123413\", \"X\")\n    >>> arrow.get(1565358758)\n    >>> arrow.get(1565358758.123413)\n\n- [CHANGE] When a meridian token (a|A) is passed and no meridians are available for the specified locale (e.g. unsupported or untranslated) a ``ParserError`` is raised.\n- [CHANGE] The timestamp token (``X``) will now match float timestamps of type ``str``: ``arrow.get(“1565358758.123415”, “X”)``.\n- [CHANGE] Strings with leading and/or trailing whitespace will no longer be parsed without a format string. Please see `the docs <https://arrow.readthedocs.io/#regular-expressions>`_ for ways to handle this.\n- [FIX] The timestamp token (``X``) will now only match on strings that **strictly contain integers and floats**, preventing incorrect matches.\n- [FIX] Most instances of ``arrow.get()`` returning an incorrect ``Arrow`` object from a partial parsing match have been eliminated. The following issue have been addressed: `#91 <https://github.com/arrow-py/arrow/issues/91>`_, `#196 <https://github.com/arrow-py/arrow/issues/196>`_, `#396 <https://github.com/arrow-py/arrow/issues/396>`_, `#434 <https://github.com/arrow-py/arrow/issues/434>`_, `#447 <https://github.com/arrow-py/arrow/issues/447>`_, `#456 <https://github.com/arrow-py/arrow/issues/456>`_, `#519 <https://github.com/arrow-py/arrow/issues/519>`_, `#538 <https://github.com/arrow-py/arrow/issues/538>`_, `#560 <https://github.com/arrow-py/arrow/issues/560>`_.\n\n0.14.7 (2019-09-04)\n-------------------\n\n- [CHANGE] ``ArrowParseWarning`` will no longer be printed on every call to ``arrow.get()`` with a datetime string. The purpose of the warning was to start a conversation about the upcoming 0.15.0 changes and we appreciate all the feedback that the community has given us!\n\n0.14.6 (2019-08-28)\n-------------------\n\n- [NEW] Added support for ``week`` granularity in ``Arrow.humanize()``. For example, ``arrow.utcnow().shift(weeks=-1).humanize(granularity=\"week\")`` outputs \"a week ago\". This change introduced two new untranslated words, ``week`` and ``weeks``, to all locale dictionaries, so locale contributions are welcome!\n- [NEW] Fully translated the Brazilian Portuguese locale.\n- [CHANGE] Updated the Macedonian locale to inherit from a Slavic base.\n- [FIX] Fixed a bug that caused ``arrow.get()`` to ignore tzinfo arguments of type string (e.g. ``arrow.get(tzinfo=\"Europe/Paris\")``).\n- [FIX] Fixed a bug that occurred when ``arrow.Arrow()`` was instantiated with a ``pytz`` tzinfo object.\n- [FIX] Fixed a bug that caused Arrow to fail when passed a sub-second token, that when rounded, had a value greater than 999999 (e.g. ``arrow.get(\"2015-01-12T01:13:15.9999995\")``). Arrow should now accurately propagate the rounding for large sub-second tokens.\n\n0.14.5 (2019-08-09)\n-------------------\n\n- [NEW] Added Afrikaans locale.\n- [CHANGE] Removed deprecated ``replace`` shift functionality. Users looking to pass plural properties to the ``replace`` function to shift values should use ``shift`` instead.\n- [FIX] Fixed bug that occurred when ``factory.get()`` was passed a locale kwarg.\n\n0.14.4 (2019-07-30)\n-------------------\n\n- [FIX] Fixed a regression in 0.14.3 that prevented a tzinfo argument of type string to be passed to the ``get()`` function. Functionality such as ``arrow.get(\"2019072807\", \"YYYYMMDDHH\", tzinfo=\"UTC\")`` should work as normal again.\n- [CHANGE] Moved ``backports.functools_lru_cache`` dependency from ``extra_requires`` to ``install_requires`` for ``Python 2.7`` installs to fix `#495 <https://github.com/arrow-py/arrow/issues/495>`_.\n\n0.14.3 (2019-07-28)\n-------------------\n\n- [NEW] Added full support for Python 3.8.\n- [CHANGE] Added warnings for upcoming factory.get() parsing changes in 0.15.0. Please see `#612 <https://github.com/arrow-py/arrow/issues/612>`_ for full details.\n- [FIX] Extensive refactor and update of documentation.\n- [FIX] factory.get() can now construct from kwargs.\n- [FIX] Added meridians to Spanish Locale.\n\n0.14.2 (2019-06-06)\n-------------------\n\n- [CHANGE] Travis CI builds now use tox to lint and run tests.\n- [FIX] Fixed UnicodeDecodeError on certain locales (#600).\n\n0.14.1 (2019-06-06)\n-------------------\n\n- [FIX] Fixed ``ImportError: No module named 'dateutil'`` (#598).\n\n0.14.0 (2019-06-06)\n-------------------\n\n- [NEW] Added provisional support for Python 3.8.\n- [CHANGE] Removed support for EOL Python 3.4.\n- [FIX] Updated setup.py with modern Python standards.\n- [FIX] Upgraded dependencies to latest versions.\n- [FIX] Enabled flake8 and black on travis builds.\n- [FIX] Formatted code using black and isort.\n\n0.13.2 (2019-05-30)\n-------------------\n\n- [NEW] Add is_between method.\n- [FIX] Improved humanize behaviour for near zero durations (#416).\n- [FIX] Correct humanize behaviour with future days (#541).\n- [FIX] Documentation updates.\n- [FIX] Improvements to German Locale.\n\n0.13.1 (2019-02-17)\n-------------------\n\n- [NEW] Add support for Python 3.7.\n- [CHANGE] Remove deprecation decorators for Arrow.range(), Arrow.span_range() and Arrow.interval(), all now return generators, wrap with list() to get old behavior.\n- [FIX] Documentation and docstring updates.\n\n0.13.0 (2019-01-09)\n-------------------\n\n- [NEW] Added support for Python 3.6.\n- [CHANGE] Drop support for Python 2.6/3.3.\n- [CHANGE] Return generator instead of list for Arrow.range(), Arrow.span_range() and Arrow.interval().\n- [FIX] Make arrow.get() work with str & tzinfo combo.\n- [FIX] Make sure special RegEx characters are escaped in format string.\n- [NEW] Added support for ZZZ when formatting.\n- [FIX] Stop using datetime.utcnow() in internals, use datetime.now(UTC) instead.\n- [FIX] Return NotImplemented instead of TypeError in arrow math internals.\n- [NEW] Added Estonian Locale.\n- [FIX] Small fixes to Greek locale.\n- [FIX] TagalogLocale improvements.\n- [FIX] Added test requirements to setup.\n- [FIX] Improve docs for get, now and utcnow methods.\n- [FIX] Correct typo in depreciation warning.\n\n0.12.1\n------\n\n- [FIX] Allow universal wheels to be generated and reliably installed.\n- [FIX] Make humanize respect only_distance when granularity argument is also given.\n\n0.12.0\n------\n\n- [FIX] Compatibility fix for Python 2.x\n\n0.11.0\n------\n\n- [FIX] Fix grammar of ArabicLocale\n- [NEW] Add Nepali Locale\n- [FIX] Fix month name + rename AustriaLocale -> AustrianLocale\n- [FIX] Fix typo in Basque Locale\n- [FIX] Fix grammar in PortugueseBrazilian locale\n- [FIX] Remove pip --user-mirrors flag\n- [NEW] Add Indonesian Locale\n\n0.10.0\n------\n\n- [FIX] Fix getattr off by one for quarter\n- [FIX] Fix negative offset for UTC\n- [FIX] Update arrow.py\n\n0.9.0\n-----\n\n- [NEW] Remove duplicate code\n- [NEW] Support gnu date iso 8601\n- [NEW] Add support for universal wheels\n- [NEW] Slovenian locale\n- [NEW] Slovak locale\n- [NEW] Romanian locale\n- [FIX] respect limit even if end is defined range\n- [FIX] Separate replace & shift functions\n- [NEW] Added tox\n- [FIX] Fix supported Python versions in documentation\n- [NEW] Azerbaijani locale added, locale issue fixed in Turkish.\n- [FIX] Format ParserError's raise message\n\n0.8.0\n-----\n\n- []\n\n0.7.1\n-----\n\n- [NEW] Esperanto locale (batisteo)\n\n0.7.0\n-----\n\n- [FIX] Parse localized strings #228 (swistakm)\n- [FIX] Modify tzinfo parameter in ``get`` api #221 (bottleimp)\n- [FIX] Fix Czech locale (PrehistoricTeam)\n- [FIX] Raise TypeError when adding/subtracting non-dates (itsmeolivia)\n- [FIX] Fix pytz conversion error (Kudo)\n- [FIX] Fix overzealous time truncation in span_range (kdeldycke)\n- [NEW] Humanize for time duration #232 (ybrs)\n- [NEW] Add Thai locale (sipp11)\n- [NEW] Adding Belarusian (be) locale (oire)\n- [NEW] Search date in strings (beenje)\n- [NEW] Note that arrow's tokens differ from strptime's. (offby1)\n\n0.6.0\n-----\n\n- [FIX] Added support for Python 3\n- [FIX] Avoid truncating oversized epoch timestamps. Fixes #216.\n- [FIX] Fixed month abbreviations for Ukrainian\n- [FIX] Fix typo timezone\n- [FIX] A couple of dialect fixes and two new languages\n- [FIX] Spanish locale: ``Miercoles`` should have acute accent\n- [Fix] Fix Finnish grammar\n- [FIX] Fix typo in 'Arrow.floor' docstring\n- [FIX] Use read() utility to open README\n- [FIX] span_range for week frame\n- [NEW] Add minimal support for fractional seconds longer than six digits.\n- [NEW] Adding locale support for Marathi (mr)\n- [NEW] Add count argument to span method\n- [NEW] Improved docs\n\n0.5.1 - 0.5.4\n-------------\n\n- [FIX] test the behavior of simplejson instead of calling for_json directly (tonyseek)\n- [FIX] Add Hebrew Locale (doodyparizada)\n- [FIX] Update documentation location (andrewelkins)\n- [FIX] Update setup.py Development Status level (andrewelkins)\n- [FIX] Case insensitive month match (cshowe)\n\n0.5.0\n-----\n\n- [NEW] struct_time addition. (mhworth)\n- [NEW] Version grep (eirnym)\n- [NEW] Default to ISO 8601 format (emonty)\n- [NEW] Raise TypeError on comparison (sniekamp)\n- [NEW] Adding Macedonian(mk) locale (krisfremen)\n- [FIX] Fix for ISO seconds and fractional seconds (sdispater) (andrewelkins)\n- [FIX] Use correct Dutch wording for \"hours\" (wbolster)\n- [FIX] Complete the list of english locales (indorilftw)\n- [FIX] Change README to reStructuredText (nyuszika7h)\n- [FIX] Parse lower-cased 'h' (tamentis)\n- [FIX] Slight modifications to Dutch locale (nvie)\n\n0.4.4\n-----\n\n- [NEW] Include the docs in the released tarball\n- [NEW] Czech localization Czech localization for Arrow\n- [NEW] Add fa_ir to locales\n- [FIX] Fixes parsing of time strings with a final Z\n- [FIX] Fixes ISO parsing and formatting for fractional seconds\n- [FIX] test_fromtimestamp sp\n- [FIX] some typos fixed\n- [FIX] removed an unused import statement\n- [FIX] docs table fix\n- [FIX] Issue with specify 'X' template and no template at all to arrow.get\n- [FIX] Fix \"import\" typo in docs/index.rst\n- [FIX] Fix unit tests for zero passed\n- [FIX] Update layout.html\n- [FIX] In Norwegian and new Norwegian months and weekdays should not be capitalized\n- [FIX] Fixed discrepancy between specifying 'X' to arrow.get and specifying no template\n\n0.4.3\n-----\n\n- [NEW] Turkish locale (Emre)\n- [NEW] Arabic locale (Mosab Ahmad)\n- [NEW] Danish locale (Holmars)\n- [NEW] Icelandic locale (Holmars)\n- [NEW] Hindi locale (Atmb4u)\n- [NEW] Malayalam locale (Atmb4u)\n- [NEW] Finnish locale (Stormpat)\n- [NEW] Portuguese locale (Danielcorreia)\n- [NEW] ``h`` and ``hh`` strings are now supported (Averyonghub)\n- [FIX] An incorrect inflection in the Polish locale has been fixed (Avalanchy)\n- [FIX] ``arrow.get`` now properly handles ``Date`` (Jaapz)\n- [FIX] Tests are now declared in ``setup.py`` and the manifest (Pypingou)\n- [FIX] ``__version__`` has been added to ``__init__.py`` (Sametmax)\n- [FIX] ISO 8601 strings can be parsed without a separator (Ivandiguisto / Root)\n- [FIX] Documentation is now more clear regarding some inputs on ``arrow.get`` (Eriktaubeneck)\n- [FIX] Some documentation links have been fixed (Vrutsky)\n- [FIX] Error messages for parse errors are now more descriptive (Maciej Albin)\n- [FIX] The parser now correctly checks for separators in strings (Mschwager)\n\n0.4.2\n-----\n\n- [NEW] Factory ``get`` method now accepts a single ``Arrow`` argument.\n- [NEW] Tokens SSSS, SSSSS and SSSSSS are supported in parsing.\n- [NEW] ``Arrow`` objects have a ``float_timestamp`` property.\n- [NEW] Vietnamese locale (Iu1nguoi)\n- [NEW] Factory ``get`` method now accepts a list of format strings (Dgilland)\n- [NEW] A MANIFEST.in file has been added (Pypingou)\n- [NEW] Tests can be run directly from ``setup.py`` (Pypingou)\n- [FIX] Arrow docs now list 'day of week' format tokens correctly (Rudolphfroger)\n- [FIX] Several issues with the Korean locale have been resolved (Yoloseem)\n- [FIX] ``humanize`` now correctly returns unicode (Shvechikov)\n- [FIX] ``Arrow`` objects now pickle / unpickle correctly (Yoloseem)\n\n0.4.1\n-----\n\n- [NEW] Table / explanation of formatting & parsing tokens in docs\n- [NEW] Brazilian locale (Augusto2112)\n- [NEW] Dutch locale (OrangeTux)\n- [NEW] Italian locale (Pertux)\n- [NEW] Austrian locale (LeChewbacca)\n- [NEW] Tagalog locale (Marksteve)\n- [FIX] Corrected spelling and day numbers in German locale (LeChewbacca)\n- [FIX] Factory ``get`` method should now handle unicode strings correctly (Bwells)\n- [FIX] Midnight and noon should now parse and format correctly (Bwells)\n\n0.4.0\n-----\n\n- [NEW] Format-free ISO 8601 parsing in factory ``get`` method\n- [NEW] Support for 'week' / 'weeks' in ``span``, ``range``, ``span_range``, ``floor`` and ``ceil``\n- [NEW] Support for 'weeks' in ``replace``\n- [NEW] Norwegian locale (Martinp)\n- [NEW] Japanese locale (CortYuming)\n- [FIX] Timezones no longer show the wrong sign when formatted (Bean)\n- [FIX] Microseconds are parsed correctly from strings (Bsidhom)\n- [FIX] Locale day-of-week is no longer off by one (Cynddl)\n- [FIX] Corrected plurals of Ukrainian and Russian nouns (Catchagain)\n- [CHANGE] Old 0.1 ``arrow`` module method removed\n- [CHANGE] Dropped timestamp support in ``range`` and ``span_range`` (never worked correctly)\n- [CHANGE] Dropped parsing of single string as tz string in factory ``get`` method (replaced by ISO 8601)\n\n0.3.5\n-----\n\n- [NEW] French locale (Cynddl)\n- [NEW] Spanish locale (Slapresta)\n- [FIX] Ranges handle multiple timezones correctly (Ftobia)\n\n0.3.4\n-----\n\n- [FIX] Humanize no longer sometimes returns the wrong month delta\n- [FIX] ``__format__`` works correctly with no format string\n\n0.3.3\n-----\n\n- [NEW] Python 2.6 support\n- [NEW] Initial support for locale-based parsing and formatting\n- [NEW] ArrowFactory class, now proxied as the module API\n- [NEW] ``factory`` api method to obtain a factory for a custom type\n- [FIX] Python 3 support and tests completely ironed out\n\n0.3.2\n-----\n\n- [NEW] Python 3+ support\n\n0.3.1\n-----\n\n- [FIX] The old ``arrow`` module function handles timestamps correctly as it used to\n\n0.3.0\n-----\n\n- [NEW] ``Arrow.replace`` method\n- [NEW] Accept timestamps, datetimes and Arrows for datetime inputs, where reasonable\n- [FIX] ``range`` and ``span_range`` respect end and limit parameters correctly\n- [CHANGE] Arrow objects are no longer mutable\n- [CHANGE] Plural attribute name semantics altered: single -> absolute, plural -> relative\n- [CHANGE] Plural names no longer supported as properties (e.g. ``arrow.utcnow().years``)\n\n0.2.1\n-----\n\n- [NEW] Support for localized humanization\n- [NEW] English, Russian, Greek, Korean, Chinese locales\n\n0.2.0\n-----\n\n- **REWRITE**\n- [NEW] Date parsing\n- [NEW] Date formatting\n- [NEW] ``floor``, ``ceil`` and ``span`` methods\n- [NEW] ``datetime`` interface implementation\n- [NEW] ``clone`` method\n- [NEW] ``get``, ``now`` and ``utcnow`` API methods\n\n0.1.6\n-----\n\n- [NEW] Humanized time deltas\n- [NEW] ``__eq__`` implemented\n- [FIX] Issues with conversions related to daylight savings time resolved\n- [CHANGE] ``__str__`` uses ISO formatting\n\n0.1.5\n-----\n\n- **Started tracking changes**\n- [NEW] Parsing of ISO-formatted time zone offsets (e.g. '+02:30', '-05:00')\n- [NEW] Resolved some issues with timestamps and delta / Olson time zones\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0751953125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 Chris Smith\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0859375,
          "content": ".PHONY: auto test docs clean\n\nauto: build311\n\nbuild38: PYTHON_VER = python3.8\nbuild39: PYTHON_VER = python3.9\nbuild310: PYTHON_VER = python3.10\nbuild311: PYTHON_VER = python3.11\nbuild312: PYTHON_VER = python3.12\nbuild313: PYTHON_VER = python3.13\n\nbuild36 build37 build38 build39 build310 build311 build312 build313: clean\n\t$(PYTHON_VER) -m venv venv\n\t. venv/bin/activate; \\\n\tpip install -U pip setuptools wheel; \\\n\tpip install -r requirements/requirements-tests.txt; \\\n\tpip install -r requirements/requirements-docs.txt; \\\n\tpre-commit install\n\ntest:\n\trm -f .coverage coverage.xml\n\t. venv/bin/activate; \\\n\tpytest\n\nlint:\n\t. venv/bin/activate; \\\n\tpre-commit run --all-files --show-diff-on-failure\n\nclean-docs:\n\trm -rf docs/_build\n\ndocs:\n\t. venv/bin/activate; \\\n\tcd docs; \\\n\tmake html\n\nlive-docs: clean-docs\n\t. venv/bin/activate; \\\n\tsphinx-autobuild docs docs/_build/html\n\nclean: clean-dist\n\trm -rf venv .pytest_cache ./**/__pycache__\n\trm -f .coverage coverage.xml ./**/*.pyc\n\nclean-dist:\n\trm -rf dist build *.egg *.eggs *.egg-info\n\nbuild-dist: clean-dist\n\t. venv/bin/activate; \\\n\tpip install -U flit; \\\n\tflit build\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.580078125,
          "content": "Arrow: Better dates & times for Python\n======================================\n\n.. start-inclusion-marker-do-not-remove\n\n.. image:: https://github.com/arrow-py/arrow/workflows/tests/badge.svg?branch=master\n   :alt: Build Status\n   :target: https://github.com/arrow-py/arrow/actions?query=workflow%3Atests+branch%3Amaster\n\n.. image:: https://codecov.io/gh/arrow-py/arrow/branch/master/graph/badge.svg\n   :alt: Coverage\n   :target: https://codecov.io/gh/arrow-py/arrow\n\n.. image:: https://img.shields.io/pypi/v/arrow.svg\n   :alt: PyPI Version\n   :target: https://pypi.python.org/pypi/arrow\n\n.. image:: https://img.shields.io/pypi/pyversions/arrow.svg\n   :alt: Supported Python Versions\n   :target: https://pypi.python.org/pypi/arrow\n\n.. image:: https://img.shields.io/pypi/l/arrow.svg\n   :alt: License\n   :target: https://pypi.python.org/pypi/arrow\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: Code Style: Black\n   :target: https://github.com/psf/black\n\n\n**Arrow** is a Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps. It implements and updates the datetime type, plugging gaps in functionality and providing an intelligent module API that supports many common creation scenarios. Simply put, it helps you work with dates and times with fewer imports and a lot less code.\n\nArrow is named after the `arrow of time <https://en.wikipedia.org/wiki/Arrow_of_time>`_ and is heavily inspired by `moment.js <https://github.com/moment/moment>`_ and `requests <https://github.com/psf/requests>`_.\n\nWhy use Arrow over built-in modules?\n------------------------------------\n\nPython's standard library and some other low-level modules have near-complete date, time and timezone functionality, but don't work very well from a usability perspective:\n\n- Too many modules: datetime, time, calendar, dateutil, pytz and more\n- Too many types: date, time, datetime, tzinfo, timedelta, relativedelta, etc.\n- Timezones and timestamp conversions are verbose and unpleasant\n- Timezone naivety is the norm\n- Gaps in functionality: ISO 8601 parsing, timespans, humanization\n\nFeatures\n--------\n\n- Fully-implemented, drop-in replacement for datetime\n- Support for Python 3.8+\n- Timezone-aware and UTC by default\n- Super-simple creation options for many common input scenarios\n- ``shift`` method with support for relative offsets, including weeks\n- Format and parse strings automatically\n- Wide support for the `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ standard\n- Timezone conversion\n- Support for ``dateutil``, ``pytz``, and ``ZoneInfo`` tzinfo objects\n- Generates time spans, ranges, floors and ceilings for time frames ranging from microsecond to year\n- Humanize dates and times with a growing list of contributed locales\n- Extensible for your own Arrow-derived types\n- Full support for PEP 484-style type hints\n\nQuick Start\n-----------\n\nInstallation\n~~~~~~~~~~~~\n\nTo install Arrow, use `pip <https://pip.pypa.io/en/stable/quickstart/>`_ or `pipenv <https://docs.pipenv.org>`_:\n\n.. code-block:: console\n\n    $ pip install -U arrow\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    >>> import arrow\n    >>> arrow.get('2013-05-11T21:23:58.970460+07:00')\n    <Arrow [2013-05-11T21:23:58.970460+07:00]>\n\n    >>> utc = arrow.utcnow()\n    >>> utc\n    <Arrow [2013-05-11T21:23:58.970460+00:00]>\n\n    >>> utc = utc.shift(hours=-1)\n    >>> utc\n    <Arrow [2013-05-11T20:23:58.970460+00:00]>\n\n    >>> local = utc.to('US/Pacific')\n    >>> local\n    <Arrow [2013-05-11T13:23:58.970460-07:00]>\n\n    >>> local.timestamp()\n    1368303838.970460\n\n    >>> local.format()\n    '2013-05-11 13:23:58 -07:00'\n\n    >>> local.format('YYYY-MM-DD HH:mm:ss ZZ')\n    '2013-05-11 13:23:58 -07:00'\n\n    >>> local.humanize()\n    'an hour ago'\n\n    >>> local.humanize(locale='ko-kr')\n    '한시간 전'\n\n.. end-inclusion-marker-do-not-remove\n\nDocumentation\n-------------\n\nFor full documentation, please visit `arrow.readthedocs.io <https://arrow.readthedocs.io>`_.\n\nContributing\n------------\n\nContributions are welcome for both code and localizations (adding and updating locales). Begin by gaining familiarity with the Arrow library and its features. Then, jump into contributing:\n\n#. Find an issue or feature to tackle on the `issue tracker <https://github.com/arrow-py/arrow/issues>`_. Issues marked with the `\"good first issue\" label <https://github.com/arrow-py/arrow/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22>`_ may be a great place to start!\n#. Fork `this repository <https://github.com/arrow-py/arrow>`_ on GitHub and begin making changes in a branch.\n#. Add a few tests to ensure that the bug was fixed or the feature works as expected.\n#. Run the entire test suite and linting checks by running one of the following commands: ``tox && tox -e lint,docs`` (if you have `tox <https://tox.readthedocs.io>`_ installed) **OR** ``make build39 && make test && make lint`` (if you do not have Python 3.9 installed, replace ``build39`` with the latest Python version on your system).\n#. Submit a pull request and await feedback 😃.\n\nIf you have any questions along the way, feel free to ask them `here <https://github.com/arrow-py/arrow/discussions>`_.\n\nSupport Arrow\n-------------\n\n`Open Collective <https://opencollective.com/>`_ is an online funding platform that provides tools to raise money and share your finances with full transparency. It is the platform of choice for individuals and companies to make one-time or recurring donations directly to the project. If you are interested in making a financial contribution, please visit the `Arrow collective <https://opencollective.com/arrow>`_.\n"
        },
        {
          "name": "arrow",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.7041015625,
          "content": "[build-system]\nrequires = [\"flit_core >=3.2,<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"arrow\"\nauthors = [{name = \"Chris Smith\", email = \"crsmithdev@gmail.com\"}]\nreadme = \"README.rst\"\nlicense = {file = \"LICENSE\"}\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Information Technology\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\n    \"python-dateutil>=2.7.0\",\n]\nrequires-python = \">=3.8\"\ndescription = \"Better dates & times for Python\"\nkeywords = [\n    \"arrow\",\n    \"date\",\n    \"time\",\n    \"datetime\",\n    \"timestamp\",\n    \"timezone\",\n    \"humanize\",\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\ntest = [\n    \"backports.zoneinfo==0.2.1;python_version<'3.9'\",\n    \"dateparser==1.*\",\n    \"pre-commit\",\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytz==2021.1\",\n    \"simplejson==3.*\",\n]\ndoc = [\n    \"doc8\",\n    \"sphinx>=7.0.0\",\n    \"sphinx-autobuild\",\n    \"sphinx-autodoc-typehints\",\n    \"sphinx_rtd_theme>=1.3.0\",\n]\n\n[project.urls]\nDocumentation = \"https://arrow.readthedocs.io\"\nSource = \"https://github.com/arrow-py/arrow\"\nIssues = \"https://github.com/arrow-py/arrow/issues\"\n\n[tool.flit.module]\nname = \"arrow\"\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.6728515625,
          "content": "[mypy]\npython_version = 3.11\n\nshow_error_codes = True\npretty = True\n\nallow_any_expr = True\nallow_any_decorated = True\nallow_any_explicit = True\ndisallow_any_generics = True\ndisallow_subclassing_any = True\n\ndisallow_untyped_calls = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ndisallow_untyped_decorators = True\n\nno_implicit_optional = True\n\nwarn_redundant_casts = True\nwarn_unused_ignores = True\nno_warn_no_return = True\nwarn_return_any = True\nwarn_unreachable = True\n\nstrict_equality = True\nno_implicit_reexport = True\n\nallow_redefinition = True\n\n# Type annotations for testing code and migration files are not mandatory\n[mypy-*.tests.*,tests.*]\nignore_errors = True\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.2265625,
          "content": "[tox]\nminversion = 3.18.0\nenvlist = py{py3,38,39,310,311,312,313}\nskip_missing_interpreters = true\n\n[gh-actions]\npython =\n    pypy-3.7: pypy3\n    3.8: py38\n    3.9: py39\n    3.10: py310\n    3.11: py311\n    3.12: py312\n    3.13: py313\n\n[testenv]\ndeps = -r requirements/requirements-tests.txt\nallowlist_externals = pytest\ncommands = pytest\n\n[testenv:lint]\nskip_install = true\ndeps = pre-commit\ncommands_pre = pre-commit install\ncommands = pre-commit run --all-files {posargs}\n\n[testenv:docs]\nskip_install = true\nchangedir = docs\ndeps =\n    -r requirements/requirements-tests.txt\n    -r requirements/requirements-docs.txt\nallowlist_externals = make\ncommands =\n    doc8 index.rst ../README.rst --extension .rst --ignore D001\n    make html SPHINXOPTS=\"-W --keep-going\"\n\n[testenv:publish]\npassenv = *\nskip_install = true\ndeps =\n    -r requirements/requirements.txt\n    flit\nallowlist_externals = flit\ncommands = flit publish --setup-py\n\n[pytest]\naddopts = -v --cov-branch --cov=arrow --cov-fail-under=99 --cov-report=term-missing --cov-report=xml\ntestpaths = tests\n\n[isort]\nline_length = 88\nmulti_line_output = 3\ninclude_trailing_comma = true\n\n[flake8]\nper-file-ignores = arrow/__init__.py:F401,tests/*:ANN001,ANN201\nignore = E203,E501,W503,ANN101,ANN102,ANN401\n"
        }
      ]
    }
  ]
}