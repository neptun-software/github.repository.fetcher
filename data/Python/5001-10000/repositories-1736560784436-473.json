{
  "metadata": {
    "timestamp": 1736560784436,
    "page": 473,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aws/aws-sam-cli",
      "stars": 6542,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.314453125,
          "content": "[run]\nbranch = True\nomit =\n  # TODO: Remove the plugins_interfaces.py omission when new interfaces are used\n  samcli/lib/iac/plugins_interfaces.py\n  samcli/lib/init/templates/*\n  samcli/hook_packages/terraform/copy_terraform_built_artifacts.py\n[report]\nexclude_lines =\n    pragma: no cover\n    raise NotImplementedError.*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.11328125,
          "content": "\n# Created by https://www.gitignore.io/api/osx,node,macos,linux,python,windows,pycharm,intellij,sublimetext,visualstudiocode\n\n### Intellij ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/dictionaries\n.idea\n.vscode\n\n# Sensitive or high-churn files:\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.xml\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n\n# Gradle:\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# CMake\ncmake-build-debug/\n\n# Mongo Explorer plugin:\n.idea/**/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Ruby plugin and RubyMine\n/.rakeTasks\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n### Intellij Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n*.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n.idea/sonarlint\n\n### Linux ###\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n### macOS ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Node ###\n# Logs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Typescript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Except test file\n!tests/functional/testdata/lib/utils/test.tgz\n!tests/functional/testdata/lib/utils/path_reversal_uxix.tgz\n!tests/functional/testdata/lib/utils/path_reversal_win.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n\n### OSX ###\n\n# Icon must end with two \\r\n\n# Thumbnails\n\n# Files that might appear in the root of a volume\n\n# Directories potentially created on remote AFP share\n\n### PyCharm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n\n# Sensitive or high-churn files:\n\n# Gradle:\n\n# CMake\n\n# Mongo Explorer plugin:\n\n## File-based project format:\n\n## Plugin-specific files:\n\n# IntelliJ\n\n# mpeltonen/sbt-idea plugin\n\n# JIRA plugin\n\n# Cursive Clojure plugin\n\n# Ruby plugin and RubyMine\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\n\n### PyCharm Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\n/build/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\npip-wheel-metadata/\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\n.pytest_cache/\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n/target/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# pyright\npyrightconfig.json\n\n# celery beat schedule file\ncelerybeat-schedule.*\n\n# SageMath parsed files\n*.sage.py\n\n# AWS SAM\nbuild.toml\nbuild_dir/\n# Environments\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\nvenv-update-reproducible-requirements/\n\nenv.*/\nvenv.*/\n.env.*/\n.venv.*/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# ruff\n.ruff_cache/\n\n# SAM default build folder\n.aws-sam/\n\n### SublimeText ###\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n# sftp configuration file\nsftp-config.json\n\n# Package control specific files\nPackage Control.last-run\nPackage Control.ca-list\nPackage Control.ca-bundle\nPackage Control.system-ca-bundle\nPackage Control.cache/\nPackage Control.ca-certs/\nPackage Control.merged-ca-bundle\nPackage Control.user-ca-bundle\noscrypto-ca-bundle.crt\nbh_unicode_properties.cache\n\n# Sublime-github package stores a github token in this file\n# https://packagecontrol.io/packages/sublime-github\nGitHub.sublime-settings\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n.history\n\n### Theia editor (GitPod)\n.theia\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nehthumbs.db\nehthumbs_vista.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# Code coverage\ncov.xml\ncoverage.xml\n\n# Temporary scratch directory used by the tests\ntests/integration/buildcmd/scratch\ntests/integration/testdata/buildcmd/Dotnet*/bin\ntests/integration/testdata/buildcmd/Dotnet*/obj\ntests/integration/testdata/invoke/credential_tests/inprocess/dotnet/STS/obj\ntests/integration/testdata/sync/code/after/dotnet_function/src/HelloWorld/obj/\ntests/integration/testdata/sync/code/before/dotnet_function/src/HelloWorld/obj/\n\n# End of https://www.gitignore.io/api/osx,node,macos,linux,python,windows,pycharm,intellij,sublimetext,visualstudiocode\n\n# Installer build folder\n.build\n\n"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.271484375,
          "content": "FROM gitpod/workspace-full\n\n# Install custom tools, runtimes, etc.\n# For example \"bastet\", a command-line tetris clone:\n# RUN brew install bastet\n#\n# More information: https://www.gitpod.io/docs/config-docker/\nRUN pyenv install 3.7.2\nRUN pyenv global 3.7.2\nRUN pip install black"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.05859375,
          "content": "image:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: make pr\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1513671875,
          "content": "repos:\n- repo: local\n  hooks:\n    - id: black\n      name: black\n      entry: black\n      language: system\n      require_serial: true\n      types: [python]\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.203125,
          "content": "# https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners\n\n* @aws/serverless-application-experience-sbt\n* @aws/aws-lambda-tooling\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3037109375,
          "content": "## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct). \nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact \nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.322265625,
          "content": "[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/aws/aws-sam-cli)\n\n# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional \ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary \ninformation to effectively respond to your bug report or contribution.\n\n## Development Guide\n\nRefer to the [Development Guide](DEVELOPMENT_GUIDE.md) for help with environment setup, running tests, submitting a PR, or anything that will make you more productive.\n\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/aws/aws-sam-cli/issues), or [recently closed](https://github.com/aws/aws-sam-cli/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already \nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n\n## Contributing via Pull Requests\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *develop* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n4. The change works in Python3 (see supported Python Versions in setup.py)\n5. Does the PR have updated/added unit, functional, and integration tests?\n6. PR is merged submitted to merge into develop.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and \n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/aws/aws-sam-cli/labels/help%20wanted) issues is a great place to start. \n\n## First time contributors\nIf this your first time looking to contribute, looking at any ['contributors/welcome'](https://github.com/aws/aws-sam-cli/labels/contributors%2Fwelcome) or ['contributors/good-first-issue'](https://github.com/aws/aws-sam-cli/labels/contributors%2Fgood-first-issue) issues is a great place to start. \n\n\n## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct). \nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact \nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n\n## Security issue notifications\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\n\n## Licensing\n\nSee the [LICENSE](https://github.com/aws/aws-sam-cli/blob/master/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n\nWe may ask you to sign a [Contributor License Agreement (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) for larger changes.\n"
        },
        {
          "name": "DESIGN.md",
          "type": "blob",
          "size": 3.24609375,
          "content": "DESIGN DOCUMENT\n===============\n\n> \\\"..with proper design, the features come cheaply \\\" - Dennis Ritchie\n\nThis document is intended to capture key decisions in the design of this\nCLI. This is especially useful for new contributors to understand the\ncodebase and keep the changes aligned with design decisions. We will\nupdate this document when new components are added or the CLI design\nchanges significantly.\n\nTenets\n======\n\nThese are some key guiding principles for the design:\n\n-   Extensibility is by design. It is not an after thought.\n-   Each component must be self-contained and testable in isolation.\n-   Command line interface must be one of many supported input\n    mechanisms.\n-   SAM is one of many supported input formats.\n\nCLI Framework\n=============\n\nThis component implements generic CLI functionality that makes it easy\nto write individual CLI commands. It performs:\n\n-   CLI argument parsing\n-   Generating help text and man pages from RST docs of the command.\n-   Fetching configuration information from environment\n-   Consistent exit code generation\n-   [Future] HTTP Mode: Ability to call the CLI commands with same\n    parameters through a HTTP Endpoint. This is useful for IDEs and\n    other tools to integrate with this CLI.\n\nEach command, along with any subcommands, is implemented using Click\nannotations. They are not directly wired with the core of the CLI.\nInstead, commands are dynamically loaded into the CLI at run time by\nimporting the Python package implementing the command. For example,\nassuming two commands are implemented at Python packages\n``foo.cli.cmd1`` and ``foo.cli.cmd2``, then the CLI framework will\ndynamically import these two packages and connect them to parent Click\ninstance. The CLI framework expects the command's Click object to be\nexposed through an attribute called `cli`.\n\nFor example: if ``foo.bar.hello`` is the package where ``hello`` command\nis implemented, then ``/foo/bar/hello/__init__.py`` file is expected\nto contain a Click object called `cli`.\n\nBy convention, the name of last module in the package's name is the\ncommand's name. ie. A package of ``foo.bar.baz`` will produce a command\nname ``baz``.\n\nCommands that make up of the core functionality (like local, validate,\ngenerate-event etc) are also implemented this way. They are baked into\nthe CLI, but in the future, we will provide options to completely remove\na command.\n\nBy convention, each command is implemented as a separate Python package\nwhere the `__init__.py` file exposes the `cli` attribute. This allows\nnew commands to be built and distributed as Python packages through PIP,\nopening the architecture to support plugins in future. This structure\nalso forces commands implementations to be modular, reusable, and highly\ncustomizable. When RC files are implemented, new commands can be added\nor existing commands can be removed, with simple a configuration in the\nRC file.\n\nInternal Environment Variables\n==============================\n\nSAM CLI uses the following internal, undocumented, environment variables\nfor development purposes. They should *not* be used by customers:\n\n- `__SAM_CLI_APP_DIR`: Path to application directory to be used in place\n   of `~/.aws-sam` directory. \n   \n- `__SAM_CLI_TELEMETRY_ENDPOINT_URL`: HTTP Endpoint where the Telemetry \n  metrics will be published to\n"
        },
        {
          "name": "DEVELOPMENT_GUIDE.md",
          "type": "blob",
          "size": 16.6484375,
          "content": "# AWS SAM CLI Development Guide\n\n**Welcome hacker!**\n\nThis document will make your life easier by helping you setup a\ndevelopment environment, IDEs, tests, coding practices, or anything that\nwill help you be more productive. If you found something is missing or\ninaccurate, update this guide and send a Pull Request.\n\n## 1-Click Ready to Hack IDE (this section might be outdated, to be verified)\n\nFor setting up a local development environment, we recommend using Gitpod - a service that allows you to spin up an in-browser Visual Studio Code-compatible editor, with everything set up and ready to go for development on this project. Just click the button below to create your private workspace:\n\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/aws/aws-sam-cli)\n\nThis will start a new Gitpod workspace, and immediately kick off a build of the code. Once it's done, you can start working.\n\nGitpod is free for 50 hours per month - make sure to stop your workspace when you're done (you can always resume it later, and it won't need to run the build again).\n\n## Environment Setup\n### 1. Prerequisites (Python Virtual Environment)\n\nAWS SAM CLI is mainly written in Python 3 and we support Python 3.8 and above.\nSo, having a Python environment with this version is required.\n\nHaving a dedicated Python virtual environment ensures it won't \"pollute\" or get \"polluted\" \nby other python packages. Here we introduce two ways of setting up a Python virtual environment:\n(1) Python's built in [`venv`](https://docs.python.org/3/tutorial/venv.html) and (2) [`pyenv`](https://github.com/pyenv/pyenv).\n\n**Note**: `pyenv` currently only supports macOS and Linux. If you are a\nWindows users, consider using [pyenv-win](https://github.com/pyenv-win/pyenv-win).\n\n|    | `venv`   | `pyenv`      |\n| -- | -------- | ------------ |\n| Pick if you want ... | Easy setup | You want to develop and test SAM CLI in different Python versions |\n\n\n#### `venv` setup\n\n```sh\npython3 -m venv .venv  # one time setup: create a virtual environment to directory .venv\nsource .venv/bin/activate  # activate the virtual environment\n```\n#### `pyenv` setup\n\nInstall `pyenv` and [`pyenv-virtualenv` plugin](https://github.com/pyenv/pyenv-virtualenv)\n\nOn macOS with [Homebrew](https://brew.sh/)\n\n```sh\nbrew install pyenv\nbrew install pyenv-virtualenv\n```\n\nor using [pyenv-installer](https://github.com/pyenv/pyenv-installer) and git\n\n```sh\ncurl https://pyenv.run | bash  # https://github.com/pyenv/pyenv-installer\nexec $SHELL  # restart your shell so the path changes take effect\ngit clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\nexec $SHELL  # restart your shell to enable pyenv-virtualenv\n```\n\nNext, setup a virtual environment and activate it:\n\n```sh\n# Assuming you want to develop AWS SAM CLI in Python 3.8.9\npyenv install 3.8.9  # install Python 3.8.9 using pyenv\npyenv virtualenv 3.8.9 samcli38  # create a virtual environment using 3.8.9 named \"samcli38\"\npyenv activate samcli38  # activate the virtual environment\n```\n\n### 2. Initialize dependencies and create `samdev` available in `$PATH`\n\nClone the AWS SAM CLI repository to your local machine if you haven't done that yet.\n\n```sh\n# Using SSH\ngit clone git@github.com:aws/aws-sam-cli.git\n```\nor\n```sh\n# Using HTTPS\ngit clone https://github.com/aws/aws-sam-cli.git\n```\n\n(make sure you have virtual environment activated)\n\n```sh\ncd aws-sam-cli\nmake init  # this will put a file `samdev` available in $PATH\n```\nWindows users can use PowerShell and `Make.ps1` script which performs the tasks from `Makefile` without *nix `make` tool.\n\n```PowerShell\ncd aws-sam-cli\n./Make -Init\n```\n\nNow you can verify whether the dev AWS SAM CLI is available:\n\n```sh\nsamdev --version  # this will print something like \"SAM CLI, version x.xx.x\"\n```\n\n#### Try out to make change to AWS SAM CLI (Optional)\n\n```sh\n# Change the AWS SAM CLI version to 123.456.789\necho '__version__ = \"123.456.789\"' >> samcli/__init__.py\nsamdev --version  # this will print \"SAM CLI, version 123.456.789\"\n```\n\n### 3. (Optional) Install development version of SAM Transformer\n\nIf you want to run the latest version of [SAM Transformer](https://github.com/aws/serverless-application-model/)\nor work on it at the same time, you can clone it locally and install it in your virtual environment. \nThis is useful if you want to validate your templates against any new, unreleased SAM features ahead of time.\n\n\n```sh\n# Make sure it is not in AWS SAM CLI repository\n\n# clone the AWS SAM repo\ngit clone git@github.com:aws/serverless-application-model.git\n# or using HTTPS: git clone https://github.com/aws/serverless-application-model.git\n\ncd serverless-application-model\n```\n\nMake sure you are in the same virtual environment as the one you are using with SAM CLI.\n```sh\nsource <sam-cli-directory-path>/.venv/bin/activate  # if you chose to use venv to setup the virtual environment\n# or\npyenv activate samcli38  # if you chose to use pyenv to setup the virtual environment\n```\n\nInstall the SAM Transformer in editable mode so that \nall changes you make to the SAM Transformer locally are immediately picked up for SAM CLI. \n\n```sh\npip install -e .\n```\n\nMove back to your SAM CLI directory and re-run init, If necessary: open requirements/base.txt and replace the version number of aws-sam-translator with the ``version number`` specified in your local version of `serverless-application-model/samtranslator/__init__.py`\n\n```sh\n# Make sure you are back to your SAM CLI directory\nmake init\n```\n\nOr on Windows\n\n```PowerShell\n./Make -Init\n```\n\n## Making a Pull Request\n\nAbove demonstrates how to setup the environment, which is enough\nto play with the AWS SAM CLI source code. However, if you want to\ncontribute to the repository, there are a few more things to consider.\n\n### Make Sure AWS SAM CLI Work in Multiple Python Versions\n\nWe support version 3.8 and above. Our CI/CD pipeline is setup to run\nunit tests against all Python versions. So make sure you test it\nwith all versions before sending a Pull Request.\nSee [Unit testing with multiple Python versions](#unit-testing-with-multiple-python-versions-optional). \nThis is most important if you are developing in a Python version greater than the minimum supported version (currently 3.8), as any new features released in 3.9+ will not work.\n\nIf you chose to use `pyenv` in the previous session, setting up a \ndifferent Python version should be easy:\n\n(assuming you are in virtual environment named `samcli39` with Python version 3.9.x)\n\n```sh\n# Your shell now should look like \"(samcli39) $\"\npyenv deactivate samcli39  # \"(samcli39)\" will disappear\npyenv install 3.8.9  # one time setup\npyenv virtualenv 3.8.9 samcli38  # one time setup\npyenv activate samcli38\n# Your shell now should look like \"(samcli38) $\"\n\n# You can verify the version of Python\npython --version  # Python 3.8.9\n\nmake init  # one time setup, this will put a file `samdev` available in $PATH\n```\n\nFor Windows, use your favorite tool for managing different python versions and environments and call `./Make -Init` to initialize each of the environments.\n\n### Format Python Code\n\nWe format our code using [Black](https://github.com/python/black) and verify the source code is\nblack compliant in AppVeyor during PRs. Black will be installed automatically with `make init` or `./Make -Init` on Windows.\n\nThere are generally 3 options to make sure your change is compliant with our formatting standard:\n\n#### (Option 1) Run `make black`\n\n```sh\nmake black\n```\n\nOn Windows:\n\n```PowerShell\n./Make -Black\n```\n\n#### (Option 2) Integrating Black directly in your favorite IDE\n\nSince black is installed in virtualenv, when you follow [this instruction](https://black.readthedocs.io/en/stable/editor_integration.html), `which black` might give you this\n\n```\n/Users/<username>/.pyenv/shims/black\n```\n\nHowever, IDEs such PyChaim (using FileWatcher) will have a hard time \ninvoking `/Users/<username>/.pyenv/shims/black` \nand this will happen:\n\n```\npyenv: black: command not found\n\nThe `black' command exists in these Python versions:\n  3.8.9/envs/samcli38\n  samcli38\n``` \n\nA simple workaround is to use `/Users/<username>/.pyenv/versions/samcli37/bin/black` \ninstead of `/Users/<username>/.pyenv/shims/black`.\n\n#### (Option 3) Pre-commit\n\nWe have integrated black into git hooks through [pre-commit](https://pre-commit.com/).\nAfter installing pre-commit, run `pre-commit install` in the root of the project. This will install black for you and run the black formatting on commit.\n\n### Do a Local PR Check\n\nThis commands will run the AWS SAM CLI code through various checks including\nlint, formatter, unit tests, function tests, and so on.\n```sh\nmake pr\n```\n\nUse `Make.ps1` script on Windows instead:\n\n```PowerShell\n./Make -pr\n```\n\nWe also suggest to run `make pr` or `./Make -pr` in all Python versions.\n\n#### Unit Testing with Multiple Python Versions (Optional)\n\nCurrently, SAM CLI only supports Python3 versions (see setup.py for exact versions). For the most\npart, code that works in Python3.8 will work in Python3.9. You only run into problems if you are\ntrying to use features released in a higher version (for example features introduced into Python3.9\nwill not work in Python3.8). If you want to test in many versions, you can create a virtualenv for\neach version and flip between them (sourcing the activate script). Typically, we run all tests in\none python version locally and then have our ci (appveyor) run all supported versions.\n\n#### Integration Test (Optional)\n\n`make integ-test` - To run integration test against global SAM CLI\ninstallation. It looks for a command named `sam` in your shell.\n\n`SAM_CLI_DEV=1 make integ-test` - To run integration tests against\ndevelopment version of SAM CLI. This is useful if you are making changes\nto the CLI and want to verify that it works. It is a good practice to\nrun integration tests before submitting a pull request.\n\nOn Windows, the behaviour is slightly different. `./Make -IntegTest` runs integration tests **only** against **development** version of SAM CLI.\n\n`Make.ps1` script always sets environment to `dev` before running any command and resets `SAM_CLI_DEV` when done, even if a command fails.\n\n```PowerShell\n$env:SAM_CLI_DEV = 1\ntry {\n  # execute commands here\n  ...\n}\nfinally {\n  $env:SAM_CLI_DEV = ''\n}\n```\n\nWhen writing integration tests, please don't hardcode region information assuming the tests will always run in that region. Please write integration tests region agnostic so that they will succeed when they are run in different regions. Use current region from `boto3` session or use ${AWS::Region} in the templates.\n\n## Other Topics\n### Code Conventions\n\nPlease follow these code conventions when making your changes. This will\nalign your code to the same conventions used in rest of the package and\nmake it easier for others to read/understand your code. Some of these\nconventions are best practices that we have learnt over time.\n\n-   Use [numpy\n    docstring](https://numpydoc.readthedocs.io/en/latest/format.html)\n    format for docstrings. Some parts of the code still use an older,\n    unsupported format. If you happened to be modifying these methods,\n    please change the docstring format as well.\n-   Don\\'t write any code in `__init__.py` file\n-   Module-level logger variable must be named as `LOG`\n-   If your method wants to report a failure, it *must* raise a custom\n    exception. Built-in Python exceptions like `TypeError`, `KeyError`\n    are raised by Python interpreter and usually signify a bug in your\n    code. Your method must not explicitly raise these exceptions because\n    the caller has no way of knowing whether it came from a bug or not.\n    Custom exceptions convey are must better at conveying the intent and\n    can be handled appropriately by the caller. In HTTP lingo, custom\n    exceptions are equivalent to 4xx (user\\'s fault) and built-in\n    exceptions are equivalent to 5xx (Service Fault)\n-   CLI commands must always raise a subclass of `click.ClickException`\n    to signify an error. Error code and message must be set as a part of\n    this exception and not explicitly returned by the CLI command.\n-   Don't use `*args` or `**kwargs` unless there is a really strong\n    reason to do so. You must explain the reason in great detail in\n    docstrings if you were to use them.\n-   Library classes, ie. the ones under `lib` folder, must **not** use\n    Click. Usage of Click must be restricted to the `commands` package.\n    In the library package, your classes must expose interfaces that are\n    independent of the user interface, be it a CLI thru Click, or CLI\n    thru argparse, or HTTP API, or a GUI.\n-   Do not catch the broader `Exception`, unless you have a really\n    strong reason to do. You must explain the reason in great detail in\n    comments.\n    \n    \n### Dependency Updates\n\nPlease update all the required files if the changes involve a version update on a dependency or to include a new dependency. The requirements files are located inside the `requirements` folder.\n\n#### base.txt for SAM CLI code dependencies\nFor dependencies used in SAM CLI code, update `base.txt` in `requirements` folder. To update `base.txt` file, simply follow the current convention and input the dependency name plus version, together with any necessary comment. For more information on the operators to be used for restricting compatible versions, read on [python's enhancement proposals](https://peps.python.org/pep-0440/#compatible-release).\n\n#### reproducible-linux.txt for SAM CLI code dependencies\nFor dependencies used in SAM CLI code, also remember to update`reproducible-linux.txt` in `requirements` folder and `THIRD-PARTY-LICENSES` in `installer/assets` folder. To update the `reproducible-linux.txt`, run the following script to replace the file:\n```\nmake update-reproducible-reqs\n```\nNote that this is a fully auto-generated file, any manual changes to reproducible-linux.txt will not last after the next update running the above script. As for updating the `THIRD-PARTY-LICENSES`, find the corresponding dependency entry in the license file (usually grouped by licensing organization) and update the versions. For adding a new dependency, look up for its licensing organization through PyPi and update the corresponding section. If the license is from GNU or another license type not included in the file, please contact the repository maintainers first. If you are not familiar with working with this file, please contact one of the repository maintainers or cut an issue to help with the update.\n\n#### dev.txt for SAM CLI test dependencies\nFor changing dependencies used for `make pr` checks and test related dependencies, update `dev.txt` in `requirements` folder only.\n\n#### pyinstaller-build.txt for SAM CLI native installer build dependencies\nFor changing Python dependencies needed for creating builds through Pyinstaller (to run `build-mac.sh` or `build-linux.sh` in `installer/pyinstaller` folder), modify `pyinstaller-build.txt`.\n\n\n### Our Testing Practices\n\nWe need thorough test coverage to ensure the code change works today, \nand continues to work in future. When you make a code change, use the \nfollowing framework to decide the kinds of tests to write:\n\n- When you adds/removed/modifies code paths (aka branches/arcs), \n  write **unit tests** with goal of making sure the flow works. Focus\n  on verifying the flow and use mocks to isolate from as many \n  external dependencies as you can. \"External dependencies\" \n  includes system calls, libraries, other classes/methods you wrote\n  but logically outside of the system-under-test.\n  \n  > Aim to test with complete isolation\n  \n- When your code uses external dependencies, write **functional tests** \n  to verify some flows by including as many external dependencies as \n  possible. Focus on verifying the flows that directly use the dependencies.\n  \n  > Aim to test one or more logically related components. Includes docker, \n  file system, API server, but might still mock some things like AWS API \n  calls. \n  \n- When your code adds/removes/modifies a customer facing behavior,\n  write **integration tests**. Focus on verifying the customer experience\n  works as expected.\n  \n  > Aim to test how a customer will use the feature/command. Includes \n  calling AWS APIs, spinning up Docker containers, mutating files etc.\n  \n\n### Design Document\n\nA design document is a written description of the feature/capability you\nare building. We have a [design document\ntemplate](./designs/_template.md) to help you quickly fill in the\nblanks and get you working quickly. We encourage you to write a design\ndocument for any feature you write, but for some types of features we\ndefinitely require a design document to proceed with implementation.\n\n**When do you need a design document?**\n\n-   Adding a new command\n-   Making a breaking change to CLI interface\n-   Refactoring code that alters the design of certain components\n-   Experimental features\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1201171875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2373046875,
          "content": "include LICENSE\ninclude THIRD-PARTY-LICENSES\ninclude requirements/base.txt\ninclude requirements/pre-dev.txt\ninclude requirements/dev.txt\nrecursive-include samcli *\nprune tests\nprune installer\nglobal-exclude *.py[cod]\nglobal-exclude *.DS_Store\n"
        },
        {
          "name": "Make.ps1",
          "type": "blob",
          "size": 3.7607421875,
          "content": "<#\n.SYNOPSIS\n    Run on Windows the same commands as in ./Makefile without installing any aditional software.\n\n.DESCRIPTION\n    Run on Windows the same commands as in ./Makefile without installing any aditional software.\n    The only difference is syntax. Instead of make commands use parameters, meaning add '-' before the command.\n    Parameter names are case insensetive.\n    See Examples.\n\n.EXAMPLE\n    ./Make -TestCovReport\n\n.EXAMPLE\n    ./Make -pr\n#>\n[CmdletBinding(DefaultParameterSetName = '_')] # ParameterSetName '_'is just a workaround to redirect to default case\nparam (\n    # Install all dependencies\n    [Parameter(ParameterSetName = 'Init')]\n    [switch]\n    $Init,\n\n    # Run unit tests and fail if coverage falls below 95%\n    [Parameter(ParameterSetName = 'Test')]\n    [switch]\n    $Test,\n\n    # Run unit tests with html coverage report\n    [Parameter(ParameterSetName = 'TestCovReport')]\n    [switch]\n    $TestCovReport,\n\n    # Run integration tests; they don't need code coverage\n    [Parameter(ParameterSetName = 'IntegTest')]\n    [switch]\n    $IntegTest,\n\n    # Verify function test coverage only for `samcli.local` package\n    [Parameter(ParameterSetName = 'FuncTest')]\n    [switch]\n    $FuncTest,\n\n    # Run regression tests\n    [Parameter(ParameterSetName = 'RegresTest')]\n    [switch]\n    $RegresTest,\n\n    # Smoke tests run in parallel\n    [Parameter(ParameterSetName = 'SmokeTest')]\n    [switch]\n    $SmokeTest,\n\n    # Linter performs static analysis to catch latent bugs and mypy performs type check\n    [Parameter(ParameterSetName = 'Lint')]\n    [switch]\n    $Lint,\n    \n    # Lint and then test\n    [Parameter(ParameterSetName = 'Dev')]\n    [switch]\n    $Dev,\n\n    # Format with black\n    [Parameter(ParameterSetName = 'Black')]\n    [switch]\n    $Black,\n\n    # Perform format check\n    [Parameter(ParameterSetName = 'BlackCheck')]\n    [switch]\n    $BlackCheck,\n\n    # install, lint, check formating\n    [Parameter(ParameterSetName = 'Pr')]\n    [switch]\n    $Pr\n\n    # Update reproducable requirements. Path to python interpreter\n    # [Parameter(ParameterSetName = 'UpdReq')]\n    # [string]\n    # $UpdateReproducableReqs\n)\n\nfunction Init {\n    pip install -e '.[pre-dev]'\n    pip install -e '.[dev]'\n}\n\nfunction Test {\n    pytest --cov samcli --cov-report term-missing --cov-fail-under 95 tests/unit\n}\n\nfunction Lint {\n    ruff check samcli schema\n    mypy setup.py samcli tests\n}\n\nfunction Dev {\n    Lint\n    Test\n}\n\nfunction BlackCheck {\n    black --check setup.py samcli tests\n}\n\nif ( -not (Test-Path \"env:SAM_CLI_TELEMETRY\")) {\n    $env:SAM_CLI_TELEMETRY = 0\n}\n\n$env:SAM_CLI_DEV = 1\n\ntry {\n    switch ($true) {\n        $Init { \n            Init\n        }\n        $Test {\n            Test\n        }\n        $TestCovReport {\n            pytest --cov samcli --cov-report html --cov-fail-under 95 tests/unit\n        }\n        $IntegTest {\n            Write-Output \"Telemetry Status: $env:SAM_CLI_TELEMETRY\"\n            pytest tests/integration\n        }\n        $FuncTest {\n            Write-Output \"Telemetry Status: $env:SAM_CLI_TELEMETRY\"\n            pytest --cov samcli.local --cov samcli.commands.local --cov-report term-missing tests/functional\n        }\n        $RegresTest {\n            Write-Output \"Telemetry Status: $env:SAM_CLI_TELEMETRY\"\n            pytest tests/regression\n        }\n        $SmokeTest {\n            Write-Output \"Telemetry Status: $env:SAM_CLI_TELEMETRY\"\n            pytest -n 4 tests/smoke\n        }\n        $Lint {\n            Lint\n        }\n        $Dev {\n            Dev\n        }\n        $Black {\n            black setup.py samcli tests\n        }\n        $BlackCheck {\n            BlackCheck\n        }\n        $Pr {\n            Init\n            Dev\n            BlackCheck\n        }\n        default {\n            Get-Help ./Make\n        }\n    }\n}\nfinally {\n    $env:SAM_CLI_DEV = ''\n}\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.8505859375,
          "content": "# Default value for environment variable. Can be overridden by setting the\n# environment variable.\nSAM_CLI_TELEMETRY ?= 0\n\n.PHONY: schema\n\ninit:\n\tSAM_CLI_DEV=1 pip install -e '.[dev]'\n\ntest:\n\t# Run unit tests\n\t# Fail if coverage falls below 95%\n\tpytest --cov samcli --cov schema --cov-report term-missing --cov-fail-under 94 tests/unit\n\ntest-cov-report:\n\t# Run unit tests with html coverage report\n\tpytest --cov samcli --cov schema --cov-report html --cov-fail-under 94 tests/unit\n\ninteg-test:\n\t# Integration tests don't need code coverage\n\t@echo Telemetry Status: $(SAM_CLI_TELEMETRY)\n\tSAM_CLI_DEV=1 pytest tests/integration\n\nfunc-test:\n\t# Verify function test coverage only for `samcli.local` package\n\t@echo Telemetry Status: $(SAM_CLI_TELEMETRY)\n\tpytest --cov samcli.local --cov samcli.commands.local --cov-report term-missing tests/functional\n\nregres-test:\n\t@echo Telemetry Status: $(SAM_CLI_TELEMETRY)\n\tSAM_CLI_DEV=1 pytest tests/regression\n\nsmoke-test:\n\t# Smoke tests run in parallel\n\tSAM_CLI_DEV=1 pytest -n 4 tests/smoke\n\nlint:\n\t# Linter performs static analysis to catch latent bugs\n\truff check samcli schema\n\t# mypy performs type check\n\tmypy --exclude /testdata/ --exclude /init/templates/ --no-incremental setup.py samcli tests schema\n\n# Command to run everytime you make changes to verify everything works\ndev: lint test\n\nblack:\n\tblack setup.py samcli tests schema\n\nblack-check:\n\tblack --check setup.py samcli tests schema\n\nformat: black\n\truff check samcli --fix\n\nschema:\n\tpython -m schema.make_schema\n\n# Verifications to run before sending a pull request\npr: init dev schema black-check\n\n# lucashuy: Linux and MacOS are on the same Python version,\n# however we should follow up in a different change\n# to consider combining these files again\nupdate-reproducible-linux-reqs:\n\tpython3.11 -m venv venv-update-reproducible-linux\n\tvenv-update-reproducible-linux/bin/pip install --upgrade pip-tools pip\n\tvenv-update-reproducible-linux/bin/pip install -r requirements/base.txt\n\tvenv-update-reproducible-linux/bin/pip-compile --generate-hashes --allow-unsafe -o requirements/reproducible-linux.txt\n\nupdate-reproducible-mac-reqs:\n\tpython3.11 -m venv venv-update-reproducible-mac\n\tvenv-update-reproducible-mac/bin/pip install --upgrade pip-tools pip\n\tvenv-update-reproducible-mac/bin/pip install -r requirements/base.txt\n\tvenv-update-reproducible-mac/bin/pip-compile --generate-hashes --allow-unsafe -o requirements/reproducible-mac.txt\n\n# note that this should be run on a windows environment with python3.8 as default interpreter\nupdate-reproducible-win-reqs:\n\tpython -m venv venv-update-reproducible-win\n\t.\\venv-update-reproducible-win\\Scripts\\activate\n\tpython.exe -m pip install --upgrade pip-tools pip\n\tpip install -r requirements\\base.txt\n\tpip-compile --generate-hashes --allow-unsafe -o requirements\\reproducible-win.txt\n\n\nupdate-reproducible-reqs: update-reproducible-linux-reqs update-reproducible-mac-reqs\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0869140625,
          "content": "AWS SAM CLI\nCopyright 2018-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.02734375,
          "content": "<p align=\"center\">\n</p>\n\n# AWS SAM CLI\n\n![Apache 2.0 License](https://img.shields.io/github/license/aws/aws-sam-cli)\n![SAM CLI Version](https://img.shields.io/github/release/aws/aws-sam-cli.svg?label=CLI%20Version)\n![Install](https://img.shields.io/badge/brew-aws/tap/aws--sam--cli-orange)\n![pip](https://img.shields.io/badge/pip-aws--sam--cli-9cf)\n\n[Installation](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html) | [Blogs](https://serverlessland.com/blog?tag=AWS%20SAM) | [Videos](https://serverlessland.com/video?tag=AWS%20SAM) | [AWS Docs](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html) | [Roadmap](https://github.com/aws/aws-sam-cli/wiki/SAM-CLI-Roadmap) | [Try It Out](https://s12d.com/jKo46elk) | [Slack Us](https://join.slack.com/t/awsdevelopers/shared_invite/zt-yryddays-C9fkWrmguDv0h2EEDzCqvw)\n\nThe AWS Serverless Application Model (SAM) CLI is an open-source CLI tool that helps you develop serverless applications containing [Lambda functions](https://aws.amazon.com/lambda/), [Step Functions](https://aws.amazon.com/step-functions/), [API Gateway](https://aws.amazon.com/api-gateway/), [EventBridge](https://aws.amazon.com/eventbridge/), [SQS](https://aws.amazon.com/sqs/), [SNS](https://aws.amazon.com/sns/) and more. Some of the features it provides are:\n\n* **Initialize serverless applications** in minutes with AWS-provided infrastructure templates with `sam init`\n* **Compile, build, and package** Lambda functions with provided runtimes and with custom Makefile workflows, for zip and image types of Lambda functions with `sam build`\n* **Locally test** a Lambda function and API Gateway easily in a Docker container with `sam local` commands on SAM and CDK applications\n* **Sync and test your changes in the cloud** with `sam sync` in your developer environments\n* **Deploy** your SAM and CloudFormation templates using `sam deploy`\n* Quickly **create pipelines** with prebuilt templates with popular CI/CD systems using `sam pipeline init`\n* **Tail CloudWatch logs and X-Ray traces** with `sam logs` and `sam traces`\n\n## Recent blogposts and workshops\n\n* **Speeding up incremental changes with AWS SAM Accelerate and Nested Stacks** - [Read blogpost here](https://s12d.com/wt1ajjwB).\n\n* **Develop Node projects with SAM CLI using esbuild** - and use SAM Accelerate on Typescript projects. [Read blogpost here](https://s12d.com/5Aa6u0o7).\n\n* **Speed up development with SAM Accelerate** - quickly test your changes in the cloud. [Read docs here](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/accelerate.html).\n\n* **AWS Serverless Developer Experience Workshop: A day in a life of a developer** - [This advanced workshop](https://s12d.com/aws-sde-workshop) provides you with an immersive experience as a serverless developer, with hands-on experience building a serverless solution using AWS SAM and SAM CLI.\n\n* **The Complete SAM Workshop** - [This workshop](https://s12d.com/jKo46elk) is a great way to experience the power of SAM and SAM CLI.\n\n* **Getting started with CI/CD? SAM pipelines can help you get started** - [This workshop](https://s12d.com/_JQ48d5T) walks you through the basics.\n\n* **Get started with Serverless Application development using SAM CLI** - [This workshop](https://s12d.com/Tq9ZE-Br) walks you through the basics.\n\n## Get Started\n\nTo get started with building SAM-based applications, use the SAM CLI. SAM CLI provides a Lambda-like execution\nenvironment that lets you locally build, test, debug, and deploy [AWS serverless](https://aws.amazon.com/serverless/) applications.\n\n* [Install SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html)\n* [Build & Deploy a \"Hello World\" Web App](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-quick-start.html)\n* [Install AWS Toolkit](https://aws.amazon.com/getting-started/tools-sdks/#IDE_and_IDE_Toolkits) to use SAM with your favorite IDEs\n* [Tutorials and Workshops](https://serverlessland.com/learn)\n* **Powertools for AWS Lambda** is a developer toolkit to implement Serverless best practices and increase developer velocity. Available for [Python](https://awslabs.github.io/aws-lambda-powertools-python), [Java](https://github.com/awslabs/aws-lambda-powertools-java), [TypeScript](https://github.com/awslabs/aws-lambda-powertools-typescript) and [.NET](https://github.com/awslabs/aws-lambda-powertools-dotnet).\n\n**Next Steps:** Learn to build a more complex serverless application.\n\n* [Extract text from images and store it in a database](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-example-s3.html) using Amazon S3 and Amazon Rekognition services.\n* [Detect when records are added to a database](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-example-ddb.html) using Amazon DynamoDB database and asynchronous stream processing.\n* [Explore popular patterns](https://serverlessland.com/patterns)\n\n## What is this Github repository? 💻\n\nThis Github repository contains source code for SAM CLI. Here is the development team talking about this code:\n\n> SAM CLI code is written in Python. Source code is well documented, very modular, with 95% unit test coverage.\nIt uses this awesome Python library called Click to manage the command line interaction and uses Docker to run Lambda functions locally.\nWe think you'll like the code base. Clone it and run `make pr` or `./Make -pr` on Windows!\n\n## Related Repositories and Resources\n\n* **SAM Transform** [Open source template specification](https://github.com/aws/serverless-application-model/) that provides shorthand syntax for CloudFormation\n* **SAM CLI application templates** Get started quickly with [predefined application templates](https://github.com/aws/aws-sam-cli-app-templates/blob/master/README.md) for all supported runtimes and languages, used by `sam init`\n* **Lambda Builders** [Lambda builder tools](https://github.com/aws/aws-lambda-builders) for supported runtimes and custom build workflows, used by `sam build`\n* **Build and local emulation images for CI/CD tools** [Build container images](https://gallery.ecr.aws/sam/) to use with CI/CD tasks\n\n## Contribute to SAM\n\nWe love our contributors ❤️ We have over 100 contributors who have built various parts of the product.\nRead this [testimonial from @ndobryanskyy](https://www.lohika.com/aws-sam-my-exciting-first-open-source-experience/) to learn\nmore about what it was like contributing to SAM.\n\nDepending on your interest and skill, you can help build the different parts of the SAM project;\n\n**Enhance the SAM Specification**\n\nMake pull requests, report bugs, and share ideas to improve the full SAM template specification.\nSource code is located on Github at [aws/serverless-application-model](https://github.com/aws/serverless-application-model).\nRead the [SAM Specification Contributing Guide](https://github.com/aws/serverless-application-model/blob/master/CONTRIBUTING.md)\nto get started.\n\n**Strengthen SAM CLI**\n\nAdd new commands, enhance existing ones, report bugs, or request new features for the SAM CLI.\nSource code is located on Github at [aws/aws-sam-cli](https://github.com/aws/aws-sam-cli). Read the [SAM CLI Contributing Guide](https://github.com/aws/aws-sam-cli/blob/develop/CONTRIBUTING.md) to\nget started.\n\n**Update SAM Developer Guide**\n\n[SAM Developer Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/index.html) provides a comprehensive getting started guide and reference documentation.\nSource code is located on Github at [awsdocs/aws-sam-developer-guide](https://github.com/awsdocs/aws-sam-developer-guide).\nRead the [SAM Documentation Contribution Guide](https://github.com/awsdocs/aws-sam-developer-guide/blob/master/CONTRIBUTING.md) to get\nstarted.\n\n### Join the SAM Community on Slack\n\n[Join the SAM developers channel (#samdev)](https://join.slack.com/t/awsdevelopers/shared_invite/zt-yryddays-C9fkWrmguDv0h2EEDzCqvw) on Slack to collaborate with fellow community members and the AWS SAM team.\n"
        },
        {
          "name": "THIRD-PARTY-LICENSES",
          "type": "blob",
          "size": 8.91015625,
          "content": "** Go3p-Github-Pkg-Errors; version 1.x --\nhttps://godoc.org/github.com/pkg/errors\nCopyright (c) 2015, Dave Cheney <dave@cheney.net>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------\n\n**  Go3p-Golang-X-Sys; version 1.x -- https://github.com/golang/sys\nCopyright (c) 2009 The Go Authors. All rights reserved.\n** go; version 1.13.8 -- https://github.com/golang/go/\nCopyright (c) 2009 The Go Authors. All rights reserved.\n** Go3p-Github-Jessevdk-GoFlags; version 0.1.0 --\nhttps://github.com/jessevdk/go-flags\nCopyright (c) 2012 Jesse van den Kieboom. All rights reserved.\n** Go3p-Golang-X-Crypto; version 20180728-614d502 --\nhttps://tip.golang.org/pkg/crypto/\nCopyright (c) 2009 The Go Authors. All rights reserved.\n** Go3p-Golang-X-Net; version 20180521-5706520 --\nhttps://tip.golang.org/pkg/net/\nCopyright (c) 2009 The Go Authors. All rights reserved.\n** Go3p-Golang-X-Text; version 1.x -- https://tip.golang.org/pkg/text\nCopyright (c) 2009 The Go Authors. All rights reserved.\n** google-uuid; version 1.0 -- https://github.com/google/uuid\nCopyright (c) 2009,2014 Google Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\n     copyright notice, this list of conditions and the following disclaimer\n     in the documentation and/or other materials provided with the\n     distribution.\n   * Neither the name of Google Inc. nor the names of its\n     contributors may be used to endorse or promote products derived from\n     this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------\n\n** Go3p-Github-GoChi-Chi; version 3.3.2 -- https://github.com/go-chi/chi\nCopyright (c) 2015-present Peter Kieltyka (https://github.com/pkieltyka),\nGoogle Inc.\n** Go3p-Github-GoChi-Render; version 1.0.0 -- https://github.com/go-chi/render\nCopyright (c) 2016-Present https://github.com/go-chi authors\n** charset-normalizer; version 3.1.0 -- https://github.com/Ousret/charset_normalizer\nCopyright (c) 2019 TAHRI Ahmed R.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n------\n\n** Go3p-Golang-X-Sync; version 1.x -- https://github.com/golang/sync/\nCopyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------\n\n** sirupsen-logrus; version 1.0.6 -- https://github.com/sirupsen/logrus\nCopyright (c) 2014 Simon Eskildsen\n\nThe MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n------\n\n** Go3p-Github-Satori-GoUUID; version 1.1.0 --\nhttps://github.com/satori/go.uuid\nCopyright (C) 2013-2016 by Maxim Bublis <b@codemonkey.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "appveyor-linux-binary.yml",
          "type": "blob",
          "size": 12.634765625,
          "content": "version: 1.0.{build}\nimage: \n  - Ubuntu2204\n\nconfiguration:\n  - BuildIntegTesting\n  - BuildIntegTestingJavaPythonProvided\n  - BuildIntegTestingArm64\n  - BuildIntegTestingArm64Java\n  - AllTerraformBuildTesting\n  - PackageAndDeleteAndDeployIntegTesting\n  - SyncIntegTesting\n  - LocalInvokeIntegTesting\n  - LocalStartIntegTesting\n  # other Integration testing, Dev, regression and smoke testing\n  - OtherAndEndToEndTesting\n\nenvironment:\n  PYTHON_HOME: \"$HOME/venv3.11/bin\"\n  PYTHON_VERSION: '3.11'\n  AWS_DEFAULT_REGION: us-east-1\n  NODE_VERSION: \"18.18.2\"\n  AWS_S3: 'AWS_S3_TESTING'\n  AWS_ECR: 'AWS_ECR_TESTING'\n  CARGO_LAMBDA_VERSION: \"v0.17.1\"\n  PYTHON_ARCH: '64'\n  NOSE_PARAMETERIZED_NO_WARN: 1\n  APPVEYOR_CONSOLE_DISABLE_PTY: false\n  APPVEYOR_DETAILED_SHELL_LOGGING: true\n\ninstall:\n  # AppVeyor's apt-get cache might be outdated, and the package could potentially be 404.\n  - sh: \"sudo apt-get update --allow-releaseinfo-change\"\n\n  # install coretto 21\n  - sh: wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg\n  - sh: echo \"deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main\" | sudo tee /etc/apt/sources.list.d/corretto.list\n  - sh: sudo apt-get update; sudo apt-get install -y java-21-amazon-corretto-jdk\n  - sh: JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto\n  - sh: PATH=$JAVA_HOME/bin:$PATH\n  - sh: java --version\n  - sh: javac --version\n\n  - sh: \"gvm use go1.19\"\n  - sh: \"echo $PATH\"\n  - sh: \"ls /usr/\"\n  # install latest maven which is compatible with jdk17\n  - sh: \"sudo apt-get -y remove maven\"\n  - sh: \"wget https://dlcdn.apache.org/maven/maven-3/3.9.5/binaries/apache-maven-3.9.5-bin.zip -P /tmp\"\n  - sh: \"sudo unzip -d /opt/mvn /tmp/apache-maven-*.zip\"\n  - sh: \"PATH=/opt/mvn/apache-maven-3.9.5/bin:$PATH\"\n  - sh: \"mvn --version\"\n\n  - sh: \"source ${HOME}/venv${PYTHON_VERSION}/bin/activate\"\n  - sh: \"rbenv install 3.3.0\"\n  - sh: \"rbenv global 3.3.0\"\n  - sh: \"ruby --version\"\n  - sh: \"docker info\"\n  - sh: \"docker version\"\n  - sh: \"nvm install ${NODE_VERSION}\"\n  - sh: \"npm install npm@10.2.3 -g\"\n  - sh: \"npm -v\"\n\n  # Install latest gradle\n  - sh: \"sudo apt-get -y remove gradle\"\n  - sh: \"wget https://services.gradle.org/distributions/gradle-8.4-bin.zip -P /tmp\"\n  - sh: \"sudo unzip -d /opt/gradle /tmp/gradle-*.zip\"\n  - sh: \"PATH=/opt/gradle/gradle-8.4/bin:$PATH\"\n  - sh: \"gradle --version\"\n\n  # Install dotnet8 SDK\n  - sh: \"sudo apt-get update\"\n  - sh: \"sudo apt-get install -y dotnet-sdk-8.0\"\n\n  # Install AWS CLI\n  - sh: \"virtualenv aws_cli\"\n  - sh: \"./aws_cli/bin/python -m pip install awscli\"\n  - sh: \"PATH=$(echo $PWD'/aws_cli/bin'):$PATH\"\n\n  - sh: \"PATH=$PATH:$HOME/venv3.7/bin:$HOME/venv3.8/bin:$HOME/venv3.9/bin:$HOME/venv3.10/bin:$HOME/venv3.11/bin:$HOME/venv3.12/bin:$HOME/venv3.13/bin\"\n\n  # Install pytest\n  - sh: \"python3.9 -m venv $HOME/pytest\"\n  - sh: \"$HOME/pytest/bin/python3 -m pip install -r requirements/pre-dev.txt\"\n  - sh: \"$HOME/pytest/bin/python3 -m pip install -r requirements/dev.txt\"\n  - sh: \"$HOME/pytest/bin/python3 -m pip install -r requirements/base.txt\"\n  - sh: \"PATH=$HOME/pytest/bin:$PATH\"\n  - sh: \"pytest --version\"\n\n  # update ca-certificates which causes failures with newest golang library\n  - sh: \"sudo apt-get install --reinstall ca-certificates\"\n\n  # get testing env vars\n  - sh: \"sudo apt install -y jq\"\n\n  # install Rust\n  - sh: \"curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL https://sh.rustup.rs | sh -s -- --default-toolchain none -y > /dev/null 2>&1\"\n  - sh: \"source $HOME/.cargo/env\"\n  - sh: \"rustup toolchain install stable --profile minimal --no-self-update\"\n  - sh: \"rustup default stable\"\n  - sh: \"rustup target add x86_64-unknown-linux-gnu --toolchain stable\"\n  - sh: \"rustup target add aarch64-unknown-linux-gnu --toolchain stable\"\n  - sh: \"pip install cargo-lambda==$CARGO_LAMBDA_VERSION\"\n  - sh: \"rustc -V\"\n  - sh: \"cargo -V\"\n  - sh: \"cargo lambda -V\"\n\n  - sh: \"python3.9 -m venv .venv_env_vars\"\n  - sh: \".venv_env_vars/bin/pip install boto3\"\n  - sh: \"test_env_var=$(.venv_env_vars/bin/python tests/get_testing_resources.py)\"\n  - sh: '\n    if [ $? -ne 0 ]; then\n      echo \"get_testing_resources failed. Failed to acquire credentials or test resources.\";\n      false;\n    fi\n  '\n\n  - sh: 'export CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID'\n  - sh: 'export CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY'\n  - sh: 'export CI_ACCESS_ROLE_AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN'\n\n  - sh: 'export AWS_ACCESS_KEY_ID=$(echo \"$test_env_var\" | jq -j \".accessKeyID\")'\n  - sh: 'export AWS_SECRET_ACCESS_KEY=$(echo \"$test_env_var\" | jq -j \".secretAccessKey\")'\n  - sh: 'export AWS_SESSION_TOKEN=$(echo \"$test_env_var\" | jq -j \".sessionToken\")'\n  - sh: 'export TASK_TOKEN=$(echo \"$test_env_var\" | jq -j \".taskToken\")'\n  - sh: 'export AWS_S3_TESTING=$(echo \"$test_env_var\" | jq -j \".TestBucketName\")'\n  - sh: 'export AWS_ECR_TESTING=$(echo \"$test_env_var\" | jq -j \".TestECRURI\")'\n  - sh: 'export AWS_KMS_KEY=$(echo \"$test_env_var\" | jq -j \".TestKMSKeyArn\")'\n  - sh: 'export AWS_SIGNING_PROFILE_NAME=$(echo \"$test_env_var\" | jq -j \".TestSigningProfileName\")'\n  - sh: 'export AWS_SIGNING_PROFILE_VERSION_ARN=$(echo \"$test_env_var\" | jq -j \".TestSigningProfileARN\")'\n\n  # required for RIE with arm64 in linux\n  - sh: \"\n    if [[ -n $BY_CANARY ]] && [[ -n $DOCKER_USER ]] && [[ -n $DOCKER_PASS ]];\n      then echo Logging in Docker Hub; echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin registry-1.docker.io;\n    fi\"\n  - sh: \"\n    if [[ -n $BY_CANARY ]] && [[ -n $DOCKER_USER ]] && [[ -n $DOCKER_PASS ]];\n      then echo Logging in Docker Hub; echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin;\n    fi\"\n  - sh: \"docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\"\n\n\n  # Runs only in Linux, logging Public ECR when running canary and cred is available\n  - sh: \"\n    if [[ -n $BY_CANARY ]];\n      then echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;\n    fi\"\n\n\nbuild_script:\n  - curl -L https://github.com/aws/aws-sam-cli/releases/download/sam-cli-nightly/aws-sam-cli-linux-x86_64.zip -o aws-sam-cli-linux-x86_64.zip\n  - unzip aws-sam-cli-linux-x86_64.zip -d sam-installation\n  - sudo ./sam-installation/install\n  # rename `sam-nightly` binary to `sam`\n  - sudo mv /usr/local/bin/sam-nightly /usr/local/bin/sam\n  - sam --version\n\n# Final clean up no matter success or failure\non_finish:\n  # Upload test reports as artifacts\n  - sh: find \"$APPVEYOR_BUILD_FOLDER\" -type f -name 'TEST_REPORT-*.json' -print0 | xargs -0 -I '{}' appveyor PushArtifact '{}'\n  - sh: >\n      AWS_ACCESS_KEY_ID=$TEST_REPORT_S3_BUCKET_ACCESS_KEY_ID \n      AWS_SECRET_ACCESS_KEY=$TEST_REPORT_S3_BUCKET_SECRET_ACCESS_KEY \n      AWS_SESSION_TOKEN=$TEST_REPORT_S3_BUCKET_SESSION_TOKEN \n      aws s3 cp \"$APPVEYOR_BUILD_FOLDER\" \"s3://$TEST_REPORT_S3_BUCKET_NAME/appveyor/$APPVEYOR_PROJECT_SLUG/$APPVEYOR_BUILD_ID/$APPVEYOR_JOB_ID/\" --recursive --exclude \"*\" --include \"TEST_REPORT-*.json\" --region us-west-2\n\n  # notify task success\n  - sh: 'export AWS_ACCESS_KEY_ID=$CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID'\n  - sh: 'export AWS_SECRET_ACCESS_KEY=$CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY'\n  - sh: 'export AWS_SESSION_TOKEN=$CI_ACCESS_ROLE_AWS_SESSION_TOKEN'\n\n  - sh: 'aws stepfunctions send-task-success --task-token \"$TASK_TOKEN\" --task-output \"{}\" --region us-west-2'\n\nfor:\n  # Integ testing build\n  -\n    matrix:\n      only:\n        - configuration: BuildIntegTesting\n\n    test_script:\n      - sh: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'not java and not python and not provided' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingJavaPythonProvided\n\n    test_script:\n      - sh: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'java or python or provided' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-java-python-provided.json\"\n\n  # Integ testing build arm64 functions\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingArm64\n\n    test_script:\n      - sh: \"pytest -vv --reruns 3 tests/integration/buildcmd/test_build_cmd_arm64.py -m 'not java' --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64.json\"\n\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingArm64Java\n\n    test_script:\n      - sh: \"pytest -vv --reruns 3 tests/integration/buildcmd/test_build_cmd_arm64.py -m 'java' --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64-java.json\"\n\n  # Integ testing Terraform build\n  -\n    matrix:\n      only:\n        - configuration: AllTerraformBuildTesting\n\n    test_script:\n      # install Terraform\n      - sh: \"sudo apt update --allow-releaseinfo-change\"\n      - sh: \"TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \\\\\\\"\\\\,\\\\v | awk '{$1=$1};1'`\"\n      - sh: \"wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp\"\n      - sh: \"sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip\"\n      - sh: \"sudo mv /opt/terraform/terraform /usr/local/bin/\"\n      - sh: \"terraform -version\"\n\n      - sh: \"pytest -vv -n 4 --reruns 4 tests/integration/buildcmd/test_build_terraform_applications.py tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-terraform.json\"\n\n  # Integ testing package & delete\n  -\n    matrix:\n      only:\n        - configuration: PackageAndDeleteAndDeployIntegTesting\n\n    test_script:\n      - sh: \"pytest -vv tests/integration/package tests/integration/delete tests/integration/deploy --dist=loadgroup -n 4 --reruns 4 --json-report --json-report-file=TEST_REPORT-integration-package-delete-deploy.json\"\n\n  # Integ testing sync\n  -\n    matrix:\n      only:\n        - configuration: SyncIntegTesting\n\n    test_script:\n      - sh: \"pytest -vv tests/integration/sync -n 3 --reruns 3 --dist loadscope --json-report --json-report-file=TEST_REPORT-integration-sync.json\"\n\n  # Integ testing local\n  -\n    matrix:\n      only:\n        - configuration: LocalInvokeIntegTesting\n\n    test_script:\n      # install Terraform\n      - sh: \"sudo apt update --allow-releaseinfo-change\"\n      - sh: \"TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \\\\\\\"\\\\,\\\\v | awk '{$1=$1};1'`\"\n      - sh: \"wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp\"\n      - sh: \"sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip\"\n      - sh: \"sudo mv /opt/terraform/terraform /usr/local/bin/\"\n      - sh: \"terraform -version\"\n\n      - sh: \"pytest -vv --reruns 3 tests/integration/local/invoke tests/integration/local/generate_event --json-report --json-report-file=TEST_REPORT-integration-local.json\"\n\n  # Integ testing local\n  -\n    matrix:\n      only:\n        - configuration: LocalStartIntegTesting\n\n    test_script:\n      # install Terraform\n      - sh: \"sudo apt update --allow-releaseinfo-change\"\n      - sh: \"TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \\\\\\\"\\\\,\\\\v | awk '{$1=$1};1'`\"\n      - sh: \"wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp\"\n      - sh: \"sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip\"\n      - sh: \"sudo mv /opt/terraform/terraform /usr/local/bin/\"\n      - sh: \"terraform -version\"\n\n      - sh: \"pytest -vv --reruns 3 tests/integration/local/start_api tests/integration/local/start_lambda --json-report --json-report-file=TEST_REPORT-integration-local-start.json\"\n\n  # Other testing\n  -\n    matrix:\n      only:\n        - configuration: OtherAndEndToEndTesting\n\n    test_script:\n      - sh: \"pytest -vv -n 4 --reruns 4 --dist loadgroup tests/integration tests/end_to_end --ignore=tests/integration/buildcmd --ignore=tests/integration/delete --ignore=tests/integration/deploy --ignore=tests/integration/package --ignore=tests/integration/sync --ignore=tests/integration/local --json-report --json-report-file=TEST_REPORT-integration-others.json\"\n      - sh: \"pytest -vv --reruns 3 tests/regression --json-report --json-report-file=TEST_REPORT-regression.json\"\n"
        },
        {
          "name": "appveyor-ubuntu.yml",
          "type": "blob",
          "size": 11.9482421875,
          "content": "version: 1.0.{build}\nimage: \n  - Ubuntu2204\n\nconfiguration:\n  - BuildIntegTesting\n  - BuildIntegTestingJavaPythonProvided\n  - BuildIntegTestingArm64\n  - BuildIntegTestingArm64Java\n  - AllTerraformBuildTesting\n  - PackageAndDeleteAndDeployIntegTesting\n  - SyncIntegTesting\n  - LocalInvokeIntegTesting\n  - LocalStartIntegTesting\n  # other Integration testing, Dev, regression and smoke testing\n  - OtherAndEndToEndTesting\n\nenvironment:\n  PYTHON_HOME: \"$HOME/venv3.8/bin\"\n  PYTHON_VERSION: '3.8'\n  AWS_DEFAULT_REGION: us-east-1\n  SAM_CLI_DEV: 1\n  NODE_VERSION: \"18.18.2\"\n  AWS_S3: 'AWS_S3_TESTING'\n  AWS_ECR: 'AWS_ECR_TESTING'\n  CARGO_LAMBDA_VERSION: \"v0.17.1\"\n  PYTHON_ARCH: '64'\n  NOSE_PARAMETERIZED_NO_WARN: 1\n  APPVEYOR_CONSOLE_DISABLE_PTY: false\n  APPVEYOR_DETAILED_SHELL_LOGGING: true\n\ninstall:\n  # AppVeyor's apt-get cache might be outdated, and the package could potentially be 404.\n  - sh: \"sudo apt-get update --allow-releaseinfo-change\"\n\n  # install coretto 21\n  - sh: wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg\n  - sh: echo \"deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main\" | sudo tee /etc/apt/sources.list.d/corretto.list\n  - sh: sudo apt-get update; sudo apt-get install -y java-21-amazon-corretto-jdk\n  - sh: JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto\n  - sh: PATH=$JAVA_HOME/bin:$PATH\n  - sh: java --version\n  - sh: javac --version\n\n  - sh: \"gvm use go1.19\"\n  - sh: \"echo $PATH\"\n  - sh: \"ls /usr/\"\n  # install latest maven which is compatible with jdk17\n  - sh: \"sudo apt-get -y remove maven\"\n  - sh: \"wget https://dlcdn.apache.org/maven/maven-3/3.9.5/binaries/apache-maven-3.9.5-bin.zip -P /tmp\"\n  - sh: \"sudo unzip -d /opt/mvn /tmp/apache-maven-*.zip\"\n  - sh: \"PATH=/opt/mvn/apache-maven-3.9.5/bin:$PATH\"\n  - sh: \"mvn --version\"\n\n  - sh: \"source ${HOME}/venv${PYTHON_VERSION}/bin/activate\"\n  - sh: \"docker info\"\n  - sh: \"docker version\"\n  - sh: \"nvm install ${NODE_VERSION}\"\n  - sh: \"npm install npm@10.2.3 -g\"\n  - sh: \"npm -v\"\n\n  # Install latest gradle\n  - sh: \"sudo apt-get -y remove gradle\"\n  - sh: \"wget https://services.gradle.org/distributions/gradle-8.4-bin.zip -P /tmp\"\n  - sh: \"sudo unzip -d /opt/gradle /tmp/gradle-*.zip\"\n  - sh: \"PATH=/opt/gradle/gradle-8.4/bin:$PATH\"\n  - sh: \"gradle --version\"\n\n  # Install dotnet8 SDK\n  - sh: \"sudo apt-get update\"\n  - sh: \"sudo apt-get install -y dotnet-sdk-8.0\"\n\n  # Install AWS CLI\n  - sh: \"virtualenv aws_cli\"\n  - sh: \"./aws_cli/bin/python -m pip install awscli\"\n  - sh: \"PATH=$(echo $PWD'/aws_cli/bin'):$PATH\"\n\n  - sh: \"PATH=$PATH:$HOME/venv3.7/bin:$HOME/venv3.8/bin:$HOME/venv3.9/bin:$HOME/venv3.10/bin:$HOME/venv3.11/bin:$HOME/venv3.12/bin:$HOME/venv3.13/bin\"\n\n  # update ca-certificates which causes failures with newest golang library\n  - sh: \"sudo apt-get install --reinstall ca-certificates\"\n\n  # get testing env vars\n  - sh: \"sudo apt install -y jq\"\n\n  # install Rust\n  - sh: \"curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL https://sh.rustup.rs | sh -s -- --default-toolchain none -y > /dev/null 2>&1\"\n  - sh: \"source $HOME/.cargo/env\"\n  - sh: \"rustup toolchain install stable --profile minimal --no-self-update\"\n  - sh: \"rustup default stable\"\n  - sh: \"rustup target add x86_64-unknown-linux-gnu --toolchain stable\"\n  - sh: \"rustup target add aarch64-unknown-linux-gnu --toolchain stable\"\n  - sh: \"pip install cargo-lambda==$CARGO_LAMBDA_VERSION\"\n  - sh: \"rustc -V\"\n  - sh: \"cargo -V\"\n  - sh: \"cargo lambda -V\"\n\n  - sh: \"python3.9 -m venv .venv_env_vars\"\n  - sh: \".venv_env_vars/bin/pip install boto3\"\n  - sh: \"test_env_var=$(.venv_env_vars/bin/python tests/get_testing_resources.py)\"\n  - sh: '\n    if [ $? -ne 0 ]; then\n      echo \"get_testing_resources failed. Failed to acquire credentials or test resources.\";\n      false;\n    fi\n  '\n\n  - sh: 'export CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID'\n  - sh: 'export CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY'\n  - sh: 'export CI_ACCESS_ROLE_AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN'\n\n  - sh: 'export AWS_ACCESS_KEY_ID=$(echo \"$test_env_var\" | jq -j \".accessKeyID\")'\n  - sh: 'export AWS_SECRET_ACCESS_KEY=$(echo \"$test_env_var\" | jq -j \".secretAccessKey\")'\n  - sh: 'export AWS_SESSION_TOKEN=$(echo \"$test_env_var\" | jq -j \".sessionToken\")'\n  - sh: 'export TASK_TOKEN=$(echo \"$test_env_var\" | jq -j \".taskToken\")'\n  - sh: 'export AWS_S3_TESTING=$(echo \"$test_env_var\" | jq -j \".TestBucketName\")'\n  - sh: 'export AWS_ECR_TESTING=$(echo \"$test_env_var\" | jq -j \".TestECRURI\")'\n  - sh: 'export AWS_KMS_KEY=$(echo \"$test_env_var\" | jq -j \".TestKMSKeyArn\")'\n  - sh: 'export AWS_SIGNING_PROFILE_NAME=$(echo \"$test_env_var\" | jq -j \".TestSigningProfileName\")'\n  - sh: 'export AWS_SIGNING_PROFILE_VERSION_ARN=$(echo \"$test_env_var\" | jq -j \".TestSigningProfileARN\")'\n\n  # required for RIE with arm64 in linux\n  - sh: \"\n    if [[ -n $BY_CANARY ]] && [[ -n $DOCKER_USER ]] && [[ -n $DOCKER_PASS ]];\n      then echo Logging in Docker Hub; echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin registry-1.docker.io;\n    fi\"\n  - sh: \"\n    if [[ -n $BY_CANARY ]] && [[ -n $DOCKER_USER ]] && [[ -n $DOCKER_PASS ]];\n      then echo Logging in Docker Hub; echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin;\n    fi\"\n  - sh: \"docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\"\n\n\n  # Runs only in Linux, logging Public ECR when running canary and cred is available\n  - sh: \"\n    if [[ -n $BY_CANARY ]];\n      then echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;\n    fi\"\n\n\nbuild_script:\n    - \"python -c \\\"import sys; print(sys.executable)\\\"\"\n    - \"make init\"\n\n# Final clean up no matter success or failure\non_finish:\n  # Upload test reports as artifacts\n  - sh: find \"$APPVEYOR_BUILD_FOLDER\" -type f -name 'TEST_REPORT-*.json' -print0 | xargs -0 -I '{}' appveyor PushArtifact '{}'\n  - sh: >\n      AWS_ACCESS_KEY_ID=$TEST_REPORT_S3_BUCKET_ACCESS_KEY_ID \n      AWS_SECRET_ACCESS_KEY=$TEST_REPORT_S3_BUCKET_SECRET_ACCESS_KEY \n      AWS_SESSION_TOKEN=$TEST_REPORT_S3_BUCKET_SESSION_TOKEN \n      aws s3 cp \"$APPVEYOR_BUILD_FOLDER\" \"s3://$TEST_REPORT_S3_BUCKET_NAME/appveyor/$APPVEYOR_PROJECT_SLUG/$APPVEYOR_BUILD_ID/$APPVEYOR_JOB_ID/\" --recursive --exclude \"*\" --include \"TEST_REPORT-*.json\" --region us-west-2\n\n  # notify task success\n  - sh: 'export AWS_ACCESS_KEY_ID=$CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID'\n  - sh: 'export AWS_SECRET_ACCESS_KEY=$CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY'\n  - sh: 'export AWS_SESSION_TOKEN=$CI_ACCESS_ROLE_AWS_SESSION_TOKEN'\n\n  - sh: 'aws stepfunctions send-task-success --task-token \"$TASK_TOKEN\" --task-output \"{}\" --region us-west-2'\n\nfor:\n  # Integ testing build\n  -\n    matrix:\n      only:\n        - configuration: BuildIntegTesting\n\n    test_script:\n      - sh: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'not java and not python and not provided' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingJavaPythonProvided\n\n    test_script:\n      - sh: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'java or python or provided' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-java-python-provided.json\"\n\n  # Integ testing build arm64 functions\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingArm64\n\n    test_script:\n      - sh: \"pytest -vv --reruns 3 tests/integration/buildcmd/test_build_cmd_arm64.py -m 'not java' --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64.json\"\n\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingArm64Java\n\n    test_script:\n      - sh: \"pytest -vv --reruns 3 tests/integration/buildcmd/test_build_cmd_arm64.py -m 'java' --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64-java.json\"\n\n  # Integ testing Terraform build\n  -\n    matrix:\n      only:\n        - configuration: AllTerraformBuildTesting\n\n    test_script:\n      # install Terraform\n      - sh: \"sudo apt update --allow-releaseinfo-change\"\n      - sh: \"TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \\\\\\\"\\\\,\\\\v | awk '{$1=$1};1'`\"\n      - sh: \"wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp\"\n      - sh: \"sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip\"\n      - sh: \"sudo mv /opt/terraform/terraform /usr/local/bin/\"\n      - sh: \"terraform -version\"\n\n      - sh: \"pytest -vv -n 4 --reruns 4 tests/integration/buildcmd/test_build_terraform_applications.py tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  # Integ testing package & delete\n  -\n    matrix:\n      only:\n        - configuration: PackageAndDeleteAndDeployIntegTesting\n\n    test_script:\n      - sh: \"pytest -vv tests/integration/package tests/integration/delete tests/integration/deploy --dist=loadgroup -n 4 --reruns 4 --json-report --json-report-file=TEST_REPORT-integration-package-delete-deploy.json\"\n\n  # Integ testing sync\n  -\n    matrix:\n      only:\n        - configuration: SyncIntegTesting\n\n    test_script:\n      - sh: \"pytest -vv tests/integration/sync -n 3 --reruns 3 --dist loadscope --json-report --json-report-file=TEST_REPORT-integration-sync.json\"\n\n  # Integ testing local\n  -\n    matrix:\n      only:\n        - configuration: LocalInvokeIntegTesting\n\n    test_script:\n      # install Terraform\n      - sh: \"sudo apt update --allow-releaseinfo-change\"\n      - sh: \"TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \\\\\\\"\\\\,\\\\v | awk '{$1=$1};1'`\"\n      - sh: \"wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp\"\n      - sh: \"sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip\"\n      - sh: \"sudo mv /opt/terraform/terraform /usr/local/bin/\"\n      - sh: \"terraform -version\"\n\n      - sh: \"pytest -vv --reruns 3 tests/integration/local/invoke tests/integration/local/generate_event --json-report --json-report-file=TEST_REPORT-integration-local.json\"\n\n  # Integ testing local\n  -\n    matrix:\n      only:\n        - configuration: LocalStartIntegTesting\n\n    test_script:\n      # install Terraform\n      - sh: \"sudo apt update --allow-releaseinfo-change\"\n      - sh: \"TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \\\\\\\"\\\\,\\\\v | awk '{$1=$1};1'`\"\n      - sh: \"wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp\"\n      - sh: \"sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip\"\n      - sh: \"sudo mv /opt/terraform/terraform /usr/local/bin/\"\n      - sh: \"terraform -version\"\n\n      - sh: \"pytest -vv --reruns 3 tests/integration/local/start_api tests/integration/local/start_lambda --json-report --json-report-file=TEST_REPORT-integration-local-start.json\"\n\n  # Other testing\n  -\n    matrix:\n      only:\n        - configuration: OtherAndEndToEndTesting\n\n    test_script:\n      - sh: \"pytest -vv -n 4 --reruns 4 --dist loadgroup tests/integration tests/end_to_end --ignore=tests/integration/buildcmd --ignore=tests/integration/delete --ignore=tests/integration/deploy --ignore=tests/integration/package --ignore=tests/integration/sync --ignore=tests/integration/local --json-report --json-report-file=TEST_REPORT-integration-others.json\"\n      - sh: \"pytest -vv --reruns 3 tests/regression --json-report --json-report-file=TEST_REPORT-regression.json\"\n"
        },
        {
          "name": "appveyor-windows-al2023.yml",
          "type": "blob",
          "size": 6.779296875,
          "content": "version: 1.0.{build}\nimage: ws2022-azure\nbuild: off\n\nclone_folder: C:\\source\n\nenvironment:\n  AWS_DEFAULT_REGION: us-east-1\n  SAM_CLI_DEV: 1\n  CARGO_LAMBDA_VERSION: \"v0.17.1\"\n\n  # Python uses $TMPDIR envvar to find root of tempdir\n  TMPDIR: \"%TEMP%\"\n  TMP: \"%TEMP%\"\n\n  # MSI Installers only use Py3.8. It is sufficient to test with this version here.\n  PYTHON_HOME: \"C:\\\\Python38-x64\"\n  PYTHON_SCRIPTS: \"C:\\\\Python38-x64\\\\Scripts\"\n  PYTHON_EXE: \"C:\\\\Python38-x64\\\\python.exe\"\n  PYTHON_ARCH: \"64\"\n  HOME: 'C:\\Users\\appveyor'\n  HOMEDRIVE: \"C:\"\n  HOMEPATH: 'C:\\Users\\appveyor'\n  NOSE_PARAMETERIZED_NO_WARN: 1\n  AWS_S3: \"AWS_S3_TESTING\"\n  AWS_ECR: \"AWS_ECR_TESTING\"\n  APPVEYOR_CONSOLE_DISABLE_PTY: true\n  APPVEYOR_BUILD_WORKER_IMAGE: \"ws2022-azure\"\n\ninit:\n  # Uncomment this for RDP\n  # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n  - ps: gcim Win32_Processor | % { \"$($_.NumberOfLogicalProcessors) logical CPUs\" }\n  - ps: gcim Win32_OperatingSystem | % { \"$([int]($_.TotalVisibleMemorySize/1mb)) Gb\" }\n  - git config --global core.autocrlf false\n  - ps: New-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n  - ps: git config --system core.longpaths true\n\ninstall:\n  # upgrade chocolately\n  - choco upgrade chocolatey\n  # setup make\n  - \"choco install make\"\n  # setup Java, Maven and Gradle\n  - choco install correttojdk --version=21.0.0\n  - 'set JAVA_HOME=C:\\Program Files\\Amazon Corretto\\jdk21.0.0_35'\n  - 'set PATH=%JAVA_HOME%\\bin;%PATH%'\n  - java --version\n  - javac --version\n  - choco upgrade gradle --version=8.4.0\n  - \"gradle -v\"\n  - \"mvn --version\"\n\n  # Make sure the temp directory exists for Python to use.\n  - ps: \"mkdir -Force C:\\\\tmp\"\n  - \"python --version\"\n  - 'set PATH=%PYTHON_HOME%;C:\\Ruby33-x64\\bin;C:\\Ruby32-x64\\bin;%PATH%;C:\\Python39-x64;C:\\Python310-x64;C:\\Python311-x64;C:\\Python312-x64;C:\\Python313-x64'\n  - \"node --version\"\n  - \"echo %PYTHON_HOME%\"\n  - \"echo %PATH%\"\n  - \"python --version\"\n  - \"ruby --version\"\n  - ps: \"Restart-Service docker\"\n  # Switch to Docker Linux containers\n  - ps: '& $Env:ProgramFiles\\Docker\\Docker\\DockerCli.exe -SwitchLinuxEngine'\n  - \"docker info\"\n  - \"docker version\"\n\n  # Upgrade setuptools, wheel and virtualenv\n  - \"python -m pip install --upgrade setuptools wheel virtualenv\"\n\n  # Install Node 20\n  - ps: \"Install-Product node 20\"\n\n  # Install AWS CLI Globally via pip3\n  - \"pip install awscli\"\n\n  # Check for git executable\n  - \"git --version\"\n\n  # Get testing env vars\n  - ps: \"\n  If (Test-Path env:BY_CANARY){\n    python -m virtualenv venv_env_vars;\n    ./venv_env_vars/Scripts/pip install boto3;\n    $test_env_var = ./venv_env_vars/Scripts/python tests/get_testing_resources.py;\n    $test_env_var_json = ConvertFrom-Json $test_env_var;\n\n    $env:CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID = $env:AWS_ACCESS_KEY_ID;\n    $env:CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY = $env:AWS_SECRET_ACCESS_KEY;\n    $env:CI_ACCESS_ROLE_AWS_SESSION_TOKEN = $env:AWS_SESSION_TOKEN;\n\n    $env:AWS_ACCESS_KEY_ID = $test_env_var_json.accessKeyID;\n    $env:AWS_SECRET_ACCESS_KEY = $test_env_var_json.secretAccessKey;\n    $env:AWS_SESSION_TOKEN = $test_env_var_json.sessionToken;\n    $env:TASK_TOKEN = $test_env_var_json.taskToken;\n    $env:AWS_S3_TESTING = $test_env_var_json.TestBucketName;\n    $env:AWS_ECR_TESTING = $test_env_var_json.TestECRURI;\n    $env:AWS_KMS_KEY = $test_env_var_json.TestKMSKeyArn;\n    $env:AWS_SIGNING_PROFILE_NAME = $test_env_var_json.TestSigningProfileName;\n    $env:AWS_SIGNING_PROFILE_VERSION_ARN = $test_env_var_json.TestSigningProfileARN;\n  }\"\n\n\n  # Create new virtual environment with chosen python version and activate it\n  - \"python -m virtualenv venv\"\n  - \"venv\\\\Scripts\\\\activate\"\n  - \"python --version\"\n\n  # Actually install SAM CLI's dependencies\n  - 'pip install -e \".[dev]\"'\n\n  # Install aws cli\n  - \"pip install awscli\"\n\n  # Echo final Path\n  - \"echo %PATH%\"\n\n  # use amazon-ecr-credential-helper\n  - choco install amazon-ecr-credential-helper\n  - ps: \"ls $env:HOME/.docker\"\n  - ps: \"\n    $docker_config = Get-Content $env:HOME/.docker/config.json -raw | ConvertFrom-Json;\n    $docker_config.credsStore = 'ecr-login';\n    $docker_config | ConvertTo-Json | set-content $env:HOME/.docker/config.json;\n  \"\n  - ps: \"get-content $env:HOME/.docker/config.json\"\n\n  # claim some disk space before starting the tests\n  - \"docker system prune -a -f\"\n  # activate virtual environment\n  - \"venv\\\\Scripts\\\\activate\"\n\n\n\n# Final clean up no matter success or failure\non_finish:\n  # Upload test reports as artifacts\n  - ps: Get-ChildItem .\\TEST_REPORT-*.json | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n  - ps: '\n  If (Test-Path env:BY_CANARY){\n    $env:AWS_ACCESS_KEY_ID = $env:TEST_REPORT_S3_BUCKET_ACCESS_KEY_ID;\n    $env:AWS_SECRET_ACCESS_KEY = $env:TEST_REPORT_S3_BUCKET_SECRET_ACCESS_KEY;\n    $env:AWS_SESSION_TOKEN = $env:TEST_REPORT_S3_BUCKET_SESSION_TOKEN;\n    aws s3 cp \".\\\" \"s3://$env:TEST_REPORT_S3_BUCKET_NAME/appveyor/$env:APPVEYOR_PROJECT_SLUG/$env:APPVEYOR_BUILD_ID/$env:APPVEYOR_JOB_ID/\" --recursive --exclude \"*\" --include \"TEST_REPORT-*.json\" --region us-west-2\n  }'\n\n  # notify success\n  - ps: \"\n  If (Test-Path env:BY_CANARY){\n    $env:AWS_ACCESS_KEY_ID = $env:CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID;\n    $env:AWS_SECRET_ACCESS_KEY = $env:CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY;\n    $env:AWS_SESSION_TOKEN = $env:CI_ACCESS_ROLE_AWS_SESSION_TOKEN;\n    aws stepfunctions send-task-success --task-token \\\"$env:TASK_TOKEN\\\" --task-output \\\"{}\\\" --region us-west-2;\n  }\"\n\nbuild_script:\n  # install Rust in build_script to not override the default \"install\" actions\n  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n  - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable\n  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n  - set RUST_BACKTRACE=1\n  - rustup toolchain install stable --profile minimal --no-self-update\n  - rustup default stable\n  - rustup target add x86_64-unknown-linux-gnu --toolchain stable\n  - rustup target add aarch64-unknown-linux-gnu --toolchain stable\n  - ps: \"choco install zig\"\n  - ps: Invoke-WebRequest -Uri https://github.com/cargo-lambda/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION.windows-x64.zip -OutFile C:\\Users\\appveyor\\cargo-lambda.zip\n  - ps: Expand-Archive -DestinationPath C:\\Users\\appveyor\\.cargo\\bin C:\\Users\\appveyor\\cargo-lambda.zip\n  - rustc -V\n  - cargo -V\n  - cargo lambda -V\n\ntest_script:\n  - ps: \"pytest -vv -n 2 --reruns 3 -m 'al2023' tests/integration/buildcmd --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n# Uncomment for RDP\n# on_finish:\n#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n  \n"
        },
        {
          "name": "appveyor-windows-binary.yml",
          "type": "blob",
          "size": 12.7470703125,
          "content": "version: 1.0.{build}\nimage: Visual Studio 2022\nbuild: off\n\nclone_folder: C:\\source\n\nconfiguration:\n  - BuildIntegTesting\n  - BuildIntegTestingJavaPythonProvided\n  - BuildIntegTestingArm64\n  - AllTerraformBuildTesting\n  - PackageAndDeleteAndDeployIntegTesting\n  - SyncIntegTesting\n  - LocalInvokeIntegTesting\n  - LocalStartApiIntegTesting\n  - LocalStartLambdaIntegTesting\n  # other Integration testing, Dev, regression and smoke testing\n  - OtherAndEndToEndTesting\n\nenvironment:\n  AWS_DEFAULT_REGION: us-east-1\n  CARGO_LAMBDA_VERSION: \"v0.17.1\"\n\n  # Python uses $TMPDIR envvar to find root of tempdir\n  TMPDIR: \"%TEMP%\"\n  TMP: \"%TEMP%\"\n\n  # MSI Installers only use Py3.11. It is sufficient to test with this version here.\n  PYTHON_HOME: \"C:\\\\Python311-x64\"\n  PYTHON_SCRIPTS: \"C:\\\\Python311-x64\\\\Scripts\"\n  PYTHON_EXE: \"C:\\\\Python311-x64\\\\python.exe\"\n  PYTHON_ARCH: \"64\"\n  HOME: 'C:\\Users\\appveyor'\n  HOMEDRIVE: \"C:\"\n  HOMEPATH: 'C:\\Users\\appveyor'\n  NOSE_PARAMETERIZED_NO_WARN: 1\n  AWS_S3: \"AWS_S3_TESTING\"\n  AWS_ECR: \"AWS_ECR_TESTING\"\n  APPVEYOR_CONSOLE_DISABLE_PTY: true\n\n  SAM_WINDOWS_BINARY_PATH: \"C:\\\\Program Files\\\\Amazon\\\\AWSSAMCLI_NIGHTLY\\\\bin\\\\sam-nightly.cmd\"\n\ninit:\n  # Uncomment this for RDP\n  # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n  - ps: gcim Win32_Processor | % { \"$($_.NumberOfLogicalProcessors) logical CPUs\" }\n  - ps: gcim Win32_OperatingSystem | % { \"$([int]($_.TotalVisibleMemorySize/1mb)) Gb\" }\n  - git config --global core.autocrlf false\n  - ps: New-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n  - ps: git config --system core.longpaths true\n\ninstall:\n  # upgrade chocolately\n  - choco upgrade chocolatey\n  # setup make\n  - \"choco install make\"\n  # setup Java, Maven and Gradle\n  - choco install correttojdk --version=21.0.0\n  - 'set JAVA_HOME=C:\\Program Files\\Amazon Corretto\\jdk21.0.0_35'\n  - 'set PATH=%JAVA_HOME%\\bin;%PATH%'\n  - java --version\n  - javac --version\n  - choco upgrade gradle --version=8.4.0\n  - \"gradle -v\"\n  - \"mvn --version\"\n  - choco install ruby --version=3.3.0.1\n\n  # Make sure the temp directory exists for Python to use.\n  - ps: \"mkdir -Force C:\\\\tmp\"\n  - 'set PATH=%PYTHON_HOME%;C:\\Ruby32-x64\\bin;%PATH%;C:\\Python39-x64;C:\\Python310-x64;C:\\Python38-x64;C:\\Python312-x64;C:\\Python313-x64'\n  - \"echo %PYTHON_HOME%\"\n  - \"echo %PATH%\"\n  - \"python --version\"\n  - ps: \"Restart-Service docker\"\n  # Switch to Docker Linux containers\n  - ps: Switch-DockerLinux\n  - \"docker info\"\n  - \"docker version\"\n\n  # Upgrade setuptools, wheel and virtualenv\n  - \"python -m pip install --upgrade setuptools wheel virtualenv\"\n  # Install pip for the python versions which is used by the tests\n  - \"C:\\\\Python39-x64\\\\python.exe -m pip install --upgrade pip\"\n  - \"C:\\\\Python310-x64\\\\python.exe -m pip install --upgrade pip\"\n\n  # Install AWS CLI Globally via pip3\n  - \"pip install awscli\"\n\n  # Check for git executable\n  - \"git --version\"\n\n  # Get testing env vars\n  - ps: \"\n  If (Test-Path env:BY_CANARY){\n    python -m virtualenv venv_env_vars;\n    ./venv_env_vars/Scripts/pip install boto3;\n    $test_env_var = ./venv_env_vars/Scripts/python tests/get_testing_resources.py;\n    $test_env_var_json = ConvertFrom-Json $test_env_var;\n\n    $env:CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID = $env:AWS_ACCESS_KEY_ID;\n    $env:CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY = $env:AWS_SECRET_ACCESS_KEY;\n    $env:CI_ACCESS_ROLE_AWS_SESSION_TOKEN = $env:AWS_SESSION_TOKEN;\n\n    $env:AWS_ACCESS_KEY_ID = $test_env_var_json.accessKeyID;\n    $env:AWS_SECRET_ACCESS_KEY = $test_env_var_json.secretAccessKey;\n    $env:AWS_SESSION_TOKEN = $test_env_var_json.sessionToken;\n    $env:TASK_TOKEN = $test_env_var_json.taskToken;\n    $env:AWS_S3_TESTING = $test_env_var_json.TestBucketName;\n    $env:AWS_ECR_TESTING = $test_env_var_json.TestECRURI;\n    $env:AWS_KMS_KEY = $test_env_var_json.TestKMSKeyArn;\n    $env:AWS_SIGNING_PROFILE_NAME = $test_env_var_json.TestSigningProfileName;\n    $env:AWS_SIGNING_PROFILE_VERSION_ARN = $test_env_var_json.TestSigningProfileARN;\n  }\"\n\n\n  # Create new virtual environment with chosen python version and activate it\n  - \"python -m virtualenv venv\"\n  - \"venv\\\\Scripts\\\\activate\"\n  - \"python --version\"\n\n  # Install testing pre-reqs without installing sam-cli from source\n  - pip install -r requirements/pre-dev.txt\"\n  - pip install -r requirements/dev.txt\"\n  - pip install -r requirements/base.txt\n  - pytest --version\n\n  # Install aws cli\n  - \"pip install awscli\"\n\n  # Install aws-sam-cli MSI binary\n  - ps: \"\n    Invoke-WebRequest -Uri https://github.com/aws/aws-sam-cli/releases/download/sam-cli-nightly/AWS_SAM_CLI_64_PY3.msi -OutFile aws-sam-cli-installer.msi;\n    Start-Process 'C:\\\\Windows\\\\System32\\\\msiexec.exe' -ArgumentList '/i aws-sam-cli-installer.msi /qn /norestart' -wait -PassThru;\n  \"\n  - 'set PATH=C:\\Program Files\\Amazon\\AWSSAMCLI_NIGHTLY\\bin\\;%PATH%'\n  - 'sam-nightly --version'\n\n  # Echo final Path\n  - \"echo %PATH%\"\n\n  # use amazon-ecr-credential-helper\n  - choco install amazon-ecr-credential-helper\n  - ps: \"\n    $docker_config = Get-Content $env:HOME/.docker/config.json -raw | ConvertFrom-Json;\n    $docker_config.credsStore = 'ecr-login';\n    $docker_config | ConvertTo-Json | set-content $env:HOME/.docker/config.json;\n  \"\n  - ps: \"get-content $env:HOME/.docker/config.json\"\n\n  # claim some disk space before starting the tests\n  - \"docker system prune -a -f\"\n\n\n# Final clean up no matter success or failure\non_finish:\n  # Upload test reports as artifacts\n  - ps: Get-ChildItem .\\TEST_REPORT-*.json | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n  - ps: '\n  If (Test-Path env:BY_CANARY){\n    $env:AWS_ACCESS_KEY_ID = $env:TEST_REPORT_S3_BUCKET_ACCESS_KEY_ID;\n    $env:AWS_SECRET_ACCESS_KEY = $env:TEST_REPORT_S3_BUCKET_SECRET_ACCESS_KEY;\n    $env:AWS_SESSION_TOKEN = $env:TEST_REPORT_S3_BUCKET_SESSION_TOKEN;\n    aws s3 cp \".\\\" \"s3://$env:TEST_REPORT_S3_BUCKET_NAME/appveyor/$env:APPVEYOR_PROJECT_SLUG/$env:APPVEYOR_BUILD_ID/$env:APPVEYOR_JOB_ID/\" --recursive --exclude \"*\" --include \"TEST_REPORT-*.json\" --region us-west-2\n  }'\n\n  # notify success\n  - ps: \"\n  If (Test-Path env:BY_CANARY){\n    $env:AWS_ACCESS_KEY_ID = $env:CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID;\n    $env:AWS_SECRET_ACCESS_KEY = $env:CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY;\n    $env:AWS_SESSION_TOKEN = $env:CI_ACCESS_ROLE_AWS_SESSION_TOKEN;\n    aws stepfunctions send-task-success --task-token \\\"$env:TASK_TOKEN\\\" --task-output \\\"{}\\\" --region us-west-2;\n  }\"\n\n\nfor:\n  #Integ testing build\n  - matrix:\n      only:\n        - configuration: BuildIntegTesting\n\n    test_script:\n      - ps: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'not java and not python and not provided and not al2023' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingJavaPythonProvided\n\n    build_script:\n      # install Rust in build_script to not override the default \"install\" actions\n      - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n      - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable\n      - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n      - set RUST_BACKTRACE=1\n      - rustup toolchain install stable --profile minimal --no-self-update\n      - rustup default stable\n      - rustup target add x86_64-unknown-linux-gnu --toolchain stable\n      - rustup target add aarch64-unknown-linux-gnu --toolchain stable\n      - ps: \"choco install zig\"\n      - ps: Invoke-WebRequest -Uri https://github.com/cargo-lambda/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION.windows-x64.zip -OutFile C:\\Users\\appveyor\\cargo-lambda.zip\n      - ps: Expand-Archive -DestinationPath C:\\Users\\appveyor\\.cargo\\bin C:\\Users\\appveyor\\cargo-lambda.zip\n      - rustc -V\n      - cargo -V\n      - cargo lambda -V\n\n    test_script:\n      - ps: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'java and not al2023 or python and not al2023 or provided and not al2023' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-java-python-provided.json\"\n\n  #Integ testing build arm64\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingArm64\n\n    build_script:\n      # install Rust in build_script to not override the default \"install\" actions\n      - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n      - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable\n      - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n      - set RUST_BACKTRACE=1\n      - rustup toolchain install stable --profile minimal --no-self-update\n      - rustup default stable\n      - rustup target add x86_64-unknown-linux-gnu --toolchain stable\n      - rustup target add aarch64-unknown-linux-gnu --toolchain stable\n      - ps: \"choco install zig\"\n      - ps: Invoke-WebRequest -Uri https://github.com/cargo-lambda/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION.windows-x64.zip -OutFile C:\\Users\\appveyor\\cargo-lambda.zip\n      - ps: Expand-Archive -DestinationPath C:\\Users\\appveyor\\.cargo\\bin C:\\Users\\appveyor\\cargo-lambda.zip\n      - rustc -V\n      - cargo -V\n      - cargo lambda -V\n\n    test_script:\n      - ps: \"pytest -vv --reruns 3 -m 'not al2023' tests/integration/buildcmd/test_build_cmd_arm64.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64.json\"\n\n  #Integ testing Terraform build\n  - matrix:\n      only:\n        - configuration: AllTerraformBuildTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv -n 4 --reruns 4 tests/integration/buildcmd/test_build_terraform_applications.py tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  # Integ testing package, delete and deploy\n  - matrix:\n      only:\n        - configuration: PackageAndDeleteAndDeployIntegTesting\n\n    test_script:\n      - ps: \"pytest -vv tests/integration/package tests/integration/delete tests/integration/deploy --dist=loadgroup -n 4 --reruns 4 --json-report --json-report-file=TEST_REPORT-integration-package-delete.json\"\n\n  # Integ testing sync\n  - matrix:\n      only:\n        - configuration: SyncIntegTesting\n\n    test_script:\n      - ps: \"pytest -vv tests/integration/sync -n 3 --reruns 3 --dist loadscope --json-report --json-report-file=TEST_REPORT-integration-sync.json\"\n\n  #Integ testing local invoke and generate event\n  - matrix:\n      only:\n        - configuration: LocalInvokeIntegTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv --reruns 3 tests/integration/local/invoke tests/integration/local/generate_event --json-report --json-report-file=TEST_REPORT-integration-local.json\"\n\n  #Integ testing local start-api\n  - matrix:\n      only:\n        - configuration: LocalStartApiIntegTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv --reruns 3 tests/integration/local/start_api --json-report --json-report-file=TEST_REPORT-integration-local-api.json\"\n\n  #Integ testing local start-lambda\n  - matrix:\n      only:\n        - configuration: LocalStartLambdaIntegTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv --reruns 3 tests/integration/local/start_lambda --json-report --json-report-file=TEST_REPORT-integration-local-lambda.json\"\n\n  #Other testing\n  - matrix:\n      only:\n        - configuration: OtherAndEndToEndTesting\n\n    test_script:\n      - ps: \"pytest -vv -n 4 --reruns 4 --dist loadgroup tests/integration tests/end_to_end --ignore=tests/integration/buildcmd --ignore=tests/integration/delete --ignore=tests/integration/deploy --ignore=tests/integration/package --ignore=tests/integration/sync --ignore=tests/integration/local --json-report --json-report-file=TEST_REPORT-integration-others.json\"\n      - ps: \"pytest -vv --reruns 3 tests/regression --json-report --json-report-file=TEST_REPORT-regression.json\"\n# Uncomment for RDP\n# on_finish:\n#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n  \n"
        },
        {
          "name": "appveyor-windows.yml",
          "type": "blob",
          "size": 12.166015625,
          "content": "version: 1.0.{build}\nimage: Visual Studio 2022\nbuild: off\n\nclone_folder: C:\\source\n\nconfiguration:\n  - BuildIntegTesting\n  - BuildIntegTestingJavaPythonProvided\n  - BuildIntegTestingArm64\n  - AllTerraformBuildTesting\n  - PackageAndDeleteAndDeployIntegTesting\n  - SyncIntegTesting\n  - LocalInvokeIntegTesting\n  - LocalStartApiIntegTesting\n  - LocalStartLambdaIntegTesting\n  # other Integration testing, Dev, regression and smoke testing\n  - OtherAndEndToEndTesting\n\nenvironment:\n  AWS_DEFAULT_REGION: us-east-1\n  SAM_CLI_DEV: 1\n  CARGO_LAMBDA_VERSION: \"v0.17.1\"\n\n  # Python uses $TMPDIR envvar to find root of tempdir\n  TMPDIR: \"%TEMP%\"\n  TMP: \"%TEMP%\"\n\n  # MSI Installers only use Py3.8. It is sufficient to test with this version here.\n  PYTHON_HOME: \"C:\\\\Python38-x64\"\n  PYTHON_SCRIPTS: \"C:\\\\Python38-x64\\\\Scripts\"\n  PYTHON_EXE: \"C:\\\\Python38-x64\\\\python.exe\"\n  PYTHON_ARCH: \"64\"\n  HOME: 'C:\\Users\\appveyor'\n  HOMEDRIVE: \"C:\"\n  HOMEPATH: 'C:\\Users\\appveyor'\n  NOSE_PARAMETERIZED_NO_WARN: 1\n  AWS_S3: \"AWS_S3_TESTING\"\n  AWS_ECR: \"AWS_ECR_TESTING\"\n  APPVEYOR_CONSOLE_DISABLE_PTY: true\n\ninit:\n  # Uncomment this for RDP\n  # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n  - ps: gcim Win32_Processor | % { \"$($_.NumberOfLogicalProcessors) logical CPUs\" }\n  - ps: gcim Win32_OperatingSystem | % { \"$([int]($_.TotalVisibleMemorySize/1mb)) Gb\" }\n  - git config --global core.autocrlf false\n  - ps: New-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n  - ps: git config --system core.longpaths true\n\ninstall:\n  # upgrade chocolately\n  - choco upgrade chocolatey\n  # setup make\n  - \"choco install make\"\n  # setup Java, Maven and Gradle\n  - choco install correttojdk --version=21.0.0\n  - 'set JAVA_HOME=C:\\Program Files\\Amazon Corretto\\jdk21.0.0_35'\n  - 'set PATH=%JAVA_HOME%\\bin;%PATH%'\n  - java --version\n  - javac --version\n  - choco upgrade gradle --version=8.4.0\n  - \"gradle -v\"\n  - \"mvn --version\"\n  - choco install ruby --version=3.3.0.1\n\n  # Make sure the temp directory exists for Python to use.\n  - ps: \"mkdir -Force C:\\\\tmp\"\n  - 'set PATH=%PYTHON_HOME%;C:\\Ruby32-x64\\bin;%PATH%;C:\\Python39-x64;C:\\Python310-x64;C:\\Python311-x64;C:\\Python312-x64;C:\\Python313-x64'\n  - \"echo %PYTHON_HOME%\"\n  - \"echo %PATH%\"\n  - \"python --version\"\n  - ps: \"Restart-Service docker\"\n  # Switch to Docker Linux containers\n  - ps: Switch-DockerLinux\n  - \"docker info\"\n  - \"docker version\"\n\n  # Upgrade setuptools, wheel and virtualenv\n  - \"python -m pip install --upgrade setuptools wheel virtualenv\"\n  # Install pip for the python versions which is used by the tests\n  - \"C:\\\\Python39-x64\\\\python.exe -m pip install --upgrade pip\"\n  - \"C:\\\\Python310-x64\\\\python.exe -m pip install --upgrade pip\"\n\n  # Install AWS CLI Globally via pip3\n  - \"pip install awscli\"\n\n  # Check for git executable\n  - \"git --version\"\n\n  # Get testing env vars\n  - ps: \"\n  If (Test-Path env:BY_CANARY){\n    python -m virtualenv venv_env_vars;\n    ./venv_env_vars/Scripts/pip install boto3;\n    $test_env_var = ./venv_env_vars/Scripts/python tests/get_testing_resources.py;\n    $test_env_var_json = ConvertFrom-Json $test_env_var;\n\n    $env:CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID = $env:AWS_ACCESS_KEY_ID;\n    $env:CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY = $env:AWS_SECRET_ACCESS_KEY;\n    $env:CI_ACCESS_ROLE_AWS_SESSION_TOKEN = $env:AWS_SESSION_TOKEN;\n\n    $env:AWS_ACCESS_KEY_ID = $test_env_var_json.accessKeyID;\n    $env:AWS_SECRET_ACCESS_KEY = $test_env_var_json.secretAccessKey;\n    $env:AWS_SESSION_TOKEN = $test_env_var_json.sessionToken;\n    $env:TASK_TOKEN = $test_env_var_json.taskToken;\n    $env:AWS_S3_TESTING = $test_env_var_json.TestBucketName;\n    $env:AWS_ECR_TESTING = $test_env_var_json.TestECRURI;\n    $env:AWS_KMS_KEY = $test_env_var_json.TestKMSKeyArn;\n    $env:AWS_SIGNING_PROFILE_NAME = $test_env_var_json.TestSigningProfileName;\n    $env:AWS_SIGNING_PROFILE_VERSION_ARN = $test_env_var_json.TestSigningProfileARN;\n  }\"\n\n\n  # Create new virtual environment with chosen python version and activate it\n  - \"python -m virtualenv venv\"\n  - \"venv\\\\Scripts\\\\activate\"\n  - \"python --version\"\n\n  # Actually install SAM CLI's dependencies\n  - 'pip install -e \".[dev]\"'\n\n  # Install aws cli\n  - \"pip install awscli\"\n\n  # Echo final Path\n  - \"echo %PATH%\"\n\n  # use amazon-ecr-credential-helper\n  - choco install amazon-ecr-credential-helper\n  - ps: \"\n    $docker_config = Get-Content $env:HOME/.docker/config.json -raw | ConvertFrom-Json;\n    $docker_config.credsStore = 'ecr-login';\n    $docker_config | ConvertTo-Json | set-content $env:HOME/.docker/config.json;\n  \"\n  - ps: \"get-content $env:HOME/.docker/config.json\"\n\n  # claim some disk space before starting the tests\n  - \"docker system prune -a -f\"\n  # activate virtual environment\n  - \"venv\\\\Scripts\\\\activate\"\n\n\n\n# Final clean up no matter success or failure\non_finish:\n  # Upload test reports as artifacts\n  - ps: Get-ChildItem .\\TEST_REPORT-*.json | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n  - ps: '\n  If (Test-Path env:BY_CANARY){\n    $env:AWS_ACCESS_KEY_ID = $env:TEST_REPORT_S3_BUCKET_ACCESS_KEY_ID;\n    $env:AWS_SECRET_ACCESS_KEY = $env:TEST_REPORT_S3_BUCKET_SECRET_ACCESS_KEY;\n    $env:AWS_SESSION_TOKEN = $env:TEST_REPORT_S3_BUCKET_SESSION_TOKEN;\n    aws s3 cp \".\\\" \"s3://$env:TEST_REPORT_S3_BUCKET_NAME/appveyor/$env:APPVEYOR_PROJECT_SLUG/$env:APPVEYOR_BUILD_ID/$env:APPVEYOR_JOB_ID/\" --recursive --exclude \"*\" --include \"TEST_REPORT-*.json\" --region us-west-2\n  }'\n\n  # notify success\n  - ps: \"\n  If (Test-Path env:BY_CANARY){\n    $env:AWS_ACCESS_KEY_ID = $env:CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID;\n    $env:AWS_SECRET_ACCESS_KEY = $env:CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY;\n    $env:AWS_SESSION_TOKEN = $env:CI_ACCESS_ROLE_AWS_SESSION_TOKEN;\n    aws stepfunctions send-task-success --task-token \\\"$env:TASK_TOKEN\\\" --task-output \\\"{}\\\" --region us-west-2;\n  }\"\n\n\nfor:\n  #Integ testing build\n  - matrix:\n      only:\n        - configuration: BuildIntegTesting\n\n    test_script:\n      - ps: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'not java and not python and not provided and not al2023' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingJavaPythonProvided\n\n    build_script:\n      # install Rust in build_script to not override the default \"install\" actions\n      - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n      - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable\n      - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n      - set RUST_BACKTRACE=1\n      - rustup toolchain install stable --profile minimal --no-self-update\n      - rustup default stable\n      - rustup target add x86_64-unknown-linux-gnu --toolchain stable\n      - rustup target add aarch64-unknown-linux-gnu --toolchain stable\n      - ps: \"choco install zig\"\n      - ps: Invoke-WebRequest -Uri https://github.com/cargo-lambda/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION.windows-x64.zip -OutFile C:\\Users\\appveyor\\cargo-lambda.zip\n      - ps: Expand-Archive -DestinationPath C:\\Users\\appveyor\\.cargo\\bin C:\\Users\\appveyor\\cargo-lambda.zip\n      - rustc -V\n      - cargo -V\n      - cargo lambda -V\n\n    test_script:\n      - ps: \"pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'java and not al2023 or python and not al2023 or provided and not al2023' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-java-python-provided.json\"\n\n  #Integ testing build arm64\n  - matrix:\n      only:\n        - configuration: BuildIntegTestingArm64\n\n    build_script:\n      # install Rust in build_script to not override the default \"install\" actions\n      - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n      - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable\n      - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n      - set RUST_BACKTRACE=1\n      - rustup toolchain install stable --profile minimal --no-self-update\n      - rustup default stable\n      - rustup target add x86_64-unknown-linux-gnu --toolchain stable\n      - rustup target add aarch64-unknown-linux-gnu --toolchain stable\n      - ps: \"choco install zig\"\n      - ps: Invoke-WebRequest -Uri https://github.com/cargo-lambda/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION.windows-x64.zip -OutFile C:\\Users\\appveyor\\cargo-lambda.zip\n      - ps: Expand-Archive -DestinationPath C:\\Users\\appveyor\\.cargo\\bin C:\\Users\\appveyor\\cargo-lambda.zip\n      - rustc -V\n      - cargo -V\n      - cargo lambda -V\n\n    test_script:\n      - ps: \"pytest -vv --reruns 3 -m 'not al2023' tests/integration/buildcmd/test_build_cmd_arm64.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64.json\"\n\n  #Integ testing Terraform build\n  - matrix:\n      only:\n        - configuration: AllTerraformBuildTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv -n 4 --reruns 4 tests/integration/buildcmd/test_build_terraform_applications.py tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd.json\"\n\n  # Integ testing package, delete and deploy\n  - matrix:\n      only:\n        - configuration: PackageAndDeleteAndDeployIntegTesting\n\n    test_script:\n      - ps: \"pytest -vv tests/integration/package tests/integration/delete tests/integration/deploy --dist=loadgroup -n 4 --reruns 4 --json-report --json-report-file=TEST_REPORT-integration-package-delete.json\"\n\n  # Integ testing sync\n  - matrix:\n      only:\n        - configuration: SyncIntegTesting\n\n    test_script:\n      - ps: \"pytest -vv tests/integration/sync -n 3 --reruns 3 --dist loadscope --json-report --json-report-file=TEST_REPORT-integration-sync.json\"\n\n  #Integ testing local invoke and generate event\n  - matrix:\n      only:\n        - configuration: LocalInvokeIntegTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv --reruns 3 tests/integration/local/invoke tests/integration/local/generate_event --json-report --json-report-file=TEST_REPORT-integration-local.json\"\n\n  #Integ testing local start-api\n  - matrix:\n      only:\n        - configuration: LocalStartApiIntegTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv --reruns 3 tests/integration/local/start_api --json-report --json-report-file=TEST_REPORT-integration-local-api.json\"\n\n  #Integ testing local start-lambda\n  - matrix:\n      only:\n        - configuration: LocalStartLambdaIntegTesting\n\n    test_script:\n      # install Terraform CLI\n      - \"choco install terraform\"\n      - \"terraform -version\"\n\n      - ps: \"pytest -vv --reruns 3 tests/integration/local/start_lambda --json-report --json-report-file=TEST_REPORT-integration-local-lambda.json\"\n\n  #Other testing\n  - matrix:\n      only:\n        - configuration: OtherAndEndToEndTesting\n\n    test_script:\n      - ps: \"pytest -vv -n 4 --reruns 4 --dist loadgroup tests/integration tests/end_to_end --ignore=tests/integration/buildcmd --ignore=tests/integration/delete --ignore=tests/integration/deploy --ignore=tests/integration/package --ignore=tests/integration/sync --ignore=tests/integration/local --json-report --json-report-file=TEST_REPORT-integration-others.json\"\n      - ps: \"pytest -vv --reruns 3 tests/regression --json-report --json-report-file=TEST_REPORT-regression.json\"\n# Uncomment for RDP\n# on_finish:\n#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n  \n"
        },
        {
          "name": "designs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 1.513671875,
          "content": "# https://mypy.readthedocs.io/en/stable/config_file.html#config-file-format\n\n[mypy]\nwarn_return_any=True\nwarn_unused_configs=True\nno_implicit_optional=True\nwarn_redundant_casts=True\nwarn_unused_ignores=False # @jfuss Done as a stop gap since different py versions have different errors\nwarn_unreachable=True\n\n#\n# ignore errors in testdata\n#\n\n[mypy-tests.integration.testdata.*]\nignore_errors=True\n\n#\n# below are packages/modules that do not have stubs available\n#\n\n[mypy-botocore,botocore.*]\nignore_missing_imports=True\n\n[mypy-docker,docker.*]\nignore_missing_imports=True\n\n[mypy-aws_lambda_builders,aws_lambda_builders.*]\nignore_missing_imports=True\n\n[mypy-cookiecutter,cookiecutter.*]\nignore_missing_imports=True\n\n[mypy-serverlessrepo,serverlessrepo.*]\nignore_missing_imports=True\n\n[mypy-tomlkit]\nignore_missing_imports=True\n\n[mypy-samtranslator,samtranslator.*]\nignore_missing_imports=True\n\n[mypy-jmespath]\nignore_missing_imports=True\n\n[mypy-parameterized]\nignore_missing_imports=True\n\n[mypy-watchdog,watchdog.*]\nignore_missing_imports=True\n\n[mypy-cfnlint,cfnlint.*]\nignore_missing_imports=True\n\n# progressive add typechecks and these modules already complete the process, let's keep them clean\n[mypy-samcli.lib.iac.plugins_interfaces,samcli.commands.build,samcli.lib.build.*,samcli.commands.local.cli_common.invoke_context,samcli.commands.local.lib.local_lambda,samcli.lib.providers.*,samcli.lib.utils.git_repo.py,samcli.lib.cookiecutter.*,samcli.lib.pipeline.*,samcli.commands.pipeline.*]\ndisallow_untyped_defs=True\ndisallow_incomplete_defs=True\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.7998046875,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]  # PEP 508 specifications.\n\n[tool.ruff]\nline-length = 120\n\n[tool.ruff.lint]\nselect = [\n    \"E\",  # Pycodestyle\n    \"F\",  # Pyflakes\n    \"PL\", # pylint\n    \"I\",  # isort\n]\nignore = [\"PLR0913\"]\n\n[tool.ruff.lint.pylint]\nmax-branches = 25\nmax-returns = 8\nmax-statements = 80\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"F401\", \"E501\"]\n\"integration_uri.py\" = [\"E501\"] # ARNs are long.\n\"app.py\" = [\"E501\"] # Doc links are long.\n\n[tool.black]\nline-length = 120\ntarget_version = ['py38', 'py37', 'py36']\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.tox\n    | \\.venv\n    | dist\n    | pip-wheel-metadata\n    | samcli/lib/init/templates\n    | tests/integration/testdata\n  )/\n)\n'''\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.9326171875,
          "content": "[pytest]\n; timeout any test after 30 minutes if it's hanging\ntimeout = 1800\nlog_cli = 1\nlog_cli_level = INFO\naddopts = --maxfail=1000 -rf\nfilterwarnings =\n    error\n    ignore::DeprecationWarning:samcli.lib.samlib.wrapper\n    ignore::DeprecationWarning:samtranslator.validator.validator\n    ignore::DeprecationWarning:docker\n    ignore::DeprecationWarning:urllib3.poolmanager\n    default::ResourceWarning\n;   Ignore below warning to not fail in Python3.12. Remove once dateutil updates itself or botocore use another way to generate EPOCH\n    ignore::DeprecationWarning:dateutil.tz.tz:\n;   The following deprecation warnings are treated as failures unless we explicitly tell pytest not to\n;   Remove once we no longer support python3.7\n    ignore::boto3.exceptions.PythonDeprecationWarning\nmarkers =\n    ruby\n    nodejs\n    golang\n    java\n    python\n    provided\n    dotnet\n    al2023: Marker to note tests that require a newer Docker version on Windows\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "samcli",
          "type": "tree",
          "content": null
        },
        {
          "name": "schema",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.6669921875,
          "content": "#!/usr/bin/env python\n\nimport io\nimport re\nimport os\nfrom setuptools import setup, find_packages\n\n\ndef read(*filenames, **kwargs):\n    encoding = kwargs.get(\"encoding\", \"utf-8\")\n    # io.open defaults to \\n as universal line ending no matter on what system\n    sep = kwargs.get(\"sep\", \"\\n\")\n    buf = []\n    for filename in filenames:\n        with io.open(filename, encoding=encoding) as f:\n            buf.append(f.read())\n    return sep.join(buf)\n\n\ndef read_requirements(req=\"base.txt\"):\n    content = read(os.path.join(\"requirements\", req))\n    requirements = list()\n    for line in content.split(\"\\n\"):\n        line = line.strip()\n        if line.startswith(\"#\"):\n            continue\n        elif line.startswith(\"-r\"):\n            requirements.extend(read_requirements(line[3:]))\n        else:\n            requirements.append(line)\n    return requirements\n\n\ndef read_version():\n    content = read(os.path.join(os.path.dirname(__file__), \"samcli\", \"__init__.py\"))\n    return re.search(r\"__version__ = \\\"([^']+)\\\"\", content).group(1)\n\n\ncmd_name = \"sam\"\nif os.getenv(\"SAM_CLI_DEV\"):\n    # We are installing in a dev environment\n    cmd_name = \"samdev\"\n\nsetup(\n    name=\"aws-sam-cli\",\n    version=read_version(),\n    description=\"AWS SAM CLI is a CLI tool for local development and testing of Serverless applications\",\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    author=\"Amazon Web Services\",\n    author_email=\"aws-sam-developers@amazon.com\",\n    url=\"https://github.com/aws/aws-sam-cli\",\n    license=\"Apache License 2.0\",\n    packages=find_packages(exclude=[\"tests.*\", \"tests\", \"installer.*\", \"installer\", \"schema.*\", \"schema\"]),\n    keywords=\"AWS SAM CLI\",\n    # Support Python 3.8 or greater\n    python_requires=\">=3.8, <=4.0, !=4.0\",\n    entry_points={\"console_scripts\": [\"{}=samcli.cli.main:cli\".format(cmd_name)]},\n    install_requires=read_requirements(\"base.txt\"),\n    extras_require={\"pre-dev\": read_requirements(\"pre-dev.txt\"), \"dev\": read_requirements(\"dev.txt\")},\n    include_package_data=True,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Environment :: Other Environment\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Topic :: Internet\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"Topic :: Utilities\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}