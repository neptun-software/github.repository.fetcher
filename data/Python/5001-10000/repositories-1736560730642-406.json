{
  "metadata": {
    "timestamp": 1736560730642,
    "page": 406,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "joshpxyne/gpt-migrate",
      "stars": 6888,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "**/target/\n.DS_Store\n**/__pycache__/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.771484375,
          "content": "# Code of Conduct for GPT-Migrate\n\n## 1. Purpose\n\nThe purpose of this Code of Conduct is to provide guidelines for contributors to the GPT-Migrate project on GitHub. We aim to create a positive and inclusive environment where all participants can contribute and collaborate effectively. By participating in this project, you agree to abide by this Code of Conduct.\n\n## 2. Scope\n\nThis Code of Conduct applies to all contributors, maintainers, and users of the GPT-Migrate project. It extends to all project spaces, including but not limited to issues, pull requests, code reviews, comments, and other forms of communication within the project.\n\n## 3. Our Standards\n\nWe encourage the following behavior:\n\n* Being respectful and considerate to others\n* Actively seeking diverse perspectives\n* Providing constructive feedback and assistance\n* Demonstrating empathy and understanding\n\nWe discourage the following behavior:\n\n* Harassment or discrimination of any kind\n* Disrespectful, offensive, or inappropriate language or content\n* Personal attacks or insults\n* Unwarranted criticism or negativity\n\n## 4. Reporting and Enforcement\n\nIf you witness or experience any violations of this Code of Conduct, please report them to the project maintainers by email or other appropriate means. The maintainers will investigate and take appropriate action, which may include warnings, temporary or permanent bans, or other measures as necessary.\n\nMaintainers are responsible for ensuring compliance with this Code of Conduct and may take action to address any violations.\n\n## 5. Acknowledgements\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html).\n\n## 6. Contact\n\nIf you have any questions or concerns, please contact the project maintainers.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2023 Josh Payne\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.841796875,
          "content": "<div align=\"center\">\n\n# ‚óê &nbsp; GPT-Migrate &nbsp; ‚óë\n\n**Easily migrate your codebase from one framework or language to another.**\n\n<p>\n<a href=\"https://github.com/0xpayne/gpt-migrate/blob/main/LICENSE\"><img alt=\"Github License\" src=\"https://img.shields.io/badge/License-MIT-green.svg\" /></a>\n<a href=\"https://github.com/0xpayne/gpt-migrate\"><img alt=\"GitHub Repo stars\" src=\"https://img.shields.io/github/stars/0xpayne/gpt-migrate?style=social\" /></a>\n</p>\n\n<br />\n\n</div>\n\nIf you've ever faced the pain of migrating a codebase to a new framework or language, this project is for you.\n\nhttps://user-images.githubusercontent.com/25165841/250232917-bcc99ce8-99b7-4e3d-a653-f89e163ed825.mp4\n\nMigration is a costly, tedious, and non-trivial problem. Do not trust the current version blindly and please use responsibly. Please also be aware that costs can add up quickly as GPT-Migrate is designed to write (and potentially re-write) the entirety of a codebase.\n\nHowever, with the collective brilliance of the OSS community and the current state of LLMs, it is also a very tractable problem.\n\n## ‚ö°Ô∏è Usage\n\n1. Install Docker and ensure that it's running. It's also recommended that you use at least GPT-4, preferably GPT-4-32k.\n\n## üì¶ Installation using Poetry\n\n1. Install Poetry by following the instructions on the [official Poetry website](https://python-poetry.org/docs/#installation).\n\n2. Once Poetry is installed, navigate to the project directory and install the project dependencies using the following command:\n\n```bash\npoetry install\n```\n\nThis will create a virtual environment and install all the necessary dependencies in that environment.\n\n2. Set your [OpenRouter API key](https://openrouter.ai/docs#api-keys) (default) and/or your [OpenAI API key](https://platform.openai.com/account/api-keys) (to use the OpenAI API directly...in this case, set --model to `gpt-4-32k` or your desired model) and install the python requirements:\n\n`export OPENROUTER_API_KEY=<your key>`\n`export OPENAI_API_KEY=<your key>`\n`pip install -r requirements.txt`\n\n3. Run the main script with the target language you want to migrate to:\n\n`python main.py --targetlang nodejs`\n\n4. (Optional) If you'd like GPT-Migrate to validate the unit tests it creates against your app before it tests the migrated app with them, please have your existing app exposed and use the `--sourceport` flag. For executing this against the benchmark, open a separate terminal, navigate to the `benchmarks/language-pair/source` directory, and run `python app.py` after installing the requirements. It will expose on port 5000. Use this with the `--sourceport` flag.\n\nBy default, this script will execute the flask-nodejs benchmark. You can specify the language, source directory, and many other things using the options guide below.\n\n## üí° Options\n\nYou can customize the behavior of GPT-Migrate by passing the following options to the `main.py` script:\n\n- `--model`: The Large Language Model to be used. Default is `\"gpt-4-32k\"`.\n\n- `--temperature`: Temperature setting for the AI model. Default is `0`.\n\n- `--sourcedir`: Source directory containing the code to be migrated. Default is `\"../benchmarks/flask-nodejs/source\"`.\n\n- `--sourcelang`: Source language or framework of the code to be migrated. No default value.\n\n- `--sourceentry`: Entrypoint filename relative to the source directory. For instance, this could be an `app.py` or `main.py` file for Python. Default is `\"app.py\"`.\n\n- `--targetdir`: Directory where the migrated code will live. Default is `\"../benchmarks/flask-nodejs/target\"`.\n\n- `--targetlang`: Target language or framework for migration. Default is `\"nodejs\"`.\n\n- `--operating_system`: Operating system for the Dockerfile. Common options are `'linux'` or `'windows'`. Default is `'linux'`.\n\n- `--testfiles`: Comma-separated list of files that have functions to be tested. For instance, this could be an `app.py` or `main.py` file for a Python app where your REST endpoints are. Include the full relative path. Default is `\"app.py\"`.\n\n- `--sourceport`: (Optional) Port for testing the unit tests file against the original app. No default value. If not included, GPT-Migrate will not attempt to test the unit tests against your original app.\n\n- `--targetport`: Port for testing the unit tests file against the migrated app. Default is `8080`.\n\n- `--guidelines`: Stylistic or small functional guidelines that you'd like to be followed during the migration. For instance, \"Use tabs, not spaces\". Default is an empty string.\n\n- `--step`: Step to run. Options are `'setup'`, `'migrate'`, `'test'`, `'all'`. Default is `'all'`.\n\nFor example, to migrate a Python codebase to Node.js, you might run:\n\n```bash\npython main.py --sourcedir /path/to/my-python-app --sourceentry app.py --targetdir /path/to/my-nodejs-app --targetlang nodejs\n```\n\nThis will take the Python code in `./my-python-app`, migrate it to Node.js, and write the resulting code to `./my-nodejs-app`.\n\n#### GPT-assisted debugging\n\nhttps://user-images.githubusercontent.com/25165841/250233075-eff1a535-f40e-42e4-914c-042c69ba9195.mp4\n\n## ü§ñ How it Works\n\nFor migrating a repo from `--sourcelang` to `--targetlang`...\n\n1. GPT-Migrate first creates a Docker environment for `--targetlang`, which is either passed in or assessed automatically by GPT-Migrate.\n2. It evaluates your existing code recursively to identify 3rd-party `--sourcelang` dependencies and selects corresponding `--targetlang` dependencies.\n3. It recursively rebuilds new `--targetlang` code from your existing code starting from your designated `--sourceentry` file. This step can be started from with the `--step migrate` option.\n4. It spins up the Docker environment with the new codebase, exposing it on `--targetport` and iteratively debugging as needed.\n5. It develops unit tests using Python's unittest framework, and optionally tests these against your existing app if it's running and exposed on `--sourceport`, iteratively debugging as needed. This step can be started from with the `--step test` option.\n6. It tests the new code on `--targetport` against these unit tests.\n7. It iteratively debugs the code for for you with context from logs, error messages, relevant files, and directory structure. It does so by choosing one or more actions (move, create, or edit files) then executing them. If it wants to execute any sort of shell script (moving files around), it will first ask for clearance. Finally, if at any point it gets stuck or the user ends the debugging loop, it will output directions for the user to follow to move to the next step of the migration.\n8. The new codebase is completed and exists in `--targetdir`.\n\n### üìù Prompt Design\n\nSubprompts are organized in the following fashion:\n\n- `HIERARCHY`: this defines the notion of preferences. There are 4 levels of preference, and each level prioritized more highly than the previous one.\n- `p1`: Preference Level 1. These are the most general prompts, and consist of broad guidelines.\n- `p2`: Preference Level 2. These are more specific prompts, and consist of guidelines for certain types of actions (e.g., best practices and philosophies for writing code).\n- `p3`: Preference Level 3. These are even more specific prompts, and consist of directions for specific actions (e.g., creating a certain file, debugging, writing tests).\n- `p4`: Preference Level 4. These are the most specific prompts, and consist of formatting for output.\n\nPrompts are a combination of subprompts. This concept of tagging and composability can be extended to other properties as well to make prompts even more robust. This is an area we're highly interested in actively exploring.\n\nIn this repo, the `prompt_constructor()` function takes in one or more subprompts and yields a string which may be formatted with variables, for example with `GUIDELINES` being a `p1`, `WRITE_CODE` being a `p2` etc:\n\n```python\nprompt = prompt_constructor(HIERARCHY, GUIDELINES, WRITE_CODE, DEBUG_TESTFILE, SINGLEFILE).format(targetlang=targetlang,buggyfile=buggyfile)\n```\n\n## üìà Performance\n\nGPT-Migrate is currently in development alpha and is not yet ready for production use. For instance, on the relatively simple benchmarks, it gets through \"easy\" languages like python or javascript without a hitch ~50% of the time, and cannot get through more complex languages like C++ or Rust without some human assistance.\n\n## ‚úÖ Benchmarks\n\nWe're actively looking to build up a robust benchmark repository. If you have a codebase that you'd like to contribute, please open a PR! The current benchmarks were built from scratch: REST API apps which have a few endpoints and dependency files.\n\n## üßó Roadmap\n\nBelow are improvements on the to-do list. If you'd like to knock any of these or others out, please submit a PR :)\n\n#### High urgency\n\n- Add logic for model input size limiting based on the window size. See issue [#2](https://github.com/0xpayne/gpt-migrate/issues/2).\n\n#### Med urgency\n\n- Add unit tests to the entire project for better reliability and CI/CD\n- Add more benchmark examples, especially larger repos\n- Add functionality to let the LLM request access to dependency functions in other files as it debugs\n- Add support for other LLMs\n\n#### Low urgency\n\n- Enable internet search requests as the model debugs\n- Identify and compile language-specific issues + solve for them\n\n## üì£ Call to Action\n\nWe're looking for talented contributors. Whether you have a particular passion about a specific language or framework, want to help in creating a more robust test suite, or generally have interesting ideas on how to make this better, we'd love to have you!\n\n## üõ† Expert-Assisted Migration\n\nDue to the inflow of requests, we've decided to create a standardized process for helping people with their migrations. If you're a company that needs help with a big migration or an expert that is willing to help with them, please visit the following website: [https://gpt-migrate.com/](https://gpt-migrate.com/)\n\n## Join the conversation on [Twitter](https://twitter.com/joshpxyne/status/1675254164165910528)!\n"
        },
        {
          "name": "TERMS.md",
          "type": "blob",
          "size": 2.0009765625,
          "content": "# Terms of Use\n\nBy using GPT-Migrate you are aware of and agree to the below Terms of Use.\n\nGPT-Migrate is an experimental application and is provided \"as-is\" without any warranty, express or implied. By using this software, you agree to assume all risks associated with its use, including but not limited to data loss, system failure, or any other issues that may arise.\n\nThe developers and contributors of this project do not accept any responsibility or liability for any losses, damages, or other consequences that may occur as a result of using this software. You are solely responsible for any decisions and actions taken based on the information provided by GPT-Migrate.\n\nPlease note that the use of large language models can be expensive. By utilizing this project, you acknowledge that you are responsible for monitoring and managing your own token usage and the associated costs. It is highly recommended to check your usage regularly and set up any necessary limits or alerts to prevent unexpected charges. This is especially true of GPT-Migrate, which will write and potentially re-write the entirety of a codebase.\n\nAs an autonomous experiment, GPT-Migrate may generate code or take actions that are not in line with real-world business practices or legal requirements. It is your responsibility to ensure that any actions or decisions made by the generated code comply with all applicable laws, regulations, and ethical standards. The developers and contributors of this project shall not be held responsible for any consequences arising from the use of this software.\n\nBy using GPT-Migrate, you agree to indemnify, defend, and hold harmless the developers, contributors, and any affiliated parties from and against any and all claims, damages, losses, liabilities, costs, and expenses (including reasonable attorneys' fees) arising from your use of this software or your violation of these terms.\n\nMore information about OpenAI's terms of use, which apply to GPT-Migrate, can be found [here](https://openai.com/policies/terms-of-use)."
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpt_migrate",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.3896484375,
          "content": "[tool.poetry]\nname = \"gpt-migrate\"\nversion = \"0.1.0\"\ndescription = \"Easily migrate your codebase from one framework or language to another.\"\nauthors = [\"0xpayne\"]\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\ntyper = \"^0.9.0\"\nlangchain = \"^0.0.238\"\nyaspin = \"^2.3.0\"\nopenai = \"^0.27.8\"\ntree-sitter = \"^0.20.1\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\""
        }
      ]
    }
  ]
}