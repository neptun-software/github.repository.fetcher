{
  "metadata": {
    "timestamp": 1736560543510,
    "page": 151,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "healthchecks/healthchecks",
      "stars": 8489,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0908203125,
          "content": "__pycache__/\n*.pyc\n.coverage\n.env\n.venv\n.zed\nhc.sqlite\nhc/local_settings.py\nstatic-collected\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 37.4794921875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\n## v3.10-dev - Unreleased\n\n### Improvements\n- Add \"badge_url\" field in Check API responses (#1100)\n- Add support for Signal usernames\n- Update the \"Currently running, started ... ago\" template to use seconds precision\n\n### Bug Fixes\n- Fix incorrect status value in Webhook integration's $JSON placeholder\n\n## v3.9 - 2024-12-20\n\n### Improvements\n- Change the default value of ALLOWED_HOSTS from \"*\" to the domain part of SITE_ROOT\n\n### Bug Fixes\n- Fix fetchstatus.py (again) to handle SITE_ROOT with a path (#1108)\n\n## v3.8.2 - 2024-12-19\n\n### Improvements\n- Update notification templates to include failure reason (#1069)\n\n### Bug Fixes\n- Fix fetchstatus.py to handle SITE_ROOT with a path (#1107)\n\n## v3.8.1 - 2024-12-13\n\n### Improvements\n- Update Dockerfile to use Python 3.13.1\n- Improve Matrix notifications (include tags, period, last ping type etc.)\n\n## v3.8 - 2024-12-09\n\n### Improvements\n- Rewrite the docker/fetchstatus.py script to reduce Docker container CPU use (#1071)\n- Update Dockerfile to use Python 3.13\n- Update CustomHeaderMiddleware to normalize email addresses to lower case (#1074)\n- Add data migration to convert existing user account emails to lower case\n- Update email alerts to mention failure reason (#1069)\n- De-emphasize the unsubscribe link in email notifications\n- In the checks list, move the \"Add Check\" button to the top of the page\n- Implement filtering by status in the checks list page\n- Increase ntfy.sh topic max length to 64\n- Implement support for path in SITE_ROOT, e.g. SITE_ROOT=http://example.org/hc (#1091)\n\n### Bug Fixes\n- Improve recipient address validation in the smtp listener (#1077)\n\n## v3.7 - 2024-10-21\n\n### Improvements\n- Increase outgoing webhook timeout from 10 to 30 seconds\n- Remove `pruneflips` management command (now cleaned up automatically)\n- Remove `prunenotifications` management command (now cleaned up automatically)\n- Update settings.py to read SECURE_PROXY_SSL_HEADER from env vars\n- Remove LINE Notify onboarding form (as LINE Notify is shutting down on Apr 1, 2025)\n- Make slider labels clickable in the \"Update Period & Grace\" dialog (#1039)\n- Update the Signal integration to retry on network errors\n\n### Bug Fixes\n- Update sqlite settings to avoid \"Database is locked\" errors (#1057)\n- Fix API to gracefully handle too long slugs\n\n## v3.6 - 2024-09-04\n\n### Security\n- Upgrade to Django 5.1.1 (it fixes a vulnerability in `urlize` which we do use)\n\n### Improvements\n- Implement concurrent sending and `--num-workers` argument in `manage.py sendalerts`\n- Upgrade from psycopg2 to psycopg 3.x\n\n## v3.5.2 - 2024-08-21\n\n### Bug Fixes\n- Fix the Docker healthcheck script to supply correct Host header (#1051)\n\n## v3.5.1 - 2024-08-20\n\n### Bug Fixes\n- Fix the Dockerfile for building arm/v7 docker image\n\n## v3.5 - 2024-08-20\n\nImportant: this Healthchecks release is using Django 5.1, which has dropped support\nfor PostgreSQL 12. Therefore, the PostgreSQL image in the sample `docker-compose.yml`\nfile has been updated from `postgres:12` to `postgres:16`. PostgreSQL does not\nautomatically upgrade its data files between major version upgrades, you will need\nto do this manually. Instructions:\nhttps://github.com/healthchecks/healthchecks/tree/master/docker#upgrading-database\n\n### Improvements\n- Improve performance of loading ping body previews (#1023)\n- Implement MS Teams Workflows integration (#1024)\n- Add \"uuid\" field in API responses when read/write key is used (#1007)\n- Update timezone dropdowns to show frequently used timezones at the top\n- Update the \"Set Password\" page to reject very weak passwords\n- Implement search by slug in the checks list (#1048)\n- Add support for $SLUG placeholder in webhook payloads (#1049)\n- Update Dockerfile to use HEALTHCHECK instruction and report container health (#1045)\n\n### Bug Fixes\n- Fix Check.ping() to lock the check before updating (#1023)\n- Fix AJAX views to better handle user logging out\n\n## v3.4 - 2024-06-20\n\n### Improvements\n- Show status changes (flips) in check's log page (#447)\n- Implement dynamic favicon in the projects overview page (#971)\n- Add support for system theme (#978, @moraj-turing)\n- Improve Opsgenie notifications (include description, schedule, link etc.)\n- Update the Discord integration to disable channel on HTTP 404 responses\n- Update email notifications to include the timestamps of status flips\n- Update the Sign In page to hide \"Email Link\" option if SMTP is not configured (#922)\n- Update Slack integration to use channel name as the integration name (#1003)\n- Update Ping Details dialog to also show formatted datetimes (#975)\n- Add data migration to update legacy timezones to current canonical timezones\n\n### Bug Fixes\n- Fix hc.front.views.docs_search to handle words \"AND\", \"OR\", \"NOT\" as queries\n- Fix integrations to not disclose check's code in incident data\n- Fix integrations to include oncalendar schedules in notifications\n- Fix a bug in the log page that caused log events to sometimes load twice\n\n## v3.3 - 2024-04-03\n\n### Improvements\n- Add support for $NAME_JSON and $BODY_JSON placeholders in webhook payloads\n- Update the WhatsApp integration to use Twilio Content Templates\n- Add auto-refresh functionality to the Log page (#957, @mickBoat00)\n- Redesign the \"Status Badges\" page\n- Add support for per-check status badges (#853)\n- Add \"Last ping subject\" field in email notifications\n- Change the signup flow to accept registered users (and sign them in instead)\n- Implement event type filtering in the Log page (#873)\n- Implement dynamic favicon in the \"Checks\" and \"Details\" pages (#971, @princekhunt)\n\n### Bug Fixes\n- Fix Gotify integration to handle Gotify server URLs with paths (#964)\n- Update notification templates to handle cases where check's last ping value is null\n- Make statsd metrics collection optional (to enable, set STATSD_HOST env var)\n\n## v3.2 - 2024-02-09\n\n### Improvements\n- Update Opsgenie instructions\n- Update Spike.sh instructions\n- Add system check to validate settings.SITE_ROOT (#895)\n- Add tooltips to tag buttons in the checks list screen (#911)\n- Improve Email - Keywoard Filtering docs (@mmomjian)\n- Split the grace time input field into value/unit input group (#945, @mickBoat00)\n- Add a system check to warn about MariaDB UUID migration (#929)\n\n### Bug Fixes\n- Increase uWSGI buffer size to allow requests with large cookies (#925)\n- Fix crash when processing one-shot OnCalendar schedules\n- Fix the handling of ping bodies > 2.5MB (#931)\n- Fix crash when inviting team member but SMTP is not configured (@marlenekoh)\n\n## v3.1 - 2023-12-13\n\n### Improvements\n- Update logging configuration to write logs to database (to table `logs_record`)\n- Improve Pushover notifications (include tags, period, last ping type etc.)\n- Implement audo-submit in TOTP entry screen (#905)\n- Update the Splunk On-Call integration to disable channel on HTTP 404 responses\n- Update the Slack integration to disable channel when Slack returns 400 \"invalid_token\"\n- Update the Pushover integration to disable channel when Pushover reports invalid user\n- Update Twilio integrations to disable channel on \"Invalid 'To' Phone Number\"\n- Update the Signal integration to disable channel on UNREGISTERED_FAILURE\n- Upgrade to Django 5.0\n- Add support for systemd's OnCalendar schedules (#919)\n\n### Bug Fixes\n- Fix \"Ping Details\" dialog to handle email bodies not yet uploaded to object storage\n- Fix webauthn registration failure on Firefox with Bitwarden extension\n- Fix webauthn registration failure on Firefox < 119 with Ed25519 keys\n\n## v3.0.1 - 2023-10-30\n\n### Bug Fixes\n- Fix sending test notification to a group integration\n- Fix the Login form to not perform form validation in GET requests\n- Fix special character escaping in ntfy notifications\n- Fix \"Edit ntfy integration\" page to fill the existing token in the form\n- Fix \"Delete Check\" and \"Update Check\" API calls to handle concurrent deletes\n- Fix Signal transport to handle JSON-RPC messages with no ids\n- Fix DST handling in Check.get_grace_start()\n\n## v3.0 - 2023-10-16\n\nThis release drops support of Python 3.9 and below. The minimum required Python\nversion is 3.10.\n\n### Improvements\n- Add Channel.last_notify_duration field, use it in \"sendalerts\" for prioritization\n- Update Telegram integration to treat \"bot was blocked by the user\" as permanent error\n- Add \"Time Zone\" field in notifications that use the \"Schedule\" field (#863)\n- Add bold and monospace text formatting in Signal notifications\n- Update hourly/daily email reminders to only show checks in the \"down\" state (#881)\n- Add support for ntfy access tokens (#879)\n- Improve ntfy notifications (include tags, period, last ping type etc.)\n- Add an \"Account closed.\" confirmation message after closing an account\n- Add monthly uptime percentage display in Check Details page (#773)\n- Increase the precision of calculated downtime duration in check's details and reports\n- Increase bottom margin for modal windows to work around Mobile Safari issue (#899)\n- New integration: notification group (#894)\n\n### Bug Fixes\n- Fix \"senddeletionnotices\" to recognize \"Supporter\" subscriptions\n- Fix \"createsuperuser\" to reject already registered email addresses (#880)\n- Fix hc.accounts.views.check_token to handle non-UUID usernames (#882)\n- Fix time interval formatting in Check Details page, downtime summary table\n- Fix HTML escaping issue in Project admin\n\n## v2.10 - 2023-07-02\n\n### Improvements\n- Configure logging to log unhandled exceptions to console even when DEBUG=False (#835)\n- Make hc.lib.emails raise exceptions when EMAIL_ settings are not set\n- Decouple check's name from slug, allow users to set hand-picked slugs\n- Add /api/v3/ (adds ability to specify slug when creating or updating checks)\n- Update Dockerfile to use Debian Bookworm as the base\n- Implement optional check auto-provisioning when pinging by slug (#626)\n- Add support for the $EXITSTATUS placeholder in webhook payloads (#826)\n- Add API support for filtering checks by slug (#844)\n- Add support for Telegram topics (#852)\n- For cron checks, switch to using check's (not browser's) timezone to format dates\n- Upgrade to cronsim 2.5 (adds support for \"LW\" in the day-of-month field)\n\n### Bug Fixes\n- Fix DB connection timeouts in `manage.py smtpd` (#847)\n\n## v2.9.2 - 2023-06-05\n\n### Bug Fixes\n- Fix a crash in `manage.py smtpd` when stdin is not attached (#840)\n\n## v2.9.1 - 2023-06-05\n\n### Bug Fixes\n- Fix the GHA workflow for building arm/v7 docker image\n\n## v2.9 - 2023-06-05\n\n### Improvements\n- Switch from CssAbsoluteFilter to CssRelativeFilter (#822)\n- Add statsd metric collection in hc.lib.s3.get_object()\n- Upgrade to cronsim 2.4\n- Update Signal notification template to include more data\n- Add Profile.deletion_scheduled_deleted field, and UI banner when it's set\n- Add support for specifying MessagingServiceSid when sending SMS and WA messages\n- Update the smtpd management command to use the aiosmtpd library\n- Add Rocket.Chat integration (#463)\n\n### Bug Fixes\n- Fix a race condition when pinging and deleting checks at the same time\n- Fix the checks list to preserve filters when changing sort order (#828)\n\n## v2.8.1 - 2023-04-11\n\n### Bug Fixes\n- Fix django-compressor warning with github_actions.html\n\n## v2.8 - 2023-04-11\n\n### Improvements\n- Add GitHub Actions examples\n- Update the Dockerfile to use Python 3.11\n- Update the Ping Details dialog to show the \"HTML\" tab by default (#801)\n- Add a \"Switch Project\" menu in top navigation\n- Update Trello onboarding form to allow longer Trello auth tokens (#806)\n- Remove L10N markup from base.html, and associated translations\n- Add Arduino usage example\n- Upgrade to Django 4.2\n- Add email fallback for Signal notifications that hit rate limit\n- Make warnings about no backup second factor more assertive\n- Add cron expression tester and sample expressions in the cron cheatsheet page\n\n### Bug Fixes\n- Fix notification query in the Log page\n\n## v2.7 - 2023-03-06\n\n### Improvements\n- Add last ping body in Mattermost notifications (#785)\n- Improve the error message about rejected private IPs\n- Update Docker image's uwsgi.ini to use SMTPD_PORT env var (#791)\n- Update Telegram notification template to include more data\n- Add CSRF protection in the signup view\n\n### Bug Fixes\n- Fix URL validation to allow hostnames with no TLD (\"http://example\") (#782)\n- Add handling for ProtocolError exceptions in hc.lib.s3.get_object\n- Fix a race condition in Check.ping method\n- Fix the SameSite and Secure attributes on the \"auto-login\" cookie\n- Fix the \"Test\" button in the Integrations screen for read-only users\n- Add form double submit protection when registering a WebAuthn key\n\n## v2.6.1 - 2023-01-26\n\n### Improvements\n- Improve Prometheus docs, add section \"Available Metrics\"\n\n### Bug Fixes\n- Fix a crash in the \"createsuperuser\" management command (#779)\n\n## v2.6 - 2023-01-23\n\n### Improvements\n- Improve layout in \"My Checks\" for checks with long ping URLs (#745)\n- Add support for communicating with signal-cli over TCP (#732)\n- Add /api/v2/ (changes the status reporting of checks in started state) (#633)\n- Update settings.py to read the ADMINS setting from an environment variable\n- Add \"Start Keyword\" filtering for inbound emails (#716)\n- Add rate limiting by client IP in the signup and login views\n\n### Bug Fixes\n- Fix the Signal integration to handle unexpected RPC messages better (#763)\n- Fix special character encoding in Signal notifications (#767)\n- Fix project sort order to be case-insensitive everywhere in the UI (#768)\n- Fix special character encoding in project invite emails\n- Fix check transfer between same account's projects when at check limit\n- Fix wording in the invite email when inviting read-only users\n- Fix login and signup views to make email enumeration harder\n\n## v2.5 - 2022-12-14\n\n### Improvements\n- Upgrade to fido2 1.1.0 and simplify hc.lib.webauthn\n- Add handling for ipv4address:port values in the X-Forwarded-For header (#714)\n- Add a form for submitting Signal CAPTCHA solutions\n- Add Duration field in the Ping Details dialog (#720)\n- Update Mattermost setup instructions\n- Add support for specifying a run ID via a \"rid\" query parameter (#722)\n- Add last ping body in Slack notifications (#735)\n- Add ntfy integration (#728)\n- Add \".txt\" suffix to the filename when downloading ping body (#738)\n- Add API support for fetching ping bodies (#737)\n- Change \"Settings - Email Reports\" page to allow manual timezone selection\n\n### Bug Fixes\n- Fix the most recent ping lookup in the \"Ping Details\" dialog\n- Fix binary data handling in the hc.front.views.ping_body view\n- Fix downtime summaries in weekly reports (#736)\n- Fix week, month boundary calculation to use user's timezone\n\n## v2.4.1 - 2022-10-18\n\n### Bug Fixes\n- Fix the GHA workflow for building arm/v7 docker image\n\n## v2.4 - 2022-10-18\n\n### Improvements\n- Add support for EMAIL_USE_SSL environment variable (#685)\n- Switch from requests to pycurl\n- Implement documentation search\n- Add date filters in the Log page\n- Upgrade to cronsim 2.3\n- Add support for the $BODY placeholder in webhook payloads (#708)\n- Implement the \"Clear Events\" function\n- Add support for custom topics in Zulip notifications (#583)\n\n### Bug Fixes\n- Fix the handling of TooManyRedirects exceptions\n- Fix MySQL 8 support in the Docker image (upgrade from buster to bullseye) (#717)\n\n## v2.3 - 2022-08-05\n\n### Improvements\n- Update Dockerfile to start SMTP listener (#668)\n- Implement the \"Add Check\" dialog\n- Include last ping type in Slack, Mattermost, Discord notifications\n- Upgrade to cron-descriptor 1.2.30\n- Add \"Filter by keywords in the message body\" feature (#653)\n- Upgrade to HiDPI screenshots in the documentation\n- Add support for the $JSON placeholder in webhook payloads\n- Add ping endpoints for \"log\" events\n- Add the \"Badges\" page in docs\n- Add support for multiple recipients in incoming email (#669)\n- Upgrade to fido2 1.0.0, requests 2.28.1, segno 1.5.2\n- Implement auto-refresh and running indicator in the My Projects page (#681)\n- Upgrade to Django 4.1 and django-compressor 4.1\n- Add API support for resuming paused checks (#687)\n\n### Bug Fixes\n- Fix the display of ignored pings with non-zero exit status\n- Fix a race condition in the \"Change Email\" flow\n- Fix grouping and sorting in the text version of the report/nag emails (#679)\n- Fix the update_timeout and pause views to create flips (for downtime bookkeeping)\n- Fix the checks list to preserve selected filters when adding/updating checks (#684)\n- Fix duration calculation to skip \"log\" and \"ign\" events\n\n## v2.2.1 - 2022-06-13\n\n### Improvements\n- Improve the text version of the alert email template\n\n### Bug Fixes\n- Fix the version number displayed in the footer\n\n## v2.2 - 2022-06-13\n\n### Improvements\n- Add address verification step in the \"Change Email\" flow\n- Reduce logging output from sendalerts and sendreports management commands (#656)\n- Add Ctrl+C handler in sendalerts and sendreports management commands\n- Add notes in docs about configuring uWSGI via UWSGI_ env vars (#656)\n- Implement login link expiration (login links will now expire in 1 hour)\n- Add Gotify integration (#270)\n- Add API support for reading/writing the subject and subject_fail fields (#659)\n- Add \"Disabled\" priority for Pushover notifications (#663)\n\n### Bug Fixes\n- Update hc.front.views.channels to handle empty strings in settings (#635)\n- Add logic to handle ContentDecodingError exceptions\n\n## v2.1 - 2022-05-10\n\n### Improvements\n- Add logic to alert ADMINS when Signal transport hits a CAPTCHA challenge\n- Implement the \"started\" progress spinner in the details pages\n- Add \"hc_check_started\" metric in the Prometheus metrics endpoint (#630)\n- Add a management command for submitting Signal rate limit challenges\n- Upgrade to django-compressor 4.0\n- Update the C# snippet\n- Increase max displayed duration from 24h to 72h (#644)\n- Add \"Ping-Body-Limit\" response header in ping API responses\n\n### Bug Fixes\n- Fix unwanted localization in badge SVG generation (#629)\n- Update email template to handle not yet uploaded ping bodies\n- Add small delay in transports.Email.notify to allow ping body to upload\n- Fix prunenotifications to handle checks with missing pings (#636)\n- Fix \"Send Test Notification\" for integrations that only send \"up\" notifications\n\n## v2.0.1 - 2022-03-18\n\n### Bug Fixes\n- Fix the GHA workflow for building arm/v7 docker image\n\n## v2.0 - 2022-03-18\n\nThis release contains a backwards-incompatible change to the Signal integration\n(hence the major version number bump). Healthchecks uses signal-cli to deliver\nSignal notifications. In the past versions, Healthchecks interfaced with\nsignal-cli over DBus. Starting from this version, Healthchecks interfaces\nwith signal-cli using JSON RPC. Please see README for details on how to set\nthis up.\n\n### Improvements\n- Update Telegram integration to treat \"group chat was deleted\" as permanent error\n- Update email bounce handler to mark email channels as disabled (#446)\n- Update Signal integration to use JSON RPC over UNIX socket\n- Update the \"Add TOTP\" form to display plaintext TOTP secret (#602)\n- Improve PagerDuty notifications\n- Add Ping.body_raw field for storing body as bytes\n- Add support for storing ping bodies in S3-compatible object storage (#609)\n- Add a \"Download Original\" link in the \"Ping Details\" dialog\n\n### Bug Fixes\n- Fix unwanted special character escaping in notification messages (#606)\n- Fix JS error after copying a code snippet\n- Make email non-editable in the \"Invite Member\" dialog when team limit reached\n- Fix Telegram bot to handle TransportError exceptions\n- Fix Signal integration to handle UNREGISTERED_FAILURE errors\n- Fix unwanted localization of period and grace values in data- attributes (#617)\n- Fix Mattermost integration to treat 404 as a transient error (#613)\n\n## v1.25.0 - 2022-01-07\n\n### Improvements\n- Implement Pushover emergency alert cancellation when check goes up\n- Add \"The following checks are also down\" section in Telegram notifications\n- Add \"The following checks are also down\" section in Signal notifications\n- Upgrade to django-compressor 3.0\n- Add support for Telegram channels (#592)\n- Implement Telegram group to supergroup migration (#132)\n- Update the Slack integration to not retry when Slack returns 404\n- Refactor transport classes to raise exceptions on delivery problems\n- Add Channel.disabled field, for disabling integrations on permanent errors\n- Upgrade to Django 4\n- Bump the min. Python version from 3.6 to 3.8 (as required by Django 4)\n\n### Bug Fixes\n- Fix report templates to not show the \"started\" status (show UP or DOWN instead)\n- Update Dockerfile to avoid running \"pip wheel\" more than once (#594)\n\n## v1.24.1 - 2021-11-10\n\n### Bug Fixes\n- Fix Dockerfile for arm/v7 - install all dependencies from piwheels\n\n## v1.24.0 - 2021-11-10\n\n### Improvements\n- Switch from croniter to cronsim\n- Change outgoing webhook timeout to 10s, but cap the total time to 20s\n- Implement automatic `api_ping` and `api_notification` pruning (#556)\n- Update Dockerfile to install apprise (#581)\n- Improve period and grace controls, allow up to 365 day periods (#281)\n- Add SIGTERM handling in sendalerts and sendreports\n- Remove the \"welcome\" landing page, direct users to the sign in form instead\n\n### Bug Fixes\n- Fix hc.api.views.ping to handle non-utf8 data in request body (#574)\n- Fix a crash when hc.api.views.pause receives a single integer in request body\n\n## v1.23.1 - 2021-10-13\n\n### Bug Fixes\n- Fix missing uwsgi dependencies in arm/v7 Docker image\n\n## v1.23.0 - 2021-10-13\n\n### Improvements\n- Add /api/v1/badges/ endpoint (#552)\n- Add ability to edit existing email, Signal, SMS, WhatsApp integrations\n- Add new ping URL format: /{ping_key}/{slug} (#491)\n- Reduce Docker image size by using slim base image and multi-stage Dockerfile\n- Upgrade to Bootstrap 3.4.1\n- Upgrade to jQuery 3.6.0\n\n### Bug Fixes\n- Add handling for non-latin-1 characters in webhook headers\n- Fix dark mode bug in selectpicker widgets\n- Fix a crash during login when user's profile does not exist (#77)\n- Drop API support for GET, DELETE requests with a request body\n- Add missing @csrf_exempt annotations in API views\n- Fix the ping handler to reject status codes > 255\n- Add 'schemaVersion' field in the shields.io endpoint (#566)\n\n## v1.22.0 - 2021-08-06\n\n### Improvements\n- Use multicolor channel icons for better appearance in the dark mode\n- Add SITE_LOGO_URL setting (#323)\n- Add admin action to log in as any user\n- Add a \"Manager\" role (#484)\n- Add support for 2FA using TOTP (#354)\n- Add Whitenoise (#548)\n\n### Bug Fixes\n- Fix dark mode styling issues in Cron Syntax Cheatsheet\n- Fix a 403 when transferring a project to a read-only team member\n- Security: fix allow_redirect function to reject absolute URLs\n\n## v1.21.0 - 2021-07-02\n\n### Improvements\n- Increase \"Success / Failure Keywords\" field lengths to 200\n- Django 3.2.4\n- Improve the handling of unknown email addresses in the Sign In form\n- Add support for \"... is UP\" SMS notifications\n- Add an option for weekly reports (in addition to monthly)\n- Implement PagerDuty Simple Install Flow, remove PD Connect\n- Implement dark mode\n\n### Bug Fixes\n- Fix off-by-one-month error in monthly reports, downtime columns (#539)\n\n## v1.20.0 - 2021-04-22\n\n### Improvements\n- Django 3.2\n- Rename VictorOps -> Splunk On-Call\n- Implement email body decoding in the \"Ping Details\" dialog\n- Add a \"Subject\" field in the \"Ping Details\" dialog\n- Improve HTML email display in the \"Ping Details\" dialog\n- Add a link to check's details page in Slack notifications\n- Replace details_url with cloaked_url in email and chat notifications\n- In the \"My Projects\" page, show projects with failing checks first\n\n### Bug Fixes\n- Fix downtime summary to handle months when the check didn't exist yet (#472)\n- Relax cron expression validation: accept all expressions that croniter accepts\n- Fix sendalerts to clear Profile.next_nag_date if all checks up\n- Fix the pause action to clear Profile.next_nag_date if all checks up\n- Fix the \"Email Reports\" screen to clear Profile.next_nag_date if all checks up\n- Fix the month boundary calculation in monthly reports (#497)\n\n## v1.19.0 - 2021-02-03\n\n### Improvements\n- Add tighter parameter checks in hc.front.views.serve_doc\n- Update OpsGenie instructions (#450)\n- Update the email notification template to include more check and last ping details\n- Improve the crontab snippet in the \"Check Details\" page (#465)\n- Add Signal integration (#428)\n- Change Zulip onboarding, ask for the zuliprc file (#202)\n- Add a section in Docs about running self-hosted instances\n- Add experimental Dockerfile and docker-compose.yml\n- Add rate limiting for Pushover notifications (6 notifications / user / minute)\n- Add support for disabling specific integration types (#471)\n\n### Bug Fixes\n- Fix unwanted HTML escaping in SMS and WhatsApp notifications\n- Fix a crash when adding an integration for an empty Trello account\n- Change icon CSS class prefix to 'ic-' to work around Fanboy's filter list\n\n## v1.18.0 - 2020-12-09\n\n### Improvements\n- Add a tooltip to the 'confirmation link' label (#436)\n- Update API to allow specifying channels by names (#440)\n- When saving a phone number, remove any invisible unicode characters\n- Update the read-only dashboard's CSS for better mobile support (#442)\n- Reduce the number of SQL queries used in the \"Get Checks\" API call\n- Add support for script's exit status in ping URLs (#429)\n- Improve phone number sanitization: remove spaces and hyphens\n- Change the \"Test Integration\" behavior for webhooks: don't retry failed requests\n- Add retries to the the email sending logic\n- Require confirmation codes (sent to email) before sensitive actions\n- Implement WebAuthn two-factor authentication\n- Implement badge mode (up/down vs up/late/down) selector (#282)\n- Add Ping.exitstatus field, store client's reported exit status values (#455)\n- Implement header-based authentication (#457)\n- Add a \"Lost password?\" link with instructions in the Sign In page\n\n### Bug Fixes\n- Fix db field overflow when copying a check with a long name\n\n## v1.17.0 - 2020-10-14\n\n### Improvements\n- Django 3.1\n- Handle status callbacks from Twilio, show delivery failures in Integrations\n- Removing unused /api/v1/notifications/{uuid}/bounce endpoint\n- Less verbose output in the `senddeletionnotices` command\n- Host a read-only dashboard (from github.com/healthchecks/dashboard/)\n- LINE Notify integration (#412)\n- Read-only team members\n- API support for setting the allowed HTTP methods for making ping requests\n\n### Bug Fixes\n- Handle excessively long email addresses in the signup form\n- Handle excessively long email addresses in the team member invite form\n- Don't allow duplicate team memberships\n- When copying a check, copy all fields from the \"Filtering Rules\" dialog (#417)\n- Fix missing Resume button (#421)\n- When decoding inbound emails, decode encoded headers (#420)\n- Escape markdown in MS Teams notifications (#426)\n- Set the \"title\" and \"summary\" fields in MS Teams notifications (#435)\n\n## v1.16.0 - 2020-08-04\n\n### Improvements\n- Paused ping handling can be controlled via API (#376)\n- Add \"Get a list of checks's logged pings\" API call (#371)\n- The /api/v1/checks/ endpoint now accepts either UUID or `unique_key` (#370)\n- Added /api/v1/checks/uuid/flips/ endpoint (#349)\n- In the cron expression dialog, show a human-friendly version of the expression\n- Indicate a started check with a progress spinner under status icon (#338)\n- Added \"Docs > Reliability Tips\" page\n- Spike.sh integration (#402)\n- Updated Discord integration to use discord.com instead of discordapp.com\n- Add \"Failure Keyword\" filtering for inbound emails (#396)\n- Add support for multiple, comma-separated keywords (#396)\n- New integration: phone calls (#403)\n\n### Bug Fixes\n- Removing Pager Team integration, project appears to be discontinued\n- Sending a test notification updates Channel.last_error (#391)\n- Handle HTTP 429 responses from Matrix server when joining a Matrix room\n\n## v1.15.0 - 2020-06-04\n\n### Improvements\n- Rate limiting for Telegram notifications (10 notifications per chat per minute)\n- Use Slack V2 OAuth flow\n- Users can edit their existing webhook integrations (#176)\n- Add a \"Transfer Ownership\" feature in Project Settings\n- In checks list, the pause button asks for confirmation (#356)\n- Added /api/v1/metrics/ endpoint, useful for monitoring the service itself\n- Added \"When paused, ignore pings\" option in the Filtering Rules dialog (#369)\n\n### Bug Fixes\n- \"Get a single check\" API call now supports read-only API keys (#346)\n- Don't escape HTML in the subject line of notification emails\n- Don't let users clone checks if the account is at check limit\n\n## v1.14.0 - 2020-03-23\n\n### Improvements\n- Improved UI to invite users from account's other projects (#258)\n- Experimental Prometheus metrics endpoint (#300)\n- Don't store user's current project in DB, put it explicitly in page URLs (#336)\n- API reference in Markdown\n- Use Selectize.js for entering tags (#324)\n- Zulip integration (#202)\n- OpsGenie integration returns more detailed error messages\n- Telegram integration returns more detailed error messages\n- Added the \"Get a single check\" API call (#337)\n- Display project name in Slack notifications (#342)\n\n### Bug Fixes\n- The \"render_docs\" command checks if markdown and pygments is installed (#329)\n- The team size limit is applied to the n. of distinct users across all projects (#332)\n- API: don't let SuspiciousOperation bubble up when validating channel ids\n- API security: check channel ownership when setting check's channels\n- API: update check's \"alert_after\" field when changing schedule\n- API: validate channel identifiers before creating/updating a check (#335)\n- Fix redirect after login when adding Telegram integration\n\n## v1.13.0 - 2020-02-13\n\n### Improvements\n- Show a red \"!\" in project's top navigation if any integration is not working\n- createsuperuser management command requires an unique email address (#318)\n- For superusers, show \"Site Administration\" in top navigation, note in README (#317)\n- Make Ping.body size limit configurable (#301)\n- Show sub-second durations with higher precision, 2 digits after decimal point (#321)\n- Replace the gear icon with three horizontal dots icon (#322)\n- Add a Pause button in the checks list (#312)\n- Documentation in Markdown\n- Added an example of capturing and submitting log output (#315)\n- The sendalerts commands measures dwell time and reports it over statsd protocol\n- Django 3.0.3\n- Show a warning in top navigation if the project has no integrations (#327)\n\n### Bug Fixes\n- Increase the allowable length of Matrix room alias to 100 (#320)\n- Make sure Check.last_ping and Ping.created timestamps match exactly\n- Don't trigger \"down\" notifications when changing schedule interactively in web UI\n- Fix sendalerts crash loop when encountering a bad cron schedule\n- Stricter cron validation, reject schedules like \"At midnight of February 31\"\n- In hc.front.views.ping_details, if a ping does not exist, return a friendly message\n\n## v1.12.0 - 2020-01-02\n\n### Improvements\n- Django 3.0\n- \"Filtering Rules\" dialog, an option to require HTTP POST (#297)\n- Show Healthchecks version in Django admin header (#306)\n- Added JSON endpoint for Shields.io (#304)\n- `senddeletionnotices` command skips profiles with recent last_active_date\n- The \"Update Check\" API call can update check's description (#311)\n\n### Bug Fixes\n- Don't set CSRF cookie on first visit. Signup is exempt from CSRF protection\n- Fix List-Unsubscribe email header value: add angle brackets\n- Unsubscribe links serve a form, and require HTTP POST to actually unsubscribe\n- For webhook integration, validate each header line separately\n- Fix \"Send Test Notification\" for webhooks that only fire on checks going up\n- Don't allow adding webhook integrations with both URLs blank\n- Don't allow adding email integrations with both \"up\" and \"down\" unchecked\n\n\n## v1.11.0 - 2019-11-22\n\n### Improvements\n- In monthly reports, no downtime stats for the current month (month has just started)\n- Add Microsoft Teams integration (#135)\n- Add Profile.last_active_date field for more accurate inactive user detection\n- Add \"Shell Commands\" integration (#302)\n- PagerDuty integration works with or without PD_VENDOR_KEY (#303)\n\n### Bug Fixes\n - On mobile, \"My Checks\" page, always show the gear (Details) button (#286)\n - Make log events fit better on mobile screens\n\n\n## v1.10.0 - 2019-10-21\n\n### Improvements\n- Add the \"Last Duration\" field in the \"My Checks\" page (#257)\n- Add \"last_duration\" attribute to the Check API resource (#257)\n- Upgrade to psycopg2 2.8.3\n- Add Go usage example\n- Send monthly reports on 1st of every month, not randomly during the month\n- Signup form sets the \"auto-login\" cookie to avoid an extra click during first login\n- Autofocus the email field in the signup form, and submit on enter key\n- Add support for OpsGenie EU region (#294)\n- Update OpsGenie logo and setup illustrations\n- Add a \"Create a Copy\" function for cloning checks (#288)\n- Send email notification when monthly SMS sending limit is reached (#292)\n\n### Bug Fixes\n- Prevent double-clicking the submit button in signup form\n- Upgrade to Django 2.2.6 – fixes sqlite migrations (#284)\n\n\n## v1.9.0 - 2019-09-03\n\n### Improvements\n- Show the number of downtimes and total downtime minutes in monthly reports (#104)\n- Show the number of downtimes and total downtime minutes in \"Check Details\" page\n- Add the `pruneflips` management command\n- Add Mattermost integration (#276)\n- Three choices in timezone switcher (UTC / check's timezone / browser's timezone) (#278)\n- After adding a new check redirect to the \"Check Details\" page\n\n### Bug Fixes\n- Fix javascript code to construct correct URLs when running from a subdirectory (#273)\n- Don't show the \"Sign Up\" link in the login page if registration is closed (#280)\n\n## v1.8.0 - 2019-07-08\n\n### Improvements\n- Add the `prunetokenbucket` management command\n- Show check counts in JSON \"badges\" (#251)\n- Webhooks support HTTP PUT (#249)\n- Webhooks can use different req. bodies and headers for \"up\" and \"down\" events (#249)\n- Show check's code instead of full URL on 992px - 1200px wide screens (#253)\n- Add WhatsApp integration (uses Twilio same as the SMS integration)\n- Webhooks support the $TAGS placeholder\n- Don't include ping URLs in API responses when the read-only key is used\n\n### Bug Fixes\n- Fix badges for tags containing special characters (#240, #237)\n- Fix the \"Integrations\" page for when the user has no active project\n- Prevent email clients from opening the one-time login links (#255)\n- Fix `prunepings` and `prunepingsslow`, they got broken when adding Projects (#264)\n\n\n## v1.7.0 - 2019-05-02\n\n### Improvements\n- Add the EMAIL_USE_VERIFICATION configuration setting (#232)\n- Show \"Badges\" and \"Settings\" in top navigation (#234)\n- Upgrade to Django 2.2\n- Can configure the email integration to only report the \"down\" events (#231)\n- Add \"Test!\" function in the Integrations page (#207)\n- Rate limiting for the log in attempts\n- Password strength meter and length check in the \"Set Password\" form\n- Show the Description section even if the description is missing. (#246)\n- Include the description in email alerts. (#247)\n\n\n## v1.6.0 - 2019-04-01\n\n### Improvements\n- Add the \"desc\" field (check's description) to API responses\n- Add maxlength attribute to HTML input=text elements\n- Improved logic for displaying job execution times in log (#219)\n- Add Matrix integration\n- Add Pager Team integration\n- Add a management command for sending inactive account notifications\n\n### Bug Fixes\n- Fix refreshing of the checks page filtered by tags (#221)\n- Escape asterisks in Slack messages (#223)\n- Fix a \"invalid time format\" in front.views.status_single on Windows hosts\n\n\n## v1.5.0 - 2019-02-04\n\n### Improvements\n- Database schema: add uniqueness constraint to Check.code\n- Database schema: add Ping.kind field. Remove \"start\" and \"fail\" fields\n- Add \"Email Settings...\" dialog and \"Subject Must Contain\" setting\n- Database schema: add the Project model\n- Move project-specific settings to a new \"Project Settings\" page\n- Add a \"Transfer to Another Project...\" dialog\n- Add the \"My Projects\" page\n\n\n## v1.4.0 - 2018-12-25\n\n### Improvements\n- Set Pushover alert priorities for \"down\" and \"up\" events separately\n- Additional python usage examples\n- Allow simultaneous access to checks from different teams\n- Add CORS support to API endpoints\n- Flip model, for tracking status changes of the Check objects\n- Add `/ping/<code>/start` API endpoint\n- When using the `/start` endpoint, show elapsed times in ping log\n\n### Bug Fixes\n- Fix after-login redirects (the \"?next=\" query parameter)\n- Update Check.status field when user edits timeout & grace settings\n- Use timezone-aware datetimes with croniter, avoid ambiguities around DST\n- Validate and reject cron schedules with six components\n\n\n## v1.3.0 - 2018-11-21\n\n### Improvements\n- Load settings from environment variables\n- Add \"List-Unsubscribe\" header to alert and report emails\n- Don't send monthly reports to inactive accounts (no pings in 6 months)\n- Add search box in the \"My Checks\" page\n- Add read-only API key support\n- Remove Profile.bill_to field (obsolete)\n- Show a warning when running with DEBUG=True\n- Add \"channels\" attribute to the Check API resource\n- Can specify channel codes when updating a check via API\n- Add a workaround for email agents automatically opening \"Unsubscribe\" links\n- Add Channel.name field, users can now name integrations\n- Add \"Get a List of Existing Integrations\" API call\n\n### Bug Fixes\n- During DST transition, handle ambiguous dates as pre-transition\n\n\n## v1.2.0 - 2018-10-20\n\n### Improvements\n- Content updates in the \"Welcome\" page.\n- Added \"Docs > Third-Party Resources\" page.\n- Improved  layout and styling in \"Login\" page.\n- Separate \"Sign Up\" and \"Log In\" forms.\n- \"My Checks\" page: support filtering checks by query string parameters.\n- Added Trello integration\n\n### Bug Fixes\n- Timezones were missing in the \"Change Schedule\" dialog, fixed.\n- Fix hamburger menu button in \"Login\" page.\n\n\n## v1.1.0 - 2018-08-20\n\n### Improvements\n- A new \"Check Details\" page.\n- Updated django-compressor, psycopg2, pytz, requests package versions.\n- C# usage example.\n- Checks have a \"Description\" field.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.935546875,
          "content": "# Contributing\n\nI'm open to feature suggestions and happy to review code contributions.\nIf you are planning to contribute something larger than a small, straightforward\nbugfix, please open an issue so we can discuss it first. Otherwise you are risking a \n\"no\" or a \"yes, but let's do it differently\" to an already implemented feature.\n\n## Code Style\n\n* Format your Python code with [black](https://black.readthedocs.io/en/stable/).\n* Prefer simplicity over cleverness.\n* If you are fixing a bug or adding a feature, add a test. Run tests before \n  submitting pull requests.\n\n## Adding Documentation\n\nThis project uses the Markdown format for documentation. Use the `render_docs` \nmanagement command to generate the HTML version of the documentation. To add a new\ndocumentation page:\n\n1. Create the appropriate .md file under `templates/docs`\n2. Generate the HTML version with `./manage.py render_docs` \n3. Add the page to the navigation in `/templates/front/docs_single.html`\n\n## Developing a New Integration\n\nBefore starting work on a new integration, please open an issue and\ndiscuss it first. We use several criteria when deciding whether to work on an\nintegration or accept a PR:\n\n* Most important: is there substantial end-user (ideally, paying or would-be-paying\n  end user) interest, across GitHub issues, private emails, social media?\n* Would it be fun to work on?\n* Is the service we are integrating with developer-friendly? Does it have an open\n  and well-documented API? Can we develop and test the integration while avoiding\n  sales calls, contract signing, paid subscriptions?\n* Does the new integration enable something that is otherwise not possible (or is\n  very inconvenient) via webhooks or email?\n\nThe best way to build a new integration is to pick a similar existing integration\nas a starting point for the new integration and replicate every aspect of it.\nYou will need to make changes in the following files:\n\n* Add a new class in `/hc/api/transports.py`.\n* Add a new notification template in `/templates/integrations/`.\n* Write testcases for the new transport class in `/hc/api/tests/test_notify_<kind>.py`.\n* Update `CHANNEL_KINDS` in `/hc/api/models.py`.\n* Update `Channel.transport()` in `/hc/api/models.py`.\n* Create a view for provisioning the new integration in `/hc/front/views.py`.\n* Write a HTML template for the new view in `/templates/front/add_<kind>.py`, and\n  prepare any supporting illustrations in `/static/img/integrations/`.\n* Add a route for the new view in `/hc/front/urls.py`.\n* Write testcases for the new view in `/hc/font/tests/test_add_<kind>.py`.\n* Update `/templates/front/channels.html` – add a new section in the list of available\n  integrations, make sure an existing integration is displayed nicely.\n* Update `/templates/front/event_summary.html` to make sure notifications sent to the\n  new integration are displayed nicely.\n* Add a logo in `/static/img/integrations/`.\n* Update the icon font (it's a little tricky to do, I can take care of that).\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4716796875,
          "content": "Copyright (c) 2015, Pēteris Caune and other contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.0546875,
          "content": "# Healthchecks\n\n[![Tests](https://github.com/healthchecks/healthchecks/actions/workflows/tests.yml/badge.svg)](https://github.com/healthchecks/healthchecks/actions/workflows/tests.yml)\n[![Coverage Status](https://coveralls.io/repos/healthchecks/healthchecks/badge.svg?branch=master&service=github)](https://coveralls.io/github/healthchecks/healthchecks?branch=master)\n\nHealthchecks is a cron job monitoring service. It listens for HTTP requests\nand email messages (\"pings\") from your cron jobs and scheduled tasks (\"checks\").\nWhen a ping does not arrive on time, Healthchecks sends out alerts.\n\nHealthchecks comes with a web dashboard, API, 25+ integrations for\ndelivering notifications, monthly email reports, WebAuthn 2FA support,\nteam management features: projects, team members, read-only access.\n\nThe building blocks are:\n\n* Python 3.10+\n* Django 5.1\n* PostgreSQL or MySQL\n\nHealthchecks is licensed under the BSD 3-clause license.\n\nHealthchecks is available as a hosted service\nat [https://healthchecks.io/](https://healthchecks.io/).\n\nA [Dockerfile](https://github.com/healthchecks/healthchecks/tree/master/docker)\nand [pre-built Docker images](https://hub.docker.com/r/healthchecks/healthchecks) are\navailable.\n\nScreenshots:\n\nThe \"My Checks\" screen. Shows the status of all your cron jobs\nin a live-updating dashboard.\n\n![Screenshot of My Checks page](/static/img/my_checks.png?raw=true \"My Checks Page\")\n\nEach check has configurable Period and Grace Time parameters. Period is the expected\ntime between pings. Grace Time specifies how long to wait before sending out alerts\nwhen a job is running late.\n\n![Screenshot of Period/Grace dialog](/static/img/period_grace.png?raw=true \"Period/Grace Dialog\")\n\nAlternatively, you can define the expected schedules using a cron expressions.\nHealthchecks uses the [cronsim](https://github.com/cuu508/cronsim) library to\nparse and evaluate cron expressions.\n\n![Screenshot of Cron dialog](/static/img/cron.png?raw=true \"Cron Dialog\")\n\nCheck details page, with a live-updating event log.\n\n![Screenshot of Check Details page](/static/img/check_details.png?raw=true \"Check Details Page\")\n\nHealthchecks provides status badges with public but hard-to-guess URLs.\nYou can use them in your READMEs, dashboards, or status pages.\n\n![Screenshot of Badges page](/static/img/badges.png?raw=true \"Status Badges\")\n\n\n## Setting Up for Development\n\nTo set up Healthchecks development environment:\n\n* Install dependencies (Debian/Ubuntu):\n\n  ```sh\n  sudo apt update\n  sudo apt install -y gcc python3-dev python3-venv libpq-dev libcurl4-openssl-dev libssl-dev\n  ```\n\n* Prepare directory for project code and virtualenv. Feel free to use a\n  different location:\n\n  ```sh\n  mkdir -p ~/webapps\n  cd ~/webapps\n  ```\n\n* Prepare virtual environment\n  (with virtualenv you get pip, we'll use it soon to install requirements):\n\n  ```sh\n  python3 -m venv hc-venv\n  source hc-venv/bin/activate\n  pip3 install wheel # make sure wheel is installed in the venv\n  ```\n\n* Check out project code:\n\n  ```sh\n  git clone https://github.com/healthchecks/healthchecks.git\n  ```\n\n* Install requirements (Django, ...) into virtualenv:\n\n  ```sh\n  pip install -r healthchecks/requirements.txt\n  ```\n\n* macOS only - pycurl needs to be reinstalled using the following method (assumes OpenSSL was installed using brew):\n\n  ```sh\n  export PYCURL_VERSION=`cat requirements.txt | grep pycurl | cut -d '=' -f3`\n  export OPENSSL_LOCATION=`brew --prefix openssl`\n  export PYCURL_SSL_LIBRARY=openssl\n  export LDFLAGS=-L$OPENSSL_LOCATION/lib\n  export CPPFLAGS=-I$OPENSSL_LOCATION/include\n  pip uninstall -y pycurl\n  pip install pycurl==$PYCURL_VERSION --compile --no-cache-dir\n  ```\n\n* Create database tables and a superuser account:\n\n  ```sh\n  cd ~/webapps/healthchecks\n  ./manage.py migrate\n  ./manage.py createsuperuser\n  ```\n\n  With the default configuration, Healthchecks stores data in a SQLite file\n  `hc.sqlite` in the checkout directory (`~/webapps/healthchecks`).\n\n* Run tests:\n\n  ```sh\n  ./manage.py test\n  ```\n\n* Run development server:\n\n  ```sh\n  ./manage.py runserver\n  ```\n\nThe site should now be running at `http://localhost:8000`.\nTo access Django administration site, log in as a superuser, then\nvisit `http://localhost:8000/admin/`\n\n## Configuration\n\nHealthchecks reads configuration from environment variables. See the\n[full list of configuration parameters](https://healthchecks.io/docs/self_hosted_configuration/)\nyou can set via environment variables.\n\nIn addition, Healthchecks reads settings from the `hc/local_settings.py` file if it\nexists. You can set or override any [standard Django setting](https://docs.djangoproject.com/en/5.1/ref/settings/)\nin this file. You can copy the provided `hc/local_settings.py.example` as\n`hc/local_settings.py` and use it as a starting point.\n\nIf a setting is specified both as environment variable and in `hc/local_settings.py`,\nthe latter takes precedence.\n\n## Accessing Administration Panel\n\nHealthchecks comes with Django's administration panel where you can perform\nadministrative tasks: delete user accounts, change passwords, increase limits for\nspecific users, inspect contents of database tables.\n\nTo access the administration panel,\n\n * if you haven't already, create a superuser account: `./manage.py createsuperuser`\n * log into the site using superuser credentials\n * in the top navigation, \"Account\" dropdown, select \"Site Administration\"\n\n\n## Sending Emails\n\nHealthchecks must be able to send email messages, so it can send out login\nlinks and alerts to users. Specify your SMTP credentials using the following\nenvironment variables:\n\n- Implicit TLS (*recommended*):\n    ```python\n    DEFAULT_FROM_EMAIL = \"valid-sender-address@example.org\"\n    EMAIL_HOST = \"your-smtp-server-here.com\"\n    EMAIL_PORT = 465\n    EMAIL_HOST_USER = \"smtp-username\"\n    EMAIL_HOST_PASSWORD = \"smtp-password\"\n    EMAIL_USE_TLS = False\n    EMAIL_USE_SSL = True\n    ```\n\n    Port 465 should be the preferred method according to [RFC8314 Section 3.3: Implicit TLS for SMTP Submission](https://tools.ietf.org/html/rfc8314#section-3.3). Be sure to use a TLS certificate and not an SSL one.\n\n- Explicit TLS:\n    ```python\n    DEFAULT_FROM_EMAIL = \"valid-sender-address@example.org\"\n    EMAIL_HOST = \"your-smtp-server-here.com\"\n    EMAIL_PORT = 587\n    EMAIL_HOST_USER = \"smtp-username\"\n    EMAIL_HOST_PASSWORD = \"smtp-password\"\n    EMAIL_USE_TLS = True\n    ```\n\nFor more information, have a look at Django documentation,\n[Sending Email](https://docs.djangoproject.com/en/4.2/topics/email/) section.\n\n## Receiving Emails\n\nHealthchecks comes with a `smtpd` management command, which starts up a\nSMTP listener service. With the command running, you can ping your\nchecks by sending email messages\nto `your-uuid-here@my-monitoring-project.com` email addresses.\n\nStart the SMTP listener on port 2525:\n\n```sh\n./manage.py smtpd --port 2525\n```\n\nSend a test email:\n\n```sh\ncurl --url 'smtp://127.0.0.1:2525' \\\n    --mail-from 'foo@example.org' \\\n    --mail-rcpt '11111111-1111-1111-1111-111111111111@my-monitoring-project.com' \\\n    -F '='\n```\n\n## Sending Alerts and Reports\n\nHealthchecks comes with a `sendalerts` management command, which continuously\npolls database for any checks changing state, and sends out notifications as\nneeded. Within an activated virtualenv, you can manually run\nthe `sendalerts` command like so:\n\n```sh\n./manage.py sendalerts\n```\n\nIn a production setup, you will want to run this command from a process\nmanager like systemd or [supervisor](http://supervisord.org/).\n\nHealthchecks also comes with a `sendreports` management command which\nsends out monthly reports, weekly reports, and the daily or hourly reminders.\n\nRun `sendreports` without arguments to run any due reports and reminders\nand then exit:\n\n```sh\n./manage.py sendreports\n```\n\nRun it with the `--loop` argument to make it run continuously:\n\n```sh\n./manage.py sendreports --loop\n```\n\n## Database Cleanup\n\nHealthchecks deletes old entries from `api_ping`, `api_flip`, and `api_notification`\ntables automatically. By default, Healthchecks keeps the 100 most recent\npings for every check. You can set the limit higher to keep a longer history:\ngo to the Administration Panel, look up user's **Profile** and modify its\n\"Ping log limit\" field.\n\nHealthchecks also provides management commands for cleaning up\n`auth_user` (user accounts) and `api_tokenbucket` (rate limiting records) tables,\nand for removing stale objects from external object storage.\n\n* Remove user accounts that are older than 1 month and have never logged in:\n\n  ```sh\n  ./manage.py pruneusers\n  ```\n\n* Remove old records from the `api_tokenbucket` table. The TokenBucket\n  model is used for rate-limiting login attempts and similar operations.\n  Any records older than one day can be safely removed.\n\n  ```sh\n  ./manage.py prunetokenbucket\n  ```\n\n* Remove old objects from external object storage. When an user removes\n  a check, removes a project, or closes their account, Healthchecks\n  does not remove the associated objects from the external object\n  storage on the fly. Instead, you should run `pruneobjects` occasionally\n  (for example, once a month). This command first takes an inventory\n  of all checks in the database, and then iterates over top-level\n  keys in the object storage bucket, and deletes any that don't also\n  exist in the database.\n\n  ```sh\n  ./manage.py pruneobjects\n  ```\n\nWhen you first try these commands on your data, it is a good idea to\ntest them on a copy of your database, not on the live database right away.\nIn a production setup, you should also have regular, automated database\nbackups set up.\n\n## Two-factor Authentication\n\nHealthchecks optionally supports two-factor authentication using the WebAuthn\nstandard. To enable WebAuthn support, set the `RP_ID` (relying party identifier )\nsetting to a non-null value. Set its value to your site's domain without scheme\nand without port. For example, if your site runs on `https://my-hc.example.org`,\nset `RP_ID` to `my-hc.example.org`.\n\nNote that WebAuthn requires HTTPS, even if running on localhost. To test WebAuthn\nlocally with a self-signed certificate, you can use the `runsslserver` command\nfrom the `django-sslserver` package.\n\n## External Authentication\n\nHealthchecks supports external authentication by means of HTTP headers set by\nreverse proxies or the WSGI server. This allows you to integrate it into your\nexisting authentication system (e.g., LDAP or OAuth) via an authenticating proxy.\nWhen this option is enabled, **healthchecks will trust the header's value implicitly**,\nso it is **very important** to ensure that attackers cannot set the value themselves\n(and thus impersonate any user). How to do this varies by your chosen proxy,\nbut generally involves configuring it to strip out headers that normalize to the\nsame name as the chosen identity header.\n\nTo enable this feature, set the `REMOTE_USER_HEADER` value to a header you wish to\nauthenticate with. HTTP headers will be prefixed with `HTTP_` and have any dashes\nconverted to underscores. Headers without that prefix can be set by the WSGI server\nitself only, which is more secure.\n\nWhen `REMOTE_USER_HEADER` is set, Healthchecks will:\n - assume the header contains user's email address\n - look up and automatically log in the user with a matching email address\n - automatically create an user account if it does not exist\n - disable the default authentication methods (login link to email, password)\n\nThe header name in `REMOTE_USER_HEADER` must be specified in upper-case,\nwith any dashes replaced with underscores, and prefixed with `HTTP_`. For\nexample, if your authentication proxy sets a `X-Authenticated-User` request\nheader, you should set `REMOTE_USER_HEADER=HTTP_X_AUTHENTICATED_USER`.\n\n**Note on using `local_settings.py`:**\nWhen Healthchecks reads settings from environment variables and encounters\nthe `REMOTE_USER_HEADER` environment variable, it sets *two* settings,\n`REMOTE_USER_HEADER` and `AUTHENTICATION_BACKENDS`. This logic has already run by the\ntime Healthchecks reads `local_settings.py`. Therefore, if you configure Healthchecks\nusing the `local_settings.py` file instead of environment variables, and specify\n`REMOTE_USER_HEADER` there, you will also need a line which sets the other setting,\n`AUTHENTICATION_BACKENDS`:\n\n```\nREMOTE_USER_HEADER = \"HTTP_X_AUTHENTICATED_USER\"\nAUTHENTICATION_BACKENDS = [\"hc.accounts.backends.CustomHeaderBackend\"]\n```\n\n## External Object Storage\n\nHealthchecks can optionally store large ping bodies in S3-compatible object\nstorage. To enable this feature, you will need to:\n\n* ensure you have the [MinIO Python library](https://docs.min.io/docs/python-client-quickstart-guide.html) installed:\n\n  ```bash\n  pip install minio\n  ```\n* configure the credentials for accessing object storage: `S3_ACCESS_KEY`,\n  `S3_SECRET_KEY`, `S3_ENDPOINT`, `S3_REGION` and `S3_BUCKET`.\n\nHealthchecks will use external object storage for storing any request bodies that\nexceed 100 bytes. If the size of a request body is 100 bytes or below, Healthchecks\nwill still store it in the database.\n\nHealthchecks automatically removes old stored ping bodies from object\nstorage while uploading new data. However, Healthchecks does not automatically\nclean up data when you delete checks, projects or entire user accounts.\nUse the `pruneobjects` management command to remove data for checks that don't\nexist any more.\n\nWhen external object storage is not enabled (the credentials for accessing object\nstorage are not set), Healthchecks stores all ping bodies in the database.\nIf you enable external object storage, Healthchecks will still be able to\naccess the ping bodies already stored in the database. You don't need to migrate\nthem to the object storage. On the other hand, if you later decide to disable\nexternal object storage, Healthchecks will not have access to the externally\nstored ping bodies any more. And there is currently no script or management command\nfor migrating ping bodies from external object storage back to the database.\n\n## Integrations\n\n### Slack\n\nHealthchecks supports two Slack integration setup flows: legacy and app-based.\n\nThe legacy flow does not require additional configuration and is used by default.\nIn this flow the user creates an incoming webhook URL on the Slack side, and\npastes the webhook URL in a form on the Healthchecks side.\n\nIn the app-based flow the user clicks an \"Add to Slack\" button in Healthchecks,\nand gets transferred to a Slack-hosted dialog where they select the channel to\npost notifications to. This flow uses OAuth2 behind the scenes. To enable this\nflow, you will need to set up a Slack OAuth2 app:\n\n* Create a new Slack app on https://api.slack.com/apps/\n* Add at least one scope in the permissions section to be able to deploy the app in\n  your workspace (By example `incoming-webhook` for the `Bot Token Scopes`).\n* Add a _redirect url_ in the format `SITE_ROOT/integrations/add_slack_btn/`.\n  For example, if your SITE_ROOT is `https://my-hc.example.org` then the redirect URL\n  would be `https://my-hc.example.org/integrations/add_slack_btn/`.\n* Look up your Slack app for the Client ID and Client Secret. Put them\n  in `SLACK_CLIENT_ID` and `SLACK_CLIENT_SECRET` environment\n  variables. Once these variables are set, Healthchecks will switch from using\n  the legacy flow to using the app-based flow.\n\nThe legacy and app-based flows only affect the user experience during the initial\nsetup of Slack integrations. The contents of notifications posted to Slack are the same\nregardless of the setup flow used.\n\n### Discord\n\nTo enable Discord integration, you will need to:\n\n* register a new application on https://discord.com/developers/applications/me\n* add a redirect URI to your Discord application. The URI format is\n  `SITE_ROOT/integrations/add_discord/`. For example, if you are running a\n  development server on `localhost:8000` then the redirect URI would be\n  `http://localhost:8000/integrations/add_discord/`\n* Look up your Discord app's Client ID and Client Secret. Put them\n  in `DISCORD_CLIENT_ID` and `DISCORD_CLIENT_SECRET` environment\n  variables.\n\n\n### Pushover\n\nPushover integration works by creating an application on Pushover.net which\nis then subscribed to by Healthchecks users. The registration workflow is as follows:\n\n* On Healthchecks, the user adds a \"Pushover\" integration to a project\n* Healthchecks redirects user's browser to a Pushover.net subscription page\n* User approves adding the Healthchecks subscription to their Pushover account\n* Pushover.net HTTP redirects back to Healthchecks with a subscription token\n* Healthchecks saves the subscription token and uses it for sending Pushover\n  notifications\n\nTo enable the Pushover integration, you will need to:\n\n* Register a new application on Pushover via https://pushover.net/apps/build.\n* Within the Pushover 'application' configuration, enable subscriptions.\n  Make sure the subscription type is set to \"URL\". Also make sure the redirect\n  URL is configured to point back to the root of the Healthchecks instance\n  (e.g., `http://healthchecks.example.com/`).\n* Put the Pushover application API Token and the Pushover subscription URL in\n  `PUSHOVER_API_TOKEN` and `PUSHOVER_SUBSCRIPTION_URL` environment\n  variables. The Pushover subscription URL should look similar to\n  `https://pushover.net/subscribe/yourAppName-randomAlphaNumericData`.\n\n### Signal\n\nHealthchecks uses [signal-cli](https://github.com/AsamK/signal-cli) to send Signal\nnotifications. Healthcecks interacts with signal-cli over UNIX or TCP socket.\nHealthchecks requires signal-cli version 0.11.2 or later.\n\nTo enable the Signal integration via UNIX socket:\n\n* Set up and configure signal-cli to expose JSON RPC on an UNIX socket\n  ([instructions](https://github.com/AsamK/signal-cli/wiki/JSON-RPC-service)).\n  Example: `signal-cli -a +xxxxxx daemon --socket /tmp/signal-cli-socket`\n* Put the socket's location in the `SIGNAL_CLI_SOCKET` environment variable.\n\nTo enable the Signal integration via TCP socket:\n\n* Set up and configure signal-cli to expose JSON RPC on a TCP socket.\n  Example: `signal-cli -a +xxxxxx daemon --tcp 127.0.0.1:7583`\n* Put the socket's hostname and port in the `SIGNAL_CLI_SOCKET` environment variable\n  using \"hostname:port\" syntax, example: `127.0.0.1:7583`.\n\n\n### Telegram\n\n* Create a Telegram bot by talking to the\n[BotFather](https://core.telegram.org/bots#6-botfather). Set the bot's name,\ndescription, user picture, and add a \"/start\" command. To avoid user confusion,\nplease do not use the Healthchecks.io logo as your bot's user picture, use\nyour own logo.\n* After creating the bot you will have the bot's name and token. Put them\nin `TELEGRAM_BOT_NAME` and `TELEGRAM_TOKEN` environment variables.\n* Run `settelegramwebhook` management command. This command tells Telegram\nwhere to forward channel messages by invoking Telegram's\n[setWebhook](https://core.telegram.org/bots/api#setwebhook) API call:\n\n    ```sh\n    ./manage.py settelegramwebhook\n    Done, Telegram's webhook set to: https://my-monitoring-project.com/integrations/telegram/bot/\n    ```\n\nFor this to work, your `SITE_ROOT` must be correct and must use the \"https://\"\nscheme.\n\n### Apprise\n\nTo enable Apprise integration, you will need to:\n\n* ensure you have apprise installed in your local environment:\n\n  ```bash\n  pip install apprise\n  ```\n* enable the apprise functionality by setting the `APPRISE_ENABLED` environment variable.\n\n### Shell Commands\n\nThe \"Shell Commands\" integration runs user-defined local shell commands when checks\ngo up or down. This integration is disabled by default, and can be enabled by setting\nthe `SHELL_ENABLED` environment variable to `True`.\n\nNote: be careful when using \"Shell Commands\" integration, and only enable it when\nyou fully trust the users of your Healthchecks instance. The commands will be executed\nby the `manage.py sendalerts` process, and will run with the same system permissions as\nthe `sendalerts` process.\n\n### Matrix\n\nTo enable the Matrix integration you will need to:\n\n* Register a bot user (for posting notifications) in your preferred homeserver.\n* Use the [Login API call](https://www.matrix.org/docs/guides/client-server-api#login)\n  to retrieve bot user's access token. You can run it as shown in the documentation,\n  using curl in command shell.\n* Set the `MATRIX_` environment variables. Example:\n\n```\nMATRIX_HOMESERVER=https://matrix.org\nMATRIX_USER_ID=@mychecks:matrix.org\nMATRIX_ACCESS_TOKEN=[a long string of characters returned by the login call]\n```\n\n### PagerDuty Simple Install Flow\n\nTo enable PagerDuty [Simple Install Flow](https://developer.pagerduty.com/docs/app-integration-development/events-integration/),\n\n* Register a PagerDuty app at [PagerDuty](https://pagerduty.com/) › Developer Mode › My Apps\n* In the newly created app, add the \"Events Integration\" functionality\n* Specify a Redirect URL: `https://your-domain.com/integrations/add_pagerduty/`\n* Copy the displayed app_id value (PXXXXX) and put it in the `PD_APP_ID` environment\n  variable\n\n## Running in Production\n\nHere is a non-exhaustive list of pointers and things to check before launching a Healthchecks instance\nin production.\n\n* Environment variables, settings.py and local_settings.py.\n  * [DEBUG](https://docs.djangoproject.com/en/4.2/ref/settings/#debug). Make sure it is\n    set to `False`.\n  * [ALLOWED_HOSTS](https://docs.djangoproject.com/en/4.2/ref/settings/#allowed-hosts).\n    Make sure it contains the correct domain name you want to use.\n  * Server Errors. When DEBUG=False, Django will not show detailed error pages, and\n    will not print exception tracebacks to standard output. To receive exception\n    tracebacks in email, review and edit the\n    [ADMINS](https://docs.djangoproject.com/en/4.2/ref/settings/#admins) and\n    [SERVER_EMAIL](https://docs.djangoproject.com/en/4.2/ref/settings/#server-email)\n    settings. Consider setting up exception logging with [Sentry](https://sentry.io/for/django/).\n* Management commands that need to be run during each deployment.\n  * `manage.py compress` – creates combined JS and CSS bundles and\n     places them in the `static-collected` directory.\n  * `manage.py collectstatic` – collects static files in the `static-collected`\n     directory.\n  * `manage.py migrate` – applies any pending database schema changes\n     and data migrations.\n* Processes that need to be running constantly.\n  * `manage.py runserver` is intended for development only.\n     **Do not use it in production**, instead consider using\n     [uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/) or\n     [gunicorn](https://gunicorn.org/).\n     An example of a minimal setup would be to install uWSGI using `pip3 install uwsgi`,\n     and to run `uwsgi --http :8000 --module hc.wsgi` from the project's root directory.\n  *  `manage.py sendalerts` is the process that monitors checks and sends out\n     monitoring alerts. It must be always running, it must be started on reboot, and it\n     must be restarted if it itself crashes. On modern linux systems, a good option is\n     to [define a systemd service](https://github.com/healthchecks/healthchecks/issues/273#issuecomment-520560304)\n     for it.\n* Static files. Healthchecks serves static files on its own, no configuration\n  required. It uses the [Whitenoise library](http://whitenoise.evans.io/en/stable/index.html)\n  for this.\n* General\n  * Make sure the database is secured well and is getting backed up regularly\n  * Make sure the TLS certificates are secured well and are getting refreshed regularly\n  * Have monitoring in place to be sure the Healthchecks instance itself is operational\n    (is accepting pings, is sending out alerts, is not running out of resources).\n\n## Docker Image\n\nHealthchecks provides a reference Dockerfile and prebuilt Docker images for every\nrelease. The Dockerfile lives in the [/docker/](https://github.com/healthchecks/healthchecks/tree/master/docker)\ndirectory, and Docker images for amd64, arm/v7 and arm64 architectures are available\n[on Docker Hub](https://hub.docker.com/r/healthchecks/healthchecks).\n\nThe Docker images:\n\n* Use uWSGI as the web server. uWSGI is configured to perform database migrations\n  on startup, and to run `sendalerts`, `sendreports`, and `smtpd` in the background.\n  You do not need to run them separately.\n* Ship with both PostgreSQL and MySQL database drivers.\n* Serve static files using the whitenoise library.\n* Have the apprise library preinstalled.\n* Do *not* handle TLS termination. In a production setup, you will want to put\n  the Healthchecks container behind a reverse proxy or load balancer that handles TLS\n  termination.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1201171875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nTo report a security vulnerability, please email contact@healthchecks.io.\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "hc",
          "type": "tree",
          "content": null
        },
        {
          "name": "manage.py",
          "type": "blob",
          "size": 0.45703125,
          "content": "#!/usr/bin/env python\nimport logging\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"hc.settings\")\n\n    from django.core.management import execute_from_command_line\n\n    logger = logging.getLogger(\"django\")\n    try:\n        execute_from_command_line(sys.argv)\n    except Exception as e:\n        msg = \"Admin Command Error: %s\"\n        logger.error(msg, \" \".join(sys.argv), exc_info=sys.exc_info())\n        raise e\n"
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.1533203125,
          "content": "[mypy]\nplugins = mypy_django_plugin.main\n\n[mypy.plugins.django-stubs]\ndjango_settings_module = \"hc.settings\"\n\n[mypy-statsd.*]\nignore_missing_imports = True\n\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.220703125,
          "content": "aiosmtpd==1.4.6\ncronsim==2.6\nDjango==5.1.4\ndjango-compressor==4.5.1\ndjango-stubs-ext==5.1.1\nfido2==1.2.0\noncalendar==1.1\npsycopg==3.2.3\npycurl==7.45.4\npydantic==2.10.3\npyotp==2.9.0\nsegno==1.6.1\nstatsd==4.0.1\nwhitenoise==6.8.2\n"
        },
        {
          "name": "search.db",
          "type": "blob",
          "size": 392,
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "stuff",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}