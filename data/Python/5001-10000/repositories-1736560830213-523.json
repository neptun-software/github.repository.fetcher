{
  "metadata": {
    "timestamp": 1736560830213,
    "page": 523,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "python-trio/trio",
      "stars": 6304,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".builds",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 1.00390625,
          "content": "# -- repository yaml --\n\n# Explicitly wait for all jobs to finish, as wait_for_ci prematurely triggers.\n# See https://github.com/python-trio/trio/issues/2689\ncodecov:\n  notify:\n    # This number needs to be changed whenever the number of runs in CI is changed.\n    # Another option is codecov-cli: https://github.com/codecov/codecov-cli#send-notifications\n    after_n_builds: 31\n    wait_for_ci: false\n    notify_error: true # if uploads fail, replace cov comment with a comment with errors.\n  require_ci_to_pass: false\n\n  # Publicly exposing the token has some small risks from mistakes or malicious actors.\n  # See https://docs.codecov.com/docs/codecov-tokens for correctly configuring it.\n  token: 87cefb17-c44b-4f2f-8b30-1fff5769ce46\n\n# only post PR comment if coverage changes\ncomment:\n  require_changes: true\n\ncoverage:\n  # required range\n  precision: 5\n  round: down\n  range: 100..100\n  status:\n    project:\n      default:\n        target: 100%\n    patch:\n      default:\n        target: 100%  # require patches to be 100%\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1484375,
          "content": "# sorting all imports with isort\n933f77b96f0092e1baab4474a9208fc2e379aa32\n# enabling ruff's flake8-commas rule\nb25c02a94e2defcb0fad32976b02218be1133bdf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.17578125,
          "content": "# For files generated by trio/_tools/gen_exports.py\ntrio/_core/_generated*    linguist-generated=true\n# Treat generated files as binary in git diff\ntrio/_core/_generated*    -diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8583984375,
          "content": "# In case somebody wants to restore the directory for local testing\nnotes-to-self/\n\n# Project-specific generated files\ndocs/build/\n\nbench/results/\nbench/env/\nbench/trio/\n\n# Byte-compiled / optimized / DLL files / editor temp files\n__pycache__/\n*.py[cod]\n*~\n\\#*\n.#*\n*.swp\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\n/build/\n/develop-eggs/\n/dist/\n/eggs/\n/lib/\n/lib64/\n/parts/\n/sdist/\n/var/\n*.egg-info/\n.installed.cfg\n*.egg\n/.pybuild\npip-wheel-metadata/\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.venv/\npyvenv.cfg\n.coverage\n.coverage.*\n.cache\n.pytest_cache/\n.mypy_cache/\nnosetests.xml\ncoverage.xml\n\n# Temp file during Mypy processing\nmypy_annotate.dat\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndoc/_build/\n\n# PyCharm\n.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.2802734375,
          "content": "ci:\n  autofix_prs: true\n  autoupdate_schedule: weekly\n  submodules: false\n  # pip-compile requires internet, regenerate-files may get cache\n  # issues in CI, so they're run in check.sh\n  skip: [pip-compile, regenerate-files]\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-toml\n      - id: check-merge-conflict\n      - id: mixed-line-ending\n      - id: check-case-conflict\n      - id: sort-simple-yaml\n        files: .pre-commit-config.yaml\n  - repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.10.0\n    hooks:\n      - id: black\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n      - id: ruff\n        types: [file]\n        types_or: [python, pyi, toml]\n        args: [\"--show-fixes\"]\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n  - repo: https://github.com/crate-ci/typos\n    rev: dictgen-v0.3.1\n    hooks:\n      - id: typos\n  - repo: https://github.com/sphinx-contrib/sphinx-lint\n    rev: v1.0.0\n    hooks:\n      - id: sphinx-lint\n  - repo: https://github.com/woodruffw/zizmor-pre-commit\n    rev: v1.0.0\n    hooks:\n      - id: zizmor\n  - repo: local\n    hooks:\n      - id: regenerate-files\n        name: regenerate generated files\n        language: python\n        entry: python src/trio/_tools/gen_exports.py\n        pass_filenames: false\n        additional_dependencies: [\"astor\", \"attrs\", \"black\", \"ruff\"]\n        files: ^src\\/trio\\/_core\\/(_run|(_i(o_(common|epoll|kqueue|windows)|nstrumentation)))\\.py$\n  - repo: https://github.com/astral-sh/uv-pre-commit\n    rev: 0.5.14\n    hooks:\n      # Compile requirements\n      - id: pip-compile\n        name: uv pip-compile test-requirements.in\n        args: [\n          \"--universal\",\n          \"--python-version=3.9\",\n          \"test-requirements.in\",\n          \"-o\",\n          \"test-requirements.txt\"]\n        files: ^test-requirements\\.(in|txt)$\n      - id: pip-compile\n        name: uv pip-compile docs-requirements.in\n        args: [\n          \"--universal\",\n          \"--python-version=3.11\",\n          \"docs-requirements.in\",\n          \"-o\",\n          \"docs-requirements.txt\"]\n        files: ^docs-requirements\\.(in|txt)$\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# https://docs.readthedocs.io/en/latest/config-file/index.html\nversion: 2\n\nformats:\n  - htmlzip\n  - epub\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.11\"\n\npython:\n  install:\n    - requirements: docs-requirements.txt\n\nsphinx:\n  fail_on_warning: true\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.095703125,
          "content": "For the Trio code of conduct, see:\n    https://trio.readthedocs.io/en/latest/code-of-conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.095703125,
          "content": "For the Trio contributing guide, see:\n    https://trio.readthedocs.io/en/latest/contributing.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.185546875,
          "content": "This software is made available under the terms of *either* of the\nlicenses found in LICENSE.APACHE2 or LICENSE.MIT. Contributions to\nTrio are made under the terms of *both* these licenses.\n"
        },
        {
          "name": "LICENSE.APACHE2",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE.MIT",
          "type": "blob",
          "size": 1.0654296875,
          "content": "Copyright Contributors to the Trio project.\n\nThe MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4033203125,
          "content": "include .codecov.yml\ninclude check.sh\ninclude ci.sh\ninclude LICENSE LICENSE.MIT LICENSE.APACHE2\ninclude README.rst\ninclude CODE_OF_CONDUCT.md CONTRIBUTING.md\ninclude *-requirements.in\ninclude *-requirements.txt\ninclude src/trio/py.typed\ninclude src/trio/_tests/astrill-codesigning-cert.cer\nrecursive-include src/trio/_tests/test_ssl_certs *.pem\nrecursive-include docs *\nrecursive-include tests *\nprune docs/build\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 6.615234375,
          "content": ".. image:: https://img.shields.io/badge/chat-join%20now-blue.svg\n   :target: https://gitter.im/python-trio/general\n   :alt: Join chatroom\n\n.. image:: https://img.shields.io/badge/forum-join%20now-blue.svg\n   :target: https://trio.discourse.group\n   :alt: Join forum\n\n.. image:: https://img.shields.io/badge/docs-read%20now-blue.svg\n   :target: https://trio.readthedocs.io\n   :alt: Documentation\n\n.. image:: https://img.shields.io/pypi/v/trio.svg\n   :target: https://pypi.org/project/trio\n   :alt: Latest PyPi version\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/trio.svg\n   :target: https://anaconda.org/conda-forge/trio\n   :alt: Latest conda-forge version\n\n.. image:: https://codecov.io/gh/python-trio/trio/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/python-trio/trio\n   :alt: Test coverage\n\nTrio – a friendly Python library for async concurrency and I/O\n==============================================================\n\n.. image:: https://raw.githubusercontent.com/python-trio/trio/9b0bec646a31e0d0f67b8b6ecc6939726faf3e17/logo/logo-with-background.svg\n   :width: 200px\n   :align: right\n\nThe Trio project aims to produce a production-quality,\n`permissively licensed\n<https://github.com/python-trio/trio/blob/main/LICENSE>`__,\nasync/await-native I/O library for Python. Like all async libraries,\nits main purpose is to help you write programs that do **multiple\nthings at the same time** with **parallelized I/O**. A web spider that\nwants to fetch lots of pages in parallel, a web server that needs to\njuggle lots of downloads and websocket connections simultaneously, a\nprocess supervisor monitoring multiple subprocesses... that sort of\nthing. Compared to other libraries, Trio attempts to distinguish\nitself with an obsessive focus on **usability** and\n**correctness**. Concurrency is complicated; we try to make it *easy*\nto get things *right*.\n\nTrio was built from the ground up to take advantage of the `latest\nPython features <https://www.python.org/dev/peps/pep-0492/>`__, and\ndraws inspiration from `many sources\n<https://github.com/python-trio/trio/wiki/Reading-list>`__, in\nparticular Dave Beazley's `Curio <https://curio.readthedocs.io/>`__.\nThe resulting design is radically simpler than older competitors like\n`asyncio <https://docs.python.org/3/library/asyncio.html>`__ and\n`Twisted <https://twistedmatrix.com/>`__, yet just as capable. Trio is\nthe Python I/O library I always wanted; I find it makes building\nI/O-oriented programs easier, less error-prone, and just plain more\nfun. `Perhaps you'll find the same\n<https://github.com/python-trio/trio/wiki/Testimonials>`__.\n\nThis project is young and still somewhat experimental: the overall\ndesign is solid, and the existing features are fully tested and\ndocumented, but you may encounter missing functionality or rough\nedges. We *do* encourage you to use it, but you should `read and\nsubscribe to issue #1\n<https://github.com/python-trio/trio/issues/1>`__ to get a warning and a\nchance to give feedback about any compatibility-breaking changes.\n\n\nWhere to next?\n--------------\n\n**I want to try it out!** Awesome! We have a `friendly tutorial\n<https://trio.readthedocs.io/en/stable/tutorial.html>`__ to get you\nstarted; no prior experience with async coding is required.\n\n**Ugh, I don't want to read all that – show me some code!** If you're\nimpatient, then here's a `simple concurrency example\n<https://trio.readthedocs.io/en/stable/tutorial.html#tutorial-example-tasks-intro>`__,\nan `echo client\n<https://trio.readthedocs.io/en/stable/tutorial.html#tutorial-echo-client-example>`__,\nand an `echo server\n<https://trio.readthedocs.io/en/stable/tutorial.html#tutorial-echo-server-example>`__.\n\n**How does Trio make programs easier to read and reason about than\ncompeting approaches?** Trio is based on a new way of thinking that we\ncall \"structured concurrency\". The best theoretical introduction is\nthe article `Notes on structured concurrency, or: Go statement\nconsidered harmful\n<https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/>`__.\nOr, `check out this talk at PyCon 2018\n<https://www.youtube.com/watch?v=oLkfnc_UMcE>`__ to see a\ndemonstration of implementing the \"Happy Eyeballs\" algorithm in an\nolder library versus Trio.\n\n**Cool, but will it work on my system?** Probably! As long as you have\nsome kind of Python 3.9-or-better (CPython or `currently maintained versions of\nPyPy3 <https://doc.pypy.org/en/latest/faq.html#which-python-versions-does-pypy-implement>`__\nare both fine), and are using Linux, macOS, Windows, or FreeBSD, then Trio\nwill work. Other environments might work too, but those\nare the ones we test on. And all of our dependencies are pure Python,\nexcept for CFFI on Windows, which has wheels available, so\ninstallation should be easy (no C compiler needed).\n\n**I tried it, but it's not working.** Sorry to hear that! You can try\nasking for help in our `chat room\n<https://gitter.im/python-trio/general>`__ or `forum\n<https://trio.discourse.group>`__, `filing a bug\n<https://github.com/python-trio/trio/issues/new>`__, or `posting a\nquestion on StackOverflow\n<https://stackoverflow.com/questions/ask?tags=python+python-trio>`__,\nand we'll do our best to help you out.\n\n**Trio is awesome, and I want to help make it more awesome!** You're\nthe best! There's tons of work to do – filling in missing\nfunctionality, building up an ecosystem of Trio-using libraries,\nusability testing (e.g., maybe try teaching yourself or a friend to\nuse Trio and make a list of every error message you hit and place\nwhere you got confused?), improving the docs, ... check out our `guide\nfor contributors\n<https://trio.readthedocs.io/en/stable/contributing.html>`__!\n\n**I don't have any immediate plans to use it, but I love geeking out\nabout I/O library design!** That's a little weird? But let's be\nhonest, you'll fit in great around here. We have a `whole sub-forum\nfor discussing structured concurrency\n<https://trio.discourse.group/c/structured-concurrency>`__ (developers\nof other systems welcome!). Or check out our `discussion of design\nchoices\n<https://trio.readthedocs.io/en/stable/design.html#user-level-api-principles>`__,\n`reading list\n<https://github.com/python-trio/trio/wiki/Reading-list>`__, and\n`issues tagged design-discussion\n<https://github.com/python-trio/trio/labels/design%20discussion>`__.\n\n**I want to make sure my company's lawyers won't get angry at me!** No\nworries, Trio is permissively licensed under your choice of MIT or\nApache 2. See `LICENSE\n<https://github.com/python-trio/trio/blob/main/LICENSE>`__ for details.\n\n\nCode of conduct\n---------------\n\nContributors are requested to follow our `code of conduct\n<https://trio.readthedocs.io/en/stable/code-of-conduct.html>`__ in all\nproject spaces.\n"
        },
        {
          "name": "check.sh",
          "type": "blob",
          "size": 2.7314453125,
          "content": "#!/bin/bash\n\nset -ex\n\nON_GITHUB_CI=true\nEXIT_STATUS=0\n\n# If not running on Github's CI, discard the summaries\nif [ -z \"${GITHUB_STEP_SUMMARY+x}\" ]; then\n    GITHUB_STEP_SUMMARY=/dev/null\n    ON_GITHUB_CI=false\nfi\n\n# Test if the generated code is still up to date\necho \"::group::Generate Exports\"\npython ./src/trio/_tools/gen_exports.py --test \\\n    || EXIT_STATUS=$?\necho \"::endgroup::\"\n\n# Run mypy on all supported platforms\n# MYPY is set if any of them fail.\nMYPY=0\necho \"::group::Mypy\"\n# Cleanup previous runs.\nrm -f mypy_annotate.dat\n# Pipefail makes these pipelines fail if mypy does, even if mypy_annotate.py succeeds.\nset -o pipefail\nmypy --show-error-end --platform linux | python ./src/trio/_tools/mypy_annotate.py --dumpfile mypy_annotate.dat --platform Linux \\\n    || { echo \"* Mypy (Linux) found type errors.\" >> \"$GITHUB_STEP_SUMMARY\"; MYPY=1; }\n# Darwin tests FreeBSD too\nmypy --show-error-end --platform darwin | python ./src/trio/_tools/mypy_annotate.py --dumpfile mypy_annotate.dat --platform Mac \\\n    || { echo \"* Mypy (Mac) found type errors.\" >> \"$GITHUB_STEP_SUMMARY\"; MYPY=1; }\nmypy --show-error-end --platform win32 | python ./src/trio/_tools/mypy_annotate.py --dumpfile mypy_annotate.dat --platform Windows \\\n    || { echo \"* Mypy (Windows) found type errors.\" >> \"$GITHUB_STEP_SUMMARY\"; MYPY=1; }\nset +o pipefail\n# Re-display errors using Github's syntax, read out of mypy_annotate.dat\npython ./src/trio/_tools/mypy_annotate.py --dumpfile mypy_annotate.dat\n# Then discard.\nrm -f mypy_annotate.dat\necho \"::endgroup::\"\n# Display a big error if we failed, outside the group so it can't be collapsed.\nif [ $MYPY -ne 0 ]; then\n    echo \"::error:: Mypy found type errors.\"\n    EXIT_STATUS=1\nfi\n\n# Check pip compile is consistent\necho \"::group::Pip Compile - Tests & Docs\"\npre-commit run pip-compile --all-files \\\n    || EXIT_STATUS=$?\necho \"::endgroup::\"\n\necho \"::group::Pyright interface tests\"\npython src/trio/_tests/check_type_completeness.py || EXIT_STATUS=$?\n\npyright src/trio/_tests/type_tests || EXIT_STATUS=$?\npyright src/trio/_core/_tests/type_tests || EXIT_STATUS=$?\necho \"::endgroup::\"\n\n# Finally, leave a really clear warning of any issues and exit\nif [ $EXIT_STATUS -ne 0 ]; then\n    cat <<EOF\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nProblems were found by static analysis (listed above).\nTo fix formatting and see remaining errors, run\n\n    uv pip install -r test-requirements.txt\n    pre-commit run --all-files\n    ./check.sh\n\nin your local checkout.\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nEOF\n    exit 1\nfi\necho \"# Formatting checks succeeded.\" >> \"$GITHUB_STEP_SUMMARY\"\nexit 0\n"
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 6.306640625,
          "content": "#!/bin/bash\n\nset -ex -o pipefail\n\n# disable warnings about pyright being out of date\n# used in test_exports and in check.sh\nexport PYRIGHT_PYTHON_IGNORE_WARNINGS=1\n\n# Log some general info about the environment\necho \"::group::Environment\"\nuname -a\nenv | sort\necho \"::endgroup::\"\n\n# Curl's built-in retry system is not very robust; it gives up on lots of\n# network errors that we want to retry on. Wget might work better, but it's\n# not installed on azure pipelines's windows boxes. So... let's try some good\n# old-fashioned brute force. (This is also a convenient place to put options\n# we always want, like -f to tell curl to give an error if the server sends an\n# error response, and -L to follow redirects.)\nfunction curl-harder() {\n    for BACKOFF in 0 1 2 4 8 15 15 15 15; do\n        sleep $BACKOFF\n        if curl -fL --connect-timeout 5 \"$@\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n################################################################\n# We have a Python environment!\n################################################################\n\necho \"::group::Versions\"\npython -c \"import sys, struct, ssl; print('python:', sys.version); print('version_info:', sys.version_info); print('bits:', struct.calcsize('P') * 8); print('openssl:', ssl.OPENSSL_VERSION, ssl.OPENSSL_VERSION_INFO)\"\necho \"::endgroup::\"\n\necho \"::group::Install dependencies\"\npython -m pip install -U pip uv -c test-requirements.txt\npython -m pip --version\npython -m uv --version\n\npython -m uv pip install build\n\npython -m build\nwheel_package=$(ls dist/*.whl)\npython -m uv pip install \"trio @ $wheel_package\" -c test-requirements.txt\n\nif [ \"$CHECK_FORMATTING\" = \"1\" ]; then\n    python -m uv pip install -r test-requirements.txt exceptiongroup\n    echo \"::endgroup::\"\n    source check.sh\nelse\n    # Actual tests\n    # expands to 0 != 1 if NO_TEST_REQUIREMENTS is not set, if set the `-0` has no effect\n    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02\n    if [ \"${NO_TEST_REQUIREMENTS-0}\" == 1 ]; then\n        python -m uv pip install pytest coverage -c test-requirements.txt\n        flags=\"--skip-optional-imports\"\n    else\n        python -m uv pip install -r test-requirements.txt\n        flags=\"\"\n    fi\n\n    # So we can run the test for our apport/excepthook interaction working\n    if [ -e /etc/lsb-release ] && grep -q Ubuntu /etc/lsb-release; then\n        sudo apt install -q python3-apport\n    fi\n\n    # If we're testing with a LSP installed, then it might break network\n    # stuff, so wait until after we've finished setting everything else\n    # up.\n    if [ \"$LSP\" != \"\" ]; then\n        echo \"Installing LSP from ${LSP}\"\n        # We use --insecure because one of the LSP's has been observed to give\n        # cert verification errors:\n        #\n        #   https://github.com/python-trio/trio/issues/1478\n        #\n        # *Normally*, you should never ever use --insecure, especially when\n        # fetching an executable! But *in this case*, we're intentionally\n        # installing some untrustworthy quasi-malware onto into a sandboxed\n        # machine for testing. So MITM attacks are really the least of our\n        # worries.\n        if [ \"$LSP_EXTRACT_FILE\" != \"\" ]; then\n            # We host the Astrill VPN installer ourselves, and encrypt it\n            # so as to decrease the chances of becoming an inadvertent\n            # public redistributor.\n            curl-harder -o lsp-installer.zip \"$LSP\"\n            unzip -P \"not very secret trio ci key\" lsp-installer.zip \"$LSP_EXTRACT_FILE\"\n            mv \"$LSP_EXTRACT_FILE\" lsp-installer.exe\n        else\n            curl-harder --insecure -o lsp-installer.exe \"$LSP\"\n        fi\n        # This is only needed for the Astrill LSP, but there's no harm in\n        # doing it all the time. The cert was manually extracted by installing\n        # the package in a VM, clicking \"Always trust from this publisher\"\n        # when installing, and then running 'certmgr.msc' and exporting the\n        # certificate. See:\n        #    http://www.migee.com/2010/09/24/solution-for-unattendedsilent-installs-and-would-you-like-to-install-this-device-software/\n        certutil -addstore \"TrustedPublisher\" src/trio/_tests/astrill-codesigning-cert.cer\n        # Double-slashes are how you tell windows-bash that you want a single\n        # slash, and don't treat this as a unix-style filename that needs to\n        # be replaced by a windows-style filename.\n        # http://www.mingw.org/wiki/Posix_path_conversion\n        ./lsp-installer.exe //silent //norestart\n        echo \"Waiting for LSP to appear in Winsock catalog\"\n        while ! netsh winsock show catalog | grep \"Layered Chain Entry\"; do\n            sleep 1\n        done\n        netsh winsock show catalog\n    fi\n    echo \"::endgroup::\"\n\n    echo \"::group::Setup for tests\"\n\n    # We run the tests from inside an empty directory, to make sure Python\n    # doesn't pick up any .py files from our working dir. Might have already\n    # been created by a previous run.\n    mkdir empty || true\n    cd empty\n\n    INSTALLDIR=$(python -c \"import os, trio; print(os.path.dirname(trio.__file__))\")\n    cp ../pyproject.toml \"$INSTALLDIR\"  # TODO: remove this\n\n    # get mypy tests a nice cache\n    MYPYPATH=\"..\" mypy --config-file= --cache-dir=./.mypy_cache -c \"import trio\" >/dev/null 2>/dev/null || true\n\n    # support subprocess spawning with coverage.py\n    echo \"import coverage; coverage.process_startup()\" | tee -a \"$INSTALLDIR/../sitecustomize.py\"\n\n    perl -i -pe 's/-p trio\\._tests\\.pytest_plugin//' \"$INSTALLDIR/pyproject.toml\"\n\n    echo \"::endgroup::\"\n    echo \"::group:: Run Tests\"\n    if PYTHONPATH=../tests COVERAGE_PROCESS_START=$(pwd)/../pyproject.toml \\\n            coverage run --rcfile=../pyproject.toml -m \\\n            pytest -ra --junitxml=../test-results.xml \\\n            -p _trio_check_attrs_aliases --verbose --durations=10 \\\n            -p trio._tests.pytest_plugin --run-slow $flags \"${INSTALLDIR}\"; then\n        PASSED=true\n    else\n        PASSED=false\n    fi\n    echo \"::endgroup::\"\n    echo \"::group::Coverage\"\n\n    coverage combine --rcfile ../pyproject.toml\n    coverage report -m --rcfile ../pyproject.toml\n    coverage xml --rcfile ../pyproject.toml\n\n    # Remove the LSP again; again we want to do this ASAP to avoid\n    # accidentally breaking other stuff.\n    if [ \"$LSP\" != \"\" ]; then\n        netsh winsock reset\n    fi\n\n    echo \"::endgroup::\"\n    $PASSED\nfi\n"
        },
        {
          "name": "docs-requirements.in",
          "type": "blob",
          "size": 0.560546875,
          "content": "# RTD is currently installing 1.5.3, which has a bug in :lineno-match: (??)\n# sphinx 5.3 doesn't work with our _NoValue workaround\nsphinx >= 6.0\njinja2\n# >= is necessary to prevent `uv` from selecting a `Sphinx` version this does not support\nsphinx_rtd_theme >= 3\nsphinxcontrib-jquery\nsphinxcontrib-trio\ntowncrier\nsphinx-hoverxref\nsphinx-codeautolink\n\n# Trio's own dependencies\ncffi; os_name == \"nt\"\nattrs >= 23.2.0\nsortedcontainers\nidna\noutcome\nsniffio\nexceptiongroup >= 1.0.0rc9\n\n# See note in test-requirements.in\nimmutables >= 0.6\n\n# types used in annotations\npyOpenSSL\n"
        },
        {
          "name": "docs-requirements.txt",
          "type": "blob",
          "size": 2.4775390625,
          "content": "# This file was autogenerated by uv via the following command:\n#    uv pip compile --universal --python-version=3.11 docs-requirements.in -o docs-requirements.txt\nalabaster==1.0.0\n    # via sphinx\nattrs==24.3.0\n    # via\n    #   -r docs-requirements.in\n    #   outcome\nbabel==2.16.0\n    # via sphinx\nbeautifulsoup4==4.12.3\n    # via sphinx-codeautolink\ncertifi==2024.12.14\n    # via requests\ncffi==1.17.1 ; os_name == 'nt' or platform_python_implementation != 'PyPy'\n    # via\n    #   -r docs-requirements.in\n    #   cryptography\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8\n    # via towncrier\ncolorama==0.4.6 ; sys_platform == 'win32'\n    # via\n    #   click\n    #   sphinx\ncryptography==44.0.0\n    # via pyopenssl\ndocutils==0.21.2\n    # via\n    #   sphinx\n    #   sphinx-rtd-theme\nexceptiongroup==1.2.2\n    # via -r docs-requirements.in\nidna==3.10\n    # via\n    #   -r docs-requirements.in\n    #   requests\nimagesize==1.4.1\n    # via sphinx\nimmutables==0.21\n    # via -r docs-requirements.in\njinja2==3.1.5\n    # via\n    #   -r docs-requirements.in\n    #   sphinx\n    #   towncrier\nmarkupsafe==3.0.2\n    # via jinja2\noutcome==1.3.0.post0\n    # via -r docs-requirements.in\npackaging==24.2\n    # via sphinx\npycparser==2.22 ; os_name == 'nt' or platform_python_implementation != 'PyPy'\n    # via cffi\npygments==2.18.0\n    # via sphinx\npyopenssl==24.3.0\n    # via -r docs-requirements.in\nrequests==2.32.3\n    # via sphinx\nsniffio==1.3.1\n    # via -r docs-requirements.in\nsnowballstemmer==2.2.0\n    # via sphinx\nsortedcontainers==2.4.0\n    # via -r docs-requirements.in\nsoupsieve==2.6\n    # via beautifulsoup4\nsphinx==8.1.3\n    # via\n    #   -r docs-requirements.in\n    #   sphinx-codeautolink\n    #   sphinx-hoverxref\n    #   sphinx-rtd-theme\n    #   sphinxcontrib-jquery\n    #   sphinxcontrib-trio\nsphinx-codeautolink==0.15.2\n    # via -r docs-requirements.in\nsphinx-hoverxref==1.4.2\n    # via -r docs-requirements.in\nsphinx-rtd-theme==3.0.2\n    # via -r docs-requirements.in\nsphinxcontrib-applehelp==2.0.0\n    # via sphinx\nsphinxcontrib-devhelp==2.0.0\n    # via sphinx\nsphinxcontrib-htmlhelp==2.1.0\n    # via sphinx\nsphinxcontrib-jquery==4.1\n    # via\n    #   -r docs-requirements.in\n    #   sphinx-hoverxref\n    #   sphinx-rtd-theme\nsphinxcontrib-jsmath==1.0.1\n    # via sphinx\nsphinxcontrib-qthelp==2.0.0\n    # via sphinx\nsphinxcontrib-serializinghtml==2.0.0\n    # via sphinx\nsphinxcontrib-trio==1.1.2\n    # via -r docs-requirements.in\ntowncrier==24.8.0\n    # via -r docs-requirements.in\nurllib3==2.3.0\n    # via requests\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "newsfragments",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 9.6572265625,
          "content": "[build-system]\nrequires = [\"setuptools >= 64\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"trio\"\ndescription = \"A friendly Python library for async concurrency and I/O\"\nauthors = [{name = \"Nathaniel J. Smith\", email = \"njs@pobox.com\"}]\nlicense = {text = \"MIT OR Apache-2.0\"}\nkeywords = [\n    \"async\",\n    \"io\",\n    \"networking\",\n    \"trio\",\n]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Framework :: Trio\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Operating System :: MacOS :: MacOS X\",\n    \"Operating System :: POSIX :: BSD\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: System :: Networking\",\n    \"Typing :: Typed\",\n]\nrequires-python = \">=3.9\"\ndependencies = [\n    # attrs 19.2.0 adds `eq` option to decorators\n    # attrs 20.1.0 adds @frozen\n    # attrs 21.1.0 adds a dataclass transform for type-checkers\n    # attrs 21.3.0 adds `import attrs`\n    \"attrs >= 23.2.0\",\n    \"sortedcontainers\",\n    \"idna\",\n    \"outcome\",\n    \"sniffio >= 1.3.0\",\n    # cffi 1.12 adds from_buffer(require_writable=True) and ffi.release()\n    # cffi 1.14 fixes memory leak inside ffi.getwinerror()\n    # cffi is required on Windows, except on PyPy where it is built-in\n    \"cffi>=1.14; os_name == 'nt' and implementation_name != 'pypy'\",\n    \"exceptiongroup; python_version < '3.11'\",\n]\ndynamic = [\"version\"]\n\n[project.readme]\nfile = \"README.rst\"\ncontent-type = \"text/x-rst\"\n\n[project.urls]\nHomepage = \"https://github.com/python-trio/trio\"\nDocumentation = \"https://trio.readthedocs.io/\"\nChangelog = \"https://trio.readthedocs.io/en/latest/history.html\"\n\n[project.entry-points.hypothesis]\ntrio = \"trio._core._run:_hypothesis_plugin_setup\"\n\n[tool.setuptools]\n# This means, just install *everything* you see under trio/, even if it\n# doesn't look like a source file, so long as it appears in MANIFEST.in:\ninclude-package-data = true\n\n[tool.setuptools.dynamic]\nversion = {attr = \"trio._version.__version__\"}\n\n[tool.black]\nforce-exclude = '''\n(\n  ^/docs/source/reference-.*\n  | ^/docs/source/tutorial\n)\n'''\n\n[tool.codespell]\nignore-words-list = 'astroid,crasher,asend'\n\n[tool.typos]\ndefault.extend-ignore-re = [\n    \"(?Rm)^.*(#|//)\\\\s*spellchecker:disable-line$\",\n]\n\n[tool.typos.default.extend-identifiers]\nIPPROTO_ND = \"IPPROTO_ND\"\n\n[tool.typos.default.extend-words]\nastroid = \"astroid\"\ncrasher = \"crasher\"\nasend = \"asend\"\n\n[tool.ruff]\nrespect-gitignore = true\nfix = true\n\n# The directories to consider when resolving first vs. third-party imports.\n# Does not control what files to include/exclude!\nsrc = [\"src/trio\"]\n\ninclude = [\"*.py\", \"*.pyi\", \"**/pyproject.toml\"]\n\nextend-exclude = [\n  \"docs/source/reference-*\",\n  \"docs/source/tutorial/*\",\n]\n\n[tool.ruff.lint]\npreview = true\nallowed-confusables = [\"–\"]\n\nselect = [\n    \"A\",     # flake8-builtins\n    \"ANN\",   # flake8-annotations\n    \"ASYNC\", # flake8-async\n    \"B\",     # flake8-bugbear\n    \"C4\",    # flake8-comprehensions\n    \"COM\",   # flake8-commas\n    \"E\",     # Error\n    \"EXE\",   # flake8-executable\n    \"F\",     # pyflakes\n    \"FA\",    # flake8-future-annotations\n    \"FLY\",   # flynt\n    \"FURB\",  # refurb\n    \"I\",     # isort\n    \"ICN\",   # flake8-import-conventions\n    \"PERF\",  # Perflint\n    \"PIE\",   # flake8-pie\n    \"PT\",    # flake8-pytest-style\n    \"PYI\",   # flake8-pyi\n    \"Q\",     # flake8-quotes\n    \"RUF\",   # Ruff-specific rules\n    \"SIM\",   # flake8-simplify\n    \"TC\",    # flake8-type-checking\n    \"UP\",    # pyupgrade\n    \"W\",     # Warning\n    \"YTT\",   # flake8-2020\n]\nextend-ignore = [\n    \"A002\",    # builtin-argument-shadowing\n    \"ANN401\",  # any-type (mypy's `disallow_any_explicit` is better)\n    \"E402\",    # module-import-not-at-top-of-file (usually OS-specific)\n    \"E501\",    # line-too-long\n    \"F403\",    # undefined-local-with-import-star\n    \"F405\",    # undefined-local-with-import-star-usage\n    \"PERF203\", # try-except-in-loop (not always possible to refactor)\n    \"PT012\",   # multiple statements in pytest.raises block\n    \"SIM117\",  # multiple-with-statements (messes up lots of context-based stuff and looks bad)\n\n    # conflicts with formatter (ruff recommends these be disabled)\n    \"COM812\",\n]\n\n[tool.ruff.lint.per-file-ignores]\n# F401 is ignoring unused imports. For these particular files,\n# these are public APIs where we are importing everything we want\n# to export for public use.\n'src/trio/__init__.py' = ['F401']\n'src/trio/_core/__init__.py' = ['F401']\n'src/trio/abc.py' = ['F401', 'A005']\n'src/trio/lowlevel.py' = ['F401']\n'src/trio/socket.py' = ['F401', 'A005']\n'src/trio/testing/__init__.py' = ['F401']\n# RUF029 is ignoring tests that are marked as async functions but\n# do not use an await in their function bodies. There are several\n# places where internal trio synchronous code relies on being\n# called from an async function, where current task is set up.\n'src/trio/_tests/*.py' = ['RUF029']\n'src/trio/_core/_tests/*.py' = ['RUF029']\n# A005 is ignoring modules that shadow stdlib modules.\n'src/trio/_abc.py' = ['A005']\n'src/trio/_socket.py' = ['A005']\n'src/trio/_ssl.py' = ['A005']\n\n[tool.ruff.lint.isort]\ncombine-as-imports = true\n\n[tool.ruff.lint.flake8-pytest-style]\nfixture-parentheses = false\n\n[tool.mypy]\npython_version = \"3.9\"\nfiles = [\"src/trio/\", \"docs/source/*.py\"]\n\n# Be flexible about dependencies that don't have stubs yet (like pytest)\nignore_missing_imports = true\n\n# Be strict about use of Mypy\nlocal_partial_types = true\nwarn_unused_ignores = true\nwarn_unused_configs = true\nwarn_redundant_casts = true\nwarn_return_any = true\n\n# Avoid subtle backsliding\ndisallow_any_decorated = true\ndisallow_any_explicit = true\ndisallow_any_generics = true\ndisallow_any_unimported = true\ndisallow_incomplete_defs = true\ndisallow_subclassing_any = true\ndisallow_untyped_calls = true\ndisallow_untyped_decorators = true\ndisallow_untyped_defs = true\ncheck_untyped_defs = true\n\n[tool.pyright]\npythonVersion = \"3.9\"\nreportUnnecessaryTypeIgnoreComment = true\ntypeCheckingMode = \"strict\"\n\n[tool.pytest.ini_options]\naddopts = [\"--strict-markers\", \"--strict-config\", \"-p trio._tests.pytest_plugin\", \"--import-mode=importlib\"]\nfaulthandler_timeout = 60\nfilterwarnings = [\n  \"error\",\n  # https://gitter.im/python-trio/general?at=63bb8d0740557a3d5c688d67\n  'ignore:You are using cryptography on a 32-bit Python on a 64-bit Windows Operating System. Cryptography will be significantly faster if you switch to using a 64-bit Python.:UserWarning',\n  # https://github.com/berkerpeksag/astor/issues/217\n  'ignore:ast.Num is deprecated:DeprecationWarning:astor',\n]\njunit_family = \"xunit2\"\nmarkers = [\"redistributors_should_skip: tests that should be skipped by downstream redistributors\"]\nxfail_strict = true\n\n[tool.towncrier]\ndirectory = \"newsfragments\"\nfilename = \"docs/source/history.rst\"\nissue_format = \"`#{issue} <https://github.com/python-trio/trio/issues/{issue}>`__\"\n# Usage:\n# - PRs should drop a file like \"issuenumber.feature\" in newsfragments\n# (or \"bugfix\", \"doc\", \"removal\", \"misc\"; misc gets no text, we can\n# customize this)\n# - At release time after bumping version number, run: towncrier\n# (or towncrier --draft)\npackage = \"trio\"\npackage_dir = \"src\"\nunderlines = [\"-\", \"~\", \"^\"]\n\n[[tool.towncrier.type]]\ndirectory = \"headline\"\nname = \"Headline features\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"breaking\"\nname = \"Breaking changes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"feature\"\nname = \"Features\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"bugfix\"\nname = \"Bugfixes\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"doc\"\nname = \"Improved documentation\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"deprecated\"\nname = \"Deprecations and removals\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"removal\"\nname = \"Removals without deprecations\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"misc\"\nname = \"Miscellaneous internal changes\"\nshowcontent = true\n\n[tool.coverage.html]\nshow_contexts = true\nskip_covered = false\n\n[tool.coverage.paths]\n_site-packages-to-src-mapping = [\n  \"src\",\n  \"*/src\",\n  '*\\src',\n  \"*/lib/pypy*/site-packages\",\n  \"*/lib/python*/site-packages\",\n  '*\\Lib\\site-packages',\n]\n\n[tool.coverage.run]\nbranch = true\nsource_pkgs = [\"trio\"]\nomit = [\n    # Omit the generated files in trio/_core starting with _generated_\n    \"*/trio/_core/_generated_*\",\n    # Type tests aren't intended to be run, just passed to type checkers.\n    \"*/type_tests/*\",\n    # Script used to check type completeness that isn't run in tests\n    \"*/trio/_tests/check_type_completeness.py\",\n]\n# The test suite spawns subprocesses to test some stuff, so make sure\n# this doesn't corrupt the coverage files\nparallel = true\nplugins = []\nrelative_files = true\nsource = [\".\"]\n\n[tool.coverage.report]\nprecision = 1\nskip_covered = true\nskip_empty = true\nshow_missing = true\nexclude_also = [\n  '^\\s*@pytest\\.mark\\.xfail',\n   \"abc.abstractmethod\",\n   \"if TYPE_CHECKING.*:\",\n   \"if _t.TYPE_CHECKING:\",\n   \"if t.TYPE_CHECKING:\",\n   \"@overload\",\n   'class .*\\bProtocol\\b.*\\):',\n   \"raise NotImplementedError\",\n   'TODO: test this line'\n]\npartial_branches = [\n    \"pragma: no branch\",\n    \"if not TYPE_CHECKING:\",\n    \"if not _t.TYPE_CHECKING:\",\n    \"if not t.TYPE_CHECKING:\",\n    \"if .* or not TYPE_CHECKING:\",\n    \"if .* or not _t.TYPE_CHECKING:\",\n    \"if .* or not t.TYPE_CHECKING:\",\n   'TODO: test this branch',\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-requirements.in",
          "type": "blob",
          "size": 0.994140625,
          "content": "# For tests\npytest >= 5.0         # for faulthandler in core\ncoverage >= 7.2.5\nasync_generator >= 1.9\npyright\npyOpenSSL >= 22.0.0   # for the ssl + DTLS tests\ntrustme               # for the ssl + DTLS tests\npylint                # for pylint finding all symbols tests\njedi; implementation_name == \"cpython\"                  # for jedi code completion tests\ncryptography>=41.0.0  # cryptography<41 segfaults on pypy3.10\n\n# Tools\nblack; implementation_name == \"cpython\"\nmypy  # Would use mypy[faster-cache], but orjson has build issues on pypy\norjson; implementation_name == \"cpython\"\nruff >= 0.8.0\nastor          # code generation\nuv >= 0.2.24\ncodespell\npre-commit\n\n# https://github.com/python-trio/trio/pull/654#issuecomment-420518745\nmypy-extensions\ntyping-extensions\ntypes-cffi\ntypes-pyOpenSSL\n# annotations in doc files\ntypes-docutils\nsphinx\n\n# Trio's own dependencies\ncffi; os_name == \"nt\"\nattrs >= 23.2.0\nsortedcontainers\nidna\noutcome\nsniffio\n# 1.2.1 fixes types\nexceptiongroup >= 1.2.1; python_version < \"3.11\"\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 4.2392578125,
          "content": "# This file was autogenerated by uv via the following command:\n#    uv pip compile --universal --python-version=3.9 test-requirements.in -o test-requirements.txt\nalabaster==0.7.16\n    # via sphinx\nastor==0.8.1\n    # via -r test-requirements.in\nastroid==3.3.8\n    # via pylint\nasync-generator==1.10\n    # via -r test-requirements.in\nattrs==24.3.0\n    # via\n    #   -r test-requirements.in\n    #   outcome\nbabel==2.16.0\n    # via sphinx\nblack==24.10.0 ; implementation_name == 'cpython'\n    # via -r test-requirements.in\ncertifi==2024.12.14\n    # via requests\ncffi==1.17.1 ; os_name == 'nt' or platform_python_implementation != 'PyPy'\n    # via\n    #   -r test-requirements.in\n    #   cryptography\ncfgv==3.4.0\n    # via pre-commit\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8 ; implementation_name == 'cpython'\n    # via black\ncodespell==2.3.0\n    # via -r test-requirements.in\ncolorama==0.4.6 ; sys_platform == 'win32'\n    # via\n    #   click\n    #   pylint\n    #   pytest\n    #   sphinx\ncoverage==7.6.10\n    # via -r test-requirements.in\ncryptography==44.0.0\n    # via\n    #   -r test-requirements.in\n    #   pyopenssl\n    #   trustme\n    #   types-pyopenssl\ndill==0.3.9\n    # via pylint\ndistlib==0.3.9\n    # via virtualenv\ndocutils==0.21.2\n    # via sphinx\nexceptiongroup==1.2.2 ; python_full_version < '3.11'\n    # via\n    #   -r test-requirements.in\n    #   pytest\nfilelock==3.16.1\n    # via virtualenv\nidentify==2.6.4\n    # via pre-commit\nidna==3.10\n    # via\n    #   -r test-requirements.in\n    #   requests\n    #   trustme\nimagesize==1.4.1\n    # via sphinx\nimportlib-metadata==8.5.0 ; python_full_version < '3.10'\n    # via sphinx\niniconfig==2.0.0\n    # via pytest\nisort==5.13.2\n    # via pylint\njedi==0.19.2 ; implementation_name == 'cpython'\n    # via -r test-requirements.in\njinja2==3.1.5\n    # via sphinx\nmarkupsafe==3.0.2\n    # via jinja2\nmccabe==0.7.0\n    # via pylint\nmypy==1.14.1\n    # via -r test-requirements.in\nmypy-extensions==1.0.0\n    # via\n    #   -r test-requirements.in\n    #   black\n    #   mypy\nnodeenv==1.9.1\n    # via\n    #   pre-commit\n    #   pyright\norjson==3.10.13 ; implementation_name == 'cpython'\n    # via -r test-requirements.in\noutcome==1.3.0.post0\n    # via -r test-requirements.in\npackaging==24.2\n    # via\n    #   black\n    #   pytest\n    #   sphinx\nparso==0.8.4 ; implementation_name == 'cpython'\n    # via jedi\npathspec==0.12.1 ; implementation_name == 'cpython'\n    # via black\nplatformdirs==4.3.6\n    # via\n    #   black\n    #   pylint\n    #   virtualenv\npluggy==1.5.0\n    # via pytest\npre-commit==4.0.1\n    # via -r test-requirements.in\npycparser==2.22 ; os_name == 'nt' or platform_python_implementation != 'PyPy'\n    # via cffi\npygments==2.18.0\n    # via sphinx\npylint==3.3.3\n    # via -r test-requirements.in\npyopenssl==24.3.0\n    # via -r test-requirements.in\npyright==1.1.391\n    # via -r test-requirements.in\npytest==8.3.4\n    # via -r test-requirements.in\npyyaml==6.0.2\n    # via pre-commit\nrequests==2.32.3\n    # via sphinx\nruff==0.8.6\n    # via -r test-requirements.in\nsniffio==1.3.1\n    # via -r test-requirements.in\nsnowballstemmer==2.2.0\n    # via sphinx\nsortedcontainers==2.4.0\n    # via -r test-requirements.in\nsphinx==7.4.7\n    # via -r test-requirements.in\nsphinxcontrib-applehelp==2.0.0\n    # via sphinx\nsphinxcontrib-devhelp==2.0.0\n    # via sphinx\nsphinxcontrib-htmlhelp==2.1.0\n    # via sphinx\nsphinxcontrib-jsmath==1.0.1\n    # via sphinx\nsphinxcontrib-qthelp==2.0.0\n    # via sphinx\nsphinxcontrib-serializinghtml==2.0.0\n    # via sphinx\ntomli==2.2.1 ; python_full_version < '3.11'\n    # via\n    #   black\n    #   mypy\n    #   pylint\n    #   pytest\n    #   sphinx\ntomlkit==0.13.2\n    # via pylint\ntrustme==1.2.1\n    # via -r test-requirements.in\ntypes-cffi==1.16.0.20241221\n    # via\n    #   -r test-requirements.in\n    #   types-pyopenssl\ntypes-docutils==0.21.0.20241128\n    # via -r test-requirements.in\ntypes-pyopenssl==24.1.0.20240722\n    # via -r test-requirements.in\ntypes-setuptools==75.6.0.20241223\n    # via types-cffi\ntyping-extensions==4.12.2\n    # via\n    #   -r test-requirements.in\n    #   astroid\n    #   black\n    #   mypy\n    #   pylint\n    #   pyright\nurllib3==2.3.0\n    # via requests\nuv==0.5.14\n    # via -r test-requirements.in\nvirtualenv==20.28.0\n    # via pre-commit\nzipp==3.21.0 ; python_full_version < '3.10'\n    # via importlib-metadata\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}