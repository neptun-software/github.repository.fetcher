{
  "metadata": {
    "timestamp": 1736560724719,
    "page": 397,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "schollz/howmanypeoplearearound",
      "stars": 6930,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0556640625,
          "content": "# Byte-compiled / optimized / DLL files\nindex.html\n__pycache__/\n*.py[cod]\n*$py.class\n.vscode\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# Pycharm\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5107421875,
          "content": "sudo: false\ndist: trusty\nlanguage: python\ncache: pip\npython:\n    - 2.7.13\n    - 3.6\ninstall:\n    - pip install --upgrade pip setuptools\n    - pip install flake8\nbefore_script:\n    flake8 . --count --exclude=./howmanypeoplearearound/plotlyjs.py --exit-zero --max-line-length=127 --statistics  # 127 == GitHub editor width\nscript:\n    flake8 . --exclude=./howmanypeoplearearound/plotlyjs.py --select=E999,F821,F822,F823 --statistics  # Stop build on syntax errors\nnotifications:\n    on_success: change\n    on_failure: always\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7060546875,
          "content": "# Dockerfile for howmanypeoplearearound\n# Usage: docker build -t howmanypeoplearearound .\n\nFROM python:3\n\nLABEL \"repo\"=\"https://github.com/schollz/howmanypeoplearearound\"\n\nRUN apt-get update \\\n && apt-get upgrade --yes \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y tshark \\\n && yes | dpkg-reconfigure -f noninteractive wireshark-common \\\n && addgroup wireshark \\\n && usermod -a -G wireshark ${USER:-root} \\\n && newgrp wireshark \\\n && pip install howmanypeoplearearound \\\n && echo \"===========================================================================================\" \\\n && echo \"Please type: docker run -it --net=host --name howmanypeoplearearound howmanypeoplearearound\"\n\nCMD [ \"howmanypeoplearearound\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2017 Zack\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7177734375,
          "content": "\n# howmanypeoplearearound \n\nCount the number of people around you :family_man_man_boy: by monitoring wifi signals :satellite:.\n\n*howmanypeoplearearound* calculates the number of people in the vicinity\nusing the approximate number of smartphones as a proxy (since [~70% of people have smartphones nowadays](https://twitter.com/conradhackett/status/701798230619590656)). \nA cellphone is determined to be in proximity to the computer based on sniffing WiFi probe \nrequests. Possible uses of *howmanypeoplearearound* include: monitoring foot traffic in your house\nwith Raspberry Pis, seeing if your roommates are home, etc.\n\nTested on Linux (Raspbian and Ubuntu) and Mac OS X.\n\n### **It may be illegal** to monitor networks for MAC addresses, especially on networks that *you do not own*. Please check your country's laws (for US [Section 18 U.S. Code ยง 2511](https://www.law.cornell.edu/uscode/text/18/2511)) - [discussion](https://github.com/schollz/howmanypeoplearearound/issues/4).\n\nGetting started\n===============\n\nFor a video walkthrough on how to install, checkout [PNPtutorials](https://youtu.be/dLzouUfJyMM?t=3m2s).\n\n## Dependencies\n\nPython 2.7 or preferably Python 3 must be installed on your machine with the `pip` command also available.\n```\n  python -V\n  pip -V\n```\n\n### WiFi adapter that supports monitor mode\n\nThere are a number of possible USB WiFi adapters that support monitor mode. Here's a list that are popular:\n\n- [USB Rt3070 $14](https://www.amazon.com/gp/product/B00NAXX40C/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B00NAXX40C&linkId=b72d3a481799c15e483ea93c551742f4)\n- [Panda PAU5 $14](https://www.amazon.com/gp/product/B00EQT0YK2/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B00EQT0YK2&linkId=e5b954672d93f1e9ce9c9981331515c4)\n- [Panda PAU6 $15](https://www.amazon.com/gp/product/B00JDVRCI0/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B00JDVRCI0&linkId=e73e93e020941cada0e64b92186a2546)\n- [Panda PAU9 $36](https://www.amazon.com/gp/product/B01LY35HGO/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B01LY35HGO&linkId=e63f3beda9855abd59009d6173234918)\n- [Alfa AWUSO36NH $33](https://www.amazon.com/gp/product/B0035APGP6/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B0035APGP6&linkId=b4e25ba82357ca6f1a33cb23941befb3)\n- [Alfa AWUS036NHA $40](https://www.amazon.com/gp/product/B004Y6MIXS/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B004Y6MIXS&linkId=0277ca161967134a7f75dd7b3443bded)\n- [Alfa AWUS036NEH $40](https://www.amazon.com/gp/product/B0035OCVO6/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B0035OCVO6&linkId=bd45697540120291a2f6e169dcf81b96)\n- [Sabrent NT-WGHU $15 (b/g) only](https://www.amazon.com/gp/product/B003EVO9U4/ref=as_li_tl?ie=UTF8&tag=scholl-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=B003EVO9U4&linkId=06d4784d38b6bcef5957f3f6e74af8c8)\n\nNamely you want to find a USB adapter with one of the following chipsets: Atheros AR9271, Ralink RT3070, Ralink RT3572, or Ralink RT5572.\n\n### Mac OS X\n```\n  brew install wireshark\n  brew cask install wireshark-chmodbpf\n```\n\nYou need to dissociate from any AP before initiating the scanning:\n```\nsudo /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -z\n```\n\n### Linux [tshark](https://www.wireshark.org/docs/man-pages/tshark.html) \n```\nsudo apt-get install tshark\n```\n\nThen update it so it can be run as non-root:\n```\nsudo dpkg-reconfigure wireshark-common     (select YES)\nsudo usermod -a -G wireshark ${USER:-root}\nnewgrp wireshark\n```\n\n## Install\n```\npip install howmanypeoplearearound\n```\n\n\n## Run\n\n### Quickstart\n\nTo run, simply type in\n```bash\n$ howmanypeoplearearound\nUsing wlan1 adapter and scanning for 60 seconds...\n[==================================================] 100%        0s left\nThere are about 3 people around.\n```\n\nYou will be prompted for the WiFi adapter to use for scanning. Make sure to use\nan adapter that supports \"monitor\" mode.\n\n### Docker alternative\n\nIf Docker is installed locally and you want to take *howmanypeoplearearound* out for a quick spin, you can try the following:\n1. Copy Dockerfile from this repo in your current working directory\n2. `docker build -t howmanypeoplearearound .`  # that . at the end is important\n3. `docker run -it --net=host --name howmanypeoplearearound howmanypeoplearearound`\n\nNOTE: This Docker alternative is known to work on Ubuntu but *not* on Mac OS X.  Feedback on other platforms would be appreciated.\n\n\n### Options\n\nYou can modify the scan time, designate the adapter, or modify the output using some command-line options.\n```bash\n$ howmanypeoplearearound --help\n\nOptions:\n  -a, --adapter TEXT   adapter to use\n  -z, --analyze TEXT   analyze file\n  -s, --scantime TEXT  time in seconds to scan\n  -o, --out TEXT       output cellphone data to file\n  -v, --verbose        verbose mode\n  --number             just print the number\n  -j, --jsonprint      print JSON of cellphone data\n  -n, --nearby         only quantify signals that are nearby (rssi > -70)\n  --nocorrection       do not apply correction\n  --loop               loop forever\n  --sort               sort cellphone data by distance (rssi)\n```\n\n### Print JSON\n\nYou can generate an JSON-formatted output to see what kind of phones are around:\n```bash\n$ howmanypeoplearearound -o test.json -a wlan1\n[==================================================] 100%         0s left\nThere are about 4 people around.\n$ cat test.json | python3 -m json.tool\n[\n  {\n    \"rssi\": -86.0,\n    \"mac\": \"90:e7:c4:xx:xx:xx\",\n    \"company\": \"HTC Corporation\"\n  },\n  {\n    \"rssi\": -84.0,\n    \"mac\": \"80:e6:50:xx:xx:xx\",\n    \"company\": \"Apple, Inc.\"\n  },\n  {\n    \"rssi\": -49.0,\n    \"mac\": \"ac:37:43:xx:xx:xx\",\n    \"company\": \"HTC Corporation\"\n  }\n]\n```\n\nA higher rssi means closer (one of these phones is mine, and the other two are my roommates' who were upstairs). \n\n### Run forever\n\nYou can add `--loop` to make this run forever and append new lines an output file, `test.json`:\n```bash\n$ howmanypeoplearearound -o test.json -a wlan1 --loop\n```\n\n### Visualize \n\nYou can visualize the output from a looped command via a browser using:\n```bash\n$ howmanypeoplearearound --analyze test.json \nWrote index.html\nOpen browser to http://localhost:8001\nType Ctl+C to exit\n```\n\nThen just open up `index.html` in a browser and you should see plots. The first plot shows the number of people over time. Here you can see that people start arriving at work place around 8-9am (when work starts!).\n\n![newplot](https://cloud.githubusercontent.com/assets/6550035/26174159/b478b764-3b0b-11e7-9600-2aa215b789d0.png)\n\nThe second plot shows the RSSI values for the mac addresses seen. You can double-click on one of them in particular to highlight that trajectory, as I have done here for my phone (you can see when I leave from and when I arrive to work!):\n\n![newplot 1](https://cloud.githubusercontent.com/assets/6550035/26174160/b4911ae8-3b0b-11e7-93b2-92c3efaa01aa.png)\n\n\nHow does it work?\n==================\n\n*howmanypeoplearearound* counts up the number of probe requests coming from cellphones in a given amount of time.\nThe probe requests can be \"sniffed\" from a monitor-mode enabled WiFi adapter using `tshark`. An accurate count does \ndepend on everyone having cellphone and also scanning long enough (1 - 10 minutes) to capture the packet when \na phone pings the WiFi network (which happens every 1 to 10 minutes unless the phone is off or WiFi is disabled).\n\nThis is a simplification of another program I wrote, [find-lf](https://github.com/schollz/find-lf) which uses a similar idea with a cluster of Raspberry Pis to geolocate positions of cellphones within the vicinity.\n\nLicense\n=======\n\nMIT\n"
        },
        {
          "name": "howmanypeoplearearound",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.7685546875,
          "content": "from setuptools import setup\r\n\r\nsetup(\r\n    name='howmanypeoplearearound',\r\n    packages=['howmanypeoplearearound'],\r\n    version='0.5.0',\r\n    description='A tshark wrapper to count the number of cellphones in the vicinity',\r\n    author='schollz',\r\n    url='https://github.com/schollz/howmanypeoplearearound',\r\n    author_email='hypercube.platforms@gmail.com',\r\n    download_url='https://github.com/schollz/howmanypeoplearearound/archive/v0.5.0.tar.gz',\r\n    keywords=['tshark', 'wifi', 'location'],\r\n    classifiers=[],\r\n    install_requires=[\r\n        \"click\",\r\n        \"netifaces\",\r\n        \"pick\",\r\n    ],\r\n    setup_requires=[],\r\n    tests_require=[],\r\n    entry_points={'console_scripts': [\r\n        'howmanypeoplearearound = howmanypeoplearearound.__main__:main',\r\n    ], },\r\n)\r\n"
        }
      ]
    }
  ]
}