{
  "metadata": {
    "timestamp": 1736560461298,
    "page": 42,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "falconry/falcon",
      "stars": 9568,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.3974609375,
          "content": "[run]\nbranch = True\nsource = falcon\nomit = falcon/tests*,falcon/_typing.py,falcon/cmd/bench.py,falcon/bench/*,falcon/vendor/*\n\nparallel = True\n\n[report]\nshow_missing = True\n# https://coverage.readthedocs.io/en/latest/excluding.html#advanced-exclusion\nexclude_also =\n    if TYPE_CHECKING:\n    pragma: nocover\n    pragma: no py39,py310 cover\n    pragma: no py311 cover\n    @overload\n    class .*\\bProtocol\\):\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.40234375,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a final newline; trim trailing whitespace\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Set default charset for sources\n[*.{html,js,py,pyx}]\ncharset = utf-8\n\n# 4 space indentation\n[*.{py,pyx}]\nindent_style = space\nindent_size = 4\n\n# 2 space indentation\n[*.{yaml,yml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.57421875,
          "content": "# C extensions\n*.c\n*.so\n\n# Jython\n*$py.class\n\n# Build artifacts\n*.egg\n*.egg-info\n*.py[cod]\n.eggs\n.installed.cfg\n.mypy_cache\nbuild\ndevelop-eggs\ndist\neggs\nlib\nlib64\nparts\nsdist\nvar\npip-wheel-metadata\nwheelhouse\n\n# Installer logs\npip-log.txt\n\n# Test artifacts\n*.dat\n.cache\n.coverage*\n.ecosystem\n.tox\n.pytest_cache\ndownloaded_files/\ngeckodriver.log\nhtmlcov\nnosetests.xml\n\n# ASGI tutorial\n!examples/asgilook/.coveragerc\n\n# Docs\ndocs/_build\ndash\n\n# Translations\n*.mo\n\n# Idea\n.idea\n\n# System\n.DS_Store\n\n# VIM swap files\n.*.swp\n\n# VIM temp files\n*~\n\n# VSCode\n\n.vscode\n\n#py Environment\n/venv\n/env\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.6240234375,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats:\n  - pdf\n\n# We recommend specifying your dependencies to enable reproducible builds:\n# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: requirements/docs\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 5.4111328125,
          "content": "Kurt Griffiths (kgriffs) created Falcon and currently co-maintains the\nframework along with John Vrbanac (jmvrbanac), Vytautas Liuolia (vytas7),\nNick Zaccardi (nZac), and Federico Caselli (CaselIT).\n\nMany thanks to all of the project's stylish and talented contributors,\nlisted below by date of first contribution:\n\n* Alejandro Cabrera (cabrera)\n* Chad Lung (chadlung)\n* Josh Brand (joshbrand)\n* Jamie Painter (painterjd)\n* Flavio Percoco (flaper87)\n* Randall Burt (rs-randallburt)\n* Zhihao Yuan (lichray)\n* Ashutosh Das (pyprism)\n* Emanuele Rocca (ema)\n* Soren Hansen (sorenh)\n* Jamie Lennox (jamielennox)\n* Jay Pipes (jaypipes)\n* Kevin McDonald (sudorandom)\n* Justin Arthur (justintarthur)\n* Jordan Rinke (jordanrinke)\n* Derrick Wippler (thrawn01)\n* Sebastián Magrí (sebasmagri)\n* Chris Petersen (ex-nerd)\n* Cindy Pallares (cindy)\n* Andy Freeland (rouge8)\n* Michał Jaworski (swistakm)\n* Michele Lacchia (rubik)\n* Jason Campbell (xiaclo)\n* Barry Warsaw (warsaw)\n* Jeffrey Zhang (jeffrey4l)\n* Dave Thomas (peoplemerge)\n* Eduardo Alonso (ealogar)\n* Colton Leekley-Winslow (lwcolton)\n* David Pineau (Joacchim)\n* Benjamen Meyer (BenjamenMeyer)\n* Sriram Madapusi Vasudevan (TheSriram)\n* Omer Katz (thedrow)\n* Erik Erwitt (eerwitt)\n* Bernhard Weitzhofer (b6d)\n* Rahman Syed (rsyed83)\n* Max Brauer (mamachanko)\n* Jen Montes (jenmontes)\n* Carl George (carlwgeorge)\n* Lahache Stéphane (steffgrez)\n* John Vrbanac (jmvrbanac)\n* Steve McMaster (mcmasterathl)\n* Gino Ledesma (ginoledesma)\n* Clara Bennett (csojinb)\n* Henrik Tudborg (tbug)\n* Maxim Tsoy (muodov)\n* Christian Pedersen (chripede)\n* Harrison Pincket (hpincket)\n* Richard Olsson (richardolsson)\n* Zack Gold (zg)\n* Usman Ehtesham Gul (ueg1990)\n* Adam Yala (adamyala)\n* Grigory Bakunov (bobuk)\n* Vincent Raiken (Freezerburn)\n* hooblei\n* Abhilash Raj (maxking)\n* Philip Tzou (philiptzou)\n* Peter Adam (p3dda)\n* Yohan Boniface (yohanboniface)\n* Steven Colby (StevenWColby)\n* M Somerville (dracos)\n* Jan-Philip Gehrcke (jgehrcke)\n* David Larlet (davidbgk)\n* Fran Fitzpatrick (fxfitz)\n* Matthew Miller (masterkale)\n* michaelboulton\n* Jesse Jarzynka (jessehudl)\n* Michael Olund (molund)\n* Yash Mehrotra (yashmehrotra)\n* Stephen Milner (ashcrow)\n* ksonj\n* Christian Jensen (jensenbox)\n* Sam Raker (swizzard)\n* Ali-Akber Saifee (alisaifee)\n* stiefel40k\n* Zhigang Wang (w1z2g3)\n* Rafał Kasa (rafalkasa)\n* Qingping Hou (houqp)\n* wssbck\n* Martin Asell Backlund (masellfoodpanda)\n* Matt Giles (mattgiles)\n* Naveen Yadav (navyad)\n* roeih-stratoscale\n* Jahongir (rahmonov)\n* Hans Lellelid (hozn)\n* Steven Seguin (sseg)\n* Michal Bultrowicz (butla)\n* Joshua Adelman (synapticarbors)\n* Ron Rothman (RonRothman)\n* mayurmahajan\n* Serge (yasek)\n* Munir Contractor (munircontractor)\n* Max (DSIW)\n* Caleb Hayashida (santeyio)\n* Tim Chen (timc13)\n* Griff George (GriffGeorge)\n* Russ (rhemz)\n* Hynek Schlawack (hynek)\n* Tyrone Groves (tyronegroves)\n* Justin Siebert (Just-Sieb)\n* Vytautas Liuolia (vytas7)\n* Hugo van Kemenade  (hugovk)\n* Ryan Turner (ZDBioHazard)\n* Federico Caselli (CaselIT)\n* Steven Jackson (steven-upside)\n* ozzzik\n* elf69 (selfvin)\n* Josh Klar (klardotsh)\n* Carlo (carlodri)\n* Akeem King (KingAkeem)\n* Dmitrii Trofimov (DmitriiTrofimov)\n* Anthony Bush (awbush)\n* bkcsfi\n* Aston Motes (astonm)\n* TheMushr00m (TheMushrr00m)\n* Aly Sivji (alysivji)\n* Anthony (tribals)\n* Alan Parker Lue (aparkerlue)\n* Nate D. (Nateyo)\n* Rajan Paneru (paneru-rajan)\n* Dmitri Vasilishin (dmvass)\n* Andrii Marynets (amarynets)\n* Zubair Akram (zubairakram)\n* Nick Zaccardi (nZac)\n* Safa Ozturk (safaozturk93)\n* Brent Smith (edmondb)\n* screamingskulls\n* Karl Higley (karlhigley)\n* Sean Harrison (seanharrison)\n* Andy Fundinger (ciemaar)\n* Robert Myers (rmyers)\n* Prakhar Bhandari (pbjr23)\n* Coykto\n* Christian Unterrainer (cozyDoomer)\n* Luis Moncaris (minrock)\n* Marwan Rabbâa (waghanza)\n* BigBlueHat\n* Mykhailo Yusko (myusko)\n* Chirag Ravindra (cravindra)\n* Mostafa Khaki (mosi-kha)\n* nagaabhinaya\n* Matt Donders (mattdonders)\n* Yang Keming (kemingy)\n* Tim Gates (timgates42)\n* Paul (hackedd)\n* Orlando Hernandez (AR4Z)\n* Rodrigo Martínez (brunneis)\n* Atsushi Hanaoka (grktsh)\n* Dana Litovsky Alcalá (danilito19)\n* Mike DePalatis (mivade)\n* Aditya Sahay (adsahay)\n* Ashutosh Varma (ashutoshvarma)\n* Bibek Joshi (bibekjoshi54)\n* Shubhendra Singh Chauhan (withshubh)\n* Jonathan Mines (MinesJA)\n* Michał Górny (mgorny)\n* Dominika Florczykowska (dflss)\n* forana\n* Tim Burke (tipabu)\n* treharne\n* Vasilis Gerakaris (vgerak)\n* Eleni E (Contessina)\n* Betsy Behun (the-bets)\n* Mihai Todor (mihaitodor)\n* Abid Ahmad (abidahmadq)\n* KhiemTon (nix010)\n* dimjon (dimucciojonathan)\n* signalw\n* Laurent Chriqui (laurent-chriqui)\n* Andrii Oriekhov (andriyor)\n* Tom Boshoven (TBoshoven)\n* Jaakko Lappalainen (jkklapp)\n* Oday Alhayek (RioAtHome)\n* Christian Clauss (cclauss)\n* meetshah133\n* Kai Chan (kaichan1201)\n* Patryk Krawaczyński (nfsec)\n* Jarek Kapica (jkapica)\n* TigreModerata\n* John G G (john-g-g)\n* Aryan Iyappan (aryaniyaps)\n* Eujin Ong (euj1n0ng)\n* Libor Jelínek (liborjelinek)\n* Piotr Kopalko (copalco)\n* Kent Bull (kentbull)\n* Mario Rivera (MRLab12)\n* M-Mueller\n* Derk Weijers (derkweijers)\n* bssyousefi\n* Pavel 宝尔米 (e-io)\n* wendy5667\n* Dave Tapley (davetapley)\n* Agustin Arce (aarcex3)\n* Christian Grossmüller (chgad)\n* Sai Prathik R (prathik2401)\n* Akshay Awate (AkshayAwate)\n* Jasper Spaans (jap)\n* Alessandro Chitarrini (chitvs)\n* Eric Goulart (EricGoulart)\n* Diego (diegomirandap)\n\n(et al.)\n\nFor a full list of contributors, please visit:\n\n    https://github.com/falconry/falcon/graphs/contributors\n\n"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 0.8388671875,
          "content": "# Falcon Patrons\n\nThank you to our generous patrons who help make this project possible!\n\nSee also: https://opencollective.com/falcon\n\n## Platinum Patron\n\n* [GOVCERT.LU](https://www.govcert.lu/)\n\n## Gold Patron\n\n* [Sentry](https://sentry.io/)\n\n## Past Commercial Patrons\n\n* [Algolia](https://www.algolia.com/)\n* [EaseUS RecExperts](https://recorder.easeus.com/)\n* [Examination RU](https://www.kontrolnaya-rabota.ru/s/)\n* [Likalo](https://github.com/LikaloLLC)\n* [Misaka Network](https://www.misaka.io/)\n* [Paris Kejser](https://www.pnk.sh/python-falcon)\n* [Protoku](https://protoku.io/)\n* [Salesforce](https://www.salesforce.com)\n\n## Our Talented and Stylish Community Patrons\n\n* Andrei Drang\n* Gerardo Cardenas\n* Hagar Marmari\n* Ivan Petukhov\n* Konstantinos Mouratidis\n* Markopoulos Spyros\n* Vincent Albanese\n* Vlad Shulkevich\n* William Fuener\n* Zach Riddle\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 0.08203125,
          "content": "To find our changes, go to ./docs/changes or https://falcon.readthedocs.io/changes.\n"
        },
        {
          "name": "CODEOFCONDUCT.md",
          "type": "blob",
          "size": 3.798828125,
          "content": "# Code of Conduct\n\nAll contributors and maintainers of this project are subject to this Code of Conduct.\n\nWe pledge to respect everyone who contributes to the *Falcon* project or other associated activities by (including but not limited to) creating project issues, submitting pull requests, and providing feedback on the same. We also pledge to respect everyone who participates in discussions both online and at meetups and conferences.\n\nUnacceptable behavior includes (but is not limited to) offensive verbal comments related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images in public spaces, deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of talks or other events, inappropriate physical contact, and unwelcome sexual attention.\n\nIf anyone within the *Falcon* community fails to adhere to this Code of Conduct, they can expect to face action by way of: removing comments, removing issues, deleting pull requests, and generally being banned from participating in the *Falcon* community.\n\n\n## Do This\n\n* Act professionally\n* Treat others as friends and family\n* [Seek first to understand][covey]\n* Be honest, transparent, and constructive\n* Use clear, concise language\n* Assume good intent\n\n\n## Don't Do This\n* Use indecent, profane, or degrading language of any kind\n* Hold a patch hostage for some ulterior motive\n* Take part in gossiping or backbiting\n* Engage in bullying behaviors, including but not limited to:\n    * Belittling others' opinions\n    * Persistent teasing or sarcasm\n    * Insulting, threatening, or yelling at someone\n    * Accusing someone of being incompetent\n    * Setting someone up to fail\n    * Humiliating someone\n    * Isolating someone from others\n    * Withholding information to gain an advantage\n    * Falsely accusing someone of errors\n    * Sabotaging someone's work\n\n\n## Moderation\n\nDiscussing things \"in the open\" is important. But it does not necessarily engender trust in a community, especially in the absence of cognizant moderation.\n\nUnfortunately, open discussions sometimes lead to a culture of distrust. This happens when individuals in power publicly humiliate, intimidate, or even bully others in the community. Often this happens unconsciously or as a result of a poor choice of words. Regardless of whether the intent is actual or perceived, the damage to the community is the same, and must be quickly dealt with before it festers into a culture of enmity.\n\nThe project maintainer, with the support of the core reviewers, pledges to lead by example, as well as to hold contributors accountable for creating a positive, constructive, and productive culture. Inappropriate behavior will not be tolerated.\n\nIf a member of the *Falcon* community behaves unacceptably toward you or another individual, please contact Kurt Griffiths at <a href=\"mailto:inbox@kgriffs.com\">inbox@kgriffs.com</a>.\n\n<br>\n---\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\" /></a><br />This <span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">Code of Conduct</span>, created by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"https://github.com/falconry/falcon\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Falcon Contributors</a> and inspired by [yourfirstpr][yfp], is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.\n\n[covey]: https://www.stephencovey.com/7habits/7habits-habit5.php\n[yfp]: https://github.com/yourfirstpr/yourfirstpr.github.io/blob/master/CODEOFCONDUCT.MD\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.216796875,
          "content": "# Contribute to Falcon\n\nThanks for your interest in the project! We welcome pull requests from\ndevelopers of all skill levels. To get started, simply fork the master branch\non GitHub to your personal account and then clone the fork into your\ndevelopment environment.\n\nIf you would like to contribute but don't already have something in mind,\nwe invite you to take a look at the issues listed under our [next milestone][ms].\nIf you see one you'd like to work on, please leave a quick comment so that we don't\nend up with duplicated effort. Thanks in advance!\n\nThe core Falcon project maintainers are:\n\n* Kurt Griffiths, Project Lead (**kgriffs** on GH, Gitter, and Twitter)\n* John Vrbanac (**jmvrbanac** on GH, Gitter, and Twitter)\n* Vytautas Liuolia (**vytas7** on GH and Gitter, and **vliuolia** on Twitter)\n* Nick Zaccardi (**nZac** on GH and Gitter)\n* Federico Caselli (**CaselIT** on GH and Gitter)\n\nPlease don't hesitate to reach out if you have any questions, or just need a\nlittle help getting started. You can find us in\n[falconry/dev][gitter] on Gitter.\n\nPlease note that all contributors and maintainers of this project are subject to our [Code of Conduct][coc].\n\n## Pull Requests\n\nBefore submitting a pull request, please ensure you have added or updated tests as appropriate,\nand that all existing tests still pass with your changes.\nPlease also ensure that your coding style follows PEP 8 and the ``ruff`` formatting style.\n\nIn order to reformat your code with ``ruff``, simply issue:\n\n```bash\n$ pip install -U ruff\n$ ruff format\n```\n\nYou can also reformat your code, and apply safe ``ruff`` fixes, via the\n``reformat`` ``tox`` environment:\n\n```bash\n$ pip install -U tox\n$ tox -e reformat\n```\n\nYou can check all this by running ``tox`` from within the Falcon project directory.\nYour environment must be based on CPython 3.10, 3.11, 3.12 or 3.13:\n\n```bash\n$ pip install -U tox\n$ tox --recreate\n```\n\nYou may also use a CPython 3.9 environment, although in that case ``coverage`` will likely report a false positive on missing branches, and the total coverage might fall short of 100%. These issues are caused by bugs in the interpreter itself, and are unlikely to ever get fixed.\n\n### Reviews\n\nFalcon is used in a number of mission-critical applications and is known for its stability and reliability. Therefore, we invest a lot of time in carefully reviewing PRs and working with contributors to ensure that every patch merged into the master branch is correct, complete, performant, well-documented, and appropriate.\n\nProject maintainers review each PR for the following:\n\n- [ ] **Design.** Does it do the right thing? Is the end goal well understood and correct?\n- [ ] **Correctness.** Is the logic correct? Does it behave correctly according to the goal of the feature or bug fix?\n- [ ] **Fit.** Is this feature or fix in keeping with the spirit of the project? Would this idea be better implemented as an add-on?\n- [ ] **Standards.** Does this change align with approved or standards-track RFCs, de-facto standards, and currently accepted best practices?\n- [ ] **Tests.** Does the PR implement sufficient test coverage in terms of value inputs, Python versions, and lines tested?\n- [ ] **Compatibility.** Does it work across all of Falcon's supported Python versions and operating systems?\n- [ ] **Performance.** Will this degrade performance for request or response handling? Are there opportunities to optimize the implementation?\n- [ ] **Docs.** Does this impact any existing documentation or require new documentation? If so, does this PR include the aforementioned docs, and is the language friendly, clear, helpful, and grammatically correct with no misspellings? Do all docstrings conform to Google style ala [sphinx.ext.napoleon](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/index.html)?\n- [ ] **Dependencies.** Does this PR bring in any unnecessary dependencies that would prevent us from keeping the framework lean and mean, jeopardize the reliability of the project, or significantly increase Falcon's attack service?\n- [ ] **Changelog.** Does the PR have a changelog entry in newsfragments? Is the\ntype correct? Try running `towncrier --draft` to ensure it renders correctly.\n\n## Test coverage\n\nPull requests must maintain 100% test coverage of all code branches. This helps ensure the quality of the Falcon framework. To check coverage before submitting a pull request:\n\n```bash\n$ tox\n```\n\nIt is necessary to combine test coverage from multiple environments in order to account for branches in the code that are only taken for a given Python version.\n\nRunning the default sequence of ``tox`` environments generates an HTML coverage report that can be viewed by simply opening `.coverage_html/index.html` in a browser. This can be helpful in tracking down specific lines or branches that are missing coverage.\n\n## Debugging\n\nWe use pytest to run all of our tests. Pytest supports pdb and will break as expected on any\n`pdb.set_trace()` calls. If you would like to use pdb++ instead of the standard Python\ndebugger, simply run the following tox environment. This environment also disables\ncoverage checking to speed up the test run, making it ideal for quick sanity checks.\n\n```bash\n$ tox -e py3_debug\n```\n\nIf you wish, you can customize Falcon's `tox.ini` to install alternative debuggers, such as ipdb or pudb.\n\n## Benchmarking\n\nA few simple benchmarks are included with the source under ``falcon/bench``. These can be taken as a rough measure of the performance impact (if any) that your changes have on the framework. You can run these tests by invoking one of the tox environments included for this purpose (see also the ``tox.ini`` file). For example:\n\n```bash\n$ tox -e py310_bench\n```\n\nNote that you may pass additional arguments via tox to the falcon-bench command:\n\n```bash\n$ tox -e py310_bench -- -h\n$ tox -e py310_bench -- -b falcon -i 20000\n```\n\nAlternatively, you may run falcon-bench directly by creating a new virtual environment and installing falcon directly in development mode. In this example we use pyenv with pyenv-virtualenv from within a falcon source directory:\n\n```bash\n$ pyenv virtualenv 3.10.6 falcon-sandbox-310\n$ pyenv shell falcon-sandbox-310\n$ pip install -r requirements/bench\n$ pip install -e .\n$ falcon-bench\n```\n\nNote that benchmark results for the same code will vary between runs based on a number of factors, including overall system load and CPU scheduling. These factors may be somewhat mitigated by running the benchmarks on a Linux server dedicated to this purpose, and pinning the benchmark process to a specific CPU core.\n\n## Documentation\n\nTo check documentation changes (including docstrings), before submitting a PR, ensure the tox job builds the documentation correctly:\n\n```bash\n$ tox -e docs\n\n# OS X\n$ open docs/_build/html/index.html\n\n# Gnome\n$ gnome-open docs/_build/html/index.html\n\n# Generic X Windows\n$ xdg-open docs/_build/html/index.html\n```\n\n## Recipes and code snippets\n\nIf you are adding new recipes (in `docs/user/recipes`), try to break out code\nsnippets into separate files inside `examples/recipes`.\nThis allows `ruff` to format these snippets to conform to our code style, as\nwell as check for trivial errors.\nThen simply use `literalinclude` to embed these snippets into your `.rst` recipe.\n\nIf possible, try to implement tests for your recipe in `tests/test_recipes.py`.\nThis helps to ensure that our recipes stay up-to-date as the framework's development progresses!\n\n## VS Code Dev Container development environment\n\nWhen opening the project using the [VS Code](https://code.visualstudio.com/) IDE, if you have [Docker](https://www.docker.com/) (or some drop-in replacement such as [Podman](https://podman.io/) or [Colima](https://github.com/abiosoft/colima) or [Rancher Desktop](https://rancherdesktop.io/)) installed, you can leverage the [Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers) feature to start a container in the background with all the dependencies required to test and debug the Falcon code. VS Code integrates with the Dev Container seamlessly, which can be configured via [devcontainer.json][devcontainer]. Once you open the project in VS Code, you can execute the \"Reopen in Container\" command to start the Dev Container which will run the headless VS Code Server process that the local VS Code app will connect to via a [published port](https://docs.docker.com/config/containers/container-networking/#published-ports).\n\n## Code style rules\n\n* Docstrings are required for classes, attributes, methods, and functions. Follow the\n following guidelines for docstrings:\n   * Docstrings should utilize the [napoleon style][docstrings] in order to make them read well, regardless of whether they are viewed through `help()` or on [Read the Docs][rtd].\n   * Docstrings should begin with a short (~70 characters or less) summary line that ends in a period.\n       * The summary line should begin immediately after the opening quotes (do not add\n    a line break before the summary line)\n       * The summary line should describe what it is if it is a class (e.g., \"An\n    asynchronous, file-like object for reading ASGI streams.\")\n       * The summary line should describe what it does when called, if it is a\n     function, structured as an imperative (e.g., \"Delete a header that was previously set for this response.\")\n   * Please try to be consistent with the way existing docstrings are formatted. In particular, note the use of single vs. double backticks as follows:\n    * Double backticks\n        * Inline code\n        * Variables\n        * Types\n        * Decorators\n    * Single backticks\n        * Methods\n        * Params\n        * Attributes\n* Format non-trivial comments using your GitHub nick and one of these prefixes:\n    * TODO(riker): Damage report!\n    * NOTE(riker): Well, that's certainly good to know.\n    * PERF(riker): Travel time to the nearest starbase?\n    * APPSEC(riker): In all trust, there is the possibility for betrayal.\n* When catching exceptions, name the variable `ex`.\n* Use whitespace to separate logical blocks of code and to improve readability.\n* No single-character variable names except for trivial indexes when looping,\nor in mathematical expressions implementing well-known formulas.\n* Heavily document code that is especially complex and/or clever.\n* When in doubt, optimize for readability.\n\n## Changelog\n\nWe use [towncrier](https://towncrier.readthedocs.io/) to manage the changelog. Each PR that modifies the functionality of Falcon should include a short description in a news fragment file in the `docs/_newsfragments` directory.\n\nThe newsfragment file name should have the format `{issue_number}.{fragment_type}.rst`, where the fragment type is one of `breakingchange`, `newandimproved`, `bugfix`, or `misc`. If your PR closes another issue, then the original issue number should be used for the newsfragment; otherwise, use the PR number itself.\n\n## Commit Message Format\n\nFalcon's commit message format uses [AngularJS's style guide][ajs], reproduced here for convenience, with some minor edits for clarity.\n\nEach commit message consists of a **header**, a **body** and a **footer**. The header has a special format that includes a **type**, a **scope** and a **subject**:\n\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\nNo line may exceed 100 characters. This makes it easier to read the message on GitHub as well as in various git tools.\n\n###  Type\nMust be one of the following:\n\n* **feat**: A new feature\n* **fix**: A bug fix\n* **docs**: Documentation only changes\n* **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n* **refactor**: A code change that neither fixes a bug or adds a feature\n* **perf**: A code change that improves performance\n* **test**: Adding missing tests\n* **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation\n\n### Scope\nThe scope could be anything specifying place of the commit change. For example: `$location`, `$browser`, `$compile`, `$rootScope`, `ngHref`, `ngClick`, `ngView`, etc...\n\n### Subject\nThe subject contains succinct description of the change:\n\n* use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n* don't capitalize first letter\n* no dot (.) at the end\n\n### Body\nJust as in the **subject**, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.\n\n### Footer\nThe footer should contain any information about **Breaking Changes** and is also the place to reference GitHub issues that this commit **Closes**.\n\n[ajs]: https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\n[devcontainer]: https://github.com/falconry/falcon/blob/master/.devcontainer/devcontainer.json\n[docstrings]: https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html#example-google-style-python-docstrings\n[goog-style]: http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Comments\n[rtd]: https://falcon.readthedocs.io\n[coc]: https://github.com/falconry/falcon/blob/master/CODEOFCONDUCT.md\n[freenode]: https://www.freenode.net/\n[gitter]: https://gitter.im/falconry/dev\n[ml-join]: mailto:users-join@mail.falconframework.org?subject=join\n[ml-archive]: https://mail.falconframework.org/archives/list/users@mail.falconframework.org/\n[ms]: https://github.com/falconry/falcon/milestones\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.4619140625,
          "content": "recursive-include docs *.rst *.md *.html *.ico *.png *.py *.svg\nrecursive-include e2e-tests *.py *.css *.html *.js\nrecursive-include examples *.py\nrecursive-include falcon *.pyx\nrecursive-include tests *.py *.pyx\ninclude .coveragerc\ninclude tox.ini\ninclude CONTRIBUTING.md\ninclude README.rst\ninclude AUTHORS\ninclude LICENSE\ninclude docs/conf.py docs/Makefile\ninclude falcon/py.typed\ngraft docs/_static\ngraft docs/_templates\ngraft requirements\ngraft tools\nprune docs/_build\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 34.541015625,
          "content": ".. image:: https://raw.githubusercontent.com/falconry/falcon/master/logo/banner.jpg\n   :align: center\n   :alt: Falcon logo\n   :target: https://falconframework.org/\n   :width: 100 %\n\n|Build status| |Docs| |codecov.io| |PyPI package| |Python versions|\n\nThe Falcon Web Framework\n========================\n\n`Falcon <https://falconframework.org>`__ is a minimalist ASGI/WSGI framework for\nbuilding mission-critical REST APIs and microservices, with a focus on\nreliability, correctness, and performance at scale.\n\nWhen it comes to building HTTP APIs, other frameworks weigh you down with tons\nof dependencies and unnecessary abstractions. Falcon cuts to the chase with a\nclean design that embraces HTTP and the REST architectural style.\n\nFalcon apps work with any `WSGI <https://www.python.org/dev/peps/pep-3333/>`_\nor `ASGI <https://asgi.readthedocs.io/en/latest/>`_ server, and run like a\nchamp under CPython 3.8+ and PyPy 3.8+.\n\nQuick Links\n-----------\n\n* `Read the docs <https://falcon.readthedocs.io/en/stable>`_\n  (`FAQ <https://falcon.readthedocs.io/en/stable/user/faq.html>`_ -\n  `getting help <https://falcon.readthedocs.io/en/stable/community/help.html>`_ -\n  `reference <https://falcon.readthedocs.io/en/stable/api/index.html>`_)\n* `Falcon add-ons and complementary packages <https://github.com/falconry/falcon/wiki>`_\n* `Falcon articles, talks and podcasts <https://github.com/falconry/falcon/wiki/Articles,-Talks-and-Podcasts>`_\n* `falconry/user for Falcon users <https://gitter.im/falconry/user>`_ @ Gitter\n* `falconry/dev for Falcon contributors <https://gitter.im/falconry/dev>`_ @ Gitter\n\nWhat People are Saying\n----------------------\n\n\"Falcon is rock solid and it's fast.\"\n\n\"We have been using Falcon as a replacement for [another framework] and\nwe simply love the performance (three times faster) and code base size (easily\nhalf of our [original] code).\"\n\n\"I'm loving #falconframework! Super clean and simple, I finally\nhave the speed and flexibility I need!\"\n\n\"Falcon looks great so far. I hacked together a quick test for a\ntiny server of mine and was ~40% faster with only 20 minutes of\nwork.\"\n\n\"I feel like I'm just talking HTTP at last, with nothing in the\nmiddle. Falcon seems like the requests of backend.\"\n\n\"The source code for Falcon is so good, I almost prefer it to\ndocumentation. It basically can't be wrong.\"\n\n\"What other framework has integrated support for 786 TRY IT NOW ?\"\n\nFeatures\n--------\n\nFalcon tries to do as little as possible while remaining highly effective.\n\n- ASGI, WSGI, and WebSocket support\n- Native ``asyncio`` support\n- No reliance on magic globals for routing and state management\n- Stable interfaces with an emphasis on backwards-compatibility\n- Simple API modeling through centralized RESTful routing\n- Highly-optimized, extensible code base\n- Easy access to headers and bodies through request and response\n  classes\n- DRY request processing via middleware components and hooks\n- Strict adherence to RFCs\n- Idiomatic HTTP error responses\n- Straightforward exception handling\n- Snappy testing with WSGI/ASGI helpers and mocks\n- CPython 3.8+ and PyPy 3.8+ support\n\n.. Patron list starts here. For Python package, we substitute this section with:\n   Support Falcon Development\n   --------------------------\n\nA Big Thank You to Our Patrons!\n-------------------------------\n\n|Backer:GovCert| |Backer:Sentry|\n\nHas Falcon helped you make an awesome app? Show your support today with a\none-time donation or by becoming a patron.\nSupporters get cool gear, an opportunity to promote their brand to Python\ndevelopers, and prioritized support.\n\n* `Learn how to support Falcon development <https://falconframework.org/#sectionSupportFalconDevelopment>`_\n\nThanks!\n\nHow is Falcon Different?\n------------------------\n\n    Perfection is finally attained not when there is no longer anything\n    to add, but when there is no longer anything to take away.\n\n    *- Antoine de Saint-Exupéry*\n\nWe designed Falcon to support the demanding needs of large-scale\nmicroservices and responsive app backends. Falcon complements more\ngeneral Python web frameworks by providing bare-metal performance,\nreliability, and flexibility wherever you need it.\n\n**Reliable.** We go to great lengths to avoid introducing breaking changes, and\nwhen we do they are fully documented and only introduced (in the spirit of\n`SemVer <http://semver.org/>`_) with a major version increment. The code is\nrigorously tested with numerous inputs and we require 100% coverage at all\ntimes. Falcon has no dependencies outside the standard library, helping\nminimize your app's attack surface while avoiding transitive bugs and breaking\nchanges.\n\n**Debuggable.** Falcon eschews magic. It's easy to tell which inputs lead to\nwhich outputs. Unhandled exceptions are never encapsulated or masked.\nPotentially surprising behaviors, such as automatic request body parsing, are\nwell-documented and disabled by default. Finally, when it comes to the\nframework itself, we take care to keep logic paths simple and understandable.\nAll this makes it easier to reason about the code and to debug edge cases in\nlarge-scale deployments.\n\n**Fast.** Same hardware, more requests. Falcon turns around requests\nsignificantly faster than other popular Python frameworks like Django and\nFlask. For an extra speed boost, Falcon compiles itself with Cython when\navailable, and also works well with `PyPy <https://pypy.org>`_. Considering a\nmove to another programming language? Benchmark with Falcon+PyPy first!\n\n**Flexible.** Falcon leaves a lot of decisions and implementation details to\nyou, the API developer. This gives you a lot of freedom to customize and tune\nyour implementation. It also helps you understand your apps at a deeper level,\nmaking them easier to tune, debug, and refactor over the long run. Falcon's\nminimalist design provides space for Python community members to independently\ninnovate on `Falcon add-ons and complementary packages\n<https://github.com/falconry/falcon/wiki>`_.\n\nWho's Using Falcon?\n-------------------\n\nFalcon is used around the world by a growing number of organizations,\nincluding:\n\n- 7ideas\n- Cronitor\n- EMC\n- Hurricane Electric\n- Leadpages\n- OpenStack\n- Rackspace\n- Shiftgig\n- tempfil.es\n- Opera Software\n\nIf you are using the Falcon framework for a community or commercial\nproject, please consider adding your information to our wiki under\n`Who's Using Falcon? <https://github.com/falconry/falcon/wiki/Who's-using-Falcon%3F>`_\n\nCommunity\n---------\n\nA number of Falcon add-ons, templates, and complementary packages are\navailable for use in your projects. We've listed several of these on the\n`Falcon wiki <https://github.com/falconry/falcon/wiki>`_ as a starting\npoint, but you may also wish to search PyPI for additional resources.\n\nThe Falconry community on Gitter is a great place to ask questions and\nshare your ideas. You can find us in `falconry/user\n<https://gitter.im/falconry/user>`_. We also have a\n`falconry/dev <https://gitter.im/falconry/dev>`_ room for discussing\nthe design and development of the framework itself.\n\nPer our\n`Code of Conduct <https://github.com/falconry/falcon/blob/master/CODEOFCONDUCT.md>`_,\nwe expect everyone who participates in community discussions to act\nprofessionally, and lead by example in encouraging constructive\ndiscussions. Each individual in the community is responsible for\ncreating a positive, constructive, and productive culture.\n\nInstallation\n------------\n\nPyPy\n^^^^\n\n`PyPy <http://pypy.org/>`__ is the fastest way to run your Falcon app.\nPyPy3.8+ is supported as of PyPy v7.3.7+.\n\n.. code:: bash\n\n    $ pip install falcon\n\nOr, to install the latest beta or release candidate, if any:\n\n.. code:: bash\n\n    $ pip install --pre falcon\n\nCPython\n^^^^^^^\n\nFalcon also fully supports\n`CPython <https://www.python.org/downloads/>`__ 3.8+.\n\nThe latest stable version of Falcon can be installed directly from PyPI:\n\n.. code:: bash\n\n    $ pip install falcon\n\nOr, to install the latest beta or release candidate, if any:\n\n.. code:: bash\n\n    $ pip install --pre falcon\n\nIn order to provide an extra speed boost, Falcon automatically compiles itself\nwith `Cython <https://cython.org/>`__ under any\n`PEP 517 <https://peps.python.org/pep-0517/>`__\\-compliant installer.\n\nFor your convenience, wheels containing pre-compiled binaries are available\nfrom PyPI for the majority of common platforms. Even if a binary build for your\nplatform of choice is not available, ``pip`` will pick a pure-Python wheel.\nYou can also cythonize Falcon for your environment; see our\n`Installation docs <https://falcon.readthedocs.io/en/stable/user/install.html>`__\nfor more information on this and other advanced options.\n\nDependencies\n^^^^^^^^^^^^\n\nFalcon does not require the installation of any other packages.\n\nWSGI Server\n-----------\n\nFalcon speaks `WSGI <https://www.python.org/dev/peps/pep-3333/>`_ (or\n`ASGI <https://asgi.readthedocs.io/en/latest/>`_; see also below). In order to\nserve a Falcon app, you will need a WSGI server. Gunicorn and uWSGI are some of\nthe more popular ones out there, but anything that can load a WSGI app will do.\n\n.. code:: bash\n\n    $ pip install [gunicorn|uwsgi]\n\nASGI Server\n-----------\n\nIn order to serve a Falcon ASGI app, you will need an ASGI server. Uvicorn\nis a popular choice:\n\n.. code:: bash\n\n    $ pip install uvicorn\n\nSource Code\n-----------\n\nFalcon `lives on GitHub <https://github.com/falconry/falcon>`_, making the\ncode easy to browse, download, fork, etc. Pull requests are always welcome! Also,\nplease remember to star the project if it makes you happy. :)\n\nOnce you have cloned the repo or downloaded a tarball from GitHub, you\ncan install Falcon like this:\n\n.. code:: bash\n\n    $ cd falcon\n    $ pip install .\n\nOr, if you want to edit the code, first fork the main repo, clone the fork\nto your desktop, and then run the following to install it using symbolic\nlinking, so that when you change your code, the changes will be automagically\navailable to your app without having to reinstall the package:\n\n.. code:: bash\n\n    $ cd falcon\n    $ FALCON_DISABLE_CYTHON=Y pip install -e .\n\nYou can manually test changes to the Falcon framework by switching to the\ndirectory of the cloned repo and then running pytest:\n\n.. code:: bash\n\n    $ cd falcon\n    $ pip install -r requirements/tests\n    $ pytest tests\n\nOr, to run the default set of tests:\n\n.. code:: bash\n\n    $ pip install tox && tox\n\nSee also the `tox.ini <https://github.com/falconry/falcon/blob/master/tox.ini>`_\nfile for a full list of available environments.\n\nRead the Docs\n-------------\n\nThe docstrings in the Falcon code base are quite extensive, and we\nrecommend keeping a REPL running while learning the framework so that\nyou can query the various modules and classes as you have questions.\n\nOnline docs are available at: https://falcon.readthedocs.io\n\nYou can build the same docs locally as follows:\n\n.. code:: bash\n\n    $ pip install tox && tox -e docs\n\nOnce the docs have been built, you can view them by opening the following\nindex page in your browser. On OS X it's as simple as::\n\n    $ open docs/_build/html/index.html\n\nOr on Linux:\n\n.. code:: bash\n\n    $ xdg-open docs/_build/html/index.html\n\nGetting Started\n---------------\n\nHere is a simple, contrived example showing how to create a Falcon-based\nWSGI app (the ASGI version is included further down):\n\n.. code:: python\n\n    # examples/things.py\n\n    # Let's get this party started!\n    from wsgiref.simple_server import make_server\n\n    import falcon\n\n\n    # Falcon follows the REST architectural style, meaning (among\n    # other things) that you think in terms of resources and state\n    # transitions, which map to HTTP verbs.\n    class ThingsResource:\n        def on_get(self, req, resp):\n            \"\"\"Handles GET requests\"\"\"\n            resp.status = falcon.HTTP_200  # This is the default status\n            resp.content_type = falcon.MEDIA_TEXT  # Default is JSON, so override\n            resp.text = ('\\nTwo things awe me most, the starry sky '\n                         'above me and the moral law within me.\\n'\n                         '\\n'\n                         '    ~ Immanuel Kant\\n\\n')\n\n\n    # falcon.App instances are callable WSGI apps...\n    # in larger applications the app is created in a separate file\n    app = falcon.App()\n\n    # Resources are represented by long-lived class instances\n    things = ThingsResource()\n\n    # things will handle all requests to the '/things' URL path\n    app.add_route('/things', things)\n\n    if __name__ == '__main__':\n        with make_server('', 8000, app) as httpd:\n            print('Serving on port 8000...')\n\n            # Serve until process is killed\n            httpd.serve_forever()\n\nYou can run the above example directly using the included wsgiref server:\n\n.. code:: bash\n\n    $ pip install falcon\n    $ python things.py\n\nThen, in another terminal:\n\n.. code:: bash\n\n    $ curl localhost:8000/things\n\nThe ASGI version of the example is similar:\n\n.. code:: python\n\n    # examples/things_asgi.py\n\n    import falcon\n    import falcon.asgi\n\n\n    # Falcon follows the REST architectural style, meaning (among\n    # other things) that you think in terms of resources and state\n    # transitions, which map to HTTP verbs.\n    class ThingsResource:\n        async def on_get(self, req, resp):\n            \"\"\"Handles GET requests\"\"\"\n            resp.status = falcon.HTTP_200  # This is the default status\n            resp.content_type = falcon.MEDIA_TEXT  # Default is JSON, so override\n            resp.text = ('\\nTwo things awe me most, the starry sky '\n                         'above me and the moral law within me.\\n'\n                         '\\n'\n                         '    ~ Immanuel Kant\\n\\n')\n\n\n    # falcon.asgi.App instances are callable ASGI apps...\n    # in larger applications the app is created in a separate file\n    app = falcon.asgi.App()\n\n    # Resources are represented by long-lived class instances\n    things = ThingsResource()\n\n    # things will handle all requests to the '/things' URL path\n    app.add_route('/things', things)\n\nYou can run the ASGI version with uvicorn or any other ASGI server:\n\n.. code:: bash\n\n    $ pip install falcon uvicorn\n    $ uvicorn things_asgi:app\n\nA More Complex Example (WSGI)\n-----------------------------\n\nHere is a more involved example that demonstrates reading headers and query\nparameters, handling errors, and working with request and response bodies.\nNote that this example assumes that the\n`requests <https://pypi.org/project/requests/>`_ package has been installed.\n\n(For the equivalent ASGI app, see: `A More Complex Example (ASGI)`_).\n\n.. code:: python\n\n    # examples/things_advanced.py\n\n    import json\n    import logging\n    import uuid\n    from wsgiref import simple_server\n\n    import falcon\n    import requests\n\n\n    class StorageEngine:\n\n        def get_things(self, marker, limit):\n            return [{'id': str(uuid.uuid4()), 'color': 'green'}]\n\n        def add_thing(self, thing):\n            thing['id'] = str(uuid.uuid4())\n            return thing\n\n\n    class StorageError(Exception):\n\n        @staticmethod\n        def handle(ex, req, resp, params):\n            # TODO: Log the error, clean up, etc. before raising\n            raise falcon.HTTPInternalServerError()\n\n\n    class SinkAdapter:\n\n        engines = {\n            'ddg': 'https://duckduckgo.com',\n            'y': 'https://search.yahoo.com/search',\n        }\n\n        def __call__(self, req, resp, engine):\n            url = self.engines[engine]\n            params = {'q': req.get_param('q', True)}\n            result = requests.get(url, params=params)\n\n            resp.status = str(result.status_code) + ' ' + result.reason\n            resp.content_type = result.headers['content-type']\n            resp.text = result.text\n\n\n    class AuthMiddleware:\n\n        def process_request(self, req, resp):\n            token = req.get_header('Authorization')\n            account_id = req.get_header('Account-ID')\n\n            challenges = ['Token type=\"Fernet\"']\n\n            if token is None:\n                description = ('Please provide an auth token '\n                               'as part of the request.')\n\n                raise falcon.HTTPUnauthorized(title='Auth token required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n            if not self._token_is_valid(token, account_id):\n                description = ('The provided auth token is not valid. '\n                               'Please request a new token and try again.')\n\n                raise falcon.HTTPUnauthorized(title='Authentication required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n        def _token_is_valid(self, token, account_id):\n            return True  # Suuuuuure it's valid...\n\n\n    class RequireJSON:\n\n        def process_request(self, req, resp):\n            if not req.client_accepts_json:\n                raise falcon.HTTPNotAcceptable(\n                    description='This API only supports responses encoded as JSON.',\n                    href='http://docs.examples.com/api/json')\n\n            if req.method in ('POST', 'PUT'):\n                if 'application/json' not in req.content_type:\n                    raise falcon.HTTPUnsupportedMediaType(\n                        title='This API only supports requests encoded as JSON.',\n                        href='http://docs.examples.com/api/json')\n\n\n    class JSONTranslator:\n        # NOTE: Normally you would simply use req.media and resp.media for\n        # this particular use case; this example serves only to illustrate\n        # what is possible.\n\n        def process_request(self, req, resp):\n            # req.stream corresponds to the WSGI wsgi.input environ variable,\n            # and allows you to read bytes from the request body.\n            #\n            # See also: PEP 3333\n            if req.content_length in (None, 0):\n                # Nothing to do\n                return\n\n            body = req.stream.read()\n            if not body:\n                raise falcon.HTTPBadRequest(title='Empty request body',\n                                            description='A valid JSON document is required.')\n\n            try:\n                req.context.doc = json.loads(body.decode('utf-8'))\n\n            except (ValueError, UnicodeDecodeError):\n                description = ('Could not decode the request body. The '\n                               'JSON was incorrect or not encoded as '\n                               'UTF-8.')\n\n                raise falcon.HTTPBadRequest(title='Malformed JSON',\n                                            description=description)\n\n        def process_response(self, req, resp, resource, req_succeeded):\n            if not hasattr(resp.context, 'result'):\n                return\n\n            resp.text = json.dumps(resp.context.result)\n\n\n    def max_body(limit):\n\n        def hook(req, resp, resource, params):\n            length = req.content_length\n            if length is not None and length > limit:\n                msg = ('The size of the request is too large. The body must not '\n                       'exceed ' + str(limit) + ' bytes in length.')\n\n                raise falcon.HTTPContentTooLarge(\n                    title='Request body is too large', description=msg)\n\n        return hook\n\n\n    class ThingsResource:\n\n        def __init__(self, db):\n            self.db = db\n            self.logger = logging.getLogger('thingsapp.' + __name__)\n\n        def on_get(self, req, resp, user_id):\n            marker = req.get_param('marker') or ''\n            limit = req.get_param_as_int('limit') or 50\n\n            try:\n                result = self.db.get_things(marker, limit)\n            except Exception as ex:\n                self.logger.error(ex)\n\n                description = ('Aliens have attacked our base! We will '\n                               'be back as soon as we fight them off. '\n                               'We appreciate your patience.')\n\n                raise falcon.HTTPServiceUnavailable(\n                    title='Service Outage',\n                    description=description,\n                    retry_after=30)\n\n            # NOTE: Normally you would use resp.media for this sort of thing;\n            # this example serves only to demonstrate how the context can be\n            # used to pass arbitrary values between middleware components,\n            # hooks, and resources.\n            resp.context.result = result\n\n            resp.set_header('Powered-By', 'Falcon')\n            resp.status = falcon.HTTP_200\n\n        @falcon.before(max_body(64 * 1024))\n        def on_post(self, req, resp, user_id):\n            try:\n                doc = req.context.doc\n            except AttributeError:\n                raise falcon.HTTPBadRequest(\n                    title='Missing thing',\n                    description='A thing must be submitted in the request body.')\n\n            proper_thing = self.db.add_thing(doc)\n\n            resp.status = falcon.HTTP_201\n            resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])\n\n    # Configure your WSGI server to load \"things.app\" (app is a WSGI callable)\n    app = falcon.App(middleware=[\n        AuthMiddleware(),\n        RequireJSON(),\n        JSONTranslator(),\n    ])\n\n    db = StorageEngine()\n    things = ThingsResource(db)\n    app.add_route('/{user_id}/things', things)\n\n    # If a responder ever raises an instance of StorageError, pass control to\n    # the given handler.\n    app.add_error_handler(StorageError, StorageError.handle)\n\n    # Proxy some things to another service; this example shows how you might\n    # send parts of an API off to a legacy system that hasn't been upgraded\n    # yet, or perhaps is a single cluster that all data centers have to share.\n    sink = SinkAdapter()\n    app.add_sink(sink, r'/search/(?P<engine>ddg|y)\\Z')\n\n    # Useful for debugging problems in your API; works with pdb.set_trace(). You\n    # can also use Gunicorn to host your app. Gunicorn can be configured to\n    # auto-restart workers when it detects a code change, and it also works\n    # with pdb.\n    if __name__ == '__main__':\n        httpd = simple_server.make_server('127.0.0.1', 8000, app)\n        httpd.serve_forever()\n\nAgain this code uses wsgiref, but you can also run the above example using\nany WSGI server, such as uWSGI or Gunicorn. For example:\n\n.. code:: bash\n\n    $ pip install requests gunicorn\n    $ gunicorn things:app\n\nOn Windows you can run Gunicorn and uWSGI via WSL, or you might try Waitress:\n\n.. code:: bash\n\n    $ pip install requests waitress\n    $ waitress-serve --port=8000 things:app\n\nTo test this example, open another terminal and run:\n\n.. code:: bash\n\n    $ http localhost:8000/1/things authorization:custom-token\n\nYou can also view the application configuration from the CLI via the\n``falcon-inspect-app`` script that is bundled with the framework:\n\n.. code:: bash\n\n    falcon-inspect-app things_advanced:app\n\nA More Complex Example (ASGI)\n-----------------------------\n\nHere's the ASGI version of the app from above. Note that it uses the\n`httpx <https://pypi.org/project/httpx/>`_ package in lieu of\n`requests <https://pypi.org/project/requests/>`_.\n\n.. code:: python\n\n    # examples/things_advanced_asgi.py\n\n    import json\n    import logging\n    import uuid\n\n    import falcon\n    import falcon.asgi\n    import httpx\n\n\n    class StorageEngine:\n\n        async def get_things(self, marker, limit):\n            return [{'id': str(uuid.uuid4()), 'color': 'green'}]\n\n        async def add_thing(self, thing):\n            thing['id'] = str(uuid.uuid4())\n            return thing\n\n\n    class StorageError(Exception):\n\n        @staticmethod\n        async def handle(ex, req, resp, params):\n            # TODO: Log the error, clean up, etc. before raising\n            raise falcon.HTTPInternalServerError()\n\n\n    class SinkAdapter:\n\n        engines = {\n            'ddg': 'https://duckduckgo.com',\n            'y': 'https://search.yahoo.com/search',\n        }\n\n        async def __call__(self, req, resp, engine):\n            url = self.engines[engine]\n            params = {'q': req.get_param('q', True)}\n\n            async with httpx.AsyncClient() as client:\n                result = await client.get(url, params=params)\n\n            resp.status = result.status_code\n            resp.content_type = result.headers['content-type']\n            resp.text = result.text\n\n\n    class AuthMiddleware:\n\n        async def process_request(self, req, resp):\n            token = req.get_header('Authorization')\n            account_id = req.get_header('Account-ID')\n\n            challenges = ['Token type=\"Fernet\"']\n\n            if token is None:\n                description = ('Please provide an auth token '\n                               'as part of the request.')\n\n                raise falcon.HTTPUnauthorized(title='Auth token required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n            if not self._token_is_valid(token, account_id):\n                description = ('The provided auth token is not valid. '\n                               'Please request a new token and try again.')\n\n                raise falcon.HTTPUnauthorized(title='Authentication required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n        def _token_is_valid(self, token, account_id):\n            return True  # Suuuuuure it's valid...\n\n\n    class RequireJSON:\n\n        async def process_request(self, req, resp):\n            if not req.client_accepts_json:\n                raise falcon.HTTPNotAcceptable(\n                    description='This API only supports responses encoded as JSON.',\n                    href='http://docs.examples.com/api/json')\n\n            if req.method in ('POST', 'PUT'):\n                if 'application/json' not in req.content_type:\n                    raise falcon.HTTPUnsupportedMediaType(\n                        description='This API only supports requests encoded as JSON.',\n                        href='http://docs.examples.com/api/json')\n\n\n    class JSONTranslator:\n        # NOTE: Normally you would simply use req.get_media() and resp.media for\n        # this particular use case; this example serves only to illustrate\n        # what is possible.\n\n        async def process_request(self, req, resp):\n            # NOTE: Test explicitly for 0, since this property could be None in\n            # the case that the Content-Length header is missing (in which case we\n            # can't know if there is a body without actually attempting to read\n            # it from the request stream.)\n            if req.content_length == 0:\n                # Nothing to do\n                return\n\n            body = await req.stream.read()\n            if not body:\n                raise falcon.HTTPBadRequest(title='Empty request body',\n                                            description='A valid JSON document is required.')\n\n            try:\n                req.context.doc = json.loads(body.decode('utf-8'))\n\n            except (ValueError, UnicodeDecodeError):\n                description = ('Could not decode the request body. The '\n                               'JSON was incorrect or not encoded as '\n                               'UTF-8.')\n\n                raise falcon.HTTPBadRequest(title='Malformed JSON',\n                                            description=description)\n\n        async def process_response(self, req, resp, resource, req_succeeded):\n            if not hasattr(resp.context, 'result'):\n                return\n\n            resp.text = json.dumps(resp.context.result)\n\n\n    def max_body(limit):\n\n        async def hook(req, resp, resource, params):\n            length = req.content_length\n            if length is not None and length > limit:\n                msg = ('The size of the request is too large. The body must not '\n                       'exceed ' + str(limit) + ' bytes in length.')\n\n                raise falcon.HTTPContentTooLarge(\n                    title='Request body is too large', description=msg)\n\n        return hook\n\n\n    class ThingsResource:\n\n        def __init__(self, db):\n            self.db = db\n            self.logger = logging.getLogger('thingsapp.' + __name__)\n\n        async def on_get(self, req, resp, user_id):\n            marker = req.get_param('marker') or ''\n            limit = req.get_param_as_int('limit') or 50\n\n            try:\n                result = await self.db.get_things(marker, limit)\n            except Exception as ex:\n                self.logger.error(ex)\n\n                description = ('Aliens have attacked our base! We will '\n                               'be back as soon as we fight them off. '\n                               'We appreciate your patience.')\n\n                raise falcon.HTTPServiceUnavailable(\n                    title='Service Outage',\n                    description=description,\n                    retry_after=30)\n\n            # NOTE: Normally you would use resp.media for this sort of thing;\n            # this example serves only to demonstrate how the context can be\n            # used to pass arbitrary values between middleware components,\n            # hooks, and resources.\n            resp.context.result = result\n\n            resp.set_header('Powered-By', 'Falcon')\n            resp.status = falcon.HTTP_200\n\n        @falcon.before(max_body(64 * 1024))\n        async def on_post(self, req, resp, user_id):\n            try:\n                doc = req.context.doc\n            except AttributeError:\n                raise falcon.HTTPBadRequest(\n                    title='Missing thing',\n                    description='A thing must be submitted in the request body.')\n\n            proper_thing = await self.db.add_thing(doc)\n\n            resp.status = falcon.HTTP_201\n            resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])\n\n\n    # The app instance is an ASGI callable\n    app = falcon.asgi.App(middleware=[\n        # AuthMiddleware(),\n        RequireJSON(),\n        JSONTranslator(),\n    ])\n\n    db = StorageEngine()\n    things = ThingsResource(db)\n    app.add_route('/{user_id}/things', things)\n\n    # If a responder ever raises an instance of StorageError, pass control to\n    # the given handler.\n    app.add_error_handler(StorageError, StorageError.handle)\n\n    # Proxy some things to another service; this example shows how you might\n    # send parts of an API off to a legacy system that hasn't been upgraded\n    # yet, or perhaps is a single cluster that all data centers have to share.\n    sink = SinkAdapter()\n    app.add_sink(sink, r'/search/(?P<engine>ddg|y)\\Z')\n\nYou can run the ASGI version with any ASGI server, such as uvicorn:\n\n.. code:: bash\n\n    $ pip install falcon httpx uvicorn\n    $ uvicorn things_advanced_asgi:app\n\nContributing\n------------\n\nThanks for your interest in the project! We welcome pull requests from\ndevelopers of all skill levels. To get started, simply fork the master branch\non GitHub to your personal account and then clone the fork into your\ndevelopment environment.\n\nIf you would like to contribute but don't already have something in mind,\nwe invite you to take a look at the issues listed under our\n`next milestone <https://github.com/falconry/falcon/milestones>`_.\nIf you see one you'd like to work on, please leave a quick comment so that we don't\nend up with duplicated effort. Thanks in advance!\n\nPlease note that all contributors and maintainers of this project are subject to our\n`Code of Conduct <https://github.com/falconry/falcon/blob/master/CODEOFCONDUCT.md>`_.\n\nBefore submitting a pull request, please ensure you have added/updated\nthe appropriate tests (and that all existing tests still pass with your\nchanges), and that your coding style follows PEP 8 and doesn't cause\npyflakes to complain.\n\nCommit messages should be formatted using `AngularJS\nconventions <https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines>`__.\n\nComments follow `Google's style guide <https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments>`__,\nwith the additional requirement of prefixing inline comments using your\nGitHub nick and an appropriate prefix:\n\n- TODO(riker): Damage report!\n- NOTE(riker): Well, that's certainly good to know.\n- PERF(riker): Travel time to the nearest starbase?\n- APPSEC(riker): In all trust, there is the possibility for betrayal.\n\nThe core Falcon project maintainers are:\n\n- Kurt Griffiths, Project Lead (**kgriffs** on GH, Gitter, and Twitter)\n- John Vrbanac (**jmvrbanac** on GH, Gitter, and Twitter)\n- Vytautas Liuolia (**vytas7** on GH and Gitter, and **vliuolia** on Twitter)\n- Nick Zaccardi (**nZac** on GH and Gitter)\n- Federico Caselli (**CaselIT** on GH and Gitter)\n\nPlease don't hesitate to reach out if you have any questions, or just need a\nlittle help getting started. You can find us in\n`falconry/dev <https://gitter.im/falconry/dev>`_ on Gitter.\n\nSee also: `CONTRIBUTING.md <https://github.com/falconry/falcon/blob/master/CONTRIBUTING.md>`__\n\nLegal\n-----\n\nCopyright 2013-2025 by Individual and corporate contributors as\nnoted in the individual source files.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use any portion of the Falcon framework except in compliance with\nthe License. Contributors agree to license their work under the same\nLicense. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n.. |Build status| image:: https://github.com/falconry/falcon/actions/workflows/tests.yaml/badge.svg\n    :target: https://github.com/falconry/falcon/actions/workflows/tests.yaml\n.. |Docs| image:: https://readthedocs.org/projects/falcon/badge/?version=stable\n    :alt: Falcon web framework docs\n    :target: https://falcon.readthedocs.io/en/stable/?badge=stable\n.. |codecov.io| image:: https://codecov.io/gh/falconry/falcon/branch/master/graphs/badge.svg\n    :target: https://codecov.io/gh/falconry/falcon\n.. |PyPI package| image:: https://badge.fury.io/py/falcon.svg\n    :target: https://pypi.org/project/falcon/\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/falcon.svg\n    :target: https://pypi.org/project/falcon/\n.. |Backer:GovCert| image:: https://falconframework.org/assets/govcert.png\n    :alt: CERT Gouvernemental Luxembourg\n    :height: 60px\n    :target: https://www.govcert.lu/\n.. |Backer:Sentry| image:: https://falconframework.org/assets/sentry-dark.svg\n    :alt: Sentry\n    :height: 60px\n    :target: https://sentry.io\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 4.0029296875,
          "content": "## Release Manager's Guide\n\nRelease Process:\n\n1. Bump version (including the suffix for pre-release, if applicable).\n2. Update changelog and render towncrier fragments.\n3. Release beta or rc.\n4. Run benchmark and check for regressions.\n5. Review and edit doc changes since the last release for clarity and consistency.\n6. Publish final version and add a release note.\n7. Run benchmark and update falconframework.org with latest numbers.\n8. Announce the new version in Gitter channels and on the socials.\n9. Improve this document.\n\n### Bump version\n\nModify `falcon/version.py` if it has not been updated since the previous\nrelease. Examine the rendered changelog to determine the appropriate SEMVER\nfield to modify.\n\nNote that we have dropped `setup.cfg` altogether, so `__version__` in\n`falcon/version.py` must contain the **whole version**\n(including the previously separately managed `tag_build`), for instance:\n```python\n# Development version\n__version__ = '4.0.0.dev1'\n\n# First alpha\n__version__ = '4.0.0a1'\n\n# Release candidate\n__version__ = '4.0.0rc1'\n\n# Stable release\n__version__ = '4.0.0'\n```\n\nUpdate changelog filename in `pyproject.toml` to suit.\n\n### Update changelog and render towncrier fragments\n\nIf a changelog RST has not yet been created, add one under `docs/changes` using\nthe following template, and update the summary and changes to supported\nplatforms to suit:\n\n```rst\nChangelog for Falcon 4.0.1\n==========================\n\nSummary\n-------\n\nThis is a minor point release to take care of a couple of bugs that we did\nnot catch for 4.0.0.\n\n\n.. towncrier release notes start\n\nContributors to this Release\n----------------------------\n\nMany thanks to those who contributed to this bugfix release:\n\n```\n\nOtherwise, ensure the summary has been brought up to date; be sure to highlight\nkey changes in this release.\n\nNext, update the contributors and render towncrier fragments by running:\n\n```sh\n$ tox -e changelog_release\n```\n\nNote that if the previous release was made on a branch, the tool may get\nconfused, and try to scan too many commits, which will unfortunately get\nrate-limited (and fail) unless you provide a GitHub auth token.\n\nThe workaround is to make sure you have already aggregated the list of\ncontributors in the prior commits leading to the release, and only run the\ntowncrier tool:\n\n```sh\n$ tools/towncrier_draft.py\n```\n\nExamine the updated RST as well as the rendered HTML docs and make any\nadjustments as needed. On OS X it's as simple as:\n\n```sh\n$ open docs/_build/html/changes/index.html\n```\n\nOr on Linux:\n\n```sh\n$ xdg-open docs/_build/html/changes/index.html\n```\n\nIf you need to go back and make any additional tweaks:\n\n```sh\n$ git restore docs/changes\n```\n\nThen re-run the `tox` command when you're ready for another\nproofreading. Or if you just made a manual edit to the updated RST,\nyou can re-render the docs without overwriting the changelog RST:\n\n```sh\n$ tox -e docs\n```\n\nIf all looks good, remove the rendered towncrier fragments from\n`docs/_newsfragments` and then submit a PR containing the changes made so far.\n\nFinally, merge the documentation PR and check that everything renders correctly\non https://falcon.readthedocs.io/. Note that if the release is not based on\n`master` (or `main`), you may need to manually enable build on RtD for the\nbranch or tag in question.\n\n### Release beta or rc\n\nBe sure to install and test from PyPI as a sanity check afterwards. Fix docs,\nperformance regressions, and reported bugs (if any) and release additional\nbetas or release candidates.\n\n### Run benchmark and check for regressions\n\nTODO: Replace with CI gate\n\n### Review and edit doc changes since the last release for clarity and consistency\n\n### Publish final version and add a release note\n\nBe sure to install and test from PyPI as a sanity check afterwards.\n\n### Run benchmark and update falconframework.org with latest numbers\n\n### Announce the new version in Gitter channels and on the socials\n\n### Improve this document\n\nIf you find any inconsistencies, outdated notes or anything missing here, make\nsure you improve this document for future releases!\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "falcon",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "pip.conf",
          "type": "blob",
          "size": 0.04296875,
          "content": "[global]\nindex-url=https://pypi.org/simple/\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.609375,
          "content": "[build-system]\nbuild-backend = \"setuptools.build_meta\"\nrequires = [\n    \"setuptools>=61\",\n    \"cython>=3.0.8; python_implementation == 'CPython'\", # Skip cython when using pypy\n]\n\n[project]\nname = \"falcon\"\nreadme = {file = \"README.rst\", content-type = \"text/x-rst\"}\ndynamic = [\"version\"]\ndependencies = []\nrequires-python = \">=3.8\"\ndescription = \"The ultra-reliable, fast ASGI+WSGI framework for building data plane APIs at scale.\"\nauthors = [\n  {name = \"Kurt Griffiths\", email = \"mail@kgriffs.com\"},\n]\nlicense = {text = \"Apache 2.0\"}\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Web Environment\",\n    \"Natural Language :: English\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: System Administrators\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: MacOS :: MacOS X\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX\",\n    \"Topic :: Internet :: WWW/HTTP :: WSGI\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Programming Language :: Cython\",\n    \"Typing :: Typed\",\n]\nkeywords = [\n    \"asgi\",\n    \"wsgi\",\n    \"web\",\n    \"api\",\n    \"framework\",\n    \"rest\",\n    \"http\",\n    \"cloud\",\n]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\n\n[project.scripts]\nfalcon-bench = \"falcon.cmd.bench:main\"\nfalcon-inspect-app = \"falcon.cmd.inspect_app:main\"\nfalcon-print-routes = \"falcon.cmd.inspect_app:route_main\"\n\n[project.urls]\nHomepage = \"https://falconframework.org\"\nDocumentation = \"https://falcon.readthedocs.io/en/stable/\"\n\"Release Notes\" = \"https://falcon.readthedocs.io/en/stable/changes/\"\n\"Source\" = \"https://github.com/falconry/falcon\"\n\"Issue Tracker\" = \"https://github.com/falconry/falcon/issues\"\nFunding = \"https://opencollective.com/falcon\"\nChat = \"https://gitter.im/falconry/user\"\n\n[tool.setuptools]\ninclude-package-data = true\nlicense-files = [\"LICENSE\"]\nzip-safe = false\n\n[tool.setuptools.dynamic]\nversion = {attr = \"falcon.version.__version__\"}\n\n[tool.setuptools.packages.find]\ninclude = [\"falcon*\"]\n\n[tool.mypy]\n    exclude = [\n        \"falcon/bench\",\n        \"falcon/cmd\",\n    ]\n    disallow_untyped_defs = true\n    warn_unused_ignores = true\n\n    [[tool.mypy.overrides]]\n        module = [\n            \"cbor2\",\n            \"cython\",\n            \"daphne\",\n            \"gunicorn\",\n            \"hypercorn\",\n            \"meinheld\",\n            \"msgpack\",\n            \"mujson\",\n            \"pyximport\",\n            \"testtools\",\n            \"uvicorn\"\n        ]\n        ignore_missing_imports = true\n\n    [[tool.mypy.overrides]]\n        # Pure Cython modules\n        module = [\n            \"falcon.cyutil.misc\",\n            \"falcon.cyutil.reader\",\n            \"falcon.cyutil.uri\"\n        ]\n        ignore_missing_imports = true\n\n[tool.towncrier]\n    package = \"falcon\"\n    package_dir = \"\"\n    filename = \"docs/changes/4.1.0.rst\"\n    directory = \"docs/_newsfragments\"\n    issue_format = \"`#{issue} <https://github.com/falconry/falcon/issues/{issue}>`__\"\n\n    # TODO(vytas): title_format = false seems to have no effect in towncrier==21.3.0.\n    #   For now, we just have to remember to check the rendered changelog, and,\n    #   if needed, remove the unwanted auto-generated title.\n    #   See also: https://github.com/twisted/towncrier/issues/345.\n    title_format = false\n\n    [[tool.towncrier.type]]\n        directory = \"breakingchange\"\n        name = \"Breaking Changes\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"newandimproved\"\n        name = \"New & Improved\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"bugfix\"\n        name = \"Fixed\"\n        showcontent = true\n\n    [[tool.towncrier.type]]\n        directory = \"misc\"\n        name = \"Misc\"\n        showcontent = true\n\n[tool.black]\n    # this is kept to avoid reformatting all the code if one were to\n    # inadvertently run black on the project\n    target-version = [\"py38\"]\n    skip-string-normalization = true\n    line-length = 88\n\n[tool.blue]\n    # NOTE(vytas): Before switching to Ruff, Falcon used the Blue formatter.\n    #   With the below settings, accidentally running blue should yield\n    #   only minor cosmetic changes in a handful of files.\n    target-version = [\"py38\"]\n    line-length = 88\n\n[tool.ruff]\n    target-version = \"py38\"\n    format.quote-style = \"single\"\n    line-length = 88\n    builtins = [\n        \"ignore\",\n        \"attr\",\n        \"defined\",\n    ]\n    exclude = [\n        \".ecosystem\",\n        \".eggs\",\n        \".git\",\n        \".tox\",\n        \".venv\",\n        \"build\",\n        \"dist\",\n        \"docs\",\n        \"falcon/bench/nuts\",\n    ]\n\n[tool.ruff.lint]\n    select = [\n        \"C9\",\n        \"E\",\n        \"F\",\n        \"W\",\n        \"I\",\n        \"FA\"\n    ]\n\n[tool.ruff.lint.mccabe]\n    max-complexity = 15\n\n[tool.ruff.lint.per-file-ignores]\n    \"**/__init__.py\" = [\n        \"F401\",\n        \"E402\",\n        \"F403\"\n    ]\n    \"falcon/uri.py\" = [\"F401\"]\n    \"examples/*\" = [\"FA\"]\n\n[tool.ruff.lint.isort]\n    case-sensitive = false\n    force-single-line = true\n    order-by-type = false\n    single-line-exclusions = [\n        \"typing\"\n    ]\n    force-sort-within-sections = true\n    known-local-folder = [\"asgilook\", \"look\"]\n\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"ignore:Unknown REQUEST_METHOD. '(CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PUT|TRACE|CHECKIN|CHECKOUT|COPY|LOCK|MKCOL|MOVE|PROPFIND|PROPPATCH|REPORT|UNCHECKIN|UNLOCK|UPDATE|VERSION-CONTROL)':wsgiref.validate.WSGIWarning\",\n    \"ignore:Unknown REQUEST_METHOD. '(FOO|BAR|BREW|SETECASTRONOMY)':wsgiref.validate.WSGIWarning\",\n    \"ignore:\\\"@coroutine\\\" decorator is deprecated:DeprecationWarning\",\n    \"ignore:Using or importing the ABCs:DeprecationWarning\",\n    \"ignore:cannot collect test class 'TestClient':pytest.PytestCollectionWarning\",\n    \"ignore:inspect.getargspec\\\\(\\\\) is deprecated:DeprecationWarning\",\n    \"ignore:path is deprecated\\\\. Use files\\\\(\\\\) instead:DeprecationWarning\",\n    \"ignore:This process \\\\(.+\\\\) is multi-threaded\",\n]\nmarkers = [\n    \"slow: mark Falcon tests as slower (potentially taking more than ~500ms).\",\n]\ntestpaths = [\n    \"tests\"\n]\n\n[tool.cibuildwheel]\nbuild-frontend = \"build\"\ntest-requires = [\"-r requirements/cibwtest\"]\ntest-command = \"pytest {project}/tests\"\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.7509765625,
          "content": "import glob\nimport os\nfrom os import path\nimport platform\n\nfrom setuptools import setup\n\ntry:\n    from Cython.Build import build_ext as _cy_build_ext\n    from Cython.Distutils.extension import Extension as _cy_Extension\n\n    HAS_CYTHON = True\nexcept ImportError:\n    _cy_build_ext = _cy_Extension = None\n    HAS_CYTHON = False\n\nDISABLE_EXTENSION = bool(os.environ.get('FALCON_DISABLE_CYTHON'))\nIS_CPYTHON = platform.python_implementation() == 'CPython'\n\nMYDIR = path.abspath(os.path.dirname(__file__))\n\n\nif HAS_CYTHON and IS_CPYTHON and not DISABLE_EXTENSION:\n    assert _cy_Extension is not None\n    assert _cy_build_ext is not None\n\n    def list_modules(dirname, pattern):\n        filenames = glob.glob(path.join(dirname, pattern))\n\n        module_names = []\n        for name in filenames:\n            module, ext = path.splitext(path.basename(name))\n            if module != '__init__':\n                module_names.append((module, ext))\n\n        return module_names\n\n    package_names = [\n        'falcon',\n        'falcon.cyutil',\n        'falcon.media',\n        'falcon.routing',\n        'falcon.util',\n    ]\n\n    modules_to_exclude = [\n        # NOTE(kgriffs): Cython does not handle dynamically-created async\n        #   methods correctly.\n        # NOTE(vytas,kgriffs): We have to also avoid cythonizing several\n        #   other functions that might make it so that the framework\n        #   can not recognize them as coroutine functions.\n        #\n        #   See also:\n        #\n        #       * https://github.com/cython/cython/issues/2273\n        #       * https://bugs.python.org/issue38225\n        #\n        # NOTE(vytas): It is pointless to cythonize reader.py, since cythonized\n        #   Falcon is using reader.pyx instead.\n        'falcon.hooks',\n        'falcon.inspect',\n        'falcon.responders',\n        'falcon.util.reader',\n        'falcon.util.sync',\n    ]\n\n    cython_package_names = ('falcon.cyutil',)\n    # NOTE(vytas): Now that all our codebase is Python 3.7+, specify the\n    #   Python 3 language level for Cython as well to avoid any surprises.\n    cython_directives = {'language_level': '3', 'annotation_typing': False}\n\n    ext_modules = [\n        _cy_Extension(\n            package + '.' + module,\n            sources=[path.join(*(package.split('.') + [module + ext]))],\n            cython_directives=cython_directives,\n            optional=True,\n        )\n        for package in package_names\n        for module, ext in list_modules(\n            path.join(MYDIR, *package.split('.')),\n            ('*.pyx' if package in cython_package_names else '*.py'),\n        )\n        if (package + '.' + module) not in modules_to_exclude\n    ]\n\n    cmdclass = {'build_ext': _cy_build_ext}\nelse:\n    ext_modules = []\n    cmdclass = {}\n\n\nsetup(cmdclass=cmdclass, ext_modules=ext_modules)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 12.01953125,
          "content": "[tox]\n\n# --------------------------------------------------------------------\n#\n# NOTE(kgriffs,vytas): Python 3.10, 3.11, 3.12, or 3.13 are required\n# when checking combined coverage. To check coverage:\n#\n#   $ tox\n#\n# You can then drill down into coverage details by opening the HTML\n# report at \".coverage_html/index.html\".\n#\n# --------------------------------------------------------------------\n\nenvlist = cleanup,\n          ruff,\n          pep8,\n          pep8-docstrings,\n          mypy,\n          mypy_tests,\n          mintest,\n          pytest,\n          coverage,\n          towncrier\n\n[testenv]\n# NOTE(vytas): Other Falcon-specific environment variables for automatic\n#   wrapping of coroutines are set in tests/conftest.py.\nsetenv =\n    PIP_CONFIG_FILE={toxinidir}/pip.conf\n    PYTHONASYNCIODEBUG=1\n    FALCON_DISABLE_CYTHON=Y\ndeps = -r{toxinidir}/requirements/tests\ncommands = python \"{toxinidir}/tools/clean.py\" \"{toxinidir}/falcon\"\n           pytest tests []\n\n# --------------------------------------------------------------------\n# Miscellaneous tasks\n# --------------------------------------------------------------------\n\n[testenv:cleanup]\ndeps = {[testenv]deps}\ncommands = python \"{toxinidir}/tools/clean.py\" \"{toxinidir}/falcon\"\n           coverage erase\n\n[testenv:coverage]\ndeps = {[testenv]deps}\ncommands = coverage combine\n           coverage html -d {toxinidir}/.coverage_html\n           coverage report --fail-under 100\n\n# --------------------------------------------------------------------\n# Coverage\n# --------------------------------------------------------------------\n\n[with-coverage]\ncommands = python \"{toxinidir}/tools/clean.py\" \"{toxinidir}/falcon\"\n           coverage run -m pytest tests []\n\n[testenv:mintest]\nsetenv =\n    PIP_CONFIG_FILE={toxinidir}/pip.conf\n    PYTHONASYNCIODEBUG=0\n    FALCON_DISABLE_CYTHON=Y\ndeps = -r{toxinidir}/requirements/mintest\ncommands = coverage run -m pytest tests -k 'not slow' []\n\n[testenv:pytest]\ndeps = {[testenv]deps}\n       pytest-randomly\n       jsonschema\ncommands = coverage run -m pytest tests []\n\n[testenv:py312]\nbasepython = python3.12\ndeps = {[testenv]deps}\n       pytest-randomly\n       jsonschema\ncommands = {[with-coverage]commands}\n\n[testenv:py312_nocover]\nbasepython = python3.12\ndeps = {[testenv]deps}\n       pytest-randomly\n       jsonschema\ncommands = pytest tests []\n\n# --------------------------------------------------------------------\n# Additional test suite environments\n# --------------------------------------------------------------------\n\n[testenv:pypy3]\nbasepython = pypy3\n\n# --------------------------------------------------------------------\n# Debugging\n# --------------------------------------------------------------------\n\n[with-debug-tools]\ndeps = -r{toxinidir}/requirements/tests\n       pdbpp\n\n[testenv:py3_debug]\nbasepython = python3.12\ndeps = {[with-debug-tools]deps}\n       uvicorn\n       jsonschema\n\n# --------------------------------------------------------------------\n# Mypy\n# --------------------------------------------------------------------\n\n[testenv:mypy]\nskipsdist = True\nskip_install = True\ndeps = mypy\n       types-jsonschema\ncommands = python {toxinidir}/tools/clean.py \"{toxinidir}/falcon\"\n           mypy falcon\n\n[testenv:mypy_tests]\ndeps = {[testenv]deps}\n       mypy\n       types-requests\n       types-PyYAML\n       types-ujson\n       types-waitress\n       types-aiofiles\n       types-jsonschema\ncommands = python \"{toxinidir}/tools/clean.py\" \"{toxinidir}/falcon\"\n           mypy e2e-tests/server\n           mypy tests --allow-untyped-defs\n\n# --------------------------------------------------------------------\n# Cython\n# --------------------------------------------------------------------\n\n[with-cython]\n# NOTE(vytas): Specify Cython dep for tests/test_cython.py as PEP 517 build\n#   does not require it (although Tox seems to inject it in the current impl).\ndeps = -r{toxinidir}/requirements/tests\n       Cython\nsetenv =\n    PIP_CONFIG_FILE={toxinidir}/pip.conf\n    FALCON_DISABLE_CYTHON=\n    FALCON_ASGI_WRAP_NON_COROUTINES=Y\n    FALCON_TESTING_SESSION=Y\n    PYTHONASYNCIODEBUG=1\ncommands = pytest tests []\n\n[testenv:py38_cython]\nbasepython = python3.8\ndeps = {[with-cython]deps}\nsetenv = {[with-cython]setenv}\ncommands = {[with-cython]commands}\n\n[testenv:py39_cython]\nbasepython = python3.9\ndeps = {[with-cython]deps}\nsetenv = {[with-cython]setenv}\ncommands = {[with-cython]commands}\n\n[testenv:py310_cython]\nbasepython = python3.10\ndeps = {[with-cython]deps}\nsetenv = {[with-cython]setenv}\ncommands = {[with-cython]commands}\n\n[testenv:py311_cython]\nbasepython = python3.11\ndeps = {[with-cython]deps}\nsetenv = {[with-cython]setenv}\ncommands = {[with-cython]commands}\n\n[testenv:py312_cython]\nbasepython = python3.12\n# NOTE(vytas): pyximport relies on distutils.extension\ndeps = {[with-cython]deps}\n       setuptools\nsetenv = {[with-cython]setenv}\ncommands = {[with-cython]commands}\n\n[testenv:py313_cython]\nbasepython = python3.13\n# NOTE(vytas): pyximport relies on distutils.extension\ndeps = {[with-cython]deps}\n       setuptools\nsetenv = {[with-cython]setenv}\ncommands = {[with-cython]commands}\n\n# --------------------------------------------------------------------\n# WSGI servers (Cythonized Falcon)\n# --------------------------------------------------------------------\n\n[testenv:wsgi_servers]\nsetenv = {[with-cython]setenv}\ndeps = {[with-cython]deps}\n       gunicorn\n       uwsgi\n       waitress\ncommands = pytest -v tests/test_wsgi_servers.py\n\n[testenv:wsgi_meinheld]\n# NOTE(caselit): meinheld requires greenlet<0.5 that's not compatible with py3.10\nbasepython = python3.8\nsetenv = {[with-cython]setenv}\ndeps = {[with-cython]deps}\n       gunicorn\n       meinheld\ncommands = pytest -v tests/test_wsgi_servers.py\n\n# --------------------------------------------------------------------\n# ASGI servers\n# --------------------------------------------------------------------\n\n[testenv:daphne]\ndeps = {[testenv]deps}\n       daphne\ncommands = pytest -v tests/asgi/test_asgi_servers.py\n\n[testenv:hypercorn]\ndeps = {[testenv]deps}\n       hypercorn\ncommands = pytest -v tests/asgi/test_asgi_servers.py\n\n# --------------------------------------------------------------------\n# Smoke testing with a sample app\n# --------------------------------------------------------------------\n\n[smoke-test]\n# NOTE(vytas): Work around pprofile's reliance on the removed use_2to3 option:\n#   https://github.com/vpelletier/pprofile/issues/41\ncommands = pip install \"setuptools < 58.0\"\n           pip install -r {toxinidir}/requirements/bench\n           python -c \"import falcon.asgi; falcon.asgi.App()\"\n           falcon-bench -t 1 -b falcon-ext\n\n[testenv:py38_smoke]\n# NOTE(caselit): vmprof requires python 3.8 https://github.com/vmprof/vmprof-python/issues/240\nbasepython = python3.8\ndeps =\ncommands = {[smoke-test]commands}\n\n[testenv:py38_smoke_cython]\n# NOTE(caselit): vmprof requires python 3.8 https://github.com/vmprof/vmprof-python/issues/240\nbasepython = python3.8\ndeps = cython\nsetenv = {[with-cython]setenv}\ncommands = {[smoke-test]commands}\n\n# --------------------------------------------------------------------\n# Lint\n# --------------------------------------------------------------------\n\n[testenv:pep8]\ndeps = ruff\nskip_install = True\ncommands = ruff check []\n\n[testenv:pep8-docstrings]\ndeps = ruff\nskip_install = True\ncommands = ruff check \\\n             --exclude=.ecosystem,.eggs,.git,.tox,.venv,build,dist,docs,examples,tests,falcon/bench/nuts \\\n             --select=D205,D212,D400,D401,D403,D404 \\\n             []\n\n[testenv:ruff]\ndeps = ruff>=0.3.7\nskip_install = True\ncommands = ruff format --check . []\n\n[testenv:reformat]\ndeps = ruff>=0.3.7\nskip_install = True\ncommands =\n    ruff format . []\n    ruff check --fix\n\n# --------------------------------------------------------------------\n# For viewing environ dicts generated by various WSGI servers\n# --------------------------------------------------------------------\n\n[testenv:dump_gunicorn]\ndeps = gunicorn\ncommands = gunicorn -b localhost:8000 tests.dump_wsgi\n\n[testenv:dump_waitress]\ndeps = waitress\ncommands = waitress-serve --listen=localhost:8000 tests.dump_wsgi:application\n\n[testenv:dump_wsgiref]\ncommands = python tests/dump_wsgi.py\n\n# --------------------------------------------------------------------\n# Benchmarking\n# --------------------------------------------------------------------\n\n[testenv:py310_bench]\nbasepython = python3.10\ndeps = -r{toxinidir}/requirements/bench\ncommands = falcon-bench []\n\n[testenv:py310_bench_cython]\nbasepython = python3.10\ndeps = -r{toxinidir}/requirements/bench\n       cython\ncommands = falcon-bench []\n\n[testenv:py38_bench]\nbasepython = python3.8\ndeps = -r{toxinidir}/requirements/bench\ncommands = falcon-bench []\n\n[testenv:py38_bench_cython]\nbasepython = python3.8\ndeps = -r{toxinidir}/requirements/bench\n       cython\ncommands = falcon-bench []\n\n[testenv:pypy_bench]\nbasepython = pypy\ndeps = -r{toxinidir}/requirements/bench\ncommands = falcon-bench []\n\n[testenv:pypy3_bench]\nbasepython = pypy3\ndeps = -r{toxinidir}/requirements/bench\ncommands = falcon-bench []\n\n# --------------------------------------------------------------------\n# Package sanity check with twine\n# --------------------------------------------------------------------\n\n[testenv:twine_check]\nskipsdist = True\ndeps = build\n       twine\ncommands =\n    python -m build\n    twine check {toxinidir}/dist/*\n\n# --------------------------------------------------------------------\n# Documentation\n# --------------------------------------------------------------------\n\n[testenv:docs]\ndeps = -r{toxinidir}/requirements/docs\ncommands =\n    sphinx-build -j auto -W -E -b html docs docs/_build/html []\n\n[testenv:towncrier]\ndeps = -r{toxinidir}/requirements/docs\n        toml\n        towncrier\ncommands =\n    python \"{toxinidir}/tools/towncrier_draft.py\" --dry-run\n\n[testenv:changelog_release]\ndeps = -r{toxinidir}/requirements/docs\n        toml\n        towncrier\ncommands =\n    python \"{toxinidir}/tools/add_contributors.py\"\n    python \"{toxinidir}/tools/towncrier_draft.py\"\n\n# NOTE(kgriffs): Renders the changelog to HTML so that the final result\n#   can be previewed, but then restores the changelog RST document.\n[testenv:changelog_draft]\ndeps = -r{toxinidir}/requirements/docs\n        toml\n        towncrier\ncommands =\n    python \"{toxinidir}/tools/add_contributors.py\" --dry-run\n    python \"{toxinidir}/tools/towncrier_draft.py\" --dry-run\n\n[testenv:dash]\nbasepython = python3.10\nsetenv =\n    DASHBUILD = True\ndeps = -r{toxinidir}/requirements/docs\ncommands =\n    sphinx-build -j 4 -W -E -b html docs docs/_build/html []\n    {toxinidir}/tools/generate_dash.sh\n\n# --------------------------------------------------------------------\n# Tutorial tests\n#\n#   - Tutorial (\"look\") tests\n#   - ASGI tutorial (\"asgilook\") tests\n#   - WebSockets tutorial (\"ws_tutorial\") tests\n# --------------------------------------------------------------------\n\n[testenv:look]\ndeps =\n    -r{toxinidir}/examples/look/requirements/test\ncommands =\n    pytest {toxinidir}/examples/look/tests\n\n[testenv:asgilook]\nbasepython = python3.12\ndeps =\n    -r{toxinidir}/examples/asgilook/requirements/asgilook\n    -r{toxinidir}/examples/asgilook/requirements/test\ncommands =\n    pytest \\\n        --cov asgilook \\\n        --cov-config {toxinidir}/examples/asgilook/.coveragerc \\\n        --cov-fail-under 100 \\\n        --cov-report term-missing \\\n        {toxinidir}/examples/asgilook/tests/\n\n[testenv:ws_tutorial]\nbasepython = python3.12\ndeps =\n    -r{toxinidir}/examples/ws_tutorial/requirements/app\n    -r{toxinidir}/examples/ws_tutorial/requirements/test\ncommands =\n    pytest \\\n        --cov ws_tutorial \\\n        --cov-config {toxinidir}/examples/ws_tutorial/.coveragerc \\\n        --cov-fail-under 100 \\\n        --cov-report term-missing \\\n        {toxinidir}/examples/ws_tutorial/tests/\n\n# --------------------------------------------------------------------\n# E2E tests\n# --------------------------------------------------------------------\n\n[testenv:e2e_chrome]\nbasepython = python3.12\ndeps =\n    -r{toxinidir}/requirements/e2e\ncommands =\n    pytest {toxinidir}/e2e-tests/ --browser=chrome\n\n[testenv:e2e_firefox]\nbasepython = python3.12\ndeps =\n    -r{toxinidir}/requirements/e2e\ncommands =\n    pytest {toxinidir}/e2e-tests/ --browser=firefox\n"
        },
        {
          "name": "volunteers.jpg",
          "type": "blob",
          "size": 15.62890625,
          "content": null
        }
      ]
    }
  ]
}