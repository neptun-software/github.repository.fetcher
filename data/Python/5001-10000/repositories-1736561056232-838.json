{
  "metadata": {
    "timestamp": 1736561056232,
    "page": 838,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "navdeep-G/setup.py",
      "stars": 5084,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0322265625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n*.npy\n*.pkl\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright <YEAR> <COPYRIGHT HOLDER>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.025390625,
          "content": "include README.md LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.283203125,
          "content": "ðŸ“¦ setup.py (for humans)\n=======================\n\nThis repo exists to provide [an example setup.py] file, that can be used\nto bootstrap your next Python project. It includes some advanced\npatterns and best practices for `setup.py`, as well as some\ncommentedâ€“out niceâ€“toâ€“haves.\n\nFor example, this `setup.py` provides a `$ python setup.py upload`\ncommand, which creates a *universal wheel* (and *sdist*) and uploads\nyour package to [PyPi] using [Twine], without the need for an annoying\n`setup.cfg` file. It also creates/uploads a new git tag, automatically.\n\nIn short, `setup.py` files can be daunting to approach, when first\nstarting out â€” even Guido has been heard saying, \"everyone cargo cults\nthems\". It's true â€” so, I want this repo to be the best place to\ncopyâ€“paste from :)\n\n[Check out the example!][an example setup.py]\n\nInstallation\n-----\n\n```bash\ncd your_project\n\n# Download the setup.py file:\n#  download with wget\nwget https://raw.githubusercontent.com/navdeep-G/setup.py/master/setup.py -O setup.py\n\n#  download with curl\ncurl -O https://raw.githubusercontent.com/navdeep-G/setup.py/master/setup.py\n```\n\nTo Do\n-----\n\n-   Tests via `$ setup.py test` (if it's concise).\n\nPull requests are encouraged!\n\nMore Resources\n--------------\n\n-   [What is setup.py?] on Stack Overflow\n-   [Official Python Packaging User Guide](https://packaging.python.org)\n-   [The Hitchhiker's Guide to Packaging]\n-   [Cookiecutter template for a Python package]\n\nLicense\n-------\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any means.\n\n  [an example setup.py]: https://github.com/navdeep-G/setup.py/blob/master/setup.py\n  [PyPi]: https://docs.python.org/3/distutils/packageindex.html\n  [Twine]: https://pypi.python.org/pypi/twine\n  [image]: https://farm1.staticflickr.com/628/33173824932_58add34581_k_d.jpg\n  [What is setup.py?]: https://stackoverflow.com/questions/1471994/what-is-setup-py\n  [The Hitchhiker's Guide to Packaging]: https://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/creation.html\n  [Cookiecutter template for a Python package]: https://github.com/audreyr/cookiecutter-pypackage\n"
        },
        {
          "name": "mypackage",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.69140625,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pipenv install twine --dev\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'mypackage'\nDESCRIPTION = 'My short description for my project.'\nURL = 'https://github.com/me/myproject'\nEMAIL = 'me@example.com'\nAUTHOR = 'Awesome Soul'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = '0.1.0'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous buildsâ€¦')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distributionâ€¦')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twineâ€¦')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tagsâ€¦')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \"tests.*\"]),\n    # If your package is a single module, use this instead of 'packages':\n    # py_modules=['mypackage'],\n\n    # entry_points={\n    #     'console_scripts': ['mycli=mymodule:cli'],\n    # },\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)\n"
        }
      ]
    }
  ]
}