{
  "metadata": {
    "timestamp": 1736560453066,
    "page": 32,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cython/cython",
      "stars": 9689,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.6220703125,
          "content": "[codespell]\nskip = .git,*.pdf,*.svg,cython.st,msvc_strings.pyx,test_genericclass_exttype.pyx,e_invalid_special_cython_modules.py,encoding.pyx,str_encoding_latin1.pyx,unicodeliteralslatin1.pyx\n# case sensitive etc\n# Tripple -- relates to kate. Not sure if could be fixed\nignore-regex= Tripple|/Fo|ist das|TOi|respect to the includee\n# forin - ? tag used in 3 files. may be could be renamed?\n# delimeters - typo, but used in API so kept as is\n# implementor,implementors - was decided that both forms are ok\nignore-words-list = asend,forin,nd,mis,te,nin,ue,ccompiler,ket,defin,delimeters,filetests,crasher,implementor,implementors,assertIn\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.478515625,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\nmax_line_length = 120\n\n# 4 space indentation\n[*.{py,pyx,pxi,pxd,c,cpp,h,hpp}]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n# Tab indentation (no size specified)\n[Makefile]\nindent_style = tab\n\n# Matches the exact files either package.json or .travis.yml\n[{package.json,.travis.yml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.775390625,
          "content": "*.pyc\n*.pyd\n*.pyo\n__pycache__\n*.so\n*.o\n\n*.egg\n*.egg-info\n.*cache*/\n*venv*/\n/.hg\n\n/Cython/Build/*.c\n/Cython/Compiler/*.c\n/Cython/Debugger/*.c\n/Cython/Distutils/*.c\n/Cython/Parser/*.c\n/Cython/Plex/*.c\n/Cython/Runtime/refnanny.c\n/Cython/Tempita/*.c\n/Cython/*.c\n/Cython/*.html\n/Cython/*/*.html\n\n/Tools/*.elc\n/Demos/*.html\n/Demos/*/*.html\n/Demos/benchmarks/*.c\n\n/TEST/\n/TEST_TMP/\n/build/\n/cython_build/\ncython_debug/\n/wheelhouse*/\n!tests/build/\n/dist/\n.gitrev\n.coverage\ncoverage*.xml\ncoverage*.html\n/coverage*/\n*.patch\n*.diff\n*.orig\n*.prof\n*.rej\n*.log\n*.dep\n*.swp\n*.gz\n*.bz2\n*.xz\n*~\ncallgrind.out.*\n\n.ipynb_checkpoints\ndocs/build\ndocs/_build\n\ntags\nTAGS\nMANIFEST\n\n.tox\n\n# Jetbrains IDE project files\n/.idea\n/*.iml\n\n# Komodo EDIT/IDE project files\n/*.komodoproject\n\n# Visual Studio Code files\n.vscode\n"
        },
        {
          "name": ".hgignore",
          "type": "blob",
          "size": 0.208984375,
          "content": "syntax: glob\n\n*.pyc\n*.pyo\n__pycache__\n*.egg\n*.egg-info\n\nCython/Compiler/*.c\nCython/Plex/*.c\nCython/Runtime/refnanny.c\n\nTEST_TMP/\nbuild/\ndist/\n.git/\n.gitrev\n.coverage\n*.orig\n*.rej\n*.dep\n*.swp\n*.so\n*.o\n*~\n\ntags\nTAGS\n"
        },
        {
          "name": ".hgtags",
          "type": "blob",
          "size": 2.708984375,
          "content": "966abe58538dfbdaccd53bd970d4998c78ea522e 0.9.6.14\n67ee5a34bfc662e4e3cf989c2c8bf78a412ae8f4 0.9.8rc1\n16a746d969e2654112fc0dc081690b891c496977 Version-0.9.8\na09347d7b470290076b983aef98707921445a038 0.9.8.1\n82084a7b654e2a133ab64ceb47e03d6e7a204990 0.9.9.2.beta\na89b05b78236a27a654f3004bdffc7b8a56311a7 0.10\nef9d2c680684d0df7d81f529cda29e9e1741f575 cython-0.10.1\n92baafe0edf3cea00deb7ce1e31e337bb485af1a 0.10.2\ncdf889c30e7a7053de20bae3a578dad09ebcbdf5 0.10.3\n59c67af0674bd93c5fd8958e08c76a9dab9aae37 sage-cythonizes\na4abf0156540db4d3ebaa95712b65811c43c5acb 0.11-beta\n838a6b7cae62e01dc0ce663cccab1f93f649fdbd 0.11.rc\n4497f635d5fdbd38ebb841be4869fbfa2bbfdbb6 0.11.1.alpha\n7bc36a0f81723117a19f92ffde1676a0884fef65 0.11.1.beta\n6454db601984145f38e28d34176fca8a3a22329c 0.11.1\naf6f1bed8cd40a2edefb57d3eacbc9274a8788b4 0.11.2.rc1\n15ad532e2127840ae09dfbe46ccc80ac8c562f99 0.11.2\neb00d00a73c13b6aa8b440fe07cd7acb52a060e8 0.11.3.rc0\n7c695fe49fd6912f52d995fe512d66baacf90ee6 0.11.3\n4208042ceeae634f5c0999b8ab75f69faf46b6db 0.12.alpha0\ne77827f09af67560aa82a18feab778f71ca0a9d3 0.12.rc0\nfae19937e4945c59a5d9d62c63f1c3b09046c3a3 0.12\ne90c522631ae06f2170a751fb256cdea0e50fb21 0.12.1\n5ac2eaefcdc9c3a7a9c29a0bb8c3e4c6c016c64c 0.13.beta0\n14957f635a379c97d9966097276313e43491ed96 0.13.beta1\n32c957267b3ba3140fba4d1947fa98484d5e956b 0.13\nef9d2c680684d0df7d81f529cda29e9e1741f575 0.10.1\n16a746d969e2654112fc0dc081690b891c496977 0.9.8\n16a746d969e2654112fc0dc081690b891c496977 Version-0.9.8\n0000000000000000000000000000000000000000 Version-0.9.8\nef9d2c680684d0df7d81f529cda29e9e1741f575 cython-0.10.1\n0000000000000000000000000000000000000000 cython-0.10.1\n59c67af0674bd93c5fd8958e08c76a9dab9aae37 sage-cythonizes\n0000000000000000000000000000000000000000 sage-cythonizes\n478f57be445d18fe294db849d7ad317fe7d7658f 0.14.alpha0\n31b531a6c45b2c34ae5a1af8a2c09f152adea60d 0.14.beta1\n7fa84cb6d3d75eb3d015aeeb60bf8b642171fe93 0.14.beta2\n7fa84cb6d3d75eb3d015aeeb60bf8b642171fe93 0.14.beta2\n8412b39fbc3eb709a543e2f1e95c0c8881ea9ed4 0.14.beta2\na6b9f0a6d02d23fc3d3a9d0587867faa3afb2fcd 0.14.rc0\n15bf34c9387444e262acb1de594405444dd571a4 0.14\n5320ddd8c3a60d00e0513f9f70d6846cd449409b 0.17.beta1\n275fb550c1d802da3df35ebae41e04eadc60e49e 0.17.2\nb0faba6967e74f652286a0de6d02d736845b0708 0.17.3\nc1a18ab6b0808e87f68d2f9d914c01934510aef5 0.18b1\n9a11631e0edb0394b17554cde8bec5d4784117e4 0.18rc1\n76f33728e8534e698267e097cf603ea59ade6f30 0.18\n4f782ac7b3fdf3b4408bbf9f2ed4c38f31e60920 0.19b1\n52beb5b16df5b8a92bb6c8c47faf42370d73cb0f 0.19b2\n4818f5b68eb4b4ea6ad7e415f6672b491e2461bc 0.19rc1\n48407fa3f3c9da84ab3dc103a6a2b1ca4c1beb2a 0.19\n58fc9a3feb83f571623a492256885d21945decb4 0.21.1\n58fc9a3feb83f571623a492256885d21945decb4 0.21.1\nd05a4acd45fca9bdc12cef82890ca569fbaae1a5 0.21.1\nab1a3afb8775a09d37c0d478476987eee8e734a6 0.21.2\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.044921875,
          "content": "Stefan Behnel <stefan_ml@behnel.de> Stefan Behnel <scoder@users.berlios.de>\nStefan Behnel <stefan_ml@behnel.de> scoder <stefan_ml@behnel.de>\nStefan Behnel <stefan_ml@behnel.de> Stefan Behnel <stb@skoobe.de>\nRobert Bradshaw <robertwb@gmail.com> Robert Bradshaw <robertwb@math.washington.edu>\nRobert Bradshaw <robertwb@gmail.com> Robert Bradshaw <robertwb@google.com>\nRobert Bradshaw <robertwb@gmail.com> robertwb <robertwb@gmail.com>\nRobert Bradshaw <robertwb@gmail.com> Robert Bradshaw <robertwb@robertwb-macbookpro.local>\nMark Florisson <markflorisson88@gmail.com> Mark <markflorisson88@gmail.com>\nMark Florisson <markflorisson88@gmail.com> Mark Florisson <eggy.nospam@gmail.com>\nLars Buitinck <larsmans@gmail.com> Lars Buitinck <L.J.Buitinck@uva.nl>\nDanilo Freitas <dsurviver@gmail.com> DaniloFreitas <dsurviver@gmail.com>\nDanilo Freitas <dsurviver@gmail.com> daniloaf@daniloaf-PC <none@none>\nDanilo Freitas <dsurviver@gmail.com> daniloaf <none@none>\nLisandro Dalcin <dalcinl@gmail.com> dalcinl <none@none>\nChristoph Gohlke <cgohlke@uci.edu> cgohlke <cgohlke@uci.edu>\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.474609375,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Configuration file version\nversion: 2\n\n# Set the versions of the tools\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.11\"\n\npython:\n  install:\n    - requirements: doc-requirements.txt\n    - method: setuptools  # runs setup.py\n      path: .\n\nsphinx:\n  builder: html\n  configuration: docs/conf.py\n\n# Don't build the docs in additional formats like pdf or epub\nformats: []\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.83984375,
          "content": "# Bazel build file for inclusion as external dependency.\n#\n# Most useful is the pyx_library rule from //Tools:rules.bzl\n# which mirrors py_library but compiles .pyx files.\n\nload(\"@rules_python//python:defs.bzl\", \"py_binary\", \"py_library\")\n\npy_library(\n    name = \"cython_lib\",\n    srcs = glob(\n        [\"Cython/**/*.py\"],\n        exclude = [\n            \"**/Tests/*.py\",\n        ],\n    ) + [\"cython.py\"],\n    data = glob([\n        \"Cython/**/*.pyx\",\n        \"Cython/Utility/*.*\",\n        \"Cython/Includes/**/*.pxd\",\n    ]),\n    visibility = [\"//visibility:public\"],\n)\n\n# May not be named \"cython\", since that conflicts with Cython/ on OSX\npy_binary(\n    name = \"cython_binary\",\n    srcs = [\"cython.py\"],\n    main = \"cython.py\",\n    visibility = [\"//visibility:public\"],\n    deps = [\"cython_lib\"],\n)\nalias(\n    name = \"cython\",\n    actual = \":cython_binary\",\n)\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 278.587890625,
          "content": "================\nCython Changelog\n================\n\n3.1.0 alpha 1 (2024-11-08)\n==========================\n\nFeatures added\n--------------\n\n* Support for freethreading builds of CPython 3.13 was added.\n  It comes with a new directive ``freethreading_compatible=True`` to mark modules as\n  free-threading compatible (``Py_mod_gil``).\n\n  https://github.com/cython/cython/issues?q=label%3A%22nogil+CPython%22\n\n  Patches by Lysandros Nikolaou and Nathan Goldbaum.  (Github issue :issue:`6162`)\n\n* Support for monitoring Cython modules via `sys.monitoring` in CPython 3.13+ was added.\n  For coverage reporting, this needs to be disabled with `-DCYTHON_USE_SYS_MONITORING=0`\n  as long as `coverage.py` does not support `sys.monitoring` for coverage plugins.\n  (Github issue :issue:`6144`)\n\n* Many issues with the Limited C-API were resolved.\n  It is now sufficient to define the macro ``Py_LIMITED_API`` to activate the support.\n\n  https://github.com/cython/cython/issues?q=label%3A%22limited+api%22\n\n* Support for GraalPython was improved (but is still incomplete).\n\n* Several issues with the gdb support were resolved.\n  Patches by Kent Slaney.  (Github issues :issue:`5955`, :issue:`5948`)\n\n* ``typing.Union[SomeType, None]`` and ``SomeType | None`` are now understood and mean\n  the same as ``typing.Optional[SomeType]``, allowing ``None`` in type checks.\n  (Github issue :issue:`6254`)\n\n* ``cython.const[]`` and ``cython.volatile[]`` are now available as type modifiers in Python code.\n  (Github issue :issue:`5728`)\n\n* ``cython.pointer[SomeCType]`` can now be used to define pointer types in Python type annotations.\n  (Github issue :issue:`5071`)\n\n* Several improvements were made to reduce the size of the resulting extension modules.\n  (Github issue :issue:`4425`)\n\n* Function calls now use the PEP-590 Vectorcall protocol, even when passing keyword arguments.\n  (Github issues :issue:`5804`)\n\n* Coroutines now use the ``am_send`` slot function instead of going through a Python ``.send()`` call.\n  This has been backported for Python 3.7 - 3.9.\n  (Github issues :issue:`4585`)\n\n* ``__set_name__`` is called when assigning to class attributes.\n  (Github issue :issue:`6179`)\n\n* Most builtin methods now provide their return type for type inference.\n  (Github issues :issue:`4829`, :issue:`5865`, :issue:`6412`)\n\n* Method calls on builtin literal values are evaluated at compile time, if applicable.\n  (Github issue :issue:`6383`)\n\n* The Python ``int`` type now maps directly to ``PyLong`` and is inferred accordingly.\n  (Github issue :issue:`4237`)\n\n* Integer operations on known ``int`` types are faster.\n  (Github issue :issue:`5785`)\n\n* f-strings are faster in some cases.\n  (Github issues :issue:`5866`, :issue:`6342`, :issue:`6383`)\n\n* ``divmod()`` is faster on C integers.\n  Patch by Tong He.  (Github issue :issue:`6073`)\n\n* ``dict.pop()`` is faster in some cases.\n  (Github issue :issue:`5911`)\n\n* ``.isprintable()`` is optimised for Unicode characters.\n  (Github issue :issue:`3277`)\n\n* ``x in ()`` and similar tests against empty constant sequences (e.g. in generated code)\n  are now discarded if they have no side-effects.\n  (Github issue :issue:`6288`)\n\n* Constant (non-GC) Python objects are no longer traversed with ``Py_VISIT()`` during GC runs.\n  (Github issue :issue:`6277`)\n\n* C++ classes implemented in Cython can now use method overloading.\n  Patch by samaingw.  (Github issue :issue:`3235`)\n\n* Assigning a Python container to a C++ vector now makes use of ``__length_hint__``\n  to avoid reallocations.\n  Patch by Denis Lukianov.  (Github issue :issue:`6077`)\n\n* The C++11 ``emplace*`` methods were added to ``libcpp.deque``.\n  Patch by Somin An.  (Github issue :issue:`6159`)\n\n* ``cpython.time`` was updated and extended for Python 3.13.\n  (Github issue :issue:`6187`)\n\n* Dataclasses support the ``match_args`` option.\n  (Github issue :issue:`5381`)\n\n* Threading in parallel sections can now be disabled with a new ``use_threads_if`` condition.\n  (Github issue :issue:`5919`)\n\n* New options ``warn.deprecated.DEF`` and ``warn.deprecated.IF`` can silence the deprecation warnings.\n  Patch by Eric Larson.  (Github issue :issue:`6243`)\n\n* ``cygdb`` shows more helpful output for some objects.\n  Patch by Kent Slaney.  (Github issue :issue:`5958`)\n\n* Bazel build support for improved.\n  Patch by mering.  (Github issue :issue:`6452`)\n\n* The parser was updated for Unicode 15.1 (as provided by CPython 3.13b4).\n\nBugs fixed\n----------\n\n* C functions used different start lines and columns for error reporting and tracing\n  than Python functions.  They now use the line and column of their first decorator\n  or (if none) their definition line, as in Python.\n  (Github issue :issue:`6366`)\n\n* Dataclasses did not handle default fields without init value correctly.\n  (Github issue :issue:`5858`)\n\n* Implementing a special method based on another could lead to infinite recursion.\n  (Github issue :issue:`5863`)\n\n* The ``__class__`` cell variable in methods was not always working as in Python.\n  Initial patch by Tom Keefe.  (Github issue :issue:`2912`)\n\n* Lambda functions had no code objects. Their signature can now be introspected.\n  (Github issue :issue:`2983`)\n\n* Subtyping `complex` as extension type could fail.\n  (Github issue :issue:`6346`)\n\n* ``hasattr()`` now propagates exceptions that occur during lookup.\n  (Github issue :issue:`6269`)\n\n* The base type of extension heap types is now traversed during GC runs in Py3.9+.\n  (Github issue :issue:`4193`)\n\n* The Python ``&`` operator could touch invalid memory with certain ``0`` values in Python <= 3.10.\n  Patch by Michael J. Sullivan.  (Github issue :issue:`4193`)\n\n* Exception values were not always recognised as equal at compile time.\n  (Github issue :issue:`5709`)\n\n* Running Cython in different Python versions could generate slightly different C code\n  due to differences in the builtins.\n  (Github issue :issue:`5591`)\n\n* The `common_include_dir` feature used different file paths in the C code on Windows and Posix.\n  It now uses forward slashes as directory separator consistently.\n  (Github issue :issue:`6355`)\n\n* File paths in the C code are now relative to the build directory.\n  Patch by Oscar Benjamin.  (Github issue :issue:`6341`)\n\n* depfiles now use relative paths whenever possible.\n  Patch by Loïc Estève.  (Github issue :issue:`6345`)\n\n* The ``-a`` option in the IPython magic no longer copies the complete HTML document\n  into the notebook but only a more reasonable content snippet.\n  Patch by Min RK.  (Github issue :issue:`5760`)\n\n* Uselessly referring to C enums (not enum values) as Python objects is now rejected.\n  Patch by Vyas Ramasubramani.  (Github issue :issue:`5638`)\n\n* Cython no longer acquires the GIL during in-place assignments to C attributes in nogil sections.\n  Patch by Mads Ynddal.  (Github issue :issue:`6407`)\n\n* Several C++ warnings about ``char*`` casts were resolved.\n  (Github issues :issue:`5515`, :issue:`5847`)\n\n* C++ undefined behaviour was fixed in an error handling case.\n  (Github issue :issue:`5278`)\n\n* Dict assignments to struct members with reserved C/C++ names could generate invalid C code.\n\n* The PEP-479 implementation could raise a visible ``RuntimeError`` without\n  a trace of the original ``StopIteration``.\n  (Github issue :issue:`5953`)\n\n* A crash was fixed when assigning a zero-length slice to a memoryview.\n  Patch by Michael Man.  (Github issue :issue:`6227`)\n\n* Conditionally assigning to variables with the walrus operator could crash.\n  (Github issue :issue:`6094`)\n\n* Unterminated string literals could lock up the build in an infinite loop.\n  (Github issue :issue:`5977`)\n\n* Exporting C functions uses better platform compatible code.\n  (Github issue :issue:`4683`)\n\n* The shebang in ``libpython.py`` was incorrect.\n  Patch by Luke Hamburg.  (Github issue :issue:`6439`)\n\n* Cython now uses `SHA-256` instead of `SHA-1` for caching etc. as the latter may not be\n  available on all Python installations.\n  (Github issue :issue:`6354`)\n\nOther changes\n-------------\n\n* Support for Python 2.7 - 3.7 was removed, along with large chunks of legacy code.\n  (Github issue :issue:`2800`)\n\n* The pxd files ``cpython.int``, ``cpython.cobject``, ``cpython.oldbuffer`` and ``cpython.string``\n  were removed as they refer to C-API declarations that are only in Python 2.x.\n  (Github issue :issue:`5870`)\n\n* The generated C code now requires a C99 compatible C compiler.\n\n* ``language_level=3`` is now the default.\n  ``language_level=3str`` has become a legacy alias.\n  (Github issue :issue:`5827`)\n\n* The Py2 types ``unicode`` and ``basestring`` are now deprecated and have become aliases\n  of the ``str`` type.\n  (Github issue :issue:`6374`)\n\n* Docstrings now strip their leading whitespace according to PEP-257.\n  Patch by Lawrence Mitchell.  (Github issue :issue:`6241`)\n\n* Type checkers should have it easier to find and validate Cython types in .py files.\n  (Github issue :issue:`4327`)\n\n* The previously shipped NumPy C-API declarations (``cimport numpy``) were removed.\n  NumPy has been providing version specific declarations for several versions now.\n  (Github issue :issue:`5842`)\n\n* Usages of the outdated ``WITH_THREAD`` macro guard were removed.\n  (Github issue :issue:`5812`)\n\n* The options for showing the C code line in Python exception stack traces were cleaned up.\n  Previously, disabling the option with the ``CYTHON_CLINE_IN_TRACEBACK`` macro did not\n  reduce the code overhead of the feature, and the ``c_line_in_traceback`` compile option\n  was partly redundant with the C macro switches and lead to warnings about unused code.\n  Since this is considered mostly a debug feature, the new default is that it is _disabled_\n  to avoid code and runtime overhead.  It can be enabled by setting the C macro to 1, and\n  a new macro ``CYTHON_CLINE_IN_TRACEBACK_RUNTIME`` was added that controls the runtime\n  configurable setting if the feature is enabled, which was previously only available\n  through the compile option.  The compile option is now deprecated (but still available),\n  and users should migrate to using the two C macros only.\n  (Github issue :issue:`6036`)\n\n* Includes all fixes as of Cython 3.0.12 (but generates C99 code in some places).\n\n\n3.0.12 (2024-??-??)\n===================\n\nBugs fixed\n----------\n\n* Release 3.0.11 introduced some incorrect ``noexcept`` warnings.\n  (Github issue :issue:`6335`)\n\n* Conditional assignments to variables using the walrus operator could crash.\n  (Github issue :issue:`6094`)\n\n* Dict assignments to struct members with reserved C names could generate invalid C code.\n\n* Fused ctuples with the same entry types but different sizes could fail to compile.\n  (Github issue :issue:`6328`)\n\n* In Py3, `pyximport` was not searching `sys.path` when looking for importable source files.\n  (Github issue :issue:`5615`)\n\n\n3.0.11 (2024-08-05)\n===================\n\nFeatures added\n--------------\n\n* The C++11 ``emplace*`` methods were added to ``libcpp.deque``.\n  Patch by Somin An.  (Github issue :issue:`6159`)\n\nBugs fixed\n----------\n\n* The exception check value of functions declared in pxd files was not always applied in 3.0.10.\n  (Github issue :issue:`6122`)\n\n* A crash on exception deallocations was fixed.\n  (Github issue :issue:`6022`)\n\n* A crash was fixed when assigning a zero-length slice to a memoryview.\n  Patch by Michael Man.  (Github issue :issue:`6227`)\n\n* ``libcpp.optional.value()`` could crash if it raised a C++ exception.\n  Patch by Alexander Condello.  (Github issue :issue:`6190`)\n\n* The return type of ``str()`` was mishandled, leading to crashes with ``language_level=3``.\n  (Github issue :issue:`6166`)\n\n* ``bytes.startswith/endswith()`` failed for non-bytes substrings (e.g. ``bytearray``).\n  (Github issue :issue:`6168`)\n\n* Fused ctuples crashed Cython.\n  (Github issue :issue:`6068`)\n\n* A compiler crash was fixed when using extension types in fused types.\n  (Github issue :issue:`6204`)\n\n* The module cleanup code was incorrect for globally defined memory view slices.\n  (Github issue :issue:`6276`)\n\n* Some adaptations were made to enable compilation in Python 3.13.\n  (Github issues :issue:`5997`, :issue:`6182`, :issue:`6251`)\n\n\n3.0.10 (2024-03-30)\n===================\n\nBugs fixed\n----------\n\n* Cython generated incorrect self-casts when directly calling final methods of subtypes.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`2747`)\n\n* Internal C names generated from C function signatures could become too long for MSVC.\n  (Github issue :issue:`6052`)\n\n* The ``noexcept`` warnings could be misleading in some cases.\n  Patch by Gonzalo Tornaría.  (Github issue :issue:`6087`)\n\n* The ``@cython.ufunc`` implementation could generate incomplete C code.\n  (Github issue :issue:`6064`)\n\n* The ``libcpp.complex`` declarations could result in incorrect C++ code.\n  Patch by Raffi Enficiaud.  (Github issue :issue:`6037`)\n\n* Several tests were adapted to work with both NumPy 1.x and 2.0.\n  Patch by Matti Picus.  (Github issues :issue:`6076`, :issue:`6100`)\n\n* C compiler warnings when the freelist implementation is disabled (e.g. on PyPy) were fixed.\n  It can now be disabled explicitly with the C macro guard ``CYTHON_USE_FREELISTS=0``.\n  (Github issue :issue:`6099`)\n\n* Some C macro guards for feature flags were missing from the NOGIL Python configuration.\n\n* Some recently added builtins were unconditionally looked up at module import time\n  (if used by user code) that weren't available on all Python versions and could thus\n  fail the import.\n\n* A performance hint regarding exported pxd declarations was improved.\n  (Github issue :issue:`6001`)\n\n\n3.0.9 (2024-03-05)\n==================\n\nFeatures added\n--------------\n\n* Assigning ``const`` values to non-const variables now issues a warning.\n  (Github issue :issue:`5639`)\n\n* Using ``noexcept`` on a function returning Python objects now issues a warning.\n  (Github issue :issue:`5661`)\n\n* Some C-API usage was updated for the upcoming CPython 3.13.\n  Patches by Victor Stinner et al.  (Github issues :issue:`6003`, :issue:`6020`)\n\n* The deprecated ``Py_UNICODE`` type is no longer used, unless required by user code.\n  (Github issue :issue:`5982`)\n\n* ``std::string.replace()`` declarations were added to libcpp.string.\n  Patch by Kieran Geary.  (Github issue :issue:`6037`)\n\nBugs fixed\n----------\n\n* Cython generates incorrect (but harmless) self-casts when directly calling\n  final methods of subtypes.  Lacking a better solution, the errors that recent\n  gcc versions produce have been silenced for the time being.\n  Original patch by Michał Górny.  (Github issue :issue:`2747`)\n\n* Unused variable warnings about clineno were fixed when C lines in tracebacks are disabled.\n  (Github issue :issue:`6035`)\n\n* Subclass deallocation of extern classes could crash if the base class uses GC.\n  Original patch by Jason Fried.  (Github issue :issue:`5971`)\n\n* Type checks for Python ``memoryview`` could use an invalid C function.\n  Patch by Xenia Lu.  (Github issue :issue:`5988`)\n\n* Calling final fused functions could generate invalid C code.\n  (Github issue :issue:`5989`)\n\n* Declaring extern enums multiple times could generate invalid C code.\n  (Github issue :issue:`5905`)\n\n* ``pyximport`` used relative paths incorrectly.\n  Patch by Stefano Rivera.  (Github issue :issue:`5957`)\n\n* Running Cython with globbing characters (``[]*?``) in the module search path could fail.\n  Patch by eewanco.  (Github issue :issue:`5942`)\n\n* Literal strings that include braces could change the C code indentation.\n\nOther changes\n-------------\n\n* The \"enum class not importable\" warning is now only issued once per enum type.\n  (Github issue :issue:`5941`)\n\n\n3.0.8 (2024-01-10)\n==================\n\nBugs fixed\n----------\n\n* Using ``const`` together with defined fused types could fail to compile.\n  (Github issue :issue:`5230`)\n\n* A \"use after free\" bug was fixed in parallel sections.\n  (Github issue :issue:`5922`)\n\n* Several types were not available as ``cython.*`` types in pure Python code.\n\n* The generated code is now correct C89 again, removing some C++ style ``//`` comments\n  and C99-style declaration-after-code code ordering.  This is still relevant for some\n  ols C compilers, specifically ones that match old Python 2.7 installations.\n\n\n3.0.7 (2023-12-19)\n==================\n\nBugs fixed\n----------\n\n* In the iterator of generator expressions, ``await`` and ``yield`` were not correctly analysed.\n  (Github issue :issue:`5851`)\n\n* ``cpdef`` enums with the same name cimported from different modules could lead to\n  invalid C code.\n  (Github issue :issue:`5887`)\n\n* Some declarations in ``cpython.unicode`` were fixed and extended.\n  (Github issue :issue:`5902`)\n\n* Compiling fused types used in pxd files could crash Cython in Python 3.11+.\n  (Github issues :issue:`5894`,  :issue:`5588`)\n\n* Source files with non-ASCII file names could crash Cython.\n  (Github issue :issue:`5873`)\n\n* Includes all bug-fixes and features from the 0.29 maintenance branch\n  up to the :ref:`0.29.37` release.\n\n\n3.0.6 (2023-11-26)\n==================\n\nFeatures added\n--------------\n\n* Fused def function dispatch is a bit faster.\n\n* Declarations for the ``wchar`` PyUnicode API were added.\n  (Github issue :issue:`5836`)\n\n* The Python \"nogil\" fork is now also detected with the new ``Py_GIL_DISABLED`` macro.\n  Patch by Hugo van Kemenade.  (Github issue :issue:`5852`)\n\nBugs fixed\n----------\n\n* Comparing dataclasses could give different results than Python.\n  (Github issue :issue:`5857`)\n\n* ``float(std::string)`` generated invalid C code.\n  (Github issue :issue:`5818`)\n\n* Using ``cpdef`` functions with ``cimport_from_pyx`` failed.\n  (Github issue :issue:`5795`)\n\n* A crash was fixed when string-formatting a Python value fails.\n  (Github issue :issue:`5787`)\n\n* On item access, Cython could try the sequence protocol before the mapping protocol\n  in some cases if an object supports both.\n  (Github issue :issue:`5776`)\n\n* A C compiler warning was resolved.\n  (Github issue :issue:`5794`)\n\n* Complex numbers failed to compile in MSVC with C11.\n  Patch by Lysandros Nikolaou.  (Github issue :issue:`5809`)\n\n* Some issues with the Limited API and with PyPy were resolved.\n  (Github issues :issue:`5695`, :issue:`5696`)\n\n* A C++ issue in Python 3.13 was resolved.\n  (Github issue :issue:`5790`)\n\n* Several directives are now also available (as no-ops) in Python code.\n  (Github issue :issue:`5803`)\n\n* An error message was corrected.\n  Patch by Mads Ynddal.  (Github issue :issue:`5805`)\n\n\n3.0.5 (2023-10-31)\n==================\n\nFeatures added\n--------------\n\n* Preliminary support for CPython 3.13a1 was added to allow early testing.\n  (Github issue :issue:`5767`)\n\nBugs fixed\n----------\n\n* A compiler crash was fixed.\n  (Github issue :issue:`5771`)\n\n* A typo in the ``always_allow_keywords`` directive for Python code was fixed.\n  Patch by lk-1984.  (Github issue :issue:`5772`)\n\n* Some C compiler warnings were resolved.\n  Patch by Pierre Jolivet.  (Github issue :issue:`5780`)\n\n\n3.0.4 (2023-10-17)\n==================\n\nFeatures added\n--------------\n\n* A new compiler directive ``show_performance_hints`` was added to disable the\n  newly added performance hint output.\n  (Github issue :issue:`5748`)\n\nBugs fixed\n----------\n\n* ```cythonize` required ``distutils`` even for operations that did not build binaries.\n  (Github issue :issue:`5751`)\n\n* A regression in 3.0.3 was fixed that prevented calling inline functions\n  from another inline function in ``.pxd`` files.\n  (Github issue :issue:`5748`)\n\n* Some C compiler warnings were resolved.\n  Patch by Pierre Jolivet.  (Github issue :issue:`5756`)\n\n\n3.0.3 (2023-10-05)\n==================\n\nFeatures added\n--------------\n\n* More warnings were added to help users migrate and avoid bugs.\n  (Github issue :issue:`5650`)\n\n* A warning-like category for performance hints was added that bypasses ``-Werror``.\n  (Github issue :issue:`5673`)\n\n* FastGIL now uses standard ``thread_local`` in C++.\n  (Github issue :issue:`5640`)\n\n* ``reference_wrapper`` was added to ``libcpp.functional``.\n  Patch by Vyas Ramasubramani.  (Github issue :issue:`5671`)\n\n* The ``cythonize`` command now supports the ``--cplus`` option known from the ``cython`` command.\n  (Github issue :issue:`5736`)\n\nBugs fixed\n----------\n\n* Performance regressions where the GIL was needlessly acquired were fixed.\n  (Github issues :issue:`5670`, :issue:`5700`)\n\n* A reference leak for exceptions in Python 3.12 was resolved.\n  Patch by Eric Johnson.  (Github issue :issue:`5724`)\n\n* ``fastcall`` calls with keyword arguments generated incorrect C code.\n  (Github issue :issue:`5665`)\n\n* Assigning the type converted result of a conditional (if-else) expression\n  to ``int`` or ``bool`` variables could lead to incorrect C code.\n  (Github issue :issue:`5731`)\n\n* Early (unlikely) failures in Python function wrappers no longer set a\n  traceback in order to simplify the C code flow.  Being mostly memory\n  allocation errors, they probably would never have created a traceback anyway.\n  (Github issue :issue:`5681`)\n\n* Relative cimports from packages with ``__init__.py`` files could fail.\n  (Github issue :issue:`5715`)\n\n* Several issues with the Limited API support were resolved.\n  (Github issues :issue:`5641`, :issue:`5648`, :issue:`5689`)\n\n* The code generated for special-casing both Cython functions and PyCFunctions was cleaned up\n  to avoid calling C-API functions that were not meant for the other type respectively.\n  This could previously trigger assertions in CPython debug builds and now also plays better\n  with the Limited API.\n  (Github issues :issue:`4804`, :issue:`5739`)\n\n* Fix some C compiler warnings.\n  Patches by Ralf Gommers, Oleksandr Pavlyk, Sebastian Koslowski et al.\n  (Github issues :issue:`5651`, :issue:`5663`, :issue:`5668`, :issue:`5717`, :issue:`5726`, :issue:`5734`)\n\n* Generating gdb debugging information failed when using generator expressions.\n  Patch by Oleksandr Pavlyk.  (Github issue :issue:`5552`)\n\n* Passing a ``setuptools.Extension`` into ``cythonize()`` instead of a\n  ``distutils.Extension`` could make it miss the matching extensions.\n\n* ``cython -M`` needlessly required ``distutils``, which made it fail in Python 3.12.\n  (Github issue :issue:`5681`)\n\nOther changes\n-------------\n\n* The visible deprecation warning for ``DEF`` was removed again since it proved\n  difficult for some users to migrate away from it.  The statement is still\n  meant to be removed at some point (and thus, like ``IF``, should not be\n  used in new code), but the time for sunset is probably not around the corner.\n  (Github issue :issue:`4310`)\n\n* The ``np_pythran`` option raise a ``DeprecationWarning`` if it receives other values\n  than ``True`` and ``False``.  This will eventually be disallowed (in line with all\n  other boolean options).\n\n\n3.0.2 (2023-08-27)\n==================\n\nBugs fixed\n----------\n\n* Using ``None`` as default value for arguments annotated as ``int`` could crash Cython.\n  (Github issue :issue:`5643`)\n\n* Default values of fused types that include ``complex`` could generate invalid C code\n  with ``-DCYTHON_CCOMPLEX=0``.\n  (Github issue :issue:`5644`)\n\n* Using C++ enum class types in extension type method signatures could generate invalid C code.\n  (Github issue :issue:`5637`)\n\n\n3.0.1 (2023-08-25)\n==================\n\nFeatures added\n--------------\n\n* The error messages regarding exception declarations were improved in order to give\n  better help about possible reasons and fixes.\n  (Github issue :issue:`5547`)\n\nBugs fixed\n----------\n\n* Memory view types in Python argument annotations no longer accept ``None``.  They now\n  require an explicit ``Optional[]`` or a ``None`` default value in order to allow ``None``\n  to be passed.  This was an oversight in the 3.0.0 release and is a BACKWARDS INCOMPATIBLE\n  change.  However, since it only applies to code using Python syntax, it probably only\n  applies to newly written code that was written for Cython 3.0 and can easily be adapted.\n  In most cases, we expect that this change will avoid bugs in user code rather than\n  produce problems.\n  (Github issue :issue:`5612`)\n\n* ``nogil`` functions using parallel code could freeze when called with the GIL held.\n  (Github issues :issue:`5564`, :issue:`5573`)\n\n* Relative cimports could end up searching globally and find the same package installed\n  elsewhere, potentially in another version.\n  (Github issue :issue:`5511`)\n\n* Attribute lookups on known standard library modules could accidentally search\n  in the module namespace instead.\n  (Github issue :issue:`5536`)\n\n* Using constructed C++ default arguments could generate invalid C++ code.\n  (Github issue :issue:`5553`)\n\n* ``libcpp.memory.make_unique()`` was lacking C++ exception handling.\n  (Github issue :issue:`5560`)\n\n* Some non-public and deprecated CAPI usages were replaced by public\n  (and thus more future proof) API code.\n\n* Many issues with the Limited API support were resolved.\n  Patches by Lisandro Dalcin et al.\n  (Github issues :issue:`5549`, :issue:`5550`, :issue:`5556`, :issue:`5605`, :issue:`5617`)\n\n* Some C compiler warnings were resolved.\n  Patches by Matti Picus et al.  (Github issues :issue:`5557`, :issue:`5555`)\n\n* Large Python integers are now stored in hex instead of decimal strings to work around\n  security limits in Python and generally speed up their Python object creation.\n\n* ``NULL`` could not be used as default for fused type pointer arguments.\n  (Github issue :issue:`5554`)\n\n* C functions that return pointer types now return ``NULL`` as default exception value.\n  Previously, calling code wasn't aware of this and always tested for raised exceptions.\n  (Github issue :issue:`5554`)\n\n* Untyped literal default arguments in fused functions could generate invalid C code.\n  (Github issue :issue:`5614`)\n\n* C variables declared as ``const`` could generate invalid C code when used in closures,\n  generator expressions, ctuples, etc.\n  (Github issues :issue:`5558`,  :issue:`5333`)\n\n* Enums could not refer to previously defined enums in their definition.\n  (Github issue :issue:`5602`)\n\n* The Python conversion code for anonymous C enums conflicted with regular int conversion.\n  (Github issue :issue:`5623`)\n\n* Using memory views for property methods (and other special methods) could lead to\n  refcounting problems.\n  (Github issue :issue:`5571`)\n\n* Star-imports could generate code that tried to assign to constant C macros like\n  ``PY_SSIZE_T_MAX`` and ``PY_SSIZE_T_MIN``.\n  Patch by Philipp Wagner.  (Github issue :issue:`5562`)\n\n* ``CYTHON_USE_TYPE_SPECS`` can now be (explicitly) enabled in PyPy.\n\n* The template parameter \"delimeters\" in the Tempita ``Template`` class was corrected\n  to \"delimiters\".  The old spelling is still available in the main template API but\n  now issues a ``DeprecationWarning``.\n  (Github issue :issue:`5608`)\n\n* The ``cython --version`` output is now  less likely to reach both stdout and stderr.\n  Patch by Eli Schwartz.  (Github issue :issue:`5504`)\n\n* The sdist was missing the `Shadow.pyi` stub file.\n\n\n3.0.0 unified release notes\n===========================\n\nCython 3.0.0 has been a very large effort that cleaned up many old warts,\nintroduced many new features, and introduces a couple of intentional\nbehaviour changes, even though the goal remained to stay compatible as\nmuch as possible with Cython 0.29.x. For details, see the `migration guide`_.\n\n.. _`migration guide`: https://cython.readthedocs.io/en/latest/src/userguide/migrating_to_cy30.html\n\nAs the development was spread out over several years, a lot of things have\nhappened in the meantime. Many crucial bugfixes and some features were\nbackported to 0.29.x and are not strictly speaking \"new\" in Cython 3.0.0.\n\nMajor themes in 3.0.0\n=====================\n\nCompatibility with CPython and the Python C API\n-----------------------------------------------\n\nSince Cython 3.0.0 started development, CPython 3.8-3.11 were released.\nAll these are supported in Cython, including experimental support for the\nin-development CPython 3.12. On the other end of the spectrum, support for\nPython 2.6 was dropped.\n\nCython interacts very closely with the C-API of Python, which is where most\nof the adaptation work happens.\n\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n  and ``cpython.*`` pxd modules instead.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n\n* The ``Py_hash_t`` type failed to accept arbitrary \"index\" values.\n  (Github issue :issue:`2752`)\n\n* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n\n* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n\n* A low-level inline function ``total_seconds(timedelta)`` was added to\n  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n  is not guaranteed to give exactly the same results for very large time intervals.\n  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n\n* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n\n* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n  Patch by John Kirkham.  (Github issue :issue:`3811`)\n\n* A new module ``cpython.time`` was added with some low-level alternatives to\n  Python's ``time`` module.\n  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n\n* More C-API declarations for ``cpython.datetime``  were added.\n  Patch by Bluenix2.  (Github issue :issue:`4128`)\n\n* C-API declarations for context variables in Python 3.7 were added.\n  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n\n* C-API declarations for ``cpython.fileobject`` were added.\n  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n\n* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n  to match the signature in Py3.  It still has an automatic fallback for Py2.\n  (Github issue :issue:`3909`)\n\n* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n  macros were not considered safe.\n  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n\n* The runtime size check for imported ``PyVarObject`` types was improved\n  to reduce false positives and adapt to Python 3.11.\n  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n\n* The generated C code failed to compile in CPython 3.11a4 and later.\n  (Github issue :issue:`4500`)\n\n* ``pyximport`` no longer uses the deprecated ``imp`` module.\n  Patch by Matúš Valo.  (Github issue :issue:`4560`)\n\n* Improvements to ``PyTypeObject`` definitions in pxd wrapping of libpython.\n  Patch by John Kirkham. (Github issue :issue:`4699`)\n\n* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n\n* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n\n* Several problems with CPython 3.12 were resolved.\n  (Github issue :issue:`5238`)\n\n* The exception handling code was adapted to CPython 3.12.\n  (Github issue :issue:`5442`)\n\n* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n  internals in CPython 3.12.\n  (Github issue :issue:`5353`)\n\n* A compile error when using ``__debug__`` was resolved.\n\n* The deprecated ``_PyGC_FINALIZED()`` C-API macro is no longer used.\n  Patch by Thomas Caswell and Matúš Valo.  (Github issue :issue:`5481`)\n\n* A crash in Python 2.7 was fixed when cleaning up extension type instances\n  at program end.\n\n\nCompatibility with other Python implementations\n-----------------------------------------------\n\nCython tries to support other Python implementations, largely on a best-effort\nbasis. The most advanced support exists for PyPy, which is tested in our CI\nand considered supported.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* An unsupported C-API call in PyPy was fixed.\n  Patch by Max Bachmann.  (Github issue :issue:`4055`)\n\n* Support for the now unsupported Pyston V1 was removed in favour of Pyston V2.\n  Patch by Marius Wachtler.  (Github issue :issue:`4211`)\n\n* A C compiler warning in PyPy3 regarding ``PyEval_EvalCode()`` was resolved.\n\n* Some compatibility issues with PyPy were resolved.\n  Patches by Max Bachmann, Matti Picus.\n  (Github issues :issue:`4454`, :issue:`4477`, :issue:`4478`, :issue:`4509`, :issue:`4517`)\n\n* An initial set of adaptations for GraalVM Python was implemented.  Note that\n  this does not imply any general support for this target or that your code\n  will work at all in this environment.  But testing should be possible now.\n  Patch by David Woods.  (Github issue :issue:`4328`)\n\n* A work-around for StacklessPython < 3.8 was disabled in Py3.8 and later.\n  (Github issue :issue:`4329`)\n\n\nInitial support for Limited API\n-------------------------------\n\nCPython provides a stable, limited subset of its C-API as the so-called Limited API.\nThis C-API comes with the guarantee of a stable ABI, meaning that extensions modules\nthat were compiled for one version of CPython can also be imported in later versions\nwithout recompilation.\n\nThere is initial support for this in Cython.  By defining the ``CYTHON_LIMITED_API``\nmacro, Cython cuts down its C-API usage and tries to adhere to the Limited C-API,\nprobably at the cost of a bit of performance.\nIn order to get full benefit from the limited API you will also need to define the\nCPython macro ``Py_LIMITED_API`` to a specific CPython compatibility version,\nwhich additionally restricts the C-API during the C compilation,\nthus enforcing the forward compatibility of the extension module.\n\nNote that \"initial support\" in Cython really means that setting the ``Py_LIMITED_API``\nmacro will almost certainly not yet work for your specific code.\nThere are limitations in the Limited C-API\nthat are difficult for Cython to generate C code for, so some advanced Python features\n(like async code) may not lead to C code that cannot adhere to the Limited C-API, or\nwhere Cython simply does not know yet how to adhere to it.  Basically, if you get your\ncode to compile with both macros set, and it passes your test suite, then it should be\npossible to import the extension module also in later CPython versions.\n\nThe experimental feature flags ``CYTHON_USE_MODULE_STATE`` and\n``CYTHON_USE_TYPE_SPECS`` enable some individual aspects of the Limited API\nimplementation independently.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n  support is currently in an early stage and many features do not yet work.\n  You currently still have to define ``Py_LIMITED_API`` externally in order\n  to restrict the API usage.  This will change when the feature stabilises.\n  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n  :issue:`3311`, :issue:`3501`)\n\n* Limited API support was improved.\n  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n\n* New C feature flags: ``CYTHON_USE_MODULE_STATE``, ``CYTHON_USE_TYPE_SPECS``\n  Both are currently considered experimental.\n  (Github issue :issue:`3611`)\n\n* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n  Patch by David Woods.  (Github issue :issue:`4453`)\n\n* Limited API C preprocessor warning is compatible with MSVC. Patch by\n  Victor Molina Garcia.  (Github issue :issue:`4826`)\n\n* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n  API instead on CPython versions that support it (3.8+).\n  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n\n* Some C code issue were resolved for the Limited API target.\n  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n\n* Conversion of Python ints to C ``int128`` is now always supported, although slow\n  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n  the Limited C-API.\n  (Github issue :issue:`5419`)\n\n* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n\n\nImproved fidelity to Python semantics\n-------------------------------------\n\nImplemented PEPs\n^^^^^^^^^^^^^^^^\n\n* `PEP-3131`_: Supporting Non-ASCII Identifiers (Github issue :issue:`2601`)\n* `PEP-479`_: `generator_stop` (enabled by default for `language_level=3`) (Github issue :issue:`2580`)\n* `PEP-487`_: Simpler customisation of class creation (Github issue :issue:`2781`)\n* `PEP-563`_: Postponed Evaluation of Annotations (Github issue :issue:`3285`)\n* `PEP-570`_: Positional-Only Parameters (Github issue :issue:`2915`)\n* `PEP-572`_: Assignment Expressions (a.k.a. the walrus operator `:=`) (Github issue :issue:`2636`)\n* `PEP-590`_: Vectorcall protocol (Github issue :issue:`2263`)\n* `PEP-614`_: Relaxing Grammar Restrictions On Decorators (Github issue :issue:`4570`)\n\nTyping support in the sense of `PEP-484`_ (Github issues :issue:`3949`, :issue:`4243`)\nand `PEP-560`_ (Github issues :issue:`2753`, :issue:`3537`, :issue:`3764`) was also improved.\n\n.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n.. _`PEP-484`: https://www.python.org/dev/peps/pep-0484\n.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n.. _`PEP-572`: https://www.python.org/dev/peps/pep-0572\n.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n.. _`PEP-614`: https://www.python.org/dev/peps/pep-0614\n\nThe default language level was changed to ``3str``, i.e. Python 3 semantics,\nbut with ``str`` literals (also in Python 2.7).  This is a backwards incompatible\nchange from the previous default of Python 2 semantics.  The previous behaviour\nis available through the directive ``language_level=2``.\n(Github issue :issue:`2565`).  This covers changes such as using the\n``print``-function instead of the ``print``-statement, and integer-integer\ndivision giving a floating point answer. Most of these changes were available\nin earlier versions of Cython but are now the default.\n\nCython 3.0.0 also aligns its own language semantics more closely with Python, in particular:\n\n* the power operator has changed to give a result matching what Python does rather than\n  keeping the same types as the input (as in C),\n* operator overloading of ``cdef classes`` behaves much more like Python classes,\n* Cython's behaviour when using type annotations aligns more closely with their\n  standard use in Python.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* Cython no longer generates ``__qualname__`` attributes for classes in Python\n  2.x since they are problematic there and not correctly maintained for subclasses.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2772`)\n\n* Binding staticmethods of Cython functions were not behaving like Python methods.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`3106`, :issue:`3102`)\n\n* Compiling package ``__init__`` files could fail under Windows due to an\n  undefined export symbol.  (Github issue :issue:`2968`)\n\n* ``__init__.pyx`` files were not always considered as package indicators.\n  (Github issue :issue:`2665`)\n\n* Setting ``language_level=2`` in a file did not work if ``language_level=3``\n  was enabled globally before.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2791`)\n\n* ``__doc__`` was not available inside of the class body during class creation.\n  (Github issue :issue:`1635`)\n\n* The first function line number of functions with decorators pointed to the\n  signature line and not the first decorator line, as in Python.\n  Patch by Felix Kohlgrüber.  (Github issue :issue:`2536`)\n\n* Pickling unbound methods of Python classes failed.\n  Patch by Pierre Glaser.  (Github issue :issue:`2972`)\n\n* Item access (subscripting) with integer indices/keys always tried the\n  Sequence protocol before the Mapping protocol, which diverged from Python\n  semantics.  It now passes through the Mapping protocol first when supported.\n  (Github issue :issue:`1807`)\n\n* Nested dict literals in function call kwargs could incorrectly raise an\n  error about duplicate keyword arguments, which are allowed when passing\n  them from dict literals.\n  (Github issue :issue:`2963`)\n\n* Diverging from the usual behaviour, ``len(memoryview)``, ``len(char*)``\n  and ``len(Py_UNICODE*)`` returned an unsigned ``size_t`` value.  They now\n  return a signed ``Py_ssize_t``, like other usages of ``len()``.\n\n* The unicode methods ``.upper()``, ``.lower()`` and ``.title()`` were\n  incorrectly optimised for single character input values and only returned\n  the first character if multiple characters should have been returned.\n  They now use the original Python methods again.\n\n* The ``cython.view.array`` type supports inheritance.\n  Patch by David Woods.  (Github issue :issue:`3413`)\n\n* The builtin ``abs()`` function can now be used on C numbers in nogil code.\n  Patch by Elliott Sales de Andrade.  (Github issue :issue:`2748`)\n\n* The attributes ``gen.gi_frame`` and ``coro.cr_frame`` of Cython compiled\n  generators and coroutines now return an actual frame object for introspection.\n  (Github issue :issue:`2306`)\n\n* Inlined properties can be defined for external extension types.\n  Patch by Matti Picus. (Github issue :issue:`2640`, redone later in :issue:`3571`)\n\n* Unicode module names and imports are supported.\n  Patch by David Woods.  (Github issue :issue:`3119`)\n\n* ``__arg`` argument names in methods were not mangled with the class name.\n  Patch by David Woods.  (Github issue :issue:`1382`)\n\n* With ``language_level=3/3str``, Python classes without explicit base class\n  are now new-style (type) classes also in Py2.  Previously, they were created\n  as old-style (non-type) classes.\n  (Github issue :issue:`3530`)\n\n* Conditional blocks in Python code that depend on ``cython.compiled`` are\n  eliminated at an earlier stage, which gives more freedom in writing\n  replacement Python code.\n  Patch by David Woods.  (Github issue :issue:`3507`)\n\n* Python private name mangling now falls back to unmangled names for non-Python\n  globals, since double-underscore names are not uncommon in C.  Unmangled Python\n  names are also still found as a legacy fallback but produce a warning.\n  Patch by David Woods.  (Github issue :issue:`3548`)\n\n* The ``print`` statement (not the ``print()`` function) is allowed in\n  ``nogil`` code without an explicit ``with gil`` section.\n\n* ``repr()`` was assumed to return ``str`` instead of ``unicode`` with ``language_level=3``.\n  (Github issue :issue:`3736`)\n\n* Type inference now understands that ``a, *b = x`` assigns a list to ``b``.\n\n* No/single argument functions now accept keyword arguments by default in order\n  to comply with Python semantics.  The marginally faster calling conventions\n  ``METH_NOARGS`` and ``METH_O`` that reject keyword arguments are still available\n  with the directive ``@cython.always_allow_keywords(False)``.\n  (Github issue :issue:`3090`)\n\n* Special methods for binary operators now follow Python semantics.\n  Rather than e.g. a single ``__add__`` method for cdef classes, where\n  \"self\" can be either the first or second argument, one can now define\n  both ``__add__`` and ``__radd__`` as for standard Python classes.\n  This behavior can be disabled with the ``c_api_binop_methods`` directive\n  to return to the previous semantics in Cython code (available from Cython\n  0.29.20), or the reversed method (``__radd__``) can be implemented in\n  addition to an existing two-sided operator method (``__add__``) to get a\n  backwards compatible implementation.\n  (Github issue :issue:`2056`)\n\n* Generator expressions in pxd-overridden ``cdef`` functions could\n  fail to compile.\n  Patch by Matúš Valo.  (Github issue :issue:`3477`)\n\n* Calls to ``.__class__()`` of a known extension type failed.\n  Patch by David Woods.  (Github issue :issue:`3954`)\n\n* Structs could not be instantiated with positional arguments in\n  pure Python mode.\n\n* Annotations were not exposed on annotated (data-)classes.\n  Patch by matsjoyce.  (Github issue :issue:`4151`)\n\n* Docstrings of ``cpdef`` enums are now copied to the enum class.\n  Patch by matham.  (Github issue :issue:`3805`)\n\n* ``asyncio.iscoroutinefunction()`` now recognises coroutine functions\n  also when compiled by Cython.\n  Patch by Pedro Marques da Luz.  (Github issue :issue:`2273`)\n\n* Self-documenting f-strings (``=``) were implemented.\n  Patch by davfsa.  (Github issue :issue:`3796`)\n\n* ``cython.array`` supports simple, non-strided views.\n  (Github issue :issue:`3775`)\n\n* Attribute annotations in Python classes are now ignored, because they are\n  just Python objects in a dict (as opposed to the fields of extension types).\n  Patch by David Woods.  (Github issues :issue:`4196`, :issue:`4198`)\n\n* A warning was added when ``__defaults__`` or ``__kwdefaults__`` of Cython compiled\n  functions were re-assigned, since this does not current have an effect.\n  Patch by David Woods.  (Github issue :issue:`2650`)\n\n* The ``self`` argument of static methods in .pxd files was incorrectly typed.\n  Patch by David Woods.  (Github issue :issue:`3174`)\n\n* Default values for memory views arguments were not properly supported.\n  Patch by Corentin Cadiou.  (Github issue :issue:`4313`)\n\n* Python object types were not allowed as ``->`` return type annotations.\n  Patch by Matúš Valo.  (Github issue :issue:`4433`)\n\n* The excess arguments in a for-in-range loop with more than 3 arguments to `range()`\n  were silently ignored.\n  Original patch by Max Bachmann. (Github issue :issue:`4550`)\n\n* Unsupported decorators on cdef functions were not rejected in recent releases.\n  Patch by David Woods.  (Github issue :issue:`4322`)\n\n* Fused functions were binding unnecessarily, which prevented them from being pickled.\n  Patch by David Woods.  (Github issue :issue:`4370`)\n\n* Decorators on inner functions were not evaluated in the right scope.\n  Patch by David Woods.  (Github issue :issue:`4367`)\n\n* Cython did not type the ``self`` argument in special binary methods.\n  Patch by David Woods.  (Github issue :issue:`4434`)\n\n* Circular imports of compiled modules could fail needlessly even when the import\n  could already be resolved from ``sys.modules``.\n  Patch by Syam Gadde.  (Github issue :issue:`4390`)\n\n* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n  Original patch by ax487.  (Github issue :issue:`3612`)\n\n* Reusing an extension type attribute name as a method name is now an error.\n  Patch by 0dminnimda.  (Github issue :issue:`4661`)\n\n* When using type annotations, ``func(x: list)`` or ``func(x: ExtType)`` (and other\n  Python builtin or extension types) no longer allow ``None`` as input argument to ``x``.\n  This is consistent with the normal typing semantics in Python, and was a common gotcha\n  for users who did not expect ``None`` to be allowed as input.  To allow ``None``, use\n  ``typing.Optional`` as in ``func(x: Optional[list])``.  ``None`` is also automatically\n  allowed when it is used as default argument, i.e. ``func(x: list = None)``.\n  ``int`` and ``float`` are now also recognised in type annotations and restrict the\n  value type at runtime.  They were previously ignored.\n  Note that, for backwards compatibility reasons, the new behaviour does not apply when using\n  Cython's C notation, as in ``func(list x)``.  Here, ``None`` is still allowed, as always.\n  Also, the ``annotation_typing`` directive can now be enabled and disabled more finely\n  within the module.\n  (Github issues :issue:`2696`, :issue:`3883`, :issue:`4606`, :issue:`4669`, :issue:`4886`)\n\n* The parser allowed some invalid spellings of ``...``.\n  Patch by 0dminnimda.  (Github issue :issue:`4868`)\n\n* The ``__self__`` attribute of fused functions reports its availability correctly\n  with ``hasattr()``.  Patch by David Woods.\n  (Github issue :issue:`4808`)\n\n* Several optimised string methods failed to accept ``None`` as arguments to their options.\n  Test patch by Kirill Smelkov.  (Github issue :issue:`4737`)\n\n* Cython generators and coroutines now identify as ``CO_ASYNC_GENERATOR``,\n  ``CO_COROUTINE`` and ``CO_GENERATOR`` accordingly.\n  (Github issue :issue:`4902`)\n\n* Memory views and the internal Cython array type now identify as ``collections.abc.Sequence``.\n  Patch by David Woods.  (Github issue :issue:`4817`)\n\n* Context managers can be written in parentheses.\n  Patch by David Woods.  (Github issue :issue:`4814`)\n\n* Some parser issues were resolved.\n  (Github issue :issue:`4992`)\n\n* Unused ``**kwargs`` arguments did not show up in ``locals()``.\n  (Github issue :issue:`4899`)\n\n* Relative imports failed in compiled ``__init__.py`` package modules.\n  Patch by Matúš Valo.  (Github issue :issue:`3442`)\n\n* Extension types are now explicitly marked as immutable types to prevent them from\n  being considered mutable.\n  Patch by Max Bachmann.  (Github issue :issue:`5023`)\n\n* ``int(Py_UCS4)`` returned the code point instead of the parsed digit value.\n  (Github issue :issue:`5216`)\n\n* Calling bound classmethods of builtin types could fail trying to call the unbound method.\n  (Github issue :issue:`5051`)\n\n* Generator expressions and comprehensions now look up their outer-most iterable\n  on creation, as Python does, and not later on start, as they did previously.\n  (Github issue :issue:`1159`)\n\n* Bound C methods can now coerce to Python objects.\n  (Github issues :issue:`4890`, :issue:`5062`)\n\n* ``cpdef`` enums can now be pickled.\n  (Github issue :issue:`5120`)\n\n* The Python Enum of a ``cpdef enum`` now inherits from ``IntFlag`` to better match\n  both Python and C semantics of enums.\n  (Github issue :issue:`2732`)\n\n* The special ``__*pow__`` methods now support the 2- and 3-argument variants.\n  (Github issue :issue:`5160`)\n\n* The ``**`` power operator now behaves more like in Python by returning the correct complex\n  result if required by math.  A new ``cpow`` directive was added to turn on the previous\n  C-like behaviour.\n  (Github issue :issue:`4936`)\n\n* With ``language_level=2``, imports of modules in packages could return the wrong module in Python 3.\n  (Github issue :issue:`5308`)\n\n* Function signatures containing a type like `tuple[()]` could not be printed.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5355`)\n\n* ``__qualname__`` and ``__module__`` were not available inside of class bodies.\n  (Github issue :issue:`4447`)\n\n* A new directive ``embedsignature.format`` was added to select the format of the\n  docstring embedded signatures between ``python``, ``c`` and argument ``clinic``.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5415`)\n\n* ctuples can now be assigned from arbitrary sequences, not just Python tuples.\n\n\nImprovements in Pure Python mode\n--------------------------------\n\nCython strives to be able to\nparse newer Python constructs for use with its `pure python`_ mode, which\nhas been a focus. In short, this allows to compile a wider range of Python\ncode into optimized C code.\n\n.. _`pure python`: https://cython.readthedocs.io/en/latest/src/tutorial/pure.html\n\nPure python mode gained many new features and was generally overhauled to make\nit as capable as the Cython syntax.  Except for using external C/C++ libraries,\nit should now be possible to express all Cython code and use all features in\nregular Python syntax.  The very few remaining exceptions or bugs are noted in\nthe documentation.\n\nAdditionally, the documentation has been substantially updated\n(primarily by Matúš Valo and 0dminnimda) to show both the older Cython syntax\nand pure Python syntax.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* The ``cython.declare()`` and ``cython.cast()`` functions could fail in pure mode.\n  Patch by Dmitry Shesterkin.  (Github issue :issue:`3244`)\n\n* Fused argument types were not correctly handled in type annotations and\n  ``cython.locals()``.\n  Patch by David Woods.  (Github issues :issue:`3391`, :issue:`3142`)\n\n* ``nogil`` functions now avoid acquiring the GIL on function exit if possible\n  even if they contain ``with gil`` blocks.\n  (Github issue :issue:`3554`)\n\n* The ``@returns()`` decorator propagates exceptions by default for suitable C\n  return types when no ``@exceptval()`` is defined.\n  (Github issues :issue:`3625`, :issue:`3664`)\n\n* Extension types inheriting from Python classes could not safely\n  be exposed in ``.pxd``  files.\n  (Github issue :issue:`4106`)\n\n* Default arguments of methods were not exposed for introspection.\n  Patch by Vladimir Matveev.  (Github issue :issue:`4061`)\n\n* Literal list assignments to pointer variables declared in PEP-526\n  notation failed to compile.\n\n* The type ``cython.Py_hash_t`` is available in Python mode.\n\n* A ``cimport`` is now supported in pure Python code by prefixing the\n  imported module name with ``cython.cimports.``, e.g.\n  ``from cython.cimports.libc.math import sin``.\n  (GIthub issue :issue:`4190`)\n\n* Directives starting with ``optimization.*`` in pure Python mode were incorrectly named.\n  It should have been ``optimize.*``.\n  Patch by David Woods.  (Github issue :issue:`4258`)\n\n* Invalid and misspelled ``cython.*`` module names were not reported as errors.\n  (Github issue :issue:`4947`)\n\n* The ``annotation_typing`` directive was missing in pure Python mode.\n  Patch by 0dminnimda.  (Github issue :issue:`5194`)\n\n* Memoryviews with ``object`` item type were not supported in Python type declarations.\n  (Github issue :issue:`4907`)\n\n* Subscripted builtin types in type declarations (like ``list[float]``) are now\n  better supported.\n  (Github issue :issue:`5058`)\n\n* Unknown type annotations (e.g. because of typos) now emit a warning at compile time.\n  Patch by Matúš Valo.  (Github issue :issue:`5070`)\n\n* ``typing.Optional`` could fail on tuple types.\n  (Github issue :issue:`5263`)\n\n* ``from cython cimport … as …`` could lead to imported names not being found in annotations.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5235`)\n\n* Simple tuple types like ``(int, int)`` are no longer accepted in Python annotations\n  and require the Python notation instead (e.g. ``tuple[cython.int, cython.int]``).\n  (Github issue :issue:`5397`)\n\n* The Python implementation of ``cimport cython.cimports…`` could raise an ``ImportError``\n  instead of an ``AttributeError`` when looking up package variable names.\n  Patch by Matti Picus.  (Github issue :issue:`5411`)\n\n* A new decorator ``@cython.with_gil`` is available in Python code to match the ``with gil``\n  function declaration in Cython syntax.\n\n* ``with gil`` and ``with nogil(flag)`` now accept their flag argument also in Python code.\n  Patch by Matúš Valo.  (Github issue :issue:`5113`)\n\n\nCode generation changes\n-----------------------\n\nCython has gained several major new features that speed up both the development\nand the code. Dataclasses have gained an extension type equivalent that implements\nthe dataclass features in C code.  Similarly, the ``@functools.total_ordering``\ndecorator to an extension type will implement the comparison functions in C.\n\nFinally, NumPy ufuncs can be generated from simple computation functions with the\nnew ``@cython.ufunc`` decorator.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* ``with gil/nogil`` statements can be conditional based on compile-time\n  constants, e.g. fused type checks.\n  Patch by Noam Hershtig.  (Github issue :issue:`2579`)\n\n* The names of Cython's internal types (functions, generator, coroutine, etc.)\n  are now qualified with the module name of the internal Cython module that is\n  used for sharing them across Cython implemented modules, for example\n  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n  homeless builtins, to help with debugging, and in order to avoid a CPython\n  warning according to https://bugs.python.org/issue20204\n\n* A ``@cython.total_ordering`` decorator has been added to automatically\n  implement all comparison operators, similar to ``functools.total_ordering``.\n  Patch by Spencer Brown.  (Github issue :issue:`2090`)\n\n* A new decorator ``@cython.dataclasses.dataclass`` was implemented that provides\n  compile time dataclass generation capabilities to ``cdef`` classes (extension types).\n  Patch by David Woods.  (Github issue :issue:`2903`).  ``kw_only`` dataclasses\n  added by Yury Sokov.  (Github issue :issue:`4794`)\n\n* A new function decorator ``@cython.ufunc`` automatically generates a (NumPy) ufunc that\n  applies the calculation function to an entire memoryview.\n  (Github issue :issue:`4758`)\n\n* Generated NumPy ufuncs could crash for large arrays due to incorrect GIL handling.\n  (Github issue :issue:`5328`)\n\n* Some invalid directive usages are now detected and rejected, e.g. using ``@ccall``\n  together with ``@cfunc``, and applying ``@cfunc`` to a ``@ufunc``.  Cython also\n  warns now when a directive is applied needlessly.\n  (Github issue :issue:`5399` et al.)\n\n* The normal ``@dataclasses.dataclass`` and ``@functools.total_ordering`` decorators\n  can now be used on extension types.  Using the corresponding ``@cython.*`` decorator\n  will automatically turn a Python class into an extension type (no need for ``@cclass``).\n  (Github issue :issue:`5292`)\n\n\nInteraction with numpy\n----------------------\n\nThe NumPy declarations (``cimport numpy``) were moved over to the NumPy project in order\nto allow version specific changes on their side.\n\nOne effect is that Cython does not use deprecated NumPy C-APIs any more.  Thus, you\ncan define the respective NumPy C macro to get rid of the compatibility warning at\nC compile time.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* ``cython.inline()`` now sets the ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION``\n  C macro automatically when ``numpy`` is imported in the code, to avoid C compiler\n  warnings about deprecated NumPy C-API usage.\n\n* Deprecated NumPy API usages were removed from ``numpy.pxd``.\n  Patch by Matti Picus.  (Github issue :issue:`3365`)\n\n* ``numpy.import_array()`` is automatically called if ``numpy`` has been cimported\n  and it has not been called in the module code.  This is intended as a hidden\n  fail-safe so user code should continue to call ``numpy.import_array``.\n  Patch by David Woods.  (Github issue :issue:`3524`)\n\n* The outdated getbuffer/releasebuffer implementations in the NumPy\n  declarations were removed so that buffers declared as ``ndarray``\n  now use the normal implementation in NumPy.\n\n* Several macros/functions declared in the NumPy API are now usable without\n  holding the GIL.\n\n* The ``numpy`` declarations were updated.\n  Patch by Brock Mendel.  (Github issue :issue:`3630`)\n\n* ``ndarray.shape`` failed to compile with Pythran and recent NumPy.\n  Patch by Serge Guelton.  (Github issue :issue:`3762`)\n\n* A C-level compatibility issue with recent NumPy versions was resolved.\n  Patch by David Woods.  (Github issue :issue:`4396`)\n\n* The generated modules no longer import NumPy internally when using\n  fused types but no memoryviews.\n  Patch by David Woods.  (Github issue :issue:`4935`)\n\n* ``np.long_t`` and ``np.ulong_t`` were removed from the NumPy declarations,\n  syncing Cython with upstream NumPy v1.25.0.  The aliases were confusing\n  since they could mean different things on different platforms.\n\n\nException handling\n------------------\n\nCython-implemented C functions now propagate exceptions by default, rather than\nswallowing them in non-object returning function if the user forgot to add an\n``except`` declaration to the signature.  This was a long-standing source of bugs,\nbut can require adding the ``noexcept`` declaration to existing functions if\nexception propagation is really undesired.\n(Github issue :issue:`4280`)\n\nTo ease the transition for this break in behaviour, it is possible to set\n``legacy_implicit_noexcept=True``.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* The ``assert`` statement is allowed in ``nogil`` sections.  Here, the GIL is\n  only acquired if the ``AssertionError`` is really raised, which means that the\n  evaluation of the asserted condition only allows C expressions.\n\n* The exception handling annotation ``except +*`` was broken.\n  Patch by David Woods.  (Github issues :issue:`3065`, :issue:`3066`)\n\n* Improve conversion between function pointers with non-identical but\n  compatible exception specifications.  Patches by David Woods.\n  (Github issues :issue:`4770`, :issue:`4689`)\n\n* Exceptions within for-loops that run over memoryviews could lead to a ref-counting error.\n  Patch by David Woods.  (Github issue :issue:`4662`)\n\n* To opt out of the new, safer exception handling behaviour, legacy code can set the new\n  directive ``legacy_implicit_noexcept=True`` for a transition period to keep the\n  previous, unsafe behaviour.  This directive will eventually be removed in a later release.\n  Patch by Matúš Valo.  (Github issue :issue:`5094`)\n\n* Cython implemented C functions now propagate exceptions by default, rather than\n  swallowing them in non-object returning function if the user forgot to add an\n  ``except`` declaration to the signature.  This was a long-standing source of bugs,\n  but can require adding the ``noexcept`` declaration to existing functions if\n  exception propagation is really undesired.\n  (Github issue :issue:`4280`)\n\n* The code ``except +nogil`` (declaring a C++ exception handler function called ``nogil``)\n  is now rejected because it is almost certainly a typo from ``except + nogil``.\n  (Github issue :issue:`5430`)\n\n* Handling freshly raised exceptions that didn't have a traceback yet could crash.\n  (Github issue :issue:`5495`)\n\n\nOptimizations\n-------------\n\nGenerating efficient code has long been a goal of Cython, and 3.0 continues that.\nProbably the most significant change is that Cython functions use the PEP-590 vectorcall\nprotocol on Python 3.7 and higher.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* Name lookups in class bodies no longer go through an attribute lookup.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`3100`)\n\n* Extension types that do not need their own ``tp_new`` implementation (because\n  they have no object attributes etc.) directly inherit the implementation of\n  their parent type if possible.\n  (Github issue :issue:`1555`)\n\n* Some list copying is avoided internally when a new list needs to be created\n  but we already have a fresh one.\n  (Github issue :issue:`3494`)\n\n* Multiplication of Python numbers with small constant integers is faster.\n  (Github issue :issue:`2808`)\n\n* String concatenation can now happen in place if possible, by extending the\n  existing string rather than always creating a new one.\n  Patch by David Woods.  (Github issue :issue:`3453`)\n\n* The ``str()`` builtin now calls ``PyObject_Str()`` instead of going\n  through a Python call.\n  Patch by William Ayd.  (Github issue :issue:`3279`)\n\n* Reimports of already imported modules are substantially faster.\n  (Github issue :issue:`2854`)\n\n* The dispatch to fused functions is now linear in the number of arguments,\n  which makes it much faster, often 2x or more, and several times faster for\n  larger fused types with many specialisations.\n  Patch by will-ca.  (Github issue :issue:`1385`)\n\n* The fastcall/vectorcall protocols are used for several internal Python calls.\n  (Github issue :issue:`3540`)\n\n* ``nogil`` functions now avoid acquiring the GIL on function exit if possible\n  even if they contain ``with gil`` blocks.\n  (Github issue :issue:`3554`)\n\n* Type inference now works for memory views and slices.\n  Patch by David Woods.  (Github issue :issue:`2227`)\n\n* For-in-loop iteration over ``bytearray`` and memory views is optimised.\n  Patch by David Woods.  (Github issue :issue:`2227`)\n\n* For-in-loop iteration over ``bytearray`` and memory views is optimised.\n  Patch by David Woods.  (Github issue :issue:`2227`)\n\n* ``float(…)`` is optimised for string arguments (str/bytes/bytearray).\n\n* ``[...] * N`` is optimised for C integer multipliers ``N``.\n  (Github issue :issue:`3922`)\n\n* Some constant tuples containing strings were not deduplicated.\n  Patch by David Woods.  (Github issue :issue:`4353`)\n\n* Memory views can use atomic CPU instructions instead of locks in more cases.\n  Patch by Sam Gross.  (Github issue :issue:`4912`)\n\n* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n  Patch by David Woods.  (Github issue :issue:`3447`)\n\n* Larger numbers of extension types with multiple subclasses could take very long to compile.\n  Patch by Scott Wolchok.  (Github issue :issue:`5139`)\n\n* Integer comparisons avoid Python coercions if possible.\n  (Github issue :issue:`4821`)\n\n* The call-time dispatch for fused memoryview types is less slow.\n  (Github issue :issue:`5073`)\n\n* Python's ``memoryview`` is now a known builtin type with optimised properties.\n  (Github issue :issue:`3798`)\n\n* Multiplying a sequence by a C integer avoids creating and intermediate Python integer.\n\n* The reference counting of memory views involved useless overhead.\n  (Github issue :issue:`5510`)\n\n\nCompatibility with C\n--------------------\n\nThe support for C features like ``const`` or ``volatile`` was substantially improved.\n\nThe generated code has been cleared up to reduce the number of C compiler warnings emitted.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* A C compiler cast warning was resolved.\n  Patch by Michael Buesch.  (Github issue :issue:`2775`)\n\n* Constant integer expressions that used a negative exponent were evaluated\n  as integer 0 instead of the expected float value.\n  Patch by Kryštof Pilnáček.  (Github issue :issue:`2133`)\n\n* Several declarations in ``cpython.*``, ``libc.*`` and ``libcpp.*`` were added.\n  Patches by Jeroen Demeyer, Matthew Edwards, Chris Gyurgyik, Jerome Kieffer\n  and Zackery Spytz.\n  (Github issues :issue:`3468`, :issue:`3332`, :issue:`3202`, :issue:`3188`,\n  :issue:`3179`, :issue:`2891`, :issue:`2826`, :issue:`2713`)\n\n* The ``volatile`` C modifier is supported in Cython code.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`1667`)\n\n* ``const`` can be used together with fused types.\n  Patch by Thomas Vincent.  (Github issue :issue:`1772`)\n\n* Temporary buffer indexing variables were not released and could show up in\n  C compiler warnings, e.g. in generators.\n  Patch by David Woods.  (Github issues :issue:`3430`, :issue:`3522`)\n\n* The C property feature has been rewritten and now requires C property methods\n  to be declared ``inline`` (:issue:`3571`).\n\n* Cython generates C compiler branch hints for unlikely user defined if-clauses\n  in more cases, when they end up raising exceptions unconditionally. This now\n  includes exceptions being raised in ``nogil``/``with gil`` sections.\n\n* Several issues with arithmetic overflow handling were resolved, including\n  undefined behaviour in C.\n  Patch by Sam Sneddon.  (Github issue :issue:`3588`)\n\n* `libc.math` was extended to include all C99 function declarations.\n  Patch by Dean Scarff.  (Github issue :issue:`3570`)\n\n* Some C compiler warninge were resolved.\n  Patches by Max Bachmann.  (Github issue :issue:`4053`, :issue:`4059`, :issue:`4054`, :issue:`4148`, :issue:`4162`)\n\n* A C compiler warning about enum value casting was resolved in GCC.\n  (Github issue :issue:`2749`)\n\n* A C compiler warning about unused code was resolved.\n  (Github issue :issue:`3763`)\n\n* Some compiler problems and warnings were resolved.\n  Patches by David Woods, 0dminnimda, Nicolas Pauss and others.\n  (Github issues :issue:`4317`, :issue:`4324`, :issue:`4361`, :issue:`4357`)\n\n* Some C compiler warnings were fixed.\n  Patch by mwtian.  (Github issue :issue:`4831`)\n\n* A case of undefined C behaviour was resolved in the list slicing code.\n  Patch by Richard Barnes.  (Github issue :issue:`4734`)\n\n* Typedefs for the ``bint`` type did not always behave like ``bint``.\n  Patch by Nathan Manville and 0dminnimda.  (Github issue :issue:`4660`)\n\n* Intel C compilers could complain about unsupported gcc pragmas.\n  Patch by Ralf Gommers.  (Github issue :issue:`5052`)\n\n* Structs that contained an array field resulted in incorrect C code.  Their initialisation\n  now uses ``memcpy()``.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5178`)\n\n* The module state struct was not initialised in correct C (before C23), leading to\n  compile errors on Windows.\n  Patch by yudonglin.  (Github issue :issue:`5169`)\n\n* ``cdef public`` functions declared in .pxd files could use an incorrectly mangled C name.\n  Patch by EpigeneMax.  (Github issue :issue:`2940`)\n\n* ``const`` types could not be returned from functions.\n  Patch by Mike Graham.  (Github issue :issue:`5135`)\n\n* C11 ``complex.h`` is now properly detected.\n  (Github issue :issue:`2513`)\n\n* Standard C/C++ atomic operations are now used for memory views, if available.\n  (Github issue :issue:`4925`)\n\n* C arrays can be initialised inside of nogil functions.\n  Patch by Matúš Valo.  (Github issue :issue:`1662`)\n\n* Very long Python integer constants could exceed the maximum C name length of MSVC.\n  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n\n* Some C compiler warnings were resolved.\n  Patches by Matt Tyson, Lisandro Dalcin, Philipp Wagner, Matti Picus et al.\n  (Github issues :issue:`5417`, :issue:`5418`, :issue:`5421`, :issue:`5437`, :issue:`5438`, :issue:`5443`)\n\n* Some typedef declarations for libc function types were fixed.\n  (Github issue :issue:`5498`)\n\n* With MSVC, Cython no longer enables C-Complex support by accident (which is not supported there).\n  (Github issue :issue:`5512`)\n\n\nCompatibility with C++\n----------------------\n\nMany C++ features like forwarding references or ``std::move`` are now supported or even used\ninternally, if possible.\n\nCython's wrapping of the C++ standard library has been extended.\n\nA new `cpp_locals`` directive enables C++ local variables to initialized when assigned to\nrather than at the start of the function, making them behave more like Python variables,\nand also removing the requirement for them to be default constructible.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* C++ ``typeid()`` failed for fused types.\n  Patch by David Woods.  (Github issue :issue:`3203`)\n\n* ``std::move()`` is now used in C++ mode for internal temp variables to\n  make them work without copying values.\n  Patch by David Woods.  (Github issues :issue:`3253`, :issue:`1612`)\n\n* The C++ ``typeid()`` function was allowed in C mode.\n  Patch by Celelibi.  (Github issue :issue:`3637`)\n\n* C++ references failed to compile when used as Python object indexes.\n  Patch by David Woods.  (Github issue :issue:`3754`)\n\n* The construct ``for x in cpp_function_call()`` failed to compile.\n  Patch by David Woods.  (Github issue :issue:`3663`)\n\n* Some C++ STL methods did not propagate exceptions.\n  Patch by Max Bachmann.  (Github issue :issue:`4079`)\n\n* A compile failure for C++ enums in Py3.4 / MSVC was resolved.\n  Patch by Ashwin Srinath.  (Github issue :issue:`3782`)\n\n* Cython compiled functions always provided a ``__self__`` attribute,\n  regardless of being used as a method or not.\n  Patch by David Woods.  (Github issue :issue:`4036`)\n\n* Overloaded C++ static methods were lost.\n  Patch by Ashwin Srinath.  (Github :issue:`1851`)\n\n* Nested C++ types were not usable through ctypedefs.\n  Patch by Vadim Pushtaev.  (Github issue :issue:`4039`)\n\n* More declarations for C++ string methods were added.\n\n* Converting C++ containers to Python lists uses less memory allocations.\n  Patch by Max Bachmann.  (Github issue :issue:`4081`)\n\n* ``std::move()`` is now also called for temps during ``yield``.\n  Patch by Yu Feng.  (Github issue :issue:`4154`)\n\n* The destructor is now called for fields in C++ structs.\n  Patch by David Woods.  (Github issue :issue:`3226`)\n\n* Conversion from Python dicts to ``std::map`` was broken.\n  Patch by David Woods and Mikkel Skofelt.  (Github issues :issue:`4228`, :issue:`4231`)\n\n* Code optimisations were not applied to methods of Cython implemented C++ classes.\n  Patch by David Woods.  (Github issue :issue:`4212`)\n\n* C++17 execution policies are supported in ``libcpp.algorithm``.\n  Patch by Ashwin Srinath.  (Github issue :issue:`3790`)\n\n* A new directive ``cpp_locals`` was added that allows local C++ variables to\n  be lazily initialised (without default constructor), thus making them behave\n  more like Python variables.\n  Patch by David Woods.  (Github issue :issue:`4160`)\n\n* Generated utility code for C++ conversions no longer depends on several user\n  definable directives that may make it behave incorrectly.\n  Patch by David Woods.  (Github issue :issue:`4206`)\n\n* Several issues with the new ``cpp_locals`` directive were resolved and\n  its test coverage improved.\n  Patch by David Woods.  (Github issues :issue:`4265`, :issue:`4266`)\n\n* Declarations for ``libcpp.algorithms``, ``libcpp.set`` and ``libcpp.unordered_set``\n  were extended.\n  Patch by David Woods.  (Github issues :issue:`4271`, :issue:`4273`)\n\n* Several C++ library declarations were added and fixed.\n  Patches by Dobatymo, account-login, Jonathan Helgert, Evgeny Yakimov, GalaxySnail, Max Bachmann.\n  (Github issues :issue:`4408`, :issue:`4419`, :issue:`4410`, :issue:`4395`,\n  :issue:`4423`, :issue:`4448`, :issue:`4462`, :issue:`3293`, :issue:`4522`,\n  :issue:`2171`, :issue:`4531`)\n\n* Templating C++ classes with memory view types lead to buggy code and is now rejected.\n  Patch by David Woods.  (Github issue :issue:`3085`)\n\n* ``prange`` loops generated incorrect code when ``cpp_locals`` is enabled.\n  Patch by David Woods.  (Github issue :issue:`4354`)\n\n* Direct assignments to C++ references are now allowed.\n  Patch by David Woods.  (Github issue :issue:`1863`)\n\n* Conversion from Python dict to C++ map now supports arbitrary Python mappings,\n  not just dicts.\n\n* Some C++ and CPython library declarations were extended and fixed.\n  Patches by Max Bachmann, Till Hoffmann, Julien Jerphanion, Wenjun Si.\n  (Github issues :issue:`4530`, :issue:`4528`, :issue:`4710`, :issue:`4746`,\n  :issue:`4751`, :issue:`4818`, :issue:`4762`, :issue:`4910`)\n\n* Some C/C++ warnings were resolved.\n  Patches by Max Bachmann, Alexander Shadchin, at al.\n  (Github issues :issue:`5004`, :issue:`5005`, :issue:`5019`, :issue:`5029`, :issue:`5096`)\n\n* C++ references did not work on fused types.\n  (Github issue :issue:`4717`)\n\n* C++ iteration more safely stores the iterable in temporary variables.\n  Patch by Xavier.  (Github issue :issue:`3828`)\n\n* C++ post-increment/-decrement operators were not correctly looked up on declared C++\n  classes, thus allowing Cython declarations to be missing for them and incorrect C++\n  code to be generated.\n  Patch by Max Bachmann.  (Github issue :issue:`4536`)\n\n* ``cdef public`` functions used an incorrect linkage declaration in C++.\n  Patch by Maximilien Colange.  (Github issue :issue:`1839`)\n\n* Declarations were added for the C++ bit operations, some other parts of C++20 and CPython APIs.\n  Patches by Jonathan Helgert, Dobatymo, William Ayd and Max Bachmann.\n  (Github issues :issue:`4962`, :issue:`5101`, :issue:`5157`, :issue:`5163`, :issue:`5257`)\n\n* ``cpp_locals`` no longer have to be \"assignable\".\n  (Github issue :issue:`4558`)\n\n* Nested ``cppclass`` definitions are supported.\n  Patch by samaingw.  (Github issue :issue:`1218`)\n\n* ``reversed()`` can now be used together with C++ iteration.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5002`)\n\n* Some C++ warnings regarding ``const`` usage in internally generated utility code were resolved.\n  Patch by Max Bachmann.  (Github issue :issue:`5301`)\n\n* Cython generated C++ code accidentally used C++11 features in some cases.\n  (Github issue :issue:`5316`)\n\n* Fully qualified C++ names prefixed by a cimported module name could fail to compile.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5229`)\n\n* C++ declarations for ``<cmath>``, ``<numbers>`` and ``std::any`` were added.\n  Patches by Jonathan Helgert and Maximilien Colange.\n  (Github issues :issue:`5262`, :issue:`5309`, :issue:`5314`)\n\n* The ``extern \"C\"`` and ``extern \"C++\"`` markers that Cython generates for\n  ``public`` functions can now be controlled by setting the C macro ``CYTHON_EXTERN_C``.\n\n* C++ containers of item type ``bint`` could conflict with those of item type ``int``.\n  (Github issue :issue:`5516`)\n\n* Reverse iteration in C++ no longer removes the ``const`` qualifier from the item type.\n  Patch by Isuru Fernando.  (Github issue :issue:`5478`)\n\n\nCommandline Interface\n---------------------\n\nA number of new options were added to the ``cython`` and ``cythonize``\ncommands.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* The command line parser was rewritten and modernised using ``argparse``.\n  Patch by Egor Dranischnikow.  (Github issue :issue:`2952`, :issue:`3001`)\n\n* ``cygdb`` gives better error messages when it fails to initialise the\n  Python runtime support in gdb.\n  Patch by Volker Weissmann.  (Github issue :issue:`3489`)\n\n* ``--no-docstrings`` option added to ``cythonize`` script.\n  Original patch by mo-han.  (Github issue :issue:`2889`)\n\n* Code annotation accepts a new debugging argument ``--annotate-fullc`` that\n  will include the complete syntax highlighted C file in the HTML output.\n  (Github issue :issue:`2855`)\n\n* ``cygdb`` has a new option ``--skip-interpreter`` that allows using a different\n  Python runtime than the one used to generate the debugging information.\n  Patch by Alessandro Molina.  (Github issue :issue:`4186`)\n\n* ``cythonize()`` and the corresponding CLI command now regenerate the output files\n  also when they already exist but were generated by a different Cython version.\n\n* The ``cython`` and ``cythonize`` commands ignored non-existing input files without error.\n  Patch by Matúš Valo.  (Github issue :issue:`4629`)\n\n* ``cythonize --help`` now also prints information about the supported environment variables.\n  Patch by Matúš Valo.  (Github issue :issue:`1711`)\n\n* Using the ``--working`` option could lead to sources not being found.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5365`)\n\n* Passing a language level and directives on the command line lost the language level setting.\n  Patch by Matúš Valo.  (Github issue :issue:`5484`)\n\n* ``cython --version`` now prints the version to both stdout and stderr (unless that is a TTY).\n  (Github issue :issue:`5504`)\n\n\nBuild integration\n-----------------\n\nCython has made a number of improvements both to how it compiles itself\nand how it integrates with external build tools.  Most notably Cython\nhas been moving to use ``setuptools`` instead of the deprecated/removed\n``distutils`` where possible.\n\nThe new ``--depfile`` option generates dependency files to help integrate\nCython with other build tools.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* Binary Linux wheels now follow the manylinux2010 standard.\n  Patch by Alexey Stepanov.  (Github issue :issue:`3355`)\n\n* The search order for include files was changed. Previously it was\n  ``include_directories``, ``Cython/Includes``, ``sys.path``. Now it is\n  ``include_directories``, ``sys.path``, ``Cython/Includes``. This was done to\n  allow third-party ``*.pxd`` files to override the ones in Cython.\n  Patch by Matti Picus.  (Github issue :issue:`2905`)\n\n* Source file fingerprinting now uses SHA-1 instead of MD5 since the latter\n  tends to be slower and less widely supported these days.\n  (Github issue :issue:`2790`)\n\n* The Cython AST code serialiser class ``CodeWriter`` in ``Cython.CodeWriter``\n  supports more syntax nodes.\n\n* Parallel builds of Cython itself (``setup.py build_ext -j N``) failed on Windows.\n\n* When importing the old Cython ``build_ext`` integration with distutils, the\n  additional command line arguments leaked into the regular command.\n  Patch by Kamekameha.  (Github issue :issue:`2209`)\n\n* ``.pxd`` files can now be :ref:`versioned <versioning>` by adding an\n  extension like \"``.cython-30.pxd``\" to prevent older Cython versions (than\n  3.0 in this case) from picking them up.  (Github issue :issue:`3577`)\n\n* The Cython ``CodeWriter`` can now handle more syntax constructs.\n  Patch by Tao He.  (Github issue :issue:`3514`)\n\n* The Cython ``CodeWriter`` mishandled no-argument ``return`` statements.\n  Patch by Tao He.  (Github issue :issue:`3795`)\n\n* Cython now detects when existing output files were not previously generated\n  by itself and refuses to overwrite them.  It is a common mistake to name\n  the module file of a wrapper after the library (source file) that it wraps,\n  which can lead to surprising errors when the file gets overwritten.\n\n* The ``Cython.Build.BuildExecutable`` tool no longer executes the program automatically.\n  Use ``cythonrun`` for that.\n\n* Python modules were not automatically recompiled when only their ``.pxd`` file changed.\n  Patch by Golden Rockefeller.  (Github issue :issue:`1428`)\n\n* An unnecessary slow-down at import time was removed from ``Cython.Distutils``.\n  Original patch by Anthony Sottile.  (Github issue :issue:`4224`)\n\n* A compiler crash when running Cython thread-parallel from distutils was resolved.\n  (Github issue :issue:`4503`)\n\n* An incompatibility with recent coverage.py versions was resolved.\n  Patch by David Woods.  (Github issue :issue:`4440`)\n\n* ``pyximport`` now uses ``cythonize()`` internally.\n  Patch by Matúš Valo.  (Github issue :issue:`2304`)\n\n* ``Cython.Distutils.build_ext`` now uses ``cythonize()`` internally (previously\n  known as ``new_build_ext``), while still supporting the options that were\n  available in the old implementation (``old_build_ext``).\n  Patch by Matúš Valo.  (Github issue :issue:`3541`)\n\n* Improve compatibility between classes pickled in Cython 3.0 and 0.29.x\n  by accepting MD5, SHA-1 and SHA-256 checksums.\n  (Github issue :issue:`4680`)\n\n* ``pyximport`` failed for long filenames on Windows.\n  Patch by Matti Picus.  (Github issue :issue:`4630`)\n\n* A new Cython build option ``--cython-compile-minimal`` was added to compile only a\n  smaller set of Cython's own modules, which can be used to reduce the package\n  and install size.\n\n* The environment variable ``CYTHON_FORCE_REGEN=1`` can be used to force ``cythonize``\n  to regenerate the output files regardless of modification times and changes.\n\n* The ``cythonize`` and ``cython`` commands have a new option ``-M`` / ``--depfile``\n  to generate ``.dep`` dependency files for the compilation unit.  This can be used\n  by external build tools to track these dependencies.\n  The ``cythonize`` option was already available in Cython :ref:`0.29.27`.\n  Patches by Evgeni Burovski and Eli Schwartz.  (Github issue :issue:`1214`)\n\n* Wheels now include a compiled parser again, which increases their size a little\n  but gives about a 10% speed-up when running Cython.\n\n* The wheel building process was migrated to use the ``cibuildwheel`` tool.\n  Patch by Thomas Li.  (Github issue :issue:`4736`)\n\n* ``setup.cfg`` was missing from the source distribution.\n  (Github issue :issue:`5199`)\n\n* Extended glob paths with ``/**/`` and ``\\**\\`` for finding source files failed on Windows.\n\n* Coverage analysis failed in projects with a separate source subdirectory.\n  Patch by Sviatoslav Sydorenko and Ruben Vorderman.  (Github issue :issue:`3636`)\n\n* Cython could crash when finding import files with dots in their names.\n  Patch by Matúš Valo.  (Github issue :issue:`5396`)\n\n* A module loading problem with ``cython.inline()`` on Windows was resolved.\n\n\nDeprecations\n------------\n\nSome older features of Cython have been deprecated. Most notable are the\ncompile time ``DEF`` and ``IF`` statements, although we emphasise that\nthey will remain until a good alternative exists for all their use-cases.\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* Dotted filenames for qualified module names (``pkg.mod.pyx``) are deprecated.\n  Use the normal Python package directory layout instead.\n  (Github issue :issue:`2686`)\n\n* \"Declaration after use\" is now an error for variables.\n  Patch by David Woods.  (Github issue :issue:`3976`)\n\n* Variables can no longer be declared with ``cpdef``.\n  Patch by David Woods.  (Github issue :issue:`887`)\n\n* The compile-time ``DEF`` and ``IF`` statements are deprecated and generate a warning.\n  They should be replaced with normal constants, code generation or C macros.\n  (Github issue :issue:`4310`)\n\n* C-style array declarations (``cdef int a[4]``) are now (silently) deprecated in\n  favour of the Java-style ``cdef int[4] a`` form.  The latter was always available\n  and the Python type declaration syntax already used it exclusively (``a: int[4]``).\n  Patch by Matúš Valo.  (Github issue :issue:`5248`)\n\n* The undocumented, untested and apparently useless syntax\n  ``from somemodule cimport class/struct/union somename`` was removed.  The type\n  modifier is not needed here and a plain ``cimport`` of the name will do.\n  (Github issue :issue:`4904`)\n\n\nEditor support\n--------------\n\nRelated changes\n^^^^^^^^^^^^^^^\n\n* C compiler warnings and errors are now shown in Jupyter notebooks.\n  Patch by Egor Dranischnikow.  (Github issue :issue:`3751`)\n\n* An endless loop in ``cython-mode.el`` was resolved.\n  Patch by Johannes Mueller.  (Github issue :issue:`3218`)\n\n* The Emacs Cython mode file ``cython-mode.el`` is now maintained in a separate repo:\n  https://github.com/cython/emacs-cython-mode\n\n* The C code shown in the annotated HTML output could lack the last C code line(s).\n\n\nOther changes\n-------------\n\n* Memoryviews failed to compile when the ``cache_builtins`` feature was disabled.\n  Patch by David Woods.  (Github issue :issue:`3406`)\n\n* Broadcast assignments to a multi-dimensional memory view slice could end\n  up in the wrong places when the underlying memory view is known to be\n  contiguous but the slice is not.\n  (Github issue :issue:`2941`)\n\n* The Pythran ``shape`` attribute is supported.\n  Patch by Serge Guelton.  (Github issue :issue:`3307`)\n\n* ``--no-capture`` added to ``runtests.py`` to prevent stdout/stderr capturing\n  during srctree tests.\n  Patch by Matti Picus.  (Github issue :issue:`2701`)\n\n* Decoding an empty bytes/char* slice with large bounds could crash.\n  Patch by Sam Sneddon.  (Github issue :issue:`3534`)\n\n* Creating an empty unicode slice with large bounds could crash.\n  Patch by Sam Sneddon.  (Github issue :issue:`3531`)\n\n* Complex buffer item types of structs of arrays could fail to validate.\n  Patch by Leo and smutch.  (Github issue :issue:`1407`)\n\n* Error handling in ``cython.array`` creation was improved to avoid calling\n  C-API functions with an error held.\n\n* Error handling early in the module init code could lead to a crash.\n\n* Exception position reporting could run into race conditions on threaded code.\n  It now uses function-local variables again.\n\n* A reference leak on import failures was resolved.\n  Patch by Max Bachmann.  (Github issue :issue:`4056`)\n\n* Casting to ctuples is now allowed.\n  Patch by David Woods.  (Github issue :issue:`3808`)\n\n* Some issues were resolved that could lead to duplicated C names.\n  Patch by David Woods.  (Github issue :issue:`3716`, :issue:`3741`, :issue:`3734`)\n\n* Inline functions and other code in ``.pxd`` files could accidentally\n  inherit the compiler directives of the ``.pyx`` file that imported them.\n  Patch by David Woods.  (Github issue :issue:`1071`)\n\n* Parts of the documentation were (and are being) rewritten to show the\n  Cython language syntax next to the equivalent Python syntax.\n  Patches by 0dminnimda and Matúš Valo.  (Github issue :issue:`4187`)\n\n* A name collision when including multiple generated API header files was resolved.\n  Patch by David Woods.  (Github issue :issue:`4308`)\n\n* Very early errors during module initialisation could lead to crashes.\n  Patch by David Woods.  (Github issue :issue:`4377`)\n\n* Type errors when passing memory view arguments could leak buffer references.\n  Patch by David Woods.  (Github issue :issue:`4296`)\n\n* The GIL can now safely be released inside of ``nogil`` functions (which may actually\n  be called with the GIL held at runtime).\n  Patch by David Woods.  (Github issue :issue:`4137`)\n\n* The return type of a fused function is no longer ignored for function pointers,\n  since it is relevant when passing them e.g. as argument into other fused functions.\n  Patch by David Woods.  (Github issue :issue:`4644`)\n\n* Using memoryview arguments in closures of inner functions could lead to ref-counting errors.\n  Patch by David Woods.  (Github issue :issue:`4798`)\n\n* Decorators like ``@cfunc`` and ``@ccall`` could leak into nested functions and classes.\n  Patch by David Woods.  (Github issue :issue:`4092`)\n\n* Cython now uses a ``.dev0`` version suffix for unreleased source installations.\n\n* The ``Tempita`` module no longer contains HTML processing capabilities, which\n  were found to be broken in Python 3.8 and later.\n  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n\n* Nesting fused types in other fused types could fail to specialise the inner type.\n  (Github issue :issue:`4725`)\n\n* Iterating over memoryviews in generator expressions could leak a buffer reference.\n  (Github issue :issue:`4968`)\n\n* The C ``float`` type was not inferred on assignments.\n  (Github issue :issue:`5234`)\n\n* Type checks for Python's ``memoryview`` type generated incorrect C code.\n  (Github issues :issue:`5268`, :issue:`5270`)\n\n* Auto-generated utility code didn't always have all required user defined types available.\n  (Github issue :issue:`5269`)\n\n* ``cimport_from_pyx`` could miss some declarations.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5318`)\n\n* For-loops now release the internal reference to their list/tuple iterable before\n  instead of after the ``else:`` clause.  This probably has no practical impact.\n  (Github issue :issue:`5347`)\n\n* Extension type hierarchies were generated in the wrong order, thus leading to compile issues.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5395`)\n\n* The FAQ page was moved from the GitHub Wiki to the regular documentation\n  to make it more visible.\n\n\n3.0.0 (2023-07-17)\n==================\n\nBugs fixed\n----------\n\n* A crash in Python 2.7 was fixed when cleaning up extension type instances\n  at program end.\n\n\n3.0.0 rc 2 (2023-07-13)\n=======================\n\nBugs fixed\n----------\n\n* Parser crash on hex/oct enum values.\n  (Github issue :issue:`5524`)\n\n* ``cython --version`` now prints the version to both stdout and stderr (unless that is a TTY).\n  (Github issue :issue:`5504`)\n\n\n3.0.0 rc 1 (2023-07-12)\n=======================\n\nFeatures added\n--------------\n\n* ``with gil`` and ``with nogil(flag)`` now accept their flag argument also in Python code.\n  Patch by Matúš Valo.  (Github issue :issue:`5113`)\n\n* A new decorator ``@cython.with_gil`` is available in Python code to match the ``with gil``\n  function declaration in Cython syntax.\n\n* Assigning a list to a ctuple is slightly faster.\n\nBugs fixed\n----------\n\n* The reference counting of memory views involved useless overhead.\n  (Github issue :issue:`5510`)\n\n* Duplicate values in a ``cpdef`` enum could lead to invalid switch statements.\n  (Github issue :issue:`5400`)\n\n* Handling freshly raised exceptions that didn't have a traceback yet could crash.\n  (Github issue :issue:`5495`)\n\n* Reverse iteration in C++ no longer removes the ``const`` qualifier from the item type.\n  Patch by Isuru Fernando.  (Github issue :issue:`5478`)\n\n* C++ containers of item type ``bint`` could conflict with those of item type ``int``.\n  (Github issue :issue:`5516`)\n\n* With MSVC, Cython no longer enables C-Complex support by accident (which is not supported there).\n  (Github issue :issue:`5512`)\n\n* The Python implementation of ``cimport cython.cimports…`` could raise an ``ImportError``\n  instead of an ``AttributeError`` when looking up package variable names.\n  Patch by Matti Picus.  (Github issue :issue:`5411`)\n\n* Passing a language level and directives on the command line lost the language level setting.\n  Patch by Matúš Valo.  (Github issue :issue:`5484`)\n\n* Some typedef declarations for libc function types were fixed.\n  (Github issue :issue:`5498`)\n\n* Some C compiler warnings and errors in CPython 3.12 were resolved.\n\n* The deprecated ``_PyGC_FINALIZED()`` C-API macro is no longer used.\n  Patch by Thomas Caswell and Matúš Valo.  (Github issue :issue:`5481`)\n\n* A compile error when using ``__debug__`` was resolved.\n\n* A module loading problem with ``cython.inline()`` on Windows was resolved.\n\n* ``cython --version`` now prints the version to stdout instead of stderr.\n  (Github issue :issue:`5504`)\n\n* Includes all bug-fixes and features from the 0.29 maintenance branch\n  up to the :ref:`0.29.36` release.\n\nOther changes\n-------------\n\n* The FAQ page was moved from the GitHub Wiki to the regular documentation\n  to make it more visible.\n\n* ``np.long_t`` and ``np.ulong_t`` were removed from the NumPy declarations,\n  syncing Cython with upstream NumPy v1.25.0.  The aliases were confusing\n  since they could mean different things on different platforms.\n\n\n3.0.0 beta 3 (2023-05-24)\n=========================\n\nFeatures added\n--------------\n\n* Custom buffer slot methods are now supported in the Limited C-API of Python 3.9+.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5422`)\n\n* The ``extern \"C\"`` and ``extern \"C++\"`` markers that Cython generates for\n  ``public`` functions can now be controlled by setting the C macro ``CYTHON_EXTERN_C``.\n\n* The Python ``int`` handling code was adapted to make use of the new ``PyLong``\n  internals in CPython 3.12.\n  (Github issue :issue:`5353`)\n\n* Conversion of Python ints to C ``int128`` is now always supported, although slow\n  if dedicated C-API support is missing (``_PyLong_AsByteArray()``), specifically in\n  the Limited C-API.\n  (Github issue :issue:`5419`)\n\n* The exception handling code was adapted to CPython 3.12.\n  (Github issue :issue:`5442`)\n\n* The dataclass implementation was adapted to support Python 3.12.\n  (Github issue :issue:`5346`)\n\n* The normal ``@dataclasses.dataclass`` and ``@functools.total_ordering`` decorators\n  can now be used on extension types.  Using the corresponding ``@cython.*`` decorator\n  will automatically turn a Python class into an extension type (no need for ``@cclass``).\n  (Github issue :issue:`5292`)\n\n* Multiplying a sequence by a C integer avoids creating and intermediate Python integer.\n\n* ctuples can now be assigned from arbitrary sequences, not just Python tuples.\n\n* A new directive ``embedsignature.format`` was added to select the format of the\n  docstring embedded signatures between ``python``, ``c`` and argument ``clinic``.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5415`)\n\n* Some invalid directive usages are now detected and rejected, e.g. using ``@ccall``\n  together with ``@cfunc``, and applying ``@cfunc`` to a ``@ufunc``.  Cython also\n  warns now when a directive is applied needlessly.\n  (Github issue :issue:`5399` et al.)\n\n* Unicode identifier names now allow all letters defined in CPython 3.12.\n\nBugs fixed\n----------\n\n* Some C compile failures in CPython 3.12.0a6/a7 were resolved.\n\n* Cascaded comparisons between integer constants and Python types could fail to compile.\n  (Github issue :issue:`5354`)\n\n* The internal macro ``__PYX_IS_UNSIGNED`` was accidentally duplicated in beta 2\n  which lead to C compile errors.\n  Patch by 0dminnimda.  (Github issue :issue:`5356`)\n\n* Memoryviews with typedef item types could fail to match the non-typedef item types.\n  Patch by Yue Yang.  (Github issue :issue:`5373`)\n\n* Fused memory views could raise a ``TypeError`` instead of a ``ValueError`` on creation.\n  Patch by Matúš Valo.  (Github issue :issue:`5401`)\n\n* Cython could crash when finding import files with dots in their names.\n  Patch by Matúš Valo.  (Github issue :issue:`5396`)\n\n* Selecting a context manager in parentheses and then calling it directly failed to parse.\n  (Github issue :issue:`5403`)\n\n* ``__qualname__`` and ``__module__`` were not available inside of class bodies.\n  (Github issue :issue:`4447`)\n\n* ``noexcept`` was not automatically applied to function pointer attributes in extern structs.\n  Patch by Matúš Valo.  (Github issue :issue:`5359`)\n\n* Function signatures containing a type like `tuple[()]` could not be printed.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5355`)\n\n* Extension type hierarchies were generated in the wrong order, thus leading to compile issues.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5395`)\n\n* Using the ``--working`` option could lead to sources not being found.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5365`)\n\n* Some C compiler warnings were resolved.\n  Patches by Matt Tyson, Lisandro Dalcin, Philipp Wagner, Matti Picus et al.\n  (Github issues :issue:`5417`, :issue:`5418`, :issue:`5421`, :issue:`5437`, :issue:`5438`, :issue:`5443`)\n\n* Includes all bug-fixes and features from the 0.29 maintenance branch\n  up to the :ref:`0.29.35` release.\n\nOther changes\n-------------\n\n* For-loops now release the internal reference to their list/tuple iterable before\n  instead of after the ``else:`` clause.  This probably has no practical impact.\n  (Github issue :issue:`5347`)\n\n* Simple tuple types like ``(int, int)`` are no longer accepted in Python annotations\n  and require the Python notation instead (e.g. ``tuple[cython.int, cython.int]``).\n  (Github issue :issue:`5397`)\n\n* The code ``except +nogil`` (declaring a C++ exception handler function called ``nogil``)\n  is now rejected because it is almost certainly a typo from ``except + nogil``.\n  (Github issue :issue:`5430`)\n\n\n3.0.0 beta 2 (2023-03-27)\n=========================\n\nFeatures added\n--------------\n\n* C++ declarations for ``<cmath>``, ``<numbers>`` and ``std::any`` were added.\n  Patches by Jonathan Helgert and Maximilien Colange.\n  (Github issues :issue:`5262`, :issue:`5309`, :issue:`5314`)\n\nBugs fixed\n----------\n\n* Unintended internal exception handling lead to a visible performance regression\n  for ``nogil`` memoryview code in 3.0.0b1.\n  (Github issue :issue:`5324`)\n\n* ``None`` default arguments for arguments with fused memoryview types could select a different\n  implementation in 3.0 than in 0.29.x.  The selection behaviour is generally considered\n  suboptimal but was at least reverted to the old behaviour for now.\n  (Github issue :issue:`5297`)\n\n* The new complex vs. floating point behaviour of the ``**`` power operator accidentally\n  added a dependency on the GIL, which was really only required on failures.\n  (Github issue :issue:`5287`)\n\n* ``from cython cimport … as …`` could lead to imported names not being found in annotations.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5235`)\n\n* Generated NumPy ufuncs could crash for large arrays due to incorrect GIL handling.\n  (Github issue :issue:`5328`)\n\n* Very long Python integer constants could exceed the maximum C name length of MSVC.\n  Patch by 0dminnimda.  (Github issue :issue:`5290`)\n\n* ``cimport_from_pyx`` could miss some declarations.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5318`)\n\n* Fully qualified C++ names prefixed by a cimported module name could fail to compile.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5229`)\n\n* Cython generated C++ code accidentally used C++11 features in some cases.\n  (Github issue :issue:`5316`)\n\n* Some C++ warnings regarding ``const`` usage in internally generated utility code were resolved.\n  Patch by Max Bachmann.  (Github issue :issue:`5301`)\n\n* With ``language_level=2``, imports of modules in packages could return the wrong module in Python 3.\n  (Github issue :issue:`5308`)\n\n* ``typing.Optional`` could fail on tuple types.\n  (Github issue :issue:`5263`)\n\n* Auto-generated utility code didn't always have all required user defined types available.\n  (Github issue :issue:`5269`)\n\n* Type checks for Python's ``memoryview`` type generated incorrect C code.\n  (Github issues :issue:`5268`, :issue:`5270`)\n\n* Some issues with ``depfile`` generation were resolved.\n  Patches by Eli Schwartz.  (Github issues :issue:`5279`, :issue:`5291`)\n\n* Some C code issue were resolved for the Limited API target.\n  (Github issues :issue:`5264`, :issue:`5265`, :issue:`5266`)\n\n* The C code shown in the annotated HTML output could lack the last C code line(s).\n\n\n3.0.0 beta 1 (2023-02-25)\n=========================\n\nFeatures added\n--------------\n\n* Cython implemented C functions now propagate exceptions by default, rather than\n  swallowing them in non-object returning function if the user forgot to add an\n  ``except`` declaration to the signature.  This was a long-standing source of bugs,\n  but can require adding the ``noexcept`` declaration to existing functions if\n  exception propagation is really undesired.\n  (Github issue :issue:`4280`)\n\n* To opt out of the new, safer exception handling behaviour, legacy code can set the new\n  directive ``legacy_implicit_noexcept=True`` for a transition period to keep the\n  previous, unsafe behaviour.  This directive will eventually be removed in a later release.\n  Patch by Matúš Valo.  (Github issue :issue:`5094`)\n\n* A new function decorator ``@cython.ufunc`` automatically generates a (NumPy) ufunc that\n  applies the calculation function to an entire memoryview.\n  (Github issue :issue:`4758`)\n\n* The ``**`` power operator now behaves more like in Python by returning the correct complex\n  result if required by math.  A new ``cpow`` directive was added to turn on the previous\n  C-like behaviour.\n  (Github issue :issue:`4936`)\n\n* The special ``__*pow__`` methods now support the 2- and 3-argument variants.\n  (Github issue :issue:`5160`)\n\n* Unknown type annotations (e.g. because of typos) now emit a warning at compile time.\n  Patch by Matúš Valo.  (Github issue :issue:`5070`)\n\n* Subscripted builtin types in type declarations (like ``list[float]``) are now\n  better supported.\n  (Github issue :issue:`5058`)\n\n* Python's ``memoryview`` is now a known builtin type with optimised properties.\n  (Github issue :issue:`3798`)\n\n* The call-time dispatch for fused memoryview types is less slow.\n  (Github issue :issue:`5073`)\n\n* Integer comparisons avoid Python coercions if possible.\n  (Github issue :issue:`4821`)\n\n* The Python Enum of a ``cpdef enum`` now inherits from ``IntFlag`` to better match\n  both Python and C semantics of enums.\n  (Github issue :issue:`2732`)\n\n* `PEP-614`_:\n  decorators can now be arbitrary Python expressions.\n  (Github issue :issue:`4570`)\n\n* ``cpdef`` enums can now be pickled.\n  (Github issue :issue:`5120`)\n\n* Bound C methods can now coerce to Python objects.\n  (Github issues :issue:`4890`, :issue:`5062`)\n\n* C arrays can be initialised inside of nogil functions.\n  Patch by Matúš Valo.  (Github issue :issue:`1662`)\n\n* ``reversed()`` can now be used together with C++ iteration.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5002`)\n\n* Standard C/C++ atomic operations are now used for memory views, if available.\n  (Github issue :issue:`4925`)\n\n* C11 ``complex.h`` is now properly detected.\n  (Github issue :issue:`2513`)\n\n* Nested ``cppclass`` definitions are supported.\n  Patch by samaingw.  (Github issue :issue:`1218`)\n\n* ``cpp_locals`` no longer have to be \"assignable\".\n  (Github issue :issue:`4558`)\n\n* ``cythonize --help`` now also prints information about the supported environment variables.\n  Patch by Matúš Valo.  (Github issue :issue:`1711`)\n\n* Declarations were added for the C++ bit operations, some other parts of C++20 and CPython APIs.\n  Patches by Jonathan Helgert, Dobatymo, William Ayd and Max Bachmann.\n  (Github issues :issue:`4962`, :issue:`5101`, :issue:`5157`, :issue:`5163`, :issue:`5257`)\n\nBugs fixed\n----------\n\n* Generator expressions and comprehensions now look up their outer-most iterable\n  on creation, as Python does, and not later on start, as they did previously.\n  (Github issue :issue:`1159`)\n\n* Type annotations for Python ``int`` rejected ``long`` under Py2 in the alpha-11 release.\n  They are now ignored again (as always before) when ``language_level=2``, and accept\n  both ``int`` and ``long`` in Py2 (and only ``int`` in Py3) otherwise.\n  (Github issue :issue:`4944`)\n\n* Calling bound classmethods of builtin types could fail trying to call the unbound method.\n  (Github issue :issue:`5051`)\n\n* ``int(Py_UCS4)`` returned the code point instead of the parsed digit value.\n  (Github issue :issue:`5216`)\n\n* Several problems with CPython 3.12 were resolved.\n  (Github issue :issue:`5238`)\n\n* The C ``float`` type was not inferred on assignments.\n  (Github issue :issue:`5234`)\n\n* Memoryviews with ``object`` item type were not supported in Python type declarations.\n  (Github issue :issue:`4907`)\n\n* Iterating over memoryviews in generator expressions could leak a buffer reference.\n  (Github issue :issue:`4968`)\n\n* Memory views and the internal Cython array type now identify as ``collections.abc.Sequence``\n  by setting the ``Py_TPFLAGS_SEQUENCE`` type flag directly.\n  (Github issue :issue:`5187`)\n\n* ``__del__`` finaliser methods were not always called if they were only inherited.\n  (Github issue :issue:`4995`)\n\n* Extension types are now explicitly marked as immutable types to prevent them from\n  being considered mutable.\n  Patch by Max Bachmann.  (Github issue :issue:`5023`)\n\n* ``const`` types could not be returned from functions.\n  Patch by Mike Graham.  (Github issue :issue:`5135`)\n\n* ``cdef public`` functions declared in .pxd files could use an incorrectly mangled C name.\n  Patch by EpigeneMax.  (Github issue :issue:`2940`)\n\n* ``cdef public`` functions used an incorrect linkage declaration in C++.\n  Patch by Maximilien Colange.  (Github issue :issue:`1839`)\n\n* C++ post-increment/-decrement operators were not correctly looked up on declared C++\n  classes, thus allowing Cython declarations to be missing for them and incorrect C++\n  code to be generated.\n  Patch by Max Bachmann.  (Github issue :issue:`4536`)\n\n* C++ iteration more safely stores the iterable in temporary variables.\n  Patch by Xavier.  (Github issue :issue:`3828`)\n\n* C++ references did not work on fused types.\n  (Github issue :issue:`4717`)\n\n* The module state struct was not initialised in correct C (before C23), leading to\n  compile errors on Windows.\n  Patch by yudonglin.  (Github issue :issue:`5169`)\n\n* Structs that contained an array field resulted in incorrect C code.  Their initialisation\n  now uses ``memcpy()``.\n  Patch by Chia-Hsiang Cheng.  (Github issue :issue:`5178`)\n\n* Nesting fused types in other fused types could fail to specialise the inner type.\n  (Github issue :issue:`4725`)\n\n* The special methods ``__matmul__``, ``__truediv__``, ``__floordiv__`` failed to type\n  their ``self`` argument.\n  (Github issue :issue:`5067`)\n\n* Coverage analysis failed in projects with a separate source subdirectory.\n  Patch by Sviatoslav Sydorenko and Ruben Vorderman.  (Github issue :issue:`3636`)\n\n* The ``annotation_typing`` directive was missing in pure Python mode.\n  Patch by 0dminnimda.  (Github issue :issue:`5194`)\n\n* The ``@dataclass`` directive was accidentally inherited by methods and subclasses.\n  (Github issue :issue:`4953`)\n\n* Some issues with Cython ``@dataclass`` arguments, hashing, inheritance and ``repr()``\n  were resolved.  (Github issues :issue:`4956`, :issue:`5046`)\n\n* ``cpdef`` enums no longer use ``OrderedDict`` but ``dict`` in Python 3.6 and later.\n  Patch by GalaxySnail.  (Github issue :issue:`5180`)\n\n* Larger numbers of extension types with multiple subclasses could take very long to compile.\n  Patch by Scott Wolchok.  (Github issue :issue:`5139`)\n\n* Relative imports failed in compiled ``__init__.py`` package modules.\n  Patch by Matúš Valo.  (Github issue :issue:`3442`)\n\n* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n  Patch by Matúš Valo.  (Github issue :issue:`4640`)\n\n* The ``cython`` and ``cythonize`` commands ignored non-existing input files without error.\n  Patch by Matúš Valo.  (Github issue :issue:`4629`)\n\n* Invalid and misspelled ``cython.*`` module names were not reported as errors.\n  (Github issue :issue:`4947`)\n\n* Unused ``**kwargs`` arguments did not show up in ``locals()``.\n  (Github issue :issue:`4899`)\n\n* Extended glob paths with ``/**/`` and ``\\**\\`` for finding source files failed on Windows.\n\n* Annotated HTML generation was missing newlines in 3.0.0a11.\n  (Github issue :issue:`4945`)\n\n* Some parser issues were resolved.\n  (Github issue :issue:`4992`)\n\n* ``setup.cfg`` was missing from the source distribution.\n  (Github issue :issue:`5199`)\n\n* Some C/C++ warnings were resolved.\n  Patches by Max Bachmann, Alexander Shadchin, at al.\n  (Github issues :issue:`5004`, :issue:`5005`, :issue:`5019`, :issue:`5029`, :issue:`5096`)\n\n* The embedding code no longer calls deprecated C-API functions but uses the new ``PyConfig``\n  API instead on CPython versions that support it (3.8+).\n  Patch by Alexander Shadchin.  (Github issue :issue:`4895`)\n\n* Intel C compilers could complain about unsupported gcc pragmas.\n  Patch by Ralf Gommers.  (Github issue :issue:`5052`)\n\n* Includes all bug-fixes and features from the 0.29 maintenance branch\n  up to the :ref:`0.29.33` release.\n\nOther changes\n-------------\n\n* The undocumented, untested and apparently useless syntax\n  ``from somemodule cimport class/struct/union somename`` was removed.  The type\n  modifier is not needed here and a plain ``cimport`` of the name will do.\n  (Github issue :issue:`4904`)\n\n* C-style array declarations (``cdef int a[4]``) are now (silently) deprecated in\n  favour of the Java-style ``cdef int[4] a`` form.  The latter was always available\n  and the Python type declaration syntax already used it exclusively (``a: int[4]``).\n  Patch by Matúš Valo.  (Github issue :issue:`5248`)\n\n* The wheel building process was migrated to use the ``cibuildwheel`` tool.\n  Patch by Thomas Li.  (Github issue :issue:`4736`)\n\n* Wheels now include a compiled parser again, which increases their size a little\n  but gives about a 10% speed-up when running Cython.\n\n* The ``Tempita`` module no longer contains HTML processing capabilities, which\n  were found to be broken in Python 3.8 and later.\n  Patch by Marcel Stimberg.  (Github issue :issue:`3309`)\n\n* The Emacs Cython mode file ``cython-mode.el`` is now maintained in a separate repo:\n  https://github.com/cython/emacs-cython-mode\n\n* Cython now uses a ``.dev0`` version suffix for unreleased source installations.\n\n\n3.0.0 alpha 11 (2022-07-31)\n===========================\n\nFeatures added\n--------------\n\n* A new decorator ``@cython.dataclasses.dataclass`` was implemented that provides\n  compile time dataclass generation capabilities to ``cdef`` classes (extension types).\n  Patch by David Woods.  (Github issue :issue:`2903`).  ``kw_only`` dataclasses\n  added by Yury Sokov.  (Github issue :issue:`4794`)\n\n* Named expressions (PEP 572) aka. assignment expressions (aka. the walrus operator\n  ``:=``) were implemented.\n  Patch by David Woods.  (Github issue :issue:`2636`)\n\n* Context managers can be written in parentheses.\n  Patch by David Woods.  (Github issue :issue:`4814`)\n\n* Cython avoids raising ``StopIteration`` in ``__next__`` methods when possible.\n  Patch by David Woods.  (Github issue :issue:`3447`)\n\n* Some C++ and CPython library declarations were extended and fixed.\n  Patches by Max Bachmann, Till Hoffmann, Julien Jerphanion, Wenjun Si.\n  (Github issues :issue:`4530`, :issue:`4528`, :issue:`4710`, :issue:`4746`,\n  :issue:`4751`, :issue:`4818`, :issue:`4762`, :issue:`4910`)\n\n* The ``cythonize`` and ``cython`` commands have a new option ``-M`` / ``--depfile``\n  to generate ``.dep`` dependency files for the compilation unit.  This can be used\n  by external build tools to track these dependencies.\n  The ``cythonize`` option was already available in Cython :ref:`0.29.27`.\n  Patches by Evgeni Burovski and Eli Schwartz.  (Github issue :issue:`1214`)\n\n* ``cythonize()`` and the corresponding CLI command now regenerate the output files\n  also when they already exist but were generated by a different Cython version.\n\n* Memory views and the internal Cython array type now identify as ``collections.abc.Sequence``.\n  Patch by David Woods.  (Github issue :issue:`4817`)\n\n* Cython generators and coroutines now identify as ``CO_ASYNC_GENERATOR``,\n  ``CO_COROUTINE`` and ``CO_GENERATOR`` accordingly.\n  (Github issue :issue:`4902`)\n\n* Memory views can use atomic CPU instructions instead of locks in more cases.\n  Patch by Sam Gross.  (Github issue :issue:`4912`)\n\n* The environment variable ``CYTHON_FORCE_REGEN=1`` can be used to force ``cythonize``\n  to regenerate the output files regardless of modification times and changes.\n\n* A new Cython build option ``--cython-compile-minimal`` was added to compile only a\n  smaller set of Cython's own modules, which can be used to reduce the package\n  and install size.\n\n* Improvements to ``PyTypeObject`` definitions in pxd wrapping of libpython.\n  Patch by John Kirkham. (Github issue :issue:`4699`)\n\n\nBugs fixed\n----------\n\n* Decorators like ``@cfunc`` and ``@ccall`` could leak into nested functions and classes.\n  Patch by David Woods.  (Github issue :issue:`4092`)\n\n* Exceptions within for-loops that run over memoryviews could lead to a ref-counting error.\n  Patch by David Woods.  (Github issue :issue:`4662`)\n\n* Using memoryview arguments in closures of inner functions could lead to ref-counting errors.\n  Patch by David Woods.  (Github issue :issue:`4798`)\n\n* Several optimised string methods failed to accept ``None`` as arguments to their options.\n  Test patch by Kirill Smelkov.  (Github issue :issue:`4737`)\n\n* A regression in 3.0.0a10 was resolved that prevented property setter methods from\n  having the same name as their value argument.\n  Patch by David Woods.  (Github issue :issue:`4836`)\n\n* Typedefs for the ``bint`` type did not always behave like ``bint``.\n  Patch by Nathan Manville and 0dminnimda.  (Github issue :issue:`4660`)\n\n* The return type of a fused function is no longer ignored for function pointers,\n  since it is relevant when passing them e.g. as argument into other fused functions.\n  Patch by David Woods.  (Github issue :issue:`4644`)\n\n* The ``__self__`` attribute of fused functions reports its availability correctly\n  with ``hasattr()``.  Patch by David Woods.\n  (Github issue :issue:`4808`)\n\n* ``pyximport`` no longer uses the deprecated ``imp`` module.\n  Patch by Matúš Valo.  (Github issue :issue:`4560`)\n\n* ``pyximport`` failed for long filenames on Windows.\n  Patch by Matti Picus.  (Github issue :issue:`4630`)\n\n* The generated C code failed to compile in CPython 3.11a4 and later.\n  (Github issue :issue:`4500`)\n\n* A case of undefined C behaviour was resolved in the list slicing code.\n  Patch by Richard Barnes.  (Github issue :issue:`4734`)\n\n* Using the Limited API could report incorrect line numbers in tracebacks.\n\n* A work-around for StacklessPython < 3.8 was disabled in Py3.8 and later.\n  (Github issue :issue:`4329`)\n\n* Improve conversion between function pointers with non-identical but\n  compatible exception specifications.  Patches by David Woods.\n  (Github issues :issue:`4770`, :issue:`4689`)\n\n* The runtime size check for imported ``PyVarObject`` types was improved\n  to reduce false positives and adapt to Python 3.11.\n  Patch by David Woods.  (Github issues :issue:`4827`, :issue:`4894`)\n\n* The generated modules no longer import NumPy internally when using\n  fused types but no memoryviews.\n  Patch by David Woods.  (Github issue :issue:`4935`)\n\n* Improve compatibility with forthcoming CPython 3.12 release.\n\n* Limited API C preprocessor warning is compatible with MSVC. Patch by\n  Victor Molina Garcia.  (Github issue :issue:`4826`)\n\n* Some C compiler warnings were fixed.\n  Patch by mwtian.  (Github issue :issue:`4831`)\n\n* The parser allowed some invalid spellings of ``...``.\n  Patch by 0dminnimda.  (Github issue :issue:`4868`)\n\n* Includes all bug-fixes and features from the 0.29 maintenance branch\n  up to the :ref:`0.29.32` release.\n\nOther changes\n-------------\n\n* When using type annotations, ``func(x: list)`` or ``func(x: ExtType)`` (and other\n  Python builtin or extension types) no longer allow ``None`` as input argument to ``x``.\n  This is consistent with the normal typing semantics in Python, and was a common gotcha\n  for users who did not expect ``None`` to be allowed as input.  To allow ``None``, use\n  ``typing.Optional`` as in ``func(x: Optional[list])``.  ``None`` is also automatically\n  allowed when it is used as default argument, i.e. ``func(x: list = None)``.\n  ``int`` and ``float`` are now also recognised in type annotations and restrict the\n  value type at runtime.  They were previously ignored.\n  Note that, for backwards compatibility reasons, the new behaviour does not apply when using\n  Cython's C notation, as in ``func(list x)``.  Here, ``None`` is still allowed, as always.\n  Also, the ``annotation_typing`` directive can now be enabled and disabled more finely\n  within the module.\n  (Github issues :issue:`3883`, :issue:`2696`, :issue:`4669`, :issue:`4606`, :issue:`4886`)\n\n* The compile-time ``DEF`` and ``IF`` statements are deprecated and generate a warning.\n  They should be replaced with normal constants, code generation or C macros.\n  (Github issue :issue:`4310`)\n\n* Reusing an extension type attribute name as a method name is now an error.\n  Patch by 0dminnimda.  (Github issue :issue:`4661`)\n\n* Improve compatibility between classes pickled in Cython 3.0 and 0.29.x\n  by accepting MD5, SHA-1 and SHA-256 checksums.\n  (Github issue :issue:`4680`)\n\n\n3.0.0 alpha 10 (2022-01-06)\n===========================\n\nFeatures added\n--------------\n\n* ``Cython.Distutils.build_ext`` now uses ``cythonize()`` internally (previously\n  known as ``new_build_ext``), while still supporting the options that were\n  available in the old implementation (``old_build_ext``).\n  Patch by Matúš Valo.  (Github issue :issue:`3541`)\n\n* ``pyximport`` now uses ``cythonize()`` internally.\n  Patch by Matúš Valo.  (Github issue :issue:`2304`)\n\n* ``__del__(self)`` on extension types now maps to ``tp_finalize`` in Python 3.\n  Original patch by ax487.  (Github issue :issue:`3612`)\n\n* Conversion from Python dict to C++ map now supports arbitrary Python mappings,\n  not just dicts.\n\n* Direct assignments to C++ references are now allowed.\n  Patch by David Woods.  (Github issue :issue:`1863`)\n\n* An initial set of adaptations for GraalVM Python was implemented.  Note that\n  this does not imply any general support for this target or that your code\n  will work at all in this environment.  But testing should be possible now.\n  Patch by David Woods.  (Github issue :issue:`4328`)\n\n* ``PyMem_[Raw]Calloc()`` was added to the ``cpython.mem`` declarations.\n  Note that the ``Raw`` versions are no longer #defined by Cython.  The previous\n  macros were not considered safe.\n  Patch by William Schwartz and David Woods.  (Github issue :issue:`3047`)\n\nBugs fixed\n----------\n\n* Circular imports of compiled modules could fail needlessly even when the import\n  could already be resolved from ``sys.modules``.\n  Patch by Syam Gadde.  (Github issue :issue:`4390`)\n\n* The GIL can now safely be released inside of ``nogil`` functions (which may actually\n  be called with the GIL held at runtime).\n  Patch by David Woods.  (Github issue :issue:`4137`)\n\n* Type errors when passing memory view arguments could leak buffer references.\n  Patch by David Woods.  (Github issue :issue:`4296`)\n\n* Cython did not type the ``self`` argument in special binary methods.\n  Patch by David Woods.  (Github issue :issue:`4434`)\n\n* An incompatibility with recent coverage.py versions was resolved.\n  Patch by David Woods.  (Github issue :issue:`4440`)\n\n* Fused typed default arguments generated incorrect code.\n  Patch by David Woods.  (Github issue :issue:`4413`)\n\n* ``prange`` loops generated incorrect code when ``cpp_locals`` is enabled.\n  Patch by David Woods.  (Github issue :issue:`4354`)\n\n* A C-level compatibility issue with recent NumPy versions was resolved.\n  Patch by David Woods.  (Github issue :issue:`4396`)\n\n* Decorators on inner functions were not evaluated in the right scope.\n  Patch by David Woods.  (Github issue :issue:`4367`)\n\n* Very early errors during module initialisation could lead to crashes.\n  Patch by David Woods.  (Github issue :issue:`4377`)\n\n* Fused functions were binding unnecessarily, which prevented them from being pickled.\n  Patch by David Woods.  (Github issue :issue:`4370`)\n\n* Some constant tuples containing strings were not deduplicated.\n  Patch by David Woods.  (Github issue :issue:`4353`)\n\n* Unsupported decorators on cdef functions were not rejected in recent releases.\n  Patch by David Woods.  (Github issue :issue:`4322`)\n\n* The excess arguments in a for-in-range loop with more than 3 arguments to `range()`\n  were silently ignored.\n  Original patch by Max Bachmann. (Github issue :issue:`4550`)\n\n* Python object types were not allowed as ``->`` return type annotations.\n  Patch by Matúš Valo.  (Github issue :issue:`4433`)\n\n* Default values for memory views arguments were not properly supported.\n  Patch by Corentin Cadiou.  (Github issue :issue:`4313`)\n\n* Templating C++ classes with memory view types lead to buggy code and is now rejected.\n  Patch by David Woods.  (Github issue :issue:`3085`)\n\n* Several C++ library declarations were added and fixed.\n  Patches by Dobatymo, account-login, Jonathan Helgert, Evgeny Yakimov, GalaxySnail, Max Bachmann.\n  (Github issues :issue:`4408`, :issue:`4419`, :issue:`4410`, :issue:`4395`,\n  :issue:`4423`, :issue:`4448`, :issue:`4462`, :issue:`3293`, :issue:`4522`,\n  :issue:`2171`, :issue:`4531`)\n\n* Some compiler problems and warnings were resolved.\n  Patches by David Woods, 0dminnimda, Nicolas Pauss and others.\n  (Github issues :issue:`4317`, :issue:`4324`, :issue:`4361`, :issue:`4357`)\n\n* The ``self`` argument of static methods in .pxd files was incorrectly typed.\n  Patch by David Woods.  (Github issue :issue:`3174`)\n\n* A name collision when including multiple generated API header files was resolved.\n  Patch by David Woods.  (Github issue :issue:`4308`)\n\n* An endless loop in ``cython-mode.el`` was resolved.\n  Patch by Johannes Mueller.  (Github issue :issue:`3218`)\n\n* ``_Py_TPFLAGS_HAVE_VECTORCALL`` was always set on extension types when using the limited API.\n  Patch by David Woods.  (Github issue :issue:`4453`)\n\n* Some compatibility issues with PyPy were resolved.\n  Patches by Max Bachmann, Matti Picus.\n  (Github issues :issue:`4454`, :issue:`4477`, :issue:`4478`, :issue:`4509`, :issue:`4517`)\n\n* A compiler crash when running Cython thread-parallel from distutils was resolved.\n  (Github issue :issue:`4503`)\n\n* Includes all bug-fixes from the :ref:`0.29.26` release.\n\nOther changes\n-------------\n\n* A warning was added when ``__defaults__`` or ``__kwdefaults__`` of Cython compiled\n  functions were re-assigned, since this does not current have an effect.\n  Patch by David Woods.  (Github issue :issue:`2650`)\n\n\n3.0.0 alpha 9 (2021-07-21)\n==========================\n\nFeatures added\n--------------\n\n* Declarations for ``libcpp.algorithms``, ``libcpp.set`` and ``libcpp.unordered_set``\n  were extended.\n  Patch by David Woods.  (Github issues :issue:`4271`, :issue:`4273`)\n\n* ``cygdb`` has a new option ``--skip-interpreter`` that allows using a different\n  Python runtime than the one used to generate the debugging information.\n  Patch by Alessandro Molina.  (Github issue :issue:`4186`)\n\nBugs fixed\n----------\n\n* Several issues with the new ``cpp_locals`` directive were resolved and\n  its test coverage improved.\n  Patch by David Woods.  (Github issues :issue:`4266`, :issue:`4265`)\n\n* Generated utility code for C++ conversions no longer depends on several user\n  definable directives that may make it behave incorrectly.\n  Patch by David Woods.  (Github issue :issue:`4206`)\n\n* A reference counting bug in the new ``@cython.total_ordering`` decorator was fixed.\n\n* Includes all bug-fixes from the :ref:`0.29.24` release.\n\nOther changes\n-------------\n\n* Parts of the documentation were (and are being) rewritten to show the\n  Cython language syntax next to the equivalent Python syntax.\n  Patches by 0dminnimda and Matúš Valo.  (Github issue :issue:`4187`)\n\n\n3.0.0 alpha 8 (2021-07-02)\n==========================\n\nFeatures added\n--------------\n\n* A ``@cython.total_ordering`` decorator has been added to automatically\n  implement all comparison operators, similar to ``functools.total_ordering``.\n  Patch by Spencer Brown.  (Github issue :issue:`2090`)\n\n* A new directive ``cpp_locals`` was added that allows local C++ variables to\n  be lazily initialised (without default constructor), thus making them behave\n  more like Python variables.\n  Patch by David Woods.  (Github issue :issue:`4160`)\n\n* C++17 execution policies are supported in ``libcpp.algorithm``.\n  Patch by Ashwin Srinath.  (Github issue :issue:`3790`)\n\n* New C feature flags: ``CYTHON_USE_MODULE_STATE``, ``CYTHON_USE_TYPE_SPECS``\n  Both are currently considered experimental.\n  (Github issue :issue:`3611`)\n\n* ``[...] * N`` is optimised for C integer multipliers ``N``.\n  (Github issue :issue:`3922`)\n\nBugs fixed\n----------\n\n* The dispatch code for binary operators to special methods could run into infinite recursion.\n  Patch by David Woods.  (Github issue :issue:`4172`)\n\n* Code optimisations were not applied to methods of Cython implemented C++ classes.\n  Patch by David Woods.  (Github issue :issue:`4212`)\n\n* The special ``cython`` module was not always detected in PEP-484 type annotations.\n  Patch by David Woods.  (Github issue :issue:`4243`)\n\n* Conversion from Python dicts to ``std::map`` was broken.\n  Patch by David Woods and Mikkel Skofelt.  (Github issues :issue:`4231`, :issue:`4228`)\n\n* The exception handling annotation ``except +*`` was broken.\n  Patch by David Woods.  (Github issues :issue:`3065`, :issue:`3066`)\n\n* Attribute annotations in Python classes are now ignored, because they are\n  just Python objects in a dict (as opposed to the fields of extension types).\n  Patch by David Woods.  (Github issues :issue:`4196`, :issue:`4198`)\n\n* An unnecessary slow-down at import time was removed from ``Cython.Distutils``.\n  Original patch by Anthony Sottile.  (Github issue :issue:`4224`)\n\n* Python modules were not automatically recompiled when only their ``.pxd`` file changed.\n  Patch by Golden Rockefeller.  (Github issue :issue:`1428`)\n\n* The signature of ``PyFloat_FromString()`` in ``cpython.float`` was changed\n  to match the signature in Py3.  It still has an automatic fallback for Py2.\n  (Github issue :issue:`3909`)\n\n* A compile error on MSVC was resolved.\n  Patch by David Woods.  (Github issue :issue:`4202`)\n\n* A C compiler warning in PyPy3 regarding ``PyEval_EvalCode()`` was resolved.\n\n* Directives starting with ``optimization.*`` in pure Python mode were incorrectly named.\n  It should have been ``optimize.*``.\n  Patch by David Woods.  (Github issue :issue:`4258`)\n\nOther changes\n-------------\n\n* Variables can no longer be declared with ``cpdef``.\n  Patch by David Woods.  (Github issue :issue:`887`)\n\n* Support for the now unsupported Pyston V1 was removed in favour of Pyston V2.\n  Patch by Marius Wachtler.  (Github issue :issue:`4211`)\n\n* The ``Cython.Build.BuildExecutable`` tool no longer executes the program automatically.\n  Use ``cythonrun`` for that.\n\n\n3.0.0 alpha 7 (2021-05-24)\n==========================\n\nFeatures added\n--------------\n\n* A ``cimport`` is now supported in pure Python code by prefixing the\n  imported module name with ``cython.cimports.``, e.g.\n  ``from cython.cimports.libc.math import sin``.\n  (GIthub issue :issue:`4190`)\n\n* ``__class_getitem__`` (`PEP-560`_) is supported for cdef classes.\n  Patch by Kmol Yuan.  (Github issue :issue:`3764`)\n\n* ``__mro_entries__`` (`PEP-560`_) is supported for Python classes.\n  Patch by David Woods.  (Github issue :issue:`3537`)\n\n* ``cython.array`` supports simple, non-strided views.\n  (Github issue :issue:`3775`)\n\n* Self-documenting f-strings (``=``) were implemented.\n  Patch by davfsa.  (Github issue :issue:`3796`)\n\n* The destructor is now called for fields in C++ structs.\n  Patch by David Woods.  (Github issue :issue:`3226`)\n\n* ``std::move()`` is now also called for temps during ``yield``.\n  Patch by Yu Feng.  (Github issue :issue:`4154`)\n\n* ``asyncio.iscoroutinefunction()`` now recognises coroutine functions\n  also when compiled by Cython.\n  Patch by Pedro Marques da Luz.  (Github issue :issue:`2273`)\n\n* C compiler warnings and errors are now shown in Jupyter notebooks.\n  Patch by Egor Dranischnikow.  (Github issue :issue:`3751`)\n\n* ``float(…)`` is optimised for string arguments (str/bytes/bytearray).\n\n* Converting C++ containers to Python lists uses less memory allocations.\n  Patch by Max Bachmann.  (Github issue :issue:`4081`)\n\n* Docstrings of ``cpdef`` enums are now copied to the enum class.\n  Patch by matham.  (Github issue :issue:`3805`)\n\n* The type ``cython.Py_hash_t`` is available in Python mode.\n\n* C-API declarations for ``cpython.fileobject`` were added.\n  Patch by Zackery Spytz.  (Github issue :issue:`3906`)\n\n* C-API declarations for context variables in Python 3.7 were added.\n  Original patch by Zolisa Bleki.  (Github issue :issue:`2281`)\n\n* More C-API declarations for ``cpython.datetime``  were added.\n  Patch by Bluenix2.  (Github issue :issue:`4128`)\n\n* A new module ``cpython.time`` was added with some low-level alternatives to\n  Python's ``time`` module.\n  Patch by Brock Mendel.  (Github issue :issue:`3767`)\n\n* The value ``PyBUF_MAX_NDIM`` was added to the ``cpython.buffer`` module.\n  Patch by John Kirkham.  (Github issue :issue:`3811`)\n\n* \"Declaration after use\" is now an error for variables.\n  Patch by David Woods.  (Github issue :issue:`3976`)\n\n* More declarations for C++ string methods were added.\n\n* Cython now detects when existing output files were not previously generated\n  by itself and refuses to overwrite them.  It is a common mistake to name\n  the module file of a wrapper after the library (source file) that it wraps,\n  which can lead to surprising errors when the file gets overwritten.\n\nBugs fixed\n----------\n\n* Annotations were not exposed on annotated (data-)classes.\n  Patch by matsjoyce.  (Github issue :issue:`4151`)\n\n* Inline functions and other code in ``.pxd`` files could accidentally\n  inherit the compiler directives of the ``.pyx`` file that imported them.\n  Patch by David Woods.  (Github issue :issue:`1071`)\n\n* Some issues were resolved that could lead to duplicated C names.\n  Patch by David Woods.  (Github issue :issue:`3716`, :issue:`3741`, :issue:`3734`)\n\n* Modules with unicode names failed to build on Windows.\n  Patch by David Woods.  (Github issue :issue:`4125`)\n\n* ``ndarray.shape`` failed to compile with Pythran and recent NumPy.\n  Patch by Serge Guelton.  (Github issue :issue:`3762`)\n\n* Casting to ctuples is now allowed.\n  Patch by David Woods.  (Github issue :issue:`3808`)\n\n* Structs could not be instantiated with positional arguments in\n  pure Python mode.\n\n* Literal list assignments to pointer variables declared in PEP-526\n  notation failed to compile.\n\n* Nested C++ types were not usable through ctypedefs.\n  Patch by Vadim Pushtaev.  (Github issue :issue:`4039`)\n\n* Overloaded C++ static methods were lost.\n  Patch by Ashwin Srinath.  (Github :issue:`1851`)\n\n* Cython compiled functions always provided a ``__self__`` attribute,\n  regardless of being used as a method or not.\n  Patch by David Woods.  (Github issue :issue:`4036`)\n\n* Calls to ``.__class__()`` of a known extension type failed.\n  Patch by David Woods.  (Github issue :issue:`3954`)\n\n* Generator expressions in pxd-overridden ``cdef`` functions could\n  fail to compile.\n  Patch by Matúš Valo.  (Github issue :issue:`3477`)\n\n* A reference leak on import failures was resolved.\n  Patch by Max Bachmann.  (Github issue :issue:`4056`)\n\n* A C compiler warning about unused code was resolved.\n  (Github issue :issue:`3763`)\n\n* A C compiler warning about enum value casting was resolved in GCC.\n  (Github issue :issue:`2749`)\n\n* Some C compiler warninge were resolved.\n  Patches by Max Bachmann.  (Github issue :issue:`4053`, :issue:`4059`, :issue:`4054`, :issue:`4148`, :issue:`4162`)\n\n* A compile failure for C++ enums in Py3.4 / MSVC was resolved.\n  Patch by Ashwin Srinath.  (Github issue :issue:`3782`)\n\n* Some C++ STL methods did not propagate exceptions.\n  Patch by Max Bachmann.  (Github issue :issue:`4079`)\n\n* An unsupported C-API call in PyPy was fixed.\n  Patch by Max Bachmann.  (Github issue :issue:`4055`)\n\n* The Cython ``CodeWriter`` mishandled no-argument ``return`` statements.\n  Patch by Tao He.  (Github issue :issue:`3795`)\n\n* ``complex`` wasn't supported in PEP-484 type annotations.\n  Patch by David Woods.  (Github issue :issue:`3949`)\n\n* Default arguments of methods were not exposed for introspection.\n  Patch by Vladimir Matveev.  (Github issue :issue:`4061`)\n\n* Extension types inheriting from Python classes could not safely\n  be exposed in ``.pxd``  files.\n  (Github issue :issue:`4106`)\n\n* The profiling/tracing code was adapted to work with Python 3.10b1.\n\n* The internal CPython macro ``Py_ISSPACE()`` is no longer used.\n  Original patch by Andrew Jones.  (Github issue :issue:`4111`)\n\n* Includes all bug-fixes from the :ref:`0.29.23` release.\n\n\n3.0.0 alpha 6 (2020-07-31)\n==========================\n\nFeatures added\n--------------\n\n* Special methods for binary operators now follow Python semantics.\n  Rather than e.g. a single ``__add__`` method for cdef classes, where\n  \"self\" can be either the first or second argument, one can now define\n  both ``__add__`` and ``__radd__`` as for standard Python classes.\n  This behavior can be disabled with the ``c_api_binop_methods`` directive\n  to return to the previous semantics in Cython code (available from Cython\n  0.29.20), or the reversed method (``__radd__``) can be implemented in\n  addition to an existing two-sided operator method (``__add__``) to get a\n  backwards compatible implementation.\n  (Github issue :issue:`2056`)\n\n* No/single argument functions now accept keyword arguments by default in order\n  to comply with Python semantics.  The marginally faster calling conventions\n  ``METH_NOARGS`` and ``METH_O`` that reject keyword arguments are still available\n  with the directive ``@cython.always_allow_keywords(False)``.\n  (Github issue :issue:`3090`)\n\n* For-in-loop iteration over ``bytearray`` and memory views is optimised.\n  Patch by David Woods.  (Github issue :issue:`2227`)\n\n* Type inference now works for memory views and slices.\n  Patch by David Woods.  (Github issue :issue:`2227`)\n\n* The ``@returns()`` decorator propagates exceptions by default for suitable C\n  return types when no ``@exceptval()`` is defined.\n  (Github issues :issue:`3625`, :issue:`3664`)\n\n* A low-level inline function ``total_seconds(timedelta)`` was added to\n  ``cpython.datetime`` to bypass the Python method call.  Note that this function\n  is not guaranteed to give exactly the same results for very large time intervals.\n  Patch by Brock Mendel.  (Github issue :issue:`3616`)\n\n* Type inference now understands that ``a, *b = x`` assigns a list to ``b``.\n\n* Limited API support was improved.\n  Patches by Matthias Braun.  (Github issues :issue:`3693`, :issue:`3707`)\n\n* The Cython ``CodeWriter`` can now handle more syntax constructs.\n  Patch by Tao He.  (Github issue :issue:`3514`)\n\nBugs fixed\n----------\n\n* The construct ``for x in cpp_function_call()`` failed to compile.\n  Patch by David Woods.  (Github issue :issue:`3663`)\n\n* C++ references failed to compile when used as Python object indexes.\n  Patch by David Woods.  (Github issue :issue:`3754`)\n\n* The C++ ``typeid()`` function was allowed in C mode.\n  Patch by Celelibi.  (Github issue :issue:`3637`)\n\n* ``repr()`` was assumed to return ``str`` instead of ``unicode`` with ``language_level=3``.\n  (Github issue :issue:`3736`)\n\n* Includes all bug-fixes from the :ref:`0.29.21` release.\n\nOther changes\n-------------\n\n* The ``numpy`` declarations were updated.\n  Patch by Brock Mendel.  (Github issue :issue:`3630`)\n\n* The names of Cython's internal types (functions, generator, coroutine, etc.)\n  are now qualified with the module name of the internal Cython module that is\n  used for sharing them across Cython implemented modules, for example\n  ``_cython_3_0a5.coroutine``.  This was done to avoid making them look like\n  homeless builtins, to help with debugging, and in order to avoid a CPython\n  warning according to https://bugs.python.org/issue20204\n\n3.0.0 alpha 5 (2020-05-19)\n==========================\n\nFeatures added\n--------------\n\n* ``.pxd`` files can now be :ref:`versioned <versioning>` by adding an\n  extension like \"``.cython-30.pxd``\" to prevent older Cython versions (than\n  3.0 in this case) from picking them up.  (Github issue :issue:`3577`)\n\n* Several macros/functions declared in the NumPy API are now usable without\n  holding the GIL.\n\n* `libc.math` was extended to include all C99 function declarations.\n  Patch by Dean Scarff.  (Github issue :issue:`3570`)\n\nBugs fixed\n----------\n\n* Several issues with arithmetic overflow handling were resolved, including\n  undefined behaviour in C.\n  Patch by Sam Sneddon.  (Github issue :issue:`3588`)\n\n* The improved GIL handling in ``nogil`` functions introduced in 3.0a3\n  could fail to acquire the GIL in some cases on function exit.\n  (Github issue :issue:`3590` etc.)\n\n* A reference leak when processing keyword arguments in Py2 was resolved,\n  that appeared in 3.0a1.\n  (Github issue :issue:`3578`)\n\n* The outdated getbuffer/releasebuffer implementations in the NumPy\n  declarations were removed so that buffers declared as ``ndarray``\n  now use the normal implementation in NumPy.\n\n* Includes all bug-fixes from the :ref:`0.29.18` release.\n\n\n3.0.0 alpha 4 (2020-05-05)\n==========================\n\nFeatures added\n--------------\n\n* The ``print`` statement (not the ``print()`` function) is allowed in\n  ``nogil`` code without an explicit ``with gil`` section.\n\n* The ``assert`` statement is allowed in ``nogil`` sections.  Here, the GIL is\n  only acquired if the ``AssertionError`` is really raised, which means that the\n  evaluation of the asserted condition only allows C expressions.\n\n* Cython generates C compiler branch hints for unlikely user defined if-clauses\n  in more cases, when they end up raising exceptions unconditionally. This now\n  includes exceptions being raised in ``nogil``/``with gil`` sections.\n\n* Some internal memoryview functions were tuned to reduce object overhead.\n\nBugs fixed\n----------\n\n* Exception position reporting could run into race conditions on threaded code.\n  It now uses function-local variables again.\n\n* Error handling early in the module init code could lead to a crash.\n\n* Error handling in ``cython.array`` creation was improved to avoid calling\n  C-API functions with an error held.\n\n* Complex buffer item types of structs of arrays could fail to validate.\n  Patch by Leo and smutch.  (Github issue :issue:`1407`)\n\n* When importing the old Cython ``build_ext`` integration with distutils, the\n  additional command line arguments leaked into the regular command.\n  Patch by Kamekameha.  (Github issue :issue:`2209`)\n\n* The improved GIL handling in ``nogil`` functions introduced in 3.0a3\n  could generate invalid C code.\n  (Github issue :issue:`3558`)\n\n* ``PyEval_InitThreads()`` is no longer used in Py3.7+ where it is a no-op.\n\n* Parallel builds of Cython itself (``setup.py build_ext -j N``) failed on Windows.\n\nOther changes\n-------------\n\n* The C property feature has been rewritten and now requires C property methods\n  to be declared ``inline`` (:issue:`3571`).\n\n\n3.0.0 alpha 3 (2020-04-27)\n==========================\n\nFeatures added\n--------------\n\n* ``nogil`` functions now avoid acquiring the GIL on function exit if possible\n  even if they contain ``with gil`` blocks.\n  (Github issue :issue:`3554`)\n\n* Python private name mangling now falls back to unmangled names for non-Python\n  globals, since double-underscore names are not uncommon in C.  Unmangled Python\n  names are also still found as a legacy fallback but produce a warning.\n  Patch by David Woods.  (Github issue :issue:`3548`)\n\nBugs fixed\n----------\n\n* Includes all bug-fixes from the :ref:`0.29.17` release.\n\n\n3.0.0 alpha 2 (2020-04-23)\n==========================\n\nFeatures added\n--------------\n\n* ``std::move()`` is now used in C++ mode for internal temp variables to\n  make them work without copying values.\n  Patch by David Woods.  (Github issues :issue:`3253`, :issue:`1612`)\n\n* ``__class_getitem__`` is supported for types on item access (`PEP-560`_).\n  Patch by msg555.  (Github issue :issue:`2753`)\n\n* The simplified Py3.6 customisation of class creation is implemented (`PEP-487`_).\n  (Github issue :issue:`2781`)\n\n* Conditional blocks in Python code that depend on ``cython.compiled`` are\n  eliminated at an earlier stage, which gives more freedom in writing\n  replacement Python code.\n  Patch by David Woods.  (Github issue :issue:`3507`)\n\n* ``numpy.import_array()`` is automatically called if ``numpy`` has been cimported\n  and it has not been called in the module code.  This is intended as a hidden\n  fail-safe so user code should continue to call ``numpy.import_array``.\n  Patch by David Woods.  (Github issue :issue:`3524`)\n\n* The Cython AST code serialiser class ``CodeWriter`` in ``Cython.CodeWriter``\n  supports more syntax nodes.\n\n* The fastcall/vectorcall protocols are used for several internal Python calls.\n  (Github issue :issue:`3540`)\n\nBugs fixed\n----------\n\n* With ``language_level=3/3str``, Python classes without explicit base class\n  are now new-style (type) classes also in Py2.  Previously, they were created\n  as old-style (non-type) classes.\n  (Github issue :issue:`3530`)\n\n* C++ ``typeid()`` failed for fused types.\n  Patch by David Woods.  (Github issue :issue:`3203`)\n\n* ``__arg`` argument names in methods were not mangled with the class name.\n  Patch by David Woods.  (Github issue :issue:`1382`)\n\n* Creating an empty unicode slice with large bounds could crash.\n  Patch by Sam Sneddon.  (Github issue :issue:`3531`)\n\n* Decoding an empty bytes/char* slice with large bounds could crash.\n  Patch by Sam Sneddon.  (Github issue :issue:`3534`)\n\n* Temporary buffer indexing variables were not released and could show up in\n  C compiler warnings, e.g. in generators.\n  Patch by David Woods.  (Github issues :issue:`3430`, :issue:`3522`)\n\n* Several C compiler warnings were fixed.\n\n\n3.0.0 alpha 1 (2020-04-12)\n==========================\n\nFeatures added\n--------------\n\n* Cython functions now use the `PEP-590`_ vectorcall protocol in Py3.7+.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2263`)\n\n* Unicode identifiers are supported in Cython code (`PEP-3131`_).\n  Patch by David Woods.  (Github issue :issue:`2601`)\n\n* Unicode module names and imports are supported.\n  Patch by David Woods.  (Github issue :issue:`3119`)\n\n* Annotations are no longer parsed, keeping them as strings following `PEP-563`_.\n  Patch by David Woods.  (Github issue :issue:`3285`)\n\n* Preliminary support for the CPython's ``Py_LIMITED_API`` (stable ABI) is\n  available by setting the  ``CYTHON_LIMITED_API`` C macro.  Note that the\n  support is currently in an early stage and many features do not yet work.\n  You currently still have to define ``Py_LIMITED_API`` externally in order\n  to restrict the API usage.  This will change when the feature stabilises.\n  Patches by Eddie Elizondo and David Woods.  (Github issues :issue:`3223`,\n  :issue:`3311`, :issue:`3501`)\n\n* The dispatch to fused functions is now linear in the number of arguments,\n  which makes it much faster, often 2x or more, and several times faster for\n  larger fused types with many specialisations.\n  Patch by will-ca.  (Github issue :issue:`1385`)\n\n* ``with gil/nogil`` statements can be conditional based on compile-time\n  constants, e.g. fused type checks.\n  Patch by Noam Hershtig.  (Github issue :issue:`2579`)\n\n* ``const`` can be used together with fused types.\n  Patch by Thomas Vincent.  (Github issue :issue:`1772`)\n\n* Reimports of already imported modules are substantially faster.\n  (Github issue :issue:`2854`)\n\n* Positional-only arguments are supported in Python functions (`PEP-570`_).\n  Patch by Josh Tobin.  (Github issue :issue:`2915`)\n\n* The ``volatile`` C modifier is supported in Cython code.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`1667`)\n\n* ``@cython.trashcan(True)`` can be used on an extension type to enable the\n  CPython :ref:`trashcan`. This allows deallocating deeply recursive objects\n  without overflowing the stack. Patch by Jeroen Demeyer.  (Github issue :issue:`2842`)\n\n* Inlined properties can be defined for external extension types.\n  Patch by Matti Picus. (Github issue :issue:`2640`, redone later in :issue:`3571`)\n\n* The ``str()`` builtin now calls ``PyObject_Str()`` instead of going\n  through a Python call.\n  Patch by William Ayd.  (Github issue :issue:`3279`)\n\n* String concatenation can now happen in place if possible, by extending the\n  existing string rather than always creating a new one.\n  Patch by David Woods.  (Github issue :issue:`3453`)\n\n* Multiplication of Python numbers with small constant integers is faster.\n  (Github issue :issue:`2808`)\n\n* Some list copying is avoided internally when a new list needs to be created\n  but we already have a fresh one.\n  (Github issue :issue:`3494`)\n\n* Extension types that do not need their own ``tp_new`` implementation (because\n  they have no object attributes etc.) directly inherit the implementation of\n  their parent type if possible.\n  (Github issue :issue:`1555`)\n\n* The attributes ``gen.gi_frame`` and ``coro.cr_frame`` of Cython compiled\n  generators and coroutines now return an actual frame object for introspection.\n  (Github issue :issue:`2306`)\n\n* Several declarations in ``cpython.*``, ``libc.*`` and ``libcpp.*`` were added.\n  Patches by Jeroen Demeyer, Matthew Edwards, Chris Gyurgyik, Jerome Kieffer\n  and Zackery Spytz.\n  (Github issues :issue:`3468`, :issue:`3332`, :issue:`3202`, :issue:`3188`,\n  :issue:`3179`, :issue:`2891`, :issue:`2826`, :issue:`2713`)\n\n* Deprecated NumPy API usages were removed from ``numpy.pxd``.\n  Patch by Matti Picus.  (Github issue :issue:`3365`)\n\n* ``cython.inline()`` now sets the ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION``\n  C macro automatically when ``numpy`` is imported in the code, to avoid C compiler\n  warnings about deprecated NumPy C-API usage.\n\n* The builtin ``abs()`` function can now be used on C numbers in nogil code.\n  Patch by Elliott Sales de Andrade.  (Github issue :issue:`2748`)\n\n* `PEP-479`_ (``generator_stop``) is now enabled by default with language level 3.\n  (Github issue :issue:`2580`)\n\n* The ``cython.view.array`` type supports inheritance.\n  Patch by David Woods.  (Github issue :issue:`3413`)\n\n* Code annotation accepts a new debugging argument ``--annotate-fullc`` that\n  will include the complete syntax highlighted C file in the HTML output.\n  (Github issue :issue:`2855`)\n\n* ``--no-capture`` added to ``runtests.py`` to prevent stdout/stderr capturing\n  during srctree tests.\n  Patch by Matti Picus.  (Github issue :issue:`2701`)\n\n* ``--no-docstrings`` option added to ``cythonize`` script.\n  Original patch by mo-han.  (Github issue :issue:`2889`)\n\n* ``cygdb`` gives better error messages when it fails to initialise the\n  Python runtime support in gdb.\n  Patch by Volker Weissmann.  (Github issue :issue:`3489`)\n\n* The Pythran ``shape`` attribute is supported.\n  Patch by Serge Guelton.  (Github issue :issue:`3307`)\n\nBugs fixed\n----------\n\n* The unicode methods ``.upper()``, ``.lower()`` and ``.title()`` were\n  incorrectly optimised for single character input values and only returned\n  the first character if multiple characters should have been returned.\n  They now use the original Python methods again.\n\n* Fused argument types were not correctly handled in type annotations and\n  ``cython.locals()``.\n  Patch by David Woods.  (Github issues :issue:`3391`, :issue:`3142`)\n\n* Diverging from the usual behaviour, ``len(memoryview)``, ``len(char*)``\n  and ``len(Py_UNICODE*)`` returned an unsigned ``size_t`` value.  They now\n  return a signed ``Py_ssize_t``, like other usages of ``len()``.\n\n* Nested dict literals in function call kwargs could incorrectly raise an\n  error about duplicate keyword arguments, which are allowed when passing\n  them from dict literals.\n  (Github issue :issue:`2963`)\n\n* Item access (subscripting) with integer indices/keys always tried the\n  Sequence protocol before the Mapping protocol, which diverged from Python\n  semantics.  It now passes through the Mapping protocol first when supported.\n  (Github issue :issue:`1807`)\n\n* Name lookups in class bodies no longer go through an attribute lookup.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`3100`)\n\n* Broadcast assignments to a multi-dimensional memory view slice could end\n  up in the wrong places when the underlying memory view is known to be\n  contiguous but the slice is not.\n  (Github issue :issue:`2941`)\n\n* Pickling unbound methods of Python classes failed.\n  Patch by Pierre Glaser.  (Github issue :issue:`2972`)\n\n* The ``Py_hash_t`` type failed to accept arbitrary \"index\" values.\n  (Github issue :issue:`2752`)\n\n* The first function line number of functions with decorators pointed to the\n  signature line and not the first decorator line, as in Python.\n  Patch by Felix Kohlgrüber.  (Github issue :issue:`2536`)\n\n* Constant integer expressions that used a negative exponent were evaluated\n  as integer 0 instead of the expected float value.\n  Patch by Kryštof Pilnáček.  (Github issue :issue:`2133`)\n\n* The ``cython.declare()`` and ``cython.cast()`` functions could fail in pure mode.\n  Patch by Dmitry Shesterkin.  (Github issue :issue:`3244`)\n\n* ``__doc__`` was not available inside of the class body during class creation.\n  (Github issue :issue:`1635`)\n\n* Setting ``language_level=2`` in a file did not work if ``language_level=3``\n  was enabled globally before.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2791`)\n\n* ``__init__.pyx`` files were not always considered as package indicators.\n  (Github issue :issue:`2665`)\n\n* Compiling package ``__init__`` files could fail under Windows due to an\n  undefined export symbol.  (Github issue :issue:`2968`)\n\n* A C compiler cast warning was resolved.\n  Patch by Michael Buesch.  (Github issue :issue:`2775`)\n\n* Binding staticmethods of Cython functions were not behaving like Python methods.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`3106`, :issue:`3102`)\n\n* Memoryviews failed to compile when the ``cache_builtins`` feature was disabled.\n  Patch by David Woods.  (Github issue :issue:`3406`)\n\nOther changes\n-------------\n\n* The default language level was changed to ``3str``, i.e. Python 3 semantics,\n  but with ``str`` literals (also in Python 2.7).  This is a backwards incompatible\n  change from the previous default of Python 2 semantics.  The previous behaviour\n  is available through the directive ``language_level=2``.\n  (Github issue :issue:`2565`)\n\n* Cython no longer generates ``__qualname__`` attributes for classes in Python\n  2.x since they are problematic there and not correctly maintained for subclasses.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2772`)\n\n* Source file fingerprinting now uses SHA-1 instead of MD5 since the latter\n  tends to be slower and less widely supported these days.\n  (Github issue :issue:`2790`)\n\n* The long deprecated include files ``python_*``, ``stdio``, ``stdlib`` and\n  ``stl`` in ``Cython/Includes/Deprecated/`` were removed.  Use the ``libc.*``\n  and ``cpython.*`` pxd modules instead.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2904`)\n\n* The search order for include files was changed. Previously it was\n  ``include_directories``, ``Cython/Includes``, ``sys.path``. Now it is\n  ``include_directories``, ``sys.path``, ``Cython/Includes``. This was done to\n  allow third-party ``*.pxd`` files to override the ones in Cython.\n  Patch by Matti Picus.  (Github issue :issue:`2905`)\n\n* The command line parser was rewritten and modernised using ``argparse``.\n  Patch by Egor Dranischnikow.  (Github issue :issue:`2952`, :issue:`3001`)\n\n* Dotted filenames for qualified module names (``pkg.mod.pyx``) are deprecated.\n  Use the normal Python package directory layout instead.\n  (Github issue :issue:`2686`)\n\n* Binary Linux wheels now follow the manylinux2010 standard.\n  Patch by Alexey Stepanov.  (Github issue :issue:`3355`)\n\n* Support for Python 2.6 was removed.\n\n.. _`PEP-560`: https://www.python.org/dev/peps/pep-0560\n.. _`PEP-570`: https://www.python.org/dev/peps/pep-0570\n.. _`PEP-487`: https://www.python.org/dev/peps/pep-0487\n.. _`PEP-590`: https://www.python.org/dev/peps/pep-0590\n.. _`PEP-3131`: https://www.python.org/dev/peps/pep-3131\n.. _`PEP-563`: https://www.python.org/dev/peps/pep-0563\n.. _`PEP-479`: https://www.python.org/dev/peps/pep-0479\n\n\n.. _0.29.37:\n\n0.29.37 (2023-12-18)\n====================\n\nBugs fixed\n----------\n\n* Fix a potential crash while cleaning up subtypes of externally imported extension\n  types when terminating Python.  This was introduced in Cython 0.29.35.\n\n* Fix a ``complex`` related compile error on Windows.\n  (Github issue :issue:`5512`)\n\n* Compiling fused types used in pxd files could crash Cython in Python 3.11+.\n  (Github issues :issue:`5894`, :issue:`5588`)\n\n* ``cythonize`` failed to consider the ``CYTHON_FORCE_REGEN`` env variable.\n  Patch by Harmen Stoppels.  (Github issue :issue:`5712`)\n\n\n.. _0.29.36:\n\n0.29.36 (2023-07-04)\n====================\n\nBugs fixed\n----------\n\n* Async generators lost their return value in PyPy.\n  (Github issue :issue:`5465`)\n\n* The outdated C macro ``_PyGC_FINALIZED()`` is no longer used in Py3.9+.\n\n* The deprecated ``Py_OptimizeFlag`` is no longer used in Python 3.9+.\n  (Github issue :issue:`5343`)\n\n* Using the global ``__debug__`` variable but not assertions could lead to compile errors.\n\n* The broken HTML template support was removed from Tempita.\n  (Github issue :issue:`3309`)\n\n\n.. _0.29.35:\n\n0.29.35 (2023-05-24)\n====================\n\nBugs fixed\n----------\n\n* A garbage collection enabled subtype of a non-GC extension type could call into the\n  deallocation function of the super type with GC tracking enabled.  This could lead\n  to crashes during deallocation if GC was triggered on the type at the same time.\n  (Github issue :issue:`5432`)\n\n* Some C compile failures and crashes in CPython 3.12 were resolved.\n\n* ``except + nogil`` was syntactically not allowed.\n  ``except +nogil`` (i.e. defining a C++ exception handling function called ``nogil``)\n  is now disallowed to prevent typos.\n  (Github issue :issue:`5430`)\n\n* A C compile failure in PyPy 3.10 was resolved.\n  Patch by Matti Picus.  (Github issue :issue:`5408`)\n\n* Cython modules now use PEP-489 multi-phase init by default in PyPy 3.9 and later.\n  Original patch by Matti Picus.  (Github issue :issue:`5413`)\n\n* API header files generated by different Cython versions can now be included in the\n  same C file.\n  (Github issue :issue:`5383`)\n\n* Function signatures containing a type like `tuple[()]` could not be printed.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`5355`)\n\n\n.. _0.29.34:\n\n0.29.34 (2023-04-02)\n====================\n\nBugs fixed\n----------\n\n* A reference leak of the for-loop list/tuple iterable was resolved if the for-loop's\n  ``else:`` branch executes a ``break`` for an outer loop.\n  (Github issue :issue:`5347`)\n\n* Some C compile failures in CPython 3.12 were resolved.\n\n* Some old usages of the deprecated Python ``imp`` module were replaced with ``importlib``.\n  Patch by Matúš Valo.  (Github issue :issue:`5300`)\n\n* Some issues with ``depfile`` generation were resolved.\n  Patches by Eli Schwartz.  (Github issues :issue:`5279`, :issue:`5291`)\n\n\n.. _0.29.33:\n\n0.29.33 (2023-01-06)\n====================\n\nFeatures added\n--------------\n\n* The ``cythonize`` and ``cython`` commands have a new option ``-M`` / ``--depfile``\n  to generate ``.dep`` dependency files for the compilation unit.  This can be used\n  by external build tools to track these dependencies.\n  The ``cythonize`` option was already available in Cython :ref:`0.29.27`.\n  Patches by Evgeni Burovski and Eli Schwartz.  (Github issue :issue:`1214`)\n\nBugs fixed\n----------\n\n* ``const`` fused types could not be used with memory views.\n  Patch by Thomas Vincent.  (Github issue :issue:`1772`)\n\n* ``wstr`` usage was removed in Python 3.12 and later (PEP-623).\n  (Github issue :issue:`5145`)\n\n* A type check assertion for Cython functions failed in debug Python builds.\n  (Github issue :issue:`5031`)\n\n* Fixed various compiler warnings.\n  Patches by Lisandro Dalcin et al.  (Github issues :issue:`4948`, :issue:`5086`)\n\n* Fixed error when calculating complex powers of negative numbers.\n  (Github issue :issue:`5014`)\n\n* Corrected a small mis-formatting of exception messages on Python 2.\n  (Github issue :issue:`5018`)\n\n* The ``PyUnicode_AsUTF8AndSize()`` C-API function was missing from the CPython declarations.\n  (Github issue :issue:`5163`)\n\n* A performance problem in the compiler was resolved when nesting conditional expressions.\n  (Github issue :issue:`5197`)\n\n* Test suite problems with recent NumPy and CPython versions were resolved.\n  (Github issues :issue:`5183`, :issue:`5190`)\n\nOther changes\n-------------\n\n* The undocumented, untested and apparently useless syntax\n  ``from somemodule cimport class/struct/union somename`` was deprecated\n  in anticipation of its removal in Cython 3.  The type\n  modifier is not needed here and a plain ``cimport`` of the name will do.\n  (Github issue :issue:`4905`)\n\n* Properly disable generation of descriptor docstrings on PyPy since they cause crashes.\n  It was previously disabled, but only accidentally via a typo.\n  Patch by Matti Picus.  (Github issue :issue:`5083`)\n\n* The ``cpow`` directive of Cython 3.0 is available as a no-op.\n  (Github issue :issue:`5016`)\n\n\n.. _0.29.32:\n\n0.29.32 (2022-07-29)\n====================\n\nBugs fixed\n----------\n\n* Revert \"Using memoryview typed arguments in inner functions is now rejected as unsupported.\"\n  Patch by David Woods.  (Github issue :issue:`4798`)\n\n* ``from module import *`` failed in 0.29.31 when using memoryviews.\n  Patch by David Woods.  (Github issue :issue:`4927`)\n\n\n.. _0.29.31:\n\n0.29.31 (2022-07-27)\n====================\n\nFeatures added\n--------------\n\n* A new argument ``--module-name`` was added to the ``cython`` command to\n  provide the (one) exact target module name from the command line.\n  Patch by Matthew Brett and h-vetinari.  (Github issue :issue:`4906`)\n\n* A new keyword ``noexcept`` was added for forward compatibility with Cython 3.\n  Patch by David Woods.  (Github issue :issue:`4903`)\n\nBugs fixed\n----------\n\n* Use ``importlib.util.find_spec()`` instead of the deprecated ``importlib.find_loader()``\n  function when setting up the package path at import-time.\n  Patch by Matti Picus.  (Github issue :issue:`4764`)\n\n* Require the C compiler to support the two-arg form of ``va_start``\n  on Python 3.10 and higher.\n  Patch by Thomas Caswell.  (Github issue :issue:`4820`)\n\n* Make ``fused_type`` subscriptable in Shadow.py.\n  Patch by Pfebrer.  (Github issue :issue:`4842`)\n\n* Fix the incorrect code generation of the target type in ``bytearray`` loops.\n  Patch by Kenrick Everett.  (Github issue :issue:`4108`)\n\n* Atomic refcounts for memoryviews were not used on some GCC versions by accident.\n  Patch by Sam Gross.  (Github issue :issue:`4915`)\n\n* Silence some GCC ``-Wconversion`` warnings in C utility code.\n  Patch by Lisandro Dalcin.  (Github issue :issue:`4854`)\n\n* Tuple multiplication was ignored in expressions such as ``[*(1,) * 2]``.\n  Patch by David Woods.  (Github issue :issue:`4864`)\n\n* Calling ``append`` methods on extension types could fail to find the method\n  in some cases.\n  Patch by David Woods.  (Github issue :issue:`4828`)\n\n* Ensure that object buffers (e.g. ``ndarray[object, ndim=1]``) containing\n  ``NULL``  pointers are safe to use, returning ``None`` instead of the ``NULL``\n  pointer.\n  Patch by Sebastian Berg.  (Github issue :issue:`4859`)\n\n* Using memoryview typed arguments in inner functions is now rejected as unsupported.\n  Patch by David Woods.  (Github issue :issue:`4798`)\n\n* Compilation could fail on systems (e.g. FIPS) that block MD5 checksums at runtime.\n  (Github issue :issue:`4909`)\n\n* Experimental adaptations for the CPython \"nogil\" fork was added.\n  Note that there is no official support for this in Cython 0.x.\n  Patch by Sam Gross.  (Github issue :issue:`4912`)\n\n\n.. _0.29.30:\n\n0.29.30 (2022-05-16)\n====================\n\nBugs fixed\n----------\n\n* The GIL handling changes in 0.29.29 introduced a regression where\n  objects could be deallocated without holding the GIL.\n  (Github issue :issue:`4796`)\n\n\n.. _0.29.29:\n\n0.29.29 (2022-05-16)\n====================\n\nFeatures added\n--------------\n\n* Avoid acquiring the GIL at the end of nogil functions.\n  This change was backported in order to avoid generating wrong C code\n  that would trigger C compiler warnings with tracing support enabled.\n  Backport by Oleksandr Pavlyk.  (Github issue :issue:`4637`)\n\nBugs fixed\n----------\n\n* Function definitions in ``finally:`` clauses were not correctly generated.\n  Patch by David Woods.  (Github issue :issue:`4651`)\n\n* A case where C-API functions could be called with a live exception set was fixed.\n  Patch by Jakub Kulík.  (Github issue :issue:`4722`)\n\n* Pickles can now be exchanged again with those generated from Cython 3.0 modules.\n  (Github issue :issue:`4680`)\n\n* Cython now correctly generates Python methods for both the provided regular and\n  reversed special numeric methods of extension types.\n  Patch by David Woods.  (Github issue :issue:`4750`)\n\n* Calling unbound extension type methods without arguments could raise an\n  ``IndexError`` instead of a ``TypeError``.\n  Patch by David Woods.  (Github issue :issue:`4779`)\n\n* Calling unbound ``.__contains__()`` super class methods on some builtin base\n  types could trigger an infinite recursion.\n  Patch by David Woods.  (Github issue :issue:`4785`)\n\n* The C union type in pure Python mode mishandled some field names.\n  Patch by Jordan Brière.  (Github issue :issue:`4727`)\n\n* Allow users to overwrite the C macro ``_USE_MATH_DEFINES``.\n  Patch by Yuriy Chernyshov. (Github issue :issue:`4690`)\n\n* Improved compatibility with CPython 3.10/11.\n  Patches by Thomas Caswell, David Woods.\n  (Github issues :issue:`4609`, :issue:`4667`, :issue:`4721`, :issue:`4730`, :issue:`4777`)\n\n* Docstrings of descriptors are now provided in PyPy 7.3.9.\n  Patch by Matti Picus.  (Github issue :issue:`4701`)\n\n\n.. _0.29.28:\n\n0.29.28 (2022-02-17)\n====================\n\nBugs fixed\n----------\n\n* Due to backwards incompatible changes in CPython 3.11a4, the feature flags\n  ``CYTHON_FAST_THREAD_STATE`` and ``CYTHON_USE_EXC_INFO_STACK`` are now disabled\n  in Python 3.11 and later.  They are enabled again in Cython 3.0.\n  Patch by David Woods.  (Github issue :issue:`4610`)\n\n* A C compiler warning in older PyPy versions was resolved.\n  Patch by Matti Picus.  (Github issue :issue:`4236`)\n\n\n.. _0.29.27:\n\n0.29.27 (2022-01-28)\n====================\n\nFeatures added\n--------------\n\n* The ``cythonize`` command has a new option ``-M`` to generate ``.dep`` dependency\n  files for the compilation unit.  This can be used by external build tools to track\n  these dependencies.\n  Patch by Evgeni Burovski.  (Github issue :issue:`1214`)\n\nBugs fixed\n----------\n\n* Compilation failures on PyPy were resolved.\n  Patches by Matti Picus.  (Github issues :issue:`4509`, :issue:`4517`)\n\n* Calls to ``range()`` with more than three arguments did not fail.\n  Original patch by Max Bachmann.  (Github issue :issue:`4550`)\n\n* Some C compiler warnings about missing type struct initialisers in Py3.10 were resolved.\n\n* Cython no longer warns about using OpenMP 3.0 features since they are now\n  considered generally available.\n\n\n.. _0.29.26:\n\n0.29.26 (2021-12-16)\n====================\n\nBugs fixed\n----------\n\n* An incompatibility with CPython 3.11.0a3 was resolved.\n  (Github issue :issue:`4499`)\n\n* The ``in`` operator failed on literal lists with starred expressions.\n  Patch by Arvind Natarajan.  (Github issue :issue:`3938`)\n\n* A C compiler warning in PyPy about a missing struct field initialisation was resolved.\n\n\n.. _0.29.25:\n\n0.29.25 (2021-12-06)\n====================\n\nBugs fixed\n----------\n\n* Several incompatibilities with CPython 3.11 were resolved.\n  Patches by David Woods, Victor Stinner, Thomas Caswell.\n  (Github issues :issue:`4411`, :issue:`4414`, :issue:`4415`, :issue:`4416`, :issue:`4420`,\n  :issue:`4428`, :issue:`4473`, :issue:`4479`, :issue:`4480`)\n\n* Some C compiler warnings were resolved.\n  Patches by Lisandro Dalcin and others.  (Github issue :issue:`4439`)\n\n* C++ ``std::move()`` should only be used automatically in MSVC versions that support it.\n  Patch by Max Bachmann.  (Github issue :issue:`4191`)\n\n * The ``Py_hash_t`` type failed to accept arbitrary \"index\" values.\n   (Github issue :issue:`2752`)\n\n* Avoid copying unaligned 16-bit values since some platforms require them to be aligned.\n  Use memcpy() instead to let the C compiler decide how to do it.\n  (Github issue :issue:`4343`)\n\n* Cython crashed on invalid truthiness tests on C++ types without ``operator bool``.\n  Patch by David Woods.  (Github issue :issue:`4348`)\n\n* The declaration of ``PyUnicode_CompareWithASCIIString()`` in ``cpython.unicode`` was incorrect.\n  Patch by Max Bachmann.  (Github issue :issue:`4344`)\n\n\n.. _0.29.24:\n\n0.29.24 (2021-07-14)\n====================\n\nBugs fixed\n----------\n\n* Inline functions in pxd files that used memory views could lead to invalid\n  C code if the module that imported from them does not use memory views.\n  Patch by David Woods.  (Github issue :issue:`1415`)\n\n* Several declarations in ``libcpp.string`` were added and corrected.\n  Patch by Janek Bevendorff.  (Github issue :issue:`4268`)\n\n* Pickling unbound Cython compiled methods failed.\n  Patch by Pierre Glaser.  (Github issue :issue:`2972`)\n\n* The tracing code was adapted to work with CPython 3.10.\n\n* The optimised ``in`` operator failed on unicode strings in Py3.9 and later\n  that were constructed from an external ``wchar_t`` source.\n  Also, related C compiler warnings about deprecated C-API usage were resolved.\n  (Github issue :issue:`3925`)\n\n* Some compiler crashes were resolved.\n  Patch by David Woods.  (Github issues :issue:`4214`, :issue:`2811`)\n\n* An incorrect warning about 'unused' generator expressions was removed.\n  (GIthub issue :issue:`1699`)\n\n* The attributes ``gen.gi_frame`` and ``coro.cr_frame`` of Cython compiled\n  generators and coroutines now return an actual frame object for introspection,\n  instead of ``None``.\n  (Github issue :issue:`2306`)\n\n\n.. _0.29.23:\n\n0.29.23 (2021-04-14)\n====================\n\nBugs fixed\n----------\n\n* Some problems with Python 3.10 were resolved.\n  Patches by Victor Stinner and David Woods.  (Github issues :issue:`4046`, :issue:`4100`)\n\n* An incorrect \"optimisation\" was removed that allowed changes to a keyword\n  dict to leak into keyword arguments passed into a function.\n  Patch by Peng Weikang.  (Github issue :issue:`3227`)\n\n* Multiplied str constants could end up as bytes constants with language_level=2.\n  Patch by Alphadelta14 and David Woods.  (Github issue :issue:`3951`)\n\n* ``PY_SSIZE_T_CLEAN`` does not get defined any more if it is already defined.\n  Patch by Andrew Jones.  (Github issue :issue:`4104`)\n\n\n.. _0.29.22:\n\n0.29.22 (2021-02-20)\n====================\n\nFeatures added\n--------------\n\n* Some declarations were added to the provided pxd includes.\n  Patches by Zackery Spytz and John Kirkham.\n  (Github issues :issue:`3811`, :issue:`3882`, :issue:`3899`, :issue:`3901`)\n\nBugs fixed\n----------\n\n* A crash when calling certain functions in Py3.9 and later was resolved.\n  (Github issue :issue:`3917`)\n\n* ``const`` memory views of structs failed to compile.\n  (Github issue :issue:`2251`)\n\n* ``const`` template declarations could not be nested.\n  Patch by Ashwin Srinath.  (Github issue :issue:`1355`)\n\n* The declarations in the ``cpython.pycapsule`` module were missing their\n  ``const`` modifiers and generated incorrect C code.\n  Patch by Warren Weckesser.  (Github issue :issue:`3964`)\n\n* Casts to memory views failed for fused dtypes.\n  Patch by David Woods.  (Github issue :issue:`3881`)\n\n* ``repr()`` was assumed to return ``str`` instead of ``unicode`` with ``language_level=3``.\n  (Github issue :issue:`3736`)\n\n* Calling ``cpdef`` functions from cimported modules crashed the compiler.\n  Patch by David Woods.  (Github issue :issue:`4000`)\n\n* Cython no longer validates the ABI size of the NumPy classes it compiled against.\n  See the discussion in https://github.com/numpy/numpy/pull/432\n\n* A C compiler warning about enum value casting was resolved in GCC.\n  (Github issue :issue:`2749`)\n\n* Coverage reporting in the annotated HTML file failed in Py3.9.\n  Patch by Nick Pope.  (Github issue :issue:`3865`)\n\n* The embedding code now reports Python errors as exit status.\n\n* Long type declarations could lead to (harmless) random changes in the\n  C file when used in auto-generated Python wrappers or pickled classes.\n\nOther changes\n-------------\n\n* Variables defined as ``cpdef`` now generate a warning since this\n  is currently useless and thus does not do what users would expect.\n  Patch by David Woods.  (Github issue :issue:`3959`)\n\n\n.. _0.29.21:\n\n0.29.21 (2020-07-09)\n====================\n\nBugs fixed\n----------\n\n* Fix a regression in 0.29.20 where ``__div__`` failed to be found in extension types.\n  (Github issue :issue:`3688`)\n\n* Fix a regression in 0.29.20 where a call inside of a finally clause could fail to compile.\n  Patch by David Woods.  (Github issue :issue:`3712`)\n\n* Zero-sized buffers could fail to validate as C/Fortran-contiguous.\n  Patch by Clemens Hofreither.  (Github issue :issue:`2093`)\n\n* ``exec()`` did not allow recent Python syntax features in Py3.8+ due to\n  https://bugs.python.org/issue35975.\n  (Github issue :issue:`3695`)\n\n* Binding staticmethods of Cython functions were not behaving like Python methods in Py3.\n  Patch by Jeroen Demeyer and Michał Górny.  (Github issue :issue:`3106`)\n\n* Pythran calls to NumPy methods no longer generate useless method lookup code.\n\n* The ``PyUnicode_GET_LENGTH()`` macro was missing from the ``cpython.*`` declarations.\n  Patch by Thomas Caswell.  (Github issue :issue:`3692`)\n\n* The deprecated ``PyUnicode_*()`` C-API functions are no longer used, except for Unicode\n  strings that contain lone surrogates.  Unicode strings that contain non-BMP characters\n  or surrogate pairs now generate different C code on 16-bit Python 2.x Unicode deployments\n  (such as MS-Windows).  Generating the C code on Python 3.x is recommended in this case.\n  Original patches by Inada Naoki and Victor Stinner.\n  (Github issues :issue:`3677`, :issue:`3721`, :issue:`3697`)\n\n* Some template parameters were missing from the C++ ``std::unordered_map`` declaration.\n  Patch by will.  (Github issue :issue:`3685`)\n\n* Several internal code generation issues regarding temporary variables were resolved.\n  (Github issue :issue:`3708`)\n\n\n.. _0.29.20:\n\n0.29.20 (2020-06-10)\n====================\n\nBugs fixed\n----------\n\n* Nested try-except statements with multiple ``return`` statements could crash\n  due to incorrect deletion of the ``except as`` target variable.\n  (Github issue :issue:`3666`)\n\n* The ``@classmethod`` decorator no longer rejects unknown input from other decorators.\n  Patch by David Woods.  (Github issue :issue:`3660`)\n\n* Fused types could leak into unrelated usages.\n  Patch by David Woods.  (Github issue :issue:`3642`)\n\n* Now uses ``Py_SET_SIZE()`` and ``Py_SET_REFCNT()`` in Py3.9+ to avoid low-level\n  write access to these object fields.\n  Patch by Victor Stinner.  (Github issue :issue:`3639`)\n\n* The built-in ``abs()`` function could lead to undefined behaviour when used on\n  the negative-most value of a signed C integer type.\n  Patch by Serge Guelton.  (Github issue :issue:`1911`)\n\n* Usages of ``sizeof()`` and ``typeid()`` on uninitialised variables no longer\n  produce a warning.\n  Patch by Celelibi.  (Github issue :issue:`3575`)\n\n* The C++ ``typeid()`` function was allowed in C mode.\n  Patch by Celelibi.  (Github issue :issue:`3637`)\n\n* The error position reported for errors found in f-strings was misleading.\n  (Github issue :issue:`3674`)\n\n* The new ``c_api_binop_methods`` directive was added for forward compatibility, but can\n  only be set to True (the current default value).  It can be disabled in Cython 3.0.\n\n\n.. _0.29.19:\n\n0.29.19 (2020-05-20)\n====================\n\nBugs fixed\n----------\n\n* A typo in Windows specific code in 0.29.18 was fixed that broke \"libc.math\".\n  (Github issue :issue:`3622`)\n\n* A platform specific test failure in 0.29.18 was fixed.\n  Patch by smutch.  (Github issue :issue:`3620`)\n\n\n.. _0.29.18:\n\n0.29.18 (2020-05-18)\n====================\n\nBugs fixed\n----------\n\n* Exception position reporting could run into race conditions on threaded code.\n  It now uses function-local variables again.\n\n* Error handling early in the module init code could lead to a crash.\n\n* Error handling in ``cython.array`` creation was improved to avoid calling\n  C-API functions with an error held.\n\n* A memory corruption was fixed when garbage collection was triggered during calls\n  to ``PyType_Ready()`` of extension type subclasses.\n  (Github issue :issue:`3603`)\n\n* Memory view slicing generated unused error handling code which could negatively\n  impact the C compiler optimisations for parallel OpenMP code etc.  Also, it is\n  now helped by static branch hints.\n  (Github issue :issue:`2987`)\n\n* Cython's built-in OpenMP functions were not translated inside of call arguments.\n  Original patch by Celelibi and David Woods.  (Github issue :issue:`3594`)\n\n* Complex buffer item types of structs of arrays could fail to validate.\n  Patch by Leo and smutch.  (Github issue :issue:`1407`)\n\n* Decorators were not allowed on nested `async def` functions.\n  (Github issue :issue:`1462`)\n\n* C-tuples could use invalid C struct casting.\n  Patch by MegaIng.  (Github issue :issue:`3038`)\n\n* Optimised ``%d`` string formatting into f-strings failed on float values.\n  (Github issue :issue:`3092`)\n\n* Optimised aligned string formatting (``%05s``, ``%-5s``) failed.\n  (Github issue :issue:`3476`)\n\n* When importing the old Cython ``build_ext`` integration with distutils, the\n  additional command line arguments leaked into the regular command.\n  Patch by Kamekameha.  (Github issue :issue:`2209`)\n\n* When using the ``CYTHON_NO_PYINIT_EXPORT`` option in C++, the module init function\n  was not declared as ``extern \"C\"``.\n  (Github issue :issue:`3414`)\n\n* Three missing timedelta access macros were added in ``cpython.datetime``.\n\n* The signature of the NumPy C-API function ``PyArray_SearchSorted()`` was fixed.\n  Patch by Brock Mendel.  (Github issue :issue:`3606`)\n\n\n.. _0.29.17:\n\n0.29.17 (2020-04-26)\n====================\n\nFeatures added\n--------------\n\n* ``std::move()`` is now available from ``libcpp.utility``.\n  Patch by Omer Ozarslan.  (Github issue :issue:`2169`)\n\n* The ``@cython.binding`` decorator is available in Python code.\n  (Github issue :issue:`3505`)\n\nBugs fixed\n----------\n\n* Creating an empty unicode slice with large bounds could crash.\n  Patch by Sam Sneddon.  (Github issue :issue:`3531`)\n\n* Decoding an empty bytes/char* slice with large bounds could crash.\n  Patch by Sam Sneddon.  (Github issue :issue:`3534`)\n\n* Re-importing a Cython extension no longer raises the error\n  \"``__reduce_cython__ not found``\".\n  (Github issue :issue:`3545`)\n\n* Unused C-tuples could generate incorrect code in 0.29.16.\n  Patch by Kirk Meyer.  (Github issue :issue:`3543`)\n\n* Creating a fused function attached it to the garbage collector before it\n  was fully initialised, thus risking crashes in rare failure cases.\n  Original patch by achernomorov.  (Github issue :issue:`3215`)\n\n* Temporary buffer indexing variables were not released and could show up in\n  C compiler warnings, e.g. in generators.\n  Patch by David Woods.  (Github issues :issue:`3430`, :issue:`3522`)\n\n* The compilation cache in ``cython.inline(\"…\")`` failed to take the language\n  level into account.\n  Patch by will-ca.  (Github issue :issue:`3419`)\n\n* The deprecated ``PyUnicode_GET_SIZE()`` function is no longer used in Py3.\n\n\n.. _0.29.16:\n\n0.29.16 (2020-03-24)\n====================\n\nBugs fixed\n----------\n\n* Temporary internal variables in nested prange loops could leak into other\n  threads.  Patch by Frank Schlimbach.  (Github issue :issue:`3348`)\n\n* Default arguments on fused functions could crash.\n  Patch by David Woods.  (Github issue :issue:`3370`)\n\n* C-tuples declared in ``.pxd`` files could generate incomplete C code.\n  Patch by Kirk Meyer.  (Github issue :issue:`1427`)\n\n* Fused functions were not always detected and optimised as Cython\n  implemented functions.\n  Patch by David Woods.  (Github issue :issue:`3384`)\n\n* Valid Python object concatenation of (iterable) strings to non-strings\n  could fail with an exception.\n  Patch by David Woods.  (Github issue :issue:`3433`)\n\n* Using C functions as temporary values lead to invalid C code.\n  Original patch by David Woods.  (Github issue :issue:`3418`)\n\n* Fix an unhandled C++ exception in comparisons.\n  Patch by David Woods.  (Github issue :issue:`3361`)\n\n* Fix deprecated import of \"imp\" module.\n  Patch by Matti Picus.  (Github issue :issue:`3350`)\n\n* Fix compatibility with Pythran 0.9.6 and later.\n  Patch by Serge Guelton.  (Github issue :issue:`3308`)\n\n* The ``_Py_PyAtExit()`` function in ``cpython.pylifecycle`` was misdeclared.\n  Patch by Zackery Spytz.  (Github issue :issue:`3382`)\n\n* Several missing declarations in ``cpython.*`` were added.\n  Patches by Zackery Spytz.  (Github issue :issue:`3452`, :issue:`3421`, :issue:`3411`, :issue:`3402`)\n\n* A declaration for ``libc.math.fpclassify()`` was added.\n  Patch by Zackery Spytz.  (Github issue :issue:`2514`)\n\n* Avoid \"undeclared\" warning about automatically generated pickle methods.\n  Patch by David Woods.  (Github issue :issue:`3353`)\n\n* Avoid C compiler warning about unreachable code in ``prange()``.\n\n* Some C compiler warnings in PyPy were resolved.\n  Patch by Matti Picus.  (Github issue :issue:`3437`)\n\n\n.. _0.29.15:\n\n\n0.29.15 (2020-02-06)\n====================\n\nBugs fixed\n----------\n\n* Crash when returning a temporary Python object from an async-def function.\n  (Github issue :issue:`3337`)\n\n* Crash when using ``**kwargs`` in generators.\n  Patch by David Woods.  (Github issue :issue:`3265`)\n\n* Double reference free in ``__class__`` cell handling for ``super()`` calls.\n  (Github issue :issue:`3246`)\n\n* Compile error when using ``*args`` as Python class bases.\n  (Github issue :issue:`3338`)\n\n* Import failure in IPython 7.11.\n  (Github issue :issue:`3297`)\n\n* Fixed C name collision in the auto-pickle code.\n  Patch by ThePrez.  (Github issue :issue:`3238`)\n\n* Deprecated import failed in Python 3.9.\n  (Github issue :issue:`3266`)\n\n\n.. _0.29.14:\n\n0.29.14 (2019-11-01)\n====================\n\nBugs fixed\n----------\n\n* The generated code failed to initialise the ``tp_print`` slot in CPython 3.8.\n  Patches by Pablo Galindo and Orivej Desh.  (Github issues :issue:`3171`, :issue:`3201`)\n\n* ``?`` for ``bool`` was missing from the supported NumPy dtypes.\n  Patch by Max Klein.  (Github issue :issue:`2675`)\n\n* ``await`` was not allowed inside of f-strings.\n  Patch by Dmitro Getz.  (Github issue :issue:`2877`)\n\n* Coverage analysis failed for projects where the code resides in separate\n  source sub-directories.\n  Patch by Antonio Valentino.  (Github issue :issue:`1985`)\n\n* An incorrect compiler warning was fixed in automatic C++ string conversions.\n  Patch by Gerion Entrup.  (Github issue :issue:`3108`)\n\n* Error reports in the Jupyter notebook showed unhelpful stack traces.\n  Patch by Matthew Edwards (Github issue :issue:`3196`).\n\n* ``Python.h`` is now also included explicitly from ``public`` header files.\n  (Github issue :issue:`3133`).\n\n* Distutils builds with ``--parallel`` did not work when using Cython's\n  deprecated ``build_ext`` command.\n  Patch by Alphadelta14 (Github issue :issue:`3187`).\n\nOther changes\n-------------\n\n* The ``PyMemoryView_*()`` C-API is available in ``cpython.memoryview``.\n  Patch by Nathan Manville.  (Github issue :issue:`2541`)\n\n\n0.29.13 (2019-07-26)\n====================\n\nBugs fixed\n----------\n\n* A reference leak for ``None`` was fixed when converting a memoryview\n  to a Python object.  (Github issue :issue:`3023`)\n\n* The declaration of ``PyGILState_STATE`` in ``cpython.pystate`` was unusable.\n  Patch by Kirill Smelkov.  (Github issue :issue:`2997`)\n\nOther changes\n-------------\n\n* The declarations in ``posix.mman`` were extended.\n  Patches by Kirill Smelkov.  (Github issues :issue:`2893`, :issue:`2894`, :issue:`3012`)\n\n\n0.29.12 (2019-07-07)\n====================\n\nBugs fixed\n----------\n\n* Fix compile error in CPython 3.8b2 regarding the ``PyCode_New()`` signature.\n  (Github issue :issue:`3031`)\n\n* Fix a C compiler warning about a missing ``int`` downcast.\n  (Github issue :issue:`3028`)\n\n* Fix reported error positions of undefined builtins and constants.\n  Patch by Orivej Desh.  (Github issue :issue:`3030`)\n\n* A 32 bit issue in the Pythran support was resolved.\n  Patch by Serge Guelton.  (Github issue :issue:`3032`)\n\n\n0.29.11 (2019-06-30)\n====================\n\nBugs fixed\n----------\n\n* Fix compile error in CPython 3.8b2 regarding the ``PyCode_New()`` signature.\n  Patch by Nick Coghlan. (Github issue :issue:`3009`)\n\n* Invalid C code generated for lambda functions in cdef methods.\n  Patch by Josh Tobin.  (Github issue :issue:`2967`)\n\n* Support slice handling in newer Pythran versions.\n  Patch by Serge Guelton.  (Github issue :issue:`2989`)\n\n* A reference leak in power-of-2 calculation was fixed.\n  Patch by Sebastian Berg.  (Github issue :issue:`3022`)\n\n* The search order for include files was changed. Previously it was\n  ``include_directories``, ``Cython/Includes``, ``sys.path``. Now it is\n  ``include_directories``, ``sys.path``, ``Cython/Includes``. This was done to\n  allow third-party ``*.pxd`` files to override the ones in Cython.\n  Original patch by Matti Picus.  (Github issue :issue:`2905`)\n\n* Setting ``language_level=2`` in a file did not work if ``language_level=3``\n  was enabled globally before.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2791`)\n\n\n0.29.10 (2019-06-02)\n====================\n\nBugs fixed\n----------\n\n* Fix compile errors in CPython 3.8b1 due to the new \"tp_vectorcall\" slots.\n  (Github issue :issue:`2976`)\n\n\n0.29.9 (2019-05-29)\n===================\n\nBugs fixed\n----------\n\n* Fix a crash regression in 0.29.8 when creating code objects fails.\n\n* Remove an incorrect cast when using true-division in C++ operations.\n  (Github issue :issue:`1950`)\n\n\n0.29.8 (2019-05-28)\n===================\n\nBugs fixed\n----------\n\n* C compile errors with CPython 3.8 were resolved.\n  Patch by Marcel Plch.  (Github issue :issue:`2938`)\n\n* Python tuple constants that compare equal but have different item\n  types could incorrectly be merged into a single constant.\n  (Github issue :issue:`2919`)\n\n* Non-ASCII characters in unprefixed strings could crash the compiler when\n  used with language level ``3str``.\n\n* Starred expressions in %-formatting tuples could fail to compile for\n  unicode strings.  (Github issue :issue:`2939`)\n\n* Passing Python class references through ``cython.inline()`` was broken.\n  (Github issue :issue:`2936`)\n\n\n0.29.7 (2019-04-14)\n===================\n\nBugs fixed\n----------\n\n* Crash when the shared Cython config module gets unloaded and another Cython\n  module reports an exceptions.  Cython now makes sure it keeps an owned reference\n  to the module.\n  (Github issue :issue:`2885`)\n\n* Resolved a C89 compilation problem when enabling the fast-gil sharing feature.\n\n* Coverage reporting did not include the signature line of ``cdef`` functions.\n  (Github issue :issue:`1461`)\n\n* Casting a GIL-requiring function into a nogil function now issues a warning.\n  (Github issue :issue:`2879`)\n\n* Generators and coroutines were missing their return type annotation.\n  (Github issue :issue:`2884`)\n\n\n0.29.6 (2019-02-27)\n===================\n\nBugs fixed\n----------\n\n* Fix a crash when accessing the ``__kwdefaults__`` special attribute of\n  fused functions.  (Github issue :issue:`1470`)\n\n* Fix the parsing of buffer format strings that contain numeric sizes, which\n  could lead to incorrect input rejections.  (Github issue :issue:`2845`)\n\n* Avoid a C #pragma in old gcc versions that was only added in GCC 4.6.\n  Patch by Michael Anselmi.  (Github issue :issue:`2838`)\n\n* Auto-encoding of Unicode strings to UTF-8 C/C++ strings failed in Python 3,\n  even though the default encoding there is UTF-8.\n  (Github issue :issue:`2819`)\n\n\n0.29.5 (2019-02-09)\n===================\n\nBugs fixed\n----------\n\n* Crash when defining a Python subclass of an extension type and repeatedly calling\n  a cpdef method on it.  (Github issue :issue:`2823`)\n\n* Compiler crash when ``prange()`` loops appear inside of with-statements.\n  (Github issue :issue:`2780`)\n\n* Some C compiler warnings were resolved.\n  Patches by Christoph Gohlke.  (Github issues :issue:`2815`, :issue:`2816`, :issue:`2817`, :issue:`2822`)\n\n* Python conversion of C++ enums failed in 0.29.\n  Patch by Orivej Desh.  (Github issue :issue:`2767`)\n\n\n0.29.4 (2019-02-01)\n===================\n\nBugs fixed\n----------\n\n* Division of numeric constants by a runtime value of 0 could fail to raise a\n  ``ZeroDivisionError``.  (Github issue :issue:`2820`)\n\n\n0.29.3 (2019-01-19)\n===================\n\nBugs fixed\n----------\n\n* Some C code for memoryviews was generated in a non-deterministic order.\n  Patch by Martijn van Steenbergen.  (Github issue :issue:`2779`)\n\n* C89 compatibility was accidentally lost since 0.28.\n  Patches by gastineau and true-pasky.  (Github issues :issue:`2778`, :issue:`2801`)\n\n* A C compiler cast warning was resolved.\n  Patch by Michael Buesch.  (Github issue :issue:`2774`)\n\n* An compilation failure with complex numbers under MSVC++ was resolved.\n  (Github issue :issue:`2797`)\n\n* Coverage reporting could fail when modules were moved around after the build.\n  Patch by Wenjun Si.  (Github issue :issue:`2776`)\n\n\n0.29.2 (2018-12-14)\n===================\n\nBugs fixed\n----------\n\n* The code generated for deduplicated constants leaked some references.\n  (Github issue :issue:`2750`)\n\n* The declaration of ``sigismember()`` in ``libc.signal`` was corrected.\n  (Github issue :issue:`2756`)\n\n* Crashes in compiler and test runner were fixed.\n  (Github issue :issue:`2736`, :issue:`2755`)\n\n* A C compiler warning about an invalid safety check was resolved.\n  (Github issue :issue:`2731`)\n\n\n0.29.1 (2018-11-24)\n===================\n\nBugs fixed\n----------\n\n* Extensions compiled with MinGW-64 under Windows could misinterpret integer\n  objects larger than 15 bit and return incorrect results.\n  (Github issue :issue:`2670`)\n\n* Cython no longer requires the source to be writable when copying its data\n  into a memory view slice.\n  Patch by Andrey Paramonov.  (Github issue :issue:`2644`)\n\n* Line tracing of ``try``-statements generated invalid C code.\n  (Github issue :issue:`2274`)\n\n* When using the ``warn.undeclared`` directive, Cython's own code generated\n  warnings that are now fixed.\n  Patch by Nicolas Pauss.  (Github issue :issue:`2685`)\n\n* Cython's memoryviews no longer require strides for setting the shape field\n  but only the ``PyBUF_ND`` flag to be set.\n  Patch by John Kirkham.  (Github issue :issue:`2716`)\n\n* Some C compiler warnings about unused memoryview code were fixed.\n  Patch by Ho Cheuk Ting.  (Github issue :issue:`2588`)\n\n* A C compiler warning about implicit signed/unsigned conversion was fixed.\n  (Github issue :issue:`2729`)\n\n* Assignments to C++ references returned by ``operator[]`` could fail to compile.\n  (Github issue :issue:`2671`)\n\n* The power operator and the support for NumPy math functions were fixed\n  in Pythran expressions.\n  Patch by Serge Guelton.  (Github issues :issue:`2702`, :issue:`2709`)\n\n* Signatures with memory view arguments now show the expected type\n  when embedded in docstrings.\n  Patch by Matthew Chan and Benjamin Weigel.  (Github issue :issue:`2634`)\n\n* Some ``from ... cimport ...`` constructs were not correctly considered\n  when searching modified dependencies in ``cythonize()`` to decide\n  whether to recompile a module.\n  Patch by Kryštof Pilnáček.  (Github issue :issue:`2638`)\n\n* A struct field type in the ``cpython.array`` declarations was corrected.\n  Patch by John Kirkham.  (Github issue :issue:`2712`)\n\n\n0.29 (2018-10-14)\n=================\n\nFeatures added\n--------------\n\n* PEP-489 multi-phase module initialisation has been enabled again.  Module\n  reloads in other subinterpreters raise an exception to prevent corruption\n  of the static module state.\n\n* A set of ``mypy`` compatible PEP-484 declarations were added for Cython's C data\n  types to integrate with static analysers in typed Python code.  They are available\n  in the ``Cython/Shadow.pyi`` module and describe the types in the special ``cython``\n  module that can be used for typing in Python code.\n  Original patch by Julian Gethmann. (Github issue :issue:`1965`)\n\n* Memoryviews are supported in PEP-484/526 style type declarations.\n  (Github issue :issue:`2529`)\n\n* ``@cython.nogil`` is supported as a C-function decorator in Python code.\n  (Github issue :issue:`2557`)\n\n* Raising exceptions from nogil code will automatically acquire the GIL, instead\n  of requiring an explicit ``with gil`` block.\n\n* C++ functions can now be declared as potentially raising both C++ and Python\n  exceptions, so that Cython can handle both correctly.\n  (Github issue :issue:`2615`)\n\n* ``cython.inline()`` supports a direct ``language_level`` keyword argument that\n  was previously only available via a directive.\n\n* A new language level name ``3str`` was added that mostly corresponds to language\n  level 3, but keeps unprefixed string literals as type 'str' in both Py2 and Py3,\n  and the builtin 'str' type unchanged.  This will become the default in the next\n  Cython release and is meant to help user code a) transition more easily to this\n  new default and b) migrate to Python 3 source code semantics without making support\n  for Python 2.x difficult.\n\n* In CPython 3.6 and later, looking up globals in the module dict is almost\n  as fast as looking up C globals.\n  (Github issue :issue:`2313`)\n\n* For a Python subclass of an extension type, repeated method calls to non-overridden\n  cpdef methods can avoid the attribute lookup in Py3.6+, which makes them 4x faster.\n  (Github issue :issue:`2313`)\n\n* (In-)equality comparisons of objects to integer literals are faster.\n  (Github issue :issue:`2188`)\n\n* Some internal and 1-argument method calls are faster.\n\n* Modules that cimport many external extension types from other Cython modules\n  execute less import requests during module initialisation.\n\n* Constant tuples and slices are deduplicated and only created once per module.\n  (Github issue :issue:`2292`)\n\n* The coverage plugin considers more C file extensions such as ``.cc`` and ``.cxx``.\n  (Github issue :issue:`2266`)\n\n* The ``cythonize`` command accepts compile time variable values (as set by ``DEF``)\n  through the new ``-E`` option.\n  Patch by Jerome Kieffer.  (Github issue :issue:`2315`)\n\n* ``pyximport`` can import from namespace packages.\n  Patch by Prakhar Goel.  (Github issue :issue:`2294`)\n\n* Some missing numpy and CPython C-API declarations were added.\n  Patch by John Kirkham. (Github issues :issue:`2523`, :issue:`2520`, :issue:`2537`)\n\n* Declarations for the ``pylifecycle`` C-API functions were added in a new .pxd file\n  ``cpython.pylifecycle``.\n\n* The Pythran support was updated to work with the latest Pythran 0.8.7.\n  Original patch by Adrien Guinet.  (Github issue :issue:`2600`)\n\n* ``%a`` is included in the string formatting types that are optimised into f-strings.\n  In this case, it is also automatically mapped to ``%r`` in Python 2.x.\n\n* New C macro ``CYTHON_HEX_VERSION`` to access Cython's version in the same style as\n  ``PY_VERSION_HEX``.\n\n* Constants in ``libc.math`` are now declared as ``const`` to simplify their handling.\n\n* An additional ``check_size`` clause was added to the ``ctypedef class`` name\n  specification to allow suppressing warnings when importing modules with\n  backwards-compatible ``PyTypeObject`` size changes.\n  Patch by Matti Picus.  (Github issue :issue:`2627`)\n\nBugs fixed\n----------\n\n* The exception handling in generators and coroutines under CPython 3.7 was adapted\n  to the newly introduced exception stack.  Users of Cython 0.28 who want to support\n  Python 3.7 are encouraged to upgrade to 0.29 to avoid potentially incorrect error\n  reporting and tracebacks.  (Github issue :issue:`1958`)\n\n* Crash when importing a module under Stackless Python that was built for CPython.\n  Patch by Anselm Kruis.  (Github issue :issue:`2534`)\n\n* 2-value slicing of typed sequences failed if the start or stop index was None.\n  Patch by Christian Gibson.  (Github issue :issue:`2508`)\n\n* Multiplied string literals lost their factor when they are part of another\n  constant expression (e.g. 'x' * 10 + 'y' => 'xy').\n\n* String formatting with the '%' operator didn't call the special ``__rmod__()``\n  method if the right side is a string subclass that implements it.\n  (Python issue 28598)\n\n* The directive ``language_level=3`` did not apply to the first token in the\n  source file.  (Github issue :issue:`2230`)\n\n* Overriding cpdef methods did not work in Python subclasses with slots.\n  Note that this can have a performance impact on calls from Cython code.\n  (Github issue :issue:`1771`)\n\n* Fix declarations of builtin or C types using strings in pure python mode.\n  (Github issue :issue:`2046`)\n\n* Generator expressions and lambdas failed to compile in ``@cfunc`` functions.\n  (Github issue :issue:`459`)\n\n* Global names with ``const`` types were not excluded from star-import assignments\n  which could lead to invalid C code.\n  (Github issue :issue:`2621`)\n\n* Several internal function signatures were fixed that lead to warnings in gcc-8.\n  (Github issue :issue:`2363`)\n\n* The numpy helper functions ``set_array_base()`` and ``get_array_base()``\n  were adapted to the current numpy C-API recommendations.\n  Patch by Matti Picus. (Github issue :issue:`2528`)\n\n* Some NumPy related code was updated to avoid deprecated API usage.\n  Original patch by jbrockmendel.  (Github issue :issue:`2559`)\n\n* Several C++ STL declarations were extended and corrected.\n  Patch by Valentin Valls. (Github issue :issue:`2207`)\n\n* C lines of the module init function were unconditionally not reported in\n  exception stack traces.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2492`)\n\n* When PEP-489 support is enabled, reloading the module overwrote any static\n  module state. It now raises an exception instead, given that reloading is\n  not actually supported.\n\n* Object-returning, C++ exception throwing functions were not checking that\n  the return value was non-null.\n  Original patch by Matt Wozniski (Github issue :issue:`2603`)\n\n* The source file encoding detection could get confused if the\n  ``c_string_encoding`` directive appeared within the first two lines.\n  (Github issue :issue:`2632`)\n\n* Cython generated modules no longer emit a warning during import when the\n  size of the NumPy array type is larger than what was found at compile time.\n  Instead, this is assumed to be a backwards compatible change on NumPy side.\n\nOther changes\n-------------\n\n* Cython now emits a warning when no ``language_level`` (2, 3 or '3str') is set\n  explicitly, neither as a ``cythonize()`` option nor as a compiler directive.\n  This is meant to prepare the transition of the default language level from\n  currently Py2 to Py3, since that is what most new users will expect these days.\n  The future default will, however, not enforce unicode literals, because this\n  has proven a major obstacle in the support for both Python 2.x and 3.x.  The\n  next major release is intended to make this change, so that it will parse all\n  code that does not request a specific language level as Python 3 code, but with\n  ``str`` literals.  The language level 2 will continue to be supported for an\n  indefinite time.\n\n* The documentation was restructured, cleaned up and examples are now tested.\n  The NumPy tutorial was also rewritten to simplify the running example.\n  Contributed by Gabriel de Marmiesse.  (Github issue :issue:`2245`)\n\n* Cython compiles less of its own modules at build time to reduce the installed\n  package size to about half of its previous size.  This makes the compiler\n  slightly slower, by about 5-7%.\n\n\n0.28.6 (2018-11-01)\n===================\n\nBugs fixed\n----------\n\n* Extensions compiled with MinGW-64 under Windows could misinterpret integer\n  objects larger than 15 bit and return incorrect results.\n  (Github issue :issue:`2670`)\n\n* Multiplied string literals lost their factor when they are part of another\n  constant expression (e.g. 'x' * 10 + 'y' => 'xy').\n\n\n0.28.5 (2018-08-03)\n===================\n\nBugs fixed\n----------\n\n* The discouraged usage of GCC's attribute ``optimize(\"Os\")`` was replaced by the\n  similar attribute ``cold`` to reduce the code impact of the module init functions.\n  (Github issue :issue:`2494`)\n\n* A reference leak in Py2.x was fixed when comparing str to unicode for equality.\n\n\n0.28.4 (2018-07-08)\n===================\n\nBugs fixed\n----------\n\n* Reallowing ``tp_clear()`` in a subtype of an ``@no_gc_clear`` extension type\n  generated an invalid C function call to the (non-existent) base type implementation.\n  (Github issue :issue:`2309`)\n\n* Exception catching based on a non-literal (runtime) tuple could fail to match the\n  exception.  (Github issue :issue:`2425`)\n\n* Compile fix for CPython 3.7.0a2.  (Github issue :issue:`2477`)\n\n\n0.28.3 (2018-05-27)\n===================\n\nBugs fixed\n----------\n\n* Set iteration was broken in non-CPython since 0.28.\n\n* ``UnicodeEncodeError`` in Py2 when ``%s`` formatting is optimised for\n  unicode strings.  (Github issue :issue:`2276`)\n\n* Work around a crash bug in g++ 4.4.x by disabling the size reduction setting\n  of the module init function in this version.  (Github issue :issue:`2235`)\n\n* Crash when exceptions occur early during module initialisation.\n  (Github issue :issue:`2199`)\n\n\n0.28.2 (2018-04-13)\n===================\n\nFeatures added\n--------------\n\n* ``abs()`` is faster for Python long objects.\n\n* The C++11 methods ``front()`` and ``end()`` were added to the declaration of\n  ``libcpp.string``.  Patch by Alex Huszagh.  (Github issue :issue:`2123`)\n\n* The C++11 methods ``reserve()`` and ``bucket_count()`` are declared for\n  ``libcpp.unordered_map``.  Patch by Valentin Valls.  (Github issue :issue:`2168`)\n\nBugs fixed\n----------\n\n* The copy of a read-only memoryview was considered read-only as well, whereas\n  a common reason to copy a read-only view is to make it writable.  The result\n  of the copying is now a writable buffer by default.\n  (Github issue :issue:`2134`)\n\n* The ``switch`` statement generation failed to apply recursively to the body of\n  converted if-statements.\n\n* ``NULL`` was sometimes rejected as exception return value when the returned\n  type is a fused pointer type.\n  Patch by Callie LeFave.  (Github issue :issue:`2177`)\n\n* Fixed compatibility with PyPy 5.11.\n  Patch by Matti Picus.  (Github issue :issue:`2165`)\n\nOther changes\n-------------\n\n* The NumPy tutorial was rewritten to use memoryviews instead of the older\n  buffer declaration syntax.\n  Contributed by Gabriel de Marmiesse.  (Github issue :issue:`2162`)\n\n\n0.28.1 (2018-03-18)\n===================\n\nBugs fixed\n----------\n\n* ``PyFrozenSet_New()`` was accidentally used in PyPy where it is missing\n  from the C-API.\n\n* Assignment between some C++ templated types were incorrectly rejected\n  when the templates mix ``const`` with ``ctypedef``.\n  (Github issue :issue:`2148`)\n\n* Undeclared C++ no-args constructors in subclasses could make the compilation\n  fail if the base class constructor was declared without ``nogil``.\n  (Github issue :issue:`2157`)\n\n* Bytes %-formatting inferred ``basestring`` (bytes or unicode) as result type\n  in some cases where ``bytes`` would have been safe to infer.\n  (Github issue :issue:`2153`)\n\n* ``None`` was accidentally disallowed as typed return value of ``dict.pop()``.\n  (Github issue :issue:`2152`)\n\n\n0.28 (2018-03-13)\n=================\n\nFeatures added\n--------------\n\n* Cdef classes can now multiply inherit from ordinary Python classes.\n  (The primary base must still be a c class, possibly ``object``, and\n  the other bases must *not* be cdef classes.)\n\n* Type inference is now supported for Pythran compiled NumPy expressions.\n  Patch by Nils Braun.  (Github issue :issue:`1954`)\n\n* The ``const`` modifier can be applied to memoryview declarations to allow\n  read-only buffers as input.  (Github issues :issue:`1605`, :issue:`1869`)\n\n* C code in the docstring of a ``cdef extern`` block is copied verbatimly\n  into the generated file.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`1915`)\n\n* When compiling with gcc, the module init function is now tuned for small\n  code size instead of whatever compile flags were provided externally.\n  Cython now also disables some code intensive optimisations in that function\n  to further reduce the code size.  (Github issue :issue:`2102`)\n\n* Decorating an async coroutine with ``@cython.iterable_coroutine`` changes its\n  type at compile time to make it iterable.  While this is not strictly in line\n  with PEP-492, it improves the interoperability with old-style coroutines that\n  use ``yield from`` instead of ``await``.\n\n* The IPython magic has preliminary support for JupyterLab.\n  (Github issue :issue:`1775`)\n\n* The new TSS C-API in CPython 3.7 is supported and has been backported.\n  Patch by Naotoshi Seo.  (Github issue :issue:`1932`)\n\n* Cython knows the new ``Py_tss_t`` type defined in PEP-539 and automatically\n  initialises variables declared with that type to ``Py_tss_NEEDS_INIT``,\n  a value which cannot be used outside of static assignments.\n\n* The set methods ``.remove()`` and ``.discard()`` are optimised.\n  Patch by Antoine Pitrou.  (Github issue :issue:`2042`)\n\n* ``dict.pop()`` is optimised.\n  Original patch by Antoine Pitrou.  (Github issue :issue:`2047`)\n\n* Iteration over sets and frozensets is optimised.\n  (Github issue :issue:`2048`)\n\n* Safe integer loops (< range(2^30)) are automatically optimised into C loops.\n\n* ``alist.extend([a,b,c])`` is optimised into sequential ``list.append()`` calls\n  for short literal sequences.\n\n* Calls to builtin methods that are not specifically optimised into C-API calls\n  now use a cache that avoids repeated lookups of the underlying C function.\n  (Github issue :issue:`2054`)\n\n* Single argument function calls can avoid the argument tuple creation in some cases.\n\n* Some redundant extension type checks are avoided.\n\n* Formatting C enum values in f-strings is faster, as well as some other special cases.\n\n* String formatting with the '%' operator is optimised into f-strings in simple cases.\n\n* Subscripting (item access) is faster in some cases.\n\n* Some ``bytearray`` operations have been optimised similar to ``bytes``.\n\n* Some PEP-484/526 container type declarations are now considered for\n  loop optimisations.\n\n* Indexing into memoryview slices with ``view[i][j]`` is now optimised into\n  ``view[i, j]``.\n\n* Python compatible ``cython.*`` types can now be mixed with type declarations\n  in Cython syntax.\n\n* Name lookups in the module and in classes are faster.\n\n* Python attribute lookups on extension types without instance dict are faster.\n\n* Some missing signals were added to ``libc/signal.pxd``.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`1914`)\n\n* The warning about repeated extern declarations is now visible by default.\n  (Github issue :issue:`1874`)\n\n* The exception handling of the function types used by CPython's type slot\n  functions was corrected to match the de-facto standard behaviour, so that\n  code that uses them directly benefits from automatic and correct exception\n  propagation.  Patch by Jeroen Demeyer.  (Github issue :issue:`1980`)\n\n* Defining the macro ``CYTHON_NO_PYINIT_EXPORT`` will prevent the module init\n  function from being exported as symbol, e.g. when linking modules statically\n  in an embedding setup.  Patch by AraHaan.  (Github issue :issue:`1944`)\n\nBugs fixed\n----------\n\n* If a module name is explicitly provided for an ``Extension()`` that is compiled\n  via ``cythonize()``, it was previously ignored and replaced by the source file\n  name.  It can now be used to override the target module name, e.g. for compiling\n  prefixed accelerator modules from Python files.  (Github issue :issue:`2038`)\n\n* The arguments of the ``num_threads`` parameter of parallel sections\n  were not sufficiently validated and could lead to invalid C code.\n  (Github issue :issue:`1957`)\n\n* Catching exceptions with a non-trivial exception pattern could call into\n  CPython with a live exception set.  This triggered incorrect behaviour\n  and crashes, especially in CPython 3.7.\n\n* The signature of the special ``__richcmp__()`` method was corrected to recognise\n  the type of the first argument as ``self``.  It was previously treated as plain\n  object, but CPython actually guarantees that it always has the correct type.\n  Note: this can change the semantics of user code that previously relied on\n  ``self`` being untyped.\n\n* Some Python 3 exceptions were not recognised as builtins when running Cython\n  under Python 2.\n\n* Some async helper functions were not defined in the generated C code when\n  compiling simple async code.  (Github issue :issue:`2075`)\n\n* Line tracing did not include generators and coroutines.\n  (Github issue :issue:`1949`)\n\n* C++ declarations for ``unordered_map`` were corrected.\n  Patch by Michael Schatzow.  (Github issue :issue:`1484`)\n\n* Iterator declarations in C++ ``deque`` and ``vector`` were corrected.\n  Patch by Alex Huszagh.  (Github issue :issue:`1870`)\n\n* The const modifiers in the C++ ``string`` declarations were corrected, together\n  with the coercion behaviour of string literals into C++ strings.\n  (Github issue :issue:`2132`)\n\n* Some declaration types in ``libc.limits`` were corrected.\n  Patch by Jeroen Demeyer.  (Github issue :issue:`2016`)\n\n* ``@cython.final`` was not accepted on Python classes with an ``@cython.cclass``\n  decorator.  (Github issue :issue:`2040`)\n\n* Cython no longer creates useless and incorrect ``PyInstanceMethod`` wrappers for\n  methods in Python 3.  Patch by Jeroen Demeyer.  (Github issue :issue:`2105`)\n\n* The builtin ``bytearray`` type could not be used as base type of cdef classes.\n  (Github issue :issue:`2106`)\n\nOther changes\n-------------\n\n\n0.27.3 (2017-11-03)\n===================\n\nBugs fixed\n----------\n\n* String forward references to extension types like ``@cython.locals(x=\"ExtType\")``\n  failed to find the named type.  (Github issue :issue:`1962`)\n\n* NumPy slicing generated incorrect results when compiled with Pythran.\n  Original patch by Serge Guelton (Github issue :issue:`1946`).\n\n* Fix \"undefined reference\" linker error for generators on Windows in Py3.3-3.5.\n  (Github issue :issue:`1968`)\n\n* Adapt to recent C-API change of ``PyThreadState`` in CPython 3.7.\n\n* Fix signature of ``PyWeakref_GetObject()`` API declaration.\n  Patch by Jeroen Demeyer (Github issue :issue:`1975`).\n\n\n0.27.2 (2017-10-22)\n===================\n\nBugs fixed\n----------\n\n* Comprehensions could incorrectly be optimised away when they appeared in boolean\n  test contexts.  (Github issue :issue:`1920`)\n\n* The special methods ``__eq__``, ``__lt__`` etc. in extension types did not type\n  their first argument as the type of the class but ``object``.  (Github issue :issue:`1935`)\n\n* Crash on first lookup of \"cline_in_traceback\" option during exception handling.\n  (Github issue :issue:`1907`)\n\n* Some nested module level comprehensions failed to compile.\n  (Github issue :issue:`1906`)\n\n* Compiler crash on some complex type declarations in pure mode.\n  (Github issue :issue:`1908`)\n\n* ``std::unordered_map.erase()`` was declared with an incorrect ``void`` return\n  type in ``libcpp.unordered_map``.  (Github issue :issue:`1484`)\n\n* Invalid use of C++ ``fallthrough`` attribute before C++11 and similar issue in clang.\n  (Github issue :issue:`1930`)\n\n* Compiler crash on misnamed properties. (Github issue :issue:`1905`)\n\n\n0.27.1 (2017-10-01)\n===================\n\nFeatures added\n--------------\n\n* The Jupyter magic has a new debug option ``--verbose`` that shows details about\n  the distutils invocation.  Patch by Boris Filippov (Github issue :issue:`1881`).\n\nBugs fixed\n----------\n\n* Py3 list comprehensions in class bodies resulted in invalid C code.\n  (Github issue :issue:`1889`)\n\n* Modules built for later CPython 3.5.x versions failed to import in 3.5.0/3.5.1.\n  (Github issue :issue:`1880`)\n\n* Deallocating fused types functions and methods kept their GC tracking enabled,\n  which could potentially lead to recursive deallocation attempts.\n\n* Crash when compiling in C++ mode with old setuptools versions.\n  (Github issue :issue:`1879`)\n\n* C++ object arguments for the constructor of Cython implemented C++ are now\n  passed by reference and not by value to allow for non-copyable arguments, such\n  as ``unique_ptr``.\n\n* API-exported C++ classes with Python object members failed to compile.\n  (Github issue :issue:`1866`)\n\n* Some issues with the new relaxed exception value handling were resolved.\n\n* Python classes as annotation types could prevent compilation.\n  (Github issue :issue:`1887`)\n\n* Cython annotation types in Python files could lead to import failures\n  with a \"cython undefined\" error.  Recognised types are now turned into strings.\n\n* Coverage analysis could fail to report on extension modules on some platforms.\n\n* Annotations could be parsed (and rejected) as types even with\n  ``annotation_typing=False``.\n\nOther changes\n-------------\n\n* PEP 489 support has been disabled by default to counter incompatibilities with\n  import setups that try to reload or reinitialise modules.\n\n\n0.27 (2017-09-23)\n=================\n\nFeatures added\n--------------\n\n* Extension module initialisation follows\n  `PEP 489 <https://www.python.org/dev/peps/pep-0489/>`_ in CPython 3.5+, which\n  resolves several differences with regard to normal Python modules.  This makes\n  the global names ``__file__`` and ``__path__`` correctly available to module\n  level code and improves the support for module-level relative imports.\n  (Github issues :issue:`1715`, :issue:`1753`, :issue:`1035`)\n\n* Asynchronous generators (`PEP 525 <https://www.python.org/dev/peps/pep-0525/>`_)\n  and asynchronous comprehensions (`PEP 530 <https://www.python.org/dev/peps/pep-0530/>`_)\n  have been implemented.  Note that async generators require finalisation support\n  in order to allow for asynchronous operations during cleanup, which is only\n  available in CPython 3.6+.  All other functionality has been backported as usual.\n\n* Variable annotations are now parsed according to\n  `PEP 526 <https://www.python.org/dev/peps/pep-0526/>`_.  Cython types (e.g.\n  ``cython.int``) are evaluated as C type declarations and everything else as Python\n  types.  This can be disabled with the directive ``annotation_typing=False``.\n  Note that most complex PEP-484 style annotations are currently ignored.  This will\n  change in future releases. (Github issue :issue:`1850`)\n\n* Extension types (also in pure Python mode) can implement the normal special methods\n  ``__eq__``, ``__lt__`` etc. for comparisons instead of the low-level ``__richcmp__``\n  method.  (Github issue :issue:`690`)\n\n* New decorator ``@cython.exceptval(x=None, check=False)`` that makes the signature\n  declarations ``except x``, ``except? x`` and ``except *`` available to pure Python\n  code.  Original patch by Antonio Cuni.  (Github issue :issue:`1653`)\n\n* Signature annotations are now included in the signature docstring generated by\n  the ``embedsignature`` directive.  Patch by Lisandro Dalcin (Github issue :issue:`1781`).\n\n* The gdb support for Python code (``libpython.py``) was updated to the latest\n  version in CPython 3.7 (git rev 5fe59f8).\n\n* The compiler tries to find a usable exception return value for cdef functions\n  with ``except *`` if the returned type allows it.  Note that this feature is subject\n  to safety limitations, so it is still better to provide an explicit declaration.\n\n* C functions can be assigned to function pointers with a compatible exception\n  declaration, not only with exact matches.  A side-effect is that certain compatible\n  signature overrides are now allowed and some more mismatches of exception signatures\n  are now detected and rejected as errors that were not detected before.\n\n* The IPython/Jupyter magic integration has a new option ``%%cython --pgo`` for profile\n  guided optimisation. It compiles the cell with PGO settings for the C compiler,\n  executes it to generate a runtime profile, and then compiles it again using that\n  profile for C compiler optimisation.  Currently only tested with gcc.\n\n* ``len(memoryview)`` can be used in nogil sections to get the size of the\n  first dimension of a memory view (``shape[0]``). (Github issue :issue:`1733`)\n\n* C++ classes can now contain (properly refcounted) Python objects.\n\n* NumPy dtype subarrays are now accessible through the C-API.\n  Patch by Gerald Dalley (Github issue :issue:`245`).\n\n* Resolves several issues with PyPy and uses faster async slots in PyPy3.\n  Patch by Ronan Lamy (Github issues :issue:`1871`, :issue:`1878`).\n\nBugs fixed\n----------\n\n* Extension types that were cimported from other Cython modules could disagree\n  about the order of fused cdef methods in their call table.  This could lead\n  to wrong methods being called and potentially also crashes.  The fix required\n  changes to the ordering of fused methods in the call table, which may break\n  existing compiled modules that call fused cdef methods across module boundaries,\n  if these methods were implemented in a different order than they were declared\n  in the corresponding .pxd file. (Github issue :issue:`1873`)\n\n* The exception state handling in generators and coroutines could lead to\n  exceptions in the caller being lost if an exception was raised and handled\n  inside of the coroutine when yielding. (Github issue :issue:`1731`)\n\n* Loops over ``range(enum)`` were not converted into C for-loops.  Note that it\n  is still recommended to use an explicit cast to a C integer type in this case.\n\n* Error positions of names (e.g. variables) were incorrectly reported after the\n  name and not at the beginning of the name.\n\n* Compile time ``DEF`` assignments were evaluated even when they occur inside of\n  falsy ``IF`` blocks. (Github issue :issue:`1796`)\n\n* Disabling the line tracing from a trace function could fail.\n  Original patch by Dmitry Trofimov. (Github issue :issue:`1769`)\n\n* Several issues with the Pythran integration were resolved.\n\n* abs(signed int) now returns a signed rather than unsigned int.\n  (Github issue :issue:`1837`)\n\n* Reading ``frame.f_locals`` of a Cython function (e.g. from a debugger or profiler\n  could modify the module globals. (Github issue :issue:`1836`)\n\n* Buffer type mismatches in the NumPy buffer support could leak a reference to the\n  buffer owner.\n\n* Using the \"is_f_contig\" and \"is_c_contig\" memoryview methods together could leave\n  one of them undeclared. (Github issue :issue:`1872`)\n\n* Compilation failed if the for-in-range loop target was not a variable but a more\n  complex expression, e.g. an item assignment. (Github issue :issue:`1831`)\n\n* Compile time evaluations of (partially) constant f-strings could show incorrect\n  results.\n\n* Escape sequences in raw f-strings (``fr'...'``) were resolved instead of passing\n  them through as expected.\n\n* Some ref-counting issues in buffer error handling have been resolved.\n\nOther changes\n-------------\n\n* Type declarations in signature annotations are now parsed according to\n  `PEP 484 <https://www.python.org/dev/peps/pep-0484/>`_\n  typing.  Only Cython types (e.g. ``cython.int``) and Python builtin types are\n  currently considered as type declarations.  Everything else is ignored, but this\n  will change in a future Cython release.\n  (Github issue :issue:`1672`)\n\n* The directive ``annotation_typing`` is now ``True`` by default, which enables\n  parsing type declarations from annotations.\n\n* This release no longer supports Python 3.2.\n\n\n0.26.1 (2017-08-29)\n===================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* ``cython.view.array`` was missing ``.__len__()``.\n\n* Extension types with a ``.pxd`` override for their ``__releasebuffer__`` slot\n  (e.g. as provided by Cython for the Python ``array.array`` type) could leak\n  a reference to the buffer owner on release, thus not freeing the memory.\n  (Github issue :issue:`1638`)\n\n* Auto-decoding failed in 0.26 for strings inside of C++ containers.\n  (Github issue :issue:`1790`)\n\n* Compile error when inheriting from C++ container types.\n  (Github issue :issue:`1788`)\n\n* Invalid C code in generators (declaration after code).\n  (Github issue :issue:`1801`)\n\n* Arithmetic operations on ``const`` integer variables could generate invalid code.\n  (Github issue :issue:`1798`)\n\n* Local variables with names of special Python methods failed to compile inside of\n  closures. (Github issue :issue:`1797`)\n\n* Problem with indirect Emacs buffers in cython-mode.\n  Patch by Martin Albrecht (Github issue :issue:`1743`).\n\n* Extension types named ``result`` or ``PickleError`` generated invalid unpickling code.\n  Patch by Jason Madden (Github issue :issue:`1786`).\n\n* Bazel integration failed to compile ``.py`` files.\n  Patch by Guro Bokum (Github issue :issue:`1784`).\n\n* Some include directories and dependencies were referenced with their absolute paths\n  in the generated files despite lying within the project directory.\n\n* Failure to compile in Py3.7 due to a modified signature of ``_PyCFunctionFast()``\n\n\n0.26 (2017-07-19)\n=================\n\nFeatures added\n--------------\n\n* Pythran can be used as a backend for evaluating NumPy array expressions.\n  Patch by Adrien Guinet (Github issue :issue:`1607`).\n\n* cdef classes now support pickling by default when possible.\n  This can be disabled with the ``auto_pickle`` directive.\n\n* Speed up comparisons of strings if their hash value is available.\n  Patch by Claudio Freire (Github issue :issue:`1571`).\n\n* Support pyximport from zip files.\n  Patch by Sergei Lebedev (Github issue :issue:`1485`).\n\n* IPython magic now respects the ``__all__`` variable and ignores\n  names with leading-underscore (like ``import *`` does).\n  Patch by Syrtis Major (Github issue :issue:`1625`).\n\n* ``abs()`` is optimised for C complex numbers.\n  Patch by David Woods (Github issue :issue:`1648`).\n\n* The display of C lines in Cython tracebacks can now be enabled at runtime\n  via ``import cython_runtime; cython_runtime.cline_in_traceback=True``.\n  The default has been changed to False.\n\n* The overhead of calling fused types generic functions was reduced.\n\n* \"cdef extern\" include files are now also searched relative to the current file.\n  Patch by Jeroen Demeyer (Github issue :issue:`1654`).\n\n* Optional optimization for re-acquiring the GIL, controlled by the\n  `fast_gil` directive.\n\nBugs fixed\n----------\n\n* Item lookup/assignment with a unicode character as index that is typed\n  (explicitly or implicitly) as ``Py_UCS4`` or ``Py_UNICODE`` used the\n  integer value instead of the Unicode string value. Code that relied on\n  the previous behaviour now triggers a warning that can be disabled by\n  applying an explicit cast. (Github issue :issue:`1602`)\n\n* f-string processing was adapted to changes in PEP 498 and CPython 3.6.\n\n* Invalid C code when decoding from UTF-16(LE/BE) byte strings.\n  (Github issue :issue:`1696`)\n\n* Unicode escapes in 'ur' raw-unicode strings were not resolved in Py2 code.\n  Original patch by Aaron Gallagher (Github issue :issue:`1594`).\n\n* File paths of code objects are now relative.\n  Original patch by Jelmer Vernooij (Github issue :issue:`1565`).\n\n* Decorators of cdef class methods could be executed twice.\n  Patch by Jeroen Demeyer (Github issue :issue:`1724`).\n\n* Dict iteration using the Py2 ``iter*`` methods failed in PyPy3.\n  Patch by Armin Rigo (Github issue :issue:`1631`).\n\n* Several warnings in the generated code are now suppressed.\n\nOther changes\n-------------\n\n* The ``unraisable_tracebacks`` option now defaults to ``True``.\n\n* Coercion of C++ containers to Python is no longer automatic on attribute\n  access (Github issue :issue:`1521`).\n\n* Access to Python attributes of cimported modules without the corresponding\n  import is now a compile-time (rather than runtime) error.\n\n* Do not use special dll linkage for \"cdef public\" functions.\n  Patch by Jeroen Demeyer (Github issue :issue:`1687`).\n\n* cdef/cpdef methods must match their declarations.  See Github issue :issue:`1732`.\n  This is now a warning and will be an error in future releases.\n\n\n0.25.2 (2016-12-08)\n===================\n\nBugs fixed\n----------\n\n* Fixes several issues with C++ template deduction.\n\n* Fixes a issue with bound method type inference (Github issue :issue:`551`).\n\n* Fixes a bug with cascaded tuple assignment (Github issue :issue:`1523`).\n\n* Fixed or silenced many Clang warnings.\n\n* Fixes bug with powers of pure real complex numbers (Github issue :issue:`1538`).\n\n\n0.25.1 (2016-10-26)\n===================\n\nBugs fixed\n----------\n\n* Fixes a bug with ``isinstance(o, Exception)`` (Github issue :issue:`1496`).\n\n* Fixes bug with ``cython.view.array`` missing utility code in some cases\n  (Github issue :issue:`1502`).\n\nOther changes\n-------------\n\n* The distutils extension ``Cython.Distutils.build_ext`` has been reverted,\n  temporarily, to be ``old_build_ext`` to give projects time to migrate.\n  The new build_ext is available as ``new_build_ext``.\n\n\n0.25 (2016-10-25)\n=================\n\nFeatures added\n--------------\n\n* def/cpdef methods of cdef classes benefit from Cython's internal function\n  implementation, which enables introspection and line profiling for them.\n  Implementation sponsored by Turbostream (www.turbostream-cfd.com).\n\n* Calls to Python functions are faster, following the recent \"FastCall\"\n  optimisations that Victor Stinner implemented for CPython 3.6.\n  See https://bugs.python.org/issue27128 and related issues.\n\n* The new METH_FASTCALL calling convention for PyCFunctions is supported\n  in CPython 3.6.  See https://bugs.python.org/issue27810\n\n* Initial support for using Cython modules in Pyston.\n  Patch by Boxiang Sun.\n\n* Dynamic Python attributes are allowed on cdef classes if an attribute\n  ``cdef dict __dict__`` is declared in the class.  Patch by empyrical.\n\n* Cython implemented C++ classes can make direct calls to base class methods.\n  Patch by empyrical.\n\n* C++ classes can now have typedef members. STL containers updated with\n  value_type.\n\n* New directive ``cython.no_gc`` to fully disable GC for a cdef class.\n  Patch by Claudio Freire.\n\n* Buffer variables are no longer excluded from ``locals()``.\n  Patch by David Woods.\n\n* Building f-strings is faster, especially when formatting C integers.\n\n* for-loop iteration over \"std::string\".\n\n* ``libc/math.pxd`` provides ``e`` and ``pi`` as alias constants to simplify\n  usage as a drop-in replacement for Python's math module.\n\n* Speed up cython.inline().\n\n* Binary lshift operations with small constant Python integers are faster.\n\n* Some integer operations on Python long objects are faster in Python 2.7.\n\n* Support for the C++ ``typeid`` operator.\n\n* Support for bazel using a the pyx_library rule in //Tools:rules.bzl.\n\nSignificant Bugs fixed\n----------------------\n\n* Division of complex numbers avoids overflow by using Smith's method.\n\n* Some function signatures in ``libc.math`` and ``numpy.pxd`` were incorrect.\n  Patch by Michael Seifert.\n\nOther changes\n-------------\n\n* The \"%%cython\" IPython/jupyter magic now defaults to the language level of\n  the current jupyter kernel.  The language level can be set explicitly with\n  \"%%cython -2\" or \"%%cython -3\".\n\n* The distutils extension ``Cython.Distutils.build_ext`` has now been updated\n  to use cythonize which properly handles dependencies.  The old extension can\n  still be found in ``Cython.Distutils.old_build_ext`` and is now deprecated.\n\n* ``directive_defaults`` is no longer available in ``Cython.Compiler.Options``,\n  use ``get_directive_defaults()`` instead.\n\n\n0.24.1 (2016-07-15)\n===================\n\nBugs fixed\n----------\n\n* IPython cell magic was lacking a good way to enable Python 3 code semantics.\n  It can now be used as \"%%cython -3\".\n\n* Follow a recent change in `PEP 492 <https://www.python.org/dev/peps/pep-0492/>`_\n  and CPython 3.5.2 that now requires the ``__aiter__()`` method of asynchronous\n  iterators to be a simple ``def`` method instead of an ``async def`` method.\n\n* Coroutines and generators were lacking the ``__module__`` special attribute.\n\n* C++ ``std::complex`` values failed to auto-convert from and to Python complex\n  objects.\n\n* Namespaced C++ types could not be used as memory view types due to lack of\n  name mangling.  Patch by Ivan Smirnov.\n\n* Assignments between identical C++ types that were declared with differently\n  typedefed template types could fail.\n\n* Rebuilds could fail to evaluate dependency timestamps in C++ mode.\n  Patch by Ian Henriksen.\n\n* Macros defined in the ``distutils`` compiler option do not require values\n  anymore.  Patch by Ian Henriksen.\n\n* Minor fixes for MSVC, Cygwin and PyPy.\n\n\n0.24 (2016-04-04)\n=================\n\nFeatures added\n--------------\n\n* `PEP 498 <https://www.python.org/dev/peps/pep-0498/>`_:\n  Literal String Formatting (f-strings).\n  Original patch by Jelle Zijlstra.\n\n* `PEP 515 <https://www.python.org/dev/peps/pep-0515/>`_:\n  Underscores as visual separators in number literals.\n\n* Parser was adapted to some minor syntax changes in Py3.6, e.g.\n  https://bugs.python.org/issue9232\n\n* The embedded C code comments that show the original source code\n  can be discarded with the new directive ``emit_code_comments=False``.\n\n* Cpdef enums are now first-class iterable, callable types in Python.\n\n* Ctuples can now be declared in pure Python code.\n\n* Posix declarations for DLL loading and stdio extensions were added.\n  Patch by Lars Buitinck.\n\n* The Py2-only builtins ``unicode()``, ``xrange()``, ``reduce()`` and\n  ``long`` are now also available in compile time ``DEF`` expressions\n  when compiling with Py3.\n\n* Exception type tests have slightly lower overhead.\n  This fixes ticket 868.\n\n* @property syntax fully supported in cdef classes, old syntax deprecated.\n\n* C++ classes can now be declared with default template parameters.\n\nBugs fixed\n----------\n\n* C++ exceptions raised by overloaded C++ operators were not always\n  handled.  Patch by Ian Henriksen.\n\n* C string literals were previously always stored as non-const global\n  variables in the module.  They are now stored as global constants\n  when possible, and otherwise as non-const C string literals in the\n  generated code that uses them.  This improves compatibility with\n  strict C compiler options and prevents non-const strings literals\n  with the same content from being incorrectly merged.\n\n* Compile time evaluated ``str`` expressions (``DEF``) now behave in a\n  more useful way by turning into Unicode strings when compiling under\n  Python 3.  This allows using them as intermediate values in expressions.\n  Previously, they always evaluated to bytes objects.\n\n* ``isinf()`` declarations in ``libc/math.pxd`` and ``numpy/math.pxd`` now\n  reflect the actual tristate ``int`` return value instead of using ``bint``.\n\n* Literal assignments to ctuples avoid Python tuple round-trips in some\n  more corner cases.\n\n* Iteration over ``dict(...).items()`` failed to get optimised when dict\n  arguments included keyword arguments.\n\n* cProfile now correctly profiles cpdef functions and methods.\n\n\n0.23.5 (2016-03-26)\n===================\n\n* Compile errors and warnings in integer type conversion code.  This fixes\n  ticket 877.  Patches by Christian Neukirchen, Nikolaus Rath, Ian Henriksen.\n\n* Reference leak when ``*args`` argument was reassigned in closures.\n\n* Truth-testing Unicode strings could waste time and memory in Py3.3+.\n\n* Return values of async functions could be ignored and replaced by ``None``.\n\n* Compiler crash in CPython 3.6.\n\n* Fix prange() to behave identically to range().  The end condition was\n  miscalculated when the range was not exactly divisible by the step.\n\n* Optimised ``all(genexpr)``/``any(genexpr)`` calls could warn about unused\n  code.  This fixes ticket 876.\n\n\n0.23.4 (2015-10-10)\n===================\n\nBugs fixed\n----------\n\n* Memory leak when calling Python functions in PyPy.\n\n* Compilation problem with MSVC in C99-ish mode.\n\n* Warning about unused values in a helper macro.\n\n\n0.23.3 (2015-09-29)\n===================\n\nBugs fixed\n----------\n\n* Invalid C code for some builtin methods.  This fixes ticket 856 again.\n\n* Incorrect C code in helper functions for PyLong conversion and string\n  decoding.  This fixes ticket 863, ticket 864 and ticket 865.\n  Original patch by Nikolaus Rath.\n\n* Large folded or inserted integer constants could use too small C\n  integer types and thus trigger a value wrap-around.\n\nOther changes\n-------------\n\n* The coroutine and generator types of Cython now also register directly\n  with the ``Coroutine`` and ``Generator`` ABCs in the ``backports_abc``\n  module if it can be imported.  This fixes ticket 870.\n\n\n0.23.2 (2015-09-11)\n===================\n\nBugs fixed\n----------\n\n* Compiler crash when analysing some optimised expressions.\n\n* Coverage plugin was adapted to coverage.py 4.0 beta 2.\n\n* C++ destructor calls could fail when '&' operator is overwritten.\n\n* Incorrect C literal generation for large integers in compile-time\n  evaluated DEF expressions and constant folded expressions.\n\n* Byte string constants could end up as Unicode strings when originating\n  from compile-time evaluated DEF expressions.\n\n* Invalid C code when caching known builtin methods.\n  This fixes ticket 860.\n\n* ``ino_t`` in ``posix.types`` was not declared as ``unsigned``.\n\n* Declarations in ``libcpp/memory.pxd`` were missing ``operator!()``.\n  Patch by Leo Razoumov.\n\n* Static cdef methods can now be declared in .pxd files.\n\n\n0.23.1 (2015-08-22)\n===================\n\nBugs fixed\n----------\n\n* Invalid C code for generators.  This fixes ticket 858.\n\n* Invalid C code for some builtin methods.  This fixes ticket 856.\n\n* Invalid C code for unused local buffer variables.\n  This fixes ticket 154.\n\n* Test failures on 32bit systems.  This fixes ticket 857.\n\n* Code that uses ``from xyz import *`` and global C struct/union/array\n  variables could fail to compile due to missing helper functions.\n  This fixes ticket 851.\n\n* Misnamed PEP 492 coroutine property ``cr_yieldfrom`` renamed to\n  ``cr_await`` to match CPython.\n\n* Missing deallocation code for C++ object attributes in certain\n  extension class hierarchies.\n\n* Crash when async coroutine was not awaited.\n\n* Compiler crash on ``yield`` in signature annotations and default\n  argument values.  Both are forbidden now.\n\n* Compiler crash on certain constructs in ``finally`` clauses.\n\n* Cython failed to build when CPython's pgen is installed.\n\n\n0.23 (2015-08-08)\n=================\n\nFeatures added\n--------------\n\n* `PEP 492 <https://www.python.org/dev/peps/pep-0492/>`_\n  (async/await) was implemented.\n\n* `PEP 448 <https://www.python.org/dev/peps/pep-0448/>`_\n  (Additional Unpacking Generalizations) was implemented.\n\n* Support for coverage.py 4.0+ can be enabled by adding the plugin\n  \"Cython.Coverage\" to the \".coveragerc\" config file.\n\n* Annotated HTML source pages can integrate (XML) coverage reports.\n\n* Tracing is supported in ``nogil`` functions/sections and module init code.\n\n* When generators are used in a Cython module and the module imports the\n  modules \"inspect\" and/or \"asyncio\", Cython enables interoperability by\n  patching these modules during the import to recognise Cython's internal\n  generator and coroutine types. This can be disabled by C compiling the\n  module with \"-D CYTHON_PATCH_ASYNCIO=0\" or \"-D CYTHON_PATCH_INSPECT=0\"\n\n* When generators or coroutines are used in a Cython module, their types\n  are registered with the ``Generator`` and ``Coroutine`` ABCs in the\n  ``collections`` or ``collections.abc`` stdlib module at import time to\n  enable interoperability with code that needs to detect and process Python\n  generators/coroutines.  These ABCs were added in CPython 3.5 and are\n  available for older Python versions through the ``backports_abc`` module\n  on PyPI.  See https://bugs.python.org/issue24018\n\n* Adding/subtracting/dividing/modulus and equality comparisons with\n  constant Python floats and small integers are faster.\n\n* Binary and/or/xor/rshift operations with small constant Python integers\n  are faster.\n\n* When called on generator expressions, the builtins ``all()``, ``any()``,\n  ``dict()``, ``list()``, ``set()``, ``sorted()`` and ``unicode.join()``\n  avoid the generator iteration overhead by inlining a part of their\n  functionality into the for-loop.\n\n* Keyword argument dicts are no longer copied on function entry when they\n  are not being used or only passed through to other function calls (e.g.\n  in wrapper functions).\n\n* The ``PyTypeObject`` declaration in ``cpython.object`` was extended.\n\n* The builtin ``type`` type is now declared as PyTypeObject in source,\n  allowing for extern functions taking type parameters to have the correct\n  C signatures.  Note that this might break code that uses ``type`` just\n  for passing around Python types in typed variables.  Removing the type\n  declaration provides a backwards compatible fix.\n\n* ``wraparound()`` and ``boundscheck()`` are available as no-ops in pure\n  Python mode.\n\n* Const iterators were added to the provided C++ STL declarations.\n\n* Smart pointers were added to the provided C++ STL declarations.\n  Patch by Daniel Filonik.\n\n* ``NULL`` is allowed as default argument when embedding signatures.\n  This fixes ticket 843.\n\n* When compiling with ``--embed``, the internal module name is changed to\n  ``__main__`` to allow arbitrary program names, including those that would\n  be invalid for modules.  Note that this prevents reuse of the generated\n  C code as an importable module.\n\n* External C++ classes that overload the assignment operator can be used.\n  Patch by Ian Henriksen.\n\n* Support operator bool() for C++ classes so they can be used in if statements.\n\nBugs fixed\n----------\n\n* Calling \"yield from\" from Python on a Cython generator that returned a\n  value triggered a crash in CPython.  This is now being worked around.\n  See https://bugs.python.org/issue23996\n\n* Language level 3 did not enable true division (a.k.a. float division)\n  for integer operands.\n\n* Functions with fused argument types that included a generic 'object'\n  fallback could end up using that fallback also for other explicitly\n  listed object types.\n\n* Relative cimports could accidentally fall back to trying an absolute\n  cimport on failure.\n\n* The result of calling a C struct constructor no longer requires an\n  intermediate assignment when coercing to a Python dict.\n\n* C++ exception declarations with mapping functions could fail to compile\n  when pre-declared in .pxd files.\n\n* ``cpdef void`` methods are now permitted.\n\n* ``abs(cint)`` could fail to compile in MSVC and used sub-optimal code\n  in C++.  Patch by David Vierra, original patch by Michael Enßlin.\n\n* Buffer index calculations using index variables with small C integer\n  types could overflow for large buffer sizes.\n  Original patch by David Vierra.\n\n* C unions use a saner way to coerce from and to Python dicts.\n\n* When compiling a module ``foo.pyx``, the directories in ``sys.path``\n  are no longer searched when looking for ``foo.pxd``.\n  Patch by Jeroen Demeyer.\n\n* Memory leaks in the embedding main function were fixed.\n  Original patch by Michael Enßlin.\n\n* Some complex Python expressions could fail to compile inside of finally\n  clauses.\n\n* Unprefixed 'str' literals were not supported as C varargs arguments.\n\n* Fixed type errors in conversion enum types to/from Python.  Note that\n  this imposes stricter correctness requirements on enum declarations.\n\n\nOther changes\n-------------\n\n* Changed mangling scheme in header files generated by ``cdef api``\n  declarations.\n\n* Installation under CPython 3.3+ no longer requires a pass of the\n  2to3 tool.  This also makes it possible to run Cython in Python\n  3.3+ from a source checkout without installing it first.\n  Patch by Petr Viktorin.\n\n* ``jedi-typer.py`` (in ``Tools/``) was extended and renamed to\n  ``jedityper.py`` (to make it importable) and now works with and\n  requires Jedi 0.9.  Patch by Tzer-jen Wei.\n\n\n0.22.1 (2015-06-20)\n===================\n\nBugs fixed\n----------\n\n* Crash when returning values on generator termination.\n\n* In some cases, exceptions raised during internal isinstance() checks were\n  not propagated.\n\n* Runtime reported file paths of source files (e.g for profiling and tracing)\n  are now relative to the build root directory instead of the main source file.\n\n* Tracing exception handling code could enter the trace function with an active\n  exception set.\n\n* The internal generator function type was not shared across modules.\n\n* Comparisons of (inferred) ctuples failed to compile.\n\n* Closures inside of cdef functions returning ``void`` failed to compile.\n\n* Using ``const`` C++ references in intermediate parts of longer expressions\n  could fail to compile.\n\n* C++ exception declarations with mapping functions could fail to compile when\n  pre-declared in .pxd files.\n\n* C++ compilation could fail with an ambiguity error in recent MacOS-X Xcode\n  versions.\n\n* C compilation could fail in pypy3.\n\n* Fixed a memory leak in the compiler when compiling multiple modules.\n\n* When compiling multiple modules, external library dependencies could leak\n  into later compiler runs.  Fix by Jeroen Demeyer.  This fixes ticket 845.\n\n\n0.22 (2015-02-11)\n=================\n\nFeatures added\n--------------\n\n* C functions can coerce to Python functions, which allows passing them\n  around as callable objects.\n\n* C arrays can be assigned by value and auto-coerce from Python iterables\n  and to Python lists (and tuples).\n\n* Extern C functions can now be declared as cpdef to export them to\n  the module's Python namespace.  Extern C functions in pxd files export\n  their values to their own module, iff it exists.\n\n* Anonymous C tuple types can be declared as (ctype1, ctype2, ...).\n\n* `PEP 479 <https://www.python.org/dev/peps/pep-0479/>`_:\n  turn accidental StopIteration exceptions that exit generators\n  into a RuntimeError, activated with future import \"generator_stop\".\n\n* Looping over ``reversed(range())`` is optimised in the same way as\n  ``range()``.  Patch by Favian Contreras.\n\nBugs fixed\n----------\n\n* Mismatching 'except' declarations on signatures in .pxd and .pyx files failed\n  to produce a compile error.\n\n* Failure to find any files for the path pattern(s) passed into ``cythonize()``\n  is now an error to more easily detect accidental typos.\n\n* The ``logaddexp`` family of functions in ``numpy.math`` now has correct\n  declarations.\n\n* In Py2.6/7 and Py3.2, simple Cython memory views could accidentally be\n  interpreted as non-contiguous by CPython, which could trigger a CPython\n  bug when copying data from them, thus leading to data corruption.\n  See CPython issues 12834 and 23349.\n\nOther changes\n-------------\n\n* Preliminary support for defining the Cython language with a formal grammar.\n  To try parsing your files against this grammar, use the --formal_grammar directive.\n  Experimental.\n\n* ``_`` is no longer considered a cacheable builtin as it could interfere with\n  gettext.\n\n* Cythonize-computed metadata now cached in the generated C files.\n\n* Several corrections and extensions in numpy, cpython, and libcpp pxd files.\n\n\n0.21.2 (2014-12-27)\n===================\n\nBugs fixed\n----------\n\n* Crash when assigning a C value to both a Python and C target at the same time.\n\n* Automatic coercion from C++ strings to ``str`` generated incomplete code that\n  failed to compile.\n\n* Declaring a constructor in a C++ child class erroneously required a default\n  constructor declaration in the super class.\n\n* ``resize_smart()`` in ``cpython.array`` was broken.\n\n* Functions in ``libcpp.cast`` are now declared as ``nogil``.\n\n* Some missing C-API declarations were added.\n\n* Py3 main code in embedding program code was lacking casts.\n\n* Exception related to distutils \"Distribution\" class type in pyximport under\n  latest CPython 2.7 and 3.4 releases when setuptools is being imported later.\n\n\n0.21.1 (2014-10-18)\n===================\n\nFeatures added\n--------------\n\n* New ``cythonize`` option ``-a`` to generate the annotated HTML source view.\n\n* Missing C-API declarations in ``cpython.unicode`` were added.\n\n* Passing ``language='c++'`` into cythonize() globally enables C++ mode for\n  all modules that were not passed as Extension objects (i.e. only source\n  files and file patterns).\n\n* ``Py_hash_t`` is a known type (used in CPython for hash values).\n\n* ``PySlice_*()`` C-API functions are available from the ``cpython.slice``\n  module.\n\n* Allow arrays of C++ classes.\n\nBugs fixed\n----------\n\n* Reference leak for non-simple Python expressions in boolean and/or expressions.\n\n* To fix a name collision and to reflect availability on host platforms,\n  standard C declarations [ clock(), time(), struct tm and tm* functions ]\n  were moved from posix/time.pxd to a new libc/time.pxd.  Patch by Charles\n  Blake.\n\n* Rerunning unmodified modules in IPython's cython support failed.\n  Patch by Matthias Bussonier.\n\n* Casting C++ ``std::string`` to Python byte strings failed when\n  auto-decoding was enabled.\n\n* Fatal exceptions in global module init code could lead to crashes\n  if the already created module was used later on (e.g. through a\n  stale reference in sys.modules or elsewhere).\n\n* ``cythonize.py`` script was not installed on MS-Windows.\n\nOther changes\n-------------\n\n* Compilation no longer fails hard when unknown compilation options are\n  passed.  Instead, it raises a warning and ignores them (as it did silently\n  before 0.21).  This will be changed back to an error in a future release.\n\n\n0.21 (2014-09-10)\n=================\n\nFeatures added\n--------------\n\n* C (cdef) functions allow inner Python functions.\n\n* Enums can now be declared as cpdef to export their values to\n  the module's Python namespace.  Cpdef enums in pxd files export\n  their values to their own module, iff it exists.\n\n* Allow @staticmethod decorator to declare static cdef methods.\n  This is especially useful for declaring \"constructors\" for\n  cdef classes that can take non-Python arguments.\n\n* Taking a ``char*`` from a temporary Python string object is safer\n  in more cases and can be done inside of non-trivial expressions,\n  including arguments of a function call.  A compile time error\n  is raised only when such a pointer is assigned to a variable and\n  would thus exceed the lifetime of the string itself.\n\n* Generators have new properties ``__name__`` and ``__qualname__``\n  that provide the plain/qualified name of the generator function\n  (following CPython 3.5).  See https://bugs.python.org/issue21205\n\n* The ``inline`` function modifier is available as a decorator\n  ``@cython.inline`` in pure mode.\n\n* When cygdb is run in a virtualenv, it enables the same virtualenv\n  inside of the debugger. Patch by Marc Abramowitz.\n\n* PEP 465: dedicated infix operator for matrix multiplication (A @ B).\n\n* HTML output of annotated code uses Pygments for code highlighting\n  and generally received a major overhaul by Matthias Bussonier.\n\n* IPython magic support is now available directly from Cython with\n  the command \"%load_ext cython\".  Cython code can directly be\n  executed in a cell when marked with \"%%cython\".  Code analysis\n  is available with \"%%cython -a\".  Patch by Martín Gaitán.\n\n* Simple support for declaring Python object types in Python signature\n  annotations.  Currently requires setting the compiler directive\n  ``annotation_typing=True``.\n\n* New directive ``use_switch`` (defaults to True) to optionally disable\n  the optimization of chained if statement to C switch statements.\n\n* Defines dynamic_cast et al. in ``libcpp.cast`` and C++ heap data\n  structure operations in ``libcpp.algorithm``.\n\n* Shipped header declarations in ``posix.*`` were extended to cover\n  more of the POSIX API.  Patches by Lars Buitinck and Mark Peek.\n\nOptimizations\n-------------\n\n* Simple calls to C implemented Python functions/methods are faster.\n  This also speeds up many operations on builtins that Cython cannot\n  otherwise optimise.\n\n* The \"and\"/\"or\" operators try to avoid unnecessary coercions of their\n  arguments.  They now evaluate the truth value of each argument\n  independently and only coerce the final result of the whole expression\n  to the target type (e.g. the type on the left side of an assignment).\n  This also avoids reference counting overhead for Python values during\n  evaluation and generally improves the code flow in the generated C code.\n\n* The Python expression \"2 ** N\" is optimised into bit shifting.\n  See https://bugs.python.org/issue21420\n\n* Cascaded assignments (a = b = ...) try to minimise the number of\n  type coercions.\n\n* Calls to ``slice()`` are translated to a straight C-API call.\n\nBugs fixed\n----------\n\n* Crash when assigning memory views from ternary conditional expressions.\n\n* Nested C++ templates could lead to unseparated \">>\" characters being\n  generated into the C++ declarations, which older C++ compilers could\n  not parse.\n\n* Sending SIGINT (Ctrl-C) during parallel cythonize() builds could\n  hang the child processes.\n\n* No longer ignore local setup.cfg files for distutils in pyximport.\n  Patch by Martin Teichmann.\n\n* Taking a ``char*`` from an indexed Python string generated unsafe\n  reference counting code.\n\n* Set literals now create all of their items before trying to add them\n  to the set, following the behaviour in CPython.  This makes a\n  difference in the rare case that the item creation has side effects\n  and some items are not hashable (or if hashing them has side effects,\n  too).\n\n* Cython no longer generates the cross product of C functions for code\n  that uses memory views of fused types in function signatures (e.g.\n  ``cdef func(floating[:] a, floating[:] b)``).  This is considered the\n  expected behaviour by most users and was previously inconsistent with\n  other structured types like C arrays.  Code that really wants all type\n  combinations can create the same fused memoryview type under different\n  names and use those in the signature to make it clear which types are\n  independent.\n\n* Names that were unknown at compile time were looked up as builtins at\n  runtime but not as global module names.  Trying both lookups helps with\n  globals() manipulation.\n\n* Fixed stl container conversion for typedef element types.\n\n* ``obj.pop(x)`` truncated large C integer values of x to ``Py_ssize_t``.\n\n* ``__init__.pyc`` is recognised as marking a package directory\n  (in addition to .py, .pyx and .pxd).\n\n* Syntax highlighting in ``cython-mode.el`` for Emacs no longer\n  incorrectly highlights keywords found as part of longer names.\n\n* Correctly handle ``from cython.submodule cimport name``.\n\n* Fix infinite recursion when using super with cpdef methods.\n\n* No-args ``dir()`` was not guaranteed to return a sorted list.\n\nOther changes\n-------------\n\n* The header line in the generated C files no longer contains the\n  timestamp but only the Cython version that wrote it.  This was\n  changed to make builds more reproducible.\n\n* Removed support for CPython 2.4, 2.5 and 3.1.\n\n* The licensing implications on the generated code were clarified\n  to avoid legal constraints for users.\n\n\n0.20.2 (2014-06-16)\n===================\n\nFeatures added\n--------------\n\n* Some optimisations for set/frozenset instantiation.\n\n* Support for C++ unordered_set and unordered_map.\n\nBugs fixed\n----------\n\n* Access to attributes of optimised builtin methods (e.g.\n  ``[].append.__name__``) could fail to compile.\n\n* Memory leak when extension subtypes add a memory view as attribute\n  to those of the parent type without having Python object attributes\n  or a user provided dealloc method.\n\n* Compiler crash on readonly properties in \"binding\" mode.\n\n* Auto-encoding with ``c_string_encoding=ascii`` failed in Py3.3.\n\n* Crash when subtyping freelist enabled Cython extension types with\n  Python classes that use ``__slots__``.\n\n* Freelist usage is restricted to CPython to avoid problems with other\n  Python implementations.\n\n* Memory leak in memory views when copying overlapping, contiguous slices.\n\n* Format checking when requesting non-contiguous buffers from\n  ``cython.array`` objects was accidentally omitted in Py3.\n\n* C++ destructor calls in extension types could fail to compile in clang.\n\n* Buffer format validation failed for sequences of strings in structs.\n\n* Docstrings on extension type attributes in .pxd files were rejected.\n\n\n0.20.1 (2014-02-11)\n===================\n\nBugs fixed\n----------\n\n* Build error under recent MacOS-X versions where ``isspace()`` could not be\n  resolved by clang.\n\n* List/Tuple literals multiplied by more than one factor were only multiplied\n  by the last factor instead of all.\n\n* Lookups of special methods (specifically for context managers) could fail\n  in Python <= 2.6/3.1.\n\n* Local variables were erroneously appended to the signature introspection\n  of Cython implemented functions with keyword-only arguments under Python 3.\n\n* In-place assignments to variables with inferred Python builtin/extension\n  types could fail with type errors if the result value type was incompatible\n  with the type of the previous value.\n\n* The C code generation order of cdef classes, closures, helper code,\n  etc. was not deterministic, thus leading to high code churn.\n\n* Type inference could fail to deduce C enum types.\n\n* Type inference could deduce unsafe or inefficient types from integer\n  assignments within a mix of inferred Python variables and integer\n  variables.\n\n\n0.20 (2014-01-18)\n=================\n\nFeatures added\n--------------\n\n* Support for CPython 3.4.\n\n* Support for calling C++ template functions.\n\n* ``yield`` is supported in ``finally`` clauses.\n\n* The C code generated for finally blocks is duplicated for each exit\n  case to allow for better optimisations by the C compiler.\n\n* Cython tries to undo the Python optimisationism of assigning a bound\n  method to a local variable when it can generate better code for the\n  direct call.\n\n* Constant Python float values are cached.\n\n* String equality comparisons can use faster type specific code in\n  more cases than before.\n\n* String/Unicode formatting using the '%' operator uses a faster\n  C-API call.\n\n* ``bytearray`` has become a known type and supports coercion from and\n  to C strings.  Indexing, slicing and decoding is optimised. Note that\n  this may have an impact on existing code due to type inference.\n\n* Using ``cdef basestring stringvar`` and function arguments typed as\n  ``basestring`` is now meaningful and allows assigning exactly\n  ``str`` and ``unicode`` objects, but no subtypes of these types.\n\n* Support for the ``__debug__`` builtin.\n\n* Assertions in Cython compiled modules are disabled if the running\n  Python interpreter was started with the \"-O\" option.\n\n* Some types that Cython provides internally, such as functions and\n  generators, are now shared across modules if more than one Cython\n  implemented module is imported.\n\n* The type inference algorithm works more fine granular by taking the\n  results of the control flow analysis into account.\n\n* A new script in ``bin/cythonize`` provides a command line frontend\n  to the cythonize() compilation function (including distutils build).\n\n* The new extension type decorator ``@cython.no_gc_clear`` prevents\n  objects from being cleared during cyclic garbage collection, thus\n  making sure that object attributes are kept alive until deallocation.\n\n* During cyclic garbage collection, attributes of extension types that\n  cannot create reference cycles due to their type (e.g. strings) are\n  no longer considered for traversal or clearing.  This can reduce the\n  processing overhead when searching for or cleaning up reference cycles.\n\n* Package compilation (i.e. ``__init__.py`` files) now works, starting\n  with Python 3.3.\n\n* The cython-mode.el script for Emacs was updated.  Patch by Ivan Andrus.\n\n* An option common_utility_include_dir was added to cythonize() to save\n  oft-used utility code once in a separate directory rather than as\n  part of each generated file.\n\n* ``unraisable_tracebacks`` directive added to control printing of\n  tracebacks of unraisable exceptions.\n\nBugs fixed\n----------\n\n* Abstract Python classes that subtyped a Cython extension type\n  failed to raise an exception on instantiation, and thus ended\n  up being instantiated.\n\n* ``set.add(a_tuple)`` and ``set.discard(a_tuple)`` failed with a\n  TypeError in Py2.4.\n\n* The PEP 3155 ``__qualname__`` was incorrect for nested classes and\n  inner classes/functions declared as ``global``.\n\n* Several corner cases in the try-finally statement were fixed.\n\n* The metaclass of a Python class was not inherited from its parent\n  class(es).  It is now extracted from the list of base classes if not\n  provided explicitly using the Py3 ``metaclass`` keyword argument.\n  In Py2 compilation mode, a ``__metaclass__`` entry in the class\n  dict will still take precedence if not using Py3 metaclass syntax,\n  but only *after* creating the class dict (which may have been done\n  by a metaclass of a base class, see PEP 3115).  It is generally\n  recommended to use the explicit Py3 syntax to define metaclasses\n  for Python types at compile time.\n\n* The automatic C switch statement generation behaves more safely for\n  heterogeneous value types (e.g. mixing enum and char), allowing for\n  a slightly wider application and reducing corner cases.  It now always\n  generates a 'default' clause to avoid C compiler warnings about\n  unmatched enum values.\n\n* Fixed a bug where class hierarchies declared out-of-order could result\n  in broken generated code.\n\n* Fixed a bug which prevented overriding const methods of C++ classes.\n\n* Fixed a crash when converting Python objects to C++ strings fails.\n\nOther changes\n-------------\n\n* In Py3 compilation mode, Python2-style metaclasses declared by a\n  ``__metaclass__`` class dict entry are ignored.\n\n* In Py3.4+, the Cython generator type uses ``tp_finalize()`` for safer\n  cleanup instead of ``tp_del()``.\n\n\n0.19.2 (2013-10-13)\n===================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* Some standard declarations were fixed or updated, including the previously\n  incorrect declaration of ``PyBuffer_FillInfo()`` and some missing bits in\n  ``libc.math``.\n\n* Heap allocated subtypes of ``type`` used the wrong base type struct at the\n  C level.\n\n* Calling the unbound method dict.keys/value/items() in dict subtypes could\n  call the bound object method instead of the unbound supertype method.\n\n* \"yield\" wasn't supported in \"return\" value expressions.\n\n* Using the \"bint\" type in memory views lead to unexpected results.\n  It is now an error.\n\n* Assignments to global/closure variables could catch them in an illegal state\n  while deallocating the old value.\n\nOther changes\n-------------\n\n\n0.19.1 (2013-05-11)\n===================\n\nFeatures added\n--------------\n\n* Completely empty C-API structs for extension type slots (protocols like\n  number/mapping/sequence) are no longer generated into the C code.\n\n* Docstrings that directly follow a public/readonly attribute declaration\n  in a cdef class will be used as docstring of the auto-generated property.\n  This fixes ticket 206.\n\n* The automatic signature documentation tries to preserve more semantics\n  of default arguments and argument types.  Specifically, ``bint`` arguments\n  now appear as type ``bool``.\n\n* A warning is emitted when negative literal indices are found inside of\n  a code section that disables ``wraparound`` handling.  This helps with\n  fixing invalid code that might fail in the face of future compiler\n  optimisations.\n\n* Constant folding for boolean expressions (and/or) was improved.\n\n* Added a build_dir option to cythonize() which allows one to place\n  the generated .c files outside the source tree.\n\nBugs fixed\n----------\n\n* ``isinstance(X, type)`` failed to get optimised into a call to\n  ``PyType_Check()``, as done for other builtin types.\n\n* A spurious ``from datetime cimport *`` was removed from the \"cpython\"\n  declaration package. This means that the \"datetime\" declarations\n  (added in 0.19) are no longer available directly from the \"cpython\"\n  namespace, but only from \"cpython.datetime\". This is the correct\n  way of doing it because the declarations refer to a standard library\n  module, not the core CPython C-API itself.\n\n* The C code for extension types is now generated in topological order\n  instead of source code order to avoid C compiler errors about missing\n  declarations for subtypes that are defined before their parent.\n\n* The ``memoryview`` type name no longer shows up in the module dict of\n  modules that use memory views.  This fixes trac ticket 775.\n\n* Regression in 0.19 that rejected valid C expressions from being used\n  in C array size declarations.\n\n* In C++ mode, the C99-only keyword ``restrict`` could accidentally be\n  seen by the GNU C++ compiler. It is now specially handled for both\n  GCC and MSVC.\n\n* Testing large (> int) C integer values for their truth value could fail\n  due to integer wrap-around.\n\nOther changes\n-------------\n\n\n0.19 (2013-04-19)\n=================\n\nFeatures added\n--------------\n\n* New directives ``c_string_type`` and ``c_string_encoding`` to more easily\n  and automatically convert between C strings and the different Python string\n  types.\n\n* The extension type flag ``Py_TPFLAGS_HAVE_VERSION_TAG`` is enabled by default\n  on extension types and can be disabled using the ``type_version_tag`` compiler\n  directive.\n\n* EXPERIMENTAL support for simple Cython code level line tracing.  Enabled by\n  the \"linetrace\" compiler directive.\n\n* Cython implemented functions make their argument and return type annotations\n  available through the ``__annotations__`` attribute (PEP 3107).\n\n* Access to non-cdef module globals and Python object attributes is faster.\n\n* ``Py_UNICODE*`` coerces from and to Python unicode strings.  This is\n  helpful when talking to Windows APIs, which use compatible wchar_t\n  arrays for strings.  Note that the ``Py_UNICODE`` type is otherwise\n  deprecated as of CPython 3.3.\n\n* ``isinstance(obj, basestring)`` is optimised.  In Python 3 it only tests\n  for instances of ``str`` (i.e. Py2 ``unicode``).\n\n* The ``basestring`` builtin is mapped to ``str`` (i.e. Py2 ``unicode``) when\n  compiling the generated C code under Python 3.\n\n* Closures use freelists, which can speed up their creation quite substantially.\n  This is also visible for short running generator expressions, for example.\n\n* A new class decorator ``@cython.freelist(N)`` creates a static freelist of N\n  instances for an extension type, thus avoiding the costly allocation step if\n  possible. This can speed up object instantiation by 20-30% in suitable\n  scenarios. Note that freelists are currently only supported for base types,\n  not for types that inherit from others.\n\n* Fast extension type instantiation using the ``Type.__new__(Type)`` idiom has\n  gained support for passing arguments.  It is also a bit faster for types defined\n  inside of the module.\n\n* The Python2-only dict methods ``.iter*()`` and ``.view*()`` (requires Python 2.7)\n  are automatically mapped to the equivalent keys/values/items methods in Python 3\n  for typed dictionaries.\n\n* Slicing unicode strings, lists and tuples is faster.\n\n* list.append() is faster on average.\n\n* ``raise Exception() from None`` suppresses the exception context in Py3.3.\n\n* Py3 compatible ``exec(tuple)`` syntax is supported in Py2 code.\n\n* Keyword arguments are supported for cdef functions.\n\n* External C++ classes can be declared nogil.  Patch by John Stumpo.  This fixes\n  trac ticket 805.\n\nBugs fixed\n----------\n\n* 2-value slicing of unknown objects passes the correct slice when the ``getitem``\n  protocol is used instead of the ``getslice`` protocol (especially in Python 3),\n  i.e. ``None`` values for missing bounds instead of ``[0,maxsize]``.  It is also\n  a bit faster in some cases, e.g. for constant bounds.  This fixes trac ticket 636.\n\n* Cascaded assignments of None values to extension type variables failed with\n  a ``TypeError`` at runtime.\n\n* The ``__defaults__`` attribute was not writable for Cython implemented\n  functions.\n\n* Default values of keyword-only arguments showed up in ``__defaults__`` instead\n  of ``__kwdefaults__`` (which was not implemented).  Both are available for\n  Cython implemented functions now, as specified in Python 3.x.\n\n* ``yield`` works inside of ``with gil`` sections.  It previously lead to a crash.\n  This fixes trac ticket 803.\n\n* Static methods without explicitly named positional arguments (e.g. having only\n  ``*args``) crashed when being called.  This fixes trac ticket 804.\n\n* ``dir()`` without arguments previously returned an unsorted list, which now\n  gets sorted as expected.\n\n* ``dict.items()``, ``dict.keys()`` and ``dict.values()`` no longer return lists\n  in Python 3.\n\n* Exiting from an ``except-as`` clause now deletes the exception in Python 3 mode.\n\n* The declarations of ``frexp()`` and ``ldexp()`` in ``math.pxd`` were incorrect.\n\nOther changes\n-------------\n\n\n0.18 (2013-01-28)\n=================\n\nFeatures added\n--------------\n\n* Named Unicode escapes (\"\\N{...}\") are supported.\n\n* Python functions/classes provide the special attribute \"__qualname__\"\n  as defined by PEP 3155.\n\n* Added a directive ``overflowcheck`` which raises an OverflowException when\n  arithmetic with C ints overflow.  This has a modest performance penalty, but\n  is much faster than using Python ints.\n\n* Calls to nested Python functions are resolved at compile time.\n\n* Type inference works across nested functions.\n\n* ``py_bytes_string.decode(...)`` is optimised.\n\n* C ``const`` declarations are supported in the language.\n\nBugs fixed\n----------\n\n* Automatic C++ exception mapping didn't work in nogil functions (only in\n  \"with nogil\" blocks).\n\nOther changes\n-------------\n\n\n0.17.4 (2013-01-03)\n===================\n\nBugs fixed\n----------\n\n* Garbage collection triggered during deallocation of container classes could lead to a double-deallocation.\n\n\n0.17.3 (2012-12-14)\n===================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* During final interpreter cleanup (with types cleanup enabled at compile time), extension types that inherit from base types over more than one level that were cimported from other modules could lead to a crash.\n\n* Weak-reference support in extension types (with a ``cdef __weakref__`` attribute) generated incorrect deallocation code.\n\n* In CPython 3.3, converting a Unicode character to the Py_UNICODE type could fail to raise an overflow for non-BMP characters that do not fit into a wchar_t on the current platform.\n\n* Negative C integer constants lost their longness suffix in the generated C code.\n\nOther changes\n-------------\n\n\n0.17.2 (2012-11-20)\n===================\n\nFeatures added\n--------------\n\n* ``cythonize()`` gained a best effort compile mode that can be used to simply ignore .py files that fail to compile.\n\nBugs fixed\n----------\n\n* Replacing an object reference with the value of one of its cdef attributes could generate incorrect C code that accessed the object after deleting its last reference.\n\n* C-to-Python type coercions during cascaded comparisons could generate invalid C code, specifically when using the 'in' operator.\n\n* \"obj[1,]\" passed a single integer into the item getter instead of a tuple.\n\n* Cyclic imports at module init time did not work in Py3.\n\n* The names of C++ destructors for template classes were built incorrectly.\n\n* In pure mode, type casts in Cython syntax and the C ampersand operator are now rejected. Use the pure mode replacements instead.\n\n* In pure mode, C type names and the sizeof() function are no longer recognised as such and can be used as normal Python names.\n\n* The extended C level support for the CPython array type was declared too late to be used by user defined classes.\n\n* C++ class nesting was broken.\n\n* Better checking for required nullary constructors for stack-allocated C++ instances.\n\n* Remove module docstring in no-docstring mode.\n\n* Fix specialization for varargs function signatures.\n\n* Fix several compiler crashes.\n\nOther changes\n-------------\n\n* An experimental distutils script for compiling the CPython standard library was added as Tools/cystdlib.py.\n\n\n0.17.1 (2012-09-26)\n===================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\n* A reference leak was fixed in the new dict iteration code when the loop target was not a plain variable but an unpacked tuple.\n\n* Memory views did not handle the special case of a NULL buffer strides value, as allowed by PEP3118.\n\nOther changes\n-------------\n\n\n0.17 (2012-09-01)\n=================\n\nFeatures added\n--------------\n\n* Alpha quality support for compiling and running Cython generated extension modules in PyPy (through cpyext). Note that this requires at least PyPy 1.9 and in many cases also adaptations in user code, especially to avoid borrowed references when no owned reference is being held directly in C space (a reference in a Python list or dict is not enough, for example). See the documentation on porting Cython code to PyPy.\n\n* \"yield from\" is supported (PEP 380) and a couple of minor problems with generators were fixed.\n\n* C++ STL container classes automatically coerce from and to the equivalent Python container types on typed assignments and casts. Note that the data in the containers is copied during this conversion.\n\n* C++ iterators can now be iterated over using \"for x in cpp_container\" whenever cpp_container has begin() and end() methods returning objects satisfying the iterator pattern (that is, it can be incremented, dereferenced, and compared (for non-equality)).\n\n* cdef classes can now have C++ class members (provided a zero-argument constructor exists)\n\n* A new cpython.array standard cimport file allows to efficiently talk to the stdlib array.array data type in Python 2. Since CPython does not export an official C-API for this module, it receives special casing by the compiler in order to avoid setup overhead on user side. In Python 3, both buffers and memory views on the array type already worked out of the box with earlier versions of Cython due to the native support for the buffer interface in the Py3 array module.\n\n* Fast dict iteration is now enabled optimistically also for untyped variables when the common iteration methods are used.\n\n* The unicode string processing code was adapted for the upcoming CPython 3.3 (PEP 393, new Unicode buffer layout).\n\n* Buffer arguments and memory view arguments in Python functions can be declared \"not None\" to raise a TypeError on None input.\n\n* c(p)def functions in pure mode can specify their return type with \"@cython.returns()\".\n\n* Automatic dispatch for fused functions with memoryview arguments\n\n* Support newaxis indexing for memoryviews\n\n* Support decorators for fused functions\n\nBugs fixed\n----------\n\n* Old-style Py2 imports did not work reliably in Python 3.x and were broken in Python 3.3. Regardless of this fix, it's generally best to be explicit about relative and global imports in Cython code because old-style imports have a higher overhead. To this end, \"from __future__ import absolute_import\" is supported in Python/Cython 2.x code now (previous versions of Cython already used it when compiling Python 3 code).\n\n* Stricter constraints on the \"inline\" and \"final\" modifiers. If your code does not compile due to this change, chances are these modifiers were previously being ignored by the compiler and can be removed without any performance regression.\n\n* Exceptions are always instantiated while raising them (as in Python), instead of risking to instantiate them in potentially unsafe situations when they need to be handled or otherwise processed.\n\n* locals() properly ignores names that do not have Python compatible types (including automatically inferred types).\n\n* Some garbage collection issues of memory views were fixed.\n\n* numpy.pxd compiles in Python 3 mode.\n\n* Several C compiler warnings were fixed.\n\n* Several bugs related to memoryviews and fused types were fixed.\n\n* Several bug-fixes and improvements related to cythonize(), including ccache-style caching.\n\nOther changes\n-------------\n\n* libc.string provides a convenience declaration for const uchar in addition to const char.\n\n* User declared char* types are now recognised as such and auto-coerce to and from Python bytes strings.\n\n* callable() and next() compile to more efficient C code.\n\n* list.append() is faster on average.\n\n* Modules generated by @cython.inline() are written into the directory pointed to by the environment variable CYTHON_CACHE_DIR if set.\n\n\n0.16 (2012-04-21)\n=================\n\nFeatures added\n--------------\n\n* Enhancements to Cython's function type (support for weak references, default arguments, code objects, dynamic attributes, classmethods, staticmethods, and more)\n\n* Fused Types - Template-like support for functions and methods CEP 522 (docs)\n\n* Typed views on memory - Support for efficient direct and indirect buffers (indexing, slicing, transposing, ...) CEP 517 (docs)\n\n* super() without arguments\n\n* Final cdef methods (which translate into direct calls on known instances)\n\nBugs fixed\n----------\n\n* fix alignment handling for record types in buffer support\n\nOther changes\n-------------\n\n* support default arguments for closures\n\n* search sys.path for pxd files\n\n* support C++ template casting\n\n* faster traceback building and faster generator termination\n\n* support inplace operators on indexed buffers\n\n* allow nested prange sections\n\n\n0.15.1 (2011-09-19)\n===================\n\nFeatures added\n--------------\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n\n0.15 (2011-08-05)\n=================\n\nFeatures added\n--------------\n\n* Generators (yield) - Cython has full support for generators, generator expressions and PEP 342 coroutines.\n\n* The nonlocal keyword is supported.\n\n* Re-acquiring the gil: with gil - works as expected within a nogil context.\n\n* OpenMP support: prange.\n\n* Control flow analysis prunes dead code and emits warnings and errors about uninitialised variables.\n\n* Debugger command cy set to assign values of expressions to Cython variables and cy exec counterpart $cy_eval().\n\n* Exception chaining PEP 3134.\n\n* Relative imports PEP 328.\n\n* Improved pure syntax including cython.cclass, cython.cfunc, and cython.ccall.\n\n* The with statement has its own dedicated and faster C implementation.\n\n* Support for del.\n\n* Boundschecking directives implemented for builtin Python sequence types.\n\n* Several updates and additions to the shipped standard library .pxd files.\n\n* Forward declaration of types is no longer required for circular references.\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n* Uninitialized variables are no longer initialized to None and accessing them has the same semantics as standard Python.\n\n* globals() now returns a read-only dict of the Cython module's globals, rather than the globals of the first non-Cython module in the stack\n\n* Many C++ exceptions are now special cased to give closer Python counterparts. This means that except+ functions that formerly raised generic RuntimeErrors may raise something else such as ArithmeticError.\n\n* The inlined generator expressions (introduced in Cython 0.13) were disabled in favour of full generator expression support. This breaks code that previously used them inside of cdef functions (usage in def functions continues to work) and induces a performance regression for cases that continue to work but that were previously inlined. We hope to reinstate this feature in the near future.\n\n\n0.14.1 (2011-02-04)\n===================\n\nFeatures added\n--------------\n\n* The gdb debugging support was extended to include all major Cython features, including closures.\n\n* raise MemoryError() is now safe to use as Cython replaces it with the correct C-API call.\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n* Decorators on special methods of cdef classes now raise a compile time error rather than being ignored.\n\n* In Python 3 language level mode (-3 option), the 'str' type is now mapped to 'unicode', so that cdef str s declares a Unicode string even when running in Python 2.\n\n\n0.14 (2010-12-14)\n=================\n\nFeatures added\n--------------\n\n* Python classes can now be nested and receive a proper closure at definition time.\n\n* Redefinition is supported for Python functions, even within the same scope.\n\n* Lambda expressions are supported in class bodies and at the module level.\n\n* Metaclasses are supported for Python classes, both in Python 2 and Python 3 syntax. The Python 3 syntax (using a keyword argument in the type declaration) is preferred and optimised at compile time.\n\n* \"final\" extension classes prevent inheritance in Python space. This feature is available through the new \"cython.final\" decorator. In the future, these classes may receive further optimisations.\n\n* \"internal\" extension classes do not show up in the module dictionary. This feature is available through the new \"cython.internal\" decorator.\n\n* Extension type inheritance from builtin types, such as \"cdef class MyUnicode(unicode)\", now works without further external type redeclarations (which are also strongly discouraged now and continue to issue a warning).\n\n* GDB support. https://docs.cython.org/src/userguide/debugging.html\n\n* A new build system with support for inline distutils directives, correct dependency tracking, and parallel compilation. https://github.com/cython/cython/wiki/enhancements-distutils_preprocessing\n\n* Support for dynamic compilation at runtime via the new cython.inline function and cython.compile decorator. https://github.com/cython/cython/wiki/enhancements-inline\n\n* \"nogil\" blocks are supported when compiling pure Python code by writing \"with cython.nogil\".\n\n* Iterating over arbitrary pointer types is now supported, as is an optimized version of the in operator, e.g. x in ptr[a:b].\n\nBugs fixed\n----------\n\n* In parallel assignments, the right side was evaluated in reverse order in 0.13. This could result in errors if it had side effects (e.g. function calls).\n\n* In some cases, methods of builtin types would raise a SystemError instead of an AttributeError when called on None.\n\nOther changes\n-------------\n\n* Constant tuples are now cached over the lifetime of an extension module, just like CPython does. Constant argument tuples of Python function calls are also cached.\n\n* Closures have tightened to include exactly the names used in the inner functions and classes. Previously, they held the complete locals of the defining function.\n\n* The builtin \"next()\" function in Python 2.6 and later is now implemented internally and therefore available in all Python versions. This makes it the preferred and portable way of manually advancing an iterator.\n\n* In addition to the previously supported inlined generator expressions in 0.13, \"sorted(genexpr)\" can now be used as well. Typing issues were fixed in \"sum(genexpr)\" that could lead to invalid C code being generated. Other known issues with inlined generator expressions were also fixed that make upgrading to 0.14 a strong recommendation for code that uses them. Note that general generators and generator expressions continue to be not supported.\n\n* Inplace arithmetic operators now respect the cdivision directive and are supported for complex types.\n\n* Typing a variable as type \"complex\" previously gave it the Python object type. It now uses the appropriate C/C++ double complex type. A side-effect is that assignments and typed function parameters now accept anything that Python can coerce to a complex, including integers and floats, and not only complex instances.\n\n* Large integer literals pass through the compiler in a safer way. To prevent truncation in C code, non 32-bit literals are turned into Python objects if not used in a C context. This context can either be given by a clear C literal suffix such as \"UL\" or \"LL\" (or \"L\" in Python 3 code), or it can be an assignment to a typed variable or a typed function argument, in which case it is up to the user to take care of a sufficiently large value space of the target.\n\n* Python functions are declared in the order they appear in the file, rather than all being created at module creation time. This is consistent with Python and needed to support, for example, conditional or repeated declarations of functions. In the face of circular imports this may cause code to break, so a new --disable-function-redefinition flag was added to revert to the old behavior. This flag will be removed in a future release, so should only be used as a stopgap until old code can be fixed.\n\n\n0.13 (2010-08-25)\n=================\n\nFeatures added\n--------------\n\n* Closures are fully supported for Python functions. Cython supports inner functions and lambda expressions. Generators and generator expressions are not supported in this release.\n\n* Proper C++ support. Cython knows about C++ classes, templates and overloaded function signatures, so that Cython code can interact with them in a straight forward way.\n\n* Type inference is enabled by default for safe C types (e.g. double, bint, C++ classes) and known extension types. This reduces the need for explicit type declarations and can improve the performance of untyped code in some cases. There is also a verbose compile mode for testing the impact on user code.\n\n* Cython's for-in-loop can iterate over C arrays and sliced pointers. The type of the loop variable will be inferred automatically in this case.\n\n* The Py_UNICODE integer type for Unicode code points is fully supported, including for-loops and 'in' tests on unicode strings. It coerces from and to single character unicode strings. Note that untyped for-loop variables will automatically be inferred as Py_UNICODE when iterating over a unicode string. In most cases, this will be much more efficient than yielding sliced string objects, but can also have a negative performance impact when the variable is used in a Python context multiple times, so that it needs to coerce to a unicode string object more than once. If this happens, typing the loop variable as unicode or object will help.\n\n* The built-in functions any(), all(), sum(), list(), set() and dict() are inlined as plain for loops when called on generator expressions. Note that generator expressions are not generally supported apart from this feature. Also, tuple(genexpr) is not currently supported - use tuple([listcomp]) instead.\n\n* More shipped standard library declarations. The python_* and stdlib/stdio .pxd files have been deprecated in favor of clib.* and cpython[.*] and may get removed in a future release.\n\n* Pure Python mode no longer disallows non-Python keywords like 'cdef', 'include' or 'cimport'. It also no longer recognises syntax extensions like the for-from loop.\n\n* Parsing has improved for Python 3 syntax in Python code, although not all features are correctly supported. The missing Python 3 features are being worked on for the next release.\n\n* from __future__ import print_function is supported in Python 2.6 and later. Note that there is currently no emulation for earlier Python versions, so code that uses print() with this future import will require at least Python 2.6.\n\n* New compiler directive language_level (valid values: 2 or 3) with corresponding command line options -2 and -3 requests source code compatibility with Python 2.x or Python 3.x respectively. Language level 3 currently enforces unicode literals for unprefixed string literals, enables the print function (requires Python 2.6 or later) and keeps loop variables in list comprehensions from leaking.\n\n* Loop variables in set/dict comprehensions no longer leak into the surrounding scope (following Python 2.7). List comprehensions are unchanged in language level 2.\n\n* print >> stream\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n* The availability of type inference by default means that Cython will also infer the type of pointers on assignments. Previously, code like this::\n\n     cdef char* s = ...\n     untyped_variable = s\n\n  would convert the char* to a Python bytes string and assign that. This is no longer the case and no coercion will happen in the example above. The correct way of doing this is through an explicit cast or by typing the target variable, i.e.\n\n  ::\n\n     cdef char* s = ...\n     untyped_variable1 = <bytes>s\n     untyped_variable2 = <object>s\n\n     cdef object py_object = s\n     cdef bytes  bytes_string = s\n\n* bool is no longer a valid type name by default. The problem is that it's not clear whether bool should refer to the Python type or the C++ type, and expecting one and finding the other has already led to several hard-to-find bugs. Both types are available for importing: you can use from cpython cimport bool for the Python bool type, and from libcpp cimport bool for the C++ type. bool is still a valid object by default, so one can still write bool(x).\n\n* ``__getsegcount__`` is now correctly typed to take a ``Py_size_t*`` rather than an ``int*``.\n\n\n0.12.1 (2010-02-02)\n===================\n\nFeatures added\n--------------\n\n* Type inference improvements.\n\n  * There have been several bug fixes and improvements to the type inferencer.\n\n  * Notably, there is now a \"safe\" mode enabled by setting the infer_types directive to None. (The None here refers to the \"default\" mode, which will be the default in 0.13.) This safe mode limits inference to Python object types and C doubles, which should speed up execution without affecting any semantics such as integer overflow behavior like infer_types=True might. There is also an infer_types.verbose option which allows one to see what types are inferred.\n\n* The boundscheck directive works for lists and tuples as well as buffers.\n\n* len(s) and s.decode(\"encoding\") are efficiently supported for char* s.\n\n* Cython's INLINE macro has been renamed to CYTHON_INLINE to reduce conflict and has better support for the MSVC compiler on Windows. It is no longer clobbered if externally defined.\n\n* Revision history is now omitted from the source package, resulting in a 85% size reduction. Running make repo will download the history and turn the directory into a complete Mercurial working repository.\n\n* Cython modules don't need to be recompiled when the size of an external type grows. (A warning, rather than an error, is produced.) This should be helpful for binary distributions relying on NumPy.\n\nBugs fixed\n----------\n\n* Several other bugs and minor improvements have been made. This release should be fully backwards compatible with 0.12.\n\nOther changes\n-------------\n\n\n0.12 (2009-11-23)\n=================\n\nFeatures added\n--------------\n\n* Type inference with the infer_types directive\n\n* Seamless C++ complex support\n\n* Fast extension type instantiation using the normal Python meme obj = MyType.__new__(MyType)\n\n* Improved support for Py3.1\n\n* Cython now runs under Python 3.x using the 2to3 tool\n\n* unittest support for doctests in Cython modules\n\n* Optimised handling of C strings (char*): for c in cstring[2:50] and cstring.decode()\n\n* Looping over c pointers: for i in intptr[:50].\n\n* pyximport improvements\n\n* cython_freeze improvements\n\nBugs fixed\n----------\n\n* Many bug fixes\n\nOther changes\n-------------\n\n* Many other optimisation, e.g. enumerate() loops, parallel swap assignments (a,b = b,a), and unicode.encode()\n\n* More complete numpy.pxd\n\n\n0.11.2 (2009-05-20)\n===================\n\nFeatures added\n--------------\n\n* There's now native complex floating point support! C99 complex will be used if complex.h is included, otherwise explicit complex arithmetic working on all C compilers is used. [Robert Bradshaw]\n\n  ::\n\n      cdef double complex a = 1 + 0.3j\n      cdef np.ndarray[np.complex128_t, ndim=2] arr = \\\n         np.zeros(10, np.complex128)\n\n* Cython can now generate a main()-method for embedding of the Python interpreter into an executable (see :issue:`289`) [Robert Bradshaw]\n\n* @wraparound directive (another way to disable arr[idx] for negative idx) [Dag Sverre Seljebotn]\n\n* Correct support for NumPy record dtypes with different alignments, and \"cdef packed struct\" support [Dag Sverre Seljebotn]\n\n* @callspec directive, allowing custom calling convention macros [Lisandro Dalcin]\n\nBugs fixed\n----------\n\nOther changes\n-------------\n\n* Bug fixes and smaller improvements. For the full list, see [1].\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.05078125,
          "content": "See [docs/CONTRIBUTING.rst](docs/CONTRIBUTING.rst).\n"
        },
        {
          "name": "COPYING.txt",
          "type": "blob",
          "size": 0.73828125,
          "content": "The original Pyrex code as of 2006-04 is licensed under the following\nlicense: \"Copyright stuff: Pyrex is free of restrictions. You may use,\nredistribute, modify and distribute modified versions.\"\n\n------------------\n\nCython, which derives from Pyrex, is licensed under the Apache 2.0\nSoftware License.  More precisely, all modifications and new code\nmade to go from Pyrex to Cython are so licensed.\n\nSee LICENSE.txt for more details.\n\n------------------\n\nThe output of a Cython compilation is NOT considered a derivative\nwork of Cython.  Specifically, though the compilation process may\nembed snippets of varying lengths into the final output, these\nsnippets, as embedded in the output, do not encumber the resulting\noutput with any license restrictions.\n"
        },
        {
          "name": "Cython",
          "type": "tree",
          "content": null
        },
        {
          "name": "Demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "Doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALL.txt",
          "type": "blob",
          "size": 0.5986328125,
          "content": "Cython - Installation Instructions\n==================================\n\nYou have several installation options:\n\n(1) Use pip to install Cython from PyPI:\n\n        pip install Cython\n\nOR\n\n(2) From a source copy, run pip in the top directory as follows:\n\n        pip install .\n\n    This will install the Cython package\n    into your Python system.\n\nOR\n\n(3) If you prefer not to modify your Python\n    installation, arrange for the directory\n    containing this file (INSTALL.txt) to be in\n    your PYTHONPATH. On unix, also put the bin\n    directory on your PATH.\n\nSee README.txt for pointers to other documentation.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 9.935546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 1.041015625,
          "content": "include MANIFEST.in README.rst INSTALL.txt ToDo.txt USAGE.txt CHANGES.rst\ninclude COPYING.txt LICENSE.txt Makefile\ninclude .gitrev\ninclude pylintrc\ninclude tox.ini\ninclude setup.py\ninclude setup.cfg\ninclude setupegg.py\ninclude bin/*\ninclude *requirements*.txt\ninclude cython.py cythonize.py cygdb.py\nrecursive-include Cython *.pyx *.pxd *.pyi\ninclude Cython/Parser/Grammar Cython/Parser/__init__.py\ninclude Doc/*\n\ninclude Demos/*.pyx\ninclude Demos/*.py\ninclude Demos/callback/*\ninclude Demos/benchmarks/*\ninclude Demos/embed/*\ninclude Demos/freeze/*\ninclude Demos/libraries/*\ninclude Demos/Makefile*\nrecursive-include Cython/Debugger/Tests *.pyx *.pxd *.c *.h\nrecursive-include Cython/Utility *.pyx *.pxd *.c *.h *.cpp\nrecursive-include Tools *\nrecursive-include tests *.pyx *.pxd *.pxi *.py *.h *.hpp *.BROKEN bugs.txt\nrecursive-include tests *_lib.cpp *.srctree\nrecursive-include docs *\ninclude runtests.py\n\ninclude Cython/Debugger/Tests/cfuncs.c\ninclude Cython/Debugger/Tests/codefile\n\nrecursive-include pyximport *.py\ninclude pyximport/PKG-INFO pyximport/README\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.86328125,
          "content": "PACKAGENAME=Cython\nPYTHON?=python3\nTESTOPTS?=\nREPO = git://github.com/cython/cython.git\nVERSION?=$(shell sed -ne 's|^__version__\\s*=\\s*\"\\([^\"]*\\)\".*|\\1|p' Cython/Shadow.py)\nPARALLEL?=-j5\n\nMANYLINUX_CFLAGS=-O3 -g0 -mtune=generic -pipe -fPIC\nMANYLINUX_LDFLAGS=\nMANYLINUX_IMAGES= \\\n\tmanylinux2014_x86_64 \\\n\tmanylinux2014_i686 \\\n\tmusllinux_1_1_x86_64 \\\n\tmusllinux_1_1_aarch64 \\\n\tmanylinux_2_24_x86_64 \\\n\tmanylinux_2_24_i686 \\\n\tmanylinux_2_24_aarch64 \\\n\tmanylinux_2_28_x86_64 \\\n\tmanylinux_2_28_aarch64 \\\n#\tmanylinux_2_24_ppc64le \\\n#\tmanylinux_2_24_s390x\n\nall:    local\n\nlocal:\n\t${PYTHON} setup.py build_ext --inplace $(PARALLEL)\n\nplocal:\n\t${PYTHON} setup.py build_ext --inplace --cython-profile $(PARALLEL)\n\nsdist: dist/$(PACKAGENAME)-$(VERSION).tar.gz\n\ndist/$(PACKAGENAME)-$(VERSION).tar.gz:\n\t$(PYTHON) setup.py sdist\n\npywheel: dist/$(PACKAGENAME)-$(VERSION)-py3-none-any.whl\n\ndist/$(PACKAGENAME)-$(VERSION)-py3-none-any.whl:\n\t${PYTHON} setup.py bdist_wheel --no-cython-compile\n\t[ -f \"$@\" ]  # check that we generated the expected Py3-only wheel\n\nTMPDIR = .repo_tmp\n.git: .gitrev\n\trm -rf $(TMPDIR)\n\tgit clone -n $(REPO) $(TMPDIR)\n\tcd $(TMPDIR) && git reset -q \"$(shell cat .gitrev)\"\n\tmv $(TMPDIR)/.git .\n\trm -rf $(TMPDIR)\n\tgit ls-files -d | xargs git checkout --\n\n# Create a git repo from an unpacked source directory.\nrepo: .git\n\n\nclean:\n\t@echo Cleaning Source\n\t@rm -fr build\n\t@rm -f *.py[co] */*.py[co] */*/*.py[co] */*/*/*.py[co]\n\t@rm -f *.so */*.so */*/*.so\n\t@rm -f *.pyd */*.pyd */*/*.pyd\n\t@rm -f *~ */*~ */*/*~\n\t@rm -f core */core\n\t@rm -f Cython/*.c\n\t@rm -f Cython/Compiler/*.c\n\t@rm -f Cython/Plex/*.c\n\t@rm -f Cython/Tempita/*.c\n\t@rm -f Cython/Runtime/refnanny.c\n\t@(cd Demos; $(MAKE) clean)\n\ntestclean:\n\trm -fr BUILD TEST_TMP\n\ntest:\ttestclean\n\t${PYTHON} runtests.py -vv ${TESTOPTS}\n\nchecks:\n\t${PYTHON} runtests.py -vv --no-unit --no-doctest --no-file --no-pyregr --no-examples\n\ns5:\n\t$(MAKE) -C Doc/s5 slides\n\nqemu-user-static:\n\tdocker run --rm --privileged hypriot/qemu-register\n\nwheel_manylinux: sdist $(addprefix wheel_,$(MANYLINUX_IMAGES))\n$(addprefix wheel_,$(filter-out %_x86_64, $(filter-out %_i686, $(MANYLINUX_IMAGES)))): qemu-user-static\n\nwheel_%: dist/$(PACKAGENAME)-$(VERSION).tar.gz\n\techo \"Building wheels for $(PACKAGENAME) $(VERSION)\"\n\tmkdir -p wheelhouse_$(subst wheel_,,$@)\n\ttime docker run --rm -t \\\n\t\t-v $(shell pwd):/io \\\n\t\t-e CFLAGS=\"$(MANYLINUX_CFLAGS)\" \\\n\t\t-e LDFLAGS=\"$(MANYLINUX_LDFLAGS) -fPIC\" \\\n\t\t-e WHEELHOUSE=wheelhouse$(subst wheel_musllinux,,$(subst wheel_manylinux,,$@)) \\\n\t\tquay.io/pypa/$(subst wheel_,,$@) \\\n\t\tbash -c '\\\n\t\t\trm -fr /opt/python/*pypy* ; \\\n\t\t\trm -fr /opt/python/*{27*,3[456]*} ; \\\n\t\t\tls /opt/python/ ; \\\n\t\t\tfor PYBIN in /opt/python/cp*/bin; do \\\n\t\t    $$PYBIN/python -V; \\\n\t\t    { $$PYBIN/pip wheel -w /io/$$WHEELHOUSE /io/$< & } ; \\\n\t\t    done; wait; \\\n\t\t    for whl in /io/$$WHEELHOUSE/$(PACKAGENAME)-$(VERSION)-*-linux_*.whl; do auditwheel repair $$whl -w /io/$$WHEELHOUSE; done'\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 6.1123046875,
          "content": "Welcome to Cython!\n==================\n\nCython is a Python compiler that makes writing C extensions for\nPython as easy as Python itself.  Cython is based on Pyrex,\nbut supports more cutting edge functionality and optimizations.\n\nCython translates Python code to C/C++ code, but additionally supports calling\nC functions and declaring C types on variables and class attributes.\nThis allows the compiler to generate very efficient C code from Cython code.\n\nThis makes Cython the ideal language for wrapping external C libraries, and\nfor fast C modules that speed up the execution of Python code.\n\n* Official website: https://cython.org/\n* Documentation: https://docs.cython.org/\n* Github repository: https://github.com/cython/cython\n* Wiki: https://github.com/cython/cython/wiki\n\nCython has `about 30 million downloads <https://pypistats.org/packages/cython>`_\nper month on PyPI.  You can **support the Cython project** via\n`Github Sponsors <https://github.com/users/scoder/sponsorship>`_ or\n`Tidelift <https://tidelift.com/subscription/pkg/pypi-cython>`_.\n\n\nInstallation:\n-------------\n\nIf you already have a C compiler, just run following command::\n\n   pip install Cython\n\notherwise, see `the installation page <https://docs.cython.org/en/latest/src/quickstart/install.html>`_.\n\n\nLicense:\n--------\n\nThe original Pyrex program was licensed \"free of restrictions\" (see below).\nCython itself is licensed under the permissive **Apache License**.\n\nSee `LICENSE.txt <https://github.com/cython/cython/blob/master/LICENSE.txt>`_.\n\n\nContributing:\n-------------\n\nWant to contribute to the Cython project?\nHere is some `help to get you started <https://github.com/cython/cython/blob/master/docs/CONTRIBUTING.rst>`_.\n\n\nDifferences to other Python compilers\n-------------------------------------\n\nStarted as a project in the early 2000s, Cython has outlived\n`most other attempts <https://wiki.python.org/moin/PythonImplementations#Compilers>`_\nat producing static compilers for the Python language.\n\nSimilar projects that have a relevance today include:\n\n* `PyPy <https://www.pypy.org/>`_, a Python implementation with a JIT compiler.\n\n  * Pros: JIT compilation with runtime optimisations, fully language compliant,\n    good integration with external C/C++ code\n  * Cons: non-CPython runtime, relatively large resource usage of the runtime,\n    limited compatibility with CPython extensions, non-obvious performance results\n\n* `Numba <http://numba.pydata.org/>`_, a Python extension that features a\n  JIT compiler for a subset of the language, based on the LLVM compiler\n  infrastructure (probably best known for its ``clang`` C compiler).\n  It mostly targets numerical code that uses NumPy.\n\n  * Pros: JIT compilation with runtime optimisations\n  * Cons: limited language support, relatively large runtime dependency (LLVM),\n    non-obvious performance results\n\n* `Pythran <https://pythran.readthedocs.io/>`_, a static Python-to-C++\n  extension compiler for a subset of the language, mostly targeted\n  at numerical computation.  Pythran can be (and is probably best) used\n  as an additional\n  `backend for NumPy code <https://cython.readthedocs.io/en/latest/src/userguide/numpy_pythran.html>`_\n  in Cython.\n\n* `mypyc <https://mypyc.readthedocs.io/>`_, a static Python-to-C extension\n  compiler, based on the `mypy <http://www.mypy-lang.org/>`_ static Python\n  analyser.  Like Cython's\n  `pure Python mode <https://cython.readthedocs.io/en/latest/src/tutorial/pure.html>`_,\n  mypyc can make use of PEP-484 type annotations to optimise code for static types.\n\n  * Pros: good support for language and PEP-484 typing, good type inference,\n    reasonable performance gains\n  * Cons: no support for low-level optimisations and typing,\n    opinionated Python type interpretation, reduced Python compatibility\n    and introspection after compilation\n\n* `Nuitka <https://nuitka.net/>`_, a static Python-to-C extension compiler.\n\n  * Pros: highly language compliant, reasonable performance gains,\n    support for static application linking (similar to\n    `cython_freeze <https://github.com/cython/cython/blob/master/bin/cython_freeze>`_\n    but with the ability to bundle library dependencies into a self-contained\n    executable)\n  * Cons: no support for low-level optimisations and typing\n\nIn comparison to the above, Cython provides\n\n* fast, efficient and highly compliant support for almost all\n  Python language features, including dynamic features and introspection\n* full runtime compatibility with all still-in-use and future versions\n  of CPython\n* \"generate once, compile everywhere\" C code generation that allows for\n  reproducible performance results and testing\n* C compile time adaptation to the target platform and Python version\n* support for other C-API implementations, including PyPy and Pyston\n* seamless integration with C/C++ code\n* broad support for manual optimisation and tuning down to the C level\n* a large user base with thousands of libraries, packages and tools\n* almost two decades of bug fixing and static code optimisations\n\n\nGet the full source history:\n----------------------------\n\nNote that Cython used to ship the full version control repository in its source\ndistribution, but no longer does so due to space constraints.  To get the\nfull source history from a downloaded source archive, make sure you have git\ninstalled, then step into the base directory of the Cython source distribution\nand type::\n\n    make repo\n\n\nThe following is from Pyrex:\n------------------------------------------------------\nThis is a development version of Pyrex, a language\nfor writing Python extension modules.\n\nFor more info, take a look at:\n\n* Doc/About.html for a description of the language\n* INSTALL.txt    for installation instructions\n* USAGE.txt      for usage instructions\n* Demos          for usage examples\n\nComments, suggestions, bug reports, etc. are most\nwelcome!\n\nCopyright stuff: Pyrex is free of restrictions. You\nmay use, redistribute, modify and distribute modified\nversions.\n\nThe latest version of Pyrex can be found `here <https://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/>`_.\n\n| Greg Ewing, Computer Science Dept\n| University of Canterbury\n| Christchurch, New Zealand\n\n A citizen of NewZealandCorp, a wholly-owned subsidiary of USA Inc.\n"
        },
        {
          "name": "ToDo.txt",
          "type": "blob",
          "size": 7.1123046875,
          "content": "See http://trac.cython.org/cython_trac and http://wiki.cython.org/enhancements\n\n\n-- The Original Pyrex Todo List --\n\nDONE - Pointer-to-function types.\n\nDONE - Nested declarators.\n\nDONE - Varargs C func defs and calls.\n\nDONE - * and ** args in Python func defs.\n\nDONE - Default argument values.\n\nDONE - Tracebacks.\n\nDONE - Disallow creating char * from Python temporary anywhere\n       (not just on assignment).\n\nDONE - Module and function and class doc strings.\n\nDONE - Predeclare C functions.\n\nDONE - Constant expressions.\n\nDONE - Forward C struct declarations.\n\nDONE - Prefix & operator.\n\nDONE - Get rid of auto string->char coercion and\n       add a c'X' syntax for char literals.\n\nDONE - Cascaded assignments (a = b = c).\n\nDONE - 'include' statement for including other Pyrex files.\n\nDONE - Add command line option for specifying name of generated C file.\n\nDONE - Add 'else' clause to try-except.\n\nDONE - Allow extension types to be declared \"public\" so they\n       can be accessed from another Pyrex module or a C file.\n\nDONE - Don't try to generate objstruct definition for external\n       extension type declared without suite (treat as though\n       declared with empty suite).\n\nDONE - Implement two-argument form of 'assert' statement.\n\nConst types.\n\nTuple/list construction: Evaluate & store items one at a time?\n\nVarargs argument traversal.\n\nUse PyDict_SetItemString to build keyword arg dicts?\n(Or wait until names are interned.)\n\nIntern names.\n\nprint >>file\n\nabs() and anything similar.\n\nSemicolon-separated statement lists.\n\nOptional semicolons after C declarations.\n\nMultiple C declarations on one line?\n\nOptimise return without value outside of try-finally.\n\nexec statement.\n\nfrom ... import statement.\n\nUse iterator protocol for unpacking.\n\nSave & restore exception being handled on function entry/exit.\n\nIn-place operators (+=, etc).\n\nConstant declarations. Syntax?\n\nDONE - Some way for C functions to signal Python errors?\n\nCheck for lack of return with value in non-void C functions?\n\nAllow 'pass' in struct/union/enum definition.\n\nMake C structs callable as constructors.\n\nDONE - Provide way of specifying C names.\n\nDONE - Public cdefs.\n\nWhen calling user __dealloc__ func, save & restore exception.\n\nDONE - Forward declaration of extension types.\n\nComplex number parsetuple format?\n\nDONE - long long type\n\nDONE - long double type?\n\nWindows __fooblarg function declaration things.\n\nGenerate type, var and func declarations in the same order that\nthey appear in the source file.\n\nProvide a way of declaring a C function as returning a\nborrowed Python reference.\n\nProvide a way of specifying whether a Python object obtained\nby casting a pointer should be treated as a new reference\nor not.\n\nOptimize integer for-loops.\n\nMake sizeof() take types as well as variables.\n\nAllow \"unsigned\" to be used alone as a type name.\n\nAllow duplicate declarations, at least in extern-from.\n\nDo something about installing proper version of pyrexc\nscript according to platform in setup.py.\n\nDONE - Add \"-o filename\" command line option to unix/dos versions.\n\nRecognise #line directives?\n\nCatch floating point exceptions?\n\nCheck that forward-declared non-external extension types\nare defined.\n\nGenerate type test when casting from one Python type\nto another.\n\nGenerate a Pyrex include file for public declarations\nas well as a C one.\n\nSyntax for defining indefinite-sized int & float types.\n\nAllow ranges of exception values.\n\nSupport \"complex double\" and \"complex float\"?\n\nAllow module-level Python variables to be declared extern.\n\nConsider:\n>cdef extern from \"foo.h\":\n>    int dosomething() except -1 raise MyException\n\nProperties for Python types.\n\nDONE - Properties for extension types.\n\nFind a way to make classmethod and staticmethod work better.\n\nDONE - Document workarounds for classmethod and staticmethod.\n\nStatically initialised C arrays & structs.\n\nReduce generation of unused vars and unreachable code?\n\nSupport for acquiring and releasing GIL.\n\nMake docstrings of extension type special methods work.\n\nTreat result of getting C attribute of extension type as non-ephemeral.\n\nMake None a reserved identifier.\n\nTeach it about builtin functions that correspond to\nPython/C API calls.\n\nTeach it about common builtin types.\n\nOption for generating a main() function?\n\nDONE - Allow an extension type to inherit from another type.\n\nDo something about external C functions declared as returning\nconst * types?\n\nUse PyString_FromStringAndSize for string literals?\n\nDONE - C functions as methods of extension types.\n\nWhat to do about __name__ etc. attributes of a module (they are\ncurrently assumed to be built-in names).\n\nUse PyDict_GetItem etc. on module & builtins dicts for speed.\n\nIntern all string literals used as Python strings?\n[Koshy <jkoshy@freebsd.org>]\n\nMake extension types weak-referenceable.\n[Matthias Baas <baas@ira.uka.de>]\n\nMake 'pass' work in the body of an extern-from struct\nor union.\n\nDisallow a filename which results in an illegal identifier when\nused as a module name.\n\nUse ctypedef names.\n\nProvide an easy way of exposing a set of enum values as Python names.\n[John J Lee <jjl@pobox.com>]\n\nPrevent user from returning a value from special methods that\nreturn an error indicator only.\n\nUse PyObject_TypeCheck instead of PyObject_IsInstance?\n\nAllow * in cimport? [John J Lee <jjl@pobox.com>]\n\nFAQ: Q. Pyrex says my extension type object has no attribute 'rhubarb', but\n     I know it does.\n\n     A. Have you declared the type at the point where you're using it?\n\nEliminate lvalue casts! (Illegal in C++, also disallowed by some C compilers)\n[Matthias Baas <baas@ira.uka.de>]\n\nMake Python class construction work more like it does in Python.\n\nGive the right module name to Python classes.\n\nCommand line switch for full pathnames in backtraces?\n\nUse PyString_FromStringAndSize on string literals containing\nnulls.\n\nPeephole optimisation? [Vladislav Bulatov <vrbulatov@list.ru>]\n\nAvoid PyArg_ParseTuple call when a function takes no positional args.\n\nOmit incref/decref of arguments that are not assigned to?\n\nCan a faster way of instantiating extension types be found?\n\nDisallow declaring a special method of an extension type with\n'cdef' instead of 'def'.\n\nUse PySequence_GetItem instead of PyObject_GetItem when index\nis an integer.\n\nIf a __getitem__ method is declared with an int index, use the\nsq_item slot instead of the mp_subscript slot.\n\nProvide some way of controlling the argument list passed to\nan extension type's base __new__ method?\n[Alain Pointdexter <alainpoint@yahoo.fr>]\n\nRename __new__ in extension types to __alloc__.\n\nImplement a true __new__ for extension types.\n\nWay to provide constructors for extension types that are not\navailable to Python and can accept C types directly?\n\nSupport generators by turning them into extension types?\n\nList comprehensions.\n\nVariable declarations inside inner code blocks?\n\nInitial values when declaring variables?\n\nDo something about __stdcall.\n\nSupport class methods in extension types using METH_CLASS flag.\n\nDisallow defaulting types to 'object' in C declarations?\n\nC globals with static initialisers.\n\nFind a way of providing C-only initialisers for extension types.\n\nMetaclasses for extension types?\n\nMake extension types use Py_TPFLAGS_HEAPTYPE so their __module__\nwill get set dynamically?\n"
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "USAGE.txt",
          "type": "blob",
          "size": 2.5859375,
          "content": "Cython - Usage Instructions\n==========================\n\nBuilding Cython extensions using distutils\n-----------------------------------------\n\nCython comes with an experimental distutils extension for compiling\nCython modules, contributed by Graham Fawcett of the University of\nWindsor (fawcett@uwindsor.ca).\n\nThe Demos directory contains a setup.py file demonstrating its use. To\ncompile the demos:\n\n(1)  cd Demos\n\n(2)  python setup.py build_ext --inplace\n\n         or\n\n     python setup.py build --build-lib=.\n\n(You may get a screed of warnings from the C compiler, but you can\nignore these -- as long as there are no actual errors, things are\nprobably okay.)\n\nTry out the extensions with:\n\n     python run_primes.py\n     python run_spam.py\n     python run_numeric_demo.py\n\n\nBuilding Cython extensions by hand\n---------------------------------\n\nYou can also invoke the Cython compiler on its own to translate a .pyx\nfile to a .c file. On Unix,\n\n     cython filename.pyx\n\nOn other platforms,\n\n     python cython.py filename.pyx\n\nIt's then up to you to compile and link the .c file using whatever\nprocedure is appropriate for your platform. The file\nMakefile.nodistutils in the Demos directory shows how to do this for\none particular Unix system.\n\n\nCommand line options\n--------------------\n\nThe cython command supports the following options:\n\n  Short Long              Argument    Description\n  -----------------------------------------------------------------------------\n  -v    --version                     Display version number of cython compiler\n  -l    --create-listing              Write error messages to a .lis file\n  -I    --include-dir     <directory> Search for include files in named\n                                      directory (may be repeated)\n  -o    --output-file     <filename>  Specify name of generated C file (only\n                                      one source file allowed if this is used)\n  -p, --embed-positions               If specified, the positions in Cython files of each\n                                      function definition is embedded in its docstring.\n  -z, --pre-import <module>           If specified, assume undeclared names in this\n                                      module. Emulates the behavior of putting\n                                      \"from <module> import *\" at the top of the file.\n\n\nAnything else is taken as the name of a Cython source file and compiled\nto a C source file. Multiple Cython source files can be specified\n(unless -o is used), in which case each source file is treated as the\nsource of a distinct extension module and compiled separately to\nproduce its own C file.\n"
        },
        {
          "name": "appveyor",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cygdb.py",
          "type": "blob",
          "size": 0.1201171875,
          "content": "#!/usr/bin/env python\n\nimport sys\n\nfrom Cython.Debugger import Cygdb as cygdb\n\nif __name__ == '__main__':\n    cygdb.main()\n"
        },
        {
          "name": "cython.py",
          "type": "blob",
          "size": 0.6162109375,
          "content": "#!/usr/bin/env python\n\n#\n#   Cython -- Main Program, generic\n#\n\ntry:\n    from typing import TYPE_CHECKING\nexcept ImportError:\n    TYPE_CHECKING = False\n\nif not TYPE_CHECKING and __name__ == '__main__':\n\n    import os\n    import sys\n\n    # Make sure we import the right Cython\n    cythonpath, _ = os.path.split(os.path.realpath(__file__))\n    sys.path.insert(0, cythonpath)\n\n    from Cython.Compiler.Main import main\n    main(command_line = 1)\n\nelse:\n    # Void cython.* directives.\n    from Cython.Shadow import *\n    ## and bring in the __version__\n    from Cython import __version__\n    from Cython import load_ipython_extension\n"
        },
        {
          "name": "cythonize.py",
          "type": "blob",
          "size": 0.142578125,
          "content": "#!/usr/bin/env python\n\n#\n#   Cython -- enhanced main program\n#\n\nif __name__ == '__main__':\n    from Cython.Build.Cythonize import main\n    main()\n"
        },
        {
          "name": "doc-requirements.txt",
          "type": "blob",
          "size": 2.15234375,
          "content": "sphinx==7.2.6\nsphinx-issues==3.0.1\nsphinx-tabs==3.4.4\nJinja2==3.1.3\njupyter==1.0.0\n# automatic requirements from pip freeze below:\nalabaster==0.7.16\nanyio==4.2.0\nargon2-cffi==23.1.0\nargon2-cffi-bindings==21.2.0\narrow==1.3.0\nasttokens==2.4.1\nasync-lru==2.0.4\nattrs==23.2.0\nBabel==2.14.0\nbeautifulsoup4==4.12.2\nbleach==6.1.0\ncertifi==2023.11.17\ncffi==1.16.0\ncharset-normalizer==3.3.2\ncomm==0.2.1\ndebugpy==1.8.0\ndecorator==5.1.1\ndefusedxml==0.7.1\ndocutils==0.18.1\nexceptiongroup==1.2.0\nexecuting==2.0.1\nfastjsonschema==2.19.1\nfqdn==1.5.1\nidna==3.6\nimagesize==1.4.1\nimportlib-metadata==7.0.1\nipykernel==6.28.0\nipython==8.18.1\nipywidgets==8.1.1\nisoduration==20.11.0\njedi==0.19.1\njson5==0.9.14\njsonpointer==2.4\njsonschema==4.20.0\njsonschema-specifications==2023.12.1\njupyter-console==6.6.3\njupyter-events==0.9.0\njupyter-lsp==2.2.1\njupyter_client==8.6.0\njupyter_core==5.7.1\njupyter_server==2.12.4\njupyter_server_terminals==0.5.1\njupyterlab==4.0.10\njupyterlab-widgets==3.0.9\njupyterlab_pygments==0.3.0\njupyterlab_server==2.25.2\nMarkupSafe==2.1.3\nmatplotlib-inline==0.1.6\nmistune==3.0.2\nnbclient==0.9.0\nnbconvert==7.14.1\nnbformat==5.9.2\nnest-asyncio==1.5.8\nnotebook==7.0.6\nnotebook_shim==0.2.3\noverrides==7.4.0\npackaging==23.2\npandocfilters==1.5.0\nparso==0.8.3\npexpect==4.9.0\nplatformdirs==4.1.0\nprometheus-client==0.19.0\nprompt-toolkit==3.0.43\npsutil==5.9.7\nptyprocess==0.7.0\npure-eval==0.2.2\npycparser==2.21\nPygments==2.17.2\npython-dateutil==2.8.2\npython-json-logger==2.0.7\nPyYAML==6.0.1\npyzmq==25.1.2\nqtconsole==5.5.1\nQtPy==2.4.1\nreferencing==0.32.1\nrequests==2.31.0\nrfc3339-validator==0.1.4\nrfc3986-validator==0.1.1\nrpds-py==0.17.1\nSend2Trash==1.8.2\nsix==1.16.0\nsniffio==1.3.0\nsnowballstemmer==2.2.0\nsoupsieve==2.5\nsphinxcontrib-applehelp==1.0.8\nsphinxcontrib-devhelp==1.0.6\nsphinxcontrib-htmlhelp==2.0.5\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-qthelp==1.0.7\nsphinxcontrib-serializinghtml==1.1.10\nstack-data==0.6.3\nterminado==0.18.0\ntinycss2==1.2.1\ntomli==2.0.1\ntornado==6.4\ntraitlets==5.14.1\ntypes-python-dateutil==2.8.19.20240106\ntyping_extensions==4.9.0\nuri-template==1.3.0\nurllib3==2.1.0\nwcwidth==0.2.13\nwebcolors==1.13\nwebencodings==0.5.1\nwebsocket-client==1.7.0\nwidgetsnbextension==4.0.9\nzipp==3.17.0\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 7.638671875,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Profiled execution.\nprofile=no\n\n# Add files or directories to the ignorelist. They should be base names, not\n# paths.\nignore=.git,.gitmarker\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n\n[MESSAGES CONTROL]\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once).\n## R0201: Method could be a function\n## R0904: Too many public methods\n## W0201: Attribute defined outside __init__()\n## W0141: Used builtin function 'map'\ndisable=E1101,C0111,R0201,R0904,W0201,W0141\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=parseable\n\n# Include message's id in output\ninclude-ids=yes\n\n# Include symbolic ids of messages in output\nsymbols=no\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\nfiles-output=no\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Add a comment according to your evaluation note. This is used by the global\n# evaluation report (RP0004).\ncomment=no\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[BASIC]\n\n# Required attributes for module, separated by a comma\nrequired-attributes=\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=map,filter,apply,input\n\n# Regular expression which should only match correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression which should only match correct module level names\nconst-rgx=(([a-zA-Z_][a-zA-Z0-9_]*)|(__.*__))$\n\n# Regular expression which should only match correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression which should only match correct function names\nfunction-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression which should only match correct method names\nmethod-rgx=[a-z_][a-z0-9_]{2,30}|visit_[A-Za-z]+$\n\n# Regular expression which should only match correct instance attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,30}|sy$\n\n# Regular expression which should only match correct argument names\nargument-rgx=[a-z_][a-z0-9_]{0,30}$\n\n# Regular expression which should only match correct variable names\nvariable-rgx=[a-z_][a-z0-9_]{0,30}$\n\n# Regular expression which should only match correct list comprehension /\n# generator expression variable names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Regular expression which should only match functions or classes name which do\n# not require a docstring\nno-docstring-rgx=__.*__\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=120\n\n# Maximum number of lines in a module\nmax-module-lines=15000\n\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set).\nignored-classes=\n\n# When zope mode is activated, add a predefined set of Zope acquired attributes\n# to generated-members.\nzope=no\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E0201 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=REQUEST,acl_users,aq_parent\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the beginning of the name of dummy variables\n# (i.e. not used).\ndummy-variables-rgx=_|dummy\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,string,TERMIOS,Bastion,rexec\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=12\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\nmax-branchs=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n\n[CLASSES]\n\n# List of interface methods to ignore, separated by a comma. This is used for\n# instance to not check methods defines in Zope's Interface base class.\nignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.9208984375,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n\n[tool.cibuildwheel]\nbuild-verbosity = 2\nskip = [\"pp*\", \"cp36*\", \"cp37*\"]\n# test-command = \"make test\"\n\n[tool.cibuildwheel.linux]\narchs = [\"x86_64\", \"aarch64\", \"i686\"]\nrepair-wheel-command = \"auditwheel repair --strip -w {dest_dir} {wheel}\"\n\n[tool.cibuildwheel.linux.environment]\nCFLAGS = \"-O3 -g0 -pipe -fPIC -march=core2\"\nAR = \"gcc-ar\"\nNM = \"gcc-nm\"\nRANLIB = \"gcc-ranlib\"\n\n[[tool.cibuildwheel.overrides]]\nselect = \"*aarch64\"\nenvironment = {CFLAGS = \"-O3 -g0 -pipe -fPIC -march=armv8-a -mtune=cortex-a72\", AR = \"gcc-ar\", NM = \"gcc-nm\", RANLIB = \"gcc-ranlib\" }\n\n[tool.cibuildwheel.windows]\narchs = [\"AMD64\", \"x86\"]\n\n[tool.cibuildwheel.macos]\n# https://cibuildwheel.readthedocs.io/en/stable/faq/#what-to-provide suggests to provide\n# x86_64 and one of universal2 or arm64 wheels.  x86_64 is still required by older pips,\n# so additional arm64 wheels should suffice.\narchs = [\"x86_64\", \"arm64\"]\n"
        },
        {
          "name": "pyximport",
          "type": "tree",
          "content": null
        },
        {
          "name": "runcodestyle.py",
          "type": "blob",
          "size": 0.0888671875,
          "content": "if __name__ == \"__main__\":\n    import runtests\n\n    runtests.TestCodeFormat('.').runTest()\n"
        },
        {
          "name": "runtests.py",
          "type": "blob",
          "size": 117.2412109375,
          "content": "#!/usr/bin/env python\n\nimport atexit\nimport base64\nimport doctest\nimport gc\nimport glob\nimport heapq\nimport locale\nimport math\nimport operator\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\nimport time\nimport traceback\nimport unittest\nimport warnings\nimport zlib\nfrom collections import defaultdict\nfrom contextlib import contextmanager\n\ntry:\n    import platform\n    IS_PYPY = platform.python_implementation() == 'PyPy'\n    IS_CPYTHON = platform.python_implementation() == 'CPython'\n    IS_GRAAL = platform.python_implementation() == 'GraalVM'\nexcept (ImportError, AttributeError):\n    IS_CPYTHON = True\n    IS_PYPY = False\n    IS_GRAAL = False\n\nCAN_SYMLINK = sys.platform != 'win32' and hasattr(os, 'symlink')\n\nfrom io import open as io_open\ntry:\n    from StringIO import StringIO\nexcept ImportError:\n    from io import StringIO  # doesn't accept 'str' in Py2\n\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\n\ntry:\n    import threading\nexcept ImportError: # No threads, no problems\n    threading = None\n\ntry:\n    from unittest import SkipTest\nexcept ImportError:\n    class SkipTest(Exception):  # don't raise, only provided to allow except-ing it!\n        pass\n    def skip_test(reason):\n        sys.stderr.write(\"Skipping test: %s\\n\" % reason)\nelse:\n    def skip_test(reason):\n        raise SkipTest(reason)\n\ntry:\n    basestring\nexcept NameError:\n    basestring = str\n\nWITH_CYTHON = True\n\ntry:\n    # Py3.12+ doesn't have distutils any more and requires setuptools to provide it.\n    import setuptools\nexcept ImportError:\n    pass\n\nfrom distutils.command.build_ext import build_ext as _build_ext\nfrom distutils import sysconfig\n_to_clean = []\n\n@atexit.register\ndef _cleanup_files():\n    \"\"\"\n    This is only used on Cygwin to clean up shared libraries that are unsafe\n    to delete while the test suite is running.\n    \"\"\"\n\n    for filename in _to_clean:\n        if os.path.isdir(filename):\n            shutil.rmtree(filename, ignore_errors=True)\n        else:\n            try:\n                os.remove(filename)\n            except OSError:\n                pass\n\n\ndef get_distutils_distro(_cache=[]):\n    if _cache:\n        return _cache[0]\n    # late import to accommodate for setuptools override\n    from distutils.dist import Distribution\n    distutils_distro = Distribution()\n\n    if sys.platform == 'win32':\n        # TODO: Figure out why this hackery (see https://thread.gmane.org/gmane.comp.python.cython.devel/8280/).\n        config_files = distutils_distro.find_config_files()\n        try:\n            config_files.remove('setup.cfg')\n        except ValueError:\n            pass\n        distutils_distro.parse_config_files(config_files)\n\n        cfgfiles = distutils_distro.find_config_files()\n        try:\n            cfgfiles.remove('setup.cfg')\n        except ValueError:\n            pass\n        distutils_distro.parse_config_files(cfgfiles)\n    _cache.append(distutils_distro)\n    return distutils_distro\n\n\ndef import_refnanny():\n    try:\n        # try test copy first\n        import refnanny\n        return refnanny\n    except ImportError:\n        pass\n    import Cython.Runtime.refnanny\n    return Cython.Runtime.refnanny\n\n\nEXT_DEP_MODULES = {\n    'tag:numpy':     'numpy',\n    'tag:pythran':  'pythran',\n    'tag:setuptools':  'setuptools.sandbox',\n    'tag:asyncio':  'asyncio',\n    'tag:pstats':   'pstats',\n    'tag:posix':    'posix',\n    'tag:array':    'array',\n    'tag:coverage': 'Cython.Coverage',\n    'Coverage':     'Cython.Coverage',\n    'tag:ipython':  'IPython.testing.globalipapp',\n    'tag:jedi':     'jedi_BROKEN_AND_DISABLED',\n    'tag:test.support': 'test.support',  # support module for CPython unit tests\n}\n\ndef patch_inspect_isfunction():\n    import inspect\n    orig_isfunction = inspect.isfunction\n    def isfunction(obj):\n        return orig_isfunction(obj) or type(obj).__name__ == 'cython_function_or_method'\n    isfunction._orig_isfunction = orig_isfunction\n    inspect.isfunction = isfunction\n\ndef unpatch_inspect_isfunction():\n    import inspect\n    try:\n        orig_isfunction = inspect.isfunction._orig_isfunction\n    except AttributeError:\n        pass\n    else:\n        inspect.isfunction = orig_isfunction\n\ndef def_to_cdef(source):\n    '''\n    Converts the module-level def methods into cdef methods, i.e.\n\n        @decorator\n        def foo([args]):\n            \"\"\"\n            [tests]\n            \"\"\"\n            [body]\n\n    becomes\n\n        def foo([args]):\n            \"\"\"\n            [tests]\n            \"\"\"\n            return foo_c([args])\n\n        cdef foo_c([args]):\n            [body]\n    '''\n    output = []\n    skip = False\n    def_node = re.compile(r'def (\\w+)\\(([^()*]*)\\):').match\n    lines = iter(source.split('\\n'))\n    for line in lines:\n        if not line.strip():\n            output.append(line)\n            continue\n\n        if skip:\n            if line[0] != ' ':\n                skip = False\n            else:\n                continue\n\n        if line[0] == '@':\n            skip = True\n            continue\n\n        m = def_node(line)\n        if m:\n            name = m.group(1)\n            args = m.group(2)\n            if args:\n                args_no_types = \", \".join(arg.split()[-1] for arg in args.split(','))\n            else:\n                args_no_types = \"\"\n            output.append(\"def %s(%s):\" % (name, args_no_types))\n            line = next(lines)\n            if '\"\"\"' in line:\n                has_docstring = True\n                output.append(line)\n                for line in lines:\n                    output.append(line)\n                    if '\"\"\"' in line:\n                        break\n            else:\n                has_docstring = False\n            output.append(\"    return %s_c(%s)\" % (name, args_no_types))\n            output.append('')\n            output.append(\"cdef %s_c(%s):\" % (name, args))\n            if not has_docstring:\n                output.append(line)\n\n        else:\n            output.append(line)\n\n    return '\\n'.join(output)\n\n\ndef exclude_test_in_pyver(*versions):\n    return sys.version_info[:2] in versions\n\n\ndef exclude_test_on_platform(*platforms):\n    return sys.platform in platforms\n\n\ndef update_linetrace_extension(ext):\n    if sys.version_info[:2] == (3, 12):\n        # Line tracing is generally fragile in Py3.12.\n        return EXCLUDE_EXT\n    if not IS_CPYTHON and sys.version_info[:2] < (3, 13):\n        # Tracing/profiling requires PEP-669 monitoring or old CPython tracing.\n        return EXCLUDE_EXT\n    ext.define_macros.append(('CYTHON_TRACE', 1))\n    return ext\n\n\ndef update_numpy_extension(ext, set_api17_macro=True):\n    import numpy as np\n    # Add paths for npyrandom and npymath libraries:\n    lib_path = [\n        os.path.abspath(os.path.join(np.get_include(), '..', '..', 'random', 'lib')),\n        os.path.abspath(os.path.join(np.get_include(), '..', 'lib'))\n    ]\n    ext.library_dirs += lib_path\n    if sys.platform == \"win32\":\n        ext.libraries += [\"npymath\"]\n    else:\n        ext.libraries += [\"npymath\", \"m\"]\n    ext.include_dirs.append(np.get_include())\n\n    if set_api17_macro and getattr(np, '__version__', '') not in ('1.19.0', '1.19.1'):\n        ext.define_macros.append(('NPY_NO_DEPRECATED_API', 'NPY_1_7_API_VERSION'))\n    del np\n\ndef update_gdb_extension(ext, _has_gdb=[None]):\n    # We should probably also check for Python support.\n    if not include_debugger:\n        _has_gdb[0] = False\n    if _has_gdb[0] is None:\n        try:\n            subprocess.check_call([\"gdb\", \"--version\"])\n        except (IOError, subprocess.CalledProcessError):\n            _has_gdb[0] = False\n        else:\n            _has_gdb[0] = True\n    if not _has_gdb[0]:\n        return EXCLUDE_EXT\n    return ext\n\n\ndef update_openmp_extension(ext):\n    ext.openmp = True\n    language = ext.language\n\n    if sys.platform == 'win32' and sys.version_info[:2] == (3,4):\n        # OpenMP tests fail in appveyor in Py3.4 -> just ignore them, EoL of Py3.4 is early 2019...\n        return EXCLUDE_EXT\n\n    if language == 'cpp':\n        flags = OPENMP_CPP_COMPILER_FLAGS\n    else:\n        flags = OPENMP_C_COMPILER_FLAGS\n\n    if flags:\n        compile_flags, link_flags = flags\n        ext.extra_compile_args.extend(compile_flags.split())\n        ext.extra_link_args.extend(link_flags.split())\n        return ext\n    elif sys.platform == 'win32':\n        return ext\n\n    return EXCLUDE_EXT\n\n\ndef update_cpp_extension(cpp_std, min_gcc_version=None, min_clang_version=None, min_macos_version=None):\n    def _update_cpp_extension(ext):\n        \"\"\"\n        Update cpp[cpp_std] extensions that will run on minimum versions of gcc / clang / macos.\n        \"\"\"\n        # If the extension provides a -std=... option, and it's greater than the one\n        # we're about to give, assume that whatever C compiler we use will probably be ok with it.\n        extra_compile_args = []\n        already_has_std = False\n        if ext.extra_compile_args:\n            std_regex = re.compile(r\"-std(?!lib).*(?P<number>[0-9]+)\")\n            for ca in ext.extra_compile_args:\n                match = std_regex.search(ca)\n                if match:\n                    number = int(match.group(\"number\"))\n                    if number < cpp_std:\n                        continue  # and drop the argument\n                    already_has_std = True\n                extra_compile_args.append(ca)\n            ext.extra_compile_args = extra_compile_args\n\n        use_gcc = use_clang = already_has_std\n\n        # check for a usable gcc version\n        gcc_version = get_gcc_version(ext.language)\n        if gcc_version:\n            if cpp_std >= 17 and sys.version_info[0] < 3:\n                # The Python 2.7 headers contain the 'register' modifier\n                # which gcc warns about in C++17 mode.\n                ext.extra_compile_args.append('-Wno-register')\n            if not already_has_std:\n                compiler_version = gcc_version.group(1)\n                if not min_gcc_version or float(compiler_version) >= float(min_gcc_version):\n                    use_gcc = True\n                    ext.extra_compile_args.append(\"-std=c++%s\" % cpp_std)\n\n            if use_gcc:\n                return ext\n\n        # check for a usable clang version\n        clang_version = get_clang_version(ext.language)\n        if clang_version:\n            if cpp_std >= 17 and sys.version_info[0] < 3:\n                # The Python 2.7 headers contain the 'register' modifier\n                # which clang warns about in C++17 mode.\n                ext.extra_compile_args.append('-Wno-register')\n            if not already_has_std:\n                compiler_version = clang_version.group(1)\n                if not min_clang_version or float(compiler_version) >= float(min_clang_version):\n                    use_clang = True\n                    ext.extra_compile_args.append(\"-std=c++%s\" % cpp_std)\n            if sys.platform == \"darwin\":\n                ext.extra_compile_args.append(\"-stdlib=libc++\")\n                if min_macos_version is not None:\n                    ext.extra_compile_args.append(\"-mmacosx-version-min=\" + min_macos_version)\n\n            if use_clang:\n                return ext\n\n        # no usable C compiler found => exclude the extension\n        return EXCLUDE_EXT\n\n    return _update_cpp_extension\n\n\ndef require_gcc(version):\n    def check(ext):\n        gcc_version = get_gcc_version(ext.language)\n        if gcc_version:\n            if float(gcc_version.group(1)) >= float(version):\n                return ext\n        return EXCLUDE_EXT\n    return check\n\ndef get_cc_version(language):\n    \"\"\"\n        finds gcc version using Popen\n    \"\"\"\n    cc = ''\n    if language == 'cpp':\n        cc = os.environ.get('CXX') or sysconfig.get_config_var('CXX')\n    if not cc:\n        cc = os.environ.get('CC') or sysconfig.get_config_var('CC')\n    if not cc:\n        from distutils import ccompiler\n        cc = ccompiler.get_default_compiler()\n    if not cc:\n        return ''\n\n    # For some reason, cc can be e.g. 'gcc -pthread'\n    cc = cc.split()[0]\n\n    # Force english output\n    env = os.environ.copy()\n    env['LC_MESSAGES'] = 'C'\n    try:\n        p = subprocess.Popen([cc, \"-v\"], stderr=subprocess.PIPE, env=env)\n    except EnvironmentError as exc:\n        warnings.warn(\"Unable to find the %s compiler: %s: %s\" %\n                      (language, os.strerror(exc.errno), cc))\n        return ''\n    _, output = p.communicate()\n    return output.decode(locale.getpreferredencoding() or 'ASCII', 'replace')\n\n\ndef get_gcc_version(language):\n    matcher = re.compile(r\"gcc version (\\d+\\.\\d+)\").search\n    return matcher(get_cc_version(language))\n\n\ndef get_clang_version(language):\n    matcher = re.compile(r\"clang(?:-|\\s+version\\s+)(\\d+\\.\\d+)\").search\n    return matcher(get_cc_version(language))\n\n\ndef get_openmp_compiler_flags(language):\n    \"\"\"\n    As of gcc 4.2, it supports OpenMP 2.5. Gcc 4.4 implements 3.0. We don't\n    (currently) check for other compilers.\n\n    returns a two-tuple of (CFLAGS, LDFLAGS) to build the OpenMP extension\n    \"\"\"\n    gcc_version = get_gcc_version(language)\n\n    if not gcc_version:\n        if sys.platform == 'win32':\n            return '/openmp', ''\n        else:\n            return None # not gcc - FIXME: do something about other compilers\n\n    # gcc defines \"__int128_t\", assume that at least all 64 bit architectures have it\n    global COMPILER_HAS_INT128\n    COMPILER_HAS_INT128 = getattr(sys, 'maxsize', getattr(sys, 'maxint', 0)) > 2**60\n\n    compiler_version = gcc_version.group(1)\n    if compiler_version:\n        compiler_version = [int(num) for num in compiler_version.split('.')]\n        if compiler_version >= [4, 2]:\n            return '-fopenmp', '-fopenmp'\n\ntry:\n    locale.setlocale(locale.LC_ALL, '')\nexcept locale.Error:\n    pass\n\nCOMPILER = None\nCOMPILER_HAS_INT128 = False\nOPENMP_C_COMPILER_FLAGS = get_openmp_compiler_flags('c')\nOPENMP_CPP_COMPILER_FLAGS = get_openmp_compiler_flags('cpp')\n\n# Return this from the EXT_EXTRAS matcher callback to exclude the extension\nEXCLUDE_EXT = object()\n\nEXT_EXTRAS = {\n    'tag:numpy' : update_numpy_extension,\n    'tag:openmp': update_openmp_extension,\n    'tag:gdb': update_gdb_extension,\n    'tag:cpp11': update_cpp_extension(11, min_gcc_version=\"4.9\", min_macos_version=\"10.7\"),\n    'tag:cpp17': update_cpp_extension(17, min_gcc_version=\"5.0\", min_macos_version=\"10.13\"),\n    'tag:cpp20': update_cpp_extension(20, min_gcc_version=\"11.0\", min_clang_version=\"13.0\", min_macos_version=\"10.13\"),\n    'tag:trace' : update_linetrace_extension,\n    'tag:cppexecpolicies': require_gcc(\"9.1\"),\n}\n\nTAG_EXCLUDERS = sorted({\n    'no-macos':  exclude_test_on_platform('darwin'),\n    'pstats': exclude_test_in_pyver((3,12)),\n    'trace': not IS_CPYTHON,\n}.items())\n\n# TODO: use tags\nVER_DEP_MODULES = {\n    # tests are excluded if 'CurrentPythonVersion OP VersionTuple', i.e.\n    # (2,4) : (operator.lt, ...) excludes ... when PyVer < 2.4.x\n\n    # FIXME: fix? delete?\n    (3,4,999): (operator.gt, lambda x: x in ['run.initial_file_path',\n                                             ]),\n\n    (3,8): (operator.lt, lambda x: x in ['run.special_methods_T561_py38',\n                                         ]),\n    (3,12): (operator.ge, lambda x: x in [\n        'run.py_unicode_strings',  # Py_UNICODE was removed\n        'compile.pylong',  # PyLongObject changed its structure\n        'run.longintrepr',  # PyLongObject changed its structure\n        'run.line_trace',  # sys.monitoring broke sys.set_trace() line tracing\n    ]),\n}\n\nINCLUDE_DIRS = [ d for d in os.getenv('INCLUDE', '').split(os.pathsep) if d ]\nCFLAGS = os.getenv('CFLAGS', '').split()\nCCACHE = os.getenv('CYTHON_RUNTESTS_CCACHE', '').split()\nCDEFS = []\nTEST_SUPPORT_DIR = 'testsupport'\n\nBACKENDS = ['c', 'cpp']\n\nUTF8_BOM_BYTES = r'\\xef\\xbb\\xbf'.encode('ISO-8859-1').decode('unicode_escape')\n\n\ndef memoize(f):\n    uncomputed = object()\n    f._cache = {}\n    get = f._cache.get\n    def func(*args):\n        res = get(args, uncomputed)\n        if res is uncomputed:\n            res = f._cache[args] = f(*args)\n        return res\n    return func\n\n\n@memoize\ndef parse_tags(filepath):\n    tags = defaultdict(list)\n    parse_tag = re.compile(r'#\\s*(\\w+)\\s*:(.*)$').match\n    with io_open(filepath, encoding='ISO-8859-1', errors='ignore') as f:\n        for line in f:\n            if line[0] != '#':\n                # ignore BOM-like bytes and whitespace\n                line = line.lstrip(UTF8_BOM_BYTES).strip()\n                if not line:\n                    if tags:\n                        break  # assume all tags are in one block\n                    continue\n                if line[0] != '#':\n                    break\n            parsed = parse_tag(line)\n            if parsed is not None:\n                tag, values = parsed.groups()\n                if tag not in ('mode', 'tag', 'ticket', 'cython', 'distutils', 'preparse'):\n                    if tag in ('coding', 'encoding'):\n                        continue\n                    if tag == 'tags':\n                        raise RuntimeError(\"test tags use the 'tag' directive, not 'tags' (%s)\" % filepath)\n                    print(\"WARNING: unknown test directive '%s' found (%s)\" % (tag, filepath))\n                values = values.split(',')\n                tags[tag].extend(filter(None, [value.strip() for value in values]))\n            elif tags:\n                break  # assume all tags are in one block\n    return tags\n\n\nlist_unchanging_dir = memoize(lambda x: os.listdir(x))  # needs lambda to set function attribute\n\n\n@memoize\ndef _list_pyregr_data_files(test_directory):\n    is_data_file = re.compile('(?:[.](txt|pem|db|html)|^bad.*[.]py)$').search\n    return ['__init__.py'] + [\n        filename for filename in list_unchanging_dir(test_directory)\n        if is_data_file(filename)]\n\n\ndef import_module_from_file(module_name, file_path, execute=True):\n    import importlib.util\n    spec = importlib.util.spec_from_file_location(module_name, file_path)\n    m = importlib.util.module_from_spec(spec)\n    if execute:\n        sys.modules[module_name] = m\n        spec.loader.exec_module(m)\n    return m\n\n\ndef import_ext(module_name, file_path=None):\n    if file_path:\n        return import_module_from_file(module_name, file_path)\n    else:\n        try:\n            from importlib import invalidate_caches\n        except ImportError:\n            pass\n        else:\n            invalidate_caches()\n        return __import__(module_name, globals(), locals(), ['*'])\n\n\nclass build_ext(_build_ext):\n    def build_extension(self, ext):\n        try:\n            try: # Py2.7+ & Py3.2+\n                compiler_obj = self.compiler_obj\n            except AttributeError:\n                compiler_obj = self.compiler\n            if ext.language == 'c++':\n                compiler_obj.compiler_so.remove('-Wstrict-prototypes')\n            if CCACHE:\n                compiler_obj.compiler_so = CCACHE + compiler_obj.compiler_so\n            if getattr(ext, 'openmp', None) and compiler_obj.compiler_type == 'msvc':\n                ext.extra_compile_args.append('/openmp')\n        except Exception:\n            pass\n        _build_ext.build_extension(self, ext)\n\n\nclass ErrorWriter(object):\n    match_error = re.compile(\n        r'(?:(warning|performance hint):)?(?:.*:)?\\s*([-0-9]+)\\s*:\\s*([-0-9]+)\\s*:\\s*(.*)').match\n\n    def __init__(self, encoding=None):\n        self.output = []\n        self.encoding = encoding\n\n    def write(self, value):\n        if self.encoding:\n            value = value.encode('ISO-8859-1').decode(self.encoding)\n        self.output.append(value)\n\n    def _collect(self):\n        s = ''.join(self.output)\n        results = {'error': [], 'warning': [], 'performance hint': []}\n        for line in s.splitlines():\n            match = self.match_error(line)\n            if match:\n                message_type, line, column, message = match.groups()\n                results[message_type or 'error'].append((int(line), int(column), message.strip()))\n\n        return [\n            [\"%d:%d: %s\" % values for values in sorted(results[key])]\n            for key in ('error', 'warning', 'performance hint')\n        ]\n\n    def geterrors(self):\n        return self._collect()[0]\n\n    def getall(self):\n        return self._collect()\n\n    def close(self):\n        pass  # ignore, only to match file-like interface\n\n\nclass Stats(object):\n    def __init__(self, top_n=8):\n        self.top_n = top_n\n        self.test_counts = defaultdict(int)\n        self.test_times = defaultdict(float)\n        self.top_tests = defaultdict(list)\n\n    def add_time(self, name, language, metric, t, count=1):\n        self.test_counts[metric] += count\n        self.test_times[metric] += t\n        top = self.top_tests[metric]\n        push = heapq.heappushpop if len(top) >= self.top_n else heapq.heappush\n        # min-heap => pop smallest/shortest until longest times remain\n        push(top, (t, name, language))\n\n    @contextmanager\n    def time(self, name, language, metric):\n        t = time.time()\n        yield\n        t = time.time() - t\n        self.add_time(name, language, metric, t)\n\n    def update(self, stats):\n        # type: (Stats) -> None\n        for metric, t in stats.test_times.items():\n            self.test_times[metric] += t\n            self.test_counts[metric] += stats.test_counts[metric]\n            top = self.top_tests[metric]\n            for entry in stats.top_tests[metric]:\n                push = heapq.heappushpop if len(top) >= self.top_n else heapq.heappush\n                push(top, entry)\n\n    def print_stats(self, out=sys.stderr):\n        if not self.test_times:\n            return\n        lines = ['Times:\\n']\n        for metric, t in sorted(self.test_times.items(), key=operator.itemgetter(1), reverse=True):\n            count = self.test_counts[metric]\n            top = self.top_tests[metric]\n            lines.append(\"%-12s: %8.2f sec  (%4d, %6.3f / run) - slowest: %s\\n\" % (\n                metric, t, count, t / count,\n                ', '.join(\"'{2}:{1}' ({0:.2f}s)\".format(*item) for item in heapq.nlargest(self.top_n, top))))\n        out.write(''.join(lines))\n\n\nclass TestBuilder(object):\n    def __init__(self, rootdir, workdir, selectors, exclude_selectors, options,\n                 with_pyregr, languages, test_bugs, language_level,\n                 common_utility_dir, pythran_dir=None,\n                 default_mode='run', stats=None,\n                 add_embedded_test=False, add_cython_import=False,\n                 add_cpp_locals_extra_tests=False):\n        self.rootdir = rootdir\n        self.workdir = workdir\n        self.selectors = selectors\n        self.exclude_selectors = exclude_selectors\n        self.shard_num = options.shard_num\n        self.annotate = options.annotate_source\n        self.cleanup_workdir = options.cleanup_workdir\n        self.cleanup_sharedlibs = options.cleanup_sharedlibs\n        self.cleanup_failures = options.cleanup_failures\n        self.with_pyregr = with_pyregr\n        self.cython_only = options.cython_only\n        self.test_selector = re.compile(options.only_pattern).search if options.only_pattern else None\n        self.languages = languages\n        self.test_bugs = test_bugs\n        self.fork = options.fork\n        self.language_level = language_level\n        self.test_determinism = options.test_determinism\n        self.common_utility_dir = common_utility_dir\n        self.pythran_dir = pythran_dir\n        self.default_mode = default_mode\n        self.stats = stats\n        self.add_embedded_test = add_embedded_test\n        self.add_cython_import = add_cython_import\n        self.capture = options.capture\n        self.add_cpp_locals_extra_tests = add_cpp_locals_extra_tests\n\n    def build_suite(self):\n        suite = unittest.TestSuite()\n        filenames = os.listdir(self.rootdir)\n        filenames.sort()\n        # TODO: parallelise I/O with a thread pool for the different directories once we drop Py2 support\n        for filename in filenames:\n            path = os.path.join(self.rootdir, filename)\n            if os.path.isdir(path) and filename != TEST_SUPPORT_DIR:\n                if filename == 'pyregr' and not self.with_pyregr:\n                    continue\n                if filename == 'broken' and not self.test_bugs:\n                    continue\n                suite.addTest(\n                    self.handle_directory(path, filename))\n        if (sys.platform not in ['win32'] and self.add_embedded_test\n                # the embedding test is currently broken in Py3.8+ and Py2.7, except on Linux.\n                and ((3, 0) <= sys.version_info < (3, 8) or sys.platform != 'darwin')\n                # broken on graal too\n                and not IS_GRAAL):\n            # Non-Windows makefile.\n            if [1 for selector in self.selectors if selector(\"embedded\")] \\\n                    and not [1 for selector in self.exclude_selectors if selector(\"embedded\")]:\n                suite.addTest(unittest.TestLoader().loadTestsFromTestCase(EmbedTest))\n        return suite\n\n    def handle_directory(self, path, context):\n        workdir = os.path.join(self.workdir, context)\n        if not os.path.exists(workdir):\n            os.makedirs(workdir)\n\n        suite = unittest.TestSuite()\n        filenames = list_unchanging_dir(path)\n        filenames.sort()\n        for filename in filenames:\n            filepath = os.path.join(path, filename)\n            module, ext = os.path.splitext(filename)\n            if ext not in ('.py', '.pyx', '.srctree'):\n                continue\n            if filename.startswith('.'):\n                continue # certain emacs backup files\n            if context == 'pyregr':\n                tags = defaultdict(list)\n            else:\n                tags = parse_tags(filepath)\n            fqmodule = \"%s.%s\" % (context, module)\n            if not [ 1 for match in self.selectors\n                     if match(fqmodule, tags) ]:\n                continue\n            if self.exclude_selectors:\n                if [1 for match in self.exclude_selectors\n                        if match(fqmodule, tags)]:\n                    continue\n\n            mode = self.default_mode\n            if tags['mode']:\n                mode = tags['mode'][0]\n            elif context == 'pyregr':\n                mode = 'pyregr'\n\n            if ext == '.srctree':\n                if self.cython_only:\n                    # EndToEnd tests always execute arbitrary build and test code\n                    continue\n                if skip_limited(tags):\n                    continue\n                if 'cpp' not in tags['tag'] or 'cpp' in self.languages:\n                    suite.addTest(EndToEndTest(filepath, workdir,\n                             self.cleanup_workdir, stats=self.stats,\n                             capture=self.capture, shard_num=self.shard_num))\n                continue\n\n            # Choose the test suite.\n            if mode == 'pyregr':\n                if not filename.startswith('test_'):\n                    continue\n                test_class = CythonPyregrTestCase\n            elif mode == 'run':\n                if module.startswith(\"test_\"):\n                    test_class = CythonUnitTestCase\n                else:\n                    test_class = CythonRunTestCase\n            elif mode in ['compile', 'error']:\n                test_class = CythonCompileTestCase\n            else:\n                raise KeyError('Invalid test mode: ' + mode)\n\n            for test in self.build_tests(test_class, path, workdir,\n                                         module, filepath, mode == 'error', tags):\n                suite.addTest(test)\n\n            if mode == 'run' and ext == '.py' and not self.cython_only and not filename.startswith('test_'):\n                # additionally test file in real Python\n                min_py_ver = [\n                    (int(pyver.group(1)), int(pyver.group(2)))\n                    for pyver in map(re.compile(r'pure([0-9]+)[.]([0-9]+)').match, tags['tag'])\n                    if pyver\n                ]\n                if not min_py_ver or any(sys.version_info >= min_ver for min_ver in min_py_ver):\n                    suite.addTest(PureDoctestTestCase(\n                        module, filepath, tags, stats=self.stats, shard_num=self.shard_num))\n\n        return suite\n\n    def build_tests(self, test_class, path, workdir, module, module_path, expect_errors, tags):\n        warning_errors = 'werror' in tags['tag']\n        expect_log = (\"errors\",) if expect_errors else ()\n        if 'warnings' in tags['tag']:\n            expect_log += (\"warnings\",)\n        if \"perf_hints\" in tags['tag']:\n            expect_log += (\"perf_hints\",)\n\n        extra_directives_list = [{}]\n\n        if expect_errors:\n            if skip_c(tags) and 'cpp' in self.languages:\n                languages = ['cpp']\n            else:\n                languages = self.languages[:1]\n        else:\n            languages = self.languages\n\n        if 'c' in languages and skip_c(tags):\n            languages = list(languages)\n            languages.remove('c')\n        if 'cpp' in languages and 'no-cpp' in tags['tag']:\n            languages = list(languages)\n            languages.remove('cpp')\n        if (self.add_cpp_locals_extra_tests and 'cpp' in languages and\n                'cpp' in tags['tag'] and not 'no-cpp-locals' in tags['tag']):\n            extra_directives_list.append({'cpp_locals': True})\n        if not languages:\n            return []\n        if skip_limited(tags):\n            return []\n\n        language_levels = [2, 3] if 'all_language_levels' in tags['tag'] else [None]\n\n        pythran_dir = self.pythran_dir\n        if 'pythran' in tags['tag'] and not pythran_dir and 'cpp' in languages:\n            import pythran.config\n            try:\n                pythran_ext = pythran.config.make_extension(python=True)\n            except TypeError:  # old pythran version syntax\n                pythran_ext = pythran.config.make_extension()\n            pythran_dir = pythran_ext['include_dirs'][0]\n\n        add_cython_import = self.add_cython_import and module_path.endswith('.py')\n\n        preparse_list = tags.get('preparse', ['id'])\n        tests = [ self.build_test(test_class, path, workdir, module, module_path,\n                                  tags, language, language_level,\n                                  expect_log,\n                                  warning_errors, preparse,\n                                  pythran_dir if language == \"cpp\" else None,\n                                  add_cython_import=add_cython_import,\n                                  extra_directives=extra_directives)\n                  for language in languages\n                  for preparse in preparse_list\n                  for language_level in language_levels\n                  for extra_directives in extra_directives_list\n        ]\n        return tests\n\n    def build_test(self, test_class, path, workdir, module, module_path, tags, language, language_level,\n                   expect_log, warning_errors, preparse, pythran_dir, add_cython_import,\n                   extra_directives):\n        language_workdir = os.path.join(workdir, language)\n        if not os.path.exists(language_workdir):\n            os.makedirs(language_workdir)\n        workdir = os.path.join(language_workdir, module)\n        if preparse != 'id':\n            workdir += '_%s' % (preparse,)\n        if language_level:\n            workdir += '_cy%d' % (language_level,)\n        if extra_directives:\n            workdir += ('_directives_'+ '_'.join('%s_%s' % (k, v) for k,v in extra_directives.items()))\n        return test_class(path, workdir, module, module_path, tags,\n                          language=language,\n                          preparse=preparse,\n                          expect_log=expect_log,\n                          annotate=self.annotate,\n                          cleanup_workdir=self.cleanup_workdir,\n                          cleanup_sharedlibs=self.cleanup_sharedlibs,\n                          cleanup_failures=self.cleanup_failures,\n                          cython_only=self.cython_only,\n                          test_selector=self.test_selector,\n                          shard_num=self.shard_num,\n                          fork=self.fork,\n                          language_level=language_level or self.language_level,\n                          warning_errors=warning_errors,\n                          test_determinism=self.test_determinism,\n                          common_utility_dir=self.common_utility_dir,\n                          pythran_dir=pythran_dir,\n                          stats=self.stats,\n                          add_cython_import=add_cython_import\n                          )\n\n\ndef skip_c(tags):\n    if 'cpp' in tags['tag']:\n        return True\n\n    # We don't want to create a distutils key in the\n    # dictionary so we check before looping.\n    if 'distutils' in tags:\n        for option in tags['distutils']:\n            split = option.split('=')\n            if len(split) == 2:\n                argument, value = split\n                if argument.strip() == 'language' and value.strip() == 'c++':\n                    return True\n    return False\n\n\ndef skip_limited(tags):\n    if 'limited-api' in tags['tag']:\n        # Run limited-api tests only on CPython.\n        if sys.implementation.name != 'cpython':\n            return True\n    return False\n\n\ndef filter_stderr(stderr_bytes):\n    \"\"\"\n    Filter annoying warnings from output.\n    \"\"\"\n    if b\"Command line warning D9025\" in stderr_bytes:\n        # MSCV: cl : Command line warning D9025 : overriding '/Ox' with '/Od'\n        stderr_bytes = b'\\n'.join(\n            line for line in stderr_bytes.splitlines()\n            if b\"Command line warning D9025\" not in line)\n    return stderr_bytes\n\n\ndef filter_test_suite(test_suite, selector):\n    filtered_tests = []\n    for test in test_suite._tests:\n        if isinstance(test, unittest.TestSuite):\n            filter_test_suite(test, selector)\n        elif not selector(test.id()):\n            continue\n        filtered_tests.append(test)\n    test_suite._tests[:] = filtered_tests\n\n\nclass CythonCompileTestCase(unittest.TestCase):\n    def __init__(self, test_directory, workdir, module, module_path, tags, language='c', preparse='id',\n                 expect_log=(),\n                 annotate=False, cleanup_workdir=True,\n                 cleanup_sharedlibs=True, cleanup_failures=True, cython_only=False, test_selector=None,\n                 fork=True, language_level=2, warning_errors=False,\n                 test_determinism=False, shard_num=0,\n                 common_utility_dir=None, pythran_dir=None, stats=None, add_cython_import=False,\n                 extra_directives=None):\n        if extra_directives is None:\n            extra_directives = {}\n        self.test_directory = test_directory\n        self.tags = tags\n        self.workdir = workdir\n        self.module = module\n        self.module_path = module_path\n        self.language = language\n        self.preparse = preparse\n        self.name = module if self.preparse == \"id\" else \"%s_%s\" % (module, preparse)\n        self.expect_log = expect_log\n        self.annotate = annotate\n        self.cleanup_workdir = cleanup_workdir\n        self.cleanup_sharedlibs = cleanup_sharedlibs\n        self.cleanup_failures = cleanup_failures\n        self.cython_only = cython_only\n        self.test_selector = test_selector\n        self.shard_num = shard_num\n        self.fork = fork\n        self.language_level = language_level\n        self.warning_errors = warning_errors\n        self.test_determinism = test_determinism\n        self.common_utility_dir = common_utility_dir\n        self.pythran_dir = pythran_dir\n        self.stats = stats\n        self.add_cython_import = add_cython_import\n        self.extra_directives = extra_directives\n        unittest.TestCase.__init__(self)\n\n    def shortDescription(self):\n        return (\n            f\"[{self.shard_num}] compiling (\"\n            f\"{self.language}\"\n            f\"{'/cy2' if self.language_level == 2 else '/cy3' if self.language_level == 3 else ''}\"\n            f\"{'/pythran' if self.pythran_dir is not None else ''}\"\n            f\"/{os.path.splitext(self.module_path)[1][1:]}\"\n            f\") {self.description_name()}\"\n        )\n\n    def description_name(self):\n        return self.name\n\n    def setUp(self):\n        from Cython.Compiler import Options\n        self._saved_options = [\n            (name, getattr(Options, name))\n            for name in (\n                'warning_errors',\n                'clear_to_none',\n                'error_on_unknown_names',\n                'error_on_uninitialized',\n                # 'cache_builtins',  # not currently supported due to incorrect global caching\n            )\n        ]\n        Options.warning_errors = self.warning_errors\n\n        if not os.path.exists(self.workdir):\n            os.makedirs(self.workdir)\n        if self.workdir not in sys.path:\n            sys.path.insert(0, self.workdir)\n\n        if self.add_cython_import:\n            with open(self.module_path, 'rb') as f:\n                source = f.read()\n                if b'cython.cimports.' in source:\n                    from Cython.Shadow import CythonCImports\n                    for name in set(re.findall(br\"(cython\\.cimports(?:\\.\\w+)+)\", source)):\n                        name = name.decode()\n                        sys.modules[name] = CythonCImports(name)\n\n    def tearDown(self):\n        from Cython.Compiler import Options\n        for name, value in self._saved_options:\n            setattr(Options, name, value)\n        unpatch_inspect_isfunction()\n\n        try:\n            sys.path.remove(self.workdir)\n        except ValueError:\n            pass\n        try:\n            del sys.modules[self.module]\n        except KeyError:\n            pass\n\n        # remove any stubs of cimported modules in pure Python mode\n        if self.add_cython_import:\n            for name in list(sys.modules):\n                if name.startswith('cython.cimports.'):\n                    del sys.modules[name]\n\n        cleanup = self.cleanup_failures or self.success\n        cleanup_c_files = WITH_CYTHON and self.cleanup_workdir and cleanup\n        cleanup_lib_files = self.cleanup_sharedlibs and cleanup\n        is_cygwin = sys.platform == 'cygwin'\n\n        if os.path.exists(self.workdir):\n            if cleanup_c_files and cleanup_lib_files and not is_cygwin:\n                shutil.rmtree(self.workdir, ignore_errors=True)\n            else:\n                for rmfile in os.listdir(self.workdir):\n                    ext = os.path.splitext(rmfile)[1]\n                    if not cleanup_c_files:\n                        # Keep C, C++ files, header files, preprocessed sources\n                        # and assembly sources (typically the .i and .s files\n                        # are intentionally generated when -save-temps is given)\n                        if ext in (\".c\", \".cpp\", \".h\", \".i\", \".ii\", \".s\"):\n                            continue\n                        if ext == \".html\" and rmfile.startswith(self.module):\n                            continue\n\n                    is_shared_obj = ext in (\".so\", \".dll\")\n\n                    if not cleanup_lib_files and is_shared_obj:\n                        continue\n\n                    try:\n                        rmfile = os.path.join(self.workdir, rmfile)\n                        if os.path.isdir(rmfile):\n                            shutil.rmtree(rmfile, ignore_errors=True)\n                        elif is_cygwin and is_shared_obj:\n                            # Delete later\n                            _to_clean.append(rmfile)\n                        else:\n                            os.remove(rmfile)\n                    except IOError:\n                        pass\n\n                if cleanup_c_files and cleanup_lib_files and is_cygwin:\n                    # Finally, remove the work dir itself\n                    _to_clean.append(self.workdir)\n\n        if cleanup_c_files and os.path.exists(self.workdir + '-again'):\n            shutil.rmtree(self.workdir + '-again', ignore_errors=True)\n\n\n    def runTest(self):\n        self.success = False\n        self.runCompileTest()\n        self.success = True\n\n    def runCompileTest(self):\n        return self.compile(\n            self.test_directory, self.module, self.module_path, self.workdir,\n            self.test_directory, self.expect_log,\n            self.annotate, self.add_cython_import)\n\n    def find_module_source_file(self, source_file):\n        if not os.path.exists(source_file):\n            source_file = source_file[:-1]\n        return source_file\n\n    def build_target_filename(self, module_name):\n        target = '%s.%s' % (module_name, self.language)\n        return target\n\n    def related_files(self, test_directory, module_name):\n        is_related = re.compile('%s_.*[.].*' % module_name).match\n        return [filename for filename in list_unchanging_dir(test_directory)\n                if is_related(filename)]\n\n    def copy_files(self, test_directory, target_directory, file_list):\n        if self.preparse and self.preparse != 'id':\n            preparse_func = globals()[self.preparse]\n            def copy(src, dest):\n                with open(src) as fin:\n                    with open(dest, 'w') as fout:\n                        fout.write(preparse_func(fin.read()))\n        else:\n            # use symlink on Unix, copy on Windows\n            copy = os.symlink if CAN_SYMLINK else shutil.copy\n\n        join = os.path.join\n        for filename in file_list:\n            file_path = join(test_directory, filename)\n            if os.path.exists(file_path):\n                copy(file_path, join(target_directory, filename))\n\n    def source_files(self, workdir, module_name, file_list):\n        return ([self.build_target_filename(module_name)] +\n            [filename for filename in file_list\n             if not os.path.isfile(os.path.join(workdir, filename))])\n\n    def split_source_and_output(self, source_file, workdir, add_cython_import=False):\n        from Cython.Utils import detect_opened_file_encoding\n        with io_open(source_file, 'rb') as f:\n            # encoding is passed to ErrorWriter but not used on the source\n            # since it is sometimes deliberately wrong\n            encoding = detect_opened_file_encoding(f, default=None)\n\n        with io_open(source_file, 'r', encoding='ISO-8859-1') as source_and_output:\n            error_writer = warnings_writer = perf_hint_writer = None\n            out = io_open(os.path.join(workdir, os.path.basename(source_file)),\n                          'w', encoding='ISO-8859-1')\n            try:\n                for line in source_and_output:\n                    if line.startswith(u\"_ERRORS\"):\n                        out.close()\n                        out = error_writer = ErrorWriter(encoding=encoding)\n                    elif line.startswith(u\"_WARNINGS\"):\n                        out.close()\n                        out = warnings_writer = ErrorWriter(encoding=encoding)\n                    elif line.startswith(u\"_PERFORMANCE_HINTS\"):\n                        out.close()\n                        out = perf_hint_writer = ErrorWriter(encoding=encoding)\n                    else:\n                        if add_cython_import and line.strip() and not (\n                                line.startswith(u'#') or line.startswith(u\"from __future__ import \")):\n                            # insert \"import cython\" statement after any directives or future imports\n                            if line !=  u\"import cython\\n\":\n                                out.write(u\"import cython\\n\")\n                            add_cython_import = False\n                        out.write(line)\n            finally:\n                out.close()\n\n        return (error_writer.geterrors() if error_writer else [],\n                warnings_writer.geterrors() if warnings_writer else [],\n                perf_hint_writer.geterrors() if perf_hint_writer else [])\n\n    def run_cython(self, test_directory, module, module_path, targetdir, incdir, annotate,\n                   extra_compile_options=None):\n        include_dirs = INCLUDE_DIRS + [os.path.join(test_directory, '..', TEST_SUPPORT_DIR)]\n        if incdir:\n            include_dirs.append(incdir)\n\n        if self.preparse != 'id' and test_directory != targetdir:\n            file_name = os.path.basename(module_path)\n            self.copy_files(test_directory, targetdir, [file_name])\n            module_path = os.path.join(targetdir, file_name)\n        target = os.path.join(targetdir, self.build_target_filename(module))\n\n        if extra_compile_options is None:\n            extra_compile_options = {}\n\n        if 'allow_unknown_names' in self.tags['tag']:\n            from Cython.Compiler import Options\n            Options.error_on_unknown_names = False\n\n        try:\n            # see configure_cython()\n            CompilationOptions, cython_compile, pyrex_default_options\n        except NameError:\n            from Cython.Compiler.Options import (\n                CompilationOptions,\n                default_options as pyrex_default_options,\n            )\n            from Cython.Compiler.Main import compile as cython_compile\n        common_utility_include_dir = self.common_utility_dir\n\n        compiler_directives = {\n            'autotestdict': False,\n            **self.extra_directives,\n        }\n        options = CompilationOptions(\n            pyrex_default_options,\n            include_path = include_dirs,\n            output_file = target,\n            annotate = annotate,\n            use_listing_file = False,\n            cplus = self.language == 'cpp',\n            np_pythran = self.pythran_dir is not None,\n            language_level = self.language_level,\n            generate_pxi = False,\n            evaluate_tree_assertions = True,\n            common_utility_include_dir = common_utility_include_dir,\n            c_line_in_traceback = True,\n            compiler_directives = compiler_directives,\n            **extra_compile_options\n            )\n        cython_compile(module_path, options=options, full_module_name=module)\n\n    def run_distutils(self, test_directory, module, workdir, incdir,\n                      extra_extension_args=None):\n        cwd = os.getcwd()\n        os.chdir(workdir)\n        try:\n            build_extension = build_ext(get_distutils_distro())\n            build_extension.include_dirs = INCLUDE_DIRS[:]\n            if incdir:\n                build_extension.include_dirs.append(incdir)\n            build_extension.finalize_options()\n            if COMPILER:\n                build_extension.compiler = COMPILER\n\n            ext_compile_flags = CFLAGS[:]\n            ext_compile_defines = CDEFS[:]\n\n            if  build_extension.compiler == 'mingw32':\n                ext_compile_flags.append('-Wno-format')\n            if extra_extension_args is None:\n                extra_extension_args = {}\n\n            related_files = self.related_files(test_directory, module)\n            self.copy_files(test_directory, workdir, related_files)\n\n            from distutils.core import Extension\n            extension = Extension(\n                module,\n                sources=self.source_files(workdir, module, related_files),\n                extra_compile_args=ext_compile_flags,\n                define_macros=ext_compile_defines,\n                **extra_extension_args\n                )\n\n            if self.language == 'cpp':\n                # Set the language now as the fixer might need it\n                extension.language = 'c++'\n                if self.extra_directives.get('cpp_locals'):\n                    extension = update_cpp17_extension(extension)\n                    if extension is EXCLUDE_EXT:\n                        return\n\n            if 'distutils' in self.tags:\n                from Cython.Build.Dependencies import DistutilsInfo\n                from Cython.Utils import open_source_file\n                pyx_path = self.find_module_source_file(\n                    os.path.join(self.test_directory, self.module + \".pyx\"))\n                with open_source_file(pyx_path) as f:\n                    DistutilsInfo(f).apply(extension)\n\n            if self.pythran_dir:\n                from Cython.Build.Dependencies import update_pythran_extension\n                update_pythran_extension(extension)\n\n            # Compile with -DCYTHON_CLINE_IN_TRACEBACK=1 unless we have\n            # the \"traceback\" tag\n            if 'traceback' not in self.tags['tag']:\n                extension.define_macros.append((\"CYTHON_CLINE_IN_TRACEBACK\", 1))\n\n            for matcher, fixer in list(EXT_EXTRAS.items()):\n                if isinstance(matcher, str):\n                    # lazy init\n                    del EXT_EXTRAS[matcher]\n                    matcher = string_selector(matcher)\n                    EXT_EXTRAS[matcher] = fixer\n                if matcher(module, self.tags):\n                    newext = fixer(extension)\n                    if newext is EXCLUDE_EXT:\n                        return skip_test(\"Test '%s' excluded due to tags '%s'\" % (\n                            self.name, ', '.join(self.tags.get('tag', ''))))\n                    extension = newext or extension\n            if self.language == 'cpp':\n                extension.language = 'c++'\n\n            build_extension.extensions = [extension]\n            build_extension.build_temp = workdir\n            build_extension.build_lib  = workdir\n\n            from Cython.Utils import captured_fd, prepare_captured\n            from distutils.errors import CCompilerError\n\n            error = None\n            with captured_fd(2) as get_stderr:\n                try:\n                    build_extension.run()\n                except CCompilerError as exc:\n                    error = str(exc)\n            stderr = get_stderr()\n            if stderr and b\"Command line warning D9025\" in stderr:\n                # Manually suppress annoying MSVC warnings about overridden CLI arguments.\n                stderr = b''.join([\n                    line for line in stderr.splitlines(keepends=True)\n                    if b\"Command line warning D9025\" not in line\n                ])\n            if stderr:\n                # The test module name should always be ASCII, but let's not risk encoding failures.\n                output = b\"Compiler output for module \" + module.encode('utf-8') + b\":\\n\" + stderr + b\"\\n\"\n                sys.stdout.buffer.write(output)\n            if error is not None:\n                raise CCompilerError(u\"%s\\nCompiler output:\\n%s\" % (error, prepare_captured(stderr)))\n        finally:\n            os.chdir(cwd)\n\n        try:\n            get_ext_fullpath = build_extension.get_ext_fullpath\n        except AttributeError:\n            def get_ext_fullpath(ext_name, self=build_extension):\n                # copied from distutils.command.build_ext (missing in Py2.[45])\n                fullname = self.get_ext_fullname(ext_name)\n                modpath = fullname.split('.')\n                filename = self.get_ext_filename(modpath[-1])\n                if not self.inplace:\n                    filename = os.path.join(*modpath[:-1]+[filename])\n                    return os.path.join(self.build_lib, filename)\n                package = '.'.join(modpath[0:-1])\n                build_py = self.get_finalized_command('build_py')\n                package_dir = os.path.abspath(build_py.get_package_dir(package))\n                return os.path.join(package_dir, filename)\n\n        return get_ext_fullpath(module)\n\n    def compile(self, test_directory, module, module_path, workdir, incdir,\n                expect_log, annotate, add_cython_import):\n        expected_errors = expected_warnings = expected_perf_hints = errors = warnings = perf_hints = ()\n        expect_errors = \"errors\" in expect_log\n        expect_warnings = \"warnings\" in expect_log\n        expect_perf_hints = \"perf_hints\" in expect_log\n        if expect_errors or expect_warnings or expect_perf_hints or add_cython_import:\n            expected_errors, expected_warnings, expected_perf_hints = self.split_source_and_output(\n                module_path, workdir, add_cython_import)\n            test_directory = workdir\n            module_path = os.path.join(workdir, os.path.basename(module_path))\n\n        if WITH_CYTHON:\n            old_stderr = sys.stderr\n            try:\n                sys.stderr = ErrorWriter()\n                with self.stats.time(self.name, self.language, 'cython'):\n                    self.run_cython(test_directory, module, module_path, workdir, incdir, annotate)\n                errors, warnings, perf_hints = sys.stderr.getall()\n            finally:\n                sys.stderr = old_stderr\n            if self.test_determinism and not expect_errors:\n                workdir2 = workdir + '-again'\n                os.mkdir(workdir2)\n                self.run_cython(test_directory, module, module_path, workdir2, incdir, annotate)\n                diffs = []\n                for file in os.listdir(workdir2):\n                    with open(os.path.join(workdir, file)) as fid:\n                        txt1 = fid.read()\n                    with open(os.path.join(workdir2, file)) as fid:\n                        txt2 = fid.read()\n                    if txt1 != txt2:\n                        diffs.append(file)\n                        os.system('diff -u %s/%s %s/%s > %s/%s.diff' % (\n                            workdir, file,\n                            workdir2, file,\n                            workdir2, file))\n                if diffs:\n                    self.fail('Nondeterministic file generation: %s' % ', '.join(diffs))\n\n        tostderr = sys.__stderr__.write\n        if 'cerror' in self.tags['tag']:\n            if errors:\n                tostderr(\"\\n=== Expected C compile error ===\\n\")\n                tostderr(\"\\n=== Got Cython errors: ===\\n\")\n                tostderr('\\n'.join(errors))\n                tostderr('\\n\\n')\n                raise RuntimeError('should have generated extension code')\n        elif errors or expected_errors:\n            self._match_output(expected_errors, errors, tostderr)\n            return None\n        if expected_warnings or (expect_warnings and warnings):\n            self._match_output(expected_warnings, warnings, tostderr)\n        if expected_perf_hints or (expect_perf_hints and perf_hints):\n            self._match_output(expected_perf_hints, perf_hints, tostderr)\n\n        so_path = None\n        if not self.cython_only:\n            from Cython.Utils import captured_fd, print_bytes\n            from distutils.errors import CCompilerError\n            show_output = True\n            get_stderr = get_stdout = None\n            try:\n                with captured_fd(1) as get_stdout:\n                    with captured_fd(2) as get_stderr:\n                        with self.stats.time(self.name, self.language, 'compile-%s' % self.language):\n                            so_path = self.run_distutils(test_directory, module, workdir, incdir)\n            except Exception as exc:\n                if ('cerror' in self.tags['tag'] and\n                    ((get_stderr and get_stderr()) or\n                     isinstance(exc, CCompilerError))):\n                    show_output = False  # expected C compiler failure\n                else:\n                    raise\n            else:\n                if 'cerror' in self.tags['tag']:\n                    raise RuntimeError('should have failed C compile')\n            finally:\n                if show_output:\n                    stdout = get_stdout and get_stdout().strip()\n                    stderr = get_stderr and filter_stderr(get_stderr()).strip()\n                    if so_path and not stderr:\n                        # normal success case => ignore non-error compiler output\n                        stdout = None\n                    if stdout:\n                        print_bytes(\n                            stdout, header_text=\"\\n=== C/C++ compiler output: =========\\n\",\n                            end=None, file=sys.__stderr__)\n                    if stderr:\n                        print_bytes(\n                            stderr, header_text=\"\\n=== C/C++ compiler error output: ===\\n\",\n                            end=None, file=sys.__stderr__)\n                    if stdout or stderr:\n                        tostderr(\"\\n====================================\\n\")\n        return so_path\n\n    def _match_output(self, expected_output, actual_output, write):\n        try:\n            for expected, actual in zip(expected_output, actual_output):\n                if expected != actual and '\\\\' in actual and os.sep == '\\\\' and '/' in expected and '\\\\' not in expected:\n                    expected = expected.replace('/', '\\\\')\n                self.assertEqual(expected, actual)\n            if len(actual_output) < len(expected_output):\n                expected = expected_output[len(actual_output)]\n                self.assertEqual(expected, None)\n            elif len(actual_output) > len(expected_output):\n                unexpected = actual_output[len(expected_output)]\n                self.assertEqual(None, unexpected)\n        except AssertionError:\n            write(\"\\n=== Expected: ===\\n\")\n            write('\\n'.join(expected_output))\n            write(\"\\n\\n=== Got: ===\\n\")\n            write('\\n'.join(actual_output))\n            write('\\n\\n')\n            raise\n\n\nclass CythonRunTestCase(CythonCompileTestCase):\n    def setUp(self):\n        CythonCompileTestCase.setUp(self)\n        from Cython.Compiler import Options\n        Options.clear_to_none = False\n\n    def description_name(self):\n        return self.name if self.cython_only else \"and running %s\" % self.name\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n        result.startTest(self)\n        try:\n            self.setUp()\n            try:\n                self.success = False\n                ext_so_path = self.runCompileTest()\n                failures, errors, skipped = len(result.failures), len(result.errors), len(result.skipped)\n                if not self.cython_only and ext_so_path is not None:\n                    self.run_tests(result, ext_so_path)\n                if failures == len(result.failures) and errors == len(result.errors):\n                    # No new errors...\n                    self.success = True\n            finally:\n                check_thread_termination()\n        except SkipTest as exc:\n            result.addSkip(self, str(exc))\n            result.stopTest(self)\n        except Exception:\n            result.addError(self, sys.exc_info())\n            result.stopTest(self)\n        try:\n            self.tearDown()\n        except Exception:\n            pass\n\n    def run_tests(self, result, ext_so_path):\n        self.run_doctests(self.module, result, ext_so_path)\n\n    def run_doctests(self, module_or_name, result, ext_so_path):\n        def run_test(result):\n            if isinstance(module_or_name, basestring):\n                with self.stats.time(self.name, self.language, 'import'):\n                    module = import_ext(module_or_name, ext_so_path)\n            else:\n                module = module_or_name\n            tests = doctest.DocTestSuite(module)\n            if self.test_selector:\n                filter_test_suite(tests, self.test_selector)\n            with self.stats.time(self.name, self.language, 'run'):\n                tests.run(result)\n        run_forked_test(result, run_test, self.shortDescription(), self.fork)\n\n\ndef run_forked_test(result, run_func, test_name, fork=True):\n    if not fork or sys.version_info[0] >= 3 or not hasattr(os, 'fork'):\n        run_func(result)\n        sys.stdout.flush()\n        sys.stderr.flush()\n        gc.collect()\n        return\n\n    # fork to make sure we do not keep the tested module loaded\n    result_handle, result_file = tempfile.mkstemp()\n    os.close(result_handle)\n    child_id = os.fork()\n    if not child_id:\n        result_code = 0\n        try:\n            try:\n                tests = partial_result = None\n                try:\n                    partial_result = PartialTestResult(result)\n                    run_func(partial_result)\n                    sys.stdout.flush()\n                    sys.stderr.flush()\n                    gc.collect()\n                except Exception:\n                    result_code = 1\n                    if partial_result is not None:\n                        if tests is None:\n                            # importing failed, try to fake a test class\n                            tests = _FakeClass(\n                                failureException=sys.exc_info()[1],\n                                _shortDescription=test_name,\n                                module_name=None)\n                        partial_result.addError(tests, sys.exc_info())\n                if partial_result is not None:\n                    with open(result_file, 'wb') as output:\n                        pickle.dump(partial_result.data(), output)\n            except:\n                traceback.print_exc()\n        finally:\n            try: sys.stderr.flush()\n            except: pass\n            try: sys.stdout.flush()\n            except: pass\n            os._exit(result_code)\n\n    try:\n        cid, result_code = os.waitpid(child_id, 0)\n        module_name = test_name.split()[-1]\n        # os.waitpid returns the child's result code in the\n        # upper byte of result_code, and the signal it was\n        # killed by in the lower byte\n        if result_code & 255:\n            raise Exception(\n                \"Tests in module '%s' were unexpectedly killed by signal %d, see test output for details.\" % (\n                    module_name, result_code & 255))\n        result_code >>= 8\n        if result_code in (0,1):\n            try:\n                with open(result_file, 'rb') as f:\n                    PartialTestResult.join_results(result, pickle.load(f))\n            except Exception:\n                raise Exception(\n                    \"Failed to load test result from test in module '%s' after exit status %d,\"\n                    \" see test output for details.\" % (module_name, result_code))\n        if result_code:\n            raise Exception(\n                \"Tests in module '%s' exited with status %d, see test output for details.\" % (\n                    module_name, result_code))\n    finally:\n        try:\n            os.unlink(result_file)\n        except:\n            pass\n\n\nclass PureDoctestTestCase(unittest.TestCase):\n    def __init__(self, module_name, module_path, tags, stats=None, shard_num=0):\n        self.tags = tags\n        self.module_name = self.name = module_name\n        self.module_path = module_path\n        self.stats = stats\n        self.shard_num = shard_num\n        unittest.TestCase.__init__(self, 'run')\n\n    def shortDescription(self):\n        return \"[%d] running pure doctests in %s\" % (\n            self.shard_num, self.module_name)\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n        loaded_module_name = 'pure_doctest__' + self.module_name\n        result.startTest(self)\n        try:\n            self.setUp()\n\n            with self.stats.time(self.name, 'py', 'pyimport'):\n                m = import_module_from_file(self.module_name, self.module_path)\n\n            try:\n                with self.stats.time(self.name, 'py', 'pyrun'):\n                    doctest.DocTestSuite(m).run(result)\n            finally:\n                del m\n                if loaded_module_name in sys.modules:\n                    del sys.modules[loaded_module_name]\n                check_thread_termination()\n        except Exception:\n            result.addError(self, sys.exc_info())\n            result.stopTest(self)\n        try:\n            self.tearDown()\n        except Exception:\n            pass\n\n        if 'mypy' in self.tags['tag']:\n            try:\n                from mypy import api as mypy_api\n            except ImportError:\n                pass\n            else:\n                with self.stats.time(self.name, 'py', 'mypy'):\n                    mypy_result = mypy_api.run([\n                        self.module_path,\n                        #'--ignore-missing-imports',\n                        #'--follow-imports', 'skip',\n                        '--python-version', '3.10',\n                    ])\n                if mypy_result[2]:\n                    self.fail(mypy_result[0])\n\n\nis_private_field = re.compile('^_[^_]').match\n\nclass _FakeClass(object):\n    def __init__(self, **kwargs):\n        self._shortDescription = kwargs.get('module_name')\n        self.__dict__.update(kwargs)\n    def shortDescription(self):\n        return self._shortDescription\n\nfrom unittest import TextTestResult\n\nclass PartialTestResult(TextTestResult):\n    def __init__(self, base_result):\n        TextTestResult.__init__(\n            self, self._StringIO(), True,\n            base_result.dots + base_result.showAll*2)\n\n    def strip_error_results(self, results):\n        for test_case, error in results:\n            for attr_name in filter(is_private_field, dir(test_case)):\n                if attr_name == '_dt_test':\n                    test_case._dt_test = _FakeClass(\n                        name=test_case._dt_test.name)\n                elif attr_name != '_shortDescription':\n                    setattr(test_case, attr_name, None)\n\n    def data(self):\n        self.strip_error_results(self.failures)\n        self.strip_error_results(self.errors)\n        return (self.failures, self.errors, self.skipped, self.testsRun,\n                self.stream.getvalue())\n\n    def join_results(result, data):\n        \"\"\"Static method for merging the result back into the main\n        result object.\n        \"\"\"\n        failures, errors, skipped, tests_run, output = data\n        if output:\n            result.stream.write(output)\n        result.errors.extend(errors)\n        result.skipped.extend(skipped)\n        result.failures.extend(failures)\n        result.testsRun += tests_run\n\n    join_results = staticmethod(join_results)\n\n    class _StringIO(StringIO):\n        def writeln(self, line):\n            self.write(\"%s\\n\" % line)\n\n\nclass CythonUnitTestCase(CythonRunTestCase):\n    def shortDescription(self):\n        return \"[%d] compiling (%s) tests in %s\" % (\n            self.shard_num, self.language, self.description_name())\n\n    def run_tests(self, result, ext_so_path):\n        with self.stats.time(self.name, self.language, 'import'):\n            module = import_ext(self.module, ext_so_path)\n        tests = unittest.defaultTestLoader.loadTestsFromModule(module)\n        if self.test_selector:\n            filter_test_suite(tests, self.test_selector)\n        with self.stats.time(self.name, self.language, 'run'):\n            tests.run(result)\n\n\nclass CythonPyregrTestCase(CythonRunTestCase):\n    def setUp(self):\n        CythonRunTestCase.setUp(self)\n        from Cython.Compiler import Options\n        Options.error_on_unknown_names = False\n        Options.error_on_uninitialized = False\n        Options._directive_defaults.update(dict(\n            binding=True, always_allow_keywords=True,\n            set_initial_path=\"SOURCEFILE\"))\n        patch_inspect_isfunction()\n\n    def related_files(self, test_directory, module_name):\n        return _list_pyregr_data_files(test_directory)\n\n    def _run_unittest(self, result, *classes):\n        \"\"\"Run tests from unittest.TestCase-derived classes.\"\"\"\n        valid_types = (unittest.TestSuite, unittest.TestCase)\n        suite = unittest.TestSuite()\n        load_tests = unittest.TestLoader().loadTestsFromTestCase\n        for cls in classes:\n            if isinstance(cls, str):\n                if cls in sys.modules:\n                    suite.addTest(unittest.TestLoader().loadTestsFromModule(sys.modules[cls]))\n                else:\n                    raise ValueError(\"str arguments must be keys in sys.modules\")\n            elif isinstance(cls, valid_types):\n                suite.addTest(cls)\n            else:\n                suite.addTest(load_tests(cls))\n        with self.stats.time(self.name, self.language, 'run'):\n            suite.run(result)\n\n    def _run_doctest(self, result, module):\n        self.run_doctests(module, result, None)\n\n    def run_tests(self, result, ext_so_path):\n        try:\n            from test import support\n        except ImportError: # Python2.x\n            from test import test_support as support\n\n        def run_test(result):\n            def run_unittest(*classes):\n                return self._run_unittest(result, *classes)\n            def run_doctest(module, verbosity=None):\n                return self._run_doctest(result, module)\n\n            backup = (support.run_unittest, support.run_doctest)\n            support.run_unittest = run_unittest\n            support.run_doctest = run_doctest\n\n            try:\n                try:\n                    sys.stdout.flush() # helps in case of crashes\n                    with self.stats.time(self.name, self.language, 'import'):\n                        module = import_ext(self.module, ext_so_path)\n                    sys.stdout.flush() # helps in case of crashes\n                    if hasattr(module, 'test_main'):\n                        # help 'doctest.DocFileTest' find the module path through frame inspection\n                        fake_caller_module_globals = {\n                            'module': module,\n                            '__name__': module.__name__,\n                        }\n                        call_tests = eval(\n                            'lambda: module.test_main()',\n                            fake_caller_module_globals, fake_caller_module_globals)\n                        call_tests()\n                        sys.stdout.flush() # helps in case of crashes\n                except (unittest.SkipTest, support.ResourceDenied):\n                    result.addSkip(self, 'ok')\n            finally:\n                support.run_unittest, support.run_doctest = backup\n\n        run_forked_test(result, run_test, self.shortDescription(), self.fork)\n\n\nclass TestCodeFormat(unittest.TestCase):\n\n    def __init__(self, cython_dir):\n        self.cython_dir = cython_dir\n        unittest.TestCase.__init__(self)\n\n    def runTest(self):\n        source_dirs = ['Cython', 'Demos', 'docs', 'pyximport', 'tests']\n\n        import pycodestyle\n        config_file = os.path.join(self.cython_dir, \"setup.cfg\")\n        if not os.path.exists(config_file):\n            config_file = os.path.join(os.path.dirname(__file__), \"setup.cfg\")\n        total_errors = 0\n\n        # checks for .py files\n        paths = []\n        for codedir in source_dirs:\n            paths += glob.glob(os.path.join(self.cython_dir, codedir + \"/**/*.py\"), recursive=True)\n        style = pycodestyle.StyleGuide(config_file=config_file)\n        print(\"\")  # Fix the first line of the report.\n        result = style.check_files(paths)\n        total_errors += result.total_errors\n\n        # checks for non-Python source files\n        paths = []\n        for codedir in ['Cython', 'Demos', 'pyximport']:  # source_dirs:\n            paths += glob.glob(os.path.join(self.cython_dir, codedir + \"/**/*.p[yx][xdi]\"), recursive=True)\n        style = pycodestyle.StyleGuide(config_file=config_file, select=[\n            # whitespace\n            \"W1\", \"W2\", \"W3\",\n            # indentation\n            \"E101\", \"E111\",\n        ])\n        print(\"\")  # Fix the first line of the report.\n        result = style.check_files(paths)\n        total_errors += result.total_errors\n\n        \"\"\"\n        # checks for non-Python test files\n        paths = []\n        for codedir in ['tests']:\n            paths += glob.glob(os.path.join(self.cython_dir, codedir + \"/**/*.p[yx][xdi]\"), recursive=True)\n        style = pycodestyle.StyleGuide(select=[\n            # whitespace\n            \"W1\", \"W2\", \"W3\",\n        ])\n        result = style.check_files(paths)\n        total_errors += result.total_errors\n        \"\"\"\n\n        self.assertEqual(total_errors, 0, \"Found code style errors.\")\n\n\ninclude_debugger = IS_CPYTHON\n\n\ndef collect_unittests(path, module_prefix, suite, selectors, exclude_selectors):\n    def file_matches(filename):\n        return filename.startswith(\"Test\") and filename.endswith(\".py\")\n\n    def package_matches(dirname):\n        return dirname == \"Tests\"\n\n    loader = unittest.TestLoader()\n    from importlib import import_module\n\n    if include_debugger:\n        skipped_dirs = []\n    else:\n        skipped_dirs = ['Cython' + os.path.sep + 'Debugger' + os.path.sep]\n\n    for dirpath, dirnames, filenames in os.walk(path):\n        if dirpath != path and \"__init__.py\" not in filenames:\n            skipped_dirs.append(dirpath + os.path.sep)\n            continue\n        skip = False\n        for dir in skipped_dirs:\n            if dirpath.startswith(dir):\n                skip = True\n        if skip:\n            continue\n        parentname = os.path.split(dirpath)[-1]\n        if package_matches(parentname):\n            for f in filenames:\n                if file_matches(f):\n                    filepath = os.path.join(dirpath, f)[:-len(\".py\")]\n                    modulename = module_prefix + filepath[len(path)+1:].replace(os.path.sep, '.')\n                    if not any(1 for match in selectors if match(modulename)):\n                        continue\n                    if any(1 for match in exclude_selectors if match(modulename)):\n                        continue\n                    module = import_module(modulename)\n                    suite.addTests([loader.loadTestsFromModule(module)])\n\n\ndef collect_doctests(path, module_prefix, suite, selectors, exclude_selectors):\n    def package_matches(dirname):\n        if dirname == 'Debugger' and not include_debugger:\n            return False\n        return dirname not in (\"Mac\", \"Distutils\", \"Plex\", \"Tempita\")\n\n    def file_matches(filename):\n        filename, ext = os.path.splitext(filename)\n        excludelist = ['libcython', 'libpython', 'test_libcython_in_gdb',\n                       'TestLibCython']\n        return (ext == '.py' and not\n                '~' in filename and not\n                '#' in filename and not\n                filename.startswith('.') and not\n                filename in excludelist)\n\n    import doctest\n    from importlib import import_module\n\n    for dirpath, dirnames, filenames in os.walk(path):\n        for dir in list(dirnames):\n            if not package_matches(dir):\n                dirnames.remove(dir)\n        for f in filenames:\n            if file_matches(f):\n                if not f.endswith('.py'): continue\n                filepath = os.path.join(dirpath, f)\n                if os.path.getsize(filepath) == 0: continue\n                filepath = filepath[:-len(\".py\")]\n                modulename = module_prefix + filepath[len(path)+1:].replace(os.path.sep, '.')\n                if not [ 1 for match in selectors if match(modulename) ]:\n                    continue\n                if [ 1 for match in exclude_selectors if match(modulename) ]:\n                    continue\n                if 'in_gdb' in modulename:\n                    # These should only be imported from gdb.\n                    continue\n                module = import_module(modulename)\n                if hasattr(module, \"__doc__\") or hasattr(module, \"__test__\"):\n                    try:\n                        suite.addTest(doctest.DocTestSuite(module))\n                    except ValueError: # no tests\n                        pass\n\n\nclass EndToEndTest(unittest.TestCase):\n    \"\"\"\n    This is a test of build/*.srctree files, where srctree defines a full\n    directory structure and its header gives a list of commands to run.\n    \"\"\"\n    cython_root = os.path.dirname(os.path.abspath(__file__))\n\n    def __init__(self, treefile, workdir, cleanup_workdir=True, stats=None, capture=True, shard_num=0):\n        self.name = os.path.splitext(os.path.basename(treefile))[0]\n        self.treefile = treefile\n        self.workdir = os.path.join(workdir, self.name)\n        self.cleanup_workdir = cleanup_workdir\n        self.stats = stats\n        self.capture = capture\n        self.shard_num = shard_num\n        cython_syspath = [self.cython_root]\n        for path in sys.path:\n            if path.startswith(self.cython_root) and path not in cython_syspath:\n                # Py3 installation and refnanny build prepend their\n                # fixed paths to sys.path => prefer that over the\n                # generic one (cython_root itself goes last)\n                cython_syspath.append(path)\n        self.cython_syspath = os.pathsep.join(cython_syspath[::-1])\n        unittest.TestCase.__init__(self)\n\n    def shortDescription(self):\n        return \"[%d] End-to-end %s\" % (\n            self.shard_num, self.name)\n\n    def setUp(self):\n        from Cython.TestUtils import unpack_source_tree\n        _, self.commands = unpack_source_tree(self.treefile, self.workdir, self.cython_root)\n\n    def tearDown(self):\n        if self.cleanup_workdir:\n            for trial in range(5):\n                try:\n                    shutil.rmtree(self.workdir)\n                except OSError:\n                    time.sleep(0.1)\n                else:\n                    break\n\n    def runTest(self):\n        self.success = False\n        old_path = os.environ.get('PYTHONPATH')\n        new_path = self.cython_syspath\n        if old_path:\n            new_path = new_path + os.pathsep + self.workdir + os.pathsep + old_path\n        env = dict(os.environ, PYTHONPATH=new_path, PYTHONIOENCODING='utf8')\n        cmd = []\n        out = []\n        err = []\n        workdir = self.workdir\n        for command_no, command in enumerate(self.commands, 1):\n            if command[0] == \"UNSET\":\n                try:\n                    envvar = command[1]\n                except KeyError:\n                    envvar = None\n                env.pop(envvar, None)\n                continue\n            elif command[0] == \"CD\":\n                if len(command) == 1:\n                    workdir = self.workdir\n                else:\n                    workdir = os.path.normpath(os.path.join(workdir, command[1]))\n                continue\n            time_category = 'etoe-build' if (\n                'setup.py' in command or 'cythonize.py' in command or 'cython.py' in command) else 'etoe-run'\n            with self.stats.time('%s(%d)' % (self.name, command_no), 'c', time_category):\n                if self.capture:\n                    p = subprocess.Popen(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE, env=env, cwd=workdir)\n                    _out, _err = p.communicate()\n                    res = p.returncode\n                else:\n                    p = subprocess.call(command, env=env, cwd=workdir)\n                    _out, _err = b'', b''\n                    res = p\n            cmd.append(command)\n            out.append(_out.decode('utf-8'))\n            err.append(_err.decode('utf-8'))\n\n            if res == 0 and b'REFNANNY: ' in _out:\n                res = -1\n            if res != 0:\n                for c, o, e in zip(cmd, out, err):\n                    sys.stderr.write(\"[%d] %s\\n%s\\n%s\\n\\n\" % (\n                        self.shard_num, c, o, e))\n                sys.stderr.write(\"Final directory layout of '%s':\\n%s\\n\\n\" % (\n                    self.name,\n                    '\\n'.join(os.path.join(dirpath, filename) for dirpath, dirs, files in os.walk(self.workdir) for filename in files),\n                ))\n                self.assertEqual(0, res, \"non-zero exit status, last output was:\\n%r\\n-- stdout:%s\\n-- stderr:%s\\n\" % (\n                    ' '.join(command), out[-1], err[-1]))\n        self.success = True\n\n\n# TODO: Support cython_freeze needed here as well.\n# TODO: Windows support.\n\nclass EmbedTest(unittest.TestCase):\n\n    working_dir = \"Demos/embed\"\n\n    def setUp(self):\n        self.old_dir = os.getcwd()\n        os.chdir(self.working_dir)\n        os.system(\n            \"make PYTHON='%s' clean > /dev/null\" % sys.executable)\n\n    def tearDown(self):\n        try:\n            os.system(\n                \"make PYTHON='%s' clean > /dev/null\" % sys.executable)\n        except:\n            pass\n        os.chdir(self.old_dir)\n\n    def test_embed(self):\n        libname = sysconfig.get_config_var('LIBRARY')\n        libdir = sysconfig.get_config_var('LIBDIR')\n        if not os.path.isdir(libdir) or libname not in os.listdir(libdir):\n            libdir = os.path.join(os.path.dirname(sys.executable), '..', 'lib')\n            if not os.path.isdir(libdir) or libname not in os.listdir(libdir):\n                libdir = os.path.join(libdir, 'python%d.%d' % sys.version_info[:2], 'config')\n                if not os.path.isdir(libdir) or libname not in os.listdir(libdir):\n                    # report the error for the original directory\n                    libdir = sysconfig.get_config_var('LIBDIR')\n        cython = os.path.abspath(os.path.join('..', '..', 'cython.py'))\n\n        try:\n            subprocess.check_output([\n                    \"make\",\n                    \"PYTHON='%s'\" % sys.executable,\n                    \"CYTHON='%s'\" % cython,\n                    \"LIBDIR1='%s'\" % libdir,\n                    \"paths\", \"test\",\n                ],\n                stderr=subprocess.STDOUT,\n            )\n        except subprocess.CalledProcessError as err:\n            if err.output:\n                self.fail(\"EmbedTest failed: \" + err.output.decode().strip())\n            raise\n        self.assertTrue(True)  # :)\n\n\ndef load_listfile(filename):\n    # just reuse the FileListExclude implementation\n    return list(FileListExcluder(filename))\n\nclass MissingDependencyExcluder(object):\n    def __init__(self, deps):\n        # deps: { matcher func : module name }\n        self.exclude_matchers = []\n        for matcher, module_name in deps.items():\n            try:\n                module = __import__(module_name)\n            except ImportError:\n                self.exclude_matchers.append(string_selector(matcher))\n                print(\"Test dependency not found: '%s'\" % module_name)\n            else:\n                version = self.find_dep_version(module_name, module)\n                print(\"Test dependency found: '%s' version %s\" % (module_name, version))\n        self.tests_missing_deps = []\n\n    def find_dep_version(self, name, module):\n        try:\n            version = module.__version__\n        except AttributeError:\n            stdlib_dir = os.path.dirname(shutil.__file__) + os.sep\n            module_path = getattr(module, '__file__', stdlib_dir)  # no __file__? => builtin stdlib module\n            # GraalPython seems to return None for some unknown reason\n            if module_path and module_path.startswith(stdlib_dir):\n                # stdlib module\n                version = sys.version.partition(' ')[0]\n            elif '.' in name:\n                # incrementally look for a parent package with version\n                name = name.rpartition('.')[0]\n                return self.find_dep_version(name, __import__(name))\n            else:\n                version = '?.?'\n        return version\n\n    def __call__(self, testname, tags=None):\n        for matcher in self.exclude_matchers:\n            if matcher(testname, tags):\n                self.tests_missing_deps.append(testname)\n                return True\n        return False\n\n\nclass VersionDependencyExcluder(object):\n    def __init__(self, deps):\n        # deps: { version : matcher func }\n        from sys import version_info\n        self.exclude_matchers = []\n        for ver, (compare, matcher) in deps.items():\n            if compare(version_info, ver):\n                self.exclude_matchers.append(matcher)\n        self.tests_missing_deps = []\n    def __call__(self, testname, tags=None):\n        for matcher in self.exclude_matchers:\n            if matcher(testname):\n                self.tests_missing_deps.append(testname)\n                return True\n        return False\n\n\nclass FileListExcluder(object):\n    def __init__(self, list_file, verbose=False):\n        self.verbose = verbose\n        self.excludes = {}\n        self._list_file = os.path.relpath(list_file)\n        with open(list_file) as f:\n            for line in f:\n                line = line.strip()\n                if line and line[0] != '#':\n                    self.excludes[line.split()[0]] = True\n\n    def __call__(self, testname, tags=None):\n        exclude = any(string_selector(ex)(testname) for ex in self.excludes)\n        if exclude and self.verbose:\n            print(\"Excluding %s because it's listed in %s\"\n                  % (testname, self._list_file))\n        return exclude\n\n\nclass TagsSelector(object):\n    def __init__(self, tag, value):\n        self.tag = tag\n        self.value = value\n\n    def __call__(self, testname, tags=None):\n        if tags is None:\n            return False\n        else:\n            return self.value in tags[self.tag]\n\n\nclass RegExSelector(object):\n    def __init__(self, pattern_string):\n        try:\n            self.regex_matches = re.compile(pattern_string, re.I|re.U).search\n        except re.error:\n            print('Invalid pattern: %r' % pattern_string)\n            raise\n\n    def __call__(self, testname, tags=None):\n        return self.regex_matches(testname)\n\n\ndef string_selector(s):\n    if ':' in s:\n        return TagsSelector(*s.split(':', 1))\n    else:\n        return RegExSelector(s)\n\n\nclass ShardExcludeSelector(object):\n    # This is an exclude selector so it can override the (include) selectors.\n    # It may not provide uniform distribution (in time or count), but is a\n    # determanistic partition of the tests which is important.\n\n    # Random seed to improve the hash distribution.\n    _seed = base64.b64decode(b'2ged1EtsGz/GkisJr22UcLeP6n9XIaA5Vby2wM49Wvg=')\n\n    def __init__(self, shard_num, shard_count):\n        self.shard_num = shard_num\n        self.shard_count = shard_count\n\n    def __call__(self, testname, tags=None, _hash=zlib.crc32):\n        # Cannot use simple hash() here as shard processes might use different hash seeds.\n        # CRC32 is fast and simple.\n        return _hash(self._seed + testname.encode()) % self.shard_count != self.shard_num\n\n\nclass PendingThreadsError(RuntimeError):\n    pass\n\nthreads_seen = []\n\ndef check_thread_termination(ignore_seen=True):\n    if threading is None: # no threading enabled in CPython\n        return\n    current = threading.current_thread()\n    blocking_threads = []\n    for t in threading.enumerate():\n        if not t.is_alive() or t == current or t.name == 'time_stamper':\n            continue\n        t.join(timeout=2)\n        if t.is_alive():\n            if not ignore_seen:\n                blocking_threads.append(t)\n                continue\n            for seen in threads_seen:\n                if t is seen:\n                    break\n            else:\n                threads_seen.append(t)\n                blocking_threads.append(t)\n    if not blocking_threads:\n        return\n    sys.stderr.write(\"warning: left-over threads found after running test:\\n\")\n    for t in blocking_threads:\n        sys.stderr.write('...%s\\n'  % repr(t))\n    raise PendingThreadsError(\"left-over threads found after running test\")\n\ndef subprocess_output(cmd):\n    try:\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        return p.communicate()[0].decode('UTF-8')\n    except OSError:\n        return ''\n\ndef get_version():\n    from Cython.Compiler.Version import version as cython_version\n    full_version = cython_version\n    top = os.path.dirname(os.path.abspath(__file__))\n    if os.path.exists(os.path.join(top, '.git')):\n        old_dir = os.getcwd()\n        try:\n            os.chdir(top)\n            head_commit = subprocess_output(['git', 'rev-parse', 'HEAD']).strip()\n            version_commit = subprocess_output(['git', 'rev-parse', cython_version]).strip()\n            diff = subprocess_output(['git', 'diff', '--stat']).strip()\n            if head_commit != version_commit:\n                full_version += \" \" + head_commit\n            if diff:\n                full_version += ' + uncommitted changes'\n        finally:\n            os.chdir(old_dir)\n    return full_version\n\n_orig_stdout, _orig_stderr = sys.stdout, sys.stderr\ndef flush_and_terminate(status):\n    try:\n        _orig_stdout.flush()\n        _orig_stderr.flush()\n    finally:\n        os._exit(status)\n\ndef main():\n\n    global DISTDIR, WITH_CYTHON\n\n    # Set an environment variable to the top directory\n    os.environ['CYTHON_PROJECT_DIR'] = os.path.abspath(os.path.dirname(__file__))\n\n    DISTDIR = os.path.join(os.getcwd(), os.path.dirname(sys.argv[0]))\n\n    from Cython.Compiler import DebugFlags\n    args = []\n    for arg in sys.argv[1:]:\n        if arg.startswith('--debug') and arg[2:].replace('-', '_') in dir(DebugFlags):\n            setattr(DebugFlags, arg[2:].replace('-', '_'), True)\n        else:\n            args.append(arg)\n\n    from optparse import OptionParser\n    parser = OptionParser(usage=\"usage: %prog [options] [selector ...]\")\n    parser.add_option(\"--no-cleanup\", dest=\"cleanup_workdir\",\n                      action=\"store_false\", default=True,\n                      help=\"do not delete the generated C files (allows passing --no-cython on next run)\")\n    parser.add_option(\"--no-cleanup-sharedlibs\", dest=\"cleanup_sharedlibs\",\n                      action=\"store_false\", default=True,\n                      help=\"do not delete the generated shared library files (allows manual module experimentation)\")\n    parser.add_option(\"--no-cleanup-failures\", dest=\"cleanup_failures\",\n                      action=\"store_false\", default=True,\n                      help=\"enable --no-cleanup and --no-cleanup-sharedlibs for failed tests only\")\n    parser.add_option(\"--no-cython\", dest=\"with_cython\",\n                      action=\"store_false\", default=True,\n                      help=\"do not run the Cython compiler, only the C compiler\")\n    parser.add_option(\"--compiler\", dest=\"compiler\", default=None,\n                      help=\"C compiler type\")\n    backend_list = ','.join(BACKENDS)\n    parser.add_option(\"--backends\", dest=\"backends\", default=backend_list,\n                      help=\"select backends to test (default: %s)\" % backend_list)\n    parser.add_option(\"--no-c\", dest=\"use_c\",\n                      action=\"store_false\", default=True,\n                      help=\"do not test C compilation backend\")\n    parser.add_option(\"--no-cpp\", dest=\"use_cpp\",\n                      action=\"store_false\", default=True,\n                      help=\"do not test C++ compilation backend\")\n    parser.add_option(\"--no-cpp-locals\", dest=\"use_cpp_locals\",\n                      action=\"store_false\", default=True,\n                      help=\"do not rerun select C++ tests with cpp_locals directive\")\n    parser.add_option(\"--no-unit\", dest=\"unittests\",\n                      action=\"store_false\", default=True,\n                      help=\"do not run the unit tests\")\n    parser.add_option(\"--no-doctest\", dest=\"doctests\",\n                      action=\"store_false\", default=True,\n                      help=\"do not run the doctests\")\n    parser.add_option(\"--no-file\", dest=\"filetests\",\n                      action=\"store_false\", default=True,\n                      help=\"do not run the file based tests\")\n    parser.add_option(\"--no-pyregr\", dest=\"pyregr\",\n                      action=\"store_false\", default=True,\n                      help=\"do not run the regression tests of CPython in tests/pyregr/\")\n    parser.add_option(\"--no-examples\", dest=\"examples\",\n                      action=\"store_false\", default=True,\n                      help=\"Do not run the documentation tests in the examples directory.\")\n    parser.add_option(\"--no-code-style\", dest=\"code_style\",\n                      action=\"store_false\", default=True,\n                      help=\"Do not run the code style (PEP8) checks.\")\n    parser.add_option(\"--cython-only\", dest=\"cython_only\",\n                      action=\"store_true\", default=False,\n                      help=\"only compile pyx to c, do not run C compiler or run the tests\")\n    parser.add_option(\"--no-refnanny\", dest=\"with_refnanny\",\n                      action=\"store_false\", default=True,\n                      help=\"do not regression test reference counting\")\n    parser.add_option(\"--no-fork\", dest=\"fork\",\n                      action=\"store_false\", default=True,\n                      help=\"do not fork to run tests\")\n    parser.add_option(\"--sys-pyregr\", dest=\"system_pyregr\",\n                      action=\"store_true\", default=False,\n                      help=\"run the regression tests of the CPython installation\")\n    parser.add_option(\"-x\", \"--exclude\", dest=\"exclude\",\n                      action=\"append\", metavar=\"PATTERN\",\n                      help=\"exclude tests matching the PATTERN\")\n    parser.add_option(\"--listfile\", dest=\"listfile\",\n                      action=\"append\",\n                      help=\"specify a file containing a list of tests to run\")\n    parser.add_option(\"-j\", \"--shard_count\", dest=\"shard_count\", metavar=\"N\",\n                      type=int, default=1,\n                      help=\"shard this run into several parallel runs\")\n    parser.add_option(\"--shard_num\", dest=\"shard_num\", metavar=\"K\",\n                      type=int, default=-1,\n                      help=\"test only this single shard\")\n    parser.add_option(\"--profile\", dest=\"profile\",\n                      action=\"store_true\", default=False,\n                      help=\"enable profiling of the tests\")\n    parser.add_option(\"-C\", \"--coverage\", dest=\"coverage\",\n                      action=\"store_true\", default=False,\n                      help=\"collect source coverage data for the Compiler\")\n    parser.add_option(\"--coverage-xml\", dest=\"coverage_xml\",\n                      action=\"store_true\", default=False,\n                      help=\"collect source coverage data for the Compiler in XML format\")\n    parser.add_option(\"--coverage-html\", dest=\"coverage_html\",\n                      action=\"store_true\", default=False,\n                      help=\"collect source coverage data for the Compiler in HTML format\")\n    parser.add_option(\"-A\", \"--annotate\", dest=\"annotate_source\",\n                      action=\"store_true\", default=True,\n                      help=\"generate annotated HTML versions of the test source files\")\n    parser.add_option(\"--no-annotate\", dest=\"annotate_source\",\n                      action=\"store_false\",\n                      help=\"do not generate annotated HTML versions of the test source files\")\n    parser.add_option(\"-v\", \"--verbose\", dest=\"verbosity\",\n                      action=\"count\", default=0,\n                      help=\"display test progress, pass twice to print test names\")\n    parser.add_option(\"-T\", \"--ticket\", dest=\"tickets\",\n                      action=\"append\",\n                      help=\"a bug ticket number to run the respective test in 'tests/*'\")\n    parser.add_option(\"-k\", dest=\"only_pattern\",\n                      help=\"a regex pattern for selecting doctests and test functions in the test modules\")\n    parser.add_option(\"-3\", dest=\"language_level\",\n                      action=\"store_const\", const=3, default=2,\n                      help=\"set language level to Python 3 (useful for running the CPython regression tests)'\")\n    parser.add_option(\"--xml-output\", dest=\"xml_output_dir\", metavar=\"DIR\",\n                      help=\"write test results in XML to directory DIR\")\n    parser.add_option(\"--exit-ok\", dest=\"exit_ok\", default=False,\n                      action=\"store_true\",\n                      help=\"exit without error code even on test failures\")\n    parser.add_option(\"--failfast\", dest=\"failfast\", default=False,\n                      action=\"store_true\",\n                      help=\"stop on first failure or error\")\n    parser.add_option(\"--root-dir\", dest=\"root_dir\", default=os.path.join(DISTDIR, 'tests'),\n                      help=(\"Directory to look for the file based \"\n                            \"tests (the ones which are deactivated with '--no-file'.\"))\n    parser.add_option(\"--examples-dir\", dest=\"examples_dir\",\n                      default=os.path.join(DISTDIR, 'docs', 'examples'),\n                      help=\"Directory to look for documentation example tests\")\n    parser.add_option(\"--work-dir\", dest=\"work_dir\", default=os.path.join(os.getcwd(), 'TEST_TMP'),\n                      help=\"working directory\")\n    parser.add_option(\"--cython-dir\", dest=\"cython_dir\", default=os.getcwd(),\n                      help=\"Cython installation directory (default: use local source version)\")\n    parser.add_option(\"--debug\", dest=\"for_debugging\", default=False, action=\"store_true\",\n                      help=\"configure for easier use with a debugger (e.g. gdb)\")\n    parser.add_option(\"--pyximport-py\", dest=\"pyximport_py\", default=False, action=\"store_true\",\n                      help=\"use pyximport to automatically compile imported .pyx and .py files\")\n    parser.add_option(\"--watermark\", dest=\"watermark\", default=None,\n                      help=\"deterministic generated by string\")\n    parser.add_option(\"--use_common_utility_dir\", default=False, action=\"store_true\")\n    parser.add_option(\"--use_formal_grammar\", default=False, action=\"store_true\")\n    parser.add_option(\"--test_determinism\", default=False, action=\"store_true\",\n                      help=\"test whether Cython's output is deterministic\")\n    parser.add_option(\"--pythran-dir\", dest=\"pythran_dir\", default=None,\n                      help=\"specify Pythran include directory. This will run the C++ tests using Pythran backend for Numpy\")\n    parser.add_option(\"--no-capture\", dest=\"capture\", default=True, action=\"store_false\",\n                      help=\"do not capture stdout, stderr in srctree tests. Makes pdb.set_trace interactive\")\n    parser.add_option(\"--limited-api\", dest=\"limited_api\", default=False, action=\"store_true\",\n                      help=\"Compiles Cython using CPython's LIMITED_API\")\n\n    options, cmd_args = parser.parse_args(args)\n\n    if options.with_cython:\n        sys.path.insert(0, options.cython_dir)\n\n    # requires glob with the wildcard.\n    if cmd_args:\n        options.code_style = False\n\n    WITH_CYTHON = options.with_cython\n\n    coverage = None\n    if options.coverage or options.coverage_xml or options.coverage_html:\n        if not WITH_CYTHON:\n            options.coverage = options.coverage_xml = options.coverage_html = False\n        elif options.shard_num == -1:\n            print(\"Enabling coverage analysis\")\n            from coverage import coverage as _coverage\n            coverage = _coverage(branch=True)\n            coverage.erase()\n            coverage.start()\n\n    if options.xml_output_dir:\n        shutil.rmtree(options.xml_output_dir, ignore_errors=True)\n\n    if options.listfile:\n        for listfile in options.listfile:\n            cmd_args.extend(load_listfile(listfile))\n\n    if options.capture and not options.for_debugging:\n        keep_alive_interval = 10\n    else:\n        keep_alive_interval = None\n    if options.shard_count > 1 and options.shard_num == -1:\n        if \"PYTHONIOENCODING\" not in os.environ:\n            # Make sure subprocesses can print() Unicode text.\n            os.environ[\"PYTHONIOENCODING\"] = sys.stdout.encoding or sys.getdefaultencoding()\n        import multiprocessing\n        pool = multiprocessing.Pool(options.shard_count)\n        tasks = [(options, cmd_args, shard_num) for shard_num in range(options.shard_count)]\n        open_shards = list(range(options.shard_count))\n        error_shards = []\n        failure_outputs = []\n        # NOTE: create process pool before time stamper thread to avoid forking issues.\n        total_time = time.time()\n        stats = Stats()\n        merged_pipeline_stats = defaultdict(lambda: (0, 0))\n        with time_stamper_thread(interval=keep_alive_interval, open_shards=open_shards):\n            for shard_num, shard_stats, pipeline_stats, return_code, failure_output in pool.imap_unordered(runtests_callback, tasks):\n                open_shards.remove(shard_num)\n                if return_code != 0:\n                    error_shards.append(shard_num)\n                    failure_outputs.append(failure_output)\n                    sys.stderr.write(\"FAILED (%s/%s)\\n\" % (shard_num, options.shard_count))\n                sys.stderr.write(\"ALL DONE (%s/%s)\\n\" % (shard_num, options.shard_count))\n\n                stats.update(shard_stats)\n                for stage_name, (stage_time, stage_count) in pipeline_stats.items():\n                    old_time, old_count = merged_pipeline_stats[stage_name]\n                    merged_pipeline_stats[stage_name] = (old_time + stage_time, old_count + stage_count)\n\n        pool.close()\n        pool.join()\n        pool.terminate()  # graalpy seems happier if we terminate now rather than leaving it to the gc\n\n        total_time = time.time() - total_time\n        sys.stderr.write(\"Sharded tests run in %d seconds (%.1f minutes)\\n\" % (round(total_time), total_time / 60.))\n        if error_shards:\n            sys.stderr.write(\"Errors found in shards %s\\n\" % \", \".join([str(e) for e in error_shards]))\n            for failure_output in zip(error_shards, failure_outputs):\n                sys.stderr.write(\"\\nErrors from shard %s:\\n%s\" % failure_output)\n            return_code = 1\n        else:\n            return_code = 0\n    else:\n        with time_stamper_thread(interval=keep_alive_interval):\n            _, stats, merged_pipeline_stats, return_code, _ = runtests(options, cmd_args, coverage)\n\n    if coverage:\n        if options.shard_count > 1 and options.shard_num == -1:\n            coverage.combine()\n        coverage.stop()\n\n    def as_msecs(t, unit=1000000):\n        # pipeline times are in msecs\n        return t // unit + float(t % unit) / unit\n\n    pipeline_stats = [\n        (as_msecs(stage_time), as_msecs(stage_time) / stage_count, stage_count, stage_name)\n        for stage_name, (stage_time, stage_count) in merged_pipeline_stats.items()\n    ]\n    total_pipeline_time_percent = math.fsum(stats[0] for stats in pipeline_stats) / 100.0\n    pipeline_stats.sort(reverse=True)\n    sys.stderr.write(\"Most expensive pipeline stages: %s\\n\" % \", \".join(\n        \"%r: %.2f / %d (%.3f / run, %.1f%%)\" % (\n            stage_name, total_stage_time, stage_count, stage_time, total_stage_time / total_pipeline_time_percent)\n        for total_stage_time, stage_time, stage_count, stage_name in pipeline_stats[:10]\n    ))\n\n    stats.print_stats(sys.stderr)\n\n    if coverage:\n        save_coverage(coverage, options)\n\n    sys.stderr.write(\"ALL DONE\\n\")\n    sys.stderr.flush()\n\n    try:\n        check_thread_termination(ignore_seen=False)\n    except PendingThreadsError:\n        # normal program exit won't kill the threads, do it the hard way here\n        flush_and_terminate(return_code)\n    else:\n        sys.exit(return_code)\n\n\n@contextmanager\ndef time_stamper_thread(interval=10, open_shards=None):\n    \"\"\"\n    Print regular time stamps into the build logs to find slow tests.\n    @param interval: time interval in seconds\n    \"\"\"\n    if not interval or interval < 0:\n        # Do nothing\n        yield\n        return\n\n    import threading\n    import datetime\n    from time import sleep\n\n    interval = range(interval * 4)\n    now = datetime.datetime.now\n    stop = False\n\n    # We capture stderr in some places.\n    # => make sure we write to the real (original) stderr of the test runner.\n    stderr = os.dup(2)\n    def write(s):\n        os.write(stderr, s if type(s) is bytes else s.encode('ascii'))\n\n    def time_stamper():\n        waiting_for_shards = \"\"\n        while True:\n            if stop:\n                return\n            for _ in interval:\n                sleep(1./4)\n                if stop:\n                    return\n            if open_shards is not None:\n                waiting_for_shards = f\" - waiting for {open_shards}\"\n            write(f'\\n#### {now()}{waiting_for_shards}\\n')\n\n    thread = threading.Thread(target=time_stamper, name='time_stamper')\n    thread.daemon = True\n    thread.start()\n    try:\n        yield\n    finally:\n        stop = True\n        thread.join()\n        os.close(stderr)\n\n\ndef configure_cython(options):\n    global CompilationOptions, pyrex_default_options, cython_compile\n    from Cython.Compiler.Options import \\\n        CompilationOptions, \\\n        default_options as pyrex_default_options\n    from Cython.Compiler.Options import _directive_defaults as directive_defaults\n\n    from Cython.Compiler import Errors\n    Errors.LEVEL = 0  # show all warnings\n\n    from Cython.Compiler import Options\n    Options.generate_cleanup_code = 3  # complete cleanup code\n\n    from Cython.Compiler import DebugFlags\n    DebugFlags.debug_temp_code_comments = 1\n    DebugFlags.debug_no_exception_intercept = 1  # provide better crash output in CI runs\n\n    pyrex_default_options['formal_grammar'] = options.use_formal_grammar\n    if options.profile:\n        directive_defaults['profile'] = True\n    if options.watermark:\n        import Cython.Compiler.Version\n        Cython.Compiler.Version.watermark = options.watermark\n\n\ndef save_coverage(coverage, options):\n    if options.coverage:\n        coverage.report(show_missing=0)\n    if options.coverage_xml:\n        coverage.xml_report(outfile=\"coverage-report.xml\")\n    if options.coverage_html:\n        coverage.html_report(directory=\"coverage-report-html\")\n\n\ndef runtests_callback(args):\n    options, cmd_args, shard_num = args\n    options.shard_num = shard_num\n\n    # Make the shard number visible in faulthandler stack traces in the case of process crashes.\n    try:\n        runtests.__code__ = runtests.__code__.replace(co_name=f\"runtests_SHARD_{shard_num}\")\n    except (AttributeError, TypeError):\n        # No .replace() in Py3.7, 'co_name' might not be replacible, whatever.\n        pass\n\n    return runtests(options, cmd_args)\n\n\ndef runtests(options, cmd_args, coverage=None):\n    # faulthandler should be able to provide a limited traceback\n    # in the event of a segmentation fault. Only available on Python 3.3+\n    try:\n        import faulthandler\n    except ImportError:\n        pass  # OK - not essential\n    else:\n        faulthandler.enable()\n\n    WITH_CYTHON = options.with_cython\n    ROOTDIR = os.path.abspath(options.root_dir)\n    WORKDIR = os.path.abspath(options.work_dir)\n\n    if WITH_CYTHON:\n        configure_cython(options)\n\n    xml_output_dir = options.xml_output_dir\n    if options.shard_num > -1:\n        WORKDIR = os.path.join(WORKDIR, str(options.shard_num))\n        if xml_output_dir:\n            xml_output_dir = os.path.join(xml_output_dir, 'shard-%03d' % options.shard_num)\n\n    # RUN ALL TESTS!\n    UNITTEST_MODULE = \"Cython\"\n    UNITTEST_ROOT = os.path.join(os.path.dirname(__file__), UNITTEST_MODULE)\n    if WITH_CYTHON:\n        if os.path.exists(WORKDIR):\n            for path in os.listdir(WORKDIR):\n                if path in (\"support\", \"Cy3\"): continue\n                shutil.rmtree(os.path.join(WORKDIR, path), ignore_errors=True)\n    if not os.path.exists(WORKDIR):\n        os.makedirs(WORKDIR)\n\n    if options.shard_num <= 0:\n        sys.stderr.write(\"Python %s\\n\" % sys.version)\n        sys.stderr.write(\"\\n\")\n        if WITH_CYTHON:\n            sys.stderr.write(\"Running tests against Cython %s\\n\" % get_version())\n        else:\n            sys.stderr.write(\"Running tests without Cython.\\n\")\n\n    if options.for_debugging:\n        options.cleanup_workdir = False\n        options.cleanup_sharedlibs = False\n        options.fork = False\n        if WITH_CYTHON and include_debugger:\n            from Cython.Compiler.Options import default_options as compiler_default_options\n            compiler_default_options['gdb_debug'] = True\n            compiler_default_options['output_dir'] = os.getcwd()\n\n    if IS_PYPY:\n        if options.with_refnanny:\n            sys.stderr.write(\"Disabling refnanny in PyPy\\n\")\n            options.with_refnanny = False\n\n    refnanny = None\n    if options.with_refnanny:\n        try:\n            refnanny = import_refnanny()\n        except ImportError:\n            from pyximport.pyxbuild import pyx_to_dll\n            libpath = pyx_to_dll(os.path.join(\"Cython\", \"Runtime\", \"refnanny.pyx\"),\n                                build_in_temp=True,\n                                pyxbuild_dir=os.path.join(WORKDIR, \"support\"))\n            sys.path.insert(0, os.path.split(libpath)[0])\n            refnanny = import_refnanny()\n        CDEFS.append(('CYTHON_REFNANNY', '1'))\n\n    if options.limited_api:\n        CDEFS.append(('CYTHON_LIMITED_API', '1'))\n        CDEFS.append((\"Py_LIMITED_API\", '(PY_VERSION_HEX & 0xffff0000)'))\n        CFLAGS.append('-Wno-unused-function')\n\n    if xml_output_dir and options.fork:\n        # doesn't currently work together\n        sys.stderr.write(\"Disabling forked testing to support XML test output\\n\")\n        options.fork = False\n\n    if WITH_CYTHON:\n        sys.stderr.write(\"Using Cython language level %d.\\n\" % options.language_level)\n\n    test_bugs = False\n    if options.tickets:\n        for ticket_number in options.tickets:\n            test_bugs = True\n            cmd_args.append('ticket:%s' % ticket_number)\n    if not test_bugs:\n        for selector in cmd_args:\n            if selector.startswith('bugs'):\n                test_bugs = True\n\n    selectors = [ string_selector(r) for r in cmd_args ]\n    verbose_excludes = selectors or options.verbosity >= 2\n    if not selectors:\n        selectors = [ lambda x, tags=None: True ]\n\n    # Check which external modules are not present and exclude tests\n    # which depends on them (by prefix)\n\n    missing_dep_excluder = MissingDependencyExcluder(EXT_DEP_MODULES)\n    version_dep_excluder = VersionDependencyExcluder(VER_DEP_MODULES)\n    exclude_selectors = [missing_dep_excluder, version_dep_excluder] # want to print msg at exit\n\n    try:\n        import IPython.core.release\n        if list(IPython.core.release._ver) < [1, 0, 0]:\n            raise ImportError\n    except (ImportError, AttributeError, TypeError):\n        exclude_selectors.append(RegExSelector('IPython'))\n\n    try:\n        raise ImportError(\"Jedi typer is currently broken, see GH#1845\")\n        import jedi\n        if not ([0, 9] <= list(map(int, re.findall('[0-9]+', jedi.__version__ or '0')))):\n            raise ImportError\n    except (ImportError, AttributeError, TypeError):\n        exclude_selectors.append(RegExSelector('Jedi'))\n\n    if options.exclude:\n        exclude_selectors += [ string_selector(r) for r in options.exclude ]\n\n    if not COMPILER_HAS_INT128:\n        exclude_selectors += [RegExSelector('int128')]\n\n    if options.shard_num > -1:\n        exclude_selectors.append(ShardExcludeSelector(options.shard_num, options.shard_count))\n\n    if not test_bugs:\n        bug_files = [\n            ('bugs.txt', True),\n            ('pypy_bugs.txt', IS_PYPY),\n            ('pypy_crash_bugs.txt', IS_PYPY),\n            ('pypy_implementation_detail_bugs.txt', IS_PYPY),\n            ('graal_bugs.txt', IS_GRAAL),\n            ('limited_api_bugs.txt', options.limited_api),\n            ('limited_api_bugs_38.txt', options.limited_api and sys.version_info < (3, 9)),\n            ('windows_bugs.txt', sys.platform == 'win32'),\n            ('cygwin_bugs.txt', sys.platform == 'cygwin'),\n            ('windows_bugs_39.txt', sys.platform == 'win32' and sys.version_info[:2] == (3, 9)),\n        ]\n\n        exclude_selectors += [\n            FileListExcluder(os.path.join(ROOTDIR, bugs_file_name),\n                             verbose=verbose_excludes)\n            for bugs_file_name, condition in bug_files if condition\n        ]\n\n    if sys.version_info < (3, 11) and options.limited_api:\n        # exclude everything with memoryviews in since this is a big\n        # missing feature from the limited API in these versions\n        exclude_selectors += [\n            TagsSelector('tag', 'memoryview'),\n            FileListExcluder(os.path.join(ROOTDIR, \"memoryview_tests.txt\")),\n        ]\n\n    exclude_selectors += [TagsSelector('tag', tag) for tag, exclude in TAG_EXCLUDERS if exclude]\n\n    global COMPILER\n    if options.compiler:\n        COMPILER = options.compiler\n\n    selected_backends = [ name.strip() for name in options.backends.split(',') if name.strip() ]\n    backends = []\n    for backend in selected_backends:\n        if backend == 'c' and not options.use_c:\n            continue\n        elif backend == 'cpp' and not options.use_cpp:\n            continue\n        elif backend not in BACKENDS:\n            sys.stderr.write(\"Unknown backend requested: '%s' not one of [%s]\\n\" % (\n                backend, ','.join(BACKENDS)))\n            sys.exit(1)\n        backends.append(backend)\n    if options.shard_num <= 0:\n        sys.stderr.write(\"Backends: %s\\n\" % ','.join(backends))\n    languages = backends\n\n    if 'CI' in os.environ and sys.platform == 'darwin' and 'cpp' in languages:\n        bugs_file_name = 'macos_cpp_bugs.txt'\n        exclude_selectors += [\n            FileListExcluder(os.path.join(ROOTDIR, bugs_file_name),\n                             verbose=verbose_excludes)\n        ]\n\n    if options.use_common_utility_dir:\n        common_utility_dir = os.path.join(WORKDIR, 'utility_code')\n        if not os.path.exists(common_utility_dir):\n            os.makedirs(common_utility_dir)\n    else:\n        common_utility_dir = None\n\n    sys.stderr.write(\"\\n\")\n\n    test_suite = unittest.TestSuite()\n    stats = Stats()\n\n    if options.unittests:\n        collect_unittests(UNITTEST_ROOT, UNITTEST_MODULE + \".\", test_suite, selectors, exclude_selectors)\n\n    if options.doctests:\n        collect_doctests(UNITTEST_ROOT, UNITTEST_MODULE + \".\", test_suite, selectors, exclude_selectors)\n\n    if options.filetests and languages:\n        filetests = TestBuilder(ROOTDIR, WORKDIR, selectors, exclude_selectors,\n                                options, options.pyregr, languages, test_bugs,\n                                options.language_level, common_utility_dir,\n                                options.pythran_dir, add_embedded_test=True, stats=stats,\n                                add_cpp_locals_extra_tests=options.use_cpp_locals)\n        test_suite.addTest(filetests.build_suite())\n\n    if options.examples and languages:\n        examples_workdir = os.path.join(WORKDIR, 'examples')\n        language_level = 3\n        for subdirectory in glob.glob(os.path.join(options.examples_dir, \"*/\")):\n            filetests = TestBuilder(subdirectory, examples_workdir, selectors, exclude_selectors,\n                                    options, options.pyregr, languages, test_bugs,\n                                    language_level, common_utility_dir,\n                                    options.pythran_dir,\n                                    default_mode='compile', stats=stats, add_cython_import=True)\n            test_suite.addTest(filetests.build_suite())\n\n    if options.system_pyregr and languages:\n        sys_pyregr_dir = os.path.join(sys.prefix, 'lib', 'python'+sys.version[:3], 'test')\n        if not os.path.isdir(sys_pyregr_dir):\n            sys_pyregr_dir = os.path.join(os.path.dirname(sys.executable), 'Lib', 'test')  # source build\n        if os.path.isdir(sys_pyregr_dir):\n            filetests = TestBuilder(ROOTDIR, WORKDIR, selectors, exclude_selectors,\n                                    options, True, languages, test_bugs,\n                                    sys.version_info[0], common_utility_dir, stats=stats)\n            sys.stderr.write(\"Including CPython regression tests in %s\\n\" % sys_pyregr_dir)\n            test_suite.addTest(filetests.handle_directory(sys_pyregr_dir, 'pyregr'))\n\n    if options.code_style and options.shard_num <= 0:\n        try:\n            import pycodestyle\n        except ImportError:\n            # Hack to make the exclusion visible.\n            missing_dep_excluder.tests_missing_deps.append('TestCodeFormat')\n        else:\n            test_suite.addTest(TestCodeFormat(options.cython_dir))\n\n    if xml_output_dir:\n        from Cython.Tests.xmlrunner import XMLTestRunner\n        if not os.path.exists(xml_output_dir):\n            try:\n                os.makedirs(xml_output_dir)\n            except OSError:\n                pass  # concurrency issue?\n        test_runner = XMLTestRunner(output=xml_output_dir,\n                                    verbose=options.verbosity > 0)\n        if options.failfast:\n            sys.stderr.write(\"--failfast not supported with XML runner\\n\")\n    else:\n        text_runner_options = {}\n        if options.failfast:\n            text_runner_options['failfast'] = True\n        test_runner = unittest.TextTestRunner(verbosity=options.verbosity, **text_runner_options)\n\n    if options.pyximport_py:\n        from pyximport import pyximport\n        pyximport.install(pyimport=True, build_dir=os.path.join(WORKDIR, '_pyximport'),\n                          load_py_module_on_import_failure=True, inplace=True)\n\n    try:\n        gc.set_debug(gc.DEBUG_UNCOLLECTABLE)\n    except AttributeError:\n        pass  # not available on PyPy\n\n    enable_faulthandler = False\n    old_faulhandler_envvar = os.environ.get('PYTHONFAULTHANDLER')\n    try:\n        import faulthandler\n    except ImportError:\n        pass\n    else:\n        os.environ['PYTHONFAULTHANDLER'] = \"1\"\n        enable_faulthandler = not faulthandler.is_enabled()\n        if enable_faulthandler:\n            faulthandler.enable()\n\n    # Run the collected tests.\n    try:\n        if options.shard_num > -1:\n            thread_id = f\" (Thread ID 0x{threading.get_ident():x})\" if threading is not None else \"\"\n            sys.stderr.write(f\"Tests in shard ({options.shard_num}/{options.shard_count}) starting{thread_id}\\n\")\n        result = test_runner.run(test_suite)\n    except Exception as exc:\n        # Make sure we print exceptions also from shards.\n        if options.shard_num > -1:\n            sys.stderr.write(f\"Tests in shard ({options.shard_num}/{options.shard_count}) crashed: {exc}\\n\")\n        import traceback\n        traceback.print_exc()\n        raise\n    finally:\n        if enable_faulthandler:\n            faulthandler.disable()\n        if os.environ.get('PYTHONFAULTHANDLER') != old_faulhandler_envvar:\n            if old_faulhandler_envvar is None:\n                del os.environ['PYTHONFAULTHANDLER']\n            else:\n                os.environ['PYTHONFAULTHANDLER'] = old_faulhandler_envvar\n\n    if common_utility_dir and options.shard_num < 0 and options.cleanup_workdir:\n        shutil.rmtree(common_utility_dir)\n\n    from Cython.Compiler.Pipeline import get_timings\n    pipeline_stats = get_timings()\n\n    if missing_dep_excluder.tests_missing_deps:\n        sys.stderr.write(\"Following tests excluded because of missing dependencies on your system:\\n\")\n        for test in missing_dep_excluder.tests_missing_deps:\n            sys.stderr.write(\"   %s\\n\" % test)\n\n    if options.with_refnanny and refnanny is not None:\n        sys.stderr.write(\"\\n\".join([repr(x) for x in refnanny.reflog]))\n\n    result_code = 0 if options.exit_ok else not result.wasSuccessful()\n\n    if xml_output_dir:\n        failure_output = \"\"\n    else:\n        failure_output = \"\".join(collect_failure_output(result))\n\n    return options.shard_num, stats, pipeline_stats, result_code, failure_output\n\n\ndef collect_failure_output(result):\n    \"\"\"Extract test error/failure output from a TextTestResult.\"\"\"\n    failure_output = []\n    for flavour, errors in ((\"ERROR\", result.errors), (\"FAIL\", result.failures)):\n        for test, err in errors:\n            failure_output.append(\"%s\\n%s: %s\\n%s\\n%s\\n\" % (\n                result.separator1,\n                flavour, result.getDescription(test),\n                result.separator2,\n                err))\n    return failure_output\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except Exception:\n        traceback.print_exc()\n        try:\n            check_thread_termination(ignore_seen=False)\n        except PendingThreadsError:\n            # normal program exit won't kill the threads, do it the hard way here\n            flush_and_terminate(1)\n        sys.exit(1)\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.9111328125,
          "content": "[flake8]\nmax-complexity = 10\n\n[pycodestyle]\nexclude = .git,build,__pycache__,venv*,TEST*,tests/run/test*.py,Cython/Debugger/libpython.py\nmax-line-length = 150\nformat = pylint\n# See https://pycodestyle.pycqa.org/en/latest/intro.html#configuration\nselect =\n    E711, E713, E714, E501, W291, W292, E502, E703,\n    # indentation\n    E101, E111, E112, E113, E117\n    E121, E125, E129,\n    # E114, E115, E116, E122,\n    # whitespace\n    E211, E223, E224, E227, E228, E242, E261, E273, E274, E275,\n    # E201, E202, E203, E211, E265\n    # E303, E306,\n    W1, W2, W3\n#ignore = W, E\nignore =\n    W504,\n    # W504 line break after binary operator\n    S001,\n    # S001 found module formatter\n    E226,\n    # E226 missing whitespace around operator[run]\n\n[coverage:run]\nbranch = True\nparallel = True\nconcurrency = multiprocessing,thread\ninclude = Cython/*\nsource = Cython\nomit = Test*\n\n[metadata]\nlicense_files =\n    LICENSE.txt\n    COPYING.txt\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 13.1796875,
          "content": "#!/usr/bin/env python\ntry:\n    from setuptools import setup, Extension\nexcept ImportError:\n    from distutils.core import setup, Extension\nimport os\nimport stat\nimport subprocess\nimport sysconfig\nimport textwrap\nimport sys\n\nimport platform\nis_cpython = platform.python_implementation() == 'CPython'\n\n# this specifies which versions of python we support, pip >= 9 knows to skip\n# versions of packages which are not compatible with the running python\nPYTHON_REQUIRES = '>=3.8'\n\nif sys.platform == \"darwin\":\n    # Don't create resource files on OS X tar.\n    os.environ['COPY_EXTENDED_ATTRIBUTES_DISABLE'] = 'true'\n    os.environ['COPYFILE_DISABLE'] = 'true'\n\nsetup_args = {}\n\ndef add_command_class(name, cls):\n    cmdclasses = setup_args.get('cmdclass', {})\n    cmdclasses[name] = cls\n    setup_args['cmdclass'] = cmdclasses\n\nfrom distutils.command.sdist import sdist as sdist_orig\nclass sdist(sdist_orig):\n    def run(self):\n        self.force_manifest = 1\n        if (sys.platform != \"win32\" and\n            os.path.isdir('.git')):\n            assert os.system(\"git rev-parse --verify HEAD > .gitrev\") == 0\n        sdist_orig.run(self)\nadd_command_class('sdist', sdist)\n\npxd_include_dirs = [\n    directory for directory, dirs, files\n    in os.walk(os.path.join('Cython', 'Includes'))\n    if '__init__.pyx' in files or '__init__.pxd' in files\n    or directory == os.path.join('Cython', 'Includes')]\n\npxd_include_patterns = [\n    p+'/*.pxd' for p in pxd_include_dirs ] + [\n    p+'/*.pyx' for p in pxd_include_dirs ]\n\nsetup_args['package_data'] = {\n    'Cython.Plex'     : ['*.pxd'],\n    'Cython.Compiler' : ['*.pxd'],\n    'Cython.Runtime'  : ['*.pyx', '*.pxd'],\n    'Cython.Utility'  : ['*.pyx', '*.pxd', '*.c', '*.h', '*.cpp'],\n    'Cython'          : [ p[7:] for p in pxd_include_patterns ] + ['py.typed', '__init__.pyi', 'Shadow.pyi'],\n    'Cython.Debugger.Tests': ['codefile', 'cfuncs.c'],\n}\n\n# This dict is used for passing extra arguments that are setuptools\n# specific to setup\nsetuptools_extra_args = {}\n\nif 'setuptools' in sys.modules:\n    setuptools_extra_args['python_requires'] = PYTHON_REQUIRES\n    setuptools_extra_args['zip_safe'] = False\n    setuptools_extra_args['entry_points'] = {\n        'console_scripts': [\n            'cython = Cython.Compiler.Main:setuptools_main',\n            'cythonize = Cython.Build.Cythonize:main',\n            'cygdb = Cython.Debugger.Cygdb:main',\n        ]\n    }\n    scripts = []\nelse:\n    if os.name == \"posix\":\n        scripts = [\"bin/cython\", \"bin/cythonize\", \"bin/cygdb\"]\n    else:\n        scripts = [\"cython.py\", \"cythonize.py\", \"cygdb.py\"]\n\n\ndef compile_cython_modules(profile=False, coverage=False, compile_minimal=False, compile_more=False, cython_with_refnanny=False,\n                           cython_limited_api=False):\n    source_root = os.path.abspath(os.path.dirname(__file__))\n    compiled_modules = [\n        \"Cython.Plex.Actions\",\n        \"Cython.Plex.Scanners\",\n        \"Cython.Compiler.FlowControl\",\n        \"Cython.Compiler.LineTable\",\n        \"Cython.Compiler.Scanning\",\n        \"Cython.Compiler.Visitor\",\n        \"Cython.Runtime.refnanny\",\n    ]\n    if not compile_minimal:\n        compiled_modules.extend([\n            \"Cython.Plex.Machines\",\n            \"Cython.Plex.Transitions\",\n            \"Cython.Plex.DFA\",\n            \"Cython.Compiler.Code\",\n            \"Cython.Compiler.FusedNode\",\n            \"Cython.Compiler.Parsing\",\n            \"Cython.Tempita._tempita\",\n            \"Cython.StringIOTree\",\n            \"Cython.Utils\",\n        ])\n    if compile_more and not compile_minimal:\n        compiled_modules.extend([\n            \"Cython.Compiler.Lexicon\",\n            \"Cython.Compiler.Pythran\",\n            \"Cython.Build.Dependencies\",\n            \"Cython.Compiler.ParseTreeTransforms\",\n            \"Cython.Compiler.Nodes\",\n            \"Cython.Compiler.ExprNodes\",\n            \"Cython.Compiler.ModuleNode\",\n            \"Cython.Compiler.Optimize\",\n            ])\n\n    from shutil import which\n    from sysconfig import get_path\n    pgen = which(\n        'pgen', path=os.pathsep.join([os.environ['PATH'], os.path.join(get_path('include'), '..', 'Parser')]))\n    if not pgen:\n        sys.stderr.write(\"Unable to find pgen, not compiling formal grammar.\\n\")\n    else:\n        parser_dir = os.path.join(os.path.dirname(__file__), 'Cython', 'Parser')\n        grammar = os.path.join(parser_dir, 'Grammar')\n        subprocess.check_call([\n            pgen,\n            os.path.join(grammar),\n            os.path.join(parser_dir, 'graminit.h'),\n            os.path.join(parser_dir, 'graminit.c'),\n            ])\n        cst_pyx = os.path.join(parser_dir, 'ConcreteSyntaxTree.pyx')\n        if os.stat(grammar)[stat.ST_MTIME] > os.stat(cst_pyx)[stat.ST_MTIME]:\n            mtime = os.stat(grammar)[stat.ST_MTIME]\n            os.utime(cst_pyx, (mtime, mtime))\n        compiled_modules.extend([\n                \"Cython.Parser.ConcreteSyntaxTree\",\n            ])\n\n    defines = []\n    extra_extension_args = {}\n    if cython_limited_api:\n        defines += [\n            ('Py_LIMITED_API', '0x03070000'),\n        ]\n        extra_extension_args['py_limited_api'] = True\n\n    if sysconfig.get_config_var('Py_GIL_DISABLED') and platform.system() == \"Windows\":\n        defines.append(('Py_GIL_DISABLED', 1))\n\n    if cython_with_refnanny:\n        defines.append(('CYTHON_REFNANNY', '1'))\n    if coverage:\n        defines.append(('CYTHON_TRACE', '1'))\n\n    extensions = []\n    for module in compiled_modules:\n        source_file = os.path.join(source_root, *module.split('.'))\n        pyx_source_file = source_file + \".py\"\n        if not os.path.exists(pyx_source_file):\n            pyx_source_file += \"x\"  # .py -> .pyx\n\n        dep_files = []\n        if os.path.exists(source_file + '.pxd'):\n            dep_files.append(source_file + '.pxd')\n\n        # Note that refnanny does not currently support being build in the limited API.\n        # This should eventually change when cpython is cimportable.\n        extensions.append(Extension(\n            module, sources=[pyx_source_file],\n            define_macros=defines if '.refnanny' not in module else [],\n            depends=dep_files,\n            **(extra_extension_args if '.refnanny' not in module else {})))\n        # XXX hack around setuptools quirk for '*.pyx' sources\n        extensions[-1].sources[0] = pyx_source_file\n\n    # optimise build parallelism by starting with the largest modules\n    extensions.sort(key=lambda ext: os.path.getsize(ext.sources[0]), reverse=True)\n\n    from Cython.Distutils.build_ext import build_ext as cy_build_ext\n    build_ext = None\n    try:\n        # Use the setuptools build_ext in preference, because it\n        # gets limited api filenames right, and should inherit itself from\n        # Cython's own build_ext. But failing that, use the Cython build_ext\n        # directly.\n        from setuptools.command.build_ext import build_ext\n        if cy_build_ext not in build_ext.__mro__:\n            build_ext = cy_build_ext\n    except ImportError:\n        build_ext = cy_build_ext\n\n    from Cython.Compiler.Options import get_directive_defaults\n    get_directive_defaults().update(\n        language_level=3,\n        auto_pickle=False,\n        binding=False,\n        always_allow_keywords=False,\n        autotestdict=False,\n    )\n    if profile:\n        get_directive_defaults()['profile'] = True\n        sys.stderr.write(\"Enabled profiling for the Cython binary modules\\n\")\n    if coverage:\n        get_directive_defaults()['linetrace'] = True\n        sys.stderr.write(\"Enabled line tracing and profiling for the Cython binary modules\\n\")\n\n    # not using cythonize() directly to let distutils decide whether building extensions was requested\n    add_command_class(\"build_ext\", build_ext)\n    setup_args['ext_modules'] = extensions\n\n\ndef check_option(name):\n    cli_arg = \"--\" + name\n    if cli_arg in sys.argv:\n        sys.argv.remove(cli_arg)\n        return True\n\n    env_var = name.replace(\"-\", \"_\").upper()\n    if os.environ.get(env_var) == \"true\":\n        return True\n\n    return False\n\n\ncython_profile = check_option('cython-profile')\ncython_coverage = check_option('cython-coverage')\ncython_with_refnanny = check_option('cython-with-refnanny')\n\ncompile_cython_itself = not check_option('no-cython-compile')\nif compile_cython_itself:\n    cython_compile_more = check_option('cython-compile-all')\n    cython_compile_minimal = check_option('cython-compile-minimal')\n    cython_limited_api = check_option('cython-limited-api')\n    # TODO - enable this when refnanny can be compiled\n    if cython_limited_api and False:\n        setup_options = setup_args.setdefault('options', {})\n        bdist_wheel_options = setup_options.setdefault('bdist_wheel', {})\n        bdist_wheel_options['py_limited_api'] = 'cp37'\n\n\nsetup_args.update(setuptools_extra_args)\n\n\ndef dev_status(version: str):\n    if 'b' in version or 'c' in version:\n        # 1b1, 1beta1, 2rc1, ...\n        return 'Development Status :: 4 - Beta'\n    elif 'a' in version:\n        # 1a1, 1alpha1, ...\n        return 'Development Status :: 3 - Alpha'\n    else:\n        return 'Development Status :: 5 - Production/Stable'\n\n\npackages = [\n    'Cython',\n    'Cython.Build',\n    'Cython.Compiler',\n    'Cython.Runtime',\n    'Cython.Distutils',\n    'Cython.Debugger',\n    'Cython.Debugger.Tests',\n    'Cython.Plex',\n    'Cython.Tests',\n    'Cython.Build.Tests',\n    'Cython.Compiler.Tests',\n    'Cython.Utility',\n    'Cython.Tempita',\n    'pyximport',\n]\n\n\ndef run_build():\n    if compile_cython_itself and (is_cpython or cython_compile_more or cython_compile_minimal):\n        compile_cython_modules(cython_profile, cython_coverage, cython_compile_minimal, cython_compile_more, cython_with_refnanny,\n                               cython_limited_api)\n\n    from Cython import __version__ as version\n    setup(\n        name='Cython',\n        version=version,\n        url='https://cython.org/',\n        author='Robert Bradshaw, Stefan Behnel, David Woods, Greg Ewing, et al.',\n        author_email='cython-devel@python.org',\n        description=\"The Cython compiler for writing C extensions in the Python language.\",\n        long_description=textwrap.dedent(\"\"\"\\\n        The Cython language makes writing C extensions for the Python language as\n        easy as Python itself.  Cython is a source code translator based on Pyrex_,\n        but supports more cutting edge functionality and optimizations.\n\n        The Cython language is a superset of the Python language (almost all Python\n        code is also valid Cython code), but Cython additionally supports optional\n        static typing to natively call C functions, operate with C++ classes and\n        declare fast C types on variables and class attributes.  This allows the\n        compiler to generate very efficient C code from Cython code.\n\n        This makes Cython the ideal language for writing glue code for external\n        C/C++ libraries, and for fast C modules that speed up the execution of\n        Python code.\n\n        The newest Cython release can always be downloaded from https://cython.org/.\n        Unpack the tarball or zip file, enter the directory, and then run::\n\n            pip install .\n\n        Note that for one-time builds, e.g. for CI/testing, on platforms that are not\n        covered by one of the wheel packages provided on PyPI *and* the pure Python wheel\n        that we provide is not used, it is substantially faster than a full source build\n        to install an uncompiled (slower) version of Cython with::\n\n            NO_CYTHON_COMPILE=true pip install .\n\n        .. _Pyrex: https://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/\n        \"\"\"),\n        license='Apache-2.0',\n        classifiers=[\n            dev_status(version),\n            \"Intended Audience :: Developers\",\n            \"License :: OSI Approved :: Apache Software License\",\n            \"Operating System :: OS Independent\",\n            \"Programming Language :: Python\",\n            \"Programming Language :: Python :: 3\",\n            \"Programming Language :: Python :: 3.7\",\n            \"Programming Language :: Python :: 3.8\",\n            \"Programming Language :: Python :: 3.9\",\n            \"Programming Language :: Python :: 3.10\",\n            \"Programming Language :: Python :: 3.11\",\n            \"Programming Language :: Python :: 3.12\",\n            \"Programming Language :: Python :: 3.13\",\n            \"Programming Language :: Python :: Implementation :: CPython\",\n            \"Programming Language :: Python :: Implementation :: PyPy\",\n            \"Programming Language :: Python :: Implementation :: Stackless\",\n            \"Programming Language :: C\",\n            \"Programming Language :: C++\",\n            \"Programming Language :: Cython\",\n            \"Topic :: Software Development :: Code Generators\",\n            \"Topic :: Software Development :: Compilers\",\n            \"Topic :: Software Development :: Libraries :: Python Modules\",\n            \"Typing :: Typed\"\n        ],\n        project_urls={\n            \"Documentation\": \"https://cython.readthedocs.io/\",\n            \"Donate\": \"https://cython.readthedocs.io/en/latest/src/donating.html\",\n            \"Source Code\": \"https://github.com/cython/cython\",\n            \"Bug Tracker\": \"https://github.com/cython/cython/issues\",\n            \"User Group\": \"https://groups.google.com/g/cython-users\",\n        },\n\n        scripts=scripts,\n        packages=packages,\n        py_modules=[\"cython\"],\n        **setup_args\n    )\n\n\nif __name__ == '__main__':\n    run_build()\n"
        },
        {
          "name": "test-requirements-312.txt",
          "type": "blob",
          "size": 0.0390625,
          "content": "numpy<2\ncoverage\npycodestyle\nsetuptools\n"
        },
        {
          "name": "test-requirements-313.txt",
          "type": "blob",
          "size": 0.0205078125,
          "content": "interpreters-pep-734\n"
        },
        {
          "name": "test-requirements-cpython.txt",
          "type": "blob",
          "size": 0.140625,
          "content": "ipython\npytest  # needed by IPython/Jupyter integration tests\nline_profiler<4  # currently 4 appears to collect no profiling info\nsetuptools<60\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.0419921875,
          "content": "numpy<2\ncoverage\npycodestyle\nsetuptools<60\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.375,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py37, py38, py39, py310, py311, py312, pypy3\n\n[testenv]\nsetenv = CFLAGS=-O0 -ggdb\ncommands =\n    {envpython} runtests.py -vv\n"
        }
      ]
    }
  ]
}