{
  "metadata": {
    "timestamp": 1736560561668,
    "page": 172,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vaexio/vaex",
      "stars": 8319,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0361328125,
          "content": "misc/web/js/* linguist-vendored=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7080078125,
          "content": "*.o\n*.so\n*.mkv\n*.mk4\n#/*.png\n*.eps\n*.pgm\n*.pdf\n*.fld\n*.vtk\n*.mp4\n*/**/*.pyc\n*.pyc\njenkins/jenkins.war\n/nosetests.xml\n/.idea\nmisc/experiments/\n/.coverage\n/coverage.xml\n\n/docs/source/example_start.rst\n/docs/source/example_virtual_columns.rst\n\nUntitled*.ipynb\n\n/experiments/*\n/htmlcov\n\nInterestingSubspacesNew.txt\nMakefile.in\nconfig.guess\nconfig.sub\nlibtool\nltmain.sh\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\naclocal.m4\nautom4te.cache\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfigure\ndepcomp\ninstall-sh\nmissing\nsrc/.deps/\nsrc/.libs\nsrc/Makefile\nsrc/Makefile.in\nsrc/libsubfind.a\nsubspacefind*.tar.gz\nsrc/subspacefind?la*\n**/*.pyc\ndata/*\nbuild/\ndoc\ndocs/build\nmeeting\n#misc\n/**/.DS_Store\n/**/.ipynb_checkpoints\napp\ndist\npython/.idea\ntest/.idea\nvenv\n.venv\ntmp\npython/vaex/version.py # gets generated\n**/*.egg-info/\n.eggs/\nbin/.idea\n*.npy\n**/__pycache__/*\ncatboost_info/\n.vscode\n\n# symlinks generated in setup.py\npackages/vaex-core/vaex/astro\npackages/vaex-core/vaex/contrib\npackages/vaex-core/vaex/distributed\npackages/vaex-core/vaex/graphql\npackages/vaex-core/vaex/hdf5\npackages/vaex-core/vaex/jupyter\npackages/vaex-core/vaex/meta\npackages/vaex-core/vaex/ml\npackages/vaex-core/vaex/plotly\npackages/vaex-core/vaex/server\npackages/vaex-core/vaex/ui\npackages/vaex-core/vaex/viz\npackages/vaex-core/vaex/*.*-win_amd64.pyd\n\n# generated for testing\npackages/vaex-ml/vaex/ml/spec_new.json\n\n# ASV environment, results database (JSON) and generated HTML static files\n.asv/\n\n# output file from the docs\ndocs/source/data/io/output*\n\n# Ignore the IO example source files that by-products of running the script\ndocs/source/data/io/sample_*.hdf5\ndocs/source/data/io/sample_*.yaml\n\n# Ignore the docs state files\ndocs/source/iris_model.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.5830078125,
          "content": "[submodule \"packages/vaex-core/vendor/pybind11\"]\n\tpath = packages/vaex-core/vendor/pybind11\n\turl = https://github.com/pybind/pybind11\n[submodule \"packages/vaex-core/vendor/string-view-lite\"]\n\tpath = packages/vaex-core/vendor/string-view-lite\n\turl = https://github.com/martinmoene/string-view-lite\n[submodule \"packages/vaex-core/vendor/hopscotch-map\"]\n\tpath = packages/vaex-core/vendor/hopscotch-map\n\turl = https://github.com/vaexio/hopscotch-map\n[submodule \"packages/vaex-core/vendor/flat_hash_map\"]\n\tpath = packages/vaex-core/vendor/flat_hash_map\n\turl = https://github.com/skarupke/flat_hash_map\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.8359375,
          "content": "---\n# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Build documentation with MkDocs\n#mkdocs:\n#  configuration: mkdocs.yml\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\n# Pull submodules\nsubmodules:\n  include: all\n  recursive: true\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n  - method: pip\n    path: .\n    extra_requirements:\n      - ci\n"
        },
        {
          "name": ".releash.py",
          "type": "blob",
          "size": 3.296875,
          "content": "from releash import *\n# these objects only tag when they are exe\ngitpush = ReleaseTargetGitPush()\n\n# core package\ncore = add_package(\"packages/vaex-core\", \"vaex-core\")\nversion_core = VersionSource(core, '{path}/vaex/core/_version.py')\ngittag_core = ReleaseTargetGitTagVersion(version_source=version_core, prefix='core-v')\n\ncore.version_source = version_core\ncore.version_targets.append(VersionTarget(core, '{path}/vaex/core/_version.py'))\ncore.version_targets.append(VersionTargetReplace(core, [\n    'packages/vaex/setup.py',\n]))\n\n\ndef add_version_replace(package):\n    # for pre-releases we always bump all requirements that are exact matches\n    if not package.version_source.semver['prerelease']:\n        return\n    if any(k in package.version_source.semver['prerelease'] for k in \"dev alpha beta rc\"):\n        package.version_targets.append(VersionTargetReplace(package, [\n            'packages/vaex-arrow/setup.py',\n            'packages/vaex-graphql/setup.py',\n            'packages/vaex-hdf5/setup.py',\n            'packages/vaex-jupyter/setup.py',\n            'packages/vaex-ml/setup.py',\n            'packages/vaex-server/setup.py',\n            'packages/vaex-viz/setup.py',\n            'packages/vaex-contrib/setup.py',\n        ], pattern='{name}(?P<cmp>[^0-9]*)' + str(package.version_source), ))\ndef add_meta_version_replace(package):\n    # always bump the meta package\n    package.version_targets.append(VersionTargetReplace(package, [\n        'packages/vaex/setup.py',\n    ], pattern='{name}(?P<cmp>[^0-9]*)' + str(package.version_source), ))\n\nadd_version_replace(core)\nadd_meta_version_replace(core)\n\ncore.tag_targets.append(gittag_core)\ncore.release_targets.append(ReleaseTargetSourceDist(core))\n#core.release_targets.append(gitpush)\ncore.release_targets.append(ReleaseTargetCondaForge(core, '../feedstocks/vaex-core-feedstock'))\n\npackages = ['vaex-core', 'vaex', 'vaex-viz', 'vaex-hdf5', 'vaex-server', 'vaex-astro', 'vaex-jupyter', 'vaex-ml', 'vaex-graphql', 'vaex-contrib']\nnames = [k[5:] for k in packages[1:]]\n\nfor name in names:\n    if name == '':\n        name = 'meta'\n    if name == 'meta':\n        package = add_package(\"packages/vaex\", \"vaex-\" +name, 'vaex.' + name, distribution_name='vaex')\n        version = VersionSource(package, '{path}/vaex/' +name +'/_version.py')\n    else:\n        package = add_package(\"packages/vaex-\" + name, \"vaex-\" +name, 'vaex.' + name)\n        version = VersionSource(package, '{path}/vaex/' +name +'/_version.py')\n    gittag = ReleaseTargetGitTagVersion(version_source=version, prefix=name + '-v', msg='Release {version} of vaex-' +name)\n    package.version_source = version\n    package.version_targets.append(VersionTarget(package, '{path}/vaex/' + name + '/_version.py'))\n    add_version_replace(package)\n    add_meta_version_replace(package)\n    # it is ok to add this twice, it will only tag once\n    package.tag_targets.append(gittag)\n    package.release_targets.append(ReleaseTargetSourceDist(package))\n    # also ok to add twice, it will only execute for the last package\n    package.release_targets.append(gitpush)\n    #if name in ['hdf5', 'viz']:\n    if name == 'meta':\n        package.release_targets.append(ReleaseTargetCondaForge(package, '../feedstocks/vaex' + '-feedstock'))\n    else:\n        package.release_targets.append(ReleaseTargetCondaForge(package, '../feedstocks/vaex-' + name + '-feedstock'))\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7587890625,
          "content": "language: c\ndist: trusty\nos:\n - linux\n - osx\nenv:\n matrix:\n  - PYTHON_VERSION=3.6\n  - PYTHON_VERSION=3.7\n\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n    packages:\n      - gcc-4.9\n      - g++-4.9\n\nbefore_install:\n  - echo $TRAVIS_TAG\n  - ulimit -S -n 1024\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n      brew install libomp;\n    fi\n  - ./ci/01-setup-conda.sh\n  - export PATH=\"$HOME/miniconda/bin:$PATH\"\n  - ./ci/02-create-vaex-dev-env.sh $PYTHON_VERSION\n  - source activate vaex-dev\n  - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then\n      conda install gxx_linux-64 -y;\n    fi\n  - source activate vaex-dev\ninstall:\n  - ./ci/03-install-vaex.sh\nscript:\n  - ./ci/04-run-test-suite.sh\n  # do to TLS issue, we don't run it on travis\n  # - ./ci/05-run-notebooks.sh\n"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 0.01953125,
          "content": "Maarten A. Breddels\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 40.72265625,
          "content": "# vaex 4.15.0\n\n## vaex-core 4.15.0\n\n   * Fixes\n      * allow single columns or expressions in materialize [#2249](https://github.com/vaexio/vaex/pull/2249)\n      * arrow data used in selection would ignore null values or fail [#2196](https://github.com/vaexio/vaex/pull/2196)\n      * build expressions / filters with an arrow string scalar [#2244](https://github.com/vaexio/vaex/pull/2244)\n      * selection-dropna did not work with non-identifier expresssion [#2208](https://github.com/vaexio/vaex/pull/2208)\n      * use `vaex.settings` for thread counts [#2231](https://github.com/vaexio/vaex/pull/2231)\n      * raise an informative exception when `extract` can not run [#2232](https://github.com/vaexio/vaex/pull/2232)\n\n   * Performance\n      * Import and version checking improvements [#2226](https://github.com/vaexio/vaex/pull/2226)\n\n## vaex-hdf5 0.14.0\n\n   * Features\n      * store arrow arrays in hdf5 using null bitmasks [#2245](https://github.com/vaexio/vaex/pull/2245)\n\n# vaex 4.14.0\n\n## vaex-core 4.14.0\n\n   * Features\n      * Add support for the arrow export CSV backend in `export_many` [#2220](https://github.com/vaexio/vaex/pull/2220)\n      * Auto detect type when Lazy CSV reading [#2224](https://github.com/vaexio/vaex/pull/2224)\n\n   * Fixes\n      * convert options for lazy `from_csv_arrow` [#2218](https://github.com/vaexio/vaex/pull/2218)\n      * support arrow datasets containing multiple fragments without row groups [#2221](https://github.com/vaexio/vaex/pull/2221)\n      * Interchange protocol fixes and updates [#2150](https://github.com/vaexio/vaex/pull/2150)\n\n# vaex 4.13.0\n\n## vaex-core 4.13.0\n\n   * Features\n      * Out of core (lazy) and normal CSV support using Apache Arrow CSV reader  [#1028](https://github.com/vaexio/vaex/pull/1028)\n      * Support compressed csv reading for pandas and arrow  [#1028](https://github.com/vaexio/vaex/pull/1028)\n      * Expose vaex.DataFrame and vaex.Expression for typing [#2186](https://github.com/vaexio/vaex/pull/2186)\n\n   * Fixes\n      * Negative indexing of a filtered dataframe [#2163](https://github.com/vaexio/vaex/pull/2163)\n      * nunique aggregator for numeric with selection gave wrong results [#2199](https://github.com/vaexio/vaex/pull/2199)\n      * vaex.from_arrow_dataset had no working implementation [#2195](https://github.com/vaexio/vaex/pull/2195)\n\n\n## vaex-hdf5 0.13.0\n\n   Requires vaex-core 4.13.0 for refactor of dataset\n\n\n## vaex-viz 0.5.4\n\n   * Fixes\n      *  correctly place the colorbar for matplotlib 3.6.0 [#2215](https://github.com/vaexio/vaex/pull/2215)\n\n\n## vaex-astro 0.9.2\n\n   * Fixes\n      * Typo in eq2gal [#2206](https://github.com/vaexio/vaex/pull/2206)\n\n\n\n\n# vaex 4.12.0\n\n## vaex-core 4.12.0\n\n   * Features\n      * get_column_names accepts a dtypes argument [#2160](https://github.com/vaexio/vaex/pull/2160)\n   * Fixes\n      * df.extract() was not thread safe [#2182](https://github.com/vaexio/vaex/pull/2182)\n      * uuid4 function was not always restored properly [#2181](https://github.com/vaexio/vaex/pull/2181)\n      * groupby could overflow due to wrong downcasting [#2137](https://github.com/vaexio/vaex/pull/2137)\n      * support unique with selection=True [#2164](https://github.com/vaexio/vaex/pull/2164)\n      * value_counts for strings was sometimes off [#2147](https://github.com/vaexio/vaex/pull/2147)\n      * better arrow support for interchanging categorical columns  [#2135](https://github.com/vaexio/vaex/pull/2135)\n\n## vaex-viz 0.5.3\n  * Fixes\n      * Improve selection behaviour for histogram and update docstrings [#2143](https://github.com/vaexio/vaex/pull/2143)\n\n# vaex 4.11.1\n\n## vaex-core 4.11.1\n\n   * Fix\n      * Slicing of empty dataframe [#2129](https://github.com/vaexio/vaex/issues/2129)\n      * Dataframe interchange protocol: Better support for numpy backed categoricals [#2133](https://github.com/vaexio/vaex/issues/2133)\n      * Dataframe interchange protocol: Column.null_count returns NA count to comply with spec [#2132](https://github.com/vaexio/vaex/issues/2132)\n      * Export csv with 'protected' column name [#2117](https://github.com/vaexio/vaex/issues/2117)\n\n# vaex 4.11.0\n\n## vaex-core 4.11.0\n\n   * Fix\n      * df.func.where relies more on pyarrow 5's if_else [#2096](https://github.com/vaexio/vaex/issues/2096)\n      * correct $VAEX_PATH_HOME -> $VAEX_PATH [#2101](https://github.com/vaexio/vaex/issues/2101)\n      * Various join fixed when the missing values were present [#808](https://github.com/vaexio/vaex/issues/808)\n      * Various join fixed when the missing values were present [#808](https://github.com/vaexio/vaex/issues/808)\n      * string join on large_list with large_strings. [#2112](https://github.com/vaexio/vaex/issues/2112)\n      * Working arm wheel for osx (#) [#2124](https://github.com/vaexio/vaex/issues/2124)\n   * Performance\n      * Do not let arrow validate the dict encoded data. [d6242090a1f480abae669bc5281e803fe06c5d36](https://github.com/vaexio/vaex/commit/d6242090a1f480abae669bc5281e803fe06c5d36)\n   * Feature\n      * Add how to dropna, dropinf etc [#2104](https://github.com/vaexio/vaex/issues/2104)\n\n\n## vaex-hdf5 0.12.3\n\n   * Performance\n      * Do not let arrow validate the dict encoded data. [d6242090a1f480abae669bc5281e803fe06c5d36](https://github.com/vaexio/vaex/commit/d6242090a1f480abae669bc5281e803fe06c5d36)\n\n\n\n# vaex 4.10\n\n## vaex-core 4.10.0\n\n   * Fix\n      * Join issue with missing values or nans [#2077](https://github.com/vaexio/vaex/issues/2077)\n   * Feature\n      * vaex.agg.describe aggregator, and descripe on groupby [#2004](https://github.com/vaexio/vaex/pull/2004)\n      * df.struct.flatten to turn arrow structs into multiple columns [#2072](https://github.com/vaexio/vaex/pull/2072)\n      * Reuse hashmap for isin (df fingerprint is stable, better for cache) [#2089](https://github.com/vaexio/vaex/pull/2089)\n   * Performance\n      * Value_counts uses a task to get caching support [#2085](https://github.com/vaexio/vaex/pull/2085).\n\n\n## vaex-ml 0.18.0\n\n   * Features\n      * Enable selections in metrics [#2073](https://github.com/vaexio/vaex/pull/2073)\n\n# vaex 4.9.2\n\n## vaex-core 4.9.2\n   * Fix\n      * Write to cached filesystem when metadata argument is needed [#1993](https://github.com/vaexio/vaex/pull/1993)\n      * Multi-d sparse groupby would fail for arrow data (e.g. list agg) [#2031](https://github.com/vaexio/vaex/pull/2031)\n      * Exporting arrow with large_string would result in schema conflict [#2030](https://github.com/vaexio/vaex/pull/2030)\n      * expression engine did not roundtrip dict correctly, missing \", \" [#2039](https://github.com/vaexio/vaex/pull/2039)\n      * Changed deprecated numpy.float to numpy.float64 [#2023](https://github.com/vaexio/vaex/pull/2023)\n      * Replace pylab with pyplot [#2047](https://github.com/vaexio/vaex/pull/2047)\n      * isin should accept empty array or non-existing values [#2064](https://github.com/vaexio/vaex/pull/2064)\n      * Ordinal_encode with values which extra entries gave wrong results [#2059](https://github.com/vaexio/vaex/pull/2059)\n      * Combining filters with arrow arrays failed converting (gave TypeError) [#2038](https://github.com/vaexio/vaex/issues/2038)\n      * Wrong order of casting and subtracting offset cause overflow [#2065](https://github.com/vaexio/vaex/pull/2065)\n\n## vaex-hdf5 0.12.2\n   * Fix\n      * Do not keep a reference to numpy arrays on closing an hdf5 file [2066](https://github.com/vaexio/vaex/pull/2066)\n\n# vaex 4.9.1\n\n## vaex-core 4.9.1\n   * Fix\n      * When aggregation leads to arrow data, non-dense binners failed (e.g. vaex.agg.list) [#2017](https://github.com/vaexio/vaex/pull/2017)\n      * Filtering by boolean column would miss the column as dependency [#2016](https://github.com/vaexio/vaex/pull/2016)\n\n# vaex 4.9.0\n\n## vaex-core 4.9.0\n   * Features\n      * Progress bar for percentile_approx and median_approx [#1889](https://github.com/vaexio/vaex/pull/1889)\n      * Better casting of strings to datetime [#1920](https://github.com/vaexio/vaex/pull/1920)\n      * We better support numpy scalars now, and more arrow time units. [#1921](https://github.com/vaexio/vaex/pull/1921)\n      * Allow sorting by strings, multiple columns and multiple directions [#1963](https://github.com/vaexio/vaex/pull/1963)\n      * Support JSON in df.export [#1974](https://github.com/vaexio/vaex/pull/1974)\n      * New/better aggregators\n        * first/last use different type 'sort column. [#1848](https://github.com/vaexio/vaex/pull/1848)\n        * Skew and kurtosis [#1946](https://github.com/vaexio/vaex/pull/1946)\n        * List aggregator [#1987](https://github.com/vaexio/vaex/pull/1987)\n      * Pre-sort by the grouping columns in df.groupby (better performance) [#1990](https://github.com/vaexio/vaex/pull/1990)\n   * Performance\n      * No copy of hashmap and GIL release [#1893](https://github.com/vaexio/vaex/pull/1893) [#1961](https://github.com/vaexio/vaex/pull/1961)\n      * Store strings in hashmap in arrow array, making map.key_array() faster [#1976](https://github.com/vaexio/vaex/pull/1976)\n   * Fix\n      * Respect row_limit when the groupby is dense [#1894](https://github.com/vaexio/vaex/pull/1894)\n      * Fingerprint collision possible if filter uses virtual column [#1949](https://github.com/vaexio/vaex/pull/1949)\n      * Apply with filtered data could give wrong dtypes [#1936](https://github.com/vaexio/vaex/pull/1936)\n      * Strings array growing failed when first string was zero length [#1956](https://github.com/vaexio/vaex/pull/1956)\n      * Use less processes for when using multiprocessing. [#1979](https://github.com/vaexio/vaex/pull/1979)\n      * Support chunked arrays and empty chunks in value counts. [#1958](https://github.com/vaexio/vaex/pull/1958) [#1975](https://github.com/vaexio/vaex/pull/1975)\n      * Allow renaming of function, to make join use with functions without name collisions. [#1966](https://github.com/vaexio/vaex/pull/1966)\n      * Join would fail if the rhs had no columns besides the join one [#2010](https://github.com/vaexio/vaex/pull/2010)\n      * hdf5 export fails for concat df with missing columns [#1493](https://github.com/vaexio/vaex/pull/1493)\n      * Allow `col` as column name [#1992](https://github.com/vaexio/vaex/issues/1992)\n\n\n\n# vaex 4.8.0\n## vaex-core 4.8.0\n   * Features\n      * Multiple example datasets provided in `vaex.datasets` [#1317](https://github.com/vaexio/vaex/pull/1317)\n      * We do not use asyncio for the default sync execute path [#1783](https://github.com/vaexio/vaex/pull/1783)\n      * Executor works with asyncio with multiple tasks [#1784]https://github.com/vaexio/vaex/pull/1784)\n      * Auto execute context manager makes vaex behave normal with await [#1785](https://github.com/vaexio/vaex/pull/1785)\n      * Support exporting arrow and parquet to file like objects [#1790](https://github.com/vaexio/vaex/pull/1790)\n      * Put lock files in $VAEX_HOME/lock [#1797](https://github.com/vaexio/vaex/pull/1797)\n      * Show progress when converting the included datasets [#1798](https://github.com/vaexio/vaex/pull/1798)\n      * Limit and limit_raise for unique and nunique  [#1801](https://github.com/vaexio/vaex/pull/1801)\n      * Lazy ordinal encode [#1813](https://github.com/vaexio/vaex/pull/1813)\n      * Configure logging using settings system[#1811](https://github.com/vaexio/vaex/pull/1811)\n      * Export to JSON [#1789](https://github.com/vaexio/vaex/pull/1789)\n      * Progress bar can be configured using settings system [#1815](https://github.com/vaexio/vaex/pull/1815)\n      * fillna and fillmissing should upcast integers when needed [#1869](https://github.com/vaexio/vaex/pull/1869)\n   * Performance\n      * Moved mutex use to the C++ layer to avoid GIL issues [#1847](https://github.com/vaexio/vaex/pull/1847)\n      * Many refactors to improve performance [#1863](https://github.com/vaexio/vaex/pull/1863) [#1869](https://github.com/vaexio/vaex/pull/1869)\n   * Fix\n      * Support empty parquet and arrow files [#1791](https://github.com/vaexio/vaex/pull/1791)\n      * Keep virtual column order when renaming/dropping to not break state transfer [#1788](https://github.com/vaexio/vaex/pull/1788)\n      * blake3 compatibility issues [#1818](https://github.com/vaexio/vaex/pull/1818) [db527a6](https://github.com/vaexio/vaex/commit/db527a6942db6ee74d97f1f1e8e5ddb3e8978f0c)\n      * Avoid frozendict 2.2.0 which can segfault on Python 3.6[#1856](https://github.com/vaexio/vaex/pull/1856)\n      * Use label instead of expression for non-ident column names in binby [#1842](https://github.com/vaexio/vaex/pull/1842)\n   * Development\n      * Use cmake/scikit-build [1847](https://github.com/vaexio/vaex/pull/1847) [92af1b1](https://github.com/vaexio/vaex/commit/92af1b1fab55dcc36c93e327495ac239c3fef772) [ad88d4b](https://github.com/vaexio/vaex/commit/ad88d4b2525c9fda7798c685985d9391a6b498a5)\n\n## vaex-hdf5 0.12.0\n   * Features\n      * Support storing Arrow Dictionary encoded/categoricals in hdf5 [#1814](https://github.com/vaexio/vaex/pull/1814)\n\n## vaex-ml 0.17.0\n   Requires vaex-core 4.8.0 for the `vaex.datasets.iris()`\n\n## vaex-server 0.8.1\n   Made compatible with Python 3.6\n\n\n# vaex 4.7.0\n## vaex-core 4.7.0\n   * Features\n      * Allow casting integers to timedelta64 type [#1741](https://github.com/vaexio/vaex/pull/1741)\n      * When a single task can fail, other can continue [#1762](https://github.com/vaexio/vaex/pull/1762)\n      * Improved rich progress bar support [#1771](https://github.com/vaexio/vaex/pull/1771)\n      * vaex.from_records to build a dataframe from a list of dicts [#1767](https://github.com/vaexio/vaex/pull/1767)\n      * Settings in Vaex can be configured in a uniform way [#1743](https://github.com/vaexio/vaex/pull/1743)\n      * Unique for datetime64 and timedelta64 expressions [#1016](https://github.com/vaexio/vaex/pull/1016)\n      * Copy argument for binby, similar to groupby [4e7fd8e](https://github.com/vaexio/vaex/commit/4e7fd8e154c151323410cc1bedec96dd8a9667cb)\n   * Performance\n      * Improve performance for filtered dataframes [1685](https://github.com/vaexio/vaex/pull/1685)\n   * Fixes\n      * S3: endpoint override combined with globbing [#1739](https://github.com/vaexio/vaex/pull/1739)\n      * Support having filtered and unfiltered tasks in 1 pass over the data [#1761](https://github.com/vaexio/vaex/pull/1761)\n      * Continue next tasks even when old ones are cancelled [#1769](https://github.com/vaexio/vaex/pull/1769)\n      * Handle empty arrow files [#1773](https://github.com/vaexio/vaex/pull/1773)\n      * Evaluate and evaluate_iterator did not work for empty filtered dataframes [#1775](https://github.com/vaexio/vaex/pull/1775)\n\n## vaex-hdf5 0.11.1\n   * Features\n      * do not track times to have deterministic output (useful for lineage/hash output) [#1772](https://github.com/vaexio/vaex/pull/1772)\n\n## vaex-ml 0.16\nRequires vaex-core 4.7 for uniform settings\n\n## vaex-server 0.8\nRequires vaex-core 4.7 for uniform settings\n\n## vaex-jupyter 0.7\nRequires vaex-core 4.7 for uniform settings\n   * Features\n      * Editor widget for settings [#1743](https://github.com/vaexio/vaex/pull/1743)\n\n## vaex-viz 0.5.1\n  * Fixes\n   * Histogram method on expression to propagate kwargs [#1757](https://github.com/vaexio/vaex/pull/1757)\n\n\n# vaex 4.6.0\n## vaex-core 4.6.0\n   * Features\n      * OSX Metal support for jitting expressions [#584](https://github.com/vaexio/vaex/pull/584)\n      * Improved progress support, including Rich progress bars [#1738](https://github.com/vaexio/vaex/pull/1738)\n      * Control number of columns and rows being printed [#1672](https://github.com/vaexio/vaex/pull/1672)\n      * Groupby with regular bins (similar to binby) [#1589](https://github.com/vaexio/vaex/pull/1589)\n      * Groupby with a limited number of values, and 'OTHERS' [#1641](https://github.com/vaexio/vaex/pull/1641)\n      * New aggregators: vaex.agg.any and vaex.agg.all [#1630](https://github.com/vaexio/vaex/pull/1630)\n      * Better API for correlation and mutual information [#536](https://github.com/vaexio/vaex/pull/536)\n      * Materialize datasets columns for better performance of non-memory mapping files (e.g. parquet) [#1625](https://github.com/vaexio/vaex/pull/1625)\n      * Avoid using nest_asyncio [#1546](https://github.com/vaexio/vaex/pull/1546)\n      * Multi level cache support (e.g. memory and disk) [#1580](https://github.com/vaexio/vaex/pull/1580)\n      * Do not mutate dataframe when comparing dates. [#1584](https://github.com/vaexio/vaex/pull/1584)\n   * Performance\n      * Fingerprint for tasks are more stable when the dataframe changes, but not the task description, for more cache hits. [#1627](https://github.com/vaexio/vaex/pull/1627)\n      * Faster conversion between Arrow and NumPy [#1625](https://github.com/vaexio/vaex/pull/1625)\n      * Cache sparse-finding/combining of high-d groupby [#1588](https://github.com/vaexio/vaex/pull/1588)\n      * Allow (lazy) math and computations with aggregators [#1612](https://github.com/vaexio/vaex/pull/1612)\n      * Less passes over the data when multiple dataframes use the same dataset [#1594](https://github.com/vaexio/vaex/pull/1594)\n      * Share evaluation of expressions of selections [#1594](https://github.com/vaexio/vaex/pull/1594)\n      * Delay support for groupby [#1594](https://github.com/vaexio/vaex/pull/1594)\n   * Fixes\n      * Missing values in groupby were not well supported [#1637](https://github.com/vaexio/vaex/pull/1637)\n      * Groupby over boolean [#1632](https://github.com/vaexio/vaex/pull/1632)\n      * Negative periods for diff and shift [#1608](https://github.com/vaexio/vaex/pull/1608)\n      * Arrow timestamp promotion during concatenation [#1551](https://github.com/vaexio/vaex/pull/1551)\n\n## vaex-server 0.7\nRequires vaex-core 4.6\n\n## vaex-ml 0.15\nRequires vaex-core 4.6\n   * Performance\n      * Dot product with many columns does not use expressions, but dedicated function [#1671](https://github.com/vaexio/vaex/pull/1671)\n\n# vaex 4.5.0\n## vaex-core 4.5.1\n   * Features\n      * Filelocks for multi process convert=True cooperation [#1573](https://github.com/vaexio/vaex/pull/1573)\n   * Performance\n      * Fingerprint speedups [#1574](https://github.com/vaexio/vaex/pull/1574)\n      * Expression.nunique asked unique for Python list (slow) [#1576](https://github.com/vaexio/vaex/pull/1576)\n      * Groupby was slow for particular data (with low bits 0) [#1571](https://github.com/vaexio/vaex/pull/1571)\n      * Blob encoding is faster due to blake3 [#1575](https://github.com/vaexio/vaex/pull/1575)\n      * Stop iterating over dataset when exception occurs when computing [#1577](https://github.com/vaexio/vaex/pull/1577)\n\n## vaex-core 4.5.0\n   * Features\n      * Protect file creation parts with lock files [#1541](https://github.com/vaexio/vaex/pull/1541)\n      * Expression.str.extract to extract parts of strings using regex to a struct [#1423](https://github.com/vaexio/vaex/pull/1423)\n   * Performance\n      * We now cache Expression.nunique() [#1565](https://github.com/vaexio/vaex/pull/1565)\n      * Hashmaps memory is shared among threads (does not scale linear with number of threads), and avoids a merge phase [#1525](https://github.com/vaexio/vaex/pull/1525)\n      * Hashmaps serialize efficiently [#1525](https://github.com/vaexio/vaex/pull/1525)\n      * Avoid falling back to eval to get the dtype [#1514](https://github.com/vaexio/vaex/pull/1514)\n\n## vaex-hdf5 0.10.0\n   * Features\n      * Write higher dimensional arrays to hdf5 files [#1563](https://github.com/vaexio/vaex/pull/1563)\n\n## vaex-ml 0.14.0\n   * Features\n      * MultiHotEncoder [#1537](https://github.com/vaexio/vaex/pull/1537)\n      * Various ML metrics [#1529](https://github.com/vaexio/vaex/pull/1529)\n\n## vaex-astro 0.9\n   Requires vaex 4.5.0 due to private API change.\n\n## vaex-server 0.6.1\n   * Fixes\n      * Missing imports (now checked in CI) [#1516](https://github.com/vaexio/vaex/pull/1516)\n\n## vaex-contrib 0.1.0\n   * Features\n      * Import from and export to Google BigQuery [#1470](https://github.com/vaexio/vaex/pull/1470)\n\n\n# vaex 4.4.0\n## vaex-core 4.4.0\n   * Performance\n      * Reuse filter data when slicing a dataframe [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * Faster astype('str') [#1411](https://github.com/vaexio/vaex/pull/1411)\n      * Task refactor, which allows for more caching [#1433](https://github.com/vaexio/vaex/pull/1433)\n   * Features\n      * df.to_records() for output to JSON [#1364](https://github.com/vaexio/vaex/pull/1364)\n      * df.dt.quarter and df.dt.halfyear [#1441](https://github.com/vaexio/vaex/pull/1364)https://github.com/vaexio/vaex/pull/1441)\n      * Arrow struct support [#1447](https://github.com/vaexio/vaex/pull/1364)https://github.com/vaexio/vaex/pull/1447)\n   * Fixes\n      * df.concat did not copy functions  [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * Dropping columns when name was invalid identifier [#1434](https://github.com/vaexio/vaex/pull/1434)\n      * Old dates wrapped due to negative ints and casting to unsigned [#1504](https://github.com/vaexio/vaex/pull/1504)\n      * Timestamp to NumPy datetime64 would ignore units [#1513](https://github.com/vaexio/vaex/pull/1513)\n      * Thread unsafety could trigger issues in Plotly dash [#1512](https://github.com/vaexio/vaex/pull/1512)\n\n## vaex-server 0.6.0\n   * Complete refactor, now using FastAPI by default [#1300](https://github.com/vaexio/vaex/pull/1300)\n\n## vaex-ml 0.13.0\n   * Tensorflow/keras support [#1510](https://github.com/vaexio/vaex/pull/1510)\n\n## vaex-hdf5 0.9.0\n   * Features\n      * Support writing/reading from custom hdf5 groups [#1439](https://github.com/vaexio/vaex/pull/1510)\n      * Support laying out an empty hdf5 file for writing [#1439](https://github.com/vaexio/vaex/pull/1510)\n   * Fixes\n      * File order close issue on Windows [#1479](https://github.com/vaexio/vaex/pull/1479)\n\n# vaex 4.3.0\n## vaex-core 4.3.0\n   * Performance\n      * Reuse filter data when slicing a dataframe [#1287](https://github.com/vaexio/vaex/pull/1287)\n   * Features\n      * Cache task results, with support for Redis and diskcache [#1393](https://github.com/vaexio/vaex/pull/1393)\n      * df.func.stack for stacking columns into Nd arrays [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * Sliding windows / shift / diff / sum [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * Embed join/groupby/shift in dataset (opt in via df._future(), will be default in vaex v5) [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * df.fingerprint() - a cross runtime unique key for caching [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * limit rows in groupby using early stop [#1391](https://github.com/vaexio/vaex/pull/1391)\n      * Compare date columns to string values formatted in ISO 8601 format 621a341b54f9b4112f24e2ffd86612753df19fef\n   * Fixes\n      * df.concat did not copy functions  [#1287](https://github.com/vaexio/vaex/pull/1287)\n      * Filters with column name equals to function names a159777e2dc13ec762914c51c8b5550efec5f845\n\n# vaex 4.2.0\n## vaex-core 4.2.0\n   * Performance\n      * Perform groupby in a sparse way for less memory usage/performance (up to 250x faster) [#1381](https://github.com/vaexio/vaex/pull/1381)\n   * Features\n      * Sorted groupby [#1339](https://github.com/vaexio/vaex/pull/1339)\n   * Fixes\n      * Proper use of logging framework [#1384](https://github.com/vaexio/vaex/pull/1384)\n      * Aggregating with 'count' would ignore custom names [#1345](https://github.com/vaexio/vaex/pull/1345)\n      * Join supports datetime column\n## vaex-ml 0.12.0\n   * Features\n      * River integration [#1256](https://github.com/vaexio/vaex/pull/1256)\n      * Random projections [#1305](https://github.com/vaexio/vaex/pull/1256)\n      * Incremental PCA [#1289](https://github.com/vaexio/vaex/pull/1289)\n## vaex-server 0.4.1\n   * Features\n      * SSL support 5dc29edd5b15eb4e1fe9c6981c67edd477481484\n\n# vaex 4.1.0 (2021-Mar-18)\n## vaex-core 4.1.0\n   * Features\n      *  groupby datetime support [#1265](https://github.com/vaexio/vaex/pull/1265)\n   * Fixes\n      * Improved fsspec support [#1268](https://github.com/vaexio/vaex/pull/1268)\n   * Performance\n      * df.extract() uses mask instead of indices 398b682fe9042b3336120e9013e15bbd638620ed\n\n\n# vaex 4.0.0 (2021-Mar-9)\n   * Breaking changes:\n      * Arrow is now a core dependency, vaex-arrow is deprecated. All methods that return string, will return Arrow arrays [#517](https://github.com/vaexio/vaex/pull/517)\n      * Opening an .arrow file will expose the arrays as Apache Arrow arrays, not numpy arrays. [#984](https://github.com/vaexio/vaex/pull/984)\n      * Columns (e.g. df.column['x']) may now return a ColumnProxy, instead of the original data, slice it [:] to get the underlying data (or call .to_numpy()/to_arrow() or try converting it with np.array(..) or pa.array(..)). [#993](https://github.com/vaexio/vaex/pull/993)\n      * All plot methods went into the df.viz accessor [#923](https://github.com/vaexio/vaex/pull/923)\n\n## vaex-arrow (DEPRECATED)\n   This is now part of vaex-core.\n\n## vaex-astro 0.8.0\n  * Requirement changed to vaex-core >=4,<5\n\n## vaex-core 4.0.0\n   * Fixes\n      * Repeated dropna/dropnan/dropmissing could report cached length. [#874](https://github.com/vaexio/vaex/pull/874)\n      * Trimming concatenated columns. [#860](https://github.com/vaexio/vaex/pull/860)\n      * percentile_approx works for 0 and 100 percentile. [#818](https://github.com/vaexio/vaex/pull/818)\n      * Expression containing kwarg=True were treated as invalid. [#861](hhttps://github.com/vaexio/vaex/pull/861)\n      * Unicode column names fully supported [#974](https://github.com/vaexio/vaex/issues/974)\n   * Features\n      * Datetime floor method [#843](https://github.com/vaexio/vaex/pull/843)\n      * dropinf (similar to dropna) [#821](https://github.com/vaexio/vaex/pull/821)\n      * Support for streaming from Google Cloud Storage. [#898](https://github.com/vaexio/vaex/pull/898)\n      * IPython autocomplete support (e.g. `df['hom' (tab)`) [#961](https://github.com/vaexio/vaex/pull/961)\n      * Out of core Parquet support using Arrow Dataset scanning [#993](https://github.com/vaexio/vaex/pull/993)\n   * Refactor\n      * Use `arrow.compute` for several string functions/kernels. [#885](https://github.com/vaexio/vaex/pull/885)\n      * Separate DataFrame and Dataset. [#865](https://github.com/vaexio/vaex/pull/865)\n   * Performance\n      * concat (vaex.concat or df.concat) is about 100x faster. [#994](https://github.com/vaexio/vaex/pull/994)\n\n## vaex-distributed (DEPRECATED)\n   This is now part of vaex-enterprise (was a proof of content, never functional).\n\n## vaex-graphql 0.2.0\n  * Requirement changed to vaex-core >=4,<5\n\n## vaex-hdf5 0.7.0\n   * Requirement changed vaex-core >=4,<5\n\n## vaex-jupyter 0.6.0\n  * Requirement changed to vaex-core >=4,<5\n\n## vaex-ml 0.11.0\n   * Features\n      * Batch training for CatBoost. [#819](https://github.com/vaexio/vaex/pull/819)\n      * Support for `predict_proba` and `predict_log_proba` for sklearn classifiers. [#927](https://github.com/vaexio/vaex/pull/927)\n\n## vaex-server 0.4.0\n  * Requirement changed to vaex-core >=4,<5\n\n## vaex-viz 0.5.0\n  * Requirement changed to vaex-core >=4,<5\n\n# vaex 3.1.0\n\n## vaex-jupyter 0.5.2 (2020-6-12)\n   * Features\n      * Normalize histogram and change selection mode. [#826](https://github.com/vaexio/vaex/pull/826)\n\n## vaex-ml 0.11.0-dev0\n    * Features\n      * Autogenerate the fast (or functional) API [#512](https://github.com/vaexio/vaex/pull/512)\n\n## vaex-core 2.0.3 (2020-6-10)\n   * Performance\n      * isin uses hashmaps, leading to a 2x-4x performance increase for primitives, 200x for strings in some cases [#822](https://github.com/vaexio/vaex/pull/822)\n\n## vaex-jupyter 0.5.1 (2020-6-4)\n   * Features\n      * Selection toggle list. [#797](https://github.com/vaexio/vaex/pull/797)\n\n## vaex-server 0.3.1 (2020-6-4)\n   * Fixes\n      * Remote dataframe was still using dtype, not data_type. [#797](https://github.com/vaexio/vaex/pull/797)\n\n## vaex-ml 0.10.0 (2020-6-4)\n   * Features\n      * Implementation of `GroupbyTransformer` [#479](https://github.com/vaexio/vaex/pull/479)\n\n## vaex-arrow 0.6.1 (2020-6-4)\n   * Fixes\n      * Various fixes for aliased columns (column names with invalid identifiers) [#768](https://github.com/vaexio/vaex/pull/768)\n\n## vaex-hdf5 0.6.1 (2020-6-4)\n   * Fixes\n      * Masked arrays supported in hdf5 files on s3 [#781](https://github.com/vaexio/vaex/pull/781)\n      * Various fixes for aliased columns (column names with invalid identifiers) [#768](https://github.com/vaexio/vaex/pull/768)\n\n## vaex-core 2.0.2 (2020-6-4)\n   * Fixes\n      * Masked arrays supported in hdf5 files on s3 [#781](https://github.com/vaexio/vaex/pull/781)\n      * Expression.map always uses masked arrays to be state transferrable (a new dataset might have missing values) [#479](https://github.com/vaexio/vaex/pull/479)\n      * Support importing Pandas dataframes with version 0.23 [#794](https://github.com/vaexio/vaex/pull/794)\n      * Various fixes for aliased columns (column names with invalid identifiers) [#768](https://github.com/vaexio/vaex/pull/768) [#793](https://github.com/vaexio/vaex/pull/793)\n\n## vaex-core 2.0.1 (2020-5-28)\n   * Fixes\n      * Join could in rare cases point to row 0, when there were values in the left, not present in the right [#765](https://github.com/vaexio/vaex/pull/765)\n      * Tabulate 0.8.7 escaped html, undo this to print dataframes nicely.\n\n\n# vaex 3.0.0 (2020-5-24)\n   * Breaking changes:\n     * Python 2 is not supported anymore\n     * Variables don't have access to pi and e anymore\n     * `df.rename_column` is now `df.rename` (and also renames variables)\n     * DataFrame uses a normal dict instead of OrderedDict, requiring Python >= 3.6\n     * Default limits (e.g. for plots) is minmax, so we don't miss outliers\n     * `df.get_column_names()` returns the aliased names (invalid identifiers), pass `alias=False` to get the internal column name\n     * Default value of `virtual` is True in method `df.export`, `df.to_dict`, `df.to_items`, `df.to_arrays`.\n     * df.dtype is a property, to get data types for expressions, use df.data_type(), df.expr.dtype is still behaving the same\n     * df.categorize takes min_value and max_value, and no longer needs the check argument, also the labels do not have to be strings.\n     * vaex.open/from_csv etc does not copy the pandas index by default [#756](https://github.com/vaexio/vaex/pull/756)\n     * df.categorize takes an inplace argument, similar to most methods, and returns the dataframe affected.\n\n\n# vaex-core 2.0.0 (2020-5-24)\n   * Performance\n       * Printing out of dataframes done in 1 evaluate call, making remote dataframe printing faster. [#571](https://github.com/vaexio/vaex/pull/557)\n       * Joining is faster and uses less memory (2x speedup measured) [#586](https://github.com/vaexio/vaex/pull/586)\n       * Faster typechecks when adding columns of dtype=object (as often happens when coming from pandas) [#612](https://github.com/vaexio/vaex/pull/612)\n       * Groupby 2x to 4x faster [#730](https://github.com/vaexio/vaex/pull/730)\n   * Refactor\n      * Task system is refactored, with task execution on CPU being default, and makes (de)serialization easier. [#571](https://github.com/vaexio/vaex/pull/557)\n      * Serialization/encoding of data structures is more flexible, allowing binary blobs and json over the wire. [#571](https://github.com/vaexio/vaex/pull/557)\n      * Execution and tasks support async await [#654](https://github.com/vaexio/vaex/pull/654)\n   * Fixes\n      * Renaming columns fixes [#571](https://github.com/vaexio/vaex/pull/571)\n      * Joining with virtual columns but different data, and name collision fixes [#570](https://github.com/vaexio/vaex/pull/570)\n      * Variables are treated similarly as columns, and respected in join [#573](https://github.com/vaexio/vaex/pull/573)\n      * Arguments to lazy function which are numpy arrays gets put in the variables [#573](https://github.com/vaexio/vaex/pull/573)\n      * Executor does not block after failed/interrupted tasks. [#571](https://github.com/vaexio/vaex/pull/557)\n      * Default limits (e.g. for plots) is minmax, so we don't miss outliers [#581](https://github.com/vaexio/vaex/pull/581)\n      * Do no fail printing out dataframe with 0 rows [#582](https://github.com/vaexio/vaex/pull/582)\n      * Give proper NameError when using non-existing column names [#299](https://github.com/vaexio/vaex/pull/299)\n      * Several fixes for concatenated dataframes.  [#590](https://github.com/vaexio/vaex/pull/590)\n      * dropna/nan/missing only dropped rows when all column values were missing, if no columns were specified. [#600](https://github.com/vaexio/vaex/pull/600)\n      * Flaky test for RobustScaler skipped for p36 [#614](https://github.com/vaexio/vaex/pull/614)\n      * Copying/printing sparse matrices [#615](https://github.com/vaexio/vaex/pull/615)\n      * Sparse columns names with invalid identifiers are not rewritten. [#617](https://github.com/vaexio/vaex/pull/617)\n      * Column names with invalid identifiers which are rewritten are shown when printing the dataframe. [#617](https://github.com/vaexio/vaex/pull/617)\n      * Column name rewriting for invalid identifiers also works on virtual columns. [#617](https://github.com/vaexio/vaex/pull/617)\n      * Fix the links to the example datasets. [#609](https://github.com/vaexio/vaex/pull/609)\n      * Expression.isin supports dtype=object [#669](https://github.com/vaexio/vaex/pull/669)\n      * Fix `colum_count`, now only counts hidden columns if explicitly specified [#593](https://github.com/vaexio/vaex/pull/593)\n      * df.values respects masked arrays [#640](https://github.com/vaexio/vaex/pull/640)\n      * Rewriting a virtual column and doing a state transfer does not lead to `ValueError: list.remove(x): x not in list` [#592](https://github.com/vaexio/vaex/pull/592)\n      * `df.<stat>(limits=...)` will now respect the selection [#651](https://github.com/vaexio/vaex/pull/651)\n      * Using automatic names for aggregators led to many underscores in name [#687](https://github.com/vaexio/vaex/pull/687)\n      * Support Python3.8 [#559](https://github.com/vaexio/vaex/pull/559)\n\n   * Features\n      * New lazy numpy wrappers: np.digitize and np.searchsorted [#573](https://github.com/vaexio/vaex/pull/573)\n      * `df.to_arrow_table`/`to_pandas_df`/`to_items`/`df.to_dict`/`df.to_arrays` now take a chunk_size argument for chunked iterators [#589](https://github.com/vaexio/vaex/pull/589) (https://github.com/vaexio/vaex/pull/699)\n      * Filtered datasets can be concatenated. [#590](https://github.com/vaexio/vaex/pull/590)\n      * DataFrames/Executors are thread safe (meaning you can schedule/compute from any thread), which makes it work out of the box for Dash and Flask [#670](https://github.com/vaexio/vaex/pull/670)\n      * `df.count/mean/std` etc can output in xarray.DataArray array type, makes plotting easier [#671](https://github.com/vaexio/vaex/pull/671)\n      * Column names can have unicode, and we use str.isidentifier to test, also dont accidently hide columns. [#617](https://github.com/vaexio/vaex/pull/617)\n      * Percentile approx can take a sequence of percentages [#527](https://github.com/vaexio/vaex/pull/527)\n      * Polygon testing, useful in combinations with geo/geojson data [#685](https://github.com/vaexio/vaex/pull/685)\n      * Added dt.quarter property and dt.strftime method to expression (by Juho Lauri) [#682](https://github.com/vaexio/vaex/pull/682)\n\n# vaex-server 0.3.0 (2020-5-24)\n   * Refactored server, can return multiple binary blobs, execute multiple tasks, cancel tasks, encoding/serialization is more flexible (like returning masked arrays). [#571](https://github.com/vaexio/vaex/pull/557)\n\n# vaex-viz 0.4.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n\n# vaex-graphql 0.1.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n\n# vaex-astro 0.7.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n\n# vaex-hdf5 0.6.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n\n# vaex-ml 0.9.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n\n# vaex-arrow 0.5.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n   * Fixes\n      * Booleans were negated, and didn't respect offsets.\n\n# vaex-jupyter 0.5.0 (2020-5-24)\n   * Requirement of vaex-core >=2,<3\n   * Breaking changes\n     * vaex-jupyter is refactored [#654](https://github.com/vaexio/vaex/pull/654)\n\n\n# vaex 2.6.0 (2020-1-21)\n\n# vaex-core 1.5.0\n   * Features\n      * df.evaluate_iterator for efficient parallel chunked evaluation [#515](https://github.com/vaexio/vaex/pull/515)\n      * Widget progress bar has time estimation [#545](https://github.com/vaexio/vaex/pull/545)\n   * Fixes\n     * Slicing arrow string arrays with masked arrays is respected/working [#530](https://github.com/vaexio/vaex/pull/530)]\n\n# vaex-ml 0.8.0\n   * Performance\n      * IncrementalPredictor uses parallel chunked support (2x speedup possible) [#515](https://github.com/vaexio/vaex/pull/515)\n   * Fix\n      * IncrementalPredictor: epochs now iterate over the whole DataFrame instead on a batch level [#523](https://github.com/vaexio/vaex/pull/523)\n      * Rename `vaex.ml.sklearn.SKLearnPredictor` to `vaex.ml.sklearn.Predictor` [#524](https://github.com/vaexio/vaex/pull/524)\n      * IncrementalPredictor can be used with `sklearn.linear_model.SGDClassifier` [539](https://github.com/vaexio/vaex/pull/539)\n   * Features\n      * CycleTransformer [#532](https://github.com/vaexio/vaex/pull/532)\n      * BayesianTargetEncoder [#533](https://github.com/vaexio/vaex/pull/533)\n      * WeightOfEvidenceEncoder [#534](https://github.com/vaexio/vaex/pull/534)\n      * Improve the consistency of the vaex.ml API for model transformers [#552](https://github.com/vaexio/vaex/pull/552)\n\n# vaex 2.5.0 (2019-12-16)\n\n# vaex-core 1.4.0\n   * Performance\n      * Dataframes are always true (implements `__bool__`) to avoid calling `__len__` [#496](https://github.com/vaexio/vaex/pull/496)\n   * Fixes\n      * Do not duplicate column when joining DataFrames on a column with the same name [#480](https://github.com/vaexio/vaex/pull/480)\n      * Better error messages/stack traces, and work better with debugger. [#488](https://github.com/vaexio/vaex/pull/488)\n      * Accept numpy scalars in expressions. [#462](https://github.com/vaexio/vaex/pull/462)\n      * Expression.astype can create datetime64 columns out of (arrow) strings arrays. [#440](https://github.com/vaexio/vaex/pull/440)\n      * Invalid mask access triggered when memory-mapped read only for strings. [#459](https://github.com/vaexio/vaex/pull/459)\n   * Features\n      * Expressions are not evaluated for filtered data [#483](https://github.com/vaexio/vaex/pull/483) [#496](https://github.com/vaexio/vaex/pull/496) and selections [505](https://github.com/vaexio/vaex/pull/505)\n      * Filtering (using df.filter) allows more flexible (and growing/expanding!) filter. [#489](https://github.com/vaexio/vaex/pull/489)\n      * Filtering and selections allow for booleans (True or False) to auto 'broadcast', to allow 'conditional filtering'. [#489](https://github.com/vaexio/vaex/pull/489)\n\n# vaex-ml 0.7.0\n   * Features\n      * IncrementalPredictor for `scikit-learn` models that support the `.partial_fit` method [#497](https://github.com/vaexio/vaex/pull/497)\n   * Fixes\n      * Adding unique function names to dataframes to enable adding a predictor twice [#492](https://github.com/vaexio/vaex/pull/492)\n\n## vaex-arrow 0.4.2\n      * Compatibility with vaex-core 1.4.0\n\n# vaex 2.4.0 (2019-11-26)\n\n## vaex-core 1.3.0\n\n   * Performance\n      * Parallel df.evaluate [#474](https://github.com/vaexio/vaex/pull/474)\n      * Avoid calling df.get_column_names (1000x for 1 billion rows per column use) [#473](https://github.com/vaexio/vaex/pull/473)\n      * Slicing e.g df[1:-1] goes much faster for filtered dataframes [#471](https://github.com/vaexio/vaex/pull/471)\n      * Dataframe copying and expression rewriting was slow [#470](https://github.com/vaexio/vaex/pull/470)\n      * Double indices columns were not using index cache since empty dict is falsy [#439](https://github.com/vaexio/vaex/pull/439)\n   * Features\n      * multi-key sorting of a DataFrame [#463](https://github.com/vaexio/vaex/pull/463)\n      * vaex expression to pandas.Series support [#456](https://github.com/vaexio/vaex/pull/456)\n      * Dask array support [#449](https://github.com/vaexio/vaex/pull/449) [#476](https://github.com/vaexio/vaex/pull/476) [example](http://docs.vaex.io/en/latest/example_dask.html)\n      * isin() method for expressions [#441](https://github.com/vaexio/vaex/pull/441) [docs](api.html#vaex.expression.Expression.isin)\n      * Existing expressions are rewritten, to make them behave like arrays [#450](https://github.com/vaexio/vaex/pull/450)\n\n## vaex-hdf5 0.5.6\n   * requires vaex-core >=1.3,<2 for parallel evaluate\n\n## vaex-jupyter 0.4.1\n   * Fixes:\n      * bqplot 0.12 revealed a bug/inconsistency with heatmap [#465](https://github.com/vaexio/vaex/pull/465)\n\n## vaex-arrow 0.4.1\n   * Fixes\n      *  Support for Apache Arrow >= 0.15\n\n## vaex-ml 0.6.2\n   * Fixes\n      * Docstrings and minor improvements\n\n## vaex-graphql 0.0.1 (2019-10-15)\n   * initial release 0.1\n\n# vaex 2.3.0 (2019-10-15)\n\n## vaex-core 1.2.0\n   * feature: auto upcasting for sum [#435](https://github.com/vaexio/vaex/pull/435)\n   * fix: selection/filtering fix when using masked values [#431](https://github.com/vaexio/vaex/pull/431)\n   * fix: masked string array fixes [#434](https://github.com/vaexio/vaex/pull/434)\n   * fix: memory usage fix for joins [#439](https://github.com/vaexio/vaex/pull/439)\n\n## vaex-arrow 0.4.1\n * fix: support for Apache Arrow >= 0.15\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.705078125,
          "content": "# Contributing Guidelines\n\nThank you for wanting to explore and contribute to _vaex_!\n\nBelow are the instructions on how to setup a development version of vaex, but contributions to the documentation and issue-resolving are very welcome.\n\n## Setup for Development\n\n* First, clone (with submodules!) the repo:\n    \n    ``git clone --recursive https://github.com/vaexio/vaex && cd vaex``\n\n* Next, create and activate a virtual python environment (using `conda` or `venv`).\n \n* Finally, install vaex for development (this might take a long time):\n\n    ``make init`` or ``pip install -e \".[dev]\"``\n\n### Common Errors\n\n * Did you clone with `--recursive`? If not, run `git submodule update --init`.\n * If you're on Windows, make sure that your command line/terminal has administrator privileges.\n\n#### MacOS Compilation Error\n\nIf the installation failed, and the error said _vaex-core_ couldn't be installed, and somewhere in the (long) log you received an error which looks something like:\n\n`error: $MACOSX_DEPLOYMENT_TARGET mismatch: now \"10.9\" but \"10.15\" during configure`\n\nTry running the following line and retry to install:\n\n```\nexport MACOSX_DEPLOYMENT_TARGET=`python -c \"from distutils.util import get_platform;print(get_platform().split('-')[1], end='')\"`\n```\n\n#### Nothing Works?\n\nDid nothing work for you? Contact one of the repo's contributors for help.\nIf you have encountered and solved another installation issue, you are very welcome to add it do the documentation here and submit a PR.\n\n## Submitting a Pull Request\n\nWe work using forks and Pull Requests.\n\nIn order to submit a PR for vaex, one must fork the repository and submit the PR from there.\n\nPlease make sure your fork is up-to-date with the vaex's latest _master_ branch.\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0615234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015, Maarten A. Breddels\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.068359375,
          "content": "include vaex/icons/*.png\ninclude requirements.txt\ninclude LICENSE.txt\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.94921875,
          "content": "nose:\n\tnosetests --with-coverage --cover-package=vaex --cover-html test/dataset.py\n# test/ui.py\ncoverage:\n\t-coverage run --parallel-mode --source=vaex -m vaex.test.ui\n\t-coverage run --parallel-mode --source=vaex -m vaex.test.dataset\n\t-coverage run --parallel-mode --source=vaex -m vaex.test.plot\n\tcoverage combine\n\t#test/dataset.py\n\tcoverage html -d cover\n\topen cover/index.html\n\ntest:\n\tVAEX_DEV=1 python -m pytest tests/\n\nclean-test:\n\trm -rf smæll2.parquet smæll2.yaml tests/data/parquet/ tests/data/smæll2.csv.hdf5 tests/data/unittest.parquet\n\tfind . -wholename \"./tests/data/parquet_dataset_partitioned_*\" -delete\n\ngenerate-docs:\n\tmake -C ./docs/ html\n\ninit:\n\tpython -m pip install -e .[dev]\n\nuninstall:\n\t @pip uninstall -y `pip list | grep -o -E \"^vaex([-a-zA-Z0-9]+)?\"` 2> /dev/null ||\\\n\t \techo \"Can't uninstall: Vaex is not installed\"\n\nclean:\n\tmake uninstall clean-test\n\trm -rf packages/vaex-core/build/\n\tfind . -wholename \"*egg-info*\" -delete\n\nrelease:\n\techo \"\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.25,
          "content": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/vaex-core)](https://pypi.org/project/vaex-core/)\n[![Documentation](https://readthedocs.org/projects/vaex/badge/?version=latest)](https://docs.vaex.io)\n[![Slack](https://img.shields.io/badge/slack-chat-green.svg)](https://join.slack.com/t/vaexio/shared_invite/zt-shhxzf5i-Cf5n2LtkoYgUjOjbB3bGQQ)\n\n# What is Vaex?\n\nVaex is a high performance Python library for lazy **Out-of-Core DataFrames**\n(similar to Pandas), to visualize and explore big tabular datasets. It\ncalculates *statistics* such as mean, sum, count, standard deviation etc, on an\n*N-dimensional grid* for more than **a billion** (`10^9`) samples/rows **per\nsecond**. Visualization is done using **histograms**, **density plots** and **3d\nvolume rendering**, allowing interactive exploration of big data. Vaex uses\nmemory mapping, zero memory copy policy and lazy computations for best\nperformance (no memory wasted).\n\n# Installing\nWith pip:\n```\n$ pip install vaex\n```\nOr conda:\n```\n$ conda install -c conda-forge vaex\n```\n\n[For more details, see the documentation](https://docs.vaex.io/en/latest/installing.html)\n\n# Key features\n## Instant opening of Huge data files (memory mapping)\n[HDF5](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) and [Apache Arrow](https://arrow.apache.org/) supported.\n\n![opening1a](https://user-images.githubusercontent.com/1765949/82818563-31c1e200-9e9f-11ea-9ee0-0a8c1994cdc9.png)\n\n\n![opening1b](https://user-images.githubusercontent.com/1765949/82820352-49e73080-9ea2-11ea-9153-d73aa399d329.png)\n\n[Read the documentation on how to efficiently convert your data](https://docs.vaex.io/en/latest/example_io.html) from CSV files, Pandas DataFrames, or other sources.\n\n\nLazy streaming from S3 supported in combination with memory mapping.\n\n![opening1c](https://user-images.githubusercontent.com/1765949/82820516-a21e3280-9ea2-11ea-948b-07df26c4b5d3.png)\n\n\n## Expression system\nDon't waste memory or time with feature engineering, we (lazily) transform your data when needed.\n\n\n![expression](https://user-images.githubusercontent.com/1765949/82818733-70f03300-9e9f-11ea-80b0-ab28e7950b5c.png)\n\n\n\n## Out-of-core DataFrame\nFiltering and evaluating expressions will not waste memory by making copies; the data is kept untouched on disk, and will be streamed only when needed. Delay the time before you need a cluster.\n\n\n![occ-animated](https://user-images.githubusercontent.com/1765949/82821111-c6c6da00-9ea3-11ea-9f9e-498de8133cc2.gif)\n\n## Fast groupby / aggregations\nVaex implements parallelized, highly performant `groupby` operations, especially when using categories (>1 billion/second).\n\n\n![groupby](https://user-images.githubusercontent.com/1765949/82818807-97ae6980-9e9f-11ea-8820-41dd4441057a.png)\n\n\n## Fast and efficient join\nVaex doesn't copy/materialize the 'right' table when joining, saving gigabytes of memory. With subsecond joining on a billion rows, it's pretty fast!\n\n![join](https://user-images.githubusercontent.com/1765949/82818840-a268fe80-9e9f-11ea-8ba2-6a6d52c4af88.png)\n\n## More features\n\n * Remote DataFrames (documentation coming soon)\n * Integration into [Jupyter and Voila for interactive notebooks and dashboards](https://vaex.readthedocs.io/en/latest/tutorial_jupyter.html)\n * [Machine Learning without (explicit) pipelines](https://vaex.readthedocs.io/en/latest/tutorial_ml.html)\n\n\n## Contributing\n\nSee [contributing](CONTRIBUTING.md) page.\n\n## Slack\n\nJoin the discussion in our [Slack](https://join.slack.com/t/vaexio/shared_invite/zt-shhxzf5i-Cf5n2LtkoYgUjOjbB3bGQQ) channel!\n\n# Learn more about Vaex\n * Articles\n   * [Beyond Pandas: Spark, Dask, Vaex and other big data technologies battling head to head](https://towardsdatascience.com/beyond-pandas-spark-dask-vaex-and-other-big-data-technologies-battling-head-to-head-a453a1f8cc13) (includes benchmarks)\n   * [7 reasons why I love Vaex for data science](https://towardsdatascience.com/7-reasons-why-i-love-vaex-for-data-science-99008bc8044b) (tips and trics)\n   * [ML impossible: Train 1 billion samples in 5 minutes on your laptop using Vaex and Scikit-Learn](https://towardsdatascience.com/ml-impossible-train-a-1-billion-sample-model-in-20-minutes-with-vaex-and-scikit-learn-on-your-9e2968e6f385)\n   * [How to analyse 100 GB of data on your laptop with Python](https://towardsdatascience.com/how-to-analyse-100s-of-gbs-of-data-on-your-laptop-with-python-f83363dda94)\n   * [Flying high with Vaex: analysis of over 30 years of flight data in Python](https://towardsdatascience.com/https-medium-com-jovan-veljanoski-flying-high-with-vaex-analysis-of-over-30-years-of-flight-data-in-python-b224825a6d56)\n   * [Vaex: A DataFrame with super strings - Speed up your text processing up to a 1000x\n](https://towardsdatascience.com/vaex-a-dataframe-with-super-strings-789b92e8d861)\n   * [Vaex: Out of Core Dataframes for Python and Fast Visualization - 1 billion row datasets on your laptop](https://towardsdatascience.com/vaex-out-of-core-dataframes-for-python-and-fast-visualization-12c102db044a)\n\n * [Follow our tutorials](https://docs.vaex.io/en/latest/tutorials.html)\n * Watch our more recent talks:\n   * [PyData London 2019](https://www.youtube.com/watch?v=2Tt0i823-ec)\n   * [SciPy 2019](https://www.youtube.com/watch?v=ELtjRdPT8is)\n * Contact us for data science solutions, training, or enterprise support at https://vaex.io/\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 0.9345703125,
          "content": "# Make vaex releases\n\n## Required tool\n * pip install releash\n\n## General idea\n\nThe vaex repo is a mono-repo, meaning that it contains many Python packages in the `packages` directory. We use the [releash](https://github.com/maartenbreddels/releash) tool to orchestrate this.\n\n## Get status\n\nGet an overview of the status of all packages by running `$ releash status`\n\n## Example\n\nReleasing a new version of vaex-core\n\n### Bump version number\n    $ releash bump vaex-core -n  # dry run\n    $ releash bump vaex-core -n --what=minor  # to go from 2.3.x to 2.4.0\n    $ releash bump vaex-core -f --what=minor  # force it, in case the worktree is dirty\n    $ releash bump vaex-core --what=prerelease=alpha # change to alpha\n    $ releash bump vaex-core --what=finalize  # remove alpha\n\n### Push\n\nBy pushing the tag (that releash created for you)\n\n    $ git push && git push --tags\n\nIt will trigger the GitHub Action to build the wheels and upload them to pypi.\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.123046875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease contact maartenbreddels+vaex@gmail.com for reporting vulnerabilities\n\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "binder",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "credits.md",
          "type": "blob",
          "size": 0.0947265625,
          "content": "icon based on Creative Stall, https://thenounproject.com/term/telescope/389646/, Creative Commons"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dodo.py",
          "type": "blob",
          "size": 0.982421875,
          "content": "# this uses https://pydoit.org/ to run tasks/chores\n# pip install doit\n# $ doit\nimport pkg_resources\nimport vaex.meta._version\nimport re\nimport shutil\n\n\ndef task_mybinder():\n    \"\"\"Make the mybinder files up to date\"\"\"\n\n    def action(targets):\n        filename = targets[0]\n        with open(filename) as f:\n            content = f.read()\n        version = vaex.meta._version.__version__\n        content = re.sub('vaex==(.*)', f'vaex=={version}', content)\n        with open(filename, \"w\") as f:\n            f.write(content)\n        print(f\"{filename} updated\")\n\n    return {\n        'actions': [action],\n        'targets': [\"binder/requirements.txt\"],\n        'file_dep': ['packages/vaex/vaex/meta/_version.py']\n        }\n\n\ndef task_sync_readme():\n    \"\"\"Make the README for veax-meta up to date\"\"\"\n\n    def action(targets):\n        shutil.copy('README.md', targets[0])\n\n    return {\n        'actions': [action],\n        'targets': [\"packages/vaex/README.md\"],\n        'file_dep': ['README.md']\n        }\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "py2app.py",
          "type": "blob",
          "size": 8.7939453125,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\nThis is a setup.py script generated by py2applet\n\nUsage:\n    python setup.py py2app\n\"\"\"\n\nimport os\nfrom distutils.sysconfig import get_python_inc\n#from distutils import setup, find_packages, Extension\nfrom setuptools import setup, Extension\nimport platform\nimport sys\nfrom importlib.machinery import SourceFileLoader\n\ndef system(cmd):\n\tprint(\"Executing: \", cmd)\n\tret = os.system(cmd)\n\tif ret != 0:\n\t\tprint(\"error, return code is\", ret)\n\t\tsys.exit(ret)\n\npath_version_file = \"vaex/version.py\"\nif not os.path.exists(path_version_file):\n\tsystem(\"version=`git describe --tags --long`; vaex/setversion.py ${version}\")\n\nversion = SourceFileLoader('version', path_version_file).load_module()\n#system(\"version=`git describe --tags --long`; vaex/vaex/setversion.py ${version}\")\n\n\nhas_py2app = False\n#import vaex\ntry:\n\timport py2app.build_app\n\thas_py2app = True\nexcept:\n\tpass\n\nif has_py2app:\n\timport py2app.recipes\n\tclass astropy(object):\n\t\tdef check(self, cmd, graph):\n\t\t\treturn dict(packages=[\"astropy\"])\n\tpy2app.recipes.astropy = astropy()\n\t# see http://stackoverflow.com/questions/31240052/py2app-typeerror-dyld-find-got-an-unexpected-keyword-argument-loader\n\t\"\"\"\n\tMonkey-patch macholib to fix \"dyld_find() got an unexpected keyword argument 'loader'\".\n\n\tAdd 'import macholib_patch' to the top of set_py2app.py\n\t\"\"\"\n\n\timport macholib\n\tif macholib.__version__ <= \"1.7\":\n\t\tprint(\"Applying macholib patch...\")\n\t\timport macholib.dyld\n\t\timport macholib.MachOGraph\n\t\tdyld_find_1_7 = macholib.dyld.dyld_find\n\t\tdef dyld_find(name, loader=None, **kwargs):\n\t\t\t#print(\"~\"*60 + \"calling alternate dyld_find\")\n\t\t\tif loader is not None:\n\t\t\t\tkwargs['loader_path'] = loader\n\t\t\treturn dyld_find_1_7(name, **kwargs)\n\t\tmacholib.MachOGraph.dyld_find = dyld_find\n#full_name = vaex.__full_name__\ncmdclass = {}\n\nif has_py2app and sys.argv[1] == \"py2app\":\n\timport vaex.ui\n\tclass my_py2app(py2app.build_app.py2app):\n\t\t\"\"\"hooks in post script to add in missing libraries and zip the content\"\"\"\n\t\tdef run(self):\n\t\t\tpy2app.build_app.py2app.run(self)\n\t\t\t#libQtWebKit.4.dylib\n\t\t\t#libQtNetwork.4.dylib\n\t\t\tif 0:\n\t\t\t\tlibs = [line.strip() for line in \"\"\"\n\t\t\t\tlibLLVM-3.3.dylib\n\t\t\t\tlibQtGui.4.dylib\n\t\t\t\tlibQtCore.4.dylib\n\t\t\t\tlibQtOpenGL.4.dylib\n\t\t\t\tlibcrypto.1.0.0.dylib\n\t\t\t\tlibssl.1.0.0.dylib\n\t\t\t\tlibpng15.15.dylib\n\t\t\t\tlibfreetype.6.dylib\n\t\t\t\tlibjpeg.8.dylib\n\t\t\t\tlibhdf5_hl.9.dylib\n\t\t\t\tlibhdf5.9.dylib\n\t\t\t\t\"\"\".strip().splitlines()]\n\n\t\t\t\tlibpath = \"/Users/maartenbreddels/anaconda/lib\"\n\t\t\t\ttargetdir = 'dist/vaex.app/Contents/Resources/lib/'\n\t\t\t\tfor filename in libs:\n\t\t\t\t\tpath = os.path.join(libpath, filename)\n\t\t\t\t\tcmd = \"cp %s %s\" % (path, targetdir)\n\t\t\t\t\tprint(cmd)\n\t\t\t\t\tos.system(cmd)\n\n\t\t\t\tlibs = [line.strip() for line in \"\"\"\n\t\t\t\tlibpng15.15.dylib\n\t\t\t\t\"\"\".strip().splitlines()]\n\t\t\t\ttargetdir = 'dist/vaex.app/Contents/Resources/'\n\t\t\t\tfor filename in libs:\n\t\t\t\t\t#path = os.path.join(libpath, filename)\n\t\t\t\t\tcmd = \"cp %s %s\" % (path, targetdir)\n\t\t\t\t\tprint(cmd)\n\t\t\t\t\tos.system(cmd)\n\n\t\t\tos.system(\"cp data/helmi-dezeeuw-2000-10p.hdf5 dist/vaex.app/Contents/Resources/\")\n\t\t\tos.system(\"cd dist\")\n\t\t\tzipname = \"%s.zip\" % vaex.__build_name__\n\t\t\tos.system(\"cd dist;rm %s\" % zipname)\n\t\t\tos.system(\"cd dist;zip -q -r %s %s.app\" % (zipname, vaex.__program_name__))\n\t\t\tretvalue = os.system(\"git diff --quiet\")\n\t\t\tif retvalue != 0:\n\t\t\t\tprint(\"WARNING UNCOMMITED CHANGES, VERSION NUMBER WILL NOT MATCH\")\n\tcmdclass['py2app'] = my_py2app\n\t\t\t\n#from distutils.core import setup, Extension\ntry:\n\timport numpy\n\tnumdir = os.path.dirname(numpy.__file__)\nexcept:\n\tnumdir = None\n\nif numdir is None:\n\tprint(\"numpy not found, cannot install\")\nimport sys \nimport glob\nsys.setrecursionlimit(10000)\n\nAPP = [\"vaex_app.py\"]\nDATA_FILES = []\nif has_py2app:\n\tpass\n\t#DATA_FILES.append([\"data\", [\"data/disk-galaxy.hdf5\"]]) #, \"data/Aq-A-2-999-shuffled-1percent.hdf5\"]])\n\tDATA_FILES.append([\"data/\", glob.glob(\"data/dist/*\")] )\n\n\n#print glob.glob(\"doc/*\")\nif 0:\n\tDATA_FILES.append([\"doc/\", glob.glob(\"docs/build/html/*.html\") + glob.glob(\"docs/build/html/*.js\")] )\n\tfor sub in \"_static _images _sources\".split():\n\t\tDATA_FILES.append([\"doc/\" + sub, glob.glob(\"docs/build/html/\" +sub +\"/*\")] )\n#print DATA_FILES\nOPTIONS = {'argv_emulation': False, 'excludes':[], 'resources':['vaex/ui/icons'],\n           'matplotlib_backends':'-',\n           'no_chdir':True,\n\t\t   'includes': ['h5py',\n                 'h5py.defs',\n                 'h5py.h5ac',\n                 'h5py._errors',\n                 'h5py._objects',\n                 'h5py.defs',\n                 'h5py.utils',\n                 'h5py._proxy',\n\t\t\t\t 'six',\n\t\t\t\t 'aplus',\n\t\t\t\t \"astropy.extern.bundled\",\n\t\t\t\t ],\n\t\t   \"frameworks\": [sys.prefix + \"/lib/libmkl_avx2.dylib\"],\n           'iconfile': 'vaex/ui/icons/vaex.icns'\n\n} #, 'debug_modulegraph':True}\n#, 'app':True\n\n\ninclude_dirs = []\nlibrary_dirs = []\nlibraries = []\ndefines = []\nif \"darwin\" in platform.system().lower():\n\textra_compile_args = [\"-mfpmath=sse\", \"-O3\", \"-funroll-loops\"]\nelse:\n\textra_compile_args = []\n\t#extra_compile_args = [\"-mfpmath=sse\", \"-msse4\", \"-Ofast\", \"-flto\", \"-march=native\", \"-funroll-loops\"]\n\t#extra_compile_args = [\"-mfpmath=sse\", \"-msse4\", \"-Ofast\", \"-flto\", \"-funroll-loops\"]\n\t#extra_compile_args = [\"-mfpmath=sse\", \"-O3\", \"-funroll-loops\"]\n\t#extra_compile_args = [\"-mfpmath=sse\", \"-mavx\", \"-O3\", \"-funroll-loops\"]\n\textra_compile_args = [\"-mfpmath=sse\", \"-msse4a\", \"-O3\", \"-funroll-loops\"]\nextra_compile_args.extend([\"-std=c++0x\"])\n\ninclude_dirs.append(os.path.join(get_python_inc(plat_specific=1), \"numpy\"))\nif numdir is not None:\n\tinclude_dirs.append(os.path.join(numdir, \"core\", \"include\"))\n\nextensions = [\n\tExtension(\"vaex.vaexfast\", [\"src/vaex/vaexfast.cpp\"],\n                include_dirs=include_dirs,\n                library_dirs=library_dirs,\n                libraries=libraries,\n                define_macros=defines,\n                extra_compile_args=extra_compile_args\n                )\n] if numdir is not None else []\n\nfrom pip.req import parse_requirements\nimport pip.download\n\n# older versions of pip don't use the pipsession..?\ntry:\n\tsession = pip.download.PipSession()\nexcept:\n\tsession = None\n# parse_requirements() returns generator of pip.req.InstallRequirement objects\nif session:\n\tinstall_reqs = parse_requirements(\"requirements.txt\", session=session)\nelse:\n\tinstall_reqs = parse_requirements(\"requirements.txt\")\n\n# reqs is a list of requirement\n# e.g. ['django==1.5.1', 'mezzanine==1.4.6']\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif on_rtd:\n\treqs = [] # we do this with requirements-rtd.txt\nelse:\n\treqs = [str(ir.req) for ir in install_reqs]\n\nif sys.version_info >= (3,0):\n\t# remove future for py3\n\treqs.remove(\"futures>=2.2.0\")\n\n#print \"requirements\", reqs\n#print \"ver#sion\", vaex.__release__\nsetup(\n\tentry_points={\n\t\t'console_scripts': ['vaex = vaex.__main__:main'],\n\t\t'gui_scripts': ['vaexgui = vaex.__main__:main'] # sometimes in osx, you need to run with this\n  \t},\n\tapp=[\"bin/vaex\"],\n\tname=\"vaex\", #vaex.__program_name__,\n\tauthor=\"Maarten A. Breddels\",\n\tauthor_email=\"maartenbreddels@gmail.com\",\n    version = version.versionstring, #\"%d.%d.%d\" % version.versiontuple,\n    data_files=DATA_FILES,\n    options={'py2app': OPTIONS},\n\tlicense='MIT',\n    #setup_requires=['py2app'],\n    #setup_requires=[\"sphinx\"],\n    includes=[\"vaex\", \"md5\", \"astropy\", \"aplus\", \"six\"],\n    packages=[\"vaex\", \"vaex.ui\", \"vaex.test\", \"vaex.misc\", \"vaex.notebook\", \"vaex.file\", \"vaex.ui.plugin\", \"vaex.ui.icons\", \"vaex.ext\"],\n    install_requires=reqs,\n    #entry_points={ 'console_scripts': [ 'vaex=vaex.ui.main:main']  },\n    #scripts=[os.path.join(\"bin\", \"vaex\")],\n    ext_modules=extensions,\n    package_data={'vaex': ['ui/icons/*.png', 'ui/icons/*.icns', 'ext/*.js']},\n    package_dir={'vaex':'vaex'},\n    cmdclass=cmdclass,\n    description=\"Vaex is a graphical tool to visualize and explore large tabular datasets.\",\n    long_description=open(\"README.rst\").read(),\n    url=\"https://www.astro.rug.nl/~breddels/vaex\",\n\tclassifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 4 - Beta',\n\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n\n\t\t'Operating System :: MacOS',\n\t\t'Operating System :: POSIX',\n\t\t'Operating System :: Unix',\n\n\t\t'Topic :: Scientific/Engineering :: Visualization',\n\t\t'Topic :: Scientific/Engineering :: Information Analysis',\n\n\t\t'Intended Audience :: Science/Research',\n\n\t\t'Environment :: MacOS X',\n\t\t'Environment :: X11 Applications'\n\n    ],\n\tkeywords=\"visualization exploration data analysis \"\n)\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0478515625,
          "content": "[pytest]\nmarkers =\n    slow: mark a test as slow\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.4990234375,
          "content": "# only for local development / install from source, e.g.\n# pip install https://github.com/vaexio/vaex/archive/refs/heads/master.zip\n\nfrom pathlib import Path\n\nfrom setuptools import setup\n\npackages = [\n    \"vaex-core\",\n    \"vaex-viz\",\n    \"vaex-hdf5\",\n    \"vaex-server\",\n    \"vaex-astro\",\n    \"vaex-jupyter\",\n    \"vaex-ml\",\n    \"vaex-graphql\",\n    \"vaex-contrib\",\n    \"vaex\",\n]\n\nsetup(\n    name=\"vaex-meta\",\n    version=\"0.1.0\",\n    description=\"Convenience setup.py for when installing from the git repo\",\n    classifiers=[\n        \"Private :: Do Not Upload to pypi server\",\n    ],\n    packages=[],\n    install_requires=[\n        f\"{package}[all] @ {(Path(__file__).parent / 'packages' / package).as_uri()}\"\n        for package in packages\n    ],\n    extras_require={\n        \"ci\": [\n            # readthedocs\n            \"sphinx\",\n            \"sphinx_book_theme\",\n            \"sphinx_sitemap\",\n            \"sphinxcontrib_googleanalytics\",\n            \"sphinxext_rediraffe\",\n            \"sphinx_gallery\",\n            \"nbsphinx\",\n            \"jupyter_sphinx\",\n            \"myst_parser\",\n            # tests\n            \"pytest\",\n            \"pytest-asyncio\",\n            \"pytest-mpl\",\n            \"pytest-timeout\",\n            # ipynb tests\n            \"nbconvert\",\n            \"jupyterlab\",\n            \"plotly\",\n            # https://github.com/vaexio/vaex/pull/2356#issuecomment-2320707228\n            \"graphene-tornado @ https://github.com/ddelange/graphene-tornado/archive/refs/heads/2.6.1.unpin-werkzeug.zip\",\n        ]\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}