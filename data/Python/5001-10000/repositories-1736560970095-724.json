{
  "metadata": {
    "timestamp": 1736560970095,
    "page": 724,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ihmily/DouyinLiveRecorder",
      "stars": 5447,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.080078125,
          "content": ".github/workflows/build-image.yml\n.git\n.gitignore\n.dockerignore\nREADME.md\nLICENSE\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.015625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\npoetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\nbackup_config/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.455078125,
          "content": "FROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN apt-get update && \\\n    apt-get install -y curl gnupg && \\\n    curl -sL https://deb.nodesource.com/setup_20.x  | bash - && \\\n    apt-get install -y nodejs\n\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN apt-get update && \\\n    apt-get install -y ffmpeg tzdata && \\\n    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    dpkg-reconfigure -f noninteractive tzdata\n\nCMD [\"python\", \"main.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2023 Hmily\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.5947265625,
          "content": "![video_spider](https://socialify.git.ci/ihmily/DouyinLiveRecorder/image?font=Inter&forks=1&language=1&owner=1&pattern=Circuit%20Board&stargazers=1&theme=Light)\n\n## 💡简介\n[![Python Version](https://img.shields.io/badge/python-3.11.6-blue.svg)](https://www.python.org/downloads/release/python-3116/)\n[![Supported Platforms](https://img.shields.io/badge/platforms-Windows%20%7C%20Linux-blue.svg)](https://github.com/ihmily/DouyinLiveRecorder)\n[![Docker Pulls](https://img.shields.io/docker/pulls/ihmily/douyin-live-recorder?label=Docker%20Pulls&color=blue&logo=docker)](https://hub.docker.com/r/ihmily/douyin-live-recorder/tags)\n![GitHub issues](https://img.shields.io/github/issues/ihmily/DouyinLiveRecorder.svg)\n[![Latest Release](https://img.shields.io/github/v/release/ihmily/DouyinLiveRecorder)](https://github.com/ihmily/DouyinLiveRecorder/releases/latest)\n[![Downloads](https://img.shields.io/github/downloads/ihmily/DouyinLiveRecorder/total)](https://github.com/ihmily/DouyinLiveRecorder/releases/latest)\n\n一款**简易**的可循环值守的直播录制工具，基于FFmpeg实现多平台直播源录制，支持自定义配置录制以及直播状态推送。\n\n</div>\n\n## 😺已支持平台\n\n- [x] 抖音\n- [x] TikTok\n- [x] 快手\n- [x] 虎牙\n- [x] 斗鱼\n- [x] YY\n- [x] B站\n- [x] 小红书\n- [x] bigo \n- [x] blued\n- [x] SOOP(原AfreecaTV)\n- [x] 网易cc\n- [x] 千度热播\n- [x] PandaTV\n- [x] 猫耳FM\n- [x] Look直播\n- [x] WinkTV\n- [x] FlexTV\n- [x] PopkonTV\n- [x] TwitCasting\n- [x] 百度直播\n- [x] 微博直播\n- [x] 酷狗直播\n- [x] TwitchTV\n- [x] LiveMe\n- [x] 花椒直播\n- [x] 流星直播\n- [x] ShowRoom\n- [x] Acfun\n- [x] 映客直播\n- [x] 音播直播\n- [x] 知乎直播\n- [x] CHZZK\n- [x] 嗨秀直播\n- [x] vv星球直播\n- [x] 17Live\n- [x] 浪Live\n- [x] 畅聊直播\n- [x] 飘飘直播\n- [x] 六间房直播\n- [x] 乐嗨直播\n- [x] 花猫直播\n- [x] Shopee\n- [x] Youtube\n- [ ] 更多平台正在更新中\n\n</div>\n\n## 🎈项目结构\n\n```\n.\n└── DouyinLiveRecorder/\n    ├── /config -> (config record)\n    ├── /logs -> (save runing log file)\n    ├── /backup_config -> (backup file)\n    ├── /douyinliverecorder -> (package)\n        ├── initializer.py-> (check and install nodejs)\n    \t├── spider.py-> (get live data)\n    \t├── stream.py-> (get live stream address)\n    \t├── utils.py -> (contains utility functions)\n    \t├── logger.py -> (logger handdle)\n    \t├── room.py -> (get room info)\n    \t├── /javascript -> (some decrypt code)\n    ├── main.py -> (main file)\n    ├── ffmpeg_install.py -> (ffmpeg install script)\n    ├── demo.py -> (call package test demo)\n    ├── msg_push.py -> (send live status update message)\n    ├── ffmpeg.exe -> (record video)\n    ├── index.html -> (play m3u8 and flv video)\n    ├── requirements.txt -> (library dependencies)\n    ├── docker-compose.yaml -> (Container Orchestration File)\n    ├── Dockerfile -> (Application Build Recipe)\n    ├── StopRecording.vbs -> (stop recording script on Windows)\n    ...\n```\n\n</div>\n\n## 🌱使用说明\n\n- 对于只想使用录制软件的小白用户，进入[Releases](https://github.com/ihmily/DouyinLiveRecorder/releases) 中下载最新发布的 zip压缩包即可，里面有打包好的录制软件。（有些电脑可能会报毒，直接忽略即可，如果下载时被浏览器屏蔽，请更换浏览器下载）\n\n- 压缩包解压后，在 `config` 文件夹内的 `URL_config.ini` 中添加录制直播间地址，一行一个直播间地址。如果要自定义配置录制，可以修改`config.ini` 文件，推荐将录制格式修改为`ts`。\n- 以上步骤都做好后，就可以运行`DouyinLiveRecorder.exe` 程序进行录制了。录制的视频文件保存在同目录下的 `downloads` 文件夹内。\n\n- 另外，如果需要录制TikTok、AfreecaTV等海外平台，请在配置文件中设置开启代理并添加proxy_addr链接 如：`127.0.0.1:7890` （这只是示例地址，具体根据实际填写）。\n\n- 假如`URL_config.ini`文件中添加的直播间地址，有个别直播间暂时不想录制又不想移除链接，可以在对应直播间的链接开头加上`#`，那么将停止该直播间的监测以及录制。\n\n- 软件默认录制清晰度为 `原画` ，如果要单独设置某个直播间的录制画质，可以在添加直播间地址时前面加上画质即可，如`超清，https://live.douyin.com/745964462470` 记得中间要有`,` 分隔。\n\n- 如果要长时间挂着软件循环监测直播，最好循环时间设置长一点（咱也不差没录制到的那几分钟），避免因请求频繁导致被官方封禁IP 。\n\n- 要停止直播录制，Windows平台可执行StopRecording.vbs脚本文件，或者在录制界面使用 `Ctrl+C ` 组合键中断录制，若要停止其中某个直播间的录制，可在`URL_config.ini`文件中的地址前加#，会自动停止对应直播间的录制并正常保存已录制的视频。\n- 最后，欢迎右上角给本项目一个star，同时也非常乐意大家提交pr。\n\n&emsp;\n\n直播间链接示例：\n\n```\n抖音：\nhttps://live.douyin.com/745964462470\nhttps://v.douyin.com/iQFeBnt/\nhttps://live.douyin.com/yall1102  （链接+抖音号）\nhttps://v.douyin.com/CeiU5cbX  （主播主页地址）\n\nTikTok：\nhttps://www.tiktok.com/@pearlgaga88/live\n\n快手：\nhttps://live.kuaishou.com/u/yall1102\n\n虎牙：\nhttps://www.huya.com/52333\n\n斗鱼：\nhttps://www.douyu.com/3637778?dyshid=\nhttps://www.douyu.com/topic/wzDBLS6?rid=4921614&dyshid=\n\nYY:\nhttps://www.yy.com/22490906/22490906\n\nB站：\nhttps://live.bilibili.com/320\n\n小红书（推荐使用主页地址)：\nhttps://www.xiaohongshu.com/user/profile/6330049c000000002303c7ed?appuid=5f3f478a00000000010005b3\nhttp://xhslink.com/xpJpfM\n\nbigo直播：\nhttps://www.bigo.tv/cn/716418802\n\nbuled直播：\nhttps://app.blued.cn/live?id=Mp6G2R\n\nSOOP：\nhttps://play.sooplive.co.kr/sw7love\n\n网易cc：\nhttps://cc.163.com/583946984\n\n千度热播：\nhttps://qiandurebo.com/web/video.php?roomnumber=33333\n\nPandaTV：\nhttps://www.pandalive.co.kr/live/play/bara0109\n\n猫耳FM：\nhttps://fm.missevan.com/live/868895007\n\nLook直播:\nhttps://look.163.com/live?id=65108820&position=3\n\nWinkTV:\nhttps://www.winktv.co.kr/live/play/anjer1004\n\nFlexTV:\nhttps://www.flextv.co.kr/channels/593127/live\n\nPopkonTV:\nhttps://www.popkontv.com/live/view?castId=wjfal007&partnerCode=P-00117\nhttps://www.popkontv.com/channel/notices?mcid=wjfal007&mcPartnerCode=P-00117\n\nTwitCasting:\nhttps://twitcasting.tv/c:uonq\n\n百度直播:\nhttps://live.baidu.com/m/media/pclive/pchome/live.html?room_id=9175031377&tab_category\n\n微博直播:\nhttps://weibo.com/l/wblive/p/show/1022:2321325026370190442592\n\n酷狗直播:\nhttps://fanxing2.kugou.com/50428671?refer=2177&sourceFrom=\n\nTwitchTV:\nhttps://www.twitch.tv/gamerbee\n\nLiveMe:\nhttps://www.liveme.com/zh/v/17141543493018047815/index.html\n\n花椒直播:\nhttps://www.huajiao.com/l/345096174\n\n流星直播:\nhttps://www.7u66.com/100960\n\nShowRoom:\nhttps://www.showroom-live.com/room/profile?room_id=480206  （主播主页地址）\n\nAcfun:\nhttps://live.acfun.cn/live/179922\n\n映客直播：\nhttps://www.inke.cn/liveroom/index.html?uid=22954469&id=1720860391070904\n\n音播直播：\nhttps://live.ybw1666.com/800002949\n\n知乎直播:\nhttps://www.zhihu.com/people/ac3a467005c5d20381a82230101308e9 (主播主页地址)\n\nCHZZK:\nhttps://chzzk.naver.com/live/458f6ec20b034f49e0fc6d03921646d2\n\n嗨秀直播:\nhttps://www.haixiutv.com/6095106\n\nVV星球直播:\nhttps://h5webcdn-pro.vvxqiu.com//activity/videoShare/videoShare.html?h5Server=https://h5p.vvxqiu.com&roomId=LP115924473&platformId=vvstar\n\n17Live:\nhttps://17.live/en/live/6302408\n\n浪Live:\nhttps://www.lang.live/en-US/room/3349463\n\n畅聊直播:\nhttps://www.tlclw.com/801044397\n\n飘飘直播:\nhttps://m.pp.weimipopo.com/live/preview.html?uid=91648673&anchorUid=91625862&app=plpl\n\n六间房直播:\nhttps://v.6.cn/634435\n\n乐嗨直播:\nhttps://www.lehaitv.com/8059096\n\n花猫直播:\nhttps://h.catshow168.com/live/preview.html?uid=19066357&anchorUid=18895331\n\nShopee:\nhttps://sg.shp.ee/GmpXeuf?uid=1006401066&session=802458\n\nYoutube:\nhttps://www.youtube.com/watch?v=cS6zS5hi1w0\n```\n\n&emsp;\n\n## 🎃源码运行\n使用源码运行，前提要有**Python>=3.10**环境，如果没有请先自行安装Python，再执行下面步骤。\n\n1.首先拉取或手动下载本仓库项目代码\n\n```bash\ngit clone https://github.com/ihmily/DouyinLiveRecorder.git\n```\n\n2.进入项目文件夹，安装依赖\n\n```bash\ncd DouyinLiveRecorder\npip3 install -r requirements.txt\n```\n\n3.安装[FFmpeg](https://ffmpeg.org/download.html#build-linux)，如果是Windows系统，这一步可跳过。对于Linux系统，执行以下命令安装\n\nCentOS执行\n\n```bash\nyum install epel-release\nyum install ffmpeg\n```\n\nUbuntu则执行\n\n```bash\napt update\napt install ffmpeg\n```\n\nmacOS 执行\n\n**如果已经安装 Homebrew 请跳过这一步**\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n```bash\nbrew install ffmpeg\n```\n\n4.运行程序\n\n```python\npython main.py\n```\n\n其中Linux系统请使用`python3 main.py` 运行。\n\n&emsp;\n## 🐋容器运行\n\n在运行命令之前，请确保您的机器上安装了 [Docker](https://docs.docker.com/get-docker/) 和 [Docker Compose](https://docs.docker.com/compose/install/) \n\n1.快速启动\n\n最简单方法是运行项目中的 [docker-compose.yaml](https://github.com/ihmily/DouyinLiveRecorder/blob/main/docker-compose.yaml) 文件，只需简单执行以下命令：\n\n```bash\ndocker-compose up\n```\n\n可选 `-d` 在后台运行。\n\n\n\n2.构建镜像(可选)\n\n如果你只想简单的运行程序，则不需要做这一步。Docker镜像仓库中代码版本可能不是最新的，如果要运行本仓库主分支最新代码，可以本地自定义构建，通过修改 [docker-compose.yaml](https://github.com/ihmily/DouyinLiveRecorder/blob/main/docker-compose.yaml) 文件，如将镜像名修改为 `douyin-live-recorder:latest`，并取消 `# build: .` 注释，然后再执行\n\n```bash\ndocker build -t douyin-live-recorder:latest .\ndocker-compose up\n```\n\n或者直接使用下面命令进行构建并启动\n\n```bash\ndocker-compose -f docker-compose.yaml up\n```\n\n\n\n3.停止容器实例\n\n```bash\ndocker-compose stop\n```\n\n\n\n4.注意事项\n\n①在docker容器内运行本程序之前，请先在配置文件中添加要录制的直播间地址。\n\n②在容器内时，如果手动中断容器运行停止录制，会导致正在录制的视频文件损坏！\n\n**无论哪种运行方式，为避免手动中断或者异常中断导致录制的视频文件损坏的情况，推荐使用 `ts` 格式保存**。\n\n&emsp;\n\n## ❤️贡献者\n\n&ensp;&ensp; [![Hmily](https://github.com/ihmily.png?size=50)](https://github.com/ihmily)\n[![iridescentGray](https://github.com/iridescentGray.png?size=50)](https://github.com/iridescentGray)\n[![annidy](https://github.com/annidy.png?size=50)](https://github.com/annidy)\n[![wwkk2580](https://github.com/wwkk2580.png?size=50)](https://github.com/wwkk2580)\n[![missuo](https://github.com/missuo.png?size=50)](https://github.com/missuo)\n<a href=\"https://github.com/xueli12\" target=\"_blank\"><img src=\"https://github.com/xueli12.png?size=50\" alt=\"xueli12\" style=\"width:53px; height:51px;\" /></a>\n<a href=\"https://github.com/kaine1973\" target=\"_blank\"><img src=\"https://github.com/kaine1973.png?size=50\" alt=\"kaine1973\" style=\"width:53px; height:51px;\" /></a>\n<a href=\"https://github.com/yinruiqing\" target=\"_blank\"><img src=\"https://github.com/yinruiqing.png?size=50\" alt=\"yinruiqing\" style=\"width:53px; height:51px;\" /></a>\n<a href=\"https://github.com/Max-Tortoise\" target=\"_blank\"><img src=\"https://github.com/Max-Tortoise.png?size=50\" alt=\"Max-Tortoise\" style=\"width:53px; height:51px;\" /></a>\n[![justdoiting](https://github.com/justdoiting.png?size=50)](https://github.com/justdoiting)\n[![dhbxs](https://github.com/dhbxs.png?size=50)](https://github.com/dhbxs)\n[![wujiyu115](https://github.com/wujiyu115.png?size=50)](https://github.com/wujiyu115)\n[![zhanghao333](https://github.com/zhanghao333.png?size=50)](https://github.com/zhanghao333)\n<a href=\"https://github.com/gyc0123\" target=\"_blank\"><img src=\"https://github.com/gyc0123.png?size=50\" alt=\"gyc0123\" style=\"width:53px; height:51px;\" /></a>\n\n&ensp;&ensp; [![HoratioShaw](https://github.com/HoratioShaw.png?size=50)](https://github.com/HoratioShaw)\n[![nov30th](https://github.com/nov30th.png?size=50)](https://github.com/nov30th)\n&emsp;\n\n## ⏳提交日志\n\n- 20241130\n  - 新增shopee、youtube直播录制\n  - 新增支持自定义m3u8、flv地址录制\n  - 新增自定义执行脚本，支持python、bat、bash等\n  - 修复YY直播、花椒直播和小红书直播录制\n  - 修复b站标题获取错误\n  - 修复log日志错误\n- 20241030\n  - 新增嗨秀直播、vv星球直播、17Live、浪Live、SOOP、畅聊直播(原时光直播)、飘飘直播、六间房直播、乐嗨直播、花猫直播等10个平台直播录制\n  - 修复小红书直播录制，支持小红书作者主页地址录制直播\n  - 新增支持ntfy消息推送，以及新增支持批量推送多个地址（逗号分隔多个推送地址)\n  - 修复Liveme直播录制、twitch直播录制\n  - 新增Windows平台一键停止录制VB脚本程序\n- 20241005\n  - 新增邮箱和Bark推送\n  - 新增直播注释停止录制\n  - 优化分段录制\n  - 重构部分代码\n- 20240928\n  - 新增知乎直播、CHZZK直播录制\n  - 修复音播直播录制\n- 20240903\n  - 新增抖音双屏录制、音播直播录制\n  - 修复PandaTV、bigo直播录制\n- 20240713\n  - 新增映客直播录制\n- 20240705\n  - 新增时光直播录制\n- 20240701\n  - 修复虎牙直播录制2分钟断流问题\n  - 新增自定义直播推送内容\n- 20240621\n  - 新增Acfun、ShowRoom直播录制\n  - 修复微博录制、新增直播源线路\n  - 修复斗鱼直播60帧录制\n  - 修复酷狗直播录制\n  - 修复TikTok部分无法解析直播源\n  - 修复抖音无法录制连麦直播\n- 20240510\n  - 修复部分虎牙直播间录制错误\n- 20240508\n  - 修复花椒直播录制\n  - 更改文件路径解析方式 [@kaine1973](https://github.com/kaine1973)\n- 20240506\n  - 修复抖音录制画质解析bug\n  - 修复虎牙录制 60帧最高画质问题\n  - 新增流星直播录制\n- 20240427\n  - 新增LiveMe、花椒直播录制\n- 20240425\n  - 新增TwitchTV直播录制\n- 20240424\n  - 新增酷狗直播录制、优化PopkonTV直播录制\n- 20240423\n  - 新增百度直播录制、微博直播录制\n  - 修复斗鱼录制直播回放的问题\n  - 新增直播源地址显示以及输出到日志文件设置\n- 20240311\n  - 修复海外平台录制bug，增加画质选择，增强录制稳定性\n  - 修复虎牙录制bug (虎牙`一起看`频道 有特殊限制，有时无法录制)\n- 20240309\n  - 修复虎牙直播、小红书直播和B站直播录制\n  - 新增5个直播平台录制，包括winktv、flextv、look、popkontv、twitcasting\n  - 新增部分海外平台账号密码配置，实现自动登录并更新配置文件中的cookie\n  - 新增自定义配置需要使用代理录制的平台\n  - 新增只推送开播消息不进行录制设置\n  - 修复了一些bug\n- 20240209\n  - 优化AfreecaTV录制，新增账号密码登录获取cookie以及持久保存\n  - 修复了小红书直播因官方更新直播域名，导致无法录制直播的问题\n  - 修复了更新URL配置文件的bug\n  - 最后，祝大家新年快乐！\n\n<details><summary>点击展开更多提交日志</summary>\n\n- 20240129\n  - 新增猫耳FM直播录制\n- 20240127\n  - 新增千度热播直播录制、新增pandaTV(韩国)直播录制\n  - 新增telegram直播状态消息推送，修复了某些bug\n  - 新增自定义设置不同直播间的录制画质(即每个直播间录制画质可不同)\n  - 修改录制视频保存路径为 `downloads` 文件夹，并且分平台进行保存。\n- 20240114\n  - 新增网易cc直播录制，优化ffmpeg参数，修改AfreecaTV输入直播地址格式\n  - 修改日志记录器 @[iridescentGray](https://github.com/iridescentGray)\n- 20240102\n  - 修复Linux上运行，新增docker配置文件\n- 20231210\n  - 修复录制分段bug，修复bigo录制检测bug\n  - 新增自定义修改录制主播名\n  - 新增AfreecaTV直播录制，修复某些可能会发生的bug\n- 20231207\n  - 新增blued直播录制，修复YY直播录制，新增直播结束消息推送\n- 20231206\n  - 新增bigo直播录制\n- 20231203\n  - 新增小红书直播录制（全网首发），目前小红书官方没有切换清晰度功能，因此直播录制也只有默认画质\n  - 小红书录制暂时无法循环监测，每次主播开启直播，都要重新获取一次链接\n  - 获取链接的方式为 将直播间转发到微信，在微信中打开后，复制页面的链接。\n- 20231030\n  - 本次更新只是进行修复，没时间新增功能。\n  - 欢迎各位大佬提pr 帮忙更新维护\n- 20230930\n  - 新增抖音从接口获取直播流，增强稳定性\n  - 修改快手获取直播流的方式，改用从官方接口获取\n  - 祝大家中秋节快乐！\n- 20230919\n  - 修复了快手版本更新后录制出错的问题，增加了其自动获取cookie(~~稳定性未知~~)\n  - 修复了TikTok显示正在直播但不进行录制的问题\n- 20230907\n  - 修复了因抖音官方更新了版本导致的录制出错以及短链接转换出错\n  - 修复B站无法录制原画视频的bug\n  - 修改了配置文件字段，新增各平台自定义设置Cookie\n- 20230903\n  - 修复了TikTok录制时报644无法录制的问题\n  - 新增直播状态推送到钉钉和微信的功能，如有需要请看 [设置推送教程](https://d04vqdiqwr3.feishu.cn/docx/XFPwdDDvfobbzlxhmMYcvouynDh?from=from_copylink)\n  - 最近比较忙，其他问题有时间再更新\n- 20230816\n  - 修复斗鱼直播（官方更新了字段）和快手直播录制出错的问题\n- 20230814\n  - 新增B站直播录制\n  - 写了一个在线播放M3U8和FLV视频的网页源码，打开即可食用\n- 20230812\n  - 新增YY直播录制\n- 20230808\n  - 修复主播重新开播无法再次录制的问题\n- 20230807\n  - 新增了斗鱼直播录制\n  - 修复显示录制完成之后会重新开始录制的问题\n- 20230805\n  - 新增了虎牙直播录制，其暂时只能用flv视频流进行录制\n  - Web API 新增了快手和虎牙这两个平台的直播流解析（TikTok要代理）\n- 20230804\n  - 新增了快手直播录制，优化了部分代码\n  - 上传了一个自动化获取抖音直播间页面Cookie的代码，可以用于录制\n- 20230803\n  - 通宵更新 \n  - 新增了国际版抖音TikTok的直播录制，去除冗余 简化了部分代码\n- 20230724\t\n  - 新增了一个通过抖音直播间地址获取直播视频流链接的API接口，上传即可用\n  </details>\n  &emsp;\n\n## 有问题可以提issue, 我会在这里持续添加更多直播平台的录制 欢迎Star\n#### \n"
        },
        {
          "name": "StopRecording.vbs",
          "type": "blob",
          "size": 2.5595703125,
          "content": "'********************************************************************************************/\n'* File Name       : StopRecording.vbs\n'* Created Date  : 2024-10-15 01:50:30\n'* Author            : Hmily\n'* GitHub            : http://github.com/ihmily\n'* Description     : This script is designed to terminate the process of live recording\n'********************************************************************************************/\n\nDim objWMIService, colProcesses, objProcess\nDim intResponse\nstrComputer = \".\"\nOn Error Resume Next\nintResponse = MsgBox(\"确定要结束所有后台直播录制进程吗？\", vbYesNo + vbQuestion, \"确认结束进程\")\n\nIf intResponse = vbYes Then\n    Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2\")\n    If Err.Number <> 0 Then\n        Err.Clear\n    End If\n\n    Set colProcesses = objWMIService.ExecQuery(\"Select * from Win32_Process Where Name = 'ffmpeg.exe'\")\n    Set colProcesses2 = objWMIService.ExecQuery(\"Select * from Win32_Process Where Name = 'pythonw.exe'\")\n    Set colProcesses3 = objWMIService.ExecQuery(\"Select * from Win32_Process Where Name = 'DouyinLiveRecorder.exe'\")\n    If Err.Number <> 0 Then\n        Err.Clear\n    End If\n\n    If Not objWMIService Is Nothing And Not colProcesses Is Nothing  And Not colProcesses2 Is Nothing Then\n        If colProcesses2.Count = 0 And colProcesses3.Count = 0 Then\n            MsgBox \"没有找到录制程序的进程\", vbExclamation, \"提示信息\"\n            WScript.Quit(1)\n        Else\n            For Each objProcess in colProcesses\n                objProcess.Terminate()\n                If Err.Number <> 0 Then\n                    objShell.Run \"taskkill /f /im \" & objProcess.Name, 0, True\n                    Err.Clear\n                End If                \n            Next\n        End If\n    Else\n        objShell.Run \"taskkill /f /im \" & objProcess.Name, 0, True\n    End If\n    MsgBox \"已成功结束正在录制直播的进程！\" & vbCrLf & \"关闭此窗口30秒后自动停止录制程序\", vbInformation, \"提示信息\"\n\n    WScript.Sleep 10000\n    If colProcesses3.Count <> 0 Then\n        Set colProcesses_ = colProcesses3\n    Else\n        Set colProcesses_ = colProcesses2\n    End If\n    For Each objProcess in colProcesses_\n        objProcess.Terminate()\n        If Err.Number <> 0 Then\n            objShell.Run \"taskkill /f /im \" & objProcess.Name, 0, True\n            Err.Clear\n        End If         \n    Next\nElse\n    MsgBox \"已取消结束录制操作\", vbExclamation, \"提示信息\"\nEnd If\n\nOn Error GoTo 0\nSet objWMIService = Nothing\nSet colProcesses = Nothing\nSet colProcesses2 = Nothing\nSet colProcesses3 = Nothing\nSet objProcess = Nothing\nSet objShell = Nothing"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo.py",
          "type": "blob",
          "size": 6.9140625,
          "content": "# -*- coding: utf-8 -*-\nfrom douyinliverecorder.logger import logger\nfrom douyinliverecorder import spider\n\n# 以下示例直播间链接不保证时效性，请自行查看链接是否能正常访问\n# Please note that the following example live room links may not be up-to-date;\nLIVE_STREAM_CONFIG = {\n    \"douyin\": {\n        \"url\": \"https://live.douyin.com/745964462470\",\n        \"func\": spider.get_douyin_app_stream_data,\n    },\n    \"tiktok\": {\n        \"url\": \"https://www.tiktok.com/@pearlgaga88/live\",\n        \"func\": spider.get_tiktok_stream_data,\n    },\n    \"kuaishou\": {\n        \"url\": \"https://live.kuaishou.com/u/yall1102\",\n        \"func\": spider.get_kuaishou_stream_data,\n    },\n    \"huya\": {\n        \"url\": \"https://www.huya.com/116\",\n        \"func\": spider.get_huya_app_stream_url,\n    },\n    \"douyu\": {\n        \"url\": \"https://www.douyu.com/topic/wzDBLS6?rid=4921614&dyshid=\",\n        \"func\": spider.get_douyu_info_data,\n    },\n    \"yy\": {\n        \"url\": \"https://www.yy.com/22490906/22490906\",\n        \"func\": spider.get_yy_stream_data,\n    },\n    \"bilibili\": {\n        \"url\": \"https://live.bilibili.com/21593109\",\n        \"func\": spider.get_bilibili_stream_data,\n    },\n    \"xhs\": {\n        \"url\": \"https://www.xiaohongshu.com/user/profile/6330049c000000002303c7ed?appuid=5f3f478a00000000010005b3\",\n        \"func\": spider.get_xhs_stream_url,\n    },\n    \"bigo\": {\n        \"url\": \"https://www.bigo.tv/cn/716418802\",\n        \"func\": spider.get_bigo_stream_url,\n    },\n    \"blued\": {\n        \"url\": \"https://app.blued.cn/live?id=Mp6G2R\",\n        \"func\": spider.get_blued_stream_url,\n    },\n    \"sooplive\": {\n        \"url\": \"https://play.sooplive.co.kr/sw7love\",\n        \"func\": spider.get_sooplive_stream_data,\n    },\n    \"netease\": {\n        \"url\": \"https://cc.163.com/583946984\",\n        \"func\": spider.get_netease_stream_data,\n    },\n    \"qiandurebo\": {\n        \"url\": \"https://qiandurebo.com/web/video.php?roomnumber=33333\",\n        \"func\": spider.get_qiandurebo_stream_data,\n    },\n    \"pandatv\": {\n        \"url\": \"https://www.pandalive.co.kr/live/play/bara0109\",\n        \"func\": spider.get_pandatv_stream_data,\n    },\n    \"maoerfm\": {\n        \"url\": \"https://fm.missevan.com/live/868895007\",\n        \"func\": spider.get_maoerfm_stream_url,\n    },\n    \"winktv\": {\n        \"url\": \"https://www.winktv.co.kr/live/play/anjer1004\",\n        \"func\": spider.get_winktv_stream_data,\n    },\n    \"flextv\": {\n        \"url\": \"https://www.flextv.co.kr/channels/593127/live\",\n        \"func\": spider.get_flextv_stream_data,\n    },\n    \"looklive\": {\n        \"url\": \"https://look.163.com/live?id=65108820&position=3\",\n        \"func\": spider.get_looklive_stream_url,\n    },\n    \"popkontv\": {\n        \"url\": \"https://www.popkontv.com/live/view?castId=wjfal007&partnerCode=P-00117\",\n        \"func\": spider.get_popkontv_stream_url,\n    },\n    \"twitcasting\": {\n        \"url\": \"https://twitcasting.tv/c:uonq\",\n        \"func\": spider.get_twitcasting_stream_url,\n    },\n    \"baidu\": {\n        \"url\": \"https://live.baidu.com/m/media/pclive/pchome/live.html?room_id=9175031377&tab_category\",\n        \"func\": spider.get_baidu_stream_data,\n    },\n    \"weibo\": {\n        \"url\": \"https://weibo.com/u/7849520225\",\n        \"func\": spider.get_weibo_stream_data,\n    },\n    \"kugou\": {\n        \"url\": \"https://fanxing2.kugou.com/50428671?refer=2177&sourceFrom=\",\n        \"func\": spider.get_kugou_stream_url,\n    },\n    \"twitchtv\": {\n        \"url\": \"https://www.twitch.tv/gamerbee\",\n        \"func\": spider.get_twitchtv_stream_data,\n    },\n    \"liveme\": {\n        \"url\": \"https://www.liveme.com/zh/v/17141937295821012854/index.html\",\n        \"func\": spider.get_liveme_stream_url,\n    },\n    \"huajiao\": {\n        \"url\": \"https://www.huajiao.com/user/207446325\",\n        \"func\": spider.get_huajiao_stream_url,\n    },\n    \"showroom\": {\n        \"url\": \"https://www.showroom-live.com/room/profile?room_id=511033\",\n        \"func\": spider.get_showroom_stream_data,\n    },\n    \"acfun\": {\n        \"url\": \"https://live.acfun.cn/live/17912421\",\n        \"func\": spider.get_acfun_stream_data,\n    },\n    \"changliao\": {\n        \"url\": \"https://www.tlclw.com/801044397\",\n        \"func\": spider.get_changliao_stream_url,\n    },\n    \"yingke\": {\n        \"url\": \"https://www.inke.cn/liveroom/index.html?uid=710032101&id=1720857535354099\",\n        \"func\": spider.get_yingke_stream_url,\n    },\n    \"yinbo\": {\n        \"url\": \"https://live.ybw1666.com/800008687\",\n        \"func\": spider.get_yinbo_stream_url,\n    },\n    \"zhihu\": {\n        \"url\": \"https://www.zhihu.com/people/ac3a467005c5d20381a82230101308e9\",\n        \"func\": spider.get_zhihu_stream_url,\n    },\n    \"chzzk\": {\n        \"url\": \"https://chzzk.naver.com/live/458f6ec20b034f49e0fc6d03921646d2\",\n        \"func\": spider.get_chzzk_stream_data,\n    },\n    \"haixiu\": {\n        \"url\": \"https://www.haixiutv.com/6095106\",\n        \"func\": spider.get_haixiu_stream_url,\n    },\n    \"vvxqiu\": {\n        \"url\": \"https://h5webcdn-pro.vvxqiu.com//activity/videoShare/videoShare.html?h5Server=https://h5p.vvxqiu.com\"\n               \"&roomId=LP115924473&platformId=vvstar\",\n        \"func\": spider.get_vvxqiu_stream_url,\n    },\n    \"17live\": {\n        \"url\": \"https://17.live/en/live/6302408\",\n        \"func\": spider.get_17live_stream_url,\n    },\n    \"langlive\": {\n        \"url\": \"https://www.lang.live/en-US/room/3349463\",\n        \"func\": spider.get_langlive_stream_url,\n    },\n    \"pplive\": {\n        \"url\": \"https://m.pp.weimipopo.com/live/preview.html?uid=91648673&anchorUid=91625862&app=plpl\",\n        \"func\": spider.get_pplive_stream_url,\n    },\n    \"6room\": {\n        \"url\": \"https://v.6.cn/634435\",\n        \"func\": spider.get_6room_stream_url,\n    },\n    \"lehai\": {\n        \"url\": \"https://www.lehaitv.com/8059096\",\n        \"func\": spider.get_haixiu_stream_url,\n    },\n    \"huamao\": {\n        \"url\": \"https://h.catshow168.com/live/preview.html?uid=19066357&anchorUid=18895331\",\n        \"func\": spider.get_pplive_stream_url,\n    },\n    \"shopee\": {\n        \"url\": \"https://sg.shp.ee/GmpXeuf?uid=1006401066&session=802458\",\n        \"func\": spider.get_shopee_stream_url,\n    },\n    \"youtube\": {\n        \"url\": \"https://www.youtube.com/watch?v=cS6zS5hi1w0\",\n        \"func\": spider.get_youtube_stream_url,\n    },\n    \"taobao\": {\n        \"url\": \"https://m.tb.cn/h.TWp0HTd\",\n        \"func\": spider.get_taobao_stream_url,\n    },\n    \"jd\": {\n        \"url\": \"https://3.cn/28MLBy-E\",\n        \"func\": spider.get_jd_stream_url,\n    }\n}\n\n\ndef test_live_stream(platform_name: str, proxy_addr=None, cookies=None) -> None:\n    if platform_name in LIVE_STREAM_CONFIG:\n        config = LIVE_STREAM_CONFIG[platform_name]\n        try:\n            stream_data = config['func'](config['url'], proxy_addr=proxy_addr, cookies=cookies)\n            logger.debug(f\"Stream data for {platform_name}: {stream_data}\")\n        except Exception as e:\n            logger.error(f\"Error fetching stream data for {platform_name}: {e}\")\n    else:\n        logger.warning(f\"No configuration found for platform: {platform_name}\")\n\n\nif __name__ == \"__main__\":\n    platform = \"douyin\"\n    test_live_stream(platform)\n"
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 0.3291015625,
          "content": "version: '3.8'\n\nservices:\n  app:\n    image: ihmily/douyin-live-recorder:latest\n    environment:\n      - TERM=xterm-256color\n    tty: true\n    stdin_open: true\n    #build: .\n    volumes:\n      - ./config:/app/config\n      - ./logs:/app/logs\n      - ./backup_config:/app/backup_config\n      - ./downloads:/app/downloads\n    restart: always"
        },
        {
          "name": "douyinliverecorder",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffmpeg_install.py",
          "type": "blob",
          "size": 8.427734375,
          "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\nAuthor: Hmily\nGitHub: https://github.com/ihmily\nCopyright (c) 2024 by Hmily, All Rights Reserved.\n\"\"\"\n\nimport os\nimport re\nimport subprocess\nimport sys\nimport platform\nimport zipfile\nfrom pathlib import Path\nimport requests\nfrom tqdm import tqdm\nfrom douyinliverecorder.logger import logger\n\ncurrent_platform = platform.system()\nexecute_dir = os.path.split(os.path.realpath(sys.argv[0]))[0]\ncurrent_env_path = os.environ.get('PATH')\n\n\ndef unzip_file(zip_path: str | Path, extract_to: str | Path, delete: bool = True) -> None:\n    if not os.path.exists(extract_to):\n        os.makedirs(extract_to)\n\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n\n    if delete and os.path.exists(zip_path):\n        os.remove(zip_path)\n\n\ndef get_lanzou_download_link(url: str, password: str | None = None) -> str | None:\n    try:\n        headers = {\n            'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',\n            'Origin': 'https://wweb.lanzouv.com',\n            'Referer': 'https://wweb.lanzouv.com/iXncv0dly6mh',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                          'Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0',\n        }\n        response = requests.get(url, headers=headers)\n        sign = re.search(\"var skdklds = '(.*?)';\", response.text).group(1)\n        data = {\n            'action': 'downprocess',\n            'sign': sign,\n            'p': password,\n            'kd': '1',\n        }\n        response = requests.post('https://wweb.lanzouv.com/ajaxm.php', headers=headers, data=data)\n        json_data = response.json()\n        download_url = json_data['dom'] + \"/file/\" + json_data['url']\n        response = requests.get(download_url, headers=headers)\n        return response.url\n    except Exception as e:\n        logger.error(f\"Failed to obtain ffmpeg download address. {e}\")\n\n\ndef install_ffmpeg_windows():\n    try:\n        logger.warning(\"ffmpeg is not installed.\")\n        logger.debug(\"Installing the stable version of ffmpeg for Windows...\")\n        ffmpeg_url = get_lanzou_download_link('https://wweb.lanzouv.com/in54b2gmj24b', 'e3ut')\n        if ffmpeg_url:\n            full_file_name = 'ffmpeg-7.1.zip'\n            version = 'v7.1'\n            zip_file_path = Path(execute_dir) / full_file_name\n            if Path(zip_file_path).exists():\n                logger.debug(\"ffmpeg installation file already exists, start install...\")\n            else:\n                response = requests.get(ffmpeg_url, stream=True)\n                total_size = int(response.headers.get('Content-Length', 0))\n                block_size = 1024\n\n                with tqdm(total=total_size, unit=\"B\", unit_scale=True,\n                          ncols=100, desc=f'Downloading ffmpeg ({version})') as t:\n                    with open(zip_file_path, 'wb') as f:\n                        for data in response.iter_content(block_size):\n                            t.update(len(data))\n                            f.write(data)\n\n            unzip_file(zip_file_path, execute_dir)\n            extract_dir_path = str(zip_file_path).rsplit('.', maxsplit=1)[0]\n            os.environ['PATH'] = execute_dir + '/' + extract_dir_path + os.pathsep + current_env_path\n            result = subprocess.run([\"ffmpeg\", \"-version\"], capture_output=True)\n            if result.returncode == 0:\n                logger.debug('ffmpeg installation was successful')\n            else:\n                logger.error('ffmpeg installation failed. Please manually install ffmpeg by yourself')\n            return True\n        else:\n            logger.error(\"Please manually install ffmpeg by yourself\")\n    except Exception as e:\n        logger.error(f\"type: {type(e).__name__}, ffmpeg installation failed {e}\")\n\n\ndef install_ffmpeg_mac():\n    logger.warning(\"ffmpeg is not installed.\")\n    logger.debug(\"Installing the stable version of ffmpeg for macOS...\")\n    try:\n        result = subprocess.run([\"brew\", \"install\", \"ffmpeg\"], capture_output=True)\n        if result.returncode == 0:\n            logger.debug('ffmpeg installation was successful. Restart for changes to take effect.')\n            return True\n        else:\n            logger.error(\"ffmpeg installation failed\")\n    except subprocess.CalledProcessError as e:\n        logger.error(f\"Failed to install ffmpeg using Homebrew. {e}\")\n        logger.error(\"Please install ffmpeg manually or check your Homebrew installation.\")\n    except Exception as e:\n        logger.error(f\"An unexpected error occurred: {e}\")\n\n\ndef install_ffmpeg_linux():\n    is_RHS = True\n\n    try:\n        logger.warning(\"ffmpeg is not installed.\")\n        logger.debug(\"Trying to install the stable version of ffmpeg\")\n        result = subprocess.run(['yum', '-y', 'update'], capture_output=True)\n        if result.returncode != 0:\n            logger.error(f\"Failed to update package lists using yum.\")\n            return False\n\n        result = subprocess.run(['yum', 'install', '-y', 'ffmpeg'], capture_output=True)\n        if result.returncode == 0:\n            logger.debug(\"ffmpeg installation was successful using yum. Restart for changes to take effect.\")\n            return True\n        logger.error(result.stderr.decode('utf-8').strip())\n    except FileNotFoundError:\n        logger.debug(\"yum command not found, trying to install using apt...\")\n        is_RHS = False\n    except Exception as e:\n        logger.error(f\"An error occurred while trying to install ffmpeg using yum: {e}\")\n\n    if not is_RHS:\n        try:\n            logger.debug(\"Trying to install the stable version of ffmpeg for Linux using apt...\")\n            result = subprocess.run(['apt', 'update'], capture_output=True)\n            if result.returncode != 0:\n                logger.error(\"Failed to update package lists using apt\")\n                return False\n\n            result = subprocess.run(['apt', 'install', '-y', 'ffmpeg'], capture_output=True)\n            if result.returncode == 0:\n                logger.debug(\"ffmpeg installation was successful using apt. Restart for changes to take effect.\")\n                return True\n            else:\n                logger.error(result.stderr.decode('utf-8').strip())\n        except FileNotFoundError:\n            logger.error(\"apt command not found, unable to install ffmpeg. Please manually install ffmpeg by yourself\")\n        except Exception as e:\n            logger.error(f\"An error occurred while trying to install ffmpeg using apt: {e}\")\n    logger.error(\"Manual installation of ffmpeg is required. Please manually install ffmpeg by yourself.\")\n    return False\n\n\ndef install_ffmpeg() -> bool:\n    if current_platform == \"Windows\":\n        return install_ffmpeg_windows()\n    elif current_platform == \"Linux\":\n        return install_ffmpeg_linux()\n    elif current_platform == \"Darwin\":\n        return install_ffmpeg_mac()\n    else:\n        logger.debug(f\"ffmpeg auto installation is not supported on this platform: {current_platform}. \"\n                     f\"Please install ffmpeg manually.\")\n    return False\n\n\ndef ensure_ffmpeg_installed(func):\n    def wrapper(*args, **kwargs):\n        try:\n            result = subprocess.run(['ffmpeg', '-version'], capture_output=True)\n            version = result.stdout.strip()\n            if result.returncode == 0 and version:\n                return func(*args, **kwargs)\n        except FileNotFoundError:\n            pass\n        return False\n\n    def wrapped_func(*args, **kwargs):\n        if sys.version_info >= (3, 7):\n            res = wrapper(*args, **kwargs)\n        else:\n            res = wrapper(*args, **kwargs)\n        if not res:\n            install_ffmpeg()\n            res = wrapper(*args, **kwargs)\n\n        if not res:\n            raise RuntimeError(\"ffmpeg is not installed.\")\n\n        return func(*args, **kwargs)\n\n    return wrapped_func\n\n\ndef check_ffmpeg_installed() -> bool:\n    try:\n        result = subprocess.run(['ffmpeg', '-version'], capture_output=True)\n        version = result.stdout.strip()\n        if result.returncode == 0 and version:\n            return True\n    except FileNotFoundError:\n        pass\n    except OSError as e:\n        print(f\"OSError occurred: {e}. ffmpeg may not be installed correctly or is not available in the system PATH.\")\n        print(\"Please delete the ffmpeg and try to download and install again.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n    return False\n\n\ndef check_ffmpeg() -> bool:\n    if not check_ffmpeg_installed():\n        return install_ffmpeg()\n    return True\n"
        },
        {
          "name": "i18n.py",
          "type": "blob",
          "size": 0.8681640625,
          "content": "import os\nimport sys\nimport gettext\nimport inspect\nimport builtins\nfrom pathlib import Path\n\n\ndef init_gettext(locale_dir, locale_name):\n    gettext.bindtextdomain('zh_CN', locale_dir)\n    gettext.textdomain('zh_CN')\n    os.environ['LANG'] = f'{locale_name}.utf8'\n    return gettext.gettext\n\n\nexecute_dir = os.path.split(os.path.realpath(sys.argv[0]))[0]\nif os.path.exists(Path(execute_dir) / '_internal/i18n'):\n    locale_path = Path(execute_dir) / '_internal/i18n'\nelse:\n    locale_path = Path(execute_dir) / 'i18n'\n_tr = init_gettext(locale_path, 'zh_CN')\noriginal_print = builtins.print\npackage_name = 'douyinliverecorder'\n\n\ndef translated_print(*args, **kwargs):\n    for arg in args:\n        if package_name in inspect.stack()[1].filename:\n            translated_arg = _tr(str(arg))\n        else:\n            translated_arg = str(arg)\n        original_print(translated_arg, **kwargs)\n"
        },
        {
          "name": "i18n",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 7.48046875,
          "content": "<!--\n    Project: DouyinLiveRecorder\n    Author: Hmily\n    Build: 2023.08.14 - 20:24:05\n    GitHub Project URL: https://github.com/ihmily/DouyinLiveRecorder\n-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"referrer\" content=\"never\"> \n    <title>M3U8 视频播放器</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/hls.js@latest/dist/hls.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/flv.js@1.6.2/dist/flv.min.js\"></script>\n\n    <style>\n        body {\n            font-family: 'Roboto', Arial, sans-serif;\n            background-color: #1a237e;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            padding: 0;\n            color: #ffffff;\n            background-image: linear-gradient(120deg, #1a237e 0%, #283593 50%, #4a148c 100%);\n        }\n\n\n        .container {\n            max-width: 640px;\n            width: 80%;\n            padding: 20px;\n            background-color: #ffffff;\n            border-radius: 10px;\n            box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.15);\n        }\n\n        #videoPlayer {\n            width: 100%;\n            height: 0;\n            padding-bottom: 56.25%;\n            position: relative;\n            background-color: #000;\n            border-radius: 5px;\n            box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.15);\n            display: none;\n        }\n\n        video {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n        }\n\n        #videoUrlInput{\n        \tdisplay: block;\n        \twidth: 100%;\n        \tmargin: 10px 0;\n        \tpadding: 8px;\n        \tborder-radius: 5px;\n        \tborder: 1px solid #ccc;\n            box-sizing: border-box;\n        }\n\n        #playButton {\n            display: block;\n            width: 100%;\n            padding: 10px;\n            background-color: #283593;\n            color: white;\n            font-weight: bold;\n            border-radius: 5px;\n            border: none;\n            cursor: pointer;\n            transition: background-color 0.3s;\n            margin: 0 0 10px 0;\n            box-shadow: 0px 2px 4px 0px rgba(0,0,0,0.15);\n        }\n\n        #playButton:hover {\n            background-color: #1a237e;\n        }\n\n        .description {\n            margin-top: 20px;\n            line-height: 1.4;\n            font-size: 14px;\n            text-align: left;\n            background-color: #f8f9fa;\n            padding: 15px;\n            border-radius: 5px;\n            \n            box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.15);\n            display: block;\n        }\n        .footer {\n          margin-top: 30px;\n          text-align: center;\n          font-size: 14px;\n          color: white;\n        }\n\n        p{\n            color: black;\n        }\n        \n        a.no_style {\n            color: inherit;\n            text-decoration: none;\n        }\n        @media screen and (max-width: 768px) {\n            .container {\n                width: 90%;\n                border-radius: 0;\n                box-shadow: none;\n                margin-top:30px;\n            }\n            body {\n                overflow-y: scroll;\n            }\n            #videoUrlInput{\n                \n            \tmargin-top: 30px;\n            \tmargin-bottom: 10px;\n            }\n        \n        }\n\n    </style>\n</head>\n<body>\n\t<div class=\"container\">\n\t    <input type=\"text\" id=\"videoUrlInput\" placeholder=\"请输入 M3U8或者FLV 视频链接\">\n\t    <button id=\"playButton\">播放视频</button>\n\t    <div id=\"videoPlayer\">\n\t        <video controls></video>\n\t    </div>\n\t    <div class=\"description\">\n            <p><strong>说明</strong><p>\n            <p>M3U8文件格式</p>\n            <p>M3U8文件是采用UTF-8编码格式的M3U文件。M3U文件本身是一个纯文本索引文件，其核心功能是记录多媒体文件链接。当用户打开此类文件时，播放软件会根据索引查找相应的音视频文件网络地址，然后进行在线播放。</p>\n            <p>M3U最初设计用于播放音频文件，例如MP3。但随着时间推移，更多的播放器和软件开始使用M3U来播放视频文件列表，同时也支持在线流媒体音频源的指定。目前，许多播放器和软件都兼容M3U文件格式。</p>\n            <p>FLV文件格式（Flash Video Format）是Adobe公司开发的一种专门用于网页视频播放的文件格式。FLV格式的视频文件通常用于播放短视频和在线流媒体，可以嵌入到网页中供用户观看。FLV视频通常由Adobe Flash Player播放器播放，而其他第三方播放器也支持此格式。</p>\n        </div>\n        <div class=\"footer\">\n          <p>&copy; 2023 <a href='https://github.com/ihmily/DouyinLiveRecorder' class=\"no_style\" target=\"_blank\">Hmily</a>. All rights reserved.</p>\n        </div>\n\t    <script>\n    \t    function httpToHttps(url) {\n              if (url.startsWith(\"http://\")) {\n                return url.replace(\"http://\", \"https://\");\n              }\n              return url;\n            }\n\t        function playVideo() {\n            let videoUrl = document.getElementById('videoUrlInput').value;\n            const video = document.querySelector('#videoPlayer video');\n            const description = document.querySelector('.description');\n            if (videoUrl == ''){\n                alert('请输入视频链接');\n                return;\n            }\n            videoUrl = httpToHttps(videoUrl);\n            if (videoUrl.includes('.m3u8')) {\n                videoPlayer.style.display = 'block';\n                description.style.display = 'none';\n                if (Hls.isSupported()) {\n                    const hls = new Hls();\n                    hls.attachMedia(video);\n                    hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n                        hls.loadSource(videoUrl);\n                    });\n                } else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n                    video.src = videoUrl;\n                } else {\n                    alert('M3U8 格式不受您的浏览器支持。');\n                    console.error('M3U8 格式不受您的浏览器支持。');\n                    return;\n                }\n            } else if (videoUrl.includes('.flv')) {\n                if (flvjs.isSupported()) {\n                    const flvPlayer = flvjs.createPlayer({\n                        type: 'flv',\n                        url: videoUrl\n                    });\n                    flvPlayer.attachMediaElement(video);\n                    flvPlayer.load();\n                    flvPlayer.play();\n                } else {\n                    alert('FLV 格式不受您的浏览器支持。');\n                    console.error('FLV 格式不受您的浏览器支持。');\n                    return;\n                }\n\n                videoPlayer.style.display = 'block';\n                description.style.display = 'none';\n            } else {\n                console.error('不支持播放该视频格式。');\n                alert('不支持播放该视频格式。');\n            }\n        }\n\n        document.getElementById('playButton').addEventListener('click', playVideo);\n\t    </script>\n\t</div>\n</body>\n</html>\n"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 99.017578125,
          "content": "# -*- encoding: utf-8 -*-\n\n\"\"\"\nAuthor: Hmily\nGitHub: https://github.com/ihmily\nDate: 2023-07-17 23:52:05\nUpdate: 2024-11-30 23:35:00\nCopyright (c) 2023-2024 by Hmily, All Rights Reserved.\nFunction: Record live stream video.\n\"\"\"\n\nimport os\nimport sys\nimport builtins\nimport subprocess\nimport signal\nimport threading\nimport time\nimport datetime\nimport re\nimport shutil\nimport random\nimport uuid\nfrom pathlib import Path\nimport urllib.parse\nimport urllib.request\nfrom urllib.error import URLError, HTTPError\nfrom typing import Any\nimport configparser\nfrom ffmpeg_install import check_ffmpeg\nfrom douyinliverecorder import spider, stream\nfrom douyinliverecorder.proxy import ProxyDetector\nfrom douyinliverecorder.utils import logger\nfrom douyinliverecorder import utils\nfrom msg_push import (\n    dingtalk, xizhi, tg_bot, send_email, bark, ntfy\n)\n\nversion = \"v4.0.2\"\nplatforms = (\"\\n国内站点：抖音|快手|虎牙|斗鱼|YY|B站|小红书|bigo|blued|网易CC|千度热播|猫耳FM|Look|TwitCasting|百度|微博|\"\n             \"酷狗|花椒|流星|Acfun|畅聊|映客|音播|知乎|嗨秀|VV星球|17Live|浪Live|漂漂|六间房|乐嗨|花猫|淘宝|京东\"\n             \"\\n海外站点：TikTok|SOOP|PandaTV|WinkTV|FlexTV|PopkonTV|TwitchTV|LiveMe|ShowRoom|CHZZK|Shopee|Youtube\")\n\nrecording = set()\nerror_count = 0\npre_max_request = 10\nmax_request_lock = threading.Lock()\nerror_window = []\nerror_window_size = 10\nerror_threshold = 5\nmonitoring = 0\nrunning_list = []\nurl_tuples_list = []\nurl_comments = []\ntext_no_repeat_url = []\ncreate_var = locals()\nfirst_start = True\nexit_recording = False\nneed_update_line_list = []\nfirst_run = True\nnot_record_list = []\nstart_display_time = datetime.datetime.now()\nglobal_proxy = False\nrecording_time_list = {}\nscript_path = os.path.split(os.path.realpath(sys.argv[0]))[0]\nconfig_file = f'{script_path}/config/config.ini'\nurl_config_file = f'{script_path}/config/URL_config.ini'\nbackup_dir = f'{script_path}/backup_config'\ntext_encoding = 'utf-8-sig'\nrstr = r\"[\\/\\\\\\:\\*\\？?\\\"\\<\\>\\|&#.。,， ~！· ]\"\nffmpeg_path = f\"{script_path}/ffmpeg.exe\"\ndefault_path = f'{script_path}/downloads'\nos.makedirs(default_path, exist_ok=True)\nfile_update_lock = threading.Lock()\nos_type = os.name\nclear_command = \"cls\" if os_type == 'nt' else \"clear\"\ncolor_obj = utils.Color()\n\n\ndef signal_handler(_signal, _frame):\n    sys.exit(0)\n\n\nsignal.signal(signal.SIGTERM, signal_handler)\n\n\ndef display_info() -> None:\n    global start_display_time\n    time.sleep(5)\n    while True:\n        try:\n            time.sleep(5)\n            if Path(sys.executable).name != 'pythonw.exe':\n                os.system(clear_command)\n            print(f\"\\r共监测{monitoring}个直播中\", end=\" | \")\n            print(f\"同一时间访问网络的线程数: {max_request}\", end=\" | \")\n            print(f\"是否开启代理录制: {'是' if use_proxy else '否'}\", end=\" | \")\n            if split_video_by_time:\n                print(f\"录制分段开启: {split_time}秒\", end=\" | \")\n            else:\n                print(f\"录制分段开启: 否\", end=\" | \")\n            if create_time_file:\n                print(f\"是否生成时间文件: 是\", end=\" | \")\n            print(f\"录制视频质量为: {video_record_quality}\", end=\" | \")\n            print(f\"录制视频格式为: {video_save_type}\", end=\" | \")\n            print(f\"目前瞬时错误数为: {error_count}\", end=\" | \")\n            now = time.strftime(\"%H:%M:%S\", time.localtime())\n            print(f\"当前时间: {now}\")\n\n            if len(recording) == 0:\n                time.sleep(5)\n                if monitoring == 0:\n                    print(\"\\r没有正在监测和录制的直播\")\n                else:\n                    print(f\"\\r没有正在录制的直播 循环监测间隔时间：{delay_default}秒\")\n            else:\n                now_time = datetime.datetime.now()\n                print(\"x\" * 60)\n                no_repeat_recording = list(set(recording))\n                print(f\"正在录制{len(no_repeat_recording)}个直播: \")\n                for recording_live in no_repeat_recording:\n                    rt, qa = recording_time_list[recording_live]\n                    have_record_time = now_time - rt\n                    print(f\"{recording_live}[{qa}] 正在录制中 {str(have_record_time).split('.')[0]}\")\n\n                # print('\\n本软件已运行：'+str(now_time - start_display_time).split('.')[0])\n                print(\"x\" * 60)\n                start_display_time = now_time\n        except Exception as e:\n            logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n\n\ndef update_file(file_path: str, old_str: str, new_str: str, start_str: str = None) -> str | None:\n    if old_str == new_str and start_str is None:\n        return old_str\n    with file_update_lock:\n        file_data = []\n        with open(file_path, \"r\", encoding=text_encoding) as f:\n            try:\n                for text_line in f:\n                    if old_str in text_line:\n                        text_line = text_line.replace(old_str, new_str)\n                        if start_str:\n                            text_line = f'{start_str}{text_line}'\n                    if text_line not in file_data:\n                        file_data.append(text_line)\n            except RuntimeError as e:\n                logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                if ini_URL_content:\n                    with open(file_path, \"w\", encoding=text_encoding) as f2:\n                        f2.write(ini_URL_content)\n                    return old_str\n        if file_data:\n            with open(file_path, \"w\", encoding=text_encoding) as f:\n                f.write(''.join(file_data))\n        return new_str\n\n\ndef delete_line(file_path: str, del_line: str, delete_all: bool = False) -> None:\n    with file_update_lock:\n        with open(file_path, 'r+', encoding=text_encoding) as f:\n            lines = f.readlines()\n            f.seek(0)\n            f.truncate()\n            skip_line = False\n            for txt_line in lines:\n                if del_line in txt_line:\n                    if delete_all or not skip_line:\n                        skip_line = True\n                        continue\n                else:\n                    skip_line = False\n                f.write(txt_line)\n\n\ndef get_startup_info(system_type: str):\n    if system_type == 'nt':\n        startup_info = subprocess.STARTUPINFO()\n        startup_info.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    else:\n        startup_info = None\n    return startup_info\n\n\ndef segment_video(converts_file_path: str, segment_save_file_path: str, segment_format: str, segment_time: str,\n                  is_original_delete: bool = True) -> None:\n    try:\n        if os.path.exists(converts_file_path) and os.path.getsize(converts_file_path) > 0:\n            ffmpeg_command = [\n                \"ffmpeg\",\n                \"-i\", converts_file_path,\n                \"-c:v\", \"copy\",\n                \"-c:a\", \"copy\",\n                \"-map\", \"0\",\n                \"-f\", \"segment\",\n                \"-segment_time\", segment_time,\n                \"-segment_format\", segment_format,\n                \"-reset_timestamps\", \"1\",\n                \"-movflags\", \"+frag_keyframe+empty_moov\",\n                segment_save_file_path,\n            ]\n            _output = subprocess.check_output(\n                ffmpeg_command, stderr=subprocess.STDOUT, startupinfo=get_startup_info(os_type)\n            )\n            if is_original_delete:\n                time.sleep(1)\n                if os.path.exists(converts_file_path):\n                    os.remove(converts_file_path)\n    except subprocess.CalledProcessError as e:\n        logger.error(f'Error occurred during conversion: {e}')\n    except Exception as e:\n        logger.error(f'An unknown error occurred: {e}')\n\n\ndef converts_mp4(converts_file_path: str, is_original_delete: bool = True) -> None:\n    try:\n        if os.path.exists(converts_file_path) and os.path.getsize(converts_file_path) > 0:\n            _output = subprocess.check_output([\n                \"ffmpeg\", \"-i\", converts_file_path,\n                \"-c:v\", \"copy\",\n                \"-c:a\", \"copy\",\n                \"-f\", \"mp4\", converts_file_path.rsplit('.', maxsplit=1)[0] + \".mp4\",\n            ], stderr=subprocess.STDOUT, startupinfo=get_startup_info(os_type))\n            if is_original_delete:\n                time.sleep(1)\n                if os.path.exists(converts_file_path):\n                    os.remove(converts_file_path)\n    except subprocess.CalledProcessError as e:\n        logger.error(f'Error occurred during conversion: {e}')\n    except Exception as e:\n        logger.error(f'An unknown error occurred: {e}')\n\n\ndef converts_m4a(converts_file_path: str, is_original_delete: bool = True) -> None:\n    try:\n        if os.path.exists(converts_file_path) and os.path.getsize(converts_file_path) > 0:\n            _output = subprocess.check_output([\n                \"ffmpeg\", \"-i\", converts_file_path,\n                \"-n\", \"-vn\",\n                \"-c:a\", \"aac\", \"-bsf:a\", \"aac_adtstoasc\", \"-ab\", \"320k\",\n                converts_file_path.rsplit('.', maxsplit=1)[0] + \".m4a\",\n            ], stderr=subprocess.STDOUT, startupinfo=get_startup_info(os_type))\n            if is_original_delete:\n                time.sleep(1)\n                if os.path.exists(converts_file_path):\n                    os.remove(converts_file_path)\n    except subprocess.CalledProcessError as e:\n        logger.error(f'Error occurred during conversion: {e}')\n    except Exception as e:\n        logger.error(f'An unknown error occurred: {e}')\n\n\ndef generate_subtitles(record_name: str, ass_filename: str, sub_format: str = 'srt') -> None:\n    index_time = 0\n    today = datetime.datetime.now()\n    re_datatime = today.strftime('%Y-%m-%d %H:%M:%S')\n\n    def transform_int_to_time(seconds: int) -> str:\n        m, s = divmod(seconds, 60)\n        h, m = divmod(m, 60)\n        return f\"{h:02d}:{m:02d}:{s:02d}\"\n\n    while True:\n        index_time += 1\n        txt = str(index_time) + \"\\n\" + transform_int_to_time(index_time) + ',000 --> ' + transform_int_to_time(\n            index_time + 1) + ',000' + \"\\n\" + str(re_datatime) + \"\\n\\n\"\n\n        with open(f\"{ass_filename}.{sub_format.lower()}\", 'a', encoding=text_encoding) as f:\n            f.write(txt)\n\n        if record_name not in recording:\n            return\n        time.sleep(1)\n        today = datetime.datetime.now()\n        re_datatime = today.strftime('%Y-%m-%d %H:%M:%S')\n\n\ndef adjust_max_request() -> None:\n    global max_request, error_count, pre_max_request, error_window\n    preset = max_request\n\n    while True:\n        time.sleep(5)\n        with max_request_lock:\n            if error_window:\n                error_rate = sum(error_window) / len(error_window)\n            else:\n                error_rate = 0\n\n            if error_rate > error_threshold:\n                max_request = max(1, max_request - 1)\n            elif error_rate < error_threshold / 2 and max_request < preset:\n                max_request += 1\n            else:\n                pass\n\n            if pre_max_request != max_request:\n                pre_max_request = max_request\n                print(f\"\\r同一时间访问网络的线程数动态改为 {max_request}\")\n\n        error_window.append(error_count)\n        if len(error_window) > error_window_size:\n            error_window.pop(0)\n        error_count = 0\n\n\ndef push_message(record_name: str, live_url: str, content: str) -> None:\n    msg_title = push_message_title.strip() or \"直播间状态更新通知\"\n    push_functions = {\n        '微信': lambda: xizhi(xizhi_api_url, msg_title, content),\n        '钉钉': lambda: dingtalk(dingtalk_api_url, content, dingtalk_phone_num, dingtalk_is_atall),\n        '邮箱': lambda: send_email(\n            email_host, login_email, email_password, sender_email, sender_name,\n            to_email, msg_title, content\n        ),\n        'TG': lambda: tg_bot(tg_chat_id, tg_token, content),\n        'BARK': lambda: bark(\n            bark_msg_api, title=msg_title, content=content, level=bark_msg_level, sound=bark_msg_ring\n        ),\n        'NTFY': lambda: ntfy(\n            ntfy_api, title=msg_title, content=content, tags=ntfy_tags, action_url=live_url, email=ntfy_email\n        ),\n    }\n\n    for platform, func in push_functions.items():\n        if platform in live_status_push.upper():\n            try:\n                result = func()\n                print(f'提示信息：已经将[{record_name}]直播状态消息推送至你的{platform},'\n                      f' 成功{len(result[\"success\"])}, 失败{len(result[\"error\"])}')\n            except Exception as e:\n                color_obj.print_colored(f\"直播消息推送到{platform}失败: {e}\", color_obj.RED)\n\n\ndef run_script(command: str) -> None:\n    try:\n        process = subprocess.Popen(\n            command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=get_startup_info(os_type)\n        )\n        stdout, stderr = process.communicate()\n        stdout_decoded = stdout.decode('utf-8')\n        stderr_decoded = stderr.decode('utf-8')\n        if stdout_decoded.strip():\n            print(stdout_decoded)\n        if stderr_decoded.strip():\n            print(stderr_decoded)\n    except PermissionError as e:\n        logger.error(e)\n        logger.error(f'脚本无执行权限!, 若是Linux环境, 请先执行:chmod +x your_script.sh 授予脚本可执行权限')\n    except OSError as e:\n        logger.error(e)\n        logger.error('Please add `#!/bin/bash` at the beginning of your bash script file.')\n\n\ndef clear_record_info(record_name: str, record_url: str) -> None:\n    global monitoring\n    recording.discard(record_name)\n    if record_url in url_comments and record_url in running_list:\n        running_list.remove(record_url)\n        monitoring -= 1\n        color_obj.print_colored(f\"[{record_name}]已经从录制列表中移除\\n\", color_obj.YELLOW)\n\n\ndef check_subprocess(record_name: str, record_url: str, ffmpeg_command: list, save_type: str,\n                     script_command: str | None = None) -> bool:\n    save_file_path = ffmpeg_command[-1]\n    process = subprocess.Popen(\n        ffmpeg_command, stderr=subprocess.STDOUT, startupinfo=get_startup_info(os_type)\n    )\n\n    subs_file_path = save_file_path.rsplit('.', maxsplit=1)[0]\n    subs_thread_name = f'subs_{Path(subs_file_path).name}'\n    if create_time_file and not split_video_by_time and '音频' not in save_type:\n        create_var[subs_thread_name] = threading.Thread(\n            target=generate_subtitles, args=(record_name, subs_file_path)\n        )\n        create_var[subs_thread_name].daemon = True\n        create_var[subs_thread_name].start()\n\n    while process.poll() is None:\n        if record_url in url_comments or exit_recording:\n            color_obj.print_colored(f\"[{record_name}]录制时已被注释,本条线程将会退出\", color_obj.YELLOW)\n            clear_record_info(record_name, record_url)\n            process.terminate()\n            process.wait()\n            return True\n        time.sleep(1)\n\n    return_code = process.returncode\n    stop_time = time.strftime('%Y-%m-%d %H:%M:%S')\n    if return_code == 0:\n        if converts_to_mp4 and save_type == 'TS':\n            if split_video_by_time:\n                file_paths = utils.get_file_paths(os.path.dirname(save_file_path))\n                prefix = os.path.basename(save_file_path).rsplit('_', maxsplit=1)[0]\n                for path in file_paths:\n                    if prefix in path:\n                        threading.Thread(target=converts_mp4, args=(path, delete_origin_file)).start()\n            else:\n                threading.Thread(target=converts_mp4, args=(save_file_path, delete_origin_file)).start()\n        print(f\"\\n{record_name} {stop_time} 直播录制完成\\n\")\n\n        if script_command:\n            logger.debug(\"开始执行脚本命令!\")\n            if \"python\" in script_command:\n                params = [\n                    f'--record_name \"{record_name}\"',\n                    f'--save_file_path \"{save_file_path}\"',\n                    f'--save_type {save_type}'\n                    f'--split_video_by_time {split_video_by_time}',\n                    f'--converts_to_mp4 {converts_to_mp4}',\n                ]\n            else:\n                params = [\n                    f'\"{record_name.split(\" \", maxsplit=1)[-1]}\"',\n                    f'\"{save_file_path}\"',\n                    save_type,\n                    f'split_video_by_time:{split_video_by_time}',\n                    f'converts_to_mp4:{converts_to_mp4}'\n                ]\n            script_command = script_command.strip() + ' ' + ' '.join(params)\n            run_script(script_command)\n            logger.debug(\"脚本命令执行结束!\")\n\n    else:\n        color_obj.print_colored(f\"\\n{record_name} {stop_time} 直播录制出错,返回码: {return_code}\\n\", color_obj.RED)\n\n    recording.discard(record_name)\n    return False\n\n\ndef clean_name(input_text):\n    cleaned_name = re.sub(rstr, \"_\", input_text.strip()).strip('_')\n    cleaned_name = cleaned_name.replace(\"（\", \"(\").replace(\"）\", \")\")\n    if clean_emoji:\n        cleaned_name = utils.remove_emojis(cleaned_name, '_').strip('_')\n    return cleaned_name or '空白昵称'\n\n\ndef start_record(url_data: tuple, count_variable: int = -1) -> None:\n    global error_count\n\n    while True:\n        try:\n            record_finished = False\n            run_once = False\n            start_pushed = False\n            new_record_url = ''\n            count_time = time.time()\n            retry = 0\n            record_quality, record_url, anchor_name = url_data\n            proxy_address = proxy_addr\n            platform = '未知平台'\n            live_domain = '/'.join(record_url.split('/')[0:3])\n\n            if proxy_addr:\n                proxy_address = None\n                for platform in enable_proxy_platform_list:\n                    if platform and platform.strip() in record_url:\n                        proxy_address = proxy_addr\n                        break\n\n            if not proxy_address:\n                if extra_enable_proxy_platform_list:\n                    for pt in extra_enable_proxy_platform_list:\n                        if pt and pt.strip() in record_url:\n                            proxy_address = proxy_addr_bak or None\n\n            # print(f'\\r代理地址:{proxy_address}')\n            # print(f'\\r全局代理:{global_proxy}')\n            while True:\n                try:\n                    port_info = []\n                    if record_url.find(\"douyin.com/\") > -1:\n                        platform = '抖音直播'\n                        with semaphore:\n                            if 'v.douyin.com' not in record_url:\n                                json_data = spider.get_douyin_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=dy_cookie)\n                            else:\n                                json_data = spider.get_douyin_app_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=dy_cookie)\n                            port_info = stream.get_douyin_stream_url(json_data, record_quality)\n\n                    elif record_url.find(\"https://www.tiktok.com/\") > -1:\n                        platform = 'TikTok直播'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                json_data = spider.get_tiktok_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=tiktok_cookie)\n                                port_info = stream.get_tiktok_stream_url(json_data, record_quality)\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查网络是否能正常访问TikTok平台\")\n\n                    elif record_url.find(\"https://live.kuaishou.com/\") > -1:\n                        platform = '快手直播'\n                        with semaphore:\n                            json_data = spider.get_kuaishou_stream_data(\n                                url=record_url,\n                                proxy_addr=proxy_address,\n                                cookies=ks_cookie)\n                            port_info = stream.get_kuaishou_stream_url(json_data, record_quality)\n\n                    elif record_url.find(\"https://www.huya.com/\") > -1:\n                        platform = '虎牙直播'\n                        with semaphore:\n                            if record_quality not in ['原画', '蓝光', '超清']:\n                                json_data = spider.get_huya_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=hy_cookie)\n                                port_info = stream.get_huya_stream_url(json_data, record_quality)\n                            else:\n                                port_info = spider.get_huya_app_stream_url(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=hy_cookie\n                                )\n\n                    elif record_url.find(\"https://www.douyu.com/\") > -1:\n                        platform = '斗鱼直播'\n                        with semaphore:\n                            json_data = spider.get_douyu_info_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=douyu_cookie)\n                            port_info = stream.get_douyu_stream_url(\n                                json_data, video_quality=record_quality, cookies=douyu_cookie, proxy_addr=proxy_address\n                            )\n\n                    elif record_url.find(\"https://www.yy.com/\") > -1:\n                        platform = 'YY直播'\n                        with semaphore:\n                            json_data = spider.get_yy_stream_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=yy_cookie)\n                            port_info = stream.get_yy_stream_url(json_data)\n\n                    elif record_url.find(\"https://live.bilibili.com/\") > -1:\n                        platform = 'B站直播'\n                        with semaphore:\n                            json_data = spider.get_bilibili_room_info(\n                                url=record_url, proxy_addr=proxy_address, cookies=bili_cookie)\n                            port_info = stream.get_bilibili_stream_url(\n                                json_data, video_quality=record_quality, cookies=bili_cookie, proxy_addr=proxy_address)\n\n                    elif record_url.find(\"https://www.redelight.cn/\") > -1 or \\\n                            record_url.find(\"https://www.xiaohongshu.com/\") > -1 or \\\n                            record_url.find(\"http://xhslink.com/\") > -1:\n                        platform = '小红书直播'\n                        with semaphore:\n                            port_info = spider.get_xhs_stream_url(\n                                record_url, proxy_addr=proxy_address, cookies=xhs_cookie)\n                            retry += 1\n\n                    elif record_url.find(\"https://www.bigo.tv/\") > -1 or record_url.find(\"slink.bigovideo.tv/\") > -1:\n                        platform = 'Bigo直播'\n                        with semaphore:\n                            port_info = spider.get_bigo_stream_url(\n                                record_url, proxy_addr=proxy_address, cookies=bigo_cookie)\n\n                    elif record_url.find(\"https://app.blued.cn/\") > -1:\n                        platform = 'Blued直播'\n                        with semaphore:\n                            port_info = spider.get_blued_stream_url(\n                                record_url, proxy_addr=proxy_address, cookies=blued_cookie)\n\n                    elif record_url.find(\"sooplive.co.kr/\") > -1:\n                        platform = 'SOOP'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                json_data = spider.get_sooplive_stream_data(\n                                    url=record_url, proxy_addr=proxy_address,\n                                    cookies=sooplive_cookie,\n                                    username=sooplive_username,\n                                    password=sooplive_password\n                                )\n                                if json_data and json_data.get('new_cookies'):\n                                    utils.update_config(\n                                        config_file, 'Cookie', 'sooplive_cookie', json_data['new_cookies']\n                                    )\n                                port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问SOOP平台\")\n\n                    elif record_url.find(\"cc.163.com/\") > -1:\n                        platform = '网易CC直播'\n                        with semaphore:\n                            json_data = spider.get_netease_stream_data(url=record_url, cookies=netease_cookie)\n                            port_info = stream.get_netease_stream_url(json_data, record_quality)\n\n                    elif record_url.find(\"qiandurebo.com/\") > -1:\n                        platform = '千度热播'\n                        with semaphore:\n                            port_info = spider.get_qiandurebo_stream_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=qiandurebo_cookie)\n\n                    elif record_url.find(\"www.pandalive.co.kr/\") > -1:\n                        platform = 'PandaTV'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                json_data = spider.get_pandatv_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=pandatv_cookie\n                                )\n                                port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问PandaTV直播平台\")\n\n                    elif record_url.find(\"fm.missevan.com/\") > -1:\n                        platform = '猫耳FM直播'\n                        with semaphore:\n                            port_info = spider.get_maoerfm_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=maoerfm_cookie)\n\n                    elif record_url.find(\"www.winktv.co.kr/\") > -1:\n                        platform = 'WinkTV'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                json_data = spider.get_winktv_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=winktv_cookie)\n                                port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问WinkTV直播平台\")\n\n                    elif record_url.find(\"www.flextv.co.kr/\") > -1:\n                        platform = 'FlexTV'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                json_data = spider.get_flextv_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=flextv_cookie,\n                                    username=flextv_username,\n                                    password=flextv_password\n                                )\n                                if json_data and json_data.get('new_cookies'):\n                                    utils.update_config(\n                                        config_file, 'Cookie', 'flextv_cookie', json_data['new_cookies']\n                                    )\n                                port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问FlexTV直播平台\")\n\n                    elif record_url.find(\"look.163.com/\") > -1:\n                        platform = 'Look直播'\n                        with semaphore:\n                            port_info = spider.get_looklive_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=look_cookie\n                            )\n\n                    elif record_url.find(\"www.popkontv.com/\") > -1:\n                        platform = 'PopkonTV'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                port_info = spider.get_popkontv_stream_url(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    access_token=popkontv_access_token,\n                                    username=popkontv_username,\n                                    password=popkontv_password,\n                                    partner_code=popkontv_partner_code\n                                )\n                                if port_info and port_info.get('new_token'):\n                                    utils.update_config(\n                                        file_path=config_file, section='Authorization', key='popkontv_token',\n                                        new_value=port_info['new_token']\n                                    )\n\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问PopkonTV直播平台\")\n\n                    elif record_url.find(\"twitcasting.tv/\") > -1:\n                        platform = 'TwitCasting'\n                        with semaphore:\n                            port_info = spider.get_twitcasting_stream_url(\n                                url=record_url,\n                                proxy_addr=proxy_address,\n                                cookies=twitcasting_cookie,\n                                account_type=twitcasting_account_type,\n                                username=twitcasting_username,\n                                password=twitcasting_password\n                            )\n                            if port_info and port_info.get('new_cookies'):\n                                utils.update_config(\n                                    file_path=config_file, section='Cookie', key='twitcasting_cookie',\n                                    new_value=port_info['new_cookies']\n                                )\n\n                    elif record_url.find(\"live.baidu.com/\") > -1:\n                        platform = '百度直播'\n                        with semaphore:\n                            json_data = spider.get_baidu_stream_data(\n                                url=record_url,\n                                proxy_addr=proxy_address,\n                                cookies=baidu_cookie)\n                            port_info = stream.get_stream_url(json_data, record_quality)\n\n                    elif record_url.find(\"weibo.com/\") > -1:\n                        platform = '微博直播'\n                        with semaphore:\n                            json_data = spider.get_weibo_stream_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=weibo_cookie)\n                            port_info = stream.get_stream_url(json_data, record_quality, hls_extra_key='m3u8_url')\n\n                    elif record_url.find(\"kugou.com/\") > -1:\n                        platform = '酷狗直播'\n                        with semaphore:\n                            port_info = spider.get_kugou_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=kugou_cookie)\n\n                    elif record_url.find(\"www.twitch.tv/\") > -1:\n                        platform = 'TwitchTV'\n                        with semaphore:\n                            if global_proxy or proxy_address:\n                                json_data = spider.get_twitchtv_stream_data(\n                                    url=record_url,\n                                    proxy_addr=proxy_address,\n                                    cookies=twitch_cookie\n                                )\n                                port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n                            else:\n                                logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问TwitchTV直播平台\")\n\n                    elif record_url.find(\"www.liveme.com/\") > -1:\n                        if global_proxy or proxy_address:\n                            platform = 'LiveMe'\n                            with semaphore:\n                                port_info = spider.get_liveme_stream_url(\n                                    url=record_url, proxy_addr=proxy_address, cookies=liveme_cookie)\n                        else:\n                            logger.error(\"错误信息: 网络异常，请检查本网络是否能正常访问LiveMe直播平台\")\n\n                    elif record_url.find(\"www.huajiao.com/\") > -1:\n                        platform = '花椒直播'\n                        with semaphore:\n                            port_info = spider.get_huajiao_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=huajiao_cookie)\n\n                    elif record_url.find(\"7u66.com/\") > -1:\n                        platform = '流星直播'\n                        with semaphore:\n                            port_info = spider.get_liuxing_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=liuxing_cookie)\n\n                    elif record_url.find(\"showroom-live.com/\") > -1:\n                        platform = 'ShowRoom'\n                        with semaphore:\n                            json_data = spider.get_showroom_stream_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=showroom_cookie)\n                            port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n\n                    elif record_url.find(\"live.acfun.cn/\") > -1 or record_url.find(\"m.acfun.cn/\") > -1:\n                        platform = 'Acfun'\n                        with semaphore:\n                            json_data = spider.get_acfun_stream_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=acfun_cookie)\n                            port_info = stream.get_stream_url(\n                                json_data, record_quality, url_type='flv', flv_extra_key='url')\n\n                    elif record_url.find(\"tlclw.com/\") > -1:\n                        platform = '畅聊直播'\n                        with semaphore:\n                            port_info = spider.get_changliao_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=changliao_cookie)\n\n                    elif record_url.find(\"ybw1666.com/\") > -1:\n                        platform = '音播直播'\n                        with semaphore:\n                            port_info = spider.get_yinbo_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=yinbo_cookie)\n\n                    elif record_url.find(\"www.inke.cn/\") > -1:\n                        platform = '映客直播'\n                        with semaphore:\n                            port_info = spider.get_yingke_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=yingke_cookie)\n\n                    elif record_url.find(\"www.zhihu.com/\") > -1:\n                        platform = '知乎直播'\n                        with semaphore:\n                            port_info = spider.get_zhihu_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=zhihu_cookie)\n\n                    elif record_url.find(\"chzzk.naver.com/\") > -1:\n                        platform = 'CHZZK'\n                        with semaphore:\n                            json_data = spider.get_chzzk_stream_data(\n                                url=record_url, proxy_addr=proxy_address, cookies=chzzk_cookie)\n                            port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n\n                    elif record_url.find(\"www.haixiutv.com/\") > -1:\n                        platform = '嗨秀直播'\n                        with semaphore:\n                            port_info = spider.get_haixiu_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=haixiu_cookie)\n\n                    elif record_url.find(\"h5webcdn-pro.vvxqiu.com/\") > -1:\n                        platform = 'VV星球'\n                        with semaphore:\n                            port_info = spider.get_vvxqiu_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=vvxqiu_cookie)\n\n                    elif record_url.find(\"17.live/\") > -1:\n                        platform = '17Live'\n                        with semaphore:\n                            port_info = spider.get_17live_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=yiqilive_cookie)\n\n                    elif record_url.find(\"www.lang.live/\") > -1:\n                        platform = '浪Live'\n                        with semaphore:\n                            port_info = spider.get_langlive_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=langlive_cookie)\n\n                    elif record_url.find(\"m.pp.weimipopo.com/\") > -1:\n                        platform = '漂漂直播'\n                        with semaphore:\n                            port_info = spider.get_pplive_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=pplive_cookie)\n\n                    elif record_url.find(\".6.cn/\") > -1:\n                        platform = '六间房直播'\n                        with semaphore:\n                            port_info = spider.get_6room_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=six_room_cookie)\n\n                    elif record_url.find(\"lehaitv.com/\") > -1:\n                        platform = '乐嗨直播'\n                        with semaphore:\n                            port_info = spider.get_haixiu_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=lehaitv_cookie)\n\n                    elif record_url.find(\"h.catshow168.com/\") > -1:\n                        platform = '花猫直播'\n                        with semaphore:\n                            port_info = spider.get_pplive_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=huamao_cookie)\n\n                    elif record_url.find(\"live.shopee\") > -1 or record_url.find(\"shp.ee/\") > -1:\n                        platform = 'shopee'\n                        with semaphore:\n                            port_info = spider.get_shopee_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=shopee_cookie)\n                            if port_info.get('uid'):\n                                new_record_url = record_url.split('?')[0] + '?' + str(port_info['uid'])\n\n                    elif record_url.find(\"www.youtube.com/\") > -1 or record_url.find(\"youtu.be/\") > -1:\n                        platform = 'Youtube'\n                        with semaphore:\n                            json_data = spider.get_youtube_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=youtube_cookie)\n                            port_info = stream.get_stream_url(json_data, record_quality, spec=True)\n\n                    elif record_url.find(\"tb.cn\") > -1:\n                        platform = '淘宝直播'\n                        with semaphore:\n                            json_data = spider.get_taobao_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=taobao_cookie)\n                            port_info = stream.get_stream_url(\n                                json_data, record_quality,\n                                url_type='all', hls_extra_key='hlsUrl', flv_extra_key='flvUrl'\n                            )\n\n                    elif record_url.find(\"3.cn\") > -1 or record_url.find(\"m.jd.com\") > -1:\n                        platform = '京东直播'\n                        with semaphore:\n                            port_info = spider.get_jd_stream_url(\n                                url=record_url, proxy_addr=proxy_address, cookies=jd_cookie)\n\n                    elif record_url.find(\".m3u8\") > -1 or record_url.find(\".flv\") > -1:\n                        platform = '自定义录制直播'\n                        port_info = {\n                            \"anchor_name\": platform + '_' + str(uuid.uuid4())[:8],\n                            \"is_live\": True,\n                            \"record_url\": record_url,\n                        }\n                        if '.flv' in record_url:\n                            port_info['flv_url'] = record_url\n                        else:\n                            port_info['m3u8_url'] = record_url\n\n                    else:\n                        logger.error(f'{record_url} {platform}直播地址')\n                        return\n\n                    if anchor_name:\n                        if '主播:' in anchor_name:\n                            anchor_split: list = anchor_name.split('主播:')\n                            if len(anchor_split) > 1 and anchor_split[1].strip():\n                                anchor_name = anchor_split[1].strip()\n                            else:\n                                anchor_name = port_info.get(\"anchor_name\", '')\n                    else:\n                        anchor_name = port_info.get(\"anchor_name\", '')\n\n                    if not port_info.get(\"anchor_name\", ''):\n                        print(f'序号{count_variable} 网址内容获取失败,进行重试中...获取失败的地址是:{url_data}')\n                        with max_request_lock:\n                            error_count += 1\n                            error_window.append(1)\n                    else:\n                        anchor_name = clean_name(anchor_name)\n                        record_name = f'序号{count_variable} {anchor_name}'\n\n                        if record_url in url_comments:\n                            print(f\"[{anchor_name}]已被注释,本条线程将会退出\")\n                            clear_record_info(record_name, record_url)\n                            return\n\n                        if not url_data[-1] and run_once is False:\n                            if new_record_url:\n                                need_update_line_list.append(\n                                    f'{record_url}|{new_record_url},主播: {anchor_name.strip()}')\n                                not_record_list.append(new_record_url)\n                            else:\n                                need_update_line_list.append(f'{record_url}|{record_url},主播: {anchor_name.strip()}')\n                            run_once = True\n\n                        push_at = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')\n                        if port_info['is_live'] is False:\n                            print(f\"\\r{record_name} 等待直播... \")\n\n                            if start_pushed:\n                                if over_show_push:\n                                    push_content = \"直播间状态更新：[直播间名称] 直播已结束！时间：[时间]\"\n                                    if over_push_message_text:\n                                        push_content = over_push_message_text\n\n                                    push_content = (push_content.replace('[直播间名称]', record_name).\n                                                    replace('[时间]', push_at))\n                                    threading.Thread(\n                                        target=push_message,\n                                        args=(record_name, record_url, push_content.replace(r'\\n', '\\n')),\n                                        daemon=True\n                                    ).start()\n                                start_pushed = False\n\n                        else:\n                            content = f\"\\r{record_name} 正在直播中...\"\n                            print(content)\n\n                            if live_status_push and not start_pushed:\n                                if begin_show_push:\n                                    push_content = \"直播间状态更新：[直播间名称] 正在直播中，时间：[时间]\"\n                                    if begin_push_message_text:\n                                        push_content = begin_push_message_text\n\n                                    push_content = (push_content.replace('[直播间名称]', record_name).\n                                                    replace('[时间]', push_at))\n                                    threading.Thread(\n                                        target=push_message,\n                                        args=(record_name, record_url, push_content.replace(r'\\n', '\\n')),\n                                        daemon=True\n                                    ).start()\n                                start_pushed = True\n\n                            if disable_record:\n                                time.sleep(push_check_seconds)\n                                continue\n\n                            real_url = port_info.get('record_url')\n                            full_path = f'{default_path}/{platform}'\n                            if real_url:\n                                now = datetime.datetime.today().strftime(\"%Y-%m-%d_%H-%M-%S\")\n                                live_title = port_info.get('title')\n                                title_in_name = ''\n                                if live_title:\n                                    live_title = clean_name(live_title)\n                                    title_in_name = live_title + '_' if filename_by_title else ''\n\n                                try:\n                                    if len(video_save_path) > 0:\n                                        if not video_save_path.endswith(('/', '\\\\')):\n                                            full_path = f'{video_save_path}/{platform}'\n                                        else:\n                                            full_path = f'{video_save_path}{platform}'\n\n                                    full_path = full_path.replace(\"\\\\\", '/')\n                                    if folder_by_author:\n                                        full_path = f'{full_path}/{anchor_name}'\n                                    if folder_by_time:\n                                        full_path = f'{full_path}/{now[:10]}'\n                                    if folder_by_title and port_info.get('title'):\n                                        if folder_by_time:\n                                            full_path = f'{full_path}/{live_title}_{anchor_name}'\n                                        else:\n                                            full_path = f'{full_path}/{now[:10]}_{live_title}'\n                                    if not os.path.exists(full_path):\n                                        os.makedirs(full_path)\n                                except Exception as e:\n                                    logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n\n                                if enable_https_recording and real_url.startswith(\"http://\"):\n                                    real_url = real_url.replace(\"http://\", \"https://\")\n\n                                http_record_list = ['shopee']\n                                if platform in http_record_list:\n                                    real_url = real_url.replace(\"https://\", \"http://\")\n\n                                user_agent = (\"Mozilla/5.0 (Linux; Android 11; SAMSUNG SM-G973U) AppleWebKit/537.36 (\"\n                                              \"KHTML, like Gecko) SamsungBrowser/14.2 Chrome/87.0.4280.141 Mobile \"\n                                              \"Safari/537.36\")\n\n                                rw_timeout = \"15000000\"\n                                analyzeduration = \"20000000\"\n                                probesize = \"10000000\"\n                                bufsize = \"8000k\"\n                                max_muxing_queue_size = \"1024\"\n                                for pt_host in overseas_platform_host:\n                                    if pt_host in record_url:\n                                        rw_timeout = \"50000000\"\n                                        analyzeduration = \"40000000\"\n                                        probesize = \"20000000\"\n                                        bufsize = \"15000k\"\n                                        max_muxing_queue_size = \"2048\"\n                                        break\n\n                                ffmpeg_command = [\n                                    'ffmpeg', \"-y\",\n                                    \"-v\", \"verbose\",\n                                    \"-rw_timeout\", rw_timeout,\n                                    \"-loglevel\", \"error\",\n                                    \"-hide_banner\",\n                                    \"-user_agent\", user_agent,\n                                    \"-protocol_whitelist\", \"rtmp,crypto,file,http,https,tcp,tls,udp,rtp,httpproxy\",\n                                    \"-thread_queue_size\", \"1024\",\n                                    \"-analyzeduration\", analyzeduration,\n                                    \"-probesize\", probesize,\n                                    \"-fflags\", \"+discardcorrupt\",\n                                    \"-re\", \"-i\", real_url,\n                                    \"-bufsize\", bufsize,\n                                    \"-sn\", \"-dn\",\n                                    \"-reconnect_delay_max\", \"60\",\n                                    \"-reconnect_streamed\", \"-reconnect_at_eof\",\n                                    \"-max_muxing_queue_size\", max_muxing_queue_size,\n                                    \"-correct_ts_overflow\", \"1\",\n                                    \"-avoid_negative_ts\", \"1\"\n                                ]\n\n                                record_headers = {\n                                    'PandaTV': 'origin:https://www.pandalive.co.kr',\n                                    'WinkTV': 'origin:https://www.winktv.co.kr',\n                                    'PopkonTV': 'origin:https://www.popkontv.com',\n                                    'FlexTV': 'origin:https://www.flextv.co.kr',\n                                    '千度热播': 'referer:https://qiandurebo.com',\n                                    '17Live': 'referer:https://17.live/en/live/6302408',\n                                    '浪Live': 'referer:https://www.lang.live',\n                                    'shopee': f'origin:{live_domain}',\n                                }\n\n                                headers = record_headers.get(platform)\n                                if headers:\n                                    ffmpeg_command.insert(11, \"-headers\")\n                                    ffmpeg_command.insert(12, headers)\n\n                                if proxy_address:\n                                    ffmpeg_command.insert(1, \"-http_proxy\")\n                                    ffmpeg_command.insert(2, proxy_address)\n\n                                recording.add(record_name)\n                                start_record_time = datetime.datetime.now()\n                                recording_time_list[record_name] = [start_record_time, record_quality]\n                                rec_info = f\"\\r{anchor_name} 准备开始录制视频: {full_path}\"\n                                if show_url:\n                                    re_plat = ('WinkTV', 'PandaTV', 'ShowRoom', 'CHZZK', 'Youtube')\n                                    if platform in re_plat:\n                                        logger.info(f\"{platform} | {anchor_name} | 直播源地址: {port_info['m3u8_url']}\")\n                                    else:\n                                        logger.info(\n                                            f\"{platform} | {anchor_name} | 直播源地址: {port_info['record_url']}\")\n\n                                only_flv_record = False\n                                only_flv_platform_list = ['shopee', '花椒直播']\n                                if 'live.xhscdn.com' in real_url or platform in only_flv_platform_list:\n                                    logger.debug(f\"提示: {platform} 将强制使用FLV格式录制\")\n                                    only_flv_record = True\n\n                                if video_save_type == \"FLV\" or only_flv_record:\n                                    filename = anchor_name + f'_{title_in_name}' + now + '.flv'\n                                    save_file_path = f'{full_path}/{filename}'\n                                    print(f'{rec_info}/{filename}')\n\n                                    subs_file_path = save_file_path.rsplit('.', maxsplit=1)[0]\n                                    subs_thread_name = f'subs_{Path(subs_file_path).name}'\n                                    if create_time_file:\n                                        create_var[subs_thread_name] = threading.Thread(\n                                            target=generate_subtitles, args=(record_name, subs_file_path)\n                                        )\n                                        create_var[subs_thread_name].daemon = True\n                                        create_var[subs_thread_name].start()\n\n                                    try:\n                                        flv_url = port_info.get('flv_url')\n                                        if flv_url:\n                                            _filepath, _ = urllib.request.urlretrieve(flv_url, save_file_path)\n                                            record_finished = True\n                                            recording.discard(record_name)\n                                            print(\n                                                f\"\\n{anchor_name} {time.strftime('%Y-%m-%d %H:%M:%S')} 直播录制完成\\n\")\n                                        else:\n                                            logger.debug(\"未找到FLV直播流，跳过录制\")\n                                    except Exception as e:\n                                        clear_record_info(record_name, record_url)\n                                        color_obj.print_colored(\n                                            f\"\\n{anchor_name} {time.strftime('%Y-%m-%d %H:%M:%S')} 直播录制出错,请检查网络\\n\",\n                                            color_obj.RED)\n                                        logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                                        with max_request_lock:\n                                            error_count += 1\n                                            error_window.append(1)\n\n                                    try:\n                                        if converts_to_mp4 and 'live.xhscdn.com' not in real_url:\n                                            seg_file_path = f\"{full_path}/{anchor_name}_{title_in_name}{now}_%03d.mp4\"\n                                            if split_video_by_time:\n                                                segment_video(\n                                                    save_file_path, seg_file_path,\n                                                    segment_format='mp4', segment_time=split_time,\n                                                    is_original_delete=delete_origin_file\n                                                )\n                                            else:\n                                                threading.Thread(\n                                                    target=converts_mp4,\n                                                    args=(save_file_path, delete_origin_file)\n                                                ).start()\n\n                                        else:\n                                            seg_file_path = f\"{full_path}/{anchor_name}_{title_in_name}{now}_%03d.flv\"\n                                            if split_video_by_time:\n                                                segment_video(\n                                                    save_file_path, seg_file_path,\n                                                    segment_format='flv', segment_time=split_time,\n                                                    is_original_delete=delete_origin_file\n                                                )\n                                    except Exception as e:\n                                        logger.error(f\"转码失败: {e} \")\n\n                                elif video_save_type == \"MKV\":\n                                    filename = anchor_name + f'_{title_in_name}' + now + \".mkv\"\n                                    print(f'{rec_info}/{filename}')\n                                    save_file_path = full_path + '/' + filename\n\n                                    try:\n                                        if split_video_by_time:\n                                            now = time.strftime(\"%Y-%m-%d_%H-%M-%S\", time.localtime())\n                                            save_file_path = f\"{full_path}/{anchor_name}_{title_in_name}{now}_%03d.mkv\"\n                                            command = [\n                                                \"-flags\", \"global_header\",\n                                                \"-c:v\", \"copy\",\n                                                \"-c:a\", \"aac\",\n                                                \"-map\", \"0\",\n                                                \"-f\", \"segment\",\n                                                \"-segment_time\", split_time,\n                                                \"-segment_format\", \"matroska\",\n                                                \"-reset_timestamps\", \"1\",\n                                                save_file_path,\n                                            ]\n\n                                        else:\n                                            command = [\n                                                \"-flags\", \"global_header\",\n                                                \"-map\", \"0\",\n                                                \"-c:v\", \"copy\",\n                                                \"-c:a\", \"copy\",\n                                                \"-f\", \"matroska\",\n                                                \"{path}\".format(path=save_file_path),\n                                            ]\n                                        ffmpeg_command.extend(command)\n\n                                        comment_end = check_subprocess(\n                                            record_name,\n                                            record_url,\n                                            ffmpeg_command,\n                                            video_save_type,\n                                            custom_script\n                                        )\n                                        if comment_end:\n                                            return\n\n                                    except subprocess.CalledProcessError as e:\n                                        logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                                        with max_request_lock:\n                                            error_count += 1\n                                            error_window.append(1)\n\n                                elif video_save_type == \"MP4\":\n                                    filename = anchor_name + f'_{title_in_name}' + now + \".mp4\"\n                                    print(f'{rec_info}/{filename}')\n                                    save_file_path = full_path + '/' + filename\n\n                                    try:\n                                        if split_video_by_time:\n                                            now = time.strftime(\"%Y-%m-%d_%H-%M-%S\", time.localtime())\n                                            save_file_path = f\"{full_path}/{anchor_name}_{title_in_name}{now}_%03d.mp4\"\n                                            command = [\n                                                \"-c:v\", \"copy\",\n                                                \"-c:a\", \"aac\",\n                                                \"-map\", \"0\",\n                                                \"-f\", \"segment\",\n                                                \"-segment_time\", split_time,\n                                                \"-segment_format\", \"mp4\",\n                                                \"-reset_timestamps\", \"1\",\n                                                \"-movflags\", \"+frag_keyframe+empty_moov\",\n                                                save_file_path,\n                                            ]\n\n                                        else:\n                                            command = [\n                                                \"-map\", \"0\",\n                                                \"-c:v\", \"copy\",\n                                                \"-c:a\", \"copy\",\n                                                \"-f\", \"mp4\",\n                                                save_file_path,\n                                            ]\n\n                                        ffmpeg_command.extend(command)\n                                        comment_end = check_subprocess(\n                                            record_name,\n                                            record_url,\n                                            ffmpeg_command,\n                                            video_save_type,\n                                            custom_script\n                                        )\n                                        if comment_end:\n                                            return\n\n                                    except subprocess.CalledProcessError as e:\n                                        logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                                        with max_request_lock:\n                                            error_count += 1\n                                            error_window.append(1)\n\n                                elif \"音频\" in video_save_type:\n                                    try:\n                                        now = time.strftime(\"%Y-%m-%d_%H-%M-%S\", time.localtime())\n                                        extension = \"mp3\" if \"MP3\" in video_save_type else \"m4a\"\n                                        name_format = \"_%03d\" if split_video_by_time else \"\"\n                                        save_file_path = (f\"{full_path}/{anchor_name}_{title_in_name}{now}\"\n                                                          f\"{name_format}.{extension}\")\n\n                                        if split_video_by_time:\n                                            print(f'\\r{anchor_name} 准备开始录制音频: {save_file_path}')\n\n                                            if \"MP3\" in video_save_type:\n                                                command = [\n                                                    \"-map\", \"0:a\",\n                                                    \"-c:a\", \"libmp3lame\",\n                                                    \"-ab\", \"320k\",\n                                                    \"-f\", \"segment\",\n                                                    \"-segment_time\", split_time,\n                                                    \"-reset_timestamps\", \"1\",\n                                                    save_file_path,\n                                                ]\n                                            else:\n                                                command = [\n                                                    \"-map\", \"0:a\",\n                                                    \"-c:a\", \"aac\",\n                                                    \"-bsf:a\", \"aac_adtstoasc\",\n                                                    \"-ab\", \"320k\",\n                                                    \"-f\", \"segment\",\n                                                    \"-segment_time\", split_time,\n                                                    \"-segment_format\", 'mpegts',\n                                                    \"-reset_timestamps\", \"1\",\n                                                    save_file_path,\n                                                ]\n\n                                        else:\n                                            if \"MP3\" in video_save_type:\n                                                command = [\n                                                    \"-map\", \"0:a\",\n                                                    \"-c:a\", \"libmp3lame\",\n                                                    \"-ab\", \"320k\",\n                                                    save_file_path,\n                                                ]\n\n                                            else:\n                                                command = [\n                                                    \"-map\", \"0:a\",\n                                                    \"-c:a\", \"aac\",\n                                                    \"-bsf:a\", \"aac_adtstoasc\",\n                                                    \"-ab\", \"320k\",\n                                                    \"-movflags\", \"+faststart\",\n                                                    save_file_path,\n                                                ]\n\n                                        ffmpeg_command.extend(command)\n                                        comment_end = check_subprocess(\n                                            record_name,\n                                            record_url,\n                                            ffmpeg_command,\n                                            video_save_type,\n                                            custom_script\n                                        )\n                                        if comment_end:\n                                            return\n\n                                    except subprocess.CalledProcessError as e:\n                                        logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                                        with max_request_lock:\n                                            error_count += 1\n                                            error_window.append(1)\n\n                                else:\n                                    if split_video_by_time:\n                                        now = time.strftime(\"%Y-%m-%d_%H-%M-%S\", time.localtime())\n                                        filename = anchor_name + f'_{title_in_name}' + now + \".ts\"\n                                        print(f'{rec_info}/{filename}')\n\n                                        try:\n                                            save_file_path = f\"{full_path}/{anchor_name}_{title_in_name}{now}_%03d.ts\"\n                                            command = [\n                                                \"-c:v\", \"copy\",\n                                                \"-c:a\", \"copy\",\n                                                \"-map\", \"0\",\n                                                \"-f\", \"segment\",\n                                                \"-segment_time\", split_time,\n                                                \"-segment_format\", 'mpegts',\n                                                \"-reset_timestamps\", \"1\",\n                                                save_file_path,\n                                            ]\n\n                                            ffmpeg_command.extend(command)\n                                            comment_end = check_subprocess(\n                                                record_name,\n                                                record_url,\n                                                ffmpeg_command,\n                                                video_save_type,\n                                                custom_script\n                                            )\n                                            if comment_end:\n                                                if converts_to_mp4:\n                                                    file_paths = utils.get_file_paths(os.path.dirname(save_file_path))\n                                                    prefix = os.path.basename(save_file_path).rsplit('_', maxsplit=1)[0]\n                                                    for path in file_paths:\n                                                        if prefix in path:\n                                                            try:\n                                                                threading.Thread(\n                                                                    target=converts_mp4,\n                                                                    args=(path, delete_origin_file)\n                                                                ).start()\n                                                            except subprocess.CalledProcessError as e:\n                                                                logger.error(f\"转码失败: {e} \")\n                                                return\n\n                                        except subprocess.CalledProcessError as e:\n                                            logger.error(\n                                                f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                                            with max_request_lock:\n                                                error_count += 1\n                                                error_window.append(1)\n\n                                    else:\n                                        filename = anchor_name + f'_{title_in_name}' + now + \".ts\"\n                                        print(f'{rec_info}/{filename}')\n                                        save_file_path = full_path + '/' + filename\n\n                                        try:\n                                            command = [\n                                                \"-c:v\", \"copy\",\n                                                \"-c:a\", \"copy\",\n                                                \"-map\", \"0\",\n                                                \"-f\", \"mpegts\",\n                                                save_file_path,\n                                            ]\n\n                                            ffmpeg_command.extend(command)\n                                            comment_end = check_subprocess(\n                                                record_name,\n                                                record_url,\n                                                ffmpeg_command,\n                                                video_save_type,\n                                                custom_script\n                                            )\n                                            if comment_end:\n                                                return\n\n                                        except subprocess.CalledProcessError as e:\n                                            logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                                            with max_request_lock:\n                                                error_count += 1\n                                                error_window.append(1)\n\n                                count_time = time.time()\n\n                except Exception as e:\n                    logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n                    with max_request_lock:\n                        error_count += 1\n                        error_window.append(1)\n\n                num = random.randint(-5, 5) + delay_default\n                if num < 0:\n                    num = 0\n                x = num\n\n                if error_count > 20:\n                    x = x + 60\n                    color_obj.print_colored(\"\\r瞬时错误太多,延迟加60秒\", color_obj.YELLOW)\n\n                # 这里是.如果录制结束后,循环时间会暂时变成30s后检测一遍. 这样一定程度上防止主播卡顿造成少录\n                # 当30秒过后检测一遍后. 会回归正常设置的循环秒数\n                if record_finished:\n                    count_time_end = time.time() - count_time\n                    if count_time_end < 60:\n                        x = 30\n                    record_finished = False\n\n                else:\n                    x = num\n\n                # 这里是正常循环\n                while x:\n                    x = x - 1\n                    if loop_time:\n                        print(f'\\r{anchor_name}循环等待{x}秒 ', end=\"\")\n                    time.sleep(1)\n                if loop_time:\n                    print('\\r检测直播间中...', end=\"\")\n        except Exception as e:\n            logger.error(f\"错误信息: {e} 发生错误的行数: {e.__traceback__.tb_lineno}\")\n            with max_request_lock:\n                error_count += 1\n                error_window.append(1)\n            time.sleep(2)\n\n\ndef backup_file(file_path: str, backup_dir_path: str, limit_counts: int = 6) -> None:\n    try:\n        if not os.path.exists(backup_dir_path):\n            os.makedirs(backup_dir_path)\n\n        timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\n        backup_file_name = os.path.basename(file_path) + '_' + timestamp\n        backup_file_path = os.path.join(backup_dir_path, backup_file_name).replace(\"\\\\\", \"/\")\n        shutil.copy2(file_path, backup_file_path)\n\n        files = os.listdir(backup_dir_path)\n        _files = [f for f in files if f.startswith(os.path.basename(file_path))]\n        _files.sort(key=lambda x: os.path.getmtime(os.path.join(backup_dir_path, x)))\n\n        while len(_files) > limit_counts:\n            oldest_file = _files[0]\n            os.remove(os.path.join(backup_dir_path, oldest_file))\n            _files = _files[1:]\n\n    except Exception as e:\n        logger.error(f'\\r备份配置文件 {file_path} 失败：{str(e)}')\n\n\ndef backup_file_start() -> None:\n    config_md5 = ''\n    url_config_md5 = ''\n\n    while True:\n        try:\n            if os.path.exists(config_file):\n                new_config_md5 = utils.check_md5(config_file)\n                if new_config_md5 != config_md5:\n                    backup_file(config_file, backup_dir)\n                    config_md5 = new_config_md5\n\n            if os.path.exists(url_config_file):\n                new_url_config_md5 = utils.check_md5(url_config_file)\n                if new_url_config_md5 != url_config_md5:\n                    backup_file(url_config_file, backup_dir)\n                    url_config_md5 = new_url_config_md5\n            time.sleep(600)\n        except Exception as e:\n            logger.error(f\"备份配置文件失败, 错误信息: {e}\")\n\n\ndef check_ffmpeg_existence() -> bool:\n    dev_null = open(os.devnull, 'wb')\n    try:\n        subprocess.run(['ffmpeg', '--help'], stdout=dev_null, stderr=dev_null, check=True)\n    except subprocess.CalledProcessError as e:\n        logger.error(e)\n    except FileNotFoundError:\n        ffmpeg_file_check = subprocess.getoutput(ffmpeg_path)\n        if ffmpeg_file_check.find(\"run\") > -1 and os.path.isfile(ffmpeg_path):\n            os.environ['PATH'] += os.pathsep + os.path.dirname(os.path.abspath(ffmpeg_path))\n            return True\n    finally:\n        dev_null.close()\n        if check_ffmpeg():\n            time.sleep(1)\n            return True\n    return False\n\n\n# --------------------------初始化程序-------------------------------------\nif not check_ffmpeg_existence():\n    logger.error(\"缺少ffmpeg无法进行录制，程序退出\")\n    sys.exit(1)\nprint(\"-----------------------------------------------------\")\nprint(\"|                DouyinLiveRecorder                 |\")\nprint(\"-----------------------------------------------------\")\n\nprint(f\"版本号: {version}\")\nprint(\"GitHub: https://github.com/ihmily/DouyinLiveRecorder\")\nprint(f'支持平台: {platforms}')\nprint('.....................................................')\n\nos.makedirs(os.path.dirname(config_file), exist_ok=True)\nt3 = threading.Thread(target=backup_file_start, args=(), daemon=True)\nt3.start()\nutils.remove_duplicate_lines(url_config_file)\n\n\ndef read_config_value(config_parser: configparser.RawConfigParser, section: str, option: str, default_value: Any) \\\n        -> Any:\n    try:\n\n        config_parser.read(config_file, encoding=text_encoding)\n        if '录制设置' not in config_parser.sections():\n            config_parser.add_section('录制设置')\n        if '推送配置' not in config_parser.sections():\n            config_parser.add_section('推送配置')\n        if 'Cookie' not in config_parser.sections():\n            config_parser.add_section('Cookie')\n        if 'Authorization' not in config_parser.sections():\n            config_parser.add_section('Authorization')\n        if '账号密码' not in config_parser.sections():\n            config_parser.add_section('账号密码')\n        return config_parser.get(section, option)\n    except (configparser.NoSectionError, configparser.NoOptionError):\n        config_parser.set(section, option, str(default_value))\n        with open(config_file, 'w', encoding=text_encoding) as f:\n            config_parser.write(f)\n        return default_value\n\n\noptions = {\"是\": True, \"否\": False}\nconfig = configparser.RawConfigParser()\nlanguage = read_config_value(config, '录制设置', 'language(zh_cn/en)', \"zh_cn\")\nskip_proxy_check = options.get(read_config_value(config, '录制设置', '是否跳过代理检测(是/否)', \"否\"), False)\nif language and 'en' not in language.lower():\n    from i18n import translated_print\n\n    builtins.print = translated_print\n\ntry:\n    if skip_proxy_check:\n        global_proxy = True\n    else:\n        print('系统代理检测中，请耐心等待...')\n        response_g = urllib.request.urlopen(\"https://www.google.com/\", timeout=15)\n        global_proxy = True\n        print('\\r全局/规则网络代理已开启√')\n        pd = ProxyDetector()\n        if pd.is_proxy_enabled():\n            proxy_info = pd.get_proxy_info()\n            print(\"System Proxy: http://{}:{}\".format(proxy_info.ip, proxy_info.port))\nexcept HTTPError as err:\n    print(f\"HTTP error occurred: {err.code} - {err.reason}\")\nexcept URLError as err:\n    color_obj.print_colored(f\"INFO：未检测到全局/规则网络代理，请检查代理配置（若无需录制海外直播请忽略此条提示）\",\n                            color_obj.YELLOW)\nexcept Exception as err:\n    print(\"An unexpected error occurred:\", err)\n\nwhile True:\n\n    try:\n        if not os.path.isfile(config_file):\n            with open(config_file, 'w', encoding=text_encoding) as file:\n                pass\n\n        ini_URL_content = ''\n        if os.path.isfile(url_config_file):\n            with open(url_config_file, 'r', encoding=text_encoding) as file:\n                ini_URL_content = file.read().strip()\n\n        if not ini_URL_content.strip():\n            input_url = input('请输入要录制的主播直播间网址（尽量使用PC网页端的直播间地址）:\\n')\n            with open(url_config_file, 'w', encoding=text_encoding) as file:\n                file.write(input_url)\n    except OSError as err:\n        logger.error(f\"发生 I/O 错误: {err}\")\n\n    video_save_path = read_config_value(config, '录制设置', '直播保存路径(不填则默认)', \"\")\n    folder_by_author = options.get(read_config_value(config, '录制设置', '保存文件夹是否以作者区分', \"是\"), False)\n    folder_by_time = options.get(read_config_value(config, '录制设置', '保存文件夹是否以时间区分', \"否\"), False)\n    folder_by_title = options.get(read_config_value(config, '录制设置', '保存文件夹是否以标题区分', \"否\"), False)\n    filename_by_title = options.get(read_config_value(config, '录制设置', '保存文件名是否包含标题', \"否\"), False)\n    clean_emoji = options.get(read_config_value(config, '录制设置', '是否去除名称中的表情符号', \"是\"), True)\n    video_save_type = read_config_value(config, '录制设置', '视频保存格式ts|mkv|flv|mp4|mp3音频|m4a音频', \"ts\")\n    video_record_quality = read_config_value(config, '录制设置', '原画|超清|高清|标清|流畅', \"原画\")\n    use_proxy = options.get(read_config_value(config, '录制设置', '是否使用代理ip(是/否)', \"是\"), False)\n    proxy_addr_bak = read_config_value(config, '录制设置', '代理地址', \"\")\n    proxy_addr = None if not use_proxy else proxy_addr_bak\n    max_request = int(read_config_value(config, '录制设置', '同一时间访问网络的线程数', 3))\n    semaphore = threading.Semaphore(max_request)\n    delay_default = int(read_config_value(config, '录制设置', '循环时间(秒)', 120))\n    local_delay_default = int(read_config_value(config, '录制设置', '排队读取网址时间(秒)', 0))\n    loop_time = options.get(read_config_value(config, '录制设置', '是否显示循环秒数', \"否\"), False)\n    show_url = options.get(read_config_value(config, '录制设置', '是否显示直播源地址', \"否\"), False)\n    split_video_by_time = options.get(read_config_value(config, '录制设置', '分段录制是否开启', \"否\"), False)\n    enable_https_recording = options.get(read_config_value(config, '录制设置', '强制启用HTTPS录制', \"否\"), False)\n    disk_space_limit = float(read_config_value(config, '录制设置', '录制空间剩余阈值(gb)', 1.0))\n    split_time = str(read_config_value(config, '录制设置', '视频分段时间(秒)', 1800))\n    converts_to_mp4 = options.get(read_config_value(config, '录制设置', '录制完成后自动转为mp4格式', \"否\"), False)\n    delete_origin_file = options.get(read_config_value(config, '录制设置', '追加格式后删除原文件', \"否\"), False)\n    create_time_file = options.get(read_config_value(config, '录制设置', '生成时间字幕文件', \"否\"), False)\n    is_run_script = options.get(read_config_value(config, '录制设置', '是否录制完成后执行自定义脚本', \"否\"), False)\n    custom_script = read_config_value(config, '录制设置', '自定义脚本执行命令', \"\") if is_run_script else None\n    enable_proxy_platform = read_config_value(\n        config, '录制设置', '使用代理录制的平台(逗号分隔)',\n        'tiktok, soop, pandalive, winktv, flextv, popkontv, twitch, liveme, showroom, chzzk, shopee, shp, youtu')\n    enable_proxy_platform_list = enable_proxy_platform.replace('，', ',').split(',') if enable_proxy_platform else None\n    extra_enable_proxy = read_config_value(config, '录制设置', '额外使用代理录制的平台(逗号分隔)', '')\n    extra_enable_proxy_platform_list = extra_enable_proxy.replace('，', ',').split(',') if extra_enable_proxy else None\n    live_status_push = read_config_value(config, '推送配置', '直播状态推送渠道', \"\")\n    dingtalk_api_url = read_config_value(config, '推送配置', '钉钉推送接口链接', \"\")\n    xizhi_api_url = read_config_value(config, '推送配置', '微信推送接口链接', \"\")\n    bark_msg_api = read_config_value(config, '推送配置', 'bark推送接口链接', \"\")\n    bark_msg_level = read_config_value(config, '推送配置', 'bark推送中断级别', \"active\")\n    bark_msg_ring = read_config_value(config, '推送配置', 'bark推送铃声', \"bell\")\n    dingtalk_phone_num = read_config_value(config, '推送配置', '钉钉通知@对象(填手机号)', \"\")\n    dingtalk_is_atall = options.get(read_config_value(config, '推送配置', '钉钉通知@全体(是/否)', \"否\"), False)\n    tg_token = read_config_value(config, '推送配置', 'tgapi令牌', \"\")\n    tg_chat_id = read_config_value(config, '推送配置', 'tg聊天id(个人或者群组id)', \"\")\n    email_host = read_config_value(config, '推送配置', 'SMTP邮件服务器', \"\")\n    login_email = read_config_value(config, '推送配置', '邮箱登录账号', \"\")\n    email_password = read_config_value(config, '推送配置', '发件人密码(授权码)', \"\")\n    sender_email = read_config_value(config, '推送配置', '发件人邮箱', \"\")\n    sender_name = read_config_value(config, '推送配置', '发件人显示昵称', \"\")\n    to_email = read_config_value(config, '推送配置', '收件人邮箱', \"\")\n    ntfy_api = read_config_value(config, '推送配置', 'ntfy推送地址', \"\")\n    ntfy_tags = read_config_value(config, '推送配置', 'ntfy推送标签', \"tada\")\n    ntfy_email = read_config_value(config, '推送配置', 'ntfy推送邮箱', \"\")\n    push_message_title = read_config_value(config, '推送配置', '自定义推送标题', \"直播间状态更新通知\")\n    begin_push_message_text = read_config_value(config, '推送配置', '自定义开播推送内容', \"\")\n    over_push_message_text = read_config_value(config, '推送配置', '自定义关播推送内容', \"\")\n    disable_record = options.get(read_config_value(config, '推送配置', '只推送通知不录制(是/否)', \"否\"), False)\n    push_check_seconds = int(read_config_value(config, '推送配置', '直播推送检测频率(秒)', 1800))\n    begin_show_push = options.get(read_config_value(config, '推送配置', '开播推送开启(是/否)', \"是\"), True)\n    over_show_push = options.get(read_config_value(config, '推送配置', '关播推送开启(是/否)', \"否\"), False)\n    sooplive_username = read_config_value(config, '账号密码', 'sooplive账号', '')\n    sooplive_password = read_config_value(config, '账号密码', 'sooplive密码', '')\n    flextv_username = read_config_value(config, '账号密码', 'flextv账号', '')\n    flextv_password = read_config_value(config, '账号密码', 'flextv密码', '')\n    popkontv_username = read_config_value(config, '账号密码', 'popkontv账号', '')\n    popkontv_partner_code = read_config_value(config, '账号密码', 'partner_code', 'P-00001')\n    popkontv_password = read_config_value(config, '账号密码', 'popkontv密码', '')\n    twitcasting_account_type = read_config_value(config, '账号密码', 'twitcasting账号类型', 'normal')\n    twitcasting_username = read_config_value(config, '账号密码', 'twitcasting账号', '')\n    twitcasting_password = read_config_value(config, '账号密码', 'twitcasting密码', '')\n    popkontv_access_token = read_config_value(config, 'Authorization', 'popkontv_token', '')\n    dy_cookie = read_config_value(config, 'Cookie', '抖音cookie', '')\n    ks_cookie = read_config_value(config, 'Cookie', '快手cookie', '')\n    tiktok_cookie = read_config_value(config, 'Cookie', 'tiktok_cookie', '')\n    hy_cookie = read_config_value(config, 'Cookie', '虎牙cookie', '')\n    douyu_cookie = read_config_value(config, 'Cookie', '斗鱼cookie', '')\n    yy_cookie = read_config_value(config, 'Cookie', 'yy_cookie', '')\n    bili_cookie = read_config_value(config, 'Cookie', 'B站cookie', '')\n    xhs_cookie = read_config_value(config, 'Cookie', '小红书cookie', '')\n    bigo_cookie = read_config_value(config, 'Cookie', 'bigo_cookie', '')\n    blued_cookie = read_config_value(config, 'Cookie', 'blued_cookie', '')\n    sooplive_cookie = read_config_value(config, 'Cookie', 'sooplive_cookie', '')\n    netease_cookie = read_config_value(config, 'Cookie', 'netease_cookie', '')\n    qiandurebo_cookie = read_config_value(config, 'Cookie', '千度热播_cookie', '')\n    pandatv_cookie = read_config_value(config, 'Cookie', 'pandatv_cookie', '')\n    maoerfm_cookie = read_config_value(config, 'Cookie', '猫耳fm_cookie', '')\n    winktv_cookie = read_config_value(config, 'Cookie', 'winktv_cookie', '')\n    flextv_cookie = read_config_value(config, 'Cookie', 'flextv_cookie', '')\n    look_cookie = read_config_value(config, 'Cookie', 'look_cookie', '')\n    twitcasting_cookie = read_config_value(config, 'Cookie', 'twitcasting_cookie', '')\n    baidu_cookie = read_config_value(config, 'Cookie', 'baidu_cookie', '')\n    weibo_cookie = read_config_value(config, 'Cookie', 'weibo_cookie', '')\n    kugou_cookie = read_config_value(config, 'Cookie', 'kugou_cookie', '')\n    twitch_cookie = read_config_value(config, 'Cookie', 'twitch_cookie', '')\n    liveme_cookie = read_config_value(config, 'Cookie', 'liveme_cookie', '')\n    huajiao_cookie = read_config_value(config, 'Cookie', 'huajiao_cookie', '')\n    liuxing_cookie = read_config_value(config, 'Cookie', 'liuxing_cookie', '')\n    showroom_cookie = read_config_value(config, 'Cookie', 'showroom_cookie', '')\n    acfun_cookie = read_config_value(config, 'Cookie', 'acfun_cookie', '')\n    changliao_cookie = read_config_value(config, 'Cookie', 'changliao_cookie', '')\n    yinbo_cookie = read_config_value(config, 'Cookie', 'yinbo_cookie', '')\n    yingke_cookie = read_config_value(config, 'Cookie', 'yingke_cookie', '')\n    zhihu_cookie = read_config_value(config, 'Cookie', 'zhihu_cookie', '')\n    chzzk_cookie = read_config_value(config, 'Cookie', 'chzzk_cookie', '')\n    haixiu_cookie = read_config_value(config, 'Cookie', 'haixiu_cookie', '')\n    vvxqiu_cookie = read_config_value(config, 'Cookie', 'vvxqiu_cookie', '')\n    yiqilive_cookie = read_config_value(config, 'Cookie', '17live_cookie', '')\n    langlive_cookie = read_config_value(config, 'Cookie', 'langlive_cookie', '')\n    pplive_cookie = read_config_value(config, 'Cookie', 'pplive_cookie', '')\n    six_room_cookie = read_config_value(config, 'Cookie', '6room_cookie', '')\n    lehaitv_cookie = read_config_value(config, 'Cookie', 'lehaitv_cookie', '')\n    huamao_cookie = read_config_value(config, 'Cookie', 'huamao_cookie', '')\n    shopee_cookie = read_config_value(config, 'Cookie', 'shopee_cookie', '')\n    youtube_cookie = read_config_value(config, 'Cookie', 'youtube_cookie', '')\n    taobao_cookie = read_config_value(config, 'Cookie', 'taobao_cookie', '')\n    jd_cookie = read_config_value(config, 'Cookie', 'jd_cookie', '')\n\n    video_save_type_list = (\"FLV\", \"MKV\", \"TS\", \"MP4\", \"MP3音频\", \"M4A音频\")\n    if video_save_type and video_save_type.upper() in video_save_type_list:\n        video_save_type = video_save_type.upper()\n    else:\n        video_save_type = \"TS\"\n\n    check_path = video_save_path or default_path\n    if utils.check_disk_capacity(check_path, show=first_run) < disk_space_limit:\n        exit_recording = True\n        if not recording:\n            logger.warning(f\"Disk space remaining is below {disk_space_limit} GB. \"\n                           f\"Exiting program due to the disk space limit being reached.\")\n            sys.exit(-1)\n\n\n    def contains_url(string: str) -> bool:\n        pattern = r\"(https?://)?(www\\.)?[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+(:\\d+)?(/.*)?\"\n        return re.search(pattern, string) is not None\n\n\n    try:\n        url_comments, line_list, url_line_list = [[] for _ in range(3)]\n        with (open(url_config_file, \"r\", encoding=text_encoding, errors='ignore') as file):\n            for origin_line in file:\n                if origin_line in line_list:\n                    delete_line(url_config_file, origin_line)\n                line_list.append(origin_line)\n                line = origin_line.strip()\n                if len(line) < 20:\n                    continue\n\n                line_spilt = line.split('主播: ')\n                if len(line_spilt) > 2:\n                    line = update_file(url_config_file, line, f'{line_spilt[0]}主播: {line_spilt[-1]}')\n\n                is_comment_line = line.startswith(\"#\")\n                if is_comment_line:\n                    line = line.lstrip('#')\n\n                if re.search('[,，]', line):\n                    split_line = re.split('[,，]', line)\n                else:\n                    split_line = [line, '']\n\n                if len(split_line) == 1:\n                    url = split_line[0]\n                    quality, name = [video_record_quality, '']\n                elif len(split_line) == 2:\n                    if contains_url(split_line[0]):\n                        quality = video_record_quality\n                        url, name = split_line\n                    else:\n                        quality, url = split_line\n                        name = ''\n                else:\n                    quality, url, name = split_line\n\n                if quality not in (\"原画\", \"蓝光\", \"超清\", \"高清\", \"标清\", \"流畅\"):\n                    quality = '原画'\n\n                if url not in url_line_list:\n                    url_line_list.append(url)\n                else:\n                    delete_line(url_config_file, origin_line)\n\n                url = 'https://' + url if '://' not in url else url\n                url_host = url.split('/')[2]\n\n                platform_host = [\n                    'live.douyin.com',\n                    'v.douyin.com',\n                    'www.douyin.com',\n                    'live.kuaishou.com',\n                    'www.huya.com',\n                    'www.douyu.com',\n                    'www.yy.com',\n                    'live.bilibili.com',\n                    'www.redelight.cn',\n                    'www.xiaohongshu.com',\n                    'xhslink.com',\n                    'www.bigo.tv',\n                    'slink.bigovideo.tv',\n                    'app.blued.cn',\n                    'cc.163.com',\n                    'qiandurebo.com',\n                    'fm.missevan.com',\n                    'look.163.com',\n                    'twitcasting.tv',\n                    'live.baidu.com',\n                    'weibo.com',\n                    'fanxing.kugou.com',\n                    'fanxing2.kugou.com',\n                    'mfanxing.kugou.com',\n                    'www.huajiao.com',\n                    'www.7u66.com',\n                    'wap.7u66.com',\n                    'live.acfun.cn',\n                    'm.acfun.cn',\n                    'www.tlclw.com',\n                    'wap.tlclw.com',\n                    'live.ybw1666.com',\n                    'wap.ybw1666.com',\n                    'www.inke.cn',\n                    'www.zhihu.com',\n                    'www.haixiutv.com',\n                    \"h5webcdn-pro.vvxqiu.com\",\n                    \"17.live\",\n                    'www.lang.live',\n                    \"m.pp.weimipopo.com\",\n                    \"v.6.cn\",\n                    \"m.6.cn\",\n                    'www.lehaitv.com',\n                    'h.catshow168.com',\n                    'e.tb.cn',\n                    'huodong.m.taobao.com',\n                    '3.cn',\n                    'eco.m.jd.com'\n                ]\n                overseas_platform_host = [\n                    'www.tiktok.com',\n                    'play.sooplive.co.kr',\n                    'm.sooplive.co.kr',\n                    'www.pandalive.co.kr',\n                    'www.winktv.co.kr',\n                    'www.flextv.co.kr',\n                    'www.popkontv.com',\n                    'www.twitch.tv',\n                    'www.liveme.com',\n                    'www.showroom-live.com',\n                    'chzzk.naver.com',\n                    'm.chzzk.naver.com',\n                    'live.shopee.',\n                    '.shp.ee',\n                    'www.youtube.com',\n                    'youtu.be',\n                ]\n\n                platform_host.extend(overseas_platform_host)\n                clean_url_host_list = (\n                    \"live.douyin.com\",\n                    \"live.bilibili.com\",\n                    \"www.huajiao.com\",\n                    \"www.zhihu.com\",\n                    \"www.huya.com\",\n                    \"chzzk.naver.com\",\n                    \"www.liveme.com\",\n                    \"www.haixiutv.com\",\n                    \"v.6.cn\",\n                    \"m.6.cn\",\n                    'www.lehaitv.com'\n                )\n\n                if 'live.shopee.' in url_host or '.shp.ee' in url_host:\n                    url_host = 'live.shopee.' if 'live.shopee.' in url_host else '.shp.ee'\n\n                if url_host in platform_host or any(ext in url for ext in (\".flv\", \".m3u8\")):\n                    if url_host in clean_url_host_list:\n                        url = update_file(url_config_file, old_str=url, new_str=url.split('?')[0])\n\n                    if 'xiaohongshu' in url:\n                        host_id = re.search('&host_id=(.*?)(?=&|$)', url)\n                        if host_id:\n                            new_url = url.split('?')[0] + f'?host_id={host_id.group(1)}'\n                            url = update_file(url_config_file, old_str=url, new_str=new_url)\n\n                    url_comments = [i for i in url_comments if url not in i]\n                    if is_comment_line:\n                        url_comments.append(url)\n                    else:\n                        new_line = (quality, url, name)\n                        url_tuples_list.append(new_line)\n                else:\n                    if not origin_line.startswith('#'):\n                        color_obj.print_colored(f\"\\r{origin_line.strip()} 本行包含未知链接.此条跳过\", color_obj.YELLOW)\n                        update_file(url_config_file, old_str=origin_line, new_str=origin_line, start_str='#')\n\n        while len(need_update_line_list):\n            a = need_update_line_list.pop()\n            replace_words = a.split('|')\n            if replace_words[0] != replace_words[1]:\n                if replace_words[1].startswith(\"#\"):\n                    start_with = '#'\n                    new_word = replace_words[1][1:]\n                else:\n                    start_with = None\n                    new_word = replace_words[1]\n                update_file(url_config_file, old_str=replace_words[0], new_str=new_word, start_str=start_with)\n\n        text_no_repeat_url = list(set(url_tuples_list))\n\n        if len(text_no_repeat_url) > 0:\n            for url_tuple in text_no_repeat_url:\n                monitoring = len(running_list)\n\n                if url_tuple[1] in not_record_list:\n                    continue\n\n                if url_tuple[1] not in running_list:\n                    print(f\"\\r{'新增' if not first_start else '传入'}地址: {url_tuple[1]}\")\n                    monitoring += 1\n                    args = [url_tuple, monitoring]\n                    create_var[f'thread_{monitoring}'] = threading.Thread(target=start_record, args=args)\n                    create_var[f'thread_{monitoring}'].daemon = True\n                    create_var[f'thread_{monitoring}'].start()\n                    running_list.append(url_tuple[1])\n                    time.sleep(local_delay_default)\n        url_tuples_list = []\n        first_start = False\n\n    except Exception as err:\n        logger.error(f\"错误信息: {err} 发生错误的行数: {err.__traceback__.tb_lineno}\")\n\n    if first_run:\n        t = threading.Thread(target=display_info, args=(), daemon=True)\n        t.start()\n        t2 = threading.Thread(target=adjust_max_request, args=(), daemon=True)\n        t2.start()\n        first_run = False\n\n    time.sleep(3)"
        },
        {
          "name": "msg_push.py",
          "type": "blob",
          "size": 9.2841796875,
          "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\nAuthor: Hmily\nGitHub: https://github.com/ihmily\nDate: 2023-09-03 19:18:36\nUpdate: 2024-10-23 23:37:12\nCopyright (c) 2023-2024 by Hmily, All Rights Reserved.\n\"\"\"\nfrom typing import Dict, Any\nimport json\nimport base64\nimport urllib.request\nimport urllib.error\nimport smtplib\nfrom email.header import Header\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nno_proxy_handler = urllib.request.ProxyHandler({})\nopener = urllib.request.build_opener(no_proxy_handler)\nheaders: Dict[str, str] = {'Content-Type': 'application/json'}\n\n\ndef dingtalk(url: str, content: str, number: str = None, is_atall: bool = False) -> Dict[str, Any]:\n    success = []\n    error = []\n    api_list = url.replace('，', ',').split(',') if url.strip() else []\n    for api in api_list:\n        json_data = {\n            'msgtype': 'text',\n            'text': {\n                'content': content,\n            },\n            \"at\": {\n                \"atMobiles\": [\n                    number\n                ],\n                \"isAtAll\": is_atall\n            },\n        }\n        try:\n            data = json.dumps(json_data).encode('utf-8')\n            req = urllib.request.Request(api, data=data, headers=headers)\n            response = opener.open(req, timeout=10)\n            json_str = response.read().decode('utf-8')\n            json_data = json.loads(json_str)\n            if json_data['errcode'] == 0:\n                success.append(api)\n            else:\n                error.append(api)\n                print(f'钉钉推送失败, 推送地址：{api}, {json_data[\"errmsg\"]}')\n        except Exception as e:\n            error.append(api)\n            print(f'钉钉推送失败, 推送地址：{api}, 错误信息:{e}')\n    return {\"success\": success, \"error\": error}\n\n\ndef xizhi(url: str, title: str, content: str) -> Dict[str, Any]:\n    success = []\n    error = []\n    api_list = url.replace('，', ',').split(',') if url.strip() else []\n    for api in api_list:\n        json_data = {\n            'title': title,\n            'content': content\n        }\n        try:\n            data = json.dumps(json_data).encode('utf-8')\n            req = urllib.request.Request(url, data=data, headers=headers)\n            response = opener.open(req, timeout=10)\n            json_str = response.read().decode('utf-8')\n            json_data = json.loads(json_str)\n            if json_data['code'] == 200:\n                success.append(api)\n            else:\n                error.append(api)\n                print(f'微信推送失败, 推送地址：{api}, 失败信息：{json_data[\"msg\"]}')\n        except Exception as e:\n            error.append(api)\n            print(f'微信推送失败, 推送地址：{api}, 错误信息:{e}')\n    return {\"success\": success, \"error\": error}\n\n\ndef send_email(email_host: str, login_email: str, email_pass: str, sender_email: str, sender_name: str,\n               to_email: str, title: str, content: str) -> Dict[str, Any]:\n    receivers = to_email.replace('，', ',').split(',') if to_email.strip() else []\n\n    try:\n        message = MIMEMultipart()\n        send_name = base64.b64encode(sender_name.encode(\"utf-8\")).decode()\n        message['From'] = f'=?UTF-8?B?{send_name}?= <{sender_email}>'\n        message['Subject'] = Header(title, 'utf-8')\n        if len(receivers) == 1:\n            message['To'] = receivers[0]\n\n        t_apart = MIMEText(content, 'plain', 'utf-8')\n        message.attach(t_apart)\n\n        smtp_obj = smtplib.SMTP_SSL(email_host, 465)\n        smtp_obj.login(login_email, email_pass)\n        smtp_obj.sendmail(sender_email, receivers, message.as_string())\n        return {\"success\": receivers, \"error\": []}\n    except smtplib.SMTPException as e:\n        print(f'邮件推送失败, 推送邮箱：{to_email}, 错误信息:{e}')\n        return {\"success\": [], \"error\": receivers}\n\n\ndef tg_bot(chat_id: int, token: str, content: str) -> Dict[str, Any]:\n    try:\n        json_data = {\n            \"chat_id\": chat_id,\n            'text': content\n        }\n        url = f'https://api.telegram.org/bot{token}/sendMessage'\n        data = json.dumps(json_data).encode('utf-8')\n        req = urllib.request.Request(url, data=data, headers=headers)\n        response = urllib.request.urlopen(req, timeout=15)\n        json_str = response.read().decode('utf-8')\n        _json_data = json.loads(json_str)\n        return {\"success\": [1], \"error\": []}\n    except Exception as e:\n        print(f'tg推送失败, 聊天ID：{chat_id}, 错误信息:{e}')\n        return {\"success\": [], \"error\": [1]}\n\n\ndef bark(api: str, title: str = \"message\", content: str = 'test', level: str = \"active\",\n         badge: int = 1, auto_copy: int = 1, sound: str = \"\", icon: str = \"\", group: str = \"\",\n         is_archive: int = 1, url: str = \"\") -> Dict[str, Any]:\n    success = []\n    error = []\n    api_list = api.replace('，', ',').split(',') if api.strip() else []\n    for _api in api_list:\n        json_data = {\n            \"title\": title,\n            \"body\": content,\n            \"level\": level,\n            \"badge\": badge,\n            \"autoCopy\": auto_copy,\n            \"sound\": sound,\n            \"icon\": icon,\n            \"group\": group,\n            \"isArchive\": is_archive,\n            \"url\": url\n        }\n        try:\n            data = json.dumps(json_data).encode('utf-8')\n            req = urllib.request.Request(_api, data=data, headers=headers)\n            response = opener.open(req, timeout=10)\n            json_str = response.read().decode(\"utf-8\")\n            json_data = json.loads(json_str)\n            if json_data['code'] == 200:\n                success.append(_api)\n            else:\n                error.append(_api)\n                print(f'Bark推送失败, 推送地址：{_api}, 失败信息：{json_data[\"message\"]}')\n        except Exception as e:\n            error.append(api)\n            print(f'Bark推送失败, 推送地址：{_api}, 错误信息:{e}')\n    return {\"success\": success, \"error\": error}\n\n\ndef ntfy(api: str, title: str = \"message\", content: str = 'test', tags: str = 'tada', priority: int = 3,\n         action_url: str = \"\", attach: str = \"\", filename: str = \"\", click: str = \"\", icon: str = \"\",\n         delay: str = \"\", email: str = \"\", call: str = \"\") -> Dict[str, Any]:\n    success = []\n    error = []\n    api_list = api.replace('，', ',').split(',') if api.strip() else []\n    tags = tags.replace('，', ',').split(',') if tags else ['partying_face']\n    actions = [{\"action\": \"view\", \"label\": \"view live\", \"url\": action_url}] if action_url else []\n    for _api in api_list:\n        server, topic = _api.rsplit('/', maxsplit=1)\n        json_data = {\n            \"topic\": topic,\n            \"title\": title,\n            \"message\": content,\n            \"tags\": tags,\n            \"priority\": priority,\n            \"attach\": attach,\n            \"filename\": filename,\n            \"click\": click,\n            \"actions\": actions,\n            \"markdown\": False,\n            \"icon\": icon,\n            \"delay\": delay,\n            \"email\": email,\n            \"call\": call\n        }\n\n        try:\n            data = json.dumps(json_data, ensure_ascii=False).encode('utf-8')\n            req = urllib.request.Request(server, data=data, headers=headers)\n            response = opener.open(req, timeout=10)\n            json_str = response.read().decode(\"utf-8\")\n            json_data = json.loads(json_str)\n            if \"error\" not in json_data:\n                success.append(_api)\n            else:\n                error.append(_api)\n                print(f'ntfy推送失败, 推送地址：{_api}, 失败信息：{json_data[\"error\"]}')\n        except urllib.error.HTTPError as e:\n            error.append(_api)\n            error_msg = e.read().decode(\"utf-8\")\n            print(f'ntfy推送失败, 推送地址：{_api}, 错误信息:{json.loads(error_msg)[\"error\"]}')\n        except Exception as e:\n            error.append(api)\n            print(f'ntfy推送失败, 推送地址：{_api}, 错误信息:{e}')\n    return {\"success\": success, \"error\": error}\n\n\nif __name__ == '__main__':\n    send_title = '直播通知'  # 标题\n    send_content = '张三 开播了！'  # 推送内容\n\n    # 钉钉推送通知\n    webhook_api = ''  # 替换成自己Webhook链接,参考文档：https://open.dingtalk.com/document/robots/custom-robot-access\n    phone_number = ''  # 被@用户的手机号码\n    is_atall = ''  # 是否@全体\n    # dingtalk(webhook_api, send_content, phone_number)\n\n    # 微信推送通知\n    # 替换成自己的单点推送接口,获取地址：https://xz.qqoq.net/#/admin/one\n    # 当然也可以使用其他平台API 如server酱 使用方法一样\n    xizhi_api = 'https://xizhi.qqoq.net/xxxxxxxxx.send'\n    # xizhi(xizhi_api, send_content)\n\n    # telegram推送通知\n    tg_token = ''  # tg搜索\"BotFather\"获取的token值\n    tg_chat_id = 000000  # tg搜索\"userinfobot\"获取的chat_id值，即可发送推送消息给你自己，如果下面的是群组id则发送到群\n    # tg_bot(tg_chat_id, tg_token, send_content)\n\n    # email_message(\n    #     email_host=\"smtp.qq.com\",\n    #     login_email=\"\",\n    #     email_pass=\"\",\n    #     sender_email=\"\",\n    #     sender_name=\"\",\n    #     to_email=\"\",\n    #     title=\"\",\n    #     content=\"\"\n    # )\n\n    bark_url = 'https://xxx.xxx.com/key/'\n    # bark(bark_url, send_title, send_content)\n\n    ntfy(\n        api=\"https://ntfy.sh/xxxxx\",\n        title=\"直播推送\",\n        content=\"xxx已开播\",\n    )\n"
        },
        {
          "name": "poetry.toml",
          "type": "blob",
          "size": 0.0712890625,
          "content": "[virtualenvs]\nin-project = true\ncreate = true\nprefer-active-python = true"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.611328125,
          "content": "[project]\nrequires-python = \">=3.10\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry]\nname = \"douyinliverecorder\"\nversion = \"3.0.9\"\ndescription = \"An easy tool for recording live streams\"\nauthors = [\"Hmily\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/ihmily/DouyinLiveRecorder\"\nrepository = \"https://github.com/ihmily/DouyinLiveRecorder\"\nkeywords = [\"douyin\", \"live\", \"recorder\"]\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\nrequests = \"^2.25.1\"\nPyExecJS = \"^1.5.1\"\nloguru = \"^0.5.3\"\npycryptodome = \"^3.10.1\"\ndistro = \"^1.9.0\"\ntqdm = \"^4.66.5\""
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0771484375,
          "content": "requests\nPyExecJS\nloguru==0.7.2\npycryptodome==3.20.0\ndistro==1.9.0\ntqdm==4.66.5"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.9453125,
          "content": "# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='douyinliverecorder',\n    version='3.0.9',\n    author='Hmily',\n    description='An easy tool for recording live streams',\n    long_description=open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/ihmily/DouyinLiveRecorder',\n    packages=find_packages(),\n    install_requires=[\n        'requests',\n        'PyExecJS',\n        'loguru',\n        'pycryptodome',\n        'distro',\n        'tqdm'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: 3.13',\n    ]\n)\n"
        }
      ]
    }
  ]
}