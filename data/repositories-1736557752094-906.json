{
  "metadata": {
    "timestamp": 1736557752094,
    "page": 906,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/cascadia-code",
      "stars": 26283,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".azure-pipelines.yml",
          "type": "blob",
          "size": 1.26,
          "content": "trigger: none\npr:\n  branches:\n    include:\n      - main\n\nparameters:\n  - name: static\n    displayName: Generate Static Fonts\n    type: boolean\n    default: true\n\nvariables:\n  - name: runCodesignValidationInjectionBG\n    value: false\n\njobs:\n  - job: build\n    displayName: Build Font\n    pool:\n      vmImage: macOS-latest\n    steps:\n      - task: UsePythonVersion@0\n        displayName: 'Use Python 3.8'\n        inputs:\n          versionSpec: '3.8'\n\n      - bash: |\n         brew install ttfautohint\n         pip install -r requirements.txt ufolint\n        displayName: 'Install build dependencies'\n\n      - bash: |\n         ufolint sources/*.ufo\n        displayName: 'Lint sources'\n\n      - ${{ if eq(parameters.static, true) }}:\n        - bash: |\n           python ./build.py -S -W\n          displayName: 'Build variable + static fonts'\n\n      - ${{ if eq(parameters.static, false) }}:\n        - bash: |\n           python ./build.py -W\n          displayName: 'Build variable fonts only'\n\n      - bash: |\n         mkdir -p out\n         cd build\n         zip -r ../out/CascadiaCode.zip ttf otf woff2\n        displayName: 'Archive all fonts'\n\n      - task: PublishPipelineArtifact@1\n        displayName: 'Publish archive'\n        inputs:\n          targetPath: out\n          artifact: 'archive'\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.57,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n.DS_Store\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk \n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output \nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder \n.mfractor/\n\n# other files\nbuild/\ntestground/\nnewVTT.xml\nconverter.py\nsalishan/\nfixTSI1.py\nvenv/\n.vscode/settings.json\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.44,
          "content": "# Code of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct][conduct-code].\r\nFor more information see the [Code of Conduct FAQ][conduct-FAQ] or contact [opencode@microsoft.com][conduct-email] with any additional questions or comments.\r\n\r\n[conduct-code]: https://opensource.microsoft.com/codeofconduct/\r\n[conduct-FAQ]: https://opensource.microsoft.com/codeofconduct/faq/\r\n[conduct-email]: mailto:opencode@microsoft.com"
        },
        {
          "name": "FONTLOG.txt",
          "type": "blob",
          "size": 4.65,
          "content": "FONTLOG for Cascadia Code\r\n===================================\r\n\r\nThis file provides detailed information on the Cascadia Code font. This information should be distributed along with the Cascadia Code font and any derivative works.\r\n\r\nBasic Font Information\r\n-----------------------------------\r\n\r\nCascadia Code is a monospaced font shipped by Microsoft. It includes programming ligatures and is intended for use in terminal applications as well as text editors.\r\n\r\nContribution Information\r\n-----------------------------------\r\n\r\nDocumentation and contribution guidelines can be found at: https://github.com/microsoft/cascadia-code\r\n\r\nChangeLog\r\n-----------------------------------\r\n\r\n09-25-2019 (Aaron Bell) Bug Fixes and Improvements\r\n\r\n09-18-2019 (Aaron Bell) Cascadia Code Version 1909.16\r\n- Initial release\r\n\r\n10-04-2019 (Aaron Bell) Cascadia Code Version 1910.04\r\n- Addition of Latin-1 characters\r\n- Addition of box drawing glyphs\r\n11-20-2019 (Aaron Bell) Cascadia Code Version 1911.20\r\n- Cyrillic, Greek, Vietnamese, and many other symbols added\r\n- Font converted to UFO with a build workflow\r\n- font rehinted\r\n- many other fixes!\r\n\r\n04-29-2020 (Aaron Bell) April bug fixes\r\n- Many small bug fixes from the last few months\r\n\r\n05-05-2020 Font vertical metrics locked\r\n\r\n05-15-2020 (Aaron Bell, Dustin Howett) [Version 2005.15]\r\nFixed WinDescent value to improve line spacing\r\n\r\n06-29-2020 (Aaron Bell) Variable font conversion\r\nConverted Cascadia Code to a Variable font with a weight axis\r\n\r\n\r\n06-29-2020 (Aaron Bell) [Version 2007.01]\r\nReworked Cascadia Code to be a variable font with 6 named variations ranging\r\nfrom ExtraLight to Bold.\r\nSplit the long equals ligature (==) for earier reading\r\nRemoved the hexadeciaml 'x' alternate\r\nCorrected malformed IJacute dioacritics\r\nIntroduced a compatibility layout for PowerLine glyphs that will\r\nbe used in GDI\r\n\r\n08-25-2020 (Aaron Bell) [Version 2008.25]\r\nStarted generating static TTFs and hinting them with ttfautohint\r\nAligned the powerline glyphs to the font metrics exactly\r\nRealigned the box drawing glyphs to match the letters\r\nAdded anchors to all alphabetic characters (and brevecomb-cy)\r\nadded fi/fl ligatures (decomposed!)\r\nFixed the weight of horncomb in bold\r\n\r\n9-14-2020\r\n1) Added support for Salishan language groups\r\n2) Remastered mark positioning for glyphs with 2 diacritics (needed for Salishan)\r\n3) Rebuild Build Script to simplify code\r\n4) Fixed minor other hinting issues\r\n5) Fixed RVRN substitutions for heavy weight\r\n\r\n9-21-2020\r\n1) Correcting mark positioning for salishan\r\n\r\n5-25-2021\r\nCASCADIA CODE ITALIC\r\n\r\n6-17-2021\r\nCASCADIA CODE ARABIC & HEBREW\r\nITALIC V2\r\n\r\n01-19-2024 (Philippe Majerus) Checkerboard, more quadrants, and sextants.\r\n- Added some new checkerboard characters U+2427 - U+2429, U+1FB95, U+1FB96 (Symbols for Legacy Computing).\r\n- Added new centered Quadrants U+1FBE4 - U+1FBE7 (Symbols for Legacy Computing).\r\n- Added Triangular Quadrant characters U+1FB68 - U+1FB6F, U+1FB9A, U+1FB9B (Symbols for Legacy Computing).\r\n- Added Circular Quadrant characters U+1FBE8 - U+1FBEF (Symbols for Legacy Computing).\r\n- Added Sextant characters U+1FB00 - U+1FB3B (Symbols for Legacy Computing).\r\n\r\n04-08-2024 (Aaron Bell) Nerd Fonts\r\n- Implemented Nerd Fonts, current as of 2024-04-08, as an optional build feature for the entire Cascadia\r\n  family.\r\n\r\n04-10-2024 (Philippe Majerus) Diagonals, octants, sedecimants & eights, separated quadrants & sextants, segmented digits, and large type pieces.\r\n- Added diagonals U+1FB3C - U+1FB67 (Symbols for Legacy Computing).\r\n- Added octants U+1CD00 - U+1CDE5 (Symbols for Legacy Computing).\r\n- Added sedecimants U+1CE90 - U+1CEAF (Symbols for Legacy Computing).\r\n- Added eights U+1FB70 - U+1FB80, U+1FB82 - U+1FB8B (Symbols for Legacy Computing).\r\n- Added misc. blocks U+1FB97, U+1FBCE, U+1FBCF (Symbols for Legacy Computing).\r\n- Added separated quadrants U+1CC21 - U+1CC2F (Symbols for Legacy Computing).\r\n- Added separated sextants U+1CE51 - U+1CE8F (Symbols for Legacy Computing).\r\n- Added segmented digits U+1CCF0 - U+1CCF9 (Symbols for Legacy Computing).\r\n- Added large type pieces U+1CE1A - U+1CE50 (Symbols for Legacy Computing).\r\n\r\n04-23-2024 (Dustin L. Howett)\r\n- Minted version 2404.23\r\n\r\n07-24-2024 (Aaron Bell, Dustin L. Howett)\r\n- Fixed hinting issue for Arabic glyphs\r\n- Minted version 2407.24\r\n\r\nAcknowledgements\r\n-----------------------------------\r\n\r\nIf you make modifications, be sure to add your name (N), email (E), web-address (if you have one) (W), and description (D). This list is in alphabetical order.\r\n\r\nN: Aaron Bell\r\nE: aaron@sajatypeworks.com\r\nW: http://sajatypeworks.com\r\nD: Original font designer\r\n\r\nN: Philippe Majerus\r\nW: http://www.phm.lu\r\nD: Legacy computing, mosaic blocks, large type pieces\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.38,
          "content": "Copyright (c) 2019 - Present, Microsoft Corporation,\r\nwith Reserved Font Name Cascadia Code.\r\n\r\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\r\nThis license is copied below, and is also available with a FAQ at:\r\nhttp://scripts.sil.org/OFL\r\n\r\n\r\n-----------------------------------------------------------\r\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\r\n-----------------------------------------------------------\r\n\r\nPREAMBLE\r\nThe goals of the Open Font License (OFL) are to stimulate worldwide\r\ndevelopment of collaborative font projects, to support the font creation\r\nefforts of academic and linguistic communities, and to provide a free and\r\nopen framework in which fonts may be shared and improved in partnership\r\nwith others.\r\n\r\nThe OFL allows the licensed fonts to be used, studied, modified and\r\nredistributed freely as long as they are not sold by themselves. The\r\nfonts, including any derivative works, can be bundled, embedded, \r\nredistributed and/or sold with any software provided that any reserved\r\nnames are not used by derivative works. The fonts and derivatives,\r\nhowever, cannot be released under any other type of license. The\r\nrequirement for fonts to remain under this license does not apply\r\nto any document created using the fonts or their derivatives.\r\n\r\nDEFINITIONS\r\n\"Font Software\" refers to the set of files released by the Copyright\r\nHolder(s) under this license and clearly marked as such. This may\r\ninclude source files, build scripts and documentation.\r\n\r\n\"Reserved Font Name\" refers to any names specified as such after the\r\ncopyright statement(s).\r\n\r\n\"Original Version\" refers to the collection of Font Software components as\r\ndistributed by the Copyright Holder(s).\r\n\r\n\"Modified Version\" refers to any derivative made by adding to, deleting,\r\nor substituting -- in part or in whole -- any of the components of the\r\nOriginal Version, by changing formats or by porting the Font Software to a\r\nnew environment.\r\n\r\n\"Author\" refers to any designer, engineer, programmer, technical\r\nwriter or other person who contributed to the Font Software.\r\n\r\nPERMISSION & CONDITIONS\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of the Font Software, to use, study, copy, merge, embed, modify,\r\nredistribute, and sell modified and unmodified copies of the Font\r\nSoftware, subject to the following conditions:\r\n\r\n1) Neither the Font Software nor any of its individual components,\r\nin Original or Modified Versions, may be sold by itself.\r\n\r\n2) Original or Modified Versions of the Font Software may be bundled,\r\nredistributed and/or sold with any software, provided that each copy\r\ncontains the above copyright notice and this license. These can be\r\nincluded either as stand-alone text files, human-readable headers or\r\nin the appropriate machine-readable metadata fields within text or\r\nbinary files as long as those fields can be easily viewed by the user.\r\n\r\n3) No Modified Version of the Font Software may use the Reserved Font\r\nName(s) unless explicit written permission is granted by the corresponding\r\nCopyright Holder. This restriction only applies to the primary font name as\r\npresented to the users.\r\n\r\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\r\nSoftware shall not be used to promote, endorse or advertise any\r\nModified Version, except to acknowledge the contribution(s) of the\r\nCopyright Holder(s) and the Author(s) or with their explicit written\r\npermission.\r\n\r\n5) The Font Software, modified or unmodified, in part or in whole,\r\nmust be distributed entirely under this license, and must not be\r\ndistributed under any other license. The requirement for fonts to\r\nremain under this license does not apply to any document created\r\nusing the Font Software.\r\n\r\nTERMINATION\r\nThis license becomes null and void if any of the above conditions are\r\nnot met.\r\n\r\nDISCLAIMER\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\r\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\r\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\r\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\r\nOTHER DEALINGS IN THE FONT SOFTWARE.\r\n"
        },
        {
          "name": "OFL-FAQ.txt",
          "type": "blob",
          "size": 57.57,
          "content": "OFL FAQ - Frequently Asked Questions about the SIL Open Font License (OFL)\r\nVersion 1.1-update5 - April 2017\r\nThe OFL FAQ is copyright (c) 2005-2017 SIL International.\r\n(See http://scripts.sil.org/OFL for updates)\r\n\r\n\r\nCONTENTS OF THIS FAQ\r\n1  USING AND DISTRIBUTING FONTS LICENSED UNDER THE OFL\r\n2  USING OFL FONTS FOR WEB PAGES AND ONLINE WEB FONT SERVICES\r\n3  MODIFYING OFL-LICENSED FONTS\r\n4  LICENSING YOUR ORIGINAL FONTS UNDER THE OFL\r\n5  CHOOSING RESERVED FONT NAMES\r\n6  ABOUT THE FONTLOG\r\n7  MAKING CONTRIBUTIONS TO OFL PROJECTS\r\n8  ABOUT THE LICENSE ITSELF\r\n9  ABOUT SIL INTERNATIONAL\r\nAPPENDIX A - FONTLOG EXAMPLE\r\n\r\n1  USING AND DISTRIBUTING FONTS LICENSED UNDER THE OFL\r\n\r\n1.1  Can I use the fonts for a book or other print publication, to create logos or other graphics or even to manufacture objects based on their outlines?\r\nYes. You are very welcome to do so. Authors of fonts released under the OFL allow you to use their font software as such for any kind of design work. No additional license or permission is required, unlike with some other licenses. Some examples of these uses are: logos, posters, business cards, stationery, video titling, signage, t-shirts, personalised fabric, 3D-printed/laser-cut shapes, sculptures, rubber stamps, cookie cutters and lead type.\r\n\r\n1.1.1  Does that restrict the license or distribution of that artwork?\r\nNo. You remain the author and copyright holder of that newly derived graphic or object. You are simply using an open font in the design process. It is only when you redistribute, bundle or modify the font itself that other conditions of the license have to be respected (see below for more details).\r\n\r\n1.1.2  Is any kind of acknowledgement required?\r\nNo. Font authors may appreciate being mentioned in your artwork's acknowledgements alongside the name of the font, possibly with a link to their website, but that is not required.\r\n\r\n1.2  Can the fonts be included with Free/Libre and Open Source Software collections such as GNU/Linux and BSD distributions and repositories?\r\nYes! Fonts licensed under the OFL can be freely included alongside other software under FLOSS (Free/Libre and Open Source Software) licenses. Since fonts are typically aggregated with, not merged into, existing software, there is little need to be concerned about incompatibility with existing software licenses. You may also repackage the fonts and the accompanying components in a .rpm or .deb package (or other similar package formats or installers) and include them in distribution CD/DVDs and online repositories. (Also see section 5.9 about rebuilding from source.)\r\n\r\n1.3  I want to distribute the fonts with my program. Does this mean my program also has to be Free/Libre and Open Source Software?\r\nNo. Only the portions based on the Font Software are required to be released under the OFL. The intent of the license is to allow aggregation or bundling with software under restricted licensing as well.\r\n\r\n1.4  Can I sell a software package that includes these fonts?\r\nYes, you can do this with both the Original Version and a Modified Version of the fonts. Examples of bundling made possible by the OFL would include: word processors, design and publishing applications, training and educational software, games and entertainment software, mobile device applications, etc.\r\n\r\n1.5  Can I include the fonts on a CD of freeware or commercial fonts?\r\nYes, as long some other font or software is also on the disk, so the OFL font is not sold by itself.\r\n\r\n1.6  Why won't the OFL let me sell the fonts alone?\r\nThe intent is to keep people from making money by simply redistributing the fonts. The only people who ought to profit directly from the fonts should be the original authors, and those authors have kindly given up potential direct income to distribute their fonts under the OFL. Please honour and respect their contribution!\r\n\r\n1.7  What about sharing OFL fonts with friends on a CD, DVD or USB stick?\r\nYou are very welcome to share open fonts with friends, family and colleagues through removable media. Just remember to include the full font package, including any copyright notices and licensing information as available in OFL.txt. In the case where you sell the font, it has to come bundled with software.\r\n\r\n1.8  Can I host the fonts on a web site for others to use?\r\nYes, as long as you make the full font package available. In most cases it may be best to point users to the main site that distributes the Original Version so they always get the most recent stable and complete version. See also discussion of web fonts in Section 2.\r\n\r\n1.9  Can I host the fonts on a server for use over our internal network?\r\nYes. If the fonts are transferred from the server to the client computer by means that allow them to be used even if the computer is no longer attached to the network, the full package (copyright notices, licensing information, etc.) should be included.\r\n\r\n1.10  Does the full OFL license text always need to accompany the font?\r\nThe only situation in which an OFL font can be distributed without the text of the OFL (either in a separate file or in font metadata), is when a font is embedded in a document or bundled within a program. In the case of metadata included within a font, it is legally sufficient to include only a link to the text of the OFL on http://scripts.sil.org/OFL, but we strongly recommend against this. Most modern font formats include metadata fields that will accept the full OFL text, and full inclusion increases the likelihood that users will understand and properly apply the license.\r\n\r\n1.11  What do you mean by 'embedding'? How does that differ from other means of distribution?\r\nBy 'embedding' we mean inclusion of the font in a document or file in a way that makes extraction (and redistribution) difficult or clearly discouraged. In many cases the names of embedded fonts might also not be obvious to those reading the document, the font data format might be altered, and only a subset of the font - only the glyphs required for the text - might be included. Any other means of delivering a font to another person is considered 'distribution', and needs to be accompanied by any copyright notices and licensing information available in OFL.txt.\r\n\r\n1.12  So can I embed OFL fonts in my document?\r\nYes, either in full or a subset. The restrictions regarding font modification and redistribution do not apply, as the font is not intended for use outside the document.\r\n\r\n1.13  Does embedding alter the license of the document itself?\r\nNo. Referencing or embedding an OFL font in any document does not change the license of the document itself. The requirement for fonts to remain under the OFL does not apply to any document created using the fonts and their derivatives. Similarly, creating any kind of graphic using a font under OFL does not make the resulting artwork subject to the OFL.\r\n\r\n1.14  If OFL fonts are extracted from a document in which they are embedded (such as a PDF file), what can be done with them? Is this a risk to author(s)?\r\nThe few utilities that can extract fonts embedded in a PDF will typically output limited amounts of outlines - not a complete font. To create a working font from this method is much more difficult and time consuming than finding the source of the original OFL font. So there is little chance that an OFL font would be extracted and redistributed inappropriately through this method. Even so, copyright laws address any misrepresentation of authorship. All Font Software released under the OFL and marked as such by the author(s) is intended to remain under this license regardless of the distribution method, and cannot be redistributed under any other license. We strongly discourage any font extraction - we recommend directly using the font sources instead - but if you extract font outlines from a document, please be considerate: respect the work of the author(s) and the licensing model.\r\n\r\n1.15  What about distributing fonts with a document? Within a compressed folder structure? Is it distribution, bundling or embedding?\r\nCertain document formats may allow the inclusion of an unmodified font within their file structure which may consist of a compressed folder containing the various resources forming the document (such as pictures and thumbnails). Including fonts within such a structure is understood as being different from embedding but rather similar to bundling (or mere aggregation) which the license explicitly allows. In this case the font is conveyed unchanged whereas embedding a font usually transforms it from the original format. The OFL does not allow anyone to extract the font from such a structure to then redistribute it under another license. The explicit permission to redistribute and embed does not cancel the requirement for the Font Software to remain under the license chosen by its author(s). Even if the font travels inside the document as one of its assets, it should not lose its authorship information and licensing.\r\n\r\n1.16  What about ebooks shipping with open fonts?\r\nThe requirements differ depending on whether the fonts are linked, embedded or distributed (bundled or aggregated). Some ebook formats use web technologies to do font linking via @font-face, others are designed for font embedding, some use fonts distributed with the document or reading software, and a few rely solely on the fonts already present on the target system. The license requirements depend on the type of inclusion as discussed in 1.15.\r\n\r\n1.17  Can Font Software released under the OFL be subject to URL-based access restrictions methods or DRM (Digital Rights Management) mechanisms?\r\nYes, but these issues are out-of-scope for the OFL. The license itself neither encourages their use nor prohibits them since such mechanisms are not implemented in the components of the Font Software but through external software. Such restrictions are put in place for many different purposes corresponding to various usage scenarios. One common example is to limit potentially dangerous cross-site scripting attacks. However, in the spirit of libre/open fonts and unrestricted writing systems, we strongly encourage open sharing and reuse of OFL fonts, and the establishment of an environment where such restrictions are unnecessary. Note that whether you wish to use such mechanisms or you prefer not to, you must still abide by the rules set forth by the OFL when using fonts released by their authors under this license. Derivative fonts must be licensed under the OFL, even if they are part of a service for which you charge fees and/or for which access to source code is restricted. You may not sell the fonts on their own - they must be part of a larger software package, bundle or subscription plan. For example, even if the OFL font is distributed in a software package or via an online service using a DRM mechanism, the user would still have the right to extract that font, use, study, modify and redistribute it under the OFL.\r\n\r\n1.18  I've come across a font released under the OFL. How can I easily get more information about the Original Version? How can I know where it stands compared to the Original Version or other Modified Versions?\r\nConsult the copyright statement(s) in the license for ways to contact the original authors. Consult the FONTLOG (see section 6 for more details and examples) for information on how the font differs from the Original Version, and get in touch with the various contributors via the information in the acknowledgement section. Please consider using the Original Versions of the fonts whenever possible.\r\n\r\n1.19  What do you mean in condition 4 of the OFL's permissions and conditions? Can you provide examples of abusive promotion / endorsement / advertisement vs. normal acknowledgement?\r\nThe intent is that the goodwill and reputation of the author(s) should not be used in a way that makes it sound like the original author(s) endorse or approve of a specific Modified Version or software bundle. For example, it would not be right to advertise a word processor by naming the author(s) in a listing of software features, or to promote a Modified Version on a web site by saying \"designed by ...\". However, it would be appropriate to acknowledge the author(s) if your software package has a list of people who deserve thanks. We realize that this can seem to be a grey area, but the standard used to judge an acknowledgement is that if the acknowledgement benefits the author(s) it is allowed, but if it primarily benefits other parties, or could reflect poorly on the author(s), then it is not.\r\n\r\n1.20 I'm writing a small app for mobile platforms, do I need to include the whole package? \r\nIf you bundle a font under the OFL with your mobile app you must comply with the terms of the license. At a minimum you must include the copyright statement, the license notice and the license text. A mention of this information in your About box or Changelog, with a link to where the font package is from, is good practice, and the extra space needed to carry these items is very small. You do not, however, need to include the full contents of the font package - only the fonts you use and the copyright and license that apply to them. For example, if you only use the regular weight in your app, you do not need to include the italic and bold versions.\r\n\r\n1.21 What about including OFL fonts by default in my firmware or dedicated operating system? \r\nMany such systems are restricted and turned into appliances so that users cannot study or modify them. Using open fonts to increase quality and language coverage is a great idea, but you need to be aware that if there is a way for users to extract fonts you cannot legally prevent them from doing that. The fonts themselves, including any changes you make to them, must be distributed under the OFL even if your firmware has a more restrictive license. If you do transform the fonts and change their formats when you include them in your firmware you must respect any names reserved by the font authors via the RFN mechanism and pick your own font name. Alternatively if you directly add a font under the OFL to the font folder of your firmware without modifying or optimizing it you are simply bundling the font like with any other software collection, and do not need to make any further changes.\r\n\r\n1.22  Can I make and publish CMS themes or templates that use OFL fonts?  Can I include the fonts themselves in the themes or templates? Can I sell the whole package?\r\nYes, you are very welcome to integrate open fonts into themes and templates for your preferred CMS and make them more widely available. Remember that you can only sell the fonts and your CMS add-on as part of a software bundle. (See 1.4 for details and examples about selling bundles).\r\n\r\n1.23  Can OFL fonts be included in services that deliver fonts to the desktop from remote repositories? Even if they contain both OFL and non-OFL fonts?\r\nYes. Some foundries have set up services to deliver fonts to subscribers directly to desktops from their online repositories; similarly, plugins are available to preview and use fonts directly in your design tool or publishing suite. These services may mix open and restricted fonts in the same channel, however they should make a clear distinction between them to users. These services should also not hinder users (such as through DRM or obfuscation mechanisms) from extracting and using the OFL fonts in other environments, or continuing to use OFL fonts after subscription terms have ended, as those uses are specifically allowed by the OFL.\r\n\r\n1.24  Can services that provide or distribute OFL fonts restrict my use of them?\r\nNo. The terms of use of such services cannot replace or restrict the terms of the OFL, as that would be the same as distributing the fonts under a different license, which is not allowed. You are still entitled to use, modify and redistribute them as the original authors have intended outside of the sole control of that particular distribution channel. Note, however, that the fonts provided by these services may differ from the Original Versions.\r\n\r\n\r\n2  USING OFL FONTS FOR WEBPAGES AND ONLINE WEB FONT SERVICES\r\n\r\nNOTE: This section often refers to a separate paper on 'Web Fonts & RFNs'. This is available at http://scripts.sil.org/OFL_web_fonts_and_RFNs\r\n\r\n2.1  Can I make webpages using these fonts?\r\nYes! Go ahead! Using CSS (Cascading Style Sheets) is recommended. Your three best options are: \r\n- referring directly in your stylesheet to open fonts which may be available on the user's system\r\n- providing links to download the full package of the font - either from your own website or from elsewhere - so users can install it themselves\r\n- using @font-face to distribute the font directly to browsers. This is recommended and explicitly allowed by the licensing model because it is distribution. The font file itself is distributed with other components of the webpage. It is not embedded in the webpage but referenced through a web address which will cause the browser to retrieve and use the corresponding font to render the webpage (see 1.11 and 1.15 for details related to embedding fonts into documents). As you take advantage of the @font-face cross-platform standard, be aware that web fonts are often tuned for a web environment and not intended for installation and use outside a browser. The reasons in favour of using web fonts are to allow design of dynamic text elements instead of static graphics, to make it easier for content to be localized and translated, indexed and searched, and all this with cross-platform open standards without depending on restricted extensions or plugins. You should check the CSS cascade (the order in which fonts are being called or delivered to your users) when testing.\r\n\r\n2.2  Can I make and use WOFF (Web Open Font Format) versions of OFL fonts?\r\nYes, but you need to be careful. A change in font format normally is considered modification, and Reserved Font Names (RFNs) cannot be used. Because of the design of the WOFF format, however, it is possible to create a WOFF version that is not considered modification, and so would not require a name change. You are allowed to create, use and distribute a WOFF version of an OFL font without changing the font name, but only if:\r\n\r\n- the original font data remains unchanged except for WOFF compression, and\r\n- WOFF-specific metadata is either omitted altogether or present and includes, unaltered, the contents of all equivalent metadata in the original font.\r\n\r\nIf the original font data or metadata is changed, or the WOFF-specific metadata is incomplete, the font must be considered a Modified Version, the OFL restrictions would apply and the name of the font must be changed: any RFNs cannot be used and copyright notices and licensing information must be included and cannot be deleted or modified. You must come up with a unique name - we recommend one corresponding to your domain or your particular web application. Be aware that only the original author(s) can use RFNs. This is to prevent collisions between a derivative tuned to your audience and the original upstream version and so to reduce confusion.\r\n\r\nPlease note that most WOFF conversion tools and online services do not meet the two requirements listed above, and so their output must be considered a Modified Version. So be very careful and check to be sure that the tool or service you're using is compressing unchanged data and completely and accurately reflecting the original font metadata.\r\n\r\n2.3  What about other web font formats such as EOT/EOTLite/CWT/etc.?\r\nIn most cases these formats alter the original font data more than WOFF, and do not completely support appropriate metadata, so their use must be considered modification and RFNs may not be used. However, there may be certain formats or usage scenarios that may allow the use of RFNs. See http://scripts.sil.org/OFL_web_fonts_and_RFNs \r\n\r\n2.4  Can I make OFL fonts available through web font online services?\r\nYes, you are welcome to include OFL fonts in online web font services as long as you properly meet all the conditions of the license. The origin and open status of the font should be clear among the other fonts you are hosting. Authorship, copyright notices and license information must be sufficiently visible to your users or subscribers so they know where the font comes from and the rights granted by the author(s). Make sure the font file contains the needed copyright notice(s) and licensing information in its metadata. Please double-check the accuracy of every field to prevent contradictory information. Other font formats, including EOT/EOTLite/CWT and superior alternatives like WOFF, already provide fields for this information. Remember that if you modify the font within your library or convert it to another format for any reason the OFL restrictions apply and you need to change the names accordingly. Please respect the author's wishes as expressed in the OFL and do not misrepresent original designers and their work. Don't lump quality open fonts together with dubious freeware or public domain fonts. Consider how you can best work with the original designers and foundries, support their efforts and generate goodwill that will benefit your service. (See 1.17 for details related to URL-based access restrictions methods or DRM mechanisms).\r\n\r\n2.5  Some web font formats and services provide ways of \"optimizing\" the font for a particular website or web application; is that allowed? \r\nYes, it is permitted, but remember that these optimized versions are Modified Versions and so must follow OFL requirements like appropriate renaming. Also you need to bear in mind the other important parameters beyond compression, speed and responsiveness: you need to consider the audience of your particular website or web application, as choosing some optimization parameters may turn out to be less than ideal for them. Subsetting by removing certain glyphs or features may seriously limit functionality of the font in various languages that your users expect. It may also introduce degradation of quality in the rendering or specific bugs on the various target platforms compared to the original font from upstream. In other words, remember that one person's optimized font may be another person's missing feature. Various advanced typographic features (OpenType, Graphite or AAT) are also available through CSS and may provide the desired effects without the need to modify the font.\r\n\r\n2.6  Is subsetting a web font considered modification?\r\nYes. Removing any parts of the font when delivering a web font to a browser, including unused glyphs and smart font code, is considered modification. This is permitted by the OFL but would not normally allow the use of RFNs. Some newer subsetting technologies may be able to subset in a way that allows users to effectively have access to the complete font, including smart font behaviour. See 2.8 and http://scripts.sil.org/OFL_web_fonts_and_RFNs\r\n\r\n2.7  Are there any situations in which a modified web font could use RFNs?\r\nYes. If a web font is optimized only in ways that preserve Functional Equivalence (see 2.8), then it may use RFNs, as it reasonably represents the Original Version and respects the intentions of the author(s) and the main purposes of the RFN mechanism (avoids collisions, protects authors, minimizes support, encourages derivatives). However this is technically very difficult and often impractical, so a much better scenario is for the web font service or provider to sign a separate agreement with the author(s) that allows the use of RFNs for Modified Versions.\r\n\r\n2.8  How do you know if an optimization to a web font preserves Functional Equivalence?\r\nFunctional Equivalence is described in full in the 'Web fonts and RFNs' paper at http://scripts.sil.org/OFL_web_fonts_and_RFNs, in general, an optimized font is deemed to be Functionally Equivalent (FE) to the Original Version if it:\r\n\r\n- Supports the same full character inventory. If a character can be properly displayed using the Original Version, then that same character, encoded correctly on a web page, will display properly. \r\n- Provides the same smart font behavior. Any dynamic shaping behavior that works with the Original Version should work when optimized, unless the browser or environment does not support it. There does not need to be guaranteed support in the client, but there should be no forced degradation of smart font or shaping behavior, such as the removal or obfuscation of OpenType, Graphite or AAT tables.\r\n- Presents text with no obvious degradation in visual quality. The lettershapes should be equally (or more) readable, within limits of the rendering platform.\r\n- Preserves original author, project and license metadata. At a minimum, this should include: Copyright and authorship; The license as stated in the Original Version, whether that is the full text of the OFL or a link to the web version; Any RFN declarations; Information already present in the font or documentation that points back to the Original Version, such as a link to the project or the author's website.\r\n\r\nIf an optimized font meets these requirements, and so is considered to be FE, then it's very likely that the original author would feel that the optimized font is a good and reasonable equivalent. If it falls short of any of these requirements, the optimized font does not reasonably represent the Original Version, and so should be considered to be a Modified Version. Like other Modified Versions, it would not be allowed to use any RFNs and you simply need to pick your own font name.\r\n\r\n2.9  Isn't use of web fonts another form of embedding?\r\nNo. Unlike embedded fonts in a PDF, web fonts are not an integrated part of the document itself. They are not specific to a single document and are often applied to thousands of documents around the world. The font data is not stored alongside the document data and often originates from a different location. The ease by which the web fonts used by a document may be identified and downloaded for desktop use demonstrates that they are philosophically and technically separate from the web pages that specify them. See http://scripts.sil.org/OFL_web_fonts_and_RFNs\r\n\r\n2.10  So would it be better to not use RFNs at all if you want your font to be distributed by a web fonts service?\r\nNo. Although the OFL does not require authors to use RFNs, the RFN mechanism is an important part of the OFL model and completely compatible with web font services. If that web font service modifies the fonts, then the best solution is to sign a separate agreement for the use of any RFNs. It is perfectly valid for an author to not declare any RFNs, but before they do so they need to fully understand the benefits they are giving up, and the overall negative effect of allowing many different versions bearing the same name to be widely distributed. As a result, we don't generally recommend it.\r\n\r\n2.11  What should an agreement for the use of RFNs say? Are there any examples?\r\nThere is no prescribed format for this agreement, as legal systems vary, and no recommended examples. Authors may wish to add specific clauses to further restrict use, require author review of Modified Versions, establish user support mechanisms or provide terms for ending the agreement. Such agreements are usually not public, and apply only to the main parties. However, it would be very beneficial for web font services to clearly state when they have established such agreements, so that the public understands clearly that their service is operating appropriately.\r\n\r\nSee the separate paper on 'Web Fonts & RFNs' for in-depth discussion of issues related to the use of RFNs for web fonts. This is available at http://scripts.sil.org/OFL_web_fonts_and_RFNs\r\n\r\n\r\n3  MODIFYING OFL-LICENSED FONTS\r\n\r\n3.1  Can I change the fonts? Are there any limitations to what things I can and cannot change?\r\nYou are allowed to change anything, as long as such changes do not violate the terms of the license. In other words, you are not allowed to remove the copyright statement(s) from the font, but you could put additional information into it that covers your contribution. See the placeholders in the OFL header template for recommendations on where to add your own statements. (Remember that, when authors have reserved names via the RFN mechanism, you need to change the internal names of the font to your own font name when making your modified version even if it is just a small change.)\r\n\r\n3.2  I have a font that needs a few extra glyphs - can I take them from an OFL licensed font and copy them into mine?\r\nYes, but if you distribute that font to others it must be under the OFL, and include the information mentioned in condition 2 of the license.\r\n\r\n3.3  Can I charge people for my additional work? In other words, if I add a bunch of special glyphs or OpenType/Graphite/AAT code, can I sell the enhanced font?\r\nNot by itself. Derivative fonts must be released under the OFL and cannot be sold by themselves. It is permitted, however, to include them in a larger software package (such as text editors, office suites or operating systems), even if the larger package is sold. In that case, you are strongly encouraged, but not required, to also make that derived font easily and freely available outside of the larger package.\r\n\r\n3.4  Can I pay someone to enhance the fonts for my use and distribution?\r\nYes. This is a good way to fund the further development of the fonts. Keep in mind, however, that if the font is distributed to others it must be under the OFL. You won't be able to recover your investment by exclusively selling the font, but you will be making a valuable contribution to the community. Please remember how you have benefited from the contributions of others.\r\n\r\n3.5  I need to make substantial revisions to the font to make it work with my program. It will be a lot of work, and a big investment, and I want to be sure that it can only be distributed with my program. Can I restrict its use?\r\nNo. If you redistribute a Modified Version of the font it must be under the OFL. You may not restrict it in any way beyond what the OFL permits and requires. This is intended to ensure that all released improvements to the fonts become available to everyone. But you will likely get an edge over competitors by being the first to distribute a bundle with the enhancements. Again, please remember how you have benefited from the contributions of others.\r\n\r\n3.6  Do I have to make any derivative fonts (including extended source files, build scripts, documentation, etc.) publicly available?\r\nNo, but please consider sharing your improvements with others. You may find that you receive in return more than what you gave.\r\n\r\n3.7  If a trademark is claimed in the OFL font, does that trademark need to remain in modified fonts?\r\nYes. Any trademark notices must remain in any derivative fonts to respect trademark laws, but you may add any additional trademarks you claim, officially registered or not. For example if an OFL font called \"Foo\" contains a notice that \"Foo is a trademark of Acme\", then if you rename the font to \"Bar\" when creating a Modified Version, the new trademark notice could say \"Foo is a trademark of Acme Inc. - Bar is a trademark of Roadrunner Technologies Ltd.\". Trademarks work alongside the OFL and are not subject to the terms of the licensing agreement. The OFL does not grant any rights under trademark law. Bear in mind that trademark law varies from country to country and that there are no international trademark conventions as there are for copyright. You may need to significantly invest in registering and defending a trademark for it to remain valid in the countries you are interested in. This may be costly for an individual independent designer.\r\n\r\n3.8 If I commit changes to a font (or publish a branch in a DVCS) as part of a public open source software project, do I have to change the internal font names? \r\nOnly if there are declared RFNs. Making a public commit or publishing a public branch is effectively redistributing your modifications, so any change to the font will require that you do not use the RFNs. Even if there are no RFNs, it may be useful to change the name or add a suffix indicating that a particular version of the font is still in development and not released yet. This will clearly indicate to users and fellow designers that this particular font is not ready for release yet. See section 5 for more details.\r\n\r\n\r\n4  LICENSING YOUR ORIGINAL FONTS UNDER THE OFL\r\n\r\n4.1  Can I use the SIL OFL for my own fonts?\r\nYes! We heartily encourage everyone to use the OFL to distribute their own original fonts. It is a carefully constructed license that allows great freedom along with enough artistic integrity protection for the work of the authors as well as clear rules for other contributors and those who redistribute the fonts. The licensing model is used successfully by various organisations, both for-profit and not-for-profit, to release fonts of varying levels of scope and complexity.\r\n\r\n4.2  What do I have to do to apply the OFL to my font?\r\nIf you want to release your fonts under the OFL, we recommend you do the following:\r\n\r\n4.2.1  Put your copyright and Reserved Font Names information at the beginning of the main OFL.txt file in place of the dedicated placeholders (marked with the <> characters). Include this file in your release package.\r\n\r\n4.2.2  Put your copyright and the OFL text with your chosen Reserved Font Name(s) into your font files (the copyright and license fields). A link to the OFL text on the OFL web site is an acceptable (but not recommended) alternative. Also add this information to any other components (build scripts, glyph databases, documentation, test files, etc). Accurate metadata in your font files is beneficial to you as an increasing number of applications are exposing this information to the user. For example, clickable links can bring users back to your website and let them know about other work you have done or services you provide. Depending on the format of your fonts and sources, you can use template human-readable headers or machine-readable metadata. You should also double-check that there is no conflicting metadata in the font itself contradicting the license, such as the fstype bits in the os2 table or fields in the name table.\r\n\r\n4.2.3  Write an initial FONTLOG.txt for your font and include it in the release package (see Section 6 and Appendix A for details including a template).\r\n\r\n4.2.4  Include the relevant practical documentation on the license by adding the current OFL-FAQ.txt file in your package.\r\n\r\n4.2.5  If you wish you can use the OFL graphics (http://scripts.sil.org/OFL_logo) on your website. \r\n\r\n4.3  Will you make my font OFL for me?\r\nWe won't do the work for you. We can, however, try to answer your questions, unfortunately we do not have the resources to review and check your font packages for correct use of the OFL. We recommend you turn to designers, foundries or consulting companies with experience in doing open font design to provide this service to you. \r\n\r\n4.4  Will you distribute my OFL font for me?\r\nNo, although if the font is of sufficient quality and general interest we may include a link to it on our partial list of OFL fonts on the OFL web site. You may wish to consider other open font catalogs or hosting services, such as the Unifont Font Guide (http://unifont.org/fontguide), The League of Movable Type (http://theleagueofmovabletype.com) or the Open Font Library (http://openfontlibrary.org/), which despite the name has no direct relationship to the OFL or SIL. We do not endorse any particular catalog or hosting service - it is your responsibility to determine if the service is right for you and if it treats authors with fairness. \r\n\r\n4.5  Why should I use the OFL for my fonts?\r\n- to meet needs for fonts that can be modified to support lesser-known languages\r\n- to provide a legal and clear way for people to respect your work but still use it (and reduce piracy)\r\n- to involve others in your font project\r\n- to enable your fonts to be expanded with new weights and improved writing system/language support\r\n- to allow more technical font developers to add features to your design (such as OpenType, Graphite or AAT support)\r\n- to renew the life of an old font lying on your hard drive with no business model\r\n- to allow your font to be included in Libre Software operating systems like Ubuntu\r\n- to give your font world status and wide, unrestricted distribution\r\n- to educate students about quality typeface and font design\r\n- to expand your test base and get more useful feedback \r\n- to extend your reach to new markets when users see your metadata and go to your website\r\n- to get your font more easily into one of the web font online services\r\n- to attract attention for your commercial fonts\r\n- to make money through web font services\r\n- to make money by bundling fonts with applications\r\n- to make money adjusting and extending existing open fonts\r\n- to get a better chance that foundations/NGOs/charities/companies who commission fonts will pick you \r\n- to be part of a sharing design and development community \r\n- to give back and contribute to a growing body of font sources\r\n\r\n\r\n5  CHOOSING RESERVED FONT NAMES\r\n\r\n5.1  What are Reserved Font Names?\r\nThese are font names, or portions of font names, that the author has chosen to reserve for use only with the Original Version of the font, or for Modified Version(s) created by the original author.\r\n\r\n5.2  Why can't I use the Reserved Font Names in my derivative font names? I'd like people to know where the design came from.\r\nThe best way to acknowledge the source of the design is to thank the original authors and any other contributors in the files that are distributed with your revised font (although no acknowledgement is required). The FONTLOG is a natural place to do this. Reserved Font Names ensure that the only fonts that have the original names are the unmodified Original Versions. This allows designers to maintain artistic integrity while allowing collaboration to happen. It eliminates potential confusion and name conflicts. When choosing a name, be creative and avoid names that reuse almost all the same letters in the same order or sound like the original. It will help everyone if Original Versions and Modified Versions can easily be distinguished from one another and from other derivatives. Any substitution and matching mechanism is outside the scope of the license.\r\n\r\n5.3  What do you mean by \"primary name as presented to the user\"? Are you referring to the font menu name?\r\nYes, this applies to the font menu name and other mechanisms that specify a font in a document. It would be fine, however, to keep a text reference to the original fonts in the description field, in your modified source file or in documentation provided alongside your derivative as long as no one could be confused that your modified source is the original. But you cannot use the Reserved Font Names in any way to identify the font to the user (unless the Copyright Holder(s) allow(s) it through a separate agreement). Users who install derivatives (Modified Versions) on their systems should not see any of the original Reserved Font Names in their font menus, for example. Again, this is to ensure that users are not confused and do not mistake one font for another and so expect features only another derivative or the Original Version can actually offer. \r\n\r\n5.4  Am I not allowed to use any part of the Reserved Font Names?\r\nYou may not use individual words from the Reserved Font Names, but you would be allowed to use parts of words, as long as you do not use any word from the Reserved Font Names entirely. We do not recommend using parts of words because of potential confusion, but it is allowed. For example, if \"Foobar\" was a Reserved Font Name, you would be allowed to use \"Foo\" or \"bar\", although we would not recommend it. Such an unfortunate choice would confuse the users of your fonts as well as make it harder for other designers to contribute.\r\n\r\n5.5  So what should I, as an author, identify as Reserved Font Names?\r\nOriginal authors are encouraged to name their fonts using clear, distinct names, and only declare the unique parts of the name as Reserved Font Names. For example, the author of a font called \"Foobar Sans\" would declare \"Foobar\" as a Reserved Font Name, but not \"Sans\", as that is a common typographical term, and may be a useful word to use in a derivative font name. Reserved Font Names should also be single words for simplicity and legibility. A font called \"Flowing River\" should have Reserved Font Names \"Flowing\" and \"River\", not \"Flowing River\". You also need to be very careful about reserving font names which are already linked to trademarks (whether registered or not) which you do not own.\r\n\r\n5.6  Do I, as an author, have to identify any Reserved Font Names?\r\nNo. RFNs are optional and not required, but we encourage you to use them. This is primarily to avoid confusion between your work and Modified Versions. As an author you can release a font under the OFL and not declare any Reserved Font Names. There may be situations where you find that using no RFNs and letting your font be changed and modified - including any kind of modification - without having to change the original name is desirable. However you need to be fully aware of the consequences. There will be no direct way for end-users and other designers to distinguish your Original Version from many Modified Versions that may be created. You have to trust whoever is making the changes and the optimizations to not introduce problematic changes. The RFNs you choose for your own creation have value to you as an author because they allow you to maintain artistic integrity and keep some control over the distribution channel to your end-users. For discussion of RFNs and web fonts see section 2.\r\n\r\n5.7  Are any names (such as the main font name) reserved by default?\r\nNo. That is a change to the license as of version 1.1. If you want any names to be Reserved Font Names, they must be specified after the copyright statement(s).\r\n\r\n5.8  Is there any situation in which I can use Reserved Font Names for a Modified Version?\r\nThe Copyright Holder(s) can give certain trusted parties the right to use any of the Reserved Font Names through separate written agreements. For example, even if \"Foobar\" is a RFN, you could write up an agreement to give company \"XYZ\" the right to distribute a modified version with a name that includes \"Foobar\". This allows for freedom without confusion. The existence of such an agreement should be made as clear as possible to downstream users and designers in the distribution package and the relevant documentation. They need to know if they are a party to the agreement or not and what they are practically allowed to do or not even if all the details of the agreement are not public.\r\n\r\n5.9  Do font rebuilds require a name change? Do I have to change the name of the font when my packaging workflow includes a full rebuild from source?\r\nYes, all rebuilds which change the font data and the smart code are Modified Versions and the requirements of the OFL apply: you need to respect what the Author(s) have chosen in terms of Reserved Font Names. However if a package (or installer) is simply a wrapper or a compressed structure around the final font - leaving them intact on the inside - then no name change is required. Please get in touch with the author(s) and copyright holder(s) to inquire about the presence of font sources beyond the final font file(s) and the recommended build path. That build path may very well be non-trivial and hard to reproduce accurately by the maintainer. If a full font build path is made available by the upstream author(s) please be aware that any regressions and changes you may introduce when doing a rebuild for packaging purposes is your own responsibility as a package maintainer since you are effectively creating a separate branch. You should make it very clear to your users that your rebuilt version is not the canonical one from upstream.\r\n\r\n5.10  Can I add other Reserved Font Names when making a derivative font?\r\nYes. List your additional Reserved Font Names after your additional copyright statement, as indicated with example placeholders at the top of the OFL.txt file. Be sure you do not remove any existing RFNs but only add your own. RFN statements should be placed next to the copyright statement of the relevant author as indicated in the OFL.txt template to make them visible to designers wishing to make their separate version.\r\n\r\n\r\n6  ABOUT THE FONTLOG\r\n\r\n6.1  What is this FONTLOG thing exactly?\r\nIt has three purposes: 1) to provide basic information on the font to users and other designers and developers, 2) to document changes that have been made to the font or accompanying files, either by the original authors or others, and 3) to provide a place to acknowledge authors and other contributors. Please use it!\r\n\r\n6.2  Is the FONTLOG required?\r\nIt is not a requirement of the license, but we strongly recommend you have one.\r\n\r\n6.3  Am I required to update the FONTLOG when making Modified Versions?\r\nNo, but users, designers and other developers might get very frustrated with you if you don't. People need to know how derivative fonts differ from the original, and how to take advantage of the changes, or build on them. There are utilities that can help create and maintain a FONTLOG, such as the FONTLOG support in FontForge.\r\n\r\n6.4  What should the FONTLOG look like?\r\nIt is typically a separate text file (FONTLOG.txt), but can take other formats. It commonly includes these four sections:\r\n\r\n- brief header describing the FONTLOG itself and name of the font family\r\n- Basic Font Information - description of the font family, purpose and breadth\r\n- ChangeLog - chronological listing of changes\r\n- Acknowledgements - list of authors and contributors with contact information\r\n\r\nIt could also include other sections, such as: where to find documentation, how to make contributions, information on contributing organizations, source code details, and a short design guide. See Appendix A for an example FONTLOG.\r\n\r\n\r\n7  MAKING CONTRIBUTIONS TO OFL PROJECTS\r\n\r\n7.1  Can I contribute work to OFL projects?\r\nIn many cases, yes. It is common for OFL fonts to be developed by a team of people who welcome contributions from the wider community. Contact the original authors for specific information on how to participate in their projects.\r\n\r\n7.2  Why should I contribute my changes back to the original authors?\r\nIt would benefit many people if you contributed back in response to what you've received. Your contributions and improvements to the fonts and other components could be a tremendous help and would encourage others to contribute as well and 'give back'. You will then benefit from other people's contributions as well. Sometimes maintaining your own separate version takes more effort than merging back with the original. Be aware that any contributions, however, must be either your own original creation or work that you own, and you may be asked to affirm that clearly when you contribute.\r\n\r\n7.3  I've made some very nice improvements to the font. Will you consider adopting them and putting them into future Original Versions?\r\nMost authors would be very happy to receive such contributions. Keep in mind that it is unlikely that they would want to incorporate major changes that would require additional work on their end. Any contributions would likely need to be made for all the fonts in a family and match the overall design and style. Authors are encouraged to include a guide to the design with the fonts. It would also help to have contributions submitted as patches or clearly marked changes - the use of smart source revision control systems like subversion, mercurial, git or bzr is a good idea. Please follow the recommendations given by the author(s) in terms of preferred source formats and configuration parameters for sending contributions. If this is not indicated in a FONTLOG or other documentation of the font, consider asking them directly. Examples of useful contributions are bug fixes, additional glyphs, stylistic alternates (and the smart font code to access them) or improved hinting. Keep in mind that some kinds of changes (esp. hinting) may be technically difficult to integrate.\r\n\r\n7.4  How can I financially support the development of OFL fonts?\r\nIt is likely that most authors of OFL fonts would accept financial contributions - contact them for instructions on how to do this. Such contributions would support future development. You can also pay for others to enhance the fonts and contribute the results back to the original authors for inclusion in the Original Version.\r\n\r\n\r\n8  ABOUT THE LICENSE ITSELF\r\n\r\n8.1  I see that this is version 1.1 of the license. Will there be later changes?\r\nVersion 1.1 is the first minor revision of the OFL. We are confident that version 1.1 will meet most needs, but are open to future improvements. Any revisions would be for future font releases, and previously existing licenses would remain in effect. No retroactive changes are possible, although the Copyright Holder(s) can re-release the font under a revised OFL. All versions will be available on our web site: http://scripts.sil.org/OFL.\r\n\r\n8.2  Does this license restrict the rights of the Copyright Holder(s)?\r\nNo. The Copyright Holder(s) still retain(s) all the rights to their creation; they are only releasing a portion of it for use in a specific way. For example, the Copyright Holder(s) may choose to release a 'basic' version of their font under the OFL, but sell a restricted 'enhanced' version under a different license. They may also choose to release the same font under both the OFL and some other license. Only the Copyright Holder(s) can do this, and doing so does not change the terms of the OFL as it applies to that font.\r\n\r\n8.3  Is the OFL a contract or a license?\r\nThe OFL is a worldwide license based on international copyright agreements and conventions. It is not a contract and so does not require you to sign it to have legal validity. By using, modifying and redistributing components under the OFL you indicate that you accept the license.\r\n\r\n8.4  I really like the terms of the OFL, but want to change it a little. Am I allowed to take ideas and actual wording from the OFL and put them into my own custom license for distributing my fonts?\r\nWe strongly recommend against creating your very own unique open licensing model. Using a modified or derivative license will likely cut you off - along with the font(s) under that license - from the community of designers using the OFL, potentially expose you and your users to legal liabilities, and possibly put your work and rights at risk. The OFL went though a community and legal review process that took years of effort, and that review is only applicable to an unmodified OFL. The text of the OFL has been written by SIL (with review and consultation from the community) and is copyright (c) 2005-2017 SIL International. You may re-use the ideas and wording (in part, not in whole) in another non-proprietary license provided that you call your license by another unambiguous name, that you do not use the preamble, that you do not mention SIL and that you clearly present your license as different from the OFL so as not to cause confusion by being too similar to the original. If you feel the OFL does not meet your needs for an open license, please contact us.\r\n\r\n8.5  Can I quote from the OFL FAQ?\r\nYes, SIL gives permission to quote from the OFL FAQ (OFL-FAQ.txt), in whole or in part, provided that the quoted text is:\r\n\r\n- unmodified,\r\n- used to help explain the intent of the OFL, rather than cause misunderstanding, and\r\n- accompanied with the following attribution: \"From the OFL FAQ (OFL-FAQ.txt), copyright (c) 2005-2017 SIL International. Used by permission. http://scripts.sil.org/OFL-FAQ_web\".\r\n\r\n8.6  Can I translate the license and the FAQ into other languages?\r\nSIL certainly recognises the need for people who are not familiar with English to be able to understand the OFL and its use. Making the license very clear and readable has been a key goal for the OFL, but we know that people understand their own language best.\r\n\r\nIf you are an experienced translator, you are very welcome to translate the OFL and OFL-FAQ so that designers and users in your language community can understand the license better. But only the original English version of the license has legal value and has been approved by the community. Translations do not count as legal substitutes and should only serve as a way to explain the original license. SIL - as the author and steward of the license for the community at large - does not approve any translation of the OFL as legally valid because even small translation ambiguities could be abused and create problems.\r\n\r\nSIL gives permission to publish unofficial translations into other languages provided that they comply with the following guidelines:\r\n\r\n- Put the following disclaimer in both English and the target language stating clearly that the translation is unofficial:\r\n\r\n\"This is an unofficial translation of the SIL Open Font License into <language_name>. It was not published by SIL International, and does not legally state the distribution terms for fonts that use the OFL. A release under the OFL is only valid when using the original English text. However, we recognize that this unofficial translation will help users and designers not familiar with English to better understand and use the OFL. We encourage designers who consider releasing their creation under the OFL to read the OFL-FAQ in their own language if it is available. Please go to http://scripts.sil.org/OFL for the official version of the license and the accompanying OFL-FAQ.\"\r\n\r\n- Keep your unofficial translation current and update it at our request if needed, for example if there is any ambiguity which could lead to confusion.  \r\n\r\nIf you start such a unofficial translation effort of the OFL and OFL-FAQ please let us know.\r\n\r\n8.7 Does the OFL have an explicit expiration term?\r\nNo, the implicit intent of the OFL is that the permissions granted are perpetual and irrevocable. \r\n\r\n\r\n9  ABOUT SIL INTERNATIONAL\r\n\r\n9.1  Who is SIL International and what do they do?\r\nSIL serves language communities worldwide, building their capacity for sustainable language development, by means of research, translation, training and materials development. SIL makes its services available to all without regard to religious belief, political ideology, gender, race, or ethnic background. SIL's members and volunteers share a Christian commitment.\r\n\r\n9.2  What does this have to do with font licensing?\r\nThe ability to read, write, type and publish in one's own language is one of the most critical needs for millions of people around the world. This requires fonts that are widely available and support lesser-known languages. SIL develops - and encourages others to develop - a complete stack of writing systems implementation components available under open licenses. This open stack includes input methods, smart fonts, smart rendering libraries and smart applications. There has been a need for a common open license that is specifically applicable to fonts and related software (a crucial component of this stack), so SIL developed the SIL Open Font License with the help of the Free/Libre and Open Source Software community.\r\n\r\n9.3  How can I contact SIL?\r\nOur main web site is: http://www.sil.org/\r\nOur site about complex scripts is: http://scripts.sil.org/\r\nInformation about this license (and contact information) is at: http://scripts.sil.org/OFL\r\n\r\n\r\nAPPENDIX A - FONTLOG EXAMPLE\r\n\r\nHere is an example of the recommended format for a FONTLOG, although other formats are allowed.\r\n\r\n-----\r\nFONTLOG for the GlobalFontFamily fonts\r\n\r\nThis file provides detailed information on the GlobalFontFamily Font Software. This information should be distributed along with the GlobalFontFamily fonts and any derivative works.\r\n\r\nBasic Font Information\r\n\r\nGlobalFontFamily is a Unicode typeface family that supports all languages that use the Latin script and its variants, and could be expanded to support other scripts.\r\n\r\nNewWorldFontFamily is based on the GlobalFontFamily and also supports Greek, Hebrew, Cyrillic and Armenian.\r\n\r\nMore specifically, this release supports the following Unicode ranges...\r\nThis release contains...\r\nDocumentation can be found at...\r\nTo contribute to the project...\r\n\r\nChangeLog\r\n\r\n10 December 2010 (Fred Foobar) GlobalFontFamily-devel version 1.4\r\n- fix new build and testing system (bug #123456)\r\n\r\n1 August 2008 (Tom Parker) GlobalFontFamily version 1.2.1\r\n- Tweaked the smart font code (Branch merged with trunk version)\r\n- Provided improved build and debugging environment for smart behaviours\r\n\r\n7 February 2007 (Pat Johnson) NewWorldFontFamily Version 1.3\r\n- Added Greek and Cyrillic glyphs\r\n\r\n7 March 2006 (Fred Foobar) NewWorldFontFamily Version 1.2\r\n- Tweaked contextual behaviours\r\n\r\n1 Feb 2005 (Jane Doe) NewWorldFontFamily Version 1.1\r\n- Improved build script performance and verbosity\r\n- Extended the smart code documentation\r\n- Corrected minor typos in the documentation\r\n- Fixed position of combining inverted breve below (U+032F)\r\n- Added OpenType/Graphite smart code for Armenian\r\n- Added Armenian glyphs (U+0531 -> U+0587) \r\n- Released as \"NewWorldFontFamily\"\r\n\r\n1 Jan 2005 (Joe Smith) GlobalFontFamily Version 1.0\r\n- Initial release\r\n\r\nAcknowledgements\r\n\r\nIf you make modifications be sure to add your name (N), email (E), web-address (if you have one) (W) and description (D). This list is in alphabetical order.\r\n\r\nN: Jane Doe\r\nE: jane@university.edu\r\nW: http://art.university.edu/projects/fonts\r\nD: Contributor - Armenian glyphs and code\r\n\r\nN: Fred Foobar\r\nE: fred@foobar.org\r\nW: http://foobar.org\r\nD: Contributor - misc Graphite fixes\r\n\r\nN: Pat Johnson\r\nE: pat@fontstudio.org\r\nW: http://pat.fontstudio.org\r\nD: Designer - Greek & Cyrillic glyphs based on Roman design\r\n\r\nN: Tom Parker\r\nE: tom@company.com\r\nW: http://www.company.com/tom/projects/fonts\r\nD: Engineer - original smart font code\r\n\r\nN: Joe Smith\r\nE: joe@fontstudio.org\r\nW: http://joe.fontstudio.org\r\nD: Designer - original Roman glyphs\r\n\r\nFontstudio.org is an not-for-profit design group whose purpose is...\r\nFoobar.org is a distributed community of developers...\r\nCompany.com is a small business who likes to support community designers...\r\nUniversity.edu is a renowned educational institution with a strong design department...\r\n-----\r\n\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.36,
          "content": "![Cascadia Code](images/cascadia-code.png)\r\n\r\n# About Cascadia Code\r\nCascadia is a fun new coding font that comes bundled with [Windows Terminal](https://github.com/microsoft/terminal), and is now the default font in Visual Studio as well. \r\n\r\n# Font Variants\r\n-  `Cascadia Code`: standard version of Cascadia\r\n-  `Cascadia Mono`: a version of Cascadia that doesn't have ligatures\r\n-  `Cascadia (Code|Mono) PL`: a version of Cascadia that has embedded Powerline symbols\r\n-  `Cascadia (Code|Mono) NF`: a version of Cascadia that has Nerd Font symbols\r\n\r\nFor the italic, there is a standard `italic` and a `cursive` variant accessible via `ss01` (see [below](https://github.com/microsoft/cascadia-code/blob/main/README.md#to-enable-the-cursive-form-of-the-italic-heres-the-code-you-should-use)). \r\n\r\n# Font features\r\n![Coding Ligatures](images/ligatures.png)\r\n\r\n![Arrow Support](images/arrow_support.png)\r\n\r\n![Stylistic Sets](images/stylistic_set.png)\r\n\r\nEnabling stylistic sets will [vary between applications](https://github.com/tonsky/FiraCode/wiki/How-to-enable-stylistic-sets). For example, in VS Code, you can enable stylistic sets (and other OpenType features) via `settings.json`:\r\n\r\n```\r\n\"editor.fontLigatures\": \"'ss01', 'ss02', 'ss03', 'ss19', 'ss20'\"\r\n```\r\n\r\n#### To enable the Cursive form of the italic, here's the code you should use:\r\n```\r\n\"editor.fontLigatures\": \"'calt', 'ss01'\",\r\n```\r\nIf you're using an environment that does not support the `ss01` OT feature, one option to consider is [opentype-feature-freezer](https://github.com/twardoch/fonttools-opentype-feature-freezer/).\r\n\r\n# Character Sets\r\n![Cascadia Code](images/cascadia-code-characters.png)\r\n![Cascadia Code Italic](images/cascadia-code-italic-characters.png)\r\n![Symbols for Legacy Computing and other block elements](images/cascadia-legacycomputing-characters.png)\r\n\r\n# Installation\r\n\r\n**You can download the latest version of Cascadia Code from the releases page here:** [https://github.com/microsoft/cascadia-code/releases](https://github.com/microsoft/cascadia-code/releases)\r\n\r\n##### Font formats:\r\n\r\n- `ttf variable`: we recommend this version for **all users,** and particularly those on Windows or any other OS that employs TrueType hinting. It offers the greatest diversity of weight options (anything from 200-700).\r\n- `ttf static`: in the rare situation where the above variable font version is not supported, or a singular weight is preferred to the entire range, static formats are supplied. However, please note they do not have the same degree of hinting quality as the variable font versions.\r\n- `otf static`: for users who prefer OTF format fonts, otf static instances are provided. At this time we do not have a variable font OTF version. \r\n- `WOFF2`: These versions are provided for the purposes of web use, and are available both as variable fonts, and static instances. \r\n\r\nOnce unzipped, right-click the font file and click `Install for all users`. This will install the font onto your machine. \r\n\r\n👉 **Note:** If you have previously installed a version of Cascadia Code, please uninstall the previous version *prior* to installing a new version. Not doing so can result in improper rendering. \r\n\r\nFor more details and app-specific instructions, [please check the wiki](https://github.com/microsoft/cascadia-code/wiki/Installing-Cascadia-Code). \r\n\r\n# Get involved\r\nInstructions on how to modify and submit an update to the Cascadia Code source is [available in the wiki](https://github.com/microsoft/cascadia-code/wiki/Modifying-Cascadia-Code).\r\n\r\n\r\n# Communicating with the Team\r\n\r\nThe easiest way to communicate with the team is via GitHub Issues. Please file new issues, feature requests and suggestions, but **DO search for similar open/closed pre-existing issues before you do**.\r\n\r\nPlease help us keep this repository clean, inclusive, and fun! We will not tolerate any abusive, rude, disrespectful or inappropriate behavior. Read our [Code of Conduct](https://opensource.microsoft.com/codeofconduct/) for more details.\r\n\r\nIf you would like to ask a question that you feel doesn't warrant an issue (yet), please reach out to us via Twitter:\r\n\r\nAaron Bell, Font Designer: [@aaronbell](https://twitter.com/aaronbell)\r\n\r\nChristopher Nguyen, Product Manager: [@nguyen_dows](https://twitter.com/nguyen_dows)\r\n\r\nDustin Howett, Software Engineer: [@DHowett](https://twitter.com/DHowett)\r\n\r\n_Special thanks_ to:\r\n- Fira Code – OpenType code for the coding ligatures – [github](https://github.com/tonsky/FiraCode)\r\n- Nerd Fonts – Centralizing app iconography – [github](https://github.com/ryanoasis/nerd-fonts)\r\n- Viktoriya Grabowska – Designer of Cyrillic Italic and Consultant – [@vika_grabowska](https://twitter.com/vika_grabowska)\r\n- Mohamad Dakak - Arabic designer - [@mohamaddakak](https://twitter.com/mohamaddakak)\r\n- Liron Lavi Turkenich - Hebrew designer - [@LironLaviTur](https://twitter.com/LironLaviTur)\r\n- Gerry Leonidas – Greek Consultant – [@gerryleonidas](https://twitter.com/gerryleonidas)\r\n- Donny Trương – Vietnamese Consultant – [Vietnamese Typography](https://vietnamesetypography.com)\r\n\r\n# Code of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\r\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.71,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->"
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 24.31,
          "content": "import argparse\nimport multiprocessing\nimport multiprocessing.pool\nimport os\nimport subprocess\nfrom pathlib import Path\nfrom typing import cast\nimport xml.etree.cElementTree as ET\nimport tempfile\nimport glob\n\nimport cffsubr.__main__\nimport fontmake.instantiator\nimport fontTools.designspaceLib\nimport fontTools.ttLib\nimport fontTools.ttLib.tables._g_l_y_f as _g_l_y_f\nimport psautohint.__main__\nfrom gftools.stat import gen_stat_tables_from_config\nimport yaml\nimport ufo2ft\nimport ufoLib2\nimport vttLib\nimport vttLib.transfer\nfrom vttmisc import tsi1, tsic\n\nVERSION_YEAR_MONTH = 2407\nVERSION_DAY = 24\nOUTPUT_DIR = Path(\"build\")\nOUTPUT_OTF_DIR = OUTPUT_DIR / \"otf\"\nOUTPUT_TTF_DIR = OUTPUT_DIR / \"ttf\"\nOUTPUT_WOFF2_DIR = OUTPUT_DIR / \"woff2\"\nOUTPUT_STATIC_OTF_DIR = OUTPUT_OTF_DIR / \"static\"\nOUTPUT_STATIC_TTF_DIR = OUTPUT_TTF_DIR / \"static\"\nOUTPUT_STATIC_WOFF2_DIR = OUTPUT_WOFF2_DIR / \"static\"\nINPUT_DIR = Path(\"sources\")\nVTT_DATA_FILE = INPUT_DIR / \"vtt_data\" / \"CascadiaCode_VTT.ttf\"\nITALIC_VTT_DATA_FILE = INPUT_DIR / \"vtt_data\" / \"CascadiaCodeItalic_VTT.ttf\"\nFEATURES_DIR = INPUT_DIR / \"features\"\nNERDFONTS_DIR = INPUT_DIR / \"nerdfonts\"\n\n# Font modifications\n# ****************************************************************\n\n\ndef step_set_font_name(name: str, source: ufoLib2.Font) -> None:\n    source.info.familyName = source.info.familyName.replace(\"Cascadia Code\", name)\n    # We have to change the style map family name because that's what\n    # Windows uses to map Bold/Regular/Medium/etc. fonts\n    if source.info.styleMapFamilyName:\n        source.info.styleMapFamilyName = source.info.styleMapFamilyName.replace(\"Cascadia Code\", name)\n\n\ndef step_merge_glyphs_from_ufo(path: Path, instance: ufoLib2.Font) -> None:\n    unicodes = []\n    for glyph in instance:\n        unicodes.append(glyph.unicode)\n    ufo = ufoLib2.Font.open(path)\n    for glyph in ufo:\n        if glyph.unicode:\n            if glyph.unicode not in unicodes:\n                newName = str(hex(glyph.unicode)).upper().replace(\"0X\",\"uni\")\n                instance.layers.defaultLayer.insertGlyph(ufo[glyph.name],newName, overwrite=False, copy=False)\n        else:\n            instance.addGlyph(ufo[glyph.name])\n\n\ndef step_set_feature_file(path: Path, name: str, instance: ufoLib2.Font) -> None:\n    featureSet = \"\"\n    if \"Italic\" in name: #until I can come up with a more elegent solution, this'll do. \n        featureList = [\n            \"header_italic\", # adds definitions, language systems\n            \"aalt_italic\",\n            \"ccmp\",\n            \"locl_italic\", \n            \"calt_italic\", \n            \"figures_italic\", # contains subs/sinf/sups/numr/dnom\n            \"frac\", \n            \"ordn\", \n            \"case\", \n            \"salt\",\n            \"ss01\",\n            \"ss02\",\n            \"ss03\", \n            \"ss19\", \n            \"ss20\", \n            \"rclt\", \n            \"zero\"\n            ]\n    else:\n        featureList = [\n            \"header\", # adds definitions, language systems\n            \"aalt\",\n            \"ccmp\",\n            \"locl\", \n            \"calt\",\n            \"figures\", # contains subs/sinf/sups/numr/dnom\n            \"frac\", \n            \"ordn\", \n            \"case\", \n            \"ss02\", \n            \"ss19\", \n            \"ss20\", \n            \"rclt\", \n            \"zero\",\n            \"init\",\n            \"medi\",\n            \"fina\",\n            \"rlig\",\n            ]\n\n    for item in featureList:\n        if \"PL\" in name and item == \"rclt\":\n            featureSet += Path(path / str(\"rclt_PL.fea\")).read_text()\n        elif \"NF\" in name and item == \"rclt\":\n            featureSet += Path(path / str(\"rclt_PL.fea\")).read_text()\n        elif \"Mono\" in name and \"calt\" in item:\n            featureSet += Path(path / str(item+\"_mono.fea\")).read_text() #both Italic and Regular can use same mono\n        else:\n            featureSet += Path(path / str(item+\".fea\")).read_text()\n    instance.features.text = featureSet   \n\n\ndef set_font_metaData(font: ufoLib2.Font) -> None:\n    font.info.versionMajor = VERSION_YEAR_MONTH\n    font.info.versionMinor = VERSION_DAY\n\n    font.info.openTypeOS2TypoAscender = 1900\n    font.info.openTypeOS2TypoDescender = -480\n    font.info.openTypeOS2TypoLineGap = 0\n\n    font.info.openTypeHheaAscender = font.info.openTypeOS2TypoAscender\n    font.info.openTypeHheaDescender = font.info.openTypeOS2TypoDescender\n    font.info.openTypeHheaLineGap = font.info.openTypeOS2TypoLineGap\n\n    font.info.openTypeOS2WinAscent = 2226\n    font.info.openTypeOS2WinDescent = abs(font.info.openTypeOS2TypoDescender)\n\n    font.info.openTypeGaspRangeRecords = [\n        {\"rangeMaxPPEM\": 9, \"rangeGaspBehavior\": [1, 3]},\n        {\"rangeMaxPPEM\": 50, \"rangeGaspBehavior\": [0, 1, 2, 3]},\n        {\"rangeMaxPPEM\": 65535, \"rangeGaspBehavior\": [1, 3]},\n    ]\n\n\ndef set_overlap_flag(varfont: fontTools.ttLib.TTFont) -> fontTools.ttLib.TTFont:\n    glyf = cast(_g_l_y_f.table__g_l_y_f, varfont[\"glyf\"])\n    for glyph_name in glyf.keys():\n        glyph = glyf[glyph_name]\n        if glyph.isComposite():\n            # Set OVERLAP_COMPOUND bit for compound glyphs\n            glyph.components[0].flags |= 0x400\n        elif glyph.numberOfContours > 0:\n            # Set OVERLAP_SIMPLE bit for simple glyphs\n            glyph.flags[0] |= 0x40\n\ndef prepare_fonts(\n    designspace: fontTools.designspaceLib.DesignSpaceDocument, name: str\n) -> None:\n    designspace.loadSourceFonts(ufoLib2.Font.open)\n    for source in designspace.sources:\n\n        step_set_feature_file(FEATURES_DIR, name, source.font)\n\n        if \"PL\" in name or \"NF\" in name or \"Mono\" in name:\n            step_set_font_name(name, source.font)\n\n        if \"PL\" in name or \"NF\" in name:\n            print(f\"[{name} {source.styleName}] Merging PL glyphs\")\n            step_merge_glyphs_from_ufo(\n                NERDFONTS_DIR / \"NerdfontsPL-Regular.ufo\", source.font\n            )\n\n        if \"NF\" in name:\n            print(f\"[{name} {source.styleName}] Merging NF glyphs\")\n            for ufo in Path(NERDFONTS_DIR/\"full\"/\"processed\").glob(\"*.ufo\"):\n                step_merge_glyphs_from_ufo(\n                    ufo, source.font\n                )\n\n        set_font_metaData(source.font)\n    for instance in designspace.instances:\n        instance.name = instance.name.replace(\"Cascadia Code\", name)\n        instance.familyName = instance.familyName.replace(\"Cascadia Code\", name)\n        if instance.styleMapFamilyName:\n            instance.styleMapFamilyName = instance.styleMapFamilyName.replace(\"Cascadia Code\", name)\n\n\ndef to_woff2(source_path: Path, target_path: Path) -> None:\n    print(f\"[WOFF2] Compressing {source_path} to {target_path}\")\n    font = fontTools.ttLib.TTFont(source_path)\n    font.flavor = \"woff2\"\n    target_path.parent.mkdir(exist_ok=True, parents=True)\n    font.save(target_path)\n\n# Build fonts\n# ****************************************************************\n\n\ndef build_font_variable(\n    designspace: fontTools.designspaceLib.DesignSpaceDocument,\n    name: str,\n    vtt_compile: bool = True,\n) -> None:\n    prepare_fonts(designspace, name)\n    compile_variable_and_save(designspace, vtt_compile)\n\n\ndef build_font_static(\n    designspace: fontTools.designspaceLib.DesignSpaceDocument,\n    instance_descriptor: fontTools.designspaceLib.InstanceDescriptor,\n    name: str,\n) -> None:\n    prepare_fonts(designspace, name)\n\n    generator = fontmake.instantiator.Instantiator.from_designspace(designspace)\n    instance = generator.generate_instance(instance_descriptor)\n    instance.info.familyName = instance.info.familyName.replace(\" Italic\",\"\")\n    if instance.info.styleMapFamilyName:\n        instance.info.styleMapFamilyName = instance.info.styleMapFamilyName.replace(\" Italic\",\"\")\n    compile_static_and_save(instance, name.replace(\" Italic\",\"\"))\n\n\n# Export fonts\n# ****************************************************************\n\n\ndef compile_variable_and_save(\n    designspace: fontTools.designspaceLib.DesignSpaceDocument,\n    vtt_compile: bool = True,\n) -> None:\n    \n    if \"Italic\" in designspace.default.font.info.familyName: #Some weird stuff happens with Italics\n        designspace.default.font.info.familyName = designspace.default.font.info.familyName.replace(\" Italic\", \"\")\n    \n    familyName = designspace.default.font.info.familyName\n    styleName = designspace.default.font.info.styleName\n    file_stem = familyName.replace(\" \", \"\")\n    if \"Italic\" in styleName and \"Italic\" not in file_stem:\n        file_stem = file_stem+\"Italic\"\n    file_path: Path = (OUTPUT_TTF_DIR / file_stem).with_suffix(\".ttf\")\n\n    print(f\"[{familyName} {styleName}] Compiling\")\n    varFont = ufo2ft.compileVariableTTF(designspace, inplace=True)\n\n    print(f\"[{familyName} {styleName}] Merging VTT\")\n\n    if \"Italic\" in styleName:\n        font_vtt = fontTools.ttLib.TTFont(ITALIC_VTT_DATA_FILE)\n    else:\n        font_vtt = fontTools.ttLib.TTFont(VTT_DATA_FILE)\n    \n\n    for table in [\"TSI0\", \"TSI1\", \"TSI2\", \"TSI3\", \"TSI5\", \"TSIC\", \"maxp\"]:\n        varFont[table] = fontTools.ttLib.newTable(table)\n        varFont[table] = font_vtt[table]\n\n    # this will correct the OFFSET[R] commands in TSI1\n    if font_vtt.getGlyphOrder() != varFont.getGlyphOrder():\n        tsi1.fixOFFSET(varFont, font_vtt)\n        pass\n\n    if vtt_compile:\n        print(f\"[{familyName} {styleName}] Compiling VTT\")\n        vttLib.compile_instructions(varFont, ship=True)\n    else:\n        file_path = (OUTPUT_TTF_DIR / str(file_stem+\"_VTT\")).with_suffix(\".ttf\")\n\n    # last minute manual corrections to set things correctly\n    # set two flags to enable proper rendering (one for overlaps in Mac, the other for windows hinting)\n    # Helping mac office generage the postscript name correctly for variable fonts when an italic is present\n    set_overlap_flag(varFont)\n    varFont[\"head\"].flags = 0x000b\n\n    if \"Regular\" in styleName:\n        varFont[\"name\"].setName(familyName.replace(\" \",\"\")+\"Roman\", 25, 3, 1, 1033)\n\n    print(f\"[{familyName} {styleName}] Saving\")\n    file_path.parent.mkdir(exist_ok=True, parents=True)\n    varFont.save(file_path)\n\n    print(f\"[{familyName}] Done: {file_path}\")\n\n\ndef compile_static_and_save(instance: ufoLib2.Font, name:str) -> None:\n    family_name = name\n    style_name = instance.info.styleName\n    print(f\"[{family_name}] Building static instance: {style_name}\")\n\n    # Use pathops backend for overlap removal because it is, at the time of this\n    # writing, massively faster than booleanOperations and thanks to autohinting,\n    # there is no need to keep outlines compatible to previous releases.\n    static_ttf = ufo2ft.compileTTF(\n        instance, removeOverlaps=True, overlapsBackend=\"pathops\"\n    )\n    static_otf = ufo2ft.compileOTF(\n        instance,\n        removeOverlaps=True,\n        overlapsBackend=\"pathops\",\n        # Can do inplace now because TTF is already done.\n        inplace=True,\n        # Don't optimize here, will be optimized after autohinting.\n        optimizeCFF=ufo2ft.CFFOptimization.NONE,\n    )\n\n    file_name = f\"{family_name}-{style_name}\".replace(\" \", \"\")\n    file_path_static = (OUTPUT_STATIC_TTF_DIR / file_name).with_suffix(\".ttf\")\n    file_path_static_otf = (OUTPUT_STATIC_OTF_DIR / file_name).with_suffix(\".otf\")\n\n    file_path_static.parent.mkdir(exist_ok=True, parents=True)\n    static_ttf.save(file_path_static)\n    file_path_static_otf.parent.mkdir(exist_ok=True, parents=True)\n    static_otf.save(file_path_static_otf)\n    print(f\"[{family_name}] Done: {file_path_static}, {file_path_static_otf}\")\n\n\n# Font hinting\n# ****************************************************************\n\n\ndef autohint(otf_path: Path) -> None:\n    path = os.fspath(otf_path)\n\n    print(f\"Autohinting {path}\")\n    psautohint.__main__.main([path])\n\n    print(f\"Compressing {path}\")\n    cffsubr.__main__.main([\"-i\", path])\n\n\ndef ttfautohint(path: str) -> None:\n    print(f\"Autohinting {path}\")\n    subprocess.check_call(\n        [\n            \"ttfautohint\",\n            \"--stem-width\",\n            \"nsn\",\n            \"--increase-x-height\",\n            \"0\",\n            \"--reference\",\n            os.fspath(OUTPUT_STATIC_TTF_DIR / \"CascadiaCode-Regular.ttf\"),\n            path,\n            path[:-4] + \"-hinted.ttf\",\n        ]\n    )\n    os.remove(path)\n    os.rename(path[:-4] + \"-hinted.ttf\", path)\n\n\n# Main build script\n# ****************************************************************\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"build some fonts\")\n    parser.add_argument(\"-P\", \"--no-powerline\", action=\"store_false\", dest=\"powerline\")\n    parser.add_argument(\"-NF\", \"--no-nerdfonts\", action=\"store_false\", dest=\"nerdfonts\")\n    parser.add_argument(\"-M\", \"--no-mono\", action=\"store_false\", dest=\"mono\")\n    parser.add_argument(\"-S\", \"--static-fonts\", action=\"store_true\")\n    parser.add_argument(\"-I\", \"--no-italic\", action=\"store_false\", dest=\"italic\")\n    parser.add_argument(\n        \"-V\",\n        \"--no-vtt-compile\",\n        action=\"store_false\",\n        dest=\"vtt_compile\",\n        help=\"Do not compile VTT code but leave in the VTT sources.\",\n    )\n    parser.add_argument(\"-W\", \"--web-fonts\", action=\"store_true\")\n    args = parser.parse_args()\n\n    # Load Designspace and filter out instances that are marked as non-exportable.\n    designspace = fontTools.designspaceLib.DesignSpaceDocument.fromfile(\n        INPUT_DIR / \"CascadiaCode_variable.designspace\"\n    )\n\n    designspace.instances = [\n        s\n        for s in designspace.instances\n        if s.lib.get(\"com.schriftgestaltung.export\", True)\n    ]\n\n    designspaceItalic = fontTools.designspaceLib.DesignSpaceDocument.fromfile(\n        INPUT_DIR / \"CascadiaCode_variable_italic.designspace\"\n    )\n\n    designspaceItalic.instances = [\n        s\n        for s in designspaceItalic.instances\n        if s.lib.get(\"com.schriftgestaltung.export\", True)\n    ]\n\n\n    #Stage 1: Make all the things.\n    pool = multiprocessing.pool.Pool(processes=multiprocessing.cpu_count())\n    processes = []\n    processes.append(\n        pool.apply_async(\n            build_font_variable,\n            (\n                designspace,\n                \"Cascadia Code\",\n                args.vtt_compile,\n            ),\n        )\n    )\n    if args.italic:\n        processes.append(\n            pool.apply_async(\n                build_font_variable,\n                (\n                    designspaceItalic,\n                    \"Cascadia Code Italic\",\n                    args.vtt_compile,\n                ),\n            )\n        )\n    if args.mono:\n        processes.append(\n            pool.apply_async(\n                build_font_variable,\n                (\n                    designspace,\n                    \"Cascadia Mono\",\n                    args.vtt_compile,\n                ),\n            )\n        )\n        if args.italic:\n            processes.append(\n                pool.apply_async(\n                    build_font_variable,\n                    (\n                        designspaceItalic,\n                        \"Cascadia Mono Italic\",\n                        args.vtt_compile,\n                    ),\n                )\n            )\n    if args.powerline:\n        processes.append(\n            pool.apply_async(\n                build_font_variable,\n                (\n                    designspace,\n                    \"Cascadia Code PL\",\n                    args.vtt_compile,\n                ),\n            )\n        )\n        if args.italic:\n            processes.append(\n                pool.apply_async(\n                    build_font_variable,\n                    (\n                        designspaceItalic,\n                        \"Cascadia Code PL Italic\",\n                        args.vtt_compile,\n                    ),\n                )\n            )\n        if args.mono:\n            processes.append(\n                pool.apply_async(\n                    build_font_variable,\n                    (\n                        designspace,\n                        \"Cascadia Mono PL\",\n                        args.vtt_compile,\n                    ),\n                )\n            )\n            if args.italic:\n                processes.append(\n                    pool.apply_async(\n                        build_font_variable,\n                        (\n                            designspaceItalic,\n                            \"Cascadia Mono PL Italic\",\n                            args.vtt_compile,\n                        ),\n                    )\n                )\n    if args.nerdfonts:\n        processes.append(\n            pool.apply_async(\n                build_font_variable,\n                (\n                    designspace,\n                    \"Cascadia Code NF\",\n                    args.vtt_compile,\n                ),\n            )\n        )\n        if args.italic:\n            processes.append(\n                pool.apply_async(\n                    build_font_variable,\n                    (\n                        designspaceItalic,\n                        \"Cascadia Code NF Italic\",\n                        args.vtt_compile,\n                    ),\n                )\n            )\n        if args.mono:\n            processes.append(\n                pool.apply_async(\n                    build_font_variable,\n                    (\n                        designspace,\n                        \"Cascadia Mono NF\",\n                        args.vtt_compile,\n                    ),\n                )\n            )\n            if args.italic:\n                processes.append(\n                    pool.apply_async(\n                        build_font_variable,\n                        (\n                            designspaceItalic,\n                            \"Cascadia Mono NF Italic\",\n                            args.vtt_compile,\n                        ),\n                    )\n                )\n\n    if args.static_fonts:\n        # Build the Regulars\n        for instance_descriptor in designspace.instances:\n            processes.append(\n                pool.apply_async(\n                    build_font_static,\n                    (\n                        designspace,\n                        instance_descriptor,\n                        \"Cascadia Code\",\n                    ),\n                )\n            )\n            if args.mono:\n                processes.append(\n                    pool.apply_async(\n                        build_font_static,\n                        (\n                            designspace,\n                            instance_descriptor,\n                            \"Cascadia Mono\",\n                        ),\n                    )\n                )\n            if args.powerline:\n                processes.append(\n                    pool.apply_async(\n                        build_font_static,\n                        (\n                            designspace,\n                            instance_descriptor,\n                            \"Cascadia Code PL\",\n                        ),\n                    )\n                )\n                if args.mono:\n                    processes.append(\n                        pool.apply_async(\n                            build_font_static,\n                            (\n                                designspace,\n                                instance_descriptor,\n                                \"Cascadia Mono PL\",\n                            ),\n                        )\n                    )\n            if args.nerdfonts:\n                processes.append(\n                    pool.apply_async(\n                        build_font_static,\n                        (\n                            designspace,\n                            instance_descriptor,\n                            \"Cascadia Code NF\",\n                        ),\n                    )\n                )\n                if args.mono:\n                    processes.append(\n                        pool.apply_async(\n                            build_font_static,\n                            (\n                                designspace,\n                                instance_descriptor,\n                                \"Cascadia Mono NF\",\n                            ),\n                        )\n                    )\n        if args.italic:\n            # Build the Regulars\n            for instance_descriptor in designspaceItalic.instances:\n                processes.append(\n                    pool.apply_async(\n                        build_font_static,\n                        (\n                            designspaceItalic,\n                            instance_descriptor,\n                            \"Cascadia Code Italic\",\n                        ),\n                    )\n                )\n                if args.mono:\n                    processes.append(\n                        pool.apply_async(\n                            build_font_static,\n                            (\n                                designspaceItalic,\n                                instance_descriptor,\n                                \"Cascadia Mono Italic\",\n                            ),\n                        )\n                    )\n                if args.powerline:\n                    processes.append(\n                        pool.apply_async(\n                            build_font_static,\n                            (\n                                designspaceItalic,\n                                instance_descriptor,\n                                \"Cascadia Code PL Italic\",\n                            ),\n                        )\n                    )\n                    if args.mono:\n                        processes.append(\n                            pool.apply_async(\n                                build_font_static,\n                                (\n                                    designspaceItalic,\n                                    instance_descriptor,\n                                    \"Cascadia Mono PL Italic\",\n                                ),\n                            )\n                        )\n                if args.nerdfonts:\n                    processes.append(\n                        pool.apply_async(\n                            build_font_static,\n                            (\n                                designspaceItalic,\n                                instance_descriptor,\n                                \"Cascadia Code NF Italic\",\n                            ),\n                        )\n                    )\n                    if args.mono:\n                        processes.append(\n                            pool.apply_async(\n                                build_font_static,\n                                (\n                                    designspaceItalic,\n                                    instance_descriptor,\n                                    \"Cascadia Mono NF Italic\",\n                                ),\n                            )\n                        )\n\n    pool.close()\n    pool.join()\n    for process in processes:\n        process.get()\n    del processes, pool\n\n    # Step 1.5: Adding STAT tables in one go\n    print (\"[Cascadia Variable fonts] Fixing STAT tables\")\n    fontSTAT = [fontTools.ttLib.TTFont(f) for f in list(OUTPUT_TTF_DIR.glob(\"*.ttf\"))]\n    with open(INPUT_DIR/\"stat.yaml\") as f:\n        config = yaml.load(f, Loader=yaml.SafeLoader)\n    gen_stat_tables_from_config(config, fontSTAT)\n\n    for font in fontSTAT:\n        font.save(font.reader.file.name)\n\n    # Stage 2: Autohint and maybe compress all the static things.\n    if args.static_fonts is True:\n        otfs = list(OUTPUT_STATIC_OTF_DIR.glob(\"*.otf\"))\n        if otfs:\n            pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())\n            processes = [pool.apply_async(autohint, (otf,)) for otf in otfs]\n            pool.close()\n            pool.join()\n            for process in processes:\n                process.get()\n            del processes, pool\n\n        try:\n            for ttf_path in OUTPUT_STATIC_TTF_DIR.glob(\"*.ttf\"):\n                if not ttf_path.stem.endswith(\"-hinted\"):\n                    ttfautohint(os.fspath(ttf_path))\n        except Exception as e:\n            print(f\"ttfautohint failed. Please reinstall and try again. {str(e)}\")\n\n    # Stage 3: Have some web fonts.\n    if args.web_fonts:\n        pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())\n        processes = [\n            pool.apply_async(\n                to_woff2,\n                (\n                    path,\n                    # This removes build/ttf from the found files and prepends\n                    # build/woff2 instead, keeping the sub-structure.\n                    OUTPUT_WOFF2_DIR\n                    / path.relative_to(OUTPUT_TTF_DIR).with_suffix(\".woff2\"),\n                ),\n            )\n            for path in OUTPUT_TTF_DIR.glob(\"**/*.ttf\")\n        ]\n        pool.close()\n        pool.join()\n        for process in processes:\n            process.get()\n\n    print(\"All done.\")\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.in",
          "type": "blob",
          "size": 0.23,
          "content": "# Add or remove dependencies here and then use pip-tool's \n#   pip-compile -U requirements.in\n# to update requirements.txt (the lock file, so to speak).\n\nfontmake\npsautohint\ngftools\nvttLib\nskia-pathops\nfontTools[ufo,lxml,woff]\nvttmisc\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 5.43,
          "content": "#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile\n#\nabsl-py==2.1.0\n    # via\n    #   gftools\n    #   nanoemoji\n    #   picosvg\nafdko==4.0.1\n    # via gftools\nappdirs==1.4.4\n    # via fs\nattrs==23.2.0\n    # via\n    #   cattrs\n    #   statmake\n    #   ufolib2\naxisregistry==0.4.9\n    # via gftools\nbabelfont==3.0.4\n    # via gftools\nbeautifulsoup4==4.12.3\n    # via gftools\nbooleanoperations==0.9.0\n    # via\n    #   afdko\n    #   fontparts\n    #   ufo2ft\nbrotli==1.1.0\n    # via\n    #   fonttools\n    #   gftools\nbump2version==1.0.1\n    # via bumpfontversion\nbumpfontversion==0.4.1\n    # via gftools\ncattrs==23.2.3\n    # via\n    #   statmake\n    #   ufolib2\ncertifi==2024.2.2\n    # via requests\ncffi==1.16.0\n    # via\n    #   cryptography\n    #   pygit2\n    #   pynacl\ncffsubr==0.3.0\n    # via ufo2ft\ncharset-normalizer==3.3.2\n    # via requests\nclick==8.1.7\n    # via hyperglot\ncolorlog==6.8.2\n    # via hyperglot\ncompreffor==0.5.5\n    # via ufo2ft\ncryptography==42.0.5\n    # via pyjwt\ndefcon[lxml,pens]==0.10.3\n    # via\n    #   afdko\n    #   fontparts\n    #   glyphsets\n    #   mutatormath\n    #   ufoprocessor\ndeprecated==1.2.14\n    # via pygithub\nfont-v==2.1.0\n    # via gftools\nfontfeatures==1.8.0\n    # via\n    #   babelfont\n    #   gftools\nfontmake[json]==3.9.0\n    # via\n    #   -r requirements.in\n    #   gftools\nfontmath==0.9.3\n    # via\n    #   afdko\n    #   fontmake\n    #   fontparts\n    #   mutatormath\n    #   ufo2ft\n    #   ufoprocessor\nfontparts==0.12.1\n    # via ufoprocessor\nfontpens==0.2.4\n    # via defcon\nfonttools[lxml,ufo,unicode,woff]==4.51.0\n    # via\n    #   -r requirements.in\n    #   afdko\n    #   axisregistry\n    #   babelfont\n    #   booleanoperations\n    #   bumpfontversion\n    #   cffsubr\n    #   compreffor\n    #   defcon\n    #   font-v\n    #   fontfeatures\n    #   fontmake\n    #   fontmath\n    #   fontparts\n    #   fontpens\n    #   gftools\n    #   glyphsets\n    #   glyphslib\n    #   hyperglot\n    #   mutatormath\n    #   nanoemoji\n    #   psautohint\n    #   statmake\n    #   ufo2ft\n    #   ufolib2\n    #   ufoprocessor\n    #   vttlib\n    #   vttmisc\nfs==2.4.16\n    # via\n    #   fontfeatures\n    #   fonttools\ngflanguages==0.5.17\n    # via\n    #   gftools\n    #   glyphsets\ngfsubsets==2024.2.5\n    # via gftools\ngftools==0.9.54\n    # via -r requirements.in\ngitdb==4.0.11\n    # via gitpython\ngitpython==3.1.43\n    # via font-v\nglyphsets==0.6.19\n    # via gftools\nglyphslib==6.7.0\n    # via\n    #   babelfont\n    #   bumpfontversion\n    #   fontmake\n    #   gftools\n    #   glyphsets\nhyperglot==0.6.2\n    # via gftools\nidna==3.7\n    # via requests\nimportlib-resources==6.4.0\n    # via gfsubsets\njinja2==3.1.3\n    # via gftools\nlxml==5.2.1\n    # via\n    #   afdko\n    #   fontfeatures\n    #   fonttools\n    #   nanoemoji\n    #   picosvg\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==2.1.5\n    # via jinja2\nmdurl==0.1.2\n    # via markdown-it-py\nmutatormath==3.0.1\n    # via ufoprocessor\nnanoemoji==0.15.1\n    # via gftools\nnetworkx==3.3\n    # via gftools\nninja==1.11.1.1\n    # via\n    #   gftools\n    #   nanoemoji\nopenstep-plist==0.3.1\n    # via\n    #   babelfont\n    #   bumpfontversion\n    #   glyphslib\nopentype-sanitizer==9.1.0\n    # via gftools\norjson==3.10.1\n    # via\n    #   babelfont\n    #   ufolib2\npackaging==24.0\n    # via gftools\npicosvg==0.22.1\n    # via nanoemoji\npillow==10.3.0\n    # via\n    #   gftools\n    #   nanoemoji\npngquant-cli==2.17.0.post5\n    # via nanoemoji\nprotobuf==3.20.3\n    # via\n    #   axisregistry\n    #   gflanguages\n    #   gftools\npsautohint==2.4.0\n    # via -r requirements.in\npyclipper==1.3.0.post5\n    # via booleanoperations\npycparser==2.22\n    # via cffi\npygit2==1.14.1\n    # via gftools\npygithub==2.3.0\n    # via gftools\npygments==2.17.2\n    # via rich\npyjwt[crypto]==2.8.0\n    # via pygithub\npynacl==1.5.0\n    # via pygithub\npyparsing==3.1.2\n    # via vttlib\npython-dateutil==2.9.0.post0\n    # via strictyaml\npyyaml==6.0.1\n    # via\n    #   gftools\n    #   glyphsets\n    #   hyperglot\nregex==2024.4.16\n    # via nanoemoji\nrequests==2.31.0\n    # via\n    #   gftools\n    #   glyphsets\n    #   pygithub\nresvg-cli==0.22.0.post3\n    # via nanoemoji\nrich==13.7.1\n    # via gftools\nsix==1.16.0\n    # via\n    #   fs\n    #   python-dateutil\nskia-pathops==0.8.0.post1\n    # via\n    #   -r requirements.in\n    #   gftools\n    #   picosvg\nsmmap==5.0.1\n    # via gitdb\nsoupsieve==2.5\n    # via beautifulsoup4\nstatmake==0.6.0\n    # via gftools\nstrictyaml==1.7.3\n    # via gftools\ntabulate==0.9.0\n    # via gftools\ntoml==0.10.2\n    # via nanoemoji\ntqdm==4.66.2\n    # via afdko\nttfautohint-py==0.5.1\n    # via gftools\ntyping-extensions==4.11.0\n    # via pygithub\nufo2ft[cffsubr,compreffor]==3.2.1\n    # via\n    #   fontmake\n    #   nanoemoji\nufolib2[json]==0.16.0\n    # via\n    #   babelfont\n    #   bumpfontversion\n    #   fontmake\n    #   glyphslib\n    #   nanoemoji\n    #   vttlib\nufonormalizer==0.6.1\n    # via afdko\nufoprocessor==1.9.0\n    # via afdko\nuharfbuzz==0.39.1\n    # via\n    #   hyperglot\n    #   vharfbuzz\nunicodedata2==15.1.0\n    # via\n    #   fonttools\n    #   glyphsets\n    #   hyperglot\nunidecode==1.3.8\n    # via gftools\nurllib3==2.2.1\n    # via\n    #   pygithub\n    #   requests\nvharfbuzz==0.3.0\n    # via gftools\nvttlib==0.12.0\n    # via\n    #   -r requirements.in\n    #   gftools\nvttmisc==0.0.5\n    # via -r requirements.in\nwrapt==1.16.0\n    # via deprecated\nzopfli==0.2.3\n    # via\n    #   fonttools\n    #   nanoemoji\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n"
        },
        {
          "name": "sources",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}