{
  "metadata": {
    "timestamp": 1736557739770,
    "page": 889,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vnpy/vnpy",
      "stars": 26569,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.17,
          "content": "[flake8]\nexclude = venv,build,__pycache__,__init__.py,ib,talib,uic\nignore =\n    # line too long, fixed by black\n    E501,\n    # line break before binary operator\n    W503,\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.28,
          "content": "# Python\n*.pyc\n*.pyo\n*.pyd\n*.egg-info/\n\n# Jupyter\n.ipynb_checkpoints\n\n# IDE\n.vscode\n.idea\n*.wpr\n*.wpu\n.vs\nx64\n\n# Temp\nbuild\ndist\n*.local\n\n# VeighNa\n.vntrader\n\n# Visual Studio intermediate files\n*.exp\n*.iobj\n*.ipdb\n*.pdb\n\n# Documents\n_build\n_static\n_templates\n\n# Misc\n.DS_Store\n*.mo\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 31.92,
          "content": "# 3.9.4版本\n\n## 新增\n\n1. vnpy_tora增加登录时终端动态密钥支持\n2. vnpy_taos升级支持TDengine的3.0版本\n\n## 调整\n\n1. vnpy_xt行情接口增加实时行情中的涨跌停价字段\n2. vnpy_taos移除不必要的时区转换提高性能\n3. vnpy_dolphindb优化写入大量数据时候的内存占用\n4. vnpy_portfoliostrategy简化回测引擎的calculate_pnl每日盈亏计算函数\n5. vnpy_tap/vnpy_tts升级pybind11封装工具库的版本，支持Python 3.12编译\n6. EmailEngine发送邮件失败后，捕捉异常并输出日志\n\n## 修复\n\n1. vnpy_optionmaster移除不必要的价格缓存代码\n2. vnpy_dolphindb修复保存overview的时区不正确问题\n\n\n# 3.9.3版本\n\n## 新增\n\n1. 利星资管交易接口vnpy_lstar\n2. 咏春大师数据服务vnpy_voltrader\n3. vnpy_rpcservice增加数据服务代理工具RpcDatafeed\n\n## 调整\n\n1. 适配6.3.0版本以上的PySide6模块：vnpy/vnpy_ctastrategy/vnpy_ctabacktester/vnpy_portfoliostrategy/vnpy_spreadtrading/vnpy_datamanager/vnpy_algotrading/vnpy_portfoliomananger/vnpy_optionmaster\n2. vnpy_uft升级3.7.4.1004版本API\n3. vnpy_ib的execDetails成交回报使用本地缓存的委托记录填充交易所，解决SMART交易所字段可能发生变化的问题\n4. vnpy_ib的openOrder委托回报优先使用本地缓存的委托记录，解决交易所字段可能发生变化的问题\n5. vnpy_ib的查询历史数据时，使用UTC时间戳传参\n6. vnpy_ib的查询历史数据时，异步返回最长等待时间延长为600秒\n7. vnpy_ib的增加期权链合约数据更新结束回报\n8. vnpy_ib的合约乘数支持浮点数\n9. 合约信息ContractData数据类，增加单笔最大委托数量max_volume\n\n## 修复\n\n1. 修复vnpy_spreadtrading回测引擎clear_data时，没有清空价差仓位的问题\n2. 修复vnpy_ib查询历史数据失败时的日志输出错误\n\n\n# 3.9.2版本\n\n## 新增\n\n1. vnpy_xt增加实时行情接口XtGateway\n2. vnpy_xt增加基于文件锁实现的xtdc单例运行\n3. vnpy_ib增加行情退订功能\n4. vnpy_ib的合约乘数支持浮点数\n5. vnpy_ib增加期权链合约数据更新结束回报\n6. vnpy_ctabacktester、vnpy_ctastrategy、vnpy_portfoliostrategy增加i18n国际化支持\n\n## 调整\n\n1. vnpy_algotrading增加委托/成交推送时，对于算法状态的过滤\n2. vnpy_tushare模块的to_ts_asset函数增加ETF基金支持\n3. vnpy_xt更新适配xtquant的240613.1.1版本\n4. vnpy_xt开启使用期货真实夜盘时间，增加期货历史数据集合竞价K线合成支持\n5. vnpy_tts更新API版本到6.7.2\n6. vnpy_rohon更新API版本：行情1.4.1.3，交易30.4.1.24\n7. vnpy_tap完善API日志输出功能\n8. vnpy_rest发送REST请求时，增加对于json参数的支持\n9. vnpy_excelrtd优化PyXLL启动时加载模块的方式\n10. vnpy_spreadtrading使用线程池实现策略初始化的异步执行\n11. vnpy_ib移除期权合约的自动查询功能\n12. vnpy_ib缓存查询返回的IB合约数据，简化行情切片查询函数\n13. vnpy_ib查询历史数据时，使用UTC时间戳传参，并将最长等待时间延长为600秒\n14. vnpy_ctastrategy的绩效统计值增加基于指数移动平均计算的EWM Sharpe比率\n15. vnpy_ctastrategy回测引擎的show_chart函数直接返回图表对象\n\n## 修复\n\n1. 修复vnpy_rhon行情登录失败时的判断逻辑问题\n2. 修复vnpy_datarecorder记录价差数据时缺失的localtime字段\n3. 修复vnpy_spreadtraidng从datafeed加载数据时，时间戳传参缺失时区信息的问题\n4. 修复vnpy_paperaccount委托数量为0撮合之后导致的ZeroDivisionError问题\n5. 修复vnpy_portoliostrategy停止策略时，没有自动撤销策略委托的功能\n\n# 3.9.1版本\n\n## 新增\n\n1. 增加i18n国际化支持，以及对应的英文翻译\n2. 增加CFD和SWAP品种类型枚举值\n3. vnpy_ib增加COMEX、Eurex交易所支持\n4. vnpy_ib增加CFD品种支持\n\n## 调整\n\n1. vnpy_rqdata完善对于周五夜盘数据查询的支持\n2. vnpy_ib订阅行情和委托下单时，检查代码字符串是否包含空格\n3. vnpy_ib解析合约对象时，增加对于ConId是否包含非数字字符的检查\n4. vnpy_ib查询历史K线数据，支持更长时间段跨度（不再限制半年）\n5. vnpy_da更新API版本到1.18.2.0\n6. vnpy_da移除历史数据查询功能\n7. vnpy_tora调整期权接口的委托号生成规则，支持上限10万数量委托\n8. vnpy_xtp调整账户冻结资金的计算逻辑\n9. vnpy_optionmaster增加对IB的股票期权品种支持\n10. vnpy_optionmaster定价模型改为计算理论希腊值\n11. vnpy_optionmaster调整对象希腊值为理论模式\n12. vnpy_optionmaster调整中值隐波动的计算方法\n13. vnpy_spreadtrading使用线程池实现策略初始化的异步执行\n14. vnpy_postgresql支持自动重用已经打开的数据库连接\n15. vnpy_ctptest更新API版本至6.7.2\n16. 接口封装升级更新pybind11到2.11.1版本：vnpy_ctptest、vnpy_sopttest\n17. vnpy_ctp更新API版本到6.7.2\n18. 调整extract_vt_symbol函数，兼容代码中带有\".\"的情况，如HHI.HK-HKD-FUT.HKFE\n19. 更新vnpy框架的核心依赖模块到2024年较新的版本\n\n## 修复\n\n1. 修复vnpy_portfoliostrategy调用stop_strategy没有撤销活动委托的问题\n2. 修复vnpy_xtp的API封装中queryTickersPriceInfo底层调用错误\n3. 修复RpcClient中_last_received_ping变量的类型问题\n\n\n# 3.9.0版本\n\n## 新增\n\n1. 迅投研数据服务vnpy_xt，支持股票、期货、期权、债券、基金历史数据获取\n2. vnpy_ib增加对CBOE和CBOT交易所的支持、对指数期权的支持\n3. vnpy_rqdata增加对于88A2连续次主力合约的支持\n4. vnpy_wind增加广期所和上期能源交易所的数据支持\n\n## 调整\n\n1. vnpy_sopt升级3.7.0版本API\n2. vnpy_portfoliostrategy回测引擎支持交易日参数annual_days\n3. K线合成器（BarGenerator）移除对于Tick时间戳的检查过滤逻辑，交由用户层负责控制过滤\n4. vnpy_ib收到期权合约数据后，自动查询其切片行情数据\n5. vnpy_paperaccount实现对于IB接口合约的特殊路由处理\n6. 接口封装升级更新pybind11到2.11.1版本：vnpy_ctp、vnpy_sopt、vnpy_tora\n7. vnpy_ctp过滤不支持的委托状态推送\n8. vnpy_mysql兼容无数据库写入权限情况下的数据表初始化\n9. vnpy_chartwizard支持关闭单个图表标签页\n10. vnpy_portfoliostrategy移除策略后同时清除对应的策略状态缓存数据\n11. vnpy_portfoliostrategy调整每日盈亏清算对象开盘持仓数据的初始化方式\n12. 策略模块遗传优化函数增加ngen_size和max_workers参数\n\n\n## 修复\n\n1. 修复vnpy_tora接口中的委托部分撤单状态映射缺失\n2. 修复vnpy_wind查询日线历史数据时数值存在NaN的问题\n3. 修复vnpy_mongodb的Tick汇总数据的条数统计错误\n4. 修复vnpy_chartwizard对于升级后的vnpy_spreadtrading价差行情显示问题\n5. 修复vnpy_ctastrategy回测成交记录为空时的报错\n6. 修复vnpy_ctastrategy策略初始化时，历史数据重复推送调用on_bar的问题\n\n\n# 3.8.0版本\n\n## 新增\n\n1. K线合成器（BarGenerator）增加对日K线的合成支持\n2. 基于华鑫奇点柜台的C++ API重构vnpy_tora，实现VeighNa Station加载支持\n3. 新增vnpy_ib对于期权合约查询、波动率和希腊值等扩展行情数据的支持\n\n## 调整\n\n1. vnpy_rest/vnpy_websocket限制在Windows上改为必须使用Selector事件循环\n2. vnpy_rest/vnpy_websocket客户端关闭时确保所有会话结束，并等待有异步任务完成后安全退出\n3. vnpy_ctp升级6.6.9版本API\n4. vnpy_ctp支持大商所的1毫秒级别行情时间戳\n5. vnpy_tqsdk过滤不支持的K线频率查询并输出日志\n6. vnpy_datamanager增加数据频率下按交易所显示支持，优化数据加载显示速度\n7. vnpy_ctabacktester如果加载的历史数据为空，则不执行后续回测\n8. vnpy_spreadtrading采用轻量级数据结构，优化图形界面更新机制\n9. vnpy_spreadtrading价差子引擎之间的事件推送，不再经过事件引擎，降低延迟水平\n10. vnpy_rpcservice增加对下单返回委托号的gateway_name替换处理\n11. vnpy_portfoliostrategy策略模板增加引擎类型查询函数get_engine_type\n12. vnpy_sec更新行情API至1.6.45.0版本，更新交易API版本至1.6.88.18版本\n13. vnpy_ib更新10.19.1版本的API，恢复对于数字格式代码（ConId）的支持\n14. 没有配置数据服务或者加载模块失败的情况下，使用BaseDatafeed作为数据服务\n15. 遗传优化算法运行时，子进程指定使用spawn方式启动，避免数据库连接对象异常\n16. 合约管理控件，增加对于期权合约的特有数据字段显示\n\n## 修复\n\n1. 修复vnpy_datarecorder对于新版本vnpy_spreadtrading价差数据的录制支持\n2. 修复vnpy_algotrading条件委托算法StopAlgo全部成交后状态更新可能缺失的问题\n3. 修复vnpy_ctastrategy策略初始化时，历史数据重复推送调用on_bar的问题\n4. 修复vnpy_wind查询日线历史数据时，数值存在NaN的问题\n\n\n# 3.7.0版本\n\n## 新增\n\n1. 新增沪股通和深股通交易所枚举值\n2. 增加vnpy_tap对于Linux系统的支持\n3. 增加vnpy_rqdata对于新型主力合约数据支持（切换前一日收盘价比例复权）\n\n## 调整\n\n1. vnpy_ctastrategy/vnpy_ctabacktester加载策略类时，过滤TargetPosTemplate模板\n2. vnpy_ctp连接登录过程中，只有在授权码错误的情况下，才禁止再次发起认证\n3. vnpy_uft增加对广期所GFEX的支持\n4. vnpy_tqsdk增加对于output日志输出功能的支持\n5. vnpy_dolphindb允许指定用户自行配置具体的数据库实例\n6. vnpy_rqdata优化对于郑商所期货和期权合约的查询代码转换规则\n7. vnpy_rqdata增加对广期所GFEX的支持\n8. vnpy_portfoliostrategy增加回测爆仓检查\n9. vnpy_portfoliostrategy策略模板增加合约乘数查询函数get_size\n10. vnpy_portfoliostrategy回测加载日线和小时线数据时，不使用分段加载\n\n## 修复\n\n1. 修复vnpy_rpcservice中，RPC接口对于推送数据的vt前缀相关字段错误问题\n2. 修复vnpy_mini中，对于INE交易所今昨仓位的特殊处理\n3. 修复vnpy_datamanager中，批量数据更新时缺失output函数的问题\n4. 修复vnpy_spreadtrading中，回测加载数据时优先从数据服务获取历史数据的问题，改为优先从本地数据库加载\n\n\n# 3.6.0版本\n\n## 新增\n\n1. 新增vnpy_ctp的Mac系统支持（M1/M2）\n\n## 调整\n\n1. BaseDatafeed的相关功能函数增加output入参用于输出日志\n2. 修改相关数据服务模块适配output参数：vnpy_rqdata/vnpy_ifind/vnpy_wind/vnpy_tushare\n3. 修改相关策略应用模块适配output参数：vnpy_ctastrategy/vnpy_ctabacktester/vnpy_portfoliostrategy/vnpy_spreadtrading/vnpy_datamanager\n3. OffsetConverter增加对于SHFE/INE合约的锁仓模式支持\n4. 在OmsEngine中添加全局的OffsetConverter功能，不再需要各AppEngine自行维护\n5. 添加CTA策略模块在执行参数优化时的最大进程数量限制参数：vnpy_ctastrategy/vnpy_ctabacktester\n6. 增加穷举优化算法运行过程中基于tqdm的进度条输出\n7. 增加遗传优化算法运行过程中的迭代次数进度输出\n8. 增加vnpy_optionmaster模块的期权产品对应标的合约的匹配函数，不再限制产品范围\n9.  升级vnpy_tts的dll链接库，解决openctp升级导致的资金不显示的问题\n10. 修改vnpy_ctastrategy使用vnpy.trader.database中统一定义的时区来加载数据\n11. 增加vnpy_ctastrategy策略模板的合约乘数查询函数get_size\n12. 增加vnpy_spreadtrading回测中统计绩效时对于爆仓情况的检查\n13. 增加vnpy_scripttrader基于vt_symbol和direction查询持仓数据的函数\n14. 修改vt_positionid的字符串内容，增加gateway_name前缀标识\n\n## 修复\n\n1. 修复异常捕捉钩子threading_excepthook的参数错误问题\n2. 修复vnpy_ib获取历史数据时的异常失败问题\n3. 修复vnpy_rest/vnpy_websocket中aiohttp的代理参数proxy传空时必须为None的问题\n4. 修复vnpy_optionmaster模块的Greeks监控表行数设置不足的问题\n5. 修复vnpy_rqdata查询股票期权数据报错的问题\n6. 修复vnpy_rqdata中RqdataGateway获取期货指数和连续合约信息时错误的问题\n7. 修复vnpy_portfoliostrategy中，从缓存文件恢复数据，导致defaultdict变成dict的问题\n\n\n# 3.5.0版本\n\n## 新增\n\n1. 新增基于米筐RQData的跨市场行情数据接口RqdataGateway\n2. 新增东方财富证券EMT柜台交易接口vnpy_emt\n\n## 调整\n\n1. 调整vnpy_algotrading模块设计（模板、引擎），只支持单合约算法执行交易\n2. 优化vnpy_algotrading的算法状态控制，增加状态枚举值，算法支持暂停和恢复运行\n3. 升级vnpy_hft接口支持HFT国君统一交易网关的2.0版本API\n4. 优化vnpy_portfoliostrategy的策略模板，支持持仓目标调仓交易模式\n\n## 修复\n\n1. 修复后台线程异常捕捉钩子函数，对于Python 3.7的语法兼容性问题\n2. 修复vnpy_mysql加载历史数据时存在时段重复的问题\n3. 修复vnpy_ib由于TWS客户端升级导致的委托失败问题\n4. 修复vnpy_rest/vnpy_websocket对Python 3.10后asyncio的支持\n5. 修复vnpy_sopt由于流控导致的委托失败时，返回【提交中】状态委托的问题\n\n\n# 3.4.0版本\n\n## 新增\n\n1. 新增杰宜斯资管系统交易接口vnpy_jees\n\n## 调整\n\n1. 开启vnpy.rpc的pyzmq连接keepalive机制，避免在复杂网络环境下闲置连接的断开\n2. 移除vnpy_rpcservice中服务端的EVENT_TIMER定时事件推送\n3. 调整vnpy_postgresql采用批量方式写入数据，提高效率\n4. 添加VeighNa Trader中的子线程异常捕捉（需要Python>=3.8）\n5. 调整vnpy_ib接口查询历史K线数据时，对外汇和贵金属均采用中间价（而非成交价）\n6. 增加vnpy_ctastrategy对于回测过程中资金爆仓（小于等于0）情况的检查\n7. 优化vnpy_webtrader模块的加密鉴权，支持web进程关闭重启\n\n## 修复\n\n1. 修复vnpy.rpc模块对于23.0以上版本pyzmq的NOBLOCK兼容性问题\n2. 修复vnpy_taos由于TDengine版本升级，出现d的一系列兼容问题\n3. 修复vnpy_datamanager刷新数据汇总信息显示时，老数据点移除失败的问题\n\n\n\n# 3.3.0版本\n\n## 新增\n1. 新增数据库组件vnpy.trader.database中的TickOverview对象\n2. 新增掘金仿真环境交易接口vnpy_gm\n3. BaseData基础数据类型增加extra字段（字典类型），用于传送任意相关数据\n\n## 调整\n1. 使用Python内置的zoneinfo库替换三方的pytz库\n2. 调整相关交易接口、数据服务接口、数据库适配器、应用模块，使用新的ZoneInfo对象来标识时区信息\n3. 数据库适配器接口vnpy.trader.database写入数据时，新增流式写入参数stream，提高行情录制性能\n\n\n# 3.2.0版本\n\n## 新增\n1. 添加广州期货交易所枚举值字段GFEX\n2. 新增CTP期权（ETF）穿透式测试接口vnpy_sopttest\n3. 新增Currency.CAD（加元）枚举值\n4. 新增Exchange.TSE（多伦多交易所）和Exchange.AMEX（美洲交易所）枚举值\n5. 新增vnpy_taos，涛思数据TDengine时序数据库适配器\n5. 新增vnpy_timescaledb，TimescaleDB时序数据库适配器\n\n## 调整\n1. 更新vnpy_ctp/vnpy_ctptest支持广州期货交易所\n2. 更新vnpy_tora的现货API接口到最新版本：API_Python3.7_交易_v4.0.3_20220222\n3. 更新vnpy_tora的期权API接口到最新版本：API_Python3.7_v1.3.2_20211201\n4. 更新vnpy_esunny/vnpy_tap添加关闭接口时对于API退出函数的调用\n5. 移除vnpy_ctastrategy/vnpy_ctabacktester/vnpy_optionmaster的反向合约支持\n6. 增加vnpy_ib对于沪股通、深股通、多伦多交易所、美洲交易所的支持\n7. 增加vnpy_ib对于指数行情数据的支持\n8. 添加vnpy_ctastrategy策略交易管理界面的策略实例查找功能\n\n## 修复\n\n1. 修复vnpy_mongodb中K线数据量统计的问题（使用新的count_documents函数）\n2. 修复由于PySide6对象销毁先于__del__调用，导致的BaseMonitor衍生组件无法自动保存界面状态的问题\n\n\n\n# 3.1.0版本\n\n## 新增\n1. 新增恒生云UF2.0证券仿真环境交易接口vnpy_uf\n2. 新增火象投教仿真环境交易接口vnpy_hx\n\n## 调整\n1. 升级tzlocal库的版本到4.2，消除get_localzone()函数的warning\n2. 完善代码中函数和变量类型提示\n3. 使用QtCore.Signal代替老的QtCore.pyqtSignal\n4. 优化vnpy_rohon接口的委托成交相关细节功能\n5. 更新vnpy_xtp到2.2.32.2.0版本XTP API，支持上交所新债系统\n6. 优化vnpy_mongodb的数据写入速度，基于pymongo 4.0版本的批量写入功能\n7. 增加vnpy_ctp对于委托函数返回值为非0（请求发送失败）状态的处理\n8. 对vnpy_ctastrategy和vnpy_ctabacktester的策略模板下拉框中内容，改为基于首字母排序\n\n## 修复\n1. 修复vnpy_optionmaster模块希腊值监控组件的数据刷新问题\n2. 修复vnpy_mongodb由于时间戳的时区信息确实，导致的数据加载范围问题\n3. 修复vnpy_tts的sdist源代码打包缺失lib文件的问题\n4. 修复vnpy_rqdata由于查询返回数据为NaN导致的解析问题\n\n\n# 3.0.0版本\n\n## 调整\n1. 移除api、gateway、app子模块的目录\n2. 移除requirements.txt对于插件的默认依赖\n3. 简化重构rpc子模块，定位于可靠环境下跨进程通讯（本机、局域网）\n4. 移除rpc子模块对于鉴权的支持\n5. 调整rpc子模块中的心跳机制的实现方式\n6. 移除基于QScintilla开发的代码编辑器，改用VSCode打开代码\n7. 优化MainWindow主窗口中，对于QAction按钮图标的加载逻辑\n8. MainEngine添加交易接口时，支持自定义接口名称\n\n## 修复\n1. 使用非原生窗口菜单栏，修复Linux/Mac下【配置】按钮不显示的问题\n\n\n# 2.9.0版本\n\n## 新增\n1. 新增顶点HTS柜台交易接口vnpy_hts\n\n## 调整\n1. 移除恒生期权hsoption接口\n2. vnpy_webtrader增加对于自定义监听地址和端口的支持\n3. vnpy_mongodb锁定pymongo的依赖版本为3.12.3\n4. vnpy_udata安装脚本中添加hs_udata库的依赖\n5. vnpy_uft升级使用3.7.2.4版本的恒生API接口\n\n## 剥离\n2. 将国泰君安证券统一接入网关交易接口剥离到vnpy_hft项目中\n3. 将顶点飞创交易接口剥离到vnpy_sec项目中\n4. 将RPC服务和接口剥离到vnpy_rpcservice项目中\n\n## 修复\n1. 修复vnpy_tora撤单时，由于撤单编号和委托编号冲突导致的撤单失败问题\n2. 修复vnpy_tora股票委托状态中【未成交】状态的错误映射问题\n3. 修复vnpy_ctabacktester中，回测开始日期编辑框的数据缓存问题\n4. 修复vnpy_udata中，分段下载数据时，可能进入死循环的问题\n5. 修复vnpy_udata中，修复下载的数据量为空时，出现的异常报错问题\n6. 修复vnpy_dolphindb中，合约名带有符号时数据无法读取问题\n\n\n# 2.8.0版本\n\n## 新增\n1. 新增东证OST柜台交易接口vnpy_ost\n2. 增加投资组合策略模块的策略参数优化功能\n\n## 修复\n1. 修复部分C++接口模块剥离后，遗留的安装脚本编译代码导致的报错问题\n2. 修复vnpy_xtp订阅深交所行情后，可能出现的闪退问题\n3. 修复vnpy_tushare部分数据字段为None时，导致的数据错误\n4. 修复vnpy_mini，在夜盘换日时上期所行情时间戳的日期字段误差问题\n5. 修复vnpy_uft的ETF期权合约信息解析缺失的问题\n6. 修复vnpy_wind下载数据存在缺失时的N/A解析问题\n7. 修复vnpy_webtrader的html静态文件缺失的问题\n8. 修复vnpy_dolphindb存储Tick数据时的数据类型问题\n9. 修复vnpy_dolphindb读取数据为空时的BUG\n10. 修复vnpy_esunny查询黄金TD合约的合约乘数为0的问题\n11. 修复vnpy_ctastrategy策略初始化读取布尔值false失败的问题\n12. 修复vnpy_rohon的期权合约字段赋值错误的问题\n13. 修复vnpy_leveldb的Linux安装依赖库问题\n\n## 调整\n1. 移除老版本基于requests库的RestClient客户端\n2. 移除老版本基于websocket-client库的WebsocketClient客户端\n3. vnpy_tts增加对上交所和深交所股票模拟交易的支持\n4. 移除vnpy_ctp的期权询价指令支持\n5. 增加vnpy_ctp的授权码验证失败后，避免重复操作的功能\n6. 优化vnpy_uft的断线重连行情订阅逻辑\n7. 增加vnpy_arctic对于用户名和密码的鉴权功能\n8. 增加vnpy_mini对于股指期权的支持\n\n## 剥离\n1. 将华鑫奇点交易接口剥离到vnpy_tora项目中，并升级到4.0版本\n2. 将飞马交易接口剥离到vnpy_femas项目中\n3. 将金仕达黄金接口剥离到vnpy_ksgold项目中\n4. 将投资组合策略模块剥离到vnpy_portfoliostrategy项目中\n5. 将Excel RTD模块剥离到vnpy_excelrtd项目中\n6. 将本地仿真模拟交易模块剥离到vnpy_paperaccount项目中\n\n# 2.7.0版本\n\n## 新增\n1. 新增天软数据服务项目vnpy_tinysoft\n2. 新增同花顺iFinD数据服务项目vnpy_ifind\n3. 新增dYdx交易接口vnpy_dydx\n4. 新增万得Wind数据服务项目vnpy_wind\n5. 新增PortfolioStrategy专用的PortfolioBarGenerator\n\n## 调整\n1. 移除KasiaGateway\n4. 移除MarketRadarApp\n5. 算法交易模块中移除套利和网格两个非执行类算法\n6. vnpy_tushare数据服务，增加持仓量和成交额字段\n8. vnpy_datamanager数据管理器，查询的K线信息按合约代码排序显示\n13. vnpy_dolphindb优化数据的加载解析速度\n14. vnpy_influxdb采用pandas解析CSV数据，提高整体速度\n\n## 修复\n1. 修复vnpy_ctp的CtpGateway，在夜盘换日时上期所行情时间戳的日期字段误差问题\n2. 修复vnpy_arctic的数据重复写入时出现的错误覆盖问题\n\n## 剥离\n1. 将InteractiveBrokers交易接口剥离到vnpy_ib项目中\n2. 将飞鼠交易接口剥离到vnpy_sgit项目中\n3. 将易盛外盘交易接口剥离到vnpy_tap项目中\n4. 将直达期货交易接口剥离到vnpy_da项目中\n5. 将算法交易模块剥离到vnpy_algotrading项目中\n6. 将脚本交易模块剥离到vnpy_scripttrader项目中\n7. 将交易组合管理模块剥离到vnpy_portfoliomanager项目中\n\n\n# 2.6.0版本\n\n## 新增\n1. 增加双边报价业务的发送和撤销函数功能\n2. 增加双边报价监控UI组件\n3. 增加用于对接数据库的抽象接口vnpy.trader.database\n4. 新增基于Arctic的MongoDB数据库接口项目vnpy_arctic\n5. 新增LevelDB数据库接口项目vnpy_leveldb\n6. 新增DolphinDB数据库接口项目vnpy_dolphindb\n7. 增加用于对接数据服务的抽象接口vnpy.trader.datafeed\n8. 新增TuShare数据服务项目vnpy_tushare\n8. 新增恒生UData数据服务项目vnpy_udata\n8. 新增天勤TQSDK数据服务项目vnpy_tqsdk\n8. 新增CoinAPI数据服务项目vnpy_coinapi\n\n## 调整\n1. 移除批量委托和批量撤单相关的函数功能\n2. 移除老虎证券交易接口TigerGateway\n3. 移除鑫管家交易接口XgjGateway\n4. 移除AlgoTrading算法交易模块对于金纳算法服务的支持\n5. RestClient增加对操作系统代理配置的支持\n6. RestClient和WebsocketClient的默认异常处理逻辑由抛出异常修改为打印输出\n7. 价差交易模块移除对反向合约、线性价差、开平字段的支持\n8. 价差交易模块优化对灵活价差的支持，优化价差行情推送过滤判断\n9. 价差交易算法停止时，等待全部委托结束、各条腿平衡后，再结束算法\n\n## 修复\n1. 修复在Linux/Mac系统上，运行多进程优化时的进程启动错误\n2. 修复WebsocketClient由于心跳机制不完善，导致的频繁断线问题\n\n## 剥离\n1. 将米筐数据接口剥离到vnpy_rqdata项目中，并升级到2.9.38版本\n2. 将行情录制模块剥离到vnpy_datarecorder项目中\n3. 将K线图表模块剥离到vnpy_chartwizard项目中\n4. 将SQLite数据库接口剥离到vnpy_sqlite项目中\n5. 将MySQL数据库接口剥离到vnpy_mysql项目中\n6. 将PostgreSQL数据库接口剥离到vnpy_postgresql项目中\n7. 将MongoDB数据库接口剥离到vnpy_mongodb项目中\n8. 将InfluxDB数据库接口剥离到vnpy_influxdb项目中\n13. 将期权波动率交易模块剥离到vnpy_optionmaster项目中\n\n\n# 2.5.0版本\n## 新增\n1. 新增TTS交易系统（兼容CTP的仿真交易环境）的接口vnpy_tts（6.5.1）\n2. 新增易盛启明星/北斗星兼容交易API的接口vnpy_esunny（1.0.2.2）\n3. 新增BarData和TickData的成交额turnover字段\n\n## 调整\n1. 将SpreadTrading模块策略初始化时的K线价差数据加载，改为优先通过RQData查询数据\n2. 在MainWindow的AboutDialog中，基于importlib_metadata模块来获取版本信息\n3. 隐藏所有对话框右上角的【？】按钮\n4. 将易盛外盘TapGateway的合约信息，从行情接口获取改为交易接口获取（避免外盘合约size为0的问题）\n5. 改进VeighNa Trader的异常捕捉对话框弹出方式，避免多次重复报错情况下的程序卡死崩溃\n\n## 修复\n1. 修复Linux下安装时，对于已经剥离的XTP API的自动编译操作\n2. 修复PortfolioManager的UI组件，对于成交事件监听类型错误的BUG\n3. 修复vnpy_rest下的Response对象缺乏text字段导致的BUG\n4. 修复RestClient，代理端口信息传空时，导致底层连接出错的BUG\n6. 修复ArrayManager的Aroon指标计算输出结果顺序错误的BUG\n7. 修复数据库管理器读写TickData时，由于缺少对localtime字段处理导致的BUG\n\n## 剥离\n1. 将融航接口剥离到vnpy_rohon项目中，并升级到6.5.1版本\n2. 将CTP MINI接口剥离到vnpy_mini项目中，并升级到1.5.6版本\n3. 将CTP期权接口剥离到vnpy_sopt项目中\n4. 将恒生UFT柜台极速API接口剥离到vnpy_uft项目中\n\n\n# 2.4.0版本\n\n## 新增\n1. 新增TickData的本地时间戳字段local_time（不带时区信息）\n2. 新增基于asyncio和aiohttp实现的协程异步REST API客户端vnpy_rest项目\n3. 新增基于asyncio和aiohttp实现的协程异步Websocket API客户端vnpy_websocket项目\n4. 新增基于多进程模式的遗传算法优化功能\n5. 新增XTP的API封装中，行情登录函数对于本地网卡地址的参数支持\n\n## 调整\n2. 剥离CTA策略模块下的穷举和遗传优化算法到vnpy.trader.optimize模块下\n3. 遗传算法优化完成后，输出所有回测过的参数对应结果（而不只是最优结果）\n4. CTA策略引擎加载策略文件时，增加模块重载的操作，使得任何策略文件修改可以立即生效\n5. CTA策略引擎扫描特定目录下的策略文件时，使用glob函数（替换原有的os.walk），避免对子目录中文件的错误加载\n6. 将CTA策略模块剥离到vnpy_ctastrategy项目中\n7. 将CTA回测模块剥离到vnpy_ctabacktester项目中\n8. 将XTP接口剥离到vnpy_xtp项目中，并升级到2.2.27.4版本\n9. 将事前风控模块剥离到vnpy_riskmanager项目中\n10. 将数据管理模块剥离到vnpy_datamanager项目中\n\n## 修复\n2. 修复MySQL和PostgreSQL数据库管理器删除K线数据时出错的问题\n3. 修复基于aiohttp的RestClient和WebsocketClient，事件循环停止后重新启动失败的问题\n7. 修复CtaBacktester基于Tick级别数据进行参数优化时，启动优化失败的问题\n8. 修复ToraStockGateway和ToraOptionGateway，调用下单函数时没有返回委托号的问题\n9. 修复InfluxDB数据管理器，导入数据时时间字段解析错误的问题\n\n# 2.3.0版本\n\n## 修复\n1. 修复IbGateway断线重连后，没有自动订阅之前已订阅的合约行情问题\n2. 修复CTA模块的净仓交易模式中，部分平仓部分开仓时，开仓部分下单错误的问题\n6. 修复CtpGateway对于FAK和FOK委托指令的处理错误问题\n10. 修复IbGateway，查询历史数据由于传参错误导致的查询失败问题\n11. 修复IbGateway，当要查询的合约历史数据不存在时卡死的问题\n12. 修复IbGateway，查询返回的合约乘数（字符串）未作转换导致的上层应用问题\n14. 修复BarGenerator，在合成小时K线时部分情况下遗漏分钟K线收盘价更新的问题\n15. 修复UftGateway，在连接ETF期权服务器时无法订阅行情的问题\n16. 修复UftGateway，在连接ETF期权服务器时，对于包含毫秒的委托时间戳处理错误的问题\n\n## 调整\n1. 修改CTA模块的净仓交易模式，支持上期所和能交所的今昨仓拆分下单\n2. 调整组合策略模块的回测引擎K线回放逻辑，当某个时间点K线数据缺失时，推送给策略的K线字典中不对其进行向前补齐\n3. 将CTP接口和API封装，剥离到vnpy_ctp项目中\n4. 将CTP穿透式测试接口和API封装，剥离到vnpy_ctptest项目中\n\n## 新增\n1. 新增DataManager在导入CSV文件时，对于时间戳时区的选择功能\n2. 新增CtaStrategy模块的策略移仓助手功能，实现一键式期货换月移仓支持\n\n\n# 2.2.0版本\n\n## 修复\n1. 修复DataManager查询数据库中K线数据范围时，开始和结束日期相反的问题\n6. 修复PostgreSQL数据库对接层中，save_tick_data函数由于访问interval导致保存出错的问题\n7. 修复DataRecorder模块中add_bar_recording下保存录制用合约配置错误的问题\n8. 修复PostgreSQL数据库对接层中，由于事务执行失败导致的后续报错问题，创建数据库对象时设置自动回滚模式（autorollback=True）\n9. 修复DataManager自动更新数据时，查询数据范围由于调用老版本函数导致的错误\n10. 修复RQData下载获取的历史数据浮点数精度问题\n11. 修复BarGenerator在合成N小时K线时，收盘价、成交量、持仓量字段缺失的问题\n12. 修复K线图表底层组件ChartWidget当绘制数据较少时，坐标轴时间点显示重复的问题\n13. 修复SpreadTrading模块生成的价差盘口数据的时区信息缺失问题\n14. 修复IbGateway的现货贵金属行情数据缺失最新价和时间戳的问题\n15. 修复BarGenerator在合成小时级别K线时，成交量字段部分缺失的问题\n16. 修复vnpy.rpc模块启用非对称加密后无法正常退出的问题\n\n## 调整\n1. 修改vnpy.chart下ChartItem为按需绘制，大幅缩短图表第一次显示出来的耗时\n2. 修改IbGateway的历史数据查询功能，包括所有可用时间（即欧美晚上的电子交易时段）\n3. 修改DataRecorder的数据入库为定时批量写入，提高录制大量合约数据时的写入性能\n\n## 新增\n1. 新增IbGateway连接断开后的自动重连功能（每10秒检查）\n2. 新增双边报价业务相关的底层数据结构和功能函数\n3. 新增开平转换器OffsetConverter的净仓交易模式\n4. 新增CtaStrategy模块策略模板的委托时的净仓交易可选参数\n5. 新增CtaStrategy模块回测引擎中的全年交易日可选参数\n6. 新增ChartWizard模块对于价差行情图表的显示支持\n7. 新增MarketRadar模块的雷达信号条件提醒功能\n\n# 2.1.9.1版本\n\n## 修复\n1. 修复RestClient中，因为pyopenssl.extract_from_urllib3引起的兼容性问题\n\n## 调整\n1. 调整OptionMaster模块中，期权链数据结构搜索平值行权价的算法，不再依赖标的物合约\n\n## 新增\n1. 新增OptionMaster模块使用合成期货作为定价标的合约的功能\n\n\n# 2.1.9版本\n\n## 修复\n1. 修复BarGenerator的小时线合成时，出现同一个小时的K线重复推送两次的问题\n2. 修复遗传算法优化时，因为lru_cache缓存导致的新一轮优化结果不变的问题\n3. 修复RestClient发起请求时，由于requests库底层使用OpenSSL导致的WinError 10054 WSAECONNRESET的问题\n5. 修复程序中频繁捕捉到异常时，异常捕捉对话框反复执行导致卡死的问题\n7. 修复活动委托监控组件ActiveOrderMonitor，保存CSV时会将所有委托数据一起保存的问题\n8. 修复XtpGateway重复发起登录操作时，出现的系统崩溃问题\n9. 修复XtpGateway的股票市价委托类型映射错误问题\n\n## 调整\n1. 对XTP接口的行情价格数据基于合约最小价格跳动进行取整，资金保留2位小数\n2. BaseMonitor保存CSV文件时，表头改为图形界面显示的中文（之前是数据的字段名英文）\n3. 初始化TWAP算法时，对每轮委托数量取整到合约最小交易数量\n4. 将原vnpy.trader.database中的数据库客户端拆分到独立的vnpy.database模块下\n5. 对SQLite/MySQL/PostgreSQL/MongoDB/InfluxDB客户端进行代码重构优化，增加K线数据整体情况BarOverview查询功能\n\n## 新增\n1. 新增BaseMonitor数据监控UI组件（以及其子类），自动保存列宽的功能\n2. 增加华鑫奇点ToraGateway对于FENS服务器连接和资金账户登录的支持，之前只支持前置机连接和用户代码登录 \n4. 增加InfluxDB数据库客户端vnpy.database.influx对于Tick数据储存和加载的支持"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-present, Xiaoyou Chen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.04,
          "content": "recursive-include vnpy *.ico *.po *.mo\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.08,
          "content": "# VeighNa - By Traders, For Traders.\n\n<p align=\"center\">\n  <img src =\"https://vnpy.oss-cn-shanghai.aliyuncs.com/veighna-logo.png\"/>\n</p>\n\n💬 Want to read this in **english** ? Go [**here**](README_ENG.md)\n\n<p align=\"center\">\n    <img src =\"https://img.shields.io/badge/version-3.9.4-blueviolet.svg\"/>\n    <img src =\"https://img.shields.io/badge/platform-windows|linux|macos-yellow.svg\"/>\n    <img src =\"https://img.shields.io/badge/python-3.10|3.11.|3.12-blue.svg\" />\n    <img src =\"https://img.shields.io/github/actions/workflow/status/vnpy/vnpy/pythonapp.yml?branch=master\"/>\n    <img src =\"https://img.shields.io/github/license/vnpy/vnpy.svg?color=orange\"/>\n</p>\n\nVeighNa是一套基于Python的开源量化交易系统开发框架，在开源社区持续不断的贡献下一步步成长为多功能量化交易平台，自发布以来已经积累了众多来自金融机构或相关领域的用户，包括私募基金、证券公司、期货公司等。\n\n:rocket: :rocket: :rocket: **面向专业交易员的【VeighNa Elite量化终端】已经正式发布，针对专业交易员群体在海量策略并发、智能移仓换月、算法拆单执行、多账户交易支持等方面的需求提供了完善支持。了解更详细的信息请扫描下方二维码关注后，点击菜单栏的【社区交流 -> Elite会员服务】即可**：\n\n<p align=\"center\">\n  <img src =\"https://vnpy.oss-cn-shanghai.aliyuncs.com/vnpy_qr.jpg\"/>\n</p>\n\n在使用VeighNa进行二次开发（策略、模块等）的过程中有任何疑问，请查看[**VeighNa项目文档**](https://www.vnpy.com/docs/cn/index.html)，如果无法解决请前往[**官方社区论坛**](https://www.vnpy.com/forum/)的【提问求助】板块寻求帮助，也欢迎在【经验分享】板块分享你的使用心得！\n\n**想要获取更多关于VeighNa的资讯信息？** 请扫描下方二维码添加小助手加入【VeighNa社区交流微信群】：\n\n<p align=\"center\">\n  <img src =\"https://vnpy.oss-cn-shanghai.aliyuncs.com/github_wx.png\"/, width=250>\n</p>\n\n\n## 功能特点\n\n1. 多功能量化交易平台（trader），整合了多种交易接口，并针对具体策略算法和功能开发提供了简洁易用的API，用于快速构建交易员所需的量化交易应用。\n\n2. 覆盖国内外所拥有的下述交易品种的交易接口（gateway）：\n\n    * 国内市场\n\n        * CTP（[ctp](https://www.github.com/vnpy/vnpy_ctp)）：国内期货、期权\n\n        * CTP Mini（[mini](https://www.github.com/vnpy/vnpy_mini)）：国内期货、期权\n\n        * CTP证券（[sopt](https://www.github.com/vnpy/vnpy_sopt)）：ETF期权\n\n        * 飞马（[femas](https://www.github.com/vnpy/vnpy_femas)）：国内期货\n\n        * 恒生UFT（[uft](https://www.github.com/vnpy/vnpy_uft)）：国内期货、ETF期权\n\n        * 易盛（[esunny](https://www.github.com/vnpy/vnpy_esunny)）：国内期货、黄金TD\n\n        * 顶点飞创（[sec](https://www.github.com/vnpy/vnpy_sec)）：ETF期权\n\n        * 顶点HTS（[hts](https://www.github.com/vnpy/vnpy_hts)）：ETF期权\n\n        * 中泰XTP（[xtp](https://www.github.com/vnpy/vnpy_xtp)）：国内证券（A股）、ETF期权\n\n        * 华鑫奇点（[tora](https://www.github.com/vnpy/vnpy_tora)）：国内证券（A股）、ETF期权\n\n        * 国泰君安（[hft](https://www.github.com/vnpy/vnpy_hft)）：国内证券（A股、两融）\n\n        * 东证OST（[ost](https://www.github.com/vnpy/vnpy_ost)）：国内证券（A股）\n\n        * 东方财富EMT（[emt](https://www.github.com/vnpy/vnpy_emt)）：国内证券（A股）\n\n        * 飞鼠（[sgit](https://www.github.com/vnpy/vnpy_sgit)）：黄金TD、国内期货\n\n        * 金仕达黄金（[ksgold](https://www.github.com/vnpy/vnpy_ksgold)）：黄金TD\n\n        * 利星资管（[lstar](https://www.github.com/vnpy/vnpy_lstar)）：期货资管\n\n        * 融航（[rohon](https://www.github.com/vnpy/vnpy_rohon)）：期货资管\n\n        * 杰宜斯（[jees](https://www.github.com/vnpy/vnpy_jees)）：期货资管\n\n        * 中汇亿达（[comstar](https://www.github.com/vnpy/vnpy_comstar)）：银行间市场\n\n        * 掘金（[gm](https://www.github.com/vnpy/vnpy_gm)）：国内证券（仿真）\n\n        * 恒生云UF（[uf](https://www.github.com/vnpy/vnpy_uf)）：国内证券（仿真）\n\n        * TTS（[tts](https://www.github.com/vnpy/vnpy_tts)）：国内期货（仿真）\n\n    * 海外市场\n\n        * Interactive Brokers（[ib](https://www.github.com/vnpy/vnpy_ib)）：海外证券、期货、期权、贵金属等\n\n        * 易盛9.0外盘（[tap](https://www.github.com/vnpy/vnpy_tap)）：海外期货\n\n        * 直达期货（[da](https://www.github.com/vnpy/vnpy_da)）：海外期货\n\n    * 特殊应用\n\n        * RQData行情（[rqdata](https://www.github.com/vnpy/vnpy_rqdata)）：跨市场（股票、指数、ETF、期货）实时行情\n\n        * 迅投研行情（[xt](https://www.github.com/vnpy/vnpy_xt)）：跨市场（股票、指数、可转债、ETF、期货、期权）实时行情\n\n        * RPC服务（[rpc](https://www.github.com/vnpy/vnpy_rpcservice)）：跨进程通讯接口，用于分布式架构\n\n3. 覆盖下述各类量化策略的交易应用（app）：\n\n    * [cta_strategy](https://www.github.com/vnpy/vnpy_ctastrategy)：CTA策略引擎模块，在保持易用性的同时，允许用户针对CTA类策略运行过程中委托的报撤行为进行细粒度控制（降低交易滑点、实现高频策略）\n\n    * [cta_backtester](https://www.github.com/vnpy/vnpy_ctabacktester)：CTA策略回测模块，无需使用Jupyter Notebook，直接使用图形界面进行策略回测分析、参数优化等相关工作\n\n    * [spread_trading](https://www.github.com/vnpy/vnpy_spreadtrading)：价差交易模块，支持自定义价差，实时计算价差行情和持仓，支持价差算法交易以及自动价差策略两种模式\n\n    * [option_master](https://www.github.com/vnpy/vnpy_optionmaster)：期权交易模块，针对国内期权市场设计，支持多种期权定价模型、隐含波动率曲面计算、希腊值风险跟踪等功能\n\n    * [portfolio_strategy](https://www.github.com/vnpy/vnpy_portfoliostrategy)：组合策略模块，面向同时交易多合约的量化策略（Alpha、期权套利等），提供历史数据回测和实盘自动交易功能\n\n    * [algo_trading](https://www.github.com/vnpy/vnpy_algotrading)：算法交易模块，提供多种常用的智能交易算法：TWAP、Sniper、Iceberg、BestLimit等\n\n    * [script_trader](https://www.github.com/vnpy/vnpy_scripttrader)：脚本策略模块，面向多标的类量化策略和计算任务设计，同时也可以在命令行中实现REPL指令形式的交易，不支持回测功能\n\n    * [paper_account](https://www.github.com/vnpy/vnpy_paperaccount)：本地仿真模块，纯本地化实现的仿真模拟交易功能，基于交易接口获取的实时行情进行委托撮合，提供委托成交推送以及持仓记录\n\n    * [chart_wizard](https://www.github.com/vnpy/vnpy_chartwizard)：K线图表模块，基于RQData数据服务（期货）或者交易接口获取历史数据，并结合Tick推送显示实时行情变化\n\n    * [portfolio_manager](https://www.github.com/vnpy/vnpy_portfoliomanager)：交易组合管理模块，以独立的策略交易组合（子账户）为基础，提供委托成交记录管理、交易仓位自动跟踪以及每日盈亏实时统计功能\n\n    * [rpc_service](https://www.github.com/vnpy/vnpy_rpcservice)：RPC服务模块，允许将某一进程启动为服务端，作为统一的行情和交易路由通道，允许多客户端同时连接，实现多进程分布式系统\n\n    * [data_manager](https://www.github.com/vnpy/vnpy_datamanager)：历史数据管理模块，通过树形目录查看数据库中已有的数据概况，选择任意时间段数据查看字段细节，支持CSV文件的数据导入和导出\n\n    * [data_recorder](https://www.github.com/vnpy/vnpy_datarecorder)：行情记录模块，基于图形界面进行配置，根据需求实时录制Tick或者K线行情到数据库中，用于策略回测或者实盘初始化\n\n    * [excel_rtd](https://www.github.com/vnpy/vnpy_excelrtd)：Excel RTD（Real Time Data）实时数据服务，基于pyxll模块实现在Excel中获取各类数据（行情、合约、持仓等）的实时推送更新\n\n    * [risk_manager](https://www.github.com/vnpy/vnpy_riskmanager)：风险管理模块，提供包括交易流控、下单数量、活动委托、撤单总数等规则的统计和限制，有效实现前端风控功能\n\n    * [web_trader](https://www.github.com/vnpy/vnpy_webtrader)：Web服务模块，针对B-S架构需求设计，实现了提供主动函数调用（REST）和被动数据推送（Websocket）的Web服务器\n\n4. Python交易API接口封装（api），提供上述交易接口的底层对接实现。\n\n    * REST Client（[rest](https://www.github.com/vnpy/vnpy_rest)）：基于协程异步IO的高性能REST API客户端，采用事件消息循环的编程模型，支持高并发实时交易请求发送\n\n    * Websocket Client（[websocket](https://www.github.com/vnpy/vnpy_websocket)）：基于协程异步IO的高性能Websocket API客户端，支持和REST Client共用事件循环并发运行\n\n5. 简洁易用的事件驱动引擎（event），作为事件驱动型交易程序的核心。\n\n6. 对接各类数据库的适配器接口（database）：\n\n    * SQL类\n\n        * SQLite（[sqlite](https://www.github.com/vnpy/vnpy_sqlite)）：轻量级单文件数据库，无需安装和配置数据服务程序，VeighNa的默认选项，适合入门新手用户\n\n        * MySQL（[mysql](https://www.github.com/vnpy/vnpy_mysql)）：主流的开源关系型数据库，文档资料极为丰富，且可替换其他NewSQL兼容实现（如TiDB）\n\n        * PostgreSQL（[postgresql](https://www.github.com/vnpy/vnpy_postgresql)）：特性更为丰富的开源关系型数据库，支持通过扩展插件来新增功能，只推荐熟手使用\n\n    * NoSQL类\n\n        * DolphinDB（[dolphindb](https://www.github.com/vnpy/vnpy_dolphindb)）：一款高性能分布式时序数据库，适用于对速度要求极高的低延时或实时性任务\n\n        * Arctic（[arctic](https://www.github.com/vnpy/vnpy_arctic)）：高性能金融时序数据库，采用了分块化储存、LZ4压缩等性能优化方案，以实现时序数据的高效读写\n\n        * TDengine（[taos](https://www.github.com/vnpy/vnpy_taos)）：分布式、高性能、支持SQL的时序数据库，带有内建的缓存、流式计算、数据订阅等系统功能，能大幅减少研发和运维的复杂度\n\n        * TimescaleDB（[timescaledb](https://www.github.com/vnpy/vnpy_timescaledb)）：基于PostgreSQL开发的一款时序数据库，以插件化扩展的形式安装，支持自动按空间和时间对数据进行分区\n\n        * MongoDB（[mongodb](https://www.github.com/vnpy/vnpy_mongodb)）：基于分布式文件储存（bson格式）的文档式数据库，内置的热数据内存缓存提供更快读写速度\n\n        * InfluxDB（[influxdb](https://www.github.com/vnpy/vnpy_influxdb)）：针对TimeSeries Data专门设计的时序数据库，列式数据储存提供极高的读写效率和外围分析应用\n\n        * LevelDB（[leveldb](https://www.github.com/vnpy/vnpy_leveldb)）：由Google推出的高性能Key/Value数据库，基于LSM算法实现进程内存储引擎，支持数十亿级别的海量数据\n\n7. 对接下述各类数据服务的适配器接口（datafeed）：\n\n    * 迅投研（[xt](https://www.github.com/vnpy/vnpy_xt)）：股票、期货、期权、基金、债券\n\n    * 米筐RQData（[rqdata](https://www.github.com/vnpy/vnpy_rqdata)）：股票、期货、期权、基金、债券、黄金TD\n\n    * 咏春大师（[voltrader](https://www.github.com/vnpy/vnpy_voltrader)）：期货、期权\n\n    * 恒生UData（[udata](https://www.github.com/vnpy/vnpy_udata)）：股票、期货、期权\n\n    * TuShare（[tushare](https://www.github.com/vnpy/vnpy_tushare)）：股票、期货、期权、基金\n\n    * 万得Wind（[wind](https://www.github.com/vnpy/vnpy_wind)）：股票、期货、基金、债券\n\n    * 天软Tinysoft（[tinysoft](https://www.github.com/vnpy/vnpy_tinysoft)）：股票、期货、基金、债券\n\n    * 同花顺iFinD（[ifind](https://www.github.com/vnpy/vnpy_ifind)）：股票、期货、基金、债券\n\n    * 天勤TQSDK（[tqsdk](https://www.github.com/vnpy/vnpy_tqsdk)）：期货\n\n8. 跨进程通讯标准组件（rpc），用于实现分布式部署的复杂交易系统。\n\n9. Python高性能K线图表（chart），支持大数据量图表显示以及实时数据更新功能。\n\n10. [社区论坛](http://www.vnpy.com/forum)和[知乎专栏](http://zhuanlan.zhihu.com/vn-py)，内容包括VeighNa项目的开发教程和Python在量化交易领域的应用研究等内容。\n\n11. 官方交流群262656087（QQ），管理严格（定期清除长期潜水的成员），入群费将捐赠给VeighNa社区基金。\n\n注：以上关于功能特点的说明为根据说明文档发布时情况罗列，后续可能存在更新或调整。若功能描述同实际存在出入，欢迎通过Issue联系进行调整。\n\n## 环境准备\n\n* 推荐使用VeighNa团队为量化交易专门打造的Python发行版[VeighNa Studio-3.9.4](https://download.vnpy.com/veighna_studio-3.9.4.exe)，集成内置了VeighNa框架以及VeighNa Station量化管理平台，无需手动安装\n* 支持的系统版本：Windows 11以上 / Windows Server 2019以上 / Ubuntu 22.04 LTS以上\n* 支持的Python版本：Python 3.10以上（64位），**推荐使用Python 3.10**\n\n## 安装步骤\n\n在[这里](https://github.com/vnpy/vnpy/releases)下载Release发布版本，解压后运行以下命令安装：\n\n**Windows**\n\n```\ninstall.bat\n```\n\n**Ubuntu**\n\n```\nbash install.sh\n```\n\n**Macos**\n\n```\nbash install_osx.sh\n```\n\n**注意：setup.cfg中列举了VeighNa框架安装所需的依赖库，requirements.txt中给出了这些依赖库的推荐安装版本。**\n\n## 使用指南\n\n1. 在[SimNow](http://www.simnow.com.cn/)注册CTP仿真账号，并在[该页面](http://www.simnow.com.cn/product.action)获取经纪商代码以及交易行情服务器地址。\n\n2. 在[VeighNa社区论坛](https://www.vnpy.com/forum/)注册获得VeighNa Station账号密码（论坛账号密码即是）\n\n3. 启动VeighNa Station（安装VeighNa Studio后会在桌面自动创建快捷方式），输入上一步的账号密码登录\n\n4. 点击底部的**VeighNa Trader**按钮，开始你的交易！！！\n\n注意：\n\n* 在VeighNa Trader的运行过程中请勿关闭VeighNa Station（会自动退出）\n\n## 脚本运行\n\n除了基于VeighNa Station的图形化启动方式外，也可以在任意目录下创建run.py，写入以下示例代码：\n\n```Python\nfrom vnpy.event import EventEngine\nfrom vnpy.trader.engine import MainEngine\nfrom vnpy.trader.ui import MainWindow, create_qapp\n\nfrom vnpy_ctp import CtpGateway\nfrom vnpy_ctastrategy import CtaStrategyApp\nfrom vnpy_ctabacktester import CtaBacktesterApp\n\n\ndef main():\n    \"\"\"Start VeighNa Trader\"\"\"\n    qapp = create_qapp()\n\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    \n    main_engine.add_gateway(CtpGateway)\n    main_engine.add_app(CtaStrategyApp)\n    main_engine.add_app(CtaBacktesterApp)\n\n    main_window = MainWindow(main_engine, event_engine)\n    main_window.showMaximized()\n\n    qapp.exec()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n在该目录下打开CMD（按住Shift->点击鼠标右键->在此处打开命令窗口/PowerShell）后运行下列命令启动VeighNa Trader：\n\n    python run.py\n\n## 贡献代码\n\nVeighNa使用Github托管其源代码，如果希望贡献代码请使用github的PR（Pull Request）的流程:\n\n1. [创建 Issue](https://github.com/vnpy/vnpy/issues/new) - 对于较大的改动（如新功能，大型重构等）建议先开issue讨论一下，较小的improvement（如文档改进，bugfix等）直接发PR即可\n\n2. Fork [VeighNa](https://github.com/vnpy/vnpy) - 点击右上角**Fork**按钮\n\n3. Clone你自己的fork: ```git clone https://github.com/$userid/vnpy.git```\n\t* 如果你的fork已经过时，需要手动sync：[同步方法](https://help.github.com/articles/syncing-a-fork/)\n\n4. 从**dev**创建你自己的feature branch: ```git checkout -b $my_feature_branch dev```\n\n5. 在$my_feature_branch上修改并将修改push到你的fork上\n\n6. 创建从你的fork的$my_feature_branch分支到主项目的**dev**分支的[Pull Request] -  [在此](https://github.com/vnpy/vnpy/compare?expand=1)点击**compare across forks**，选择需要的fork和branch创建PR\n\n7. 等待review, 需要继续改进，或者被Merge!\n\n在提交代码的时候，请遵守以下规则，以提高代码质量：\n\n  * 使用[flake8](https://pypi.org/project/flake8/)检查你的代码，确保没有error和warning。在项目根目录下运行```flake8```即可。\n\n## 其他内容\n\n* [获取帮助](https://github.com/vnpy/vnpy/blob/dev/.github/SUPPORT.md)\n* [社区行为准则](https://github.com/vnpy/vnpy/blob/dev/.github/CODE_OF_CONDUCT.md)\n* [Issue模板](https://github.com/vnpy/vnpy/blob/dev/.github/ISSUE_TEMPLATE.md)\n* [PR模板](https://github.com/vnpy/vnpy/blob/dev/.github/PULL_REQUEST_TEMPLATE.md)\n\n## 版权说明\n\nMIT\n"
        },
        {
          "name": "README_ENG.md",
          "type": "blob",
          "size": 17.88,
          "content": "# By Traders, For Traders.\n\n<p align=\"center\">\n  <img src =\"https://vnpy.oss-cn-shanghai.aliyuncs.com/vnpy-logo.png\"/>\n</p>\n\n<p align=\"center\">\n    <img src =\"https://img.shields.io/badge/version-3.9.4-blueviolet.svg\"/>\n    <img src =\"https://img.shields.io/badge/platform-windows|linux|macos-yellow.svg\"/>\n    <img src =\"https://img.shields.io/badge/python-3.10|3.11|3.12-blue.svg\" />\n    <img src =\"https://img.shields.io/github/actions/workflow/status/vnpy/vnpy/pythonapp.yml?branch=master\"/>\n    <img src =\"https://img.shields.io/github/license/vnpy/vnpy.svg?color=orange\"/>\n</p>\n\nVeighNa is a Python-based open source quantitative trading system development framework, officially released in January 2015, has grown step by step into a full-featured quantitative trading platform with 6 years of continuous contributions from the open source community, and currently has many users from domestic and international financial institutions, including: hedge funds, investment banks, futures brokers, university research institutions, proprietary trading companies, etc.\n\nThe new \"VeighNa Full Practical Advance\" online course series has been launched on the official WeChat account [**VeighNa开源量化**], covering CTA strategies (completed), options volatility trading (being updated) and more. To purchase, please scan the QR code below and click the [Advanced Course] button in the menu bar to.\n\n<p align=\"center\">\n  <img src =\"https://vnpy.oss-cn-shanghai.aliyuncs.com/vnpy_qr.jpg\"/>\n</p>\n\nIf you have any questions about using VeighNa for secondary development (strategies, modules, etc.), please check the [**VeighNa Project Documentation**](https://www.vnpy.com/docs/cn/index.html). If you can't solve it, please go to the [Questions and Help] section of the [**Official Community Forum**](https://www.vnpy.com/forum/) forum for help, or share your experience in the [Experience Sharing] section!\n\nFor financial institution users of VeighNa, a special [VeighNa Institutional Users Group] (QQ group number: 676499931) has been created to share issues related to institutional applications, such as: interbank market access, asset management O32 system, distributed deployment, etc. Please note that this group is only open to financial institution users, please specify: Name - Institution - Department when joining the group.\n\n## Functional Features\n\n1. Full-featured quantitative trading platform (vnpy.trader) that integrates a variety of trading interfaces and provides simple and easy-to-use APIs for specific strategy algorithm and function development, for quickly building quantitative trading applications required by traders.\n\n2. Trading interfaces (vnpy.gateway) covering all domestic and international trading varieties.\n\n    * Domestic market\n\n        * CTP ([ctp](https://www.github.com/vnpy/vnpy_ctp)): Domestic futures and options\n\n        * CTP Mini ([mini](https://www.github.com/vnpy/vnpy_mini)): domestic futures, options\n\n        * CTP Securities ([sopt](https://www.github.com/vnpy/vnpy_sopt)): ETF options\n\n        * FEMAS ([femas](https://www.github.com/vnpy/vnpy_femas)): domestic futures\n\n        * UFT ([uft](https://www.github.com/vnpy/vnpy_uft)): domestic futures, ETF options\n        \n        * Esunny ([esunny](https://www.github.com/vnpy/vnpy_esunny)): domestic futures, Gold TD\n\n        * APEX XSpeed ([sec](https://www.github.com/vnpy/vnpy_sec)): ETF options\n\n        * APEX HTS ([hts](https://www.github.com/vnpy/vnpy_hts)): ETF options\n\n        * XTP ([xtp](https://www.github.com/vnpy/vnpy_xtp)): domestic securities (A shares), ETF options\n\n        * TORA ([tora](https://www.github.com/vnpy/vnpy_tora)): domestic securities (A shares), ETF options\n\n        * Guotai Junan ([hft](https://www.github.com/vnpy/vnpy_hft)): domestic securities (A shares)\n        \n        * SGIT ([sgit](https://www.github.com/vnpy/vnpy_sgit)): spot precious metal, domestic futures\n\n        * KsGold ([ksgold](https://www.github.com/vnpy/vnpy_ksgold)): spot precious metal\n\n        * Rohon ([rohon](https://www.github.com/vnpy/vnpy_rohon)): futures management\n\n        * Jees ([jees](https://www.github.com/vnpy/vnpy_jees)): futures management\n\n        * ComStar ([comstar](https://www.github.com/vnpy/vnpy_comstar)): interbank fixed-income market\n        \n        * TTS ([tts](https://www.github.com/vnpy/vnpy_tts)): domestic futures (simulation)\n\n    * Overseas market\n\n        * Interactive Brokers ([ib](https://www.github.com/vnpy/vnpy_ib)): global securities, futures, options, foreign exchange, etc.\n\n        * Esunny 9.0 ([tap](https://www.github.com/vnpy/vnpy_tap)): global futures\n\n        * Direct Futures ([da](https://www.github.com/vnpy/vnpy_da)): global futures\n\n    * Special Applications\n\n        * RPC service ([rpc](https://www.github.com/vnpy/vnpy_rpcservice)): inter-process communication interface for distributed architecture\n\n3. Out-of-the-box trading applications for various quantitative strategies (vnpy.app).\n\n    * [cta_strategy](https://www.github.com/vnpy/vnpy_ctastrategy): CTA strategy engine module, which allows users to perform fine-grained control over the withdrawal behavior of delegates during the operation of CTA-type strategies while maintaining ease of use (reducing trading slippage, implementing high-frequency strategies)\n\n    * [cta_backtester](https://www.github.com/vnpy/vnpy_ctabacktester): CTA strategy backtester module, no need to use Jupyter Notebook, directly use the graphical interface to directly carry out strategy backtester analysis, parameter optimization and other related work\n\n    * [spread_trading](https://www.github.com/vnpy/vnpy_spreadtrading): spread trading module, support custom spreads, real-time calculation of spread quotes and positions, support semi-automatic spread algorithm trading and fully automatic spread strategy trading two modes\n\n    * [option_master](https://www.github.com/vnpy/vnpy_optionmaster): option trading module, designed for the domestic options market, supports a variety of option pricing models, implied volatility surface calculation, Greek value risk tracking and other functions\n\n    * [portfolio_strategy](https://www.github.com/vnpy/vnpy_portfoliostrategy): portfolio strategy module, designed for trading multi-contract quantitative strategies (Alpha, option arbitrage, etc.) at the same time, providing historical data backtesting and live automatic trading functions\n\n    * [algo_trading](https://www.github.com/vnpy/vnpy_algotrading): algorithm trading module, providing a variety of commonly used intelligent trading algorithms: TWAP, Sniper, Iceberg, BestLimit, etc.\n\n    * [script_trader](https://www.github.com/vnpy/vnpy_scripttrader): script strategy module, designed for multi-standard portfolio trading strategies, also can be directly in the command line to achieve REPL instructions in the form of trading, does not support the backtest function\n\n    * [paper_account](https://www.github.com/vnpy/vnpy_paperaccount): Simulation trading module, pure localization of simulation trading functions, based on the real-time quotes obtained from the trading interface for commission aggregation, providing commission transaction push and position records\n\n    * [chart_wizard](https://www.github.com/vnpy/vnpy_chartwizard): K-line chart module, based on RQData data service (futures) or trading interface (digital currency) to obtain historical data, and combined with Tick push to display real-time market changes\n\n    * [portfolio_manager](https://www.github.com/vnpy/vnpy_portfoliomanager): portfolio module, for all kinds of fundamental trading strategies, based on separate strategy sub-accounts, providing automatic tracking of trading positions and real-time profit and loss statistics\n\n    * [rpc_service](https://www.github.com/vnpy/vnpy_rpcservice): RPC service module, allowing a VeighNa Trader process to be started as a server, serving as a unified routing channel for quotes and trades, allowing multiple clients to connect at the same time, realizing a multi-process distributed system\n\n    * [data_manager](https://www.github.com/vnpy/vnpy_datamanager): Historical data management module, view the existing data in the database through the tree directory, select any time period data to view the field details, support CSV file data import and export\n\n    * [data_recorder](https://www.github.com/vnpy/vnpy_datarecorder): Quotes recording module, based on the graphical interface for configuration, according to the demand for real-time recording Tick or K-line quotes to the database, for strategy backtesting or live initialization\n\n    * [excel_rtd](https://www.github.com/vnpy/vnpy_excelrtd): Excel RTD (Real Time Data) real-time data service, based on pyxll module to achieve real-time push updates of various data (quotes, contracts, positions, etc.) in Excel\n\n    * [risk_manager](https://www.github.com/vnpy/vnpy_riskmanager): risk management module, providing statistics and restrictions on rules including trade flow control, number of orders placed, active orders, total number of cancelled orders, etc., effectively realizing front-end risk control functions\n    \n    * [web_trader](https://www.github.com/vnpy/vnpy_webtrader): The web service module is designed according to the requirements of B-S architecture, and implements a web server that provides active function call (REST) and passive data push (WebSocket)\n\n\n4. Python trading API interface package (vnpy.api), providing the underlying docking implementation of the above trading interface.\n    \n    * REST Client ([rest](https://www.github.com/vnpy/vnpy_rest)): The high-performance rest API client based on coroutine process asynchronous IO which adopts the programming model of event message cycle to support the sending of high concurrent real-time transaction requests\n    \n    * Websocket Client ([websocket](https://www.github.com/vnpy/vnpy_websocket)): The high-performance websocket API client based on coroutine process asynchronous IO supports which sharing event loops with REST Client to avoid multi-threaded performance loss caused by GIL\n\n\n5. simple and easy-to-use event-driven engine (vnpy.event), which is the core of event-driven trading program\n\n6. standardized management client (vnpy.database) interfacing with various databases.\n\n    * SQL class\n\n        * SQLite ([sqlite](https://www.github.com/vnpy/vnpy_sqlite)): lightweight single file database, no need to install and configure data service programs, default option of vnpy.py, suitable for novice users\n\n        * MySQL ([mysql](https://www.github.com/vnpy/vnpy_mysql)): the world's most popular open source relational database, extremely rich documentation, and can replace other high NewSQL compatible implementations (such as TiDB)\n\n        * PostgreSQL ([postgresql](https://www.github.com/vnpy/vnpy_postgresql)): more feature-rich open source relational database, support for new features through extension plug-ins, only recommended for skilled users\n\n    * NoSQL classes\n\n        * DolphinDB ([dolphindb](https://www.github.com/vnpy/vnpy_dolphindb)): A high-performance distributed temporal database developed by Zhejiang Zhiyu Technology Co., Ltd. is especially suitable for low latency or real-time tasks with high speed requirements\n        \n        * Arctic ([arctic](https://www.github.com/vnpy/vnpy_arctic)): The high-performance financial temporal database developed by quantitative hedge fund Man AHL based on mongodb which adopts performance optimization schemes such as partitioned storage and lz4 compression to achieve higher reading and writing efficiency than mongodb\n\n        * MongoDB ([mongodb](https://www.github.com/vnpy/vnpy_mongodb)): non-relational database based on distributed file storage (bson format), built-in memory cache of hot data provides faster read and write speeds\n        \n        * InfluxDB ([influxdb](https://www.github.com/vnpy/vnpy_influxdb)): non-relational database specially designed for time-series data, columnar data storage provides high read/write efficiency and peripheral analysis applications\n        \n        * LevelDB ([leveldb](https://www.github.com/vnpy/vnpy_leveldb)): The high-performance key/value database launched by Google which realizes the process memory storage engine based on LSM algorithm, and supports billions of levels of massive data\n\n7. Adapter interfaces for various data services:\n\n    * RQData ([rqdata](https://www.github.com/vnpy/vnpy_rqdata)): stocks, futures, options, funds, bonds, gold spot\n    \n    * UData ([udata](https://www.github.com/vnpy/vnpy_udata)): stock, futures, options\n    \n    * TuShare ([tushare](https://www.github.com/vnpy/vnpy_tushare)): stocks, futures, options, funds\n    \n    * Wind ([wind](https://www.github.com/vnpy/vnpy_wind)): stocks, futures, options, funds, bonds\n    \n    * Tinysoft ([tinysoft](https://www.github.com/vnpy/vnpy_tinysoft)): stocks, futures, options, funds, bonds\n    \n    * iFinD ([ifind](https://www.github.com/vnpy/vnpy_ifind)): stocks, futures, options, funds, bonds\n    \n    * TQSDK ([tqsdk](https://www.github.com/vnpy/vnpy_tqsdk)): futures\n\n\n8. Standard component for inter-process communication (vnpy.rpc) for implementing complex trading systems in distributed deployments\n\n9. Python high-performance K-line charts (vnpy.chart), supporting large data volume chart display and real-time data update functions\n\n10.  [Community Forum](http://www.vnpy.com) and [Zhihu Blog](http://zhuanlan.zhihu.com/vn-py), which include the development tutorial of VeighNa project and the research on the application of Python in the field of quantitative trading, etc.\n\n11. The official communication group 262656087 (QQ), with strict management (regular purging of long-term diving members), and the membership fee will be donated to the VeighNa community fund.\n\n## Environment preparation\n\n* We recommend using the Python distribution [VeighNa Studio-2.9.0](https://download.vnpy.com/veighna-studio-2.9.0.exe), which is built with the latest version of VeighNa framework and VeighNa Station quantitative management platform, specifically created by the VeighNa team for quantitative trading. Manual installation\n* Supported system versions: Windows 10 or above/Windows Server 2019 or above/Ubuntu 22.04 LTS\n* Supported Python version: Python 3.10 64-bit or above\n\n## Installation steps\n\nDownload the latest version from [here](https://github.com/vnpy/vnpy/releases), unzip it and run the following command to install it.\n\n**Windows**\n\n```\ninstall.bat\n```\n\n**Ubuntu**\n\n```\n. install.sh\n```\n\n**Macos**\n\n```\nbash install_osx.sh\n```\n\n## User's Guide\n\n1. Register a CTP Demo account at [SimNow](http://www.simnow.com.cn/) and get the broker code and the trading quotes server address at [this page](http://www.simnow.com.cn/product.action).\n\n2. Register at [VeighNa community forum](https://www.vnpy.com/forum/) to get the VeighNa Station account password (the forum account password is)\n\n3. Launch VeighNa Station (a shortcut will be created automatically on your desktop after installing VeighNa Studio), enter the account password from the previous step and login\n\n4. Click on the **VeighNa Trader** button at the bottom and start your trading!\n\nAttention.\n\n* Please do not close VeighNa Station during the running of VeighNa Trader (it will exit automatically)\n* For flexible configuration of quantitative trading application components, please use **VeighNa Trader**\n\n## Script Run\n\nIn addition to the graphical start-up method based on VeighNa Station, you can also create run.py in any directory and write the following sample code.\n\n```Python\nfrom vnpy.event import EventEngine\nfrom vnpy.trader.engine import MainEngine\nfrom vnpy.trader.ui import MainWindow, create_qapp\nfrom vnpy_ctp import CtpGateway\nfrom vnpy_ctastrategy import CtaStrategyApp\nfrom vnpy_ctabacktester import CtaBacktesterApp\n\ndef main():\n    qapp = create_qapp()\n\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    \n    main_engine.add_gateway(CtpGateway)\n    main_engine.add_app(CtaStrategyApp)\n    main_engine.add_app(CtaBacktesterApp)\n\n    main_window = MainWindow(main_engine, event_engine)\n    main_window.showMaximized()\n\n    qapp.exec()\n\nif __name__ == \"__main__\"。\n    main()\n```\n\nOpen CMD in that directory (hold Shift->click right mouse button->open command window/PowerShell here) and then run the following command to start VeighNa Trader.\n\n    python run.py\n    \n## Contributing code\n\nVeighNa uses Github to host its source code, if you wish to contribute code please use the PR (Pull Request) process of github:\n\n1. [create Issue](https://github.com/vnpy/vnpy/issues/new) - For the larger changes (such as new features, large refactoring, etc.) it is best to first open an issue to discuss, and smaller improvements (such as document improvements, bugfixes, etc.) can be sent directly to PR\n\n2. Fork [VeighNa](https://github.com/vnpy/vnpy) - Click the **Fork** button in the upper right corner\n\n3. CloneYour own fork: ```git clone https://github.com/$userid/vnpy.git```\n\n\t* If your fork is out of date, you need to manually sync: [Synchronization method](https://help.github.com/articles/syncing-a-fork/)\n\n4. Create your own feature branch from **dev**: ```git checkout -b $my_feature_branch dev```\n\n5. Make changes on $my_feature_branch and push the changes to your fork\n\n6. Create a [Pull Request] from your fork's $my_feature_branch branch to the main project's **dev** branch - [here](https://github.com/vnpy/vnpy/compare?expand=1) Click on **compare across forks** and select the required fork and branch to create the PR\n\n7. Waiting for review, need to continue to improve, or be Merge!\n\nWhen submitting code, please observe the following rules to improve the quality of the code:\n\n  * Check your code with [flake8](https://pypi.org/project/flake8/) to make sure there are no errors and warnings. Just run ``flake8`` in the project root directory.\n\n\n## Other content\n\n* [Getting Help](https://github.com/vnpy/vnpy/blob/dev/.github/SUPPORT.md)\n* [Community Conduct side](https://github.com/vnpy/vnpy/blob/dev/.github/CODE_OF_CONDUCT.md)\n* [Issue templates](https://github.com/vnpy/vnpy/blob/dev/.github/ISSUE_TEMPLATE.md)\n* [PR templates](https://github.com/vnpy/vnpy/blob/dev/.github/PULL_REQUEST_TEMPLATE.md)\n\n\n\n## Copyright statement\n\nMIT\n  \n\n\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.bat",
          "type": "blob",
          "size": 0.53,
          "content": "@ECHO OFF\nSET python=%1\nSET pypi_index=%2\nIF     %python%\"\"     == \"\" SET python=python\nIF     %pypi_index%\"\" == \"\" SET pypi_index=https://pypi.vnpy.com\nIF NOT %pypi_index%\"\" == \"\" SET pypi_index=--index-url %pypi_index%\n@ECHO ON\n\n:: Upgrade pip & wheel\n%python% -m pip install --upgrade pip wheel %pypi_index%\n\n::Install prebuild wheel\n%python% -m pip install --extra-index-url https://pypi.vnpy.com TA_Lib==0.4.24\n\n::Install Python Modules\n%python% -m pip install -r requirements.txt %pypi_index%\n\n:: Install VeighNa\n%python% -m pip install ."
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.93,
          "content": "#!/usr/bin/env bash\n\npython=$1\npypi_index=$2\nshift 2\n\n\n[[ -z $python ]] && python=python3\n[[ -z $pypi_index ]] && pypi_index=https://pypi.vnpy.com\n\n$python -m pip install --upgrade pip wheel --index $pypi_index\n\n# Get and build ta-lib\nfunction install-ta-lib()\n{   \n    # install numpy first\n    $python -m pip install numpy==1.23.1 --index $pypi_index\n\n    pushd /tmp\n    wget https://pip.vnpy.com/colletion/ta-lib-0.4.0-src.tar.gz\n    tar -xf ta-lib-0.4.0-src.tar.gz\n    cd ta-lib\n    ./configure --prefix=/usr/local\n    make -j1\n    make install\n    popd\n\n    $python -m pip install ta-lib==0.4.24 --index $pypi_index\n}\nfunction ta-lib-exists()\n{\n    $prefix/ta-lib-config --libs > /dev/null\n}\nta-lib-exists || install-ta-lib\n\n# Install Python Modules\n$python -m pip install -r requirements.txt --index $pypi_index\n\n# Install local Chinese language environment\nlocale-gen zh_CN.GB18030\n\n# Install VeighNa\n$python -m pip install . --index $pypi_index\n"
        },
        {
          "name": "install_osx.sh",
          "type": "blob",
          "size": 0.7,
          "content": "#!/usr/bin/env bash\n\npython=$1\npypi_index=$2\nshift 2\n\n[[ -z $python ]] && python=python3\n[[ -z $pypi_index ]] && pypi_index=https://pypi.vnpy.com\n\n$python -m pip install --upgrade pip wheel --index $pypi_index\n\n# Get and build ta-lib\nfunction install-ta-lib()\n{\n    export HOMEBREW_NO_AUTO_UPDATE=true\n    brew install ta-lib\n}\nfunction ta-lib-exists()\n{\n    ta-lib-config --libs > /dev/null\n}\nta-lib-exists || install-ta-lib\n\n# install ta-lib\n$python -m pip install numpy==1.23.1 --index $pypi_index\n$python -m pip install ta-lib==0.4.24 --index $pypi_index\n\n# Install Python Modules\n$python -m pip install -r requirements.txt --index $pypi_index\n\n# Install VeighNa\n$python -m pip install . --index $pypi_index\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.22,
          "content": "tzlocal==5.2\nPySide6==6.3.0\npyqtgraph==0.13.4\nqdarkstyle==3.2.3\nnumpy==1.26.4\npandas==2.2.1\nmatplotlib==3.8.3\nseaborn==0.13.2\nta-lib==0.4.24\ndeap==1.4.1\npyzmq==25.1.2\nplotly==5.20.0\nimportlib-metadata==7.0.2\ntqdm==4.66.2\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.32,
          "content": "[metadata]\nname = vnpy\nversion = attr: vnpy.__version__\nauthor = Xiaoyou Chen\nauthor_email = xiaoyou.chen@mail.vnpy.com\ndescription = A framework for developing quant trading systems.\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://www.vnpy.com\nlicense = MIT\nlicense_files = LICENSE\nkeywords =\n    quant\n    quantitative\n    investment\n    trading\n    algotrading\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Operating System :: Microsoft :: Windows\n    Operating System :: POSIX :: Linux\n    Operating System :: MacOS\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Topic :: Office/Business :: Financial :: Investment\n    Programming Language :: Python :: Implementation :: CPython\n    License :: OSI Approved :: MIT License\n    Natural Language :: Chinese (Simplified)\nproject_urls =\n\tDocumentation = https://www.vnpy.com/docs\n\n[options]\npackages = find:\ninclude_package_data = True\nzip_safe = False\ninstall_requires =\n    tzlocal\n    PySide6\n    pyqtgraph\n    qdarkstyle\n    numpy\n    pandas\n    matplotlib\n    seaborn\n    ta-lib\n    deap\n    pyzmq\n    plotly\n    tqdm\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.46,
          "content": "import sys\nimport subprocess\nfrom pathlib import Path\nfrom setuptools import setup\n\n\n# Generate i18n mo files\npython_path: Path = Path(sys.executable)\nmsgfmt_path: Path = python_path.parent.joinpath(\"Tools\", \"i18n\", \"msgfmt.py\")\n\ngenerate_mo_cmd = [\n    str(python_path),\n    str(msgfmt_path),\n    \"-o\",\n    \".\\\\vnpy\\\\trader\\\\locale\\\\en\\\\LC_MESSAGES\\\\vnpy.mo\",\n    \".\\\\vnpy\\\\trader\\\\locale\\\\en\\\\LC_MESSAGES\\\\vnpy\"\n]\n\nsubprocess.run(generate_mo_cmd)\n\n\n# Run setup\nsetup()\n"
        },
        {
          "name": "vnpy",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}